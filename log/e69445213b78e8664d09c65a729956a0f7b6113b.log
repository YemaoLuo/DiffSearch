e69445213b78e8664d09c65a729956a0f7b6113b
==================================================
Clean-up. Reformatting. No functional change.
==================================================
Mark Thomas
==================================================
Wed Feb 22 18:07:58 2023 +0000
==================================================
TestArrayELResolver.java
Clean-up. Reformatting. No functional change.


==================================================
TestBeanELResolver.java
index bc359fcd89..769494d43e 100644
--- a/test/jakarta/el/TestArrayELResolver.java
+++ b/test/jakarta/el/TestArrayELResolver.java
@@ -35,8 +35,7 @@ public class TestArrayELResolver {
      */
     @Test
     public void testGetType02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE, true);
     }
 
     /**
@@ -45,8 +44,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetType03() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Class<?> result = resolver.getType(context, base, Integer.valueOf(0));
@@ -61,8 +59,7 @@ public class TestArrayELResolver {
     @Test(expected = PropertyNotFoundException.class)
     public void testGetType04() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.getType(context, base, Integer.valueOf(1));
@@ -74,8 +71,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetType05() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Class<?> result = resolver.getType(context, base, "index");
@@ -90,8 +86,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetType06() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Class<?> result = resolver.getType(context, null, "index");
 
@@ -113,8 +108,7 @@ public class TestArrayELResolver {
      */
     @Test
     public void testGetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE, true);
     }
 
     /**
@@ -123,8 +117,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetValue03() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Object result = resolver.getValue(context, base, Integer.valueOf(0));
@@ -136,8 +129,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetValueCoercion01() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Object result = resolver.getValue(context, base, Character.valueOf((char) 0));
@@ -149,8 +141,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetValueCoercion02a() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Object result = resolver.getValue(context, base, Boolean.FALSE);
@@ -162,8 +153,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetValueCoercion02b() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Object result = resolver.getValue(context, base, Boolean.TRUE);
@@ -175,8 +165,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetValueCoercion03() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Object result = resolver.getValue(context, base, "0");
@@ -188,8 +177,7 @@ public class TestArrayELResolver {
     @Test(expected = IllegalArgumentException.class)
     public void testGetValueCoercion04() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.getValue(context, base, new Object());
@@ -198,8 +186,7 @@ public class TestArrayELResolver {
     @Test(expected = IllegalArgumentException.class)
     public void testGetValueCoercion05() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.getValue(context, base, null);
@@ -211,8 +198,7 @@ public class TestArrayELResolver {
     @Test(expected = IllegalArgumentException.class)
     public void testGetValueCoercion06() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.getValue(context, base, "key");
@@ -224,8 +210,7 @@ public class TestArrayELResolver {
     @Test
     public void testGetValue05() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         Object result = resolver.getValue(context, base, Integer.valueOf(1));
@@ -253,8 +238,7 @@ public class TestArrayELResolver {
      */
     @Test
     public void testSetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE,
-                false);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE, false);
     }
 
     /**
@@ -263,8 +247,7 @@ public class TestArrayELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue03() {
         ArrayELResolver resolver = new ArrayELResolver(true);
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         resolver.setValue(context, new String[] {}, new Object(), new Object());
     }
@@ -275,20 +258,17 @@ public class TestArrayELResolver {
     @Test
     public void testSetValue04() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.setValue(context, base, Integer.valueOf(0), "new-element");
 
-        Assert.assertEquals("new-element",
-                resolver.getValue(context, base, Integer.valueOf(0)));
+        Assert.assertEquals("new-element", resolver.getValue(context, base, Integer.valueOf(0)));
         Assert.assertTrue(context.isPropertyResolved());
 
         resolver.setValue(context, base, Integer.valueOf(0), null);
 
-        Assert.assertEquals(null,
-                resolver.getValue(context, base, Integer.valueOf(0)));
+        Assert.assertEquals(null, resolver.getValue(context, base, Integer.valueOf(0)));
         Assert.assertTrue(context.isPropertyResolved());
     }
 
@@ -298,8 +278,7 @@ public class TestArrayELResolver {
     @Test(expected = IllegalArgumentException.class)
     public void testSetValue05() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.setValue(context, base, "key", "new-element");
@@ -311,36 +290,31 @@ public class TestArrayELResolver {
     @Test(expected = PropertyNotFoundException.class)
     public void testSetValue06() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.setValue(context, base, Integer.valueOf(1), "new-element");
     }
 
     /**
-     * Tests that an exception will be thrown if the value is not from the
-     * corresponding type.
+     * Tests that an exception will be thrown if the value is not from the corresponding type.
      */
     @Test(expected = ClassCastException.class)
     public void testSetValue07() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.setValue(context, base, Integer.valueOf(0), Integer.valueOf(1));
     }
 
     /**
-     * Tests setting arrays of primitives.
-     * https://bz.apache.org/bugzilla/show_bug.cgi?id=55691
+     * Tests setting arrays of primitives. https://bz.apache.org/bugzilla/show_bug.cgi?id=55691
      */
     @Test
     public void testSetValue08() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         int[] base = new int[] { 1, 2, 3 };
         resolver.setValue(context, base, Integer.valueOf(1), Integer.valueOf(4));
@@ -354,8 +328,7 @@ public class TestArrayELResolver {
     @Test
     public void testSetValue09() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         resolver.setValue(context, null, Integer.valueOf(1), Integer.valueOf(4));
         Assert.assertFalse(context.isPropertyResolved());
@@ -376,11 +349,9 @@ public class TestArrayELResolver {
     @Test
     public void testIsReadOnly02() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, new Object(),
-                new Object());
+        boolean result = resolver.isReadOnly(context, new Object(), new Object());
 
         Assert.assertFalse(result);
         Assert.assertFalse(context.isPropertyResolved());
@@ -394,14 +365,13 @@ public class TestArrayELResolver {
     }
 
     /**
-     * Tests that if the ArrayELResolver is constructed with readOnly the method
-     * will return always true, otherwise false.
+     * Tests that if the ArrayELResolver is constructed with readOnly the method will return always true, otherwise
+     * false.
      */
     @Test
     public void testIsReadOnly03() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         boolean result = resolver.isReadOnly(context, base, Integer.valueOf(0));
@@ -432,8 +402,7 @@ public class TestArrayELResolver {
 
     private void doTestIsReadOutOfBounds(int index) {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         resolver.isReadOnly(context, base, Integer.valueOf(index));
@@ -446,8 +415,7 @@ public class TestArrayELResolver {
     @Test
     public void testIsReadOnly06() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
         boolean result = resolver.isReadOnly(context, base, "key");
@@ -466,8 +434,7 @@ public class TestArrayELResolver {
     @Test
     public void testIsReadOnly07() {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         boolean result = resolver.isReadOnly(context, null, null);
 
@@ -482,30 +449,28 @@ public class TestArrayELResolver {
         Assert.assertFalse(context.isPropertyResolved());
     }
 
-    private void doNegativeTest(Object base, Object trigger,
-            MethodUnderTest method, boolean checkResult) {
+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method, boolean checkResult) {
         ArrayELResolver resolver = new ArrayELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = null;
         switch (method) {
-        case GET_VALUE: {
-            result = resolver.getValue(context, base, trigger);
-            break;
-        }
-        case SET_VALUE: {
-            resolver.setValue(context, base, trigger, new Object());
-            break;
-        }
-        case GET_TYPE: {
-            result = resolver.getType(context, base, trigger);
-            break;
-        }
-        default: {
-            // Should never happen
-            Assert.fail("Missing case for method");
-        }
+            case GET_VALUE: {
+                result = resolver.getValue(context, base, trigger);
+                break;
+            }
+            case SET_VALUE: {
+                resolver.setValue(context, base, trigger, new Object());
+                break;
+            }
+            case GET_TYPE: {
+                result = resolver.getType(context, base, trigger);
+                break;
+            }
+            default: {
+                // Should never happen
+                Assert.fail("Missing case for method");
+            }
         }
 
         if (checkResult) {
@@ -515,7 +480,9 @@ public class TestArrayELResolver {
     }
 
     private enum MethodUnderTest {
-        GET_VALUE, SET_VALUE, GET_TYPE
+        GET_VALUE,
+        SET_VALUE,
+        GET_TYPE
     }
 
 
@@ -539,7 +506,7 @@ public class TestArrayELResolver {
     public void testGetCommonPropertyType03() {
         // array base, Integer response
         ArrayELResolver resolver = new ArrayELResolver();
-        Class<?> clazz = resolver.getCommonPropertyType(null, new Object[]{});
+        Class<?> clazz = resolver.getCommonPropertyType(null, new Object[] {});
         Assert.assertNotNull(clazz);
         Assert.assertEquals(clazz, Integer.class);
     }

==================================================
TestBeanELResolverVarargsInvocation.java
index 073ce4798e..be0b706ccc 100644
--- a/test/jakarta/el/TestBeanELResolver.java
+++ b/test/jakarta/el/TestBeanELResolver.java
@@ -45,13 +45,11 @@ public class TestBeanELResolver {
 
         Bean bean = new Bean();
 
-        ValueExpression varBean =
-            factory.createValueExpression(bean, Bean.class);
+        ValueExpression varBean = factory.createValueExpression(bean, Bean.class);
         context.getVariableMapper().setVariable("bean", varBean);
 
 
-        ValueExpression ve = factory.createValueExpression(
-                context, "${bean.valueA}", String.class);
+        ValueExpression ve = factory.createValueExpression(context, "${bean.valueA}", String.class);
         Exception e = null;
         try {
             ve.getValue(context);
@@ -62,8 +60,7 @@ public class TestBeanELResolver {
         String type = Bean.class.getName();
         @SuppressWarnings("null") // Not possible due to test above
         String msg = e.getMessage();
-        Assert.assertTrue("No reference to type [" + type +
-                "] where property cannot be found in [" + msg + "]",
+        Assert.assertTrue("No reference to type [" + type + "] where property cannot be found in [" + msg + "]",
                 msg.contains(type));
     }
 
@@ -111,8 +108,7 @@ public class TestBeanELResolver {
     }
 
     /**
-     * Tests that an exception will be thrown when a coercion cannot be
-     * performed.
+     * Tests that an exception will be thrown when a coercion cannot be performed.
      */
     @Test(expected = PropertyNotFoundException.class)
     public void testGetType05() {
@@ -165,8 +161,7 @@ public class TestBeanELResolver {
     }
 
     /**
-     * Tests that an exception will be thrown when a coercion cannot be
-     * performed.
+     * Tests that an exception will be thrown when a coercion cannot be performed.
      */
     @Test(expected = PropertyNotFoundException.class)
     public void testGetValue05() {
@@ -242,8 +237,7 @@ public class TestBeanELResolver {
     }
 
     /**
-     * Tests that an exception will be thrown when a coercion cannot be
-     * performed.
+     * Tests that an exception will be thrown when a coercion cannot be performed.
      */
     @Test(expected = PropertyNotFoundException.class)
     public void testSetValue05() {
@@ -265,8 +259,7 @@ public class TestBeanELResolver {
     }
 
     /**
-     * Tests that an exception will be thrown when the property does not have
-     * setter method.
+     * Tests that an exception will be thrown when the property does not have setter method.
      */
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue07() {
@@ -305,8 +298,7 @@ public class TestBeanELResolver {
     }
 
     /**
-     * Tests that if the BeanELResolver is constructed with readOnly the method
-     * will return always true.
+     * Tests that if the BeanELResolver is constructed with readOnly the method will return always true.
      */
     @Test
     public void testIsReadOnly03() {
@@ -349,8 +341,7 @@ public class TestBeanELResolver {
     }
 
     /**
-     * Tests that true will be returned when the property does not have setter
-     * method.
+     * Tests that true will be returned when the property does not have setter method.
      */
     @Test
     public void testIsReadOnly06() {
@@ -388,8 +379,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD01_NAME,
-                new Class<?>[] {}, new Object[] {});
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD01_NAME, new Class<?>[] {},
+                new Object[] {});
 
         Assert.assertEquals(BEAN_NAME, result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -411,8 +402,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD02_NAME, new Class<?>[] {},
-                new Object[] {});
+        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD02_NAME, new Class<?>[] {}, new Object[] {});
     }
 
     /**
@@ -423,8 +413,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD03_NAME, new Class<?>[] {},
-                new Object[] {});
+        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD03_NAME, new Class<?>[] {}, new Object[] {});
     }
 
     @Test
@@ -432,8 +421,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] {}, new String[] {});
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] {},
+                new String[] {});
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -443,8 +432,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                null, null);
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", null, null);
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -454,8 +442,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                null, new String[] {});
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", null, new String[] {});
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -465,8 +452,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] {}, null);
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] {}, null);
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -476,8 +462,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { null }, new String[] { null });
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] { null },
+                new String[] { null });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -487,8 +473,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                null, new String[] { null });
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", null,
+                new String[] { null });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -498,8 +484,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { null }, null);
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] { null },
+                null);
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -581,7 +567,7 @@ public class TestBeanELResolver {
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargsCoerce15() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
@@ -598,25 +584,23 @@ public class TestBeanELResolver {
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { String.class, String.class, String.class },
-                new Object[] { "10", "11", "12" });
+                new Class<?>[] { String.class, String.class, String.class }, new Object[] { "10", "11", "12" });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargsCoerce17() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { String.class, String.class },
-                new Object[] { "10", "11", "12" });
+                new Class<?>[] { String.class, String.class }, new Object[] { "10", "11", "12" });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargsCoerce18() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
@@ -640,19 +624,18 @@ public class TestBeanELResolver {
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargsCoerce20() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { String.class, String.class, String.class },
-                new Object[] { "true", "10", "11", "12" });
+                new Class<?>[] { String.class, String.class, String.class }, new Object[] { "true", "10", "11", "12" });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargsCoerce21() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
@@ -671,20 +654,18 @@ public class TestBeanELResolver {
         context.addELResolver(new StringToLongNeverFailResolver());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { String.class, String.class, String.class },
-                new Object[] { "AA", "BB", "CC" });
+                new Class<?>[] { String.class, String.class, String.class }, new Object[] { "AA", "BB", "CC" });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargsCoerce23() {
         BeanELResolver resolver = new BeanELResolver();
         StandardELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { String.class, String.class, String.class },
-                new Object[] { "AA", "BB", "CC" });
+                new Class<?>[] { String.class, String.class, String.class }, new Object[] { "AA", "BB", "CC" });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -694,8 +675,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] {}, new Object[] {});
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] {},
+                new Object[] {});
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -705,8 +686,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                null, null);
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", null, null);
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -716,8 +696,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                null, new Object[] {});
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", null, new Object[] {});
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -727,8 +706,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] {}, null);
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] {}, null);
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -738,8 +716,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { null }, new Object[] { null });
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] { null },
+                new Object[] { null });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -749,8 +727,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                null, new Object[] { null });
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", null,
+                new Object[] { null });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -760,8 +738,8 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { null }, null);
+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs", new Class<?>[] { null },
+                null);
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -827,13 +805,14 @@ public class TestBeanELResolver {
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
-                new Class<?>[] { Integer.class, Integer.class }, new Object[] { Integer.valueOf(10), Integer.valueOf(11) });
+                new Class<?>[] { Integer.class, Integer.class },
+                new Object[] { Integer.valueOf(10), Integer.valueOf(11) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
     // Note: The coercion rules are that a null of any type can be coerced to a
-    //       null of *any* other type so this works.
+    // null of *any* other type so this works.
     @Test
     public void testInvokeVarargs14() {
         BeanELResolver resolver = new BeanELResolver();
@@ -845,7 +824,7 @@ public class TestBeanELResolver {
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargs15() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
@@ -863,31 +842,31 @@ public class TestBeanELResolver {
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
                 new Class<?>[] { Integer.class, Integer.class, Integer.class },
-                new Object[] { Integer.valueOf(10), Integer.valueOf(11),  Integer.valueOf(12) });
+                new Object[] { Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargs17() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
                 new Class<?>[] { Integer.class, Integer.class },
-                new Object[] { Integer.valueOf(10), Integer.valueOf(11),  Integer.valueOf(12) });
+                new Object[] { Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargs18() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
                 new Class<?>[] { Integer.class, Integer.class, Integer.class, Integer.class },
-                new Object[] { Integer.valueOf(10), Integer.valueOf(11),  Integer.valueOf(12) });
+                new Object[] { Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -899,31 +878,31 @@ public class TestBeanELResolver {
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
                 new Class<?>[] { Boolean.class, Integer.class, Integer.class, Integer.class },
-                new Object[] { Boolean.TRUE, Integer.valueOf(10), Integer.valueOf(11),  Integer.valueOf(12) });
+                new Object[] { Boolean.TRUE, Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargs20() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
                 new Class<?>[] { Boolean.class, Integer.class, Integer.class },
-                new Object[] { Boolean.TRUE, Integer.valueOf(10), Integer.valueOf(11),  Integer.valueOf(12) });
+                new Object[] { Boolean.TRUE, Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
 
-    @Test(expected=MethodNotFoundException.class)
+    @Test(expected = MethodNotFoundException.class)
     public void testInvokeVarargs21() {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), "getNameVarargs",
                 new Class<?>[] { Boolean.class, Integer.class, Integer.class, Integer.class, Integer.class },
-                new Object[] { Boolean.TRUE, Integer.valueOf(10), Integer.valueOf(11),  Integer.valueOf(12) });
+                new Object[] { Boolean.TRUE, Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) });
 
         Assert.assertEquals(BEAN_NAME, result);
     }
@@ -959,33 +938,32 @@ public class TestBeanELResolver {
     }
 
 
-    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method,
-            boolean checkResult) {
+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method, boolean checkResult) {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = null;
         switch (method) {
-        case GET_VALUE: {
-            result = resolver.getValue(context, base, trigger);
-            break;
-        }
-        case SET_VALUE: {
-            resolver.setValue(context, base, trigger, new Object());
-            break;
-        }
-        case GET_TYPE: {
-            result = resolver.getType(context, base, trigger);
-            break;
-        }
-        case INVOKE: {
-            result = resolver.invoke(context, base, trigger, new Class<?>[0], new Object[0]);
-            break;
-        }
-        default: {
-            // Should never happen
-            Assert.fail("Missing case for method");
-        }
+            case GET_VALUE: {
+                result = resolver.getValue(context, base, trigger);
+                break;
+            }
+            case SET_VALUE: {
+                resolver.setValue(context, base, trigger, new Object());
+                break;
+            }
+            case GET_TYPE: {
+                result = resolver.getType(context, base, trigger);
+                break;
+            }
+            case INVOKE: {
+                result = resolver.invoke(context, base, trigger, new Class<?>[0], new Object[0]);
+                break;
+            }
+            default: {
+                // Should never happen
+                Assert.fail("Missing case for method");
+            }
         }
 
         if (checkResult) {
@@ -995,13 +973,16 @@ public class TestBeanELResolver {
     }
 
     private enum MethodUnderTest {
-        GET_VALUE, SET_VALUE, GET_TYPE, INVOKE
+        GET_VALUE,
+        SET_VALUE,
+        GET_TYPE,
+        INVOKE
     }
 
 
     /*
-     * Custom resolver that will always convert a string to an integer. If the
-     * provided string is not a valid integer, zero will be returned.
+     * Custom resolver that will always convert a string to an integer. If the provided string is not a valid integer,
+     * zero will be returned.
      */
     private static class StringToLongNeverFailResolver extends ELResolver {
 

==================================================
TestBeanNameELResolver.java
index 926b25191a..89f913f6b1 100644
--- a/test/jakarta/el/TestBeanELResolverVarargsInvocation.java
+++ b/test/jakarta/el/TestBeanELResolverVarargsInvocation.java
@@ -58,8 +58,7 @@ public class TestBeanELResolverVarargsInvocation {
                 private Map<String, ValueExpression> vars = new HashMap<>();
 
                 @Override
-                public ValueExpression setVariable(String arg0,
-                        ValueExpression arg1) {
+                public ValueExpression setVariable(String arg0, ValueExpression arg1) {
                     if (arg1 == null) {
                         return vars.remove(arg0);
                     } else {
@@ -102,21 +101,18 @@ public class TestBeanELResolverVarargsInvocation {
      */
     @Test
     public void testJoinDelimited() {
-        Assert.assertEquals(foo.joinDelimited("-", "foo", "bar", "baz"),
-            beanELResolver.invoke(elContext, foo, "joinDelimited", null,
-                    new Object[] { "-", "foo", "bar", "baz" }));
+        Assert.assertEquals(foo.joinDelimited("-", "foo", "bar", "baz"), beanELResolver.invoke(elContext, foo,
+                "joinDelimited", null, new Object[] { "-", "foo", "bar", "baz" }));
     }
 
     /**
-     * Tests varargs that constitute a method's only parameters, as well as
-     * bogus results due to improper matching of ANY vararg method, and
-     * depending on the order in which reflected methods are encountered.
+     * Tests varargs that constitute a method's only parameters, as well as bogus results due to improper matching of
+     * ANY vararg method, and depending on the order in which reflected methods are encountered.
      */
     @Test
     public void testJoin() {
         Assert.assertEquals(foo.join("foo", "bar", "baz"),
-            beanELResolver.invoke(elContext, foo, "join", null,
-                    new Object[] { "foo", "bar", "baz" }));
+                beanELResolver.invoke(elContext, foo, "join", null, new Object[] { "foo", "bar", "baz" }));
     }
 
 }
\ No newline at end of file

==================================================
TestCompositeELResolver.java
index bc92c5456c..1ab43b3463 100644
--- a/test/jakarta/el/TestBeanNameELResolver.java
+++ b/test/jakarta/el/TestBeanNameELResolver.java
@@ -29,8 +29,7 @@ public class TestBeanNameELResolver {
     private static final TesterBean BEAN99 = new TesterBean(BEAN99_NAME);
 
     /**
-     * Creates the resolver that is used for the test. All the tests use a
-     * resolver with the same configuration.
+     * Creates the resolver that is used for the test. All the tests use a resolver with the same configuration.
      */
     private BeanNameELResolver createBeanNameELResolver() {
         return createBeanNameELResolver(true);
@@ -43,8 +42,7 @@ public class TestBeanNameELResolver {
         beanNameResolver.setBeanValue(BEAN02_NAME, BEAN02);
         beanNameResolver.setAllowCreate(allowCreate);
 
-        BeanNameELResolver beanNameELResolver =
-                new BeanNameELResolver(beanNameResolver);
+        BeanNameELResolver beanNameELResolver = new BeanNameELResolver(beanNameResolver);
         return beanNameELResolver;
     }
 
@@ -52,7 +50,7 @@ public class TestBeanNameELResolver {
     /**
      * Tests that a null context results in an NPE as per EL Javadoc.
      */
-    @Test(expected=NullPointerException.class)
+    @Test(expected = NullPointerException.class)
     public void testGetValue01() {
         BeanNameELResolver resolver = createBeanNameELResolver();
         resolver.getValue(null, new Object(), new Object());
@@ -66,8 +64,7 @@ public class TestBeanNameELResolver {
     public void testGetValue02() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.getValue(context, null, BEAN01_NAME);
 
@@ -83,8 +80,7 @@ public class TestBeanNameELResolver {
     public void testGetValue03() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.getValue(context, new Object(), BEAN01_NAME);
 
@@ -94,15 +90,14 @@ public class TestBeanNameELResolver {
 
 
     /**
-     * Tests that a valid bean is not resolved if property is not a String even
-     * if it can be coerced to a valid bean name.
+     * Tests that a valid bean is not resolved if property is not a String even if it can be coerced to a valid bean
+     * name.
      */
     @Test
     public void testGetValue04() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object property = new Object() {
             @Override
@@ -125,8 +120,7 @@ public class TestBeanNameELResolver {
     public void testGetValue05() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.getValue(context, null, BEAN99_NAME);
 
@@ -140,8 +134,7 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testGetValue06() {
-        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME,
-                MethodUnderTest.GET_VALUE);
+        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME, MethodUnderTest.GET_VALUE);
     }
 
 
@@ -150,15 +143,14 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testGetValue07() {
-        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME,
-                MethodUnderTest.GET_VALUE);
+        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME, MethodUnderTest.GET_VALUE);
     }
 
 
     /**
      * Tests that a null context results in an NPE as per EL Javadoc.
      */
-    @Test(expected=NullPointerException.class)
+    @Test(expected = NullPointerException.class)
     public void testSetValue01() {
         BeanNameELResolver resolver = createBeanNameELResolver();
         resolver.setValue(null, new Object(), new Object(), new Object());
@@ -204,20 +196,18 @@ public class TestBeanNameELResolver {
     /**
      * Test replacing a read-only bean with create enabled.
      */
-    @Test(expected=PropertyNotWritableException.class)
+    @Test(expected = PropertyNotWritableException.class)
     public void testSetValue06() {
-        doSetValueCreateReplaceTest(true,
-                TesterBeanNameResolver.READ_ONLY_NAME);
+        doSetValueCreateReplaceTest(true, TesterBeanNameResolver.READ_ONLY_NAME);
     }
 
 
     /**
      * Test replacing a read-only bean with create disable.
      */
-    @Test(expected=PropertyNotWritableException.class)
+    @Test(expected = PropertyNotWritableException.class)
     public void testSetValue07() {
-        doSetValueCreateReplaceTest(false,
-                TesterBeanNameResolver.READ_ONLY_NAME);
+        doSetValueCreateReplaceTest(false, TesterBeanNameResolver.READ_ONLY_NAME);
     }
 
 
@@ -226,8 +216,7 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testSetValue08() {
-        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME,
-                MethodUnderTest.SET_VALUE);
+        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME, MethodUnderTest.SET_VALUE);
     }
 
 
@@ -236,15 +225,14 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testSetValue09() {
-        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME,
-                MethodUnderTest.SET_VALUE);
+        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME, MethodUnderTest.SET_VALUE);
     }
 
 
     /**
      * Tests that a null context results in an NPE as per EL Javadoc.
      */
-    @Test(expected=NullPointerException.class)
+    @Test(expected = NullPointerException.class)
     public void testGetType01() {
         BeanNameELResolver resolver = createBeanNameELResolver();
         resolver.getType(null, new Object(), new Object());
@@ -258,8 +246,7 @@ public class TestBeanNameELResolver {
     public void testGetType02() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Class<?> result = resolver.getType(context, null, BEAN01_NAME);
 
@@ -275,8 +262,7 @@ public class TestBeanNameELResolver {
     public void testGetType03() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Class<?> result = resolver.getType(context, new Object(), BEAN01_NAME);
 
@@ -286,15 +272,14 @@ public class TestBeanNameELResolver {
 
 
     /**
-     * Tests that a valid bean is not resolved if property is not a String even
-     * if it can be coerced to a valid bean name.
+     * Tests that a valid bean is not resolved if property is not a String even if it can be coerced to a valid bean
+     * name.
      */
     @Test
     public void testGetType04() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object property = new Object() {
             @Override
@@ -317,8 +302,7 @@ public class TestBeanNameELResolver {
     public void testGetType05() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Class<?> result = resolver.getType(context, null, BEAN99_NAME);
 
@@ -332,8 +316,7 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testGetType06() {
-        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME,
-                MethodUnderTest.GET_TYPE);
+        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME, MethodUnderTest.GET_TYPE);
     }
 
 
@@ -342,15 +325,14 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testGetType07() {
-        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME,
-                MethodUnderTest.GET_TYPE);
+        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME, MethodUnderTest.GET_TYPE);
     }
 
 
     /**
      * Tests that a null context results in an NPE as per EL Javadoc.
      */
-    @Test(expected=NullPointerException.class)
+    @Test(expected = NullPointerException.class)
     public void testIsReadOnly01() {
         BeanNameELResolver resolver = createBeanNameELResolver();
         resolver.isReadOnly(null, new Object(), new Object());
@@ -364,8 +346,7 @@ public class TestBeanNameELResolver {
     public void testIsReadOnly02() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         boolean result = resolver.isReadOnly(context, null, BEAN01_NAME);
 
@@ -381,11 +362,9 @@ public class TestBeanNameELResolver {
     public void testIsReadOnly03() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, null,
-                TesterBeanNameResolver.READ_ONLY_NAME);
+        boolean result = resolver.isReadOnly(context, null, TesterBeanNameResolver.READ_ONLY_NAME);
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -399,8 +378,7 @@ public class TestBeanNameELResolver {
     public void testIsReadOnly04() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         resolver.isReadOnly(context, new Object(), BEAN01_NAME);
 
@@ -409,15 +387,14 @@ public class TestBeanNameELResolver {
 
 
     /**
-     * Tests that a valid bean is not resolved if property is not a String even
-     * if it can be coerced to a valid bean name.
+     * Tests that a valid bean is not resolved if property is not a String even if it can be coerced to a valid bean
+     * name.
      */
     @Test
     public void testIsReadOnly05() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object property = new Object() {
             @Override
@@ -439,8 +416,7 @@ public class TestBeanNameELResolver {
     public void testIsReadOnly06() {
 
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         resolver.isReadOnly(context, null, BEAN99_NAME);
 
@@ -453,8 +429,7 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testIsReadOnly07() {
-        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME,
-                MethodUnderTest.IS_READ_ONLY);
+        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME, MethodUnderTest.IS_READ_ONLY);
     }
 
 
@@ -463,8 +438,7 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testIsReadOnly08() {
-        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME,
-                MethodUnderTest.IS_READ_ONLY);
+        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME, MethodUnderTest.IS_READ_ONLY);
     }
 
 
@@ -473,8 +447,7 @@ public class TestBeanNameELResolver {
      */
     public void testGetCommonPropertyType01() {
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = resolver.getCommonPropertyType(context, null);
 
@@ -497,8 +470,7 @@ public class TestBeanNameELResolver {
 
     private void doThrowableTest(String trigger, MethodUnderTest method) {
         BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         ELException elException = null;
         try {
@@ -540,11 +512,9 @@ public class TestBeanNameELResolver {
     /**
      * Tests adding/replacing beans beans
      */
-    private void doSetValueCreateReplaceTest(boolean canCreate,
-            String beanName) {
+    private void doSetValueCreateReplaceTest(boolean canCreate, String beanName) {
         BeanNameELResolver resolver = createBeanNameELResolver(canCreate);
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         // Get bean one to be sure it has been replaced when testing replace
         Object bean = resolver.getValue(context, null, BEAN01_NAME);

==================================================
TestELContext.java
index 777eed719b..eb6c582359 100644
--- a/test/jakarta/el/TestCompositeELResolver.java
+++ b/test/jakarta/el/TestCompositeELResolver.java
@@ -30,8 +30,7 @@ public class TestCompositeELResolver extends TomcatBaseTest {
     public void testBug50408() throws Exception {
         getTomcatInstanceTestWebapp(true, true);
 
-        int rc = getUrl("http://localhost:" + getPort() +
-                "/test/bug5nnnn/bug50408.jsp", new ByteChunk(), null);
+        int rc = getUrl("http://localhost:" + getPort() + "/test/bug5nnnn/bug50408.jsp", new ByteChunk(), null);
 
         Assert.assertEquals(HttpServletResponse.SC_OK, rc);
     }

==================================================
TestELProcessor.java
index 0abd30c7ae..a66638d514 100644
--- a/test/jakarta/el/TestELContext.java
+++ b/test/jakarta/el/TestELContext.java
@@ -53,9 +53,8 @@ public class TestELContext {
     }
 
     /**
-     * Tests that the context object will be added to the map with context
-     * objects. The key is used as unique identifier of the context object in
-     * the map.
+     * Tests that the context object will be added to the map with context objects. The key is used as unique identifier
+     * of the context object in the map.
      */
     @Test
     public void testPutContext03() {
@@ -68,8 +67,7 @@ public class TestELContext {
     }
 
     /**
-     * Tests that propertyResolved will be set to true and the corresponding
-     * listeners will be notified.
+     * Tests that propertyResolved will be set to true and the corresponding listeners will be notified.
      */
     @Test
     public void testSetPropertyResolved() {
@@ -135,8 +133,7 @@ public class TestELContext {
     }
 
     /**
-     * Tests that if there is no ELResolver the standard coercions will be
-     * invoked.
+     * Tests that if there is no ELResolver the standard coercions will be invoked.
      */
     @Test
     public void testConvertToType02() {
@@ -147,13 +144,12 @@ public class TestELContext {
         Object result = elContext.convertToType("test", String.class);
         Assert.assertEquals("test", result);
 
-        Assert.assertTrue(originalPropertyResolved == elContext
-                .isPropertyResolved());
+        Assert.assertTrue(originalPropertyResolved == elContext.isPropertyResolved());
     }
 
     /**
-     * Tests that if there is ELResolver it will handle the conversion. If this
-     * resolver cannot return a result the standard coercions will be invoked.
+     * Tests that if there is ELResolver it will handle the conversion. If this resolver cannot return a result the
+     * standard coercions will be invoked.
      */
     @Test
     public void testConvertToType03() {
@@ -164,12 +160,10 @@ public class TestELContext {
 
         Object result = elContext.convertToType("1", String.class);
         Assert.assertEquals("ONE", result);
-        Assert.assertTrue(originalPropertyResolved == elContext
-                .isPropertyResolved());
+        Assert.assertTrue(originalPropertyResolved == elContext.isPropertyResolved());
 
         result = elContext.convertToType("test", String.class);
         Assert.assertEquals("test", result);
-        Assert.assertTrue(originalPropertyResolved == elContext
-                .isPropertyResolved());
+        Assert.assertTrue(originalPropertyResolved == elContext.isPropertyResolved());
     }
 }

==================================================
TestELResolver.java
index 644a5579b8..1dd04c090a 100644
--- a/test/jakarta/el/TestELProcessor.java
+++ b/test/jakarta/el/TestELProcessor.java
@@ -29,14 +29,14 @@ public class TestELProcessor {
     }
 
 
-    @Test(expected=ELException.class)
+    @Test(expected = ELException.class)
     public void testEval01() {
         ELProcessor elp = new ELProcessor();
         elp.eval("${1+1}");
     }
 
 
-    @Test(expected=ELException.class)
+    @Test(expected = ELException.class)
     public void testEval02() {
         ELProcessor elp = new ELProcessor();
         elp.eval("#{1+1}");
@@ -55,10 +55,8 @@ public class TestELProcessor {
     @Test
     public void testDefineFunctionMethod01() throws Exception {
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "toBoolean",
-                Boolean.class.getMethod("valueOf", String.class));
-        Assert.assertEquals(Boolean.valueOf(true),
-                elp.eval("fn:toBoolean(true)"));
+        elp.defineFunction("fn", "toBoolean", Boolean.class.getMethod("valueOf", String.class));
+        Assert.assertEquals(Boolean.valueOf(true), elp.eval("fn:toBoolean(true)"));
     }
 
 
@@ -68,8 +66,7 @@ public class TestELProcessor {
         // java.lang should be automatically imported so no need for full class
         // name
         elp.defineFunction("fn", "toBoolean", "Boolean", "valueOf");
-        Assert.assertEquals(Boolean.valueOf(true),
-                elp.eval("fn:toBoolean(true)"));
+        Assert.assertEquals(Boolean.valueOf(true), elp.eval("fn:toBoolean(true)"));
     }
 
 
@@ -196,7 +193,7 @@ public class TestELProcessor {
     @Test
     public void testPrimitiveArray01() {
         ELProcessor elp = new ELProcessor();
-        TesterBean bean01= new TesterBean("bean01");
+        TesterBean bean01 = new TesterBean("bean01");
         elp.defineBean("bean01", bean01);
         elp.defineBean("bean02", new TesterBean("bean02"));
 

==================================================
TestEvaluationListener.java
index b492ea1501..4b83910b31 100644
--- a/test/jakarta/el/TestELResolver.java
+++ b/test/jakarta/el/TestELResolver.java
@@ -25,9 +25,7 @@ public class TestELResolver {
     public void testConvertToType01() {
         ELContext context = new TesterELContext();
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "1", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "1", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -39,9 +37,7 @@ public class TestELResolver {
     public void testConvertToType02() {
         ELContext context = new TesterELContext(new TesterELResolverOne());
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "1", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "1", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -53,9 +49,7 @@ public class TestELResolver {
     public void testConvertToType03() {
         ELContext context = new TesterELContext(new TesterELResolverOne());
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "2", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "2", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -68,9 +62,7 @@ public class TestELResolver {
         CompositeELResolver resolver = new CompositeELResolver();
         ELContext context = new TesterELContext(resolver);
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "2", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "2", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -85,9 +77,7 @@ public class TestELResolver {
         resolver.add(new TesterELResolverTwo());
         ELContext context = new TesterELContext(resolver);
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "1", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "1", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -102,9 +92,7 @@ public class TestELResolver {
         resolver.add(new TesterELResolverTwo());
         ELContext context = new TesterELContext(resolver);
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "2", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "2", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -119,9 +107,7 @@ public class TestELResolver {
         resolver.add(new TesterELResolverTwo());
         ELContext context = new TesterELContext(resolver);
 
-        ValueExpression ve =
-                ELManager.getExpressionFactory().createValueExpression(
-                        context, "3", String.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "3", String.class);
 
         String result = (String) ve.getValue(context);
 
@@ -133,8 +119,8 @@ public class TestELResolver {
     public void testDefaultConvertToType() {
         ELContext context = new TesterELContext(new StaticFieldELResolver());
 
-        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(
-                        context, "${!Boolean.FALSE}", Boolean.class);
+        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(context, "${!Boolean.FALSE}",
+                Boolean.class);
 
         Boolean result = (Boolean) ve.getValue(context);
 

==================================================
TestImportHandler.java
index 4a0cd70d25..ef0acc1e96 100644
--- a/test/jakarta/el/TestEvaluationListener.java
+++ b/test/jakarta/el/TestEvaluationListener.java
@@ -84,8 +84,7 @@ public class TestEvaluationListener {
         ExpressionFactory factory = ELManager.getExpressionFactory();
         ELContext context = new TesterELContext();
         String expression = "${1 + 1}";
-        ValueExpression ve =
-                factory.createValueExpression(context, expression, int.class);
+        ValueExpression ve = factory.createValueExpression(context, expression, int.class);
 
         TesterEvaluationListener listener = new TesterEvaluationListener();
         context.addEvaluationListener(listener);
@@ -110,8 +109,7 @@ public class TestEvaluationListener {
         ExpressionFactory factory = ELManager.getExpressionFactory();
         ELContext context = new TesterELContext(new CompositeELResolver());
         String expression = "${foo.bar + 1}";
-        ValueExpression ve =
-                factory.createValueExpression(context, expression, int.class);
+        ValueExpression ve = factory.createValueExpression(context, expression, int.class);
 
         TesterEvaluationListener listener = new TesterEvaluationListener();
         context.addEvaluationListener(listener);

==================================================
TestImportHandlerStandardPackages.java
index 7f157aae43..db4bbf5cd9 100644
--- a/test/jakarta/el/TestImportHandler.java
+++ b/test/jakarta/el/TestImportHandler.java
@@ -64,8 +64,7 @@ public class TestImportHandler {
         for (int i = 1; i <= 3; i++) {
             try {
                 Class<?> clazz = handler.resolveClass("ExceptionUtils");
-                Assert.fail("Expected ELException but got [" + clazz.getName()
-                        + "] on iteration " + i);
+                Assert.fail("Expected ELException but got [" + clazz.getName() + "] on iteration " + i);
             } catch (ELException ex) {
                 // Expected
             }
@@ -74,8 +73,7 @@ public class TestImportHandler {
 
 
     /**
-     * Multiple package imports with a single match.
-     * https://bz.apache.org/bugzilla/show_bug.cgi?id=57113
+     * Multiple package imports with a single match. https://bz.apache.org/bugzilla/show_bug.cgi?id=57113
      */
     @Test
     public void testResolveClass04() {
@@ -158,8 +156,7 @@ public class TestImportHandler {
         for (int i = 1; i <= 3; i++) {
             try {
                 handler.importClass("org.apache.jasper.util.ExceptionUtils");
-                Assert.fail("Expected ELException but got none on iteration "
-                        + i);
+                Assert.fail("Expected ELException but got none on iteration " + i);
             } catch (ELException ex) {
                 // Expected
             }
@@ -214,7 +211,7 @@ public class TestImportHandler {
     /**
      * Import an invalid static field - does not exist.
      */
-    @Test(expected=ELException.class)
+    @Test(expected = ELException.class)
     public void testImportStatic02() {
         ImportHandler handler = new ImportHandler();
 
@@ -248,8 +245,7 @@ public class TestImportHandler {
         for (int i = 1; i <= 3; i++) {
             try {
                 handler.importStatic("org.apache.tomcat.util.threads.Constants.Package");
-                Assert.fail("Expected ELException but got none on iteration "
-                        + i);
+                Assert.fail("Expected ELException but got none on iteration " + i);
             } catch (ELException ex) {
                 // Expected
             }
@@ -258,8 +254,7 @@ public class TestImportHandler {
 
 
     /**
-     * Package imports with conflicts due to non-public classes should not
-     * conflict.
+     * Package imports with conflicts due to non-public classes should not conflict.
      */
     @Test
     public void testBug57135() {

==================================================
TestListELResolver.java
index 817079394d..b93b06e586 100644
--- a/test/jakarta/el/TestImportHandlerStandardPackages.java
+++ b/test/jakarta/el/TestImportHandlerStandardPackages.java
@@ -40,9 +40,9 @@ public class TestImportHandlerStandardPackages {
         Object obj = f.get(null);
 
         @SuppressWarnings("unchecked")
-        Map<String,Set<String>> standardPackageName = (Map<String, Set<String>>) obj;
+        Map<String, Set<String>> standardPackageName = (Map<String, Set<String>>) obj;
 
-        for (Map.Entry<String,Set<String>> entry : standardPackageName.entrySet()) {
+        for (Map.Entry<String, Set<String>> entry : standardPackageName.entrySet()) {
             checkPackageClassList(entry.getKey(), entry.getValue());
         }
     }
@@ -55,28 +55,25 @@ public class TestImportHandlerStandardPackages {
             // tests are run on a newer JRE.
             // The latest version of the JRE where this test is known to pass is
             // - OpenJDK 19 EA 22
-            ModuleFinder.ofSystem().find("java.base").get().open().list()
-                    .filter(c -> (c.startsWith("java/lang/")))
-                    .filter(c -> c.lastIndexOf('/') == 9)             // Exclude sub-packages
-                    .filter(c -> c.endsWith(".class"))                // Exclude non-class resources
-                    .map(c -> c.substring(10, c.length() - 6))        // Extract class name
-                    .map(c-> {
+            ModuleFinder.ofSystem().find("java.base").get().open().list().filter(c -> (c.startsWith("java/lang/")))
+                    .filter(c -> c.lastIndexOf('/') == 9) // Exclude sub-packages
+                    .filter(c -> c.endsWith(".class")) // Exclude non-class resources
+                    .map(c -> c.substring(10, c.length() - 6)) // Extract class name
+                    .map(c -> {
                         try {
                             return Class.forName("java.lang." + c, false,
-                                    TesterImportHandlerPerformance.class.getClassLoader());   // Get the class object
+                                    TesterImportHandlerPerformance.class.getClassLoader()); // Get the class object
                         } catch (ClassNotFoundException e) {
                             throw new RuntimeException(c);
                         }
-                    })
-                    .filter(c -> null != c)
-                    .filter(c -> Modifier.isPublic(c.getModifiers())) // Exclude non-public classes
-                    .map(c -> c.getName().substring(10))              // Back to the class name
-                    .map(c -> c.replace('$',  '.'))
-                    .filter(c -> !classNames.contains(c))             // Skip classes already listed
-                    .filter(c -> !c.startsWith("FdLibm."))            // Skip public inner class
-                    .filter(c -> !c.startsWith("LiveStackFrame."))    // Skip public inner class
-                    .filter(c -> !c.startsWith("WeakPairMap."))       // Skip public inner class
-                    .forEach(c -> Assert.fail("java.lang." + c));     // Should have in list
+                    }).filter(c -> null != c).filter(c -> Modifier.isPublic(c.getModifiers())) // Exclude non-public
+                                                                                               // classes
+                    .map(c -> c.getName().substring(10)) // Back to the class name
+                    .map(c -> c.replace('$', '.')).filter(c -> !classNames.contains(c)) // Skip classes already listed
+                    .filter(c -> !c.startsWith("FdLibm.")) // Skip public inner class
+                    .filter(c -> !c.startsWith("LiveStackFrame.")) // Skip public inner class
+                    .filter(c -> !c.startsWith("WeakPairMap.")) // Skip public inner class
+                    .forEach(c -> Assert.fail("java.lang." + c)); // Should have in list
         } else {
             // When this test runs, the class loader will be loading resources
             // from a directory for each of these packages.
@@ -114,7 +111,7 @@ public class TestImportHandlerStandardPackages {
                         // Skip classes already known
                         continue;
                     }
-                    File f = new File (dir, file);
+                    File f = new File(dir, file);
                     if (!f.isFile()) {
                         // Skip directories
                         continue;

==================================================
TestMapELResolver.java
index 0bfad0db4b..f8fa5e6633 100644
--- a/test/jakarta/el/TestListELResolver.java
+++ b/test/jakarta/el/TestListELResolver.java
@@ -39,8 +39,7 @@ public class TestListELResolver {
      */
     @Test
     public void testGetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE, true);
     }
 
     /**
@@ -49,8 +48,7 @@ public class TestListELResolver {
     @Test
     public void testGetValue03() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -66,8 +64,7 @@ public class TestListELResolver {
     @Test(expected = IllegalArgumentException.class)
     public void testGetValue04() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -80,8 +77,7 @@ public class TestListELResolver {
     @Test
     public void testGetValue05() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -110,8 +106,7 @@ public class TestListELResolver {
      */
     @Test
     public void testGetType02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE, true);
     }
 
     /**
@@ -120,8 +115,7 @@ public class TestListELResolver {
     @Test
     public void testGetType03() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -137,8 +131,7 @@ public class TestListELResolver {
     @Test(expected = PropertyNotFoundException.class)
     public void testGetType04() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -159,8 +152,7 @@ public class TestListELResolver {
      */
     @Test
     public void testSetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE,
-                false);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE, false);
     }
 
     /**
@@ -169,11 +161,9 @@ public class TestListELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue03() {
         ListELResolver resolver = new ListELResolver(true);
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        resolver.setValue(context, new ArrayList<>(), new Object(),
-                new Object());
+        resolver.setValue(context, new ArrayList<>(), new Object(), new Object());
     }
 
     /**
@@ -182,15 +172,13 @@ public class TestListELResolver {
     @Test
     public void testSetValue04() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("value");
         resolver.setValue(context, list, Integer.valueOf(0), "value");
 
-        Assert.assertEquals("value",
-                resolver.getValue(context, list, Integer.valueOf(0)));
+        Assert.assertEquals("value", resolver.getValue(context, list, Integer.valueOf(0)));
         Assert.assertTrue(context.isPropertyResolved());
     }
 
@@ -200,8 +188,7 @@ public class TestListELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue05() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<Object> list = Collections.unmodifiableList(new ArrayList<>());
         resolver.setValue(context, list, Integer.valueOf(0), "value");
@@ -213,8 +200,7 @@ public class TestListELResolver {
     @Test(expected = IllegalArgumentException.class)
     public void testSetValue06() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -227,8 +213,7 @@ public class TestListELResolver {
     @Test(expected = PropertyNotFoundException.class)
     public void testSetValue07() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -250,11 +235,9 @@ public class TestListELResolver {
     @Test
     public void testIsReadOnly02() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, new Object(),
-                new Object());
+        boolean result = resolver.isReadOnly(context, new Object(), new Object());
 
         Assert.assertFalse(result);
         Assert.assertFalse(context.isPropertyResolved());
@@ -268,14 +251,13 @@ public class TestListELResolver {
     }
 
     /**
-     * Tests that if the ListELResolver is constructed with readOnly the method
-     * will return always true, otherwise false.
+     * Tests that if the ListELResolver is constructed with readOnly the method will return always true, otherwise
+     * false.
      */
     @Test
     public void testIsReadOnly03() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -298,14 +280,12 @@ public class TestListELResolver {
     @Test
     public void testIsReadOnly04() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
         List<String> unmodifiableList = Collections.unmodifiableList(list);
-        boolean result = resolver.isReadOnly(context, unmodifiableList,
-                Integer.valueOf(0));
+        boolean result = resolver.isReadOnly(context, unmodifiableList, Integer.valueOf(0));
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -317,8 +297,7 @@ public class TestListELResolver {
     @Test(expected = PropertyNotFoundException.class)
     public void testIsReadOnly05() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -331,8 +310,7 @@ public class TestListELResolver {
     @Test
     public void testIsReadOnly06() {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         List<String> list = new ArrayList<>();
         list.add("key");
@@ -349,30 +327,28 @@ public class TestListELResolver {
         Assert.assertTrue(context.isPropertyResolved());
     }
 
-    private void doNegativeTest(Object base, Object trigger,
-            MethodUnderTest method, boolean checkResult) {
+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method, boolean checkResult) {
         ListELResolver resolver = new ListELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = null;
         switch (method) {
-        case GET_VALUE: {
-            result = resolver.getValue(context, base, trigger);
-            break;
-        }
-        case SET_VALUE: {
-            resolver.setValue(context, base, trigger, new Object());
-            break;
-        }
-        case GET_TYPE: {
-            result = resolver.getType(context, base, trigger);
-            break;
-        }
-        default: {
-            // Should never happen
-            Assert.fail("Missing case for method");
-        }
+            case GET_VALUE: {
+                result = resolver.getValue(context, base, trigger);
+                break;
+            }
+            case SET_VALUE: {
+                resolver.setValue(context, base, trigger, new Object());
+                break;
+            }
+            case GET_TYPE: {
+                result = resolver.getType(context, base, trigger);
+                break;
+            }
+            default: {
+                // Should never happen
+                Assert.fail("Missing case for method");
+            }
         }
 
         if (checkResult) {
@@ -382,7 +358,9 @@ public class TestListELResolver {
     }
 
     private enum MethodUnderTest {
-        GET_VALUE, SET_VALUE, GET_TYPE
+        GET_VALUE,
+        SET_VALUE,
+        GET_TYPE
     }
 
 }

==================================================
TestResourceBundleELResolver.java
index d776f5d8b2..3de333902f 100644
--- a/test/jakarta/el/TestMapELResolver.java
+++ b/test/jakarta/el/TestMapELResolver.java
@@ -39,8 +39,7 @@ public class TestMapELResolver {
      */
     @Test
     public void testGetType02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE, true);
     }
 
     /**
@@ -49,11 +48,9 @@ public class TestMapELResolver {
     @Test
     public void testGetType03() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Class<?> result = mapELResolver.getType(context, new HashMap<>(),
-                "test");
+        Class<?> result = mapELResolver.getType(context, new HashMap<>(), "test");
 
         Assert.assertEquals(Object.class, result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -73,8 +70,7 @@ public class TestMapELResolver {
      */
     @Test
     public void testGetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE, true);
     }
 
     /**
@@ -83,8 +79,7 @@ public class TestMapELResolver {
     @Test
     public void testGetValue03() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Map<String, String> map = new HashMap<>();
         map.put("key", "value");
@@ -113,8 +108,7 @@ public class TestMapELResolver {
      */
     @Test
     public void testSetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE,
-                false);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE, false);
     }
 
     /**
@@ -123,11 +117,9 @@ public class TestMapELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue03() {
         MapELResolver mapELResolver = new MapELResolver(true);
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        mapELResolver.setValue(context, new HashMap<>(), new Object(),
-                new Object());
+        mapELResolver.setValue(context, new HashMap<>(), new Object(), new Object());
     }
 
     /**
@@ -136,14 +128,12 @@ public class TestMapELResolver {
     @Test
     public void testSetValue04() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Map<String, String> map = new HashMap<>();
         mapELResolver.setValue(context, map, "key", "value");
 
-        Assert.assertEquals("value",
-                mapELResolver.getValue(context, map, "key"));
+        Assert.assertEquals("value", mapELResolver.getValue(context, map, "key"));
         Assert.assertTrue(context.isPropertyResolved());
     }
 
@@ -153,8 +143,7 @@ public class TestMapELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue05() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Map<Object, Object> map = Collections.unmodifiableMap(new HashMap<>());
         mapELResolver.setValue(context, map, "key", "value");
@@ -175,11 +164,9 @@ public class TestMapELResolver {
     @Test
     public void testIsReadOnly02() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = mapELResolver.isReadOnly(context, new Object(),
-                new Object());
+        boolean result = mapELResolver.isReadOnly(context, new Object(), new Object());
 
         Assert.assertFalse(result);
         Assert.assertFalse(context.isPropertyResolved());
@@ -193,25 +180,21 @@ public class TestMapELResolver {
     }
 
     /**
-     * Tests that if the MapELResolver is constructed with readOnly the method
-     * will return always true, otherwise false.
+     * Tests that if the MapELResolver is constructed with readOnly the method will return always true, otherwise false.
      */
     @Test
     public void testIsReadOnly03() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = mapELResolver.isReadOnly(context, new HashMap<>(),
-                new Object());
+        boolean result = mapELResolver.isReadOnly(context, new HashMap<>(), new Object());
 
         Assert.assertFalse(result);
         Assert.assertTrue(context.isPropertyResolved());
 
         mapELResolver = new MapELResolver(true);
 
-        result = mapELResolver.isReadOnly(context, new HashMap<>(),
-                new Object());
+        result = mapELResolver.isReadOnly(context, new HashMap<>(), new Object());
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -223,8 +206,7 @@ public class TestMapELResolver {
     @Test
     public void testIsReadOnly04() {
         MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Map<Object, Object> map = Collections.unmodifiableMap(new HashMap<>());
         boolean result = mapELResolver.isReadOnly(context, map, new Object());
@@ -233,30 +215,28 @@ public class TestMapELResolver {
         Assert.assertTrue(context.isPropertyResolved());
     }
 
-    private void doNegativeTest(Object base, Object trigger,
-            MethodUnderTest method, boolean checkResult) {
+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method, boolean checkResult) {
         MapELResolver resolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = null;
         switch (method) {
-        case GET_VALUE: {
-            result = resolver.getValue(context, base, trigger);
-            break;
-        }
-        case SET_VALUE: {
-            resolver.setValue(context, base, trigger, new Object());
-            break;
-        }
-        case GET_TYPE: {
-            result = resolver.getType(context, base, trigger);
-            break;
-        }
-        default: {
-            // Should never happen
-            Assert.fail("Missing case for method");
-        }
+            case GET_VALUE: {
+                result = resolver.getValue(context, base, trigger);
+                break;
+            }
+            case SET_VALUE: {
+                resolver.setValue(context, base, trigger, new Object());
+                break;
+            }
+            case GET_TYPE: {
+                result = resolver.getType(context, base, trigger);
+                break;
+            }
+            default: {
+                // Should never happen
+                Assert.fail("Missing case for method");
+            }
         }
 
         if (checkResult) {
@@ -266,6 +246,8 @@ public class TestMapELResolver {
     }
 
     private enum MethodUnderTest {
-        GET_VALUE, SET_VALUE, GET_TYPE
+        GET_VALUE,
+        SET_VALUE,
+        GET_TYPE
     }
 }

==================================================
TestStaticFieldELResolver.java
index 3c5381bc67..9ebc5f7e25 100644
--- a/test/jakarta/el/TestResourceBundleELResolver.java
+++ b/test/jakarta/el/TestResourceBundleELResolver.java
@@ -34,15 +34,12 @@ public class TestResourceBundleELResolver {
 
         ResourceBundle rb = new TesterResourceBundle();
 
-        ValueExpression var = factory.createValueExpression(rb,
-                ResourceBundle.class);
+        ValueExpression var = factory.createValueExpression(rb, ResourceBundle.class);
         context.getVariableMapper().setVariable("rb", var);
 
-        ValueExpression ve = factory.createValueExpression(context,
-                "${rb.keys}", String.class);
+        ValueExpression ve = factory.createValueExpression(context, "${rb.keys}", String.class);
 
-        MethodExpression me = factory.createMethodExpression(context,
-                "${rb.getKeys()}", Enumeration.class, null);
+        MethodExpression me = factory.createMethodExpression(context, "${rb.getKeys()}", Enumeration.class, null);
 
         // Ensure we are specification compliant
         String result1 = (String) ve.getValue(context);
@@ -78,13 +75,11 @@ public class TestResourceBundleELResolver {
     }
 
     /**
-     * Tests that a valid property is not resolved if base is not
-     * ResourceBundle.
+     * Tests that a valid property is not resolved if base is not ResourceBundle.
      */
     @Test
     public void testGetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_VALUE, true);
     }
 
     /**
@@ -93,8 +88,7 @@ public class TestResourceBundleELResolver {
     @Test
     public void testGetValue03() {
         ResourceBundleELResolver resolver = new ResourceBundleELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         ResourceBundle resourceBundle = new TesterResourceBundle();
         Object result = resolver.getValue(context, resourceBundle, "key1");
@@ -123,24 +117,20 @@ public class TestResourceBundleELResolver {
     }
 
     /**
-     * Tests that a valid property is not resolved if base is not
-     * ResourceBundle.
+     * Tests that a valid property is not resolved if base is not ResourceBundle.
      */
     @Test
     public void testGetType02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE,
-                true);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.GET_TYPE, true);
     }
 
     /**
-     * Tests that null will be returned when base is ResourceBundle. Checks that
-     * the propertyResolved is true.
+     * Tests that null will be returned when base is ResourceBundle. Checks that the propertyResolved is true.
      */
     @Test
     public void testGetType03() {
         ResourceBundleELResolver resolver = new ResourceBundleELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         ResourceBundle resourceBundle = new TesterResourceBundle();
         Class<?> result = resolver.getType(context, resourceBundle, "key1");
@@ -163,8 +153,7 @@ public class TestResourceBundleELResolver {
      */
     @Test
     public void testSetValue02() {
-        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE,
-                false);
+        doNegativeTest(new Object(), new Object(), MethodUnderTest.SET_VALUE, false);
     }
 
     /**
@@ -173,8 +162,7 @@ public class TestResourceBundleELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue03() {
         ResourceBundleELResolver resolver = new ResourceBundleELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         ResourceBundle resourceBundle = new TesterResourceBundle();
         resolver.setValue(context, resourceBundle, new Object(), new Object());
@@ -190,17 +178,14 @@ public class TestResourceBundleELResolver {
     }
 
     /**
-     * Tests that the propertyResolved is false and readOnly is false if base is
-     * not ResourceBundle.
+     * Tests that the propertyResolved is false and readOnly is false if base is not ResourceBundle.
      */
     @Test
     public void testIsReadOnly02() {
         ResourceBundleELResolver resolver = new ResourceBundleELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, new Object(),
-                new Object());
+        boolean result = resolver.isReadOnly(context, new Object(), new Object());
 
         Assert.assertFalse(result);
         Assert.assertFalse(context.isPropertyResolved());
@@ -212,12 +197,10 @@ public class TestResourceBundleELResolver {
     @Test
     public void testIsReadOnly03() {
         ResourceBundleELResolver resolver = new ResourceBundleELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         ResourceBundle resourceBundle = new TesterResourceBundle();
-        boolean result = resolver.isReadOnly(context, resourceBundle,
-                new Object());
+        boolean result = resolver.isReadOnly(context, resourceBundle, new Object());
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -241,30 +224,28 @@ public class TestResourceBundleELResolver {
         private Object[][] contents;
     }
 
-    private void doNegativeTest(Object base, Object trigger,
-            MethodUnderTest method, boolean checkResult) {
+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method, boolean checkResult) {
         ResourceBundleELResolver resolver = new ResourceBundleELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = null;
         switch (method) {
-        case GET_VALUE: {
-            result = resolver.getValue(context, base, trigger);
-            break;
-        }
-        case SET_VALUE: {
-            resolver.setValue(context, base, trigger, new Object());
-            break;
-        }
-        case GET_TYPE: {
-            result = resolver.getType(context, base, trigger);
-            break;
-        }
-        default: {
-            // Should never happen
-            Assert.fail("Missing case for method");
-        }
+            case GET_VALUE: {
+                result = resolver.getValue(context, base, trigger);
+                break;
+            }
+            case SET_VALUE: {
+                resolver.setValue(context, base, trigger, new Object());
+                break;
+            }
+            case GET_TYPE: {
+                result = resolver.getType(context, base, trigger);
+                break;
+            }
+            default: {
+                // Should never happen
+                Assert.fail("Missing case for method");
+            }
         }
 
         if (checkResult) {
@@ -274,6 +255,8 @@ public class TestResourceBundleELResolver {
     }
 
     private enum MethodUnderTest {
-        GET_VALUE, SET_VALUE, GET_TYPE
+        GET_VALUE,
+        SET_VALUE,
+        GET_TYPE
     }
 }

==================================================
TesterBean.java
index 006d737c7f..d55ebd7cde 100644
--- a/test/jakarta/el/TestStaticFieldELResolver.java
+++ b/test/jakarta/el/TestStaticFieldELResolver.java
@@ -47,11 +47,9 @@ public class TestStaticFieldELResolver {
     @Test
     public void testGetValue02() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.getValue(context, new ELClass(
-                TesterClass.class), PROPERTY01_NAME);
+        Object result = resolver.getValue(context, new ELClass(TesterClass.class), PROPERTY01_NAME);
 
         Assert.assertEquals(PROPERTY01_NAME, result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -70,8 +68,7 @@ public class TestStaticFieldELResolver {
      */
     @Test
     public void testGetValue04() {
-        doNegativeTest(new ELClass(TesterClass.class), new Object(),
-                MethodUnderTest.GET_VALUE);
+        doNegativeTest(new ELClass(TesterClass.class), new Object(), MethodUnderTest.GET_VALUE);
     }
 
     /**
@@ -112,11 +109,10 @@ public class TestStaticFieldELResolver {
     @Test
     public void testGetValue09() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.getValue(context, new ELClass(
-                MethodUnderTest.class), MethodUnderTest.GET_TYPE.toString());
+        Object result = resolver.getValue(context, new ELClass(MethodUnderTest.class),
+                MethodUnderTest.GET_TYPE.toString());
 
         Assert.assertEquals(MethodUnderTest.GET_TYPE, result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -137,11 +133,9 @@ public class TestStaticFieldELResolver {
     @Test(expected = PropertyNotWritableException.class)
     public void testSetValue02() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        resolver.setValue(context, new ELClass(TesterClass.class),
-                PROPERTY01_NAME, PROPERTY01_VALUE);
+        resolver.setValue(context, new ELClass(TesterClass.class), PROPERTY01_NAME, PROPERTY01_VALUE);
     }
 
     /**
@@ -157,8 +151,7 @@ public class TestStaticFieldELResolver {
      */
     @Test
     public void testSetValue04() {
-        doNegativeTest(new ELClass(TesterClass.class), new Object(),
-                MethodUnderTest.SET_VALUE);
+        doNegativeTest(new ELClass(TesterClass.class), new Object(), MethodUnderTest.SET_VALUE);
     }
 
     /**
@@ -171,17 +164,14 @@ public class TestStaticFieldELResolver {
     }
 
     /**
-     * Tests that the propertyResolved is true when base is ELCLass and the
-     * property is String.
+     * Tests that the propertyResolved is true when base is ELCLass and the property is String.
      */
     @Test
     public void testIsReadOnly02() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, new ELClass(
-                TesterClass.class), PROPERTY01_NAME);
+        boolean result = resolver.isReadOnly(context, new ELClass(TesterClass.class), PROPERTY01_NAME);
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -193,11 +183,9 @@ public class TestStaticFieldELResolver {
     @Test
     public void testIsReadOnly03() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, new Object(),
-                PROPERTY01_NAME);
+        boolean result = resolver.isReadOnly(context, new Object(), PROPERTY01_NAME);
 
         Assert.assertTrue(result);
         Assert.assertFalse(context.isPropertyResolved());
@@ -209,11 +197,9 @@ public class TestStaticFieldELResolver {
     @Test
     public void testIsReadOnly04() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        boolean result = resolver.isReadOnly(context, new ELClass(
-                TesterClass.class), new Object());
+        boolean result = resolver.isReadOnly(context, new ELClass(TesterClass.class), new Object());
 
         Assert.assertTrue(result);
         Assert.assertFalse(context.isPropertyResolved());
@@ -234,11 +220,9 @@ public class TestStaticFieldELResolver {
     @Test
     public void testGetType02() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Class<?> result = resolver.getType(context, new ELClass(
-                TesterClass.class), PROPERTY01_NAME);
+        Class<?> result = resolver.getType(context, new ELClass(TesterClass.class), PROPERTY01_NAME);
 
         // Resolver is read-only so this should return null
         Assert.assertNull(result);
@@ -257,8 +241,7 @@ public class TestStaticFieldELResolver {
      */
     @Test
     public void testGetType04() {
-        doNegativeTest(new ELClass(TesterClass.class), new Object(),
-                MethodUnderTest.GET_TYPE);
+        doNegativeTest(new ELClass(TesterClass.class), new Object(), MethodUnderTest.GET_TYPE);
     }
 
     /**
@@ -299,11 +282,10 @@ public class TestStaticFieldELResolver {
     @Test
     public void testGetType09() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Class<?> result = resolver.getType(context, new ELClass(
-                MethodUnderTest.class), MethodUnderTest.GET_TYPE.toString());
+        Class<?> result = resolver.getType(context, new ELClass(MethodUnderTest.class),
+                MethodUnderTest.GET_TYPE.toString());
 
         // Resolver is read-only so this should return null
         Assert.assertNull(result);
@@ -315,8 +297,7 @@ public class TestStaticFieldELResolver {
     @Test(expected = NullPointerException.class)
     public void testInvoke01() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        resolver.invoke(null, new Object(), new Object(), new Class<?>[] {},
-                new Object[] {});
+        resolver.invoke(null, new Object(), new Object(), new Class<?>[] {}, new Object[] {});
     }
 
     /**
@@ -325,11 +306,9 @@ public class TestStaticFieldELResolver {
     @Test
     public void testInvoke02() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context,
-                new ELClass(TesterClass.class), METHOD01_NAME, null, null);
+        Object result = resolver.invoke(context, new ELClass(TesterClass.class), METHOD01_NAME, null, null);
 
         Assert.assertEquals(TesterClass.class, result.getClass());
         Assert.assertTrue(context.isPropertyResolved());
@@ -341,12 +320,10 @@ public class TestStaticFieldELResolver {
     @Test
     public void testInvoke03() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context,
-                new ELClass(TesterClass.class), METHOD02_NAME,
-                new Class<?>[] {}, new Object[] {});
+        Object result = resolver.invoke(context, new ELClass(TesterClass.class), METHOD02_NAME, new Class<?>[] {},
+                new Object[] {});
 
         Assert.assertEquals(PROPERTY01_NAME, result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -365,8 +342,7 @@ public class TestStaticFieldELResolver {
      */
     @Test
     public void testInvoke05() {
-        doNegativeTest(new ELClass(TesterClass.class), new Object(),
-                MethodUnderTest.INVOKE);
+        doNegativeTest(new ELClass(TesterClass.class), new Object(), MethodUnderTest.INVOKE);
     }
 
     /**
@@ -391,75 +367,36 @@ public class TestStaticFieldELResolver {
     @Test
     public void testInvoke08() {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        Object result = resolver.invoke(context,
-                new ELClass(TesterClass.class), METHOD04_NAME,
-                new Class<?>[] {}, new Object[] {});
+        Object result = resolver.invoke(context, new ELClass(TesterClass.class), METHOD04_NAME, new Class<?>[] {},
+                new Object[] {});
 
         Assert.assertNull(result);
         Assert.assertTrue(context.isPropertyResolved());
     }
 
-    private void doNegativeTest(Object elClass, Object trigger,
-            MethodUnderTest method) {
+    private void doNegativeTest(Object elClass, Object trigger, MethodUnderTest method) {
         StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
         Object result = null;
         switch (method) {
-        case GET_VALUE: {
-            result = resolver.getValue(context, elClass, trigger);
-            break;
-        }
-        case SET_VALUE: {
-            resolver.setValue(context, elClass, trigger, PROPERTY01_VALUE);
-            result = resolver.getValue(context, elClass, trigger);
-            break;
-        }
-        case GET_TYPE: {
-            result = resolver.getType(context, elClass, trigger);
-            break;
-        }
-        case INVOKE: {
-            result = resolver.invoke(context, elClass, trigger,
-                    new Class<?>[] { String.class }, new Object[] { "test" });
-            break;
-        }
-        default: {
-            // Should never happen
-            Assert.fail("Missing case for method");
-        }
-        }
-
-        Assert.assertNull(result);
-        Assert.assertFalse(context.isPropertyResolved());
-    }
-
-    private void doThrowableTest(String trigger, MethodUnderTest method,
-            boolean checkCause) {
-        StaticFieldELResolver resolver = new StaticFieldELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
-
-        ELException exception = null;
-        try {
-            switch (method) {
             case GET_VALUE: {
-                resolver.getValue(context, new ELClass(TesterClass.class),
-                        trigger);
+                result = resolver.getValue(context, elClass, trigger);
+                break;
+            }
+            case SET_VALUE: {
+                resolver.setValue(context, elClass, trigger, PROPERTY01_VALUE);
+                result = resolver.getValue(context, elClass, trigger);
                 break;
             }
             case GET_TYPE: {
-                resolver.getType(context, new ELClass(TesterClass.class),
-                        trigger);
+                result = resolver.getType(context, elClass, trigger);
                 break;
             }
             case INVOKE: {
-                resolver.invoke(context, new ELClass(TesterClass.class),
-                        trigger, new Class<?>[] { String.class },
+                result = resolver.invoke(context, elClass, trigger, new Class<?>[] { String.class },
                         new Object[] { "test" });
                 break;
             }
@@ -467,6 +404,36 @@ public class TestStaticFieldELResolver {
                 // Should never happen
                 Assert.fail("Missing case for method");
             }
+        }
+
+        Assert.assertNull(result);
+        Assert.assertFalse(context.isPropertyResolved());
+    }
+
+    private void doThrowableTest(String trigger, MethodUnderTest method, boolean checkCause) {
+        StaticFieldELResolver resolver = new StaticFieldELResolver();
+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
+
+        ELException exception = null;
+        try {
+            switch (method) {
+                case GET_VALUE: {
+                    resolver.getValue(context, new ELClass(TesterClass.class), trigger);
+                    break;
+                }
+                case GET_TYPE: {
+                    resolver.getType(context, new ELClass(TesterClass.class), trigger);
+                    break;
+                }
+                case INVOKE: {
+                    resolver.invoke(context, new ELClass(TesterClass.class), trigger, new Class<?>[] { String.class },
+                            new Object[] { "test" });
+                    break;
+                }
+                default: {
+                    // Should never happen
+                    Assert.fail("Missing case for method");
+                }
             }
 
         } catch (PropertyNotFoundException | MethodNotFoundException e) {
@@ -484,6 +451,9 @@ public class TestStaticFieldELResolver {
     }
 
     private enum MethodUnderTest {
-        GET_VALUE, SET_VALUE, GET_TYPE, INVOKE
+        GET_VALUE,
+        SET_VALUE,
+        GET_TYPE,
+        INVOKE
     }
 }

==================================================
TesterBeanNameResolver.java
index 8f0d1e4e31..25d46c0245 100644
--- a/test/jakarta/el/TesterBean.java
+++ b/test/jakarta/el/TesterBean.java
@@ -54,7 +54,7 @@ public class TesterBean {
     }
 
     public int[] getValueB() {
-        return new int[] {1,2,3,4,5};
+        return new int[] { 1, 2, 3, 4, 5 };
     }
 
     public void setValueC(Integer[] values) {

==================================================
TesterEvaluationListener.java
index 3fb2b7644f..e04fd44884 100644
--- a/test/jakarta/el/TesterBeanNameResolver.java
+++ b/test/jakarta/el/TesterBeanNameResolver.java
@@ -25,7 +25,7 @@ public class TesterBeanNameResolver extends BeanNameResolver {
     public static final String THROWABLE_TRIGGER_NAME = "throwable";
     public static final String READ_ONLY_NAME = "readonly";
 
-    private Map<String,Object> beans = new HashMap<>();
+    private Map<String, Object> beans = new HashMap<>();
     private boolean allowCreate = true;
 
 
@@ -36,8 +36,7 @@ public class TesterBeanNameResolver extends BeanNameResolver {
     }
 
     @Override
-    public void setBeanValue(String beanName, Object value)
-            throws PropertyNotWritableException {
+    public void setBeanValue(String beanName, Object value) throws PropertyNotWritableException {
         checkTriggers(beanName);
         if (allowCreate || beans.containsKey(beanName)) {
             beans.put(beanName, value);

==================================================
TesterImportHandlerPerformance.java
index 5ba0a07587..ba60b976d6 100644
--- a/test/jakarta/el/TesterEvaluationListener.java
+++ b/test/jakarta/el/TesterEvaluationListener.java
@@ -27,8 +27,7 @@ public class TesterEvaluationListener extends EvaluationListener {
 
 
     @Override
-    public void propertyResolved(ELContext context, Object base,
-            Object property) {
+    public void propertyResolved(ELContext context, Object base, Object property) {
         resolvedProperties.add(new Pair(base, property));
     }
 

==================================================
