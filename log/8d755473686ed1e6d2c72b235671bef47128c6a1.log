8d755473686ed1e6d2c72b235671bef47128c6a1
==================================================
- Now use an interface and a pluggable mechanism for annotation processing.
==================================================
Remy Maucherat
==================================================
Wed Aug 2 11:21:46 2006 +0000
==================================================
AnnotationProcessor.java
- Now use an interface and a pluggable mechanism for annotation processing.
- I'm using the org.apache package due to the need to use this stuff in Jasper ...

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@427955 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Globals.java
new file mode 100644
index 0000000000..3912d3555a
--- /dev/null
+++ b/java/org/apache/AnnotationProcessor.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache;
+
+import java.lang.reflect.InvocationTargetException;
+
+import javax.naming.NamingException;
+
+/**
+ * Comment
+ *
+ * @author <a href="mailto:bill@jboss.org">Bill Burke</a>
+ * @version $Revision: 1.17 $
+ */
+public interface AnnotationProcessor {
+    public void postConstruct(Object instance)
+        throws IllegalAccessException, InvocationTargetException;
+    public void preDestroy(Object instance)
+        throws IllegalAccessException, InvocationTargetException;
+    public void processAnnotations(Object instance)
+        throws IllegalAccessException, InvocationTargetException, NamingException;
+}

==================================================
ApplicationFilterConfig.java
index 2de06db7ea..55b3167403 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -87,6 +87,14 @@ public final class Globals {
         "org.apache.catalina.jsp_classpath";
 
 
+    /**
+     * The servlet context attribute under which we store the annotation
+     * processor that is used by the JSP engine.
+     */
+    public static final String ANNOTATION_PROCESSOR_ATTR =
+        "org.apache.catalina.annotation_processor";
+
+
     /**
      * The request attribute under which we forward a Java exception
      * (as an object of type Throwable) to an error page.

==================================================
StandardContext.java
index 56d3161a0c..c0da41ec30 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -30,10 +30,10 @@ import javax.servlet.FilterConfig;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 
+import org.apache.AnnotationProcessor;
 import org.apache.catalina.Context;
 import org.apache.catalina.deploy.FilterDef;
 import org.apache.catalina.security.SecurityUtil;
-import org.apache.catalina.util.AnnotationProcessor;
 import org.apache.catalina.util.Enumerator;
 import org.apache.tomcat.util.log.SystemLogHandler;
 
@@ -217,12 +217,11 @@ final class ApplicationFilterConfig implements FilterConfig, Serializable {
         Class clazz = classLoader.loadClass(filterClass);
         this.filter = (Filter) clazz.newInstance();
         if (!context.getIgnoreAnnotations()) {
-            if (context instanceof StandardContext 
-                    && ((StandardContext) context).getNamingContextListener() != null) {
-                AnnotationProcessor.injectNamingResources
-                    (((StandardContext) context).getNamingContextListener().getEnvContext(), this.filter);
+            if (context instanceof StandardContext) {
+               AnnotationProcessor processor = ((StandardContext)context).getAnnotationProcessor();
+               processor.processAnnotations(this.filter);
+               processor.postConstruct(this.filter);
             }
-            AnnotationProcessor.postConstruct(this.filter);
         }
         if (context instanceof StandardContext &&
             ((StandardContext) context).getSwallowOutput()) {
@@ -240,6 +239,7 @@ final class ApplicationFilterConfig implements FilterConfig, Serializable {
         }
         return (this.filter);
 
+
     }
 
 
@@ -259,7 +259,8 @@ final class ApplicationFilterConfig implements FilterConfig, Serializable {
      */
     void release() {
 
-        if (this.filter != null){
+        if (this.filter != null)
+        {
             if (System.getSecurityManager() != null) {
                 try {
                     SecurityUtil.doAsPrivilege("destroy", filter); 
@@ -272,7 +273,7 @@ final class ApplicationFilterConfig implements FilterConfig, Serializable {
             }
             if (!context.getIgnoreAnnotations()) {
                 try {
-                    AnnotationProcessor.preDestroy(this.filter);
+                    ((StandardContext)context).getAnnotationProcessor().preDestroy(this.filter);
                 } catch (Exception e) {
                     context.getLogger().error("ApplicationFilterConfig.preDestroy", e);
                 }
@@ -322,7 +323,7 @@ final class ApplicationFilterConfig implements FilterConfig, Serializable {
                 }
                 if (!context.getIgnoreAnnotations()) {
                     try {
-                        AnnotationProcessor.preDestroy(this.filter);
+                        ((StandardContext)context).getAnnotationProcessor().preDestroy(this.filter);
                     } catch (Exception e) {
                         context.getLogger().error("ApplicationFilterConfig.preDestroy", e);
                     }

==================================================
StandardWrapper.java
index 839e002294..c93e0fdffa 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -33,7 +33,6 @@ import java.util.Iterator;
 import java.util.Stack;
 import java.util.TreeMap;
 
-import javax.management.AttributeNotFoundException;
 import javax.management.ListenerNotFoundException;
 import javax.management.MBeanNotificationInfo;
 import javax.management.MBeanRegistrationException;
@@ -58,6 +57,7 @@ import javax.servlet.ServletRequestListener;
 import javax.servlet.http.HttpSessionAttributeListener;
 import javax.servlet.http.HttpSessionListener;
 
+import org.apache.AnnotationProcessor;
 import org.apache.catalina.Container;
 import org.apache.catalina.ContainerListener;
 import org.apache.catalina.Context;
@@ -85,8 +85,8 @@ import org.apache.catalina.loader.WebappLoader;
 import org.apache.catalina.session.StandardManager;
 import org.apache.catalina.startup.ContextConfig;
 import org.apache.catalina.startup.TldConfig;
-import org.apache.catalina.util.AnnotationProcessor;
 import org.apache.catalina.util.CharsetMapper;
+import org.apache.catalina.util.DefaultAnnotationProcessor;
 import org.apache.catalina.util.ExtensionValidator;
 import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.URLEncoder;
@@ -172,6 +172,12 @@ public class StandardContext
 
 
     /**
+     * Annotation processor.
+     */
+    private AnnotationProcessor annotationProcessor = null;
+
+
+   /**
      * Associated host name.
      */
     private String hostName;
@@ -671,6 +677,16 @@ public class StandardContext
     // ----------------------------------------------------- Context Properties
 
 
+    public AnnotationProcessor getAnnotationProcessor() {
+       return annotationProcessor;
+    }
+
+
+    public void setAnnotationProcessor(AnnotationProcessor annotationProcessor) {
+       this.annotationProcessor = annotationProcessor;
+    }
+
+    
     public String getEncodedPath() {
         return encodedPath;
     }
@@ -3735,11 +3751,8 @@ public class StandardContext
                 results[i] = clazz.newInstance();
                 // Annotation processing
                 if (!getIgnoreAnnotations()) {
-                    if (getNamingContextListener() != null) {
-                        AnnotationProcessor.injectNamingResources
-                            (getNamingContextListener().getEnvContext(), results[i]);
-                    }
-                    AnnotationProcessor.postConstruct(results[i]);
+                    getAnnotationProcessor().processAnnotations(results[i]);
+                    getAnnotationProcessor().postConstruct(results[i]);
                 }
             } catch (Throwable t) {
                 getLogger().error
@@ -3843,7 +3856,7 @@ public class StandardContext
                 // Annotation processing
                 if (!getIgnoreAnnotations()) {
                     try {
-                        AnnotationProcessor.preDestroy(listeners[j]);
+                        getAnnotationProcessor().preDestroy(listeners[j]);
                     } catch (Throwable t) {
                         getLogger().error
                             (sm.getString("standardContext.listenerStop",
@@ -3862,7 +3875,7 @@ public class StandardContext
                 if (listeners[j] == null)
                     continue;
                 try {
-                    AnnotationProcessor.preDestroy(listeners[j]);
+                    getAnnotationProcessor().preDestroy(listeners[j]);
                 } catch (Throwable t) {
                     getLogger().error
                         (sm.getString("standardContext.listenerStop",
@@ -4153,6 +4166,18 @@ public class StandardContext
                 addLifecycleListener(namingContextListener);
             }
         }
+        
+        // Initialize annotation processor
+        if (ok && !getIgnoreAnnotations() && annotationProcessor == null) {
+            if (isUseNaming() && namingContextListener != null) {
+                annotationProcessor = 
+                    new DefaultAnnotationProcessor(namingContextListener.getEnvContext());
+            } else {
+                annotationProcessor = new DefaultAnnotationProcessor(null);
+            }
+        }
+        getServletContext().setAttribute
+            (Globals.ANNOTATION_PROCESSOR_ATTR, annotationProcessor);
 
         // Standard container startup
         if (log.isDebugEnabled())

==================================================
DefaultAnnotationProcessor.java
index d052c7a9bf..c97c207595 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -25,6 +25,10 @@
                is="true"
                type="boolean"/>
       
+     <attribute name="annotationProcessor"
+                description="Object that processes things like injection annotations"
+                type="org.apache.AnnotationProcessor" />
+
     <attribute name="antiJARLocking"
                description="Take care to not lock jar files"
                type="boolean" />
@@ -133,10 +137,6 @@
                description="Name of the object"
                type="java.lang.String"/>
       
-    <attribute name="originalDocBase"
-               description="The original document root for this web application"
-               type="java.lang.String"/>
-
     <attribute name="override"
                description="The DefaultContext override flag for this web application"
                type="boolean"/>

==================================================
