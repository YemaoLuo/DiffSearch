7e084ef43078db3295ee62a750d6aa9ae38cdae4
==================================================
Check for closed sockets earlier and reduce code duplication.
==================================================
Mark Emlyn
==================================================
Tue Oct 22 08:34:32 2013 +0000
==================================================
AprServletInputStream.java
Check for closed sockets earlier and reduce code duplication.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1534540 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprServletOutputStream.java
index 62c04aed55..dcc515e8fc 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
@@ -44,6 +44,10 @@ public class AprServletInputStream extends AbstractServletInputStream {
     protected int doRead(boolean block, byte[] b, int off, int len)
             throws IOException {
 
+        if (closed) {
+            throw new IOException(sm.getString("apr.closed", Long.valueOf(socket)));
+        }
+
         Lock readLock = wrapper.getBlockingStatusReadLock();
         WriteLock writeLock = wrapper.getBlockingStatusWriteLock();
 
@@ -52,9 +56,6 @@ public class AprServletInputStream extends AbstractServletInputStream {
         try {
             readLock.lock();
             if (wrapper.getBlockingStatus() == block) {
-                if (closed) {
-                    throw new IOException(sm.getString("apr.closed", Long.valueOf(socket)));
-                }
                 result = Socket.recv(socket, b, off, len);
                 readDone = true;
             }
@@ -72,9 +73,6 @@ public class AprServletInputStream extends AbstractServletInputStream {
                 try {
                     readLock.lock();
                     writeLock.unlock();
-                    if (closed) {
-                        throw new IOException(sm.getString("apr.closed", Long.valueOf(socket)));
-                    }
                     result = Socket.recv(socket, b, off, len);
                 } finally {
                     readLock.unlock();

==================================================
