b92a52e258a9496fb4baa95d64f1866dd1935e94
==================================================
Move towards new programmatic API
==================================================
Mark Emlyn
==================================================
Wed Feb 27 16:39:41 2013 +0000
==================================================
ServerContainerImpl.java
index 660adc6a4c..2b677fc964 100644
--- a/java/org/apache/tomcat/websocket/server/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
@@ -14,6 +14,7 @@
 # limitations under the License.
 sci.newInstance.fail=Failed to create an Endpoint instance of type [{0}]
 serverContainer.endpointDeploy=Endpoint class [{0}] deploying to path [{1}] in ServletContext [{2}]
+serverContainer.missingAnnotation=Cannot deploy POJO class [{0}] as it is not annotated with @ServerEndpoint
 serverContainer.missingEndpoint=An Endpoint instance has been request for path [{0}] but no matching Endpoint class was found
 serverContainer.pojoDeploy=POJO class [{0}] deploying to path [{1}] in ServletContext [{2}]
 serverContainer.servletContextMismatch=Attempted to register a POJO annotated for WebSocket at path [{0}] in the ServletContext with context path [{1}] when the WebSocket ServerContainer is allocated to the ServletContext with context path [{2}]

==================================================
WsSci.java
index 33340a358f..8292a54d7f 100644
--- a/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
@@ -24,6 +24,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
 import javax.websocket.DeploymentException;
+import javax.websocket.server.ServerEndpoint;
 import javax.websocket.server.ServerEndpointConfiguration;
 import javax.websocket.server.ServerEndpointConfigurationBuilder;
 
@@ -83,6 +84,7 @@ public class ServerContainerImpl extends WsWebSocketContainer {
 
 
     public void setServletContext(ServletContext servletContext) {
+
         if (this.servletContext == servletContext) {
             return;
         }
@@ -146,24 +148,17 @@ public class ServerContainerImpl extends WsWebSocketContainer {
      * WebSocket endpoints.
      *
      * @param pojo   The annotated POJO
-     * @param ctxt   The ServletContext the endpoint is to be published in
-     * @param wsPath The path at which the endpoint is to be published
      */
-    public void publishServer(Class<?> pojo, ServletContext ctxt,
-            String wsPath) {
-        if (ctxt == null) {
+    public void publishServer(Class<?> pojo) {
+
+        ServerEndpoint annotation = pojo.getAnnotation(ServerEndpoint.class);
+        if (annotation == null) {
             throw new IllegalArgumentException(
-                    sm.getString("serverContainer.servletContextMissing"));
-        }
-        // Set the ServletContext if it hasn't already been set
-        if (servletContext == null) {
-            setServletContext(ctxt);
-        } else if (ctxt != servletContext) {
-            // Should never happen
-            throw new IllegalStateException(sm.getString(
-                    "serverContainer.servletContextMismatch", wsPath,
-                    servletContext.getContextPath(), ctxt.getContextPath()));
+                    sm.getString("serverContainer.missingAnnotation",
+                            pojo.getName()));
         }
+        String wsPath = annotation.value();
+
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("serverContainer.pojoDeploy",
                     pojo.getName(), wsPath, servletContext.getContextPath()));

==================================================
TestWsWebSocketContainer.java
index 15c2070f5c..cafe889f4e 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -43,10 +43,9 @@ public class WsSci implements ServletContainerInitializer {
         }
 
         ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+        sc.setServletContext(ctx);
         for (Class<?> clazz : clazzes) {
-            ServerEndpoint annotation =
-                    clazz.getAnnotation(ServerEndpoint.class);
-            sc.publishServer(clazz, ctx, annotation.value());
+            sc.publishServer(clazz);
         }
     }
 }

==================================================
TesterEchoServer.java
index b6bbdcad65..15b8ff53e3 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -36,6 +36,7 @@ import javax.websocket.MessageHandler;
 import javax.websocket.OnMessage;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
+import javax.websocket.server.ServerEndpoint;
 import javax.websocket.server.ServerEndpointConfigurationBuilder;
 
 import org.junit.Assert;
@@ -412,11 +413,13 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
             ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
-            sc.publishServer(BlockingPojo.class, sce.getServletContext(), PATH);
+            sc.setServletContext(sce.getServletContext());
+            sc.publishServer(BlockingPojo.class);
         }
     }
 
 
+    @ServerEndpoint("/block")
     public static class BlockingPojo {
         @SuppressWarnings("unused")
         @OnMessage

==================================================
