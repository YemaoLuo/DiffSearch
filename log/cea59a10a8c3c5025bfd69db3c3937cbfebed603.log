cea59a10a8c3c5025bfd69db3c3937cbfebed603
==================================================
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=55620
==================================================
Mark Emlyn
==================================================
Mon Oct 7 10:55:18 2013 +0000
==================================================
Bootstrap.java
index 2bb4b762e3..01134555c7 100644
--- a/conf/catalina.properties
+++ b/conf/catalina.properties
@@ -44,7 +44,10 @@ package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache
 #     "foo/*.jar": Add all the JARs of the specified folder as class
 #                  repositories
 #     "foo/bar.jar": Add bar.jar as a class repository
-common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar
+#
+# Note: Values are enclosed in double quotes ("...") in case either the 
+#       ${catalina.base} path or the ${catalina.home} path contains a comma.
+common.loader="${catalina.base}/lib","${catalina.base}/lib/*.jar","${catalina.home}/lib","${catalina.home}/lib/*.jar"
 
 #
 # List of comma-separated paths defining the contents of the "server"

==================================================
TestBootstrap.java
index 784b2caf98..40f954c625 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -24,7 +24,8 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.StringTokenizer;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.catalina.Globals;
 import org.apache.catalina.security.SecurityClassLoad;
@@ -51,19 +52,16 @@ public final class Bootstrap {
 
     private static final Log log = LogFactory.getLog(Bootstrap.class);
 
-
-    // ------------------------------------------------------- Static Variables
-
-
     /**
      * Daemon object used by main.
      */
     private static Bootstrap daemon = null;
 
-
     private static final File catalinaBaseFile;
     private static final File catalinaHomeFile;
 
+    private static final Pattern PATH_PATTERN = Pattern.compile("(\".*?\")|(([^,])*)");
+
     static {
         // Will always be non-null
         String userDir = System.getProperty("user.dir");
@@ -172,13 +170,9 @@ public final class Bootstrap {
 
         List<Repository> repositories = new ArrayList<>();
 
-        StringTokenizer tokenizer = new StringTokenizer(value, ",");
-        while (tokenizer.hasMoreElements()) {
-            String repository = tokenizer.nextToken().trim();
-            if (repository.length() == 0) {
-                continue;
-            }
+        String[] repositoryPaths = getPaths(value);
 
+        for (String repository : repositoryPaths) {
             // Check for a JAR URL repository
             try {
                 @SuppressWarnings("unused")
@@ -208,6 +202,7 @@ public final class Bootstrap {
         return ClassLoaderFactory.createClassLoader(repositories, parent);
     }
 
+
     /**
      * System property replacement in the given string.
      *
@@ -562,4 +557,30 @@ public final class Bootstrap {
         }
         // All other instances of Throwable will be silently swallowed
     }
+
+
+    // Protected for unit testing
+    protected static String[] getPaths(String value) {
+
+        List<String> result = new ArrayList<>();
+        Matcher matcher = PATH_PATTERN.matcher(value);
+
+        while (matcher.find()) {
+            String path = value.substring(matcher.start(), matcher.end());
+
+            path = path.trim();
+
+            if (path.startsWith("\"") && path.length() > 1) {
+                path = path.substring(1, path.length() - 1);
+                path = path.trim();
+            }
+
+            if (path.length() == 0) {
+                continue;
+            }
+
+            result.add(path);
+        }
+        return result.toArray(new String[result.size()]);
+    }
 }

==================================================
