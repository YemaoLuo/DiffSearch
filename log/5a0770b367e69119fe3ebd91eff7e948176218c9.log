5a0770b367e69119fe3ebd91eff7e948176218c9
==================================================
Remove duplications.
==================================================
Violeta Georgieva
==================================================
Wed Aug 10 12:38:31 2016 +0000
==================================================
AprEndpoint.java
Remove duplications.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1755731 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index f6cf6409de..6fc34f6301 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2287,13 +2287,9 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             int remaining = readBuffer.remaining();
 
             // Is there enough data in the read buffer to satisfy this request?
-            if (remaining >= len) {
-                readBuffer.get(b, off, len);
-                return len;
-            }
-
             // Copy what data there is in the read buffer to the byte array
             if (remaining > 0) {
+                remaining = Math.min(remaining, len);
                 readBuffer.get(b, off, remaining);
                 return remaining;
                 /*
@@ -2312,16 +2308,10 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             // data that was just read
             if (nRead > 0) {
                 socketBufferHandler.configureReadBufferForRead();
-                if (nRead > len) {
-                    readBuffer.get(b, off, len);
-                    return len;
-                } else {
-                    readBuffer.get(b, off, nRead);
-                    return nRead;
-                }
-            } else {
-                return nRead;
+                nRead = Math.min(nRead, len);
+                readBuffer.get(b, off, nRead);
             }
+            return nRead;
         }
 
 

==================================================
NioEndpoint.java
index 0687525f32..0d3af1bdd2 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -838,23 +838,17 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                 throw new IOException(sm.getString("socket.closed"));
             }
             socketBufferHandler.configureReadBufferForRead();
-
-            int remaining = socketBufferHandler.getReadBuffer().remaining();
+            ByteBuffer readBuffer = socketBufferHandler.getReadBuffer();
+            int remaining = readBuffer.remaining();
 
             // Is there enough data in the read buffer to satisfy this request?
-            if (remaining >= len) {
-                socketBufferHandler.getReadBuffer().get(b, off, len);
-                if (log.isDebugEnabled()) {
-                    log.debug("Socket: [" + this + "], Read from buffer: [" + len + "]");
-                }
-                // No read is going to take place so release here.
-                readPending.release();
-                return len;
-            }
-
             // Copy what data there is in the read buffer to the byte array
             if (remaining > 0) {
-                socketBufferHandler.getReadBuffer().get(b, off, remaining);
+                remaining = Math.min(remaining, len);
+            	readBuffer.get(b, off, remaining);
+                if (log.isDebugEnabled()) {
+                    log.debug("Socket: [" + this + "], Read from buffer: [" + remaining + "]");
+                }
                 // This may be sufficient to complete the request and we
                 // don't want to trigger another read since if there is no
                 // more data to read and this request takes a while to
@@ -871,21 +865,16 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                 // data that was just read
                 if (nRead > 0) {
                     socketBufferHandler.configureReadBufferForRead();
-                    if (nRead > len) {
-                        socketBufferHandler.getReadBuffer().get(b, off, len);
-                    } else {
-                        socketBufferHandler.getReadBuffer().get(b, off, nRead);
-                    }
+                    nRead = Math.min(nRead, len);
+                    readBuffer.get(b, off, nRead);
                 } else if (nRead == 0 && !block) {
                     readInterest = true;
-                } else if (nRead == -1) {
-                    return -1;
                 }
 
                 if (log.isDebugEnabled()) {
                     log.debug("Socket: [" + this + "], Read: [" + nRead + "]");
                 }
-                return (nRead > len) ? len : nRead;
+                return nRead;
             }
         }
 

==================================================
