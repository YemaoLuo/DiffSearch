5b35b268c762a57b1f12fb6192fc7572dabd7baf
==================================================
Generics changes for o.a.el
==================================================
Mark Emlyn
==================================================
Sun Nov 30 22:32:18 2008 +0000
==================================================
ExpressionFactoryImpl.java
Generics changes for o.a.el

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@721914 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MethodExpressionImpl.java
index 79718bdc1a..5372aaa398 100644
--- a/java/org/apache/el/ExpressionFactoryImpl.java
+++ b/java/org/apache/el/ExpressionFactoryImpl.java
@@ -42,7 +42,7 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
         super();
     }
 
-    public Object coerceToType(Object obj, Class type) {
+    public Object coerceToType(Object obj, Class<?> type) {
         return ELSupport.coerceToType(obj, type);
     }
 
@@ -59,7 +59,7 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
     }
 
     public ValueExpression createValueExpression(ELContext context,
-            String expression, Class expectedType) {
+            String expression, Class<?> expectedType) {
         if (expectedType == null) {
             throw new NullPointerException(MessageFactory
                     .get("error.value.expectedType"));
@@ -69,7 +69,7 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
     }
 
     public ValueExpression createValueExpression(Object instance,
-            Class expectedType) {
+            Class<?> expectedType) {
         if (expectedType == null) {
             throw new NullPointerException(MessageFactory
                     .get("error.value.expectedType"));

==================================================
MethodExpressionLiteral.java
index 88bae6a740..7799f21e33 100644
--- a/java/org/apache/el/MethodExpressionImpl.java
+++ b/java/org/apache/el/MethodExpressionImpl.java
@@ -80,7 +80,7 @@ import org.apache.el.util.ReflectionUtil;
 public final class MethodExpressionImpl extends MethodExpression implements
         Externalizable {
 
-    private Class expectedType;
+    private Class<?> expectedType;
 
     private String expr;
 
@@ -90,7 +90,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
 
     private transient Node node;
 
-    private Class[] paramTypes;
+    private Class<?>[] paramTypes;
 
     /**
      * 
@@ -108,7 +108,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      */
     public MethodExpressionImpl(String expr, Node node,
             FunctionMapper fnMapper, VariableMapper varMapper,
-            Class expectedType, Class[] paramTypes) {
+            Class<?> expectedType, Class<?>[] paramTypes) {
         super();
         this.expr = expr;
         this.node = node;

==================================================
ValueExpressionImpl.java
index b0de8cb344..5e3ed0facc 100644
--- a/java/org/apache/el/MethodExpressionLiteral.java
+++ b/java/org/apache/el/MethodExpressionLiteral.java
@@ -33,17 +33,18 @@ import org.apache.el.util.ReflectionUtil;
 
 public class MethodExpressionLiteral extends MethodExpression implements Externalizable {
 
-    private Class expectedType;
+    private Class<?> expectedType;
 
     private String expr;
 
-    private Class[] paramTypes;
+    private Class<?>[] paramTypes;
 
     public MethodExpressionLiteral() {
         // do nothing
     }
 
-    public MethodExpressionLiteral(String expr, Class expectedType, Class[] paramTypes) {
+    public MethodExpressionLiteral(String expr, Class<?> expectedType,
+            Class<?>[] paramTypes) {
         this.expr = expr;
         this.expectedType = expectedType;
         this.paramTypes = paramTypes;

==================================================
ValueExpressionLiteral.java
index 759a0fd6ba..29e8700e68 100644
--- a/java/org/apache/el/ValueExpressionImpl.java
+++ b/java/org/apache/el/ValueExpressionImpl.java
@@ -92,7 +92,7 @@ import org.apache.el.util.ReflectionUtil;
 public final class ValueExpressionImpl extends ValueExpression implements
         Externalizable {
 
-    private Class expectedType;
+    private Class<?> expectedType;
 
     private String expr;
 
@@ -110,7 +110,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      */
     public ValueExpressionImpl(String expr, Node node, FunctionMapper fnMapper,
-            VariableMapper varMapper, Class expectedType) {
+            VariableMapper varMapper, Class<?> expectedType) {
         this.expr = expr;
         this.node = node;
         this.fnMapper = fnMapper;
@@ -133,7 +133,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#getExpectedType()
      */
-    public Class getExpectedType() {
+    public Class<?> getExpectedType() {
         return this.expectedType;
     }
 
@@ -167,7 +167,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#getType(javax.el.ELContext)
      */
-    public Class getType(ELContext context) throws PropertyNotFoundException,
+    public Class<?> getType(ELContext context) throws PropertyNotFoundException,
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);

==================================================
ELSupport.java
index 1477b4ce1f..0dd615896b 100644
--- a/java/org/apache/el/ValueExpressionLiteral.java
+++ b/java/org/apache/el/ValueExpressionLiteral.java
@@ -39,13 +39,13 @@ public final class ValueExpressionLiteral extends ValueExpression implements
 
     private Object value;
 
-    private Class expectedType;
+    private Class<?> expectedType;
 
     public ValueExpressionLiteral() {
         super();
     }
 
-    public ValueExpressionLiteral(Object value, Class expectedType) {
+    public ValueExpressionLiteral(Object value, Class<?> expectedType) {
         this.value = value;
         this.expectedType = expectedType;
     }
@@ -66,11 +66,11 @@ public final class ValueExpressionLiteral extends ValueExpression implements
         return true;
     }
 
-    public Class getType(ELContext context) {
+    public Class<?> getType(ELContext context) {
         return (this.value != null) ? this.value.getClass() : null;
     }
 
-    public Class getExpectedType() {
+    public Class<?> getExpectedType() {
         return this.expectedType;
     }
 

==================================================
ExpressionBuilder.java
index 7c028abe02..a42574044f 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -184,7 +184,7 @@ public class ELSupport {
         if (ELArithmetic.isNumber(obj)) {
             return new Character((char) ((Number) obj).shortValue());
         }
-        Class objType = obj.getClass();
+        Class<?> objType = obj.getClass();
         if (obj instanceof Character) {
             return (Character) obj;
         }
@@ -209,7 +209,7 @@ public class ELSupport {
     }
 
     protected final static Number coerceToNumber(final Number number,
-            final Class type) throws IllegalArgumentException {
+            final Class<?> type) throws IllegalArgumentException {
         if (Long.TYPE == type || Long.class.equals(type)) {
             return new Long(number.longValue());
         }
@@ -251,8 +251,8 @@ public class ELSupport {
                 number, number.getClass(), type));
     }
 
-    public final static Number coerceToNumber(final Object obj, final Class type)
-            throws IllegalArgumentException {
+    public final static Number coerceToNumber(final Object obj,
+            final Class<?> type) throws IllegalArgumentException {
         if (obj == null || "".equals(obj)) {
             return coerceToNumber(ZERO, type);
         }
@@ -273,7 +273,7 @@ public class ELSupport {
     }
 
     protected final static Number coerceToNumber(final String val,
-            final Class type) throws IllegalArgumentException {
+            final Class<?> type) throws IllegalArgumentException {
         if (Long.TYPE == type || Long.class.equals(type)) {
             return Long.valueOf(val);
         }
@@ -319,7 +319,7 @@ public class ELSupport {
         }
     }
 
-    public final static void checkType(final Object obj, final Class type)
+    public final static void checkType(final Object obj, final Class<?> type)
         throws IllegalArgumentException {
         if (String.class.equals(type)) {
             coerceToString(obj);
@@ -338,8 +338,8 @@ public class ELSupport {
         }
     }
 
-    public final static Object coerceToType(final Object obj, final Class type)
-            throws IllegalArgumentException {
+    public final static Object coerceToType(final Object obj,
+            final Class<?> type) throws IllegalArgumentException {
         if (type == null || Object.class.equals(type) ||
                 (obj != null && type.isAssignableFrom(obj.getClass()))) {
             return obj;

==================================================
FunctionMapperImpl.java
index 006dca9a2a..feafba909f 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -99,7 +99,7 @@ public final class ExpressionBuilder implements NodeVisitor {
                     if (numChildren == 1) {
                         n = n.jjtGetChild(0);
                     } else {
-                        Class type = null;
+                        Class<?> type = null;
                         Node child = null;
                         for (int i = 0; i < numChildren; i++) {
                             child = n.jjtGetChild(i);
@@ -189,15 +189,15 @@ public final class ExpressionBuilder implements NodeVisitor {
         }
     }
 
-    public ValueExpression createValueExpression(Class expectedType)
+    public ValueExpression createValueExpression(Class<?> expectedType)
             throws ELException {
         Node n = this.build();
         return new ValueExpressionImpl(this.expression, n, this.fnMapper,
                 this.varMapper, expectedType);
     }
 
-    public MethodExpression createMethodExpression(Class expectedReturnType,
-            Class[] expectedParamTypes) throws ELException {
+    public MethodExpression createMethodExpression(Class<?> expectedReturnType,
+            Class<?>[] expectedParamTypes) throws ELException {
         Node n = this.build();
         if (n instanceof AstValue || n instanceof AstIdentifier) {
             return new MethodExpressionImpl(expression, n, this.fnMapper,

==================================================
ArithmeticNode.java
index 2c41820c40..86a8adc404 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -153,8 +153,8 @@ public class FunctionMapperImpl extends FunctionMapper implements
         public Method getMethod() {
             if (this.m == null) {
                 try {
-                    Class t = ReflectionUtil.forName(this.owner);
-                    Class[] p = ReflectionUtil.toTypeArray(this.types);
+                    Class<?> t = ReflectionUtil.forName(this.owner);
+                    Class<?>[] p = ReflectionUtil.toTypeArray(this.types);
                     this.m = t.getMethod(this.name, p);
                 } catch (Exception e) {
                     e.printStackTrace();

==================================================
AstChoice.java
index 74b9bd4ab6..85627eee76 100644
--- a/java/org/apache/el/parser/ArithmeticNode.java
+++ b/java/org/apache/el/parser/ArithmeticNode.java
@@ -35,7 +35,7 @@ public class ArithmeticNode extends SimpleNode {
         super(i);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Number.class;
     }

==================================================
AstCompositeExpression.java
index 3a3cf3aa41..6600b24021 100644
--- a/java/org/apache/el/parser/AstChoice.java
+++ b/java/org/apache/el/parser/AstChoice.java
@@ -32,7 +32,7 @@ public final class AstChoice extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         Object val = this.getValue(ctx);
         return (val != null) ? val.getClass() : null;

==================================================
AstDeferredExpression.java
index 035c2d0d4e..c7946b132a 100644
--- a/java/org/apache/el/parser/AstCompositeExpression.java
+++ b/java/org/apache/el/parser/AstCompositeExpression.java
@@ -33,7 +33,7 @@ public final class AstCompositeExpression extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return String.class;
     }

==================================================
AstDynamicExpression.java
index 7d442a3607..f64c49dd57 100644
--- a/java/org/apache/el/parser/AstDeferredExpression.java
+++ b/java/org/apache/el/parser/AstDeferredExpression.java
@@ -32,7 +32,7 @@ public final class AstDeferredExpression extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getType(ctx);
     }

==================================================
AstEmpty.java
index 8765b281d1..1b54ceccbf 100644
--- a/java/org/apache/el/parser/AstDynamicExpression.java
+++ b/java/org/apache/el/parser/AstDynamicExpression.java
@@ -32,7 +32,7 @@ public final class AstDynamicExpression extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getType(ctx);
     }

==================================================
AstFloatingPoint.java
index 55eee938f0..0a3a8ce36c 100644
--- a/java/org/apache/el/parser/AstEmpty.java
+++ b/java/org/apache/el/parser/AstEmpty.java
@@ -35,7 +35,7 @@ public final class AstEmpty extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Boolean.class;
     }

==================================================
AstFunction.java
index 1413570fd4..ed5056ac62 100644
--- a/java/org/apache/el/parser/AstFloatingPoint.java
+++ b/java/org/apache/el/parser/AstFloatingPoint.java
@@ -52,7 +52,7 @@ public final class AstFloatingPoint extends SimpleNode {
         return this.getFloatingPoint();
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.getFloatingPoint().getClass();
     }

==================================================
AstIdentifier.java
index 05e3a7125e..1f0e6666d7 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -58,7 +58,7 @@ public final class AstFunction extends SimpleNode {
         return prefix;
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         
         FunctionMapper fnMapper = ctx.getFunctionMapper();
@@ -90,7 +90,7 @@ public final class AstFunction extends SimpleNode {
                     this.getOutputName()));
         }
 
-        Class[] paramTypes = m.getParameterTypes();
+        Class<?>[] paramTypes = m.getParameterTypes();
         Object[] params = null;
         Object result = null;
         int numParams = this.jjtGetNumChildren();

==================================================
AstInteger.java
index b53a76f4c4..4e9a1fccdc 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -37,7 +37,7 @@ public final class AstIdentifier extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx) throws ELException {
+    public Class<?> getType(EvaluationContext ctx) throws ELException {
         VariableMapper varMapper = ctx.getVariableMapper();
         if (varMapper != null) {
             ValueExpression expr = varMapper.resolveVariable(this.image);
@@ -87,23 +87,6 @@ public final class AstIdentifier extends SimpleNode {
         ctx.getELResolver().setValue(ctx, null, this.image, value);
     }
 
-    private final Object invokeTarget(EvaluationContext ctx, Object target,
-            Object[] paramValues) throws ELException {
-        if (target instanceof MethodExpression) {
-            MethodExpression me = (MethodExpression) target;
-            return me.invoke(ctx.getELContext(), paramValues);
-        } else if (target == null) {
-            throw new MethodNotFoundException("Identity '" + this.image
-                    + "' was null and was unable to invoke");
-        } else {
-            throw new ELException(
-                    "Identity '"
-                            + this.image
-                            + "' does not reference a MethodExpression instance, returned type: "
-                            + target.getClass().getName());
-        }
-    }
-
     public Object invoke(EvaluationContext ctx, Class[] paramTypes,
             Object[] paramValues) throws ELException {
         return this.getMethodExpression(ctx).invoke(ctx.getELContext(), paramValues);

==================================================
AstLiteralExpression.java
index ef5b8c159e..677fb86fb0 100644
--- a/java/org/apache/el/parser/AstInteger.java
+++ b/java/org/apache/el/parser/AstInteger.java
@@ -47,7 +47,7 @@ public final class AstInteger extends SimpleNode {
         return number;
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.getInteger().getClass();
     }

==================================================
AstNegative.java
index 5287f0417b..ad686e5200 100644
--- a/java/org/apache/el/parser/AstLiteralExpression.java
+++ b/java/org/apache/el/parser/AstLiteralExpression.java
@@ -32,7 +32,7 @@ public final class AstLiteralExpression extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx) throws ELException {
+    public Class<?> getType(EvaluationContext ctx) throws ELException {
         return String.class;
     }
 

==================================================
AstNot.java
index f58bd9beb5..c974158df2 100644
--- a/java/org/apache/el/parser/AstNegative.java
+++ b/java/org/apache/el/parser/AstNegative.java
@@ -35,7 +35,7 @@ public final class AstNegative extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Number.class;
     }

==================================================
AstNull.java
index fea99618c6..0201cdacb2 100644
--- a/java/org/apache/el/parser/AstNot.java
+++ b/java/org/apache/el/parser/AstNot.java
@@ -32,7 +32,7 @@ public final class AstNot extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Boolean.class;
     }

==================================================
AstString.java
index 3085ee51c7..c0f066e775 100644
--- a/java/org/apache/el/parser/AstNull.java
+++ b/java/org/apache/el/parser/AstNull.java
@@ -32,7 +32,7 @@ public final class AstNull extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return null;
     }

==================================================
AstValue.java
index 449916a8b9..15c3836a98 100644
--- a/java/org/apache/el/parser/AstString.java
+++ b/java/org/apache/el/parser/AstString.java
@@ -41,7 +41,7 @@ public final class AstString extends SimpleNode {
         return this.string;
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return String.class;
     }

==================================================
BooleanNode.java
index 0a5367544c..06262da748 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -52,7 +52,7 @@ public final class AstValue extends SimpleNode {
         super(id);
     }
 
-    public Class getType(EvaluationContext ctx) throws ELException {
+    public Class<?> getType(EvaluationContext ctx) throws ELException {
         Target t = getTarget(ctx);
         ctx.setPropertyResolved(false);
         return ctx.getELResolver().getType(ctx, t.base, t.property);
@@ -169,7 +169,7 @@ public final class AstValue extends SimpleNode {
         Method m = ReflectionUtil.getMethod(t.base, t.property, paramTypes);
         Object result = null;
         try {
-            result = m.invoke(t.base, (Object[]) paramValues);
+            result = m.invoke(t.base, paramValues);
         } catch (IllegalAccessException iae) {
             throw new ELException(iae);
         } catch (InvocationTargetException ite) {

==================================================
SimpleNode.java
index 1d4cc7858b..c769ec98bc 100644
--- a/java/org/apache/el/parser/BooleanNode.java
+++ b/java/org/apache/el/parser/BooleanNode.java
@@ -32,7 +32,7 @@ public class BooleanNode extends SimpleNode {
     public BooleanNode(int i) {
         super(i);
     }
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Boolean.class;
     }

==================================================
ReflectionUtil.java
index 94721bb6b9..7d68445459 100644
--- a/java/org/apache/el/parser/SimpleNode.java
+++ b/java/org/apache/el/parser/SimpleNode.java
@@ -121,7 +121,7 @@ public abstract class SimpleNode extends ELSupport implements Node {
         this.image = image;
     }
 
-    public Class getType(EvaluationContext ctx)
+    public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         throw new UnsupportedOperationException();
     }
@@ -150,11 +150,13 @@ public abstract class SimpleNode extends ELSupport implements Node {
         }
     }
 
-    public Object invoke(EvaluationContext ctx, Class[] paramTypes, Object[] paramValues) throws ELException {
+    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
+            Object[] paramValues) throws ELException {
         throw new UnsupportedOperationException();
     }
 
-    public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes) throws ELException {
+    public MethodInfo getMethodInfo(EvaluationContext ctx,
+            Class[] paramTypes) throws ELException {
         throw new UnsupportedOperationException();
     }
 }

==================================================
