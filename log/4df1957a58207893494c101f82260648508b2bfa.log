4df1957a58207893494c101f82260648508b2bfa
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48517
==================================================
Mark Emlyn
==================================================
Tue Jan 12 10:31:03 2010 +0000
==================================================
BeanELResolver.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48517
Reduce scope of @SupressWarnings and document reasoning
Based on a patch by sebb

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898275 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELContext.java
index cc003521bc..f4524f34b4 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -37,8 +37,8 @@ public class BeanELResolver extends ELResolver {
 
 	private final boolean readOnly;
 
-	private final ConcurrentCache<String, BeanProperties> cache = new ConcurrentCache<String, BeanProperties>(
-			1000);
+	private final ConcurrentCache<String, BeanProperties> cache =
+	    new ConcurrentCache<String, BeanProperties>(1000);
 
 	public BeanELResolver() {
 		this.readOnly = false;
@@ -230,8 +230,8 @@ public class BeanELResolver extends ELResolver {
 			this.type = descriptor.getPropertyType();
 		}
 
-		@SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
-        public Class getPropertyType() {
+		// Can't use Class<?> because API needs to match specification
+        public @SuppressWarnings("unchecked") Class getPropertyType() {
 			return this.type;
 		}
 

==================================================
ResourceBundleELResolver.java
index 19f2f66541..f06b8745d8 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -39,16 +39,17 @@ public abstract class ELContext {
         this.resolved = false;
     }
     
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
-    public Object getContext(Class key) {
+    // Can't use Class<?> because API needs to match specification
+    public Object getContext(@SuppressWarnings("unchecked") Class key) {
         if (this.map == null) {
             return null;
         }
         return this.map.get(key);
     }
     
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
-    public void putContext(Class key, Object contextObject) throws NullPointerException {
+    // Can't use Class<?> because API needs to match specification
+    public void putContext(@SuppressWarnings("unchecked") Class key,
+            Object contextObject) throws NullPointerException {
         if (key == null || contextObject == null) {
             throw new NullPointerException();
         }

==================================================
WebappClassLoader.java
index 2eb3999e50..988958c26b 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -100,8 +100,9 @@ public class ResourceBundleELResolver extends ELResolver {
 	}
 
 	@Override
-    @SuppressWarnings("unchecked") // Can't use Iterator<FeatureDescriptor> because API needs to match specification
-    public Iterator getFeatureDescriptors(ELContext context, Object base) {
+    // Can't use Iterator<FeatureDescriptor> because API needs to match specification
+    public @SuppressWarnings("unchecked") Iterator getFeatureDescriptors(
+            ELContext context, Object base) {
 		if (base instanceof ResourceBundle) {
 			List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();
 			Enumeration<String> e = ((ResourceBundle) base).getKeys();

==================================================
ELSupport.java
index 3e52686fb6..625b2e8aab 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -1788,7 +1788,7 @@ public class WebappClassLoader
                 defineClass("org.apache.catalina.loader.JdbcLeakPrevention",
                     classBytes, 0, offset);
             Object obj = lpClass.newInstance();
-            @SuppressWarnings("unchecked")
+            @SuppressWarnings("unchecked") // clearJdbcDriverRegistrations() returns List<String> 
             List<String> driverNames = (List<String>) obj.getClass().getMethod(
                     "clearJdbcDriverRegistrations").invoke(obj);
             for (String name : driverNames) {
@@ -1812,7 +1812,7 @@ public class WebappClassLoader
 
     private final void clearReferencesStaticFinal() {
         
-        @SuppressWarnings("unchecked")
+        @SuppressWarnings("unchecked") // resourceEntries is HashMap<String, ResourceEntry>
         Collection<ResourceEntry> values =
             ((HashMap<String,ResourceEntry>) resourceEntries.clone()).values();
         Iterator<ResourceEntry> loadedClasses = values.iterator();
@@ -1934,7 +1934,7 @@ public class WebappClassLoader
     }
 
 
-    @SuppressWarnings("deprecation")
+    @SuppressWarnings("deprecation") // thread.stop()
     private void clearReferencesThreads() {
         Thread[] threads = getThreads();
         

==================================================
EvaluationContext.java
index 82c0f28ee0..e1fa2d585f 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -107,12 +107,12 @@ public class ELSupport {
             return coerceToString(obj0).compareTo(coerceToString(obj1));
         }
         if (obj0 instanceof Comparable<?>) {
-            @SuppressWarnings("unchecked")
+            @SuppressWarnings("unchecked") // checked above
             final Comparable<Object> comparable = (Comparable<Object>) obj0;
             return (obj1 != null) ? comparable.compareTo(obj1) : 1;
         }
         if (obj1 instanceof Comparable<?>) {
-            @SuppressWarnings("unchecked")
+            @SuppressWarnings("unchecked") // checked above
             final Comparable<Object> comparable = (Comparable<Object>) obj1;
             return (obj0 != null) ? -comparable.compareTo(obj0) : -1;
         }

==================================================
AstIdentifier.java
index f2d62a578a..cc5827d1ff 100644
--- a/java/org/apache/el/lang/EvaluationContext.java
+++ b/java/org/apache/el/lang/EvaluationContext.java
@@ -54,8 +54,8 @@ public final class EvaluationContext extends ELContext {
     }
 
     @Override
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification in super-class
-    public Object getContext(Class key) {
+    // Can't use Class<?> because API needs to match specification in superclass
+    public Object getContext(@SuppressWarnings("unchecked") Class key) {
         return this.elContext.getContext(key);
     }
 
@@ -70,8 +70,9 @@ public final class EvaluationContext extends ELContext {
     }
 
     @Override
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification in super-class
-    public void putContext(Class key, Object contextObject) {
+    // Can't use Class<?> because API needs to match specification in superclass
+    public void putContext(@SuppressWarnings("unchecked") Class key,
+            Object contextObject) {
         this.elContext.putContext(key, contextObject);
     }
 

==================================================
AstValue.java
index 540bee8bea..a8fc3e2a8e 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -91,17 +91,19 @@ public final class AstIdentifier extends SimpleNode {
         ctx.getELResolver().setValue(ctx, null, this.image, value);
     }
 
-    @SuppressWarnings("unchecked")
     @Override
-    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
+    // Interface el.parser.Node uses raw types (and is auto-generated)
+    public Object invoke(EvaluationContext ctx,
+            @SuppressWarnings("unchecked") Class[] paramTypes,
             Object[] paramValues) throws ELException {
         return this.getMethodExpression(ctx).invoke(ctx.getELContext(), paramValues);
     }
     
 
-    @SuppressWarnings("unchecked")
     @Override
-    public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
+    // Interface el.parser.Node uses raw types (and is auto-generated)
+    public MethodInfo getMethodInfo(EvaluationContext ctx, 
+            @SuppressWarnings("unchecked") Class[] paramTypes)
             throws ELException {
         return this.getMethodExpression(ctx).getMethodInfo(ctx.getELContext());
     }

==================================================
SimpleNode.java
index 9a5cb5d3d7..834fe48660 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -161,9 +161,10 @@ public final class AstValue extends SimpleNode {
     }
 
 
-    @SuppressWarnings("unchecked")
     @Override
-    public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
+    // Interface el.parser.Node uses raw types (and is auto-generated)
+    public MethodInfo getMethodInfo(EvaluationContext ctx, 
+            @SuppressWarnings("unchecked") Class[] paramTypes)
             throws ELException {
         Target t = getTarget(ctx);
         Method m = ReflectionUtil.getMethod(t.base, t.property, paramTypes);
@@ -171,9 +172,10 @@ public final class AstValue extends SimpleNode {
                 .getParameterTypes());
     }
 
-    @SuppressWarnings("unchecked")
     @Override
-    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
+    // Interface el.parser.Node uses a raw type (and is auto-generated)
+    public Object invoke(EvaluationContext ctx, 
+            @SuppressWarnings("unchecked") Class[] paramTypes,
             Object[] paramValues) throws ELException {
         Target t = getTarget(ctx);
         Method m = ReflectionUtil.getMethod(t.base, t.property, paramTypes);

==================================================
VirtualDirContext.java
index 84e76b8481..5250ffddeb 100644
--- a/java/org/apache/el/parser/SimpleNode.java
+++ b/java/org/apache/el/parser/SimpleNode.java
@@ -153,15 +153,17 @@ public abstract class SimpleNode extends ELSupport implements Node {
         }
     }
 
-    @SuppressWarnings("unchecked")
-    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
+    // Interface el.parser.Node uses raw types (and is auto-generated)
+    public Object invoke(EvaluationContext ctx, 
+            @SuppressWarnings("unchecked") Class[] paramTypes,
             Object[] paramValues) throws ELException {
         throw new UnsupportedOperationException();
     }
 
-    @SuppressWarnings("unchecked")
+    // Interface el.parser.Node uses a raw type (and is auto-generated)
     public MethodInfo getMethodInfo(EvaluationContext ctx,
-            Class[] paramTypes) throws ELException {
+            @SuppressWarnings("unchecked") Class[] paramTypes)
+            throws ELException {
         throw new UnsupportedOperationException();
     }
 }

==================================================
