d03377e512aa761b57e8314ad18fe6812ac7d1a7
==================================================
Improve code coverage of Generator tests
==================================================
Mark Thomas
==================================================
Wed Mar 31 11:52:45 2021 +0100
==================================================
Generator.java
Improve code coverage of Generator tests

These tests are fairly simple in that they only check for the correct
return code. The do not check the content of response body. The aim
of the tests is to detect a compilation problem with the Java code
generated from a JSP if the generation process is optimised (eg to
remove a variable declaraton in some cases) incorrectly.

Coverage is as close to 100% as practical for the Generator class



==================================================
TestGenerator.java
index d7db182e62..74b3518986 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -850,9 +850,8 @@ class Generator {
          * "no" or "false" - JSP document without a <jsp:root>
          */
         String omitXmlDecl = pageInfo.getOmitXmlDecl();
-        if ((omitXmlDecl != null && !JspUtil.booleanValue(omitXmlDecl))
-                || (omitXmlDecl == null && page.getRoot().isXmlSyntax()
-                        && !pageInfo.hasJspRoot() && !ctxt.isTagFile())) {
+        if ((omitXmlDecl != null && !JspUtil.booleanValue(omitXmlDecl)) ||
+                (omitXmlDecl == null && page.getRoot().isXmlSyntax() && !pageInfo.hasJspRoot() && !ctxt.isTagFile())) {
             String cType = pageInfo.getContentType();
             String charSet = cType.substring(cType.indexOf("charset=") + 8);
             out.printil("out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\""
@@ -1158,8 +1157,7 @@ class Generator {
                 // If the page for jsp:forward was specified via
                 // jsp:attribute, first generate code to evaluate
                 // that body.
-                pageParam = generateNamedAttributeValue(page
-                        .getNamedAttributeNode());
+                pageParam = generateNamedAttributeValue(page.getNamedAttributeNode());
             } else {
                 pageParam = attributeValue(page, false, String.class);
             }
@@ -2093,8 +2091,7 @@ class Generator {
             String text = n.getText();
             // If the extended option is being used attempt to minimize the
             // frequency of regex operations.
-            if (ctxt.getOptions().getTrimSpaces().equals(TrimSpacesOption.EXTENDED) &&
-                    text.contains("\n")) {
+            if (ctxt.getOptions().getTrimSpaces().equals(TrimSpacesOption.EXTENDED) && text.contains("\n")) {
                 // Ensure there are no <pre> or </pre> tags embedded in this
                 // text - if there are, we want to NOT modify the whitespace.
                 Matcher preMatcher = PRE_TAG_PATTERN.matcher(text);
@@ -4035,8 +4032,7 @@ class Generator {
             this.propertyEditorMaps = new Hashtable<>();
 
             try {
-                BeanInfo tagClassInfo = Introspector
-                        .getBeanInfo(tagHandlerClass);
+                BeanInfo tagClassInfo = Introspector.getBeanInfo(tagHandlerClass);
                 PropertyDescriptor[] pd = tagClassInfo.getPropertyDescriptors();
                 for (PropertyDescriptor propertyDescriptor : pd) {
                     /*
@@ -4051,8 +4047,12 @@ class Generator {
                                 .getPropertyEditorClass());
                 }
             } catch (IntrospectionException ie) {
-                err.jspError(n, ie, "jsp.error.introspect.taghandler",
-                        tagHandlerClass.getName());
+                // Likely unreachable code
+                // When last checked (May 2021), current versions of Java only
+                // throw IntrospectionException for the 2-arg version of
+                // getBeanInfo if the stop class is not a super class of the
+                // bean class. That does not apply here.
+                err.jspError(n, ie, "jsp.error.introspect.taghandler", tagHandlerClass.getName());
             }
         }
 

==================================================
TestCustomHttpJspPage.java
index 5bda4a3979..9101137558 100644
--- a/test/org/apache/jasper/compiler/TestGenerator.java
+++ b/test/org/apache/jasper/compiler/TestGenerator.java
@@ -17,6 +17,10 @@
 
 package org.apache.jasper.compiler;
 
+import java.beans.BeanInfo;
+import java.beans.Introspector;
+import java.beans.PropertyDescriptor;
+import java.beans.PropertyEditorSupport;
 import java.io.File;
 import java.io.IOException;
 import java.util.Date;
@@ -24,12 +28,19 @@ import java.util.Scanner;
 
 import jakarta.servlet.http.HttpServletResponse;
 import jakarta.servlet.jsp.JspException;
+import jakarta.servlet.jsp.PageContext;
+import jakarta.servlet.jsp.tagext.BodyTagSupport;
+import jakarta.servlet.jsp.tagext.DynamicAttributes;
+import jakarta.servlet.jsp.tagext.JspIdConsumer;
+import jakarta.servlet.jsp.tagext.Tag;
 import jakarta.servlet.jsp.tagext.TagData;
 import jakarta.servlet.jsp.tagext.TagExtraInfo;
 import jakarta.servlet.jsp.tagext.TagSupport;
+import jakarta.servlet.jsp.tagext.TryCatchFinally;
 import jakarta.servlet.jsp.tagext.VariableInfo;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -145,10 +156,9 @@ public class TestGenerator extends TomcatBaseTest {
             pageContext.setAttribute("now", bean);
             return super.doStartTag();
         }
-
-
     }
 
+
     public static class Bug48701TEI extends TagExtraInfo {
 
         @Override
@@ -158,9 +168,9 @@ public class TestGenerator extends TomcatBaseTest {
                             true, VariableInfo.AT_END)
                 };
         }
-
     }
 
+
     public static class Bean {
         private String time;
 
@@ -335,4 +345,622 @@ public class TestGenerator extends TomcatBaseTest {
         }
         scanner.close();
     }
+
+    @Test
+    public void testEscape01() {
+        String result = Generator.escape("\"\\\n\r");
+        Assert.assertEquals("\\\"\\\\\\n\\r", result);
+    }
+
+    @Test
+    public void testEscape02() {
+        String result = Generator.escape("\\");
+        Assert.assertEquals("\\\\", result);
+    }
+
+    @Test
+    public void testEscape03() {
+        String result = Generator.escape("xxx\\");
+        Assert.assertEquals("xxx\\\\", result);
+    }
+
+    @Test
+    public void testEscape04() {
+        String result = Generator.escape("\\xxx");
+        Assert.assertEquals("\\\\xxx", result);
+    }
+
+    @Test
+    public void testQuote01() {
+        String result = Generator.quote('\'');
+        Assert.assertEquals("\'\\\'\'", result);
+    }
+
+    @Test
+    public void testQuote02() {
+        String result = Generator.quote('\\');
+        Assert.assertEquals("\'\\\\\'", result);
+    }
+
+    @Test
+    public void testQuote03() {
+        String result = Generator.quote('\n');
+        Assert.assertEquals("\'\\n\'", result);
+    }
+
+    @Test
+    public void testQuote04() {
+        String result = Generator.quote('\r');
+        Assert.assertEquals("\'\\r\'", result);
+    }
+
+    @Test
+    public void testQuote05() {
+        String result = Generator.quote('x');
+        Assert.assertEquals("\'x\'", result);
+    }
+
+    @Test
+    public void testJspId() throws Exception {
+        doTestJspId(false);
+    }
+
+    @Test
+    public void testJspIdDocument() throws Exception {
+        doTestJspId(true);
+    }
+
+    private void doTestJspId(boolean document) throws Exception {
+        getTomcatInstanceTestWebapp(false, true);
+
+        String uri = "http://localhost:" + getPort() + "/test/jsp/generator/jsp-id.jsp";
+        if (document) {
+            uri += "x";
+        }
+        ByteChunk res = getUrl(uri);
+
+        String result = res.toString();
+
+        // Two tags should have different IDs
+        String[] ids = new String[2];
+        int start = 0;
+        int end = 0;
+        for (int i = 0; i < ids.length; i++) {
+            start = result.indexOf("Jsp ID is [", start) + 11;
+            end = result.indexOf("]", start);
+            ids[i] = result.substring(start, end);
+        }
+
+        // Confirm the IDs are not the same
+        Assert.assertNotEquals(ids[0], ids[1]);
+    }
+
+    public static class JspIdTag extends TagSupport implements JspIdConsumer {
+
+        private static final long serialVersionUID = 1L;
+
+        private volatile String jspId;
+
+        @Override
+        public int doStartTag() throws JspException {
+            try {
+                pageContext.getOut().print("<p>Jsp ID is [" + jspId + "]</p>");
+            } catch (IOException ioe) {
+                throw new JspException(ioe);
+            }
+            return super.doStartTag();
+        }
+
+        @Override
+        public void setJspId(String jspId) {
+            this.jspId = jspId;
+        }
+    }
+
+    public static class TryCatchFinallyTag extends BodyTagSupport implements TryCatchFinally {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        public int doStartTag() throws JspException {
+            try {
+                pageContext.getOut().print("<p>OK</p>");
+            } catch (IOException ioe) {
+                throw new JspException(ioe);
+            }
+            return super.doStartTag();
+        }
+
+        @Override
+        public void doCatch(Throwable t) throws Throwable {
+            // NO-OP
+        }
+
+        @Override
+        public void doFinally() {
+            // NO-OP
+        }
+    }
+
+    public static class TesterBodyTag extends BodyTagSupport {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        public int doStartTag() throws JspException {
+            try {
+                pageContext.getOut().print("<p>OK</p>");
+            } catch (IOException ioe) {
+                throw new JspException(ioe);
+            }
+            return super.doStartTag();
+        }
+    }
+
+    public static class TesterTag implements Tag {
+
+        private Tag parent;
+
+        @Override
+        public void setPageContext(PageContext pc) {
+        }
+
+        @Override
+        public void setParent(Tag t) {
+            parent = t;
+        }
+
+        @Override
+        public Tag getParent() {
+            return parent;
+        }
+
+        @Override
+        public int doStartTag() throws JspException {
+            return 0;
+        }
+
+        @Override
+        public int doEndTag() throws JspException {
+            return 0;
+        }
+
+        @Override
+        public void release() {
+        }
+    }
+
+    public static class TesterTagA extends TesterTag {
+        private String data;
+
+        public String getData() {
+            return data;
+        }
+
+        public void setData(String data) {
+            this.data = data;
+        }
+    }
+
+    public static class DataPropertyEditor extends PropertyEditorSupport {
+    }
+
+    public static class TesterScriptingTag extends TagSupport {
+
+        private static final long serialVersionUID = 1L;
+
+        private String attribute02;
+        private String attribute03;
+
+        public String getAttribute02() {
+            return attribute02;
+        }
+
+        public void setAttribute02(String attribute02) {
+            this.attribute02 = attribute02;
+        }
+
+        public String getAttribute03() {
+            return attribute03;
+        }
+
+        public void setAttribute03(String attribute03) {
+            this.attribute03 = attribute03;
+        }
+    }
+
+    public static class TesterScriptingTagB extends TagSupport {
+
+        private static final long serialVersionUID = 1L;
+
+        private String attribute02;
+
+        public String getAttribute02() {
+            return attribute02;
+        }
+
+        public void setAttribute02(String attribute02) {
+            this.attribute02 = attribute02;
+        }
+    }
+
+    public static class TesterScriptingTagBTEI extends TagExtraInfo {
+
+        @Override
+        public VariableInfo[] getVariableInfo(TagData data) {
+            return new VariableInfo[] {
+                    new VariableInfo("variable01", "java.lang.String", true, VariableInfo.NESTED),
+                    new VariableInfo(data.getAttribute("attribute02").toString(),
+                            "java.lang.String", true, VariableInfo.NESTED),
+                    new VariableInfo("variable03", "java.lang.String", false, VariableInfo.NESTED)
+            };
+        }
+
+    }
+
+    public static class TesterDynamicTag extends TagSupport implements DynamicAttributes {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        public void setDynamicAttribute(String uri, String localName, Object value)
+                throws JspException {
+            // NO-OP
+        }
+    }
+
+    public static class TesterAttributeTag extends TagSupport {
+
+        private static final long serialVersionUID = 1L;
+
+        private Object attribute01;
+        private Object attribute02;
+        private Object attribute03;
+        private Object attribute04;
+        private Object attribute05;
+        private Object attribute06;
+
+        public Object getAttribute01() {
+            return attribute01;
+        }
+
+        public void setAttribute01(Object attribute01) {
+            this.attribute01 = attribute01;
+        }
+
+        public Object getAttribute02() {
+            return attribute02;
+        }
+
+        public void setAttribute02(Object attribute02) {
+            this.attribute02 = attribute02;
+        }
+
+        public Object getAttribute03() {
+            return attribute03;
+        }
+
+        public void setAttribute03(Object attribute03) {
+            this.attribute03 = attribute03;
+        }
+
+        public Object getAttribute04() {
+            return attribute04;
+        }
+
+        public void setAttribute04(Object attribute04) {
+            this.attribute04 = attribute04;
+        }
+
+        public Object getAttribute05() {
+            return attribute05;
+        }
+
+        public void setAttribute05(Object attribute05) {
+            this.attribute05 = attribute05;
+        }
+
+        public Object getAttribute06() {
+            return attribute06;
+        }
+
+        public void setAttribute06(Object attribute06) {
+            this.attribute06 = attribute06;
+        }
+    }
+
+
+    @Test
+    public void testInfoConflictNone() throws Exception {
+        doTestJsp("info-conflict-none.jsp");
+    }
+
+    @Test
+    public void testInfoConflict() throws Exception {
+        doTestJsp("info-conflict.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testTagWithVariable() throws Exception {
+        doTestJsp("variable-tei-nested.jsp");
+    }
+
+    @Test
+    public void testTagWithVariableFromAttr() throws Exception {
+        doTestJsp("variable-from-attr-nested.jsp");
+    }
+
+    @Test
+    public void testTagFileWithVariable() throws Exception {
+        doTestJsp("variable-tagfile-nested.jsp");
+    }
+
+    @Test
+    public void testTagFileWithVariableFromAttr() throws Exception {
+        doTestJsp("variable-tagfile-from-attr-nested.jsp");
+    }
+
+    @Test
+    public void testSingleThreaded() throws Exception {
+        doTestJsp("single-threaded.jsp");
+    }
+
+    @Test
+    public void testXpoweredBy() throws Exception {
+        doTestJsp("x-powered-by.jsp");
+    }
+
+    @Test
+    public void testXmlProlog01() throws Exception {
+        doTestJsp("xml-prolog-01.jspx");
+    }
+
+    @Test
+    public void testXmlProlog02() throws Exception {
+        doTestJsp("xml-prolog-02.jspx");
+    }
+
+    @Test
+    public void testXmlPrologTag() throws Exception {
+        doTestJsp("xml-prolog-tag.jspx");
+    }
+
+    @Test
+    public void testXmlDoctype01() throws Exception {
+        doTestJsp("xml-doctype-01.jspx");
+    }
+
+    @Test
+    public void testXmlDoctype02() throws Exception {
+        doTestJsp("xml-doctype-02.jspx");
+    }
+
+    @Test
+    public void testPlugin01() throws Exception {
+        doTestJsp("plugin-01.jspx");
+    }
+
+    @Test
+    public void testForward01() throws Exception {
+        doTestJsp("forward-01.jsp");
+    }
+
+    @Test
+    public void testForward02() throws Exception {
+        doTestJsp("forward-02.jsp");
+    }
+
+    @Test
+    public void testForward03() throws Exception {
+        doTestJsp("forward-03.jsp");
+    }
+
+    @Test
+    public void testForward04() throws Exception {
+        doTestJsp("forward-04.jsp");
+    }
+
+    @Test
+    public void testElement01() throws Exception {
+        doTestJsp("element-01.jsp");
+    }
+
+    @Test
+    public void testInclude01() throws Exception {
+        doTestJsp("include-01.jsp");
+    }
+
+    @Test
+    public void testSetProperty01() throws Exception {
+        doTestJsp("setproperty-01.jsp");
+    }
+
+    @Test
+    public void testUseBean01() throws Exception {
+        doTestJsp("usebean-01.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testUseBean02() throws Exception {
+        doTestJsp("usebean-02.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testUseBean03() throws Exception {
+        doTestJsp("usebean-03.jsp");
+    }
+
+    @Test
+    public void testUseBean04() throws Exception {
+        doTestJsp("usebean-04.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Ignore // Requires specific Java settings
+    @Test
+    public void testUseBean05() throws Exception {
+        // Whether this test passes or fails depends on the Java version used
+        // and the JRE settings.
+        // For the test to pass use Java 9+ with --illegal-access=deny
+        doTestJsp("usebean-05.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testUseBean06() throws Exception {
+        doTestJsp("usebean-06.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testUseBean07() throws Exception {
+        doTestJsp("usebean-07.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testUseBean08() throws Exception {
+        doTestJsp("usebean-08.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testCustomTag01() throws Exception {
+        doTestJsp("try-catch-finally.jsp");
+    }
+
+    @Test
+    public void testCustomTag02() throws Exception {
+        doTestJsp("customtag-02.jsp");
+    }
+
+    @Test
+    public void testCustomTag03() throws Exception {
+        doTestJsp("customtag-03.jsp");
+    }
+
+    @Test
+    public void testCustomTag04() throws Exception {
+        doTestJsp("customtag-04.jsp", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+    }
+
+    @Test
+    public void testTemplateText01() throws Exception {
+        doTestJsp("templatetext-01.jsp");
+    }
+
+    @Test
+    public void testTemplateText02() throws Exception {
+        doTestJsp("templatetext-02.jsp");
+    }
+
+    @Test
+    public void testInvoke01() throws Exception {
+        doTestJsp("invoke-01.jsp");
+    }
+
+    @Test
+    public void testDoBody01() throws Exception {
+        doTestJsp("dobody-01.jsp");
+    }
+
+    @Test
+    public void testScriptingVariables01() throws Exception {
+        doTestJsp("scriptingvariables-01.jsp");
+    }
+
+    @Test
+    public void testScriptingVariables02() throws Exception {
+        doTestJsp("scriptingvariables-02.jsp");
+    }
+
+    @Test
+    public void testAttribute01() throws Exception {
+        doTestJsp("attribute-01.jsp");
+    }
+
+    @Test
+    public void testAttribute02() throws Exception {
+        doTestJsp("attribute-02.jsp");
+    }
+
+    @Test
+    public void testAttribute03() throws Exception {
+        doTestJsp("attribute-03.jsp");
+    }
+
+    @Test
+    public void testAttribute04() throws Exception {
+        doTestJsp("attribute-04.jsp");
+    }
+
+    @Test
+    public void testSetters01() throws Exception {
+        doTestJsp("setters-01.jsp");
+    }
+
+    @Test
+    public void testCircular01() throws Exception {
+        doTestJsp("circular-01.jsp");
+    }
+
+    @Test
+    public void testDeferredMethod01() throws Exception {
+        doTestJsp("deferred-method-01.jsp");
+    }
+
+    @Test
+    public void testDeferredMethod02() throws Exception {
+        doTestJsp("deferred-method-02.jsp");
+    }
+
+    @Test
+    public void testBeanInfo01() throws Exception {
+        BeanInfo bi = Introspector.getBeanInfo(TesterTagA.class);
+        for (PropertyDescriptor pd : bi.getPropertyDescriptors()) {
+            if (pd.getName().equals("data")) {
+                pd.setPropertyEditorClass(DataPropertyEditor.class);
+            }
+        }
+
+        doTestJsp("beaninfo-01.jsp");
+    }
+
+    @Test
+    public void testBreakELInterpreter() throws Exception {
+        getTomcatInstanceTestWebapp(false, true);
+
+        // This should break all subsequent requests
+        ByteChunk body = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/generator/break-el-interpreter.jsp", body, null);
+        Assert.assertEquals(body.toString(), HttpServletResponse.SC_OK, rc);
+
+        body.recycle();
+
+        rc = getUrl("http://localhost:" + getPort() + "/test/jsp/generator/info.jsp", body, null);
+        Assert.assertEquals(body.toString(), HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+    }
+
+    @Test
+    public void testBreakStringInterpreter() throws Exception {
+        getTomcatInstanceTestWebapp(false, true);
+
+        // This should break all subsequent requests
+        ByteChunk body = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/generator/break-string-interpreter.jsp", body, null);
+        Assert.assertEquals(body.toString(), HttpServletResponse.SC_OK, rc);
+
+        body.recycle();
+
+        rc = getUrl("http://localhost:" + getPort() + "/test/jsp/generator/info.jsp", body, null);
+        Assert.assertEquals(body.toString(), HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+    }
+
+    private void doTestJsp(String jspName) throws Exception {
+        doTestJsp(jspName, HttpServletResponse.SC_OK);
+    }
+
+    private void doTestJsp(String jspName, int expectedResponseCode) throws Exception {
+        getTomcatInstanceTestWebapp(false, true);
+
+        ByteChunk body = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/generator/" + jspName, body, null);
+
+        Assert.assertEquals(body.toString(), expectedResponseCode, rc);
+    }
 }

==================================================
TesterBean.java
index 22f75fc87d..ed3687070e 100644
--- a/test/org/apache/jasper/runtime/TestCustomHttpJspPage.java
+++ b/test/org/apache/jasper/runtime/TestCustomHttpJspPage.java
@@ -30,12 +30,28 @@ public class TestCustomHttpJspPage extends TomcatBaseTest {
      * Bug 58444
      */
     @Test
-    public void testCustomBasePageWhenUsingTagFiles() throws Exception {
+    public void testCustomBasePageWhenUsingTagFiles01() throws Exception {
         getTomcatInstanceTestWebapp(true, true);
 
         ByteChunk out = new ByteChunk();
 
-        int rc = getUrl("http://localhost:" + getPort() + "/test/bug5nnnn/bug58444.jsp", out, null);
+        int rc = getUrl("http://localhost:" + getPort() + "/test/bug5nnnn/bug58444a.jsp", out, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+
+        String result = out.toString();
+
+        Assert.assertTrue(result, result.contains("00-PASS"));
+    }
+
+
+    @Test
+    public void testCustomBasePageWhenUsingTagFiles02() throws Exception {
+        getTomcatInstanceTestWebapp(true, true);
+
+        ByteChunk out = new ByteChunk();
+
+        int rc = getUrl("http://localhost:" + getPort() + "/test/bug5nnnn/bug58444b.jsp", out, null);
 
         Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 

==================================================
