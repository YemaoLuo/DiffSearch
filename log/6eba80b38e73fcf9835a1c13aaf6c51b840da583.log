6eba80b38e73fcf9835a1c13aaf6c51b840da583
==================================================
Remove parameter that was being passed around but never used because in the few places it was used, it was already available as a field.
==================================================
Mark Thomas
==================================================
Fri Jan 9 09:43:27 2015 +0000
==================================================
OutputBuffer.java
Remove parameter that was being passed around but never used because in the few places it was used, it was already available as a field.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1650467 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Response.java
index b13d464d74..e77c08b2fa 100644
--- a/java/org/apache/coyote/OutputBuffer.java
+++ b/java/org/apache/coyote/OutputBuffer.java
@@ -34,15 +34,13 @@ public interface OutputBuffer {
      * Write the given data to the response. The caller owns the chunks.
      *
      * @param chunk data to write
-     * @param response used to allow buffers that can be shared by multiple
-     *          responses.
      *
      * @return The number of bytes written which may be less than available in
      *         the input chunk
      *
      * @throws IOException an underlying I/O error occurred
      */
-    public int doWrite(ByteChunk chunk, Response response) throws IOException;
+    public int doWrite(ByteChunk chunk) throws IOException;
 
 
     /**

==================================================
AjpProcessor.java
index e5c7362440..4dedb348c8 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -493,10 +493,8 @@ public final class Response {
     /**
      * Write a chunk of bytes.
      */
-    public void doWrite(ByteChunk chunk/*byte buffer[], int pos, int count*/)
-        throws IOException
-    {
-        outputBuffer.doWrite(chunk, this);
+    public void doWrite(ByteChunk chunk) throws IOException {
+        outputBuffer.doWrite(chunk);
         contentWritten+=chunk.getLength();
     }
 

==================================================
Http11OutputBuffer.java
index 222f5fe7fe..81a7932890 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -38,7 +38,6 @@ import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
-import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -1621,11 +1620,8 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
      */
     protected class SocketOutputBuffer implements OutputBuffer {
 
-        /**
-         * Write chunk.
-         */
         @Override
-        public int doWrite(ByteChunk chunk, Response res) throws IOException {
+        public int doWrite(ByteChunk chunk) throws IOException {
 
             if (!response.isCommitted()) {
                 // Validate and write response headers

==================================================
OutputFilter.java
index b9d4ab9606..3e0e1f403b 100644
--- a/java/org/apache/coyote/http11/Http11OutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -204,7 +204,7 @@ public class Http11OutputBuffer implements OutputBuffer {
     // --------------------------------------------------- OutputBuffer Methods
 
     @Override
-    public int doWrite(ByteChunk chunk, Response res) throws IOException {
+    public int doWrite(ByteChunk chunk) throws IOException {
 
         if (!committed) {
             // Send the connector a request for commit. The connector should
@@ -214,9 +214,9 @@ public class Http11OutputBuffer implements OutputBuffer {
         }
 
         if (lastActiveFilter == -1) {
-            return outputStreamOutputBuffer.doWrite(chunk, res);
+            return outputStreamOutputBuffer.doWrite(chunk);
         } else {
-            return activeFilters[lastActiveFilter].doWrite(chunk, res);
+            return activeFilters[lastActiveFilter].doWrite(chunk);
         }
     }
 
@@ -612,7 +612,7 @@ public class Http11OutputBuffer implements OutputBuffer {
          * Write chunk.
          */
         @Override
-        public int doWrite(ByteChunk chunk, Response res) throws IOException {
+        public int doWrite(ByteChunk chunk) throws IOException {
             int len = chunk.getLength();
             int start = chunk.getStart();
             byte[] b = chunk.getBuffer();

==================================================
ChunkedOutputFilter.java
index 044c2e0fb9..52d8d99544 100644
--- a/java/org/apache/coyote/http11/OutputFilter.java
+++ b/java/org/apache/coyote/http11/OutputFilter.java
@@ -21,7 +21,6 @@ import java.io.IOException;
 
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Response;
-import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
  * Output filter.
@@ -31,16 +30,6 @@ import org.apache.tomcat.util.buf.ByteChunk;
 public interface OutputFilter extends OutputBuffer {
 
 
-    /**
-     * Write some bytes.
-     *
-     * @return number of bytes written by the filter
-     */
-    @Override
-    public int doWrite(ByteChunk chunk, Response unused)
-        throws IOException;
-
-
     /**
      * Some filters need additional parameters from the response. All the
      * necessary reading can occur in that method, as this method is called

==================================================
GzipOutputFilter.java
index 24fc4b1c95..45a1d08c25 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
@@ -88,14 +88,8 @@ public class ChunkedOutputFilter implements OutputFilter {
 
     // --------------------------------------------------- OutputBuffer Methods
 
-
-    /**
-     * Write some bytes.
-     *
-     * @return number of bytes written by the filter
-     */
     @Override
-    public int doWrite(ByteChunk chunk, Response res)
+    public int doWrite(ByteChunk chunk)
         throws IOException {
 
         int result = chunk.getLength();
@@ -113,12 +107,12 @@ public class ChunkedOutputFilter implements OutputFilter {
             chunkLength[pos--] = HexUtils.getHex(digit);
         }
         chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);
-        buffer.doWrite(chunkHeader, res);
+        buffer.doWrite(chunkHeader);
 
-        buffer.doWrite(chunk, res);
+        buffer.doWrite(chunk);
 
         chunkHeader.setBytes(chunkLength, 8, 2);
-        buffer.doWrite(chunkHeader, res);
+        buffer.doWrite(chunkHeader);
 
         return result;
 
@@ -163,7 +157,7 @@ public class ChunkedOutputFilter implements OutputFilter {
         throws IOException {
 
         // Write end chunk
-        buffer.doWrite(END_CHUNK, null);
+        buffer.doWrite(END_CHUNK);
 
         return 0;
 

==================================================
IdentityOutputFilter.java
index c60967b062..6523f016f0 100644
--- a/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
@@ -62,15 +62,8 @@ public class GzipOutputFilter implements OutputFilter {
 
     // --------------------------------------------------- OutputBuffer Methods
 
-
-    /**
-     * Write some bytes.
-     *
-     * @return number of bytes written by the filter
-     */
     @Override
-    public int doWrite(ByteChunk chunk, Response res)
-        throws IOException {
+    public int doWrite(ByteChunk chunk) throws IOException {
         if (compressionStream == null) {
             compressionStream = new GZIPOutputStream(fakeOutputStream, true);
         }
@@ -166,13 +159,13 @@ public class GzipOutputFilter implements OutputFilter {
             // compatibility with Sun JDK 1.4.0
             singleByteBuffer[0] = (byte) (b & 0xff);
             outputChunk.setBytes(singleByteBuffer, 0, 1);
-            buffer.doWrite(outputChunk, null);
+            buffer.doWrite(outputChunk);
         }
         @Override
         public void write(byte[] b, int off, int len)
             throws IOException {
             outputChunk.setBytes(b, off, len);
-            buffer.doWrite(outputChunk, null);
+            buffer.doWrite(outputChunk);
         }
         @Override
         public void flush() throws IOException {/*NOOP*/}

==================================================
VoidOutputFilter.java
index 0f782316d9..3a7dbf95ab 100644
--- a/java/org/apache/coyote/http11/filters/IdentityOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityOutputFilter.java
@@ -55,15 +55,8 @@ public class IdentityOutputFilter implements OutputFilter {
 
     // --------------------------------------------------- OutputBuffer Methods
 
-
-    /**
-     * Write some bytes.
-     *
-     * @return number of bytes written by the filter
-     */
     @Override
-    public int doWrite(ByteChunk chunk, Response res)
-        throws IOException {
+    public int doWrite(ByteChunk chunk) throws IOException {
 
         int result = -1;
 
@@ -81,7 +74,7 @@ public class IdentityOutputFilter implements OutputFilter {
                 } else {
                     remaining = remaining - result;
                 }
-                buffer.doWrite(chunk, res);
+                buffer.doWrite(chunk);
             } else {
                 // No more bytes left to be written : return -1 and clear the
                 // buffer
@@ -90,7 +83,7 @@ public class IdentityOutputFilter implements OutputFilter {
             }
         } else {
             // If no content length was set, just write the bytes
-            buffer.doWrite(chunk, res);
+            buffer.doWrite(chunk);
             result = chunk.getLength();
         }
 

==================================================
SpdyProcessor.java
index c1e819f412..6b0a624fc3 100644
--- a/java/org/apache/coyote/http11/filters/VoidOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidOutputFilter.java
@@ -35,18 +35,9 @@ public class VoidOutputFilter implements OutputFilter {
 
     // --------------------------------------------------- OutputBuffer Methods
 
-
-    /**
-     * Write some bytes.
-     *
-     * @return number of bytes written by the filter
-     */
     @Override
-    public int doWrite(ByteChunk chunk, Response res)
-        throws IOException {
-
+    public int doWrite(ByteChunk chunk) throws IOException {
         return chunk.getLength();
-
     }
 
 

==================================================
TestGzipOutputFilter.java
index c2fd216f8d..0c58df2769 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -33,7 +33,6 @@ import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
-import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.spdy.SpdyConnection;
@@ -124,8 +123,7 @@ public class SpdyProcessor<S> extends AbstractProcessor<S> implements Runnable {
         long byteCount;
 
         @Override
-        public int doWrite(org.apache.tomcat.util.buf.ByteChunk chunk,
-                Response response) throws IOException {
+        public int doWrite(org.apache.tomcat.util.buf.ByteChunk chunk) throws IOException {
             if (!response.isCommitted()) {
 
                 // Send the connector a request for commit. The connector should

==================================================
TesterOutputBuffer.java
index 3a766ef113..baffbc747f 100644
--- a/test/org/apache/coyote/http11/filters/TestGzipOutputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestGzipOutputFilter.java
@@ -63,7 +63,7 @@ public class TestGzipOutputFilter {
         ByteChunk chunk = new ByteChunk(1024);
         byte[] d = "Hello there tomcat developers, there is a bug in JDK".getBytes();
         chunk.append(d, 0, d.length);
-        tob.doWrite(chunk, res);
+        tob.doWrite(chunk);
 
         // flush the InternalOutputBuffer
         tob.flush();

==================================================
