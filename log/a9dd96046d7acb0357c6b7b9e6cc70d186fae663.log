a9dd96046d7acb0357c6b7b9e6cc70d186fae663
==================================================
Add some additional checks required on Windows to keep all the checks in one place and to avoid exceptions later in the processing.
==================================================
Mark Thomas
==================================================
Mon Sep 25 23:20:56 2017 +0000
==================================================
AbstractFileResourceSet.java
Add some additional checks required on Windows to keep all the checks in one place and to avoid exceptions later in the processing.
Includes utility class to determine if platform is Windows and performance test case for alternative implementations.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1809669 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JrePlatform.java
index 28b3483d64..44c35a0d37 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -22,6 +22,7 @@ import java.net.MalformedURLException;
 import java.net.URL;
 
 import org.apache.catalina.LifecycleException;
+import org.apache.tomcat.util.compat.JrePlatform;
 import org.apache.tomcat.util.http.RequestUtil;
 
 public abstract class AbstractFileResourceSet extends AbstractResourceSet {
@@ -77,6 +78,12 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
             return file;
         }
 
+        // Additional Windows specific checks to handle known problems with
+        // File.getCanonicalPath()
+        if (JrePlatform.IS_WINDOWS && isInvalidWindowsFilename(name)) {
+            return null;
+        }
+
         // Check that this file is located under the WebResourceSet's base
         String canPath = null;
         try {
@@ -127,6 +134,34 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
         return file;
     }
 
+
+    private boolean isInvalidWindowsFilename(String name) {
+        // For typical length file names, this is 2-3 times faster than the
+        // equivalent regular expression. The cut-over point is file names (not
+        // full paths) of ~65 characters.
+        char[] chars = name.toCharArray();
+        for (char c : chars) {
+            if (c == '\"' || c == '<' || c == '>') {
+                // These characters are disallowed in Windows file names and
+                // there are known problems for file names with these characters
+                // when using File#getCanonicalPath().
+                // Note: There are additional characters that are disallowed in
+                //       Windows file names but these are not known to cause
+                //       problems when using File#getCanonicalPath().
+                return true;
+            }
+        }
+        // Windows does allow file names to end in ' ' unless specific low level
+        // APIs are used to create the files that bypass various checks. File
+        // names that end in ' ' are known to cause problems when using
+        // File#getCanonicalPath().
+        if (chars[chars.length -1] == ' ') {
+            return true;
+        }
+        return false;
+    }
+
+
     /**
      * Return a context-relative path, beginning with a "/", that represents
      * the canonical version of the specified path after ".." and "." elements

==================================================
TestAbstractFileResourceSetPerformance.java
new file mode 100644
index 0000000000..dccbd9aae7
--- /dev/null
+++ b/java/org/apache/tomcat/util/compat/JrePlatform.java
@@ -0,0 +1,59 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.compat;
+
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
+public class JrePlatform {
+
+    private static final String OS_NAME_PROPERTY = "os.name";
+    private static final String OS_NAME_WINDOWS_PREFIX = "Windows";
+
+    static {
+        /*
+         * There are a few places where a) the behaviour of the Java API depends
+         * on the underlying platform and b) those behavioural differences have
+         * an impact on Tomcat.
+         *
+         * Tomcat therefore needs to be able to determine the platform it is
+         * running on to account for those differences.
+         *
+         * In an ideal world this code would not exist.
+         */
+
+        // This check is derived from the check in Apache Commons Lang
+        String osName;
+        if (System.getSecurityManager() == null) {
+            osName = System.getProperty(OS_NAME_PROPERTY);
+        } else {
+            osName = AccessController.doPrivileged(
+                    new PrivilegedAction<String>() {
+
+                    @Override
+                    public String run() {
+                        return System.getProperty(OS_NAME_PROPERTY);
+                    }
+                });
+        }
+
+        IS_WINDOWS = osName.startsWith(OS_NAME_WINDOWS_PREFIX);
+    }
+
+
+    public static final boolean IS_WINDOWS;
+}

==================================================
