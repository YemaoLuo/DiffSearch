fe3f452d5243e1412a9cbb804ceb92c04cfe6560
==================================================
A couple more test cases for section 6.9
==================================================
Mark Thomas
==================================================
Wed Aug 19 22:10:50 2015 +0000
==================================================
AbstractStream.java
A couple more test cases for section 6.9
Test that window size is not allow to exceed 2^31 - 1

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1696680 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectionSettingsRemote.java
index 227e28f95f..2193620d97 100644
--- a/java/org/apache/coyote/http2/AbstractStream.java
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -109,16 +109,26 @@ abstract class AbstractStream {
      * @throws Http2Exception
      */
     protected synchronized void incrementWindowSize(int increment) throws Http2Exception {
-        // Overflow protection
-        if (Long.MAX_VALUE - increment < windowSize) {
-            windowSize = Long.MAX_VALUE;
-        } else {
-            windowSize += increment;
-        }
+        // No need for overflow protection here.
+        // Increment can't be more than Integer.MAX_VALUE and once windowSize
+        // goes beyond 2^31-1 an error is triggered.
+        windowSize += increment;
+
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("abstractStream.windowSizeInc", getConnectionId(),
                     getIdentifier(), Integer.toString(increment), Long.toString(windowSize)));
         }
+
+        if (windowSize > ConnectionSettingsRemote.MAX_WINDOW_SIZE) {
+            String msg = sm.getString("abstractStream.windowSizeTooBig", getConnectionId(), identifier,
+                    Integer.toString(increment), Long.toString(windowSize));
+            if (identifier.intValue() == 0) {
+                throw new ConnectionException(msg, Http2Error.FLOW_CONTROL_ERROR);
+            } else {
+                throw new StreamException(
+                        msg, Http2Error.FLOW_CONTROL_ERROR, identifier.intValue());
+            }
+        }
     }
 
 

==================================================
Http2TestBase.java
index fc699f5798..6789b61aa1 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -15,6 +15,7 @@
 
 abstractStream.windowSizeDec=Connection [{0}], Stream [{1}], reduce flow control window by [{2}] to [{3}]
 abstractStream.windowSizeInc=Connection [{0}], Stream [{1}], increase flow control window by [{2}] to [{3}]
+abstractStream.windowSizeTooBig=Connection [{0}], Stream [{1}], increase in window size of [{2}] to [{3}] exceeded permitted maximum
 
 connectionPrefaceParser.eos=Unexpected end of stream while reading opening client preface byte sequence. Only [{0}] bytes read.
 connectionPrefaceParser.ioError=Failed to read opening client preface byte sequence

==================================================
TestHttp2Section_6_9.java
index 80e2bc122c..632df2e8dc 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -226,6 +226,12 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
     protected void sendSimplePostRequest(int streamId, byte[] padding) throws IOException {
+        sendSimplePostRequest(streamId, padding, true);
+    }
+
+
+    protected void sendSimplePostRequest(int streamId, byte[] padding, boolean writeBody)
+            throws IOException {
         byte[] headersFrameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
         byte[] dataFrameHeader = new byte[9];
@@ -234,7 +240,9 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         buildPostRequest(headersFrameHeader, headersPayload,
                 dataFrameHeader, dataPayload, padding, streamId);
         writeFrame(headersFrameHeader, headersPayload);
-        writeFrame(dataFrameHeader, dataPayload);
+        if (writeBody) {
+            writeFrame(dataFrameHeader, dataPayload);
+        }
     }
 
 

==================================================
