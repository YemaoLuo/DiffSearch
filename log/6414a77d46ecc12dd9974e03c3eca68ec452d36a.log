6414a77d46ecc12dd9974e03c3eca68ec452d36a
==================================================
Fix the remaining Javadoc warnings for the EL API when building  with Java 8.
==================================================
Mark Emlyn
==================================================
Tue Oct 14 11:03:22 2014 +0000
==================================================
BeanNameResolver.java
Fix the remaining Javadoc warnings for the EL API when building  with Java 8.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631717 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELContext.java
index 5d29ba2c54..932fc1861d 100644
--- a/java/javax/el/BeanNameResolver.java
+++ b/java/javax/el/BeanNameResolver.java
@@ -26,16 +26,24 @@ public abstract class BeanNameResolver {
 
     /**
      * Can this resolver resolve the given bean name?
+     *
+     * @param beanName The bean name to resolve
+     *
+     * @return This default implementation always returns <code>false</code>
      */
-    public boolean isNameResolved(@SuppressWarnings("unused") String beanName) {
+    public boolean isNameResolved(String beanName) {
         return false;
     }
 
 
     /**
      * Returns the named bean.
+     *
+     * @param beanName The bean name to return
+     *
+     * @return This default implementation always returns <code>null</code>
      */
-    public Object getBean(@SuppressWarnings("unused") String beanName) {
+    public Object getBean(String beanName) {
         return null;
     }
 
@@ -44,9 +52,11 @@ public abstract class BeanNameResolver {
      * Sets a value of a bean of the given name. If the named bean does not
      * exist and {@link #canCreateBean} returns <code>true</code> then a bean
      * is created with the given value.
+     *
+     * @param beanName The name of the bean to be set/create
+     * @param value    The value of the bean to set/create
      */
-    public void setBeanValue(@SuppressWarnings("unused") String beanName,
-            @SuppressWarnings("unused") Object value)
+    public void setBeanValue(String beanName, Object value)
             throws PropertyNotWritableException{
         throw new PropertyNotWritableException();
     }
@@ -54,16 +64,26 @@ public abstract class BeanNameResolver {
 
     /**
      * Is the named bean read-only?
+     *
+     * @param beanName The name of the bean of interest
+     *
+     * @return <code>true</code> if the bean is read only, otherwise
+     *         <code>false</code>
      */
-    public boolean isReadOnly(@SuppressWarnings("unused") String beanName) {
+    public boolean isReadOnly(String beanName) {
         return true;
     }
 
 
     /**
      * Is it permitted to create a bean of the given name?
+     *
+     * @param beanName The name of the bean of interest
+     *
+     * @return <code>true</code> if the bean may be created, otherwise
+     *         <code>false</code>
      */
-    public boolean canCreateBean(@SuppressWarnings("unused") String beanName) {
+    public boolean canCreateBean(String beanName) {
         return false;
     }
 }

==================================================
ELContextEvent.java
index 63bffe70f7..d260fd7846 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -47,6 +47,11 @@ public abstract class ELContext {
     }
 
     /**
+     * Mark the given property as resolved and notfy any interested listeners.
+     *
+     * @param base     The base object on which the property was found
+     * @param property The property that was resolved
+     *
      * @since EL 3.0
      */
     public void setPropertyResolved(Object base, Object property) {
@@ -60,6 +65,11 @@ public abstract class ELContext {
 
     // Can't use Class<?> because API needs to match specification
     /**
+     * Add an object to this EL context under the given key.
+     *
+     * @param key           The key under which to store the object
+     * @param contextObject The object to add
+     *
      * @throws NullPointerException
      *              If the supplied key or context is <code>null</code>
      */
@@ -78,6 +88,12 @@ public abstract class ELContext {
 
     // Can't use Class<?> because API needs to match specification
     /**
+     * Obtain the context object for the given key.
+     *
+     * @param key The key of the required context object
+     *
+     * @return The value of the context object associated with the given key
+     *
      * @throws NullPointerException
      *              If the supplied key is <code>null</code>
      */
@@ -94,6 +110,11 @@ public abstract class ELContext {
     public abstract ELResolver getELResolver();
 
     /**
+     * Obtain the ImportHandler for this ELContext, creating one if necessary.
+     * This method is not thread-safe.
+     *
+     * @return the ImportHandler for this ELContext.
+     *
      * @since EL 3.0
      */
     public ImportHandler getImportHandler() {
@@ -116,6 +137,10 @@ public abstract class ELContext {
     public abstract VariableMapper getVariableMapper();
 
     /**
+     * Register an EvaluationListener with this ELContext.
+     *
+     * @param listener The EvaluationListener to register
+     *
      * @since EL 3.0
      */
     public void addEvaluationListener(EvaluationListener listener) {
@@ -123,6 +148,10 @@ public abstract class ELContext {
     }
 
     /**
+     * Obtain the list of registered EvaluationListeners.
+     *
+     * @return A list of the EvaluationListener registered with this ELContext
+     *
      * @since EL 3.0
      */
     public List<EvaluationListener> getEvaluationListeners() {
@@ -130,6 +159,10 @@ public abstract class ELContext {
     }
 
     /**
+     * Notify interested listeners that an expression will be evaluated.
+     *
+     * @param expression The expression that will be evaluated
+     *
      * @since EL 3.0
      */
     public void notifyBeforeEvaluation(String expression) {
@@ -144,6 +177,10 @@ public abstract class ELContext {
     }
 
     /**
+     * Notify interested listeners that an expression has been evaluated.
+     *
+     * @param expression The expression that was evaluated
+     *
      * @since EL 3.0
      */
     public void notifyAfterEvaluation(String expression) {
@@ -158,6 +195,11 @@ public abstract class ELContext {
     }
 
     /**
+     * Notify interested listeners that a property has been resolved.
+     *
+     * @param base     The object on which the property was resolved
+     * @param property The property that was resolved
+     *
      * @since EL 3.0
      */
     public void notifyPropertyResolved(Object base, Object property) {
@@ -172,6 +214,14 @@ public abstract class ELContext {
     }
 
     /**
+     * Determine if the specified name is recognised as the name of a lambda
+     * argument.
+     *
+     * @param name The name of the lambda argument
+     *
+     * @return <code>true</code> if the name is recognised as the name of a
+     *         lambda argument, otherwise <code>false</code>
+     *
      * @since EL 3.0
      */
     public boolean isLambdaArgument(String name) {
@@ -184,6 +234,12 @@ public abstract class ELContext {
     }
 
     /**
+     * Obtain the value of the lambda argument with the given name.
+     *
+     * @param name The name of the lambda argument
+     *
+     * @return The value of the specified argument
+     *
      * @since EL 3.0
      */
     public Object getLambdaArgument(String name) {
@@ -197,6 +253,11 @@ public abstract class ELContext {
     }
 
     /**
+     * Called when starting to evaluate a lambda expression so that the
+     * arguments are available to the EL context during evaluation.
+     *
+     * @param arguments The arguments in scope for the current lambda
+     *                  expression.
      * @since EL 3.0
      */
     public void enterLambdaScope(Map<String,Object> arguments) {
@@ -204,6 +265,9 @@ public abstract class ELContext {
     }
 
     /**
+     * Called after evaluating a lambda expression to signal that the arguments
+     * are no longer required.
+     *
      * @since EL 3.0
      */
     public void exitLambdaScope() {
@@ -211,6 +275,16 @@ public abstract class ELContext {
     }
 
     /**
+     * Coerce the supplied object to the requested type.
+     *
+     * @param obj  The object to be coerced
+     * @param type The type to which the object should be coerced
+     *
+     * @return An instance of the requested type.
+     *
+     * @throws ELException
+     *              If the conversion fails
+     *
      * @since EL 3.0
      */
     public Object convertToType(Object obj, Class<?> type) {

==================================================
ELProcessor.java
index e2e9ee5e18..2ec19614ad 100644
--- a/java/javax/el/ELContextEvent.java
+++ b/java/javax/el/ELContextEvent.java
@@ -19,15 +19,12 @@ package javax.el;
 
 import java.util.EventObject;
 
-/**
- *
- */
 public class ELContextEvent extends EventObject {
 
     private static final long serialVersionUID = 1255131906285426769L;
 
     /**
-     * @param source
+     * @param source The EL context that was the source of this event
      */
     public ELContextEvent(ELContext source) {
         super(source);

==================================================
ELResolver.java
index 1e38beb673..2ce1f2de25 100644
--- a/java/javax/el/ELProcessor.java
+++ b/java/javax/el/ELProcessor.java
@@ -164,6 +164,12 @@ public class ELProcessor {
 
 
     /**
+     * Map a method to a function name.
+     *
+     * @param prefix    Function prefix
+     * @param function  Function name
+     * @param method    Method
+     *
      * @throws NullPointerException
      *              If any of the arguments are null
      * @throws NoSuchMethodException

==================================================
EvaluationListener.java
index 1ca89d3a57..dbfdad7a16 100644
--- a/java/javax/el/ELResolver.java
+++ b/java/javax/el/ELResolver.java
@@ -46,13 +46,21 @@ public abstract class ELResolver {
             Object property);
 
     /**
+     * Invokes a method on the the given object. This default implementation
+     * always returns <code>null</code>.
+     *
+     * @param context    The EL context for this evaluation
+     * @param base       The base object on which the method is to be found
+     * @param method     The method to invoke
+     * @param paramTypes The types of the parameters of the method to invoke
+     * @param params     The parameters with which to invoke the method
+     *
+     * @return Always <code>null</code>
+     *
      * @since EL 2.2
      */
-    public Object invoke(@SuppressWarnings("unused") ELContext context,
-            @SuppressWarnings("unused") Object base,
-            @SuppressWarnings("unused") Object method,
-            @SuppressWarnings("unused") Class<?>[] paramTypes,
-            @SuppressWarnings("unused") Object[] params) {
+    public Object invoke(ELContext context, Object base, Object method,
+            Class<?>[] paramTypes, Object[] params) {
         return null;
     }
 
@@ -119,11 +127,15 @@ public abstract class ELResolver {
      * Converts the given object to the given type. This default implementation
      * always returns <code>null</code>.
      *
+     * @param context The EL context for this evaluation
+     * @param obj     The object to convert
+     * @param type    The type to which the object should be converted
+     *
+     * @return Always <code>null</code>
+     *
      * @since EL 3.0
      */
-    public Object convertToType(@SuppressWarnings("unused") ELContext context,
-            @SuppressWarnings("unused") Object obj,
-            @SuppressWarnings("unused") Class<?> type) {
+    public Object convertToType(ELContext context, Object obj, Class<?> type) {
         return null;
     }
 }

==================================================
ExpressionFactory.java
index 13aec8dd72..785ebdad60 100644
--- a/java/javax/el/EvaluationListener.java
+++ b/java/javax/el/EvaluationListener.java
@@ -24,8 +24,9 @@ public abstract class EvaluationListener {
     /**
      * Fired before the evaluation of the expression.
      *
-     * @param context
-     * @param expression
+     * @param context    The EL context in which the expression will be
+     *                   evaluated
+     * @param expression The expression that will be evaluated
      */
     public void beforeEvaluation(ELContext context, String expression) {
         // NO-OP
@@ -34,8 +35,8 @@ public abstract class EvaluationListener {
     /**
      * Fired after the evaluation of the expression.
      *
-     * @param context
-     * @param expression
+     * @param context    The EL context in which the expression was evaluated
+     * @param expression The expression that was evaluated
      */
     public void afterEvaluation(ELContext context, String expression) {
         // NO-OP
@@ -44,9 +45,9 @@ public abstract class EvaluationListener {
     /**
      * Fired after a property has been resolved.
      *
-     * @param context
-     * @param base
-     * @param property
+     * @param context  The EL context in which the property was resolved
+     * @param base     The base object on which the property was resolved
+     * @param property The property that was resolved
      */
     public void propertyResolved(ELContext context, Object base, Object property) {
         // NO-OP

==================================================
FunctionMapper.java
index 113c20e741..db5d7a93c2 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -204,6 +204,15 @@ public abstract class ExpressionFactory {
     }
 
     /**
+     * Create a new value expression.
+     *
+     * @param context      The EL context for this evaluation
+     * @param expression   The String representation of the value expression
+     * @param expectedType The expected type of the result of evaluating the
+     *                     expression
+     *
+     * @return A new value expression formed from the input parameters
+     *
      * @throws NullPointerException
      *              If the expected type is <code>null</code>
      * @throws ELException
@@ -216,6 +225,17 @@ public abstract class ExpressionFactory {
             Class<?> expectedType);
 
     /**
+     * Create a new method expression instance.
+     *
+     * @param context            The EL context for this evaluation
+     * @param expression         The String representation of the method
+     *                           expression
+     * @param expectedReturnType The expected type of the result of invoking the
+     *                           method
+     * @param expectedParamTypes The expected types of the input parameters
+     *
+     * @return A new method expression formed from the input parameters.
+     *
      * @throws NullPointerException
      *              If the expected parameters types are <code>null</code>
      * @throws ELException
@@ -226,12 +246,21 @@ public abstract class ExpressionFactory {
             Class<?>[] expectedParamTypes);
 
     /**
+     * Coerce the supplied object to the requested type.
+     *
+     * @param obj          The object to be coerced
+     * @param expectedType The type to which the object should be coerced
+     *
+     * @return An instance of the requested type.
+     *
      * @throws ELException
      *              If the conversion fails
      */
     public abstract Object coerceToType(Object obj, Class<?> expectedType);
 
     /**
+     * @return This default implementation returns null
+     *
      * @since EL 3.0
      */
     public ELResolver getStreamELResolver() {
@@ -239,6 +268,8 @@ public abstract class ExpressionFactory {
     }
 
     /**
+     * @return This default implementation returns null
+     *
      * @since EL 3.0
      */
     public Map<String,Method> getInitFunctionMap() {

==================================================
MethodExpression.java
index 4f351225ae..a36df34bde 100644
--- a/java/javax/el/FunctionMapper.java
+++ b/java/javax/el/FunctionMapper.java
@@ -23,9 +23,11 @@ public abstract class FunctionMapper {
     public abstract Method resolveFunction(String prefix, String localName);
 
     /**
-     * @param prefix
-     * @param localName
-     * @param method
+     * Map a method to a function name.
+     *
+     * @param prefix    Function prefix
+     * @param localName Function name
+     * @param method    Method
      *
      * @since EL 3.0
      */

==================================================
ValueExpression.java
index b249fc6d5e..a0a7e697d3 100644
--- a/java/javax/el/MethodExpression.java
+++ b/java/javax/el/MethodExpression.java
@@ -21,6 +21,10 @@ public abstract class MethodExpression extends Expression {
     private static final long serialVersionUID = 8163925562047324656L;
 
     /**
+     * @param context The EL context for this evaluation
+     *
+     * @return Information about the method that this expression resolves to
+     *
      * @throws NullPointerException
      *              If the supplied context is <code>null</code>
      * @throws PropertyNotFoundException
@@ -34,6 +38,11 @@ public abstract class MethodExpression extends Expression {
     public abstract MethodInfo getMethodInfo(ELContext context);
 
     /**
+     * @param context The EL context for this evaluation
+     * @param params  The parameters with which to invoke this method expression
+     *
+     * @return The result of invoking this method expression
+     *
      * @throws NullPointerException
      *              If the supplied context is <code>null</code>
      * @throws PropertyNotFoundException
@@ -48,6 +57,7 @@ public abstract class MethodExpression extends Expression {
     public abstract Object invoke(ELContext context, Object[] params);
 
     /**
+     * @return This default implementation always returns <code>false</code>
      * @since EL 3.0
      */
     public boolean isParametersProvided() {
@@ -62,6 +72,8 @@ public abstract class MethodExpression extends Expression {
      * isParmetersProvided()  - Specification definition
      * isParametersProvided() - Corrected spelling
      *
+     * @return Always <code>false</code>
+     *
      * @deprecated  Use {@link #isParametersProvided()}
      */
     @Deprecated

==================================================
