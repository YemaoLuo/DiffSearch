476c418d7ac7ae8883ec8e024db3da3e7421b74e
==================================================
Use StringManager to provide i18n support in the org.apache.catalina.tribes.transport.bio package.
==================================================
Keiichi Fujino
==================================================
Thu May 21 09:56:49 2015 +0000
==================================================
BioReceiver.java
Use StringManager to provide i18n support in the org.apache.catalina.tribes.transport.bio package.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1680795 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BioReplicationTask.java
index cf88ecfc32..5fc600faf1 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -24,6 +24,7 @@ import org.apache.catalina.tribes.io.ObjectReader;
 import org.apache.catalina.tribes.transport.AbstractRxTask;
 import org.apache.catalina.tribes.transport.ReceiverBase;
 import org.apache.catalina.tribes.transport.RxTaskPool;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -31,6 +32,8 @@ public class BioReceiver extends ReceiverBase implements Runnable {
 
     private static final Log log = LogFactory.getLog(BioReceiver.class);
 
+    protected static final StringManager sm = StringManager.getManager(BioReceiver.class);
+
     protected ServerSocket serverSocket;
 
     public BioReceiver() {
@@ -43,7 +46,7 @@ public class BioReceiver extends ReceiverBase implements Runnable {
         try {
             setPool(new RxTaskPool(getMaxThreads(),getMinThreads(),this));
         } catch (Exception x) {
-            log.fatal("ThreadPool can initilzed. Listener not started", x);
+            log.fatal(sm.getString("bioReceiver.threadpool.fail"), x);
             if ( x instanceof IOException ) throw (IOException)x;
             else throw new IOException(x.getMessage());
         }
@@ -54,7 +57,7 @@ public class BioReceiver extends ReceiverBase implements Runnable {
             t.setDaemon(true);
             t.start();
         } catch (Exception x) {
-            log.fatal("Unable to start cluster receiver", x);
+            log.fatal(sm.getString("bioReceiver.start.fail"), x);
             if ( x instanceof IOException ) throw (IOException)x;
             else throw new IOException(x.getMessage());
         }
@@ -79,7 +82,7 @@ public class BioReceiver extends ReceiverBase implements Runnable {
             this.serverSocket.close();
         } catch (Exception x) {
             if (log.isDebugEnabled()) {
-                log.debug("Failed to close socket", x);
+                log.debug(sm.getString("bioReceiver.socket.closeFailed"), x);
             }
         }
         super.stop();
@@ -100,13 +103,13 @@ public class BioReceiver extends ReceiverBase implements Runnable {
         try {
             listen();
         } catch (Exception x) {
-            log.error("Unable to run replication listener.", x);
+            log.error(sm.getString("bioReceiver.run.fail"), x);
         }
     }
 
     public void listen() throws Exception {
         if (doListen()) {
-            log.warn("ServerSocket already started");
+            log.warn(sm.getString("bioReceiver.already.started"));
             return;
         }
         setListen(true);
@@ -115,7 +118,7 @@ public class BioReceiver extends ReceiverBase implements Runnable {
             Socket socket = null;
             if ( getTaskPool().available() < 1 ) {
                 if ( log.isWarnEnabled() )
-                    log.warn("All BIO server replication threads are busy, unable to handle more requests until a thread is freed up.");
+                    log.warn(sm.getString("bioReceiver.threads.busy"));
             }
             BioReplicationTask task = (BioReplicationTask)getTaskPool().getRxTask();
             if ( task == null ) continue; //should never happen

==================================================
BioSender.java
index 8f2c40f457..f42d369597 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -28,6 +28,7 @@ import org.apache.catalina.tribes.io.ListenCallback;
 import org.apache.catalina.tribes.io.ObjectReader;
 import org.apache.catalina.tribes.transport.AbstractRxTask;
 import org.apache.catalina.tribes.transport.Constants;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -43,9 +44,10 @@ import org.apache.juli.logging.LogFactory;
  */
 public class BioReplicationTask extends AbstractRxTask {
 
-
     private static final Log log = LogFactory.getLog( BioReplicationTask.class );
 
+    protected static final StringManager sm = StringManager.getManager(BioReplicationTask.class);
+
     protected Socket socket;
     protected ObjectReader reader;
 
@@ -61,20 +63,20 @@ public class BioReplicationTask extends AbstractRxTask {
         try {
             drainSocket();
         } catch ( Exception x ) {
-            log.error("Unable to service bio socket", x);
+            log.error(sm.getString("bioReplicationTask.unable.service"), x);
         }finally {
             try {
                 socket.close();
             }catch (Exception e) {
                 if (log.isDebugEnabled()) {
-                    log.debug("Failed to close socket", e);
+                    log.debug(sm.getString("bioReplicationTask.socket.closeFailed"), e);
                 }
             }
             try {
                 reader.close();
             }catch (Exception e) {
                 if (log.isDebugEnabled()) {
-                    log.debug("Failed to close reader", e);
+                    log.debug(sm.getString("bioReplicationTask.reader.closeFailed"), e);
                 }
             }
             reader = null;
@@ -113,7 +115,7 @@ public class BioReplicationTask extends AbstractRxTask {
                     if (ChannelData.sendAckSync(msgs[i].getOptions())) sendAck(Constants.ACK_COMMAND);
                 }catch  ( Exception x ) {
                     if (ChannelData.sendAckSync(msgs[i].getOptions())) sendAck(Constants.FAIL_ACK_COMMAND);
-                    log.error("Error thrown from messageDataReceived.",x);
+                    log.error(sm.getString("bioReplicationTask.messageDataReceived.error"),x);
                 }
                 if ( getUseBufferPool() ) {
                     BufferPool.getBufferPool().returnBuffer(msgs[i].getMessage());
@@ -159,7 +161,7 @@ public class BioReplicationTask extends AbstractRxTask {
                 log.trace("ACK sent to " + socket.getPort());
             }
         } catch ( java.io.IOException x ) {
-            log.warn("Unable to send ACK back through channel, channel disconnected?: "+x.getMessage());
+            log.warn(sm.getString("bioReplicationTask.unable.sendAck", x.getMessage()));
         }
     }
 
@@ -170,14 +172,14 @@ public class BioReplicationTask extends AbstractRxTask {
             socket.close();
         }catch (Exception e) {
             if (log.isDebugEnabled()) {
-                log.debug("Failed to close socket", e);
+                log.debug(sm.getString("bioReplicationTask.socket.closeFailed"), e);
             }
         }
         try {
             reader.close();
         }catch (Exception e) {
             if (log.isDebugEnabled()) {
-                log.debug("Failed to close reader", e);
+                log.debug(sm.getString("bioReplicationTask.reader.closeFailed"), e);
             }
         }
         reader = null;

==================================================
PooledMultiSender.java
new file mode 100644
index 0000000000..229f7b0a08
--- /dev/null
+++ b/java/org/apache/catalina/tribes/transport/bio/LocalStrings.properties
@@ -0,0 +1,37 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+bioReceiver.threadpool.fail=ThreadPool can initilzed. Listener not started
+bioReceiver.start.fail=Unable to start cluster receiver
+bioReceiver.socket.closeFailed=Failed to close socket
+bioReceiver.run.fail=Unable to run replication listener.
+bioReceiver.already.started=ServerSocket already started
+bioReceiver.threads.busy=All BIO server replication threads are busy, unable to handle more requests until a thread is freed up.
+bioReplicationTask.unable.service=Unable to service bio socket
+bioReplicationTask.socket.closeFailed=Failed to close socket
+bioReplicationTask.reader.closeFailed=Failed to close reader
+bioReplicationTask.messageDataReceived.error=Error thrown from messageDataReceived.
+bioReplicationTask.unable.sendAck=Unable to send ACK back through channel, channel disconnected?: {0}
+bioSender.disconnect=Sender disconnect from [{0}:{1,number,integer}] (disconnect count {2,number,integer})
+bioSender.send.again=Send data again to [{0}:{1,number,integer}]
+bioSender.openSocket=Sender open socket to [{0}:{1,number,integer}] (open count {2,number,integer})
+bioSender.openSocket.failure=Open sender socket [{0}:{1,number,integer}] failure! (open failure count {2,number,integer})
+bioSender.closeSocket=Sender close socket to [{0}:{1,number,integer}] (close count {2,number,integer})
+bioSender.ack.eof=EOF reached at local port [{0}:{1,number,integer}]
+bioSender.ack.wrong=Missing correct ACK after 10 bytes read at local port [{0}:{1,number,integer}]
+bioSender.fail.AckReceived=Received a failed ack:org.apache.catalina.tribes.transport.Constants.FAIL_ACK_DATA
+bioSender.ack.missing=Unable to read acknowledgement from [{0}:{1,number,integer}] in {2,number,integer} ms. Disconnecting socket, and trying again.
+pooledMultiSender.unable.retrieve.sender=Unable to retrieve a data sender, time out{0} ms) error.
+pooledMultiSender.retrieve.fail=Unable to retrieve a sender from the sender pool
\ No newline at end of file

==================================================
