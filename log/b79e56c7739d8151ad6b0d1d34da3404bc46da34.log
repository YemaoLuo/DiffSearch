b79e56c7739d8151ad6b0d1d34da3404bc46da34
==================================================
Remove two system properties used for configuration
==================================================
remm remm@apache.org
==================================================
Thu Mar 26 11:29:47 2020 +0100
==================================================
Manager.java
Remove two system properties used for configuration

Again two rarely used properties (well, not for the TCK), both in the
session package:
- org.apache.catalina.session.StandardSession.ACTIVITY_CHECK is replaced
by the Manager.sessionActivityCheck attribute
- org.apache.catalina.session.StandardSession.LAST_ACCESS_AT_START is
replaced by the Manager.sessionLastAccessAtStart attribute


==================================================
DeltaSession.java
index fb1d306f48..3cab011a00 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -440,4 +440,55 @@ public interface Manager {
      */
     public void setNotifyAttributeListenerOnUnchangedValue(
             boolean notifyAttributeListenerOnUnchangedValue);
+
+
+    /**
+     * If this is <code>true</code>, Tomcat will track the number of active
+     * requests for each session. When determining if a session is valid, any
+     * session with at least one active request will always be considered valid.
+     * If <code>org.apache.catalina.STRICT_SERVLET_COMPLIANCE</code> is set to
+     * <code>true</code>, the default of this setting will be <code>true</code>,
+     * else the default value will be <code>false</code>.
+     * @return the flag value
+     */
+    public default boolean getSessionActivityCheck() {
+        return Globals.STRICT_SERVLET_COMPLIANCE;
+    }
+
+
+    /**
+     * Configure if Tomcat will track the number of active requests for each
+     * session. When determining if a session is valid, any session with at
+     * least one active request will always be considered valid.
+     * @param sessionActivityCheck the new flag value
+     */
+    public void setSessionActivityCheck(boolean sessionActivityCheck);
+
+
+    /**
+     * If this is <code>true</code>, the last accessed time for sessions will
+     * be calculated from the beginning of the previous request. If
+     * <code>false</code>, the last accessed time for sessions will be calculated
+     * from the end of the previous request. This also affects how the idle time
+     * is calculated.
+     * If <code>org.apache.catalina.STRICT_SERVLET_COMPLIANCE</code> is set to
+     * <code>true</code>, the default of this setting will be <code>true</code>,
+     * else the default value will be <code>false</code>.
+     * @return the flag value
+     */
+    public default boolean getSessionLastAccessAtStart() {
+        return Globals.STRICT_SERVLET_COMPLIANCE;
+    }
+
+
+    /**
+     * Configure if the last accessed time for sessions will
+     * be calculated from the beginning of the previous request. If
+     * <code>false</code>, the last accessed time for sessions will be calculated
+     * from the end of the previous request. This also affects how the idle time
+     * is calculated.
+     * @param sessionLastAccessAtStart the new flag value
+     */
+    public void setSessionLastAccessAtStart(boolean sessionLastAccessAtStart);
+
 }

==================================================
ManagerBase.java
index 7ea3e1cfa8..9875fb25e5 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -437,7 +437,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         if (this.expiring) {
             return true;
         }
-        if (ACTIVITY_CHECK && accessCount.get() > 0) {
+        if (activityCheck && accessCount.get() > 0) {
             return true;
         }
         if (maxInactiveInterval > 0) {
@@ -1011,7 +1011,11 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
     }
 
     protected void setAccessCount(int count) {
-        if ( accessCount == null && ACTIVITY_CHECK ) accessCount = new AtomicInteger();
-        if ( accessCount != null ) super.accessCount.set(count);
+        if (accessCount == null && activityCheck) {
+            accessCount = new AtomicInteger();
+        }
+        if (accessCount != null) {
+            accessCount.set(count);
+        }
     }
 }

==================================================
StandardSession.java
index 56dd793514..d6304ceaad 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -203,6 +203,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
      */
     private boolean persistAuthentication = false;
 
+    private boolean sessionActivityCheck = Globals.STRICT_SERVLET_COMPLIANCE;
+
+    private boolean sessionLastAccessAtStart = Globals.STRICT_SERVLET_COMPLIANCE;
 
     // ------------------------------------------------------------ Constructors
 
@@ -247,6 +250,30 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
     }
 
 
+    @Override
+    public boolean getSessionActivityCheck() {
+        return sessionActivityCheck;
+    }
+
+
+    @Override
+    public void setSessionActivityCheck(boolean sessionActivityCheck) {
+        this.sessionActivityCheck = sessionActivityCheck;
+    }
+
+
+    @Override
+    public boolean getSessionLastAccessAtStart() {
+        return sessionLastAccessAtStart;
+    }
+
+
+    @Override
+    public void setSessionLastAccessAtStart(boolean sessionLastAccessAtStart) {
+        this.sessionLastAccessAtStart = sessionLastAccessAtStart;
+    }
+
+
     /**
      * Obtain the regular expression used to filter session attribute based on
      * attribute name. The regular expression is anchored so it must match the

==================================================
TestPersistentManagerIntegration.java
index 951f9ee3e6..0e8402a45e 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -84,33 +84,6 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
     private static final long serialVersionUID = 1L;
 
-    protected static final boolean STRICT_SERVLET_COMPLIANCE;
-
-    protected static final boolean ACTIVITY_CHECK;
-
-    protected static final boolean LAST_ACCESS_AT_START;
-
-    static {
-        STRICT_SERVLET_COMPLIANCE = Globals.STRICT_SERVLET_COMPLIANCE;
-
-        String activityCheck = System.getProperty(
-                "org.apache.catalina.session.StandardSession.ACTIVITY_CHECK");
-        if (activityCheck == null) {
-            ACTIVITY_CHECK = STRICT_SERVLET_COMPLIANCE;
-        } else {
-            ACTIVITY_CHECK = Boolean.parseBoolean(activityCheck);
-        }
-
-        String lastAccessAtStart = System.getProperty(
-                "org.apache.catalina.session.StandardSession.LAST_ACCESS_AT_START");
-        if (lastAccessAtStart == null) {
-            LAST_ACCESS_AT_START = STRICT_SERVLET_COMPLIANCE;
-        } else {
-            LAST_ACCESS_AT_START = Boolean.parseBoolean(lastAccessAtStart);
-        }
-    }
-
-
     // ----------------------------------------------------------- Constructors
 
 
@@ -124,8 +97,14 @@ public class StandardSession implements HttpSession, Session, Serializable {
         super();
         this.manager = manager;
 
+        if (manager != null) {
+            // Manager could be null in test environments
+            activityCheck = manager.getSessionActivityCheck();
+            lastAccessAtStart = manager.getSessionLastAccessAtStart();
+        }
+
         // Initialize access count
-        if (ACTIVITY_CHECK) {
+        if (activityCheck) {
             accessCount = new AtomicInteger();
         }
 
@@ -271,6 +250,18 @@ public class StandardSession implements HttpSession, Session, Serializable {
     protected transient AtomicInteger accessCount = null;
 
 
+    /**
+     * The activity check for this session.
+     */
+    protected transient boolean activityCheck;
+
+
+    /**
+     * The behavior of the last access check.
+     */
+    protected transient boolean lastAccessAtStart;
+
+
     // ----------------------------------------------------- Session Properties
 
 
@@ -525,7 +516,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
     public long getIdleTimeInternal() {
         long timeNow = System.currentTimeMillis();
         long timeIdle;
-        if (LAST_ACCESS_AT_START) {
+        if (lastAccessAtStart) {
             timeIdle = timeNow - lastAccessedTime;
         } else {
             timeIdle = timeNow - thisAccessedTime;
@@ -650,7 +641,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             return true;
         }
 
-        if (ACTIVITY_CHECK && accessCount.get() > 0) {
+        if (activityCheck && accessCount.get() > 0) {
             return true;
         }
 
@@ -689,7 +680,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
         this.thisAccessedTime = System.currentTimeMillis();
 
-        if (ACTIVITY_CHECK) {
+        if (activityCheck) {
             accessCount.incrementAndGet();
         }
 
@@ -708,7 +699,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
          * The servlet spec mandates to ignore request handling time
          * in lastAccessedTime.
          */
-        if (LAST_ACCESS_AT_START) {
+        if (lastAccessAtStart) {
             this.lastAccessedTime = this.thisAccessedTime;
             this.thisAccessedTime = System.currentTimeMillis();
         } else {
@@ -716,7 +707,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             this.lastAccessedTime = this.thisAccessedTime;
         }
 
-        if (ACTIVITY_CHECK) {
+        if (activityCheck) {
             accessCount.decrementAndGet();
         }
 
@@ -820,7 +811,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 }
             }
 
-            if (ACTIVITY_CHECK) {
+            if (activityCheck) {
                 accessCount.set(0);
             }
 
@@ -902,7 +893,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
     public void activate() {
 
         // Initialize access count
-        if (ACTIVITY_CHECK) {
+        if (activityCheck) {
             accessCount = new AtomicInteger();
         }
 

==================================================
