a459ef82ae46c040b803d10a1fdc1370952d4f7e
==================================================
Pull up release()
==================================================
Mark Thomas
==================================================
Thu May 28 08:23:01 2015 +0000
==================================================
AbstractHttp11Protocol.java
Pull up release()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682167 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index e57b1e9abe..b62c338cc7 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -627,5 +627,16 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
                 return new UpgradeProcessorExternal(socket, leftoverInput, httpUpgradeHandler);
             }
         }
+
+
+        @Override
+        public void release(SocketWrapperBase<S> socket,
+                Processor processor, boolean addToPoller) {
+            processor.recycle();
+            recycledProcessors.push(processor);
+            if (addToPoller) {
+                socket.registerReadInterest();
+            }
+        }
     }
 }

==================================================
Http11Nio2Protocol.java
index a04f9f4074..7349eb0877 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -16,11 +16,9 @@
  */
 package org.apache.coyote.http11;
 
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AprEndpoint;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
 /**
@@ -94,15 +92,5 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         protected Log getLog() {
             return log;
         }
-
-        @Override
-        public void release(SocketWrapperBase<Long> socket,
-                Processor processor, boolean addToPoller) {
-            processor.recycle();
-            recycledProcessors.push(processor);
-            if (addToPoller) {
-                socket.registerReadInterest();
-            }
-        }
     }
 }

==================================================
Http11NioProtocol.java
index e473138eaf..411b1600af 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -89,17 +89,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         }
 
 
-        @Override
-        public void release(SocketWrapperBase<Nio2Channel> socket,
-                Processor processor, boolean addToPoller) {
-            processor.recycle();
-            recycledProcessors.push(processor);
-            if (addToPoller) {
-                socket.registerReadInterest();
-            }
-        }
-
-
         @Override
         public void closeAll() {
             for (Nio2Channel channel : connections.keySet()) {

==================================================
