0b21a8a02fa58b05a57f89ad0dd159354952936c
==================================================
Simplify. Entries are removed from bufferedWrites as soon as they are fully written so the code only needs to check for size() > 0.
==================================================
Mark Thomas
==================================================
Fri Jan 9 13:39:51 2015 +0000
==================================================
Nio2Endpoint.java
Simplify. Entries are removed from bufferedWrites as soon as they are fully written so the code only needs to check for size() > 0.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1650527 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SocketWrapperBase.java
index d25c80e992..a304505815 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1253,7 +1253,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                             }
                         }
                     }
-                    return hasMoreDataToFlush() || hasBufferedData() || getError() != null;
+                    return hasDataToWrite();
                 }
             }
         }
@@ -1262,7 +1262,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         @Override
         public boolean hasDataToWrite() {
             synchronized (writeCompletionHandler) {
-                return hasMoreDataToFlush() || hasBufferedData() || getError() != null;
+                return hasMoreDataToFlush() || bufferedWrites.size() > 0 || getError() != null;
             }
         }
 

==================================================
TestWebSocketFrameClient.java
index 2f1d85f8dd..89d2f97320 100644
--- a/java/org/apache/tomcat/util/net/SocketWrapperBase.java
+++ b/java/org/apache/tomcat/util/net/SocketWrapperBase.java
@@ -183,17 +183,8 @@ public abstract class SocketWrapperBase<E> {
         (!writeBufferFlipped && socketWriteBuffer.position() > 0);
     }
 
-    protected boolean hasBufferedData() {
-        boolean result = false;
-        Iterator<ByteBufferHolder> iter = bufferedWrites.iterator();
-        while (!result && iter.hasNext()) {
-            result = iter.next().hasData();
-        }
-        return result;
-    }
-
     public boolean hasDataToWrite() {
-        return hasMoreDataToFlush() || hasBufferedData();
+        return hasMoreDataToFlush() || bufferedWrites.size() > 0;
     }
 
     public boolean isReadyForWrite() {

==================================================
