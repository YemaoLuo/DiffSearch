bf5c530aa06a450c97bf976b8f220fd471333b2f
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61415
==================================================
Mark Thomas
==================================================
Tue Aug 22 11:03:28 2017 +0000
==================================================
SSLContext.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61415
Fix TLS renegotiation with OpenSSL based connections and session caching.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1805752 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 4a9a5ff394..607d12659e 100644
--- a/java/org/apache/tomcat/jni/SSLContext.java
+++ b/java/org/apache/tomcat/jni/SSLContext.java
@@ -26,6 +26,9 @@ import java.util.concurrent.ConcurrentHashMap;
  */
 public final class SSLContext {
 
+    public static final byte[] DEFAULT_SESSION_ID_CONTEXT =
+            new byte[] { 'd', 'e', 'f', 'a', 'u', 'l', 't' };
+
     /**
      * Create a new SSL context.
      *

==================================================
SecureNioChannel.java
index ad5a4beec5..71583008fa 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -543,6 +543,11 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
             SSLContext.setAlpnProtos(ctx, protocolsArray, SSL.SSL_SELECTOR_FAILURE_NO_ADVERTISE);
         }
 
+        // If client authentication is being used, OpenSSL requires that
+        // this is set so always set it in case an app is configured to require
+        // it
+        SSLContext.setSessionIdContext(ctx, SSLContext.DEFAULT_SESSION_ID_CONTEXT);
+
         long cctx;
         OpenSSLConf openSslConf = sslHostConfig.getOpenSslConf();
         if (openSslConf != null) {

==================================================
OpenSSLContext.java
index d6e4ae0486..42453341ea 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -432,7 +432,7 @@ public class SecureNioChannel extends NioChannel  {
         //so we can clear it here.
         netOutBuffer.clear();
         //perform the wrap
-        getBufHandler().configureWriteBufferForWrite();
+        getBufHandler().configureWriteBufferForRead();
         SSLEngineResult result = sslEngine.wrap(getBufHandler().getWriteBuffer(), netOutBuffer);
         //prepare the results to be written
         netOutBuffer.flip();

==================================================
