8f85c08925bc3dc39210f24b484aab30b4ed2b93
==================================================
Providing the error does not require the immediate closure of the connection, pass all errors (invalid requests etc.) that occur before the request processing pipeline is reached to the standard error handling mechanism so that the application error handling or the ErrorReportVlave can handle it.
==================================================
Mark Thomas
==================================================
Thu Feb 8 15:15:57 2018 +0000
==================================================
CoyoteAdapter.java
Providing the error does not require the immediate closure of the connection, pass all errors (invalid requests etc.) that occur before the request processing pipeline is reached to the standard error handling mechanism so that the application error handling or the ErrorReportVlave can handle it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1823565 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProcessor.java
index 50498aab6f..de3ba9ca34 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -393,14 +393,25 @@ public class CoyoteAdapter implements Adapter {
                 // Log only if processing was invoked.
                 // If postParseRequest() failed, it has already logged it.
                 Context context = request.getContext();
+                Host host = request.getHost();
                 // If the context is null, it is likely that the endpoint was
                 // shutdown, this connection closed and the request recycled in
                 // a different thread. That thread will have updated the access
                 // log so it is OK not to update the access log here in that
                 // case.
+                // The other possibility is that an error occurred early in
+                // processing and the request could not be mapped to a Context.
+                // Log via the host or engine in that case.
+                long time = System.currentTimeMillis() - req.getStartTime();
                 if (context != null) {
-                    context.logAccess(request, response,
-                            System.currentTimeMillis() - req.getStartTime(), false);
+                    context.logAccess(request, response, time, false);
+                } else if (response.isError()) {
+                    if (host != null) {
+                        host.logAccess(request, response, time, false);
+                    } else {
+                        connector.getService().getContainer().logAccess(
+                                request, response, time, false);
+                    }
                 }
             }
 

==================================================
Response.java
index ee7060b3fc..7a404ebabc 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -84,6 +84,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
      * @param t The error which occurred
      */
     protected void setErrorState(ErrorState errorState, Throwable t) {
+        response.setError();
         boolean blockIo = this.errorState.isIoAllowed() && !errorState.isIoAllowed();
         this.errorState = this.errorState.getMostSevere(errorState);
         // Don't change the status code for IOException since that is almost

==================================================
AjpProcessor.java
index e877883d5c..afef39b18b 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -227,6 +227,10 @@ public final class Response {
      * @param status The status value to set
      */
     public void setStatus(int status) {
+        if (this.status > 399) {
+            // Don't overwrite first recorded error status
+            return;
+        }
         this.status = status;
     }
 

==================================================
Http11Processor.java
index 7220f24457..da5348093d 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -364,10 +364,9 @@ public class AjpProcessor extends AbstractProcessor {
                 // 400 - Bad Request
                 response.setStatus(400);
                 setErrorState(ErrorState.CLOSE_CLEAN, t);
-                getAdapter().log(request, response, 0);
             }
 
-            if (!getErrorState().isError()) {
+            if (getErrorState().isIoAllowed()) {
                 // Setting up filters, and parse some request headers
                 rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);
                 try {
@@ -378,20 +377,18 @@ public class AjpProcessor extends AbstractProcessor {
                     // 500 - Internal Server Error
                     response.setStatus(500);
                     setErrorState(ErrorState.CLOSE_CLEAN, t);
-                    getAdapter().log(request, response, 0);
                 }
             }
 
-            if (!getErrorState().isError() && !cping && protocol.isPaused()) {
+            if (getErrorState().isIoAllowed() && !cping && protocol.isPaused()) {
                 // 503 - Service unavailable
                 response.setStatus(503);
                 setErrorState(ErrorState.CLOSE_CLEAN, null);
-                getAdapter().log(request, response, 0);
             }
             cping = false;
 
             // Process the request in the adapter
-            if (!getErrorState().isError()) {
+            if (getErrorState().isIoAllowed()) {
                 try {
                     rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
                     getAdapter().service(request, response);
@@ -852,7 +849,7 @@ public class AjpProcessor extends AbstractProcessor {
         MessageBytes valueMB = request.getMimeHeaders().getValue("host");
         parseHost(valueMB);
 
-        if (getErrorState().isError()) {
+        if (!getErrorState().isIoAllowed()) {
             getAdapter().log(request, response, 0);
         }
     }

==================================================
TestAbstractAjpProcessor.java
index 8e4708a7de..3f6a89570b 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -341,7 +341,6 @@ public class Http11Processor extends AbstractProcessor {
                 // 400 - Bad Request
                 response.setStatus(400);
                 setErrorState(ErrorState.CLOSE_CLEAN, t);
-                getAdapter().log(request, response, 0);
             }
 
             // Has an upgrade been requested?
@@ -377,7 +376,7 @@ public class Http11Processor extends AbstractProcessor {
                 }
             }
 
-            if (!getErrorState().isError()) {
+            if (getErrorState().isIoAllowed()) {
                 // Setting up filters, and parse some request headers
                 rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);
                 try {
@@ -390,7 +389,6 @@ public class Http11Processor extends AbstractProcessor {
                     // 500 - Internal Server Error
                     response.setStatus(500);
                     setErrorState(ErrorState.CLOSE_CLEAN, t);
-                    getAdapter().log(request, response, 0);
                 }
             }
 
@@ -403,7 +401,7 @@ public class Http11Processor extends AbstractProcessor {
             }
 
             // Process the request in the adapter
-            if (!getErrorState().isError()) {
+            if (getErrorState().isIoAllowed()) {
                 try {
                     rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
                     getAdapter().service(request, response);
@@ -529,7 +527,6 @@ public class Http11Processor extends AbstractProcessor {
                 // Partially processed the request so need to respond
                 response.setStatus(503);
                 setErrorState(ErrorState.CLOSE_CLEAN, null);
-                getAdapter().log(request, response, 0);
                 return false;
             } else {
                 // Need to keep processor associated with socket
@@ -771,7 +768,7 @@ public class Http11Processor extends AbstractProcessor {
             contentDelimitation = true;
         }
 
-        if (getErrorState().isError()) {
+        if (!getErrorState().isIoAllowed()) {
             getAdapter().log(request, response, 0);
         }
     }

==================================================
TestMimeHeadersIntegration.java
index 5dcc272c7a..2bdca716b8 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -512,8 +512,8 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         TesterAjpMessage responseHeaders = ajpClient.sendMessage(forwardMessage);
         // Expect 3 packets: headers, body, end
         validateResponseHeaders(responseHeaders, 403, "403");
-        //TesterAjpMessage responseBody = ajpClient.readMessage();
-        //validateResponseBody(responseBody, HelloWorldServlet.RESPONSE_TEXT);
+        TesterAjpMessage responseBody = ajpClient.readMessage();
+        validateResponseBody(responseBody, "<p><b>Type</b> Status Report</p>");
         validateResponseEnd(ajpClient.readMessage(), false);
 
         ajpClient.connect();
@@ -526,8 +526,8 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         responseHeaders = ajpClient.sendMessage(forwardMessage);
         // Expect 3 packets: headers, body, end
         validateResponseHeaders(responseHeaders, 403, "403");
-        //responseBody = ajpClient.readMessage();
-        //validateResponseBody(responseBody, HelloWorldServlet.RESPONSE_TEXT);
+        responseBody = ajpClient.readMessage();
+        validateResponseBody(responseBody, "<p><b>Type</b> Status Report</p>");
         validateResponseEnd(ajpClient.readMessage(), false);
 
         ajpClient.connect();
@@ -540,7 +540,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         responseHeaders = ajpClient.sendMessage(forwardMessage);
         // Expect 3 packets: headers, body, end
         validateResponseHeaders(responseHeaders, 200, "200");
-        TesterAjpMessage responseBody = ajpClient.readMessage();
+        responseBody = ajpClient.readMessage();
         validateResponseBody(responseBody, HelloWorldServlet.RESPONSE_TEXT);
         validateResponseEnd(ajpClient.readMessage(), true);
 
@@ -641,7 +641,9 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
             // Double check the connection is still open
             validateCpong(ajpClient.cping());
         } else {
-            // Expect 2 messages: headers, end for an invalid request
+            // Expect 3 messages: headers, error report body, end for an invalid request
+            TesterAjpMessage responseBody = ajpClient.readMessage();
+            validateResponseBody(responseBody, "<p><b>Type</b> Status Report</p>");
             validateResponseEnd(ajpClient.readMessage(), false);
         }
 

==================================================
