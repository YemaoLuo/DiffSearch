f02d054a0c2eee7a3826142739eafdde195043af
==================================================
Remove unused code (ConstantString)
==================================================
Mark Emlyn
==================================================
Wed Sep 10 22:14:25 2014 +0000
==================================================
Constant.java
Remove unused code (ConstantString)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624147 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConstantPool.java
index cd59694864..e35a68b1e8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -103,7 +103,8 @@ public abstract class Constant implements Cloneable, Serializable {
                 Utility.swallowConstantCP(file);
                 return null;
             case Constants.CONSTANT_String:
-                return new ConstantString(file);
+                Utility.swallowConstantString(file);
+                return null;
             case Constants.CONSTANT_Integer:
                 return new ConstantInteger(file);
             case Constants.CONSTANT_Float:

==================================================
ConstantString.java
index fc544283a8..58ea10e6b4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -89,11 +89,6 @@ public class ConstantPool implements Cloneable, Serializable {
                 c = getConstant(i, Constants.CONSTANT_Utf8);
                 str = Utility.compactClassName(((ConstantUtf8) c).getBytes());
                 break;
-            case Constants.CONSTANT_String:
-                i = ((ConstantString) c).getStringIndex();
-                c = getConstant(i, Constants.CONSTANT_Utf8);
-                str = "\"" + escape(((ConstantUtf8) c).getBytes()) + "\"";
-                break;
             case Constants.CONSTANT_Utf8:
                 str = ((ConstantUtf8) c).getBytes();
                 break;
@@ -122,35 +117,6 @@ public class ConstantPool implements Cloneable, Serializable {
     }
 
 
-    private static String escape( String str ) {
-        int len = str.length();
-        StringBuilder buf = new StringBuilder(len + 5);
-        char[] ch = str.toCharArray();
-        for (int i = 0; i < len; i++) {
-            switch (ch[i]) {
-                case '\n':
-                    buf.append("\\n");
-                    break;
-                case '\r':
-                    buf.append("\\r");
-                    break;
-                case '\t':
-                    buf.append("\\t");
-                    break;
-                case '\b':
-                    buf.append("\\b");
-                    break;
-                case '"':
-                    buf.append("\\\"");
-                    break;
-                default:
-                    buf.append(ch[i]);
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * Retrieve constant at `index' from constant pool and resolve it to
      * a string representation.
@@ -215,30 +181,17 @@ public class ConstantPool implements Cloneable, Serializable {
      * @param  tag Tag of expected constant, either ConstantClass or ConstantString
      * @return Contents of string reference
      * @see    ConstantClass
-     * @see    ConstantString
      * @throws  ClassFormatException
      */
     public String getConstantString( int index, byte tag ) throws ClassFormatException {
-        Constant c;
-        int i;
-        c = getConstant(index, tag);
-        /* This switch() is not that elegant, since the two classes have the
-         * same contents, they just differ in the name of the index
-         * field variable.
-         * But we want to stick to the JVM naming conventions closely though
-         * we could have solved these more elegantly by using the same
-         * variable name or by subclassing.
-         */
-        switch (tag) {
-            case Constants.CONSTANT_Class:
-                i = ((ConstantClass) c).getNameIndex();
-                break;
-            case Constants.CONSTANT_String:
-                i = ((ConstantString) c).getStringIndex();
-                break;
-            default:
-                throw new RuntimeException("getConstantString called with illegal tag " + tag);
+        Constant c = getConstant(index, tag);
+
+        if (Constants.CONSTANT_Class != tag) {
+            throw new RuntimeException("getConstantString called with illegal tag " + tag);
         }
+
+        int i = ((ConstantClass) c).getNameIndex();
+
         // Finally get the string from the constant pool
         c = getConstant(i, Constants.CONSTANT_Utf8);
         return ((ConstantUtf8) c).getBytes();

==================================================
Utility.java
deleted file mode 100644
index 861537a58b..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInput;
-import java.io.IOException;
-
-import org.apache.tomcat.util.bcel.Constants;
-
-/**
- * This class is derived from the abstract
- * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
- * and represents a reference to a String object.
- *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- * @see     Constant
- */
-public final class ConstantString extends Constant {
-
-    private static final long serialVersionUID = 2809338612858801341L;
-    private int string_index; // Identical to ConstantClass except for this name
-
-
-    /**
-     * Initialize instance from file data.
-     *
-     * @param file Input stream
-     * @throws IOException
-     */
-    ConstantString(DataInput file) throws IOException {
-        this(file.readUnsignedShort());
-    }
-
-
-    /**
-     * @param string_index Index of Constant_Utf8 in constant pool
-     */
-    public ConstantString(int string_index) {
-        super(Constants.CONSTANT_String);
-        this.string_index = string_index;
-    }
-
-
-    /**
-     * @return Index in constant pool of the string (ConstantUtf8).
-     */
-    public final int getStringIndex() {
-        return string_index;
-    }
-}

==================================================
