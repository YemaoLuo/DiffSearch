cb22d8adeee4681075f44bba88ba735a45508342
==================================================
Documented interceptors a bit better, implemented setters for interceptor properties
==================================================
Filip Hanik
==================================================
Fri Dec 19 17:55:46 2008 +0000
==================================================
ConnectionPool.java
index ff8716e153..ba83ecc3a4 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -350,6 +350,75 @@
     of the results from a method invokation as well. You could build query performance analyzer that provides JMX notifications when a 
     query is running longer than the expected time.</p>
   </subsection>
+  <subsection name="JDBC interceptors">
+    <p>Configuring JDBC interceptors is done using the <b>jdbcInterceptors</b> property.
+    The property contains a list of semi colon separated class names. If the classname if not fully qualified it will be prefixed with the 
+    <code>org.apache.tomcat.jdbc.pool.interceptor.</code> prefix.<br/>
+    Example:<br/>
+    <code>
+      jdbcInterceptors=&quot;org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer&quot;
+      <br/>
+      is the same as 
+      <br/>
+      jdbcInterceptors=&quot;ConnectionState;StatementFinalizer&quot;
+    </code><br/>
+    Interceptors can have properties as well. These would be configured within the paranthesis of the class names.
+    Example:<br/>
+    <code>
+      jdbcInterceptors=&quot;ConnectionState;StatementFinalizer(useWeakReferences=true,useEquals=true)&quot;
+    </code><br/>
+    </p>  
+  </subsection>
+  <subsection name="org.apache.tomcat.jdbc.pool.JdbcInterceptor">
+    <p>Abstract base class for all interceptors, can not be instantiated.</p>
+    <attributes>
+      <attribute name="useEquals" required="false">
+        <p>(String as boolean) A custom query to be run when a connection is first created. 
+           The default value is <code>false</code>.
+        </p>
+      </attribute>
+    </attributes>  
+  </subsection>
+  <subsection name="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState">
+    <p>Caches the connection for the following attributes <code>autoCommit</code>, <code>readOnly</code>,
+       <code>transactionIsolation</code> and <code>catalog</code>.
+       It is a performance enhancement to avoid roundtrip to the database when getters are called or setters are called with an already set value.
+    </p>   
+    <attributes>
+    </attributes>  
+  </subsection>
+  <subsection name="org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer">
+    <p>Keeps track of all statements created using <code>createStatement</code>, <code>prepareStatement</code> or <code>prepareCall</code>
+       and closes these statements when the connection is returned to the pool.
+    </p>   
+    <attributes>
+    </attributes>  
+  </subsection>
+  <subsection name="org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport">
+    <p>Keeps track of query performance and issues log entries when queries exceed a time threshold of fail.
+       The log level used is <code>WARN</code>
+    </p>   
+    <attributes>
+      <attribute name="threshold" required="false">
+        <p>(int as String) The number of milliseconds a query has to exceed before issuing a log alert.
+           The default value is <code>1000</code> milliseconds.
+        </p>
+      </attribute>
+      <attribute name="maxQueries" required="false">
+        <p>(int as String) The maximum number of queries to keep track of in order to preserve memory space 
+           The default value is <code>1000</code>.
+        </p>
+      </attribute>
+    </attributes>  
+  </subsection>
+  <subsection name="org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReportJmx">
+    <p>Extends the <code>SlowQueryReport</code> and in addition to log entries it issues JMX notification
+       for monitoring tools to react to. Inherits all the attributes from its parent class.
+       This class uses Tomcat's JMX engine so it wont work outside of the Tomcat container.
+    </p>   
+    <attributes>
+    </attributes>
+  </subsection>
 </section>
 
 <section name="Code Example">
@@ -519,15 +588,41 @@
         </source>
         The <code>compare(String,Method)</code> will use the <code>useEquals</code> flag on an interceptor and do either reference comparison or 
         a string value comparison when the <code>useEquals=true</code> flag is set.
-    </p>                   
+    </p>
+    <p>Pool start/stop<br/>
+       When the connection pool is started or closed, you can be notifed. You will only be notified once per interceptor class
+       even though it is an instance method. and you will be notified using an interceptor currently not attached to a pool.
+       <source>
+       public void poolStarted(ConnectionPool pool) {
+       }
+       
+       public void poolClosed(ConnectionPool pool) {
+       }
+       </source>
+       When overriding these methods, don't forget to call super if you are extending a class other than <code>JdbcInterceptor</code>
+    </p>       
     <p>Configuring interceptors<br/>
        Interceptors are configured using the <code>jdbcInterceptors</code> property or the <code>setJdbcInterceptors</code> method.
        An interceptor can have properties, and would be configured like this
        <source>
-       
        String jdbcInterceptors=&quot;org.apache.tomcat.jdbc.pool.interceptor.ConnectionState(useEquals=true,fast=yes)&quot;
        </source> 
     </p>   
+    <p>Interceptor properties<br/>
+       Since interceptors can have properties, you need to be able to read the values of these properties within your 
+       interceptor. Taking an example like the one above, you can override the <code>setProperties</code> method.
+       <source>
+	   @Override
+	   public void setProperties(Map&lt;String, InterceptorProperty&gt; properties) {
+	       super.setProperties(properties);
+	       final String myprop = &quot;myprop&quot;;
+	       InterceptorProperty p1 = properties.get(myprop);
+	       if (p1!=null) {
+	           setMyprop(Long.parseLong(p1.getValue()));
+	       }
+	   }
+        </source>
+    </p>
   </subsection>
   
   

==================================================
JdbcInterceptor.java
index a9707a72cf..09fbd39f1c 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -355,7 +355,7 @@ public class ConnectionPool {
             try {
                 proxies[i].getInterceptorClass().newInstance().poolStarted(this);
             }catch (Exception x) {
-                log.warn("Unable to inform interceptor of pool start.",x);
+                log.error("Unable to inform interceptor of pool start.",x);
                 if (jmxPool!=null) jmxPool.notify(jmxPool.NOTIFY_INIT, getStackTrace(x));
                 close(true);
                 SQLException ex = new SQLException();
@@ -745,7 +745,7 @@ public class ConnectionPool {
         return getStackTrace(x);
     }
 
-    protected static String getStackTrace(Exception x) {
+    public static String getStackTrace(Throwable x) {
         if (x == null) {
             return null;
         } else {

==================================================
PoolProperties.java
index 88c694900e..6c568420ae 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -20,6 +20,7 @@ import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
 
@@ -32,7 +33,7 @@ public abstract class JdbcInterceptor implements InvocationHandler {
     public  static final String TOSTRING_VAL = "toString";
     public  static final String ISCLOSED_VAL = "isClosed"; 
     
-    protected List<InterceptorProperty> properties = null; 
+    protected Map<String,InterceptorProperty> properties = null; 
     
     private JdbcInterceptor next = null;
     private boolean useEquals = false;
@@ -75,12 +76,17 @@ public abstract class JdbcInterceptor implements InvocationHandler {
      */
     public abstract void reset(ConnectionPool parent, PooledConnection con);
     
-    public List<InterceptorProperty> getProperties() {
+    public Map<String,InterceptorProperty> getProperties() {
         return properties;
     }
 
-    public void setProperties(List<InterceptorProperty> properties) {
+    public void setProperties(Map<String,InterceptorProperty> properties) {
         this.properties = properties;
+        final String useEquals = "useEquals";
+        InterceptorProperty p = properties.get(useEquals);
+        if (p!=null) {
+            setUseEquals(Boolean.parseBoolean(p.getValue()));
+        }
     }
     
     public boolean isUseEquals() {

==================================================
SlowQueryReport.java
index 163e14b35d..cc75642dbf 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -19,7 +19,9 @@ package org.apache.tomcat.jdbc.pool;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -28,6 +30,8 @@ import java.util.concurrent.atomic.AtomicInteger;
  *
  */
 public class PoolProperties {
+    public static final String PKG_PREFIX = "org.apache.tomcat.jdbc.pool.interceptor.";
+    
     protected static AtomicInteger poolCounter = new AtomicInteger(0);
     protected Properties dbProperties = new Properties();
     protected String url = null;
@@ -430,7 +434,7 @@ public class PoolProperties {
     
     public static class InterceptorDefinition {
         protected String className;
-        protected List<InterceptorProperty> properties = new ArrayList<InterceptorProperty>();
+        protected Map<String,InterceptorProperty> properties = new HashMap<String,InterceptorProperty>();
         protected volatile Class clazz = null;
         public InterceptorDefinition(String className) {
             this.className = className;
@@ -445,16 +449,20 @@ public class PoolProperties {
         }
         
         public void addProperty(InterceptorProperty p) {
-            properties.add(p);
+            properties.put(p.getName(), p);
         }
         
-        public List<InterceptorProperty> getProperties() {
+        public Map<String,InterceptorProperty> getProperties() {
             return properties;
         }
         
         public Class<? extends JdbcInterceptor> getInterceptorClass() throws ClassNotFoundException {
             if (clazz==null) {
-                clazz = Class.forName(getClassName(), true, this.getClass().getClassLoader());
+                if (getClassName().indexOf(".")<0) {
+                    clazz = Class.forName(PoolProperties.PKG_PREFIX+getClassName(), true, this.getClass().getClassLoader());
+                } else {
+                    clazz = Class.forName(getClassName(), true, this.getClass().getClassLoader());
+                }
             }
             return (Class<? extends JdbcInterceptor>)clazz;
         }
@@ -464,6 +472,7 @@ public class PoolProperties {
         String name;
         String value;
         public InterceptorProperty(String name, String value) {
+            assert(name!=null);
             this.name = name;
             this.value = value;
         }
@@ -473,6 +482,17 @@ public class PoolProperties {
         public String getValue() {
             return value;
         }
+        public int hashCode() {
+            return name.hashCode();
+        }
+        public boolean equals(Object o) {
+            if (o==this) return true;
+            if (o instanceof InterceptorProperty) {
+                InterceptorProperty other = (InterceptorProperty)o;
+                return other.name.equals(this.name);
+            }
+            return false;
+        }
     }
 
     public boolean isUseEquals() {

==================================================
TestInterceptor.java
index fd65d1c06a..308042b276 100755
--- a/modules/jdbc-pool/sign.sh
+++ b/modules/jdbc-pool/sign.sh
@@ -1,4 +1,4 @@
-VERSION=v1.0.7-beta
+VERSION=v1.0.8-beta
 for i in $(find output/release/$VERSION -name "*.zip" -o -name "*.tar.gz"); do
   echo Signing $i
   echo $1|gpg --passphrase-fd 0 -a -b $i

==================================================
TestInterceptorShortName.java
new file mode 100644
index 0000000000..23f7cc6804
--- /dev/null
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/pool/interceptor/TestInterceptor.java
@@ -0,0 +1,43 @@
+package org.apache.tomcat.jdbc.pool.interceptor;
+
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.tomcat.jdbc.pool.ConnectionPool;
+import org.apache.tomcat.jdbc.pool.JdbcInterceptor;
+import org.apache.tomcat.jdbc.pool.PooledConnection;
+import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
+
+public class TestInterceptor extends JdbcInterceptor {
+    public static boolean poolstarted = false;
+    public static boolean poolclosed = false;
+    public static AtomicInteger instancecount = new AtomicInteger(0);
+
+    @Override
+    public void poolClosed(ConnectionPool pool) {
+        // TODO Auto-generated method stub
+        super.poolClosed(pool);
+        poolclosed = true;
+    }
+
+    @Override
+    public void poolStarted(ConnectionPool pool) {
+        super.poolStarted(pool);
+        poolstarted = true;
+    }
+
+    @Override
+    public void reset(ConnectionPool parent, PooledConnection con) {
+        // TODO Auto-generated method stub
+        
+    }
+
+    @Override
+    public void setProperties(Map<String, InterceptorProperty> properties) {
+        instancecount.incrementAndGet();
+        super.setProperties(properties);
+    }
+    
+    
+    
+}

==================================================
