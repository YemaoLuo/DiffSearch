c0799e88aa94bc587c5f2d6d30717a1eb5d4a977
==================================================
Add unit tests to check headers and any associated continuation frames are contiguous.
==================================================
Mark Thomas
==================================================
Thu Jun 4 13:31:14 2015 +0000
==================================================
Http2TestBase.java
Add unit tests to check headers and any associated continuation frames are contiguous.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1683546 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHttp2Section_4_1.java
index 7151299174..578c0c39ee 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -111,7 +111,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
 
         buildSimpleRequest(frameHeader, headersPayload, streamId);
-        writeSimpleRequest(frameHeader, headersPayload);
+        writeFrame(frameHeader, headersPayload);
     }
 
 
@@ -134,10 +134,47 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void writeSimpleRequest(byte[] frameHeader, ByteBuffer headersPayload)
+    protected void buildSimpleRequestPart1(byte[] frameHeader, ByteBuffer headersPayload,
+            int streamId) {
+        MimeHeaders headers = new MimeHeaders();
+        headers.addValue(":method").setString("GET");
+        headers.addValue(":path").setString("/any");
+        hpackEncoder.encode(headers, headersPayload);
+
+        headersPayload.flip();
+
+        ByteUtil.setThreeBytes(frameHeader, 0, headersPayload.limit());
+        // Header frame is type 0x01
+        frameHeader[3] = 0x01;
+        // Flags. end of stream (0x01)
+        frameHeader[4] = 0x01;
+        // Stream id
+        ByteUtil.set31Bits(frameHeader, 5, streamId);
+    }
+
+
+    protected void buildSimpleRequestPart2(byte[] frameHeader, ByteBuffer headersPayload,
+            int streamId) {
+        MimeHeaders headers = new MimeHeaders();
+        headers.addValue(":authority").setString("localhost:" + getPort());
+        hpackEncoder.encode(headers, headersPayload);
+
+        headersPayload.flip();
+
+        ByteUtil.setThreeBytes(frameHeader, 0, headersPayload.limit());
+        // Continuation frame is type 0x09
+        frameHeader[3] = 0x09;
+        // Flags. end of headers (0x04)
+        frameHeader[4] = 0x04;
+        // Stream id
+        ByteUtil.set31Bits(frameHeader, 5, streamId);
+    }
+
+
+    protected void writeFrame(byte[] header, ByteBuffer payload)
             throws IOException {
-        os.write(frameHeader);
-        os.write(headersPayload.array(), headersPayload.arrayOffset(), headersPayload.limit());
+        os.write(header);
+        os.write(payload.array(), payload.arrayOffset(), payload.limit());
         os.flush();
     }
 

==================================================
TestHttp2Section_4_3.java
index 4f016b0f45..b0974b39a0 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_1.java
@@ -68,7 +68,7 @@ public class TestHttp2Section_4_1 extends Http2TestBase {
         frameHeader[5] = (byte) (frameHeader[5] | 0x80);
 
         // Process the request
-        writeSimpleRequest(frameHeader, headersPayload);
+        writeFrame(frameHeader, headersPayload);
 
         readSimpleResponse();
         Assert.assertEquals(getSimpleResponseTrace(3), output.getTrace());

==================================================
