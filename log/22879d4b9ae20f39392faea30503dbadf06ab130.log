22879d4b9ae20f39392faea30503dbadf06ab130
==================================================
Allow Checkstyle's unused imports test to be used with the o.a.catalina.ha package
==================================================
Mark Emlyn
==================================================
Sun Oct 24 13:25:36 2010 +0000
==================================================
ReplicatedContext.java
Allow Checkstyle's unused imports test to be used with the o.a.catalina.ha package
Fix some Eclipse warnings


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1026793 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BackupManager.java
index 6c7a48ae1f..e0df86b014 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -32,7 +32,6 @@ import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
 import org.apache.catalina.tribes.tipis.ReplicatedMap;
 import org.apache.catalina.util.Enumerator;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -47,7 +46,7 @@ public class ReplicatedContext extends StandardContext implements MapOwner {
     
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -74,7 +73,7 @@ public class ReplicatedContext extends StandardContext implements MapOwner {
     
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -185,12 +184,14 @@ public class ReplicatedContext extends StandardContext implements MapOwner {
         public MultiEnumeration(Enumeration<T>[] lists) {
             e = lists;
         }
+        @Override
         public boolean hasMoreElements() {
             for ( int i=0; i<e.length; i++ ) {
                 if ( e[i].hasMoreElements() ) return true;
             }
             return false;
         }
+        @Override
         public T nextElement() {
             for ( int i=0; i<e.length; i++ ) {
                 if ( e[i].hasMoreElements() ) return e[i].nextElement();
@@ -200,6 +201,7 @@ public class ReplicatedContext extends StandardContext implements MapOwner {
         }
     }
     
+    @Override
     public void objectMadePrimay(Object key, Object value) {
         //noop
     }

==================================================
ClusterManagerBase.java
index ffaa196bed..aca0342bd5 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -29,7 +29,6 @@ import org.apache.catalina.ha.ClusterMessage;
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
 import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -78,6 +77,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
 //      ClusterManager Interface     
 //******************************************************************************/
 
+    @Override
     public void messageDataReceived(ClusterMessage msg) {
     }
 
@@ -86,6 +86,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
         mExpireSessionsOnShutdown = expireSessionsOnShutdown;
     }
 
+    @Override
     public void setCluster(CatalinaCluster cluster) {
         if(log.isDebugEnabled())
             log.debug("Cluster associated with BackupManager");
@@ -98,6 +99,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
     }
 
 
+    @Override
     public ClusterMessage requestCompleted(String sessionId) {
         if (!getState().isAvailable()) return null;
         LazyReplicatedMap map = (LazyReplicatedMap)sessions;
@@ -109,6 +111,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
 //=========================================================================
 // OVERRIDE THESE METHODS TO IMPLEMENT THE REPLICATION
 //=========================================================================
+    @Override
     public void objectMadePrimay(Object key, Object value) {
         if (value!=null && value instanceof DeltaSession) {
             DeltaSession session = (DeltaSession)value;
@@ -134,7 +137,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
 
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * Starts the cluster communication channel, this will connect with the
      * other nodes in the cluster, and request the current session state to be
@@ -176,7 +179,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
 
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      * 
      * This will disconnect the cluster communication channel and stop the
      * listener thread.
@@ -206,9 +209,11 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
         this.distributable = dist;
     }
 
+    @Override
     public void setName(String name) {
         this.name = name;
     }
+    @Override
     public boolean isNotifyListenersOnReplication() {
         return notifyListenersOnReplication;
     }
@@ -223,6 +228,7 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
     /* 
      * @see org.apache.catalina.ha.ClusterManager#getCluster()
      */
+    @Override
     public CatalinaCluster getCluster() {
         return cluster;
     }
@@ -231,10 +237,12 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
         return mapSendOptions;
     }
 
+    @Override
     public String[] getInvalidatedSessions() {
         return new String[0];
     }
     
+    @Override
     public ClusterManager cloneFromTemplate() {
         BackupManager result = new BackupManager();
         result.mExpireSessionsOnShutdown = mExpireSessionsOnShutdown;

==================================================
DeltaManager.java
index 2e442c324d..0fb0bdc2b3 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Loader;
-import org.apache.catalina.Manager;
 import org.apache.catalina.ha.ClusterManager;
 import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.tribes.io.ReplicationStream;
@@ -62,10 +61,12 @@ public abstract class ClusterManagerBase extends ManagerBase
      * @return The object input stream
      * @throws IOException
      */
+    @Override
     public ReplicationStream getReplicationStream(byte[] data) throws IOException {
         return getReplicationStream(data,0,data.length);
     }
 
+    @Override
     public ReplicationStream getReplicationStream(byte[] data, int offset, int length) throws IOException {
         ByteArrayInputStream fis = new ByteArrayInputStream(data, offset, length);
         return new ReplicationStream(fis, getClassLoaders());
@@ -75,13 +76,15 @@ public abstract class ClusterManagerBase extends ManagerBase
     //  ---------------------------------------------------- persistence handler
 
     /**
-     * {@link Manager} implementations that also implement
+     * {@link org.apache.catalina.Manager} implementations that also implement
      * {@link ClusterManager} do not support local session persistence.
      */
+    @Override
     public void load() {
         // NOOP 
     }
 
+    @Override
     public void unload() {
         // NOOP
     }

==================================================
DeltaRequest.java
index 7e4d27813d..353bddbf7e 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -42,7 +42,6 @@ import org.apache.catalina.ha.ClusterMessage;
 import org.apache.catalina.ha.tcp.ReplicationValve;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.io.ReplicationStream;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -150,6 +149,7 @@ public class DeltaManager extends ClusterManagerBase{
         return info;
     }
 
+    @Override
     public void setName(String name) {
         this.name = name;
     }
@@ -410,6 +410,7 @@ public class DeltaManager extends ClusterManagerBase{
         this.expireSessionsOnShutdown = expireSessionsOnShutdown;
     }
     
+    @Override
     public boolean isNotifyListenersOnReplication() {
         return notifyListenersOnReplication;
     }
@@ -419,10 +420,12 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     
-   public CatalinaCluster getCluster() {
+   @Override
+public CatalinaCluster getCluster() {
         return cluster;
     }
 
+    @Override
     public void setCluster(CatalinaCluster cluster) {
         this.cluster = cluster;
     }
@@ -726,7 +729,7 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -929,7 +932,7 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -972,6 +975,7 @@ public class DeltaManager extends ClusterManagerBase{
      * @param cmsg -
      *            the message received.
      */
+    @Override
     public void messageDataReceived(ClusterMessage cmsg) {
         if (cmsg != null && cmsg instanceof SessionMessage) {
             SessionMessage msg = (SessionMessage) cmsg;
@@ -1011,6 +1015,7 @@ public class DeltaManager extends ClusterManagerBase{
      *            the sessionId that just completed.
      * @return a SessionMessage to be sent,
      */
+    @Override
     public ClusterMessage requestCompleted(String sessionId) {
          return requestCompleted(sessionId, false);
      }
@@ -1188,6 +1193,7 @@ public class DeltaManager extends ClusterManagerBase{
      * 
      * @return The invalidated sessions array
      */
+    @Override
     public String[] getInvalidatedSessions() {
         return new String[0];
     }
@@ -1471,6 +1477,7 @@ public class DeltaManager extends ClusterManagerBase{
         cluster.send(newmsg, sender);
     }
 
+    @Override
     public ClusterManager cloneFromTemplate() {
         DeltaManager result = new DeltaManager();
         result.name = "Clone-from-"+name;

==================================================
DeltaSession.java
index 317fc89795..ff667f2bbe 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -227,6 +227,7 @@ public class DeltaRequest implements Externalizable {
         actionPool.clear();
     }
     
+    @Override
     public void readExternal(java.io.ObjectInput in) throws IOException,ClassNotFoundException {
         //sessionId - String
         //recordAll - boolean
@@ -259,6 +260,7 @@ public class DeltaRequest implements Externalizable {
     }
 
 
+    @Override
     public void writeExternal(java.io.ObjectOutput out ) throws java.io.IOException {
         //sessionId - String
         //recordAll - boolean
@@ -295,8 +297,6 @@ public class DeltaRequest implements Externalizable {
         private int action;
         private int type;
 
-        public AttributeInfo() {}
-
         public AttributeInfo(int type,
                              int action,
                              String name,
@@ -349,6 +349,7 @@ public class DeltaRequest implements Externalizable {
             return other.getName().equals(this.getName());
         }
         
+        @Override
         public void readExternal(java.io.ObjectInput in ) throws IOException,ClassNotFoundException {
             //type - int
             //action - int
@@ -362,6 +363,7 @@ public class DeltaRequest implements Externalizable {
             if ( hasValue ) value = in.readObject();
         }
 
+        @Override
         public void writeExternal(java.io.ObjectOutput out) throws IOException {
             //type - int
             //action - int

==================================================
JvmRouteBinderValve.java
index e068922f77..dff3e84cc7 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -121,6 +121,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
          * and is not in a locked state
          * @return boolean
          */
+        @Override
         public boolean isDirty() {
             return getDeltaRequest().getSize()>0;
         }
@@ -130,6 +131,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
          * Otherwise it will serialize the entire object.
          * @return boolean
          */
+        @Override
         public boolean isDiffable() {
             return true;
         }
@@ -139,6 +141,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
          * @return byte[]
          * @throws IOException
          */
+        @Override
         public byte[] getDiff() throws IOException {
             try{
                 lock();
@@ -168,6 +171,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
          * @param length int
          * @throws IOException
          */
+        @Override
         public void applyDiff(byte[] diff, int offset, int length) throws IOException, ClassNotFoundException {
             try {
                 lock();
@@ -190,6 +194,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         /**
          * Resets the current diff state and resets the dirty flag
          */
+        @Override
         public void resetDiff() {
             resetDeltaRequest();
         }
@@ -197,6 +202,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         /**
          * Lock during serialization
          */
+        @Override
         public void lock() {
             diffLock.lock();
         }
@@ -204,10 +210,12 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         /**
          * Unlock after serialization
          */
+        @Override
         public void unlock() {
             diffLock.unlock();
         }
 
+        @Override
         public void setOwner(Object owner) {
             if ( owner instanceof ClusterManager && getManager()==null) {
                 ClusterManager cm = (ClusterManager)owner;
@@ -225,6 +233,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * returns true if this session is the primary session, if that is the case,
      * the manager can expire it upon timeout.
      */
+    @Override
     public boolean isPrimarySession() {
         return isPrimarySession;
     }
@@ -235,6 +244,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @param primarySession
      *            Flag value
      */
+    @Override
     public void setPrimarySession(boolean primarySession) {
         this.isPrimarySession = primarySession;
     }
@@ -456,6 +466,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
     // ------------------------------------------------ Session Package Methods
 
+    @Override
     public void readExternal(ObjectInput in) throws IOException,ClassNotFoundException {
         try {
             lock();
@@ -672,6 +683,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         activate();
     }
 
+    @Override
     public void writeExternal(ObjectOutput out ) throws java.io.IOException {
         try {
             lock();
@@ -786,6 +798,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         return lastTimeReplicated;
     }
 
+    @Override
     public long getVersion() {
         return version;
     }
@@ -794,6 +807,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         this.lastTimeReplicated = lastTimeReplicated;
     }
 
+    @Override
     public void setVersion(long version) {
         this.version = version;
     }
@@ -831,6 +845,7 @@ final class StandardSessionContext
      *             must return an empty <code>Enumeration</code> and will be
      *             removed in a future version of the API.
      */
+    @Override
     @Deprecated
     public Enumeration<String> getIds() {
         return (new Enumerator<String>(dummy));
@@ -847,6 +862,7 @@ final class StandardSessionContext
      *             must return null and will be removed in a future version of
      *             the API.
      */
+    @Override
     @Deprecated
     public HttpSession getSession(String id) {
         return (null);

==================================================
SerializablePrincipal.java
index a504eedc58..bf982e6a12 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
@@ -31,11 +31,9 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterManager;
-import org.apache.catalina.ha.ClusterMessage;
 import org.apache.catalina.ha.ClusterValve;
 import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.session.PersistentManager;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.catalina.valves.ValveBase;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -278,6 +276,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
     /**
      * @return Returns the cluster.
      */
+    @Override
     public CatalinaCluster getCluster() {
         return cluster;
     }
@@ -285,6 +284,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
     /**
      * @param cluster The cluster to set.
      */
+    @Override
     public void setCluster(CatalinaCluster cluster) {
         this.cluster = cluster;
     }
@@ -404,7 +404,8 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
     /**
      * Send the changed Sessionid to all clusternodes.
      * 
-     * @see JvmRouteSessionIDBinderListener#messageReceived(ClusterMessage)
+     * @see JvmRouteSessionIDBinderListener#messageReceived(
+     *            org.apache.catalina.ha.ClusterMessage)
      * @param manager
      *            ClusterManager
      * @param sessionId
@@ -412,8 +413,8 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
      * @param newSessionID
      *            new session id, bind to the new cluster node
      */
-    protected void sendSessionIDClusterBackup(ClusterManager manager,Request request,String sessionId,
-            String newSessionID) {
+    protected void sendSessionIDClusterBackup(ClusterManager manager,
+            Request request, String sessionId, String newSessionID) {
         SessionIDMessage msg = new SessionIDMessage();
         msg.setOrignalSessionID(sessionId);
         msg.setBackupSessionID(newSessionID);
@@ -425,7 +426,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
 
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -466,7 +467,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
     
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used

==================================================
SessionIDMessage.java
index 65081e72aa..5955791a5d 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -42,6 +42,8 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class SerializablePrincipal  implements java.io.Serializable {
 
+    private static final long serialVersionUID = 1L;
+
     private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(SerializablePrincipal.class);
     

==================================================
SessionMessage.java
index 3853ca4f43..9eae613a3f 100644
--- a/java/org/apache/catalina/ha/session/SessionIDMessage.java
+++ b/java/org/apache/catalina/ha/session/SessionIDMessage.java
@@ -27,6 +27,8 @@ import org.apache.catalina.ha.ClusterMessageBase;
  */
 public class SessionIDMessage extends ClusterMessageBase {
 
+    private static final long serialVersionUID = 1L;
+
     private int messageNumber;
 
     private String orignalSessionID;

==================================================
SessionMessageImpl.java
index a1cb7850e5..7c09309703 100644
--- a/java/org/apache/catalina/ha/session/SessionMessage.java
+++ b/java/org/apache/catalina/ha/session/SessionMessage.java
@@ -37,8 +37,7 @@ import org.apache.catalina.ha.ClusterMessage;
  *
  */
 
-public interface SessionMessage extends ClusterMessage, java.io.Serializable
-{
+public interface SessionMessage extends ClusterMessage {
 
     /**
      * Event type used when a session has been created on a node

==================================================
