ab797632133a1ff38845d88e3f7c765dca3847e8
==================================================
Use Objects.requireNonNull() to simplify code
==================================================
Mark Thomas
==================================================
Thu Jun 23 11:24:06 2016 +0000
==================================================
ArrayELResolver.java
Use Objects.requireNonNull() to simplify code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1749865 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BeanELResolver.java
index 1fb4dc8301..5bbb2a1f1a 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -20,6 +20,7 @@ package javax.el;
 import java.beans.FeatureDescriptor;
 import java.lang.reflect.Array;
 import java.util.Iterator;
+import java.util.Objects;
 
 public class ArrayELResolver extends ELResolver {
 
@@ -35,9 +36,7 @@ public class ArrayELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);
@@ -55,9 +54,7 @@ public class ArrayELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);
@@ -74,9 +71,7 @@ public class ArrayELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);
@@ -100,9 +95,7 @@ public class ArrayELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);

==================================================
BeanNameELResolver.java
index 39eb6cedaf..27f3d58ef8 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -30,6 +30,7 @@ import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Objects;
 import java.util.WeakHashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -71,9 +72,7 @@ public class BeanELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base == null || property == null) {
             return null;
         }
@@ -84,9 +83,7 @@ public class BeanELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base == null || property == null) {
             return null;
         }
@@ -108,9 +105,7 @@ public class BeanELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base == null || property == null) {
             return;
         }
@@ -141,9 +136,7 @@ public class BeanELResolver extends ELResolver {
     @Override
     public Object invoke(ELContext context, Object base, Object method,
             Class<?>[] paramTypes, Object[] params) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base == null || method == null) {
             return null;
         }
@@ -177,9 +170,7 @@ public class BeanELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base == null || property == null) {
             return false;
         }

==================================================
CompositeELResolver.java
index a847f32eda..0e7b48dee6 100644
--- a/java/javax/el/BeanNameELResolver.java
+++ b/java/javax/el/BeanNameELResolver.java
@@ -18,6 +18,7 @@ package javax.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
+import java.util.Objects;
 
 /**
  * @since EL 3.0
@@ -32,10 +33,7 @@ public class BeanNameELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base != null || !(property instanceof String)) {
             return null;
         }
@@ -59,10 +57,7 @@ public class BeanNameELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base != null || !(property instanceof String)) {
             return;
         }
@@ -100,10 +95,7 @@ public class BeanNameELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base != null || !(property instanceof String)) {
             return null;
         }
@@ -126,10 +118,7 @@ public class BeanNameELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
         if (base != null || !(property instanceof String)) {
             // Return value undefined
             return false;

==================================================
ELContext.java
index 5f5458d850..f28f528cf2 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/javax/el/CompositeELResolver.java
@@ -19,6 +19,7 @@ package javax.el;
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
+import java.util.Objects;
 
 public class CompositeELResolver extends ELResolver {
 
@@ -43,9 +44,7 @@ public class CompositeELResolver extends ELResolver {
     }
 
     public void add(ELResolver elResolver) {
-        if (elResolver == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(elResolver);
 
         if (this.size >= this.resolvers.length) {
             ELResolver[] nr = new ELResolver[this.size * 2];

==================================================
LambdaExpression.java
index d260fd7846..f2941920fb 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -23,6 +23,7 @@ import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 
 public abstract class ELContext {
 
@@ -75,9 +76,8 @@ public abstract class ELContext {
      */
     public void putContext(@SuppressWarnings("rawtypes") Class key,
             Object contextObject) {
-        if (key == null || contextObject == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(key);
+        Objects.requireNonNull(contextObject);
 
         if (this.map == null) {
             this.map = new HashMap<>();
@@ -98,9 +98,7 @@ public abstract class ELContext {
      *              If the supplied key is <code>null</code>
      */
     public Object getContext(@SuppressWarnings("rawtypes") Class key) {
-        if (key == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(key);
         if (this.map == null) {
             return null;
         }

==================================================
ListELResolver.java
index c303ac2972..7e9ca064ec 100644
--- a/java/javax/el/LambdaExpression.java
+++ b/java/javax/el/LambdaExpression.java
@@ -19,6 +19,7 @@ package javax.el;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 public class LambdaExpression {
 
@@ -42,9 +43,7 @@ public class LambdaExpression {
     public Object invoke(ELContext context, Object... args)
             throws ELException {
 
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         int formalParamCount = 0;
         if (formalParameters != null) {

==================================================
MapELResolver.java
index 031b02c48f..749fdae0db 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -22,6 +22,7 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 
 public class ListELResolver extends ELResolver {
 
@@ -40,9 +41,7 @@ public class ListELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof List<?>) {
             context.setPropertyResolved(base, property);
@@ -60,9 +59,7 @@ public class ListELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof List<?>) {
             context.setPropertyResolved(base, property);
@@ -80,9 +77,7 @@ public class ListELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof List<?>) {
             context.setPropertyResolved(base, property);
@@ -107,9 +102,7 @@ public class ListELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof List<?>) {
             context.setPropertyResolved(base, property);

==================================================
ResourceBundleELResolver.java
index 26e6cce561..abc0e06989 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -24,6 +24,7 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 public class MapELResolver extends ELResolver {
 
@@ -42,9 +43,7 @@ public class MapELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof Map<?,?>) {
             context.setPropertyResolved(base, property);
@@ -56,9 +55,7 @@ public class MapELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof Map<?,?>) {
             context.setPropertyResolved(base, property);
@@ -71,9 +68,7 @@ public class MapELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof Map<?, ?>) {
             context.setPropertyResolved(base, property);
@@ -95,9 +90,7 @@ public class MapELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof Map<?, ?>) {
             context.setPropertyResolved(base, property);

==================================================
StaticFieldELResolver.java
index a123f284c3..f9b9723326 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -23,6 +23,7 @@ import java.util.Enumeration;
 import java.util.Iterator;
 import java.util.List;
 import java.util.MissingResourceException;
+import java.util.Objects;
 import java.util.ResourceBundle;
 
 public class ResourceBundleELResolver extends ELResolver {
@@ -33,10 +34,7 @@ public class ResourceBundleELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(base, property);
@@ -56,9 +54,7 @@ public class ResourceBundleELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(base, property);
@@ -70,9 +66,7 @@ public class ResourceBundleELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(base, property);
@@ -83,9 +77,7 @@ public class ResourceBundleELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(base, property);

==================================================
ImplicitObjectELResolver.java
index bf761b160b..19911dc103 100644
--- a/java/javax/el/StaticFieldELResolver.java
+++ b/java/javax/el/StaticFieldELResolver.java
@@ -23,6 +23,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Iterator;
+import java.util.Objects;
 
 /**
  * @since EL 3.0
@@ -31,10 +32,7 @@ public class StaticFieldELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ELClass && property instanceof String) {
             context.setPropertyResolved(base, property);
@@ -68,10 +66,7 @@ public class StaticFieldELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ELClass && property instanceof String) {
             Class<?> clazz = ((ELClass) base).getKlass();
@@ -87,10 +82,7 @@ public class StaticFieldELResolver extends ELResolver {
     @Override
     public Object invoke(ELContext context, Object base, Object method,
             Class<?>[] paramTypes, Object[] params) {
-
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ELClass && method instanceof String) {
             context.setPropertyResolved(base, method);
@@ -151,9 +143,7 @@ public class StaticFieldELResolver extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ELClass && property instanceof String) {
             context.setPropertyResolved(base, property);
@@ -186,9 +176,7 @@ public class StaticFieldELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base instanceof ELClass && property instanceof String) {
             context.setPropertyResolved(base, property);

==================================================
ScopedAttributeELResolver.java
index 80be339624..43ecded105 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -26,6 +26,7 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.Vector;
 
@@ -77,9 +78,7 @@ public class ImplicitObjectELResolver extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
@@ -120,9 +119,7 @@ public class ImplicitObjectELResolver extends ELResolver {
     @Override
     @SuppressWarnings({ "unchecked", "rawtypes" }) // TCK signature test fails with generics
     public Class getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
@@ -136,9 +133,7 @@ public class ImplicitObjectELResolver extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
@@ -151,9 +146,7 @@ public class ImplicitObjectELResolver extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
@@ -597,9 +590,7 @@ public class ImplicitObjectELResolver extends ELResolver {
 
         @Override
         public final V put(String key, V value) {
-            if (key == null) {
-                throw new NullPointerException();
-            }
+            Objects.requireNonNull(key);
             if (value == null) {
                 this.removeAttribute(key);
             } else {
@@ -610,13 +601,9 @@ public class ImplicitObjectELResolver extends ELResolver {
 
         @Override
         public final V remove(Object key) {
-            if (key == null) {
-                throw new NullPointerException();
-            }
+            Objects.requireNonNull(key);
             this.removeAttribute((String) key);
             return null;
         }
-
     }
-
 }

==================================================
