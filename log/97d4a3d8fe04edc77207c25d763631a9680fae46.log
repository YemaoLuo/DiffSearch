97d4a3d8fe04edc77207c25d763631a9680fae46
==================================================
Fix some more deprecation warnings when building with Java 9.
==================================================
Mark Thomas
==================================================
Thu Oct 5 12:50:14 2017 +0000
==================================================
JspCompilationContext.java
Fix some more deprecation warnings when building with Java 9.
Use of Class.newInstance() in o.a.jasper

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811199 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELInterpreterFactory.java
index 4b25400c98..1b06ff74dc 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -242,13 +242,13 @@ public class JspCompilationContext {
     protected Compiler createCompiler(String className) {
         Compiler compiler = null;
         try {
-            compiler = (Compiler) Class.forName(className).newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
-            log.warn(Localizer.getMessage("jsp.error.compiler"), e);
+            compiler = (Compiler) Class.forName(className).getDeclaredConstructor().newInstance();
         } catch (NoClassDefFoundError | ClassNotFoundException e) {
             if (log.isDebugEnabled()) {
                 log.debug(Localizer.getMessage("jsp.error.compiler"), e);
             }
+        } catch (ReflectiveOperationException e) {
+            log.warn(Localizer.getMessage("jsp.error.compiler"), e);
         }
         return compiler;
     }

==================================================
TagFileProcessor.java
index 367566b443..fd8e4a5102 100644
--- a/java/org/apache/jasper/compiler/ELInterpreterFactory.java
+++ b/java/org/apache/jasper/compiler/ELInterpreterFactory.java
@@ -85,7 +85,7 @@ public class ELInterpreterFactory {
     private static ELInterpreter createInstance(ServletContext context,
             String className) throws Exception {
         return (ELInterpreter) context.getClassLoader().loadClass(
-                    className).newInstance();
+                    className).getDeclaredConstructor().newInstance();
     }
 
 

==================================================
TagLibraryInfoImpl.java
index 7eb527ffda..1d91a4410f 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -593,7 +593,7 @@ class TagFileProcessor {
                     // Dependent list. The only reliable dependency information
                     // can only be obtained from the tag instance.
                     try {
-                        Object tagIns = tagClazz.newInstance();
+                        Object tagIns = tagClazz.getDeclaredConstructor().newInstance();
                         if (tagIns instanceof JspSourceDependent) {
                             for (Entry<String, Long> entry : ((JspSourceDependent)
                                     tagIns).getDependants().entrySet()) {

==================================================
TagPluginManager.java
index 0ebe5777f8..19b6f76051 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -290,7 +290,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
         if (teiClassName != null && !teiClassName.isEmpty()) {
             try {
                 Class<?> teiClass = ctxt.getClassLoader().loadClass(teiClassName);
-                tei = (TagExtraInfo) teiClass.newInstance();
+                tei = (TagExtraInfo) teiClass.getDeclaredConstructor().newInstance();
             } catch (Exception e) {
                 err.jspError(e, "jsp.error.teiclass.instantiation", teiClassName);
             }
@@ -346,7 +346,8 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
 
         try {
             Class<?> tlvClass = ctxt.getClassLoader().loadClass(validatorClass);
-            TagLibraryValidator tlv = (TagLibraryValidator) tlvClass.newInstance();
+            TagLibraryValidator tlv =
+                    (TagLibraryValidator) tlvClass.getDeclaredConstructor().newInstance();
             tlv.setInitParameters(initParams);
             return tlv;
         } catch (Exception e) {

==================================================
JspRuntimeLibrary.java
index 018ed7780a..6445e96c6c 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -123,7 +123,7 @@ public class TagPluginManager {
                 String tagClass = entry.getKey();
                 String pluginName = entry.getValue();
                 Class<?> pluginClass = ctxt.getClassLoader().loadClass(pluginName);
-                TagPlugin plugin = (TagPlugin) pluginClass.newInstance();
+                TagPlugin plugin = (TagPlugin) pluginClass.getDeclaredConstructor().newInstance();
                 tagPlugins.put(tagClass, plugin);
             } catch (Exception e) {
                 err.jspError(e);

==================================================
TagHandlerPool.java
index 367fc8169d..a770ebe9fe 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -784,7 +784,7 @@ public class JspRuntimeLibrary {
     {
         try {
             PropertyEditor pe =
-                (PropertyEditor)propertyEditorClass.newInstance();
+                (PropertyEditor)propertyEditorClass.getDeclaredConstructor().newInstance();
             pe.setAsText(attrValue);
             return pe.getValue();
         } catch (Exception ex) {

==================================================
