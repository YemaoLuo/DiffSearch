79d5524a051ce630ff94942822415e107a7774f1
==================================================
Change state on start of headers not end of headers
==================================================
Mark Thomas
==================================================
Fri Jun 5 20:17:07 2015 +0000
==================================================
Http2UpgradeHandler.java
Change state on start of headers not end of headers
More renames to improve clarity
Fill some gaps in the debug logging
Add a (currently disabled because it fails) test that should trigger a stream close

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1683857 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index ebbc946f99..b8bd53c742 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -64,7 +64,6 @@ streamProcessor.httpupgrade.notsupported=HTTP upgrade is not supported within HT
 streamStateMachine.debug.change=Connection [{0}], Stream [{1}], State changed from [{2}] to [{3}]
 streamStateMachine.invalidFrame=Connection [{0}], Stream [{1}], State [{2}], Frame type [{3}]
 
-upgradeHandler.connectionError=An error occurred that requires the HTTP/2 connection to be closed.
 upgradeHandler.goaway.debug=Connection [{0}], Goaway, Last stream [{1}], Error code [{2}], Debug data [{3}]
 upgradeHandler.init=Connection [{0}]
 upgradeHandler.ioerror=Connection [{0}]
@@ -72,8 +71,10 @@ upgradeHandler.sendPrefaceFail=Failed to send preface to client
 upgradeHandler.socketCloseFailed=Error closing socket
 upgradeHandler.unexpectedEos=Unexpected end of stream
 upgradeHandler.unexpectedStatus=An unexpected value of status ([{0}]) was passed to this method
+upgradeHandler.upgrade=Connection [{0}], HTTP/1.1 upgrade to stream [1]
 upgradeHandler.upgradeDispatch.entry=Entry, Connection [{0}], SocketStatus [{1}]
 upgradeHandler.upgradeDispatch.exit=Exit, Connection [{0}], SocketState [{1}]
+upgradeHandler.writeBody=Connection [{0}], Stream [{1}], Data length [{2}]
 upgradeHandler.writeHeaders=Connection [{0}], Stream [{1}]
 
 writeStateMachine.endWrite.ise=It is illegal to specify [{0}] for the new state once a write has completed

==================================================
StreamStateMachine.java
index 885e0eb60d..f62baf7dc5 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -66,7 +66,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
             this.coyoteRequest = coyoteRequest;
             this.inputBuffer = null;
             // Headers have been populated by this point
-            state.receivedEndOfHeaders();
+            state.receivedStartOfHeaders();
             // TODO Assuming the body has been read at this point is not valid
             state.recievedEndOfStream();
         }
@@ -235,8 +235,8 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    void receivedEndOfHeaders() {
-        state.receivedEndOfHeaders();
+    void receivedStartOfHeaders() {
+        state.receivedStartOfHeaders();
     }
 
 

==================================================
Http2TestBase.java
index c8e192cc10..f955dab411 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -58,13 +58,13 @@ public class StreamStateMachine {
     }
 
 
-    public synchronized void sentEndOfHeaders() {
+    public synchronized void sentStartOfHeaders() {
         stateChange(State.IDLE, State.OPEN);
         stateChange(State.RESERVED_LOCAL, State.HALF_CLOSED_REMOTE);
     }
 
 
-    public synchronized void receivedEndOfHeaders() {
+    public synchronized void receivedStartOfHeaders() {
         stateChange(State.IDLE, State.OPEN);
         stateChange(State.RESERVED_REMOTE, State.HALF_CLOSED_LOCAL);
     }
@@ -82,6 +82,16 @@ public class StreamStateMachine {
     }
 
 
+    public synchronized void sendReset() {
+        stateChange(state, State.CLOSED_TX);
+    }
+
+
+    public synchronized void receiveReset() {
+        stateChange(state, State.CLOSED_RST);
+    }
+
+
     private void stateChange(State oldState, State newState) {
         if (state == oldState) {
             state = newState;
@@ -93,16 +103,6 @@ public class StreamStateMachine {
     }
 
 
-    public synchronized void sendReset() {
-        state = State.CLOSED_TX;
-    }
-
-
-    public synchronized void receiveReset() {
-        state = State.CLOSED_RST;
-    }
-
-
     public synchronized void checkFrameType(FrameType frameType) throws Http2Exception {
         // No state change. Checks that the frame type is valid for the current
         // state of this stream.

==================================================
TestHttp2Section_5_1.java
index ab4800f5f4..2247b52d81 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -355,6 +355,23 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    void sendRst(int streamId, long errorCode) throws IOException {
+        byte[] rstFrame = new byte[13];
+        // length is always 4
+        rstFrame[2] = 0x04;
+        // type is always 3
+        rstFrame[3] = 0x03;
+        // no flags
+        // Stream ID
+        ByteUtil.set31Bits(rstFrame, 5, streamId);
+        // Payload
+        ByteUtil.setFourBytes(rstFrame, 9, errorCode);
+
+        os.write(rstFrame);
+        os.flush();
+    }
+
+
     void sendPing() throws IOException {
         os.write(PING_FRAME);
         os.flush();

==================================================
