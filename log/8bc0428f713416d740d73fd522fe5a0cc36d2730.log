8bc0428f713416d740d73fd522fe5a0cc36d2730
==================================================
Allow Checkstyle's unused imports test to be used with the o.a.catalina.realm package
==================================================
Mark Emlyn
==================================================
Sun Oct 24 13:08:26 2010 +0000
==================================================
CombinedRealm.java
Allow Checkstyle's unused imports test to be used with the o.a.catalina.realm package
Fix some Eclipse warnings


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1026786 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DataSourceRealm.java
index 95dec00155..c3858bcf46 100644
--- a/java/org/apache/catalina/realm/CombinedRealm.java
+++ b/java/org/apache/catalina/realm/CombinedRealm.java
@@ -29,7 +29,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Realm;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -182,7 +181,7 @@ public class CombinedRealm extends RealmBase {
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -212,7 +211,7 @@ public class CombinedRealm extends RealmBase {
     /**
      * Gracefully terminate the active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#stopInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported

==================================================
GenericPrincipal.java
index 2e2c35942d..e013bcedcf 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -31,7 +31,6 @@ import javax.sql.DataSource;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.core.StandardServer;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.naming.ContextBindings;
 
 /**
@@ -612,7 +611,7 @@ public class DataSourceRealm
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used

==================================================
JAASCallbackHandler.java
index 82824ccb48..22f7536240 100644
--- a/java/org/apache/catalina/realm/GenericPrincipal.java
+++ b/java/org/apache/catalina/realm/GenericPrincipal.java
@@ -120,6 +120,7 @@ public class GenericPrincipal implements Principal {
      */
     protected String name = null;
 
+    @Override
     public String getName() {
         return (this.name);
     }

==================================================
JAASMemoryLoginModule.java
index f7c74e4532..1b8786acc9 100644
--- a/java/org/apache/catalina/realm/JAASCallbackHandler.java
+++ b/java/org/apache/catalina/realm/JAASCallbackHandler.java
@@ -182,6 +182,7 @@ public class JAASCallbackHandler implements CallbackHandler {
      * @exception UnsupportedCallbackException if the login method requests
      *  an unsupported callback type
      */
+    @Override
     public void handle(Callback callbacks[])
         throws IOException, UnsupportedCallbackException {
 

==================================================
JAASRealm.java
index 3fb1d8f13f..868214ca86 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -140,6 +140,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
      *
      * @exception LoginException if the abort fails
      */
+    @Override
     public boolean abort() throws LoginException {
 
         // If our authentication was not successful, just return false
@@ -170,6 +171,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
      *
      * @exception LoginException if the commit fails
      */
+    @Override
     public boolean commit() throws LoginException {
         log.debug("commit " + principal);
 
@@ -210,6 +212,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
      * @param options Configuration information for this specific
      *  <code>LoginModule</code> instance
      */
+    @Override
     public void initialize(Subject subject, CallbackHandler callbackHandler,
                            Map<String,?> sharedState, Map<String,?> options) {
         log.debug("Init");
@@ -239,6 +242,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
      *
      * @exception LoginException if the authentication fails
      */
+    @Override
     public boolean login() throws LoginException {
 
         // Set up our CallbackHandler requests
@@ -318,6 +322,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
      *
      * @exception LoginException if logging out failed
      */
+    @Override
     public boolean logout() throws LoginException {
 
         subject.getPrincipals().remove(principal);

==================================================
JDBCRealm.java
index 19c4000cc4..c676f943d4 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -35,7 +35,6 @@ import javax.security.auth.login.LoginException;
 import org.apache.catalina.Container;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.authenticator.Constants;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -590,7 +589,7 @@ public class JAASRealm
      /**
       * Prepare for the beginning of active use of the public methods of this
       * component and implement the requirements of
-      * {@link LifecycleBase#startInternal()}.
+      * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
       *
       * @exception LifecycleException if this component detects a fatal error
       *  that prevents this component from being used

==================================================
JNDIRealm.java
index d88a93fddd..639596dfbe 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -29,7 +29,6 @@ import java.util.ArrayList;
 import java.util.Properties;
 
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.ExceptionUtils;
 
 
@@ -769,7 +768,7 @@ public class JDBCRealm
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -792,7 +791,7 @@ public class JDBCRealm
     /**
      * Gracefully terminate the active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#stopInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported

==================================================
LockOutRealm.java
index 43018029df..ab9e73b8de 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -54,7 +54,6 @@ import javax.naming.directory.SearchResult;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.util.Base64;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 
@@ -2034,7 +2033,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -2056,7 +2055,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * Gracefully terminate the active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#stopInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported

==================================================
MemoryRealm.java
index 5edb34da7b..957c06b49e 100644
--- a/java/org/apache/catalina/realm/LockOutRealm.java
+++ b/java/org/apache/catalina/realm/LockOutRealm.java
@@ -24,7 +24,6 @@ import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -85,7 +84,7 @@ public class LockOutRealm extends CombinedRealm {
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used

==================================================
RealmBase.java
index 5d692249e7..e5bb8f6351 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -27,7 +27,6 @@ import java.util.Map;
 
 import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
@@ -279,7 +278,7 @@ public class MemoryRealm  extends RealmBase {
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used

==================================================
UserDatabaseRealm.java
index 797cb7f463..d9bd807c1d 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -49,7 +49,6 @@ import org.apache.catalina.deploy.SecurityCollection;
 import org.apache.catalina.deploy.SecurityConstraint;
 import org.apache.catalina.mbeans.MBeanUtils;
 import org.apache.catalina.util.HexUtils;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.juli.logging.Log;
@@ -154,6 +153,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     /**
      * Return the Container with which this Realm has been associated.
      */
+    @Override
     public Container getContainer() {
 
         return (container);
@@ -166,6 +166,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      *
      * @param container The associated Container
      */
+    @Override
     public void setContainer(Container container) {
 
         Container oldContainer = this.container;
@@ -237,6 +238,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return info;
@@ -274,6 +276,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      *
      * @param listener The listener to add
      */
+    @Override
     public void addPropertyChangeListener(PropertyChangeListener listener) {
 
         support.addPropertyChangeListener(listener);
@@ -289,6 +292,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
 
         String serverCredentials = getPassword(username);
@@ -330,6 +334,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * @param md5a2 Second MD5 digest used to calculate the digest :
      * MD5(Method + ":" + uri)
      */
+    @Override
     public Principal authenticate(String username, String clientDigest,
                                   String nOnce, String nc, String cnonce,
                                   String qop, String realm,
@@ -382,6 +387,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * @param certs Array of client certificates, with the first one in
      *  the array being the certificate of the client itself.
      */
+    @Override
     public Principal authenticate(X509Certificate certs[]) {
 
         if ((certs == null) || (certs.length < 1))
@@ -416,6 +422,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
+    @Override
     public void backgroundProcess() {
         // NOOP in base class
     }
@@ -428,6 +435,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * @param request Request we are processing
      * @param context Context the Request is mapped to
      */
+    @Override
     public SecurityConstraint [] findSecurityConstraints(Request request,
                                                          Context context) {
 
@@ -692,6 +700,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean hasResourcePermission(Request request,
                                          Response response,
                                          SecurityConstraint []constraints,
@@ -869,6 +878,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean hasUserDataPermission(Request request,
                                          Response response,
                                          SecurityConstraint []constraints)
@@ -953,6 +963,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      *
      * @param listener The listener to remove
      */
+    @Override
     public void removePropertyChangeListener(PropertyChangeListener listener) {
 
         support.removePropertyChangeListener(listener);
@@ -974,7 +985,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     /**
      * Prepare for the beginning of active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#startInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -999,7 +1010,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     /**
      * Gracefully terminate the active use of the public methods of this
      * component and implement the requirements of
-     * {@link LifecycleBase#stopInternal()}.
+     * {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported

==================================================
