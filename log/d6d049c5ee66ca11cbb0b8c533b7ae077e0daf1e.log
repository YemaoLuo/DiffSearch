d6d049c5ee66ca11cbb0b8c533b7ae077e0daf1e
==================================================
Fix failing unit tests.
==================================================
Mark Emlyn
==================================================
Tue Mar 19 13:30:33 2013 +0000
==================================================
WsHandshakeRequest.java
Fix failing unit tests.
Add missing call to mark the Handshake request as finished.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458271 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsServlet.java
index 3cef5a956a..e53ba369fd 100644
--- a/java/org/apache/tomcat/websocket/server/WsHandshakeRequest.java
+++ b/java/org/apache/tomcat/websocket/server/WsHandshakeRequest.java
@@ -35,37 +35,37 @@ import javax.websocket.server.HandshakeRequest;
  */
 public class WsHandshakeRequest implements HandshakeRequest {
 
+    private final URI requestUri;
+    private final Map<String,List<String>> parameterMap;
+    private final String queryString;
+    private final Principal userPrincipal;
+    private final Map<String,List<String>> headers;
+    private final Object httpSession;
+
     private volatile HttpServletRequest request;
 
+
     public WsHandshakeRequest(HttpServletRequest request) {
+
         this.request = request;
-    }
 
-    @Override
-    public URI getRequestURI() {
-        validate();
-        // Calculate every time as only likely to be zero or one calls
-        String queryString = request.getQueryString();
+        queryString = request.getQueryString();
+        userPrincipal = request.getUserPrincipal();
+        httpSession = request.getSession(false);
 
+        // URI
         StringBuffer sb = request.getRequestURL();
         if (queryString != null) {
             sb.append("?");
             sb.append(queryString);
         }
-        URI requestURI;
         try {
-            requestURI = new URI(sb.toString());
+            requestUri = new URI(sb.toString());
         } catch (URISyntaxException e) {
             throw new IllegalArgumentException(e);
         }
 
-        return requestURI;
-    }
-
-    @Override
-    public Map<String,List<String>> getParameterMap() {
-        validate();
-
+        // ParameterMap
         Map<String,String[]> originalParameters = request.getParameterMap();
         Map<String,List<String>> newParameters =
                 new HashMap<>(originalParameters.size());
@@ -74,49 +74,59 @@ public class WsHandshakeRequest implements HandshakeRequest {
                     Collections.unmodifiableList(
                             Arrays.asList(entry.getValue())));
         }
+        parameterMap = Collections.unmodifiableMap(newParameters);
+
+        // Headers
+        Map<String,List<String>> newHeaders = new HashMap<>();
 
-        return Collections.unmodifiableMap(newParameters);
+        Enumeration<String> headerNames = request.getHeaderNames();
+        while (headerNames.hasMoreElements()) {
+            String headerName = headerNames.nextElement();
+
+            newHeaders.put(headerName, Collections.unmodifiableList(
+                    Collections.list(request.getHeaders(headerName))));
+        }
+
+        headers = Collections.unmodifiableMap(newHeaders);
+    }
+
+    @Override
+    public URI getRequestURI() {
+        return requestUri;
+    }
+
+    @Override
+    public Map<String,List<String>> getParameterMap() {
+        return parameterMap;
     }
 
     @Override
     public String getQueryString() {
-        validate();
-        return request.getQueryString();
+        return queryString;
     }
 
     @Override
     public Principal getUserPrincipal() {
-        validate();
-        return request.getUserPrincipal();
+        return userPrincipal;
     }
 
     @Override
     public Map<String,List<String>> getHeaders() {
-        validate();
-
-        Map<String,List<String>> newHeaders = new HashMap<>();
-
-        Enumeration<String> headerNames = request.getHeaderNames();
-        while (headerNames.hasMoreElements()) {
-            String headerName = headerNames.nextElement();
-
-            newHeaders.put(headerName, Collections.unmodifiableList(
-                    Collections.list(request.getHeaders(headerName))));
-        }
-
-        return Collections.unmodifiableMap(newHeaders);
+        return headers;
     }
 
     @Override
     public boolean isUserInRole(String role) {
-        validate();
+        if (request == null) {
+            throw new IllegalStateException();
+        }
+
         return request.isUserInRole(role);
     }
 
     @Override
     public Object getHttpSession() {
-        validate();
-        return request.getSession(false);
+        return httpSession;
     }
 
     /**
@@ -130,10 +140,4 @@ public class WsHandshakeRequest implements HandshakeRequest {
     void finished() {
         request = null;
     }
-
-    private void validate() {
-        if (request == null) {
-            throw new IllegalStateException();
-        }
-    }
 }

==================================================
