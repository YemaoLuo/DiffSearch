4c213c508d349f30c17ea493797bca405cd63f62
==================================================
Refactor to avoid use of Hashtable. No functional change.
==================================================
Mark Thomas
==================================================
Thu Sep 15 16:54:30 2022 +0100
==================================================
Generator.java
Refactor to avoid use of Hashtable. No functional change.


==================================================
TagLibraryInfoImpl.java
index 4a85866903..34c6e41abf 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -29,10 +29,8 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
-import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Hashtable;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -913,9 +911,9 @@ class Generator {
          * handlers: <key>: tag short name <value>: introspection info of tag
          * handler for <prefix:shortName> tag
          */
-        private final Hashtable<String,Hashtable<String,TagHandlerInfo>> handlerInfos;
+        private final Map<String,Map<String,TagHandlerInfo>> handlerInfos;
 
-        private final Hashtable<String,Integer> tagVarNumbers;
+        private final Map<String,Integer> tagVarNumbers;
 
         private String parent;
 
@@ -956,8 +954,8 @@ class Generator {
             this.fragmentHelperClass = fragmentHelperClass;
             this.useInstanceManagerForTags = useInstanceManagerForTags;
             methodNesting = 0;
-            handlerInfos = new Hashtable<>();
-            tagVarNumbers = new Hashtable<>();
+            handlerInfos = new HashMap<>();
+            tagVarNumbers = new HashMap<>();
             textMap = new HashMap<>();
         }
 
@@ -1794,7 +1792,7 @@ class Generator {
 
             // Compute attribute value string for XML-style and named
             // attributes
-            Hashtable<String,String> map = new Hashtable<>();
+            Map<String,String> map = new HashMap<>();
             // Validator ensures this is non-null
             Node.JspAttribute[] attrs = n.getJspAttributes();
             for (int i = 0; i < attrs.length; i++) {
@@ -1839,9 +1837,7 @@ class Generator {
             out.print(" + " + elemName);
 
             // Write remaining attributes
-            Enumeration<String> enumeration = map.keys();
-            while (enumeration.hasMoreElements()) {
-                String attrName = enumeration.nextElement();
+            for (String attrName : map.keySet()) {
                 out.print(map.get(attrName));
             }
 
@@ -2137,10 +2133,9 @@ class Generator {
 
         private TagHandlerInfo getTagHandlerInfo(Node.CustomTag n)
                 throws JasperException {
-            Hashtable<String,TagHandlerInfo> handlerInfosByShortName =
-                handlerInfos.get(n.getPrefix());
+            Map<String,TagHandlerInfo> handlerInfosByShortName = handlerInfos.get(n.getPrefix());
             if (handlerInfosByShortName == null) {
-                handlerInfosByShortName = new Hashtable<>();
+                handlerInfosByShortName = new HashMap<>();
                 handlerInfos.put(n.getPrefix(), handlerInfosByShortName);
             }
             TagHandlerInfo handlerInfo =
@@ -3815,9 +3810,9 @@ class Generator {
      */
     private static class TagHandlerInfo {
 
-        private Hashtable<String, Method> methodMaps;
+        private Map<String, Method> methodMaps;
 
-        private Hashtable<String, Class<?>> propertyEditorMaps;
+        private Map<String, Class<?>> propertyEditorMaps;
 
         private Class<?> tagHandlerClass;
 
@@ -3835,8 +3830,8 @@ class Generator {
         TagHandlerInfo(Node n, Class<?> tagHandlerClass,
                 ErrorDispatcher err) throws JasperException {
             this.tagHandlerClass = tagHandlerClass;
-            this.methodMaps = new Hashtable<>();
-            this.propertyEditorMaps = new Hashtable<>();
+            this.methodMaps = new HashMap<>();
+            this.propertyEditorMaps = new HashMap<>();
 
             try {
                 BeanInfo tagClassInfo = Introspector.getBeanInfo(tagHandlerClass);

==================================================
