2180945925d5e902208fcab6527cc829734088a7
==================================================
Replace calls to System.getProperty("path.separator" with
==================================================
Mark Thomas
==================================================
Fri Dec 5 14:56:28 2014 +0000
==================================================
AntCompiler.java
Replace calls to System.getProperty("path.separator" with
File.pathSeperator

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1643310 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspRuntimeContext.java
index e0b017a4a0..7f8f3de7d2 100644
--- a/java/org/apache/jasper/compiler/AntCompiler.java
+++ b/java/org/apache/jasper/compiler/AntCompiler.java
@@ -130,8 +130,6 @@ public class AntCompiler extends Compiler {
         String javaFileName = ctxt.getServletJavaFileName();
         String classpath = ctxt.getClassPath();
 
-        String sep = System.getProperty("path.separator");
-
         StringBuilder errorReport = new StringBuilder();
 
         StringBuilder info=new StringBuilder();
@@ -149,7 +147,7 @@ public class AntCompiler extends Compiler {
         Path path = new Path(project);
         path.setPath(System.getProperty("java.class.path"));
         info.append("    cp=" + System.getProperty("java.class.path") + "\n");
-        StringTokenizer tokenizer = new StringTokenizer(classpath, sep);
+        StringTokenizer tokenizer = new StringTokenizer(classpath, File.pathSeparator);
         while (tokenizer.hasMoreElements()) {
             String pathElement = tokenizer.nextToken();
             File repository = new File(pathElement);
@@ -157,9 +155,10 @@ public class AntCompiler extends Compiler {
             info.append("    cp=" + repository + "\n");
         }
 
-        if( log.isDebugEnabled() )
-            log.debug( "Using classpath: " + System.getProperty("java.class.path") + sep
-                    + classpath);
+        if (log.isDebugEnabled()) {
+            log.debug( "Using classpath: " + System.getProperty("java.class.path") +
+                    File.pathSeparator + classpath);
+        }
 
         // Initializing sourcepath
         Path srcPath = new Path(project);

==================================================
Library.java
index c43039fd35..52bc353e7d 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -398,7 +398,6 @@ public final class JspRuntimeContext {
     private String initClassPath() {
 
         StringBuilder cpath = new StringBuilder();
-        String sep = System.getProperty("path.separator");
 
         if (parentClassLoader instanceof URLClassLoader) {
             URL [] urls = ((URLClassLoader)parentClassLoader).getURLs();
@@ -413,7 +412,7 @@ public final class JspRuntimeContext {
                         // Need to decode the URL, primarily to convert %20
                         // sequences back to spaces
                         String decoded = URLDecoder.decode(urls[i].getPath(), "UTF-8");
-                        cpath.append(decoded + sep);
+                        cpath.append(decoded + File.pathSeparator);
                     } catch (UnsupportedEncodingException e) {
                         // All JREs are required to support UTF-8
                     }
@@ -421,7 +420,7 @@ public final class JspRuntimeContext {
             }
         }
 
-        cpath.append(options.getScratchDir() + sep);
+        cpath.append(options.getScratchDir() + File.pathSeparator);
 
         String cp = (String) context.getAttribute(Constants.SERVLET_CLASSPATH);
         if (cp == null || cp.equals("")) {

==================================================
TestClassLoaderLogManager.java
index 8923131e96..e854397d81 100644
--- a/java/org/apache/tomcat/jni/Library.java
+++ b/java/org/apache/tomcat/jni/Library.java
@@ -17,6 +17,8 @@
 
 package org.apache.tomcat.jni;
 
+import java.io.File;
+
 /** Library
  *
  * @author Mladen Turk
@@ -49,8 +51,7 @@ public final class Library {
                 }
                 String name = System.mapLibraryName(NAMES[i]);
                 String path = System.getProperty("java.library.path");
-                String sep = System.getProperty("path.separator");
-                String [] paths = path.split(sep);
+                String [] paths = path.split(File.pathSeparator);
                 for (int j=0; j<paths.length; j++) {
                     java.io.File fd = new java.io.File(paths[j] , name);
                     if (fd.exists()) {

==================================================
