f2949a1c328de2c53785dd7d3a0e8c114d92fe5e
==================================================
Eclipse 3.5 has a new dead code detector. Fix various debug related logging issues found.
==================================================
Mark Emlyn
==================================================
Sun Sep 20 18:32:48 2009 +0000
==================================================
IntrospectionUtils.java
Eclipse 3.5 has a new dead code detector. Fix various debug related logging issues found.
Update copy of IntrospectionUtils in test suite (it was quicker than porting the individual fixes)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@817075 13f79535-47bb-0310-9956-ffa450edef68



==================================================
B2CConverter.java
index 61b3f70c26..ed4f51905e 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -77,9 +77,8 @@ public final class IntrospectionUtils {
                 log.debug("No setAttribute in " + proxy.getClass());
             return;
         }
-        if (false)
-            if (log.isDebugEnabled())
-                log.debug("Setting " + n + "=" + v + "  in " + proxy);
+        if (log.isDebugEnabled())
+            log.debug("Setting " + n + "=" + v + "  in " + proxy);
         executeM.invoke(proxy, new Object[] { n, v });
         return;
     }
@@ -259,8 +258,9 @@ public final class IntrospectionUtils {
      * you can have setDebug(1).
      */
     public static boolean setProperty(Object o, String name, String value) {
-        if (dbg > 1)
-            d("setProperty(" + o.getClass() + " " + name + "=" + value + ")");
+        if (log.isDebugEnabled())
+            log.debug("IntrospectionUtils: setProperty(" +
+                    o.getClass() + " " + name + "=" + value + ")");
 
         String setter = "set" + capitalize(name);
 
@@ -318,13 +318,16 @@ public final class IntrospectionUtils {
                         try {
                             params[0] = InetAddress.getByName(value);
                         } catch (UnknownHostException exc) {
-                            d("Unable to resolve host name:" + value);
+                            if (log.isDebugEnabled())
+                                log.debug("IntrospectionUtils: Unable to resolve host name:" + value);
                             ok = false;
                         }
 
                         // Unknown type
                     } else {
-                        d("Unknown type " + paramType.getName());
+                        if (log.isDebugEnabled())
+                            log.debug("IntrospectionUtils: Unknown type " +
+                                    paramType.getName());
                     }
 
                     if (ok) {
@@ -371,23 +374,17 @@ public final class IntrospectionUtils {
         } catch (IllegalArgumentException ex2) {
             log.warn("IAE " + o + " " + name + " " + value, ex2);
         } catch (SecurityException ex1) {
-            if (dbg > 0)
-                d("SecurityException for " + o.getClass() + " " + name + "="
-                        + value + ")");
-            if (dbg > 1)
-                ex1.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: SecurityException for " +
+                        o.getClass() + " " + name + "=" + value + ")", ex1);
         } catch (IllegalAccessException iae) {
-            if (dbg > 0)
-                d("IllegalAccessException for " + o.getClass() + " " + name
-                        + "=" + value + ")");
-            if (dbg > 1)
-                iae.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: IllegalAccessException for " +
+                        o.getClass() + " " + name + "=" + value + ")", iae);
         } catch (InvocationTargetException ie) {
-            if (dbg > 0)
-                d("InvocationTargetException for " + o.getClass() + " " + name
-                        + "=" + value + ")");
-            if (dbg > 1)
-                ie.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: InvocationTargetException for " +
+                        o.getClass() + " " + name + "=" + value + ")", ie);
         }
         return false;
     }
@@ -425,22 +422,17 @@ public final class IntrospectionUtils {
         } catch (IllegalArgumentException ex2) {
             log.warn("IAE " + o + " " + name, ex2);
         } catch (SecurityException ex1) {
-            if (dbg > 0)
-                d("SecurityException for " + o.getClass() + " " + name + ")");
-            if (dbg > 1)
-                ex1.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: SecurityException for " +
+                        o.getClass() + " " + name + ")", ex1);
         } catch (IllegalAccessException iae) {
-            if (dbg > 0)
-                d("IllegalAccessException for " + o.getClass() + " " + name
-                        + ")");
-            if (dbg > 1)
-                iae.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: IllegalAccessException for " +
+                        o.getClass() + " " + name + ")", iae);
         } catch (InvocationTargetException ie) {
-            if (dbg > 0)
-                d("InvocationTargetException for " + o.getClass() + " " + name
-                        + ")");
-            if (dbg > 1)
-                ie.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: InvocationTargetException for " +
+                        o.getClass() + " " + name + ")");
         }
         return null;
     }
@@ -460,10 +452,9 @@ public final class IntrospectionUtils {
                 }
             }
         } catch (Exception ex1) {
-            if (dbg > 0)
-                d("Exception for " + o.getClass() + " " + name);
-            if (dbg > 1)
-                ex1.printStackTrace();
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: Exception for " +
+                        o.getClass() + " " + name, ex1);
         }
     }
 
@@ -787,11 +778,14 @@ public final class IntrospectionUtils {
     public static Object callMethod1(Object target, String methodN,
             Object param1, String typeParam1, ClassLoader cl) throws Exception {
         if (target == null || param1 == null) {
-            d("Assert: Illegal params " + target + " " + param1);
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: Assert: Illegal params " +
+                        target + " " + param1);
         }
-        if (dbg > 0)
-            d("callMethod1 " + target.getClass().getName() + " "
-                    + param1.getClass().getName() + " " + typeParam1);
+        if (log.isDebugEnabled())
+            log.debug("IntrospectionUtils: callMethod1 " +
+                    target.getClass().getName() + " " +
+                    param1.getClass().getName() + " " + typeParam1);
 
         Class<?> params[] = new Class[1];
         if (typeParam1 == null)
@@ -808,11 +802,14 @@ public final class IntrospectionUtils {
     public static Object callMethod0(Object target, String methodN)
             throws Exception {
         if (target == null) {
-            d("Assert: Illegal params " + target);
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: Assert: Illegal params " +
+                        target);
             return null;
         }
-        if (dbg > 0)
-            d("callMethod0 " + target.getClass().getName() + "." + methodN);
+        if (log.isDebugEnabled())
+            log.debug("IntrospectionUtils: callMethod0 " +
+                    target.getClass().getName() + "." + methodN);
 
         Class<?> params[] = new Class[0];
         Method m = findMethod(target.getClass(), methodN, params);
@@ -829,13 +826,14 @@ public final class IntrospectionUtils {
         Method m = null;
         m = findMethod(target.getClass(), methodN, typeParams);
         if (m == null) {
-            d("Can't find method " + methodN + " in " + target + " CLASS "
-                    + target.getClass());
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: Can't find method " + methodN +
+                        " in " + target + " CLASS " + target.getClass());
             return null;
         }
         Object o = m.invoke(target, params);
 
-        if (dbg > 0) {
+        if (log.isDebugEnabled()) {
             // debug
             StringBuffer sb = new StringBuffer();
             sb.append("" + target.getClass().getName() + "." + methodN + "( ");
@@ -845,7 +843,7 @@ public final class IntrospectionUtils {
                 sb.append(params[i]);
             }
             sb.append(")");
-            d(sb.toString());
+            log.debug("IntrospectionUtils:" + sb.toString());
         }
         return o;
     }
@@ -871,12 +869,16 @@ public final class IntrospectionUtils {
             try {
                 result = InetAddress.getByName(object);
             } catch (UnknownHostException exc) {
-                d("Unable to resolve host name:" + object);
+                if (log.isDebugEnabled())
+                    log.debug("IntrospectionUtils: Unable to resolve host name:" +
+                            object);
             }
 
             // Unknown type
         } else {
-            d("Unknown type " + paramType.getName());
+            if (log.isDebugEnabled())
+                log.debug("IntrospectionUtils: Unknown type " +
+                        paramType.getName());
         }
         if (result == null) {
             throw new IllegalArgumentException("Can't convert argument: " + object);
@@ -899,11 +901,4 @@ public final class IntrospectionUtils {
 
     }
 
-    // debug --------------------
-    static final int dbg = 0;
-
-    static void d(String s) {
-        if (log.isDebugEnabled())
-            log.debug("IntrospectionUtils: " + s);
-    }
 }

==================================================
UEncoder.java
index b7dabfce74..e695fbfbb8 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -80,18 +80,19 @@ public class B2CConverter {
                 int cnt=conv.read( result, 0, size );
                 if( cnt <= 0 ) {
                     // End of stream ! - we may be in a bad state
-                    if( debug>0)
-                        log( "EOF" );
+                    if(log.isDebugEnabled())
+                        log.debug("B2CConverter: EOF");
                     return;
                 }
-                if( debug > 1 )
-                    log("Converted: " + new String( result, 0, cnt ));
+                if(log.isDebugEnabled())
+                    log.debug("B2CConverter: Converted: " +
+                            new String(result, 0, cnt));
                 cb.append( result, 0, cnt );
                 limit = limit - (bbLengthBeforeRead - bb.getLength());
             }
         } catch( IOException ex) {
-            if( debug>0)
-                log( "Reseting the converter " + ex.toString() );
+            if(log.isDebugEnabled())
+                log.debug("B2CConverter: Reseting the converter " + ex.toString());
             reset();
             throw ex;
         }
@@ -106,12 +107,6 @@ public class B2CConverter {
         conv=new ReadConvertor( iis, encoding );
     }
 
-    private final int debug=0;
-    void log( String s ) {
-        if (log.isDebugEnabled())
-            log.debug("B2CConverter: " + s );
-    }
-
 }
 
 // -------------------- Private implementation --------------------

==================================================
Cookies.java
index b01d455697..63e624404a 100644
--- a/java/org/apache/tomcat/util/buf/UEncoder.java
+++ b/java/org/apache/tomcat/util/buf/UEncoder.java
@@ -44,7 +44,6 @@ public final class UEncoder {
     private ByteChunk bb=null;
 
     private String encoding="UTF8";
-    private static final int debug=0;
     
     public UEncoder() {
         initSafeChars();
@@ -75,10 +74,12 @@ public final class UEncoder {
         for (int i = 0; i < s.length(); i++) {
             int c = s.charAt(i);
             if( safeChars.get( c ) ) {
-                if( debug > 0 ) log("Safe: " + (char)c);
+                if(log.isDebugEnabled())
+                    log.debug("Encoder: Safe: " + (char)c);
                 buf.write((char)c);
             } else {
-                if( debug > 0 ) log("Unsafe:  " + (char)c);
+                if(log.isDebugEnabled())
+                    log.debug("Encoder: Unsafe:  " + (char)c);
                 c2b.convert( (char)c );
                 
                 // "surrogate" - UTF is _not_ 16 bit, but 21 !!!!
@@ -87,7 +88,8 @@ public final class UEncoder {
                     if ( (i+1) < s.length()) {
                         int d = s.charAt(i+1);
                         if (d >= 0xDC00 && d <= 0xDFFF) {
-                            if( debug > 0 ) log("Unsafe:  " + c);
+                            if(log.isDebugEnabled())
+                                log.debug("Encoder: Unsafe:  " + c);
                             c2b.convert( (char)d);
                             i++;
                         }
@@ -110,10 +112,12 @@ public final class UEncoder {
         for( int j=off; j< len; j++ ) {
             buf.write( '%' );
             char ch = Character.forDigit((bytes[j] >> 4) & 0xF, 16);
-            if( debug > 0 ) log("Encode:  " + ch);
+            if(log.isDebugEnabled())
+                log.debug("Encoder: Encode:  " + ch);
             buf.write(ch);
             ch = Character.forDigit(bytes[j] & 0xF, 16);
-            if( debug > 0 ) log("Encode:  " + ch);
+            if(log.isDebugEnabled())
+                log.debug("Encoder: Encode:  " + ch);
             buf.write(ch);
         }
     }
@@ -167,9 +171,4 @@ public final class UEncoder {
         safeChars.set(')');
         safeChars.set(',');
     }
-
-    private static void log( String s ) {
-        if (log.isDebugEnabled())
-            log.debug("Encoder: " + s );
-    }
 }

==================================================
IntrospectionUtils.java
index dba47c8242..759c790024 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -190,13 +190,15 @@ public final class Cookies { // extends MultiMap {
 
             // Uncomment to test the new parsing code
             if( cookieValue.getType() == MessageBytes.T_BYTES ) {
-                if( dbg>0 ) log( "Parsing b[]: " + cookieValue.toString());
+                if(log.isDebugEnabled())
+                    log.debug("Cookies: Parsing b[]: " + cookieValue.toString());
                 ByteChunk bc=cookieValue.getByteChunk();
                 processCookieHeader( bc.getBytes(),
                                      bc.getOffset(),
                                      bc.getLength());
             } else {
-                if( dbg>0 ) log( "Parsing S: " + cookieValue.toString());
+                if(log.isDebugEnabled())
+                    log.debug("Cookies: Parsing S: " + cookieValue.toString());
                 processCookieHeader( cookieValue.toString() );
             }
             pos++;// search from the next position
@@ -224,7 +226,8 @@ public final class Cookies { // extends MultiMap {
     
     private void processCookieHeader(  String cookieString )
     {
-        if( dbg>0 ) log( "Parsing cookie header " + cookieString );
+        if(log.isDebugEnabled())
+            log.debug("Cookies: Parsing cookie header " + cookieString);
         // normal cookie, with a string value.
         // This is the original code, un-optimized - it shouldn't
         // happen in normal case
@@ -248,7 +251,8 @@ public final class Cookies { // extends MultiMap {
                 
                 cookie.getName().setString(name);
                 cookie.getValue().setString(value);
-                if( dbg > 0 ) log( "Add cookie " + name + "=" + value);
+                if(log.isDebugEnabled())
+                    log.debug("Cookies: Add cookie " + name + "=" + value);
             } else {
                 // we have a bad cookie.... just let it go
             }
@@ -278,15 +282,6 @@ public final class Cookies { // extends MultiMap {
         return value;
     }  
 
-
-    // log
-    static final int dbg=0;
-    public void log(String s ) {
-        if (log.isDebugEnabled())
-            log.debug("Cookies: " + s);
-    }
-
-
    /**
      * Returns true if the byte is a separator character as
      * defined in RFC2619. Since this is called often, this
@@ -426,7 +421,8 @@ public final class Cookies { // extends MultiMap {
                         // INVALID COOKIE, advance to next delimiter
                         // The starting character of the cookie value was
                         // not valid.
-                        log("Invalid cookie. Value not a token or quoted value");
+                        log.info("Cookies: Invalid cookie." +
+                                "Value not a token or quoted value");
                         while (pos < end && bytes[pos] != ';' && 
                                bytes[pos] != ',') 
                             {pos++; }
@@ -525,7 +521,7 @@ public final class Cookies { // extends MultiMap {
                 } 
 
                 // Unknown cookie, complain
-                log("Unknown Special Cookie");
+                log.info("Cookies: Unknown Special Cookie");
 
             } else { // Normal Cookie
                 sc = addCookie();

==================================================
