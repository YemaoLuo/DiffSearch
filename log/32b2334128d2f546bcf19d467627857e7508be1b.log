32b2334128d2f546bcf19d467627857e7508be1b
==================================================
Fix some Javadoc warnings when compiling with Java 8
==================================================
Mark Emlyn
==================================================
Mon Oct 13 21:51:42 2014 +0000
==================================================
ELResolver.java
Fix some Javadoc warnings when compiling with Java 8

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631568 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServletContextAttributeListener.java
index 129e7ec0c3..1ca89d3a57 100644
--- a/java/javax/el/ELResolver.java
+++ b/java/javax/el/ELResolver.java
@@ -29,6 +29,10 @@ public abstract class ELResolver {
     public static final String RESOLVABLE_AT_DESIGN_TIME = "resolvableAtDesignTime";
 
     /**
+     * @param context The EL context for this evaluation
+     * @param base The base object on which the property is to be found
+     * @param property The property whose value is to be returned
+     * @return the value of the provided property
      * @throws NullPointerException
      *              If the supplied context is <code>null</code>
      * @throws PropertyNotFoundException
@@ -53,6 +57,10 @@ public abstract class ELResolver {
     }
 
     /**
+     * @param context The EL context for this evaluation
+     * @param base The base object on which the property is to be found
+     * @param property The property whose type is to be returned
+     * @return the type of the provided property
      * @throws NullPointerException
      *              If the supplied context is <code>null</code>
      * @throws PropertyNotFoundException
@@ -66,6 +74,10 @@ public abstract class ELResolver {
             Object property);
 
     /**
+     * @param context  The EL context for this evaluation
+     * @param base     The base object on which the property is to be found
+     * @param property The property whose value is to be set
+     * @param value    The value to set the property to
      * @throws NullPointerException
      *              If the supplied context is <code>null</code>
      * @throws PropertyNotFoundException
@@ -82,6 +94,11 @@ public abstract class ELResolver {
             Object property, Object value);
 
     /**
+     * @param context The EL context for this evaluation
+     * @param base The base object on which the property is to be found
+     * @param property The property to be checked for read only status
+     * @return <code>true</code> if the identified property is read only,
+     *         otherwise <code>false</code>
      * @throws NullPointerException
      *              If the supplied context is <code>null</code>
      * @throws PropertyNotFoundException

==================================================
ServletContextListener.java
index 60cd3abb9b..0138b9835d 100644
--- a/java/javax/servlet/ServletContextAttributeListener.java
+++ b/java/javax/servlet/ServletContextAttributeListener.java
@@ -32,18 +32,21 @@ public interface ServletContextAttributeListener extends EventListener {
     /**
      * Notification that a new attribute was added to the servlet context.
      * Called after the attribute is added.
+     * @param scae Information about the new attribute
      */
-    public void attributeAdded(ServletContextAttributeEvent scab);
+    public void attributeAdded(ServletContextAttributeEvent scae);
 
     /**
      * Notification that an existing attribute has been removed from the servlet
      * context. Called after the attribute is removed.
+     * @param scae Information about the removed attribute
      */
-    public void attributeRemoved(ServletContextAttributeEvent scab);
+    public void attributeRemoved(ServletContextAttributeEvent scae);
 
     /**
      * Notification that an attribute on the servlet context has been replaced.
      * Called after the attribute is replaced.
+     * @param scae Information about the replaced attribute
      */
-    public void attributeReplaced(ServletContextAttributeEvent scab);
+    public void attributeReplaced(ServletContextAttributeEvent scae);
 }

==================================================
ServletInputStream.java
index 7d1b8e622a..db542e2ed1 100644
--- a/java/javax/servlet/ServletContextListener.java
+++ b/java/javax/servlet/ServletContextListener.java
@@ -34,6 +34,7 @@ public interface ServletContextListener extends EventListener {
      ** Notification that the web application initialization process is starting.
      * All ServletContextListeners are notified of context initialization before
      * any filter or servlet in the web application is initialized.
+     * @param sce Information about the ServletContext that was initialized
      */
     public void contextInitialized(ServletContextEvent sce);
 
@@ -41,6 +42,7 @@ public interface ServletContextListener extends EventListener {
      ** Notification that the servlet context is about to be shut down. All
      * servlets and filters have been destroy()ed before any
      * ServletContextListeners are notified of context destruction.
+     * @param sce Information about the ServletContext that was destroyed
      */
     public void contextDestroyed(ServletContextEvent sce);
 }

==================================================
ServletRegistration.java
index d116e326ec..4e5139e5cd 100644
--- a/java/javax/servlet/ServletInputStream.java
+++ b/java/javax/servlet/ServletInputStream.java
@@ -81,18 +81,22 @@ public abstract class ServletInputStream extends InputStream {
     }
 
     /**
-     * Returns <code>true</code> if all the data has been read from the stream,
-     * else <code>false</code>.
+     * Has the end of this InputStream been reached?
+     *
+     * @return <code>true</code> if all the data has been read from the stream,
+     * else <code>false</code>
      *
      * @since Servlet 3.1
      */
     public abstract boolean isFinished();
 
     /**
-     * Returns <code>true</code> if data can be read without blocking, else
-     * <code>false</code>. If this method is called and returns false, the
-     * container will invoke {@link ReadListener#onDataAvailable()} when data is
-     * available.
+     * Can data be read from this InputStream without blocking?
+     * Returns  If this method is called and returns false, the container will
+     * invoke {@link ReadListener#onDataAvailable()} when data is available.
+     *
+     * @return <code>true</code> if data can be read without blocking, else
+     * <code>false</code>
      *
      * @since Servlet 3.1
      */

==================================================
ServletRequest.java
index a0b5b3495e..de26618c0b 100644
--- a/java/javax/servlet/ServletRegistration.java
+++ b/java/javax/servlet/ServletRegistration.java
@@ -26,8 +26,8 @@ import java.util.Set;
 public interface ServletRegistration extends Registration {
 
     /**
-     *
-     * @param urlPatterns
+     * TODO
+     * @param urlPatterns The URL patterns that this Servlet should be mapped to
      * @return TODO
      * @throws IllegalArgumentException if urlPattern is null or empty
      * @throws IllegalStateException if the associated ServletContext has

==================================================
ServletRequestAttributeListener.java
index f32dff3c9c..08fa51f64a 100644
--- a/java/javax/servlet/ServletRequest.java
+++ b/java/javax/servlet/ServletRequest.java
@@ -396,6 +396,8 @@ public interface ServletRequest {
     public RequestDispatcher getRequestDispatcher(String path);
 
     /**
+     * @param path The virtual path to be converted to a real path
+     * @return {@link ServletContext#getRealPath(String)}
      * @deprecated As of Version 2.1 of the Java Servlet API, use
      *             {@link ServletContext#getRealPath} instead.
      */
@@ -449,17 +451,18 @@ public interface ServletRequest {
 
     /**
      * @return TODO
-     * @throws java.lang.IllegalStateException
-     *             If async is not supported for this request
+     * @throws IllegalStateException If async is not supported for this request
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public AsyncContext startAsync() throws IllegalStateException;
 
     /**
-     * @param servletRequest
-     * @param servletResponse
+     * @param servletRequest    The ServletRequest with which to initialise the
+     *                          asynchronous context
+     * @param servletResponse   The ServletResponse with which to initialise the
+     *                          asynchronous context
      * @return TODO
-     * @throws java.lang.IllegalStateException
+     * @throws IllegalStateException If async is not supported for this request
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public AsyncContext startAsync(ServletRequest servletRequest,
@@ -479,7 +482,7 @@ public interface ServletRequest {
 
     /**
      * @return TODO
-     * @throws java.lang.IllegalStateException
+     * @throws IllegalStateException if the request is not in asynchronous mode
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public AsyncContext getAsyncContext();

==================================================
ServletRequestEvent.java
index 8d65fa12ff..44e91eb7e4 100644
--- a/java/javax/servlet/ServletRequestAttributeListener.java
+++ b/java/javax/servlet/ServletRequestAttributeListener.java
@@ -18,32 +18,37 @@ package javax.servlet;
 
 import java.util.EventListener;
 
-    /**
-     * A ServletRequestAttributeListener can be implemented by the
-     * developer interested in being notified of request attribute
-     * changes. Notifications will be generated while the request
-     * is within the scope of the web application in which the listener
-     * is registered. A request is defined as coming into scope when
-     * it is about to enter the first servlet or filter in each web
-     * application, as going out of scope when it exits the last servlet
-     * or the first filter in the chain.
-     *
-     * @since Servlet 2.4
-     */
-
+/**
+ * A ServletRequestAttributeListener can be implemented by the
+ * developer interested in being notified of request attribute
+ * changes. Notifications will be generated while the request
+ * is within the scope of the web application in which the listener
+ * is registered. A request is defined as coming into scope when
+ * it is about to enter the first servlet or filter in each web
+ * application, as going out of scope when it exits the last servlet
+ * or the first filter in the chain.
+ *
+ * @since Servlet 2.4
+ */
 public interface ServletRequestAttributeListener extends EventListener {
-    /** Notification that a new attribute was added to the
-     ** servlet request. Called after the attribute is added.
+    /**
+     * Notification that a new attribute was added to the
+     * servlet request. Called after the attribute is added.
+     * @param srae Information about the new request attribute
      */
     public void attributeAdded(ServletRequestAttributeEvent srae);
 
-    /** Notification that an existing attribute has been removed from the
-     ** servlet request. Called after the attribute is removed.
+    /**
+     * Notification that an existing attribute has been removed from the
+     * servlet request. Called after the attribute is removed.
+     * @param srae Information about the removed request attribute
      */
     public void attributeRemoved(ServletRequestAttributeEvent srae);
 
-    /** Notification that an attribute was replaced on the
-     ** servlet request. Called after the attribute is replaced.
+    /**
+     * Notification that an attribute was replaced on the
+     * servlet request. Called after the attribute is replaced.
+     * @param srae Information about the replaced request attribute
      */
     public void attributeReplaced(ServletRequestAttributeEvent srae);
 }

==================================================
ServletRequestListener.java
index 5d95eab28b..6d95e921a2 100644
--- a/java/javax/servlet/ServletRequestEvent.java
+++ b/java/javax/servlet/ServletRequestEvent.java
@@ -43,14 +43,16 @@ public class ServletRequestEvent extends java.util.EventObject {
     }
 
     /**
-     * Returns the ServletRequest that is changing.
+     * Get the associated ServletRequest.
+     * @return the ServletRequest that is changing.
      */
     public ServletRequest getServletRequest() {
         return this.request;
     }
 
     /**
-     * Returns the ServletContext of this web application.
+     * Get the associated ServletContext.
+     * @return the ServletContext that is changing.
      */
     public ServletContext getServletContext() {
         return (ServletContext) super.getSource();

==================================================
ServletRequestWrapper.java
index 4ac7055da0..108e4bc22e 100644
--- a/java/javax/servlet/ServletRequestListener.java
+++ b/java/javax/servlet/ServletRequestListener.java
@@ -18,23 +18,27 @@ package javax.servlet;
 
 import java.util.EventListener;
 
-    /**
-     * A ServletRequestListener can be implemented by the developer
-     * interested in being notified of requests coming in and out of
-     * scope in a web component. A request is defined as coming into
-     * scope when it is about to enter the first servlet or filter
-     * in each web application, as going out of scope when it exits
-     * the last servlet or the first filter in the chain.
-     *
-     * @since Servlet 2.4
-     */
-
-
+/**
+ * A ServletRequestListener can be implemented by the developer
+ * interested in being notified of requests coming in and out of
+ * scope in a web component. A request is defined as coming into
+ * scope when it is about to enter the first servlet or filter
+ * in each web application, as going out of scope when it exits
+ * the last servlet or the first filter in the chain.
+ *
+ * @since Servlet 2.4
+ */
 public interface ServletRequestListener extends EventListener {
 
-    /** The request is about to go out of scope of the web application. */
-    public void requestDestroyed ( ServletRequestEvent sre );
+    /**
+     * The request is about to go out of scope of the web application.
+     * @param sre Information about the request
+     */
+    public void requestDestroyed (ServletRequestEvent sre);
 
-    /** The request is about to come into scope of the web application. */
-    public void requestInitialized ( ServletRequestEvent sre );
+    /**
+     * The request is about to come into scope of the web application.
+     * @param sre Information about the request
+     */
+    public void requestInitialized (ServletRequestEvent sre);
 }

==================================================
JspApplicationContext.java
index 308a29fb04..f2fc028ab3 100644
--- a/java/javax/servlet/ServletRequestWrapper.java
+++ b/java/javax/servlet/ServletRequestWrapper.java
@@ -37,8 +37,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * Creates a ServletRequest adaptor wrapping the given request object.
      *
-     * @throws java.lang.IllegalArgumentException
-     *             if the request is null
+     * @throws IllegalArgumentException if the request is null
      */
     public ServletRequestWrapper(ServletRequest request) {
         if (request == null) {
@@ -48,7 +47,8 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * Return the wrapped request object.
+     * Get the wrapped request.
+     * @return the wrapped request object
      */
     public ServletRequest getRequest() {
         return this.request;
@@ -56,9 +56,9 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * Sets the request object being wrapped.
+     * @param request The new wrapped request.
      *
-     * @throws java.lang.IllegalArgumentException
-     *             if the request is null.
+     * @throws IllegalArgumentException if the request is null.
      */
     public void setRequest(ServletRequest request) {
         if (request == null) {
@@ -361,7 +361,9 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return startAsync() on the
      * wrapped request object.
      *
-     * @throws java.lang.IllegalStateException
+     * @throws IllegalStateException If asynchronous processing is not supported
+     *         for this request or if the request is already in asynchronous
+     *         mode
      * @since Servlet 3.0
      */
     @Override
@@ -373,9 +375,13 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return startAsync(Runnable) on
      * the wrapped request object.
      *
-     * @param servletRequest
-     * @param servletResponse
-     * @throws java.lang.IllegalStateException
+     * @param servletRequest    The ServletRequest with which to initialise the
+     *                          asynchronous context
+     * @param servletResponse   The ServletResponse with which to initialise the
+     *                          asynchronous context
+     * @throws IllegalStateException If asynchronous processing is not supported
+     *         for this request or if the request is already in asynchronous
+     *         mode
      * @since Servlet 3.0
      */
     @Override
@@ -418,8 +424,12 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * @param wrapped
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * TODO SERVLET3 - Add comments
+     * @param wrapped The request to compare to the wrapped request
+     * @return <code>true</code> if the request wrapped by this wrapper (or
+     *         series of wrappers) is the same as the supplied request,
+     *         otherwise <code>false</code>
+     * @since Servlet 3.0
      */
     public boolean isWrapperFor(ServletRequest wrapped) {
         if (request == wrapped) {
@@ -432,8 +442,13 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * @param wrappedType
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * TODO SERVLET3 - Add comments
+     * @param wrappedType The class to compare to the class of the wrapped
+     *                    request
+     * @return <code>true</code> if the request wrapped by this wrapper (or
+     *         series of wrappers) is the same type as the supplied type,
+     *         otherwise <code>false</code>
+     * @since Servlet 3.0
      */
     public boolean isWrapperFor(Class<?> wrappedType) {
         if (wrappedType.isAssignableFrom(request.getClass())) {

==================================================
TagAttributeInfo.java
index c9ebc2199d..ff0154cd7c 100644
--- a/java/javax/servlet/jsp/JspApplicationContext.java
+++ b/java/javax/servlet/jsp/JspApplicationContext.java
@@ -30,17 +30,14 @@ import javax.el.ExpressionFactory;
 public interface JspApplicationContext {
 
     /**
-     * <p>
-     * Registers an <code>ELContextListener</code> that will notified whenever a
-     * new <code>ELContext</code> is created.
-     * </p>
+     * Registers an <code>ELContextListener</code> that will be notified
+     * whenever a new <code>ELContext</code> is created.
      * <p>
      * At the very least, any <code>ELContext</code> instantiated will have
      * reference to the <code>JspContext</code> under
      * <code>JspContext.class</code>.
-     * </p>
      *
-     * @param listener
+     * @param listener The listener to add
      */
     public void addELContextListener(ELContextListener listener);
 

==================================================
