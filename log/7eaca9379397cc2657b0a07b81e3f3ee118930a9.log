7eaca9379397cc2657b0a07b81e3f3ee118930a9
==================================================
Yet more adventures with lambda expressions.
==================================================
Mark Emlyn
==================================================
Thu Jul 18 20:56:44 2013 +0000
==================================================
AstFunction.java
Yet more adventures with lambda expressions.
I suspect - but haven't yet checked - that there is scope to make the code more efficient and/or reduce duplication.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1504657 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstLambdaExpression.java
index 09c90a109c..01deb147d6 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -98,12 +98,18 @@ public final class AstFunction extends SimpleNode {
                 // Build arguments
                 int i = 0;
                 while (obj instanceof LambdaExpression &&
-                        i < this.jjtGetNumChildren()) {
+                        i < jjtGetNumChildren()) {
                     Node args = jjtGetChild(i);
                     obj = ((LambdaExpression) obj).invoke(
                             ((AstMethodParameters) args).getParameters(ctx));
                     i++;
                 }
+                if (i < jjtGetNumChildren()) {
+                    // Haven't consumed all the sets of parameters therefore
+                    // there were too many sets of parameters
+                    throw new ELException(MessageFactory.get(
+                            "error.lambda.tooManyMethodParameterSets"));
+                }
                 return obj;
             }
         }

==================================================
TestAstLambdaExpression.java
index a7c1da343a..acf6363719 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -36,22 +36,39 @@ public class AstLambdaExpression extends SimpleNode {
     @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
 
-        // Check that there are not more sets of method parameters than there
-        // are nested lambda expressions
+        // Check;
+        // - that there are not more sets of method parameters than there are
+        //   nested lambda expressions
+        // - if any of the nested expressions declare formal parameters
         int methodParameterSetCount = jjtGetNumChildren() - 2;
-        if (methodParameterSetCount > 0) {
-            // We know this node is an expression
-            methodParameterSetCount--;
-            Node n = this.jjtGetChild(1);
-            while (methodParameterSetCount > 0) {
-                if (n.jjtGetNumChildren() <2 ||
-                        !(n.jjtGetChild(0) instanceof AstLambdaParameters)) {
-                    throw new ELException(MessageFactory.get(
-                            "error.lambda.tooManyMethodParameterSets"));
+        boolean declaresParameters = false;
+        // We know this node is an expression
+        int lambdaExpressionCount = 1;
+        // child at index 1 is the expression
+        Node n = jjtGetChild(1);
+        while (n instanceof AstLambdaExpression) {
+            lambdaExpressionCount++;
+            if (n.jjtGetChild(0) instanceof AstLambdaParameters) {
+                if (!declaresParameters &&
+                        n.jjtGetChild(0).jjtGetNumChildren() > 0) {
+                    declaresParameters = true;
                 }
                 n = n.jjtGetChild(1);
-                methodParameterSetCount--;
+            } else {
+                n = null;
+            }
+        }
+        if (methodParameterSetCount > lambdaExpressionCount) {
+            throw new ELException(MessageFactory.get(
+                    "error.lambda.tooManyMethodParameterSets"));
+        }
+        // Also need to check parents for declaration of formal parameters
+        n = parent;
+        while (!declaresParameters && n instanceof AstLambdaExpression) {
+            if (n.jjtGetChild(0).jjtGetNumChildren() > 0) {
+                declaresParameters = true;
             }
+            n = n.jjtGetParent();
         }
 
         // First child is always parameters even if there aren't any
@@ -74,10 +91,9 @@ public class AstLambdaExpression extends SimpleNode {
         le.setELContext(ctx);
 
         if (jjtGetNumChildren() == 2) {
-            if (formalParameters.isEmpty() &&
-                    !(parent instanceof AstLambdaExpression)) {
-                // No formal parameters or method parameters and not a nested
-                // expression so invoke the expression.
+            if (formalParameters.isEmpty() && !declaresParameters) {
+                // No formal parameters or method parameters and not nested
+                // inside another lambda expression so invoke the expression.
                 return le.invoke(ctx, (Object[]) null);
             } else {
                 // Has formal parameters but no method parameters or is a nested

==================================================
