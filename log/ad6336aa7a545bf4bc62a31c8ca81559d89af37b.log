ad6336aa7a545bf4bc62a31c8ca81559d89af37b
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56825
==================================================
Mark Emlyn
==================================================
Tue Aug 12 10:41:49 2014 +0000
==================================================
AuthenticatorBase.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56825
Enable pre-emptive authentication to work with the SSL authenticator. Based on a patch by jlmonteiro.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1617445 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLAuthenticator.java
index 905979d8f5..43a8472a1c 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -41,6 +41,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.SessionIdGenerator;
 import org.apache.catalina.valves.ValveBase;
+import org.apache.coyote.ActionCode;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
@@ -566,8 +567,7 @@ public abstract class AuthenticatorBase extends ValveBase
         }
 
         if (!authRequired && context.getPreemptiveAuthentication()) {
-            X509Certificate[] certs = (X509Certificate[]) request.getAttribute(
-                    Globals.CERTIFICATES_ATTR);
+            X509Certificate[] certs = getRequestCertificates(request);
             authRequired = certs != null && certs.length > 0;
         }
 
@@ -619,6 +619,35 @@ public abstract class AuthenticatorBase extends ValveBase
 
     // ------------------------------------------------------ Protected Methods
 
+    /**
+     * Look for the X509 certificate chain in the Request under the key
+     * <code>javax.servlet.request.X509Certificate</code>. If not found, trigger
+     * extracting the certificate chain from the Coyote request.
+     *
+     * @param request   Request to be processed
+     *
+     * @return          The X509 certificate chain if found, <code>null</code>
+     *                  otherwise.
+     */
+    protected X509Certificate[] getRequestCertificates(final Request request)
+            throws IllegalStateException {
+
+        X509Certificate certs[] =
+                (X509Certificate[]) request.getAttribute(Globals.CERTIFICATES_ATTR);
+
+        if ((certs == null) || (certs.length < 1)) {
+            try {
+                request.getCoyoteRequest().action (ActionCode.REQ_SSL_CERTIFICATE, null);
+                certs = (X509Certificate[]) request.getAttribute(Globals.CERTIFICATES_ATTR);
+            } catch (IllegalStateException ise) {
+                // Request body was too large for save buffer
+                // Return null which will trigger an auth failure
+            }
+        }
+
+        return certs;
+    }
+
 
     /**
      * Associate the specified single sign on identifier with the

==================================================
TestClientCert.java
index 716ec607d1..0269ee4b9d 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -23,9 +23,7 @@ import java.security.cert.X509Certificate;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.catalina.Globals;
 import org.apache.catalina.connector.Request;
-import org.apache.coyote.ActionCode;
 
 /**
  * An <b>Authenticator</b> and <b>Valve</b> implementation of authentication
@@ -97,28 +95,15 @@ public class SSLAuthenticator extends AuthenticatorBase {
             containerLog.debug(" Looking up certificates");
         }
 
-        X509Certificate certs[] = (X509Certificate[])
-            request.getAttribute(Globals.CERTIFICATES_ATTR);
-        if ((certs == null) || (certs.length < 1)) {
-            try {
-                request.getCoyoteRequest().action
-                                  (ActionCode.REQ_SSL_CERTIFICATE, null);
-            } catch (IllegalStateException ise) {
-                // Request body was too large for save buffer
-                response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
-                        sm.getString("authenticator.certificates"));
-                return false;
-            }
-            certs = (X509Certificate[])
-                request.getAttribute(Globals.CERTIFICATES_ATTR);
-        }
+        X509Certificate certs[] = getRequestCertificates(request);
+
         if ((certs == null) || (certs.length < 1)) {
             if (containerLog.isDebugEnabled()) {
                 containerLog.debug("  No certificates included with this request");
             }
             response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
-                               sm.getString("authenticator.certificates"));
-            return (false);
+                    sm.getString("authenticator.certificates"));
+            return false;
         }
 
         // Authenticate the specified certificate chain

==================================================
TesterSupport.java
index ffb98ab79f..5bc0163b98 100644
--- a/test/org/apache/tomcat/util/net/TestClientCert.java
+++ b/test/org/apache/tomcat/util/net/TestClientCert.java
@@ -23,6 +23,7 @@ import static org.junit.Assert.assertEquals;
 import org.junit.Assume;
 import org.junit.Test;
 
+import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -35,18 +36,37 @@ import org.apache.tomcat.util.buf.ByteChunk;
 public class TestClientCert extends TomcatBaseTest {
 
     @Test
-    public void testClientCertGet() throws Exception {
+    public void testClientCertGetWithoutPreemptive() throws Exception {
+        doTestClientCertGet(false);
+    }
+
+    @Test
+    public void testClientCertGetWithPreemptive() throws Exception {
+        doTestClientCertGet(true);
+    }
+
+    public void doTestClientCertGet(boolean preemtive) throws Exception {
         Assume.assumeTrue("SSL renegotiation has to be supported for this test",
                 TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
+        if (preemtive) {
+            // Only one context deployed
+            Context c = (Context) getTomcatInstance().getHost().findChildren()[0];
+            c.setPreemptiveAuthentication(true);
+        }
+
         // Unprotected resource
         ByteChunk res =
                 getUrl("https://localhost:" + getPort() + "/unprotected");
-        assertEquals("OK", res.toString());
+        if (preemtive) {
+            assertEquals("OK-" + TesterSupport.ROLE, res.toString());
+        } else {
+            assertEquals("OK", res.toString());
+        }
 
         // Protected resource
         res = getUrl("https://localhost:" + getPort() + "/protected");
-        assertEquals("OK", res.toString());
+        assertEquals("OK-" + TesterSupport.ROLE, res.toString());
     }
 
     @Test

==================================================
