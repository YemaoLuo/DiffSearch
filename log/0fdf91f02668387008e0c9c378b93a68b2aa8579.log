0fdf91f02668387008e0c9c378b93a68b2aa8579
==================================================
More fun and games with nested lambda expressions.
==================================================
Mark Emlyn
==================================================
Wed Jul 17 21:12:22 2013 +0000
==================================================
AstLambdaExpression.java
More fun and games with nested lambda expressions.
Each invocation of a nested expression consumes a set of method parameters. Therefore nested lambda expressions that are invoked immediately (because they have no formal parameetrs) need to inform the outer expression of the invocation so the next invocation uses the correct method parameters.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1504281 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAstLambdaExpression.java
index 4d7e595b3c..b4536d664a 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -29,6 +29,8 @@ import org.apache.el.util.MessageFactory;
 
 public class AstLambdaExpression extends SimpleNode {
 
+    private int methodParameterIndex = 0;
+
     public AstLambdaExpression(int id) {
         super(id);
     }
@@ -73,37 +75,70 @@ public class AstLambdaExpression extends SimpleNode {
         LambdaExpression le = new LambdaExpression(formalParameters, ve);
         le.setELContext(ctx);
 
-        if (formalParameters.isEmpty() && jjtGetNumChildren() == 2) {
-            // No formal parameters - invoke the expression
-            return le.invoke(ctx, (Object[]) null);
+        if (jjtGetNumChildren() == 2) {
+            if (formalParameters.isEmpty()) {
+                // No formal parameters or method parameters so invoke the
+                // expression. If this is a nested expression inform the outer
+                // expression that an invocation has occurred so the correct set
+                // of method parameters are used for the next invocation.
+                incMethodParameterIndex();
+                return le.invoke(ctx, (Object[]) null);
+            } else {
+                // Has formal parameters but no method parameters so return the
+                // expression for later evaluation
+                return le;
+            }
         }
 
-        // If there are method parameters, need to invoke the expression with
-        // those parameters. If there are multiple sets of method parameters
-        // there should be at least that many nested expressions.
-        // If there are more nested expressions than sets of method parameters
-        // this may return a LambdaExpression.
-        // If there are more sets of method parameters than nested expressions
-        // an ELException will have been thrown by the check at the start of
-        // this method.
-        // If the inner most expression(s) do not require parameters then a
-        // value will be returned once the outermost expression that does
-        // require a parameter has been evaluated.
-        Object result = le;
-        int i = 2;
-        while (result instanceof LambdaExpression && i < jjtGetNumChildren()) {
-            result = ((LambdaExpression) result).invoke(
-                    ((AstMethodParameters) children[i]).getParameters(ctx));
-            i++;
-            while (i < jjtGetNumChildren() && children[i].jjtGetNumChildren() == 0) {
-                i++;
-            }
+
+        // Always have to invoke the outer-most expression
+        methodParameterIndex = 2;
+        Object result = le.invoke(((AstMethodParameters)
+                children[methodParameterIndex]).getParameters(ctx));
+        methodParameterIndex++;
+
+        /*
+         * If there are multiple sets of method parameters there should be at
+         * least that many nested expressions.
+         *
+         * If there are more nested expressions than sets of method parameters
+         * this may return a LambdaExpression.
+         *
+         * If there are more sets of method parameters than nested expressions
+         * an ELException will have been thrown by the check at the start of
+         * this method.
+         *
+         * If the inner most expression(s) do not require parameters then a
+         * value will be returned once the outermost expression that does
+         * require a parameter has been evaluated.
+         *
+         * When invoking an expression if it has nested expressions that do not
+         * have formal parameters then they will be evaluated as as part of that
+         * invocation. In this case the method parameters associated with those
+         * nested expressions need to be skipped.
+         */
+        while (result instanceof LambdaExpression &&
+                methodParameterIndex < jjtGetNumChildren()) {
+            result = ((LambdaExpression) result).invoke(((AstMethodParameters)
+                    children[methodParameterIndex]).getParameters(ctx));
+            methodParameterIndex++;
         }
 
         return result;
     }
 
 
+    public void incMethodParameterIndex() {
+        Node parent = jjtGetParent();
+        if (parent instanceof AstLambdaExpression) {
+            // Method parameter index is maintained by outermost lambda
+            // expressions as that is where the parameters are
+            ((AstLambdaExpression) parent).incMethodParameterIndex();
+        } else {
+            methodParameterIndex++;
+        }
+    }
+
     @Override
     public String toString() {
         // Purely for debug purposes. May not be complete or correct. Certainly

==================================================
