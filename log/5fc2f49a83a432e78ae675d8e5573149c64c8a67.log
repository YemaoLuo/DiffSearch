5fc2f49a83a432e78ae675d8e5573149c64c8a67
==================================================
Remove unused code (ExceptionTable)
==================================================
Mark Emlyn
==================================================
Wed Sep 10 20:38:09 2014 +0000
==================================================
Attribute.java
Remove unused code (ExceptionTable)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624116 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ExceptionTable.java
index 6f8739cb9a..b074a7e786 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.util.bcel.Constants;
  * attribute stands for non-standard-attributes.
  *
  * @author <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- * @see ExceptionTable
  * @see LineNumberTable
  * @see LocalVariableTable
  * @see InnerClasses
@@ -108,7 +107,8 @@ public abstract class Attribute implements Cloneable, Serializable
             Utility.swallowCode(file, constant_pool);
             return null;
         case Constants.ATTR_EXCEPTIONS:
-            return new ExceptionTable(name_index, length, file, constant_pool);
+            Utility.swallowExceptionTable(file);
+            return null;
         case Constants.ATTR_LINE_NUMBER_TABLE:
             return new LineNumberTable(name_index, length, file, constant_pool);
         case Constants.ATTR_LOCAL_VARIABLE_TABLE:

==================================================
Utility.java
deleted file mode 100644
index d908337fbd..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-
-/**
- * This class represents the table of exceptions that are thrown by a
- * method. This attribute may be used once per method.  The name of
- * this class is <em>ExceptionTable</em> for historical reasons; The
- * Java Virtual Machine Specification, Second Edition defines this
- * attribute using the name <em>Exceptions</em> (which is inconsistent
- * with the other classes).
- *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public final class ExceptionTable extends Attribute {
-
-    private static final long serialVersionUID = -5109672682663772900L;
-    private int number_of_exceptions; // Table of indices into
-    private int[] exception_index_table; // constant pool
-
-
-    /**
-     * @param name_index Index in constant pool
-     * @param length Content length in bytes
-     * @param exception_index_table Table of indices in constant pool
-     * @param constant_pool Array of constants
-     */
-    public ExceptionTable(int name_index, int length, int[] exception_index_table,
-            ConstantPool constant_pool) {
-        super(name_index, length, constant_pool);
-        setExceptionIndexTable(exception_index_table);
-    }
-
-
-    /**
-     * Construct object from file stream.
-     * @param name_index Index in constant pool
-     * @param length Content length in bytes
-     * @param file Input stream
-     * @param constant_pool Array of constants
-     * @throws IOException
-     */
-    ExceptionTable(int name_index, int length, DataInputStream file, ConstantPool constant_pool)
-            throws IOException {
-        this(name_index, length, (int[]) null, constant_pool);
-        number_of_exceptions = file.readUnsignedShort();
-        exception_index_table = new int[number_of_exceptions];
-        for (int i = 0; i < number_of_exceptions; i++) {
-            exception_index_table[i] = file.readUnsignedShort();
-        }
-    }
-
-
-    /**
-     * @param exception_index_table the list of exception indexes
-     * Also redefines number_of_exceptions according to table length.
-     */
-    public final void setExceptionIndexTable( int[] exception_index_table ) {
-        this.exception_index_table = exception_index_table;
-        number_of_exceptions = (exception_index_table == null) ? 0 : exception_index_table.length;
-    }
-}

==================================================
