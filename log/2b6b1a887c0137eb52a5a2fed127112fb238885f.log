2b6b1a887c0137eb52a5a2fed127112fb238885f
==================================================
Generics for o.a.c.manager
==================================================
Mark Emlyn
==================================================
Sat Dec 27 13:39:41 2008 +0000
==================================================
HTMLManagerServlet.java
Generics for o.a.c.manager
Fix various Eclipse warnings (unused code, etc)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729633 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JMXProxyServlet.java
index f991406b86..da10eb2f04 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -185,12 +185,12 @@ public final class HTMLManagerServlet extends ManagerServlet {
         String war = null;
         FileItem warUpload = null;
         try {
-            List items = upload.parseRequest(request);
+            List<FileItem> items = upload.parseRequest(request);
         
             // Process the uploaded fields
-            Iterator iter = items.iterator();
+            Iterator<FileItem> iter = items.iterator();
             while (iter.hasNext()) {
-                FileItem item = (FileItem) iter.next();
+                FileItem item = iter.next();
         
                 if (!item.isFormField()) {
                     if (item.getFieldName().equals("deployWar") &&
@@ -360,7 +360,8 @@ public final class HTMLManagerServlet extends ManagerServlet {
         for (int i = 0; i < children.length; i++)
             contextPaths[i] = children[i].getName();
 
-        TreeMap sortedContextPathsMap = new TreeMap();
+        TreeMap<String,String> sortedContextPathsMap =
+            new TreeMap<String,String>();
 
         for (int i = 0; i < contextPaths.length; i++) {
             String displayPath = contextPaths[i];
@@ -373,7 +374,8 @@ public final class HTMLManagerServlet extends ManagerServlet {
         String appsUndeploy = sm.getString("htmlManagerServlet.appsUndeploy");
         String appsExpire = sm.getString("htmlManagerServlet.appsExpire");
 
-        Iterator iterator = sortedContextPathsMap.entrySet().iterator();
+        Iterator<Map.Entry<String,String>> iterator =
+            sortedContextPathsMap.entrySet().iterator();
         boolean isHighlighted = true;
         boolean isDeployed = true;
         String highlightColor = null;
@@ -387,9 +389,9 @@ public final class HTMLManagerServlet extends ManagerServlet {
                 highlightColor = "#FFFFFF";
             }
 
-            Map.Entry entry = (Map.Entry) iterator.next();
-            String displayPath = (String) entry.getKey();
-            String contextPath = (String) entry.getValue();
+            Map.Entry<String,String> entry = iterator.next();
+            String displayPath = entry.getKey();
+            String contextPath = entry.getValue();
             Context context = (Context) host.findChild(contextPath);
             if (displayPath.equals("")) {
                 displayPath = "/";
@@ -742,11 +744,11 @@ public final class HTMLManagerServlet extends ManagerServlet {
      * @throws IOException
      */
     protected void displaySessionsListPage(String path, HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
-        List/*<Session>*/ activeSessions = Arrays.asList(getSessionsForPath(path));
+        List<Session> activeSessions = Arrays.asList(getSessionsForPath(path));
         String sortBy = req.getParameter("sort");
         String orderBy = null;
         if (null != sortBy && !"".equals(sortBy.trim())) {
-            Comparator comparator = getComparator(sortBy);
+            Comparator<Session> comparator = getComparator(sortBy);
             if (comparator != null) {
                 orderBy = req.getParameter("order");
                 if ("DESC".equalsIgnoreCase(orderBy)) {
@@ -888,65 +890,65 @@ public final class HTMLManagerServlet extends ManagerServlet {
 		}
     }
 
-    protected Comparator getComparator(String sortBy) {
-        Comparator comparator = null;
+    protected Comparator<Session> getComparator(String sortBy) {
+        Comparator<Session> comparator = null;
         if ("CreationTime".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Date>() {
+                public Comparable<Date> getComparableObject(Session session) {
                     return new Date(session.getCreationTime());
                 }
             };
         } else if ("id".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<String>() {
+                public Comparable<String> getComparableObject(Session session) {
                     return session.getId();
                 }
             };
         } else if ("LastAccessedTime".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Date>() {
+                public Comparable<Date> getComparableObject(Session session) {
                     return new Date(session.getLastAccessedTime());
                 }
             };
         } else if ("MaxInactiveInterval".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Date>() {
+                public Comparable<Date> getComparableObject(Session session) {
                     return new Date(session.getMaxInactiveInterval());
                 }
             };
         } else if ("new".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Boolean>() {
+                public Comparable<Boolean> getComparableObject(Session session) {
                     return Boolean.valueOf(session.getSession().isNew());
                 }
             };
         } else if ("locale".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<String>() {
+                public Comparable<String> getComparableObject(Session session) {
                     return JspHelper.guessDisplayLocaleFromSession(session);
                 }
             };
         } else if ("user".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<String>() {
+                public Comparable<String> getComparableObject(Session session) {
                     return JspHelper.guessDisplayUserFromSession(session);
                 }
             };
         } else if ("UsedTime".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Date>() {
+                public Comparable<Date> getComparableObject(Session session) {
                     return new Date(SessionUtils.getUsedTimeForSession(session));
                 }
             };
         } else if ("InactiveTime".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Date>() {
+                public Comparable<Date> getComparableObject(Session session) {
                     return new Date(SessionUtils.getInactiveTimeForSession(session));
                 }
             };
         } else if ("TTL".equalsIgnoreCase(sortBy)) {
-            comparator = new BaseSessionComparator() {
-                public Comparable getComparableObject(Session session) {
+            comparator = new BaseSessionComparator<Date>() {
+                public Comparable<Date> getComparableObject(Session session) {
                     return new Date(SessionUtils.getTTLForSession(session));
                 }
             };

==================================================
JspHelper.java
index 019ec29025..6801017d77 100644
--- a/java/org/apache/catalina/manager/JMXProxyServlet.java
+++ b/java/org/apache/catalina/manager/JMXProxyServlet.java
@@ -136,7 +136,7 @@ public class JMXProxyServlet extends HttpServlet  {
     public void listBeans( PrintWriter writer, String qry )
     {
 
-        Set names = null;
+        Set<ObjectName> names = null;
         try {
             names=mBeanServer.queryNames(new ObjectName(qry), null);
             writer.println("OK - Number of results: " + names.size());
@@ -146,9 +146,9 @@ public class JMXProxyServlet extends HttpServlet  {
             return;
         }
 
-        Iterator it=names.iterator();
+        Iterator<ObjectName> it=names.iterator();
         while( it.hasNext()) {
-            ObjectName oname=(ObjectName)it.next();
+            ObjectName oname=it.next();
             writer.println( "Name: " + oname.toString());
 
             try {

==================================================
ManagerServlet.java
index d07ae35231..8884773db1 100644
--- a/java/org/apache/catalina/manager/JspHelper.java
+++ b/java/org/apache/catalina/manager/JspHelper.java
@@ -17,8 +17,6 @@
 
 package org.apache.catalina.manager;
 
-import java.io.IOException;
-import java.io.Writer;
 import java.text.DateFormat;
 import java.text.NumberFormat;
 import java.text.SimpleDateFormat;
@@ -37,8 +35,6 @@ import org.apache.catalina.manager.util.SessionUtils;
 public class JspHelper {
 
     private static final String DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
-    private static final String DATE_FORMAT = "yyyy-MM-dd";
-    private static final String TIME_FORMAT = "HH:mm:ss";
 
     /**
      * Public constructor, so that this class can be considered a JavaBean
@@ -133,38 +129,6 @@ public class JspHelper {
     }
 
 
-    /**
-    * Following copied from org.apache.taglibs.standard.tag.common.core.OutSupport v1.1.2
-    * 
-    *  Optimized to create no extra objects and write directly
-    *  to the JspWriter using blocks of escaped and unescaped characters
-    *
-    */
-   private static void writeEscapedXml(char[] buffer, int length, Writer w) throws IOException {
-       int start = 0;
-
-       for (int i = 0; i < length; i++) {
-           char c = buffer[i];
-           if (c <= HIGHEST_SPECIAL) {
-               char[] escaped = specialCharactersRepresentation[c];
-               if (escaped != null) {
-                   // add unescaped portion
-                   if (start < i) {
-                       w.write(buffer,start,i-start);
-                   }
-                   // add escaped xml
-                   w.write(escaped);
-                   start = i + 1;
-               }
-           }
-       }
-       // add rest of unescaped portion
-       if (start < length) {
-           w.write(buffer,start,length-start);
-       }
-   }
-
-
     /*
      * Following copied from org.apache.taglibs.standard.tag.common.core.Util v1.1.2
      */

==================================================
StatusManagerServlet.java
index ab6935f3df..63b6ab9e58 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -44,7 +44,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.Manager;
@@ -295,7 +294,7 @@ public class ManagerServlet
      */
     public void destroy() {
 
-        ;       // No actions necessary
+        // No actions necessary
 
     }
 
@@ -443,7 +442,7 @@ public class ManagerServlet
             value = getServletConfig().getInitParameter("debug");
             debug = Integer.parseInt(value);
         } catch (Throwable t) {
-            ;
+            // Ignore
         }
 
         // Acquire global JNDI resources if available
@@ -930,7 +929,7 @@ public class ManagerServlet
             writer.println(sm.getString("managerServlet.resourcesAll"));
         }
 
-        Class clazz = null;
+        Class<?> clazz = null;
         try {
             if (type != null) {
                 clazz = Class.forName(type);
@@ -952,12 +951,12 @@ public class ManagerServlet
      */
     protected void printResources(PrintWriter writer, String prefix,
                                   javax.naming.Context namingContext,
-                                  String type, Class clazz) {
+                                  String type, Class<?> clazz) {
 
         try {
-            NamingEnumeration items = namingContext.listBindings("");
+            NamingEnumeration<Binding> items = namingContext.listBindings("");
             while (items.hasMore()) {
-                Binding item = (Binding) items.next();
+                Binding item = items.next();
                 if (item.getObject() instanceof javax.naming.Context) {
                     printResources
                         (writer, prefix + item.getName() + "/",
@@ -1015,10 +1014,10 @@ public class ManagerServlet
 
         // Enumerate the available roles
         writer.println(sm.getString("managerServlet.rolesList"));
-        Iterator roles = database.getRoles();
+        Iterator<Role> roles = database.getRoles();
         if (roles != null) {
             while (roles.hasNext()) {
-                Role role = (Role) roles.next();
+                Role role = roles.next();
                 writer.print(role.getRolename());
                 writer.print(':');
                 if (role.getDescription() != null) {
@@ -1535,7 +1534,7 @@ public class ManagerServlet
                 try {
                     ostream.close();
                 } catch (Throwable t) {
-                    ;
+                    // Ignore
                 }
                 ostream = null;
             }
@@ -1543,7 +1542,7 @@ public class ManagerServlet
                 try {
                     istream.close();
                 } catch (Throwable t) {
-                    ;
+                    // Ignore
                 }
                 istream = null;
             }

==================================================
StatusTransformer.java
index 51596a1844..06c95c6a68 100644
--- a/java/org/apache/catalina/manager/StatusManagerServlet.java
+++ b/java/org/apache/catalina/manager/StatusManagerServlet.java
@@ -55,12 +55,6 @@ public class StatusManagerServlet
     // ----------------------------------------------------- Instance Variables
 
 
-    /**
-     * The debugging detail level for this servlet.
-     */
-    private int debug = 0;
-
-
     /**
      * MBean server.
      */
@@ -70,25 +64,25 @@ public class StatusManagerServlet
     /**
      * Vector of protocol handlers object names.
      */
-    protected Vector protocolHandlers = new Vector();
+    protected Vector<ObjectName> protocolHandlers = new Vector<ObjectName>();
 
 
     /**
      * Vector of thread pools object names.
      */
-    protected Vector threadPools = new Vector();
+    protected Vector<ObjectName> threadPools = new Vector<ObjectName>();
 
 
     /**
      * Vector of request processors object names.
      */
-    protected Vector requestProcessors = new Vector();
+    protected Vector<ObjectName> requestProcessors = new Vector<ObjectName>();
 
 
     /**
      * Vector of global request processors object names.
      */
-    protected Vector globalRequestProcessors = new Vector();
+    protected Vector<ObjectName> globalRequestProcessors = new Vector<ObjectName>();
 
 
     /**
@@ -109,24 +103,15 @@ public class StatusManagerServlet
         // Retrieve the MBean server
         mBeanServer = Registry.getRegistry(null, null).getMBeanServer();
 
-        // Set our properties from the initialization parameters
-        String value = null;
-        try {
-            value = getServletConfig().getInitParameter("debug");
-            debug = Integer.parseInt(value);
-        } catch (Throwable t) {
-            ;
-        }
-
         try {
 
             // Query protocol handlers
             String onStr = "*:type=ProtocolHandler,*";
             ObjectName objectName = new ObjectName(onStr);
-            Set set = mBeanServer.queryMBeans(objectName, null);
-            Iterator iterator = set.iterator();
+            Set<ObjectInstance> set = mBeanServer.queryMBeans(objectName, null);
+            Iterator<ObjectInstance> iterator = set.iterator();
             while (iterator.hasNext()) {
-                ObjectInstance oi = (ObjectInstance) iterator.next();
+                ObjectInstance oi = iterator.next();
                 protocolHandlers.addElement(oi.getObjectName());
             }
 
@@ -136,7 +121,7 @@ public class StatusManagerServlet
             set = mBeanServer.queryMBeans(objectName, null);
             iterator = set.iterator();
             while (iterator.hasNext()) {
-                ObjectInstance oi = (ObjectInstance) iterator.next();
+                ObjectInstance oi = iterator.next();
                 threadPools.addElement(oi.getObjectName());
             }
 
@@ -146,7 +131,7 @@ public class StatusManagerServlet
             set = mBeanServer.queryMBeans(objectName, null);
             iterator = set.iterator();
             while (iterator.hasNext()) {
-                ObjectInstance oi = (ObjectInstance) iterator.next();
+                ObjectInstance oi = iterator.next();
                 globalRequestProcessors.addElement(oi.getObjectName());
             }
 
@@ -156,7 +141,7 @@ public class StatusManagerServlet
             set = mBeanServer.queryMBeans(objectName, null);
             iterator = set.iterator();
             while (iterator.hasNext()) {
-                ObjectInstance oi = (ObjectInstance) iterator.next();
+                ObjectInstance oi = iterator.next();
                 requestProcessors.addElement(oi.getObjectName());
             }
 
@@ -177,7 +162,7 @@ public class StatusManagerServlet
      */
     public void destroy() {
 
-        ;       // No actions necessary
+        // No actions necessary
 
     }
 
@@ -281,9 +266,9 @@ public class StatusManagerServlet
             // Display virtual machine statistics
             StatusTransformer.writeVMState(writer,mode);
 
-            Enumeration enumeration = threadPools.elements();
+            Enumeration<ObjectName> enumeration = threadPools.elements();
             while (enumeration.hasMoreElements()) {
-                ObjectName objectName = (ObjectName) enumeration.nextElement();
+                ObjectName objectName = enumeration.nextElement();
                 String name = objectName.getKeyProperty("name");
                 // use StatusTransformer to output status
                 StatusTransformer.writeConnectorState

==================================================
HTMLHostManagerServlet.java
index 63c2b3cca0..9b7af0697c 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -153,7 +153,7 @@ public class StatusTransformer {
         boolean ok = false;
         try {
             String methodName = "info";
-            Class paramTypes[] = new Class[1];
+            Class<?> paramTypes[] = new Class[1];
             paramTypes[0] = result.getClass();
             Object paramValues[] = new Object[1];
             paramValues[0] = result;
@@ -231,13 +231,10 @@ public class StatusTransformer {
     /**
      * Write connector state.
      */
-    public static void writeConnectorState(PrintWriter writer, 
-                                           ObjectName tpName, String name,
-                                           MBeanServer mBeanServer,
-                                           Vector globalRequestProcessors,
-                                           Vector requestProcessors,
-                                           int mode)
-        throws Exception {
+    public static void writeConnectorState(PrintWriter writer,
+            ObjectName tpName, String name, MBeanServer mBeanServer,
+            Vector<ObjectName> globalRequestProcessors,
+            Vector<ObjectName> requestProcessors, int mode) throws Exception {
 
         if (mode == 0) {
             writer.print("<h1>");
@@ -263,9 +260,10 @@ public class StatusTransformer {
 
             ObjectName grpName = null;
 
-            Enumeration enumeration = globalRequestProcessors.elements();
+            Enumeration<ObjectName> enumeration =
+                globalRequestProcessors.elements();
             while (enumeration.hasMoreElements()) {
-                ObjectName objectName = (ObjectName) enumeration.nextElement();
+                ObjectName objectName = enumeration.nextElement();
                 if (name.equals(objectName.getKeyProperty("name"))) {
                     grpName = objectName;
                 }
@@ -297,7 +295,7 @@ public class StatusTransformer {
 
             enumeration = requestProcessors.elements();
             while (enumeration.hasMoreElements()) {
-                ObjectName objectName = (ObjectName) enumeration.nextElement();
+                ObjectName objectName = enumeration.nextElement();
                 if (name.equals(objectName.getKeyProperty("worker"))) {
                     writer.print("<tr>");
                     writeProcessorState(writer, objectName, mBeanServer, mode);
@@ -321,9 +319,10 @@ public class StatusTransformer {
 
             ObjectName grpName = null;
 
-            Enumeration enumeration = globalRequestProcessors.elements();
+            Enumeration<ObjectName> enumeration =
+                globalRequestProcessors.elements();
             while (enumeration.hasMoreElements()) {
-                ObjectName objectName = (ObjectName) enumeration.nextElement();
+                ObjectName objectName = enumeration.nextElement();
                 if (name.equals(objectName.getKeyProperty("name"))) {
                     grpName = objectName;
                 }
@@ -343,7 +342,7 @@ public class StatusTransformer {
                 writer.write("<workers>");
                 enumeration = requestProcessors.elements();
                 while (enumeration.hasMoreElements()) {
-                    ObjectName objectName = (ObjectName) enumeration.nextElement();
+                    ObjectName objectName = enumeration.nextElement();
                     if (name.equals(objectName.getKeyProperty("worker"))) {
                         writeProcessorState(writer, objectName, mBeanServer, mode);
                     }
@@ -552,7 +551,7 @@ public class StatusTransformer {
 
         if (mode == 0){
             ObjectName queryHosts = new ObjectName("*:j2eeType=WebModule,*");
-            Set hostsON = mBeanServer.queryNames(queryHosts, null);
+            Set<ObjectName> hostsON = mBeanServer.queryNames(queryHosts, null);
 
             // Navigation menu
             writer.print("<h1>");
@@ -561,9 +560,9 @@ public class StatusTransformer {
 
             writer.print("<p>");
             int count = 0;
-            Iterator iterator = hostsON.iterator();
+            Iterator<ObjectName> iterator = hostsON.iterator();
             while (iterator.hasNext()) {
-                ObjectName contextON = (ObjectName) iterator.next();
+                ObjectName contextON = iterator.next();
                 String webModuleName = contextON.getKeyProperty("name");
                 if (webModuleName.startsWith("//")) {
                     webModuleName = webModuleName.substring(2);
@@ -588,7 +587,7 @@ public class StatusTransformer {
             count = 0;
             iterator = hostsON.iterator();
             while (iterator.hasNext()) {
-                ObjectName contextON = (ObjectName) iterator.next();
+                ObjectName contextON = iterator.next();
                 writer.print("<a class=\"A.name\" name=\"" 
                              + (count++) + ".0\">");
                 writeContext(writer, contextON, mBeanServer, mode);
@@ -632,17 +631,19 @@ public class StatusTransformer {
             ObjectName queryManager = new ObjectName
                 (objectName.getDomain() + ":type=Manager,path=" + contextName 
                  + ",host=" + hostName + ",*");
-            Set managersON = mBeanServer.queryNames(queryManager, null);
+            Set<ObjectName> managersON =
+                mBeanServer.queryNames(queryManager, null);
             ObjectName managerON = null;
-            Iterator iterator2 = managersON.iterator();
+            Iterator<ObjectName> iterator2 = managersON.iterator();
             while (iterator2.hasNext()) {
-                managerON = (ObjectName) iterator2.next();
+                managerON = iterator2.next();
             }
 
             ObjectName queryJspMonitor = new ObjectName
                 (objectName.getDomain() + ":type=JspMonitor,WebModule=" +
                  webModuleName + ",*");
-            Set jspMonitorONs = mBeanServer.queryNames(queryJspMonitor, null);
+            Set<ObjectName> jspMonitorONs =
+                mBeanServer.queryNames(queryJspMonitor, null);
 
             // Special case for the root context
             if (contextName.equals("/")) {
@@ -676,10 +677,11 @@ public class StatusTransformer {
             String onStr = objectName.getDomain() 
                 + ":j2eeType=Servlet,WebModule=" + webModuleName + ",*";
             ObjectName servletObjectName = new ObjectName(onStr);
-            Set set = mBeanServer.queryMBeans(servletObjectName, null);
-            Iterator iterator = set.iterator();
+            Set<ObjectInstance> set =
+                mBeanServer.queryMBeans(servletObjectName, null);
+            Iterator<ObjectInstance> iterator = set.iterator();
             while (iterator.hasNext()) {
-                ObjectInstance oi = (ObjectInstance) iterator.next();
+                ObjectInstance oi = iterator.next();
                 writeWrapper(writer, oi.getObjectName(), mBeanServer, mode);
             }
 
@@ -735,7 +737,7 @@ public class StatusTransformer {
      * Write JSP monitoring information.
      */
     public static void writeJspMonitor(PrintWriter writer,
-                                       Set jspMonitorONs,
+                                       Set<ObjectName> jspMonitorONs,
                                        MBeanServer mBeanServer,
                                        int mode)
             throws Exception {
@@ -743,9 +745,9 @@ public class StatusTransformer {
         int jspCount = 0;
         int jspReloadCount = 0;
 
-        Iterator iter = jspMonitorONs.iterator();
+        Iterator<ObjectName> iter = jspMonitorONs.iterator();
         while (iter.hasNext()) {
-            ObjectName jspMonitorON = (ObjectName) iter.next();
+            ObjectName jspMonitorON = iter.next();
             Object obj = mBeanServer.getAttribute(jspMonitorON, "jspCount");
             jspCount += ((Integer) obj).intValue();
             obj = mBeanServer.getAttribute(jspMonitorON, "jspReloadCount");

==================================================
HostManagerServlet.java
index cf1afa2926..2f9c1cb100 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -251,7 +251,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
             sortedHostNamesMap.entrySet().iterator();
         while (iterator.hasNext()) {
             Map.Entry<String,String> entry = iterator.next();
-            String hostName = (String) entry.getKey();
+            String hostName = entry.getKey();
             Host host = (Host) engine.findChild(hostName);
 
             if (host != null ) {

==================================================
BaseSessionComparator.java
index 42494e1701..0c0372ca7c 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -38,7 +38,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.Wrapper;
@@ -193,7 +192,7 @@ public class HostManagerServlet
      */
     public void destroy() {
 
-        ;       // No actions necessary
+        // No actions necessary
 
     }
 
@@ -320,7 +319,7 @@ public class HostManagerServlet
             value = getServletConfig().getInitParameter("debug");
             debug = Integer.parseInt(value);
         } catch (Throwable t) {
-            ;
+            // Ignore
         }
 
     }

==================================================
ReverseComparator.java
index e4c48bcb19..73dc9a7db2 100644
--- a/java/org/apache/catalina/manager/util/BaseSessionComparator.java
+++ b/java/org/apache/catalina/manager/util/BaseSessionComparator.java
@@ -25,7 +25,7 @@ import org.apache.catalina.Session;
  * Comparator which permits to compare on a session's content
  * @author C&eacute;drik LIME
  */
-public abstract class BaseSessionComparator implements Comparator {
+public abstract class BaseSessionComparator<T> implements Comparator<Session> {
 
     /**
      * 
@@ -34,14 +34,14 @@ public abstract class BaseSessionComparator implements Comparator {
         super();
     }
 
-    public abstract Comparable getComparableObject(Session session);
+    public abstract Comparable<T> getComparableObject(Session session);
 
     /* (non-Javadoc)
      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
      */
-    public final int compare(Object o1, Object o2) {
-        Comparable c1 = getComparableObject((Session)o1);
-        Comparable c2 = getComparableObject((Session)o2);
-        return c1==null ? (c2==null ? 0 : -1) : (c2==null ? 1 : c1.compareTo(c2));
+    public final int compare(Session s1, Session s2) {
+        Comparable<T> c1 = getComparableObject(s1);
+        Comparable<T> c2 = getComparableObject(s2);
+        return c1==null ? (c2==null ? 0 : -1) : (c2==null ? 1 : c1.compareTo((T)c2));
     }
 }

==================================================
SessionUtils.java
index b0a7735bb2..6bbbb9ddb0 100644
--- a/java/org/apache/catalina/manager/util/ReverseComparator.java
+++ b/java/org/apache/catalina/manager/util/ReverseComparator.java
@@ -19,17 +19,19 @@ package org.apache.catalina.manager.util;
 
 import java.util.Comparator;
 
+import org.apache.catalina.Session;
+
 /**
  * Comparator which reverse the sort order
  * @author C&eacute;drik LIME
  */
-public class ReverseComparator implements Comparator {
-    protected Comparator comparator;
+public class ReverseComparator implements Comparator<Session> {
+    protected Comparator<Session> comparator;
 
     /**
      * 
      */
-    public ReverseComparator(Comparator comparator) {
+    public ReverseComparator(Comparator<Session> comparator) {
         super();
         this.comparator = comparator;
     }
@@ -37,7 +39,7 @@ public class ReverseComparator implements Comparator {
     /* (non-Javadoc)
      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
      */
-    public int compare(Object o1, Object o2) {
+    public int compare(Session o1, Session o2) {
         int returnValue = comparator.compare(o1, o2);
         return (- returnValue);
     }

==================================================
