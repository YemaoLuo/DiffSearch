fc6a761cbac8f41ba9fe180a4c86fa11fd795d28
==================================================
Refactoring in preparation for Java 9. Refactor to avoid using some methods that will be deprecated in Java 9 onwards.
==================================================
Mark Thomas
==================================================
Tue Apr 11 20:40:36 2017 +0000
==================================================
AstFloatingPoint.java
Refactoring in preparation for Java 9. Refactor to avoid using some methods that will be deprecated in Java 9 onwards.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791027 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstInteger.java
index 986910ece6..9316ec3a03 100644
--- a/java/org/apache/el/parser/AstFloatingPoint.java
+++ b/java/org/apache/el/parser/AstFloatingPoint.java
@@ -38,7 +38,7 @@ public final class AstFloatingPoint extends SimpleNode {
     public Number getFloatingPoint() {
         if (this.number == null) {
             try {
-                this.number = new Double(this.image);
+                this.number = Double.valueOf(this.image);
             } catch (ArithmeticException e0) {
                 this.number = new BigDecimal(this.image);
             }

==================================================
AstNegative.java
index 186d5b8b7c..5b0a3774f4 100644
--- a/java/org/apache/el/parser/AstInteger.java
+++ b/java/org/apache/el/parser/AstInteger.java
@@ -38,7 +38,7 @@ public final class AstInteger extends SimpleNode {
     protected Number getInteger() {
         if (this.number == null) {
             try {
-                this.number = new Long(this.image);
+                this.number = Long.valueOf(this.image);
             } catch (ArithmeticException e1) {
                 this.number = new BigInteger(this.image);
             }

==================================================
GenericNamingResourcesFactory.java
index 34219e74f2..28164a2d83 100644
--- a/java/org/apache/el/parser/AstNegative.java
+++ b/java/org/apache/el/parser/AstNegative.java
@@ -56,7 +56,7 @@ public final class AstNegative extends SimpleNode {
         }
         if (obj instanceof String) {
             if (isStringFloat((String) obj)) {
-                return new Double(-Double.parseDouble((String) obj));
+                return Double.valueOf(-Double.parseDouble((String) obj));
             }
             return Long.valueOf(-Long.parseLong((String) obj));
         }
@@ -64,13 +64,13 @@ public final class AstNegative extends SimpleNode {
             return Long.valueOf(-((Long) obj).longValue());
         }
         if (obj instanceof Double) {
-            return new Double(-((Double) obj).doubleValue());
+            return Double.valueOf(-((Double) obj).doubleValue());
         }
         if (obj instanceof Integer) {
             return Integer.valueOf(-((Integer) obj).intValue());
         }
         if (obj instanceof Float) {
-            return new Float(-((Float) obj).floatValue());
+            return Float.valueOf(-((Float) obj).floatValue());
         }
         if (obj instanceof Short) {
             return Short.valueOf((short) -((Short) obj).shortValue());

==================================================
TestArrayELResolver.java
index 970422fc61..38329d2f88 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
@@ -120,7 +120,7 @@ public class GenericNamingResourcesFactory implements ObjectFactory {
                     if ("java.lang.Integer".equals(paramType.getName())
                             || "int".equals(paramType.getName())) {
                         try {
-                            params[0] = new Integer(value);
+                            params[0] = Integer.valueOf(value);
                         } catch (NumberFormatException ex) {
                             ok = false;
                         }
@@ -128,7 +128,7 @@ public class GenericNamingResourcesFactory implements ObjectFactory {
                     }else if ("java.lang.Long".equals(paramType.getName())
                                 || "long".equals(paramType.getName())) {
                             try {
-                                params[0] = new Long(value);
+                                params[0] = Long.valueOf(value);
                             } catch (NumberFormatException ex) {
                                 ok = false;
                             }

==================================================
TestBeanELResolver.java
index 38c66b47f0..ccad23ec87 100644
--- a/test/javax/el/TestArrayELResolver.java
+++ b/test/javax/el/TestArrayELResolver.java
@@ -49,7 +49,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        Class<?> result = resolver.getType(context, base, new Integer(0));
+        Class<?> result = resolver.getType(context, base, Integer.valueOf(0));
 
         Assert.assertEquals(base.getClass().getComponentType(), result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -65,7 +65,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        resolver.getType(context, base, new Integer(1));
+        resolver.getType(context, base, Integer.valueOf(1));
     }
 
     /**
@@ -112,7 +112,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        Object result = resolver.getValue(context, base, new Integer(0));
+        Object result = resolver.getValue(context, base, Integer.valueOf(0));
 
         Assert.assertEquals("element", result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -141,12 +141,12 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        Object result = resolver.getValue(context, base, new Integer(1));
+        Object result = resolver.getValue(context, base, Integer.valueOf(1));
 
         Assert.assertNull(result);
         Assert.assertTrue(context.isPropertyResolved());
 
-        result = resolver.getValue(context, base, new Integer(-1));
+        result = resolver.getValue(context, base, Integer.valueOf(-1));
 
         Assert.assertNull(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -192,16 +192,16 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        resolver.setValue(context, base, new Integer(0), "new-element");
+        resolver.setValue(context, base, Integer.valueOf(0), "new-element");
 
         Assert.assertEquals("new-element",
-                resolver.getValue(context, base, new Integer(0)));
+                resolver.getValue(context, base, Integer.valueOf(0)));
         Assert.assertTrue(context.isPropertyResolved());
 
-        resolver.setValue(context, base, new Integer(0), null);
+        resolver.setValue(context, base, Integer.valueOf(0), null);
 
         Assert.assertEquals(null,
-                resolver.getValue(context, base, new Integer(0)));
+                resolver.getValue(context, base, Integer.valueOf(0)));
         Assert.assertTrue(context.isPropertyResolved());
     }
 
@@ -228,7 +228,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        resolver.setValue(context, base, new Integer(1), "new-element");
+        resolver.setValue(context, base, Integer.valueOf(1), "new-element");
     }
 
     /**
@@ -242,7 +242,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        resolver.setValue(context, base, new Integer(0), new Integer(1));
+        resolver.setValue(context, base, Integer.valueOf(0), Integer.valueOf(1));
     }
 
     /**
@@ -256,7 +256,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         int[] base = new int[] { 1, 2, 3 };
-        resolver.setValue(context, base, new Integer(1), Integer.valueOf(4));
+        resolver.setValue(context, base, Integer.valueOf(1), Integer.valueOf(4));
 
         Assert.assertEquals(Integer.valueOf(base[1]), Integer.valueOf(4));
     }
@@ -304,14 +304,14 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        boolean result = resolver.isReadOnly(context, base, new Integer(0));
+        boolean result = resolver.isReadOnly(context, base, Integer.valueOf(0));
 
         Assert.assertFalse(result);
         Assert.assertTrue(context.isPropertyResolved());
 
         resolver = new ArrayELResolver(true);
 
-        result = resolver.isReadOnly(context, base, new Integer(0));
+        result = resolver.isReadOnly(context, base, Integer.valueOf(0));
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -327,7 +327,7 @@ public class TestArrayELResolver {
                 ELManager.getExpressionFactory());
 
         String[] base = new String[] { "element" };
-        resolver.isReadOnly(context, base, new Integer(1));
+        resolver.isReadOnly(context, base, Integer.valueOf(1));
     }
 
     /**

==================================================
TestListELResolver.java
index 0cc9bbda7a..24a53df22e 100644
--- a/test/javax/el/TestBeanELResolver.java
+++ b/test/javax/el/TestBeanELResolver.java
@@ -331,7 +331,7 @@ public class TestBeanELResolver {
         BeanELResolver resolver = new BeanELResolver();
         ELContext context = new StandardELContext(ELManager.getExpressionFactory());
 
-        resolver.isReadOnly(context, new TesterBean(BEAN_NAME), new Integer(0));
+        resolver.isReadOnly(context, new TesterBean(BEAN_NAME), Integer.valueOf(0));
     }
 
     /**

==================================================
TestSendFile.java
index d31710047b..cb9d57452b 100644
--- a/test/javax/el/TestListELResolver.java
+++ b/test/javax/el/TestListELResolver.java
@@ -54,7 +54,7 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        Object result = resolver.getValue(context, list, new Integer(0));
+        Object result = resolver.getValue(context, list, Integer.valueOf(0));
 
         Assert.assertEquals("key", result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -85,12 +85,12 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        Object result = resolver.getValue(context, list, new Integer(1));
+        Object result = resolver.getValue(context, list, Integer.valueOf(1));
 
         Assert.assertNull(result);
         Assert.assertTrue(context.isPropertyResolved());
 
-        result = resolver.getValue(context, list, new Integer(-1));
+        result = resolver.getValue(context, list, Integer.valueOf(-1));
 
         Assert.assertNull(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -125,7 +125,7 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        Class<?> result = resolver.getType(context, list, new Integer(0));
+        Class<?> result = resolver.getType(context, list, Integer.valueOf(0));
 
         Assert.assertEquals(Object.class, result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -142,7 +142,7 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        resolver.getType(context, list, new Integer(1));
+        resolver.getType(context, list, Integer.valueOf(1));
     }
 
     /**
@@ -187,10 +187,10 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("value");
-        resolver.setValue(context, list, new Integer(0), "value");
+        resolver.setValue(context, list, Integer.valueOf(0), "value");
 
         Assert.assertEquals("value",
-                resolver.getValue(context, list, new Integer(0)));
+                resolver.getValue(context, list, Integer.valueOf(0)));
         Assert.assertTrue(context.isPropertyResolved());
     }
 
@@ -204,7 +204,7 @@ public class TestListELResolver {
                 ELManager.getExpressionFactory());
 
         List<Object> list = Collections.unmodifiableList(new ArrayList<>());
-        resolver.setValue(context, list, new Integer(0), "value");
+        resolver.setValue(context, list, Integer.valueOf(0), "value");
     }
 
     /**
@@ -232,7 +232,7 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        resolver.setValue(context, list, new Integer(1), "value");
+        resolver.setValue(context, list, Integer.valueOf(1), "value");
     }
 
     /**
@@ -279,14 +279,14 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        boolean result = resolver.isReadOnly(context, list, new Integer(0));
+        boolean result = resolver.isReadOnly(context, list, Integer.valueOf(0));
 
         Assert.assertFalse(result);
         Assert.assertTrue(context.isPropertyResolved());
 
         resolver = new ListELResolver(true);
 
-        result = resolver.isReadOnly(context, list, new Integer(0));
+        result = resolver.isReadOnly(context, list, Integer.valueOf(0));
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -305,7 +305,7 @@ public class TestListELResolver {
         list.add("key");
         List<String> unmodifiableList = Collections.unmodifiableList(list);
         boolean result = resolver.isReadOnly(context, unmodifiableList,
-                new Integer(0));
+                Integer.valueOf(0));
 
         Assert.assertTrue(result);
         Assert.assertTrue(context.isPropertyResolved());
@@ -322,7 +322,7 @@ public class TestListELResolver {
 
         List<String> list = new ArrayList<>();
         list.add("key");
-        resolver.isReadOnly(context, list, new Integer(1));
+        resolver.isReadOnly(context, list, Integer.valueOf(1));
     }
 
     /**

==================================================
IntrospectionUtils.java
index 7844babb5b..ec3ea99873 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -133,8 +133,8 @@ public class TestSendFile extends TomcatBaseTest {
             resp.setContentLengthLong(f.length());
             if (Boolean.TRUE.equals(req.getAttribute(Globals.SENDFILE_SUPPORTED_ATTR))) {
                 req.setAttribute(Globals.SENDFILE_FILENAME_ATTR, f.getAbsolutePath());
-                req.setAttribute(Globals.SENDFILE_FILE_START_ATTR, new Long(0));
-                req.setAttribute(Globals.SENDFILE_FILE_END_ATTR, new Long(f.length()));
+                req.setAttribute(Globals.SENDFILE_FILE_START_ATTR, Long.valueOf(0));
+                req.setAttribute(Globals.SENDFILE_FILE_END_ATTR, Long.valueOf(f.length()));
             } else {
                 byte[] c = new byte[8192];
                 try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(f))) {
@@ -203,8 +203,8 @@ public class TestSendFile extends TomcatBaseTest {
                 resp.setCharacterEncoding("ISO-8859-1");
                 resp.setContentLengthLong(file.length());
                 req.setAttribute(Globals.SENDFILE_FILENAME_ATTR, file.getAbsolutePath());
-                req.setAttribute(Globals.SENDFILE_FILE_START_ATTR, new Long(0));
-                req.setAttribute(Globals.SENDFILE_FILE_END_ATTR, new Long(file.length()));
+                req.setAttribute(Globals.SENDFILE_FILE_START_ATTR, Long.valueOf(0));
+                req.setAttribute(Globals.SENDFILE_FILE_END_ATTR, Long.valueOf(file.length()));
                 file.delete();
             } else {
                 byte[] c = new byte[1024];

==================================================
