cf1d6de7fe657843089b015090052b931734cf11
==================================================
Use new processSocketAsync() method to align actionInternal code across all three AJP processors
==================================================
Mark Emlyn
==================================================
Tue Sep 3 10:11:15 2013 +0000
==================================================
AjpAprProcessor.java
Use new processSocketAsync() method to align actionInternal code across all three AJP processors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519632 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProcessor.java
index 415129deb6..188b247dbc 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -86,14 +86,12 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
             socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
-                ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
-                        SocketStatus.OPEN_READ);
+                endpoint.processSocketAsync(socketWrapper, SocketStatus.OPEN_READ);
             }
 
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
-                ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
-                        SocketStatus.OPEN_READ);
+                endpoint.processSocketAsync(socketWrapper, SocketStatus.OPEN_READ);
             }
         }
     }

==================================================
AjpProcessor.java
index 08ddb88294..874a328677 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -70,14 +70,12 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
             socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
-                ((NioEndpoint)endpoint).dispatchForEvent(
-                        socketWrapper.getSocket(), SocketStatus.OPEN_READ, true);
+                endpoint.processSocketAsync(socketWrapper, SocketStatus.OPEN_READ);
             }
 
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
-                ((NioEndpoint)endpoint).dispatchForEvent(
-                        socketWrapper.getSocket(), SocketStatus.OPEN_READ, true);
+                endpoint.processSocketAsync(socketWrapper, SocketStatus.OPEN_READ);
             }
         }
     }

==================================================
