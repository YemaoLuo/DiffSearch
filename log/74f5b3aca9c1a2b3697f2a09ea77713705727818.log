74f5b3aca9c1a2b3697f2a09ea77713705727818
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54448
==================================================
Mark Emlyn
==================================================
Wed Jan 23 10:09:03 2013 +0000
==================================================
NamingResources.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54448
Correctly handle @Resource annotations on primitives.
Includes test case.
Patch provided by Violeta Georgieva.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1437317 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebAnnotationSet.java
index b48a85a58f..002deaec98 100644
--- a/java/org/apache/catalina/deploy/NamingResources.java
+++ b/java/org/apache/catalina/deploy/NamingResources.java
@@ -1177,7 +1177,7 @@ public class NamingResources extends LifecycleMBeanBase implements Serializable
                 // No match - ignore this injection target
                 continue;
             }
-            targetType = convertPrimitiveType(targetType);
+            targetType = Introspection.convertPrimitiveType(targetType);
 
             if (typeClass == null) {
                 // Need to find a common type amongst the injection targets
@@ -1230,26 +1230,4 @@ public class NamingResources extends LifecycleMBeanBase implements Serializable
         }
         return null;
     }
-
-    private Class<?> convertPrimitiveType(Class<?> clazz) {
-        if (clazz.equals(char.class)) {
-            return Character.class;
-        } else if (clazz.equals(int.class)) {
-            return Integer.class;
-        } else if (clazz.equals(boolean.class)) {
-            return Boolean.class;
-        } else if (clazz.equals(double.class)) {
-            return Double.class;
-        } else if (clazz.equals(byte.class)) {
-            return Byte.class;
-        } else if (clazz.equals(short.class)) {
-            return Short.class;
-        } else if (clazz.equals(long.class)) {
-            return Long.class;
-        } else if (clazz.equals(float.class)) {
-            return Float.class;
-        } else {
-            return clazz;
-        }
-    }
 }

==================================================
Introspection.java
index 3ad7997f3d..85b8bad38c 100644
--- a/java/org/apache/catalina/startup/WebAnnotationSet.java
+++ b/java/org/apache/catalina/startup/WebAnnotationSet.java
@@ -265,7 +265,7 @@ public class WebAnnotationSet {
                     Resource annotation = field.getAnnotation(Resource.class);
                     String defaultName =
                             classClass.getName() + SEPARATOR + field.getName();
-                    String defaultType = field.getType().getCanonicalName();
+                    Class<?> defaultType = field.getType();
                     addResource(context, annotation, defaultName, defaultType);
                 }
             }
@@ -290,8 +290,8 @@ public class WebAnnotationSet {
                     String defaultName = classClass.getName() + SEPARATOR +
                             Introspection.getPropertyName(method);
 
-                    String defaultType =
-                            (method.getParameterTypes()[0]).getCanonicalName();
+                    Class<?> defaultType =
+                            (method.getParameterTypes()[0]);
                     addResource(context, annotation, defaultName, defaultType);
                 }
             }
@@ -309,7 +309,7 @@ public class WebAnnotationSet {
     }
 
     protected static void addResource(Context context, Resource annotation,
-            String defaultName, String defaultType) {
+            String defaultName, Class<?> defaultType) {
         String name = getName(annotation, defaultName);
         String type = getType(annotation, defaultType);
 
@@ -412,14 +412,14 @@ public class WebAnnotationSet {
     }
 
 
-    private static String getType(Resource annotation, String defaultType) {
-        String type = annotation.type().getCanonicalName();
-        if (type == null || type.equals("java.lang.Object")) {
+    private static String getType(Resource annotation, Class<?> defaultType) {
+        Class<?> type = annotation.type();
+        if (type == null || type.equals(Object.class)) {
             if (defaultType != null) {
                 type = defaultType;
             }
         }
-        return type;
+        return Introspection.convertPrimitiveType(type).getCanonicalName();
     }
 
 

==================================================
TestContextConfig.java
index 4302b59193..4167c28586 100644
--- a/java/org/apache/catalina/util/Introspection.java
+++ b/java/org/apache/catalina/util/Introspection.java
@@ -153,4 +153,34 @@ public class Introspection {
         }
         return clazz;
     }
+
+    /**
+     * Converts the primitive type to its corresponding wrapper.
+     *
+     * @param clazz
+     *            Class that will be evaluated
+     * @return if the parameter is a primitive type returns its wrapper;
+     *         otherwise returns the same class
+     */
+    public static Class<?> convertPrimitiveType(Class<?> clazz) {
+        if (clazz.equals(char.class)) {
+            return Character.class;
+        } else if (clazz.equals(int.class)) {
+            return Integer.class;
+        } else if (clazz.equals(boolean.class)) {
+            return Boolean.class;
+        } else if (clazz.equals(double.class)) {
+            return Double.class;
+        } else if (clazz.equals(byte.class)) {
+            return Byte.class;
+        } else if (clazz.equals(short.class)) {
+            return Short.class;
+        } else if (clazz.equals(long.class)) {
+            return Long.class;
+        } else if (clazz.equals(float.class)) {
+            return Float.class;
+        } else {
+            return clazz;
+        }
+    }
 }

==================================================
TesterServletWithAnnotations.java
index 45a7ef6c8d..72566dfd2d 100644
--- a/test/org/apache/catalina/startup/TestContextConfig.java
+++ b/test/org/apache/catalina/startup/TestContextConfig.java
@@ -126,6 +126,25 @@ public class TestContextConfig extends TomcatBaseTest {
         assertPageContains("/test/testServlet", "postConstruct1()");
     }
 
+    @Test
+    public void testBug54448() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp-3.0-fragments");
+        Context context = tomcat.addWebapp(null, "/test",
+                appDir.getAbsolutePath());
+
+        Tomcat.addServlet(context, "TestServlet",
+                "org.apache.catalina.startup.TesterServletWithAnnotations");
+        context.addServletMapping("/testServlet", "TestServlet");
+
+        tomcat.enableNaming();
+
+        tomcat.start();
+
+        assertPageContains("/test/testServlet", "envEntry: 1");
+    }
+
     private static class CustomDefaultServletSCI
             implements ServletContainerInitializer {
 

==================================================
