9742404df225aff2708f90346007ebbe471f432e
==================================================
Add option to converter so client can indicate no more input is available
==================================================
Mark Emlyn
==================================================
Thu Feb 28 23:30:14 2013 +0000
==================================================
B2CConverter.java
Add option to converter so client can indicate no more input is available
Add some more tests for BZ54602
TODO: Review the use of the now deprecated code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1451434 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestB2CConverter.java
index c27ef07691..b9f5f8c0c0 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -125,8 +125,22 @@ public class B2CConverter {
      *
      * @param bc byte input
      * @param cc char output
+     *
+     * @deprecated  Use {@link #convert(ByteChunk, CharChunk, boolean)
+     */
+    @Deprecated
+    public void convert(ByteChunk bc, CharChunk cc) throws IOException {
+        convert(bc, cc, false);
+    }
+
+    /**
+     * Convert the given bytes to characters.
+     *
+     * @param bc byte input
+     * @param cc char output
+     * @param endOfInput    Is this all of the available data
      */
-    public void convert(ByteChunk bc, CharChunk cc)
+    public void convert(ByteChunk bc, CharChunk cc, boolean endOfInput)
             throws IOException {
         if ((bb == null) || (bb.array() != bc.getBuffer())) {
             // Create a new byte buffer if anything changed
@@ -153,7 +167,7 @@ public class B2CConverter {
             do {
                 leftovers.put(bc.substractB());
                 leftovers.flip();
-                result = decoder.decode(leftovers, cb, false);
+                result = decoder.decode(leftovers, cb, endOfInput);
                 leftovers.position(leftovers.limit());
                 leftovers.limit(leftovers.array().length);
             } while (result.isUnderflow() && (cb.position() == pos));
@@ -165,7 +179,7 @@ public class B2CConverter {
         }
         // Do the decoding and get the results into the byte chunk and the char
         // chunk
-        result = decoder.decode(bb, cb, false);
+        result = decoder.decode(bb, cb, endOfInput);
         if (result.isError() || result.isMalformed()) {
             result.throwException();
         } else if (result.isOverflow()) {

==================================================
