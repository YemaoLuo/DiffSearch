23473a3d3ef138770aaaeca3660d9deee6ff9fb2
==================================================
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
==================================================
Mark Emlyn
==================================================
Mon Dec 6 15:43:52 2010 +0000
==================================================
AbstractProtocolHandler.java
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
Pull up more getters/setters.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1042681 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 0b361bbaf5..c3484c6ac3 100644
--- a/java/org/apache/coyote/AbstractProtocolHandler.java
+++ b/java/org/apache/coyote/AbstractProtocolHandler.java
@@ -16,6 +16,7 @@
  */
 package org.apache.coyote;
 
+import java.net.InetAddress;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.concurrent.Executor;
@@ -145,6 +146,19 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
     public Adapter getAdapter() { return adapter; }
 
 
+    /**
+     * The maximum number of idle processors that will be retained in the cache
+     * and re-used with a subsequent request. The default is -1, unlimited,
+     * although in that case there will never be more Processor objects than
+     * there are threads in the associated thread pool.
+     */
+    protected int processorCache = -1;
+    public int getProcessorCache() { return this.processorCache; }
+    public void setProcessorCache(int processorCache) {
+        this.processorCache = processorCache;
+    }
+
+
     // ---------------------- Properties that are passed through to the EndPoint
 
     @Override
@@ -190,11 +204,16 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
     public void setSoLinger(int soLinger) { endpoint.setSoLinger(soLinger); }
 
 
-    // ------------------------ Properties that are made available as attributes
-    // -------------------------------------(and passed through to the EndPoint)
+    // ---------------------- Properties that are passed through to the EndPoint
+    // ------------------------------------ and are made available as attributes
+
+    public InetAddress getAddress() { return endpoint.getAddress(); }
+    public void setAddress(InetAddress ia) {
+        endpoint.setAddress( ia );
+        setAttribute("address", "" + ia);
+    }
+
 
-    
-    
     // -------------------------------------------------------- Abstract methods
     /**
      * Concrete implementations need to provide access to their logger to be

==================================================
AbstractHttp11Protocol.java
index 0eb07fd2e8..a5e212e01c 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -16,7 +16,6 @@
  */
 package org.apache.coyote.ajp;
 
-import java.net.InetAddress;
 import java.net.URLEncoder;
 
 import javax.management.MBeanServer;
@@ -91,17 +90,6 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
         return ("ajp-" + encodedAddr + endpoint.getPort());
     }
 
-    /**
-     * Processor cache.
-     */
-    protected int processorCache = -1;
-    public int getProcessorCache() { return this.processorCache; }
-    public void setProcessorCache(int processorCache) { this.processorCache = processorCache; }
-
-
-    public InetAddress getAddress() { return endpoint.getAddress(); }
-    public void setAddress(InetAddress ia) { endpoint.setAddress(ia); }
-
     public int getSoTimeout() { return endpoint.getSoTimeout(); }
     public void setSoTimeout(int soTimeout) { endpoint.setSoTimeout(soTimeout); }
 

==================================================
