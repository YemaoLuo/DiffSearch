36ec4ee3869a6a696c6d2291e479278709448248
==================================================
Pull up release()
==================================================
Mark Thomas
==================================================
Thu May 28 09:42:13 2015 +0000
==================================================
AbstractAjpProtocol.java
Pull up release()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682189 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 7758502158..20ecf117a6 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -21,6 +21,7 @@ import java.nio.ByteBuffer;
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProtocol;
+import org.apache.coyote.Processor;
 import org.apache.coyote.UpgradeProtocol;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SSLHostConfig;
@@ -174,5 +175,17 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
             // TODO should fail - throw IOE
             return null;
         }
+
+
+
+        @Override
+        public void release(SocketWrapperBase<S> socket,
+                Processor processor, boolean addToPoller) {
+            processor.recycle();
+            recycledProcessors.push(processor);
+            if (addToPoller) {
+                socket.registerReadInterest();
+            }
+        }
     }
 }

==================================================
AjpNio2Protocol.java
index b8978565f2..96093c70a5 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -16,11 +16,9 @@
  */
 package org.apache.coyote.ajp;
 
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AprEndpoint;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
 /**
@@ -83,15 +81,5 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
         protected Log getLog() {
             return log;
         }
-
-        @Override
-        public void release(SocketWrapperBase<Long> socket,
-                Processor processor, boolean addToPoller) {
-            processor.recycle();
-            recycledProcessors.push(processor);
-            if (addToPoller) {
-                socket.registerReadInterest();
-            }
-        }
     }
 }

==================================================
AjpNioProtocol.java
index 9423d81a82..6a1093b4b1 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -64,11 +64,13 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
             super(proto);
         }
 
+
         @Override
         protected Log getLog() {
             return log;
         }
 
+
         /**
          * Expected to be used by the Poller to release resources on socket
          * close, errors etc.
@@ -82,15 +84,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
             }
         }
 
-        @Override
-        public void release(SocketWrapperBase<Nio2Channel> socket,
-                Processor processor, boolean addToPoller) {
-            processor.recycle();
-            recycledProcessors.push(processor);
-            if (addToPoller) {
-                socket.registerReadInterest();
-            }
-        }
 
         @Override
         public void closeAll() {

==================================================
