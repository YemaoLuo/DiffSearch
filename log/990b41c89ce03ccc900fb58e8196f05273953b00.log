990b41c89ce03ccc900fb58e8196f05273953b00
==================================================
Refactor MessageBytes make conversions consistent with most recent set
==================================================
Mark Thomas
==================================================
Thu Sep 1 14:05:20 2022 +0100
==================================================
ApplicationContext.java
Refactor MessageBytes make conversions consistent with most recent set

This is preparation for fixing BZ 66196
https://bz.apache.org/bugzilla/show_bug.cgi?id=66196



==================================================
Mapper.java
index 010d738cea..5cd5ad23a1 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -438,6 +438,7 @@ public class ApplicationContext implements ServletContext {
 
         try {
             // Map the URI
+            uriMB.setChars(MessageBytes.EMPTY_CHAR_ARRAY, 0, 0);
             CharChunk uriCC = uriMB.getCharChunk();
             try {
                 uriCC.append(context.getPath());

==================================================
RewriteValve.java
index f51a69cd97..62d4023eb8 100644
--- a/java/org/apache/catalina/mapper/Mapper.java
+++ b/java/org/apache/catalina/mapper/Mapper.java
@@ -695,6 +695,7 @@ public final class Mapper {
             if (defaultHostName == null) {
                 return;
             }
+            host.setChars(MessageBytes.EMPTY_CHAR_ARRAY, 0, 0);
             host.getCharChunk().append(defaultHostName);
         }
         host.toChars();

==================================================
MessageBytes.java
index 07f718df26..e1589f801a 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -492,49 +492,39 @@ public class RewriteValve extends ValveBase {
                         contextPath = request.getContextPath();
                     }
                     // Populated the encoded (i.e. undecoded) requestURI
-                    request.getCoyoteRequest().requestURI().setString(null);
+                    request.getCoyoteRequest().requestURI().setChars(MessageBytes.EMPTY_CHAR_ARRAY, 0, 0);
                     CharChunk chunk = request.getCoyoteRequest().requestURI().getCharChunk();
-                    chunk.recycle();
                     if (context) {
                         // This is neither decoded nor normalized
                         chunk.append(contextPath);
                     }
                     chunk.append(URLEncoder.DEFAULT.encode(urlStringDecoded, uriCharset));
-                    request.getCoyoteRequest().requestURI().toChars();
                     // Decoded and normalized URI
                     // Rewriting may have denormalized the URL
                     urlStringDecoded = RequestUtil.normalize(urlStringDecoded);
-                    request.getCoyoteRequest().decodedURI().setString(null);
+                    request.getCoyoteRequest().decodedURI().setChars(MessageBytes.EMPTY_CHAR_ARRAY, 0, 0);
                     chunk = request.getCoyoteRequest().decodedURI().getCharChunk();
-                    chunk.recycle();
                     if (context) {
                         // This is decoded and normalized
                         chunk.append(request.getServletContext().getContextPath());
                     }
                     chunk.append(urlStringDecoded);
-                    request.getCoyoteRequest().decodedURI().toChars();
                     // Set the new Query if there is one
                     if (queryStringDecoded != null) {
-                        request.getCoyoteRequest().queryString().setString(null);
+                        request.getCoyoteRequest().queryString().setChars(MessageBytes.EMPTY_CHAR_ARRAY, 0, 0);
                         chunk = request.getCoyoteRequest().queryString().getCharChunk();
-                        chunk.recycle();
                         chunk.append(URLEncoder.QUERY.encode(queryStringDecoded, uriCharset));
                         if (qsa && originalQueryStringEncoded != null &&
                                 originalQueryStringEncoded.length() > 0) {
                             chunk.append('&');
                             chunk.append(originalQueryStringEncoded);
                         }
-                        if (!chunk.isNull()) {
-                            request.getCoyoteRequest().queryString().toChars();
-                        }
                     }
                     // Set the new host if it changed
                     if (!host.equals(request.getServerName())) {
-                        request.getCoyoteRequest().serverName().setString(null);
+                        request.getCoyoteRequest().serverName().setChars(MessageBytes.EMPTY_CHAR_ARRAY, 0, 0);
                         chunk = request.getCoyoteRequest().serverName().getCharChunk();
-                        chunk.recycle();
                         chunk.append(host.toString());
-                        request.getCoyoteRequest().serverName().toChars();
                     }
                     request.getMappingData().recycle();
                     // Reinvoke the whole request recursively

==================================================
TestMessageBytesConversion.java
index 64e87d0548..d1d675fd02 100644
--- a/java/org/apache/tomcat/util/buf/MessageBytes.java
+++ b/java/org/apache/tomcat/util/buf/MessageBytes.java
@@ -51,6 +51,8 @@ public final class MessageBytes implements Cloneable, Serializable {
         was a char[] */
     public static final int T_CHARS = 3;
 
+    public static final char[] EMPTY_CHAR_ARRAY = new char[0];
+
     private int hashCode=0;
     // did we compute the hashcode ?
     private boolean hasHashCode=false;
@@ -61,9 +63,6 @@ public final class MessageBytes implements Cloneable, Serializable {
 
     // String
     private String strValue;
-    // true if a String value was computed. Probably not needed,
-    // strValue!=null is the same
-    private boolean hasStrValue=false;
 
     /**
      * Creates a new, uninitialized MessageBytes object.
@@ -87,7 +86,7 @@ public final class MessageBytes implements Cloneable, Serializable {
     }
 
     public boolean isNull() {
-        return byteC.isNull() && charC.isNull() && !hasStrValue;
+        return type == T_NULL;
     }
 
     /**
@@ -100,7 +99,6 @@ public final class MessageBytes implements Cloneable, Serializable {
 
         strValue=null;
 
-        hasStrValue=false;
         hasHashCode=false;
         hasLongValue=false;
     }
@@ -116,7 +114,6 @@ public final class MessageBytes implements Cloneable, Serializable {
     public void setBytes(byte[] b, int off, int len) {
         byteC.setBytes( b, off, len );
         type=T_BYTES;
-        hasStrValue=false;
         hasHashCode=false;
         hasLongValue=false;
     }
@@ -131,7 +128,6 @@ public final class MessageBytes implements Cloneable, Serializable {
     public void setChars( char[] c, int off, int len ) {
         charC.setChars( c, off, len );
         type=T_CHARS;
-        hasStrValue=false;
         hasHashCode=false;
         hasLongValue=false;
     }
@@ -141,15 +137,13 @@ public final class MessageBytes implements Cloneable, Serializable {
      * @param s The string
      */
     public void setString( String s ) {
-        strValue=s;
-        hasHashCode=false;
-        hasLongValue=false;
+        strValue = s;
+        hasHashCode = false;
+        hasLongValue = false;
         if (s == null) {
-            hasStrValue=false;
-            type=T_NULL;
+            type = T_NULL;
         } else {
-            hasStrValue=true;
-            type=T_STR;
+            type = T_STR;
         }
     }
 
@@ -161,21 +155,22 @@ public final class MessageBytes implements Cloneable, Serializable {
      */
     @Override
     public String toString() {
-        if (hasStrValue) {
-            return strValue;
-        }
-
         switch (type) {
-        case T_CHARS:
-            strValue = charC.toString();
-            hasStrValue = true;
-            return strValue;
-        case T_BYTES:
-            strValue = byteC.toString();
-            hasStrValue = true;
-            return strValue;
+            case T_NULL:
+            case T_STR:
+                // No conversion required
+                break;
+            case T_BYTES:
+                type = T_STR;
+                strValue = byteC.toString();
+                break;
+            case T_CHARS:
+                type = T_STR;
+                strValue = charC.toString();
+                break;
         }
-        return null;
+
+        return strValue;
     }
 
     //----------------------------------------
@@ -232,21 +227,26 @@ public final class MessageBytes implements Cloneable, Serializable {
 
 
     /**
-     * Do a char-&gt;byte conversion.
+     * Convert to bytes and fill the ByteChunk with the converted value.
      */
     public void toBytes() {
-        if (isNull()) {
-            return;
-        }
-        if (!byteC.isNull()) {
-            type = T_BYTES;
-            return;
+        switch (type) {
+            case T_NULL:
+                byteC.recycle();
+                //$FALL-THROUGH$
+            case T_BYTES:
+                // No conversion required
+                return;
+            case T_CHARS:
+                toString();
+                //$FALL-THROUGH$
+            case T_STR: {
+                type = T_BYTES;
+                Charset charset = byteC.getCharset();
+                ByteBuffer result = charset.encode(strValue);
+                byteC.setBytes(result.array(), result.arrayOffset(), result.limit());
+            }
         }
-        toString();
-        type = T_BYTES;
-        Charset charset = byteC.getCharset();
-        ByteBuffer result = charset.encode(strValue);
-        byteC.setBytes(result.array(), result.arrayOffset(), result.limit());
     }
 
 
@@ -255,18 +255,22 @@ public final class MessageBytes implements Cloneable, Serializable {
      * XXX Not optimized - it converts to String first.
      */
     public void toChars() {
-        if (isNull()) {
-            return;
-        }
-        if (!charC.isNull()) {
-            type = T_CHARS;
-            return;
+        switch (type) {
+            case T_NULL:
+                charC.recycle();
+                //$FALL-THROUGH$
+            case T_CHARS:
+                // No conversion required
+                return;
+            case T_BYTES:
+                toString();
+                //$FALL-THROUGH$
+            case T_STR: {
+                type = T_CHARS;
+                char cc[] = strValue.toCharArray();
+                charC.setChars(cc, 0, cc.length);
+            }
         }
-        // inefficient
-        toString();
-        type = T_CHARS;
-        char cc[] = strValue.toCharArray();
-        charC.setChars(cc, 0, cc.length);
     }
 
 
@@ -535,7 +539,6 @@ public final class MessageBytes implements Cloneable, Serializable {
             end--;
         }
         longValue=l;
-        hasStrValue=false;
         hasHashCode=false;
         hasLongValue=true;
         type=T_BYTES;

==================================================
