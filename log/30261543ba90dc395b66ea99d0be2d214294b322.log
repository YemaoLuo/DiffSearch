30261543ba90dc395b66ea99d0be2d214294b322
==================================================
o.a.c.realm generics changes
==================================================
Mark Emlyn
==================================================
Fri Dec 26 19:55:01 2008 +0000
==================================================
DataSourceRealm.java
o.a.c.realm generics changes
Also fix some eclipse warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729529 13f79535-47bb-0310-9956-ffa450edef68



==================================================
GenericPrincipal.java
index 5bc660b3fc..9288ff7659 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -505,7 +505,7 @@ public class DataSourceRealm
      * Return the roles associated with the given user name.
      * @param username Username for which roles should be retrieved
      */
-    protected ArrayList getRoles(String username) {
+    protected ArrayList<String> getRoles(String username) {
 
         Connection dbConnection = null;
 

==================================================
JAASMemoryLoginModule.java
index ea64e3673d..bfc8ae2ef4 100644
--- a/java/org/apache/catalina/realm/GenericPrincipal.java
+++ b/java/org/apache/catalina/realm/GenericPrincipal.java
@@ -91,7 +91,7 @@ public class GenericPrincipal implements Principal {
         this.userPrincipal = userPrincipal;
         if (roles != null) {
             this.roles = new String[roles.size()];
-            this.roles = (String[]) roles.toArray(this.roles);
+            this.roles = roles.toArray(this.roles);
             if (this.roles.length > 0)
                 Arrays.sort(this.roles);
         }

==================================================
JAASRealm.java
index 0e0833e8b1..75045b625f 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -38,7 +38,6 @@ import javax.security.auth.login.LoginException;
 import javax.security.auth.spi.LoginModule;
 
 import org.apache.catalina.Context;
-import org.apache.catalina.Realm;
 import org.apache.catalina.authenticator.Constants;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.deploy.SecurityConstraint;
@@ -78,7 +77,7 @@ import org.apache.tomcat.util.digester.Digester;
  * @version $Revision$ $Date$
  */
 
-public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule, Realm {
+public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
     // We need to extend MemoryRealm to avoid class cast
 
     private static Log log = LogFactory.getLog(JAASMemoryLoginModule.class);

==================================================
JDBCRealm.java
index a8714b929f..1f001eedf4 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -273,7 +273,7 @@ public class JAASRealm
          for (int i=0; i<classNames.length; i++) {
              if (classNames[i].length()==0) continue;        
              try {
-                 Class principalClass = Class.forName(classNames[i], false,
+                 Class<?> principalClass = Class.forName(classNames[i], false,
                          loader);
                  if (Principal.class.isAssignableFrom(principalClass)) {
                      classNamesList.add(classNames[i]);

==================================================
JNDIRealm.java
index 1b4dc7f943..949d0e0e65 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -444,7 +444,7 @@ public class JDBCRealm
         try {
             preparedCredentials.close();
         } catch (Throwable f) {
-            ;
+            // Ignore
         }
         this.preparedCredentials = null;
 
@@ -452,7 +452,7 @@ public class JDBCRealm
         try {
             preparedRoles.close();
         } catch (Throwable f) {
-            ;
+            // Ignore
         }
         this.preparedRoles = null;
 
@@ -686,7 +686,7 @@ public class JDBCRealm
         // Instantiate our database driver if necessary
         if (driver == null) {
             try {
-                Class clazz = Class.forName(driverName);
+                Class<?> clazz = Class.forName(driverName);
                 driver = (Driver) clazz.newInstance();
             } catch (Throwable e) {
                 throw new SQLException(e.getMessage());
@@ -713,7 +713,7 @@ public class JDBCRealm
      */
     protected void release(Connection dbConnection) {
 
-        ; // NO-OP since we are not pooling anything
+        // NO-OP since we are not pooling anything
 
     }
 

==================================================
MemoryRealm.java
index 74bc70a470..5d12539b62 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1294,7 +1294,7 @@ public class JNDIRealm extends RealmBase {
             attrIds = new String[0];
         constraints.setReturningAttributes(attrIds);
 
-        NamingEnumeration results =
+        NamingEnumeration<SearchResult> results =
             context.search(userBase, filter, constraints);
 
 
@@ -1311,7 +1311,7 @@ public class JNDIRealm extends RealmBase {
         }
 
         // Get result for the first entry found
-        SearchResult result = (SearchResult)results.next();
+        SearchResult result = results.next();
 
         // Check no further entries were found
         try {
@@ -1587,12 +1587,13 @@ public class JNDIRealm extends RealmBase {
                                    " with filter expression '" + filter + "'");
             }
             // Searching groups that assign the given group
-            NamingEnumeration results = context.search(roleBase, filter, controls);
+            NamingEnumeration<SearchResult> results =
+                context.search(roleBase, filter, controls);
             if (results != null) {
                 // Iterate over the resulting groups
                 try {
                     while (results.hasMore()) {
-                        SearchResult result = (SearchResult) results.next();
+                        SearchResult result = results.next();
                         Attributes attrs = result.getAttributes();
                         if (attrs == null)
                             continue;
@@ -1645,13 +1646,9 @@ public class JNDIRealm extends RealmBase {
             list.add(commonRole);
 
         if (containerLog.isTraceEnabled()) {
-            if (list != null) {
-                containerLog.trace("  Found " + list.size() + " user internal roles");
-                for (int i=0; i<list.size(); i++)
-                    containerLog.trace(  "  Found user internal role " + list.get(i));
-            } else {
-                containerLog.trace("  Found no user internal roles");
-            }
+            containerLog.trace("  Found " + list.size() + " user internal roles");
+            for (int i=0; i<list.size(); i++)
+                containerLog.trace(  "  Found user internal role " + list.get(i));
         }
 
         // Are we configured to do role searches?
@@ -1668,7 +1665,7 @@ public class JNDIRealm extends RealmBase {
         controls.setReturningAttributes(new String[] {roleName});
 
         // Perform the configured search and process the results
-        NamingEnumeration results =
+        NamingEnumeration<SearchResult> results =
             context.search(roleBase, filter, controls);
         if (results == null)
             return (list);  // Should never happen, but just in case ...
@@ -1676,7 +1673,7 @@ public class JNDIRealm extends RealmBase {
         HashMap<String, String> groupMap = new HashMap<String, String>();
         try {
             while (results.hasMore()) {
-                SearchResult result = (SearchResult) results.next();
+                SearchResult result = results.next();
                 Attributes attrs = result.getAttributes();
                 if (attrs == null)
                     continue;
@@ -1778,7 +1775,7 @@ public class JNDIRealm extends RealmBase {
         Attribute attr = attrs.get(attrId);
         if (attr == null)
             return (values);
-        NamingEnumeration e = attr.getAll();
+        NamingEnumeration<?> e = attr.getAll();
         try {
             while(e.hasMore()) {
                 String value = (String)e.next();
@@ -1969,7 +1966,7 @@ public class JNDIRealm extends RealmBase {
      *
      * @return java.util.Hashtable the configuration for the directory context.
      */
-    protected Hashtable getDirectoryContextEnvironment() {
+    protected Hashtable<String,String> getDirectoryContextEnvironment() {
 
         Hashtable<String,String> env = new Hashtable<String,String>();
 
@@ -2008,7 +2005,7 @@ public class JNDIRealm extends RealmBase {
      */
     protected void release(DirContext context) {
 
-        ; // NO-OP since we are not pooling anything
+        // NO-OP since we are not pooling anything
 
     }
 
@@ -2092,7 +2089,7 @@ public class JNDIRealm extends RealmBase {
                 startingPoint = endParenLoc+1;
                 startParenLoc = userPatternString.indexOf('(', startingPoint);
             }
-            return (String[])pathList.toArray(new String[] {});
+            return pathList.toArray(new String[] {});
         }
         return null;
 

==================================================
MemoryRuleSet.java
index 6974c4a9ed..ca1f70ca24 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -144,8 +144,7 @@ public class MemoryRealm  extends RealmBase {
      */
     public Principal authenticate(String username, String credentials) {
 
-        GenericPrincipal principal =
-            (GenericPrincipal) principals.get(username);
+        GenericPrincipal principal = principals.get(username);
 
         boolean validated = false;
         if (principal != null) {
@@ -238,8 +237,7 @@ public class MemoryRealm  extends RealmBase {
      */
     protected String getPassword(String username) {
 
-        GenericPrincipal principal =
-            (GenericPrincipal) principals.get(username);
+        GenericPrincipal principal = principals.get(username);
         if (principal != null) {
             return (principal.getPassword());
         } else {
@@ -254,7 +252,7 @@ public class MemoryRealm  extends RealmBase {
      */
     protected Principal getPrincipal(String username) {
 
-        return (Principal) principals.get(username);
+        return principals.get(username);
 
     }
 
@@ -263,7 +261,7 @@ public class MemoryRealm  extends RealmBase {
      *
      * @return The principals, keyed by user name (a String)
      */
-    protected Map getPrincipals() {
+    protected Map<String,GenericPrincipal> getPrincipals() {
         return principals;
     }
 

==================================================
RealmBase.java
index 788cefcbbd..35d436e145 100644
--- a/java/org/apache/catalina/realm/MemoryRuleSet.java
+++ b/java/org/apache/catalina/realm/MemoryRuleSet.java
@@ -107,6 +107,7 @@ final class MemoryUserRule extends Rule {
      * Construct a new instance of this <code>Rule</code>.
      */
     public MemoryUserRule() {
+        // No initialisation required
     }
 
 

==================================================
UserDatabaseRealm.java
index 4a0a6c770a..775fd7a42e 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -446,6 +446,7 @@ public abstract class RealmBase
      * throwables will be caught and logged.
      */
     public void backgroundProcess() {
+        // NOOP in base class
     }
 
 
@@ -1332,12 +1333,15 @@ public abstract class RealmBase
     }
 
     public void postRegister(Boolean registrationDone) {
+        // NOOP in base class
     }
 
     public void preDeregister() throws Exception {
+        // NOOP in base class
     }
 
     public void postDeregister() {
+        // NOOP in base class
     }
 
     protected boolean initialized=false;

==================================================
