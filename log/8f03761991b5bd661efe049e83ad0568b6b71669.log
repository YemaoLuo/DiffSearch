8f03761991b5bd661efe049e83ad0568b6b71669
==================================================
Extend access logging to requests rejected in the Processors
==================================================
Mark Emlyn
==================================================
Thu Jun 3 18:13:47 2010 +0000
==================================================
CoyoteAdapter.java
Extend access logging to requests rejected in the Processors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@951093 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Adapter.java
index 4c7547544a..e099dd9e53 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -457,6 +457,41 @@ public class CoyoteAdapter implements Adapter {
     }
 
 
+    public void log(org.apache.coyote.Request req,
+            org.apache.coyote.Response res, long time) {
+
+        Request request = (Request) req.getNote(ADAPTER_NOTES);
+        Response response = (Response) res.getNote(ADAPTER_NOTES);
+
+        if (request == null) {
+
+            // Create objects
+            request = connector.createRequest();
+            request.setCoyoteRequest(req);
+            response = connector.createResponse();
+            response.setCoyoteResponse(res);
+
+            // Link objects
+            request.setResponse(response);
+            response.setRequest(request);
+
+            // Set as notes
+            req.setNote(ADAPTER_NOTES, request);
+            res.setNote(ADAPTER_NOTES, response);
+
+            // Set query string encoding
+            req.getParameters().setQueryStringEncoding
+                (connector.getURIEncoding());
+        }
+        
+        connector.getService().getContainer().logAccess(
+                request, response, 0, true);
+        
+        request.recycle();
+        response.recycle();
+    }
+    
+    
     // ------------------------------------------------------ Protected Methods
 
 

==================================================
AjpAprProcessor.java
index a712fcc789..ffa5d3506f 100644
--- a/java/org/apache/coyote/Adapter.java
+++ b/java/org/apache/coyote/Adapter.java
@@ -45,11 +45,13 @@ public interface Adapter {
      *  runtime exceptions )
      */
     public void service(Request req, Response res)
-	throws Exception;
+            throws Exception;
 
     public boolean event(Request req, Response res, SocketStatus status)
-    throws Exception;
+            throws Exception;
     
-    public boolean asyncDispatch(Request req,Response res, SocketStatus status) throws Exception;
+    public boolean asyncDispatch(Request req,Response res, SocketStatus status)
+            throws Exception;
 
+    public void log(Request req, Response res, long time);
 }

==================================================
AjpProcessor.java
index b79c7301cb..b8c773cf9a 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -416,6 +416,7 @@ public class AjpAprProcessor implements ActionHook {
                 log.debug(sm.getString("ajpprocessor.header.error"), t);
                 // 400 - Bad Request
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
 
@@ -427,6 +428,7 @@ public class AjpAprProcessor implements ActionHook {
                 log.debug(sm.getString("ajpprocessor.request.prepare"), t);
                 // 400 - Internal Server Error
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
 
@@ -441,6 +443,7 @@ public class AjpAprProcessor implements ActionHook {
                     log.error(sm.getString("ajpprocessor.request.process"), t);
                     // 500 - Internal Server Error
                     response.setStatus(500);
+                    adapter.log(request, response, 0);
                     error = true;
                 }
             }
@@ -501,6 +504,7 @@ public class AjpAprProcessor implements ActionHook {
             log.error(sm.getString("http11processor.request.process"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -892,6 +896,7 @@ public class AjpAprProcessor implements ActionHook {
                     secret = true;
                     if (!tmpMB.equals(requiredSecret)) {
                         response.setStatus(403);
+                        adapter.log(request, response, 0);
                         error = true;
                     }
                 }
@@ -908,6 +913,7 @@ public class AjpAprProcessor implements ActionHook {
         // Check if secret was submitted if required
         if ((requiredSecret != null) && !secret) {
             response.setStatus(403);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -956,6 +962,7 @@ public class AjpAprProcessor implements ActionHook {
                 request.serverName().duplicate(request.localName());
             } catch (IOException e) {
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
             return;
@@ -1007,6 +1014,7 @@ public class AjpAprProcessor implements ActionHook {
                     error = true;
                     // 400 - Bad request
                     response.setStatus(400);
+                    adapter.log(request, response, 0);
                     break;
                 }
                 port = port + (charValue * mult);

==================================================
Http11AprProcessor.java
index 6f44911a4a..7ffb1dd97d 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -427,6 +427,7 @@ public class AjpProcessor implements ActionHook {
                 log.debug(sm.getString("ajpprocessor.header.error"), t);
                 // 400 - Bad Request
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
 
@@ -438,6 +439,7 @@ public class AjpProcessor implements ActionHook {
                 log.debug(sm.getString("ajpprocessor.request.prepare"), t);
                 // 400 - Internal Server Error
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
 
@@ -452,6 +454,7 @@ public class AjpProcessor implements ActionHook {
                     log.error(sm.getString("ajpprocessor.request.process"), t);
                     // 500 - Internal Server Error
                     response.setStatus(500);
+                    adapter.log(request, response, 0);
                     error = true;
                 }
             }
@@ -505,6 +508,7 @@ public class AjpProcessor implements ActionHook {
             log.error(sm.getString("http11processor.request.process"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -900,6 +904,7 @@ public class AjpProcessor implements ActionHook {
                     secret = true;
                     if (!tmpMB.equals(requiredSecret)) {
                         response.setStatus(403);
+                        adapter.log(request, response, 0);
                         error = true;
                     }
                 }
@@ -916,6 +921,7 @@ public class AjpProcessor implements ActionHook {
         // Check if secret was submitted if required
         if ((requiredSecret != null) && !secret) {
             response.setStatus(403);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -964,6 +970,7 @@ public class AjpProcessor implements ActionHook {
                 request.serverName().duplicate(request.localName());
             } catch (IOException e) {
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
             return;
@@ -1015,6 +1022,7 @@ public class AjpProcessor implements ActionHook {
                     error = true;
                     // 400 - Bad request
                     response.setStatus(400);
+                    adapter.log(request, response, 0);
                     break;
                 }
                 port = port + (charValue * mult);

==================================================
Http11NioProcessor.java
index b8a927c1ab..3c0ce1c242 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -734,6 +734,7 @@ public class Http11AprProcessor implements ActionHook {
             log.error(sm.getString("http11processor.request.process"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
         
@@ -821,6 +822,7 @@ public class Http11AprProcessor implements ActionHook {
                 }
                 // 400 - Bad Request
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
 
@@ -835,6 +837,7 @@ public class Http11AprProcessor implements ActionHook {
                     }
                     // 400 - Internal Server Error
                     response.setStatus(400);
+                    adapter.log(request, response, 0);
                     error = true;
                 }
             }
@@ -862,6 +865,7 @@ public class Http11AprProcessor implements ActionHook {
                     log.error(sm.getString("http11processor.request.process"), t);
                     // 500 - Internal Server Error
                     response.setStatus(500);
+                    adapter.log(request, response, 0);
                     error = true;
                 }
             }
@@ -939,6 +943,7 @@ public class Http11AprProcessor implements ActionHook {
             log.error(sm.getString("http11processor.request.process"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -976,6 +981,7 @@ public class Http11AprProcessor implements ActionHook {
             log.error(sm.getString("http11processor.request.finish"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
         try {
@@ -1351,6 +1357,7 @@ public class Http11AprProcessor implements ActionHook {
             error = true;
             // Send 505; Unsupported HTTP version
             response.setStatus(505);
+            adapter.log(request, response, 0);
         }
 
         MessageBytes methodMB = request.method();
@@ -1448,6 +1455,7 @@ public class Http11AprProcessor implements ActionHook {
                     error = true;
                     // 501 - Unimplemented
                     response.setStatus(501);
+                    adapter.log(request, response, 0);
                 }
                 startPos = commaPos + 1;
                 commaPos = transferEncodingValue.indexOf(',', startPos);
@@ -1459,6 +1467,7 @@ public class Http11AprProcessor implements ActionHook {
                 error = true;
                 // 501 - Unimplemented
                 response.setStatus(501);
+                adapter.log(request, response, 0);
             }
         }
 
@@ -1477,6 +1486,7 @@ public class Http11AprProcessor implements ActionHook {
             error = true;
             // 400 - Bad request
             response.setStatus(400);
+            adapter.log(request, response, 0);
         }
 
         parseHost(valueMB);
@@ -1559,6 +1569,7 @@ public class Http11AprProcessor implements ActionHook {
                     error = true;
                     // 400 - Bad request
                     response.setStatus(400);
+                    adapter.log(request, response, 0);
                     break;
                 }
                 port = port + (charValue * mult);

==================================================
Http11Processor.java
index 6f70794857..992f98d9f1 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -222,6 +222,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
             log.error(sm.getString("http11processor.request.process"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -279,6 +280,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
             log.error(sm.getString("http11processor.request.process"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
 
@@ -370,6 +372,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                 }
                 // 400 - Bad Request
                 response.setStatus(400);
+                adapter.log(request, response, 0);
                 error = true;
             }
 
@@ -384,6 +387,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                     }
                     // 400 - Internal Server Error
                     response.setStatus(400);
+                    adapter.log(request, response, 0);
                     error = true;
                 }
             }
@@ -425,6 +429,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                     log.error(sm.getString("http11processor.request.process"), t);
                     // 500 - Internal Server Error
                     response.setStatus(500);
+                    adapter.log(request, response, 0);
                     error = true;
                 }
             }
@@ -497,6 +502,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
             log.error(sm.getString("http11processor.request.finish"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
+            adapter.log(request, response, 0);
             error = true;
         }
         try {
@@ -839,6 +845,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
             error = true;
             // Send 505; Unsupported HTTP version
             response.setStatus(505);
+            adapter.log(request, response, 0);
         }
 
         MessageBytes methodMB = request.method();
@@ -936,6 +943,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                     error = true;
                     // 501 - Unimplemented
                     response.setStatus(501);
+                    adapter.log(request, response, 0);
                 }
                 startPos = commaPos + 1;
                 commaPos = transferEncodingValue.indexOf(',', startPos);
@@ -947,6 +955,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                 error = true;
                 // 501 - Unimplemented
                 response.setStatus(501);
+                adapter.log(request, response, 0);
             }
         }
 
@@ -965,6 +974,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
             error = true;
             // 400 - Bad request
             response.setStatus(400);
+            adapter.log(request, response, 0);
         }
 
         parseHost(valueMB);
@@ -1048,6 +1058,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                     error = true;
                     // 400 - Bad request
                     response.setStatus(400);
+                    adapter.log(request, response, 0);
                     break;
                 }
                 port = port + (charValue * mult);

==================================================
