e650cf1b83e441dbd3863f3f6b61c972cafce19e
==================================================
Updates after kkolinko review
==================================================
Mark Thomas
==================================================
Tue Sep 26 05:06:00 2017 +0000
==================================================
AbstractFileResourceSet.java
Updates after kkolinko review
- Correct comment
- Use correct regular expression match (that makes regular expressions an even worse option)
- Improve (roughly x2) performance of invalid filename check

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1809684 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAbstractFileResourceSetPerformance.java
index d10245220c..68c2d4903d 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -139,11 +139,11 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
         if (name.length() == 0) {
             return false;
         }
-        // For typical length file names, this is 2-3 times faster than the
-        // equivalent regular expression. The cut-over point is file names (not
-        // full paths) of ~65 characters.
-        char[] chars = name.toCharArray();
-        for (char c : chars) {
+        // This consistently ~10 times faster than the equivalent regular
+        // expression irrespective of input length.
+        final int len = name.length();
+        for (int i = 0; i < len; i++) {
+            char c = name.charAt(i);
             if (c == '\"' || c == '<' || c == '>') {
                 // These characters are disallowed in Windows file names and
                 // there are known problems for file names with these characters
@@ -154,11 +154,11 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
                 return true;
             }
         }
-        // Windows does allow file names to end in ' ' unless specific low level
-        // APIs are used to create the files that bypass various checks. File
-        // names that end in ' ' are known to cause problems when using
+        // Windows does not allow file names to end in ' ' unless specific low
+        // level APIs are used to create the files that bypass various checks.
+        // File names that end in ' ' are known to cause problems when using
         // File#getCanonicalPath().
-        if (chars[chars.length -1] == ' ') {
+        if (name.charAt(len -1) == ' ') {
             return true;
         }
         return false;

==================================================
