0699c3648f0d372f057bbe177fe7c440d84be853
==================================================
Reduce code duplication in connectors: Move addFilter() and addInputFilter() to base class
==================================================
Mark Emlyn
==================================================
Mon Jun 21 11:27:18 2010 +0000
==================================================
AbstractHttp11Processor.java
Reduce code duplication in connectors: Move addFilter() and addInputFilter() to base class

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@956533 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index ced5b183e6..0dcd435a7c 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -30,7 +30,7 @@ import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.res.StringManager;
 
-public class AbstractHttp11Processor {
+public abstract class AbstractHttp11Processor {
 
     /**
      * Logger.
@@ -720,4 +720,69 @@ public class AbstractHttp11Processor {
     }
 
 
+    /**
+     * Exposes input buffer to super class to allow better code re-use.
+     * @return  The input buffer used by the processor. 
+     */
+    protected abstract AbstractInputBuffer getInputBuffer();
+
+    /**
+     * Exposes output buffer to super class to allow better code re-use.
+     * @return  The output buffer used by the processor. 
+     */
+    protected abstract AbstractOutputBuffer getOutputBuffer();
+
+    /**
+     * Add input or output filter.
+     *
+     * @param className class name of the filter
+     */
+    protected void addFilter(String className) {
+        try {
+            Class<?> clazz = Class.forName(className);
+            Object obj = clazz.newInstance();
+            if (obj instanceof InputFilter) {
+                getInputBuffer().addFilter((InputFilter) obj);
+            } else if (obj instanceof OutputFilter) {
+                getOutputBuffer().addFilter((OutputFilter) obj);
+            } else {
+                log.warn(sm.getString("http11processor.filter.unknown",
+                        className));
+            }
+        } catch (Exception e) {
+            log.error(sm.getString(
+                    "http11processor.filter.error", className), e);
+        }
+    }
+
+
+    /**
+     * Add an input filter to the current request.
+     *
+     * @return false if the encoding was not found (which would mean it is
+     * unsupported)
+     */
+    protected boolean addInputFilter(InputFilter[] inputFilters,
+                                     String encodingName) {
+        if (encodingName.equals("identity")) {
+            // Skip
+        } else if (encodingName.equals("chunked")) {
+            getInputBuffer().addActiveFilter
+                (inputFilters[Constants.CHUNKED_FILTER]);
+            contentDelimitation = true;
+        } else {
+            for (int i = 2; i < inputFilters.length; i++) {
+                if (inputFilters[i].getEncodingName()
+                    .toString().equals(encodingName)) {
+                    getInputBuffer().addActiveFilter(inputFilters[i]);
+                    return true;
+                }
+            }
+            return false;
+        }
+        return true;
+    }
+
+
+
 }

==================================================
Http11NioProcessor.java
index aebec8af3c..764ba9e2c3 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -150,28 +150,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor implements Actio
     // --------------------------------------------------------- Public Methods
 
 
-    /**
-     * Add input or output filter.
-     *
-     * @param className class name of the filter
-     */
-    protected void addFilter(String className) {
-        try {
-            Class<?> clazz = Class.forName(className);
-            Object obj = clazz.newInstance();
-            if (obj instanceof InputFilter) {
-                inputBuffer.addFilter((InputFilter) obj);
-            } else if (obj instanceof OutputFilter) {
-                outputBuffer.addFilter((OutputFilter) obj);
-            } else {
-                log.warn(sm.getString("http11processor.filter.unknown", className));
-            }
-        } catch (Exception e) {
-            log.error(sm.getString("http11processor.filter.error", className), e);
-        }
-    }
-
-
     /**
      * Process pipelined HTTP requests using the specified input and output
      * streams.
@@ -1196,33 +1174,14 @@ public class Http11AprProcessor extends AbstractHttp11Processor implements Actio
         outputBuffer.addFilter(new GzipOutputFilter());
 
     }
-
-
-    /**
-     * Add an input filter to the current request.
-     *
-     * @return false if the encoding was not found (which would mean it is
-     * unsupported)
-     */
-    protected boolean addInputFilter(InputFilter[] inputFilters,
-                                     String encodingName) {
-        if (encodingName.equals("identity")) {
-            // Skip
-        } else if (encodingName.equals("chunked")) {
-            inputBuffer.addActiveFilter
-                (inputFilters[Constants.CHUNKED_FILTER]);
-            contentDelimitation = true;
-        } else {
-            for (int i = 2; i < inputFilters.length; i++) {
-                if (inputFilters[i].getEncodingName()
-                    .toString().equals(encodingName)) {
-                    inputBuffer.addActiveFilter(inputFilters[i]);
-                    return true;
-                }
-            }
-            return false;
-        }
-        return true;
+    
+    @Override
+    protected AbstractInputBuffer getInputBuffer() {
+        return inputBuffer;
     }
 
+    @Override
+    protected AbstractOutputBuffer getOutputBuffer() {
+        return outputBuffer;
+    }
 }

==================================================
Http11Processor.java
index 992f98d9f1..fc3610998c 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -16,7 +16,6 @@
  */
 
 package org.apache.coyote.http11;
-
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.InetAddress;
@@ -160,28 +159,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
     // --------------------------------------------------------- Public Methods
 
 
-    /**
-     * Add input or output filter.
-     *
-     * @param className class name of the filter
-     */
-    protected void addFilter(String className) {
-        try {
-            Class<?> clazz = Class.forName(className);
-            Object obj = clazz.newInstance();
-            if (obj instanceof InputFilter) {
-                inputBuffer.addFilter((InputFilter) obj);
-            } else if (obj instanceof OutputFilter) {
-                outputBuffer.addFilter((OutputFilter) obj);
-            } else {
-                log.warn(sm.getString("http11processor.filter.unknown", className));
-            }
-        } catch (Exception e) {
-            log.error(sm.getString("http11processor.filter.error", className), e);
-        }
-    }
-
-
     /**
      * Process pipelined HTTP requests using the specified input and output
      * streams.
@@ -1250,34 +1227,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
     }
 
 
-    /**
-     * Add an input filter to the current request.
-     *
-     * @return false if the encoding was not found (which would mean it is
-     * unsupported)
-     */
-    protected boolean addInputFilter(InputFilter[] inputFilters,
-                                     String encodingName) {
-        if (encodingName.equals("identity")) {
-            // Skip
-        } else if (encodingName.equals("chunked")) {
-            inputBuffer.addActiveFilter
-                (inputFilters[Constants.CHUNKED_FILTER]);
-            contentDelimitation = true;
-        } else {
-            for (int i = 2; i < inputFilters.length; i++) {
-                if (inputFilters[i].getEncodingName()
-                    .toString().equals(encodingName)) {
-                    inputBuffer.addActiveFilter(inputFilters[i]);
-                    return true;
-                }
-            }
-            return false;
-        }
-        return true;
-    }
-
-
     /**
      * Specialized utility method: find a sequence of lower case bytes inside
      * a ByteChunk.
@@ -1323,6 +1272,16 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                status == 501 /* SC_NOT_IMPLEMENTED */;
     }
      
+    @Override
+    protected AbstractInputBuffer getInputBuffer() {
+        return inputBuffer;
+    }
+
+    @Override
+    protected AbstractOutputBuffer getOutputBuffer() {
+        return outputBuffer;
+    }
+
     /**
      * Set the SSL information for this HTTP connection.
      */

==================================================
