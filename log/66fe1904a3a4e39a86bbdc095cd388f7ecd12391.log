66fe1904a3a4e39a86bbdc095cd388f7ecd12391
==================================================
Fix NPE
==================================================
Mark Thomas
==================================================
Fri Feb 27 15:02:12 2015 +0000
==================================================
AbstractHttp11Protocol.java
Fix NPE

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662718 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UpgradeProcessorBase.java
index e2a68d72eb..dbfdb92c5e 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -289,7 +289,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
                 return new UpgradeProcessorInternal(socket, leftoverInput,
                         (InternalHttpUpgradeHandler) httpUpgradeHandler);
             } else {
-                return new UpgradeProcessorExternal(socket, leftoverInput);
+                return new UpgradeProcessorExternal(socket, leftoverInput, httpUpgradeHandler);
             }
         }
     }

==================================================
UpgradeProcessorExternal.java
index faa80a6113..ca32dcb708 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
@@ -34,7 +34,11 @@ public abstract class UpgradeProcessorBase implements Processor, WebConnection {
 
     protected static final int INFINITE_TIMEOUT = -1;
 
-    public UpgradeProcessorBase(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput) {
+    private final HttpUpgradeHandler httpUpgradeHandler;
+
+    public UpgradeProcessorBase(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput,
+            HttpUpgradeHandler httpUpgradeHandler) {
+        this.httpUpgradeHandler = httpUpgradeHandler;
         wrapper.unRead(leftOverInput);
     }
 
@@ -48,19 +52,19 @@ public abstract class UpgradeProcessorBase implements Processor, WebConnection {
 
 
     @Override
-    public final void recycle() {
-        // Currently a NO-OP as upgrade processors are not recycled.
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
+        return httpUpgradeHandler;
     }
 
 
-    // ---------------------------- Processor methods that are NO-OP for upgrade
-
     @Override
-    public HttpUpgradeHandler getHttpUpgradeHandler() {
-        return null;
+    public final void recycle() {
+        // Currently a NO-OP as upgrade processors are not recycled.
     }
 
 
+    // ---------------------------- Processor methods that are NO-OP for upgrade
+
     @Override
     public final Executor getExecutor() {
         return null;

==================================================
UpgradeProcessorInternal.java
index c0fbabb7ef..0d4c2a12d1 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
@@ -21,6 +21,7 @@ import java.nio.ByteBuffer;
 
 import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -38,8 +39,9 @@ public class UpgradeProcessorExternal extends UpgradeProcessorBase {
     private final UpgradeServletOutputStream upgradeServletOutputStream;
 
 
-    public UpgradeProcessorExternal(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput) {
-        super(wrapper, leftOverInput);
+    public UpgradeProcessorExternal(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput,
+            HttpUpgradeHandler httpUpgradeHandler) {
+        super(wrapper, leftOverInput, httpUpgradeHandler);
         this.upgradeServletInputStream = new UpgradeServletInputStream(wrapper);
         this.upgradeServletOutputStream = new UpgradeServletOutputStream(wrapper);
 

==================================================
