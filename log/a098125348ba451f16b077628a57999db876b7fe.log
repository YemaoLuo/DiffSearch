a098125348ba451f16b077628a57999db876b7fe
==================================================
Fix various errors when stopping the APR connector via JMX (may occur in other scenarios)
==================================================
Mark Thomas
==================================================
Thu May 28 13:25:52 2015 +0000
==================================================
AbstractProtocol.java
Fix various errors when stopping the APR connector via JMX (may occur in other scenarios)
- prevent a crash by ensuring all connections are closed via the SocketWrapper
- prevent a memory leak by releasing any Processor associated with a closed connection
Adds release(SocketWrapper) to the Handler interface and adds an implementation to the base AbstractProtocol.AbstractConnectionHandler (replacing the impl. in vaious sub-classes)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682240 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNio2Protocol.java
index fea86ac8b0..4fac8c8a0c 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -868,6 +868,23 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
         }
 
 
+        /**
+         * Expected to be used by the Endpoint to release resources on socket
+         * close, errors etc.
+         */
+        @Override
+        public void release(SocketWrapperBase<S> socketWrapper) {
+            S socket = socketWrapper.getSocket();
+            if (socket != null) {
+                Processor processor = connections.remove(socket);
+                if (processor != null) {
+                    processor.recycle();
+                    recycledProcessors.push(processor);
+                }
+            }
+        }
+
+
         protected abstract Processor createUpgradeProcessor(
                 SocketWrapperBase<?> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeHandler) throws IOException;

==================================================
AjpNioProtocol.java
index 6a1093b4b1..4e63f52f8f 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -16,13 +16,11 @@
  */
 package org.apache.coyote.ajp;
 
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
 import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
 /**
@@ -71,20 +69,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
         }
 
 
-        /**
-         * Expected to be used by the Poller to release resources on socket
-         * close, errors etc.
-         */
-        @Override
-        public void release(SocketWrapperBase<Nio2Channel> socket) {
-            Processor processor = connections.remove(socket.getSocket());
-            if (processor != null) {
-                processor.recycle();
-                recycledProcessors.push(processor);
-            }
-        }
-
-
         @Override
         public void closeAll() {
             for (Nio2Channel channel : connections.keySet()) {

==================================================
Http11Nio2Protocol.java
index 068d4063bc..f53de2406f 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -25,7 +25,6 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 /**
  * This the NIO based protocol handler implementation for AJP.
@@ -96,19 +95,5 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
                 log.debug(sm.getString("ajpnioprotocol.releaseEnd",
                         socket, Boolean.valueOf(released)));
         }
-
-
-        /**
-         * Expected to be used by the Poller to release resources on socket
-         * close, errors etc.
-         */
-        @Override
-        public void release(SocketWrapperBase<NioChannel> socket) {
-            Processor processor = connections.remove(socket.getSocket());
-            if (processor != null) {
-                processor.recycle();
-                recycledProcessors.push(processor);
-            }
-        }
     }
 }

==================================================
Http11NioProtocol.java
index 38ecb4db08..1c2a00602d 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -16,13 +16,11 @@
  */
 package org.apache.coyote.http11;
 
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
 import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
 /**
@@ -72,23 +70,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
             return log;
         }
 
-        /**
-         * Expected to be used by the Endpoint to release resources on socket
-         * close, errors etc.
-         */
-        @Override
-        public void release(SocketWrapperBase<Nio2Channel> socketWrapper) {
-            Nio2Channel socket = socketWrapper.getSocket();
-            if (socket != null) {
-                Processor processor = connections.remove(socket);
-                if (processor != null) {
-                    processor.recycle();
-                    recycledProcessors.push(processor);
-                }
-            }
-        }
-
-
         @Override
         public void closeAll() {
             for (Nio2Channel channel : connections.keySet()) {

==================================================
AbstractEndpoint.java
index 17d5587134..8143ebcb4c 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -25,7 +25,6 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
 /**
@@ -132,21 +131,5 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
             if (log.isDebugEnabled())
                 log.debug("Done iterating through our connections to release a socket channel:"+socket +" released:"+released);
         }
-
-        /**
-         * Expected to be used by the Endpoint to release resources on socket
-         * close, errors etc.
-         */
-        @Override
-        public void release(SocketWrapperBase<NioChannel> socketWrapper) {
-            NioChannel socket = socketWrapper.getSocket();
-            if (socket != null) {
-                Processor processor = connections.remove(socket);
-                if (processor != null) {
-                    processor.recycle();
-                    recycledProcessors.push(processor);
-                }
-            }
-        }
     }
 }

==================================================
AprEndpoint.java
index 7b0c2eff8f..27ebc0f9e7 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -85,6 +85,14 @@ public abstract class AbstractEndpoint<S> {
         public Object getGlobal();
 
 
+        /**
+         * Release any resources associated with the given SocketWrapper.
+         *
+         * @param socketWrapper The socketWrapper to release resources for
+         */
+        public void release(SocketWrapperBase<S> socketWrapper);
+
+
         /**
          * Recycle resources associated with the handler.
          */

==================================================
Nio2Endpoint.java
index 80643c2c3a..ae2383b75d 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -661,6 +661,14 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
         if (running) {
             running = false;
             poller.stop();
+            for (SocketWrapperBase<Long> socketWrapper : connections.values()) {
+                try {
+                    socketWrapper.close();
+                    handler.release(socketWrapper);
+                } catch (IOException e) {
+                    // Ignore
+                }
+            }
             getAsyncTimeout().stop();
             for (AbstractEndpoint.Acceptor acceptor : acceptors) {
                 long waitLeft = 10000;

==================================================
NioEndpoint.java
index be31da3d6f..832c84a756 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1571,7 +1571,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
      * thread local fields.
      */
     public interface Handler extends AbstractEndpoint.Handler<Nio2Channel> {
-        public void release(SocketWrapperBase<Nio2Channel> socket);
         public void closeAll();
     }
 

==================================================
