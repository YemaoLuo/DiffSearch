725dee6609fa710499af6f65e702e55ef79a0787
==================================================
Fix various failures when running the Autobahn close tests
==================================================
Mark Emlyn
==================================================
Wed Dec 26 18:25:22 2012 +0000
==================================================
Util.java
index f14016146f..37b04d18e2 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -25,7 +25,9 @@ wsFrame.controlPayloadTooBig=A control frame was sent with a payload of length [
 wsFrame.controlNoFin=A control frame was sent that did not have the fin bit set. Control frames are not permitted to use continuation frames.
 wsFrame.invalidOpCode= A WebSocket frame was sent with an unrecognised opCode of [{0}]
 wsFrame.invalidUtf8=A WebSocket text frame was received that could not be decoded to UTF-8 because it contained invalid byte sequences
+wsFrame.invalidUtf8Close=A WebSocket close frame was received with a close reason that contained invalid UTF-8 byte sequences
 wsFrame.noContinuation=A new message was started when a continuation frame was expected
 wsFrame.notMasked=The client frame was not masked but all client frames must be masked
+wsFrame.oneByteCloseCode=The client sent a close frame with a single byte payload which is not valid
 wsFrame.textMessageTooBig=The decoded text message was too big to fit in the output text message buffer and the endpoint does not support delivery of partial messages
 wsFrame.wrongRsv=The client frame set the reserved bits to [{0}] which was not supported by this endpoint
\ No newline at end of file

==================================================
WsFrame.java
index 6a7c2377b3..9fe3b97d88 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -57,6 +57,9 @@ class Util {
 
 
     static CloseCode getCloseCode(int code) {
+        if (code > 2999 && code < 5000) {
+            return CloseCodes.NORMAL_CLOSURE;
+        }
         switch (code) {
             case 1000:
                 return CloseCodes.NORMAL_CLOSURE;
@@ -67,11 +70,17 @@ class Util {
             case 1003:
                 return CloseCodes.CANNOT_ACCEPT;
             case 1004:
-                return CloseCodes.RESERVED;
+                // Should not be used in a close frame
+                // return CloseCodes.RESERVED;
+                return CloseCodes.PROTOCOL_ERROR;
             case 1005:
-                return CloseCodes.NO_STATUS_CODE;
+                // Should not be used in a close frame
+                // return CloseCodes.NO_STATUS_CODE;
+                return CloseCodes.PROTOCOL_ERROR;
             case 1006:
-                return CloseCodes.CLOSED_ABNORMALLY;
+                // Should not be used in a close frame
+                // return CloseCodes.CLOSED_ABNORMALLY;
+                return CloseCodes.PROTOCOL_ERROR;
             case 1007:
                 return CloseCodes.NOT_CONSISTENT;
             case 1008:
@@ -83,11 +92,17 @@ class Util {
             case 1011:
                 return CloseCodes.UNEXPECTED_CONDITION;
             case 1012:
-                return CloseCodes.SERVICE_RESTART;
+                // Not in RFC6455
+                // return CloseCodes.SERVICE_RESTART;
+                return CloseCodes.PROTOCOL_ERROR;
             case 1013:
-                return CloseCodes.TRY_AGAIN_LATER;
+                // Not in RFC6455
+                // return CloseCodes.TRY_AGAIN_LATER;
+                return CloseCodes.PROTOCOL_ERROR;
             case 1015:
-                return CloseCodes.TLS_HANDSHAKE_FAILURE;
+                // Should not be used in a close frame
+                // return CloseCodes.TLS_HANDSHAKE_FAILURE;
+                return CloseCodes.PROTOCOL_ERROR;
             default:
                 return CloseCodes.PROTOCOL_ERROR;
         }

==================================================
