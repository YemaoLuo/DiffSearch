8cb5606b2caa373bb00d690759f562d7e69e81b6
==================================================
Fix mix-up of connectionUploadTimeout and connectionTimeout
==================================================
Mark Emlyn
==================================================
Mon Dec 6 16:26:17 2010 +0000
==================================================
Connector.java
Fix mix-up of connectionUploadTimeout and connectionTimeout
Use connectionUploadTimeout consistently as attribute name
Document connectionUploadTimeout

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1042706 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Processor.java
index 6f0677b5e3..9ec57b8178 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -247,7 +247,6 @@ public class Connector extends LifecycleMBeanBase  {
          replacements.put("acceptCount", "backlog");
          replacements.put("connectionLinger", "soLinger");
          replacements.put("connectionTimeout", "soTimeout");
-         replacements.put("connectionUploadTimeout", "timeout");
          replacements.put("randomFile", "randomfile");
          replacements.put("rootFile", "rootfile");
          replacements.put("sslProtocols", "protocols");

==================================================
AbstractHttp11Protocol.java
index 34598a930a..22bca8e5be 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -181,7 +181,7 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     /**
      * Maximum timeout on uploads. 5 minutes as in Apache HTTPD server.
      */
-    protected int timeout = 300000;
+    protected int connectionUploadTimeout = 300000;
 
 
     /**
@@ -582,15 +582,15 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     /**
      * Set the upload timeout.
      */
-    public void setTimeout( int timeouts ) {
-        timeout = timeouts ;
+    public void setConnectionUploadTimeout(int timeout) {
+        connectionUploadTimeout = timeout ;
     }
 
     /**
      * Get the upload timeout.
      */
-    public int getTimeout() {
-        return timeout;
+    public int getConnectionUploadTimeout() {
+        return connectionUploadTimeout;
     }
 
 

==================================================
Http11AprProcessor.java
index 3c1c438756..69d323d751 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -152,14 +152,6 @@ public abstract class AbstractHttp11Protocol extends AbstractProtocolHandler {
         return endpoint.getKeepAliveTimeout();
     }
 
-    public int getTimeout() {
-        return getSoTimeout();
-    }
-
-    public void setTimeout( int timeout ) {
-        setSoTimeout(timeout);
-    }
-    
     public int getConnectionTimeout() {
         return getSoTimeout();
     }
@@ -198,14 +190,27 @@ public abstract class AbstractHttp11Protocol extends AbstractProtocolHandler {
     public void setMaxHttpHeaderSize(int valueI) { maxHttpHeaderSize = valueI; }
 
     
+    /**
+     * Specifies a different (usually  longer) connection timeout during data
+     * upload. 
+     */
+    private int connectionUploadTimeout = 300000;
+    public int getConnectionUploadTimeout() { return connectionUploadTimeout; }
+    public void setConnectionUploadTimeout(int i) {
+        connectionUploadTimeout = i;
+    }
+
+
     // HTTP
     /**
-     * If true, the regular socket timeout will be used for the full duration
-     * of the connection.
+     * If true, the connectionUploadTimeout will be ignored and the regular
+     * socket timeout will be used for the full duration of the connection.
      */
     private boolean disableUploadTimeout = true;
     public boolean getDisableUploadTimeout() { return disableUploadTimeout; }
-    public void setDisableUploadTimeout(boolean isDisabled) { disableUploadTimeout = isDisabled; }
+    public void setDisableUploadTimeout(boolean isDisabled) {
+        disableUploadTimeout = isDisabled;
+    }
     
     
     // HTTP

==================================================
Http11AprProtocol.java
index c13c46ed98..c802542ad1 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -238,7 +238,8 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
                 request.setStartTime(System.currentTimeMillis());
                 keptAlive = true;
                 if (!disableUploadTimeout) {
-                    Socket.timeoutSet(socketRef, timeout * 1000);
+                    Socket.timeoutSet(socketRef,
+                            connectionUploadTimeout * 1000);
                 }
                 inputBuffer.parseHeaders();
             } catch (IOException e) {

==================================================
Http11NioProcessor.java
index 13756f1b8c..4dff0fdcc8 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -143,19 +143,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
     public boolean getDeferAccept() { return ((AprEndpoint)endpoint).getDeferAccept(); }
     public void setDeferAccept(boolean deferAccept) { ((AprEndpoint)endpoint).setDeferAccept(deferAccept); }
 
-    /**
-     * This timeout represents the socket timeout which will be used while
-     * the adapter execution is in progress, unless disableUploadTimeout
-     * is set to true. The default is the same as for Apache HTTP Server
-     * (300 000 milliseconds).
-     * TODO: Make the timeout attribute names consistent across the connectors
-     */
-    protected int timeout = 300000;
-    @Override
-    public int getTimeout() { return timeout; }
-    @Override
-    public void setTimeout(int timeout) { this.timeout = timeout; }
-
     // --------------------  SSL related properties --------------------
 
     /**
@@ -437,7 +424,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                     proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
-            processor.setTimeout(proto.timeout);
+            processor.setConnectionUploadTimeout(
+                    proto.getConnectionUploadTimeout());
             processor.setDisableUploadTimeout(proto.getDisableUploadTimeout());
             processor.setCompressionMinSize(proto.getCompressionMinSize());
             processor.setCompression(proto.getCompression());

==================================================
Http11NioProtocol.java
index 3d5ff2ce81..cbb8157846 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -339,7 +339,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
                 }
                 request.setStartTime(System.currentTimeMillis());
                 if (!disableUploadTimeout) { //only for body, not for request headers
-                    socket.getIOChannel().socket().setSoTimeout(timeout);
+                    socket.getIOChannel().socket().setSoTimeout(
+                            connectionUploadTimeout);
                 }
             } catch (IOException e) {
                 if (log.isDebugEnabled()) {

==================================================
Http11Processor.java
index c29edabb98..404cba0af0 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -427,7 +427,8 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                     proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
-            processor.setTimeout(proto.getTimeout());
+            processor.setConnectionUploadTimeout(
+                    proto.getConnectionUploadTimeout());
             processor.setDisableUploadTimeout(proto.getDisableUploadTimeout());
             processor.setCompressionMinSize(proto.getCompressionMinSize());
             processor.setCompression(proto.getCompression());

==================================================
Http11Protocol.java
index 59f7909236..a4069aeed7 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -199,7 +199,7 @@ public class Http11Processor extends AbstractHttp11Processor {
                 if (disableUploadTimeout) {
                     socket.getSocket().setSoTimeout(soTimeout);
                 } else {
-                    socket.getSocket().setSoTimeout(timeout);
+                    socket.getSocket().setSoTimeout(connectionUploadTimeout);
                 }
                 inputBuffer.parseHeaders();
             } catch (IOException e) {

==================================================
