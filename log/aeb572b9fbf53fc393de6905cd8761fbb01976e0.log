aeb572b9fbf53fc393de6905cd8761fbb01976e0
==================================================
Pull up and align start (a.k.a. offset), end and hashcode
==================================================
Mark Thomas
==================================================
Mon Jan 15 22:06:01 2018 +0000
==================================================
AbstractChunk.java
Pull up and align start (a.k.a. offset), end and hashcode

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1821198 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ByteChunk.java
index dc7ed44008..06783a1357 100644
--- a/java/org/apache/tomcat/util/buf/AbstractChunk.java
+++ b/java/org/apache/tomcat/util/buf/AbstractChunk.java
@@ -25,4 +25,77 @@ public abstract class AbstractChunk implements Cloneable, Serializable {
 
     private static final long serialVersionUID = 1L;
 
+
+    private int hashCode = 0;
+    protected boolean hasHashCode = false;
+
+    protected int start;
+    protected int end;
+
+
+    /**
+     * @return the start position of the data in the buffer
+     */
+    public int getStart() {
+        return start;
+    }
+
+
+    public int getEnd() {
+        return end;
+    }
+
+
+    public void setEnd(int i) {
+        end = i;
+    }
+
+
+    /**
+     * @return the length of the data in the buffer
+     */
+    public int getLength() {
+        return end - start;
+    }
+
+
+    // TODO: Deprecate offset and use start
+
+    public int getOffset() {
+        return start;
+    }
+
+
+    public void setOffset(int off) {
+        if (end < off) {
+            end = off;
+        }
+        start = off;
+    }
+
+
+    @Override
+    public int hashCode() {
+        if (hasHashCode) {
+            return hashCode;
+        }
+        int code = 0;
+
+        code = hash();
+        hashCode = code;
+        hasHashCode = true;
+        return code;
+    }
+
+
+    public int hash() {
+        int code = 0;
+        for (int i = start; i < end; i++) {
+            code = code * 37 + getBufferElement(i);
+        }
+        return code;
+    }
+
+
+    protected abstract int getBufferElement(int index);
 }

==================================================
CharChunk.java
index fb13f651da..8d9d52cf4b 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -122,16 +122,9 @@ public final class ByteChunk extends AbstractChunk {
      */
     public static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;
 
-    private int hashCode = 0;
-    // did we compute the hashcode ?
-    private boolean hasHashCode = false;
-
     // byte[]
     private byte[] buff;
 
-    private int start = 0;
-    private int end;
-
     private transient Charset charset;
 
     private boolean isSet = false; // XXX
@@ -251,36 +244,6 @@ public final class ByteChunk extends AbstractChunk {
     }
 
 
-    /**
-     * @return the start offset of the bytes. For output this is the end of the
-     *         buffer.
-     */
-    public int getStart() {
-        return start;
-    }
-
-
-    public int getOffset() {
-        return start;
-    }
-
-
-    public void setOffset(int off) {
-        if (end < off) {
-            end = off;
-        }
-        start = off;
-    }
-
-
-    /**
-     * @return the length of the bytes.
-     */
-    public int getLength() {
-        return end - start;
-    }
-
-
     /**
      * Maximum amount of data in this buffer. If -1 or not set, the buffer will
      * grow indefinitely. Can be smaller than the current buffer size ( which
@@ -321,16 +284,6 @@ public final class ByteChunk extends AbstractChunk {
     }
 
 
-    public int getEnd() {
-        return end;
-    }
-
-
-    public void setEnd(int i) {
-        end = i;
-    }
-
-
     // -------------------- Adding data to the buffer --------------------
     public void append(byte b) throws IOException {
         makeSpace(1);
@@ -803,36 +756,9 @@ public final class ByteChunk extends AbstractChunk {
     }
 
 
-    // -------------------- Hash code --------------------
-
     @Override
-    public int hashCode() {
-        if (hasHashCode) {
-            return hashCode;
-        }
-        int code = 0;
-
-        code = hash();
-        hashCode = code;
-        hasHashCode = true;
-        return code;
-    }
-
-
-    // normal hash.
-    public int hash() {
-        return hashBytes(buff, start, end - start);
-    }
-
-
-    private static int hashBytes(byte buff[], int start, int bytesLen) {
-        int max = start + bytesLen;
-        byte bb[] = buff;
-        int code = 0;
-        for (int i = start; i < max; i++) {
-            code = code * 37 + bb[i];
-        }
-        return code;
+    protected int getBufferElement(int index) {
+        return buff[index];
     }
 
 

==================================================
