33eccc77048bd15131f8f9f5d95720399719952a
==================================================
Simplify regular endpoint writes by removing write(Non)BlockingDirect
==================================================
remm remm@apache.org
==================================================
Mon Nov 25 17:44:00 2019 +0100
==================================================
AprEndpoint.java
Simplify regular endpoint writes by removing write(Non)BlockingDirect

The performance difference is null on what I exercised (static files).
However, this removes code and makes buffering behavior consistent,
avoiding a possible issue mentioned in the fixme (small writes causing a
performance degradation).
Following this I don't find any additional interesting cleanup. After
testing to verify things are not broken, I will work on backporting to
8.5 piece by piece.


==================================================
SocketWrapperBase.java
index 10322dabe6..ebfd51be33 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2249,57 +2249,6 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
         }
 
 
-        @Override
-        protected void writeBlockingDirect(ByteBuffer from) throws IOException {
-            if (from.isDirect()) {
-                super.writeBlockingDirect(from);
-            } else {
-                // The socket write buffer capacity is socket.appWriteBufSize
-                ByteBuffer writeBuffer = socketBufferHandler.getWriteBuffer();
-                int limit = writeBuffer.capacity();
-                while (from.remaining() >= limit) {
-                    socketBufferHandler.configureWriteBufferForWrite();
-                    transfer(from, writeBuffer);
-                    doWrite(true);
-                }
-
-                if (from.remaining() > 0) {
-                    socketBufferHandler.configureWriteBufferForWrite();
-                    transfer(from, writeBuffer);
-                }
-            }
-        }
-
-
-        @Override
-        protected void writeNonBlockingDirect(ByteBuffer from) throws IOException {
-            if (from.isDirect()) {
-                super.writeNonBlockingDirect(from);
-            } else {
-                // The socket write buffer capacity is socket.appWriteBufSize
-                ByteBuffer writeBuffer = socketBufferHandler.getWriteBuffer();
-                int limit = writeBuffer.capacity();
-                while (from.remaining() >= limit) {
-                    socketBufferHandler.configureWriteBufferForWrite();
-                    transfer(from, writeBuffer);
-                    int newPosition = writeBuffer.position() + limit;
-                    doWrite(false);
-                    if (writeBuffer.position() != newPosition) {
-                        // Didn't write the whole amount of data in the last
-                        // non-blocking write.
-                        // Exit the loop.
-                        return;
-                    }
-                }
-
-                if (from.remaining() > 0) {
-                    socketBufferHandler.configureWriteBufferForWrite();
-                    transfer(from, writeBuffer);
-                }
-            }
-        }
-
-
         @Override
         protected void doWrite(boolean block, ByteBuffer from) throws IOException {
             Lock readLock = getBlockingStatusReadLock();

==================================================
