1018cd77fcd14ed19b0716b721fcbd9d3ee5b4bd
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49103
==================================================
Mark Emlyn
==================================================
Wed Apr 14 22:19:33 2010 +0000
==================================================
Http11NioProtocol.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49103
Add @Override where appropriate

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@934222 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Protocol.java
index c6374cf6a4..2ba1d2abac 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -52,6 +52,7 @@ public class Http11NioProtocol extends AbstractHttp11Protocol {
     
     private static final Log log = LogFactory.getLog(Http11NioProtocol.class);
     
+    @Override
     protected Log getLog() { return log; }
     
     public Http11NioProtocol() {

==================================================
AprEndpoint.java
index 2a8e3f928f..cb7fe6226a 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -55,6 +55,7 @@ public class Http11Protocol extends AbstractHttp11Protocol {
     private static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(Http11Protocol.class);
     
+    @Override
     public Log getLog() { return log; }
 
 

==================================================
NioEndpoint.java
index 1d80e74450..42774f9874 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -358,6 +358,7 @@ public class AprEndpoint extends AbstractEndpoint {
     /**
      * Initialize the endpoint.
      */
+    @Override
     public void init()
         throws Exception {
 
@@ -515,6 +516,7 @@ public class AprEndpoint extends AbstractEndpoint {
     /**
      * Start the APR endpoint, creating acceptor, poller and sendfile threads.
      */
+    @Override
     public void start()
         throws Exception {
         // Initialize socket if not done before
@@ -580,6 +582,7 @@ public class AprEndpoint extends AbstractEndpoint {
     /**
      * Pause the endpoint, which will make it stop accepting new sockets.
      */
+    @Override
     public void pause() {
         if (running && !paused) {
             paused = true;
@@ -592,6 +595,7 @@ public class AprEndpoint extends AbstractEndpoint {
      * Resume the endpoint, which will make it start accepting new sockets
      * again.
      */
+    @Override
     public void resume() {
         if (running) {
             paused = false;
@@ -628,6 +632,7 @@ public class AprEndpoint extends AbstractEndpoint {
     /**
      * Deallocate APR memory pools, and close server socket.
      */
+    @Override
     public void destroy() throws Exception {
         if (running) {
             stop();

==================================================
JSSEImplementation.java
index 69a7e178c5..4692c9c6fe 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -478,6 +478,7 @@ public class NioEndpoint extends AbstractEndpoint {
     /**
      * Initialize the endpoint.
      */
+    @Override
     public void init()
         throws Exception {
 
@@ -569,6 +570,7 @@ public class NioEndpoint extends AbstractEndpoint {
     /**
      * Start the NIO endpoint, creating acceptor, poller threads.
      */
+    @Override
     public void start()
         throws Exception {
         // Initialize socket if not done before
@@ -608,6 +610,7 @@ public class NioEndpoint extends AbstractEndpoint {
     /**
      * Pause the endpoint, which will make it stop accepting new sockets.
      */
+    @Override
     public void pause() {
         if (running && !paused) {
             paused = true;
@@ -620,6 +623,7 @@ public class NioEndpoint extends AbstractEndpoint {
      * Resume the endpoint, which will make it start accepting new sockets
      * again.
      */
+    @Override
     public void resume() {
         if (running) {
             paused = false;
@@ -653,6 +657,7 @@ public class NioEndpoint extends AbstractEndpoint {
     /**
      * Deallocate NIO memory pools, and close server socket.
      */
+    @Override
     public void destroy() throws Exception {
         if (log.isDebugEnabled()) {
             log.debug("Destroy initiated for "+new InetSocketAddress(getAddress(),getPort()));

==================================================
