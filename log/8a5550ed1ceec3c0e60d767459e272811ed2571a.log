8a5550ed1ceec3c0e60d767459e272811ed2571a
==================================================
Javadoc fixes.
==================================================
asf-sync-process asf-sync-process@unknown
==================================================
Mon Jan 18 18:20:54 2016 +0000
==================================================
IntrospectionUtils.java
Javadoc fixes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725316 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Ascii.java
index aec8506647..d8cc6fa024 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -38,6 +38,10 @@ public final class IntrospectionUtils {
      * Find a method with the right name If found, call the method ( if param is
      * int or boolean we'll convert value to the right type before) - that means
      * you can have setDebug(1).
+     * @param o The object to set a property on
+     * @param name The property name
+     * @param value The property value
+     * @return <code>true</code> if operation was successful
      */
     public static boolean setProperty(Object o, String name, String value) {
         return setProperty(o,name,value,true);
@@ -224,7 +228,11 @@ public final class IntrospectionUtils {
     }
 
     /**
-     * Replace ${NAME} with the property value
+     * Replace ${NAME} with the property value.
+     * @param value The value
+     * @param staticProp Replacement properties
+     * @param dynamicProp Replacement properties
+     * @return the replacement value
      */
     public static String replaceProperties(String value,
             Hashtable<Object,Object> staticProp, PropertySource dynamicProp[]) {
@@ -278,7 +286,9 @@ public final class IntrospectionUtils {
     }
 
     /**
-     * Reverse of Introspector.decapitalize
+     * Reverse of Introspector.decapitalize.
+     * @param name The name
+     * @return the capitalized string
      */
     public static String capitalize(String name) {
         if (name == null || name.length() == 0) {

==================================================
ByteChunk.java
index cc3135c855..daf9310a71 100644
--- a/java/org/apache/tomcat/util/buf/Ascii.java
+++ b/java/org/apache/tomcat/util/buf/Ascii.java
@@ -56,14 +56,16 @@ public final class Ascii {
 
     /**
      * Returns the lower case equivalent of the specified ASCII character.
+     * @param c The char
+     * @return the lower case equivalent char
      */
-
     public static int toLower(int c) {
         return toLower[c & 0xff] & 0xff;
     }
 
     /**
-     * Returns true if the specified ASCII character is a digit.
+     * @return <code>true</code> if the specified ASCII character is a digit.
+     * @param c The char
      */
     private static boolean isDigit(int c) {
         return isDigit[c & 0xff];
@@ -74,6 +76,7 @@ public final class Ascii {
      * @param b the bytes to parse
      * @param off the start offset of the bytes
      * @param len the length of the bytes
+     * @return the long value
      * @exception NumberFormatException if the long format was invalid
      */
     public static long parseLong(byte[] b, int off, int len)

==================================================
C2BConverter.java
index 79915f7882..ce27655200 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -194,21 +194,21 @@ public final class ByteChunk implements Cloneable, Serializable {
     }
 
     /**
-     * Returns the message bytes.
+     * @return the message bytes.
      */
     public byte[] getBytes() {
         return getBuffer();
     }
 
     /**
-     * Returns the message bytes.
+     * @return the message bytes.
      */
     public byte[] getBuffer() {
         return buff;
     }
 
     /**
-     * Returns the start offset of the bytes.
+     * @return the start offset of the bytes.
      * For output this is the end of the buffer.
      */
     public int getStart() {
@@ -227,19 +227,19 @@ public final class ByteChunk implements Cloneable, Serializable {
     }
 
     /**
-     * Returns the length of the bytes.
-     * XXX need to clean this up
+     * @return the length of the bytes.
      */
     public int getLength() {
         return end-start;
     }
 
-    /** Maximum amount of data in this buffer.
-     *
-     *  If -1 or not set, the buffer will grow indefinitely.
-     *  Can be smaller than the current buffer size ( which will not shrink ).
-     *  When the limit is reached, the buffer will be flushed ( if out is set )
-     *  or throw exception.
+    /**
+     * Maximum amount of data in this buffer.
+     * If -1 or not set, the buffer will grow indefinitely.
+     * Can be smaller than the current buffer size ( which will not shrink ).
+     * When the limit is reached, the buffer will be flushed ( if out is set )
+     * or throw exception.
+     * @param limit The new limit
      */
     public void setLimit(int limit) {
         this.limit=limit;
@@ -251,15 +251,17 @@ public final class ByteChunk implements Cloneable, Serializable {
 
     /**
      * When the buffer is empty, read the data from the input channel.
+     * @param in The input channel
      */
     public void setByteInputChannel(ByteInputChannel in) {
         this.in = in;
     }
 
-    /** When the buffer is full, write the data to the output channel.
-     *         Also used when large amount of data is appended.
-     *
-     *  If not set, the buffer will grow to the limit.
+    /**
+     * When the buffer is full, write the data to the output channel.
+     * Also used when large amount of data is appended.
+     * If not set, the buffer will grow to the limit.
+     * @param out The output channel
      */
     public void setByteOutputChannel(ByteOutputChannel out) {
         this.out=out;
@@ -292,11 +294,14 @@ public final class ByteChunk implements Cloneable, Serializable {
         append( src.getBytes(), src.getStart(), src.getLength());
     }
 
-    /** Add data to the buffer
+    /**
+     * Add data to the buffer.
+     * @param src Bytes array
+     * @param off Offset
+     * @param len Length
+     * @throws IOException Writing overflow data to the output channel failed
      */
-    public void append( byte src[], int off, int len )
-        throws IOException
-    {
+    public void append(byte src[], int off, int len) throws IOException {
         // will grow, up to limit
         makeSpace( len );
 
@@ -406,7 +411,7 @@ public final class ByteChunk implements Cloneable, Serializable {
      * Send the buffer to the sink. Called by append() when the limit is
      * reached. You can also call it explicitly to force the data to be written.
      *
-     * @throws IOException
+     * @throws IOException Writing overflow data to the output channel failed
      */
     public void flushBuffer()
         throws IOException
@@ -421,8 +426,9 @@ public final class ByteChunk implements Cloneable, Serializable {
     }
 
     /**
-     * Make space for len chars. If len is small, allocate a reserve space too.
+     * Make space for len bytes. If len is small, allocate a reserve space too.
      * Never grow bigger than limit.
+     * @param count The size
      */
     public void makeSpace(int count) {
         byte[] tmp = null;
@@ -608,6 +614,7 @@ public final class ByteChunk implements Cloneable, Serializable {
      * Returns true if the message bytes starts with the specified string.
      * @param s the string
      * @param pos The position
+     * @return <code>true</code> if the start matches
      */
     public boolean startsWithIgnoreCase(String s, int pos) {
         byte[] b = buff;

==================================================
CharChunk.java
index e87852c0a8..d1185e82f4 100644
--- a/java/org/apache/tomcat/util/buf/C2BConverter.java
+++ b/java/org/apache/tomcat/util/buf/C2BConverter.java
@@ -63,6 +63,7 @@ public final class C2BConverter {
      *
      * @param cc char input
      * @param bc byte output
+     * @throws IOException An encoding error occurred
      */
     public void convert(CharChunk cc, ByteChunk bc)
             throws IOException {

==================================================
MessageBytes.java
index 959dd50e43..96c6724125 100644
--- a/java/org/apache/tomcat/util/buf/CharChunk.java
+++ b/java/org/apache/tomcat/util/buf/CharChunk.java
@@ -142,12 +142,13 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
         hasHashCode = false;
     }
 
-    /** Maximum amount of data in this buffer.
-     *
-     *  If -1 or not set, the buffer will grow indefinitely.
-     *  Can be smaller than the current buffer size ( which will not shrink ).
-     *  When the limit is reached, the buffer will be flushed ( if out is set )
-     *  or throw exception.
+    /**
+     * Maximum amount of data in this buffer.
+     * If -1 or not set, the buffer will grow indefinitely.
+     * Can be smaller than the current buffer size ( which will not shrink ).
+     * When the limit is reached, the buffer will be flushed ( if out is set )
+     * or throw exception.
+     * @param limit The new limit
      */
     public void setLimit(int limit) {
         this.limit=limit;
@@ -159,15 +160,17 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
 
     /**
      * When the buffer is empty, read the data from the input channel.
+     * @param in The input channel
      */
     public void setCharInputChannel(CharInputChannel in) {
         this.in = in;
     }
 
-    /** When the buffer is full, write the data to the output channel.
-     *         Also used when large amount of data is appended.
-     *
-     *  If not set, the buffer will grow to the limit.
+    /**
+     * When the buffer is full, write the data to the output channel.
+     * Also used when large amount of data is appended.
+     * If not set, the buffer will grow to the limit.
+     * @param out The output channel
      */
     public void setCharOutputChannel(CharOutputChannel out) {
         this.out=out;
@@ -185,7 +188,7 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
     /**
-     * Returns the start offset of the bytes.
+     * @return the start offset of the chars.
      * For output this is the end of the buffer.
      */
     public int getStart() {
@@ -197,14 +200,14 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
     /**
-     * Returns the start offset of the bytes.
+     * @param off The offset
      */
     public void setOffset(int off) {
         start=off;
     }
 
     /**
-     * Returns the length of the bytes.
+     * @return the length of the bytes.
      */
     public int getLength() {
         return end-start;
@@ -239,7 +242,12 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
         append( src.getBuffer(), src.getOffset(), src.getLength());
     }
 
-    /** Add data to the buffer
+    /**
+     * Add data to the buffer.
+     * @param src Char array
+     * @param off Offset
+     * @param len Length
+     * @throws IOException Writing overflow data to the output channel failed
      */
     public void append( char src[], int off, int len )
         throws IOException
@@ -309,13 +317,21 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
 
-    /** Append a string to the buffer
+    /**
+     * Append a string to the buffer.
+     * @param s The string
+     * @throws IOException Writing overflow data to the output channel failed
      */
     public void append(String s) throws IOException {
         append(s, 0, s.length());
     }
 
-    /** Append a string to the buffer
+    /**
+     * Append a string to the buffer.
+     * @param s The string
+     * @param off Offset
+     * @param len Length
+     * @throws IOException Writing overflow data to the output channel failed
      */
     public void append(String s, int off, int len) throws IOException {
         if (s==null) {
@@ -392,8 +408,10 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
         end=start;
     }
 
-    /** Make space for len chars. If len is small, allocate
-     *        a reserve space too. Never grow bigger than limit.
+    /**
+     * Make space for len chars. If len is small, allocate
+     * a reserve space too. Never grow bigger than limit.
+     * @param count The size
      */
     public void makeSpace(int count)
     {
@@ -472,7 +490,7 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     /**
      * Compares the message bytes to the specified String object.
      * @param s the String to compare
-     * @return true if the comparison succeeded, false otherwise
+     * @return <code>true</code> if the comparison succeeded, <code>false</code> otherwise
      */
     public boolean equals(String s) {
         char[] c = buff;
@@ -492,7 +510,7 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     /**
      * Compares the message bytes to the specified String object.
      * @param s the String to compare
-     * @return true if the comparison succeeded, false otherwise
+     * @return <code>true</code> if the comparison succeeded, <code>false</code> otherwise
      */
     public boolean equalsIgnoreCase(String s) {
         char[] c = buff;
@@ -533,8 +551,8 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
     /**
-     * Returns true if the message bytes starts with the specified string.
-     * @param s the string
+     * @return <code>true</code> if the message bytes starts with the specified string.
+     * @param s The string
      */
     public boolean startsWith(String s) {
         char[] c = buff;
@@ -552,8 +570,9 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
     /**
-     * Returns true if the message bytes starts with the specified string.
-     * @param s the string
+     * @return <code>true</code> if the message bytes starts with the specified string.
+     * @param s The string
+     * @param pos The position at which the comparison will be made
      */
     public boolean startsWithIgnoreCase(String s, int pos) {
         char[] c = buff;
@@ -572,8 +591,8 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
 
 
     /**
-     * Returns true if the message bytes end with the specified string.
-     * @param s the string
+     * @return <code>true</code> if the message bytes end with the specified string.
+     * @param s The string
      */
     public boolean endsWith(String s) {
         char[] c = buff;
@@ -619,8 +638,9 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
     /**
-     * Returns true if the message bytes starts with the specified string.
+     * @return <code>true</code> if the message bytes starts with the specified string.
      * @param c the character
+     * @param starting Start position
      */
     public int indexOf(char c, int starting) {
         int ret = indexOf( buff, start+starting, end, c );

==================================================
StringCache.java
index a89fc09272..65778f23e6 100644
--- a/java/org/apache/tomcat/util/buf/MessageBytes.java
+++ b/java/org/apache/tomcat/util/buf/MessageBytes.java
@@ -73,7 +73,9 @@ public final class MessageBytes implements Cloneable, Serializable {
     private MessageBytes() {
     }
 
-    /** Construct a new MessageBytes instance
+    /**
+     * Construct a new MessageBytes instance.
+     * @return the instance
      */
     public static MessageBytes newInstance() {
         return factory.newInstance();
@@ -119,9 +121,9 @@ public final class MessageBytes implements Cloneable, Serializable {
     /**
      * Sets the content to be a char[]
      *
-     * @param c the bytes
-     * @param off the start offset of the bytes
-     * @param len the length of the bytes
+     * @param c the chars
+     * @param off the start offset of the chars
+     * @param len the length of the chars
      */
     public void setChars( char[] c, int off, int len ) {
         charC.setChars( c, off, len );
@@ -133,6 +135,7 @@ public final class MessageBytes implements Cloneable, Serializable {
 
     /**
      * Set the content to be a string
+     * @param s The string
      */
     public void setString( String s ) {
         strValue=s;
@@ -149,7 +152,9 @@ public final class MessageBytes implements Cloneable, Serializable {
 
     // -------------------- Conversion and getters --------------------
 
-    /** Compute the string value
+    /**
+     * Compute the string value.
+     * @return the string
      */
     @Override
     public String toString() {
@@ -171,8 +176,10 @@ public final class MessageBytes implements Cloneable, Serializable {
     }
 
     //----------------------------------------
-    /** Return the type of the original content. Can be
-     *  T_STR, T_BYTES, T_CHARS or T_NULL
+    /**
+     * Return the type of the original content. Can be
+     * T_STR, T_BYTES, T_CHARS or T_NULL
+     * @return the type
      */
     public int getType() {
         return type;
@@ -181,6 +188,7 @@ public final class MessageBytes implements Cloneable, Serializable {
     /**
      * Returns the byte chunk, representing the byte[] and offset/length.
      * Valid only if T_BYTES or after a conversion was made.
+     * @return the byte chunk
      */
     public ByteChunk getByteChunk() {
         return byteC;
@@ -189,6 +197,7 @@ public final class MessageBytes implements Cloneable, Serializable {
     /**
      * Returns the char chunk, representing the char[] and offset/length.
      * Valid only if T_CHARS or after a conversion was made.
+     * @return the char chunk
      */
     public CharChunk getCharChunk() {
         return charC;
@@ -197,13 +206,14 @@ public final class MessageBytes implements Cloneable, Serializable {
     /**
      * Returns the string value.
      * Valid only if T_STR or after a conversion was made.
+     * @return the string
      */
     public String getString() {
         return strValue;
     }
 
     /**
-     * Get the Charset used for string&lt;-&gt;byte conversions.
+     * @return the Charset used for string&lt;-&gt;byte conversions.
      */
     public Charset getCharset() {
         return byteC.getCharset();
@@ -211,12 +221,14 @@ public final class MessageBytes implements Cloneable, Serializable {
 
     /**
      * Set the Charset used for string&lt;-&gt;byte conversions.
+     * @param charset The charset
      */
     public void setCharset(Charset charset) {
         byteC.setCharset(charset);
     }
 
-    /** Do a char-&gt;byte conversion.
+    /**
+     * Do a char-&gt;byte conversion.
      */
     public void toBytes() {
         if (!byteC.isNull()) {
@@ -230,8 +242,9 @@ public final class MessageBytes implements Cloneable, Serializable {
         byteC.setBytes(result.array(), result.arrayOffset(), result.limit());
     }
 
-    /** Convert to char[] and fill the CharChunk.
-     *  XXX Not optimized - it converts to String first.
+    /**
+     * Convert to char[] and fill the CharChunk.
+     * XXX Not optimized - it converts to String first.
      */
     public void toChars() {
         if( ! charC.isNull() ) {
@@ -250,6 +263,7 @@ public final class MessageBytes implements Cloneable, Serializable {
      * Returns the length of the original buffer.
      * Note that the length in bytes may be different from the length
      * in chars.
+     * @return the length
      */
     public int getLength() {
         if(type==T_BYTES) {
@@ -273,7 +287,7 @@ public final class MessageBytes implements Cloneable, Serializable {
     /**
      * Compares the message bytes to the specified String object.
      * @param s the String to compare
-     * @return true if the comparison succeeded, false otherwise
+     * @return <code>true</code> if the comparison succeeded, <code>false</code> otherwise
      */
     public boolean equals(String s) {
         switch (type) {
@@ -294,7 +308,7 @@ public final class MessageBytes implements Cloneable, Serializable {
     /**
      * Compares the message bytes to the specified String object.
      * @param s the String to compare
-     * @return true if the comparison succeeded, false otherwise
+     * @return <code>true</code> if the comparison succeeded, <code>false</code> otherwise
      */
     public boolean equalsIgnoreCase(String s) {
         switch (type) {
@@ -354,7 +368,7 @@ public final class MessageBytes implements Cloneable, Serializable {
 
 
     /**
-     * Returns true if the message bytes starts with the specified string.
+     * @return <code>true</code> if the message bytes starts with the specified string.
      * @param s the string
      * @param pos The start position
      */
@@ -438,8 +452,10 @@ public final class MessageBytes implements Cloneable, Serializable {
         return upper.indexOf( sU, starting );
     }
 
-    /** Copy the src into this MessageBytes, allocating more space if
-     *  needed
+    /**
+     * Copy the src into this MessageBytes, allocating more space if needed.
+     * @param src The source
+     * @throws IOException Writing overflow data to the output channel failed
      */
     public void duplicate( MessageBytes src ) throws IOException
     {
@@ -471,7 +487,9 @@ public final class MessageBytes implements Cloneable, Serializable {
     private long longValue;
     private boolean hasLongValue=false;
 
-    /** Set the buffer to the representation of an long
+    /**
+     * Set the buffer to the representation of an long.
+     * @param l The long
      */
     public void setLong(long l) {
         byteC.allocate(32, 64);
@@ -513,7 +531,9 @@ public final class MessageBytes implements Cloneable, Serializable {
     }
 
     // Used for headers conversion
-    /** Convert the buffer to an long, cache the value
+    /**
+     * Convert the buffer to an long, cache the value.
+     * @return the long value
      */
     public long getLong() {
         if( hasLongValue ) {

==================================================
UDecoder.java
index d0d1ad891e..cd599aab23 100644
--- a/java/org/apache/tomcat/util/buf/StringCache.java
+++ b/java/org/apache/tomcat/util/buf/StringCache.java
@@ -450,7 +450,9 @@ public class StringCache {
 
     /**
      * Compare given byte chunk with byte array.
-     * Return -1, 0 or +1 if inferior, equal, or superior to the String.
+     * @param name The name to compare
+     * @param compareTo The compared to data
+     * @return -1, 0 or +1 if inferior, equal, or superior to the String.
      */
     protected static final int compare(ByteChunk name, byte[] compareTo) {
         int result = 0;
@@ -484,6 +486,8 @@ public class StringCache {
     /**
      * Find an entry given its name in the cache and return the associated
      * String.
+     * @param name The name to find
+     * @return the corresponding value
      */
     protected static final String find(ByteChunk name) {
         int pos = findClosest(name, bcCache, bcCache.length);
@@ -500,6 +504,10 @@ public class StringCache {
      * Find an entry given its name in a sorted array of map elements.
      * This will return the index for the closest inferior or equal item in the
      * given array.
+     * @param name The name to find
+     * @param array The array in which to look
+     * @param len The effective length of the array
+     * @return the position of the best match
      */
     protected static final int findClosest(ByteChunk name, ByteEntry[] array,
             int len) {
@@ -545,7 +553,9 @@ public class StringCache {
 
     /**
      * Compare given char chunk with char array.
-     * Return -1, 0 or +1 if inferior, equal, or superior to the String.
+     * @param name The name to compare
+     * @param compareTo The compared to data
+     * @return -1, 0 or +1 if inferior, equal, or superior to the String.
      */
     protected static final int compare(CharChunk name, char[] compareTo) {
         int result = 0;
@@ -579,6 +589,8 @@ public class StringCache {
     /**
      * Find an entry given its name in the cache and return the associated
      * String.
+     * @param name The name to find
+     * @return the corresponding value
      */
     protected static final String find(CharChunk name) {
         int pos = findClosest(name, ccCache, ccCache.length);
@@ -594,6 +606,10 @@ public class StringCache {
      * Find an entry given its name in a sorted array of map elements.
      * This will return the index for the closest inferior or equal item in the
      * given array.
+     * @param name The name to find
+     * @param array The array in which to look
+     * @param len The effective length of the array
+     * @return the position of the best match
      */
     protected static final int findClosest(CharChunk name, CharEntry[] array,
             int len) {

==================================================
DigesterFactory.java
index c07d2d5d00..1cb5e84b58 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -71,7 +71,11 @@ public final class UDecoder {
     {
     }
 
-    /** URLDecode, will modify the source.
+    /**
+     * URLDecode, will modify the source.
+     * @param mb The URL encoded bytes
+     * @param query <code>true</code> if this is a query string
+     * @throws IOException Invalid %xx URL encoding
      */
     public void convert( ByteChunk mb, boolean query )
         throws IOException
@@ -129,7 +133,11 @@ public final class UDecoder {
     // -------------------- Additional methods --------------------
     // XXX What do we do about charset ????
 
-    /** In-buffer processing - the buffer will be modified
+    /**
+     * In-buffer processing - the buffer will be modified.
+     * @param mb The URL encoded chars
+     * @param query <code>true</code> if this is a query string
+     * @throws IOException Invalid %xx URL encoding
      */
     public void convert( CharChunk mb, boolean query )
         throws IOException
@@ -183,7 +191,11 @@ public final class UDecoder {
         mb.setEnd( idx );
     }
 
-    /** URLDecode, will modify the source
+    /**
+     * URLDecode, will modify the source
+     * @param mb The URL encoded String, bytes or chars
+     * @param query <code>true</code> if this is a query string
+     * @throws IOException Invalid %xx URL encoding
      */
     public void convert(MessageBytes mb, boolean query)
         throws IOException
@@ -212,8 +224,12 @@ public final class UDecoder {
         }
     }
 
-    // XXX Old code, needs to be replaced !!!!
-    //
+    /**
+     * %xx decoding of a string. FIXME: this is inefficient.
+     * @param str The URL encoded string
+     * @param query <code>true</code> if this is a query string
+     * @return the decoded string
+     */
     public final String convert(String str, boolean query)
     {
         if (str == null) {
@@ -284,7 +300,7 @@ public final class UDecoder {
      * servers. It is assumed the string is not a query string.
      *
      * @param str The url-encoded string
-     *
+     * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
      */
@@ -300,6 +316,7 @@ public final class UDecoder {
      * @param str The url-encoded string
      * @param enc The encoding to use; if null, the default encoding is used. If
      * an unsupported encoding is specified null will be returned
+     * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
      */
@@ -315,6 +332,7 @@ public final class UDecoder {
      * @param enc The encoding to use; if null, the default encoding is used. If
      * an unsupported encoding is specified null will be returned
      * @param isQuery Is this a query string being processed
+     * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
      */
@@ -350,6 +368,7 @@ public final class UDecoder {
      * @param enc The encoding to use; if null, the default encoding is used. If
      * an unsupported encoding is specified null will be returned
      * @param isQuery Is this a query string being processed
+     * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
      */

==================================================
