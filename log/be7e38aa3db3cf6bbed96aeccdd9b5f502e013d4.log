be7e38aa3db3cf6bbed96aeccdd9b5f502e013d4
==================================================
Fix remaining Eclipse warnings in o.a.juli
==================================================
Mark Emlyn
==================================================
Fri Dec 17 22:09:28 2010 +0000
==================================================
DirectJDKLog.java
Fix remaining Eclipse warnings in o.a.juli

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1050504 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LogFactory.java
index 71d3784338..5da0ceac13 100644
--- a/java/org/apache/juli/logging/DirectJDKLog.java
+++ b/java/org/apache/juli/logging/DirectJDKLog.java
@@ -71,74 +71,92 @@ class DirectJDKLog implements Log {
         logger=Logger.getLogger(name);        
     }
     
+    @Override
     public final boolean isErrorEnabled() {
         return logger.isLoggable(Level.SEVERE);
     }
     
+    @Override
     public final boolean isWarnEnabled() {
         return logger.isLoggable(Level.WARNING); 
     }
     
+    @Override
     public final boolean isInfoEnabled() {
         return logger.isLoggable(Level.INFO);
     }
     
+    @Override
     public final boolean isDebugEnabled() {
         return logger.isLoggable(Level.FINE);
     }
     
+    @Override
     public final boolean isFatalEnabled() {
         return logger.isLoggable(Level.SEVERE);
     }
     
+    @Override
     public final boolean isTraceEnabled() {
         return logger.isLoggable(Level.FINER);
     }
     
+    @Override
     public final void debug(Object message) {
         log(Level.FINE, String.valueOf(message), null);
     }
     
+    @Override
     public final void debug(Object message, Throwable t) {
         log(Level.FINE, String.valueOf(message), t);
     }
     
+    @Override
     public final void trace(Object message) {
         log(Level.FINER, String.valueOf(message), null);
     }
     
+    @Override
     public final void trace(Object message, Throwable t) {
         log(Level.FINER, String.valueOf(message), t);
     }
     
+    @Override
     public final void info(Object message) {
         log(Level.INFO, String.valueOf(message), null);
     }
     
+    @Override
     public final void info(Object message, Throwable t) {        
         log(Level.INFO, String.valueOf(message), t);
     }
     
+    @Override
     public final void warn(Object message) {
         log(Level.WARNING, String.valueOf(message), null);
     }
     
+    @Override
     public final void warn(Object message, Throwable t) {
         log(Level.WARNING, String.valueOf(message), t);
     }
     
+    @Override
     public final void error(Object message) {
         log(Level.SEVERE, String.valueOf(message), null);
     }
     
+    @Override
     public final void error(Object message, Throwable t) {
         log(Level.SEVERE, String.valueOf(message), t);
     }
     
+    @Override
     public final void fatal(Object message) {
         log(Level.SEVERE, String.valueOf(message), null);
     }
     
+    @Override
     public final void fatal(Object message, Throwable t) {
         log(Level.SEVERE, String.valueOf(message), t);
     }    

==================================================
