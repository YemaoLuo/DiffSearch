0b8cef2989cba9c68490370f9033cb9b0c0ede70
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57178
==================================================
Mark Thomas
==================================================
Thu Jan 22 10:00:53 2015 +0000
==================================================
CorsFilter.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57178
Origin values of "null" should be included if "*" is allowed.
This closes #16

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1653797 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCorsFilter.java
index 4db5f41207..e477f03452 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -800,6 +800,7 @@ public final class CorsFilter implements Filter {
      * Checks if a given origin is valid or not. Criteria:
      * <ul>
      * <li>If an encoded character is present in origin, it's not valid.</li>
+     * <li>If origin is "null", it's valid.</li>
      * <li>Origin should be a valid {@link URI}</li>
      * </ul>
      *
@@ -812,6 +813,11 @@ public final class CorsFilter implements Filter {
             return false;
         }
 
+        // "null" is a valid origin
+        if ("null".equals(origin)) {
+            return true;
+        }
+
         URI originURI;
 
         try {

==================================================
TesterFilterConfigs.java
index 83aa7193cb..1357e56064 100644
--- a/test/org/apache/catalina/filters/TestCorsFilter.java
+++ b/test/org/apache/catalina/filters/TestCorsFilter.java
@@ -497,10 +497,10 @@ public class TestCorsFilter {
     }
 
     /*
-     * Negative test, when a CORS request arrives, with a null origin.
+     * Negative test, when a CORS request arrives, with no origin header.
      */
     @Test
-    public void testDoFilterNullOrigin() throws IOException, ServletException {
+    public void testDoFilterNoOrigin() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
 
         request.setMethod("POST");
@@ -536,6 +536,58 @@ public class TestCorsFilter {
                 response.getStatus());
     }
 
+    /*
+     * A CORS request arrives with a "null" origin which is allowed by default.
+     */
+    @Test
+    public void testDoFilterNullOriginAllowedByDefault() throws IOException,
+            ServletException {
+        TesterHttpServletRequest request = new TesterHttpServletRequest();
+
+        request.setMethod("POST");
+        request.setContentType("text/plain");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "null");
+        TesterHttpServletResponse response = new TesterHttpServletResponse();
+
+        CorsFilter corsFilter = new CorsFilter();
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType =
+                corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
+
+        corsFilter.doFilter(request, response, filterChain);
+
+        Assert.assertTrue(((Boolean) request.getAttribute(
+                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+    }
+
+    /*
+     * A CORS request arrives with a "null" origin which is explicitly allowed
+     * by configuration.
+     */
+    @Test
+    public void testDoFilterNullOriginAllowedByConfiguration() throws
+            IOException, ServletException {
+        TesterHttpServletRequest request = new TesterHttpServletRequest();
+
+        request.setMethod("POST");
+        request.setContentType("text/plain");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "null");
+        TesterHttpServletResponse response = new TesterHttpServletResponse();
+
+        CorsFilter corsFilter = new CorsFilter();
+        corsFilter.init(
+                TesterFilterConfigs.getFilterConfigSpecificOriginNullAllowed());
+        CorsFilter.CORSRequestType requestType =
+                corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
+
+        corsFilter.doFilter(request, response, filterChain);
+
+        Assert.assertTrue(((Boolean) request.getAttribute(
+                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+    }
+
     @Test(expected = ServletException.class)
     public void testDoFilterNullRequestNullResponse() throws IOException,
             ServletException {
@@ -1036,6 +1088,24 @@ public class TestCorsFilter {
                 response.getStatus());
     }
 
+    /*
+     * Tests for failure, when the 'null' origin is used, and it's not in the
+     * list of allowed origins.
+     */
+    @Test
+    public void testCheckNullOriginNotAllowed() throws ServletException,
+            IOException {
+        TesterHttpServletRequest request = new TesterHttpServletRequest();
+        TesterHttpServletResponse response = new TesterHttpServletResponse();
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "null");
+        request.setMethod("GET");
+        CorsFilter corsFilter = new CorsFilter();
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
+        corsFilter.doFilter(request, response, filterChain);
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
+                response.getStatus());
+    }
+
     /*
      * Tests for failure, when a different sub-domain is used, that's not in the
      * allowed list of origins.

==================================================
