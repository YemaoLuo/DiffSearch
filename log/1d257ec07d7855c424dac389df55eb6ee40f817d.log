1d257ec07d7855c424dac389df55eb6ee40f817d
==================================================
Support non-blocking IO for WebSockets (between messages) if the
==================================================
Mark Emlyn
==================================================
Tue Feb 28 21:22:19 2012 +0000
==================================================
StreamInbound.java
Support non-blocking IO for WebSockets (between messages) if the
endpoint supports it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1294839 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrame.java
index f8539c0d06..6072e7d9dc 100644
--- a/java/org/apache/catalina/websocket/StreamInbound.java
+++ b/java/org/apache/catalina/websocket/StreamInbound.java
@@ -65,14 +65,11 @@ public abstract class StreamInbound implements UpgradeInbound {
         // Must be start the start of a message (which may consist of multiple
         // frames)
 
-        // TODO - change this test to check if there is data to read
-        while (true) {
-            try {
-                // New WsInputStream for each message (not each frame)
-                WsInputStream wsIs =
-                        new WsInputStream(processor, getWsOutbound());
-                WsFrame frame = wsIs.getFrame();
+        WsInputStream wsIs = new WsInputStream(processor, getWsOutbound());
+        WsFrame frame = wsIs.nextFrame(true);
 
+        while (frame != null) {
+            try {
                 // TODO User defined extensions may define values for rsv
                 if (frame.getRsv() > 0) {
                     getWsOutbound().close(1002, null);
@@ -113,9 +110,9 @@ public abstract class StreamInbound implements UpgradeInbound {
                 getWsOutbound().close(1002, null);
                 return SocketState.CLOSED;
             }
+            frame = wsIs.nextFrame(false);
         }
-        // TODO Required once while loop is fixed
-        // return SocketState.UPGRADED;
+        return SocketState.UPGRADED;
     }
 
 

==================================================
WsInputStream.java
index 84f6d58407..d3abbd9905 100644
--- a/java/org/apache/catalina/websocket/WsFrame.java
+++ b/java/org/apache/catalina/websocket/WsFrame.java
@@ -46,6 +46,7 @@ public class WsFrame {
      * Create the new WebSocket frame, reading data from the processor as
      * necessary.
      *
+     * @param first     First byte of data for this frame
      * @param processor Processor associated with the WebSocket connection on
      *                  which the frame has been sent
      *
@@ -53,9 +54,10 @@ public class WsFrame {
      *                      exception will trigger the closing of the WebSocket
      *                      connection.
      */
-    public WsFrame(UpgradeProcessor<?> processor) throws IOException {
+    private WsFrame(byte first,
+            UpgradeProcessor<?> processor) throws IOException {
 
-        int b = blockingRead(processor);
+        int b = first & 0xFF;
         fin = (b & 0x80) > 0;
         rsv = (b & 0x70) >>> 4;
         opCode = (byte) (b & 0x0F);
@@ -184,4 +186,37 @@ public class WsFrame {
         }
         bb.flip();
     }
+
+
+    /**
+     * Read the next WebSocket frame, reading data from the processor as
+     * necessary.
+     *
+     * @param processor Processor associated with the WebSocket connection on
+     *                  which the frame has been sent
+     *
+     * @param block Should this method block until a frame is presented if no
+     *              data is currently available to process. Note that is a
+     *              single byte is available, this method will block until the
+     *              complete frame (excluding payload for non-control frames) is
+     *              available.
+     *
+     * @throws IOException  If a problem occurs processing the frame. Any
+     *                      exception will trigger the closing of the WebSocket
+     *                      connection.
+     */
+    public static WsFrame nextFrame(UpgradeProcessor<?> processor,
+            boolean block) throws IOException {
+
+        byte[] first = new byte[1];
+        int read = processor.read(block, first, 0, 1);
+        if (read == 1) {
+            return new WsFrame(first[0], processor);
+        } else if (read == 0) {
+            return null;
+        } else {
+            // TODO message
+            throw new IOException();
+        }
+    }
 }

==================================================
