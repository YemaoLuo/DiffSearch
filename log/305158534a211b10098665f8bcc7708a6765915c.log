305158534a211b10098665f8bcc7708a6765915c
==================================================
Remove duplicate utility method.
==================================================
Mark Thomas
==================================================
Sat Dec 20 20:32:39 2014 +0000
==================================================
Response.java
Remove duplicate utility method.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1647051 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HTMLManagerServlet.java
index 91dc589d37..0d58c53258 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -45,12 +45,12 @@ import org.apache.catalina.Globals;
 import org.apache.catalina.Session;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.security.SecurityUtil;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.SessionConfig;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.UEncoder;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
+import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.http.parser.MediaTypeCache;
 import org.apache.tomcat.util.net.URL;
@@ -1297,7 +1297,7 @@ public class Response
             if (getContext().getSendRedirectBody()) {
                 PrintWriter writer = getWriter();
                 writer.print(sm.getString("coyoteResponse.sendRedirect.note",
-                        RequestUtil.filter(absolute)));
+                        HttpMessages.filter(absolute)));
                 flushBuffer();
             }
         } catch (IllegalArgumentException e) {

==================================================
ManagerServlet.java
index 83d33ed311..3097ceb42d 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -49,9 +49,9 @@ import org.apache.catalina.manager.util.BaseSessionComparator;
 import org.apache.catalina.manager.util.ReverseComparator;
 import org.apache.catalina.manager.util.SessionUtils;
 import org.apache.catalina.util.ContextName;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.URLEncoder;
+import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -356,7 +356,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
         if (message == null || message.length() == 0) {
             args[1] = "OK";
         } else {
-            args[1] = RequestUtil.filter(message);
+            args[1] = HttpMessages.filter(message);
         }
         writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));
 
@@ -447,19 +447,19 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
                 args = new Object[7];
                 args[0] = "<a href=\"" + URL_ENCODER.encode(contextPath + "/")
-                        + "\">" + RequestUtil.filter(displayPath) + "</a>";
+                        + "\">" + HttpMessages.filter(displayPath) + "</a>";
                 if ("".equals(ctxt.getWebappVersion())) {
                     args[1] = noVersion;
                 } else {
-                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());
+                    args[1] = HttpMessages.filter(ctxt.getWebappVersion());
                 }
                 if (ctxt.getDisplayName() == null) {
                     args[2] = "&nbsp;";
                 } else {
-                    args[2] = RequestUtil.filter(ctxt.getDisplayName());
+                    args[2] = HttpMessages.filter(ctxt.getDisplayName());
                 }
                 args[3] = Boolean.valueOf(ctxt.getState().isAvailable());
-                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +
+                args[4] = HttpMessages.filter(response.encodeURL(request.getContextPath() +
                      "/html/sessions?" + pathVersion));
                 Manager manager = ctxt.getManager();
                 if (manager instanceof DistributedManager && showProxySessions) {
@@ -477,19 +477,19 @@ public final class HTMLManagerServlet extends ManagerServlet {
                     (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));
 
                 args = new Object[14];
-                args[0] = RequestUtil.filter(response.encodeURL(request
+                args[0] = HttpMessages.filter(response.encodeURL(request
                         .getContextPath() + "/html/start?" + pathVersion));
                 args[1] = appsStart;
-                args[2] = RequestUtil.filter(response.encodeURL(request
+                args[2] = HttpMessages.filter(response.encodeURL(request
                         .getContextPath() + "/html/stop?" + pathVersion));
                 args[3] = appsStop;
-                args[4] = RequestUtil.filter(response.encodeURL(request
+                args[4] = HttpMessages.filter(response.encodeURL(request
                         .getContextPath() + "/html/reload?" + pathVersion));
                 args[5] = appsReload;
-                args[6] = RequestUtil.filter(response.encodeURL(request
+                args[6] = HttpMessages.filter(response.encodeURL(request
                         .getContextPath() + "/html/undeploy?" + pathVersion));
                 args[7] = appsUndeploy;
-                args[8] = RequestUtil.filter(response.encodeURL(request
+                args[8] = HttpMessages.filter(response.encodeURL(request
                         .getContextPath() + "/html/expire?" + pathVersion));
                 args[9] = appsExpire;
                 args[10] = smClient.getString(
@@ -829,14 +829,14 @@ public final class HTMLManagerServlet extends ManagerServlet {
             }
             throw new IllegalArgumentException(smClient.getString(
                     "managerServlet.invalidPath",
-                    RequestUtil.filter(path)));
+                    HttpMessages.filter(path)));
         }
 
         Context ctxt = (Context) host.findChild(cn.getName());
         if (null == ctxt) {
             throw new IllegalArgumentException(smClient.getString(
                     "managerServlet.noContext",
-                    RequestUtil.filter(cn.getDisplayName())));
+                    HttpMessages.filter(cn.getDisplayName())));
         }
         Manager manager = ctxt.getManager();
         List<Session> sessions = new ArrayList<>();

==================================================
StatusTransformer.java
index 47ec336f04..482f26c0d0 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -56,10 +56,10 @@ import org.apache.catalina.connector.Connector;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.startup.ExpandWar;
 import org.apache.catalina.util.ContextName;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.tomcat.util.Diagnostics;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -995,7 +995,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(cn.getDisplayName())));
+                        HttpMessages.filter(cn.getDisplayName())));
                 return;
             }
             // It isn't possible for the manager to reload itself
@@ -1163,13 +1163,13 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        HttpMessages.filter(displayPath)));
                 return;
             }
             Manager manager = context.getManager() ;
             if(manager == null) {
                 writer.println(smClient.getString("managerServlet.noManager",
-                        RequestUtil.filter(displayPath)));
+                        HttpMessages.filter(displayPath)));
                 return;
             }
             int maxCount = 60;
@@ -1287,7 +1287,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        HttpMessages.filter(displayPath)));
                 return;
             }
             context.start();
@@ -1332,7 +1332,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        HttpMessages.filter(displayPath)));
                 return;
             }
             // It isn't possible for the manager to stop itself
@@ -1379,13 +1379,13 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(name);
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        HttpMessages.filter(displayPath)));
                 return;
             }
 
             if (!isDeployed(name)) {
                 writer.println(smClient.getString("managerServlet.notDeployed",
-                        RequestUtil.filter(displayPath)));
+                        HttpMessages.filter(displayPath)));
                 return;
             }
 
@@ -1578,7 +1578,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         String path = null;
         if (cn != null) {
-            path = RequestUtil.filter(cn.getPath());
+            path = HttpMessages.filter(cn.getPath());
         }
         writer.println(sm.getString("managerServlet.invalidPath", path));
         return false;

==================================================
HTMLHostManagerServlet.java
index 6d97d148dc..2add1fe6ef 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -37,8 +37,8 @@ import javax.management.ObjectInstance;
 import javax.management.ObjectName;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.catalina.util.RequestUtil;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.http.HttpMessages;
 
 /**
  * This is a refactoring of the servlet to externalize
@@ -504,7 +504,7 @@ public class StatusTransformer {
                         (pName, "currentQueryString");
                     if ((queryString != null) && (!queryString.equals(""))) {
                         writer.write("?");
-                        writer.print(RequestUtil.filter(queryString));
+                        writer.print(HttpMessages.filter(queryString));
                     }
                     writer.write(" ");
                     writer.write(filter(mBeanServer.getAttribute
@@ -559,7 +559,7 @@ public class StatusTransformer {
                         (pName, "currentQueryString");
                     if ((queryString != null) && (!queryString.equals(""))) {
                         writer.write(" currentQueryString=\""
-                                     + RequestUtil.filter(queryString) + "\"");
+                                     + HttpMessages.filter(queryString) + "\"");
                     } else {
                         writer.write(" currentQueryString=\"&#63;\"");
                     }

==================================================
DefaultServlet.java
index f4319d1099..59420d6bda 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -33,8 +33,8 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Host;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
+import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -252,7 +252,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         if (message == null || message.length() == 0) {
             args[1] = "OK";
         } else {
-            args[1] = RequestUtil.filter(message);
+            args[1] = HttpMessages.filter(message);
         }
         writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));
 
@@ -310,7 +310,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
 
             if (host != null ) {
                 args = new Object[2];
-                args[0] = RequestUtil.filter(hostName);
+                args[0] = HttpMessages.filter(hostName);
                 String[] aliases = host.findAliases();
                 StringBuilder buf = new StringBuilder();
                 if (aliases.length > 0) {
@@ -324,7 +324,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
                     buf.append("&nbsp;");
                     args[1] = buf.toString();
                 } else {
-                    args[1] = RequestUtil.filter(buf.toString());
+                    args[1] = HttpMessages.filter(buf.toString());
                 }
 
                 writer.print

==================================================
MemoryUser.java
index b522adda10..0ce971ce53 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -66,9 +66,9 @@ import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.connector.RequestFacade;
 import org.apache.catalina.connector.ResponseFacade;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.URLEncoder;
+import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.security.PrivilegedGetTccl;
 import org.apache.tomcat.util.security.PrivilegedSetTccl;
@@ -1305,7 +1305,7 @@ public class DefaultServlet extends HttpServlet {
               .append("'");
 
             sb.append(">");
-            sb.append(RequestUtil.filter(entry));
+            sb.append(HttpMessages.filter(entry));
             if (childResource.isDirectory())
                 sb.append("/");
             sb.append("</entry>");
@@ -1467,7 +1467,7 @@ public class DefaultServlet extends HttpServlet {
             if (childResource.isDirectory())
                 sb.append("/");
             sb.append("\"><tt>");
-            sb.append(RequestUtil.filter(entry));
+            sb.append(HttpMessages.filter(entry));
             if (childResource.isDirectory())
                 sb.append("/");
             sb.append("</tt></a></td>\r\n");

==================================================
RequestUtil.java
index c54e97ddcd..79887e10ab 100644
--- a/java/org/apache/catalina/users/MemoryUser.java
+++ b/java/org/apache/catalina/users/MemoryUser.java
@@ -25,7 +25,7 @@ import java.util.Iterator;
 import org.apache.catalina.Group;
 import org.apache.catalina.Role;
 import org.apache.catalina.UserDatabase;
-import org.apache.catalina.util.RequestUtil;
+import org.apache.tomcat.util.http.HttpMessages;
 
 /**
  * <p>Concrete implementation of {@link org.apache.catalina.User} for the
@@ -258,13 +258,13 @@ public class MemoryUser extends AbstractUser {
     public String toXml() {
 
         StringBuilder sb = new StringBuilder("<user username=\"");
-        sb.append(RequestUtil.filter(username));
+        sb.append(HttpMessages.filter(username));
         sb.append("\" password=\"");
-        sb.append(RequestUtil.filter(password));
+        sb.append(HttpMessages.filter(password));
         sb.append("\"");
         if (fullName != null) {
             sb.append(" fullName=\"");
-            sb.append(RequestUtil.filter(fullName));
+            sb.append(HttpMessages.filter(fullName));
             sb.append("\"");
         }
         synchronized (groups) {
@@ -277,7 +277,7 @@ public class MemoryUser extends AbstractUser {
                         sb.append(',');
                     }
                     n++;
-                    sb.append(RequestUtil.filter(values.next().getGroupname()));
+                    sb.append(HttpMessages.filter(values.next().getGroupname()));
                 }
                 sb.append("\"");
             }
@@ -292,7 +292,7 @@ public class MemoryUser extends AbstractUser {
                         sb.append(',');
                     }
                     n++;
-                    sb.append(RequestUtil.filter(values.next().getRolename()));
+                    sb.append(HttpMessages.filter(values.next().getRolename()));
                 }
                 sb.append("\"");
             }
@@ -309,11 +309,11 @@ public class MemoryUser extends AbstractUser {
     public String toString() {
 
         StringBuilder sb = new StringBuilder("User username=\"");
-        sb.append(RequestUtil.filter(username));
+        sb.append(HttpMessages.filter(username));
         sb.append("\"");
         if (fullName != null) {
             sb.append(", fullName=\"");
-            sb.append(RequestUtil.filter(fullName));
+            sb.append(HttpMessages.filter(fullName));
             sb.append("\"");
         }
         synchronized (groups) {
@@ -326,7 +326,7 @@ public class MemoryUser extends AbstractUser {
                         sb.append(',');
                     }
                     n++;
-                    sb.append(RequestUtil.filter(values.next().getGroupname()));
+                    sb.append(HttpMessages.filter(values.next().getGroupname()));
                 }
                 sb.append("\"");
             }
@@ -341,7 +341,7 @@ public class MemoryUser extends AbstractUser {
                         sb.append(',');
                     }
                     n++;
-                    sb.append(RequestUtil.filter(values.next().getRolename()));
+                    sb.append(HttpMessages.filter(values.next().getRolename()));
                 }
                 sb.append("\"");
             }

==================================================
ErrorReportValve.java
index 5bda170e9a..6ac9803764 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -44,44 +44,6 @@ public final class RequestUtil {
         StringManager.getManager("org.apache.catalina.util");
 
 
-    /**
-     * Filter the specified message string for characters that are sensitive
-     * in HTML.  This avoids potential attacks caused by including JavaScript
-     * codes in the request URL that is often reported in error messages.
-     *
-     * @param message The message string to be filtered
-     */
-    public static String filter(String message) {
-
-        if (message == null)
-            return (null);
-
-        char content[] = new char[message.length()];
-        message.getChars(0, message.length(), content, 0);
-        StringBuilder result = new StringBuilder(content.length + 50);
-        for (int i = 0; i < content.length; i++) {
-            switch (content[i]) {
-            case '<':
-                result.append("&lt;");
-                break;
-            case '>':
-                result.append("&gt;");
-                break;
-            case '&':
-                result.append("&amp;");
-                break;
-            case '"':
-                result.append("&quot;");
-                break;
-            default:
-                result.append(content[i]);
-            }
-        }
-        return (result.toString());
-
-    }
-
-
     /**
      * Append request parameters from the specified String to the specified
      * Map.  It is presumed that the specified Map is not accessed from any

==================================================
HttpMessages.java
index 7b1dabd202..11e3f67887 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -26,10 +26,10 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -149,12 +149,12 @@ public class ErrorReportValve extends ValveBase {
         if (statusCode < 400 || response.getContentWritten() > 0 || !response.setErrorReported()) {
             return;
         }
-        String message = RequestUtil.filter(response.getMessage());
+        String message = HttpMessages.filter(response.getMessage());
         if (message == null) {
             if (throwable != null) {
                 String exceptionMessage = throwable.getMessage();
                 if (exceptionMessage != null && exceptionMessage.length() > 0) {
-                    message = RequestUtil.filter((new Scanner(exceptionMessage)).nextLine());
+                    message = HttpMessages.filter((new Scanner(exceptionMessage)).nextLine());
                 }
             }
             if (message == null) {
@@ -227,7 +227,7 @@ public class ErrorReportValve extends ValveBase {
                 sb.append("<p><b>");
                 sb.append(smClient.getString("errorReportValve.exception"));
                 sb.append("</b></p><pre>");
-                sb.append(RequestUtil.filter(stackTrace));
+                sb.append(HttpMessages.filter(stackTrace));
                 sb.append("</pre>");
 
                 int loops = 0;
@@ -237,7 +237,7 @@ public class ErrorReportValve extends ValveBase {
                     sb.append("<p><b>");
                     sb.append(smClient.getString("errorReportValve.rootCause"));
                     sb.append("</b></p><pre>");
-                    sb.append(RequestUtil.filter(stackTrace));
+                    sb.append(HttpMessages.filter(stackTrace));
                     sb.append("</pre>");
                     // In case root cause is somehow heavily nested
                     rootCause = rootCause.getCause();

==================================================
