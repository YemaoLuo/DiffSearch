40af416974bc1bb337dd26c8886c9d1e629a9773
==================================================
Whitespace removal from remaining /test
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:23:07 2011 +0000
==================================================
TestBeanELResolverVarargsInvocation.java
Whitespace removal from remaining /test

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187806 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCompositeELResolver.java
index d7abfa1540..2e0b8eda81 100644
--- a/test/javax/el/TestBeanELResolverVarargsInvocation.java
+++ b/test/javax/el/TestBeanELResolverVarargsInvocation.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
TestPageContext.java
index 0925eb9f7d..23344a544c 100644
--- a/test/javax/el/TestCompositeELResolver.java
+++ b/test/javax/el/TestCompositeELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -39,16 +39,16 @@ public class TestCompositeELResolver extends TomcatBaseTest {
         // app dir is relative to server home
         StandardContext ctxt = (StandardContext) tomcat.addWebapp(null,
                 "/test", appDir.getAbsolutePath());
-        
+
         // This test needs the JSTL libraries
         File lib = new File("webapps/examples/WEB-INF/lib");
         ctxt.setAliases("/WEB-INF/lib=" + lib.getCanonicalPath());
-        
+
         tomcat.start();
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug50408.jsp", new ByteChunk(), null);
-        
+
         assertEquals(HttpServletResponse.SC_OK, rc);
     }
 }

==================================================
TestDigestAuthenticator.java
index c1b29d9b21..bbd5c64526 100644
--- a/test/javax/servlet/jsp/TestPageContext.java
+++ b/test/javax/servlet/jsp/TestPageContext.java
@@ -36,12 +36,12 @@ public class TestPageContext extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug49nnn/bug49196.jsp");
-        
+
         String result = res.toString();
         assertTrue(result.contains("OK"));
     }

==================================================
TesterDigestAuthenticatorPerformance.java
index 40714d8aba..aaf3582ac3 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -184,8 +184,8 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
 
         Map<String,List<String>> respHeaders =
             new HashMap<String,List<String>>();
-        
-        // The first request will fail - but we need to extract the nonce 
+
+        // The first request will fail - but we need to extract the nonce
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + uri, bc, reqHeaders,
                 respHeaders);
@@ -209,7 +209,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         }
         rc = getUrl("http://localhost:" + getPort() + uri, bc, reqHeaders,
                 null);
-        
+
         if (req2expect200) {
             assertEquals(200, rc);
             assertEquals("OK", bc.toString());
@@ -217,7 +217,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
             assertEquals(401, rc);
             assertNull(bc.toString());
         }
-        
+
         // Third request should succeed if we increment nc
         auth.clear();
         bc.recycle();
@@ -227,7 +227,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
                 qop));
         rc = getUrl("http://localhost:" + getPort() + uri, bc, reqHeaders,
                 null);
-        
+
         if (req3expect200) {
             assertEquals(200, rc);
             assertEquals("OK", bc.toString());
@@ -243,11 +243,11 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
 
         // Configure a context with digest auth and a single protected resource
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         Context ctxt = tomcat.addContext(CONTEXT_PATH,
                 System.getProperty("java.io.tmpdir"));
-        
+
         // Add protected servlet
         Tomcat.addServlet(ctxt, "TesterServlet", new TesterServlet());
         ctxt.addServletMapping(URI, "TesterServlet");
@@ -257,13 +257,13 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         sc.addAuthRole(ROLE);
         sc.addCollection(collection);
         ctxt.addConstraint(sc);
-        
+
         // Configure the Realm
         MapRealm realm = new MapRealm();
         realm.addUser(USER, PWD);
         realm.addUserRole(USER, ROLE);
         ctxt.setRealm(realm);
-        
+
         // Configure the authenticator
         LoginConfig lc = new LoginConfig();
         lc.setAuthMethod("DIGEST");
@@ -271,13 +271,13 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         ctxt.setLoginConfig(lc);
         ctxt.getPipeline().addValve(new DigestAuthenticator());
     }
-    
+
     protected static String getNonce(Map<String,List<String>> respHeaders) {
         List<String> authHeaders =
             respHeaders.get(AuthenticatorBase.AUTH_HEADER_NAME);
         // Assume there is only one
         String authHeader = authHeaders.iterator().next();
-        
+
         int start = authHeader.indexOf("nonce=\"") + 7;
         int end = authHeader.indexOf("\"", start);
         return authHeader.substring(start, end);
@@ -288,7 +288,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
             respHeaders.get(AuthenticatorBase.AUTH_HEADER_NAME);
         // Assume there is only one
         String authHeader = authHeaders.iterator().next();
-        
+
         int start = authHeader.indexOf("opaque=\"") + 8;
         int end = authHeader.indexOf("\"", start);
         return authHeader.substring(start, end);
@@ -313,10 +313,10 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
 
         String a1 = user + ":" + realm + ":" + pwd;
         String a2 = "GET:" + uri;
-        
+
         String md5a1 = digest(a1);
         String md5a2 = digest(a2);
-        
+
         String response;
         if (qop == null) {
             response = md5a1 + ":" + nonce + ":" + md5a2;
@@ -326,7 +326,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         }
 
         String md5response = digest(response);
-        
+
         StringBuilder auth = new StringBuilder();
         auth.append("Digest username=\"");
         auth.append(user);
@@ -359,7 +359,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
 
         return auth.toString();
     }
-    
+
     private static String digest(String input) throws NoSuchAlgorithmException {
         // This is slow but should be OK as this is only a test
         MessageDigest md5 = MessageDigest.getInstance("MD5");

==================================================
TestConnector.java
index a9fc205a27..756d7ae204 100644
--- a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
+++ b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
@@ -48,18 +48,18 @@ public class TesterDigestAuthenticatorPerformance {
     private static String QOP = "auth";
 
     private DigestAuthenticator authenticator = new DigestAuthenticator();
-    
-    
+
+
     @Test
     public void testSimple() throws Exception {
         doTest(100, 1000000);
     }
 
     public void doTest(int threadCount, int requestCount) throws Exception {
-        
+
         TesterRunnable runnables[] = new TesterRunnable[threadCount];
         Thread threads[] = new Thread[threadCount];
-        
+
         // Create the runnables & threads
         for (int i = 0; i < threadCount; i++) {
             runnables[i] = new TesterRunnable(requestCount);
@@ -72,13 +72,13 @@ public class TesterDigestAuthenticatorPerformance {
         for (int i = 0; i < threadCount; i++) {
             threads[i].start();
         }
-        
+
         // Wait for the threads to finish
         for (int i = 0; i < threadCount; i++) {
             threads[i].join();
         }
-        double wallTime = System.currentTimeMillis() - start; 
-        
+        double wallTime = System.currentTimeMillis() - start;
+
         // Gather the results...
         double totalTime = 0;
         int totalSuccess = 0;
@@ -88,12 +88,12 @@ public class TesterDigestAuthenticatorPerformance {
             totalSuccess = totalSuccess + runnables[i].getSuccess();
             totalTime = totalTime + runnables[i].getTime();
         }
-        
+
         System.out.println("Average time per request (user): " +
                 totalTime/(threadCount * requestCount));
         System.out.println("Average time per request (wall): " +
                 wallTime/(threadCount * requestCount));
-        
+
         assertEquals(requestCount * threadCount, totalSuccess);
     }
 
@@ -109,28 +109,28 @@ public class TesterDigestAuthenticatorPerformance {
         Context context = new StandardContext();
         context.setName(CONTEXT_PATH);
         context.setRealm(realm);
-        
+
         // Make the Context and Realm visible to the Authenticator
         authenticator.setContainer(context);
-        
+
         // Prevent caching of cnonces so we can the same one for all requests
         authenticator.setCnonceCacheSize(0);
         authenticator.start();
     }
 
-    
+
     private class TesterRunnable implements Runnable {
 
         // Number of valid requests required
         private int requestCount;
-        
+
         private int success = 0;
         private long time = 0;
 
         private TesterDigestRequest request;
         private HttpServletResponse response;
         private LoginConfig config;
-        
+
         // All init code should be in here. run() needs to be quick
         public TesterRunnable(int requestCount) throws Exception {
             this.requestCount = requestCount;
@@ -159,7 +159,7 @@ public class TesterDigestAuthenticatorPerformance {
             }
             time = System.currentTimeMillis() - start;
         }
-        
+
         public int getSuccess() {
             return success;
         }
@@ -170,13 +170,13 @@ public class TesterDigestAuthenticatorPerformance {
 
         private String buildDigestResponse(String nonce)
                 throws NoSuchAlgorithmException {
-            
+
             String ncString = "00000001";
             String cnonce = "cnonce";
-            
+
             String a1 = USER + ":" + REALM + ":" + PWD;
             String a2 = METHOD + ":" + CONTEXT_PATH + URI;
-            
+
             MessageDigest digester = MessageDigest.getInstance("MD5");
             MD5Encoder encoder = new MD5Encoder();
 
@@ -188,7 +188,7 @@ public class TesterDigestAuthenticatorPerformance {
 
             String md5response =
                 encoder.encode(digester.digest(response.getBytes()));
-    
+
             StringBuilder auth = new StringBuilder();
             auth.append("Digest username=\"");
             auth.append(USER);
@@ -217,16 +217,16 @@ public class TesterDigestAuthenticatorPerformance {
         }
     }
 
-    
+
     private static class TesterDigestRequest extends Request {
 
         private String authHeader = null;
-        
+
         @Override
         public String getRemoteAddr() {
             return "127.0.0.1";
         }
-        
+
         public void setAuthHeader(String authHeader) {
             this.authHeader = authHeader;
         }
@@ -254,6 +254,6 @@ public class TesterDigestAuthenticatorPerformance {
         public String getRequestURI() {
             return CONTEXT_PATH + URI;
         }
-        
+
     }
 }

==================================================
TestCoyoteAdapter.java
index 97e1b4cd36..87835fa448 100644
--- a/test/org/apache/catalina/connector/TestConnector.java
+++ b/test/org/apache/catalina/connector/TestConnector.java
@@ -30,14 +30,14 @@ import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
- * Test cases for {@link Connector}. 
+ * Test cases for {@link Connector}.
  */
 public class TestConnector extends TomcatBaseTest {
 
     @Test
     public void testStop() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         Context root = tomcat.addContext("", TEMP_DIR);
         Wrapper w =
             Tomcat.addServlet(root, "tester", new TesterServlet());
@@ -45,15 +45,15 @@ public class TestConnector extends TomcatBaseTest {
         root.addServletMapping("/", "tester");
 
         Connector connector = tomcat.getConnector();
-        
+
         tomcat.start();
 
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + "/", bc, null, null);
-        
+
         assertEquals(200, rc);
         assertEquals("OK", bc.toString());
-        
+
         rc = -1;
         bc.recycle();
 

==================================================
TestKeepAliveCount.java
index 8e05a00678..51b066ca8e 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapter.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapter.java
@@ -81,17 +81,17 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
     public void testPathParamsRedirect() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         File docBase = new File(System.getProperty("java.io.tmpdir"));
-        
+
         // Create the folder that will trigger the redirect
         File foo = new File(docBase, "foo");
         addDeleteOnTearDown(foo);
         if (!foo.mkdirs() && !foo.isDirectory()) {
             fail("Unable to create foo directory in docBase");
         }
-        
+
         Context ctx = tomcat.addContext("", docBase.getAbsolutePath());
 
         Tomcat.addServlet(ctx, "servlet", new PathParamServlet());
@@ -113,7 +113,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, "servlet", new PathParamServlet());
@@ -134,7 +134,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         private static final long serialVersionUID = 1L;
 
         @Override
-        protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
             resp.setContentType("text/plain");
             PrintWriter pw = resp.getWriter();
@@ -167,7 +167,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("/testapp", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, "servlet", new PathParamServlet());

==================================================
TestMaxConnections.java
index 0c34b0ebb1..224e97d793 100644
--- a/test/org/apache/catalina/connector/TestKeepAliveCount.java
+++ b/test/org/apache/catalina/connector/TestKeepAliveCount.java
@@ -45,16 +45,16 @@ public class TestKeepAliveCount extends TomcatBaseTest {
         TestKeepAliveClient client = new TestKeepAliveClient();
         client.doHttp11Request();
     }
- 
-    
+
+
     private class TestKeepAliveClient extends SimpleHttpClient {
 
 
         private boolean init;
-        
+
         private synchronized void init() {
             if (init) return;
-            
+
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
@@ -65,14 +65,14 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             tomcat.getConnector().setProperty("port", "8080");
             init = true;
         }
-        
+
         private void doHttp10Request() throws Exception {
             Tomcat tomcat = getTomcatInstance();
             init();
             tomcat.start();
             // Open connection
             connect();
-            
+
             // Send request in two parts
             String[] request = new String[1];
             request[0] =
@@ -86,24 +86,24 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             tomcat.stop();
             assertTrue(passed);
         }
-        
+
         private void doHttp11Request() throws Exception {
             Tomcat tomcat = getTomcatInstance();
             init();
             tomcat.start();
             // Open connection
             connect();
-            
+
             // Send request in two parts
             String[] request = new String[1];
             request[0] =
-                "GET /test HTTP/1.1" + CRLF + 
+                "GET /test HTTP/1.1" + CRLF +
                 "Host: localhost" + CRLF +
                 "Connection: Keep-Alive" + CRLF+
                 "Keep-Alive: 300"+ CRLF+ CRLF;
-            
+
             setRequest(request);
-            
+
             for (int i=0; i<5; i++) {
                 processRequest(false); // blocks until response has been read
                 assertTrue(getResponseLine()!=null && getResponseLine().trim().startsWith("HTTP/1.1 200"));
@@ -115,15 +115,15 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             tomcat.stop();
             assertTrue(passed);
         }
-        
+
         @Override
         public boolean isResponseBodyOK() {
             return true;
         }
-        
+
     }
-    
-    
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -133,7 +133,7 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             resp.setContentLength(0);
             resp.flushBuffer();
         }
-        
+
     }
-    
+
 }

==================================================
TestRequest.java
index 5723b02fd8..e0ec38d659 100644
--- a/test/org/apache/catalina/connector/TestMaxConnections.java
+++ b/test/org/apache/catalina/connector/TestMaxConnections.java
@@ -58,7 +58,7 @@ public class TestMaxConnections extends TomcatBaseTest {
             if (t[i].passed) passcount++;
             if (t[i].connectfailed) connectfail++;
         }
-        
+
         assertTrue("The number of successful requests should have been 4-5, actual "+passcount,4==passcount || 5==passcount);
         System.out.println("There were [" + connectfail + "] connection failures");
     }
@@ -79,7 +79,7 @@ public class TestMaxConnections extends TomcatBaseTest {
         }
     }
 
-    
+
     private synchronized void init() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         Context root = tomcat.addContext("", SimpleHttpClient.TEMP_DIR);
@@ -98,11 +98,11 @@ public class TestMaxConnections extends TomcatBaseTest {
     private static class TestClient extends SimpleHttpClient {
 
         private void doHttp10Request() throws Exception {
-            
+
             long start = System.currentTimeMillis();
             // Open connection
             connect(connectTimeout,soTimeout);
-            
+
             // Send request in two parts
             String[] request = new String[1];
             request[0] =
@@ -118,15 +118,15 @@ public class TestMaxConnections extends TomcatBaseTest {
             reset();
             assertTrue(passed);
         }
-        
+
         @Override
         public boolean isResponseBodyOK() {
             return true;
         }
-        
+
     }
-    
-    
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -136,12 +136,12 @@ public class TestMaxConnections extends TomcatBaseTest {
             try {
                 Thread.sleep(TestMaxConnections.soTimeout*4/5);
             }catch (InterruptedException x) {
-                
+
             }
             resp.setContentLength(0);
             resp.flushBuffer();
         }
-        
+
     }
-    
+
 }

==================================================
TestResponse.java
index 0114c5531f..3bba436833 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -46,13 +46,13 @@ import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
- * Test case for {@link Request}. 
+ * Test case for {@link Request}.
  */
 public class TestRequest extends TomcatBaseTest {
 
     /**
      * Test case for https://issues.apache.org/bugzilla/show_bug.cgi?id=37794
-     * POST parameters are not returned from a call to 
+     * POST parameters are not returned from a call to
      * any of the {@link HttpServletRequest} getParameterXXX() methods if the
      * request is chunked.
      */
@@ -72,9 +72,9 @@ public class TestRequest extends TomcatBaseTest {
         client.reset();
         client.doRequest(1, false); // 1 byte - too small should fail
         assertTrue(client.isResponse500());
-        
+
         client.reset();
-        
+
         // Edge cases around actual content length
         client.reset();
         client.doRequest(6, false); // Too small should fail
@@ -87,7 +87,7 @@ public class TestRequest extends TomcatBaseTest {
         client.doRequest(8, false); // 1 extra - should pass
         assertTrue(client.isResponse200());
         assertTrue(client.isResponseBodyOK());
-        
+
         // Much larger
         client.reset();
         client.doRequest(8096, false); // Plenty of space - should pass
@@ -100,9 +100,9 @@ public class TestRequest extends TomcatBaseTest {
         assertTrue(client.isResponse200());
         assertTrue(client.isResponseBodyOK());
     }
-    
+
     private static class Bug37794Servlet extends HttpServlet {
-        
+
         private static final long serialVersionUID = 1L;
 
         /**
@@ -113,9 +113,9 @@ public class TestRequest extends TomcatBaseTest {
                 throws ServletException, IOException {
             // Just echo the parameters and values back as plain text
             resp.setContentType("text/plain");
-            
+
             PrintWriter out = resp.getWriter();
-            
+
             // Assume one value per attribute
             Enumeration<String> names = req.getParameterNames();
             while (names.hasMoreElements()) {
@@ -124,36 +124,36 @@ public class TestRequest extends TomcatBaseTest {
             }
         }
     }
-    
+
     /**
      * Bug 37794 test client.
      */
     private class Bug37794Client extends SimpleHttpClient {
-        
+
         private boolean init;
-        
+
         private synchronized void init() throws Exception {
             if (init) return;
-            
+
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug37794", new Bug37794Servlet());
             root.addServletMapping("/test", "Bug37794");
             tomcat.start();
-            
+
             init = true;
         }
-        
+
         private Exception doRequest(int postLimit, boolean ucChunkedHead) {
             Tomcat tomcat = getTomcatInstance();
-            
+
             try {
                 init();
                 tomcat.getConnector().setMaxPostSize(postLimit);
-                
+
                 // Open connection
                 connect();
-                
+
                 // Send request in two parts
                 String[] request = new String[2];
                 if (ucChunkedHead) {
@@ -180,10 +180,10 @@ public class TestRequest extends TomcatBaseTest {
                     "&b=2" + CRLF +
                     "0" + CRLF +
                     CRLF;
-                
+
                 setRequest(request);
                 processRequest(); // blocks until response has been read
-                
+
                 // Close the connection
                 disconnect();
             } catch (Exception e) {
@@ -205,7 +205,7 @@ public class TestRequest extends TomcatBaseTest {
             }
             return true;
         }
-        
+
     }
 
     /**
@@ -217,21 +217,21 @@ public class TestRequest extends TomcatBaseTest {
     public void testBug38113() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         // Add the Servlet
         Tomcat.addServlet(ctx, "servlet", new EchoQueryStringServlet());
         ctx.addServletMapping("/", "servlet");
-        
+
         tomcat.start();
 
         // No query string
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("QueryString=null", res.toString());
-        
+
         // Query string
         res = getUrl("http://localhost:" + getPort() + "/?a=b");
         assertEquals("QueryString=a=b", res.toString());
@@ -240,7 +240,7 @@ public class TestRequest extends TomcatBaseTest {
         res = getUrl("http://localhost:" + getPort() + "/?");
         assertEquals("QueryString=", res.toString());
     }
-    
+
     private static final class EchoQueryStringServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -262,56 +262,56 @@ public class TestRequest extends TomcatBaseTest {
     public void testLoginLogout() throws Exception{
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         LoginConfig config = new LoginConfig();
         config.setAuthMethod("BASIC");
         ctx.setLoginConfig(config);
         ctx.getPipeline().addValve(new BasicAuthenticator());
-        
+
         Tomcat.addServlet(ctx, "servlet", new LoginLogoutServlet());
         ctx.addServletMapping("/", "servlet");
-        
+
         MapRealm realm = new MapRealm();
         realm.addUser(LoginLogoutServlet.USER, LoginLogoutServlet.PWD);
         ctx.setRealm(realm);
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals(LoginLogoutServlet.OK, res.toString());
     }
-    
+
     private static final class LoginLogoutServlet extends HttpServlet {
         private static final long serialVersionUID = 1L;
         private static final String USER = "user";
         private static final String PWD = "pwd";
         private static final String OK = "OK";
-        
+
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
-            
+
             req.login(USER, PWD);
-            
+
             if (!req.getRemoteUser().equals(USER))
                 throw new ServletException();
             if (!req.getUserPrincipal().getName().equals(USER))
                 throw new ServletException();
-            
+
             req.logout();
-            
+
             if (req.getRemoteUser() != null)
                 throw new ServletException();
             if (req.getUserPrincipal() != null)
                 throw new ServletException();
-            
+
             resp.getWriter().write(OK);
         }
-        
+
     }
 
     @Test
@@ -336,7 +336,7 @@ public class TestRequest extends TomcatBaseTest {
         Tomcat.addServlet(root, "Bug37794", new Bug37794Servlet());
         root.addServletMapping("/", "Bug37794");
         tomcat.start();
-        
+
         HttpURLConnection conn = getConnection();
         conn.setChunkedStreamingMode(8 * 1024);
         InputStream is = conn.getInputStream();
@@ -425,7 +425,7 @@ public class TestRequest extends TomcatBaseTest {
      *
      */
     private static class EchoParametersServlet extends HttpServlet {
-        
+
         private static final long serialVersionUID = 1L;
 
         /**
@@ -440,11 +440,11 @@ public class TestRequest extends TomcatBaseTest {
             resp.setCharacterEncoding("UTF-8");
 
             PrintWriter out = resp.getWriter();
-            
+
             TreeMap<String,String[]> parameters = new TreeMap<String,String[]>(req.getParameterMap());
 
             boolean first = true;
-            
+
             for(String name: parameters.keySet()) {
                 String[] values = req.getParameterValues(name);
 
@@ -469,26 +469,26 @@ public class TestRequest extends TomcatBaseTest {
     private class Bug48692Client extends SimpleHttpClient {
 
         private boolean init;
-        
+
         private synchronized void init() throws Exception {
             if (init) return;
-            
+
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "EchoParameters", new EchoParametersServlet());
             root.addServletMapping("/echo", "EchoParameters");
             tomcat.start();
-            
+
             init = true;
         }
-        
+
         private Exception doRequest(String method,
                                     String queryString,
                                     String contentType,
                                     String requestBody,
                                     boolean allowBody) {
             Tomcat tomcat = getTomcatInstance();
-            
+
             try {
                 init();
                 if(allowBody)
@@ -521,7 +521,7 @@ public class TestRequest extends TomcatBaseTest {
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
-                
+
                 // Close the connection
                 disconnect();
             } catch (Exception e) {

==================================================
TestResponsePerformance.java
index 176166ae38..40db1aab41 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -40,7 +40,7 @@ import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
- * Test case for {@link Request}. 
+ * Test case for {@link Request}.
  */
 public class TestResponse extends TomcatBaseTest {
 
@@ -48,7 +48,7 @@ public class TestResponse extends TomcatBaseTest {
     public void testBug49598() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         File docBase = new File(System.getProperty("java.io.tmpdir"));
         Context ctx = tomcat.addContext("", docBase.getAbsolutePath());
@@ -57,10 +57,10 @@ public class TestResponse extends TomcatBaseTest {
         ctx.addServletMapping("/", "servlet");
 
         tomcat.start();
-        
+
         Map<String,List<String>> headers = new HashMap<String,List<String>>();
         getUrl("http://localhost:" + getPort() + "/", new ByteChunk(), headers);
-        
+
         // Check for headers without a name
         for (Map.Entry<String,List<String>> header : headers.entrySet()) {
             if (header.getKey() == null) {
@@ -73,7 +73,7 @@ public class TestResponse extends TomcatBaseTest {
                 fail("Null header name detected for value " + values);
             }
         }
-        
+
         // Check for exactly one Set-Cookie header
         int count = 0;
         for (String headerName : headers.keySet()) {
@@ -83,7 +83,7 @@ public class TestResponse extends TomcatBaseTest {
         }
         assertEquals(1, count);
     }
-    
+
     private static final class Bug49598Servlet extends HttpServlet {
         private static final long serialVersionUID = 1L;
 
@@ -94,6 +94,6 @@ public class TestResponse extends TomcatBaseTest {
             session.invalidate();
             req.getSession(true);
         }
-        
+
     }
 }

==================================================
TestDefaultInstanceManager.java
index 69ff9fc8e1..a4becd9bdf 100644
--- a/test/org/apache/catalina/connector/TestResponsePerformance.java
+++ b/test/org/apache/catalina/connector/TestResponsePerformance.java
@@ -27,26 +27,26 @@ public class TestResponsePerformance {
         Request req = new TesterToAbsoluteRequest();
         Response resp = new Response();
         resp.setRequest(req);
-        
+
         long start = System.currentTimeMillis();
         for (int i = 0; i < 100000; i++) {
             resp.toAbsolute("bar.html");
         }
         long homebrew = System.currentTimeMillis() - start;
-        
+
         start = System.currentTimeMillis();
         for (int i = 0; i < 100000; i++) {
             URI base = URI.create("http://localhost:8080/foo.html");
             base.resolve(URI.create("bar.html")).toASCIIString();
         }
         long uri = System.currentTimeMillis() - start;
-        
+
         System.out.println("Current 'home-brew': " + homebrew +
                 "ms, Using URI: " + uri + "ms");
         assertTrue(homebrew < uri);
     }
 
-    
+
     private static class TesterToAbsoluteRequest extends Request {
 
         @Override

==================================================
TestNamingContextListener.java
index e2c1befccb..bf219c1968 100644
--- a/test/org/apache/catalina/core/TestDefaultInstanceManager.java
+++ b/test/org/apache/catalina/core/TestDefaultInstanceManager.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,7 +30,7 @@ public class TestDefaultInstanceManager extends TomcatBaseTest {
 
     @Test
     public void testClassUnloading() throws Exception {
-        
+
         DefaultInstanceManager instanceManager = doClassUnloadingPrep();
 
         // Request a JSP page (that doesn't load any tag libraries etc.)
@@ -39,13 +39,13 @@ public class TestDefaultInstanceManager extends TomcatBaseTest {
         getUrl("http://localhost:" + getPort() + "/test/annotations.jsp");
         // Request a second JSP (again, no tag libraries etc.)
         getUrl("http://localhost:" + getPort() + "/test/bug36923.jsp");
-        
+
         // Check the number of classes in the cache
         int count = instanceManager.getAnnotationCacheSize();
 
         // Request a third JSP (again, no tag libraries etc.)
         getUrl("http://localhost:" + getPort() + "/test/bug51544.jsp");
-        
+
         // Force a GC to clear out unloaded class (first JSP)
         System.gc();
 
@@ -66,21 +66,21 @@ public class TestDefaultInstanceManager extends TomcatBaseTest {
 
     private DefaultInstanceManager doClassUnloadingPrep() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Create the context (don't use addWebapp as we want to modify the
         // JSP Servlet settings).
         File appDir = new File("test/webapp-3.0");
         StandardContext ctxt = (StandardContext) tomcat.addContext(
                 null, "/test", appDir.getAbsolutePath());
-        
+
         // Configure the defaults and then tweak the JSP servlet settings
         // Note: Min value for maxLoadedJsps is 2
         Tomcat.initWebappDefaults(ctxt);
         Wrapper w = (Wrapper) ctxt.findChild("jsp");
         w.addInitParameter("maxLoadedJsps", "2");
-        
+
         tomcat.start();
-        
+
         return (DefaultInstanceManager) ctxt.getInstanceManager();
     }
 }

==================================================
TestStandardContext.java
index 43a1719dd1..630a0e626e 100644
--- a/test/org/apache/catalina/core/TestNamingContextListener.java
+++ b/test/org/apache/catalina/core/TestNamingContextListener.java
@@ -36,17 +36,17 @@ public class TestNamingContextListener extends TomcatBaseTest {
     private static final String JNDI_NAME = "TestName";
     private static final String JNDI_VALUE= "Test Value";
 
-    /** 
+    /**
      * Test JNDI is available to ServletContextListeners.
      */
     @Test
     public void testBug49132() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        org.apache.catalina.Context ctx = 
+        org.apache.catalina.Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // Enable JNDI - it is disabled by default
         tomcat.enableNaming();
 
@@ -55,9 +55,9 @@ public class TestNamingContextListener extends TomcatBaseTest {
         environment.setName(JNDI_NAME);
         environment.setValue(JNDI_VALUE);
         ctx.getNamingResources().addEnvironment(environment);
-        
+
         ctx.addApplicationListener(Bug49132Listener.class.getName());
-        
+
         tomcat.start();
 
         assertEquals(LifecycleState.STARTED, ctx.getState());

==================================================
TestStandardContextAliases.java
index 2f9cc899ed..4775f72de7 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -71,17 +71,17 @@ public class TestStandardContext extends TomcatBaseTest {
 
     @Test
     public void testBug46243() throws Exception {
-        
+
         // Set up a container
         Tomcat tomcat = getTomcatInstance();
-        
+
         File docBase = new File(tomcat.getHost().getAppBaseFile(), "ROOT");
         if (!docBase.mkdirs() && !docBase.isDirectory()) {
             fail("Unable to create docBase");
         }
-        
+
         Context root = tomcat.addContext("", "ROOT");
-       
+
         // Add test a filter that fails
         FilterDef filterDef = new FilterDef();
         filterDef.setFilterClass(Bug46243Filter.class.getName());
@@ -96,9 +96,9 @@ public class TestStandardContext extends TomcatBaseTest {
         // it works (although it shouldn't)
         Tomcat.addServlet(root, "Bug46243", new HelloWorldServlet());
         root.addServletMapping("/", "Bug46243");
-        
+
         tomcat.start();
-        
+
         // Configure the client
         Bug46243Client client = new Bug46243Client();
         client.setPort(getPort());
@@ -108,7 +108,7 @@ public class TestStandardContext extends TomcatBaseTest {
         client.processRequest();
         assertTrue(client.isResponse404());
     }
-    
+
     private static final class Bug46243Client extends SimpleHttpClient {
         @Override
         public boolean isResponseBodyOK() {
@@ -116,9 +116,9 @@ public class TestStandardContext extends TomcatBaseTest {
             return true;
         }
     }
-    
+
     public static final class Bug46243Filter implements Filter {
-        
+
         @Override
         public void destroy() {
             // NOOP
@@ -135,18 +135,18 @@ public class TestStandardContext extends TomcatBaseTest {
         public void init(FilterConfig filterConfig) throws ServletException {
             throw new ServletException("Init fail", new ClassNotFoundException());
         }
-        
+
     }
 
     @Test
     public void testBug49922() throws Exception {
-        
+
         // Set up a container
         Tomcat tomcat = getTomcatInstance();
-        
+
         File root = new File("test/webapp-3.0");
         tomcat.addWebapp("", root.getAbsolutePath());
-        
+
         tomcat.start();
         ByteChunk result;
 
@@ -187,9 +187,9 @@ public class TestStandardContext extends TomcatBaseTest {
         assertEquals("IncludeFilterTarget", result.toString());
     }
 
-    
+
     public static final class Bug49922Filter implements Filter {
-        
+
         @Override
         public void destroy() {
             // NOOP
@@ -208,7 +208,7 @@ public class TestStandardContext extends TomcatBaseTest {
             // NOOP
         }
     }
-    
+
     public static final class Bug49922ForwardServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -218,7 +218,7 @@ public class TestStandardContext extends TomcatBaseTest {
                 throws ServletException, IOException {
             req.getRequestDispatcher("/bug49922/target").forward(req, resp);
         }
-        
+
     }
 
     public static final class Bug49922IncludeServlet extends HttpServlet {
@@ -232,7 +232,7 @@ public class TestStandardContext extends TomcatBaseTest {
             resp.getWriter().print("Include");
             req.getRequestDispatcher("/bug49922/target").include(req, resp);
         }
-        
+
     }
 
     public static final class Bug49922TargetServlet extends HttpServlet {
@@ -245,7 +245,7 @@ public class TestStandardContext extends TomcatBaseTest {
             resp.setContentType("text/plain");
             resp.getWriter().print("Target");
         }
-        
+
     }
 
     public static final class Bug49922Servlet extends HttpServlet {
@@ -258,7 +258,7 @@ public class TestStandardContext extends TomcatBaseTest {
             resp.setContentType("text/plain");
             resp.getWriter().print("Servlet");
         }
-        
+
     }
 
     @Test
@@ -285,20 +285,20 @@ public class TestStandardContext extends TomcatBaseTest {
         // Add ServletContainerInitializer
         ServletContainerInitializer sci = new Bug50015SCI();
         ctx.addServletContainerInitializer(sci, null);
-        
+
         // Start the context
         tomcat.start();
-        
+
         // Request the first servlet
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + "/bug50015",
                 bc, null);
-        
+
         // Check for a 401
         assertNotSame("OK", bc.toString());
         assertEquals(401, rc);
     }
-    
+
     public static final class Bug50015SCI
             implements ServletContainerInitializer {
 
@@ -309,7 +309,7 @@ public class TestStandardContext extends TomcatBaseTest {
             Servlet s = new Bug50015Servlet();
             ServletRegistration.Dynamic sr = ctx.addServlet("bug50015", s);
             sr.addMapping("/bug50015");
-            
+
             // Limit access to users in the Tomcat role
             HttpConstraintElement hce = new HttpConstraintElement(
                     TransportGuarantee.NONE, "tomcat");
@@ -317,7 +317,7 @@ public class TestStandardContext extends TomcatBaseTest {
             sr.setServletSecurity(sse);
         }
     }
-    
+
     public static final class Bug50015Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -328,7 +328,7 @@ public class TestStandardContext extends TomcatBaseTest {
             resp.setContentType("text/plain");
             resp.getWriter().write("OK");
         }
-        
+
     }
 
     @Test
@@ -353,17 +353,17 @@ public class TestStandardContext extends TomcatBaseTest {
         // Add ServletContainerInitializer
         Bug51376SCI sci = new Bug51376SCI(loadOnStartUp);
         ctx.addServletContainerInitializer(sci, null);
-        
+
         // Start the context
         tomcat.start();
-        
+
         // Stop the context
         ctx.stop();
-        
+
         // Make sure that init() and destroy() were called correctly
         assertTrue(sci.getServlet().isOk());
     }
-    
+
     public static final class Bug51376SCI
             implements ServletContainerInitializer {
 
@@ -390,14 +390,14 @@ public class TestStandardContext extends TomcatBaseTest {
             }
         }
     }
-    
+
     public static final class Bug51376Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
 
         private Boolean initOk = null;
         private Boolean destoryOk = null;
-        
+
         @Override
         public void init() {
             if (initOk == null && destoryOk == null) {
@@ -422,7 +422,7 @@ public class TestStandardContext extends TomcatBaseTest {
             resp.setContentType("text/plain");
             resp.getWriter().write("OK");
         }
-        
+
         protected boolean isOk() {
             if (initOk != null && initOk.booleanValue() && destoryOk != null &&
                     destoryOk.booleanValue()) {
@@ -495,7 +495,7 @@ public class TestStandardContext extends TomcatBaseTest {
             resp.setCharacterEncoding("UTF-8");
 
             PrintWriter out = resp.getWriter();
-            
+
             out.println("parts=" + (null == req.getParts()
                                     ? "null"
                                     : Integer.valueOf(req.getParts().size())));
@@ -517,7 +517,7 @@ public class TestStandardContext extends TomcatBaseTest {
 
         private synchronized void init() throws Exception {
             if (init) return;
-            
+
             Tomcat tomcat = getTomcatInstance();
             context = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(context, "regular", new Bug49711Servlet());
@@ -530,10 +530,10 @@ public class TestStandardContext extends TomcatBaseTest {
             context.addServletMapping("/regular", "regular");
             context.addServletMapping("/multipart", "multipart");
             tomcat.start();
-            
+
             init = true;
         }
-        
+
         private Exception doRequest(String uri,
                                     boolean allowCasualMultipart,
                                     boolean makeMultipartRequest) {
@@ -582,7 +582,7 @@ public class TestStandardContext extends TomcatBaseTest {
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
-                
+
                 // Close the connection
                 disconnect();
             } catch (Exception e) {

==================================================
TestStandardContextResources.java
index 28859fe9c7..e6d94e8bae 100644
--- a/test/org/apache/catalina/core/TestStandardContextAliases.java
+++ b/test/org/apache/catalina/core/TestStandardContextAliases.java
@@ -43,21 +43,21 @@ public class TestStandardContextAliases extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        StandardContext ctx = (StandardContext) 
+        StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         File lib = new File("webapps/examples/WEB-INF/lib");
         ctx.setAliases("/WEB-INF/lib=" + lib.getCanonicalPath());
-        
+
         Tomcat.addServlet(ctx, "test", new TestServlet());
         ctx.addServletMapping("/", "test");
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
 
         String result = res.toString();
-        
+
         assertTrue(result.indexOf("00-PASS") > -1);
         assertTrue(result.indexOf("01-PASS") > -1);
         assertTrue(result.indexOf("02-PASS") > -1);
@@ -74,28 +74,28 @@ public class TestStandardContextAliases extends TomcatBaseTest {
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
-            
+
             resp.setContentType("text/plain");
-            
+
             ServletContext context = getServletContext();
-            
+
             // Check resources individually
             URL url = context.getResource("/WEB-INF/lib/jstl.jar");
             if (url != null) {
                 resp.getWriter().write("00-PASS\n");
             }
-            
+
             url = context.getResource("/WEB-INF/lib/standard.jar");
             if (url != null) {
                 resp.getWriter().write("01-PASS\n");
             }
-            
+
             // Check a directory listing
             Set<String> libs = context.getResourcePaths("/WEB-INF/lib");
             if (libs == null) {
                 return;
             }
-            
+
             if (!libs.contains("/WEB-INF/lib/jstl.jar")) {
                 return;
             }
@@ -105,6 +105,6 @@ public class TestStandardContextAliases extends TomcatBaseTest {
 
             resp.getWriter().write("02-PASS\n");
         }
-        
+
     }
 }

==================================================
TestStandardContextValve.java
index 1478fe3fa9..4f83922f71 100644
--- a/test/org/apache/catalina/core/TestStandardContextResources.java
+++ b/test/org/apache/catalina/core/TestStandardContextResources.java
@@ -145,7 +145,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         "<p>resourceB.jsp in resources.jar</p>");
 
         ctx.stop();
-        
+
         LifecycleListener[] listener1 = ctx.findLifecycleListeners();
         // change ordering and reload
         ContextConfig config1 = new ContextConfig() {
@@ -167,12 +167,12 @@ public class TestStandardContextResources extends TomcatBaseTest {
         ctx.addServletMapping("/getresource", "getresource");
 
         ctx.start();
-        
+
         assertPageContains("/test/getresource?path=/resourceF.jsp",
         "<p>resourceF.jsp in resources2.jar</p>");
         assertPageContains("/test/getresource?path=/resourceB.jsp",
         "<p>resourceB.jsp in resources2.jar</p>");
- 
+
     }
 
     @Test
@@ -183,7 +183,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         // app dir is relative to server home
         StandardContext ctx = (StandardContext) tomcat.addWebapp(null, "/test",
                 appDir.getAbsolutePath());
-        
+
         Tomcat.addServlet(ctx, "getresource", new GetResourceServlet());
         ctx.addServletMapping("/getresource", "getresource");
 
@@ -252,7 +252,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         int sc = getUrl("http://localhost:" + getPort() + pageUrl, res, null);
 
         assertEquals(expectedStatus, sc);
-        
+
         if (expectedStatus == 200) {
             String result = res.toString();
             assertTrue(result, result.indexOf(expectedBody) > 0);

==================================================
TestStandardWrapper.java
index 87fb50f4de..b0657fdb39 100644
--- a/test/org/apache/catalina/core/TestStandardContextValve.java
+++ b/test/org/apache/catalina/core/TestStandardContextValve.java
@@ -49,7 +49,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
 
         // Traces order of events across multiple components
         StringBuilder trace = new StringBuilder();
-        
+
         //Add the error page
         Tomcat.addServlet(ctx, "errorPage", new Bug51653ErrorPage(trace));
         ctx.addServletMapping("/error", "errorPage");
@@ -96,7 +96,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
 
         // Traces order of events across multiple components
         StringBuilder trace = new StringBuilder();
-        
+
         // Add the page that generates the error
         Tomcat.addServlet(ctx, "test", new Bug51653ErrorTrigger());
         ctx.addServletMapping("/test", "test");
@@ -159,7 +159,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
             sb.append("Error");
-            
+
             resp.setContentType("text/plain");
             resp.getWriter().write("Error");
         }
@@ -178,7 +178,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
         public void requestInitialized(ServletRequestEvent sre) {
             sb.append("Init");
         }
-        
+
         @Override
         public void requestDestroyed(ServletRequestEvent sre) {
             sb.append("Destroy");

==================================================
TestSwallowAbortedUploads.java
index 92d6788f98..ce95d653ff 100644
--- a/test/org/apache/catalina/core/TestStandardWrapper.java
+++ b/test/org/apache/catalina/core/TestStandardWrapper.java
@@ -101,18 +101,18 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0-fragments");
         tomcat.addWebapp(null, "", appDir.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         ByteChunk bc = new ByteChunk();
         int rc;
         rc = getUrl("http://localhost:" + getPort() +
                 "/testStandardWrapper/securityAnnotationsWebXmlPriority",
                 bc, null, null);
-        
+
         assertNull(bc.toString());
         assertEquals(403, rc);
     }
@@ -122,18 +122,18 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0");
         tomcat.addWebapp(null, "", appDir.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         ByteChunk bc = new ByteChunk();
         int rc;
         rc = getUrl("http://localhost:" + getPort() +
                 "/testStandardWrapper/securityAnnotationsMetaDataPriority",
                 bc, null, null);
-        
+
         assertEquals("OK", bc.toString());
         assertEquals(200, rc);
     }
@@ -152,17 +152,17 @@ public class TestStandardWrapper extends TomcatBaseTest {
     public void testSecurityAnnotationsNoWebXmlConstraints() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0-servletsecurity");
         tomcat.addWebapp(null, "", appDir.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         ByteChunk bc = new ByteChunk();
         int rc;
         rc = getUrl("http://localhost:" + getPort() + "/",
                 bc, null, null);
-        
+
         assertNull(bc.toString());
         assertEquals(403, rc);
     }
@@ -171,23 +171,23 @@ public class TestStandardWrapper extends TomcatBaseTest {
     public void testSecurityAnnotationsNoWebXmlLoginConfig() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0-servletsecurity2");
         tomcat.addWebapp(null, "", appDir.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         ByteChunk bc = new ByteChunk();
         int rc;
         rc = getUrl("http://localhost:" + getPort() + "/protected.jsp",
                 bc, null, null);
-        
+
         assertNull(bc.toString());
         assertEquals(403, rc);
 
         rc = getUrl("http://localhost:" + getPort() + "/unprotected.jsp",
                 bc, null, null);
-        
+
         assertEquals(200, rc);
         assertTrue(bc.toString().contains("00-OK"));
     }
@@ -197,21 +197,21 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         Servlet s = new DenyAllServlet();
         ServletContainerInitializer sci = new SCI(s, useCreateServlet);
         ctx.addServletContainerInitializer(sci, null);
-        
+
         tomcat.start();
-        
+
         ByteChunk bc = new ByteChunk();
         int rc;
         rc = getUrl("http://localhost:" + getPort() + "/", bc, null, null);
-        
+
         if (useCreateServlet) {
             assertNull(bc.toString());
             assertEquals(403, rc);
@@ -226,27 +226,27 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servletClassName);
         wrapper.setAsyncSupported(true);
         ctx.addServletMapping("/", "servlet");
-        
+
         if (useRole) {
             MapRealm realm = new MapRealm();
             realm.addUser("testUser", "testPwd");
             realm.addUserRole("testUser", "testRole");
             ctx.setRealm(realm);
-            
+
             ctx.setLoginConfig(new LoginConfig("BASIC", null, null, null));
             ctx.getPipeline().addValve(new BasicAuthenticator());
         }
 
         tomcat.start();
-        
+
         ByteChunk bc = new ByteChunk();
         Map<String,List<String>> reqHeaders = null;
         if (useRole) {
@@ -265,7 +265,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
             rc = getUrl("http://localhost:" + getPort() + "/", bc, reqHeaders,
                     null);
         }
-        
+
         if (expect200) {
             assertEquals("OK", bc.toString());
             assertEquals(200, rc);
@@ -281,27 +281,27 @@ public class TestStandardWrapper extends TomcatBaseTest {
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
-            
+
             resp.setContentType("text/plain");
             resp.getWriter().print("OK");
         }
-        
+
         @Override
         protected void doPost(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
             doGet(req, resp);
         }
     }
-    
+
     @ServletSecurity(@HttpConstraint(EmptyRoleSemantic.DENY))
     public static class DenyAllServlet extends TestServlet {
         private static final long serialVersionUID = 1L;
     }
-    
+
     public static class SubclassDenyAllServlet extends DenyAllServlet {
         private static final long serialVersionUID = 1L;
     }
-    
+
     @ServletSecurity(@HttpConstraint(EmptyRoleSemantic.PERMIT))
     public static class SubclassAllowAllServlet extends DenyAllServlet {
         private static final long serialVersionUID = 1L;
@@ -316,7 +316,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
     public static class MethodConstraintServlet extends TestServlet {
         private static final long serialVersionUID = 1L;
     }
-    
+
     @ServletSecurity(@HttpConstraint(rolesAllowed = "testRole"))
     public static class RoleAllowServlet extends TestServlet {
         private static final long serialVersionUID = 1L;
@@ -331,7 +331,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         private Servlet servlet;
         private boolean createServlet;
-        
+
         public SCI(Servlet servlet, boolean createServlet) {
             this.servlet = servlet;
             this.createServlet = createServlet;
@@ -341,7 +341,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
         public void onStartup(Set<Class<?>> c, ServletContext ctx)
                 throws ServletException {
             Servlet s;
-            
+
             if (createServlet) {
                 s = ctx.createServlet(servlet.getClass());
             } else {
@@ -354,7 +354,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
 
     public static final int BUG51445_THREAD_COUNT = 5;
-    
+
     public static CountDownLatch latch = null;
     public static AtomicInteger counter = new AtomicInteger(0);
 
@@ -366,12 +366,12 @@ public class TestStandardWrapper extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        StandardContext ctx = (StandardContext) 
+        StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         Tomcat.addServlet(ctx, "Bug51445", new Bug51445Servlet());
         ctx.addServletMapping("/", "Bug51445");
-        
+
         tomcat.start();
 
         // Start the threads
@@ -391,7 +391,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
         for (int i = 0; i < BUG51445_THREAD_COUNT; i ++) {
             System.out.println(threads[i].getResult());
         }
-        
+
         // Check the result
         for (int i = 0; i < BUG51445_THREAD_COUNT; i ++) {
             String[] results = threads[i].getResult().split(",");
@@ -404,21 +404,21 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
     @Test
     public void testBug51445AddChild() throws Exception {
-        
+
         latch = new CountDownLatch(BUG51445_THREAD_COUNT);
 
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        StandardContext ctx = (StandardContext) 
+        StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         StandardWrapper wrapper = new StandardWrapper();
         wrapper.setServletName("Bug51445");
         wrapper.setServletClass(Bug51445Servlet.class.getName());
         ctx.addChild(wrapper);
         ctx.addServletMapping("/", "Bug51445");
-        
+
         tomcat.start();
 
         // Start the threads
@@ -484,7 +484,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         private int data = 0;
         private int counter;
-        
+
         public Bug51445Servlet() {
             // Use this rather than hashCode since in some environments,
             // multiple instances of this object were created with the same
@@ -497,7 +497,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
                 throws ServletException, IOException {
 
             boolean latchAwaitResult = false;
-            
+
             // Ensure all threads have their own instance of the servlet
             latch.countDown();
             try {

==================================================
TestSecurityConstraint.java
index 8d38f84e6d..6a323ad1a5 100644
--- a/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
+++ b/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
@@ -291,12 +291,12 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
                 String content = new String(sb.toString().getBytes("UTF-8"),
                         "ASCII");
 
-                request = new String[] { "POST http://localhost:" + getPort() + URI + " HTTP/1.1" + CRLF 
+                request = new String[] { "POST http://localhost:" + getPort() + URI + " HTTP/1.1" + CRLF
                         + "Host: localhost" + CRLF
                         + "Connection: close" + CRLF
-                        + "Content-Type: multipart/form-data; boundary=" + boundary + CRLF 
-                        + "Content-Length: " + content.length() + CRLF 
-                        + CRLF 
+                        + "Content-Type: multipart/form-data; boundary=" + boundary + CRLF
+                        + "Content-Length: " + content.length() + CRLF
+                        + CRLF
                         + content + CRLF };
 
                 setRequest(request);
@@ -321,11 +321,11 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         private static final long serialVersionUID = 1L;
 
         private int status = 200;
-        
+
         public void setStatus(int status) {
             this.status = status;
         }
-        
+
         @Override
         protected void doPost(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {

==================================================
TestWebXml.java
index 88e37c0b04..f1a77a3c69 100644
--- a/test/org/apache/catalina/deploy/TestSecurityConstraint.java
+++ b/test/org/apache/catalina/deploy/TestSecurityConstraint.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -42,14 +42,14 @@ public class TestSecurityConstraint {
      */
     @Test
     public void testCreateConstraints() {
-        
+
         ServletSecurityElement element;
         SecurityConstraint[] result;
         Set<HttpMethodConstraintElement> hmces =
             new HashSet<HttpMethodConstraintElement>();
-        
+
         // Example 13-1
-        // @ServletSecurity 
+        // @ServletSecurity
         element = new ServletSecurityElement();
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
@@ -70,9 +70,9 @@ public class TestSecurityConstraint {
         assertEquals(0, result[0].findCollections()[0].findMethods().length);
         assertEquals(ServletSecurity.TransportGuarantee.CONFIDENTIAL.name(),
                 result[0].getUserConstraint());
-        
+
         // Example 13-3
-        // @ServletSecurity(@HttpConstraint(EmptyRoleSemantic.DENY)) 
+        // @ServletSecurity(@HttpConstraint(EmptyRoleSemantic.DENY))
         element = new ServletSecurityElement(
                 new HttpConstraintElement(EmptyRoleSemantic.DENY));
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
@@ -83,9 +83,9 @@ public class TestSecurityConstraint {
         assertEquals(0, result[0].findCollections()[0].findMethods().length);
         assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                 result[0].getUserConstraint());
-        
+
         // Example 13-4
-        // @ServletSecurity(@HttpConstraint(rolesAllowed = "R1")) 
+        // @ServletSecurity(@HttpConstraint(rolesAllowed = "R1"))
         element = new ServletSecurityElement(new HttpConstraintElement(
                 ServletSecurity.TransportGuarantee.NONE, ROLE1));
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
@@ -100,10 +100,10 @@ public class TestSecurityConstraint {
                 result[0].getUserConstraint());
 
         // Example 13-5
-        // @ServletSecurity((httpMethodConstraints = { 
-        //     @HttpMethodConstraint(value = "GET", rolesAllowed = "R1"), 
-        //     @HttpMethodConstraint(value = "POST", rolesAllowed = "R1", 
-        //     transportGuarantee = TransportGuarantee.CONFIDENTIAL) 
+        // @ServletSecurity((httpMethodConstraints = {
+        //     @HttpMethodConstraint(value = "GET", rolesAllowed = "R1"),
+        //     @HttpMethodConstraint(value = "POST", rolesAllowed = "R1",
+        //     transportGuarantee = TransportGuarantee.CONFIDENTIAL)
         // })
         hmces.clear();
         hmces.add(new HttpMethodConstraintElement("GET",
@@ -115,7 +115,7 @@ public class TestSecurityConstraint {
                         ROLE1)));
         element = new ServletSecurityElement(hmces);
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
-        
+
         assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
             assertTrue(result[i].getAuthConstraint());
@@ -134,9 +134,9 @@ public class TestSecurityConstraint {
                 fail("Unexpected method :[" + method + "]");
             }
         }
-        
+
         // Example 13-6
-        // @ServletSecurity(value = @HttpConstraint(rolesAllowed = "R1"), 
+        // @ServletSecurity(value = @HttpConstraint(rolesAllowed = "R1"),
         //     httpMethodConstraints = @HttpMethodConstraint("GET"))
         hmces.clear();
         hmces.add(new HttpMethodConstraintElement("GET"));
@@ -146,7 +146,7 @@ public class TestSecurityConstraint {
                         ROLE1),
                 hmces);
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
-        
+
         assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
             assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
@@ -166,10 +166,10 @@ public class TestSecurityConstraint {
             assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                     result[i].getUserConstraint());
         }
-        
+
         // Example 13-7
-        // @ServletSecurity(value = @HttpConstraint(rolesAllowed = "R1"), 
-        //     httpMethodConstraints = @HttpMethodConstraint(value="TRACE", 
+        // @ServletSecurity(value = @HttpConstraint(rolesAllowed = "R1"),
+        //     httpMethodConstraints = @HttpMethodConstraint(value="TRACE",
         //         emptyRoleSemantic = EmptyRoleSemantic.DENY))
         hmces.clear();
         hmces.add(new HttpMethodConstraintElement("TRACE",
@@ -180,7 +180,7 @@ public class TestSecurityConstraint {
                         ROLE1),
                 hmces);
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
-        
+
         assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
             assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
@@ -201,7 +201,7 @@ public class TestSecurityConstraint {
             assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                     result[i].getUserConstraint());
         }
-        
+
         // Example 13-8 is the same as 13-4
         // Example 13-9 is the same as 13-7
     }

==================================================
TestWebXmlOrdering.java
index fd0fd4425c..11a3020781 100644
--- a/test/org/apache/catalina/deploy/TestWebXml.java
+++ b/test/org/apache/catalina/deploy/TestWebXml.java
@@ -28,45 +28,45 @@ public class TestWebXml {
 
     @Test
     public void testParseVersion() {
-        
+
         WebXml webxml = new WebXml();
-        
+
         // Defaults
         assertEquals(3, webxml.getMajorVersion());
         assertEquals(0, webxml.getMinorVersion());
-        
+
         // Both get changed
         webxml.setVersion("2.5");
         assertEquals(2, webxml.getMajorVersion());
         assertEquals(5, webxml.getMinorVersion());
-        
+
         // Reset
         webxml.setVersion("0.0");
         assertEquals(0, webxml.getMajorVersion());
         assertEquals(0, webxml.getMinorVersion());
-        
+
         // null input should be ignored
         webxml.setVersion(null);
         assertEquals(0, webxml.getMajorVersion());
         assertEquals(0, webxml.getMinorVersion());
-        
+
         // major only
         webxml.setVersion("3");
         assertEquals(3, webxml.getMajorVersion());
         assertEquals(0, webxml.getMinorVersion());
-        
+
         // no minor digit
         webxml.setVersion("0.0");   // reset
         webxml.setVersion("3.");
         assertEquals(3, webxml.getMajorVersion());
         assertEquals(0, webxml.getMinorVersion());
-        
+
         // minor only
         webxml.setVersion("0.0");   // reset
         webxml.setVersion(".5");
         assertEquals(0, webxml.getMajorVersion());
         assertEquals(5, webxml.getMinorVersion());
-        
+
         // leading & training zeros
         webxml.setVersion("0.0");   // reset
         webxml.setVersion("002.500");
@@ -76,9 +76,9 @@ public class TestWebXml {
 
     @Test
     public void testParsePublicIdVersion22() {
-        
+
         WebXml webxml = new WebXml();
-        
+
         webxml.setPublicId(
                 org.apache.catalina.startup.Constants.WebDtdPublicId_22);
         assertEquals(2, webxml.getMajorVersion());
@@ -88,9 +88,9 @@ public class TestWebXml {
 
     @Test
     public void testParsePublicIdVersion23() {
-        
+
         WebXml webxml = new WebXml();
-        
+
         webxml.setPublicId(
                 org.apache.catalina.startup.Constants.WebDtdPublicId_23);
         assertEquals(2, webxml.getMajorVersion());
@@ -100,9 +100,9 @@ public class TestWebXml {
 
     @Test
     public void testParsePublicIdVersion24() {
-        
+
         WebXml webxml = new WebXml();
-        
+
         webxml.setPublicId(
                 org.apache.catalina.startup.Constants.WebSchemaPublicId_24);
         assertEquals(2, webxml.getMajorVersion());
@@ -112,9 +112,9 @@ public class TestWebXml {
 
     @Test
     public void testParsePublicIdVersion25() {
-        
+
         WebXml webxml = new WebXml();
-        
+
         webxml.setPublicId(
                 org.apache.catalina.startup.Constants.WebSchemaPublicId_25);
         assertEquals(2, webxml.getMajorVersion());
@@ -124,9 +124,9 @@ public class TestWebXml {
 
     @Test
     public void testParsePublicIdVersion30() {
-        
+
         WebXml webxml = new WebXml();
-        
+
         webxml.setPublicId(
                 org.apache.catalina.startup.Constants.WebSchemaPublicId_30);
         assertEquals(3, webxml.getMajorVersion());

==================================================
TestAddCharSetFilter.java
index 77d894f864..edfb5a1527 100644
--- a/test/org/apache/catalina/deploy/TestWebXmlOrdering.java
+++ b/test/org/apache/catalina/deploy/TestWebXmlOrdering.java
@@ -74,9 +74,9 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering("b");
         app.addAbsoluteOrdering("e");
         app.addAbsoluteOrdering("d");
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
-        
+
         Iterator<WebXml> iter = ordered.iterator();
         assertEquals(c,iter.next());
         assertEquals(a,iter.next());
@@ -90,9 +90,9 @@ public class TestWebXmlOrdering {
     public void testOrderWebFragmentsAbsolutePartial() {
         app.addAbsoluteOrdering("c");
         app.addAbsoluteOrdering("a");
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
-        
+
         Iterator<WebXml> iter = ordered.iterator();
         assertEquals(c,iter.next());
         assertEquals(a,iter.next());
@@ -104,15 +104,15 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering(WebXml.ORDER_OTHERS);
         app.addAbsoluteOrdering("b");
         app.addAbsoluteOrdering("d");
-        
+
         Set<WebXml> others = new HashSet<WebXml>();
         others.add(a);
         others.add(c);
         others.add(e);
         others.add(f);
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
-        
+
         Iterator<WebXml> iter = ordered.iterator();
         while (others.size() > 0) {
             WebXml o = iter.next();
@@ -129,13 +129,13 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering("b");
         app.addAbsoluteOrdering(WebXml.ORDER_OTHERS);
         app.addAbsoluteOrdering("d");
-        
+
         Set<WebXml> others = new HashSet<WebXml>();
         others.add(a);
         others.add(c);
         others.add(e);
         others.add(f);
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
 
         Iterator<WebXml> iter = ordered.iterator();
@@ -164,13 +164,13 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering("b");
         app.addAbsoluteOrdering("d");
         app.addAbsoluteOrdering(WebXml.ORDER_OTHERS);
-        
+
         Set<WebXml> others = new HashSet<WebXml>();
         others.add(a);
         others.add(c);
         others.add(e);
         others.add(f);
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
 
         Iterator<WebXml> iter = ordered.iterator();
@@ -194,9 +194,9 @@ public class TestWebXmlOrdering {
         c.addAfterOrderingOthers();
         f.addBeforeOrderingOthers();
         f.addBeforeOrdering("b");
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
-        
+
         Iterator<WebXml> iter = ordered.iterator();
         assertEquals(f,iter.next());
         assertEquals(b,iter.next());
@@ -214,9 +214,9 @@ public class TestWebXmlOrdering {
         b.addBeforeOrderingOthers();
         d.addAfterOrderingOthers();
         e.addBeforeOrderingOthers();
-        
+
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
-        
+
         Iterator<WebXml> iter = ordered.iterator();
         // A number of orders are possible but the algorithm is deterministic
         // and this order is valid. If this fails after a change to the
@@ -238,7 +238,7 @@ public class TestWebXmlOrdering {
         fragments.remove("f");
 
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
-        
+
         Iterator<WebXml> iter = ordered.iterator();
         // A number of orders are possible but the algorithm is deterministic
         // and this order is valid. If this fails after a change to the
@@ -253,15 +253,15 @@ public class TestWebXmlOrdering {
     public void testOrderWebFragmentsrelativeCircular() {
         a.addBeforeOrdering("b");
         b.addBeforeOrdering("a");
-        
+
         Exception exception = null;
-        
+
         try {
             WebXml.orderWebFragments(app, fragments);
         } catch (Exception e1) {
             exception = e1;
         }
-        
+
         assertTrue(exception instanceof IllegalArgumentException);
     }
 }

==================================================
TestCsrfPreventionFilter.java
index d818b44436..1e8d7cc9a9 100644
--- a/test/org/apache/catalina/filters/TestAddCharSetFilter.java
+++ b/test/org/apache/catalina/filters/TestAddCharSetFilter.java
@@ -85,21 +85,21 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
     private void doTest(String encoding, String expected) throws Exception {
         doTest(encoding, expected, 1);
     }
-    
+
     private void doTest(String encoding, String expected, int mode)
             throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         // Add the Servlet
         CharsetServlet servlet = new CharsetServlet(mode);
         Tomcat.addServlet(ctx, "servlet", servlet);
         ctx.addServletMapping("/", "servlet");
-        
+
         // Add the Filter
         FilterDef filterDef = new FilterDef();
         filterDef.setFilterClass(AddDefaultCharsetFilter.class.getName());
@@ -112,12 +112,12 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         filterMap.setFilterName("filter");
         filterMap.addServletName("servlet");
         ctx.addFilterMap(filterMap);
-        
+
         tomcat.start();
 
         Map<String, List<String>> headers = new HashMap<String, List<String>>();
         getUrl("http://localhost:" + getPort() + "/", new ByteChunk(), headers);
-        
+
         List<String> ctHeaders = headers.get("Content-Type");
         assertEquals(1, ctHeaders.size());
         String ct = ctHeaders.get(0);
@@ -127,9 +127,9 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
     private static class CharsetServlet extends HttpServlet {
         private static final long serialVersionUID = 1L;
         private static final String OUTPUT = "OK";
-        
+
         private final int mode;
-        
+
         public CharsetServlet(int mode) {
             this.mode = mode;
         }
@@ -137,13 +137,13 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
-            
+
             switch (mode) {
                 case 1:
                     resp.setContentType("text/plain");
                     break;
                 case 2:
-                    resp.setContentType("text/plain;charset=ISO-8859-2"); 
+                    resp.setContentType("text/plain;charset=ISO-8859-2");
                     break;
                 case 3:
                     resp.setContentType("text/plain");

==================================================
TestCsrfPreventionFilter2.java
index b8b1d7a8f9..bf6022fa9c 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
@@ -75,17 +75,17 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
         cache.add("key4");
         cache.add("key5");
         cache.add("key6");
-        
+
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(cache);
-        
+
         ByteArrayInputStream bais =
             new ByteArrayInputStream(baos.toByteArray());
         ObjectInputStream ois = new ObjectInputStream(bais);
         @SuppressWarnings("unchecked")
         LruCache<String> cache2 = (LruCache<String>) ois.readObject();
-        
+
         cache2.add("key7");
         assertFalse(cache2.contains("key1"));
         assertFalse(cache2.contains("key2"));

==================================================
TesterResponse.java
index acb7005599..830caa8584 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
@@ -33,16 +33,16 @@ public class TestCsrfPreventionFilter2 {
     public void testLruCacheConcurrency() throws Exception {
         int threadCount = 2;
         long iterationCount = 100000L;
-        
+
         assertTrue(threadCount > 1);
 
         LruCache<String> cache = new LruCache<String>(threadCount - 1);
-        
+
         LruTestThread[] threads = new LruTestThread[threadCount];
         for (int i = 0; i < threadCount; i++) {
             threads[i] = new LruTestThread(cache, iterationCount);
         }
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i].start();
         }

==================================================
TestSerializablePrincipal.java
index 2e4fb432cb..7854786b96 100644
--- a/test/org/apache/catalina/filters/TesterResponse.java
+++ b/test/org/apache/catalina/filters/TesterResponse.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -82,7 +82,7 @@ public class TesterResponse
     public void setError() {/* NOOP */}
     public boolean isError() { return false; }
     /**
-     * 
+     *
      * @return
      * @throws IOException
      */
@@ -90,7 +90,7 @@ public class TesterResponse
         return null;
     }
     /**
-     * 
+     *
      * @throws IOException
      */
     public void finishResponse() throws IOException {/* NOOP */}
@@ -100,7 +100,7 @@ public class TesterResponse
     public PrintWriter getReporter() { return null; }
     public void recycle() {/* NOOP */}
     /**
-     * 
+     *
      * @param b
      * @throws IOException
      */
@@ -108,7 +108,7 @@ public class TesterResponse
         // NOOP
     }
     /**
-     * 
+     *
      * @param b
      * @throws IOException
      */
@@ -116,7 +116,7 @@ public class TesterResponse
         // NOOP
     }
     /**
-     * 
+     *
      * @param b
      * @param off
      * @param len
@@ -189,7 +189,7 @@ public class TesterResponse
     @Deprecated
     public String encodeUrl(String url) { return null; }
     /**
-     * 
+     *
      * @throws IOException
      */
     public void sendAcknowledgement() throws IOException {/* NOOP */}

==================================================
TesterPrincipal.java
index b58c9c6824..b2fe831b02 100644
--- a/test/org/apache/catalina/ha/session/TestSerializablePrincipal.java
+++ b/test/org/apache/catalina/ha/session/TestSerializablePrincipal.java
@@ -53,7 +53,7 @@ public class TestSerializablePrincipal  {
             e.printStackTrace();
             fail("ioe creating temporary file");
         }
-        
+
         // Create the Principal to serialize
         List<String> roles = new ArrayList<String>();
         roles.add("RoleA");
@@ -61,7 +61,7 @@ public class TestSerializablePrincipal  {
         TesterPrincipal tpOriginal = new TesterPrincipal("inner");
         GenericPrincipal gpOriginal =
             new GenericPrincipal("usr", "pwd", roles, tpOriginal);
-        
+
         // Do the serialization
         try {
             FileOutputStream fos = new FileOutputStream(file);
@@ -76,7 +76,7 @@ public class TestSerializablePrincipal  {
             e.printStackTrace();
             fail("ioe serializing principal");
         }
-        
+
         // De-serialize the Principal
         GenericPrincipal gpNew = null;
         try {
@@ -93,7 +93,7 @@ public class TestSerializablePrincipal  {
             e.printStackTrace();
             fail("cnfe de-serializing principal");
         }
-        
+
         // Now test how similar original and de-serialized versions are
         assertEquals("User names different", gpOriginal.getName(),
                 gpNew.getName());

==================================================
TestVirtualWebappLoader.java
index 02ebd84a47..f7b474fd6e 100644
--- a/test/org/apache/catalina/ha/session/TesterPrincipal.java
+++ b/test/org/apache/catalina/ha/session/TesterPrincipal.java
@@ -21,7 +21,7 @@ import java.io.Serializable;
 import java.security.Principal;
 
 public class TesterPrincipal implements Principal, Serializable {
-    
+
     private static final long serialVersionUID = 1L;
 
     private String name;
@@ -29,10 +29,10 @@ public class TesterPrincipal implements Principal, Serializable {
     public TesterPrincipal(String theName) {
         name = theName;
     }
-    
+
     @Override
     public String getName() {
         return name;
     }
-    
+
 }
\ No newline at end of file

==================================================
TestWebappClassLoaderMemoryLeak.java
index 09444f7c4a..9596ac8ebe 100644
--- a/test/org/apache/catalina/loader/TestVirtualWebappLoader.java
+++ b/test/org/apache/catalina/loader/TestVirtualWebappLoader.java
@@ -41,13 +41,13 @@ public class TestVirtualWebappLoader extends TomcatBaseTest {
     @Test
     public void testStartInternal() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        File appDir = new File("test/webapp-3.0");      
+        File appDir = new File("test/webapp-3.0");
         // Must have a real docBase - just use temp
-        StandardContext ctx = 
+        StandardContext ctx =
             (StandardContext)tomcat.addContext("",  appDir.getAbsolutePath());
 
         VirtualWebappLoader loader = new VirtualWebappLoader();
-         
+
         loader.setContainer(ctx);
         ctx.setLoader(loader);
         ctx.setResources(new FileDirContext());
@@ -61,12 +61,12 @@ public class TestVirtualWebappLoader extends TomcatBaseTest {
         // ToDo: Why doesn't remove repositories?
         repos = loader.getRepositories();
         assertEquals(2, repos.length);
-        
+
         // no leak
         loader.start();
         repos = loader.getRepositories();
         assertEquals(2,repos.length);
-        
+
         // clear loader
         ctx.setLoader(null);
         // see tearDown()!

==================================================
TestRegistration.java
index fb283aee50..66c5932909 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -39,26 +39,26 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
     @Test
     public void testTimerThreadLeak() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         if (ctx instanceof StandardContext) {
             ((StandardContext) ctx).setClearReferencesStopTimerThreads(true);
         }
-        
+
         Tomcat.addServlet(ctx, "taskServlet", new TaskServlet());
         ctx.addServletMapping("/", "taskServlet");
-        
+
         tomcat.start();
 
         // This will trigger the timer & thread creation
         getUrl("http://localhost:" + getPort() + "/");
-        
+
         // Stop the context
         ctx.stop();
-        
+
         // If the thread still exists, we have a thread/memory leak
         try {
             Thread.sleep(10);
@@ -73,19 +73,19 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
             }
         }
     }
-    
+
     /*
      * Get the set of current threads as an array.
      * Copied from WebappClassLoader
      */
     private Thread[] getThreads() {
-        // Get the current thread group 
+        // Get the current thread group
         ThreadGroup tg = Thread.currentThread( ).getThreadGroup( );
         // Find the root thread group
         while (tg.getParent() != null) {
             tg = tg.getParent();
         }
-        
+
         int threadCountGuess = tg.activeCount() + 50;
         Thread[] threads = new Thread[threadCountGuess];
         int threadCountActual = tg.enumerate(threads);
@@ -94,10 +94,10 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
             threadCountGuess *=2;
             threads = new Thread[threadCountGuess];
             // Note tg.enumerate(Thread[]) silently ignores any threads that
-            // can't fit into the array 
+            // can't fit into the array
             threadCountActual = tg.enumerate(threads);
         }
-        
+
         return threads;
     }
 
@@ -112,7 +112,7 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
             Timer timer = new Timer(TIMER_THREAD_NAME);
             timer.schedule(new LocalTask(), 0, 10000);
         }
-        
+
     }
 
     private static final class LocalTask extends TimerTask {
@@ -121,6 +121,6 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
         public void run() {
             // Doesn't actually need to do anything.
         }
-        
+
     }
 }

==================================================
TestDefaultServlet.java
index 7336c33386..394b7f56e9 100644
--- a/test/org/apache/catalina/mbeans/TestRegistration.java
+++ b/test/org/apache/catalina/mbeans/TestRegistration.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -122,7 +122,7 @@ public class TestRegistration extends TomcatBaseTest {
         }
         tomcat.addContext(contextName, contextDir.getAbsolutePath());
         tomcat.start();
-        
+
         // Verify there are no Catalina MBeans
         onames = mbeanServer.queryNames(new ObjectName("Catalina:*"), null);
         assertEquals("Found: " + onames, 0, onames.size());
@@ -177,7 +177,7 @@ public class TestRegistration extends TomcatBaseTest {
             fail("Failed to create: [" + contextDir2.toString() + "]");
         }
         tomcat.addContext(host, contextName + "2", contextDir2.getAbsolutePath());
-        
+
         tomcat.start();
         tomcat.stop();
         tomcat.destroy();
@@ -188,5 +188,5 @@ public class TestRegistration extends TomcatBaseTest {
         onames = mbeanServer.queryNames(new ObjectName("Tomcat:*"), null);
         assertEquals("Remaining: " + onames, 0, onames.size());
     }
-    
+
 }

==================================================
TestWebdavServlet.java
index d0339db71c..8548ae7872 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -48,42 +48,42 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
     /**
      * Test attempting to access special paths (WEB-INF/META-INF) using
-     * DefaultServlet. 
+     * DefaultServlet.
      */
     @Test
     public void testGetSpecials() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         String contextPath = "/examples";
-        
+
         File appDir = new File(getBuildDirectory(), "webapps" + contextPath);
         // app dir is relative to server home
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         final ByteChunk res = new ByteChunk();
-        
+
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/web.xml", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/MANIFEST.MF", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
     }
 
     /**
@@ -93,67 +93,67 @@ public class TestDefaultServlet extends TomcatBaseTest {
     @Test
     public void testGetWithSubpathmount() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         String contextPath = "/examples";
-        
+
         File appDir = new File(getBuildDirectory(), "webapps" + contextPath);
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         // Override the default servlet with our own mappings
         Tomcat.addServlet(ctx, "default2", new DefaultServlet());
         ctx.addServletMapping("/", "default2");
         ctx.addServletMapping("/servlets/*", "default2");
         ctx.addServletMapping("/static/*", "default2");
-        
+
         tomcat.start();
-        
+
         final ByteChunk res = new ByteChunk();
-        
+
         // Make sure DefaultServlet isn't exposing special directories
         // by remounting the webapp under a sub-path
-        
+
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/WEB-INF/web.xml", res, null);
-        
+
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/WEB-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/WEB-INF/", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/META-INF/MANIFEST.MF", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/META-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
-        // Make sure DefaultServlet is serving resources relative to the 
+
+        // Make sure DefaultServlet is serving resources relative to the
         // context root regardless of where the it is mapped
-        
+
         final ByteChunk rootResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/index.html", rootResource, null);
         assertEquals(HttpServletResponse.SC_OK, rc);
-        
+
         final ByteChunk subpathResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/servlets/index.html", subpathResource, null);
         assertEquals(HttpServletResponse.SC_OK, rc);
-        
+
         assertFalse(rootResource.toString().equals(subpathResource.toString()));
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/index.html", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
     }
 
     /**

==================================================
Benchmarks.java
index 38803bec33..27bd558b88 100644
--- a/test/org/apache/catalina/servlets/TestWebdavServlet.java
+++ b/test/org/apache/catalina/servlets/TestWebdavServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -34,46 +34,46 @@ import org.apache.tomcat.util.buf.ByteChunk;
 public class TestWebdavServlet extends TomcatBaseTest {
 
     /**
-     * Test attempting to access special paths (WEB-INF/META-INF) using WebdavServlet 
+     * Test attempting to access special paths (WEB-INF/META-INF) using WebdavServlet
      */
     @Test
     public void testGetSpecials() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         String contextPath = "/examples";
-        
+
         File appDir = new File(getBuildDirectory(), "webapps" + contextPath);
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         Tomcat.addServlet(ctx, "webdav", new WebdavServlet());
         ctx.addServletMapping("/*", "webdav");
-        
+
         tomcat.start();
-        
+
         final ByteChunk res = new ByteChunk();
-        
+
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/web.xml", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/MANIFEST.MF", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
     }
 
     /**
@@ -83,63 +83,63 @@ public class TestWebdavServlet extends TomcatBaseTest {
     @Test
     public void testGetWithSubpathmount() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         String contextPath = "/examples";
-        
+
         File appDir = new File(getBuildDirectory(), "webapps" + contextPath);
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         Tomcat.addServlet(ctx, "webdav", new WebdavServlet());
         ctx.addServletMapping("/webdav/*", "webdav");
-        
+
         tomcat.start();
-        
+
         final ByteChunk res = new ByteChunk();
-        
+
         // Make sure WebdavServlet isn't exposing special directories
         // by remounting the webapp under a sub-path
-        
+
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/WEB-INF/web.xml", res, null);
-        
+
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/WEB-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/WEB-INF/", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-         
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/META-INF/MANIFEST.MF", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/META-INF/doesntexistanywhere", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
-        // Make sure WebdavServlet is serving resources         
+
+        // Make sure WebdavServlet is serving resources
         // relative to the map/mount point
         final ByteChunk rootResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/index.html", rootResource, null);
         assertEquals(HttpServletResponse.SC_OK, rc);
-        
+
         final ByteChunk subpathResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/index.html", subpathResource, null);
         assertEquals(HttpServletResponse.SC_OK, rc);
-        
+
         assertEquals(rootResource.toString(), subpathResource.toString());
-        
+
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/static/index.html", res, null);
         assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        
+
     }
 
     public static int getUrl(String path, ByteChunk out,

==================================================
Threading.java
index 1e6c545f63..6ffe8c1b8b 100644
--- a/test/org/apache/catalina/session/Benchmarks.java
+++ b/test/org/apache/catalina/session/Benchmarks.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -42,7 +42,7 @@ public class Benchmarks {
      *  2 threads -  ~2,100ms
      *  4 threads -  ~3,100ms
      * 16 threads - ~14,700ms
-     * 
+     *
      * Results on markt's 2-core OSX dev box
      *  1 thread  -   ~1,400ms
      *  2 threads -   ~1,700ms
@@ -65,8 +65,8 @@ public class Benchmarks {
         doTestManagerBaseGenerateSessionId(100, 100000);
         doTestManagerBaseGenerateSessionId(400, 10000);
     }
-    
-    
+
+
     private void doTestManagerBaseGenerateSessionId(int threadCount,
             int iterCount) throws Exception {
 
@@ -87,16 +87,16 @@ public class Benchmarks {
             mgr.sessionExpirationTiming.add(null);
         }
 
-        
+
         Thread[] threads = new Thread[threadCount];
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i] = new Thread(
                     new TestThreadGenerateSessionId(mgr, iterCount));
         }
-        
+
         long start = System.currentTimeMillis();
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i].start();
         }
@@ -109,7 +109,7 @@ public class Benchmarks {
             }
         }
         long end = System.currentTimeMillis();
-        
+
         StringBuilder result = new StringBuilder();
         result.append("Threads: ");
         result.append(threadCount);
@@ -117,13 +117,13 @@ public class Benchmarks {
         result.append(end-start);
         System.out.println(result.toString());
     }
-    
-    
+
+
     private static final class TestThreadGenerateSessionId implements Runnable {
 
         private ManagerBase mgr;
         private int count;
-        
+
         public TestThreadGenerateSessionId(ManagerBase mgr, int count) {
             this.mgr = mgr;
             this.count = count;
@@ -137,14 +137,14 @@ public class Benchmarks {
         }
     }
 
-    
+
     /*
      * Results on markt's 4-core Windows dev box
      *  1 thread  -  ~3,800ms
      *  2 threads -  ~6,700ms
      *  4 threads - ~11,000ms
      * 16 threads - ~43,500ms
-     * 
+     *
      * Results on markt's 2-core OSX dev box
      *  1 thread  -  ~4,100ms
      *  2 threads -  ~5,700ms
@@ -161,8 +161,8 @@ public class Benchmarks {
         doTestManagerBaseCreateSession(100, 100000);
         doTestManagerBaseCreateSession(400, 10000);
     }
-    
-    
+
+
     private void doTestManagerBaseCreateSession(int threadCount,
             int iterCount) {
 
@@ -185,14 +185,14 @@ public class Benchmarks {
         }
 
         Thread[] threads = new Thread[threadCount];
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i] = new Thread(
                     new TestThreadCreateSession(mgr, iterCount));
         }
-        
+
         long start = System.currentTimeMillis();
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i].start();
         }
@@ -205,7 +205,7 @@ public class Benchmarks {
             }
         }
         long end = System.currentTimeMillis();
-        
+
         StringBuilder result = new StringBuilder();
         result.append("Threads: ");
         result.append(threadCount);
@@ -213,12 +213,12 @@ public class Benchmarks {
         result.append(end-start);
         System.out.println(result.toString());
     }
-    
+
     private static final class TestThreadCreateSession implements Runnable {
 
         private ManagerBase mgr;
         private int count;
-        
+
         public TestThreadCreateSession(ManagerBase mgr, int count) {
             this.mgr = mgr;
             this.count = count;
@@ -232,18 +232,18 @@ public class Benchmarks {
             }
         }
     }
-    
-    
+
+
     /*
      * SecureRandom vs. reading /dev/urandom. Very different performance noted
      * on some platforms.
-     * 
+     *
      * Results on markt's 4-core Windows dev box
      *              SecureRandom  /dev/urandom
      *  1 thread  -    ~766ms        N/A
      *  2 threads -    ~843ms        N/A
      *  4 threads -    ~766ms        N/A
-     *  
+     *
      * Results on markt's 2-core OSX dev box
      *              SecureRandom  /dev/urandom
      *  1 thread  -     ~759ms      ~3,500ms
@@ -267,7 +267,7 @@ public class Benchmarks {
             int iterCount, boolean useSecureRandom) throws Exception {
 
         Thread[] threads = new Thread[threadCount];
-        
+
         for (int i = 0; i < threadCount; i++) {
             if (useSecureRandom) {
                 threads[i] = new Thread(new TestThreadSecureRandom(iterCount));
@@ -275,9 +275,9 @@ public class Benchmarks {
                 threads[i] = new Thread(new TestThreadDevUrandom(iterCount));
             }
         }
-        
+
         long start = System.currentTimeMillis();
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i].start();
         }
@@ -290,7 +290,7 @@ public class Benchmarks {
             }
         }
         long end = System.currentTimeMillis();
-        
+
         StringBuilder result = new StringBuilder();
         if (useSecureRandom) {
             result.append("SecureRandom ");
@@ -305,11 +305,11 @@ public class Benchmarks {
     }
 
     private static final class TestThreadSecureRandom implements Runnable {
-        
+
         private SecureRandom secureRandom;
         private byte[] bytes = new byte[16];
         private int count;
-        
+
         TestThreadSecureRandom(int iterCount) throws Exception {
             this.count = iterCount;
             this.secureRandom = SecureRandom.getInstance("SHA1PRNG");
@@ -321,15 +321,15 @@ public class Benchmarks {
                 secureRandom.nextBytes(bytes);
             }
         }
-        
+
     }
-    
+
     private static final class TestThreadDevUrandom implements Runnable {
-        
+
         private InputStream is;
         private byte[] bytes = new byte[16];
         private int count;
-        
+
         TestThreadDevUrandom(int iterCount) {
             try {
                 is = new FileInputStream("/dev/urandom");

==================================================
DuplicateMappingParamFilter.java
index ad139e4db2..091f2d50e2 100644
--- a/test/org/apache/catalina/session/Threading.java
+++ b/test/org/apache/catalina/session/Threading.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -29,7 +29,7 @@ import org.junit.Test;
  * a number of classes. In some cases the Javadoc is unclear on the
  * thread-safety of a class. These tests were written to test the thread-safety
  * of key classes.
- * 
+ *
  * Named Threading so it is not automatically executed as part of the unit
  * tests.
  */
@@ -38,12 +38,12 @@ public class Threading {
     /**
      * {@link FileInputStream#read(byte[])} and related methods are all native
      * methods so it isn't immediately obvious if they are thread-safe or not.
-     * 
+     *
      * <pre>
      * Windows JDK 1.6.0_22_x64 - Thread safe
      * OSX     JDK 1.6.0_22_x64 - Not thread safe
      * </pre>
-     * 
+     *
      * Therefore, have to assume that {@link FileInputStream#read(byte[])} is
      * not thread safe.
      */
@@ -56,24 +56,24 @@ public class Threading {
     }
 
     public void doTestFileInputStream(int threadCount) throws Exception {
-        
+
         // Assumes "ant release" has been run
         // Will need to be updated as new releases are made
         File file = new File(
                 "./output/release/v7.0.20-dev/bin/apache-tomcat-7.0.20-dev.zip");
-        
+
         FileInputStream fis = new FileInputStream(file);
-        
+
         Thread[] threads = new Thread[threadCount];
         FisReaderThread[] runnables = new FisReaderThread[threadCount];
-        
+
         for (int i = 0; i < threadCount; i++) {
             runnables[i] = new FisReaderThread(fis);
             threads[i] = new Thread(runnables[i]);
         }
-        
+
         long start = System.currentTimeMillis();
-        
+
         for (int i = 0; i < threadCount; i++) {
             threads[i].start();
         }
@@ -89,7 +89,7 @@ public class Threading {
             }
         }
         long end = System.currentTimeMillis();
-        
+
         long byteCount = 0;
         for (int i = 0; i < threadCount; i++) {
             byteCount += runnables[i].getByteCount();
@@ -135,11 +135,11 @@ public class Threading {
                 }
             }
         }
-        
+
         public long getByteCount() {
             return byteCount;
         }
-        
+
         public boolean isfailed() {
             return fail;
         }

==================================================
DuplicateMappingParamServlet.java
index 375cbeb7bd..ef7f7eef31 100644
--- a/test/org/apache/catalina/startup/DuplicateMappingParamFilter.java
+++ b/test/org/apache/catalina/startup/DuplicateMappingParamFilter.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,16 +28,16 @@ import javax.servlet.annotation.WebFilter;
 
 /**
  * Test Mock with wrong Annotation!
- * 
+ *
  * @author Peter Rossbach
  * @version $Id$
- * 
+ *
  */
-@WebFilter(value = "/param", filterName="paramDFilter", 
+@WebFilter(value = "/param", filterName="paramDFilter",
         urlPatterns = { "/param1" , "/param2" })
 public class DuplicateMappingParamFilter implements Filter {
 
-    
+
     @Override
     public void init(FilterConfig filterConfig) throws ServletException {
         // NO-OP

==================================================
FastNonSecureRandom.java
index b01bb35ec9..7f30521da4 100644
--- a/test/org/apache/catalina/startup/DuplicateMappingParamServlet.java
+++ b/test/org/apache/catalina/startup/DuplicateMappingParamServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,7 +28,7 @@ import javax.servlet.http.HttpServletResponse;
 
 /**
  * Test Mock with wrong Annotation!
- * 
+ *
  * @author Peter Rossbach
  * @version $Revision$
  */

==================================================
NoMappingParamServlet.java
index 45a196f650..c8c28e004a 100644
--- a/test/org/apache/catalina/startup/FastNonSecureRandom.java
+++ b/test/org/apache/catalina/startup/FastNonSecureRandom.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ParamFilter.java
index 730582170e..281244879c 100644
--- a/test/org/apache/catalina/startup/NoMappingParamServlet.java
+++ b/test/org/apache/catalina/startup/NoMappingParamServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,7 +27,7 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 /**
- * 
+ *
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
ParamServlet.java
index e9bdcd9498..ac9e1b51dd 100644
--- a/test/org/apache/catalina/startup/ParamFilter.java
+++ b/test/org/apache/catalina/startup/ParamFilter.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
SimpleHttpClient.java
index 4075ea3ca9..8bbce01e2c 100644
--- a/test/org/apache/catalina/startup/ParamServlet.java
+++ b/test/org/apache/catalina/startup/ParamServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,7 +27,7 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 /**
- * 
+ *
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
TestContextConfig.java
index e0775e8bf8..7630a00bdc 100644
--- a/test/org/apache/catalina/startup/SimpleHttpClient.java
+++ b/test/org/apache/catalina/startup/SimpleHttpClient.java
@@ -40,7 +40,7 @@ import java.util.List;
 public abstract class SimpleHttpClient {
     public static final String TEMP_DIR =
         System.getProperty("java.io.tmpdir");
-    
+
     public static final String CRLF = "\r\n";
 
     public static final String INFO_100 = "HTTP/1.1 100";
@@ -51,19 +51,19 @@ public abstract class SimpleHttpClient {
     public static final String FAIL_50X = "HTTP/1.1 50";
     public static final String FAIL_500 = "HTTP/1.1 500";
     public static final String FAIL_501 = "HTTP/1.1 501";
-    
+
     private static final String SESSION_COOKIE_HEADER_PREFIX =
         "Set-Cookie: JSESSIONID=";
-    
+
     private Socket socket;
     private Writer writer;
     private BufferedReader reader;
     private int port = 8080;
-    
+
     private String[] request;
     private boolean useContinue = false;
     private int requestPause = 1000;
-    
+
     private String responseLine;
     private List<String> responseHeaders = new ArrayList<String>();
     private String responseBody;
@@ -76,7 +76,7 @@ public abstract class SimpleHttpClient {
     public void setRequest(String[] theRequest) {
         request = theRequest;
     }
-    
+
     public void setUseContinue(boolean theUseContinueFlag) {
         useContinue = theUseContinueFlag;
     }
@@ -131,7 +131,7 @@ public abstract class SimpleHttpClient {
     public void connect() throws UnknownHostException, IOException {
         connect(0,0);
     }
-    
+
     public void processRequest() throws IOException, InterruptedException {
         processRequest(true);
     }
@@ -169,7 +169,7 @@ public abstract class SimpleHttpClient {
         // Is a 100 continue response expected?
         if (useContinue) {
             if (isResponse100()) {
-                // Skip the blank after the 100 Continue response 
+                // Skip the blank after the 100 Continue response
                 readLine();
                 // Now get the final response
                 responseLine = readLine();
@@ -177,7 +177,7 @@ public abstract class SimpleHttpClient {
                 throw new IOException("No 100 Continue response");
             }
         }
-        
+
         // Put the headers into the map
         String line = readLine();
         int cl = -1;
@@ -188,7 +188,7 @@ public abstract class SimpleHttpClient {
                 cl = Integer.parseInt(line.substring(16));
             }
         }
-        
+
         // Read the body, if any
         StringBuilder builder = new StringBuilder();
         if (readBody) {
@@ -210,32 +210,32 @@ public abstract class SimpleHttpClient {
     public String readLine() throws IOException {
         return reader.readLine();
     }
-    
+
     public void disconnect() throws IOException {
         writer.close();
         reader.close();
         socket.close();
     }
-    
+
     public void reset() {
         socket = null;
         writer = null;
         reader = null;
-        
+
         request = null;
         requestPause = 1000;
-        
+
         useContinue = false;
 
         responseLine = null;
         responseHeaders = new ArrayList<String>();
         responseBody = null;
     }
-    
+
     public boolean isResponse100() {
         return getResponseLine().startsWith(INFO_100);
     }
-    
+
     public boolean isResponse200() {
         return getResponseLine().startsWith(OK_200);
     }
@@ -255,15 +255,15 @@ public abstract class SimpleHttpClient {
     public boolean isResponse50x() {
         return getResponseLine().startsWith(FAIL_50X);
     }
-    
+
     public boolean isResponse500() {
         return getResponseLine().startsWith(FAIL_500);
     }
-    
+
     public boolean isResponse501() {
         return getResponseLine().startsWith(FAIL_501);
     }
-    
+
     public Socket getSocket() {
         return socket;
     }

==================================================
TestContextConfigAnnotation.java
index 525270cca6..0ddae4f71a 100644
--- a/test/org/apache/catalina/startup/TestContextConfig.java
+++ b/test/org/apache/catalina/startup/TestContextConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -59,19 +59,19 @@ public class TestContextConfig extends TomcatBaseTest {
                 "/test", appDir.getAbsolutePath());
         ctxt.setDefaultWebXml(new File("conf/web.xml").getAbsolutePath());
         ctxt.addLifecycleListener(new ContextConfig());
-        
+
         ctxt.addServletContainerInitializer(
                 new CustomDefaultServletSCI(servletName), null);
 
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
-        
+
         int rc =getUrl("http://localhost:" + getPort() + "/test", res, null);
 
         // Check return code
         assertEquals(HttpServletResponse.SC_OK, rc);
-        
+
         // Check context
         assertEquals("OK - Custom default Servlet", res.toString());
     }
@@ -83,13 +83,13 @@ public class TestContextConfig extends TomcatBaseTest {
         File appDir =  new File("test/webapp-3.0-fragments");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug51396.jsp", bc, null);
-        
+
         assertEquals(HttpServletResponse.SC_OK, rc);
         assertTrue(bc.toString().contains("<p>OK</p>"));
     }
@@ -98,7 +98,7 @@ public class TestContextConfig extends TomcatBaseTest {
             implements ServletContainerInitializer {
 
         private String servletName;
-        
+
         public CustomDefaultServletSCI(String servletName) {
             this.servletName = servletName;
         }
@@ -110,7 +110,7 @@ public class TestContextConfig extends TomcatBaseTest {
             ServletRegistration.Dynamic r = ctx.addServlet(servletName, s);
             r.addMapping("/");
         }
-        
+
     }
 
     private static class CustomDefaultServlet extends HttpServlet {

==================================================
TestListener.java
index fc4be9db7f..79704201ed 100644
--- a/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
+++ b/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -47,7 +47,7 @@ import org.apache.catalina.deploy.WebXml;
 /**
  * Check Servlet 3.0 Spec 8.2.3.3: Override annotation parameter from web.xml or
  * fragment.
- * 
+ *
  * @author Peter Rossbach
  * @version $Revision$
  */
@@ -191,7 +191,7 @@ public class TestContextConfigAnnotation {
         assertNotNull(fdef);
         assertEquals("Servlet says: ",fdef.getParameterMap().get("message"));
     }
-    
+
     @Test
     public void testOverwriteFilterMapping() throws Exception {
         WebXml webxml = new WebXml();
@@ -204,14 +204,14 @@ public class TestContextConfigAnnotation {
         filterDef.setLargeIcon("LargeIcon");
         filterDef.setSmallIcon("SmallIcon");
         filterDef.setAsyncSupported("true");
- 
+
 
         webxml.addFilter(filterDef);
         FilterMap filterMap = new FilterMap();
         filterMap.addURLPattern("/param1");
         filterMap.setFilterName("paramFilter");
         webxml.addFilterMapping(filterMap);
- 
+
         ContextConfig config = new ContextConfig();
         File sFile = paramClassResource(
                 "org/apache/catalina/startup/ParamServlet");
@@ -239,12 +239,12 @@ public class TestContextConfigAnnotation {
         assertEquals("SmallIcon", fdef.getSmallIcon());
         // FIXME: Strange why servletDef is Boolean and FilterDef is String?
         assertEquals("true", fdef.getAsyncSupported());
-        
+
         String[] dis = filterMap.getDispatcherNames();
         assertEquals(2, dis.length);
         assertEquals(DispatcherType.ERROR.toString(),dis[0]);
         assertEquals(DispatcherType.ASYNC.toString(),dis[1]);
-        
+
     }
 
     @Test
@@ -267,7 +267,7 @@ public class TestContextConfigAnnotation {
     @Test
     public void testCheckHandleTypes() throws Exception {
         ContextConfig config = new ContextConfig();
-        
+
         // Need a Context, Loader and ClassLoader for checkHandleTypes
         StandardContext context = new StandardContext();
         context.setLoader(new TesterLoader());
@@ -276,14 +276,14 @@ public class TestContextConfigAnnotation {
         // Add an SCI that has no interest in any type
         SCI sciNone = new SCI();
         config.initializerClassMap.put(sciNone, new HashSet<Class<?>>());
-        
+
         // Add an SCI with an interest in Servlets
         SCI sciServlet = new SCI();
         config.initializerClassMap.put(sciServlet, new HashSet<Class<?>>());
         config.typeInitializerMap.put(Servlet.class,
                 new HashSet<ServletContainerInitializer>());
         config.typeInitializerMap.get(Servlet.class).add(sciServlet);
-        
+
         // Add an SCI with an interest in Objects - i.e. everything
         SCI sciObject = new SCI();
         config.initializerClassMap.put(sciObject, new HashSet<Class<?>>());
@@ -302,7 +302,7 @@ public class TestContextConfigAnnotation {
         config.processAnnotationsFile(file, ignore);
         file = paramClassResource("org/apache/catalina/startup/TestListener");
         config.processAnnotationsFile(file, ignore);
-        
+
         // Check right number of classes were noted to be handled
         assertEquals(0, config.initializerClassMap.get(sciNone).size());
         assertEquals(2, config.initializerClassMap.get(sciServlet).size());
@@ -316,7 +316,7 @@ public class TestContextConfigAnnotation {
             // NO-OP. Just need a class that implements SCI.
         }
     }
-    
+
     private static final class TesterLoader implements Loader {
 
         @Override
@@ -352,7 +352,7 @@ public class TestContextConfigAnnotation {
 
     /**
      * Find compiled test class
-     * 
+     *
      * @param className
      * @return File Resource
      */

==================================================
TestTomcat.java
index 0c146025f6..91c48d970a 100644
--- a/test/org/apache/catalina/startup/TestListener.java
+++ b/test/org/apache/catalina/startup/TestListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -94,7 +94,7 @@ public class TestListener extends TomcatBaseTest {
             // NOOP
         }
     }
-    
+
     public static class SCL2 implements ServletContextListener {
 
         @Override

==================================================
TestTomcatClassLoader.java
index 8358692e03..68415c7662 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -59,7 +59,7 @@ public class TestTomcat extends TomcatBaseTest {
         private static final long serialVersionUID = 1L;
 
         @Override
-        public void doGet(HttpServletRequest req, HttpServletResponse res) 
+        public void doGet(HttpServletRequest req, HttpServletResponse res)
                 throws IOException {
             res.getWriter().write("Hello world");
         }
@@ -73,7 +73,7 @@ public class TestTomcat extends TomcatBaseTest {
         private static final long serialVersionUID = 1L;
 
         @Override
-        public void doGet(HttpServletRequest req, HttpServletResponse res) 
+        public void doGet(HttpServletRequest req, HttpServletResponse res)
                 throws IOException {
             HttpSession s = req.getSession(true);
             s.getId();
@@ -82,20 +82,20 @@ public class TestTomcat extends TomcatBaseTest {
     }
 
     /**
-     * Simple servlet to test JNDI 
+     * Simple servlet to test JNDI
      */
     public static class HelloWorldJndi extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
 
         private static final String JNDI_ENV_NAME = "test";
-        
+
         @Override
-        public void doGet(HttpServletRequest req, HttpServletResponse res) 
+        public void doGet(HttpServletRequest req, HttpServletResponse res)
                 throws IOException {
-            
+
             String name = null;
-            
+
             try {
                 Context initCtx = new InitialContext();
                 Context envCtx = (Context) initCtx.lookup("java:comp/env");
@@ -103,7 +103,7 @@ public class TestTomcat extends TomcatBaseTest {
             } catch (NamingException e) {
                 throw new IOException(e);
             }
-            
+
             res.getWriter().write("Hello, " + name);
         }
     }
@@ -112,14 +112,14 @@ public class TestTomcat extends TomcatBaseTest {
      * Servlet that tries to obtain a URL for WEB-INF/web.xml
      */
     public static class GetResource extends HttpServlet {
-        
+
         private static final long serialVersionUID = 1L;
-        
+
         @Override
-        public void doGet(HttpServletRequest req, HttpServletResponse res) 
+        public void doGet(HttpServletRequest req, HttpServletResponse res)
         throws IOException {
             URL url = req.getServletContext().getResource("/WEB-INF/web.xml");
-         
+
             res.getWriter().write("The URL obtained for /WEB-INF/web.xml was ");
             if (url == null) {
                 res.getWriter().write("null");
@@ -129,7 +129,7 @@ public class TestTomcat extends TomcatBaseTest {
 
                 // Read some content from the resource
                 URLConnection conn = url.openConnection();
-                
+
                 InputStream is = null;
                 Reader reader = null;
                 char cbuf[] = new char[20];
@@ -150,14 +150,14 @@ public class TestTomcat extends TomcatBaseTest {
                         try { is.close(); } catch(IOException ioe) {/*Ignore*/}
                     }
                 }
-                
-                
+
+
             }
-            
-            
+
+
         }
     }
-    
+
     /**
      * Simple Realm that uses a configurable {@link Map} to link user names and
      * passwords.
@@ -166,7 +166,7 @@ public class TestTomcat extends TomcatBaseTest {
         private Map<String,String> users = new HashMap<String,String>();
         private Map<String,List<String>> roles =
             new HashMap<String,List<String>>();
-        
+
         public void addUser(String username, String password) {
             users.put(username, password);
         }
@@ -195,31 +195,31 @@ public class TestTomcat extends TomcatBaseTest {
             return new GenericPrincipal(username, getPassword(username),
                     roles.get(username));
         }
-        
+
     }
 
-    /** 
-     * Start tomcat with a single context and one 
-     * servlet - all programmatic, no server.xml or 
+    /**
+     * Start tomcat with a single context and one
+     * servlet - all programmatic, no server.xml or
      * web.xml used.
-     * 
-     * @throws Exception 
+     *
+     * @throws Exception
      */
     @Test
     public void testProgrammatic() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        org.apache.catalina.Context ctx = 
+        org.apache.catalina.Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        // You can customize the context by calling 
+        // You can customize the context by calling
         // its API
-        
+
         Tomcat.addServlet(ctx, "myServlet", new HelloWorld());
         ctx.addServletMapping("/", "myServlet");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("Hello world", res.toString());
     }
@@ -231,7 +231,7 @@ public class TestTomcat extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -246,7 +246,7 @@ public class TestTomcat extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -257,18 +257,18 @@ public class TestTomcat extends TomcatBaseTest {
     @Test
     public void testSession() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        org.apache.catalina.Context ctx = 
+        org.apache.catalina.Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        // You can customize the context by calling 
+        // You can customize the context by calling
         // its API
-        
+
         Tomcat.addServlet(ctx, "myServlet", new HelloWorldSession());
         ctx.addServletMapping("/", "myServlet");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("Hello world", res.toString());
     }
@@ -279,24 +279,24 @@ public class TestTomcat extends TomcatBaseTest {
         long t0 = System.currentTimeMillis();
         tomcat.addContext(null, "/", ".");
         tomcat.start();
-        System.err.println("Test time: " + 
+        System.err.println("Test time: " +
                 (System.currentTimeMillis() - t0));
      }
 
-    
-    /** 
+
+    /**
      * Test for enabling JNDI.
      */
     @Test
     public void testEnableNaming() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        org.apache.catalina.Context ctx = 
+        org.apache.catalina.Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // You can customise the context by calling its API
-        
+
         // Enable JNDI - it is disabled by default
         tomcat.enableNaming();
 
@@ -305,29 +305,29 @@ public class TestTomcat extends TomcatBaseTest {
         environment.setName(HelloWorldJndi.JNDI_ENV_NAME);
         environment.setValue("Tomcat User");
         ctx.getNamingResources().addEnvironment(environment);
-        
+
         Tomcat.addServlet(ctx, "jndiServlet", new HelloWorldJndi());
         ctx.addServletMapping("/", "jndiServlet");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("Hello, Tomcat User", res.toString());
     }
 
-    /** 
+    /**
      * Test for enabling JNDI and using global resources.
      */
     @Test
     public void testEnableNamingGlobal() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
-        org.apache.catalina.Context ctx = 
+        org.apache.catalina.Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // You can customise the context by calling its API
-        
+
         // Enable JNDI - it is disabled by default
         tomcat.enableNaming();
 
@@ -336,17 +336,17 @@ public class TestTomcat extends TomcatBaseTest {
         environment.setName("globalTest");
         environment.setValue("Tomcat User");
         tomcat.getServer().getGlobalNamingResources().addEnvironment(environment);
-        
+
         ContextResourceLink link = new ContextResourceLink();
         link.setGlobal("globalTest");
         link.setName(HelloWorldJndi.JNDI_ENV_NAME);
         ctx.getNamingResources().addResourceLink(link);
-        
+
         Tomcat.addServlet(ctx, "jndiServlet", new HelloWorldJndi());
         ctx.addServletMapping("/", "jndiServlet");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("Hello, Tomcat User", res.toString());
     }
@@ -358,21 +358,21 @@ public class TestTomcat extends TomcatBaseTest {
     @Test
     public void testGetResource() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         String contextPath = "/examples";
-        
+
         File appDir = new File(getBuildDirectory(), "webapps" + contextPath);
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         Tomcat.addServlet(ctx, "testGetResource", new GetResource());
         ctx.addServletMapping("/testGetResource", "testGetResource");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = new ByteChunk();
-        
+
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/testGetResource", res, null);
         assertEquals(HttpServletResponse.SC_OK, rc);
@@ -383,7 +383,7 @@ public class TestTomcat extends TomcatBaseTest {
     public void testBug50826() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         String contextPath = "/examples";
-        
+
         File appDir = new File(getBuildDirectory(), "webapps" + contextPath);
         // app dir is relative to server home
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());

==================================================
TesterServlet.java
index 54a0c26fb3..4e63ba2b20 100644
--- a/test/org/apache/catalina/startup/TestTomcatClassLoader.java
+++ b/test/org/apache/catalina/startup/TestTomcatClassLoader.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -43,40 +43,40 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         Tomcat.addServlet(ctx, "ClassLoaderReport", new ClassLoaderReport(null));
         ctx.addServletMapping("/", "ClassLoaderReport");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("WEBAPP,SYSTEM,OTHER,", res.toString());
     }
 
     @Test
     public void testNonDefaultClassLoader() throws Exception {
-        
+
         ClassLoader cl = new URLClassLoader(new URL[0],
                 Thread.currentThread().getContextClassLoader());
 
         Thread.currentThread().setContextClassLoader(cl);
-        
+
         Tomcat tomcat = getTomcatInstance();
         tomcat.getServer().setParentClassLoader(cl);
 
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         Tomcat.addServlet(ctx, "ClassLoaderReport", new ClassLoaderReport(cl));
         ctx.addServletMapping("/", "ClassLoaderReport");
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("WEBAPP,CUSTOM,SYSTEM,OTHER,", res.toString());
     }
-    
+
     private static final class ClassLoaderReport extends HttpServlet {
         private static final long serialVersionUID = 1L;
 
@@ -93,7 +93,7 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
             PrintWriter out = resp.getWriter();
 
             ClassLoader system = ClassLoader.getSystemClassLoader();
-            
+
             ClassLoader cl = Thread.currentThread().getContextClassLoader();
             while (cl != null) {
                 if (system == cl) {

==================================================
TomcatBaseTest.java
index 5334ce840e..324d3f4916 100644
--- a/test/org/apache/catalina/startup/TesterServlet.java
+++ b/test/org/apache/catalina/startup/TesterServlet.java
@@ -31,7 +31,7 @@ public class TesterServlet extends HttpServlet {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp)
             throws ServletException, IOException {
-        
+
         resp.setContentType("text/plain");
         PrintWriter out = resp.getWriter();
         out.print("OK");

==================================================
ChannelCreator.java
index 3720bf35ad..619a777b2a 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -77,7 +77,7 @@ public abstract class TomcatBaseTest {
     public int getPort() {
         return port;
     }
-    
+
     /**
      * Sub-classes may want to add connectors on a new port
      */
@@ -89,7 +89,7 @@ public abstract class TomcatBaseTest {
     /**
      * Helper method that returns the path of the temporary directory used by
      * the test runs. The directory is configured during {@link #setUp()}.
-     * 
+     *
      * <p>
      * It is used as <code>${catalina.base}</code> for the instance of Tomcat
      * that is being started, but can be used to store other temporary files as
@@ -122,7 +122,7 @@ public abstract class TomcatBaseTest {
     /**
      * Schedule the given file or directory to be deleted during after-test
      * cleanup.
-     * 
+     *
      * @param file
      *            File or directory
      */
@@ -142,16 +142,16 @@ public abstract class TomcatBaseTest {
         if (!tempDir.mkdirs() && !tempDir.isDirectory()) {
             fail("Unable to create temporary directory for test");
         }
-        
+
         System.setProperty("catalina.base", tempDir.getAbsolutePath());
         // Trigger loading of catalina.properties
         CatalinaProperties.getProperty("foo");
-        
+
         File appBase = new File(tempDir, "webapps");
         if (!appBase.exists() && !appBase.mkdir()) {
             fail("Unable to create appBase for test");
         }
-        
+
         tomcat = new TomcatWithFastSessionIDs();
 
         String protocol = getProtocol();
@@ -172,7 +172,7 @@ public abstract class TomcatBaseTest {
             server.addLifecycleListener(listener);
             connector.setAttribute("pollerThreadCount", Integer.valueOf(1));
         }
-        
+
         tomcat.setBaseDir(tempDir.getAbsolutePath());
         tomcat.getHost().setAppBase(appBase.getAbsolutePath());
 
@@ -185,11 +185,11 @@ public abstract class TomcatBaseTest {
             tomcat.getHost().getPipeline().addValve(alv);
         }
     }
-    
+
     protected String getProtocol() {
         // Has a protocol been specified
         String protocol = System.getProperty("tomcat.test.protocol");
-        
+
         // Use BIO by default
         if (protocol == null) {
             protocol = "org.apache.coyote.http11.Http11Protocol";
@@ -220,7 +220,7 @@ public abstract class TomcatBaseTest {
         }
         deleteOnTearDown.clear();
     }
-    
+
     /**
      * Simple Hello World servlet for use by test cases
      */
@@ -238,7 +238,7 @@ public abstract class TomcatBaseTest {
             out.print(RESPONSE_TEXT);
         }
     }
-    
+
 
     /**
      *  Wrapper for getting the response.
@@ -259,13 +259,13 @@ public abstract class TomcatBaseTest {
             Map<String, List<String>> resHead) throws IOException {
         return getUrl(path, out, 1000000, reqHead, resHead);
     }
-    
+
     public static int getUrl(String path, ByteChunk out, int readTimeout,
             Map<String, List<String>> reqHead,
             Map<String, List<String>> resHead) throws IOException {
 
         URL url = new URL(path);
-        HttpURLConnection connection = 
+        HttpURLConnection connection =
             (HttpURLConnection) url.openConnection();
         connection.setUseCaches(false);
         connection.setReadTimeout(readTimeout);
@@ -310,7 +310,7 @@ public abstract class TomcatBaseTest {
         }
         return rc;
     }
-    
+
     public static ByteChunk postUrl(byte[] body, String path)
             throws IOException {
         ByteChunk out = new ByteChunk();
@@ -322,13 +322,13 @@ public abstract class TomcatBaseTest {
             Map<String, List<String>> resHead) throws IOException {
         return postUrl(body, path, out, null, resHead);
     }
-    
+
     public static int postUrl(byte[] body, String path, ByteChunk out,
             Map<String, List<String>> reqHead,
             Map<String, List<String>> resHead) throws IOException {
 
         URL url = new URL(path);
-        HttpURLConnection connection = 
+        HttpURLConnection connection =
             (HttpURLConnection) url.openConnection();
         connection.setDoOutput(true);
         connection.setReadTimeout(1000000);
@@ -346,7 +346,7 @@ public abstract class TomcatBaseTest {
             }
         }
         connection.connect();
-        
+
         // Write the request body
         OutputStream os = null;
         try {

==================================================
CoordinationDemo.java
index ff8be7dd15..f3842140d7 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -51,16 +51,16 @@ import org.apache.catalina.tribes.transport.ReplicationTransmitter;
  * @version 1.0
  */
 public class ChannelCreator {
-    
-    
+
+
     public static StringBuilder usage() {
         StringBuilder buf = new StringBuilder();
         buf.append("\n\t\t[-bind tcpbindaddress]")
-           .append("\n\t\t[-tcpselto tcpselectortimeout]") 
-           .append("\n\t\t[-tcpthreads tcpthreadcount]") 
+           .append("\n\t\t[-tcpselto tcpselectortimeout]")
+           .append("\n\t\t[-tcpthreads tcpthreadcount]")
            .append("\n\t\t[-port tcplistenport]")
            .append("\n\t\t[-autobind tcpbindtryrange]")
-           .append("\n\t\t[-ackto acktimeout]") 
+           .append("\n\t\t[-ackto acktimeout]")
            .append("\n\t\t[-receiver org.apache.catalina.tribes.transport.nio.NioReceiver|org.apache.catalina.tribes.transport.bio.BioReceiver|]")
            .append("\n\t\t[-transport org.apache.catalina.tribes.transport.nio.PooledParallelSender|org.apache.catalina.tribes.transport.bio.PooledMultiSender]")
            .append("\n\t\t[-transport.xxx transport specific property]")
@@ -108,7 +108,7 @@ public class ChannelCreator {
         int asyncsize = 1024*1024*50; //50MB
         boolean throughput = false;
         boolean failuredetect = false;
-        
+
         for (int i = 0; i < args.length; i++) {
             if ("-bind".equals(args[i])) {
                 bind = args[++i];
@@ -169,7 +169,7 @@ public class ChannelCreator {
                 mbind = args[++i];
             }
         }
-        
+
         System.out.println("Creating receiver class="+receiver);
         Class<?> cl = Class.forName(receiver, true,
                 ChannelCreator.class.getClassLoader());
@@ -184,7 +184,7 @@ public class ChannelCreator {
         rx.setTxBufSize(25188);
         rx.setAutoBind(autoBind);
 
-        
+
         ReplicationTransmitter ps = new ReplicationTransmitter();
         System.out.println("Creating transport class="+transport);
         MultiPointSender sender = (MultiPointSender)Class.forName(transport,true,ChannelCreator.class.getClassLoader()).newInstance();
@@ -211,7 +211,7 @@ public class ChannelCreator {
         channel.setChannelReceiver(rx);
         channel.setChannelSender(ps);
         channel.setMembershipService(service);
-        
+
         if ( throughput ) channel.addInterceptor(new ThroughputInterceptor());
         if (gzip) channel.addInterceptor(new GzipInterceptor());
         if ( frag ) {
@@ -224,14 +224,14 @@ public class ChannelCreator {
             oi.setMaxQueue(ordersize);
             channel.addInterceptor(oi);
         }
-        
+
         if ( async ) {
             MessageDispatchInterceptor mi = new MessageDispatch15Interceptor();
             mi.setMaxQueueSize(asyncsize);
             channel.addInterceptor(mi);
             System.out.println("Added MessageDispatchInterceptor");
         }
-        
+
         if ( failuredetect ) {
             TcpFailureDetector tcpfi = new TcpFailureDetector();
             channel.addInterceptor(tcpfi);

==================================================
EchoRpcTest.java
index 504c0e10e2..dcb8cf0870 100644
--- a/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
+++ b/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
@@ -47,13 +47,13 @@ public class CoordinationDemo {
     public CoordinationDemo() {
         // Default constructor
     }
-    
+
     public void init() {
         reader = new BufferedReader(new InputStreamReader(System.in));
         status = new Status[CHANNEL_COUNT];
     }
-    
-    
+
+
     public void clearScreen() {
         StringBuilder buf = new StringBuilder(700);
         for (int i=0; i<CLEAR_SCREEN; i++ ) buf.append("\n");
@@ -68,7 +68,7 @@ public class CoordinationDemo {
         System.out.println("\tquit");
         System.out.print("Enter command:");
     }
-    
+
     public synchronized void printScreen() {
         clearScreen();
         System.out.println(" ###."+getHeader());
@@ -79,9 +79,9 @@ public class CoordinationDemo {
         System.out.println("\n\n");
         System.out.println("Overall status:"+statusLine);
         printMenuOptions();
-        
+
     }
-    
+
     public String getHeader() {
         //member - 30
         //running- 10
@@ -96,19 +96,19 @@ public class CoordinationDemo {
         buf.append(leftfill("View-id(short)",24," "));
         buf.append(leftfill("Count",8," "));
         buf.append("\n");
-        
+
         buf.append(rightfill("==="+new java.sql.Timestamp(System.currentTimeMillis()).toString(),SCREEN_WIDTH,"="));
         buf.append("\n");
         return buf.toString();
     }
-    
+
     public String[] tokenize(String line) {
         StringTokenizer tz = new StringTokenizer(line," ");
         String[] result = new String[tz.countTokens()];
         for (int i=0; i<result.length; i++ ) result[i] = tz.nextToken();
         return result;
     }
-    
+
     public void waitForInput() throws IOException {
         for ( int i=0; i<status.length; i++ ) status[i] = new Status(this);
         printScreen();
@@ -150,7 +150,7 @@ public class CoordinationDemo {
             }
             for (int i = 0; i < status.length; i++) if (MULTI_THREAD ) t[i].start(); else t[i].run();
             setSystemStatus("System stopped.");
-        } else { 
+        } else {
             int index = -1;
             try { index = Integer.parseInt(args[1])-1;}catch ( Exception x ) {setSystemStatus("Invalid index:"+args[1]);}
             if ( index >= 0 ) {
@@ -176,7 +176,7 @@ public class CoordinationDemo {
             }
             for (int i = 0; i < status.length; i++) if (MULTI_THREAD ) t[i].start(); else t[i].run();
             setSystemStatus("System started.");
-        } else { 
+        } else {
             int index = -1;
             try { index = Integer.parseInt(args[1])-1;}catch ( Exception x ) {setSystemStatus("Invalid index:"+args[1]);}
             if ( index >= 0 ) {
@@ -201,7 +201,7 @@ public class CoordinationDemo {
             VIEW_EVENTS[idx] = true;
         }
     }
-    
+
     public static void run(String[] args,CoordinationDemo demo) throws Exception {
         usage();
         java.util.Arrays.fill(VIEW_EVENTS,true);
@@ -221,7 +221,7 @@ public class CoordinationDemo {
         }
         demo.init();
         demo.waitForInput();
-    }    
+    }
 
     private static void usage() {
         System.out.println("Usage:");
@@ -237,14 +237,14 @@ public class CoordinationDemo {
         CoordinationDemo demo = new CoordinationDemo();
         run(args,demo);
     }
-    
+
     public static String leftfill(String value, int length, String ch) {
         return fill(value,length,ch,true);
     }
-    
+
     public static String rightfill(String value, int length, String ch) {
         return fill(value,length,ch,false);
-    }    
+    }
 
     public static String fill(String value, int length, String ch, boolean left) {
         StringBuilder buf = new StringBuilder();
@@ -253,8 +253,8 @@ public class CoordinationDemo {
         if ( left ) buf.append(value.trim());
         return buf.toString();
     }
-    
-    
+
+
     public static class Status {
         public CoordinationDemo parent;
         public GroupChannel channel;
@@ -262,11 +262,11 @@ public class CoordinationDemo {
         public String status;
         public Exception error;
         public String startstatus = "new";
-        
+
         public Status(CoordinationDemo parent) {
             this.parent = parent;
         }
-        
+
         public String getStatusLine() {
             //member - 30
             //running- 10
@@ -297,12 +297,12 @@ public class CoordinationDemo {
             buf.append("\n");
             return buf.toString();
         }
-        
+
         public String getByteString(byte[] b) {
             if ( b == null ) return "{}";
             return Arrays.toString(b,0,Math.min(b.length,4));
         }
-        
+
         public void start() {
             try {
                 if ( channel == null ) {
@@ -329,7 +329,7 @@ public class CoordinationDemo {
                 interceptor = null;
             }
         }
-        
+
         public void stop() {
             try {
                 if ( channel != null ) {
@@ -353,7 +353,7 @@ public class CoordinationDemo {
                 interceptor = null;
             }
         }
-        
+
         public GroupChannel createChannel() {
             channel = new GroupChannel();
             ((ReceiverBase)channel.getChannelReceiver()).setAutoBind(100);

==================================================
IntrospectionUtils.java
index 0e95e16930..3c180332b4 100644
--- a/test/org/apache/catalina/tribes/demos/EchoRpcTest.java
+++ b/test/org/apache/catalina/tribes/demos/EchoRpcTest.java
@@ -37,7 +37,7 @@ import org.apache.catalina.tribes.group.RpcChannel;
  * @version 1.0
  */
 public class EchoRpcTest implements RpcCallback, Runnable {
-    
+
     Channel channel;
     int count;
     String message;
@@ -46,7 +46,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
     int options;
     long timeout;
     String name;
-    
+
     public EchoRpcTest(Channel channel, String name, int count, String message, long pause, int options, long timeout) {
         this.channel = channel;
         this.count = count;
@@ -85,7 +85,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
         System.out.println("Received a reply request message from ["+sender.getName()+"] with data ["+msg+"]");
         return "Reply("+name+"):"+msg;
     }
-    
+
     @Override
     public void run() {
         long counter = 0;
@@ -105,7 +105,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
             }
         }
     }
-    
+
     public static void usage() {
             System.out.println("Tribes RPC tester.");
             System.out.println("Usage:\n\t"+
@@ -127,7 +127,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
                                "java EchoRpcTest -bind 192.168.0.45 -port 4005\n\t"+
                                "java EchoRpcTest -bind 192.168.0.45 -port 4005 -mbind 192.168.0.45 -count 100 -stats 10\n");
         }
-    
+
         public static void main(String[] args) throws Exception {
             long pause = 3000;
             int count = 1000000;
@@ -170,24 +170,24 @@ public class EchoRpcTest implements RpcCallback, Runnable {
                     System.exit(1);
                 }
             }
-    
-    
+
+
             ManagedChannel channel = (ManagedChannel)ChannelCreator.createChannel(args);
             EchoRpcTest test = new EchoRpcTest(channel,name,count,message,pause,options,timeout);
             channel.start(Channel.DEFAULT);
             Runtime.getRuntime().addShutdownHook(new Shutdown(channel));
             test.run();
-    
+
             System.out.println("System test complete, sleeping to let threads finish.");
             Thread.sleep(60*1000*60);
-        } 
-    
+        }
+
         public static class Shutdown extends Thread {
             ManagedChannel channel = null;
             public Shutdown(ManagedChannel channel) {
                 this.channel = channel;
             }
-    
+
             @Override
             public void run() {
                 System.out.println("Shutting down...");
@@ -196,7 +196,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
                 exit.start();
                 try {
                     channel.stop(Channel.DEFAULT);
-    
+
                 }catch ( Exception x ) {
                     x.printStackTrace();
                 }
@@ -216,6 +216,6 @@ public class EchoRpcTest implements RpcCallback, Runnable {
                     x.printStackTrace();
                 }
                 System.exit(0);
-    
+
             }
     }}
\ No newline at end of file

==================================================
LoadTest.java
index 3ab087c70b..f082f04b7b 100644
--- a/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
+++ b/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
@@ -37,10 +37,10 @@ import java.util.Vector;
  */
 public final class IntrospectionUtils {
 
-    
+
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( IntrospectionUtils.class );
-    
+
     /**
      * Call execute() - any ant-like task should work
      */
@@ -134,7 +134,7 @@ public final class IntrospectionUtils {
      * Guess a product install/home by analyzing the class path. It works for
      * product using the pattern: lib/executable.jar or if executable.jar is
      * included in classpath by a shell script. ( java -jar also works )
-     * 
+     *
      * Insures both "install" and "home" System properties are set. If either or
      * both System properties are unset, "install" and "home" will be set to the
      * same value. This value will be the other System property that is set, or
@@ -343,9 +343,9 @@ public final class IntrospectionUtils {
                     if (methods[i].getReturnType()==Boolean.TYPE){
                         setPropertyMethodBool = methods[i];
                     }else {
-                        setPropertyMethodVoid = methods[i];    
+                        setPropertyMethodVoid = methods[i];
                     }
-                    
+
                 }
             }
 
@@ -440,7 +440,7 @@ public final class IntrospectionUtils {
         return null;
     }
 
-    /** 
+    /**
      */
     public static void setProperty(Object o, String name) {
         String setter = "set" + capitalize(name);
@@ -628,7 +628,7 @@ public final class IntrospectionUtils {
      * Add elements from the classpath <i>cp </i> to a Vector <i>jars </i> as
      * file URLs (We use Vector for JDK 1.1 compat).
      * <p>
-     * 
+     *
      * @param jars The jar list
      * @param cp a String classpath of directory or jar file elements
      *   separated by path.separator delimiters.
@@ -700,7 +700,7 @@ public final class IntrospectionUtils {
     public static void clear() {
         objectMethods.clear();
     }
-    
+
     static Hashtable<Class<?>,Method[]> objectMethods =
         new Hashtable<Class<?>,Method[]>();
 
@@ -866,7 +866,7 @@ public final class IntrospectionUtils {
         }
         return result;
     }
-    
+
     // -------------------- Get property --------------------
     // This provides a layer of abstraction
 

==================================================
MapDemo.java
index bfe6b30ca0..2570fd2229 100644
--- a/test/org/apache/catalina/tribes/demos/LoadTest.java
+++ b/test/org/apache/catalina/tribes/demos/LoadTest.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -45,7 +45,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
     public static int size = 24000;
     public static Object mutex = new Object();
     public boolean doRun = true;
-    
+
     public long bytesReceived = 0;
     public float mBytesReceived = 0;
     public int  messagesReceived = 0;
@@ -59,30 +59,30 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
     public boolean async = false;
     public long receiveStart = 0;
     public int channelOptions = Channel.SEND_OPTIONS_DEFAULT;
-    
+
     static int messageSize = 0;
-    
+
     public static long messagesSent = 0;
     public static long messageStartSendTime = 0;
     public static long messageEndSendTime = 0;
     public static int  threadCount = 0;
-    
+
     public static synchronized void startTest() {
         threadCount++;
         if ( messageStartSendTime == 0 ) messageStartSendTime = System.currentTimeMillis();
     }
-    
+
     public static synchronized void endTest() {
         threadCount--;
         if ( messageEndSendTime == 0 && threadCount==0 ) messageEndSendTime = System.currentTimeMillis();
     }
 
-    
+
     public static synchronized long addSendStats(long count) {
         messagesSent+=count;
         return 0l;
-    }    
-    
+    }
+
     private static void printSendStats(long counter, int messageSize) {
         float cnt = counter;
         float size = messageSize;
@@ -96,7 +96,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
     }
 
 
-    public LoadTest(ManagedChannel channel, 
+    public LoadTest(ManagedChannel channel,
                     boolean send,
                     int msgCount,
                     boolean debug,
@@ -115,11 +115,11 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
 
     @Override
     public void run() {
-        
+
         long counter = 0;
         long total = 0;
         LoadMessage msg = new LoadMessage();
-        
+
         try {
             startTest();
             while (total < msgCount) {
@@ -158,7 +158,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
                     //print from the global counter
                     //printSendStats(LoadTest.messagesSent, LoadTest.messageSize, LoadTest.messageSendTime);
                     printSendStats(LoadTest.messagesSent, LoadTest.messageSize);
-                    
+
                 }
 
             }
@@ -197,29 +197,29 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
     public void memberDisappeared(Member member) {
         log.info("Member disappeared:"+member);
     }
-    
+
     @Override
-    public boolean accept(Serializable msg, Member mbr){ 
+    public boolean accept(Serializable msg, Member mbr){
        return (msg instanceof LoadMessage) || (msg instanceof ByteMessage);
     }
-    
+
     @Override
-    public void messageReceived(Serializable msg, Member mbr){ 
+    public void messageReceived(Serializable msg, Member mbr){
         if ( receiveStart == 0 ) receiveStart = System.currentTimeMillis();
         if ( debug ) {
             if ( msg instanceof LoadMessage ) {
                 printArray(((LoadMessage)msg).getMessage());
             }
         }
-        
+
         if ( msg instanceof ByteMessage && !(msg instanceof LoadMessage)) {
             LoadMessage tmp = new LoadMessage();
             tmp.setMessage(((ByteMessage)msg).getMessage());
             msg = tmp;
             tmp = null;
         }
-        
-        
+
+
         bytesReceived+=((LoadMessage)msg).getMessage().length;
         mBytesReceived+=(((LoadMessage)msg).getMessage().length)/1024f/1024f;
         messagesReceived++;
@@ -237,8 +237,8 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
 
         }
     }
-    
-    
+
+
     public static void printArray(byte[] data) {
         System.out.print("{");
         for (int i=0; i<data.length; i++ ) {
@@ -250,7 +250,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
 
 
     public static class LoadMessage extends ByteMessage {
-        
+
         public static byte[] outdata = new byte[size];
         public static Random r = new Random();
         public static int getMessageSize (LoadMessage msg) {
@@ -259,13 +259,13 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
         static {
             r.nextBytes(outdata);
         }
-        
+
         protected byte[] message = getMessage();
-        
+
         public LoadMessage() {
             // Default constructor
         }
-        
+
         @Override
         public byte[] getMessage() {
             if ( message == null ) {
@@ -273,13 +273,13 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             }
             return message;
         }
-        
+
         @Override
         public void setMessage(byte[] data) {
             this.message = data;
         }
     }
-    
+
     public static void usage() {
         System.out.println("Tribes Load tester.");
         System.out.println("The load tester can be used in sender or received mode or both");
@@ -304,7 +304,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
                            "java LoadTest -bind 192.168.0.45 -port 4005\n\t"+
                            "java LoadTest -bind 192.168.0.45 -port 4005 -mbind 192.168.0.45 -count 100 -stats 10\n");
     }
-    
+
     public static void main(String[] args) throws Exception {
         boolean send = true;
         boolean debug = false;
@@ -347,19 +347,19 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
                 if ( "receive".equals(args[++i]) ) send = false;
             } else if ("-debug".equals(args[i])) {
                 debug = true;
-            } else if ("-help".equals(args[i])) 
+            } else if ("-help".equals(args[i]))
             {
                 usage();
                 System.exit(1);
             }
         }
-        
+
         ManagedChannel channel = (ManagedChannel)ChannelCreator.createChannel(args);
-        
+
         LoadTest test = new LoadTest(channel,send,count,debug,pause,stats,breakOnEx);
         test.channelOptions = channelOptions;
         LoadMessage msg = new LoadMessage();
-        
+
         messageSize = LoadMessage.getMessageSize(msg);
         channel.addChannelListener(test);
         channel.addMembershipListener(test);
@@ -377,14 +377,14 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
         if ( shutdown && send ) channel.stop(Channel.DEFAULT);
         System.out.println("System test complete, sleeping to let threads finish.");
         Thread.sleep(60*1000*60);
-    } 
-    
+    }
+
     public static class Shutdown extends Thread {
         ManagedChannel channel = null;
         public Shutdown(ManagedChannel channel) {
             this.channel = channel;
         }
-        
+
         @Override
         public void run() {
             System.out.println("Shutting down...");
@@ -393,7 +393,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             exit.start();
             try {
                 channel.stop(Channel.DEFAULT);
-                
+
             }catch ( Exception x ) {
                 x.printStackTrace();
             }
@@ -416,5 +416,5 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
 
         }
     }
-    
+
 }
\ No newline at end of file

==================================================
MembersWithProperties.java
index 0a49a840f8..818d9e2f63 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -46,23 +46,23 @@ import org.apache.catalina.tribes.MembershipListener;
 import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
 
 /**
- * Example of how the lazy replicated map works, also shows how the BackupManager 
+ * Example of how the lazy replicated map works, also shows how the BackupManager
  * works in a Tomcat cluster
  * @author fhanik
  * @version 1.1
  */
 public class MapDemo implements ChannelListener, MembershipListener{
-    
+
     /**
      * The Map containing the replicated data
      */
     protected LazyReplicatedMap map;
-    
+
     /**
      * Table to be displayed in Swing
      */
     protected SimpleTableDemo table;
-    
+
     /**
      * Constructs a map demo object.
      * @param channel - the Tribes channel object to be used for communication
@@ -80,10 +80,10 @@ public class MapDemo implements ChannelListener, MembershipListener{
         //initialize the map by receiving a fake message
         this.messageReceived(null,null);
     }
-    
+
     /**
      * Decides if the messageReceived should be invoked
-     * will always return false since we rely on the 
+     * will always return false since we rely on the
      * lazy map to do all the messaging for us
      */
     @Override
@@ -92,7 +92,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
         table.dataModel.getValueAt(-1,-1);
         return false;
     }
-    
+
     /**
      * Invoked if accept returns true.
      * No op for now
@@ -103,7 +103,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
     public void messageReceived(Serializable msg, Member source) {
         // NOOP
     }
-    
+
     /**
      * Invoked when a member is added to the group
      */
@@ -111,7 +111,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
     public void memberAdded(Member member) {
         // NOOP
     }
-    
+
     /**
      * Invoked when a member leaves the group
      */
@@ -120,13 +120,13 @@ public class MapDemo implements ChannelListener, MembershipListener{
         //just refresh the table model
         table.dataModel.getValueAt(-1,-1);
     }
-    
+
     /**
      * Prints usage
      */
     public static void usage() {
         System.out.println("Tribes MapDemo.");
-        System.out.println("Usage:\n\t" + 
+        System.out.println("Usage:\n\t" +
                            "java MapDemo [channel options] mapName\n\t" +
                            "\tChannel options:" +
                            ChannelCreator.usage());
@@ -153,7 +153,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
         Runtime.getRuntime().addShutdownHook(new Shutdown(channel));
         //create a map demo object
         new MapDemo(channel,mapName);
-        
+
         //put the main thread to sleep until we are done
         System.out.println("System test complete, time to start="+(System.currentTimeMillis()-start)+" ms. Sleeping to let threads finish.");
         Thread.sleep(60 * 1000 * 60);
@@ -165,12 +165,12 @@ public class MapDemo implements ChannelListener, MembershipListener{
     public static class Shutdown extends Thread {
         //the channel running in this demo
         ManagedChannel channel = null;
-        
+
         public Shutdown(ManagedChannel channel) {
             this.channel = channel;
         }
 
-        
+
         @Override
         public void run() {
             System.out.println("Shutting down...");
@@ -211,12 +211,12 @@ public class MapDemo implements ChannelListener, MembershipListener{
         private static final long serialVersionUID = 1L;
 
         private static int WIDTH = 550;
-        
+
         private LazyReplicatedMap map;
         private boolean DEBUG = false;
         AbstractTableModel dataModel = new AbstractTableModel() {
-            
-            
+
+
             private static final long serialVersionUID = 1L;
             String[] columnNames = {
                                    "Rownum",
@@ -230,10 +230,10 @@ public class MapDemo implements ChannelListener, MembershipListener{
 
             @Override
             public int getColumnCount() { return columnNames.length; }
-    
+
             @Override
             public int getRowCount() {return map.sizeFull() +1; }
-            
+
             public StringBuilder getMemberNames(Member[] members){
                 StringBuilder buf = new StringBuilder();
                 if ( members!=null ) {
@@ -244,7 +244,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
                 }
                 return buf;
             }
-            
+
             @Override
             public Object getValueAt(int row, int col) {
                 if ( row==-1 ) {
@@ -266,25 +266,25 @@ public class MapDemo implements ChannelListener, MembershipListener{
                     case 7: return Boolean.valueOf(entry.isBackup());
                     default: return "";
                 }
-                
+
             }
-            
+
             public void update() {
                 fireTableDataChanged();
             }
         };
-        
+
         JTextField txtAddKey = new JTextField(20);
         JTextField txtAddValue = new JTextField(20);
         JTextField txtRemoveKey = new JTextField(20);
         JTextField txtChangeKey = new JTextField(20);
         JTextField txtChangeValue = new JTextField(20);
-        
+
         JTable table = null;
         public SimpleTableDemo(LazyReplicatedMap map) {
             super();
             this.map = map;
-            
+
             this.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
 
             //final JTable table = new JTable(data, columnNames);
@@ -305,7 +305,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
                     }
                 });
             }
-            
+
             //setLayout(new GridLayout(5, 0));
             setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
 
@@ -314,7 +314,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
 
             //Add the scroll pane to this panel.
             add(scrollPane);
-            
+
             //create a add value button
             JPanel addpanel = new JPanel();
             addpanel.setPreferredSize(new Dimension(WIDTH,30));
@@ -323,7 +323,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
             addpanel.add(txtAddValue);
             addpanel.setMaximumSize(new Dimension(WIDTH,30));
             add(addpanel);
-            
+
             //create a remove value button
             JPanel removepanel = new JPanel( );
             removepanel.setPreferredSize(new Dimension(WIDTH,30));
@@ -353,14 +353,14 @@ public class MapDemo implements ChannelListener, MembershipListener{
 
 
         }
-        
+
         public JButton createButton(String text, String command) {
             JButton button = new JButton(text);
             button.setActionCommand(command);
             button.addActionListener(this);
             return button;
         }
-        
+
         @Override
         public void actionPerformed(ActionEvent e) {
             System.out.println(e.getActionCommand());
@@ -408,7 +408,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
                 };
                 t.start();
             }
-            
+
             if ( "replicate".equals(e.getActionCommand()) ) {
                 System.out.println("Replicating out to the other nodes.");
                 map.replicate(true);
@@ -432,10 +432,10 @@ public class MapDemo implements ChannelListener, MembershipListener{
                     end = Integer.MAX_VALUE;
                 }
             }
-    
+
             char[] buffer = new char[count];
             int gap = end - start;
-    
+
             while (count-- != 0) {
                 char ch;
                 if (chars == null) {
@@ -445,7 +445,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
                 }
                 if ((letters && Character.isLetter(ch))
                     || (numbers && Character.isDigit(ch))
-                    || (!letters && !numbers)) 
+                    || (!letters && !numbers))
                 {
                     if(ch >= 56320 && ch <= 57343) {
                         if(count == 0) {
@@ -520,9 +520,9 @@ public class MapDemo implements ChannelListener, MembershipListener{
             return newContentPane;
         }
     }
-    
+
     static class ColorRenderer extends DefaultTableCellRenderer {
-        
+
         private static final long serialVersionUID = 1L;
 
         public ColorRenderer() {
@@ -548,8 +548,8 @@ public class MapDemo implements ChannelListener, MembershipListener{
             }
             return cell;
         }
-        
-        
+
+
     }
 
 

==================================================
TestGroupChannelOptionFlag.java
index a5017f4140..3ecc5cc545 100644
--- a/test/org/apache/catalina/tribes/demos/MembersWithProperties.java
+++ b/test/org/apache/catalina/tribes/demos/MembersWithProperties.java
@@ -36,13 +36,13 @@ public class MembersWithProperties implements MembershipListener{
         ManagedChannel mchannel = (ManagedChannel)channel;
         mchannel.getMembershipService().setPayload(getPayload(props));
     }
-    
+
     byte[] getPayload(Properties props) throws IOException {
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         props.store(bout,"");
         return bout.toByteArray();
     }
-    
+
     Properties getProperties(byte[] payload) throws IOException {
         ByteArrayInputStream bin = new ByteArrayInputStream(payload);
         Properties props = new Properties();
@@ -60,7 +60,7 @@ public class MembersWithProperties implements MembershipListener{
             x.printStackTrace();
         }
     }
-  
+
     @Override
     public void memberDisappeared(Member member) {
         try {

==================================================
TestGroupChannelSenderConnections.java
index 8f554ce481..16f875dbb5 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelOptionFlag.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelOptionFlag.java
@@ -28,12 +28,12 @@ import org.apache.catalina.tribes.ChannelException;
 import org.apache.catalina.tribes.ChannelInterceptor;
 
 /**
- * <p>Title: </p> 
- * 
- * <p>Description: </p> 
- * 
+ * <p>Title: </p>
+ *
+ * <p>Description: </p>
+ *
  * <p>Company: </p>
- * 
+ *
  * @author not attributable
  * @version 1.0
  */
@@ -89,7 +89,7 @@ public class TestGroupChannelOptionFlag {
         }
         assertFalse(error);
     }
-    
+
     public static class TestInterceptor extends ChannelInterceptorBase {
         // Just use base class
     }

==================================================
TestGroupChannelStartStop.java
index ea9d5ef955..43ed72c8be 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelSenderConnections.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelSenderConnections.java
@@ -98,7 +98,7 @@ public class TestGroupChannelSenderConnections {
         }
 
     }
-    
+
     public static class TestMsg implements Serializable {
         private static final long serialVersionUID = 1L;
         static Random r = new Random();
@@ -119,13 +119,13 @@ public class TestGroupChannelSenderConnections {
         public TestMsgListener(String name) {
             this.name = name;
         }
-        
+
         @Override
         public void messageReceived(Serializable msg, Member sender) {
             System.out.println("["+name+"] Received message:"+msg+" from " + sender.getName());
         }
 
-    
+
         @Override
         public boolean accept(Serializable msg, Member sender) {
             return true;

==================================================
TestOrderInterceptor.java
index 46bde88d4d..4c73469035 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelStartStop.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelStartStop.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
TestTcpFailureDetector.java
index f65fa27c9c..5dee0cd46e 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
@@ -56,7 +56,7 @@ public class TestOrderInterceptor {
         threads = new Thread[channelCount];
         for ( int i=0; i<channelCount; i++ ) {
             channels[i] = new GroupChannel();
-            
+
             orderitcs[i] = new OrderInterceptor();
             mangleitcs[i] = new MangleOrderInterceptor();
             orderitcs[i].setExpire(Long.MAX_VALUE);
@@ -125,7 +125,7 @@ public class TestOrderInterceptor {
             threads[i].join();
         }
         if (!exceptionQueue.isEmpty()) {
-            fail("Exception while sending in threads: " 
+            fail("Exception while sending in threads: "
                     + exceptionQueue.remove().toString());
         }
         Thread.sleep(5000);
@@ -145,7 +145,7 @@ public class TestOrderInterceptor {
     public static void main(String[] args) {
         org.junit.runner.JUnitCore.main(TestOrderInterceptor.class.getName());
     }
-    
+
     public static class TestListener implements ChannelListener {
         int id = -1;
         public TestListener(int id) {
@@ -169,7 +169,7 @@ public class TestOrderInterceptor {
             return (msg instanceof Integer);
         }
     }
-    
+
     public static class MangleOrderInterceptor extends ChannelInterceptorBase {
         ChannelMessage hold = null;
         Member[] dest = null;

==================================================
TestMemberImplSerialization.java
index 25eeb6b3c1..a59d21c1a5 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestTcpFailureDetector.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestTcpFailureDetector.java
@@ -34,12 +34,12 @@ import org.apache.catalina.tribes.MembershipListener;
 import org.apache.catalina.tribes.group.GroupChannel;
 
 /**
- * <p>Title: </p> 
- * 
- * <p>Description: </p> 
- * 
+ * <p>Title: </p>
+ *
+ * <p>Description: </p>
+ *
  * <p>Company: </p>
- * 
+ *
  * @author not attributable
  * @version 1.0
  */
@@ -66,7 +66,7 @@ public class TestTcpFailureDetector {
         channel1.addMembershipListener(mbrlist1);
         channel2.addMembershipListener(mbrlist2);
     }
-    
+
     public void clear() {
         mbrlist1.members.clear();
         mbrlist2.members.clear();
@@ -139,7 +139,7 @@ public class TestTcpFailureDetector {
         try { channel2.stop(Channel.DEFAULT);}catch (Exception ignore){ /* Ignore */ }
         channel2 = null;
     }
-    
+
     public static class TestMbrListener implements MembershipListener {
         public String name = null;
         public TestMbrListener(String name) {
@@ -157,7 +157,7 @@ public class TestTcpFailureDetector {
                 }
             }
         }
-        
+
         @Override
         public void memberDisappeared(Member member) {
             if ( members.contains(member) ) {
@@ -169,7 +169,7 @@ public class TestTcpFailureDetector {
                 }
             }
         }
-        
+
     }
 
 }

==================================================
NioSenderTest.java
index 4b50178733..9df44d51ec 100644
--- a/test/org/apache/catalina/tribes/membership/TestMemberImplSerialization.java
+++ b/test/org/apache/catalina/tribes/membership/TestMemberImplSerialization.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -75,7 +75,7 @@ public class TestMemberImplSerialization {
 
         MemberImpl a1 = MemberImpl.getMember(md1);
         MemberImpl a2 = MemberImpl.getMember(md2);
-        
+
         assertTrue(a1.getUdpPort()==a2.getUdpPort());
         assertTrue(a1.getUdpPort()==udpPort);
     }
@@ -94,7 +94,7 @@ public class TestMemberImplSerialization {
         assertFalse(Arrays.equals(md1,mda1));
         ma1 = MemberImpl.getMember(mda1);
         assertTrue(compareMembers(p1,ma1));
-        
+
         md1 = m.getData(true,true);
         Thread.sleep(50);
         mda1 = m.getData(true,true);
@@ -102,10 +102,10 @@ public class TestMemberImplSerialization {
         MemberImpl a2 = MemberImpl.getMember(mda1);
         assertTrue(a1.equals(a2));
         assertFalse(Arrays.equals(md1,mda1));
-        
-        
+
+
     }
-    
+
     public boolean compareMembers(MemberImpl impl1, MemberImpl impl2) {
         boolean result = true;
         result = result && Arrays.equals(impl1.getHost(),impl2.getHost());

==================================================
TestMulticastPackages.java
index 27a4276375..3bbe7429ac 100644
--- a/test/org/apache/catalina/tribes/test/NioSenderTest.java
+++ b/test/org/apache/catalina/tribes/test/NioSenderTest.java
@@ -45,17 +45,17 @@ public class NioSenderTest {
     public NioSenderTest()  {
         // Default constructor
     }
-    
+
     public synchronized int inc() {
         return ++counter;
     }
-    
+
     public synchronized ChannelData getMessage(Member mbr) {
         String msg = "Thread-"+Thread.currentThread().getName()+" Message:"+inc();
         ChannelData data = new ChannelData(true);
         data.setMessage(new XByteBuffer(msg.getBytes(),false));
         data.setAddress(mbr);
-        
+
         return data;
     }
 
@@ -102,7 +102,7 @@ public class NioSenderTest {
                         sender.reset();
                         sender.setMessage(XByteBuffer.createDataPackage(getMessage(mbr)));
                     }
-                    
+
 
                 } catch (Throwable t) {
                     t.printStackTrace();

==================================================
TestRemoteProcessException.java
index 354d5cdf48..f9838f8778 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -83,7 +83,7 @@ public class TestMulticastPackages {
         AbstractSender s2 =(AbstractSender) ((ReplicationTransmitter)channel2.getChannelSender()).getTransport();
         s1.setTimeout(Long.MAX_VALUE); //for debugging
         s2.setTimeout(Long.MAX_VALUE); //for debugging
-        
+
         System.err.println("Starting Single package NO_ACK");
         channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(1024),Channel.SEND_OPTIONS_MULTICAST);
         Thread.sleep(500);
@@ -91,7 +91,7 @@ public class TestMulticastPackages {
         assertEquals("Checking success messages.",1,listener1.count.get());
     }
 
-    
+
     public static void printMissingMsgs(int[] msgs, int maxIdx) {
         for (int i=0; i<maxIdx && i<msgs.length; i++) {
             if (msgs[i]==0) System.out.print(i+", ");
@@ -128,7 +128,7 @@ public class TestMulticastPackages {
                     }
                 }
             };
-        } 
+        }
         for (int x=0; x<threads.length; x++ ) { threads[x].start();}
         for (int x=0; x<threads.length; x++ ) { threads[x].join();}
         //sleep for 50 sec, let the other messages in
@@ -218,7 +218,7 @@ public class TestMulticastPackages {
         public static Data createRandomData(int size) {
             return createRandomData(size,-1);
         }
-        
+
         public static Data createRandomData(int size, int number) {
             int i = r.nextInt();
             i = ( i % 127 );
@@ -236,7 +236,7 @@ public class TestMulticastPackages {
             }
             return d;
         }
-        
+
         public int getNumber() {
             if (!hasNr) return -1;
             return XByteBuffer.toInt(this.data, 0);

==================================================
TestUdpPackages.java
index bcfc5b012f..7c32f03033 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
@@ -33,12 +33,12 @@ import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.GroupChannel;
 
 /**
- * <p>Title: </p> 
- * 
- * <p>Description: </p> 
- * 
+ * <p>Title: </p>
+ *
+ * <p>Description: </p>
+ *
  * <p>Company: </p>
- * 
+ *
  * @author not attributable
  * @version 1.0
  */

==================================================
SocketNioReceive.java
index 0c9a2aadf0..2613de98c3 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
@@ -83,7 +83,7 @@ public class TestUdpPackages {
         AbstractSender s2 =(AbstractSender) ((ReplicationTransmitter)channel2.getChannelSender()).getTransport();
         s1.setTimeout(Long.MAX_VALUE); //for debugging
         s2.setTimeout(Long.MAX_VALUE); //for debugging
-        
+
         System.err.println("Starting Single package NO_ACK");
         channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(1024),Channel.SEND_OPTIONS_UDP);
         Thread.sleep(500);
@@ -120,7 +120,7 @@ public class TestUdpPackages {
                     }
                 }
             };
-        } 
+        }
         for (int x=0; x<threads.length; x++ ) { threads[x].start();}
         for (int x=0; x<threads.length; x++ ) { threads[x].join();}
         //sleep for 50 sec, let the other messages in
@@ -132,7 +132,7 @@ public class TestUdpPackages {
         printMissingMsgs(listener1.nrs,counter.get());
         assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
     }
-    
+
     public static void printMissingMsgs(int[] msgs, int maxIdx) {
         for (int i=0; i<maxIdx && i<msgs.length; i++) {
             if (msgs[i]==0) System.out.print(i+", ");
@@ -169,7 +169,7 @@ public class TestUdpPackages {
                     }
                 }
             };
-        } 
+        }
         for (int x=0; x<threads.length; x++ ) { threads[x].start();}
         for (int x=0; x<threads.length; x++ ) { threads[x].join();}
         //sleep for 50 sec, let the other messages in
@@ -259,7 +259,7 @@ public class TestUdpPackages {
         public static Data createRandomData(int size) {
             return createRandomData(size,-1);
         }
-        
+
         public static Data createRandomData(int size, int number) {
             int i = r.nextInt();
             i = ( i % 127 );
@@ -277,7 +277,7 @@ public class TestUdpPackages {
             }
             return d;
         }
-        
+
         public int getNumber() {
             if (!hasNr) return -1;
             return XByteBuffer.toInt(this.data, 0);

==================================================
SocketNioValidateSend.java
index 36a8da94a5..2ea3a18f46 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketNioReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketNioReceive.java
@@ -64,11 +64,11 @@ public class SocketNioReceive {
             }
         }
     }
-    
+
     public static class MyList implements MessageListener {
         boolean first = true;
-        
-        
+
+
         @Override
         public void messageReceived(ChannelMessage msg) {
             if (first) {
@@ -82,7 +82,7 @@ public class SocketNioReceive {
                 seconds = ( (double) (time - start)) / 1000;
                 System.out.println("Throughput " + df.format(mb / seconds) + " MB/seconds, messages "+count+", total "+mb+" MB.");
             }
-        }        
+        }
 
         @Override
         public boolean accept(ChannelMessage msg) {

==================================================
SocketReceive.java
index e6a65f791a..0a95826389 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketNioValidateSend.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketNioValidateSend.java
@@ -49,7 +49,7 @@ public class SocketNioValidateSend {
         double mb = 0;
         boolean first = true;
         int count = 0;
-        
+
         DecimalFormat df = new DecimalFormat("##.00");
         while (count<100000) {
             if (first) {

==================================================
SocketSend.java
index e51b33fa52..6dc58d4d26 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketReceive.java
@@ -32,9 +32,9 @@ public class SocketReceive {
     static BigDecimal total = new BigDecimal(0);
     static BigDecimal bytes = new BigDecimal(32871);
 
-    
+
     public static void main(String[] args) throws Exception {
-    
+
         ServerSocket srvSocket = new ServerSocket(9999);
         System.out.println("Listening on 9999");
         Socket socket = srvSocket.accept();
@@ -70,7 +70,7 @@ public class SocketReceive {
                 printStats(start, mb, count, df, total);
             }
         }
-        
+
     }
 
     private static void printStats(long start, double mb, int count, DecimalFormat df, BigDecimal total) {

==================================================
SocketTribesReceive.java
index f4e78ce92a..3cf4caa339 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketSend.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketSend.java
@@ -30,8 +30,8 @@ import org.apache.catalina.tribes.membership.MemberImpl;
 public class SocketSend {
 
     public static void main(String[] args) throws Exception {
-        
-        
+
+
         Member mbr = new MemberImpl("localhost", 9999, 0);
         ChannelData data = new ChannelData();
         data.setOptions(Channel.SEND_OPTIONS_BYTE_MESSAGE);
@@ -62,7 +62,7 @@ public class SocketSend {
                 System.out.println("Throughput "+df.format(mb/seconds)+" MB/seconds messages "+count+", total "+mb+" MB, total "+total+" bytes.");
             }
         }
-        out.flush(); 
+        out.flush();
         System.out.println("Complete, sleeping 5 seconds");
         Thread.sleep(5000);
 

==================================================
SocketValidateReceive.java
index 5349467802..2034812b72 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketTribesReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketTribesReceive.java
@@ -35,7 +35,7 @@ public class SocketTribesReceive {
     static BigDecimal total = new BigDecimal((double)0);
     static BigDecimal bytes = new BigDecimal((double)32871);
 
-    
+
     public static void main(String[] args) throws Exception {
         int size = 43800;
         if (args.length > 0 ) try {size=Integer.parseInt(args[0]);}catch(Exception x){ /* Ignore */ }
@@ -78,7 +78,7 @@ public class SocketTribesReceive {
                 printStats(start, mb, count, df, total);
             }
         }
-        
+
     }
 
     private static void printStats(long start, double mb, int count, DecimalFormat df, BigDecimal total) {

==================================================
TestContextName.java
index 9346be12cf..bc24a31439 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketValidateReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketValidateReceive.java
@@ -32,11 +32,11 @@ public class SocketValidateReceive {
     static BigDecimal total = new BigDecimal(0);
     static BigDecimal bytes = new BigDecimal(32871);
 
-    
+
     public static void main(String[] args) throws Exception {
         int size = 43800;
         if (args.length > 0 ) try {size=Integer.parseInt(args[0]);}catch(Exception x){ /* Ignore */ }
-   
+
         ServerSocket srvSocket = new ServerSocket(9999);
         System.out.println("Listening on 9999");
         Socket socket = srvSocket.accept();
@@ -65,7 +65,7 @@ public class SocketValidateReceive {
                 System.exit(1);
             }
             count += reader.append(buf,0,len);
-            
+
             if ( bytes.intValue() != len ) bytes = new BigDecimal((double)len);
             total = total.add(bytes);
             mb += ( (double) len) / 1024 / 1024;
@@ -73,7 +73,7 @@ public class SocketValidateReceive {
                 printStats(start, mb, count, df, total);
             }
         }
-        
+
     }
 
     private static void printStats(long start, double mb, int count, DecimalFormat df, BigDecimal total) {
@@ -81,7 +81,7 @@ public class SocketValidateReceive {
         double seconds = ((double)(time-start))/1000;
         System.out.println("Throughput "+df.format(mb/seconds)+" MB/seconds messages "+count+", total "+mb+" MB, total "+total+" bytes.");
     }
-    
+
     public static class MyDataReader {
         int length = 10;
         int cur = 0;
@@ -89,10 +89,10 @@ public class SocketValidateReceive {
         public MyDataReader(int len) {
             length = len;
         }
-        
+
         public int append(byte[] b, int off, int len) throws Exception {
             int packages = 0;
-            for ( int i=off; i<len; i++ ) { 
+            for ( int i=off; i<len; i++ ) {
                 if ( cur == length ) {
                     cur = 0;
                     seq++;

==================================================
TestRequestUtil.java
index 2da92f269e..e54a38e2aa 100644
--- a/test/org/apache/catalina/util/TestContextName.java
+++ b/test/org/apache/catalina/util/TestContextName.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -40,7 +40,7 @@ public class TestContextName {
     private ContextName cn14;
     private ContextName cn15;
     private ContextName cn16;
-    
+
     @Before
     public void setUp() throws Exception {
         cn1 = new ContextName(null, null);
@@ -186,7 +186,7 @@ public class TestContextName {
         doCompare(src, new ContextName(src.getDisplayName()));
         doCompare(src, new ContextName(src.getName()));
     }
-    
+
     private void doCompare(ContextName cn1, ContextName cn2) {
         assertEquals(cn1.getBaseName(), cn2.getBaseName());
         assertEquals(cn1.getDisplayName(), cn2.getDisplayName());

==================================================
TestServerInfo.java
index 3a8d439192..86dc96c671 100644
--- a/test/org/apache/catalina/util/TestRequestUtil.java
+++ b/test/org/apache/catalina/util/TestRequestUtil.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -52,7 +52,7 @@ public class TestRequestUtil {
         }
         assertTrue(exception instanceof IllegalArgumentException);
     }
-    
+
     @Test
     public void testURLDecodeStringValidIso88591Start() {
 

==================================================
Benchmarks.java
index 7fa0cd7a6e..92b1f4bb41 100644
--- a/test/org/apache/catalina/util/TestServerInfo.java
+++ b/test/org/apache/catalina/util/TestServerInfo.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -22,7 +22,7 @@ import org.junit.Test;
 public class TestServerInfo {
 
     /**
-     * Test that prints the server version info. 
+     * Test that prints the server version info.
      */
     @Test
     public void testServerInfo() {

==================================================
TestRemoteIpValve.java
index 12ed6f1032..0d1c2f6783 100644
--- a/test/org/apache/catalina/valves/Benchmarks.java
+++ b/test/org/apache/catalina/valves/Benchmarks.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
SimpleAjpClient.java
index 01fb8a22d6..357ca5c76f 100644
--- a/test/org/apache/catalina/valves/TestRemoteIpValve.java
+++ b/test/org/apache/catalina/valves/TestRemoteIpValve.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -39,22 +39,22 @@ import org.apache.catalina.connector.Response;
  * {@link RemoteIpValve} Tests
  */
 public class TestRemoteIpValve {
-    
+
     static class RemoteAddrAndHostTrackerValve extends ValveBase {
         private String remoteAddr;
         private String remoteHost;
         private String scheme;
         private boolean secure;
         private int serverPort;
-        
+
         public String getRemoteAddr() {
             return remoteAddr;
         }
-        
+
         public String getRemoteHost() {
             return remoteHost;
         }
-        
+
         public String getScheme() {
             return scheme;
         }
@@ -66,7 +66,7 @@ public class TestRemoteIpValve {
         public boolean isSecure() {
             return secure;
         }
-        
+
         @Override
         public void invoke(Request request, Response response) throws IOException, ServletException {
             this.remoteHost = request.getRemoteHost();
@@ -90,20 +90,20 @@ public class TestRemoteIpValve {
         String actual = RemoteIpValve.listToCommaDelimitedString(elements);
         assertEquals("element1, element2, element3", actual);
     }
-    
+
     @Test
     public void testListToCommaDelimitedStringEmptyList() {
         List<String> elements = new ArrayList<String>();
         String actual = RemoteIpValve.listToCommaDelimitedString(elements);
         assertEquals("", actual);
     }
-    
+
     @Test
     public void testCommaDelimitedListToStringArrayNullList() {
         String actual = RemoteIpValve.listToCommaDelimitedString(null);
         assertEquals("", actual);
     }
-    
+
     @Test
     public void testInvokeAllowedRemoteAddrWithNullRemoteIpHeader() throws Exception {
         // PREPARE
@@ -114,39 +114,39 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("192.168.0.10");
         request.setRemoteHost("remote-host-original-value");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("x-forwarded-by must be null", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "192.168.0.10", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "remote-host-original-value", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
-        
+
     }
-    
+
     @Test
     public void testInvokeAllProxiesAreTrusted() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setInternalProxies("192\\.168\\.0\\.10|192\\.168\\.0\\.11");
@@ -155,39 +155,39 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("192.168.0.10");
         request.setRemoteHost("remote-host-original-value");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130, proxy1, proxy2");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
-    
+
     @Test
     public void testInvokeAllProxiesAreTrustedOrInternal() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setInternalProxies("192\\.168\\.0\\.10|192\\.168\\.0\\.11");
@@ -196,40 +196,40 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("192.168.0.10");
         request.setRemoteHost("remote-host-original-value");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for")
             .setString("140.211.11.130, proxy1, proxy2, 192.168.0.10, 192.168.0.11");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
-    
+
     @Test
     public void testInvokeAllProxiesAreInternal() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setInternalProxies("192\\.168\\.0\\.10|192\\.168\\.0\\.11");
@@ -238,39 +238,39 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("192.168.0.10");
         request.setRemoteHost("remote-host-original-value");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130, 192.168.0.10, 192.168.0.11");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("all proxies are internal, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("all proxies are internal, x-forwarded-by must be null", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
-    
+
     @Test
     public void testInvokeAllProxiesAreTrustedAndRemoteAddrMatchRegexp() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setInternalProxies("127\\.0\\.0\\.1|192\\.168\\..*|another-internal-proxy");
@@ -279,7 +279,7 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("192.168.0.10");
@@ -287,40 +287,40 @@ public class TestRemoteIpValve {
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("proxy1");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("proxy2");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
-    
+
     @Test
     public void testInvokeXforwardedProtoSaysHttpsForIncomingHttpRequest() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setRemoteIpHeader("x-forwarded-for");
         remoteIpValve.setProtocolHeader("x-forwarded-proto");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         // client ip
@@ -332,37 +332,37 @@ public class TestRemoteIpValve {
         request.setSecure(false);
         request.setServerPort(8080);
         request.getCoyoteRequest().scheme().setString("http");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         // client ip
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("no intermediate trusted proxy", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
-        
+
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
         assertEquals("x-forwarded-proto says https", "https", actualScheme);
-        
+
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
         assertEquals("x-forwarded-proto says https", 443, actualServerPort);
-        
+
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
         assertTrue("x-forwarded-proto says https", actualSecure);
 
@@ -375,17 +375,17 @@ public class TestRemoteIpValve {
         String actualPostInvokeScheme = request.getScheme();
         assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
     }
-    
+
     @Test
     public void testInvokeXforwardedProtoIsNullForIncomingHttpRequest() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setRemoteIpHeader("x-forwarded-for");
         remoteIpValve.setProtocolHeader("x-forwarded-proto");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         // client ip
@@ -397,37 +397,37 @@ public class TestRemoteIpValve {
         request.setSecure(false);
         request.setServerPort(8080);
         request.getCoyoteRequest().scheme().setString("http");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         // client ip
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("no intermediate trusted proxy", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
-        
+
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
         assertEquals("x-forwarded-proto is null", "http", actualScheme);
-        
+
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
         assertEquals("x-forwarded-proto is null", 8080, actualServerPort);
-        
+
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
         assertFalse("x-forwarded-proto is null", actualSecure);
 
@@ -440,17 +440,17 @@ public class TestRemoteIpValve {
         String actualPostInvokeScheme = request.getScheme();
         assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
     }
-    
+
     @Test
     public void testInvokeXforwardedProtoSaysHttpForIncomingHttpsRequest() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setRemoteIpHeader("x-forwarded-for");
         remoteIpValve.setProtocolHeader("x-forwarded-proto");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         // client ip
@@ -462,37 +462,37 @@ public class TestRemoteIpValve {
         request.setSecure(true);
         request.setServerPort(8443);
         request.getCoyoteRequest().scheme().setString("https");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         // client ip
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("no intermediate trusted proxy", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
-        
+
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
         assertEquals("x-forwarded-proto says http", "http", actualScheme);
-        
+
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
         assertEquals("x-forwarded-proto says http", 80, actualServerPort);
-        
+
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
         assertFalse("x-forwarded-proto says http", actualSecure);
 
@@ -505,17 +505,17 @@ public class TestRemoteIpValve {
         String actualPostInvokeScheme = request.getScheme();
         assertEquals("postInvoke scheme", "https", actualPostInvokeScheme);
     }
-    
+
     @Test
     public void testInvokeXforwardedProtoIsNullForIncomingHttpsRequest() throws Exception {
-        
+
         // PREPARE
         RemoteIpValve remoteIpValve = new RemoteIpValve();
         remoteIpValve.setRemoteIpHeader("x-forwarded-for");
         remoteIpValve.setProtocolHeader("x-forwarded-proto");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         // client ip
@@ -527,37 +527,37 @@ public class TestRemoteIpValve {
         request.setSecure(true);
         request.setServerPort(8443);
         request.getCoyoteRequest().scheme().setString("https");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         // client ip
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("no intermediate trusted proxy", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
-        
+
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
         assertEquals("x-forwarded-proto is null", "https", actualScheme);
-        
+
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
         assertEquals("x-forwarded-proto is null", 8443, actualServerPort);
-        
+
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
         assertTrue("x-forwarded-proto is null", actualSecure);
 
@@ -570,7 +570,7 @@ public class TestRemoteIpValve {
         String actualPostInvokeScheme = request.getScheme();
         assertEquals("postInvoke scheme", "https", actualPostInvokeScheme);
     }
-    
+
     @Test
     public void testInvokeNotAllowedRemoteAddr() throws Exception {
         // PREPARE
@@ -581,36 +581,36 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("not-allowed-internal-proxy");
         request.setRemoteHost("not-allowed-internal-proxy-host");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130, proxy1, proxy2");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertEquals("x-forwarded-for must be unchanged", "140.211.11.130, proxy1, proxy2", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertNull("x-forwarded-by must be null", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "not-allowed-internal-proxy", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "not-allowed-internal-proxy-host", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "not-allowed-internal-proxy", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "not-allowed-internal-proxy-host", actualPostInvokeRemoteHost);
     }
-    
+
     @Test
     public void testInvokeUntrustedProxyInTheChain() throws Exception {
         // PREPARE
@@ -621,37 +621,37 @@ public class TestRemoteIpValve {
         remoteIpValve.setProxiesHeader("x-forwarded-by");
         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
-        
+
         Request request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.setRemoteAddr("192.168.0.10");
         request.setRemoteHost("remote-host-original-value");
         request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for")
             .setString("140.211.11.130, proxy1, untrusted-proxy, proxy2");
-        
+
         // TEST
         remoteIpValve.invoke(request, null);
-        
+
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
         assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130, proxy1", actualXForwardedFor);
-        
+
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
         assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2", actualXForwardedBy);
-        
+
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
         assertEquals("remoteAddr", "untrusted-proxy", actualRemoteAddr);
-        
+
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
         assertEquals("remoteHost", "untrusted-proxy", actualRemoteHost);
-        
+
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
         assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
-        
+
         String actualPostInvokeRemoteHost = request.getRemoteHost();
         assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
-    
+
     @Test
     public void testCommaDelimitedListToStringArray() {
         String[] actual = RemoteIpValve.commaDelimitedListToStringArray("element1, element2, element3");
@@ -660,7 +660,7 @@ public class TestRemoteIpValve {
         };
         assertArrayEquals(expected, actual);
     }
-    
+
     @Test
     public void testCommaDelimitedListToStringArrayMixedSpaceChars() {
         String[] actual = RemoteIpValve.commaDelimitedListToStringArray("element1  , element2,\t element3");
@@ -669,7 +669,7 @@ public class TestRemoteIpValve {
         };
         assertArrayEquals(expected, actual);
     }
-    
+
     private void assertArrayEquals(String[] expected, String[] actual) {
         if (expected == null) {
             assertNull(actual);
@@ -681,7 +681,7 @@ public class TestRemoteIpValve {
         e.addAll(Arrays.asList(expected));
         List<String> a = new ArrayList<String>();
         a.addAll(Arrays.asList(actual));
-        
+
         for (String entry : e) {
             assertTrue(a.remove(entry));
         }

==================================================
TestAbstractAjpProcessor.java
index 2953ac7b0a..1e8adc54c5 100644
--- a/test/org/apache/coyote/ajp/SimpleAjpClient.java
+++ b/test/org/apache/coyote/ajp/SimpleAjpClient.java
@@ -31,7 +31,7 @@ public class SimpleAjpClient {
 
     private static final int AJP_PACKET_SIZE = 8192;
     private static final byte[] AJP_CPING;
-   
+
     static {
         TesterAjpMessage ajpCping = new TesterAjpMessage(16);
         ajpCping.reset();
@@ -45,19 +45,19 @@ public class SimpleAjpClient {
     private String host = "localhost";
     private int port = -1;
     private Socket socket = null;
-    
+
     public void setPort(int port) {
         this.port = port;
     }
-    
+
     public int getPort() {
         return port;
     }
-    
+
     public void connect() throws IOException {
         socket = SocketFactory.getDefault().createSocket(host, port);
     }
-    
+
     public void disconnect() throws IOException {
         socket.close();
         socket = null;
@@ -69,17 +69,17 @@ public class SimpleAjpClient {
     public TesterAjpMessage createForwardMessage(String url) {
         TesterAjpMessage message = new TesterAjpMessage(AJP_PACKET_SIZE);
         message.reset();
-        
+
         // Set the header bytes
         message.getBuffer()[0] = 0x12;
         message.getBuffer()[1] = 0x34;
-        
+
         // Code 2 for forward request
         message.appendByte(Constants.JK_AJP13_FORWARD_REQUEST);
 
         // HTTP method, GET = 2
         message.appendByte(0x02);
-        
+
         // Protocol
         message.appendString("http");
 
@@ -91,19 +91,19 @@ public class SimpleAjpClient {
 
         // Remote host
         message.appendString("client.dev.local");
-        
+
         // Server name
         message.appendString(host);
-        
+
         // Port
         message.appendInt(port);
 
         // Is ssl
         message.appendByte(0x00);
-        
+
         // No other headers or attributes
         message.appendInt(0);
-        
+
         // Terminator
         message.appendByte(0xFF);
 
@@ -165,7 +165,7 @@ public class SimpleAjpClient {
             return message;
         }
     }
-    
+
     protected boolean read(InputStream is, byte[] buf, int pos, int n)
         throws IOException {
 

==================================================
TesterAjpMessage.java
index c91b5287c9..5c4e8b20af 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -34,7 +34,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
          */
         // Has a protocol been specified
         String protocol = System.getProperty("tomcat.test.protocol");
-        
+
         // Use BIO by default
         if (protocol == null) {
             protocol = "org.apache.coyote.ajp.AjpProtocol";
@@ -45,7 +45,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         } else {
             protocol = "org.apache.coyote.ajp.AjpProtocol";
         }
-        
+
         return protocol;
     }
 
@@ -56,17 +56,17 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         tomcat.start();
 
         // Must have a real docBase - just use temp
-        org.apache.catalina.Context ctx = 
+        org.apache.catalina.Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
         Tomcat.addServlet(ctx, "helloWorld", new HelloWorldServlet());
         ctx.addServletMapping("/", "helloWorld");
 
         SimpleAjpClient ajpClient = new SimpleAjpClient();
-        
+
         ajpClient.setPort(getPort());
-        
+
         ajpClient.connect();
-        
+
         validateCpong(ajpClient.cping());
 
         TesterAjpMessage forwardMessage = ajpClient.createForwardMessage("/");
@@ -75,14 +75,14 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         for (int i = 0; i < 2; i++) {
             TesterAjpMessage responseHeaders = ajpClient.sendMessage(forwardMessage);
             // Expect 3 packets: headers, body, end
-            validateResponseHeaders(responseHeaders, 200);        
+            validateResponseHeaders(responseHeaders, 200);
             TesterAjpMessage responseBody = ajpClient.readMessage();
             validateResponseBody(responseBody, HelloWorldServlet.RESPONSE_TEXT);
             validateResponseEnd(ajpClient.readMessage(), true);
-            
+
             // Give connections plenty of time to time out
             Thread.sleep(2000);
-            
+
             // Double check the connection is still open
             validateCpong(ajpClient.cping());
         }
@@ -99,19 +99,19 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         // First two bytes should always be AB
         assertEquals((byte) 'A', message.buf[0]);
         assertEquals((byte) 'B', message.buf[1]);
-        
+
         // Set the start position and read the length
         message.processHeader(false);
-        
+
         // Check the length
         assertTrue(message.len > 0);
-        
+
         // Should be a header message
         assertEquals(0x04, message.readByte());
-        
+
         // Check status
         assertEquals(expectedStatus, message.readInt());
-        
+
         // Read the status message
         message.readString();
 
@@ -134,10 +134,10 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
             String expectedBody) throws Exception {
         assertEquals((byte) 'A', message.buf[0]);
         assertEquals((byte) 'B', message.buf[1]);
-        
+
         // Set the start position and read the length
         message.processHeader(false);
-        
+
         // Should be a body chunk message
         assertEquals(0x03, message.readByte());
 
@@ -154,7 +154,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         assertEquals((byte) 'B', message.buf[1]);
 
         message.processHeader(false);
-        
+
         // Should be an end body message
         assertEquals(0x05, message.readByte());
 

==================================================
TestAbstractHttp11Processor.java
index 8835c642d9..dd25813cb3 100644
--- a/test/org/apache/coyote/ajp/TesterAjpMessage.java
+++ b/test/org/apache/coyote/ajp/TesterAjpMessage.java
@@ -27,7 +27,7 @@ public class TesterAjpMessage extends AjpMessage {
     public TesterAjpMessage(int packetSize) {
         super(packetSize);
     }
-    
+
     public byte readByte() {
         return buf[pos++];
     }
@@ -42,10 +42,10 @@ public class TesterAjpMessage extends AjpMessage {
         int len = readInt();
         return readString(len);
     }
-    
+
     public String readString(int len) {
         StringBuilder buffer = new StringBuilder(len);
-        
+
         for (int i = 0; i < len; i++) {
             char c = (char) buf[pos++];
             buffer.append(c);
@@ -79,5 +79,5 @@ public class TesterAjpMessage extends AjpMessage {
         buf[3] = (byte) (dLen & 0xFF);
     }
 
-    
+
 }

==================================================
TestGzipOutputFilter.java
index 37da2fa084..4b2adb4ef8 100644
--- a/test/org/apache/coyote/http11/TestAbstractHttp11Processor.java
+++ b/test/org/apache/coyote/http11/TestAbstractHttp11Processor.java
@@ -36,13 +36,13 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
     @Test
     public void testWithTEVoid() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Use the normal Tomcat ROOT context
         File root = new File("test/webapp-3.0");
         tomcat.addWebapp("", root.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         String request =
             "POST /echo-params.jsp HTTP/1.1" + SimpleHttpClient.CRLF +
             "Host: any" + SimpleHttpClient.CRLF +
@@ -65,13 +65,13 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
     @Test
     public void testWithTEBuffered() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Use the normal Tomcat ROOT context
         File root = new File("test/webapp-3.0");
         tomcat.addWebapp("", root.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         String request =
             "POST /echo-params.jsp HTTP/1.1" + SimpleHttpClient.CRLF +
             "Host: any" + SimpleHttpClient.CRLF +
@@ -95,13 +95,13 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
     @Test
     public void testWithTEIdentity() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Use the normal Tomcat ROOT context
         File root = new File("test/webapp-3.0");
         tomcat.addWebapp("", root.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         String request =
             "POST /echo-params.jsp HTTP/1.1" + SimpleHttpClient.CRLF +
             "Host: any" + SimpleHttpClient.CRLF +
@@ -127,13 +127,13 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
     @Test
     public void testWithTESavedRequest() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Use the normal Tomcat ROOT context
         File root = new File("test/webapp-3.0");
         tomcat.addWebapp("", root.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         String request =
             "POST /echo-params.jsp HTTP/1.1" + SimpleHttpClient.CRLF +
             "Host: any" + SimpleHttpClient.CRLF +
@@ -157,13 +157,13 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
     @Test
     public void testWithTEUnsupported() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Use the normal Tomcat ROOT context
         File root = new File("test/webapp-3.0");
         tomcat.addWebapp("", root.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         String request =
             "POST /echo-params.jsp HTTP/1.1" + SimpleHttpClient.CRLF +
             "Host: any" + SimpleHttpClient.CRLF +
@@ -187,15 +187,15 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
     @Test
     public void testPipelining() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         Context ctxt = tomcat.addContext("",
                 System.getProperty("java.io.tmpdir"));
-        
+
         // Add protected servlet
         Tomcat.addServlet(ctxt, "TesterServlet", new TesterServlet());
         ctxt.addServletMapping("/foo", "TesterServlet");
-        
+
         tomcat.start();
 
         String requestPart1 =
@@ -226,17 +226,17 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
         };
         Thread t = new Thread(send);
         t.start();
-        
+
         // Sleep for 1500 ms which should mean the all of request 1 has been
         // sent and half of request 2
         Thread.sleep(1500);
-        
+
         // Now read the first response
         client.readResponse(true);
         assertFalse(client.isResponse50x());
         assertTrue(client.isResponse200());
         assertEquals("OK", client.getResponseBody());
-        
+
         // Read the second response. No need to sleep, read will block until
         // there is data to process
         client.readResponse(true);
@@ -244,7 +244,7 @@ public class TestAbstractHttp11Processor extends TomcatBaseTest {
         assertTrue(client.isResponse200());
         assertEquals("OK", client.getResponseBody());
     }
-    
+
     private static final class Client extends SimpleHttpClient {
         @Override
         public boolean isResponseBodyOK() {

==================================================
TestInternalInputBuffer.java
index 84683f9bc6..6f33c579d0 100644
--- a/test/org/apache/coyote/http11/TestGzipOutputFilter.java
+++ b/test/org/apache/coyote/http11/TestGzipOutputFilter.java
@@ -45,7 +45,7 @@ public class TestGzipOutputFilter {
      * to GZIPOutputStream and close it (to force flushing) 6. Compare the size
      * of the two arrays, they should be close (instead of one being much
      * shorter than the other one)
-     * 
+     *
      * @throws Exception
      */
     @Test

==================================================
TestChunkedInputFilter.java
index 00b3dd37aa..bddb98e942 100644
--- a/test/org/apache/coyote/http11/TestInternalInputBuffer.java
+++ b/test/org/apache/coyote/http11/TestInternalInputBuffer.java
@@ -37,31 +37,31 @@ import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 
 public class TestInternalInputBuffer extends TomcatBaseTest {
-    
+
     /**
      * Test case for https://issues.apache.org/bugzilla/show_bug.cgi?id=48839
      */
     @Test
     public void testBug48839() {
-        
+
         Bug48839Client client = new Bug48839Client();
         client.setPort(getPort());
-        
+
         client.doRequest();
         assertTrue(client.isResponse200());
         assertTrue(client.isResponseBodyOK());
     }
 
-    
+
     /**
      * Bug 48839 test client.
      */
     private class Bug48839Client extends SimpleHttpClient {
-                
+
         private Exception doRequest() {
-        
+
             Tomcat tomcat = getTomcatInstance();
-            
+
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug48839", new Bug48839Servlet());
             root.addServletMapping("/test", "Bug48839");
@@ -71,7 +71,7 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
 
                 // Open connection
                 connect();
-                
+
                 String[] request = new String[1];
                 request[0] =
                     "GET http://localhost:8080/test HTTP/1.1" + CRLF +
@@ -79,10 +79,10 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
                     "\tefgh" + CRLF +
                     "Connection: close" + CRLF +
                     CRLF;
-                
+
                 setRequest(request);
                 processRequest(); // blocks until response has been read
-                
+
                 // Close the connection
                 disconnect();
             } catch (Exception e) {
@@ -101,11 +101,11 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
             }
             return true;
         }
-        
+
     }
 
     private static class Bug48839Servlet extends HttpServlet {
-        
+
         private static final long serialVersionUID = 1L;
 
         /**
@@ -116,9 +116,9 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
                 throws ServletException, IOException {
             // Just echo the header value back as plain text
             resp.setContentType("text/plain");
-            
+
             PrintWriter out = resp.getWriter();
-            
+
             Enumeration<String> values = req.getHeaders("X-Bug48839");
             while (values.hasMoreElements()) {
                 out.println(values.nextElement());
@@ -129,23 +129,23 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
 
     @Test
     public void testBug51557NoColon() {
-        
+
         Bug51557Client client = new Bug51557Client("X-Bug51557NoColon");
         client.setPort(getPort());
-        
+
         client.doRequest();
         assertTrue(client.isResponse200());
         assertEquals("abcd", client.getResponseBody());
         assertTrue(client.isResponseBodyOK());
     }
 
-    
+
     @Test
     public void testBug51557Separators() throws Exception {
         char httpSeparators[] = new char[] {
                 '\t', ' ', '\"', '(', ')', ',', '/', ':', ';', '<',
                 '=', '>', '?', '@', '[', '\\', ']', '{', '}' };
-        
+
         for (char s : httpSeparators) {
             doTestBug51557Char(s);
             tearDown();
@@ -167,46 +167,46 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
 
     @Test
     public void testBug51557Continuation() {
-        
+
         Bug51557Client client = new Bug51557Client("X-Bug=51557NoColon",
                 "foo" + SimpleHttpClient.CRLF + " bar");
         client.setPort(getPort());
-        
+
         client.doRequest();
         assertTrue(client.isResponse200());
         assertEquals("abcd", client.getResponseBody());
         assertTrue(client.isResponseBodyOK());
     }
 
-    
+
     @Test
     public void testBug51557BoundaryStart() {
-        
+
         Bug51557Client client = new Bug51557Client("=X-Bug51557",
                 "invalid");
         client.setPort(getPort());
-        
+
         client.doRequest();
         assertTrue(client.isResponse200());
         assertEquals("abcd", client.getResponseBody());
         assertTrue(client.isResponseBodyOK());
     }
 
-    
+
     @Test
     public void testBug51557BoundaryEnd() {
-        
+
         Bug51557Client client = new Bug51557Client("X-Bug51557=",
                 "invalid");
         client.setPort(getPort());
-        
+
         client.doRequest();
         assertTrue(client.isResponse200());
         assertEquals("abcd", client.getResponseBody());
         assertTrue(client.isResponseBodyOK());
     }
 
-    
+
     private void doTestBug51557Char(char s) {
         Bug51557Client client =
             new Bug51557Client("X-Bug" + s + "51557", "invalid");
@@ -217,7 +217,7 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
         assertEquals("abcd", client.getResponseBody());
         assertTrue(client.isResponseBodyOK());
     }
-    
+
     /**
      * Bug 51557 test client.
      */
@@ -237,9 +237,9 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
         }
 
         private Exception doRequest() {
-        
+
             Tomcat tomcat = getTomcatInstance();
-            
+
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug51557",
                     new Bug51557Servlet(headerName));
@@ -250,7 +250,7 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
 
                 // Open connection
                 connect();
-                
+
                 String[] request = new String[1];
                 request[0] =
                     "GET http://localhost:8080/test HTTP/1.1" + CRLF +
@@ -258,10 +258,10 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
                     "X-Bug51557: abcd" + CRLF +
                     "Connection: close" + CRLF +
                     CRLF;
-                
+
                 setRequest(request);
                 processRequest(); // blocks until response has been read
-                
+
                 // Close the connection
                 disconnect();
             } catch (Exception e) {
@@ -280,11 +280,11 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
             }
             return true;
         }
-        
+
     }
 
     private static class Bug51557Servlet extends HttpServlet {
-        
+
         private static final long serialVersionUID = 1L;
 
         private String invalidHeaderName;
@@ -305,13 +305,13 @@ public class TestInternalInputBuffer extends TomcatBaseTest {
                 throws ServletException, IOException {
             // Just echo the header value back as plain text
             resp.setContentType("text/plain");
-            
+
             PrintWriter out = resp.getWriter();
-            
+
             processHeaders(invalidHeaderName, req, out);
             processHeaders("X-Bug51557", req, out);
         }
-        
+
         private void processHeaders(String header, HttpServletRequest req,
                 PrintWriter out) {
             Enumeration<String> values = req.getHeaders(header);

==================================================
TestELEvaluation.java
index b18ffbafcd..f58f05dce9 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -44,7 +44,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, "servlet", new EchoHeaderServlet());
@@ -83,7 +83,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, "servlet", new EchoHeaderServlet());
@@ -126,7 +126,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, "servlet", new EchoHeaderServlet());
@@ -157,12 +157,12 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         client.processRequest();
         assertEquals("null7null", client.getResponseBody());
     }
-    
+
     private static class EchoHeaderServlet extends HttpServlet {
         private static final long serialVersionUID = 1L;
 
         @Override
-        protected void doPost(HttpServletRequest req, HttpServletResponse resp) 
+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
             resp.setContentType("text/plain");
             PrintWriter pw = resp.getWriter();
@@ -179,9 +179,9 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
             while (is.read() > -1) {
                 count++;
             }
-            
+
             pw.write(Integer.valueOf(count).toString());
-            
+
             // Header should be visible now
             value = req.getHeader("x-trailer");
             if (value == null) {
@@ -190,7 +190,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
             pw.write(value);
         }
     }
-    
+
     private static class TrailerClient extends SimpleHttpClient {
 
         @Override

==================================================
TestELInJsp.java
index 58367c16f8..cf8f5b1dc9 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -68,7 +68,7 @@ public class TestELEvaluation {
 
 
     /**
-     * Test use nested ternary expressions. This was primarily an EL parser bug. 
+     * Test use nested ternary expressions. This was primarily an EL parser bug.
      */
     @Test
     public void testBug44994() {
@@ -102,7 +102,7 @@ public class TestELEvaluation {
 
         // '\' is only an escape character inside a StringLiteral
         assertEquals("\\\\", evaluateExpression("\\\\"));
-        
+
         /*
          * LiteralExpresions can only contain ${ or #{ if escaped with \
          * \ is not an escape character in any other circumstances including \\
@@ -124,7 +124,7 @@ public class TestELEvaluation {
     public void testParserStringLiteral() {
         // Inspired by work on bug 45451, comments from kkolinko on the dev
         // list and looking at the spec to find some edge cases
-        
+
         // The only characters that can be escaped inside a String literal
         // are \ " and '. # and $ are not escaped inside a String literal.
         assertEquals("\\", evaluateExpression("${'\\\\'}"));
@@ -170,7 +170,7 @@ public class TestELEvaluation {
         compareBoth("Null should compare equal to \"\"", 0, "", null);
         compareBoth("Null should be less than File()",-1, null, new File(""));
         compareBoth("Null should be less than Date()",-1, null, new Date());
-        compareBoth("Date(0) should be less than Date(1)",-1, new Date(0), new Date(1));        
+        compareBoth("Date(0) should be less than Date(1)",-1, new Date(0), new Date(1));
         try {
             compareBoth("Should not compare",0, new Date(), new File(""));
             fail("Expecting ClassCastException");
@@ -206,7 +206,7 @@ public class TestELEvaluation {
                 String.class);
         return (String) ve.getValue(ctx);
     }
-    
+
     public static class FMapper extends FunctionMapper {
 
         @Override
@@ -220,7 +220,7 @@ public class TestELEvaluation {
                     // Ignore
                 } catch (NoSuchMethodException e) {
                     // Ignore
-                } 
+                }
             }
             return null;
         }

==================================================
TestMethodExpressionImpl.java
index bb38e46813..a027ee7f30 100644
--- a/test/org/apache/el/TestELInJsp.java
+++ b/test/org/apache/el/TestELInJsp.java
@@ -41,12 +41,12 @@ public class TestELInJsp extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug36923.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "00-${hello world}");
     }
@@ -58,12 +58,12 @@ public class TestELInJsp extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug42565.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "00-false");
         assertEcho(result, "01-false");
@@ -87,16 +87,16 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug44994() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug44994.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "00-none");
         assertEcho(result, "01-one");
@@ -107,16 +107,16 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug45427() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45427.jsp");
-        
+
         String result = res.toString();
         // Warning: JSP attribute escaping != Java String escaping
         assertEcho(result, "00-hello world");
@@ -143,23 +143,23 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug45451() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45451a.jsp");
-        
+
         String result = res.toString();
         // Warning: JSP attribute escaping != Java String escaping
         assertEcho(result, "00-\\'hello world\\'");
         assertEcho(result, "01-\\'hello world\\'");
         assertEcho(result, "02-\\'hello world\\'");
         assertEcho(result, "03-\\'hello world\\'");
-        
+
         res = getUrl("http://localhost:" + getPort() + "/test/bug45nnn/bug45451b.jsp");
         result = res.toString();
         // Warning: JSP attribute escaping != Java String escaping
@@ -173,13 +173,13 @@ public class TestELInJsp extends TomcatBaseTest {
         assertEcho(result, "05-${1+1}");
         assertEcho(result, "06-\\2");
         assertEcho(result, "07-\\${1+1}");
-        assertEcho(result, "08-\\\\2"); 
+        assertEcho(result, "08-\\\\2");
         assertEcho(result, "09-2");
         assertEcho(result, "10-#{1+1}");
         assertEcho(result, "11-\\2");
         assertEcho(result, "12-\\#{1+1}");
-        assertEcho(result, "13-\\\\2"); 
-        
+        assertEcho(result, "13-\\\\2");
+
         res = getUrl("http://localhost:" + getPort() + "/test/bug45nnn/bug45451c.jsp");
         result = res.toString();
         // Warning: JSP attribute escaping != Java String escaping
@@ -218,7 +218,7 @@ public class TestELInJsp extends TomcatBaseTest {
         assertEcho(result, "11-\\#{1+1}");
         assertEcho(result, "12-\\\\#{1+1}");
         assertEcho(result, "13-\\\\\\#{1+1}");
-        
+
         res = getUrl("http://localhost:" + getPort() + "/test/bug45nnn/bug45451e.jsp");
         result = res.toString();
         // Warning: JSP attribute escaping != Java String escaping
@@ -230,9 +230,9 @@ public class TestELInJsp extends TomcatBaseTest {
         assertEcho(result, "03-\\\\${1+1}");
         assertEcho(result, "04-2");
         assertEcho(result, "05-${1+1}");
-        assertEcho(result, "06-\\2");      
+        assertEcho(result, "06-\\2");
         assertEcho(result, "07-\\${1+1}");
-        assertEcho(result, "08-\\\\2"); 
+        assertEcho(result, "08-\\\\2");
         assertEcho(result, "09-#{1+1}");
         assertEcho(result, "10-\\#{1+1}");
         assertEcho(result, "11-\\#{1+1}");
@@ -244,16 +244,16 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug45511() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45511.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "00-true");
         assertEcho(result, "01-false");
@@ -263,11 +263,11 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug46596() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -280,16 +280,16 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug47413() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug47413.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "00-hello world");
         assertEcho(result, "01-hello world");
@@ -309,11 +309,11 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testBug48112() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -329,12 +329,12 @@ public class TestELInJsp extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug49nnn/bug49555.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "00-" + TesterFunctions.Inner$Class.RETVAL);
     }
@@ -346,12 +346,12 @@ public class TestELInJsp extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug51544.jsp");
-        
+
         String result = res.toString();
         assertEcho(result, "Empty list: true");
     }
@@ -360,11 +360,11 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testELMisc() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -394,11 +394,11 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testScriptingExpression() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -422,11 +422,11 @@ public class TestELInJsp extends TomcatBaseTest {
     public void testELMethod() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -440,7 +440,7 @@ public class TestELInJsp extends TomcatBaseTest {
         assertEcho(result, "05-Hello JUnit from Tomcat");
     }
 
-    // Assertion for text contained with <p></p>, e.g. printed by tags:echo 
+    // Assertion for text contained with <p></p>, e.g. printed by tags:echo
     private static void assertEcho(String result, String expected) {
         assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
     }

==================================================
TestValueExpressionImpl.java
index d26f5f0e6b..6a4f399d02 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -46,32 +46,32 @@ public class TestMethodExpressionImpl {
         beanA.setName("A");
         context.getVariableMapper().setVariable("beanA",
                 factory.createValueExpression(beanA, TesterBeanA.class));
-        
+
         TesterBeanAA beanAA = new TesterBeanAA();
         beanAA.setName("AA");
         context.getVariableMapper().setVariable("beanAA",
                 factory.createValueExpression(beanAA, TesterBeanAA.class));
-        
+
         TesterBeanAAA beanAAA = new TesterBeanAAA();
         beanAAA.setName("AAA");
         context.getVariableMapper().setVariable("beanAAA",
                 factory.createValueExpression(beanAAA, TesterBeanAAA.class));
-        
-        TesterBeanB beanB = new TesterBeanB();        
+
+        TesterBeanB beanB = new TesterBeanB();
         beanB.setName("B");
         context.getVariableMapper().setVariable("beanB",
                 factory.createValueExpression(beanB, TesterBeanB.class));
-        
-        TesterBeanBB beanBB = new TesterBeanBB();        
+
+        TesterBeanBB beanBB = new TesterBeanBB();
         beanBB.setName("BB");
         context.getVariableMapper().setVariable("beanBB",
                 factory.createValueExpression(beanBB, TesterBeanBB.class));
-        
-        TesterBeanBBB beanBBB = new TesterBeanBBB();        
+
+        TesterBeanBBB beanBBB = new TesterBeanBBB();
         beanBBB.setName("BBB");
         context.getVariableMapper().setVariable("beanBBB",
                 factory.createValueExpression(beanBBB, TesterBeanBBB.class));
-        
+
         TesterBeanC beanC = new TesterBeanC();
         context.getVariableMapper().setVariable("beanC",
                 factory.createValueExpression(beanC, TesterBeanC.class));

==================================================
TesterBeanA.java
index 2572ef1306..6caf91495b 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -41,7 +41,7 @@ public class TestValueExpressionImpl {
     public void testGetValueReference() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         TesterBeanB beanB = new TesterBeanB();
         beanB.setName("Tomcat");
         ValueExpression var =
@@ -54,11 +54,11 @@ public class TestValueExpressionImpl {
         // First check the basics work
         String result = (String) ve.getValue(context);
         assertEquals("Tomcat", result);
-        
+
         // Now check the value reference
         ValueReference vr = ve.getValueReference(context);
         assertNotNull(vr);
-        
+
         assertEquals(beanB, vr.getBase());
         assertEquals("name", vr.getProperty());
     }
@@ -67,12 +67,12 @@ public class TestValueExpressionImpl {
     public void testBug49345() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         TesterBeanA beanA = new TesterBeanA();
         TesterBeanB beanB = new TesterBeanB();
         beanB.setName("Tomcat");
         beanA.setBean(beanB);
-        
+
         ValueExpression var =
             factory.createValueExpression(beanA, TesterBeanA.class);
         context.getVariableMapper().setVariable("beanA", var);
@@ -83,11 +83,11 @@ public class TestValueExpressionImpl {
         // First check the basics work
         String result = (String) ve.getValue(context);
         assertEquals("Tomcat", result);
-        
+
         // Now check the value reference
         ValueReference vr = ve.getValueReference(context);
         assertNotNull(vr);
-        
+
         assertEquals(beanB, vr.getBase());
         assertEquals("name", vr.getProperty());
     }
@@ -96,9 +96,9 @@ public class TestValueExpressionImpl {
     public void testBug50105() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         TesterEnum testEnum = TesterEnum.APPLE;
-        
+
         ValueExpression var =
             factory.createValueExpression(testEnum, TesterEnum.class);
         context.getVariableMapper().setVariable("testEnum", var);
@@ -108,7 +108,7 @@ public class TestValueExpressionImpl {
                 context, "${testEnum}", String.class);
         String result1 = (String) ve1.getValue(context);
         assertEquals("APPLE", result1);
-        
+
         ValueExpression ve2 = factory.createValueExpression(
                 context, "foo${testEnum}bar", String.class);
         String result2 = (String) ve2.getValue(context);
@@ -119,14 +119,14 @@ public class TestValueExpressionImpl {
     public void testBug51177ObjectMap() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         Object o1 = "String value";
         Object o2 = Integer.valueOf(32);
 
         Map<Object,Object> map = new HashMap<Object,Object>();
         map.put("key1", o1);
         map.put("key2", o2);
-        
+
         ValueExpression var =
             factory.createValueExpression(map, Map.class);
         context.getVariableMapper().setVariable("map", var);
@@ -135,7 +135,7 @@ public class TestValueExpressionImpl {
                 context, "${map.key1}", Object.class);
         ve1.setValue(context, o2);
         assertEquals(o2, ve1.getValue(context));
-        
+
         ValueExpression ve2 = factory.createValueExpression(
                 context, "${map.key2}", Object.class);
         ve2.setValue(context, o1);
@@ -146,14 +146,14 @@ public class TestValueExpressionImpl {
     public void testBug51177ObjectList() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         Object o1 = "String value";
         Object o2 = Integer.valueOf(32);
 
         List<Object> list = new ArrayList<Object>();
         list.add(0, o1);
         list.add(1, o2);
-        
+
         ValueExpression var =
             factory.createValueExpression(list, List.class);
         context.getVariableMapper().setVariable("list", var);
@@ -162,7 +162,7 @@ public class TestValueExpressionImpl {
                 context, "${list[0]}", Object.class);
         ve1.setValue(context, o2);
         assertEquals(o2, ve1.getValue(context));
-        
+
         ValueExpression ve2 = factory.createValueExpression(
                 context, "${list[1]}", Object.class);
         ve2.setValue(context, o1);
@@ -177,10 +177,10 @@ public class TestValueExpressionImpl {
     public void testBug51544Bean() throws Exception {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         TesterBeanA beanA = new TesterBeanA();
         beanA.setValList(Collections.emptyList());
-        
+
         ValueExpression var =
             factory.createValueExpression(beanA, TesterBeanA.class);
         context.getVariableMapper().setVariable("beanA", var);
@@ -200,9 +200,9 @@ public class TestValueExpressionImpl {
     public void testBug51544Direct() throws Exception {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         List<?> list = Collections.emptyList();
-        
+
         ValueExpression var =
             factory.createValueExpression(list, List.class);
         context.getVariableMapper().setVariable("list", var);

==================================================
TesterBeanB.java
index 758e9d1153..9b636a4335 100644
--- a/test/org/apache/el/TesterBeanA.java
+++ b/test/org/apache/el/TesterBeanA.java
@@ -40,11 +40,11 @@ public class TesterBeanA {
     public void setName(String name) {
         this.name = name;
     }
-    
+
     public long getValLong() {
         return valLong;
     }
-    
+
     public void setValLong(long valLong) {
         this.valLong = valLong;
     }

==================================================
TesterEnum.java
index de5d7a00b8..9e82f02e76 100644
--- a/test/org/apache/el/TesterBeanB.java
+++ b/test/org/apache/el/TesterBeanB.java
@@ -27,7 +27,7 @@ public class TesterBeanB {
     public void setName(String name) {
         this.name = name;
     }
-    
+
     public String sayHello() {
         return "Hello from " + name;
     }

==================================================
TesterFunctions.java
index 9615aa1707..241fbbe336 100644
--- a/test/org/apache/el/TesterEnum.java
+++ b/test/org/apache/el/TesterEnum.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -18,7 +18,7 @@ package org.apache.el;
 
 public enum TesterEnum {
     APPLE, ORANGE;
-    
+
     @Override
     public String toString() {
         return "This is a " + this.name();

==================================================
TestELSupport.java
index 4e7c45e9ee..42961adfff 100644
--- a/test/org/apache/el/TesterFunctions.java
+++ b/test/org/apache/el/TesterFunctions.java
@@ -23,7 +23,7 @@ public class TesterFunctions {
     }
 
     public static class Inner$Class {
-        
+
         public static final String RETVAL = "Return from bug49555";
         public static String bug49555() {
             return RETVAL;

==================================================
TestELParser.java
index fd2ea05081..11895dd5b8 100644
--- a/test/org/apache/el/lang/TestELSupport.java
+++ b/test/org/apache/el/lang/TestELSupport.java
@@ -117,7 +117,7 @@ public class TestELSupport {
     private static void testIsSame(Object value) {
         assertEquals(value, ELSupport.coerceToNumber(value, value.getClass()));
     }
-    
+
     private static enum TestEnumA {
         VALA1,
         VALA2

==================================================
TestAttributeParser.java
index 928c12dfa0..ab12e0695a 100644
--- a/test/org/apache/el/parser/TestELParser.java
+++ b/test/org/apache/el/parser/TestELParser.java
@@ -35,7 +35,7 @@ public class TestELParser {
     public void testBug49081() {
         // OP's report
         testExpression("#${1+1}", "#2");
-        
+
         // Variations on a theme
         testExpression("#", "#");
         testExpression("##", "##");
@@ -64,7 +64,7 @@ public class TestELParser {
     public void testJavaKeyWordSuffix() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         TesterBeanA beanA = new TesterBeanA();
         beanA.setInt("five");
         ValueExpression var =
@@ -86,7 +86,7 @@ public class TestELParser {
     public void testJavaKeyWordIdentifier() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         TesterBeanA beanA = new TesterBeanA();
         beanA.setInt("five");
         ValueExpression var =
@@ -107,7 +107,7 @@ public class TestELParser {
     private void testExpression(String expression, String expected) {
         ExpressionFactory factory = ExpressionFactory.newInstance();
         ELContext context = new ELContextImpl();
-        
+
         ValueExpression ve = factory.createValueExpression(
                 context, expression, String.class);
 

==================================================
TestCompiler.java
index 8457c91f7f..c551bceb9c 100644
--- a/test/org/apache/jasper/compiler/TestAttributeParser.java
+++ b/test/org/apache/jasper/compiler/TestAttributeParser.java
@@ -76,7 +76,7 @@ public class TestAttributeParser {
                 evalAttr("${0 lt 2 ? 1 lt 2 ? 'many': 'one': 'none'}", '\"'));
     }
 
-    
+
     /**
      * Test the quoting requirements of JSP attributes. This doesn't make use of
      * EL. See {@link #testBug45451()} for a test that combines JSP attribute
@@ -95,7 +95,7 @@ public class TestAttributeParser {
         assertEquals("hello world\"", evalAttr("hello world\"", '\"'));
         assertEquals("hello world'", evalAttr("hello world\\'", '\"'));
         assertEquals("hello world\"", evalAttr("hello world\\\"", '\"'));
-        
+
         assertEquals("hello 'world'", evalAttr("hello 'world'", '\''));
         assertEquals("hello 'world", evalAttr("hello 'world", '\''));
         assertEquals("hello world'", evalAttr("hello world'", '\''));
@@ -125,7 +125,7 @@ public class TestAttributeParser {
     public void testLiteral() {
         // Inspired by work on bug 45451, comments from kkolinko on the dev
         // list and looking at the spec to find some edge cases
-        
+
         // '\' is only an escape character inside a StringLiteral
         assertEquals("\\", evalAttr("${'\\\\\\\\'}", '\"'));
         assertEquals("\\", evalAttr("${\"\\\\\\\\\"}", '\"'));
@@ -140,7 +140,7 @@ public class TestAttributeParser {
         assertEquals("'\\", evalAttr("${\\\"'\\\\\\\\\\\"}", '\"'));
         assertEquals("\\\"", evalAttr("${\\\"\\\\\\\\\\\\\\\"\\\"}", '\"'));
         assertEquals("\"\\", evalAttr("${\\\"\\\\\\\"\\\\\\\\\\\"}", '\"'));
-        
+
         // Quoting <% and %>
         assertEquals("hello <% world", evalAttr("hello <\\% world", '\"'));
         assertEquals("hello %> world", evalAttr("hello %> world", '\"'));
@@ -170,7 +170,7 @@ public class TestAttributeParser {
     }
 
     private String evalAttr(String expression, char quote) {
-        
+
         ELContextImpl ctx = new ELContextImpl();
         ctx.setFunctionMapper(new FMapper());
         ExpressionFactoryImpl exprFactory = new ExpressionFactoryImpl();
@@ -180,7 +180,7 @@ public class TestAttributeParser {
                 String.class);
         return (String) ve.getValue(ctx);
     }
-    
+
     private String parseScriptExpression(String expression, char quote) {
         return AttributeParser.getUnquoted(expression, quote, false, false,
                 false);
@@ -199,7 +199,7 @@ public class TestAttributeParser {
                     // Ignore
                 } catch (NoSuchMethodException e) {
                     // Ignore
-                } 
+                }
             }
             return null;
         }

==================================================
TestGenerator.java
index 47af1e5eea..9ebbec7468 100644
--- a/test/org/apache/jasper/compiler/TestCompiler.java
+++ b/test/org/apache/jasper/compiler/TestCompiler.java
@@ -42,14 +42,14 @@ public class TestCompiler extends TomcatBaseTest {
 
         ByteChunk res = new ByteChunk();
         Map<String,List<String>> headers = new HashMap<String,List<String>>();
-        
+
         getUrl("http://localhost:" + getPort() + "/test/bug49nnn/bug49726a.jsp",
                 res, headers);
 
         // Check request completed
         String result = res.toString();
         assertEcho(result, "OK");
-        
+
         // Check content type
         assertTrue(headers.get("Content-Type").get(0).startsWith("text/html"));
     }
@@ -64,14 +64,14 @@ public class TestCompiler extends TomcatBaseTest {
 
         ByteChunk res = new ByteChunk();
         Map<String,List<String>> headers = new HashMap<String,List<String>>();
-        
+
         getUrl("http://localhost:" + getPort() + "/test/bug49nnn/bug49726b.jsp",
                 res, headers);
 
         // Check request completed
         String result = res.toString();
         assertEcho(result, "OK");
-        
+
         // Check content type
         assertTrue(headers.get("Content-Type").get(0).startsWith("text/plain"));
     }

==================================================
TestJspConfig.java
index 29d494d4d3..608992eefd 100644
--- a/test/org/apache/jasper/compiler/TestGenerator.java
+++ b/test/org/apache/jasper/compiler/TestGenerator.java
@@ -46,16 +46,16 @@ public class TestGenerator extends TomcatBaseTest {
     public void testBug45015a() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45015a.jsp");
-        
+
         String result = res.toString();
         // Beware of the differences between escaping in JSP attributes and
         // in Java Strings
@@ -75,16 +75,16 @@ public class TestGenerator extends TomcatBaseTest {
     public void testBug45015b() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45015b.jsp", new ByteChunk(), null);
-        
+
         assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
@@ -92,16 +92,16 @@ public class TestGenerator extends TomcatBaseTest {
     public void testBug45015c() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45015c.jsp", new ByteChunk(), null);
-        
+
         assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
@@ -109,21 +109,21 @@ public class TestGenerator extends TomcatBaseTest {
     public void testBug48701Fail() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         StandardContext ctxt = (StandardContext) tomcat.addWebapp(null,
                 "/test", appDir.getAbsolutePath());
-        
+
         // This test needs the JSTL libraries
         File lib = new File("webapps/examples/WEB-INF/lib");
         ctxt.setAliases("/WEB-INF/lib=" + lib.getCanonicalPath());
-        
+
         tomcat.start();
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug48nnn/bug48701-fail.jsp", new ByteChunk(), null);
-        
+
         assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
@@ -146,20 +146,20 @@ public class TestGenerator extends TomcatBaseTest {
     public void testBug48701TagVariableInfoNameFromAttribute() throws Exception {
         testBug48701("bug48nnn/bug48701-TVI-NFA.jsp");
     }
-    
+
     private void testBug48701(String jsp) throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/" + jsp);
-        
+
         String result = res.toString();
         assertEcho(result, "00-PASS");
     }
@@ -186,9 +186,9 @@ public class TestGenerator extends TomcatBaseTest {
             return super.doStartTag();
         }
 
-        
+
     }
-    
+
     public static class Bug48701TEI extends TagExtraInfo {
 
         @Override
@@ -200,7 +200,7 @@ public class TestGenerator extends TomcatBaseTest {
         }
 
     }
-    
+
     public static class Bean {
         private String time;
 
@@ -231,7 +231,7 @@ public class TestGenerator extends TomcatBaseTest {
 
         ByteChunk res = new ByteChunk();
         Map<String,List<String>> headers = new HashMap<String,List<String>>();
-        
+
         getUrl("http://localhost:" + getPort() + "/test/bug49nnn/bug49799.jsp",
                 res, headers);
 

==================================================
TestJspDocumentParser.java
index cdd340a151..1ea23eae14 100644
--- a/test/org/apache/jasper/compiler/TestJspConfig.java
+++ b/test/org/apache/jasper/compiler/TestJspConfig.java
@@ -33,18 +33,18 @@ public class TestJspConfig extends TomcatBaseTest {
     public void testServlet23NoEL() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-2.3");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/el-as-literal.jsp");
 
         String result = res.toString();
-        
+
         assertTrue(result.indexOf("<p>00-${'hello world'}</p>") > 0);
         assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
     }
@@ -53,18 +53,18 @@ public class TestJspConfig extends TomcatBaseTest {
     public void testServlet24NoEL() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-2.4");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/el-as-literal.jsp");
 
         String result = res.toString();
-        
+
         assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
         assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
     }
@@ -73,18 +73,18 @@ public class TestJspConfig extends TomcatBaseTest {
     public void testServlet25NoEL() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-2.5");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/el-as-literal.jsp");
 
         String result = res.toString();
-        
+
         assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
 
@@ -92,18 +92,18 @@ public class TestJspConfig extends TomcatBaseTest {
     public void testServlet30NoEL() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/el-as-literal.jsp");
 
         String result = res.toString();
-        
+
         assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
 

==================================================
TestParser.java
index 7f3a123b03..4fe1ed7e9a 100644
--- a/test/org/apache/jasper/compiler/TestJspDocumentParser.java
+++ b/test/org/apache/jasper/compiler/TestJspDocumentParser.java
@@ -37,16 +37,16 @@ public class TestJspDocumentParser extends TomcatBaseTest {
     public void testBug47977() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug47977.jspx", new ByteChunk(), null);
-        
+
         assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
@@ -54,11 +54,11 @@ public class TestJspDocumentParser extends TomcatBaseTest {
     public void testBug48827() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         Exception e = null;

==================================================
TestParserNoStrictWhitespace.java
index 13d8fa61b3..dd3d782450 100644
--- a/test/org/apache/jasper/compiler/TestParser.java
+++ b/test/org/apache/jasper/compiler/TestParser.java
@@ -40,16 +40,16 @@ public class TestParser extends TomcatBaseTest {
     public void testBug48627() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug48nnn/bug48627.jsp");
-        
+
         String result = res.toString();
         // Beware of the differences between escaping in JSP attributes and
         // in Java Strings
@@ -61,11 +61,11 @@ public class TestParser extends TomcatBaseTest {
     public void testBug48668a() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -110,7 +110,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -127,7 +127,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int sc = getUrl("http://localhost:" + getPort() +
@@ -144,7 +144,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int sc = getUrl("http://localhost:" + getPort() +
@@ -162,7 +162,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -182,7 +182,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -202,7 +202,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -221,7 +221,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -240,7 +240,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -259,7 +259,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -278,7 +278,7 @@ public class TestParser extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();

==================================================
TestScriptingVariabler.java
index 5d03012cae..8de35e4d79 100644
--- a/test/org/apache/jasper/compiler/TestParserNoStrictWhitespace.java
+++ b/test/org/apache/jasper/compiler/TestParserNoStrictWhitespace.java
@@ -35,7 +35,7 @@ import org.apache.tomcat.util.buf.ByteChunk;
  * enabled by default.
  */
 public class TestParserNoStrictWhitespace extends TomcatBaseTest {
-    
+
     @Override
     public void setUp() throws Exception {
         System.setProperty(
@@ -48,16 +48,16 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
     public void testBug48627() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug48nnn/bug48627.jsp");
-        
+
         String result = res.toString();
         // Beware of the differences between escaping in JSP attributes and
         // in Java Strings
@@ -69,11 +69,11 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
     public void testBug48668a() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -118,7 +118,7 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -136,7 +136,7 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
@@ -156,7 +156,7 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
         File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int sc = getUrl("http://localhost:" + getPort() +

==================================================
TestValidator.java
index 0eaf2be3e3..baaf774437 100644
--- a/test/org/apache/jasper/compiler/TestScriptingVariabler.java
+++ b/test/org/apache/jasper/compiler/TestScriptingVariabler.java
@@ -38,11 +38,11 @@ public class TestScriptingVariabler extends TomcatBaseTest {
     public void testBug42390() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         Exception e = null;
@@ -55,7 +55,7 @@ public class TestScriptingVariabler extends TomcatBaseTest {
         // Should not fail
         assertNull(e);
     }
-    
+
     public static class Bug48616aTag extends TagSupport {
         private static final long serialVersionUID = 1L;
     }
@@ -81,11 +81,11 @@ public class TestScriptingVariabler extends TomcatBaseTest {
     public void testBug48616() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         Exception e = null;
@@ -103,11 +103,11 @@ public class TestScriptingVariabler extends TomcatBaseTest {
     public void testBug48616b() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         Exception e = null;

==================================================
TestDirContextURLStreamHandlerFactory.java
index c019d8bd47..bd9dafc567 100644
--- a/test/org/apache/jasper/compiler/TestValidator.java
+++ b/test/org/apache/jasper/compiler/TestValidator.java
@@ -39,16 +39,16 @@ public class TestValidator extends TomcatBaseTest {
     public void testBug47331() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug47331.jsp", new ByteChunk(), null);
-        
+
         assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
@@ -56,11 +56,11 @@ public class TestValidator extends TomcatBaseTest {
     public void testTldVersions23() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-2.3");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -81,11 +81,11 @@ public class TestValidator extends TomcatBaseTest {
     public void testTldVersions24() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-2.4");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -106,11 +106,11 @@ public class TestValidator extends TomcatBaseTest {
     public void testTldVersions25() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-2.5");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -131,11 +131,11 @@ public class TestValidator extends TomcatBaseTest {
     public void testTldVersions30() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
+        File appDir =
             new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -151,7 +151,7 @@ public class TestValidator extends TomcatBaseTest {
         assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
         assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
     }
-    
+
     public static class Echo extends TagSupport {
 
         private static final long serialVersionUID = 1L;

==================================================
TestNamingContext.java
index 49e41c37cd..73d46dcf0c 100644
--- a/test/org/apache/naming/resources/TestDirContextURLStreamHandlerFactory.java
+++ b/test/org/apache/naming/resources/TestDirContextURLStreamHandlerFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,9 +30,9 @@ public class TestDirContextURLStreamHandlerFactory {
 
     @Test
     public void testUserSuppliedFactory() throws Exception {
-        
+
         URL url = null;
-        
+
         // Initially unknown
         try {
             url = new URL("foo://www.apache.org");
@@ -40,7 +40,7 @@ public class TestDirContextURLStreamHandlerFactory {
             // Ignore
         }
         assertNull(url);
-        
+
         // Set the factory
         URL.setURLStreamHandlerFactory(
                 DirContextURLStreamHandlerFactory.getInstance());
@@ -56,7 +56,7 @@ public class TestDirContextURLStreamHandlerFactory {
         // Register a user factory
         DirContextURLStreamHandlerFactory.addUserFactory(
                 new FooURLStreamHandlerFactory());
-        
+
         // Now it works
         try {
             url = new URL("foo://www.apache.org");
@@ -65,7 +65,7 @@ public class TestDirContextURLStreamHandlerFactory {
         }
         assertNotNull(url);
     }
-    
+
     public static class FooURLStreamHandlerFactory
             implements URLStreamHandlerFactory {
 

==================================================
TestProxyDirContext.java
index 8777ded35a..f28e3067a8 100644
--- a/test/org/apache/naming/resources/TestNamingContext.java
+++ b/test/org/apache/naming/resources/TestNamingContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -50,15 +50,15 @@ public class TestNamingContext extends TomcatBaseTest {
     public void testLookupNonSingletonResource() throws Exception {
         doTestLookup(false);
     }
-    
+
     public void doTestLookup(boolean useSingletonResource) throws Exception {
         Tomcat tomcat = getTomcatInstance();
         tomcat.enableNaming();
-        
+
         // Must have a real docBase - just use temp
         StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // Create the resource
         ContextResource cr = new ContextResource();
         cr.setName("list/foo");
@@ -66,7 +66,7 @@ public class TestNamingContext extends TomcatBaseTest {
         cr.setProperty("factory", "org.apache.naming.resources.TesterFactory");
         cr.setSingleton(useSingletonResource);
         ctx.getNamingResources().addResource(cr);
-        
+
         // Map the test Servlet
         Bug49994Servlet bug49994Servlet = new Bug49994Servlet();
         Tomcat.addServlet(ctx, "bug49994Servlet", bug49994Servlet);
@@ -75,7 +75,7 @@ public class TestNamingContext extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
-        
+
         String expected;
         if (useSingletonResource) {
             expected = "EQUAL";
@@ -89,7 +89,7 @@ public class TestNamingContext extends TomcatBaseTest {
     public static final class Bug49994Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
-        
+
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
@@ -116,18 +116,18 @@ public class TestNamingContext extends TomcatBaseTest {
     public void testListBindings() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         tomcat.enableNaming();
-        
+
         // Must have a real docBase - just use temp
         StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // Create the resource
         ContextResource cr = new ContextResource();
         cr.setName("list/foo");
         cr.setType("org.apache.naming.resources.TesterObject");
         cr.setProperty("factory", "org.apache.naming.resources.TesterFactory");
         ctx.getNamingResources().addResource(cr);
-        
+
         // Map the test Servlet
         Bug23950Servlet bug23950Servlet = new Bug23950Servlet();
         Tomcat.addServlet(ctx, "bug23950Servlet", bug23950Servlet);
@@ -138,11 +138,11 @@ public class TestNamingContext extends TomcatBaseTest {
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
         assertEquals("org.apache.naming.resources.TesterObject", bc.toString());
     }
-    
+
     public static final class Bug23950Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
-        
+
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
@@ -168,11 +168,11 @@ public class TestNamingContext extends TomcatBaseTest {
     public void testBeanFactory() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         tomcat.enableNaming();
-        
+
         // Must have a real docBase - just use temp
         StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // Create the resource
         ContextResource cr = new ContextResource();
         cr.setName("bug50351");
@@ -180,7 +180,7 @@ public class TestNamingContext extends TomcatBaseTest {
         cr.setProperty("factory", "org.apache.naming.factory.BeanFactory");
         cr.setProperty("foo", "value");
         ctx.getNamingResources().addResource(cr);
-        
+
         // Map the test Servlet
         Bug50351Servlet bug50351Servlet = new Bug50351Servlet();
         Tomcat.addServlet(ctx, "bug50351Servlet", bug50351Servlet);
@@ -195,7 +195,7 @@ public class TestNamingContext extends TomcatBaseTest {
     public static final class Bug50351Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
-        
+
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
@@ -213,16 +213,16 @@ public class TestNamingContext extends TomcatBaseTest {
             }
         }
     }
-    
+
     @Test
     public void testBug51744() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         tomcat.enableNaming();
-        
+
         // Must have a real docBase - just use temp
         StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        
+
         // Map the test Servlet
         Bug51744Servlet bug51744Servlet = new Bug51744Servlet();
         Tomcat.addServlet(ctx, "bug51744Servlet", bug51744Servlet);
@@ -264,7 +264,7 @@ public class TestNamingContext extends TomcatBaseTest {
                     throw new ServletException(
                             "No error when one was expected");
                 }
-                
+
                 out.print(env1.getEnvironment().get("TestName"));
             } catch (NamingException ne) {
                 ne.printStackTrace(out);

==================================================
TestWarDirContext.java
index 6ddb1153d9..8105f95ff4 100644
--- a/test/org/apache/naming/resources/TestProxyDirContext.java
+++ b/test/org/apache/naming/resources/TestProxyDirContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -39,13 +39,13 @@ public class TestProxyDirContext extends TomcatBaseTest {
     @Test
     public void testLookupException() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         // Must have a real docBase - just use temp
         StandardContext ctx = (StandardContext)
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
         ctx.setCacheTTL(500);
         tomcat.start();
-        
+
         try {
             ctx.getResources().lookup("/WEB-INF/web.xml");
             fail();

==================================================
TesterFactory.java
index 7215dc4292..9021e48a0a 100644
--- a/test/org/apache/naming/resources/TestWarDirContext.java
+++ b/test/org/apache/naming/resources/TestWarDirContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -29,7 +29,7 @@ import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 public class TestWarDirContext extends TomcatBaseTest {
-    
+
     @Override
     public void setUp() throws Exception {
         super.setUp();
@@ -50,20 +50,20 @@ public class TestWarDirContext extends TomcatBaseTest {
     @Test
     public void testLookupException() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0-fragments");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-        
+
         tomcat.start();
-        
+
         ByteChunk bc = getUrl("http://localhost:" + getPort() +
                 "/test/warDirContext.jsp");
         assertEquals("<p>java.lang.ClassNotFoundException</p>",
                 bc.toString());
     }
 
-    
+
     /**
      * Additional test following on from SPR-7350 above to check files that
      * contain JNDI reserved characters can be served when caching is enabled.
@@ -71,13 +71,13 @@ public class TestWarDirContext extends TomcatBaseTest {
     @Test
     public void testReservedJNDIFileNamesWithCache() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0-fragments");
         // app dir is relative to server home
         StandardContext ctxt = (StandardContext) tomcat.addWebapp(
                 null, "/test", appDir.getAbsolutePath());
         ctxt.setCachingAllowed(true);
-        
+
         tomcat.start();
 
         // Should be found in resources.jar
@@ -93,7 +93,7 @@ public class TestWarDirContext extends TomcatBaseTest {
                 bc.toString());
     }
 
-    
+
     /**
      * Additional test following on from SPR-7350 above to check files that
      * contain JNDI reserved characters can be served when caching is disabled.
@@ -101,13 +101,13 @@ public class TestWarDirContext extends TomcatBaseTest {
     @Test
     public void testReservedJNDIFileNamesNoCache() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0-fragments");
         // app dir is relative to server home
         StandardContext ctxt = (StandardContext) tomcat.addWebapp(
                 null, "/test", appDir.getAbsolutePath());
         ctxt.setCachingAllowed(false);
-        
+
         tomcat.start();
 
         // Should be found in resources.jar

==================================================
TesterObject.java
index 824abeef50..c53b9c5708 100644
--- a/test/org/apache/naming/resources/TesterFactory.java
+++ b/test/org/apache/naming/resources/TesterFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
TestByteChunk.java
index 1f09489a35..f5ec41a6ae 100644
--- a/test/org/apache/naming/resources/TesterObject.java
+++ b/test/org/apache/naming/resources/TesterObject.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,11 +24,11 @@ public class TesterObject {
     public String toString() {
         return "This is a test object (" + super.toString() + ").";
     }
-    
+
     public void setFoo(String foo) {
         this.foo = foo;
     }
-    
+
     public String getFoo() {
         return this.foo;
     }

==================================================
CookiesBaseTest.java
index 3110fe5075..30a1b1c579 100644
--- a/test/org/apache/tomcat/util/buf/TestByteChunk.java
+++ b/test/org/apache/tomcat/util/buf/TestByteChunk.java
@@ -40,7 +40,7 @@ public class TestByteChunk {
 
     /**
      * Test for {@code findByte} vs. {@code indexOf} methods difference.
-     * 
+     *
      * <p>
      * As discussed in the "Re: r944918" thread on dev@, {@code
      * ByteChunk.indexOf()} works for 0-127 ASCII chars only, and cannot find

==================================================
TestBug49158.java
index 166856666f..f7f9d0f342 100644
--- a/test/org/apache/tomcat/util/http/CookiesBaseTest.java
+++ b/test/org/apache/tomcat/util/http/CookiesBaseTest.java
@@ -42,17 +42,17 @@ public abstract class CookiesBaseTest extends TomcatBaseTest {
     public static class CookieServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
-        
+
         private final String cookieName;
         private final String cookieValue;
-        
+
         public CookieServlet(String cookieName, String cookieValue) {
             this.cookieName = cookieName;
             this.cookieValue = cookieValue;
         }
-        
+
         @Override
-        public void doGet(HttpServletRequest req, HttpServletResponse res) 
+        public void doGet(HttpServletRequest req, HttpServletResponse res)
                 throws IOException {
             try {
                 Cookie cookie = new Cookie(cookieName, cookieValue);
@@ -62,13 +62,13 @@ public abstract class CookiesBaseTest extends TomcatBaseTest {
                 res.getWriter().write("Cookie name fail");
             }
         }
-        
+
     }
-    
+
 
     public static void addServlets(Tomcat tomcat) {
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, "invalid", new CookieServlet("na;me", "value"));
@@ -91,5 +91,5 @@ public abstract class CookiesBaseTest extends TomcatBaseTest {
     }
 
     public abstract void testCookiesInstance() throws Exception;
-    
+
 }

==================================================
TestCookies.java
index 027bdcd736..e5781cc455 100644
--- a/test/org/apache/tomcat/util/http/TestBug49158.java
+++ b/test/org/apache/tomcat/util/http/TestBug49158.java
@@ -44,7 +44,7 @@ import org.apache.tomcat.util.buf.ByteChunk;
  */
 public class TestBug49158 extends CookiesBaseTest {
     public static final String path = "49158";
-    
+
     @Override
     @Test
     public void testCookiesInstance() throws Exception {
@@ -52,22 +52,22 @@ public class TestBug49158 extends CookiesBaseTest {
         addServlets(tomcat);
         tomcat.start();
         Map<String,List<String>> headers = new HashMap<String,List<String>>();
-        ByteChunk res = new ByteChunk(); 
+        ByteChunk res = new ByteChunk();
         getUrl("http://localhost:" + getPort() + "/"+path, res, headers);
         List<String> cookieHeaders = headers.get("Set-Cookie");
         assertEquals("There should only be one Set-Cookie header in this test",
                 1, cookieHeaders.size());
     }
-    
+
     public static void addServlets(Tomcat tomcat) {
         // Must have a real docBase - just use temp
-        Context ctx = 
+        Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
 
         Tomcat.addServlet(ctx, path, new TestBug49158Servlet());
         ctx.addServletMapping("/"+path, path);
     }
-    
+
     public static class TestBug49158Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 2725990508758127399L;
@@ -81,7 +81,7 @@ public class TestBug49158 extends CookiesBaseTest {
             session.invalidate();
             req.getSession();
         }
-        
+
     }
-        
+
 }

==================================================
TestCookiesAllowEquals.java
index 34b2f8bc78..e15901c280 100644
--- a/test/org/apache/tomcat/util/http/TestCookies.java
+++ b/test/org/apache/tomcat/util/http/TestCookies.java
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.tomcat.util.http; 
+package org.apache.tomcat.util.http;
 
 import org.junit.Test;
 
@@ -30,8 +30,8 @@ public class TestCookies {
         test("foo=bar;a=b; ;", "foo", "bar", "a", "b");
         test("foo=;a=b; ;",  "a", "b");
         test("foo;a=b; ;", "a", "b");
-        // v1 
-        test("$Version=1; foo=bar;a=b", "foo", "bar", "a", "b"); 
+        // v1
+        test("$Version=1; foo=bar;a=b", "foo", "bar", "a", "b");
 
         // OK
         test("$Version=1;foo=bar;a=b; ; ",  "foo", "bar", "a", "b");
@@ -59,10 +59,10 @@ public class TestCookies {
         // Last character is an escape character
         test("$Version=1;foo=b'ar;$Domain=\"apache.org\";$Port=8080;a=\"b\\\"", "foo", "b'ar");
         test("$Version=1;foo=b'ar;$Domain=\"apache.org\";$Port=8080;a=\"b\\",  "foo", "b'ar");
-        
+
         // A token cannot be quoted with ' chars - they should be treated as part of the value
         test("$Version=\"1\"; foo='bar'; $Path=/path; $Domain=\"localhost\"", "foo", "'bar'");
-    
+
         // wrong, path should not have '/' JVK
         test("$Version=1;foo=\"bar\";$Path=/examples;a=b; ; ", "foo", "bar", "a", "b");
 
@@ -76,7 +76,7 @@ public class TestCookies {
         test("foo;a=b;bar ;", "a", "b");
 
         // Multiple delimiters next to each other
- 
+
         // BUG -- the ' ' needs to be skipped.
         test("foo;a=b; ;bar", "a", "b");
         // BUG -- ';' needs skipping
@@ -88,7 +88,7 @@ public class TestCookies {
         // '#' is a valid cookie name (not a separator)
         test("foo;a=b;;#;bar=rab","a", "b", "bar", "rab");
 
-        
+
         test("foo;a=b;;\\;bar=rab", "a", "b", "bar", "rab");
 
         // Try all the separators of version1 in version0 cookie.

==================================================
TestCookiesAllowHttpSeps.java
index cf1f39da15..494585f883 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesAllowEquals.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesAllowEquals.java
@@ -48,7 +48,7 @@ public class TestCookiesAllowEquals extends TomcatBaseTest {
         TestCookieEqualsClient client = new TestCookieEqualsClient();
         client.doRequest();
     }
-    
+
     private class TestCookieEqualsClient extends SimpleHttpClient {
 
 
@@ -57,12 +57,12 @@ public class TestCookiesAllowEquals extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
             root.addServletMapping("/test", "Simple");
-            
+
             tomcat.start();
             // Open connection
             setPort(tomcat.getConnector().getPort());
             connect();
-            
+
             String[] request = new String[1];
             request[0] =
                 "GET /test HTTP/1.0" + CRLF +
@@ -72,7 +72,7 @@ public class TestCookiesAllowEquals extends TomcatBaseTest {
             setRequest(request);
             processRequest(true); // blocks until response has been read
             String response = getResponseBody();
-            
+
             // Close the connection
             disconnect();
             reset();
@@ -80,15 +80,15 @@ public class TestCookiesAllowEquals extends TomcatBaseTest {
             assertEquals(COOKIE_WITH_EQUALS_1 + COOKIE_WITH_EQUALS_2 +
                     COOKIE_WITH_EQUALS_3, response);
         }
-        
+
         @Override
         public boolean isResponseBodyOK() {
             return true;
         }
-        
+
     }
-    
-    
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -103,7 +103,7 @@ public class TestCookiesAllowEquals extends TomcatBaseTest {
             }
             resp.flushBuffer();
         }
-        
+
     }
-    
+
 }

==================================================
TestCookiesAllowNameOnly.java
index 3cf38abcde..00b5133f5a 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesAllowHttpSeps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesAllowHttpSeps.java
@@ -46,7 +46,7 @@ public class TestCookiesAllowHttpSeps extends TomcatBaseTest {
         TestCookieHttpSepClient client = new TestCookieHttpSepClient();
         client.doRequest();
     }
-    
+
     private class TestCookieHttpSepClient extends SimpleHttpClient {
 
 
@@ -55,12 +55,12 @@ public class TestCookiesAllowHttpSeps extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
             root.addServletMapping("/test", "Simple");
-            
+
             tomcat.start();
             // Open connection
             setPort(tomcat.getConnector().getPort());
             connect();
-            
+
             String[] request = new String[1];
             request[0] =
                 "GET /test HTTP/1.0" + CRLF +
@@ -68,22 +68,22 @@ public class TestCookiesAllowHttpSeps extends TomcatBaseTest {
             setRequest(request);
             processRequest(true); // blocks until response has been read
             String response = getResponseBody();
-            
+
             // Close the connection
             disconnect();
             reset();
             tomcat.stop();
             assertEquals(COOKIE_WITH_SEPS, response);
         }
-        
+
         @Override
         public boolean isResponseBodyOK() {
             return true;
         }
-        
+
     }
-    
-    
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -98,7 +98,7 @@ public class TestCookiesAllowHttpSeps extends TomcatBaseTest {
             }
             resp.flushBuffer();
         }
-        
+
     }
-    
+
 }

==================================================
TestCookiesDefaultSysProps.java
index 7ab53722d2..ebc6477c31 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesAllowNameOnly.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesAllowNameOnly.java
@@ -47,7 +47,7 @@ public class TestCookiesAllowNameOnly extends TomcatBaseTest {
         TestCookieNameOnlyClient client = new TestCookieNameOnlyClient();
         client.doRequest();
     }
-    
+
     private class TestCookieNameOnlyClient extends SimpleHttpClient {
 
 
@@ -56,12 +56,12 @@ public class TestCookiesAllowNameOnly extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
             root.addServletMapping("/test", "Simple");
-            
+
             tomcat.start();
             // Open connection
             setPort(tomcat.getConnector().getPort());
             connect();
-            
+
             String[] request = new String[1];
             request[0] =
                 "GET /test HTTP/1.0" + CRLF +
@@ -70,7 +70,7 @@ public class TestCookiesAllowNameOnly extends TomcatBaseTest {
             setRequest(request);
             processRequest(true); // blocks until response has been read
             String response = getResponseBody();
-            
+
             // Close the connection
             disconnect();
             reset();
@@ -79,15 +79,15 @@ public class TestCookiesAllowNameOnly extends TomcatBaseTest {
             assertEquals(COOKIE_WITH_NAME_ONLY_1 + "=" +
                     COOKIE_WITH_NAME_ONLY_2, response);
         }
-        
+
         @Override
         public boolean isResponseBodyOK() {
             return true;
         }
-        
+
     }
-    
-    
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -102,7 +102,7 @@ public class TestCookiesAllowNameOnly extends TomcatBaseTest {
             }
             resp.flushBuffer();
         }
-        
+
     }
-    
+
 }

==================================================
TestCookiesDisallowEquals.java
index 02954de49e..5870b3eb95 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesDefaultSysProps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesDefaultSysProps.java
@@ -43,9 +43,9 @@ public class TestCookiesDefaultSysProps extends CookiesBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         addServlets(tomcat);
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/invalid");
         assertEquals("Cookie name fail", res.toString());
         res = getUrl("http://localhost:" + getPort() + "/null");
@@ -68,5 +68,5 @@ public class TestCookiesDefaultSysProps extends CookiesBaseTest {
         }
 
     }
-        
+
 }

==================================================
TestCookiesNoFwdStrictSysProps.java
index 7796d85c04..d11b128da1 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesDisallowEquals.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesDisallowEquals.java
@@ -43,7 +43,7 @@ public class TestCookiesDisallowEquals extends TomcatBaseTest {
         TestCookieEqualsClient client = new TestCookieEqualsClient();
         client.doRequest();
     }
-    
+
     private class TestCookieEqualsClient extends SimpleHttpClient {
 
 
@@ -52,12 +52,12 @@ public class TestCookiesDisallowEquals extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
             root.addServletMapping("/test", "Simple");
-            
+
             tomcat.start();
             // Open connection
             setPort(tomcat.getConnector().getPort());
             connect();
-            
+
             String[] request = new String[1];
             request[0] =
                 "GET /test HTTP/1.0" + CRLF +
@@ -65,22 +65,22 @@ public class TestCookiesDisallowEquals extends TomcatBaseTest {
             setRequest(request);
             processRequest(true); // blocks until response has been read
             String response = getResponseBody();
-            
+
             // Close the connection
             disconnect();
             reset();
             tomcat.stop();
             assertEquals(COOKIE_TRUNCATED, response);
         }
-        
+
         @Override
         public boolean isResponseBodyOK() {
             return true;
         }
-        
+
     }
-    
-    
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
@@ -95,7 +95,7 @@ public class TestCookiesDisallowEquals extends TomcatBaseTest {
             }
             resp.flushBuffer();
         }
-        
+
     }
-    
+
 }

==================================================
TestCookiesNoStrictNamingSysProps.java
index 08cd7dee85..00e152e074 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesNoFwdStrictSysProps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesNoFwdStrictSysProps.java
@@ -31,7 +31,7 @@ import org.apache.tomcat.util.buf.ByteChunk;
  * to facilitate this when running the unit tests via Ant.
  */
 public class TestCookiesNoFwdStrictSysProps extends CookiesBaseTest {
-    
+
     @Override
     @Test
     public void testCookiesInstance() throws Exception {
@@ -40,13 +40,13 @@ public class TestCookiesNoFwdStrictSysProps extends CookiesBaseTest {
                 "true");
         System.setProperty("org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR",
                 "false");
-        
+
         Tomcat tomcat = getTomcatInstance();
 
         addServlets(tomcat);
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/invalid");
         assertEquals("Cookie name fail", res.toString());
         res = getUrl("http://localhost:" + getPort() + "/null");
@@ -61,5 +61,5 @@ public class TestCookiesNoFwdStrictSysProps extends CookiesBaseTest {
         assertEquals("Cookie name ok", res.toString());
 
     }
-    
+
 }

==================================================
TestCookiesStrictSysProps.java
index 807a87fa5c..297743ac84 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesNoStrictNamingSysProps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesNoStrictNamingSysProps.java
@@ -35,18 +35,18 @@ public class TestCookiesNoStrictNamingSysProps extends CookiesBaseTest {
     @Override
     @Test
     public void testCookiesInstance() throws Exception {
-    
+
         System.setProperty("org.apache.catalina.STRICT_SERVLET_COMPLIANCE",
                 "true");
         System.setProperty("org.apache.tomcat.util.http.ServerCookie.STRICT_NAMING",
                 "false");
-    
+
         Tomcat tomcat = getTomcatInstance();
-    
+
         addServlets(tomcat);
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/invalid");
         assertEquals("Cookie name fail", res.toString());
         res = getUrl("http://localhost:" + getPort() + "/null");
@@ -59,6 +59,6 @@ public class TestCookiesNoStrictNamingSysProps extends CookiesBaseTest {
         assertEquals("Cookie name ok", res.toString());
         res = getUrl("http://localhost:" + getPort() + "/valid");
         assertEquals("Cookie name ok", res.toString());
-    
+
     }
 }

==================================================
TestMapper.java
index c846999bfa..ddfaf82a13 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesStrictSysProps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesStrictSysProps.java
@@ -42,13 +42,13 @@ public class TestCookiesStrictSysProps extends CookiesBaseTest {
 
         System.setProperty("org.apache.catalina.STRICT_SERVLET_COMPLIANCE",
                 "true");
-        
+
         Tomcat tomcat = getTomcatInstance();
-        
+
         addServlets(tomcat);
-        
+
         tomcat.start();
-        
+
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/invalid");
         assertEquals("Cookie name fail", res.toString());
         res = getUrl("http://localhost:" + getPort() + "/null");
@@ -61,7 +61,7 @@ public class TestCookiesStrictSysProps extends CookiesBaseTest {
         assertEquals("Cookie name fail", res.toString());
         res = getUrl("http://localhost:" + getPort() + "/valid");
         assertEquals("Cookie name ok", res.toString());
-        
+
         // Need to read response headers to test version switching
         Map<String,List<String>> headers = new HashMap<String,List<String>>();
         getUrl("http://localhost:" + getPort() + "/switch", res, headers);
@@ -69,7 +69,7 @@ public class TestCookiesStrictSysProps extends CookiesBaseTest {
         for (String cookieHeader : cookieHeaders) {
             assertEquals("name=\"val?ue\"; Version=1", cookieHeader);
         }
-        
+
     }
-        
+
 }

==================================================
TestMapperWelcomeFiles.java
index afb0e562a6..f21134aa6f 100644
--- a/test/org/apache/tomcat/util/http/mapper/TestMapper.java
+++ b/test/org/apache/tomcat/util/http/mapper/TestMapper.java
@@ -54,7 +54,7 @@ public class TestMapper {
         String[] welcomes = new String[2];
         welcomes[0] = "boo/baba";
         welcomes[1] = "bobou";
-        
+
         mapper.addContextVersion("iowejoiejfoiew", "blah7", "",
                 "0", "context0", new String[0], null);
         mapper.addContextVersion("iowejoiejfoiew", "blah7", "/foo",
@@ -86,10 +86,10 @@ public class TestMapper {
     public void testAddHost() throws Exception {
         // Check we have the right number (add 16 but one is a duplicate)
         assertEquals(15, mapper.hosts.length);
-        
+
         // Make sure adding a duplicate *does not* overwrite
         assertEquals("blah7", mapper.hosts[3].object);
-        
+
         // Check for alphabetical order of host names
         String previous;
         String current = mapper.hosts[0].name;
@@ -150,7 +150,7 @@ public class TestMapper {
             mapper.map(host, uri, null, mappingData);
         }
         long time = System.currentTimeMillis() - start;
-        
+
         // Takes ~1s on markt's laptop. If this takes more than 4s something
         // probably needs looking at. If this fails repeatedly then we may need
         // to increase this limit.

==================================================
TestClientCert.java
index 3d0e3e1ca8..39a22de74c 100644
--- a/test/org/apache/tomcat/util/http/mapper/TestMapperWelcomeFiles.java
+++ b/test/org/apache/tomcat/util/http/mapper/TestMapperWelcomeFiles.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -42,7 +42,7 @@ public class TestMapperWelcomeFiles extends TomcatBaseTest {
     public void testWelcomeFileNotStrict() throws Exception {
 
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0");
 
         StandardContext ctxt = (StandardContext) tomcat.addWebapp(null, "/test",
@@ -51,14 +51,14 @@ public class TestMapperWelcomeFiles extends TomcatBaseTest {
         ctxt.setReplaceWelcomeFiles(true);
         ctxt.addWelcomeFile("index.jsp");
         ctxt.addWelcomeFile("index.do");
-        
+
         tomcat.start();
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/welcome-files", bc, new HashMap<String,List<String>>());
         assertEquals(HttpServletResponse.SC_OK, rc);
         assertTrue(bc.toString().contains("JSP"));
-        
+
         rc = getUrl("http://localhost:" + getPort() +
                 "/test/welcome-files/sub", bc,
                 new HashMap<String,List<String>>());
@@ -70,7 +70,7 @@ public class TestMapperWelcomeFiles extends TomcatBaseTest {
     public void testWelcomeFileStrict() throws Exception {
 
         Tomcat tomcat = getTomcatInstance();
-        
+
         File appDir = new File("test/webapp-3.0");
 
         StandardContext ctxt = (StandardContext) tomcat.addWebapp(null, "/test",
@@ -79,17 +79,17 @@ public class TestMapperWelcomeFiles extends TomcatBaseTest {
         ctxt.setReplaceWelcomeFiles(true);
         ctxt.addWelcomeFile("index.jsp");
         ctxt.addWelcomeFile("index.do");
-        
+
         // Simulate STRICT_SERVLET_COMPLIANCE
         ctxt.setResourceOnlyServlets("");
-        
+
         tomcat.start();
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/welcome-files", bc, new HashMap<String,List<String>>());
         assertEquals(HttpServletResponse.SC_OK, rc);
         assertTrue(bc.toString().contains("JSP"));
-        
+
         rc = getUrl("http://localhost:" + getPort() +
                 "/test/welcome-files/sub", bc,
                 new HashMap<String,List<String>>());

==================================================
TestCustomSsl.java
index 26ad81f789..bc0229d787 100644
--- a/test/org/apache/tomcat/util/net/TestClientCert.java
+++ b/test/org/apache/tomcat/util/net/TestClientCert.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -43,7 +43,7 @@ public class TestClientCert extends TomcatBaseTest {
         ByteChunk res =
                 getUrl("https://localhost:" + getPort() + "/unprotected");
         assertEquals("OK", res.toString());
-        
+
         // Protected resource
         res = getUrl("https://localhost:" + getPort() + "/protected");
         assertEquals("OK", res.toString());
@@ -52,21 +52,21 @@ public class TestClientCert extends TomcatBaseTest {
     @Test
     public void testClientCertPostSmaller() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        int bodySize = tomcat.getConnector().getMaxSavePostSize() / 2; 
+        int bodySize = tomcat.getConnector().getMaxSavePostSize() / 2;
         doTestClientCertPost(bodySize, false);
     }
 
     @Test
     public void testClientCertPostSame() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        int bodySize = tomcat.getConnector().getMaxSavePostSize(); 
+        int bodySize = tomcat.getConnector().getMaxSavePostSize();
         doTestClientCertPost(bodySize, false);
     }
 
     @Test
     public void testClientCertPostLarger() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        int bodySize = tomcat.getConnector().getMaxSavePostSize() * 2; 
+        int bodySize = tomcat.getConnector().getMaxSavePostSize() * 2;
         doTestClientCertPost(bodySize, true);
     }
 
@@ -83,7 +83,7 @@ public class TestClientCert extends TomcatBaseTest {
         ByteChunk res = postUrl(body,
                 "https://localhost:" + getPort() + "/unprotected");
         assertEquals("OK-" + bodySize, res.toString());
-        
+
         // Protected resource
         res.recycle();
         int rc = postUrl(body, "https://localhost:" + getPort() + "/protected",
@@ -107,10 +107,10 @@ public class TestClientCert extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         TesterSupport.configureClientCertContext(tomcat);
-        
+
         // Start Tomcat
         tomcat.start();
-        
+
         TesterSupport.configureClientSsl();
     }
 }

==================================================
TestSsl.java
index ea10715542..50d227e85e 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -54,19 +54,19 @@ public class TestCustomSsl extends TomcatBaseTest {
             return;
         }
 
-        connector.setProperty("sslImplementationName", 
+        connector.setProperty("sslImplementationName",
                 "org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl");
         connector.setProperty(TesterBug50640SslImpl.PROPERTY_NAME,
                 TesterBug50640SslImpl.PROPERTY_VALUE);
-        
+
         connector.setProperty("sslProtocol", "tls");
-        
+
         File keystoreFile =
             new File("test/org/apache/tomcat/util/net/localhost.jks");
         connector.setAttribute(
                 "keystoreFile", keystoreFile.getAbsolutePath());
 
-        connector.setSecure(true);            
+        connector.setSecure(true);
         connector.setProperty("SSLEnabled", "true");
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
@@ -87,10 +87,10 @@ public class TestCustomSsl extends TomcatBaseTest {
     public void testCustomTrustManager2() throws Exception {
         doTestCustomTrustManager(true);
     }
-    
+
     private void doTestCustomTrustManager(boolean serverTrustAll)
             throws Exception {
-        
+
         if (!TesterSupport.RFC_5746_SUPPORTED) {
             // Make sure SSL renegotiation is not disabled in the JVM
             System.setProperty("sun.security.ssl.allowUnsafeRenegotiation",
@@ -104,7 +104,7 @@ public class TestCustomSsl extends TomcatBaseTest {
         }
 
         TesterSupport.configureClientCertContext(tomcat);
-        
+
         // Override the defaults
         ProtocolHandler handler = tomcat.getConnector().getProtocolHandler();
         if (handler instanceof AbstractHttp11JsseProtocol) {
@@ -117,17 +117,17 @@ public class TestCustomSsl extends TomcatBaseTest {
             tomcat.getConnector().setAttribute("trustManagerClassName",
                     "org.apache.tomcat.util.net.TesterSupport$TrustAllCerts");
         }
-        
+
         // Start Tomcat
         tomcat.start();
-        
+
         TesterSupport.configureClientSsl();
 
         // Unprotected resource
         ByteChunk res =
                 getUrl("https://localhost:" + getPort() + "/unprotected");
         assertEquals("OK", res.toString());
-        
+
         // Protected resource
         res.recycle();
         int rc = -1;

==================================================
TestXxxEndpoint.java
index 8e8f4b61bd..096e1502eb 100644
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -49,12 +49,12 @@ public class TestSsl extends TomcatBaseTest {
     @Test
     public void testSimpleSsl() throws Exception {
         TesterSupport.configureClientSsl();
-        
+
         Tomcat tomcat = getTomcatInstance();
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         TesterSupport.initSsl(tomcat);
 
         tomcat.start();
@@ -66,12 +66,12 @@ public class TestSsl extends TomcatBaseTest {
     @Test
     public void testKeyPass() throws Exception {
         TesterSupport.configureClientSsl();
-        
+
         Tomcat tomcat = getTomcatInstance();
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         TesterSupport.initSsl(tomcat, "localhost-copy1.jks", "changeit",
                 "tomcatpass");
 
@@ -86,7 +86,7 @@ public class TestSsl extends TomcatBaseTest {
 
     @Test
     public void testRenegotiateFail() throws Exception {
-        
+
         // If RFC5746 is supported, renegotiation will always work (and will
         // always be secure)
         if (TesterSupport.RFC_5746_SUPPORTED) {
@@ -102,7 +102,7 @@ public class TestSsl extends TomcatBaseTest {
         TesterSupport.initSsl(tomcat);
 
         // Default - MITM attack prevented
-        
+
         tomcat.start();
         SSLContext sslCtx = SSLContext.getInstance("TLS");
         sslCtx.init(null, TesterSupport.getTrustManagers(), null);
@@ -115,12 +115,12 @@ public class TestSsl extends TomcatBaseTest {
                 handshakeDone = true;
             }
         });
-        
+
         OutputStream os = socket.getOutputStream();
         os.write("GET /examples/servlets/servlet/HelloWorldExample HTTP/1.0\n".getBytes());
         os.flush();
 
-        
+
         InputStream is = socket.getInputStream();
 
         // Make sure the NIO connector has read the request before the handshake
@@ -129,7 +129,7 @@ public class TestSsl extends TomcatBaseTest {
         socket.startHandshake();
 
         os = socket.getOutputStream();
-        
+
         try {
             os.write("Host: localhost\n\n".getBytes());
         } catch (IOException ex) {
@@ -148,7 +148,7 @@ public class TestSsl extends TomcatBaseTest {
             // success - we timed-out without handshake
             return;
         }
-        
+
         fail("Re-negotiation worked");
     }
 
@@ -165,7 +165,7 @@ public class TestSsl extends TomcatBaseTest {
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
 
         TesterSupport.initSsl(tomcat);
-        
+
         tomcat.start();
 
         SSLContext sslCtx = SSLContext.getInstance("TLS");

==================================================
TesterSupport.java
index b8b556713f..aa35aa6051 100644
--- a/test/org/apache/tomcat/util/net/TestXxxEndpoint.java
+++ b/test/org/apache/tomcat/util/net/TestXxxEndpoint.java
@@ -57,7 +57,7 @@ public class TestXxxEndpoint extends TomcatBaseTest {
         }
     }
 
-    private long createAprSocket(int port, long pool) 
+    private long createAprSocket(int port, long pool)
                  throws Exception {
         /**
          * Server socket "pointer".
@@ -117,11 +117,11 @@ public class TestXxxEndpoint extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         int port = getPort();
 
         tomcat.start();
-        
+
         tomcat.getConnector().stop();
         Exception e = null;
         ServerSocket s = null;
@@ -161,14 +161,14 @@ public class TestXxxEndpoint extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
         Connector c = tomcat.getConnector();
         c.setProperty("bindOnInit", "false");
-        
+
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        
+
         int port = getPort();
 
         tomcat.start();
-        
+
         tomcat.getConnector().stop();
         Exception e = null;
         ServerSocket s = null;

==================================================
TesterBug50640SslImpl.java
index 0a8c2e4e67..7ff1272df2 100644
--- a/test/org/apache/tomcat/util/net/TesterSupport.java
+++ b/test/org/apache/tomcat/util/net/TesterSupport.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -52,7 +52,7 @@ import org.apache.catalina.startup.TestTomcat.MapRealm;
 import org.apache.catalina.startup.Tomcat;
 
 public final class TesterSupport {
-    
+
     protected static final boolean RFC_5746_SUPPORTED;
 
     static {
@@ -80,7 +80,7 @@ public final class TesterSupport {
     protected static void initSsl(Tomcat tomcat) {
         initSsl(tomcat, "localhost.jks", null, null);
     }
-    
+
     protected static void initSsl(Tomcat tomcat, String keystore,
             String keystorePass, String keyPass) {
 
@@ -112,10 +112,10 @@ public final class TesterSupport {
             tomcat.getConnector().setAttribute("SSLCertificateKeyFile",
                     keystoreFile.getAbsolutePath());
         }
-        tomcat.getConnector().setSecure(true);            
+        tomcat.getConnector().setSecure(true);
         tomcat.getConnector().setProperty("SSLEnabled", "true");
     }
-    
+
     protected static KeyManager[] getUser1KeyManagers() throws Exception {
         KeyManagerFactory kmf = KeyManagerFactory.getInstance(
                 KeyManagerFactory.getDefaultAlgorithm());
@@ -123,7 +123,7 @@ public final class TesterSupport {
                 "changeit".toCharArray());
         return kmf.getKeyManagers();
     }
-    
+
     protected static TrustManager[] getTrustManagers() throws Exception {
         TrustManagerFactory tmf = TrustManagerFactory.getInstance(
                 TrustManagerFactory.getDefaultAlgorithm());
@@ -142,7 +142,7 @@ public final class TesterSupport {
                     new TesterSSLSocketFactory(sc.getSocketFactory()));
         } catch (Exception e) {
             e.printStackTrace();
-        } 
+        }
     }
 
     private static KeyStore getKeyStore(String keystore) throws Exception {
@@ -163,19 +163,19 @@ public final class TesterSupport {
         }
         return ks;
     }
-    
+
     protected static boolean isRenegotiationSupported(Tomcat tomcat) {
         String protocol = tomcat.getConnector().getProtocolHandlerClassName();
         if (protocol.contains("Apr")) {
             // Disabled by default in 1.1.20 windows binary (2010-07-27)
-            return false; 
+            return false;
         }
         return true;
     }
-    
+
     protected static void configureClientCertContext(Tomcat tomcat) {
         TesterSupport.initSsl(tomcat);
-        
+
         // Need a web application with a protected and unprotected URL
         // Must have a real docBase - just use temp
         Context ctx =
@@ -198,7 +198,7 @@ public final class TesterSupport {
         realm.addUser("CN=user1, C=US", "not used");
         realm.addUserRole("CN=user1, C=US", "testrole");
         ctx.setRealm(realm);
-        
+
         // Configure the authenticator
         LoginConfig lc = new LoginConfig();
         lc.setAuthMethod("CLIENT-CERT");
@@ -211,14 +211,14 @@ public final class TesterSupport {
     public static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
-        
+
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
             resp.setContentType("text/plain");
             resp.getWriter().print("OK");
         }
-        
+
         @Override
         protected void doPost(HttpServletRequest req, HttpServletResponse resp)
                 throws ServletException, IOException {
@@ -237,29 +237,29 @@ public final class TesterSupport {
             }
             // len will have been -1 on last iteration
             read++;
-            
+
             // Report the number of bytes read
             resp.setContentType("text/plain");
-            if (contentOK) 
+            if (contentOK)
                 resp.getWriter().print("OK-" + read);
             else
                 resp.getWriter().print("CONTENT-MISMATCH-" + read);
         }
     }
-    
+
     public static class TrustAllCerts implements X509TrustManager {
-        
+
         @Override
         public X509Certificate[] getAcceptedIssuers() {
             return new X509Certificate[0];
         }
-        
+
         @Override
         public void checkClientTrusted(X509Certificate[] certs,
                 String authType) {
             // NOOP - Trust everything
         }
-        
+
         @Override
         public void checkServerTrusted(X509Certificate[] certs,
                 String authType) {

==================================================
TestStringManager.java
index e36cac4c1e..d8836b758a 100644
--- a/test/org/apache/tomcat/util/net/jsse/TesterBug50640SslImpl.java
+++ b/test/org/apache/tomcat/util/net/jsse/TesterBug50640SslImpl.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -20,14 +20,14 @@ import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.ServerSocketFactory;
 
 public class TesterBug50640SslImpl extends JSSEImplementation {
-    
+
     public static final String PROPERTY_NAME = "bug50640";
     public static final String PROPERTY_VALUE = "pass";
 
     @Override
     public ServerSocketFactory getServerSocketFactory(
             AbstractEndpoint endpoint)  {
-        
+
         // Check the custom attribute is visible & correcly set
         String flag = endpoint.getProperty(PROPERTY_NAME);
         if (PROPERTY_VALUE.equals(flag)) {
@@ -35,6 +35,6 @@ public class TesterBug50640SslImpl extends JSSEImplementation {
         } else {
             return null;
         }
-    } 
+    }
 
 }

==================================================
DedicatedThreadExecutorTest.java
index dffb9a903e..7f3e6c826a 100644
--- a/test/org/apache/tomcat/util/res/TestStringManager.java
+++ b/test/org/apache/tomcat/util/res/TestStringManager.java
@@ -29,7 +29,7 @@ public class TestStringManager {
     @Test
     public void testNullKey() {
         boolean iaeThrown = false;
-        
+
         try {
             sm.getString(null);
         } catch (IllegalArgumentException iae) {

==================================================
TestLimitLatch.java
index 8d13ccfad4..5d75ad98d2 100644
--- a/test/org/apache/tomcat/util/threads/DedicatedThreadExecutorTest.java
+++ b/test/org/apache/tomcat/util/threads/DedicatedThreadExecutorTest.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
