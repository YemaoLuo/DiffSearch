9848fa581d9a2619581782874f6b53cdfd5e1c42
==================================================
Rework timeout a bit, to align with the API (read and write from async channel without timeout use 0 in NIO2; Future.get(infinite) is not as efficient as get()).
==================================================
Remy Maucherat
==================================================
Wed May 30 20:46:02 2018 +0000
==================================================
Nio2Channel.java
Rework timeout a bit, to align with the API (read and write from async channel without timeout use 0 in NIO2; Future.get(infinite) is not as efficient as get()).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832572 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 9cf678ec71..40eb9fb0e2 100644
--- a/java/org/apache/tomcat/util/net/Nio2Channel.java
+++ b/java/org/apache/tomcat/util/net/Nio2Channel.java
@@ -146,7 +146,7 @@ public class Nio2Channel implements AsynchronousByteChannel {
     @Override
     public <A> void read(ByteBuffer dst, A attachment,
             CompletionHandler<Integer, ? super A> handler) {
-        read(dst, Integer.MAX_VALUE, TimeUnit.MILLISECONDS, attachment, handler);
+        read(dst, 0L, TimeUnit.MILLISECONDS, attachment, handler);
     }
 
     public <A> void read(ByteBuffer dst,
@@ -169,7 +169,7 @@ public class Nio2Channel implements AsynchronousByteChannel {
     @Override
     public <A> void write(ByteBuffer src, A attachment,
             CompletionHandler<Integer, ? super A> handler) {
-        write(src, Integer.MAX_VALUE, TimeUnit.MILLISECONDS, attachment, handler);
+        write(src, 0L, TimeUnit.MILLISECONDS, attachment, handler);
     }
 
     public <A> void write(ByteBuffer src, long timeout, TimeUnit unit, A attachment,

==================================================
SecureNio2Channel.java
index b16344543b..47dfe522fb 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1117,7 +1117,12 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
             if (block) {
                 try {
                     integer = getSocket().read(to);
-                    nRead = integer.get(toNio2Timeout(getReadTimeout()), TimeUnit.MILLISECONDS).intValue();
+                    long timeout = getReadTimeout();
+                    if (timeout > 0) {
+                        nRead = integer.get(timeout, TimeUnit.MILLISECONDS).intValue();
+                    } else {
+                        nRead = integer.get().intValue();
+                    }
                 } catch (ExecutionException e) {
                     if (e.getCause() instanceof IOException) {
                         throw (IOException) e.getCause();
@@ -1229,8 +1234,15 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
             try {
                 do {
                     integer = getSocket().write(from);
-                    if (integer.get(toNio2Timeout(getWriteTimeout()), TimeUnit.MILLISECONDS).intValue() < 0) {
-                        throw new EOFException(sm.getString("iob.failedwrite"));
+                    long timeout = getWriteTimeout();
+                    if (timeout > 0) {
+                        if (integer.get(timeout, TimeUnit.MILLISECONDS).intValue() < 0) {
+                            throw new EOFException(sm.getString("iob.failedwrite"));
+                        }
+                    } else {
+                        if (integer.get().intValue() < 0) {
+                            throw new EOFException(sm.getString("iob.failedwrite"));
+                        }
                     }
                 } while (from.hasRemaining());
             } catch (ExecutionException e) {

==================================================
