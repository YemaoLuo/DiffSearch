8cf47b4f7cf3b4b3866095872d98c6f2d7dc1ee0
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54732
==================================================
Konstantin Kolinko
==================================================
Fri Mar 22 13:44:00 2013 +0000
==================================================
StatementCache.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54732
Fix leak of statements in StatementCache interceptor.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1459769 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StatementCounterInterceptor.java
index 5a9ebc18fa..11c7d4d870 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
@@ -242,11 +242,11 @@ public class StatementCache extends StatementDecoratorInterceptor {
                     removeStatement(proxy);
                 }
             }
-            closed = true;
-            delegate = null;
             if (shouldClose) {
                 super.closeInvoked();
             }
+            closed = true;
+            delegate = null;
 
         }
 

==================================================
TestStatementCache.java
new file mode 100644
index 0000000000..c6a0231d15
--- /dev/null
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCounterInterceptor.java
@@ -0,0 +1,65 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.jdbc.pool.interceptor;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.sql.Statement;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * Interceptor that counts opened Statements. Is used by tests.
+ */
+public class StatementCounterInterceptor extends StatementDecoratorInterceptor {
+
+    private final AtomicInteger countOpen = new AtomicInteger();
+    private final AtomicInteger countClosed = new AtomicInteger();
+
+    public int getActiveCount() {
+        return countOpen.get() - countClosed.get();
+    }
+
+    @Override
+    protected Object createDecorator(Object proxy, Method method,
+            Object[] args, Object statement, Constructor<?> constructor,
+            String sql) throws InstantiationException, IllegalAccessException,
+            InvocationTargetException {
+        Object result;
+        StatementProxy statementProxy = new StatementProxy(
+                (Statement) statement, sql);
+        result = constructor.newInstance(new Object[] { statementProxy });
+        statementProxy.setActualProxy(result);
+        statementProxy.setConnection(proxy);
+        statementProxy.setConstructor(constructor);
+        countOpen.incrementAndGet();
+        return result;
+    }
+
+    private class StatementProxy extends
+            StatementDecoratorInterceptor.StatementProxy<Statement> {
+        public StatementProxy(Statement delegate, String sql) {
+            super(delegate, sql);
+        }
+
+        @Override
+        public void closeInvoked() {
+            countClosed.incrementAndGet();
+            super.closeInvoked();
+        }
+    }
+}

==================================================
