a8f0a7334aea8f59001e02afa4482e5267ade041
==================================================
javax.el: Improve processing of errors that are wrapped into InvocationTargetException.
==================================================
Konstantin Kolinko
==================================================
Sun Nov 13 21:51:18 2011 +0000
==================================================
BeanELResolver.java
javax.el: Improve processing of errors that are wrapped into InvocationTargetException.
Rethrow errors that must be rethrown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201521 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ExpressionFactory.java
index 74f089cb25..2ee48257b9 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -88,9 +88,16 @@ public class BeanELResolver extends ELResolver {
         } catch (IllegalAccessException e) {
             throw new ELException(e);
         } catch (InvocationTargetException e) {
+            Throwable cause = e.getCause();
+            if (cause instanceof ThreadDeath) {
+                throw (ThreadDeath) cause;
+            }
+            if (cause instanceof VirtualMachineError) {
+                throw (VirtualMachineError) cause;
+            }
             throw new ELException(message(context, "propertyReadError",
                     new Object[] { base.getClass().getName(),
-                            property.toString() }), e.getCause());
+                            property.toString() }), cause);
         } catch (Exception e) {
             throw new ELException(e);
         }
@@ -136,9 +143,16 @@ public class BeanELResolver extends ELResolver {
         } catch (IllegalAccessException e) {
             throw new ELException(e);
         } catch (InvocationTargetException e) {
+            Throwable cause = e.getCause();
+            if (cause instanceof ThreadDeath) {
+                throw (ThreadDeath) cause;
+            }
+            if (cause instanceof VirtualMachineError) {
+                throw (VirtualMachineError) cause;
+            }
             throw new ELException(message(context, "propertyWriteError",
                     new Object[] { base.getClass().getName(),
-                            property.toString() }), e.getCause());
+                            property.toString() }), cause);
         } catch (Exception e) {
             throw new ELException(e);
         }
@@ -473,7 +487,14 @@ public class BeanELResolver extends ELResolver {
         } catch (IllegalAccessException e) {
             throw new ELException(e);
         } catch (InvocationTargetException e) {
-            throw new ELException(e.getCause());
+            Throwable cause = e.getCause();
+            if (cause instanceof ThreadDeath) {
+                throw (ThreadDeath) cause;
+            }
+            if (cause instanceof VirtualMachineError) {
+                throw (VirtualMachineError) cause;
+            }
+            throw new ELException(cause);
         }
 
         context.setPropertyResolved(true);

==================================================
