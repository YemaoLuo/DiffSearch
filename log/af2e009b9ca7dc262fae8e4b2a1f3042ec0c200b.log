af2e009b9ca7dc262fae8e4b2a1f3042ec0c200b
==================================================
Refactor. Replace custom Comparators with Comparator.comparingLong(...)
==================================================
Mark Thomas
==================================================
Wed Sep 21 15:49:50 2022 +0100
==================================================
Membership.java
Refactor. Replace custom Comparators with Comparator.comparingLong(...)

No functional change.


==================================================
Cache.java
index 234bf47b3d..6b0f0e6b62 100644
--- a/java/org/apache/catalina/tribes/membership/Membership.java
+++ b/java/org/apache/catalina/tribes/membership/Membership.java
@@ -16,7 +16,6 @@
  */
 package org.apache.catalina.tribes.membership;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -93,7 +92,7 @@ public class Membership implements Cloneable {
      * @param includeLocal - TBA
      */
     public Membership(Member local, boolean includeLocal) {
-        this(local, new MemberComparator(), includeLocal);
+        this(local, Comparator.comparingLong(Member::getMemberAliveTime).reversed(), includeLocal);
     }
 
     public Membership(Member local) {
@@ -290,24 +289,6 @@ public class Membership implements Cloneable {
 
     // --------------------------------------------- Inner Class
 
-    private static class MemberComparator implements Comparator<Member>, Serializable {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        public int compare(Member m1, Member m2) {
-            // Longer alive time, means sort first
-            long result = m2.getMemberAliveTime() - m1.getMemberAliveTime();
-            if (result < 0) {
-                return -1;
-            } else if (result == 0) {
-                return 0;
-            } else {
-                return 1;
-            }
-        }
-    }
-
     /**
      * Inner class that represents a member entry
      */

==================================================
WsWriteTimeout.java
index bf762d43b3..287134e310 100644
--- a/java/org/apache/catalina/webresources/Cache.java
+++ b/java/org/apache/catalina/webresources/Cache.java
@@ -208,7 +208,7 @@ public class Cache {
         // used first. This is a background process so we can afford to take the
         // time to order the elements first
         TreeSet<CachedResource> orderedResources =
-                new TreeSet<>(new EvictionOrder());
+                new TreeSet<>(Comparator.comparingLong(CachedResource::getNextCheck).reversed());
         orderedResources.addAll(resourceCache.values());
 
         Iterator<CachedResource> iter = orderedResources.iterator();
@@ -342,23 +342,4 @@ public class Cache {
     public long getSize() {
         return size.get() / 1024;
     }
-
-    private static class EvictionOrder implements Comparator<CachedResource> {
-
-        @Override
-        public int compare(CachedResource cr1, CachedResource cr2) {
-            long nc1 = cr1.getNextCheck();
-            long nc2 = cr2.getNextCheck();
-
-            // Oldest resource should be first (so iterator goes from oldest to
-            // youngest.
-            if (nc1 == nc2) {
-                return 0;
-            } else if (nc1 > nc2) {
-                return -1;
-            } else {
-                return 1;
-            }
-        }
-    }
 }

==================================================
