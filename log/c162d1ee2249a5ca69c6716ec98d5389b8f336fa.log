c162d1ee2249a5ca69c6716ec98d5389b8f336fa
==================================================
Code clean-up
==================================================
Mark Emlyn
==================================================
Thu Aug 16 20:15:28 2012 +0000
==================================================
AbstractProcessor.java
Code clean-up
 - Java 7 <>
 - UCDetector use of final
 - Make use of unused fields where appropriate

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1374032 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index f63b4b2680..63411fa295 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -32,10 +32,10 @@ import org.apache.tomcat.util.net.SocketWrapper;
 public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
 
     protected Adapter adapter;
-    protected AsyncStateMachine<S> asyncStateMachine;
-    protected AbstractEndpoint endpoint;
-    protected Request request;
-    protected Response response;
+    protected final AsyncStateMachine<S> asyncStateMachine;
+    protected final AbstractEndpoint endpoint;
+    protected final Request request;
+    protected final Response response;
 
 
     /**
@@ -43,12 +43,15 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
      * initialise the request, response, etc.
      */
     protected AbstractProcessor() {
-        // NOOP
+        asyncStateMachine = null;
+        endpoint = null;
+        request = null;
+        response = null;
     }
 
     public AbstractProcessor(AbstractEndpoint endpoint) {
         this.endpoint = endpoint;
-        asyncStateMachine = new AsyncStateMachine<S>(this);
+        asyncStateMachine = new AsyncStateMachine<>(this);
 
         request = new Request();
 

==================================================
AsyncStateMachine.java
index a9aedb1f10..c77464a3d8 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -24,7 +24,9 @@ import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
+import javax.management.InstanceNotFoundException;
 import javax.management.MBeanRegistration;
+import javax.management.MBeanRegistrationException;
 import javax.management.MBeanServer;
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
@@ -508,7 +510,19 @@ public abstract class AbstractProtocol implements ProtocolHandler,
         }
 
         if (oname != null) {
-            Registry.getRegistry(null, null).unregisterComponent(oname);
+            if (mserver == null) {
+                Registry.getRegistry(null, null).unregisterComponent(oname);
+            } else {
+                // Possibly registered with a different MBeanServer
+                try {
+                    mserver.unregisterMBean(oname);
+                } catch (MBeanRegistrationException |
+                        InstanceNotFoundException e) {
+                    getLog().info(sm.getString(
+                            "abstractProtocol.mbeanDeregistrationFailed",
+                            oname, mserver));
+                }
+            }
         }
 
         if (tpOname != null)
@@ -525,14 +539,14 @@ public abstract class AbstractProtocol implements ProtocolHandler,
 
         protected abstract Log getLog();
 
-        protected RequestGroupInfo global = new RequestGroupInfo();
-        protected AtomicLong registerCount = new AtomicLong(0);
+        protected final RequestGroupInfo global = new RequestGroupInfo();
+        protected final AtomicLong registerCount = new AtomicLong(0);
 
-        protected ConcurrentHashMap<S,Processor<S>> connections =
-            new ConcurrentHashMap<S,Processor<S>>();
+        protected final ConcurrentHashMap<S,Processor<S>> connections =
+                new ConcurrentHashMap<>();
 
-        protected RecycledProcessors<P,S> recycledProcessors =
-            new RecycledProcessors<P,S>(this);
+        protected final RecycledProcessors<P,S> recycledProcessors =
+                new RecycledProcessors<>(this);
 
 
         protected abstract AbstractProtocol getProtocol();
@@ -721,8 +735,8 @@ public abstract class AbstractProtocol implements ProtocolHandler,
             extends ConcurrentLinkedQueue<Processor<S>> {
 
         private static final long serialVersionUID = 1L;
-        private transient AbstractConnectionHandler<S,P> handler;
-        protected AtomicInteger size = new AtomicInteger(0);
+        private final transient AbstractConnectionHandler<S,P> handler;
+        protected final AtomicInteger size = new AtomicInteger(0);
 
         public RecycledProcessors(AbstractConnectionHandler<S,P> handler) {
             this.handler = handler;

==================================================
Request.java
index a9a4c340a4..d6d450f054 100644
--- a/java/org/apache/coyote/LocalStrings.properties
+++ b/java/org/apache/coyote/LocalStrings.properties
@@ -16,6 +16,8 @@ abstractConnectionHandler.error=Error reading request, ignored
 abstractConnectionHandler.ioexception.debug=IOExceptions are normal, ignored
 abstractConnectionHandler.socketexception.debug=SocketExceptions are normal, ignored
 
+abstractProtocol.mbeanDeregistrationFailed=Failed to deregister MBean named [{0}] from MBean server [{1}]
+
 abstractProtocolHandler.getAttribute=Get attribute [{0}] with value [{1}]
 abstractProtocolHandler.setAttribute=Set attribute [{0}] with value [{1}]
 abstractProtocolHandler.init=Initializing ProtocolHandler [{0}]

==================================================
RequestGroupInfo.java
index 35d4516875..c7ef807cdb 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -128,7 +128,7 @@ public final class Request {
 
     private final MessageBytes remoteUser=MessageBytes.newInstance();
     private final MessageBytes authType=MessageBytes.newInstance();
-    private final HashMap<String,Object> attributes=new HashMap<String,Object>();
+    private final HashMap<String,Object> attributes=new HashMap<>();
 
     private Response response;
     private ActionHook hook;

==================================================
RequestInfo.java
index a90a6c3e0a..ad5b74bc5b 100644
--- a/java/org/apache/coyote/RequestGroupInfo.java
+++ b/java/org/apache/coyote/RequestGroupInfo.java
@@ -24,7 +24,7 @@ import java.util.ArrayList;
  *  collected from each RequestProcessor thread.
  */
 public class RequestGroupInfo {
-    ArrayList<RequestInfo> processors=new ArrayList<RequestInfo>();
+    private final ArrayList<RequestInfo> processors = new ArrayList<>();
     private long deadMaxTime = 0;
     private long deadProcessingTime = 0;
     private int deadRequestCount = 0;

==================================================
