7a5c84a7905616cd03711691239c9712ccd2ccc0
==================================================
Handle calls to Optional#orElseGet where the LambdaExpression has already been evaluated
==================================================
Mark Emlyn
==================================================
Sun Jul 21 14:01:52 2013 +0000
==================================================
AstValue.java
index 7324402bc7..9aed8467db 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -56,5 +56,6 @@ error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as
 error.lambda.tooManyMethodParameterSets=There are more sets of method parameters specified than there are nested lambda expressions
 
 # Stream
+stream.compare.notComparable=Stream elements must implement Comparable
 stream.optional.empty=It is illegal to call get() on an empty optional
-stream.compare.notComparable=Stream elements must implement Comparable
\ No newline at end of file
+stream.optional.paramNotLambda=The parameter for the method [{0}] should be a lambda expression

==================================================
Optional.java
index edda89c2e5..709b5a612f 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -24,12 +24,14 @@ import java.lang.reflect.Method;
 
 import javax.el.ELException;
 import javax.el.ELResolver;
+import javax.el.LambdaExpression;
 import javax.el.MethodInfo;
 import javax.el.PropertyNotFoundException;
 import javax.el.ValueReference;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
+import org.apache.el.stream.Optional;
 import org.apache.el.util.MessageFactory;
 import org.apache.el.util.ReflectionUtil;
 
@@ -142,6 +144,15 @@ public final class AstValue extends SimpleNode {
                     (this.children[i+1] instanceof AstMethodParameters)) {
                 AstMethodParameters mps =
                     (AstMethodParameters) this.children[i+1];
+                if (base instanceof Optional && "orElseGet".equals(suffix) &&
+                        mps.jjtGetNumChildren() == 1) {
+                    Node paramFoOptional = mps.jjtGetChild(0);
+                    if (!(paramFoOptional instanceof AstLambdaExpression ||
+                            paramFoOptional instanceof LambdaExpression)) {
+                        throw new ELException(MessageFactory.get(
+                                "stream.optional.paramNotLambda", suffix));
+                    }
+                }
                 // This is a method
                 base = resolver.invoke(ctx, base, suffix, null,
                         mps.getParameters(ctx));

==================================================
TestCollectionOperations.java
index 976fda4f17..da68b2d749 100644
--- a/java/org/apache/el/stream/Optional.java
+++ b/java/org/apache/el/stream/Optional.java
@@ -57,9 +57,18 @@ public class Optional {
     }
 
 
-    public Object orElseGet(LambdaExpression le) {
+    public Object orElseGet(Object le) {
         if (obj == null) {
-            return le.invoke((Object[]) null);
+            // EL 3.0 specification says parameter is LambdaExpression but it
+            // may already have been evaluated. If that is the case, the
+            // original parameter will have been checked to ensure it was a
+            // LambdaExpression before it was evaluated.
+
+            if (le instanceof LambdaExpression) {
+                return ((LambdaExpression) le).invoke((Object[]) null);
+            } else {
+                return le;
+            }
         } else {
             return obj;
         }

==================================================
