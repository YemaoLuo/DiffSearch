0819b77a48e198c2f1e8f3b058dc713afc5470e9
==================================================
Partial fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=47214
==================================================
Mark Thomas
==================================================
Wed Apr 5 13:12:04 2017 +0000
==================================================
ResponseFacade.java
Partial fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=47214
Replace explicitly referenced anonymous inner classes in ResponseFacade with named inner classes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1790237 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecurityClassLoad.java
index c257616f71..6767885de8 100644
--- a/java/org/apache/catalina/connector/ResponseFacade.java
+++ b/java/org/apache/catalina/connector/ResponseFacade.java
@@ -40,9 +40,7 @@ import org.apache.tomcat.util.res.StringManager;
  * @author Remy Maucherat
  */
 @SuppressWarnings("deprecation")
-public class ResponseFacade
-    implements HttpServletResponse {
-
+public class ResponseFacade implements HttpServletResponse {
 
     // ----------------------------------------------------------- DoPrivileged
 
@@ -86,9 +84,25 @@ public class ResponseFacade
         }
     }
 
-    // ----------------------------------------------------------- Constructors
+    private static class FlushBufferPrivilegedAction implements PrivilegedExceptionAction<Void> {
+
+        private final Response response;
+
+        public FlushBufferPrivilegedAction(Response response) {
+            this.response = response;
+        }
+
+        @Override
+        public Void run() throws IOException {
+            response.setAppCommitted(true);
+            response.flushBuffer();
+            return null;
+        }
+    }
 
 
+    // ----------------------------------------------------------- Constructors
+
     /**
      * Construct a wrapper for the specified response.
      *
@@ -276,40 +290,25 @@ public class ResponseFacade
 
 
     @Override
-    public void flushBuffer()
-        throws IOException {
+    public void flushBuffer() throws IOException {
 
         if (isFinished()) {
-            //            throw new IllegalStateException
-            //                (/*sm.getString("responseFacade.finished")*/);
             return;
         }
 
-        if (SecurityUtil.isPackageProtectionEnabled()){
+        if (SecurityUtil.isPackageProtectionEnabled()) {
             try{
-                AccessController.doPrivileged(
-                        new PrivilegedExceptionAction<Void>(){
-
-                    @Override
-                    public Void run() throws IOException{
-                        response.setAppCommitted(true);
-
-                        response.flushBuffer();
-                        return null;
-                    }
-                });
-            } catch(PrivilegedActionException e){
+                AccessController.doPrivileged(new FlushBufferPrivilegedAction(response));
+            } catch(PrivilegedActionException e) {
                 Exception ex = e.getException();
-                if (ex instanceof IOException){
+                if (ex instanceof IOException) {
                     throw (IOException)ex;
                 }
             }
         } else {
             response.setAppCommitted(true);
-
             response.flushBuffer();
         }
-
     }
 
 

==================================================
