8522410c493e279c814e6d11654924e9ac3c114a
==================================================
Push write methods down to SocketWrapper for NIO2
==================================================
Mark Emlyn
==================================================
Mon Nov 10 16:47:25 2014 +0000
==================================================
Nio2ServletOutputStream.java
Push write methods down to SocketWrapper for NIO2

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637935 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index fe8a78ad39..bd190c255a 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletOutputStream.java
@@ -16,167 +16,27 @@
  */
 package org.apache.coyote.http11.upgrade;
 
-import java.io.EOFException;
 import java.io.IOException;
-import java.net.SocketTimeoutException;
-import java.nio.ByteBuffer;
-import java.nio.channels.AsynchronousCloseException;
-import java.nio.channels.CompletionHandler;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
 
 import org.apache.tomcat.util.net.Nio2Channel;
-import org.apache.tomcat.util.net.Nio2Endpoint;
-import org.apache.tomcat.util.net.SocketStatus;
+import org.apache.tomcat.util.net.Nio2Endpoint.Nio2SocketWrapper;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public class Nio2ServletOutputStream extends AbstractServletOutputStream<Nio2Channel> {
 
-    private final Nio2Channel channel;
-    private final int maxWrite;
-    private final CompletionHandler<Integer, ByteBuffer> completionHandler;
-    private final Semaphore writePending = new Semaphore(1);
-
     public Nio2ServletOutputStream(SocketWrapperBase<Nio2Channel> socketWrapper0,
             int asyncWriteBufferSize) {
         super(socketWrapper0, asyncWriteBufferSize);
-        channel = socketWrapper0.getSocket();
-        maxWrite = channel.getBufHandler().getWriteBuffer().capacity();
-        this.completionHandler = new CompletionHandler<Integer, ByteBuffer>() {
-            @Override
-            public void completed(Integer nBytes, ByteBuffer attachment) {
-                if (nBytes.intValue() < 0) {
-                    failed(new EOFException(), attachment);
-                } else if (attachment.hasRemaining()) {
-                    channel.write(attachment, socketWrapper.getTimeout(),
-                            TimeUnit.MILLISECONDS, attachment, completionHandler);
-                } else {
-                    writePending.release();
-                    if (!Nio2Endpoint.isInline()) {
-                        socketWrapper.getEndpoint().processSocket(socketWrapper,
-                                SocketStatus.OPEN_WRITE, false);
-                    }
-                }
-            }
-            @Override
-            public void failed(Throwable exc, ByteBuffer attachment) {
-                socketWrapper.setError(true);
-                writePending.release();
-                if (exc instanceof AsynchronousCloseException) {
-                    // If already closed, don't call onError and close again
-                    return;
-                }
-                onError(exc);
-                socketWrapper.getEndpoint().processSocket(socketWrapper, SocketStatus.ERROR, true);
-            }
-        };
     }
 
     @Override
     protected int doWrite(boolean block, byte[] b, int off, int len)
             throws IOException {
-        int leftToWrite = len;
-        int count = 0;
-        int offset = off;
-
-        while (leftToWrite > 0) {
-            int writeThisLoop;
-            int writtenThisLoop;
-
-            if (leftToWrite > maxWrite) {
-                writeThisLoop = maxWrite;
-            } else {
-                writeThisLoop = leftToWrite;
-            }
-
-            writtenThisLoop = doWriteInternal(block, b, offset, writeThisLoop);
-            if (writtenThisLoop < 0) {
-                throw new EOFException();
-            }
-            count += writtenThisLoop;
-            if (!block && writePending.availablePermits() == 0) {
-                // Prevent concurrent writes in non blocking mode,
-                // leftover data has to be buffered
-                return count;
-            }
-            offset += writtenThisLoop;
-            leftToWrite -= writtenThisLoop;
-
-            if (writtenThisLoop < writeThisLoop) {
-                break;
-            }
-        }
-
-        return count;
-    }
-
-    private int doWriteInternal(boolean block, byte[] b, int off, int len)
-            throws IOException {
-        ByteBuffer buffer = channel.getBufHandler().getWriteBuffer();
-        int written = 0;
-        if (block) {
-            buffer.clear();
-            buffer.put(b, off, len);
-            buffer.flip();
-            try {
-                written = channel.write(buffer).get(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS).intValue();
-            } catch (ExecutionException e) {
-                if (e.getCause() instanceof IOException) {
-                    onError(e.getCause());
-                    throw (IOException) e.getCause();
-                } else {
-                    onError(e);
-                    throw new IOException(e);
-                }
-            } catch (InterruptedException e) {
-                onError(e);
-                throw new IOException(e);
-            } catch (TimeoutException e) {
-                SocketTimeoutException ex = new SocketTimeoutException();
-                onError(ex);
-                throw ex;
-            }
-        } else {
-            if (writePending.tryAcquire()) {
-                buffer.clear();
-                buffer.put(b, off, len);
-                buffer.flip();
-                Nio2Endpoint.startInline();
-                channel.write(buffer, socketWrapper.getTimeout(), TimeUnit.MILLISECONDS, buffer, completionHandler);
-                Nio2Endpoint.endInline();
-                written = len;
-            }
-        }
-        return written;
+        return ((Nio2SocketWrapper) socketWrapper).write(block, b, off, len);
     }
 
     @Override
     protected void doFlush() throws IOException {
-        try {
-            // Block until a possible non blocking write is done
-            if (writePending.tryAcquire(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS)) {
-                writePending.release();
-                channel.flush().get(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS);
-            } else {
-                throw new TimeoutException();
-            }
-        } catch (ExecutionException e) {
-            if (e.getCause() instanceof IOException) {
-                onError(e.getCause());
-                throw (IOException) e.getCause();
-            } else {
-                onError(e);
-                throw new IOException(e);
-            }
-        } catch (InterruptedException e) {
-            onError(e);
-            throw new IOException(e);
-        } catch (TimeoutException e) {
-            SocketTimeoutException ex = new SocketTimeoutException();
-            onError(ex);
-            throw ex;
-        }
+        ((Nio2SocketWrapper) socketWrapper).flush();
     }
 }

==================================================
