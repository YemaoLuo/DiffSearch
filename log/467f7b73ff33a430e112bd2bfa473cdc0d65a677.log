467f7b73ff33a430e112bd2bfa473cdc0d65a677
==================================================
Invalid priority length is only a stream error
==================================================
Mark Thomas
==================================================
Mon Jun 8 20:53:39 2015 +0000
==================================================
FrameType.java
Invalid priority length is only a stream error

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684277 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Parser.java
index 929136407c..804a7cbb4d 100644
--- a/java/org/apache/coyote/http2/FrameType.java
+++ b/java/org/apache/coyote/http2/FrameType.java
@@ -22,17 +22,17 @@ import org.apache.tomcat.util.res.StringManager;
 
 public enum FrameType {
 
-    DATA          (0,   false,  true, null),
-    HEADERS       (1,   false,  true, null),
-    PRIORITY      (2,   false,  true, (x) -> x == 5),
-    RST           (3,   false,  true, (x) -> x == 4),
-    SETTINGS      (4,    true, false, (x) -> x % 6 == 0),
-    PUSH_PROMISE  (5,   false,  true, (x) -> x >= 4),
-    PING          (6,    true, false, (x) -> x == 8),
-    GOAWAY        (7,    true, false, (x) -> x >= 8),
-    WINDOW_UPDATE (8,    true,  true, (x) -> x == 4),
-    CONTINUATION  (9,   false,  true, null),
-    UNKNOWN       (256,  true,  true, null);
+    DATA          (0,   false,  true, null,              false),
+    HEADERS       (1,   false,  true, null,               true),
+    PRIORITY      (2,   false,  true, (x) -> x == 5,     false),
+    RST           (3,   false,  true, (x) -> x == 4,     false),
+    SETTINGS      (4,    true, false, (x) -> x % 6 == 0,  true),
+    PUSH_PROMISE  (5,   false,  true, (x) -> x >= 4,      true),
+    PING          (6,    true, false, (x) -> x == 8,     false),
+    GOAWAY        (7,    true, false, (x) -> x >= 8,     false),
+    WINDOW_UPDATE (8,    true,  true, (x) -> x == 4,     false),
+    CONTINUATION  (9,   false,  true, null,               true),
+    UNKNOWN       (256,  true,  true, null,              false);
 
     private static final StringManager sm = StringManager.getManager(FrameType.class);
 
@@ -40,14 +40,16 @@ public enum FrameType {
     private final boolean streamZero;
     private final boolean streamNonZero;
     private final IntPredicate payloadSizeValidator;
+    private final boolean payloadErrorFatal;
 
 
     private FrameType(int id, boolean streamZero, boolean streamNonZero,
-            IntPredicate payloadSizeValidator) {
+            IntPredicate payloadSizeValidator,  boolean payloadErrorFatal) {
         this.id = id;
         this.streamZero = streamZero;
         this.streamNonZero = streamNonZero;
         this.payloadSizeValidator =  payloadSizeValidator;
+        this.payloadErrorFatal = payloadErrorFatal;
     }
 
 
@@ -64,11 +66,17 @@ public enum FrameType {
     }
 
 
-    public void checkPayloadSize(int payloadSize) throws Http2Exception {
+    public void checkPayloadSize(int streamId, int payloadSize) throws Http2Exception {
         if (payloadSizeValidator != null && !payloadSizeValidator.test(payloadSize)) {
-            throw new ConnectionError(sm.getString("frameType.checkPayloadSize",
-                    Integer.toString(payloadSize), this),
-                    Error.FRAME_SIZE_ERROR);
+            if (payloadErrorFatal) {
+                throw new ConnectionError(sm.getString("frameType.checkPayloadSize",
+                        Integer.toString(payloadSize), this),
+                        Error.FRAME_SIZE_ERROR);
+            } else {
+                throw new StreamError(sm.getString("frameType.checkPayloadSize",
+                        Integer.toString(payloadSize), this),
+                        Error.FRAME_SIZE_ERROR, streamId);
+            }
         }
     }
 

==================================================
Http2UpgradeHandler.java
index a4ccead132..254e982660 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -435,7 +435,7 @@ class Http2Parser {
         }
 
         frameType.checkStream(streamId);
-        frameType.checkPayloadSize(payloadSize);
+        frameType.checkPayloadSize(streamId, payloadSize);
     }
 
 

==================================================
TestHttp2Section_4_2.java
index be194e14d9..c2e6d25257 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -172,7 +172,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
                 String base64Settings = stream.getCoyoteRequest().getHeader(HTTP2_SETTINGS_HEADER);
                 byte[] settings = Base64.decodeBase64(base64Settings);
 
-                FrameType.SETTINGS.checkPayloadSize(settings.length);
+                FrameType.SETTINGS.checkPayloadSize(1, settings.length);
 
                 for (int i = 0; i < settings.length % 6; i++) {
                     int id = ByteUtil.getTwoBytes(settings, i * 6);

==================================================
