45f9f23f590e918097c9b8f70135fb102c634dfc
==================================================
Add i18n for modeler package, and fix package name for mbeans strings.
==================================================
Remy Maucherat
==================================================
Tue Dec 11 16:46:24 2018 +0000
==================================================
ConnectorMBean.java
Add i18n for modeler package, and fix package name for mbeans strings.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848696 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContextResourceLinkMBean.java
index 9b14d375ba..4b15bdf41f 100644
--- a/java/org/apache/catalina/mbeans/ConnectorMBean.java
+++ b/java/org/apache/catalina/mbeans/ConnectorMBean.java
@@ -24,6 +24,7 @@ import javax.management.RuntimeOperationsException;
 
 import org.apache.catalina.connector.Connector;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -33,6 +34,8 @@ import org.apache.tomcat.util.IntrospectionUtils;
  */
 public class ConnectorMBean extends ClassNameMBean<Connector> {
 
+    private static final StringManager sm = StringManager.getManager(ConnectorMBean.class);
+
     /**
      * Obtain and return the value of a specific attribute of this MBean.
      *

==================================================
ContextResourceMBean.java
index 89bd8a824c..e8385da9c1 100644
--- a/java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java
@@ -24,6 +24,7 @@ import javax.management.RuntimeOperationsException;
 
 import org.apache.tomcat.util.descriptor.web.ContextResourceLink;
 import org.apache.tomcat.util.descriptor.web.NamingResources;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -33,6 +34,8 @@ import org.apache.tomcat.util.descriptor.web.NamingResources;
  */
 public class ContextResourceLinkMBean extends BaseCatalinaMBean<ContextResourceLink> {
 
+    private static final StringManager sm = StringManager.getManager(ContextResourceLinkMBean.class);
+
     /**
      * Obtain and return the value of a specific attribute of this MBean.
      *

==================================================
GroupMBean.java
index 3d58df4d4f..f89f83ca72 100644
--- a/java/org/apache/catalina/mbeans/ContextResourceMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextResourceMBean.java
@@ -24,6 +24,7 @@ import javax.management.RuntimeOperationsException;
 
 import org.apache.tomcat.util.descriptor.web.ContextResource;
 import org.apache.tomcat.util.descriptor.web.NamingResources;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -33,6 +34,8 @@ import org.apache.tomcat.util.descriptor.web.NamingResources;
  */
 public class ContextResourceMBean extends BaseCatalinaMBean<ContextResource> {
 
+    private static final StringManager sm = StringManager.getManager(ContextResourceMBean.class);
+
     /**
      * Obtain and return the value of a specific attribute of this MBean.
      *

==================================================
MemoryUserDatabaseMBean.java
index 79cb5a47ae..70389dbd02 100644
--- a/java/org/apache/catalina/mbeans/GroupMBean.java
+++ b/java/org/apache/catalina/mbeans/GroupMBean.java
@@ -29,6 +29,7 @@ import org.apache.catalina.User;
 import org.apache.tomcat.util.modeler.BaseModelMBean;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -38,6 +39,8 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class GroupMBean extends BaseModelMBean {
 
+    private static final StringManager sm = StringManager.getManager(GroupMBean.class);
+
     /**
      * The configuration information registry for our managed beans.
      */

==================================================
NamingResourcesMBean.java
index b1f6da6764..d7774da558 100644
--- a/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
+++ b/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
@@ -30,6 +30,7 @@ import org.apache.catalina.UserDatabase;
 import org.apache.tomcat.util.modeler.BaseModelMBean;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -39,6 +40,8 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class MemoryUserDatabaseMBean extends BaseModelMBean {
 
+    private static final StringManager sm = StringManager.getManager(MemoryUserDatabaseMBean.class);
+
     // ----------------------------------------------------- Instance Variables
 
     /**

==================================================
UserMBean.java
index 87acc31f07..00cc984679 100644
--- a/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
+++ b/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
@@ -29,6 +29,7 @@ import org.apache.tomcat.util.descriptor.web.ContextResourceLink;
 import org.apache.tomcat.util.modeler.BaseModelMBean;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -38,6 +39,8 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class NamingResourcesMBean extends BaseModelMBean {
 
+    private static final StringManager sm = StringManager.getManager(NamingResourcesMBean.class);
+
     // ----------------------------------------------------- Instance Variables
 
     /**

==================================================
BaseModelMBean.java
index 5a0cadabc0..bfcd9939d3 100644
--- a/java/org/apache/catalina/mbeans/UserMBean.java
+++ b/java/org/apache/catalina/mbeans/UserMBean.java
@@ -29,6 +29,7 @@ import org.apache.catalina.User;
 import org.apache.tomcat.util.modeler.BaseModelMBean;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -38,6 +39,7 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class UserMBean extends BaseModelMBean {
 
+    private static final StringManager sm = StringManager.getManager(UserMBean.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
ManagedBean.java
new file mode 100644
index 0000000000..7f6a881af9
--- /dev/null
+++ b/java/org/apache/tomcat/util/modeler/LocalStrings.properties
@@ -0,0 +1,48 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+baseModelMBean.cnfeForSignature=Cannot find class for [{0}]
+baseModelMBean.invokeError=Exception invoking method [{0}]
+baseModelMBean.notificationError=Error sending notification [{0}]
+baseModelMBean.nullAttribute=The attribute is null
+baseModelMBean.nullAttributeName=The attribute name is null
+baseModelMBean.nullAttributeNameList=The attribute name list is null
+baseModelMBean.nullListener=The listener is null
+baseModelMBean.nullMessage=The message is null
+baseModelMBean.nullMethodName=The method name is null
+baseModelMBean.nullNotification=The notification is null
+baseModelMBean.nullResource=The managed resource is null
+
+managedMBean.cannotInstantiateClass=Cannot instantiate ModelMBean of class [{0}]
+managedMBean.cannotLoadClass=Cannot load ModelMBean class [{0}]
+managedMBean.inconsistentArguments=Inconsistent arguments and signature
+managedMBean.noAttribute=Cannot find attribute [{0}] on resource [{1}]
+managedMBean.noGet=Cannot find getter method [{0}] on resource [{1}]
+managedMBean.noMethod=Cannot find method [{0}] with this signature
+managedMBean.noOperation=Cannot find operation [{0}]
+managedMBean.noSet=Cannot find setter method [{0}] on resource [{1}]
+
+modules.digesterParseError=Error parsing registry data
+modules.nullMethod=No method argument for [{0}]
+modules.readDescriptorsError=Error reading descriptors
+
+registry.initError=Error initializing [{0}]
+registry.loadError=Error loading desriptors from [{0}]
+registry.noMetadata=Cannot find metadata for object [{0}]
+registry.noTypeMetadata=Cannot find metadata for type [{0}]
+registry.nullBean=Cannot register null bean for [{0}]
+registry.objectNameCreateError=Error creating object name
+registry.registerError=Error registering MBean
+registry.unregisterError=Error unregistering MBean

==================================================
Registry.java
index 7103544a17..49af85c390 100644
--- a/java/org/apache/tomcat/util/modeler/ManagedBean.java
+++ b/java/org/apache/tomcat/util/modeler/ManagedBean.java
@@ -39,6 +39,7 @@ import javax.management.RuntimeOperationsException;
 import javax.management.ServiceNotFoundException;
 
 import org.apache.tomcat.util.buf.StringUtils;
+import org.apache.tomcat.util.res.StringManager;
 
 
 /**
@@ -50,6 +51,7 @@ import org.apache.tomcat.util.buf.StringUtils;
 public class ManagedBean implements java.io.Serializable {
 
     private static final long serialVersionUID = 1L;
+    private static final StringManager sm = StringManager.getManager(ManagedBean.class);
 
     private static final String BASE_MBEAN = "org.apache.tomcat.util.modeler.BaseModelMBean";
     // ----------------------------------------------------- Instance Variables
@@ -314,7 +316,7 @@ public class ManagedBean implements java.io.Serializable {
 
             if( clazz==null) {
                 throw new MBeanException
-                    (ex, "Cannot load ModelMBean class " + getClassName());
+                    (ex, sm.getString("managedMBean.cannotLoadClass", getClassName()));
             }
             try {
                 // Stupid - this will set the default minfo first....
@@ -323,8 +325,7 @@ public class ManagedBean implements java.io.Serializable {
                 throw e;
             } catch (Exception e) {
                 throw new MBeanException
-                    (e, "Cannot instantiate ModelMBean of class " +
-                     getClassName());
+                    (e, sm.getString("managedMBean.cannotInstantiateClass", getClassName()));
             }
         }
 
@@ -431,7 +432,7 @@ public class ManagedBean implements java.io.Serializable {
         AttributeInfo attrInfo = attributes.get(aname);
         // Look up the actual operation to be used
         if (attrInfo == null)
-            throw new AttributeNotFoundException(" Cannot find attribute " + aname + " for " + resource);
+            throw new AttributeNotFoundException(sm.getString("managedMBean.noAttribute", aname, resource));
 
         String getMethod = attrInfo.getGetMethod();
 
@@ -453,8 +454,7 @@ public class ManagedBean implements java.io.Serializable {
             }
         }
         if (exception != null) {
-            throw new ReflectionException(exception,
-                                          "Cannot find getter method " + getMethod);
+            throw new ReflectionException(exception, sm.getString("managedMBean.noGet", getMethod, resource));
         }
 
         return m;
@@ -467,7 +467,7 @@ public class ManagedBean implements java.io.Serializable {
 
         AttributeInfo attrInfo = attributes.get(aname);
         if (attrInfo == null) {
-            throw new AttributeNotFoundException(" Cannot find attribute " + aname);
+            throw new AttributeNotFoundException(sm.getString("managedMBean.noAttribute", aname, resource));
         }
 
         // Look up the actual operation to be used
@@ -494,8 +494,7 @@ public class ManagedBean implements java.io.Serializable {
             }
         }
         if (exception != null) {
-            throw new ReflectionException(exception,
-                    "Cannot find setter method " + setMethod + " " + resource);
+            throw new ReflectionException(exception, sm.getString("managedMBean.noSet", setMethod, resource));
         }
 
         return m;
@@ -512,18 +511,16 @@ public class ManagedBean implements java.io.Serializable {
             signature = new String[0];
         if (params.length != signature.length)
             throw new RuntimeOperationsException(
-                    new IllegalArgumentException(
-                            "Inconsistent arguments and signature"),
-                    "Inconsistent arguments and signature");
+                    new IllegalArgumentException(sm.getString("managedMBean.inconsistentArguments")),
+                    sm.getString("managedMBean.inconsistentArguments"));
 
         // Acquire the ModelMBeanOperationInfo information for
         // the requested operation
         OperationInfo opInfo =
                 operations.get(createOperationKey(aname, signature));
         if (opInfo == null)
-            throw new MBeanException(new ServiceNotFoundException(
-                    "Cannot find operation " + aname),
-                    "Cannot find operation " + aname);
+            throw new MBeanException(new ServiceNotFoundException(sm.getString("managedMBean.noOperation", aname)),
+                    sm.getString("managedMBean.noOperation", aname));
 
         // Prepare the signature required by Java reflection APIs
         // FIXME - should we use the signature from opInfo?
@@ -552,8 +549,7 @@ public class ManagedBean implements java.io.Serializable {
             exception = e;
         }
         if (method == null) {
-            throw new ReflectionException(exception, "Cannot find method "
-                    + aname + " with this signature");
+            throw new ReflectionException(exception, sm.getString("managedMBean.noMethod", aname));
         }
 
         return method;

==================================================
MbeansDescriptorsDigesterSource.java
index 827c6094ba..c116b82e26 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -39,6 +39,7 @@ import javax.management.ObjectName;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.modules.ModelerSource;
+import org.apache.tomcat.util.res.StringManager;
 
 /*
    Issues:
@@ -70,6 +71,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
      * The Log instance to which we will write our log messages.
      */
     private static final Log log = LogFactory.getLog(Registry.class);
+    private static final StringManager sm = StringManager.getManager(Registry.class);
 
     // Support for the factory methods
 
@@ -237,7 +239,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
         try {
             unregisterComponent(new ObjectName(oname));
         } catch (MalformedObjectNameException e) {
-            log.info("Error creating object name " + e);
+            log.info(sm.getString("registry.objectNameCreateError"), e);
         }
     }
 
@@ -272,7 +274,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
             } catch (Exception t) {
                 if (failFirst)
                     throw t;
-                log.info("Error initializing " + current + " " + t.toString());
+                log.info(sm.getString("registry.initError"), t);
             }
         }
     }
@@ -372,7 +374,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
         try {
             info = getMBeanServer().getMBeanInfo(oname);
         } catch (Exception e) {
-            log.info("Can't find metadata for object" + oname);
+            log.info(sm.getString("registry.noMetadata", oname));
             return null;
         }
 
@@ -399,7 +401,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
         try {
             info = getMBeanServer().getMBeanInfo(oname);
         } catch (Exception e) {
-            log.info("Can't find metadata " + oname);
+            log.info(sm.getString("registry.noMetadata", oname));
             return null;
         }
         MBeanOperationInfo attInfo[] = info.getOperations();
@@ -424,7 +426,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
                 getMBeanServer().unregisterMBean(oname);
             }
         } catch (Throwable t) {
-            log.error("Error unregistering mbean", t);
+            log.error(sm.getString("registry.unregisterError"), t);
         }
     }
 
@@ -503,7 +505,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
 
             managed = findManagedBean(type);
             if (managed == null) {
-                log.warn("No metadata found for " + type);
+                log.warn(sm.getString("registry.noTypeMetadata", type));
                 return null;
             }
             managed.setName(type);
@@ -613,7 +615,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
         }
 
         if (bean == null) {
-            log.error("Null component " + oname);
+            log.error(sm.getString("registry.nullBean", oname));
             return;
         }
 
@@ -636,7 +638,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
 
             getMBeanServer().registerMBean(mbean, oname);
         } catch (Exception ex) {
-            log.error("Error registering " + oname, ex);
+            log.error(sm.getString("registry.registerError", oname), ex);
             throw ex;
         }
     }
@@ -672,7 +674,7 @@ public class Registry implements RegistryMBean, MBeanRegistration {
         try {
             load("MbeansDescriptorsDigesterSource", dURL, null);
         } catch (Exception ex) {
-            log.error("Error loading " + dURL);
+            log.error(sm.getString("registry.loadError", dURL));
         }
     }
 

==================================================
MbeansDescriptorsIntrospectionSource.java
index bfcaff1edf..a3ab5c4793 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -168,7 +168,7 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
                 digester.push(loadedMbeans);
                 digester.parse(stream);
             } catch (Exception e) {
-                log.error("Error digesting Registry data", e);
+                log.error(sm.getString("modules.digesterParseError"), e);
                 throw e;
             } finally {
                 digester.reset();

==================================================
ModelerSource.java
index f3637f404d..7cd22cd5ba 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -83,7 +83,7 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
             registry.addManagedBean(managed);
 
         } catch( Exception ex ) {
-            log.error( "Error reading descriptors ", ex);
+            log.error(sm.getString("modules.readDescriptorsError"), ex);
         }
     }
 
@@ -351,7 +351,7 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
                     }
                     mbean.addOperation(op);
                 } else {
-                    log.error("Null arg method for [" + name + "]");
+                    log.error(sm.getString("modules.nullMethod", name));
                 }
             }
 

==================================================
