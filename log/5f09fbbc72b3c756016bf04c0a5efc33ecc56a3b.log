5f09fbbc72b3c756016bf04c0a5efc33ecc56a3b
==================================================
Remove the (overly complex) ConnectionPrefaceParser and use the new Http2Parser instead.
==================================================
Mark Thomas
==================================================
Mon Jun 1 09:24:58 2015 +0000
==================================================
ConnectionPrefaceParser.java
Remove the (overly complex) ConnectionPrefaceParser and use the new Http2Parser instead.
Initial unit tests identified a need to be able to set timeouts. Provide the ability to set these when configuring the UpgradeProtocol and take a first stab at some defaults (10s within an HTTP/2 frame, 30s between frames).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682847 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Protocol.java
deleted file mode 100644
index e8cdf5f9a9..0000000000
--- a/java/org/apache/coyote/http2/ConnectionPrefaceParser.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http2;
-
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-import org.apache.tomcat.util.res.StringManager;
-
-/**
- * Parser for the initial part of the client connection preface received by the
- * server.
- */
-public class ConnectionPrefaceParser {
-
-    private static final Log log = LogFactory.getLog(ConnectionPrefaceParser.class);
-    private static final StringManager sm = StringManager.getManager(ConnectionPrefaceParser.class);
-
-    private static final byte[] EXPECTED =
-            "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n".getBytes(StandardCharsets.ISO_8859_1);
-
-    private volatile byte[] data = new byte[EXPECTED.length];
-    private volatile int pos = 0;
-    private volatile boolean error = false;
-
-
-    public boolean parse(SocketWrapperBase<?> socketWrapper, boolean block) {
-        int read = 0;
-        try {
-            read = socketWrapper.read(block, data, pos, EXPECTED.length - pos);
-        } catch (IOException ioe) {
-            log.error(sm.getString("connectionPrefaceParser.ioError"), ioe);
-            error = true;
-            return false;
-        }
-
-        if (read == -1) {
-            log.error(sm.getString("connectionPrefaceParser.eos", Integer.toString(pos)));
-            error = true;
-            return false;
-        }
-
-        for (int i = pos; i < (pos + read); i++) {
-            if (data[i] != EXPECTED[i]) {
-                log.error(sm.getString("connectionPrefaceParser.mismatch",
-                        new String(data, StandardCharsets.ISO_8859_1)));
-                error = true;
-                return false;
-            }
-        }
-
-        pos += read;
-        return pos == EXPECTED.length;
-    }
-
-
-    public boolean isError() {
-        return error;
-    }
-}

==================================================
Http2UpgradeHandler.java
index 1a29005756..2c025c5164 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -32,6 +32,11 @@ public class Http2Protocol implements UpgradeProtocol {
     private static final String ALPN_NAME = "h2";
     private static final byte[] ALPN_IDENTIFIER = ALPN_NAME.getBytes(StandardCharsets.UTF_8);
 
+    // All timeouts in milliseconds
+    private long readTimeout = 10000;
+    private long keepAliveTimeout = 30000;
+    private long writeTimeout = 10000;
+
     @Override
     public String getHttpUpgradeName(boolean isSecure) {
         if (isSecure) {
@@ -62,6 +67,42 @@ public class Http2Protocol implements UpgradeProtocol {
     @Override
     public InternalHttpUpgradeHandler getInteralUpgradeHandler(Adapter adapter,
             Request coyoteRequest) {
-        return new Http2UpgradeHandler(adapter, coyoteRequest);
+        Http2UpgradeHandler result = new Http2UpgradeHandler(adapter, coyoteRequest);
+
+        result.setReadTimeout(getReadTimeout());
+        result.setKeepAliveTimeout(getKeepAliveTimeout());
+        result.setWriteTimeout(getWriteTimeout());
+
+        return result;
+    }
+
+
+    public long getReadTimeout() {
+        return readTimeout;
+    }
+
+
+    public void setReadTimeout(long readTimeout) {
+        this.readTimeout = readTimeout;
+    }
+
+
+    public long getKeepAliveTimeout() {
+        return keepAliveTimeout;
+    }
+
+
+    public void setKeepAliveTimeout(long keepAliveTimeout) {
+        this.keepAliveTimeout = keepAliveTimeout;
+    }
+
+
+    public long getWriteTimeout() {
+        return writeTimeout;
+    }
+
+
+    public void setWriteTimeout(long writeTimeout) {
+        this.writeTimeout = writeTimeout;
     }
 }

==================================================
