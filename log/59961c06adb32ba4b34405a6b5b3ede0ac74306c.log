59961c06adb32ba4b34405a6b5b3ede0ac74306c
==================================================
Improve the handling for Servlets that implement the deprecated SingleThreadModel when embedding Tomcat.
==================================================
Mark Emlyn
==================================================
Thu Jun 30 11:58:36 2011 +0000
==================================================
Tomcat.java
Improve the handling for Servlets that implement the deprecated SingleThreadModel when embedding Tomcat.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1141495 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestStandardWrapper.java
index 7004e3b732..2281ae98f7 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -23,6 +23,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Stack;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -812,18 +813,35 @@ public class Tomcat {
     public static class ExistingStandardWrapper extends StandardWrapper {
         private Servlet existing;
         boolean init = false;
-        
+
+        @SuppressWarnings("deprecation")
         public ExistingStandardWrapper( Servlet existing ) {
             this.existing = existing;
+            if (existing instanceof javax.servlet.SingleThreadModel) {
+                singleThreadModel = true;
+                instancePool = new Stack<Servlet>();
+            }
         }
         @Override
         public synchronized Servlet loadServlet() throws ServletException {
-            if (!init) {
-                existing.init(facade);
-                init = true;
+            if (singleThreadModel) {
+                Servlet instance;
+                try {
+                    instance = existing.getClass().newInstance();
+                } catch (InstantiationException e) {
+                    throw new ServletException(e);
+                } catch (IllegalAccessException e) {
+                    throw new ServletException(e);
+                }
+                instance.init(facade);
+                return instance;
+            } else {
+                if (!init) {
+                    existing.init(facade);
+                    init = true;
+                }
+                return existing;
             }
-            return existing;
-
         }
         @Override
         public long getAvailable() {

==================================================
