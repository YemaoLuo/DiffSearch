f71f67811d35d85e524587bde7c58f6e67e3f2fd
==================================================
Switch to dedicated async timeout property
==================================================
Mark Emlyn
==================================================
Wed Nov 12 10:48:56 2014 +0000
==================================================
AbstractAjpProcessor.java
Switch to dedicated async timeout property

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1638747 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Processor.java
index 3fbd40033d..0de01d1b5f 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -518,8 +518,6 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         }
         case ASYNC_START: {
             asyncStateMachine.asyncStart((AsyncContextCallback) param);
-            // Async time out is based on SocketWrapper access time
-            getSocketWrapper().access();
             break;
         }
         case ASYNC_COMPLETE: {
@@ -542,7 +540,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         case ASYNC_SETTIMEOUT: {
             if (param == null) return;
             long timeout = ((Long)param).longValue();
-            socketWrapper.setTimeout(timeout);
+            socketWrapper.setAsyncTimeout(timeout);
             break;
         }
         case ASYNC_TIMEOUT: {

==================================================
AbstractEndpoint.java
index d803bf3e3e..628d38d08a 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -792,8 +792,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         }
         case ASYNC_START: {
             asyncStateMachine.asyncStart((AsyncContextCallback) param);
-            // Async time out is based on SocketWrapper access time
-            getSocketWrapper().access();
             break;
         }
         case ASYNC_DISPATCHED: {
@@ -848,9 +846,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             if (param == null || socketWrapper == null) {
                 return;
             }
-            long timeout = ((Long)param).longValue();
-            // If we are not piggy backing on a worker thread, set the timeout
-            socketWrapper.setTimeout(timeout);
+            long timeout = ((Long) param).longValue();
+            socketWrapper.setAsyncTimeout(timeout);
             break;
         }
         case ASYNC_DISPATCH: {

==================================================
NioEndpoint.java
index 4bf24cda87..c7f29c36b8 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -129,9 +129,12 @@ public abstract class AbstractEndpoint<S> {
                 }
                 long now = System.currentTimeMillis();
                 for (SocketWrapperBase<S> socket : waitingRequests) {
-                    long access = socket.getLastAsyncStart();
-                    if (socket.getTimeout() > 0 && (now - access) > socket.getTimeout()) {
-                        processSocket(socket, SocketStatus.TIMEOUT, true);
+                    long asyncTimeout = socket.getAsyncTimeout();
+                    if (asyncTimeout > 0) {
+                        long asyncStart = socket.getLastAsyncStart();
+                        if ((now - asyncStart) > asyncTimeout) {
+                            processSocket(socket, SocketStatus.TIMEOUT, true);
+                        }
                     }
                 }
 

==================================================
