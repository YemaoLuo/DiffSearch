20d037d26e5f3a7ebc3061f3104022ea3c3c109d
==================================================
Towards the fix for BZ 50019
==================================================
Mark Thomas
==================================================
Wed May 9 15:46:02 2018 +0000
==================================================
LookupRef.java
Towards the fix for BZ 50019
Add the remaining plumbing necessary to support lookup-name.
Based on a patch by Gurkan Erdogdu

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1831262 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
new file mode 100644
index 0000000000..116a16a70a
--- /dev/null
+++ b/java/org/apache/naming/LookupRef.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.naming;
+
+import javax.naming.RefAddr;
+import javax.naming.StringRefAddr;
+
+/**
+ * Represents a reference to lookup.
+ */
+public class LookupRef extends AbstractRef {
+
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * JNDI name for the lookup
+     */
+    public static final String LOOKUP_NAME = "lookup-name";
+
+
+    public LookupRef(String resourceType, String lookupName) {
+        this(resourceType, null, null, lookupName);
+    }
+
+
+    public LookupRef(String resourceType, String factory, String factoryLocation, String lookupName) {
+        super(resourceType, factory, factoryLocation);
+        if (lookupName != null && !lookupName.equals("")) {
+            RefAddr ref = new StringRefAddr(LOOKUP_NAME, lookupName);
+            add(ref);
+        }
+    }
+
+
+    @Override
+    protected String getDefaultFactoryClassName() {
+        return org.apache.naming.factory.Constants.DEFAULT_LOOKUP_JNDI_FACTORY;
+    }
+}

==================================================
LookupFactory.java
index 498f6cd78b..01fd65dcaa 100644
--- a/java/org/apache/naming/factory/LocalStrings.properties
+++ b/java/org/apache/naming/factory/LocalStrings.properties
@@ -13,6 +13,11 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+lookupFactory.circularReference=Found a circular reference involving [{0}]
+lookupFactory.createFailed=Could not create instance of JNDI lookup factory class
+lookupFactory.loadFailed=Could not load JNDI lookup factory class
+lookupFactory.typeMismatch=The JNDI reference [{0}] was expected to be of type [{1}] but the lookup [{2}] return an object of type [{3}]
+
 resourceLinkFactory.nullType=The local resource link [{0}] that refers to global resource [{1}] does not specify the required attribute type
 resourceLinkFactory.unknownType=The local resource link [{0}] that refers to global resource [{1}] specified the unknown type [{2}]
 resourceLinkFactory.wrongType=The local resource link [{0}] that refers to global resource [{1}] was expected to return an instance of [{2}] but returned an instance of [{3}]
\ No newline at end of file

==================================================
