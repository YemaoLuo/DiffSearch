5777168f58476da9d120b3b186126703e93df224
==================================================
Update enabledProtocols and enabledCiphers
==================================================
Rainer Jung
==================================================
Sat Aug 19 21:35:50 2017 +0000
==================================================
AprEndpoint.java
Update enabledProtocols and enabledCiphers
in SSLHostConfig after OpenSSLConf has been
applied.

This is needed, because the Manager webapp
feature of listing the current enabled ciphers
relies on SSLHostConfig.

Unfortunately the setters in SSLHostConfig
are not public and OpenSSLContext which needs
to call it is in a sub package.

For now I made the two setters public, any
better suggestions welcome.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1805529 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLHostConfig.java
index 967bbc9487..f01ab4c94c 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -581,6 +581,31 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
                 } catch (Exception e) {
                     throw new Exception(sm.getString("endpoint.apr.errApplyConf"), e);
                 }
+                // Reconfigure the enabled protocols
+                int opts = SSLContext.getOptions(ctx);
+                List<String> enabled = new ArrayList<>();
+                // Seems like there is no way to explicitly disable SSLv2Hello
+                // in OpenSSL so it is always enabled
+                enabled.add(Constants.SSL_PROTO_SSLv2Hello);
+                if ((opts & SSL.SSL_OP_NO_TLSv1) == 0) {
+                    enabled.add(Constants.SSL_PROTO_TLSv1);
+                }
+                if ((opts & SSL.SSL_OP_NO_TLSv1_1) == 0) {
+                    enabled.add(Constants.SSL_PROTO_TLSv1_1);
+                }
+                if ((opts & SSL.SSL_OP_NO_TLSv1_2) == 0) {
+                    enabled.add(Constants.SSL_PROTO_TLSv1_2);
+                }
+                if ((opts & SSL.SSL_OP_NO_SSLv2) == 0) {
+                    enabled.add(Constants.SSL_PROTO_SSLv2);
+                }
+                if ((opts & SSL.SSL_OP_NO_SSLv3) == 0) {
+                    enabled.add(Constants.SSL_PROTO_SSLv3);
+                }
+                sslHostConfig.setEnabledProtocols(
+                        enabled.toArray(new String[enabled.size()]));
+                // Reconfigure the enabled ciphers
+                sslHostConfig.setEnabledCiphers(SSLContext.getCiphers(ctx));
             }
         } else {
             cctx = 0;

==================================================
OpenSSLContext.java
index b9c8def319..00936aeabc 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -198,7 +198,7 @@ public class SSLHostConfig implements Serializable {
     }
 
 
-    void setEnabledProtocols(String[] enabledProtocols) {
+    public void setEnabledProtocols(String[] enabledProtocols) {
         this.enabledProtocols = enabledProtocols;
     }
 
@@ -213,7 +213,7 @@ public class SSLHostConfig implements Serializable {
     }
 
 
-    void setEnabledCiphers(String[] enabledCiphers) {
+    public void setEnabledCiphers(String[] enabledCiphers) {
         this.enabledCiphers = enabledCiphers;
     }
 

==================================================
