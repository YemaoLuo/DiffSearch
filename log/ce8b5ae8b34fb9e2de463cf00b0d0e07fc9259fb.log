ce8b5ae8b34fb9e2de463cf00b0d0e07fc9259fb
==================================================
Fix some indentation issues
==================================================
Mark Thomas
==================================================
Tue Jun 1 19:29:29 2021 +0100
==================================================
EJB.java
Fix some indentation issues

Helps readability but mainly to trigger a CI build


==================================================
BeanELResolver.java
index 65f9e8fc7b..82b9bfd469 100644
--- a/java/jakarta/ejb/EJB.java
+++ b/java/jakarta/ejb/EJB.java
@@ -27,11 +27,11 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 
 public @interface EJB {
-   String name() default "";
-   String description() default "";
-   @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
-   Class beanInterface() default java.lang.Object.class;
-   String beanName() default "";
-   String mappedName() default "";
-   String lookup() default "";
+    String name() default "";
+    String description() default "";
+    @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
+    Class beanInterface() default java.lang.Object.class;
+    String beanName() default "";
+    String mappedName() default "";
+    String lookup() default "";
 }

==================================================
ExpressionFactory.java
index 8eed486a8b..8a47a25add 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -37,8 +37,7 @@ import java.util.concurrent.ConcurrentHashMap;
 public class BeanELResolver extends ELResolver {
 
     private static final int CACHE_SIZE;
-    private static final String CACHE_SIZE_PROP =
-        "org.apache.el.BeanELResolver.CACHE_SIZE";
+    private static final String CACHE_SIZE_PROP = "org.apache.el.BeanELResolver.CACHE_SIZE";
 
     static {
         String cacheSizeStr;
@@ -53,8 +52,7 @@ public class BeanELResolver extends ELResolver {
 
     private final boolean readOnly;
 
-    private final ConcurrentCache<String, BeanProperties> cache =
-        new ConcurrentCache<>(CACHE_SIZE);
+    private final ConcurrentCache<String, BeanProperties> cache = new ConcurrentCache<>(CACHE_SIZE);
 
     public BeanELResolver() {
         this.readOnly = false;

==================================================
ListELResolver.java
index d9a83dffe5..aeacc00b8c 100644
--- a/java/jakarta/el/ExpressionFactory.java
+++ b/java/jakarta/el/ExpressionFactory.java
@@ -42,8 +42,7 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
  */
 public abstract class ExpressionFactory {
 
-    private static final boolean IS_SECURITY_ENABLED =
-        (System.getSecurityManager() != null);
+    private static final boolean IS_SECURITY_ENABLED = (System.getSecurityManager() != null);
 
     private static final String PROPERTY_NAME = "jakarta.el.ExpressionFactory";
 

==================================================
Util.java
index 03c03d4835..3b0bc5e185 100644
--- a/java/jakarta/el/ListELResolver.java
+++ b/java/jakarta/el/ListELResolver.java
@@ -28,8 +28,7 @@ public class ListELResolver extends ELResolver {
 
     private final boolean readOnly;
 
-    private static final Class<?> UNMODIFIABLE =
-        Collections.unmodifiableList(new ArrayList<>()).getClass();
+    private static final Class<?> UNMODIFIABLE = Collections.unmodifiableList(new ArrayList<>()).getClass();
 
     public ListELResolver() {
         this.readOnly = false;

==================================================
PersistenceContext.java
index 3051a7b521..66a1ca5bfa 100644
--- a/java/jakarta/el/Util.java
+++ b/java/jakarta/el/Util.java
@@ -363,7 +363,7 @@ class Util {
                 throw new MethodNotFoundException(message(
                         null, "util.method.ambiguous", clazz, name,
                         paramString(paramTypes)));
-                }
+            }
         }
 
         // Handle case where no match at all was found
@@ -422,12 +422,11 @@ class Util {
         }
 
         for (Wrapper<T> c : candidates) {
-           if (c.getParameterTypes()[nonMatchIndex] ==
-                   paramTypes[nonMatchIndex]) {
-               // Methods have different non-matching parameters
-               // Result is ambiguous
-               return null;
-           }
+            if (c.getParameterTypes()[nonMatchIndex] == paramTypes[nonMatchIndex]) {
+                // Methods have different non-matching parameters
+                // Result is ambiguous
+                return null;
+            }
         }
 
         // Can't be null
@@ -630,11 +629,8 @@ class Util {
                             parameterTypes[i]);
                 }
                 // Last parameter is the varargs
-                Class<?> varArgClass =
-                    parameterTypes[varArgIndex].getComponentType();
-                final Object varargs = Array.newInstance(
-                    varArgClass,
-                    (paramCount - varArgIndex));
+                Class<?> varArgClass = parameterTypes[varArgIndex].getComponentType();
+                final Object varargs = Array.newInstance(varArgClass, (paramCount - varArgIndex));
                 for (int i = (varArgIndex); i < paramCount; i++) {
                     Array.set(varargs, i - varArgIndex,
                             factory.coerceToType(params[i], varArgClass));

==================================================
PersistenceProperty.java
index f53b6b245c..9b5f8cada4 100644
--- a/java/jakarta/persistence/PersistenceContext.java
+++ b/java/jakarta/persistence/PersistenceContext.java
@@ -25,9 +25,9 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 
 public @interface PersistenceContext {
-   String name() default "";
-   String unitName() default "";
-   PersistenceContextType type() default PersistenceContextType.TRANSACTION;
-   PersistenceProperty[] properties() default {};
-   SynchronizationType synchronization() default SynchronizationType.SYNCHRONIZED;
+    String name() default "";
+    String unitName() default "";
+    PersistenceContextType type() default PersistenceContextType.TRANSACTION;
+    PersistenceProperty[] properties() default {};
+    SynchronizationType synchronization() default SynchronizationType.SYNCHRONIZED;
 }

==================================================
PersistenceUnit.java
index 46943a51cc..70c51e71d8 100644
--- a/java/jakarta/persistence/PersistenceProperty.java
+++ b/java/jakarta/persistence/PersistenceProperty.java
@@ -25,6 +25,6 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 
 public @interface PersistenceProperty {
-   String name();
-   String value();
+    String name();
+    String value();
 }

==================================================
