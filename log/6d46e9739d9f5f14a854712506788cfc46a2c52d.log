6d46e9739d9f5f14a854712506788cfc46a2c52d
==================================================
WebSocket 1.0 implementation part 18 of many
==================================================
Mark Emlyn
==================================================
Sat Dec 22 22:11:42 2012 +0000
==================================================
PathParam.java
WebSocket 1.0 implementation part 18 of many
Sync the implementation to the latest draft of the spec API

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1425354 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PojoEndpointConfiguration.java
index 567e21e302..0696dd9979 100644
--- a/java/org/apache/tomcat/websocket/PathParam.java
+++ b/java/org/apache/tomcat/websocket/PathParam.java
@@ -19,9 +19,10 @@ package org.apache.tomcat.websocket;
 /**
  * Stores the parameter type and name for a parameter that needs to be passed to
  * an onXxx method of {@link javax.websocket.Endpoint}. The name is only present
- * for parameters annotated with {@link javax.websocket.WebSocketPathParam}. For
- * the {@link javax.websocket.Session} and {@link java.lang.Throwable}
- * parameters, {@link #getName()} will always return <code>null</code>.
+ * for parameters annotated with
+ * {@link javax.websocket.server.WebSocketPathParam}. For the
+ * {@link javax.websocket.Session} and {@link java.lang.Throwable} parameters,
+ * {@link #getName()} will always return <code>null</code>.
  */
 public class PathParam {
 

==================================================
PojoMethodMapping.java
new file mode 100644
index 0000000000..c7ad957e94
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/PojoEndpointConfiguration.java
@@ -0,0 +1,71 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import javax.websocket.server.DefaultServerConfiguration;
+
+public class PojoEndpointConfiguration extends
+        DefaultServerConfiguration {
+
+    private final Class<?> pojoClass;
+    private final PojoMethodMapping methodMapping;
+    private final String servletPath;
+    private final String pathInfo;
+
+    @Override
+    public boolean checkOrigin(String originHeaderValue) {
+        // Allow all
+        return true;
+    }
+
+
+    PojoEndpointConfiguration(Class<?> pojoClass,
+            PojoMethodMapping methodMapping, String servletPath,
+            String pathInfo) {
+        super(WsEndpointPojo.class, methodMapping.getMappingPath());
+        this.pojoClass = pojoClass;
+        this.methodMapping = methodMapping;
+        this.servletPath = servletPath;
+        this.pathInfo = pathInfo;
+    }
+
+
+    @Override
+    public String getPath() {
+        return servletPath;
+    }
+
+    public Object getPojo() {
+        try {
+            return pojoClass.newInstance();
+        } catch (InstantiationException | IllegalAccessException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+            throw new IllegalArgumentException(e);
+        }
+    }
+
+
+    public String getPathInfo() {
+        return pathInfo;
+    }
+
+
+    public PojoMethodMapping getMethodMapping() {
+        return methodMapping;
+    }
+}

==================================================
PojoServerEndpointConfiguration.java
index f9abbdf6b8..492e3637e6 100644
--- a/java/org/apache/tomcat/websocket/PojoMethodMapping.java
+++ b/java/org/apache/tomcat/websocket/PojoMethodMapping.java
@@ -32,12 +32,12 @@ import javax.websocket.WebSocketClose;
 import javax.websocket.WebSocketError;
 import javax.websocket.WebSocketMessage;
 import javax.websocket.WebSocketOpen;
-import javax.websocket.WebSocketPathParam;
+import javax.websocket.server.WebSocketPathParam;
 
 /**
- * For a POJO class annotated with {@link javax.websocket.WebSocketEndpoint}, an
- * instance of this class caches the method and parameter information for the
- * onXXX calls.
+ * For a POJO class annotated with
+ * {@link javax.websocket.server.WebSocketEndpoint}, an instance of this class
+ * caches the method and parameter information for the onXXX calls.
  */
 public class PojoMethodMapping {
 
@@ -48,10 +48,12 @@ public class PojoMethodMapping {
     private final PathParam[] onCloseParams;
     private final PathParam[] onErrorParams;
     private final Set<MessageMethod> onMessage = new HashSet<>();
+    private final String mappingPath;
     private final UriTemplate template;
 
 
     public PojoMethodMapping(Class<?> clazzPojo, String path, String mappingPath) {
+        this.mappingPath = mappingPath;
         Method open = null;
         Method close = null;
         Method error = null;
@@ -83,6 +85,11 @@ public class PojoMethodMapping {
     }
 
 
+    public String getMappingPath() {
+        return mappingPath;
+    }
+
+
     public Method getOnOpen() {
         return onOpen;
     }

==================================================
ServerContainerImpl.java
deleted file mode 100644
index cd12456244..0000000000
--- a/java/org/apache/tomcat/websocket/PojoServerEndpointConfiguration.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.tomcat.websocket;
-
-import javax.websocket.DefaultServerConfiguration;
-import javax.websocket.Endpoint;
-import javax.websocket.EndpointFactory;
-
-public class PojoServerEndpointConfiguration extends
-        DefaultServerConfiguration<Endpoint> {
-
-    @Override
-    public boolean checkOrigin(String originHeaderValue) {
-        // Allow all
-        return true;
-    }
-    private final EndpointFactory<Endpoint> endpointFactory;
-    private final String servletPath;
-
-
-    PojoServerEndpointConfiguration(Class<?> pojo,
-            PojoMethodMapping methodMapping, String servletPath, String pathInfo) {
-        this.endpointFactory = new PojoEndpointFactory(pojo, methodMapping,
-                pathInfo);
-        this.servletPath = servletPath;
-    }
-
-
-    @Override
-    public EndpointFactory<Endpoint> getEndpointFactory() {
-        return endpointFactory;
-    }
-
-
-    @Override
-    public String getPath() {
-        return servletPath;
-    }
-
-    private static class PojoEndpointFactory implements
-            EndpointFactory<Endpoint> {
-
-        private final Class<?> pojo;
-        private final PojoMethodMapping methodMapping;
-        private final String pathInfo;
-
-
-        public PojoEndpointFactory(Class<?> pojo,
-                PojoMethodMapping methodMapping, String pathInfo) {
-            this.pojo = pojo;
-            this.methodMapping = methodMapping;
-            this.pathInfo = pathInfo;
-        }
-
-
-        @Override
-        public Endpoint createEndpoint() {
-            Endpoint ep;
-            try {
-                ep = new WsEndpointPojo(pojo, methodMapping, pathInfo);
-            } catch (InstantiationException | IllegalAccessException e) {
-                throw new IllegalArgumentException(e);
-            }
-            return ep;
-        }
-    }
-}

==================================================
WebSocketContainerImpl.java
index 26849dac9a..905e2b0fd5 100644
--- a/java/org/apache/tomcat/websocket/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ServerContainerImpl.java
@@ -16,6 +16,8 @@
  */
 package org.apache.tomcat.websocket;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.concurrent.ConcurrentHashMap;
@@ -23,8 +25,8 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
 import javax.websocket.DeploymentException;
-import javax.websocket.ServerContainer;
-import javax.websocket.ServerEndpointConfiguration;
+import javax.websocket.Endpoint;
+import javax.websocket.server.ServerEndpointConfiguration;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -32,10 +34,9 @@ import org.apache.tomcat.util.res.StringManager;
 
 /**
  * Provides a per class loader (i.e. per web application) instance of a
- * {@link ServerContainer}.
+ * ServerContainer.
  */
-public class ServerContainerImpl extends ClientContainerImpl implements
-        ServerContainer {
+public class ServerContainerImpl extends WebSocketContainerImpl {
 
     // Needs to be a WeakHashMap to prevent memory leaks when a context is
     // stopped
@@ -45,11 +46,6 @@ public class ServerContainerImpl extends ClientContainerImpl implements
     protected Log log = LogFactory.getLog(ServerContainerImpl.class);
 
 
-    /**
-     * Intended to be used by implementations of
-     * {@link javax.websocket.ContainerProvider#getServerContainer()} to obtain
-     * the correct {@link ServerContainer} instance.
-     */
     public static ServerContainerImpl getServerContainer() {
         ClassLoader tccl = Thread.currentThread().getContextClassLoader();
         ServerContainerImpl result = null;
@@ -63,7 +59,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
         return result;
     }
     private volatile ServletContext servletContext = null;
-    private Map<String,ServerEndpointConfiguration<?>> configMap = new ConcurrentHashMap<>();
+    private Map<String,ServerEndpointConfiguration> configMap = new ConcurrentHashMap<>();
     private Map<String,Class<?>> pojoMap = new ConcurrentHashMap<>();
     private Map<Class<?>,PojoMethodMapping> pojoMethodMap = new ConcurrentHashMap<>();
 
@@ -78,26 +74,29 @@ public class ServerContainerImpl extends ClientContainerImpl implements
     }
 
 
-    @Override
-    public void publishServer(
-            Class<? extends ServerEndpointConfiguration<?>> clazz)
+    public void publishServer(Class<? extends Endpoint> endpointClass,
+            String path,
+            Class<? extends ServerEndpointConfiguration> configClass)
             throws DeploymentException {
         if (servletContext == null) {
             throw new IllegalArgumentException(
                     sm.getString("serverContainer.servletContextMissing"));
         }
-        ServerEndpointConfiguration<?> sec = null;
+        ServerEndpointConfiguration sec = null;
         try {
-            sec = clazz.newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
+            Constructor<? extends ServerEndpointConfiguration> c =
+                    configClass.getConstructor(Class.class, String.class);
+            sec = c.newInstance(endpointClass, path);
+        } catch (InstantiationException | IllegalAccessException |
+                NoSuchMethodException | SecurityException |
+                IllegalArgumentException | InvocationTargetException e) {
             throw new DeploymentException(sm.getString("sci.newInstance.fail",
-                    clazz.getName()), e);
+                    endpointClass.getName()), e);
         }
-        String path = sec.getPath();
         String mappingPath = Util.getServletMappingPath(path);
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("serverContainer.endpointDeploy",
-                    clazz.getName(), path, servletContext.getContextPath()));
+                    endpointClass.getName(), path, servletContext.getContextPath()));
         }
         configMap.put(mappingPath.substring(0, mappingPath.length() - 2), sec);
         addWsServletMapping(mappingPath);
@@ -105,9 +104,9 @@ public class ServerContainerImpl extends ClientContainerImpl implements
 
 
     /**
-     * Provides the equivalent of {@link #publishServer(Class)} for publishing
-     * plain old java objects (POJOs) that have been annotated as WebSocket
-     * endpoints.
+     * Provides the equivalent of {@link #publishServer(Class,String,Class)} for
+     * publishing plain old java objects (POJOs) that have been annotated as
+     * WebSocket endpoints.
      *
      * @param pojo The annotated POJO
      * @param ctxt The ServletContext the endpoint is to be published in
@@ -148,9 +147,9 @@ public class ServerContainerImpl extends ClientContainerImpl implements
     }
 
 
-    public ServerEndpointConfiguration<?> getServerEndpointConfiguration(
+    public ServerEndpointConfiguration getServerEndpointConfiguration(
             String servletPath, String pathInfo) {
-        ServerEndpointConfiguration<?> sec = configMap.get(servletPath);
+        ServerEndpointConfiguration sec = configMap.get(servletPath);
         if (sec != null) {
             return sec;
         }
@@ -158,7 +157,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
         if (pojo != null) {
             PojoMethodMapping mapping = pojoMethodMap.get(pojo);
             if (mapping != null) {
-                PojoServerEndpointConfiguration pojoSec = new PojoServerEndpointConfiguration(
+                PojoEndpointConfiguration pojoSec = new PojoEndpointConfiguration(
                         pojo, mapping, servletPath, pathInfo);
                 return pojoSec;
             }

==================================================
WsEndpointPojo.java
similarity index 79%
rename from java/org/apache/tomcat/websocket/ClientContainerImpl.java
rename to java/org/apache/tomcat/websocket/WebSocketContainerImpl.java
index dd11b73401..e377d647bc 100644
--- a/java/org/apache/tomcat/websocket/ClientContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/WebSocketContainerImpl.java
@@ -19,16 +19,17 @@ package org.apache.tomcat.websocket;
 import java.net.URI;
 import java.util.Set;
 
-import javax.websocket.ClientContainer;
 import javax.websocket.ClientEndpointConfiguration;
 import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
+import javax.websocket.Extension;
 import javax.websocket.Session;
+import javax.websocket.WebSocketContainer;
 
-public class ClientContainerImpl implements ClientContainer {
+public class WebSocketContainerImpl implements WebSocketContainer {
 
     @Override
-    public Session connectToServer(Object endpoint, URI path)
+    public Session connectToServer(Class<?> annotatedEndpointClass, URI path)
             throws DeploymentException {
         // TODO Auto-generated method stub
         return null;
@@ -36,7 +37,7 @@ public class ClientContainerImpl implements ClientContainer {
 
 
     @Override
-    public Session connectToServer(Endpoint endpoint,
+    public Session connectToServer(Class<? extends Endpoint> endpoint,
             ClientEndpointConfiguration clientEndpointConfiguration, URI path)
             throws DeploymentException {
         // TODO Auto-generated method stub
@@ -91,8 +92,22 @@ public class ClientContainerImpl implements ClientContainer {
 
 
     @Override
-    public Set<String> getInstalledExtensions() {
+    public Set<Extension> getInstalledExtensions() {
         // TODO Auto-generated method stub
         return null;
     }
+
+
+    @Override
+    public long getDefaultAsyncSendTimeout() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+
+    @Override
+    public void setAsyncSendTimeout(long timeout) {
+        // TODO Auto-generated method stub
+
+    }
 }

==================================================
WsProtocolHandler.java
index f6a1a96f14..60c127167b 100644
--- a/java/org/apache/tomcat/websocket/WsEndpointPojo.java
+++ b/java/org/apache/tomcat/websocket/WsEndpointPojo.java
@@ -21,35 +21,32 @@ import java.lang.reflect.InvocationTargetException;
 
 import javax.websocket.CloseReason;
 import javax.websocket.Endpoint;
+import javax.websocket.EndpointConfiguration;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
 
 /**
  * Wrapper class for instances of POJOs annotated with
- * {@link javax.websocket.WebSocketEndpoint} so they appear as standard
+ * {@link javax.websocket.server.WebSocketEndpoint} so they appear as standard
  * {@link Endpoint} instances.
  */
 public class WsEndpointPojo extends Endpoint {
 
-    private final Object pojo;
-    private final String pathInfo;
-    private final PojoMethodMapping methodMapping;
-    private Session session = null;
+    private Object pojo;
+    private String pathInfo;
+    private PojoMethodMapping methodMapping;
 
 
-    public WsEndpointPojo(Class<?> clazzPojo, PojoMethodMapping methodMapping,
-            String pathInfo) throws InstantiationException,
-            IllegalAccessException {
-        // TODO Use factory from annotation if present
-        this.pojo = clazzPojo.newInstance();
-        this.methodMapping = methodMapping;
-        this.pathInfo = pathInfo;
-    }
+    @Override
+    public void onOpen(Session session,
+            EndpointConfiguration endpointConfiguration) {
+        PojoEndpointConfiguration pec =
+                (PojoEndpointConfiguration) endpointConfiguration;
 
+        pojo = pec.getPojo();
+        pathInfo = pec.getPathInfo();
+        methodMapping = pec.getMethodMapping();
 
-    @Override
-    public void onOpen(Session session) {
-        this.session = session;
         if (methodMapping.getOnOpen() != null) {
             try {
                 methodMapping.getOnOpen().invoke(pojo,
@@ -68,7 +65,7 @@ public class WsEndpointPojo extends Endpoint {
 
 
     @Override
-    public void onClose(CloseReason closeReason) {
+    public void onClose(Session session, CloseReason closeReason) {
         if (methodMapping.getOnClose() == null) {
             // If the POJO doesn't handle the close, close the connection
             try {
@@ -91,7 +88,7 @@ public class WsEndpointPojo extends Endpoint {
 
 
     @Override
-    public void onError(Throwable throwable) {
+    public void onError(Session session, Throwable throwable) {
         if (methodMapping.getOnError() != null) {
             try {
                 methodMapping.getOnError().invoke(

==================================================
WsRemoteEndpoint.java
index 518df9bf72..d1b008db28 100644
--- a/java/org/apache/tomcat/websocket/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/WsProtocolHandler.java
@@ -28,6 +28,7 @@ import javax.servlet.http.WebConnection;
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.Endpoint;
+import javax.websocket.EndpointConfiguration;
 
 /**
  * Servlet 3.1 HTTP upgrade handler for WebSocket connections.
@@ -35,12 +36,14 @@ import javax.websocket.Endpoint;
 public class WsProtocolHandler implements ProtocolHandler {
 
     private final Endpoint ep;
+    private final EndpointConfiguration endpointConfig;
     private final ClassLoader applicationClassLoader;
     private final WsSession wsSession;
 
 
-    public WsProtocolHandler(Endpoint ep) {
+    public WsProtocolHandler(Endpoint ep, EndpointConfiguration endpointConfig) {
         this.ep = ep;
+        this.endpointConfig = endpointConfig;
         applicationClassLoader = Thread.currentThread().getContextClassLoader();
         wsSession = new WsSession(ep);
     }
@@ -68,7 +71,7 @@ public class WsProtocolHandler implements ProtocolHandler {
         ClassLoader cl = t.getContextClassLoader();
         t.setContextClassLoader(applicationClassLoader);
         try {
-            ep.onOpen(wsSession);
+            ep.onOpen(wsSession, endpointConfig);
         } finally {
             t.setContextClassLoader(cl);
         }
@@ -81,7 +84,7 @@ public class WsProtocolHandler implements ProtocolHandler {
         ClassLoader cl = t.getContextClassLoader();
         t.setContextClassLoader(applicationClassLoader);
         try {
-            ep.onError(throwable);
+            ep.onError(wsSession, throwable);
         } finally {
             t.setContextClassLoader(cl);
         }

==================================================
WsSci.java
index 08ae2023eb..8c86741764 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpoint.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpoint.java
@@ -269,13 +269,48 @@ public class WsRemoteEndpoint implements RemoteEndpoint {
             try {
                 writeBarrier.await();
             } catch (InterruptedException | BrokenBarrierException e) {
-                wsSession.getLocalEndpoint().onError(e);
+                wsSession.getLocalEndpoint().onError(wsSession, e);
             }
         }
         try {
             sos.write(data.array(), data.arrayOffset(), data.limit());
         } catch (IOException e) {
-            wsSession.getLocalEndpoint().onError(e);
+            wsSession.getLocalEndpoint().onError(wsSession, e);
         }
     }
+
+
+    @Override
+    public void setBatchingAllowed(boolean batchingAllowed) {
+        // TODO Auto-generated method stub
+
+    }
+
+
+    @Override
+    public boolean getBatchingAllowed() {
+        // TODO Auto-generated method stub
+        return false;
+    }
+
+
+    @Override
+    public void flushBatch() {
+        // TODO Auto-generated method stub
+
+    }
+
+
+    @Override
+    public long getAsyncSendTimeout() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+
+    @Override
+    public void setAsyncSendTimeout(long timeout) {
+        // TODO Auto-generated method stub
+
+    }
 }

==================================================
WsServlet.java
index da4176b982..29b6a70dc7 100644
--- a/java/org/apache/tomcat/websocket/WsSci.java
+++ b/java/org/apache/tomcat/websocket/WsSci.java
@@ -22,7 +22,7 @@ import javax.servlet.ServletContainerInitializer;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.annotation.HandlesTypes;
-import javax.websocket.WebSocketEndpoint;
+import javax.websocket.server.WebSocketEndpoint;
 
 /**
  * Registers an interest in any class that is annotated with

==================================================
WsSession.java
index 28da2d5a14..fb738779d7 100644
--- a/java/org/apache/tomcat/websocket/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/WsServlet.java
@@ -34,7 +34,8 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.ProtocolHandler;
 import javax.websocket.Endpoint;
-import javax.websocket.ServerEndpointConfiguration;
+import javax.websocket.Extension;
+import javax.websocket.server.ServerEndpointConfiguration;
 import javax.xml.bind.DatatypeConverter;
 
 /**
@@ -57,7 +58,7 @@ public class WsServlet extends HttpServlet {
         // Information required to send the server handshake message
         String key;
         String subProtocol = null;
-        List<String> extensions = Collections.emptyList();
+        List<Extension> extensions = Collections.emptyList();
         if (!headerContainsToken(req, "upgrade", "websocket")) {
             resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
             return;
@@ -78,7 +79,7 @@ public class WsServlet extends HttpServlet {
         }
         // Need an Endpoint instance to progress this further
         ServerContainerImpl cp = ServerContainerImpl.getServerContainer();
-        ServerEndpointConfiguration<?> sec = cp.getServerEndpointConfiguration(
+        ServerEndpointConfiguration sec = cp.getServerEndpointConfiguration(
                 req.getServletPath(), req.getPathInfo());
         // Origin check
         String origin = req.getHeader("Origin");
@@ -95,8 +96,9 @@ public class WsServlet extends HttpServlet {
         // Extensions
         List<String> requestedExtensions = getTokensFromHeader(req,
                 "Sec-WebSocket-Extensions");
-        if (!extensions.isEmpty()) {
-            extensions = sec.getNegotiatedExtensions(requestedExtensions);
+        if (!requestedExtensions.isEmpty()) {
+            // TODO
+            // extensions = sec.getNegotiatedExtensions(requestedExtensions);
         }
         // If we got this far, all is good. Accept the connection.
         resp.setHeader("Upgrade", "websocket");
@@ -107,17 +109,22 @@ public class WsServlet extends HttpServlet {
         }
         if (!extensions.isEmpty()) {
             StringBuilder sb = new StringBuilder();
-            Iterator<String> iter = extensions.iterator();
+            Iterator<Extension> iter = extensions.iterator();
             // There must be at least one
             sb.append(iter.next());
             while (iter.hasNext()) {
                 sb.append(',');
-                sb.append(iter.next());
+                sb.append(iter.next().getName());
             }
             resp.setHeader("Sec-WebSocket-Extensions", sb.toString());
         }
-        Endpoint ep = (Endpoint) sec.getEndpointFactory().createEndpoint();
-        ProtocolHandler wsHandler = new WsProtocolHandler(ep);
+        Endpoint ep;
+        try {
+            ep = sec.getEndpointClass().newInstance();
+        } catch (InstantiationException | IllegalAccessException e) {
+            throw new ServletException(e);
+        }
+        ProtocolHandler wsHandler = new WsProtocolHandler(ep, sec);
         req.upgrade(wsHandler);
     }
 

==================================================
