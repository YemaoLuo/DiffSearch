e1b3882ee74368e5d4e7fd90679e009280cdd69b
==================================================
Remove use of all static Assert.* imports
==================================================
Mark Thomas
==================================================
Mon Nov 13 10:49:13 2017 +0000
==================================================
ShouldForceReconnectTest.java
Remove use of all static Assert.* imports
- fixes Gump errors with latest Checkstyle
- doesn't introduce errors for older Checkstyle
- makes unit tests consistent mwith use of Assert

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815079 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BorrowWaitTest.java
index 63cf8cc999..db2865ac77 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/ShouldForceReconnectTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/ShouldForceReconnectTest.java
@@ -16,10 +16,8 @@
  */
 package org.apache.tomcat.jdbc.pool;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -59,74 +57,74 @@ public class ShouldForceReconnectTest {
 
         //connection previously connect with default
         configureDefault(con);
-        assertFalse(con.shouldForceReconnect(null, null));
+        Assert.assertFalse(con.shouldForceReconnect(null, null));
 
         configureDefault(con);
-        assertFalse(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
 
         configureDefault(con);
-        assertFalse(con.shouldForceReconnect(null,DEFAULT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(null,DEFAULT_PASSWD));
 
         configureDefault(con);
-        assertFalse(con.shouldForceReconnect(DEFAULT_USER, null));
+        Assert.assertFalse(con.shouldForceReconnect(DEFAULT_USER, null));
 
         configureDefault(con);
-        assertTrue(con.shouldForceReconnect(ALT_USER,ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER,ALT_PASSWD));
 
         configureDefault(con);
-        assertTrue(con.shouldForceReconnect(null,ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(null,ALT_PASSWD));
 
         configureDefault(con);
-        assertTrue(con.shouldForceReconnect(ALT_USER,null));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER,null));
 
         //connection previously connect with alternate
         configureAlt(con);
-        assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(null, null));
+        Assert.assertTrue(con.shouldForceReconnect(null, null));
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(null, DEFAULT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(null, DEFAULT_PASSWD));
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(DEFAULT_USER, null));
+        Assert.assertTrue(con.shouldForceReconnect(DEFAULT_USER, null));
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(null,ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(null,ALT_PASSWD));
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(ALT_USER,null));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER,null));
 
         //test changes in username password
         configureDefault(con);
-        assertFalse(con.shouldForceReconnect(null, null));
-        assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertTrue(con.shouldForceReconnect(null, null));
+        Assert.assertFalse(con.shouldForceReconnect(null, null));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(null, null));
 
         configureDefault(con);
-        assertFalse(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
-        assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
 
         configureAlt(con);
-        assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
-        assertFalse(con.shouldForceReconnect(null, null));
-        assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(null, null));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
 
 
         configureAlt(con);
-        assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
-        assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
+        Assert.assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
 
     }
 

==================================================
StarvationTest.java
index c25e9f5365..98851eeffe 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/BorrowWaitTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/BorrowWaitTest.java
@@ -57,11 +57,11 @@ public class BorrowWaitTest extends DefaultTestCase {
         long start = System.currentTimeMillis();
         try {
             Connection con2 = datasource.getConnection();
-            assertFalse("This should not happen, connection should be unavailable.",true);
+            Assert.assertFalse("This should not happen, connection should be unavailable.",true);
         }catch (SQLException x) {
             long delta = System.currentTimeMillis();
             boolean inrange = Math.abs(wait-delta) < 1000;
-            assertTrue("Connection should have been acquired within +/- 1 second.",true);
+            Assert.assertTrue("Connection should have been acquired within +/- 1 second.",true);
         }
         con.close();
         */

==================================================
TestJdbcInterceptorConfigParsing.java
index 470e190aeb..0c1a667eed 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/StarvationTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/StarvationTest.java
@@ -54,11 +54,11 @@ public class StarvationTest extends DefaultTestCase {
 //            try {
 //                con2.setCatalog("mysql");//make sure connection is valid
 //            }catch (SQLException x) {
-//                assertFalse("2nd Connection is not valid:"+x.getMessage(),true);
+//                Assert.assertFalse("2nd Connection is not valid:"+x.getMessage(),true);
 //            }
-//            assertTrue("Connection 1 should be closed.",con1.isClosed()); //first connection should be closed
+//            Assert.assertTrue("Connection 1 should be closed.",con1.isClosed()); //first connection should be closed
 //        }catch (Exception x) {
-//            assertFalse("Connection got starved:"+x.getMessage(),true);
+//            Assert.assertFalse("Connection got starved:"+x.getMessage(),true);
 //        }finally {
 //            if (con2!=null) con2.close();
 //        }

==================================================
TestCompositeELResolver.java
index f09ad5c2d4..71268bd438 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestJdbcInterceptorConfigParsing.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestJdbcInterceptorConfigParsing.java
@@ -18,10 +18,7 @@ package org.apache.tomcat.jdbc.test;
 
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.tomcat.jdbc.pool.PoolProperties;
@@ -42,24 +39,24 @@ public class TestJdbcInterceptorConfigParsing {
         PoolProperties props = new PoolProperties();
         props.setJdbcInterceptors(interceptorConfig);
         InterceptorDefinition[] interceptorDefs = props.getJdbcInterceptorsAsArray();
-        assertNotNull(interceptorDefs);
+        Assert.assertNotNull(interceptorDefs);
 
         // 3 items because parser automatically inserts TrapException interceptor to front of list
-        assertEquals(interceptorDefs.length, 3);
-        assertEquals(interceptorDefs[0].getClassName(), TrapException.class.getName());
+        Assert.assertEquals(interceptorDefs.length, 3);
+        Assert.assertEquals(interceptorDefs[0].getClassName(), TrapException.class.getName());
 
-        assertNotNull(interceptorDefs[1]);
-        assertEquals(interceptorDefs[1].getClassName(), "FirstInterceptor");
-        assertNotNull(interceptorDefs[2]);
-        assertEquals(interceptorDefs[2].getClassName(), "SecondInterceptor");
+        Assert.assertNotNull(interceptorDefs[1]);
+        Assert.assertEquals(interceptorDefs[1].getClassName(), "FirstInterceptor");
+        Assert.assertNotNull(interceptorDefs[2]);
+        Assert.assertEquals(interceptorDefs[2].getClassName(), "SecondInterceptor");
 
         Map<String, InterceptorProperty> secondProps = interceptorDefs[2].getProperties();
-        assertNotNull(secondProps);
-        assertEquals(secondProps.size(), 2);
-        assertNotNull(secondProps.get("parm1"));
-        assertEquals(secondProps.get("parm1").getValue(), "value1");
-        assertNotNull(secondProps.get("parm2"));
-        assertEquals(secondProps.get("parm2").getValue(), "value2");
+        Assert.assertNotNull(secondProps);
+        Assert.assertEquals(secondProps.size(), 2);
+        Assert.assertNotNull(secondProps.get("parm1"));
+        Assert.assertEquals(secondProps.get("parm1").getValue(), "value1");
+        Assert.assertNotNull(secondProps.get("parm2"));
+        Assert.assertEquals(secondProps.get("parm2").getValue(), "value2");
     }
 
     @Test
@@ -71,38 +68,38 @@ public class TestJdbcInterceptorConfigParsing {
         PoolProperties props = new PoolProperties();
         props.setJdbcInterceptors(interceptorConfig);
         InterceptorDefinition[] interceptorDefs = props.getJdbcInterceptorsAsArray();
-        assertNotNull(interceptorDefs);
+        Assert.assertNotNull(interceptorDefs);
 
         // 5 items because parser automatically inserts TrapException interceptor to front of list
-        assertEquals(interceptorDefs.length, 5);
-        assertEquals(interceptorDefs[0].getClassName(), TrapException.class.getName());
+        Assert.assertEquals(interceptorDefs.length, 5);
+        Assert.assertEquals(interceptorDefs[0].getClassName(), TrapException.class.getName());
 
-        assertNotNull(interceptorDefs[1]);
-        assertEquals(interceptorDefs[1].getClassName(), "FirstInterceptor");
-        assertNotNull(interceptorDefs[2]);
-        assertEquals(interceptorDefs[2].getClassName(), "SecondInterceptor");
-        assertNotNull(interceptorDefs[3]);
-        assertEquals(interceptorDefs[3].getClassName(), "org.cyb.ThirdInterceptor");
+        Assert.assertNotNull(interceptorDefs[1]);
+        Assert.assertEquals(interceptorDefs[1].getClassName(), "FirstInterceptor");
+        Assert.assertNotNull(interceptorDefs[2]);
+        Assert.assertEquals(interceptorDefs[2].getClassName(), "SecondInterceptor");
+        Assert.assertNotNull(interceptorDefs[3]);
+        Assert.assertEquals(interceptorDefs[3].getClassName(), "org.cyb.ThirdInterceptor");
 
         Map<String, InterceptorProperty> secondProps = interceptorDefs[2].getProperties();
-        assertNotNull(secondProps);
-        assertEquals(secondProps.size(), 2);
-        assertNotNull(secondProps.get("parm1"));
-        assertEquals(secondProps.get("parm1").getValue(), "value1");
-        assertNotNull(secondProps.get("parm2"));
-        assertEquals(secondProps.get("parm2").getValue(), "value2"); // Bug 54395
+        Assert.assertNotNull(secondProps);
+        Assert.assertEquals(secondProps.size(), 2);
+        Assert.assertNotNull(secondProps.get("parm1"));
+        Assert.assertEquals(secondProps.get("parm1").getValue(), "value1");
+        Assert.assertNotNull(secondProps.get("parm2"));
+        Assert.assertEquals(secondProps.get("parm2").getValue(), "value2"); // Bug 54395
 
         Map<String, InterceptorProperty> thirdProps = interceptorDefs[3].getProperties();
-        assertNotNull(thirdProps);
-        assertEquals(thirdProps.size(), 1);
-        assertNotNull(thirdProps.get("parm1"));
-        assertEquals(thirdProps.get("parm1").getValue(), "value1");
+        Assert.assertNotNull(thirdProps);
+        Assert.assertEquals(thirdProps.size(), 1);
+        Assert.assertNotNull(thirdProps.get("parm1"));
+        Assert.assertEquals(thirdProps.get("parm1").getValue(), "value1");
 
         Map<String, InterceptorProperty> emptyParmValProps = interceptorDefs[4].getProperties();
-        assertNotNull(emptyParmValProps);
-        assertEquals(emptyParmValProps.size(), 1);
-        assertNotNull(emptyParmValProps.get("parm1"));
-        assertEquals(emptyParmValProps.get("parm1").getValue(), "");
+        Assert.assertNotNull(emptyParmValProps);
+        Assert.assertEquals(emptyParmValProps.size(), 1);
+        Assert.assertNotNull(emptyParmValProps.get("parm1"));
+        Assert.assertEquals(emptyParmValProps.get("parm1").getValue(), "");
     }
 
     /*
@@ -124,7 +121,7 @@ public class TestJdbcInterceptorConfigParsing {
             props.setJdbcInterceptors(badConfig);
             try {
                 props.getJdbcInterceptorsAsArray();
-                fail("Expected exception.");
+                Assert.fail("Expected exception.");
             } catch (Exception e) {
                 // Expected
             }
@@ -145,7 +142,7 @@ public class TestJdbcInterceptorConfigParsing {
             try {
                 props.getJdbcInterceptorsAsArray();
             } catch (Exception e) {
-                fail("Unexpected exception.");
+                Assert.fail("Unexpected exception.");
             }
         }
     }
@@ -157,21 +154,21 @@ public class TestJdbcInterceptorConfigParsing {
         PoolProperties props = new PoolProperties();
         props.setJdbcInterceptors(";EmptyLeadingSemiInterceptor");
         InterceptorDefinition[] jiDefs = props.getJdbcInterceptorsAsArray();
-        assertNotNull(jiDefs);
-        assertEquals(jiDefs.length, 3);
+        Assert.assertNotNull(jiDefs);
+        Assert.assertEquals(jiDefs.length, 3);
 
         // This one does NOT get an extra/empty definition (no trailing whitespace)
         props = new PoolProperties();
         props.setJdbcInterceptors("EmptyTrailingSemiInterceptor;");
         jiDefs = props.getJdbcInterceptorsAsArray();
-        assertNotNull(jiDefs);
-        assertEquals(jiDefs.length, 2);
+        Assert.assertNotNull(jiDefs);
+        Assert.assertEquals(jiDefs.length, 2);
 
         // This one DOES get an extra/empty definition (with trailing whitespace)
         props = new PoolProperties();
         props.setJdbcInterceptors("EmptyTrailingSemiInterceptor; ");
         jiDefs = props.getJdbcInterceptorsAsArray();
-        assertNotNull(jiDefs);
-        assertEquals(jiDefs.length, 3);
+        Assert.assertNotNull(jiDefs);
+        Assert.assertEquals(jiDefs.length, 3);
     }
 }
\ No newline at end of file

==================================================
TestPageContext.java
index 6a06be680b..a4485ff589 100644
--- a/test/javax/el/TestCompositeELResolver.java
+++ b/test/javax/el/TestCompositeELResolver.java
@@ -18,8 +18,7 @@ package javax.el;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -34,6 +33,6 @@ public class TestCompositeELResolver extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug5nnnn/bug50408.jsp", new ByteChunk(), null);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
     }
 }

==================================================
TestDeployTask.java
index f229c509d5..433f72d940 100644
--- a/test/javax/servlet/jsp/TestPageContext.java
+++ b/test/javax/servlet/jsp/TestPageContext.java
@@ -16,8 +16,7 @@
  */
 package javax.servlet.jsp;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -33,6 +32,6 @@ public class TestPageContext extends TomcatBaseTest {
                 "/test/bug49nnn/bug49196.jsp");
 
         String result = res.toString();
-        assertTrue(result.contains("OK"));
+        Assert.assertTrue(result.contains("OK"));
     }
 }

==================================================
TestDigestAuthenticator.java
index dfb31a452a..8fc3ed2daf 100644
--- a/test/org/apache/catalina/ant/TestDeployTask.java
+++ b/test/org/apache/catalina/ant/TestDeployTask.java
@@ -20,8 +20,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.Tomcat;
@@ -37,8 +36,8 @@ public class TestDeployTask extends TomcatBaseTest {
             @Override
             public void execute(String command, InputStream istream, String contentType, long contentLength)
                     throws BuildException {
-                assertEquals("/deploy?path=somepath", command);
-                assertEquals("application/octet-stream", contentType);
+                Assert.assertEquals("/deploy?path=somepath", command);
+                Assert.assertEquals("application/octet-stream", contentType);
                 try {
                     istream.close();
                 } catch (IOException e) {
@@ -89,8 +88,8 @@ public class TestDeployTask extends TomcatBaseTest {
             @Override
             public void execute(String command, InputStream istream, String contentType, long contentLength)
                     throws BuildException {
-                assertEquals("/deploy?path=somepath", command);
-                assertEquals("application/octet-stream", contentType);
+                Assert.assertEquals("/deploy?path=somepath", command);
+                Assert.assertEquals("application/octet-stream", contentType);
                 try {
                     istream.close();
                 } catch (IOException e) {

==================================================
TestFormAuthenticator.java
index 033bf0ace1..d558757198 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -23,9 +23,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -216,8 +213,8 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + uri, bc, reqHeaders,
                 respHeaders);
-        assertEquals(401, rc);
-        assertTrue(bc.getLength() > 0);
+        Assert.assertEquals(401, rc);
+        Assert.assertTrue(bc.getLength() > 0);
         bc.recycle();
 
         // Second request should succeed (if we use the server nonce)
@@ -239,11 +236,11 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
                 null);
 
         if (req2expect200) {
-            assertEquals(200, rc);
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
         } else {
-            assertEquals(401, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(401, rc);
+            Assert.assertTrue(bc.getLength() > 0);
         }
 
         // Third request should succeed if we increment nc
@@ -256,11 +253,11 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
                 null);
 
         if (req3expect200) {
-            assertEquals(200, rc);
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
         } else {
-            assertEquals(401, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(401, rc);
+            Assert.assertTrue(bc.getLength() > 0);
         }
     }
 

==================================================
TestNonLoginAndBasicAuthenticator.java
index bf2df0113e..792d99544a 100644
--- a/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
@@ -26,10 +26,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -271,28 +268,28 @@ public class TestFormAuthenticator extends TomcatBaseTest {
         client.doResourceRequest("PUT", true, "/test?" +
                 SelectedMethodsServlet.PARAM + "=" +
                 SelectedMethodsServlet.VALUE, null);
-        assertTrue(client.getResponseLine(), client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.getResponseLine(), client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
         String originalSessionId = client.getSessionId();
         client.reset();
 
         // Second request replies to the login challenge
         client.doResourceRequest("POST", true, "/test/j_security_check",
                 FormAuthClientBase.LOGIN_REPLY);
-        assertTrue("login failed " + client.getResponseLine(),
+        Assert.assertTrue("login failed " + client.getResponseLine(),
                 client.isResponse303());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponseBodyOK());
         String redirectUri = client.getRedirectUri();
         client.reset();
 
         // Third request - the login was successful so
         // follow the redirect to the protected resource
         client.doResourceRequest("GET", true, redirectUri, null);
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
         String newSessionId = client.getSessionId();
 
-        assertTrue(!originalSessionId.equals(newSessionId));
+        Assert.assertTrue(!originalSessionId.equals(newSessionId));
         client.reset();
     }
 
@@ -333,8 +330,8 @@ public class TestFormAuthenticator extends TomcatBaseTest {
         // First request for protected resource gets the login page
         client.setUseContinue(useContinue);
         client.doResourceRequest(resourceMethod, false, null, null);
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
         String loginUri = client.extractBodyUri(
                 FormAuthClient.LOGIN_PARAM_TAG,
                 FormAuthClient.LOGIN_RESOURCE);
@@ -351,13 +348,13 @@ public class TestFormAuthenticator extends TomcatBaseTest {
         client.setUseContinue(useContinue);
         client.doLoginRequest(loginUri);
         if (clientShouldUseHttp11) {
-            assertTrue("login failed " + client.getResponseLine(),
+            Assert.assertTrue("login failed " + client.getResponseLine(),
                     client.isResponse303());
         } else {
-            assertTrue("login failed " + client.getResponseLine(),
+            Assert.assertTrue("login failed " + client.getResponseLine(),
                     client.isResponse302());
         }
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponseBodyOK());
         String redirectUri = client.getRedirectUri();
         client.reset();
 
@@ -367,8 +364,8 @@ public class TestFormAuthenticator extends TomcatBaseTest {
         if ("POST".equals(redirectMethod)) {
             client.setUseContinue(useContinue);
         }
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
         String protectedUri = client.extractBodyUri(
                 FormAuthClient.RESOURCE_PARAM_TAG,
                 FormAuthClient.PROTECTED_RESOURCE);
@@ -380,7 +377,7 @@ public class TestFormAuthenticator extends TomcatBaseTest {
             newSessionId = client.extractPathSessionId(protectedUri);
         }
         boolean sessionIdIsChanged = !(originalSessionId.equals(newSessionId));
-        assertTrue(sessionIdIsChanged == serverWillChangeSessid);
+        Assert.assertTrue(sessionIdIsChanged == serverWillChangeSessid);
         client.reset();
 
         // Subsequent requests - keep accessing the protected resource
@@ -413,8 +410,8 @@ public class TestFormAuthenticator extends TomcatBaseTest {
         for (int i = 0; i < repeatCount; i++) {
             client.setUseContinue(useContinue);
             client.doResourceRequest(resourceMethod, false, protectedUri, null);
-            assertTrue(client.isResponse200());
-            assertTrue(client.isResponseBodyOK(phase));
+            Assert.assertTrue(client.isResponse200());
+            Assert.assertTrue(client.isResponseBodyOK(phase));
             client.reset();
         }
     }
@@ -627,7 +624,7 @@ public class TestFormAuthenticator extends TomcatBaseTest {
 
         private void assertContains(String body, String expected) {
             if (!body.contains(expected)) {
-                fail("Response number " + requestCount
+                Assert.fail("Response number " + requestCount
                         + ": body check failure.\n"
                         + "Expected to contain substring: [" + expected
                         + "]\nActual: [" + body + "]");
@@ -754,8 +751,8 @@ public class TestFormAuthenticator extends TomcatBaseTest {
             if (isResponse303()) {
                 return true;
             }
-            assertTrue(getResponseBody(), getResponseBody().contains("OK"));
-            assertFalse(getResponseBody().contains("FAIL"));
+            Assert.assertTrue(getResponseBody(), getResponseBody().contains("OK"));
+            Assert.assertFalse(getResponseBody().contains("FAIL"));
             return true;
         }
     }

==================================================
TestSSOnonLoginAndBasicAuthenticator.java
index 2798003f8a..d1b9077434 100644
--- a/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
@@ -24,9 +24,7 @@ import java.util.Map;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -307,7 +305,7 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
 
         // slightly paranoid verification
         boolean sameCookies = originalCookies.equals(cookies);
-        assertTrue(!sameCookies);
+        Assert.assertTrue(!sameCookies);
     }
 
     /*
@@ -369,11 +367,11 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
                 respHeaders);
 
         if (expectedRC != HttpServletResponse.SC_OK) {
-            assertEquals(expectedRC, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(expectedRC, rc);
+            Assert.assertTrue(bc.getLength() > 0);
         }
         else {
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals("OK", bc.toString());
         }
     }
 
@@ -399,8 +397,8 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
                 respHeaders);
 
         if (expectedRC != HttpServletResponse.SC_OK) {
-            assertEquals(expectedRC, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(expectedRC, rc);
+            Assert.assertTrue(bc.getLength() > 0);
             if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {
                 // The server should identify the acceptable method(s)
                 boolean methodFound = false;
@@ -411,11 +409,11 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
                         break;
                     }
                 }
-                assertTrue(methodFound);
+                Assert.assertTrue(methodFound);
             }
         }
         else {
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals("OK", bc.toString());
             List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);
             if (newCookies != null) {
                 // harvest cookies whenever the server sends some new ones

==================================================
TestSSOnonLoginAndDigestAuthenticator.java
index baba2f09bb..eaeeee0ab0 100644
--- a/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
@@ -24,11 +24,7 @@ import java.util.Map;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -269,7 +265,7 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
 
         // verify the sessionID was encoded in the absolute URL
         String firstEncodedURL = encodedURL;
-        assertTrue(firstEncodedURL.contains(ENCODE_SESSION_PARAM));
+        Assert.assertTrue(firstEncodedURL.contains(ENCODE_SESSION_PARAM));
 
         // access the protected resource with the encoded url (with session id)
         doTestBasic(firstEncodedURL + forwardParam,
@@ -279,8 +275,8 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         // verify the sessionID has not changed
         // verify the SSO sessionID was not encoded
         String secondEncodedURL = encodedURL;
-        assertEquals(firstEncodedURL, secondEncodedURL);
-        assertFalse(firstEncodedURL.contains(ENCODE_SSOSESSION_PARAM));
+        Assert.assertEquals(firstEncodedURL, secondEncodedURL);
+        Assert.assertFalse(firstEncodedURL.contains(ENCODE_SSOSESSION_PARAM));
 
         // extract the first container's session ID
         int ix = secondEncodedURL.indexOf(ENCODE_SESSION_PARAM);
@@ -363,11 +359,11 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
                 respHeaders);
 
         if (expectedRC != HttpServletResponse.SC_OK) {
-            assertEquals(expectedRC, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(expectedRC, rc);
+            Assert.assertTrue(bc.getLength() > 0);
         }
         else {
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals("OK", bc.toString());
         }
 }
 
@@ -393,9 +389,9 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders,
                 respHeaders);
 
-        assertEquals("Unexpected Return Code", expectedRC, rc);
+        Assert.assertEquals("Unexpected Return Code", expectedRC, rc);
         if (expectedRC != HttpServletResponse.SC_OK) {
-            assertTrue(bc.getLength() > 0);
+            Assert.assertTrue(bc.getLength() > 0);
             if (expectedRC == HttpServletResponse.SC_UNAUTHORIZED) {
                 // The server should identify the acceptable method(s)
                 boolean methodFound = false;
@@ -406,13 +402,13 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
                         break;
                     }
                 }
-                assertTrue(methodFound);
+                Assert.assertTrue(methodFound);
             }
         }
         else {
             String thePage = bc.toString();
-            assertNotNull(thePage);
-            assertTrue(thePage.startsWith("OK"));
+            Assert.assertNotNull(thePage);
+            Assert.assertTrue(thePage.startsWith("OK"));
             if (useCookie) {
                 List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);
                 if (newCookies != null) {
@@ -640,7 +636,7 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         }
 
         sessions = manager.findSessions();
-        assertTrue(sessions.length == 0);
+        Assert.assertTrue(sessions.length == 0);
     }
 
     /*

==================================================
TesterDigestAuthenticatorPerformance.java
index 775321c10f..dafc71bd83 100644
--- a/test/org/apache/catalina/authenticator/TestSSOnonLoginAndDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestSSOnonLoginAndDigestAuthenticator.java
@@ -21,9 +21,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -215,12 +213,12 @@ public class TestSSOnonLoginAndDigestAuthenticator extends TomcatBaseTest {
                 respHeaders);
 
         if (expectedReject) {
-            assertEquals(expectedRC, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(expectedRC, rc);
+            Assert.assertTrue(bc.getLength() > 0);
         }
         else {
-            assertEquals(200, rc);
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
             saveCookies(respHeaders);
         }
 }
@@ -248,12 +246,12 @@ public class TestSSOnonLoginAndDigestAuthenticator extends TomcatBaseTest {
                 respHeaders1);
 
         if (expectedReject1) {
-            assertEquals(expectedRC1, rc);
-            assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(expectedRC1, rc);
+            Assert.assertTrue(bc.getLength() > 0);
         }
         else {
-            assertEquals(200, rc);
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
             saveCookies(respHeaders1);
             return;
         }
@@ -289,12 +287,12 @@ public class TestSSOnonLoginAndDigestAuthenticator extends TomcatBaseTest {
                 respHeaders2);
 
         if (req2expect200) {
-            assertEquals(200, rc);
-            assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
             saveCookies(respHeaders2);
         } else {
-            assertEquals(401, rc);
-            assertTrue((bc.getLength() > 0));
+            Assert.assertEquals(401, rc);
+            Assert.assertTrue((bc.getLength() > 0));
         }
     }
 

==================================================
TestConnector.java
index ace24445b8..13c3ec6962 100644
--- a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
+++ b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
@@ -21,8 +21,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -105,7 +104,7 @@ public class TesterDigestAuthenticatorPerformance {
         System.out.println("Average time per request (wall): " +
                 wallTime/(threadCount * requestCount));
 
-        assertEquals(requestCount * threadCount, totalSuccess);
+        Assert.assertEquals(requestCount * threadCount, totalSuccess);
     }
 
     @Before

==================================================
TestKeepAliveCount.java
index d722f859d9..60d775d09e 100644
--- a/test/org/apache/catalina/connector/TestConnector.java
+++ b/test/org/apache/catalina/connector/TestConnector.java
@@ -24,9 +24,6 @@ import java.util.Map;
 
 import javax.servlet.Servlet;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -62,8 +59,8 @@ public class TestConnector extends TomcatBaseTest {
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + "/", bc, null, null);
 
-        assertEquals(200, rc);
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals(200, rc);
+        Assert.assertEquals("OK", bc.toString());
 
         rc = -1;
         bc.recycle();
@@ -78,7 +75,7 @@ public class TestConnector extends TomcatBaseTest {
             // Make sure the test passes if we do
             rc = 503;
         }
-        assertEquals(503, rc);
+        Assert.assertEquals(503, rc);
     }
 
 
@@ -99,8 +96,8 @@ public class TestConnector extends TomcatBaseTest {
         int localPort1 = connector1.getLocalPort();
         int localPort2 = connector2.getLocalPort();
 
-        assertTrue(localPort1 > 0);
-        assertTrue(localPort2 > 0);
+        Assert.assertTrue(localPort1 > 0);
+        Assert.assertTrue(localPort2 > 0);
     }
 
 
@@ -204,7 +201,7 @@ public class TestConnector extends TomcatBaseTest {
         int rc = methodUrl("http://localhost:" + getPort() + "/index.html",
                 bc, 30000, null, respHeaders, "OPTIONS");
 
-        assertEquals(200, rc);
+        Assert.assertEquals(200, rc);
 
         boolean foundTrace = false;
         for (String header : respHeaders.get("Allow")) {

==================================================
TestOutputBuffer.java
index 067a5c9762..63ff7388fd 100644
--- a/test/org/apache/catalina/connector/TestKeepAliveCount.java
+++ b/test/org/apache/catalina/connector/TestKeepAliveCount.java
@@ -23,8 +23,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -85,7 +84,7 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             disconnect();
             reset();
             tomcat.stop();
-            assertTrue(passed);
+            Assert.assertTrue(passed);
         }
 
         private void doHttp11Request() throws Exception {
@@ -109,14 +108,14 @@ public class TestKeepAliveCount extends TomcatBaseTest {
 
             for (int i=0; i<5; i++) {
                 processRequest(false); // blocks until response has been read
-                assertTrue(getResponseLine()!=null && getResponseLine().startsWith("HTTP/1.1 200 "));
+                Assert.assertTrue(getResponseLine()!=null && getResponseLine().startsWith("HTTP/1.1 200 "));
             }
             boolean passed = (this.readLine()==null);
             // Close the connection
             disconnect();
             reset();
             tomcat.stop();
-            assertTrue(passed);
+            Assert.assertTrue(passed);
         }
 
         @Override

==================================================
TestRequest.java
index 611ffc75b4..4c04d8d7f2 100644
--- a/test/org/apache/catalina/connector/TestOutputBuffer.java
+++ b/test/org/apache/catalina/connector/TestOutputBuffer.java
@@ -25,7 +25,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -60,16 +60,16 @@ public class TestOutputBuffer extends TomcatBaseTest{
         for (int i = 1; i <= WritingServlet.EXPECTED_CONTENT_LENGTH; i*=10) {
             int rc = getUrl("http://localhost:" + getPort() +
                     "/servlet" + i, bc, null, null);
-            assertEquals(HttpServletResponse.SC_OK, rc);
-            assertEquals(
+            Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+            Assert.assertEquals(
                     WritingServlet.EXPECTED_CONTENT_LENGTH, bc.getLength());
 
             bc.recycle();
 
             rc = getUrl("http://localhost:" + getPort() +
                     "/servlet" + i + "?useBuffer=y", bc, null, null);
-            assertEquals(HttpServletResponse.SC_OK, rc);
-            assertEquals(
+            Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+            Assert.assertEquals(
                     WritingServlet.EXPECTED_CONTENT_LENGTH, bc.getLength());
 
             bc.recycle();
@@ -91,8 +91,8 @@ public class TestOutputBuffer extends TomcatBaseTest{
         ByteChunk bc = new ByteChunk();
 
         int rc = getUrl("http://localhost:" + getPort() + "/", bc, null, null);
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals("OK", bc.toString());
     }
 
     private static class WritingServlet extends HttpServlet {

==================================================
TestResponse.java
index fc15401468..5c6b909678 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -38,11 +38,6 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
@@ -84,41 +79,41 @@ public class TestRequest extends TomcatBaseTest {
 
         // Edge cases around zero
         client.doRequest(-1, false); // Unlimited
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
         client.reset();
         client.doRequest(0, false); // 0 bytes - too small should fail
-        assertTrue(client.isResponse413());
+        Assert.assertTrue(client.isResponse413());
         client.reset();
         client.doRequest(1, false); // 1 byte - too small should fail
-        assertTrue(client.isResponse413());
+        Assert.assertTrue(client.isResponse413());
 
         client.reset();
 
         // Edge cases around actual content length
         client.reset();
         client.doRequest(6, false); // Too small should fail
-        assertTrue(client.isResponse413());
+        Assert.assertTrue(client.isResponse413());
         client.reset();
         client.doRequest(7, false); // Just enough should pass
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
         client.reset();
         client.doRequest(8, false); // 1 extra - should pass
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
 
         // Much larger
         client.reset();
         client.doRequest(8096, false); // Plenty of space - should pass
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
 
         // Check for case insensitivity
         client.reset();
         client.doRequest(8096, true); // Plenty of space - should pass
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
     /**
@@ -133,8 +128,8 @@ public class TestRequest extends TomcatBaseTest {
         client.reset();
         client.doRequest(6, false); // Too small should fail
         // Response code will be OK, but parameters list will be empty
-        assertTrue(client.isResponse200());
-        assertEquals("", client.getResponseBody());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("", client.getResponseBody());
     }
 
     private static class Bug37794Servlet extends HttpServlet {
@@ -288,15 +283,15 @@ public class TestRequest extends TomcatBaseTest {
 
         // No query string
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("QueryString=null", res.toString());
+        Assert.assertEquals("QueryString=null", res.toString());
 
         // Query string
         res = getUrl("http://localhost:" + getPort() + "/?a=b");
-        assertEquals("QueryString=a=b", res.toString());
+        Assert.assertEquals("QueryString=a=b", res.toString());
 
         // Empty string
         res = getUrl("http://localhost:" + getPort() + "/?");
-        assertEquals("QueryString=", res.toString());
+        Assert.assertEquals("QueryString=", res.toString());
     }
 
     private static final class EchoQueryStringServlet extends HttpServlet {
@@ -339,7 +334,7 @@ public class TestRequest extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals(LoginLogoutServlet.OK, res.toString());
+        Assert.assertEquals(LoginLogoutServlet.OK, res.toString());
     }
 
     private static final class LoginLogoutServlet extends HttpServlet {
@@ -382,7 +377,7 @@ public class TestRequest extends TomcatBaseTest {
 
         HttpURLConnection conn = getConnection("http://localhost:" + getPort() + "/");
         InputStream is = conn.getInputStream();
-        assertNotNull(is);
+        Assert.assertNotNull(is);
     }
 
     @Test
@@ -397,7 +392,7 @@ public class TestRequest extends TomcatBaseTest {
         HttpURLConnection conn = getConnection("http://localhost:" + getPort() + "/");
         conn.setChunkedStreamingMode(8 * 1024);
         InputStream is = conn.getInputStream();
-        assertNotNull(is);
+        Assert.assertNotNull(is);
     }
 
     /**
@@ -413,9 +408,9 @@ public class TestRequest extends TomcatBaseTest {
         // Make sure GET works properly
         client.doRequest("GET", "foo=bar", null, null, false);
 
-        assertTrue("Non-200 response for GET request",
+        Assert.assertTrue("Non-200 response for GET request",
                    client.isResponse200());
-        assertEquals("Incorrect response for GET request",
+        Assert.assertEquals("Incorrect response for GET request",
                      "foo=bar",
                      client.getResponseBody());
 
@@ -427,9 +422,9 @@ public class TestRequest extends TomcatBaseTest {
         // POST with separate GET and POST parameters
         client.doRequest("POST", "foo=bar", "application/x-www-form-urlencoded", "bar=baz", true);
 
-        assertTrue("Non-200 response for POST request",
+        Assert.assertTrue("Non-200 response for POST request",
                    client.isResponse200());
-        assertEquals("Incorrect response for POST request",
+        Assert.assertEquals("Incorrect response for POST request",
                      "bar=baz,foo=bar",
                      client.getResponseBody());
 
@@ -438,9 +433,9 @@ public class TestRequest extends TomcatBaseTest {
         // POST with overlapping GET and POST parameters
         client.doRequest("POST", "foo=bar&bar=foo", "application/x-www-form-urlencoded", "bar=baz&foo=baz", true);
 
-        assertTrue("Non-200 response for POST request",
+        Assert.assertTrue("Non-200 response for POST request",
                    client.isResponse200());
-        assertEquals("Incorrect response for POST request",
+        Assert.assertEquals("Incorrect response for POST request",
                      "bar=baz,bar=foo,foo=bar,foo=baz",
                      client.getResponseBody());
 
@@ -449,9 +444,9 @@ public class TestRequest extends TomcatBaseTest {
         // PUT without POST-style parsing
         client.doRequest("PUT", "foo=bar&bar=foo", "application/x-www-form-urlencoded", "bar=baz&foo=baz", false);
 
-        assertTrue("Non-200 response for PUT/noparse request",
+        Assert.assertTrue("Non-200 response for PUT/noparse request",
                    client.isResponse200());
-        assertEquals("Incorrect response for PUT request",
+        Assert.assertEquals("Incorrect response for PUT request",
                      "bar=foo,foo=bar",
                      client.getResponseBody());
 
@@ -460,9 +455,9 @@ public class TestRequest extends TomcatBaseTest {
         // PUT with POST-style parsing
         client.doRequest("PUT", "foo=bar&bar=foo", "application/x-www-form-urlencoded", "bar=baz&foo=baz", true);
 
-        assertTrue("Non-200 response for PUT request",
+        Assert.assertTrue("Non-200 response for PUT request",
                    client.isResponse200());
-        assertEquals("Incorrect response for PUT/parse request",
+        Assert.assertEquals("Incorrect response for PUT/parse request",
                      "bar=baz,bar=foo,foo=bar,foo=baz",
                      client.getResponseBody());
 
@@ -692,10 +687,10 @@ public class TestRequest extends TomcatBaseTest {
                 while ((line = reader.readLine()) != null) {
                     response.add(line);
                 }
-                assertTrue(response.contains("Part äö"));
+                Assert.assertTrue(response.contains("Part äö"));
             }
         } else {
-            fail("OK status was expected: " + status);
+            Assert.fail("OK status was expected: " + status);
         }
     }
 
@@ -843,7 +838,7 @@ public class TestRequest extends TomcatBaseTest {
         if (resultPath == null) {
             resultPath = "";
         }
-        assertEquals(expected, resultPath);
+        Assert.assertEquals(expected, resultPath);
     }
 
     private class Bug56501Servlet extends HttpServlet {
@@ -945,9 +940,9 @@ public class TestRequest extends TomcatBaseTest {
         int rc = postUrl(body, "http://localhost:" + getPort() + "/", bc, reqHeaders, null);
 
         if (expect200) {
-            assertEquals(200, rc);
+            Assert.assertEquals(200, rc);
         } else {
-            assertEquals(500, rc);
+            Assert.assertEquals(500, rc);
         }
     }
 

==================================================
TestSendFile.java
index c3a5f96f70..9e289b2c65 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -29,9 +29,6 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -72,7 +69,7 @@ public class TestResponse extends TomcatBaseTest {
                         values.get(0).startsWith("HTTP/1.1")) {
                     continue;
                 }
-                fail("Null header name detected for value " + values);
+                Assert.fail("Null header name detected for value " + values);
             }
         }
 
@@ -83,7 +80,7 @@ public class TestResponse extends TomcatBaseTest {
                 count ++;
             }
         }
-        assertEquals(1, count);
+        Assert.assertEquals(1, count);
     }
 
     private static final class Bug49598Servlet extends HttpServlet {
@@ -118,7 +115,7 @@ public class TestResponse extends TomcatBaseTest {
 
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
 
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals("OK", bc.toString());
     }
 
     private static final class CharsetServlet extends HttpServlet {
@@ -157,7 +154,7 @@ public class TestResponse extends TomcatBaseTest {
 
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
 
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals("OK", bc.toString());
     }
 
 

==================================================
TestApplicationSessionCookieConfig.java
index f15b6aec58..0301ea48a6 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -36,8 +36,6 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -79,10 +77,10 @@ public class TestSendFile extends TomcatBaseTest {
                 long start = System.currentTimeMillis();
                 int rc = getUrl("http://localhost:" + getPort() + "/servlet" + i, bc, null,
                         respHeaders);
-                assertEquals(HttpServletResponse.SC_OK, rc);
+                Assert.assertEquals(HttpServletResponse.SC_OK, rc);
                 System.out.println("Client received " + bc.getLength() + " bytes in "
                         + (System.currentTimeMillis() - start) + " ms.");
-                assertEquals(EXPECTED_CONTENT_LENGTH * (i + 1), bc.getLength());
+                Assert.assertEquals(EXPECTED_CONTENT_LENGTH * (i + 1), bc.getLength());
 
                 bc.recycle();
             }

==================================================
TestAsyncContextImpl.java
index ef0949851a..2b4e05894b 100644
--- a/test/org/apache/catalina/core/TestApplicationSessionCookieConfig.java
+++ b/test/org/apache/catalina/core/TestApplicationSessionCookieConfig.java
@@ -17,8 +17,7 @@
 
 package org.apache.catalina.core;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -38,7 +37,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetCommentInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setComment("test");
-        assertTrue(applicationSessionCookieConfig.getComment().equals("test"));
+        Assert.assertTrue(applicationSessionCookieConfig.getComment().equals("test"));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -51,7 +50,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetDomainInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setDomain("test");
-        assertTrue(applicationSessionCookieConfig.getDomain().equals("test"));
+        Assert.assertTrue(applicationSessionCookieConfig.getDomain().equals("test"));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -64,7 +63,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetHttpOnlyInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setHttpOnly(true);
-        assertTrue(applicationSessionCookieConfig.isHttpOnly());
+        Assert.assertTrue(applicationSessionCookieConfig.isHttpOnly());
     }
 
     @Test(expected = IllegalStateException.class)
@@ -77,7 +76,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetMaxAgeInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setMaxAge(1);
-        assertTrue(applicationSessionCookieConfig.getMaxAge() == 1);
+        Assert.assertTrue(applicationSessionCookieConfig.getMaxAge() == 1);
     }
 
     @Test(expected = IllegalStateException.class)
@@ -90,7 +89,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetNameInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setName("test");
-        assertTrue(applicationSessionCookieConfig.getName().equals("test"));
+        Assert.assertTrue(applicationSessionCookieConfig.getName().equals("test"));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -103,7 +102,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetPathInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setPath("test");
-        assertTrue(applicationSessionCookieConfig.getPath().equals("test"));
+        Assert.assertTrue(applicationSessionCookieConfig.getPath().equals("test"));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -116,7 +115,7 @@ public class TestApplicationSessionCookieConfig {
     public void testSetSecureInitPhase() {
         context.setState(LifecycleState.STARTING_PREP);
         applicationSessionCookieConfig.setSecure(true);
-        assertTrue(applicationSessionCookieConfig.isSecure());
+        Assert.assertTrue(applicationSessionCookieConfig.isSecure());
     }
 
     @Test(expected = IllegalStateException.class)

==================================================
TestDefaultInstanceManager.java
index c8cf5af0dd..6025e007d1 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -45,10 +45,6 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -109,7 +105,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         // Call the servlet once
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals("OK", bc.toString());
 
         // Give the async thread a chance to finish (but not too long)
         int counter = 0;
@@ -118,7 +114,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             counter++;
         }
 
-        assertEquals("1false2true3true4true5false", servlet.getResult());
+        Assert.assertEquals("1false2true3true4true5false", servlet.getResult());
 
         // Check the access log
         alv.validateAccessLog(1, 200, Bug49528Servlet.THREAD_SLEEP_TIME,
@@ -146,7 +142,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         // Call the servlet once
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals("OK", bc.toString());
 
         // Give the async thread a chance to finish (but not too long)
         int counter = 0;
@@ -155,7 +151,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             counter++;
         }
 
-        assertEquals("1false2true3true4true5false", servlet.getResult());
+        Assert.assertEquals("1false2true3true4true5false", servlet.getResult());
 
         // Check the access log
         alv.validateAccessLog(1, 200, Bug49567Servlet.THREAD_SLEEP_TIME,
@@ -231,7 +227,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Map<String,List<String>> headers = new HashMap<>();
         getUrl("http://localhost:" + getPort() + "/", bc, headers);
 
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals("OK", bc.toString());
         List<String> contentLength = headers.get("Content-Length");
         Assert.assertNotNull(contentLength);
         Assert.assertEquals(1,  contentLength.size());
@@ -533,7 +529,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             Thread.sleep(50);
             count ++;
         }
-        assertEquals(expectedTrack, getTrack());
+        Assert.assertEquals(expectedTrack, getTrack());
 
         // Check the access log
         if (completeOnTimeout == null ||
@@ -670,7 +666,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             Thread.sleep(50);
             count ++;
         }
-        assertEquals(expectedTrack, getTrack());
+        Assert.assertEquals(expectedTrack, getTrack());
 
         // Check the access log
         alv.validateAccessLog(1, 200, 0, REQUEST_TIME);
@@ -1013,7 +1009,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             Thread.sleep(50);
             count ++;
         }
-        assertEquals(expectedTrack, getTrack());
+        Assert.assertEquals(expectedTrack, getTrack());
 
         // Check the access log
         alv.validateAccessLog(1, 500, 0, REQUEST_TIME);
@@ -1067,7 +1063,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             Thread.sleep(50);
             count ++;
         }
-        assertEquals(expectedTrack, getTrack());
+        Assert.assertEquals(expectedTrack, getTrack());
 
         // Check the access log
         alv.validateAccessLog(1, 200, AsyncStartRunnable.THREAD_SLEEP_TIME,
@@ -1129,12 +1125,12 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Map<String,List<String>> headers = new LinkedHashMap<>();
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + "/", bc, headers);
-        assertEquals(200, rc);
-        assertEquals("OK", bc.toString());
+        Assert.assertEquals(200, rc);
+        Assert.assertEquals("OK", bc.toString());
         List<String> testHeader = headers.get("A");
-        assertNotNull(testHeader);
-        assertEquals(1, testHeader.size());
-        assertEquals("xyz",testHeader.get(0));
+        Assert.assertNotNull(testHeader);
+        Assert.assertEquals(1, testHeader.size());
+        Assert.assertEquals("xyz",testHeader.get(0));
 
         // Check the access log
         alv.validateAccessLog(1, 200, Bug50753Servlet.THREAD_SLEEP_TIME,
@@ -1195,7 +1191,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         int rc = getUrl(url.toString(), new ByteChunk(), null);
 
-        assertEquals(500, rc);
+        Assert.assertEquals(500, rc);
 
         // Without this test may complete before access log has a chance to log
         // the request
@@ -1232,7 +1228,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         int rc = getUrl(url.toString(), new ByteChunk(), null);
 
-        assertEquals(HttpServletResponse.SC_BAD_REQUEST, rc);
+        Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, rc);
 
         // Without this test may complete before access log has a chance to log
         // the request
@@ -1322,7 +1318,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         ByteChunk res = new ByteChunk();
         int rc = getUrl(url.toString(), res, null);
 
-        assertEquals(HttpServletResponse.SC_BAD_REQUEST, rc);
+        Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, rc);
 
         // SRV 10.9.2 - Handling an error is entirely the application's
         // responsibility when an error occurs on an application thread.
@@ -1330,11 +1326,11 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         // error page mechanism to kick in could be viewed as handling the error
         String responseBody = res.toString();
         Assert.assertNotNull(responseBody);
-        assertTrue(responseBody.length() > 0);
+        Assert.assertTrue(responseBody.length() > 0);
         if (customError) {
-            assertTrue(responseBody, responseBody.contains(CustomErrorServlet.ERROR_MESSAGE));
+            Assert.assertTrue(responseBody, responseBody.contains(CustomErrorServlet.ERROR_MESSAGE));
         } else {
-            assertTrue(responseBody, responseBody.contains(AsyncErrorServlet.ERROR_MESSAGE));
+            Assert.assertTrue(responseBody, responseBody.contains(AsyncErrorServlet.ERROR_MESSAGE));
         }
 
         // Without this test may complete before access log has a chance to log
@@ -1427,8 +1423,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         ByteChunk body = new ByteChunk();
         int rc = getUrl(url.toString(), body, null);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertEquals("OK", body.toString());
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals("OK", body.toString());
     }
 
     private static class Bug53337ServletA extends HttpServlet {
@@ -1506,9 +1502,9 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         ByteChunk body = new ByteChunk();
         int rc = getUrl(url.toString(), body, null);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertEquals("OK", body.toString());
-        assertTrue(servletA.isAsyncWhenExpected());
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals("OK", body.toString());
+        Assert.assertTrue(servletA.isAsyncWhenExpected());
     }
 
     private static class Bug53843ServletA extends HttpServlet {
@@ -1755,15 +1751,15 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             ioe.printStackTrace();
         }
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 
         body.recycle();
 
         rc = getUrl("http://localhost:" + getPort() + "/bug54178ServletB",
                 body, null);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertEquals("OK", body.toString());
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals("OK", body.toString());
     }
 
     private static class Bug54178ServletA extends HttpServlet {
@@ -2193,7 +2189,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         getUrl("http://localhost:" + getPort()+ "/stage1");
 
-        assertEquals("doGet-startAsync-doGet-startAsync-onStartAsync-NonAsyncServletGet-onComplete-", getTrack());
+        Assert.assertEquals("doGet-startAsync-doGet-startAsync-onStartAsync-NonAsyncServletGet-onComplete-", getTrack());
 
         // Check the access log
         alv.validateAccessLog(1, 200, 0, REQUEST_TIME);
@@ -2475,8 +2471,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             }
 
             private void checkRequestResponse(AsyncEvent event) {
-                assertEquals(servletRequest, event.getSuppliedRequest());
-                assertEquals(servletResponse, event.getSuppliedResponse());
+                Assert.assertEquals(servletRequest, event.getSuppliedRequest());
+                Assert.assertEquals(servletResponse, event.getSuppliedResponse());
             }
         };
         final Context context = new TesterContext();
@@ -2630,8 +2626,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         ByteChunk body = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + EncodedDispatchServlet.ENCODED_URI, body, null);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertEquals("OK", body.toString());
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals("OK", body.toString());
     }
 
 

==================================================
TestNamingContextListener.java
index 5b313d21e0..d8d728915e 100644
--- a/test/org/apache/catalina/core/TestDefaultInstanceManager.java
+++ b/test/org/apache/catalina/core/TestDefaultInstanceManager.java
@@ -21,8 +21,7 @@ import java.lang.reflect.InvocationTargetException;
 
 import javax.naming.NamingException;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
@@ -71,7 +70,7 @@ public class TestDefaultInstanceManager extends TomcatBaseTest {
 
         // First JSP should be unloaded and replaced by third (second left
         // alone) so no change in overall count
-        assertEquals(count, instanceManager.getAnnotationCacheSize());
+        Assert.assertEquals(count, instanceManager.getAnnotationCacheSize());
     }
 
     private DefaultInstanceManager doClassUnloadingPrep() throws Exception {

==================================================
TestStandardContext.java
index 94f9d8166c..ba6e03175a 100644
--- a/test/org/apache/catalina/core/TestNamingContextListener.java
+++ b/test/org/apache/catalina/core/TestNamingContextListener.java
@@ -22,8 +22,7 @@ import javax.naming.NamingException;
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -65,7 +64,7 @@ public class TestNamingContextListener extends TomcatBaseTest {
 
         tomcat.start();
 
-        assertEquals(LifecycleState.STARTED, ctx.getState());
+        Assert.assertEquals(LifecycleState.STARTED, ctx.getState());
     }
 
     public static final class Bug49132Listener implements ServletContextListener {
@@ -113,7 +112,7 @@ public class TestNamingContextListener extends TomcatBaseTest {
 
         tomcat.start();
 
-        assertEquals(LifecycleState.STARTED, ctx.getState());
+        Assert.assertEquals(LifecycleState.STARTED, ctx.getState());
     }
 
     public static class Bug54096EnvA {

==================================================
TestStandardContextAliases.java
index c43c2fd235..6232ad442c 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -44,12 +44,6 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.hamcrest.CoreMatchers;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -95,7 +89,7 @@ public class TestStandardContext extends TomcatBaseTest {
 
         File docBase = new File(tomcat.getHost().getAppBaseFile(), "ROOT");
         if (!docBase.mkdirs() && !docBase.isDirectory()) {
-            fail("Unable to create docBase");
+            Assert.fail("Unable to create docBase");
         }
 
         Context root = tomcat.addContext("", "ROOT");
@@ -109,11 +103,11 @@ public class TestStandardContext extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse404());
+        Assert.assertTrue(client.isResponse404());
 
         // Context failed to start. This checks that automatic transition
         // from FAILED to STOPPED state was successful.
-        assertEquals(LifecycleState.STOPPED, root.getState());
+        Assert.assertEquals(LifecycleState.STOPPED, root.getState());
 
         // Prepare context for the second attempt
         // Configuration was cleared on stop() thanks to
@@ -124,8 +118,8 @@ public class TestStandardContext extends TomcatBaseTest {
         // The same request is processed successfully
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
-        assertEquals(Bug46243Filter.class.getName()
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals(Bug46243Filter.class.getName()
                 + HelloWorldServlet.RESPONSE_TEXT, client.getResponseBody());
     }
 
@@ -200,21 +194,21 @@ public class TestStandardContext extends TomcatBaseTest {
 
         try {
             context.start();
-            fail();
+            Assert.fail();
         } catch (LifecycleException ex) {
             // As expected
         }
-        assertEquals(LifecycleState.FAILED, context.getState());
+        Assert.assertEquals(LifecycleState.FAILED, context.getState());
 
         // The second attempt
         loader.setFail(false);
         context.start();
-        assertEquals(LifecycleState.STARTED, context.getState());
+        Assert.assertEquals(LifecycleState.STARTED, context.getState());
 
         // Using a test from testBug49922() to check that the webapp is running
         ByteChunk result = getUrl("http://localhost:" + getPort() +
                 "/bug49922/target");
-        assertEquals("Target", result.toString());
+        Assert.assertEquals("Target", result.toString());
     }
 
     @Test
@@ -236,21 +230,21 @@ public class TestStandardContext extends TomcatBaseTest {
 
         try {
             context.start();
-            fail();
+            Assert.fail();
         } catch (LifecycleException ex) {
             // As expected
         }
-        assertEquals(LifecycleState.FAILED, context.getState());
+        Assert.assertEquals(LifecycleState.FAILED, context.getState());
 
         // The second attempt
         listener.setFail(false);
         context.start();
-        assertEquals(LifecycleState.STARTED, context.getState());
+        Assert.assertEquals(LifecycleState.STARTED, context.getState());
 
         // Using a test from testBug49922() to check that the webapp is running
         ByteChunk result = getUrl("http://localhost:" + getPort() +
                 "/bug49922/target");
-        assertEquals("Target", result.toString());
+        Assert.assertEquals("Target", result.toString());
     }
 
     private static class FailingWebappLoader extends WebappLoader {
@@ -294,39 +288,39 @@ public class TestStandardContext extends TomcatBaseTest {
         // Check filter and servlet aren't called
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug49922/foo", result, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
-        assertTrue(result.getLength() > 0);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertTrue(result.getLength() > 0);
 
         // Check extension mapping works
         result = getUrl("http://localhost:" + getPort() + "/test/foo.do");
-        assertEquals("FilterServlet", result.toString());
+        Assert.assertEquals("FilterServlet", result.toString());
 
         // Check path mapping works
         result = getUrl("http://localhost:" + getPort() + "/test/bug49922/servlet");
-        assertEquals("FilterServlet", result.toString());
+        Assert.assertEquals("FilterServlet", result.toString());
 
         // Check servlet name mapping works
         result = getUrl("http://localhost:" + getPort() + "/test/foo.od");
-        assertEquals("FilterServlet", result.toString());
+        Assert.assertEquals("FilterServlet", result.toString());
 
         // Check filter is only called once
         result = getUrl("http://localhost:" + getPort() +
                 "/test/bug49922/servlet/foo.do");
-        assertEquals("FilterServlet", result.toString());
+        Assert.assertEquals("FilterServlet", result.toString());
         result = getUrl("http://localhost:" + getPort() +
                 "/test/bug49922/servlet/foo.od");
-        assertEquals("FilterServlet", result.toString());
+        Assert.assertEquals("FilterServlet", result.toString());
 
         // Check dispatcher mapping
         result = getUrl("http://localhost:" + getPort() +
                 "/test/bug49922/target");
-        assertEquals("Target", result.toString());
+        Assert.assertEquals("Target", result.toString());
         result = getUrl("http://localhost:" + getPort() +
                 "/test/bug49922/forward");
-        assertEquals("FilterTarget", result.toString());
+        Assert.assertEquals("FilterTarget", result.toString());
         result = getUrl("http://localhost:" + getPort() +
                 "/test/bug49922/include");
-        assertEquals("IncludeFilterTarget", result.toString());
+        Assert.assertEquals("IncludeFilterTarget", result.toString());
     }
 
 
@@ -431,8 +425,8 @@ public class TestStandardContext extends TomcatBaseTest {
                 bc, null);
 
         // Check for a 401
-        assertNotSame("OK", bc.toString());
-        assertEquals(401, rc);
+        Assert.assertNotSame("OK", bc.toString());
+        Assert.assertEquals(401, rc);
     }
 
     public static final class Bug50015SCI
@@ -567,8 +561,8 @@ public class TestStandardContext extends TomcatBaseTest {
         ctx.stop();
 
         // Make sure that init() and destroy() were called correctly
-        assertTrue(sci.getServlet().isOk());
-        assertTrue(loadOnStartUp == sci.getServlet().isInitCalled());
+        Assert.assertTrue(sci.getServlet().isOk());
+        Assert.assertTrue(loadOnStartUp == sci.getServlet().isInitCalled());
     }
 
     public static final class Bug51376SCI
@@ -658,14 +652,14 @@ public class TestStandardContext extends TomcatBaseTest {
         client.doRequest("/regular", false, false);
 
         // Servlet attempts to read parts which will trigger an ISE
-        assertTrue(client.isResponse500());
+        Assert.assertTrue(client.isResponse500());
 
         client.reset();
 
         // Make sure regular multipart works properly
         client.doRequest("/multipart", false, true); // send multipart request
 
-        assertEquals("Regular multipart doesn't work",
+        Assert.assertEquals("Regular multipart doesn't work",
                      "parts=1",
                      client.getResponseBody());
 
@@ -676,7 +670,7 @@ public class TestStandardContext extends TomcatBaseTest {
         client.doRequest("/regular", false, true); // send multipart request
 
         // Servlet attempts to read parts which will trigger an ISE
-        assertTrue(client.isResponse500());
+        Assert.assertTrue(client.isResponse500());
 
         client.reset();
 
@@ -685,7 +679,7 @@ public class TestStandardContext extends TomcatBaseTest {
         // there is no @MultipartConfig
         client.doRequest("/regular", true, true); // send multipart request
 
-        assertEquals("Incorrect response for configured casual multipart request",
+        Assert.assertEquals("Incorrect response for configured casual multipart request",
                      "parts=1",
                      client.getResponseBody());
 
@@ -870,13 +864,13 @@ public class TestStandardContext extends TomcatBaseTest {
 
         // first we test the flag itself, which can be set on the Host and
         // Context
-        assertFalse(context.getComputedFailCtxIfServletStartFails());
+        Assert.assertFalse(context.getComputedFailCtxIfServletStartFails());
 
         StandardHost host = (StandardHost) tomcat.getHost();
         host.setFailCtxIfServletStartFails(true);
-        assertTrue(context.getComputedFailCtxIfServletStartFails());
+        Assert.assertTrue(context.getComputedFailCtxIfServletStartFails());
         context.setFailCtxIfServletStartFails(Boolean.FALSE);
-        assertFalse("flag on Context should override Host config",
+        Assert.assertFalse("flag on Context should override Host config",
                 context.getComputedFailCtxIfServletStartFails());
 
         // second, we test the actual effect of the flag on the startup
@@ -885,11 +879,11 @@ public class TestStandardContext extends TomcatBaseTest {
         servlet.setLoadOnStartup(1);
 
         tomcat.start();
-        assertTrue("flag false should not fail deployment", context.getState()
+        Assert.assertTrue("flag false should not fail deployment", context.getState()
                 .isAvailable());
 
         tomcat.stop();
-        assertFalse(context.getState().isAvailable());
+        Assert.assertFalse(context.getState().isAvailable());
 
         host.removeChild(context);
         context = (StandardContext) tomcat.addContext("",
@@ -898,7 +892,7 @@ public class TestStandardContext extends TomcatBaseTest {
                 new FailingStartupServlet());
         servlet.setLoadOnStartup(1);
         tomcat.start();
-        assertFalse("flag true should fail deployment", context.getState()
+        Assert.assertFalse("flag true should fail deployment", context.getState()
                 .isAvailable());
     }
 

==================================================
TestStandardContextResources.java
index 2d19254d64..81469ea148 100644
--- a/test/org/apache/catalina/core/TestStandardContextAliases.java
+++ b/test/org/apache/catalina/core/TestStandardContextAliases.java
@@ -28,8 +28,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -67,9 +66,9 @@ public class TestStandardContextAliases extends TomcatBaseTest {
             result = "";
         }
 
-        assertTrue(result.contains("00-PASS"));
-        assertTrue(result.contains("01-PASS"));
-        assertTrue(result.contains("02-PASS"));
+        Assert.assertTrue(result.contains("00-PASS"));
+        Assert.assertTrue(result.contains("01-PASS"));
+        Assert.assertTrue(result.contains("02-PASS"));
     }
 
 

==================================================
TestStandardContextValve.java
index e8ad7c9bf3..300d21be80 100644
--- a/test/org/apache/catalina/core/TestStandardContextResources.java
+++ b/test/org/apache/catalina/core/TestStandardContextResources.java
@@ -31,9 +31,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -94,7 +92,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         }
         int index = orderedLibs.indexOf("resources.jar");
         int index2 = orderedLibs.indexOf("resources2.jar");
-        assertTrue(orderedLibs.toString(), index >= 0 && index2 >= 0
+        Assert.assertTrue(orderedLibs.toString(), index >= 0 && index2 >= 0
                 && index < index2);
     }
 
@@ -147,7 +145,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         "<p>resourceB.jsp in resources.jar</p>");
 
         // Check ordering, for BZ 54391
-        assertEquals(Arrays.asList("resources.jar", "resources2.jar"), ctx
+        Assert.assertEquals(Arrays.asList("resources.jar", "resources2.jar"), ctx
                 .getServletContext().getAttribute(ServletContext.ORDERED_LIBS));
 
         tomcat.getHost().removeChild(ctx);
@@ -169,7 +167,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         "<p>resourceB.jsp in resources2.jar</p>");
 
         // Check ordering, for BZ 54391
-        assertEquals(Arrays.asList("resources2.jar", "resources.jar"), ctx
+        Assert.assertEquals(Arrays.asList("resources2.jar", "resources.jar"), ctx
                 .getServletContext().getAttribute(ServletContext.ORDERED_LIBS));
     }
 
@@ -273,11 +271,11 @@ public class TestStandardContextResources extends TomcatBaseTest {
         ByteChunk res = new ByteChunk();
         int sc = getUrl("http://localhost:" + getPort() + pageUrl, res, null);
 
-        assertEquals(expectedStatus, sc);
+        Assert.assertEquals(expectedStatus, sc);
 
         if (expectedStatus == 200) {
             String result = res.toString();
-            assertTrue(result, result.indexOf(expectedBody) > 0);
+            Assert.assertTrue(result, result.indexOf(expectedBody) > 0);
         }
     }
 }

==================================================
TestStandardWrapper.java
index 02b2b77864..96b2a8b074 100644
--- a/test/org/apache/catalina/core/TestStandardContextValve.java
+++ b/test/org/apache/catalina/core/TestStandardContextValve.java
@@ -25,7 +25,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -79,8 +79,8 @@ public class TestStandardContextValve extends TomcatBaseTest {
             i--;
         }
 
-        assertEquals(Response.SC_NOT_FOUND, rc);
-        assertEquals("InitErrorDestroy", trace.toString());
+        Assert.assertEquals(Response.SC_NOT_FOUND, rc);
+        Assert.assertEquals("InitErrorDestroy", trace.toString());
     }
 
     @Test
@@ -129,8 +129,8 @@ public class TestStandardContextValve extends TomcatBaseTest {
             i--;
         }
 
-        assertEquals(Response.SC_NOT_FOUND, rc);
-        assertEquals("InitErrorDestroy", trace.toString());
+        Assert.assertEquals(Response.SC_NOT_FOUND, rc);
+        Assert.assertEquals("InitErrorDestroy", trace.toString());
     }
 
     private static class Bug51653ErrorTrigger extends HttpServlet {

==================================================
TestSwallowAbortedUploads.java
index c8356b4dea..30f24c1687 100644
--- a/test/org/apache/catalina/core/TestStandardWrapper.java
+++ b/test/org/apache/catalina/core/TestStandardWrapper.java
@@ -42,10 +42,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -164,8 +161,8 @@ public class TestStandardWrapper extends TomcatBaseTest {
                 "/testStandardWrapper/securityAnnotationsWebXmlPriority",
                 bc, null, null);
 
-        assertTrue(bc.getLength() > 0);
-        assertEquals(403, rc);
+        Assert.assertTrue(bc.getLength() > 0);
+        Assert.assertEquals(403, rc);
     }
 
     @Test
@@ -178,8 +175,8 @@ public class TestStandardWrapper extends TomcatBaseTest {
                 "/test/testStandardWrapper/securityAnnotationsMetaDataPriority",
                 bc, null, null);
 
-        assertEquals("OK", bc.toString());
-        assertEquals(200, rc);
+        Assert.assertEquals("OK", bc.toString());
+        Assert.assertEquals(200, rc);
     }
 
     @Test
@@ -207,8 +204,8 @@ public class TestStandardWrapper extends TomcatBaseTest {
         rc = getUrl("http://localhost:" + getPort() + "/",
                 bc, null, null);
 
-        assertTrue(bc.getLength() > 0);
-        assertEquals(403, rc);
+        Assert.assertTrue(bc.getLength() > 0);
+        Assert.assertEquals(403, rc);
     }
 
     @Test
@@ -226,16 +223,16 @@ public class TestStandardWrapper extends TomcatBaseTest {
         rc = getUrl("http://localhost:" + getPort() + "/protected.jsp",
                 bc, null, null);
 
-        assertTrue(bc.getLength() > 0);
-        assertEquals(403, rc);
+        Assert.assertTrue(bc.getLength() > 0);
+        Assert.assertEquals(403, rc);
 
         bc.recycle();
 
         rc = getUrl("http://localhost:" + getPort() + "/unprotected.jsp",
                 bc, null, null);
 
-        assertEquals(200, rc);
-        assertTrue(bc.toString().contains("00-OK"));
+        Assert.assertEquals(200, rc);
+        Assert.assertTrue(bc.toString().contains("00-OK"));
     }
 
     private void doTestSecurityAnnotationsAddServlet(boolean useCreateServlet)
@@ -258,11 +255,11 @@ public class TestStandardWrapper extends TomcatBaseTest {
         rc = getUrl("http://localhost:" + getPort() + "/", bc, null, null);
 
         if (useCreateServlet) {
-            assertTrue(bc.getLength() > 0);
-            assertEquals(403, rc);
+            Assert.assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(403, rc);
         } else {
-            assertEquals("OK", bc.toString());
-            assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
         }
     }
 
@@ -314,11 +311,11 @@ public class TestStandardWrapper extends TomcatBaseTest {
         }
 
         if (expect200) {
-            assertEquals("OK", bc.toString());
-            assertEquals(200, rc);
+            Assert.assertEquals("OK", bc.toString());
+            Assert.assertEquals(200, rc);
         } else {
-            assertTrue(bc.getLength() > 0);
-            assertEquals(403, rc);
+            Assert.assertTrue(bc.getLength() > 0);
+            Assert.assertEquals(403, rc);
         }
     }
 
@@ -453,9 +450,9 @@ public class TestStandardWrapper extends TomcatBaseTest {
         // Check the result
         for (int i = 0; i < BUG51445_THREAD_COUNT; i ++) {
             String[] results = threads[i].getResult().split(",");
-            assertEquals(2, results.length);
-            assertEquals("10", results[0]);
-            assertFalse(servlets.contains(results[1]));
+            Assert.assertEquals(2, results.length);
+            Assert.assertEquals("10", results[0]);
+            Assert.assertFalse(servlets.contains(results[1]));
             servlets.add(results[1]);
         }
     }
@@ -498,9 +495,9 @@ public class TestStandardWrapper extends TomcatBaseTest {
         // Check the result
         for (int i = 0; i < BUG51445_THREAD_COUNT; i ++) {
             String[] results = threads[i].getResult().split(",");
-            assertEquals(2, results.length);
-            assertEquals("10", results[0]);
-            assertFalse(servlets.contains(results[1]));
+            Assert.assertEquals(2, results.length);
+            Assert.assertEquals("10", results[0]);
+            Assert.assertFalse(servlets.contains(results[1]));
             servlets.add(results[1]);
         }
     }

==================================================
TestAddCharSetFilter.java
index c8978934d5..c6c9fddf96 100644
--- a/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
+++ b/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
@@ -35,9 +35,6 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.Part;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -94,9 +91,9 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Unlimited, swallow enabled");
         AbortedUploadClient client = new AbortedUploadClient();
         Exception ex = doAbortedUploadTest(client, false, true);
-        assertNull("Unlimited upload with swallow enabled generates client exception",
+        Assert.assertNull("Unlimited upload with swallow enabled generates client exception",
                    ex);
-        assertTrue("Unlimited upload with swallow enabled returns error status code",
+        Assert.assertTrue("Unlimited upload with swallow enabled returns error status code",
                    client.isResponse200());
         client.reset();
     }
@@ -106,9 +103,9 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Unlimited, swallow disabled");
         AbortedUploadClient client = new AbortedUploadClient();
         Exception ex = doAbortedUploadTest(client, false, false);
-        assertNull("Unlimited upload with swallow disabled generates client exception",
+        Assert.assertNull("Unlimited upload with swallow disabled generates client exception",
                    ex);
-        assertTrue("Unlimited upload with swallow disabled returns error status code",
+        Assert.assertTrue("Unlimited upload with swallow disabled returns error status code",
                    client.isResponse200());
         client.reset();
     }
@@ -118,9 +115,9 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Limited, swallow enabled");
         AbortedUploadClient client = new AbortedUploadClient();
         Exception ex = doAbortedUploadTest(client, true, true);
-        assertNull("Limited upload with swallow enabled generates client exception",
+        Assert.assertNull("Limited upload with swallow enabled generates client exception",
                    ex);
-        assertTrue("Limited upload with swallow enabled returns non-500 status code",
+        Assert.assertTrue("Limited upload with swallow enabled returns non-500 status code",
                    client.isResponse500());
         client.reset();
     }
@@ -130,7 +127,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Limited, swallow disabled");
         AbortedUploadClient client = new AbortedUploadClient();
         Exception ex = doAbortedUploadTest(client, true, false);
-        assertTrue("Limited upload with swallow disabled does not generate client exception",
+        Assert.assertTrue("Limited upload with swallow disabled does not generate client exception",
                    ex instanceof java.net.SocketException);
         client.reset();
     }
@@ -140,9 +137,9 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Aborted (OK), swallow enabled");
         AbortedPOSTClient client = new AbortedPOSTClient();
         Exception ex = doAbortedPOSTTest(client, HttpServletResponse.SC_OK, true);
-        assertNull("Unlimited upload with swallow enabled generates client exception",
+        Assert.assertNull("Unlimited upload with swallow enabled generates client exception",
                    ex);
-        assertTrue("Unlimited upload with swallow enabled returns error status code",
+        Assert.assertTrue("Unlimited upload with swallow enabled returns error status code",
                    client.isResponse200());
         client.reset();
     }
@@ -152,9 +149,9 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Aborted (OK), swallow disabled");
         AbortedPOSTClient client = new AbortedPOSTClient();
         Exception ex = doAbortedPOSTTest(client, HttpServletResponse.SC_OK, false);
-        assertNull("Unlimited upload with swallow disabled generates client exception",
+        Assert.assertNull("Unlimited upload with swallow disabled generates client exception",
                    ex);
-        assertTrue("Unlimited upload with swallow disabled returns error status code",
+        Assert.assertTrue("Unlimited upload with swallow disabled returns error status code",
                    client.isResponse200());
         client.reset();
     }
@@ -164,9 +161,9 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Aborted (413), swallow enabled");
         AbortedPOSTClient client = new AbortedPOSTClient();
         Exception ex = doAbortedPOSTTest(client, HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE, true);
-        assertNull("Limited upload with swallow enabled generates client exception",
+        Assert.assertNull("Limited upload with swallow enabled generates client exception",
                    ex);
-        assertTrue("Limited upload with swallow enabled returns error status code",
+        Assert.assertTrue("Limited upload with swallow enabled returns error status code",
                    client.isResponse413());
         client.reset();
     }
@@ -176,7 +173,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
         log.info("Aborted (413), swallow disabled");
         AbortedPOSTClient client = new AbortedPOSTClient();
         Exception ex = doAbortedPOSTTest(client, HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE, false);
-        assertTrue("Limited upload with swallow disabled does not generate client exception",
+        Assert.assertTrue("Limited upload with swallow disabled does not generate client exception",
                    ex instanceof java.net.SocketException);
         client.reset();
     }

==================================================
TestCsrfPreventionFilter.java
index 3fa834284b..50acf76b0e 100644
--- a/test/org/apache/catalina/filters/TestAddCharSetFilter.java
+++ b/test/org/apache/catalina/filters/TestAddCharSetFilter.java
@@ -29,8 +29,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -119,9 +118,9 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         getUrl("http://localhost:" + getPort() + "/", new ByteChunk(), headers);
 
         List<String> ctHeaders = headers.get("Content-Type");
-        assertEquals(1, ctHeaders.size());
+        Assert.assertEquals(1, ctHeaders.size());
         String ct = ctHeaders.get(0).toLowerCase(Locale.ENGLISH);
-        assertEquals("text/plain;charset=" + expected.toLowerCase(Locale.ENGLISH), ct);
+        Assert.assertEquals("text/plain;charset=" + expected.toLowerCase(Locale.ENGLISH), ct);
     }
 
     private static class CharsetServlet extends HttpServlet {

==================================================
TestCsrfPreventionFilter2.java
index 04187e5d1d..6d0c81d3e8 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
@@ -24,10 +24,7 @@ import java.io.ObjectOutputStream;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.filters.CsrfPreventionFilter.LruCache;
@@ -44,25 +41,25 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
 
     @Test
     public void testAddNonceNoQueryNoAnchor() throws Exception {
-        assertEquals("/test?" + RESULT_NONCE ,
+        Assert.assertEquals("/test?" + RESULT_NONCE ,
                 wrapper.encodeRedirectURL("/test"));
     }
 
     @Test
     public void testAddNonceQueryNoAnchor() throws Exception {
-        assertEquals("/test?a=b&" + RESULT_NONCE ,
+        Assert.assertEquals("/test?a=b&" + RESULT_NONCE ,
                 wrapper.encodeRedirectURL("/test?a=b"));
     }
 
     @Test
     public void testAddNonceNoQueryAnchor() throws Exception {
-        assertEquals("/test?" + RESULT_NONCE + "#c",
+        Assert.assertEquals("/test?" + RESULT_NONCE + "#c",
                 wrapper.encodeRedirectURL("/test#c"));
     }
 
     @Test
     public void testAddNonceQueryAnchor() throws Exception {
-        assertEquals("/test?a=b&" + RESULT_NONCE + "#c",
+        Assert.assertEquals("/test?a=b&" + RESULT_NONCE + "#c",
                 wrapper.encodeRedirectURL("/test?a=b#c"));
     }
 
@@ -87,13 +84,13 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
         LruCache<String> cache2 = (LruCache<String>) ois.readObject();
 
         cache2.add("key7");
-        assertFalse(cache2.contains("key1"));
-        assertFalse(cache2.contains("key2"));
-        assertTrue(cache2.contains("key3"));
-        assertTrue(cache2.contains("key4"));
-        assertTrue(cache2.contains("key5"));
-        assertTrue(cache2.contains("key6"));
-        assertTrue(cache2.contains("key7"));
+        Assert.assertFalse(cache2.contains("key1"));
+        Assert.assertFalse(cache2.contains("key2"));
+        Assert.assertTrue(cache2.contains("key3"));
+        Assert.assertTrue(cache2.contains("key4"));
+        Assert.assertTrue(cache2.contains("key5"));
+        Assert.assertTrue(cache2.contains("key6"));
+        Assert.assertTrue(cache2.contains("key7"));
     }
 
     @Test

==================================================
TestRemoteIpFilter.java
index 0ea6acafc1..34b3fddf36 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
@@ -17,8 +17,7 @@
 
 package org.apache.catalina.filters;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.filters.CsrfPreventionFilter.LruCache;
@@ -34,7 +33,7 @@ public class TestCsrfPreventionFilter2 {
         int threadCount = 2;
         long iterationCount = 100000L;
 
-        assertTrue(threadCount > 1);
+        Assert.assertTrue(threadCount > 1);
 
         LruCache<String> cache = new LruCache<>(threadCount - 1);
 
@@ -52,7 +51,7 @@ public class TestCsrfPreventionFilter2 {
         }
 
         for (int i = 0; i < threadCount; i++) {
-            assertTrue(threads[i].getResult());
+            Assert.assertTrue(threads[i].getResult());
         }
 
     }

==================================================
TestRestCsrfPreventionFilter.java
index 595fdbc58c..0f6d8345eb 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -37,10 +37,6 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -162,20 +158,20 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
     public void testCommaDelimitedListToStringArray() {
         List<String> elements = Arrays.asList("element1", "element2", "element3");
         String actual = RemoteIpFilter.listToCommaDelimitedString(elements);
-        assertEquals("element1, element2, element3", actual);
+        Assert.assertEquals("element1, element2, element3", actual);
     }
 
     @Test
     public void testCommaDelimitedListToStringArrayEmptyList() {
         List<String> elements = new ArrayList<>();
         String actual = RemoteIpFilter.listToCommaDelimitedString(elements);
-        assertEquals("", actual);
+        Assert.assertEquals("", actual);
     }
 
     @Test
     public void testCommaDelimitedListToStringArrayNullList() {
         String actual = RemoteIpFilter.listToCommaDelimitedString(null);
-        assertEquals("", actual);
+        Assert.assertEquals("", actual);
     }
 
     @Test
@@ -184,8 +180,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         request.setHeader("myheader", "lower Case");
         request.setHeader("MYHEADER", "UPPER CASE");
         request.setHeader("MyHeader", "Camel Case");
-        assertEquals(1, request.headers.size());
-        assertEquals("Camel Case", request.getHeader("myheader"));
+        Assert.assertEquals(1, request.headers.size());
+        Assert.assertEquals("Camel Case", request.getHeader("myheader"));
     }
 
     @Test
@@ -208,19 +204,19 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         boolean actualSecure = actualRequest.isSecure();
-        assertFalse("request must be unsecured as header x-forwarded-proto said it is http", actualSecure);
+        Assert.assertFalse("request must be unsecured as header x-forwarded-proto said it is http", actualSecure);
 
         String actualScheme = actualRequest.getScheme();
-        assertEquals("scheme must be http as header x-forwarded-proto said it is http", "http", actualScheme);
+        Assert.assertEquals("scheme must be http as header x-forwarded-proto said it is http", "http", actualScheme);
 
         int actualServerPort = actualRequest.getServerPort();
-        assertEquals("wrong http server port", 8080, actualServerPort);
+        Assert.assertEquals("wrong http server port", 8080, actualServerPort);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
     }
 
     @Test
@@ -241,16 +237,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         boolean actualSecure = actualRequest.isSecure();
-        assertFalse("request must be unsecured as header x-forwarded-proto said it is http", actualSecure);
+        Assert.assertFalse("request must be unsecured as header x-forwarded-proto said it is http", actualSecure);
 
         String actualScheme = actualRequest.getScheme();
-        assertEquals("scheme must be http as header x-forwarded-proto said it is http", "http", actualScheme);
+        Assert.assertEquals("scheme must be http as header x-forwarded-proto said it is http", "http", actualScheme);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
     }
 
@@ -272,16 +268,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
-        assertNull("x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("x-forwarded-by must be null", actualXForwardedBy);
+        Assert.assertNull("x-forwarded-by must be null", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "192.168.0.10", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "192.168.0.10", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "remote-host-original-value", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "remote-host-original-value", actualRemoteHost);
     }
 
     @Test
@@ -304,16 +300,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        assertNull("all proxies are internal, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are internal, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        assertNull("all proxies are internal, x-forwarded-by must be null", actualXForwardedBy);
+        Assert.assertNull("all proxies are internal, x-forwarded-by must be null", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
     }
 
     @Test
@@ -339,16 +335,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
     }
 
     @Test
@@ -373,16 +369,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
     }
 
     @Test
@@ -406,16 +402,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
     }
 
     @Test
@@ -438,16 +434,16 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        assertEquals("x-forwarded-for must be unchanged", "140.211.11.130, proxy1, proxy2", actualXForwardedFor);
+        Assert.assertEquals("x-forwarded-for must be unchanged", "140.211.11.130, proxy1, proxy2", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        assertNull("x-forwarded-by must be null", actualXForwardedBy);
+        Assert.assertNull("x-forwarded-by must be null", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "not-allowed-internal-proxy", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "not-allowed-internal-proxy", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "not-allowed-internal-proxy-host", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "not-allowed-internal-proxy-host", actualRemoteHost);
     }
 
     @Test
@@ -470,25 +466,25 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130, proxy1", actualXForwardedFor);
+        Assert.assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130, proxy1", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2", actualXForwardedBy);
+        Assert.assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
-        assertEquals("remoteAddr", "untrusted-proxy", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "untrusted-proxy", actualRemoteAddr);
 
         String actualRemoteHost = actualRequest.getRemoteHost();
-        assertEquals("remoteHost", "untrusted-proxy", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "untrusted-proxy", actualRemoteHost);
     }
 
     @Test
     public void testListToCommaDelimitedString() {
         String[] actual = RemoteIpFilter.commaDelimitedListToStringArray("element1, element2, element3");
         String[] expected = new String[] { "element1", "element2", "element3" };
-        assertEquals(expected.length, actual.length);
+        Assert.assertEquals(expected.length, actual.length);
         for (int i = 0; i < actual.length; i++) {
-            assertEquals(expected[i], actual[i]);
+            Assert.assertEquals(expected[i], actual[i]);
         }
     }
 
@@ -496,9 +492,9 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
     public void testListToCommaDelimitedStringMixedSpaceChars() {
         String[] actual = RemoteIpFilter.commaDelimitedListToStringArray("element1  , element2,\t element3");
         String[] expected = new String[] { "element1", "element2", "element3" };
-        assertEquals(expected.length, actual.length);
+        Assert.assertEquals(expected.length, actual.length);
         for (int i = 0; i < actual.length; i++) {
-            assertEquals(expected[i], actual[i]);
+            Assert.assertEquals(expected[i], actual[i]);
         }
     }
 

==================================================
TestRestCsrfPreventionFilter2.java
index 31ecd217f9..64216dac85 100644
--- a/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter.java
@@ -25,9 +25,7 @@ import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -272,24 +270,24 @@ public class TestRestCsrfPreventionFilter {
     }
 
     private void verifyContinueChain() {
-        assertTrue(filterChain.isVisited());
+        Assert.assertTrue(filterChain.isVisited());
     }
 
     private void verifyContinueChainNonceAvailable() {
-        assertTrue(NONCE.equals(response.getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME)));
+        Assert.assertTrue(NONCE.equals(response.getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME)));
         verifyContinueChain();
     }
 
     private void verifyContinueChainNonceNotAvailable() {
-        assertNull(response.getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME));
+        Assert.assertNull(response.getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME));
         verifyContinueChain();
     }
 
     private void verifyDenyResponse(int statusCode) {
-        assertTrue(Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE.equals(response
+        Assert.assertTrue(Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE.equals(response
                 .getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME)));
-        assertTrue(statusCode == response.getStatus());
-        assertTrue(!filterChain.isVisited());
+        Assert.assertTrue(statusCode == response.getStatus());
+        Assert.assertTrue(!filterChain.isVisited());
     }
 
     private static class TesterFilterChain implements FilterChain {

==================================================
TestVirtualContext.java
index d4ce05d560..ee4a928ded 100644
--- a/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter2.java
@@ -30,11 +30,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -223,21 +219,21 @@ public class TestRestCsrfPreventionFilter2 extends TomcatBaseTest {
             rc = postUrl(body, HTTP_PREFIX + getPort() + uri, bc, reqHeaders, respHeaders);
         }
 
-        assertEquals(expectedRC, rc);
+        Assert.assertEquals(expectedRC, rc);
 
         if (expectedRC == HttpServletResponse.SC_OK) {
-            assertEquals(expectedResponse, bc.toString());
+            Assert.assertEquals(expectedResponse, bc.toString());
             List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);
             saveCookies(newCookies, l -> Objects.nonNull(l) && l.size() > 0);
         }
 
         if (!expectCsrfRH) {
-            assertNull(respHeaders.get(Constants.CSRF_REST_NONCE_HEADER_NAME));
+            Assert.assertNull(respHeaders.get(Constants.CSRF_REST_NONCE_HEADER_NAME));
         } else {
             List<String> respHeaderValue = respHeaders.get(Constants.CSRF_REST_NONCE_HEADER_NAME);
-            assertNotNull(respHeaderValue);
+            Assert.assertNotNull(respHeaderValue);
             if (Objects.nonNull(expectedCsrfRHV)) {
-                assertTrue(respHeaderValue.contains(expectedCsrfRHV));
+                Assert.assertTrue(respHeaderValue.contains(expectedCsrfRHV));
             } else {
                 validNonce = respHeaderValue.get(0);
             }

==================================================
TestVirtualWebappLoader.java
index acdfe5de0c..30ef53644e 100644
--- a/test/org/apache/catalina/loader/TestVirtualContext.java
+++ b/test/org/apache/catalina/loader/TestVirtualContext.java
@@ -14,10 +14,8 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.catalina.loader;
 
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -25,9 +23,6 @@ import java.io.InputStream;
 import java.util.Arrays;
 import java.util.HashSet;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -145,19 +140,19 @@ public class TestVirtualContext extends TomcatBaseTest {
             getUrl(
                 "http://localhost:" + getPort() +
                     "/test/classpathGetResources.jsp?path=rsrc/").toString();
-        assertTrue(
+        Assert.assertTrue(
             allUrls,
             allUrls.indexOf("/test/webapp-virtual-webapp/src/main/webapp/WEB-INF/classes/rsrc") > 0);
-        assertTrue(
+        Assert.assertTrue(
             allUrls,
             allUrls.indexOf("/test/webapp-virtual-webapp/src/main/webapp2/WEB-INF/classes/rsrc") > 0);
-        assertTrue(
+        Assert.assertTrue(
             allUrls,
             allUrls.indexOf("/test/webapp-virtual-webapp/src/main/webapp/WEB-INF/lib/rsrc.jar!/rsrc") > 0);
-        assertTrue(
+        Assert.assertTrue(
             allUrls,
             allUrls.indexOf("/test/webapp-virtual-webapp/target/classes/rsrc") > 0);
-        assertTrue(
+        Assert.assertTrue(
             allUrls,
             allUrls.indexOf("/test/webapp-virtual-library/target/WEB-INF/classes/rsrc") > 0);
 
@@ -170,7 +165,7 @@ public class TestVirtualContext extends TomcatBaseTest {
             getUrl(
                 "http://localhost:" + getPort() +
                     "/test/classpathGetResources.jsp?path=rsrc2/").toString();
-        assertTrue(
+        Assert.assertTrue(
             allRsrsc2ClasspathUrls,
             allRsrsc2ClasspathUrls.indexOf("/test/webapp-virtual-webapp/src/main/webapp2/WEB-INF/classes/rsrc2") > 0);
 
@@ -213,13 +208,13 @@ public class TestVirtualContext extends TomcatBaseTest {
             getUrl(
                 "http://localhost:" + getPort() +
                     "/test/contextGetResourcePaths.jsp?path=/rsrc/").toString();
-        assertTrue(
+        Assert.assertTrue(
             allRsrcPaths,
             allRsrcPaths.indexOf("/rsrc/resourceF.properties") > 0);
-        assertTrue(
+        Assert.assertTrue(
             allRsrcPaths,
             allRsrcPaths.indexOf("/rsrc/resourceE.properties") > 0);
-        assertTrue(
+        Assert.assertTrue(
             allRsrcPaths,
             allRsrcPaths.indexOf("/rsrc/resourceH.properties") > 0);
 
@@ -232,7 +227,7 @@ public class TestVirtualContext extends TomcatBaseTest {
             getUrl(
                 "http://localhost:" + getPort() +
                     "/test/contextGetResourcePaths.jsp?path=/rsrc2/").toString();
-        assertTrue(
+        Assert.assertTrue(
             allRsrc2Paths,
             allRsrc2Paths.indexOf("/rsrc2/resourceJ.properties") > 0);
 
@@ -329,11 +324,11 @@ public class TestVirtualContext extends TomcatBaseTest {
         int sc = getUrl("http://localhost:" + getPort() + pageUrl, res, 10000,
                 null, null);
 
-        assertEquals(expectedStatus, sc);
+        Assert.assertEquals(expectedStatus, sc);
 
         if (expectedStatus == 200) {
             String result = res.toString();
-            assertTrue(result, result.contains(expectedBody));
+            Assert.assertTrue(result, result.contains(expectedBody));
         }
     }
 }

==================================================
TestWebappClassLoaderMemoryLeak.java
index ab47daeb45..afcd8a32c8 100644
--- a/test/org/apache/catalina/loader/TestVirtualWebappLoader.java
+++ b/test/org/apache/catalina/loader/TestVirtualWebappLoader.java
@@ -18,10 +18,7 @@ package org.apache.catalina.loader;
 
 import java.io.File;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.WebResourceRoot;
@@ -35,8 +32,8 @@ public class TestVirtualWebappLoader extends TomcatBaseTest {
     @Test
     public void testModified() throws Exception {
         WebappLoader loader = new WebappLoader();
-        assertNull(loader.getClassLoader());
-        assertFalse(loader.modified());
+        Assert.assertNull(loader.getClassLoader());
+        Assert.assertFalse(loader.modified());
     }
 
     @Test
@@ -63,16 +60,16 @@ public class TestVirtualWebappLoader extends TomcatBaseTest {
 
         loader.start();
         String[] repos = loader.getLoaderRepositories();
-        assertEquals(4,repos.length);
+        Assert.assertEquals(4,repos.length);
         loader.stop();
 
         repos = loader.getLoaderRepositories();
-        assertEquals(0, repos.length);
+        Assert.assertEquals(0, repos.length);
 
         // no leak
         loader.start();
         repos = loader.getLoaderRepositories();
-        assertEquals(4,repos.length);
+        Assert.assertEquals(4,repos.length);
 
         // clear loader
         ctx.setLoader(null);

==================================================
TestWebappClassLoaderWeaving.java
index 8af95f0a0b..f41db7bf25 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java
@@ -25,8 +25,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.fail;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -64,7 +63,7 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
                     TaskServlet.TIMER_THREAD_NAME.equals(thread.getName())) {
                 thread.join(5000);
                 if (thread.isAlive()) {
-                    fail("Timer thread still running");
+                    Assert.fail("Timer thread still running");
                 }
             }
         }

==================================================
TestMapper.java
index ec18f3be0d..f8bd72d967 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
@@ -24,12 +24,6 @@ import java.lang.instrument.ClassFileTransformer;
 import java.lang.reflect.Method;
 import java.security.ProtectionDomain;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -86,8 +80,8 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.tomcat.start();
 
         ClassLoader loader = this.context.getLoader().getClassLoader();
-        assertNotNull("The class loader should not be null.", loader);
-        assertTrue("The class loader is not correct.", loader instanceof WebappClassLoaderBase);
+        Assert.assertNotNull("The class loader should not be null.", loader);
+        Assert.assertTrue("The class loader is not correct.", loader instanceof WebappClassLoaderBase);
 
         this.loader = (WebappClassLoaderBase) loader;
 
@@ -113,10 +107,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
     public void testNoWeaving() throws Exception {
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Unweaved World!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Unweaved World!", result);
 
     }
 
@@ -125,17 +119,17 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
 
         try {
             this.loader.addTransformer(null);
-            fail("Expected exception IllegalArgumentException, got no exception.");
+            Assert.fail("Expected exception IllegalArgumentException, got no exception.");
         } catch (IllegalArgumentException ignore) {
             // good
         }
 
         // class loading should still work, no weaving
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Unweaved World!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Unweaved World!", result);
 
     }
 
@@ -145,10 +139,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.addTransformer(new ReplacementTransformer(WEAVED_REPLACEMENT_1));
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #1!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #1!", result);
 
     }
 
@@ -158,10 +152,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.addTransformer(new ReplacementTransformer(WEAVED_REPLACEMENT_2));
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
 
     }
 
@@ -172,10 +166,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.addTransformer(new ReplacementTransformer(WEAVED_REPLACEMENT_2));
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
 
     }
 
@@ -186,10 +180,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.addTransformer(new ReplacementTransformer(WEAVED_REPLACEMENT_1));
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #1!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #1!", result);
 
     }
 
@@ -201,10 +195,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.removeTransformer(removed);
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Unweaved World!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Unweaved World!", result);
 
     }
 
@@ -218,10 +212,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.removeTransformer(removed);
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #1!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #1!", result);
 
     }
 
@@ -235,10 +229,10 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.removeTransformer(removed);
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
 
     }
 
@@ -249,39 +243,39 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         this.loader.addTransformer(new ReplacementTransformer(WEAVED_REPLACEMENT_2));
 
         String result = invokeDoMethodOnClass(this.loader, "TesterNeverWeavedClass");
-        assertEquals("The first result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The first result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(this.loader, "TesterUnweavedClass");
-        assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
+        Assert.assertEquals("The second result is not correct.", "Hello, Weaver #2!", result);
 
         WebappClassLoaderBase copiedLoader = (WebappClassLoaderBase) this.loader.copyWithoutTransformers();
 
         result = invokeDoMethodOnClass(copiedLoader, "TesterNeverWeavedClass");
-        assertEquals("The third result is not correct.", "This will never be weaved.", result);
+        Assert.assertEquals("The third result is not correct.", "This will never be weaved.", result);
 
         result = invokeDoMethodOnClass(copiedLoader, "TesterUnweavedClass");
-        assertEquals("The fourth result is not correct.", "Hello, Unweaved World!", result);
+        Assert.assertEquals("The fourth result is not correct.", "Hello, Unweaved World!", result);
 
-        assertEquals("getClearReferencesHttpClientKeepAliveThread did not match.",
+        Assert.assertEquals("getClearReferencesHttpClientKeepAliveThread did not match.",
                 Boolean.valueOf(this.loader.getClearReferencesHttpClientKeepAliveThread()),
                 Boolean.valueOf(copiedLoader.getClearReferencesHttpClientKeepAliveThread()));
-        assertEquals("getClearReferencesLogFactoryRelease did not match.",
+        Assert.assertEquals("getClearReferencesLogFactoryRelease did not match.",
                 Boolean.valueOf(this.loader.getClearReferencesLogFactoryRelease()),
                 Boolean.valueOf(copiedLoader.getClearReferencesLogFactoryRelease()));
-        assertEquals("getClearReferencesStopThreads did not match.",
+        Assert.assertEquals("getClearReferencesStopThreads did not match.",
                 Boolean.valueOf(this.loader.getClearReferencesStopThreads()),
                 Boolean.valueOf(copiedLoader.getClearReferencesStopThreads()));
-        assertEquals("getClearReferencesStopTimerThreads did not match.",
+        Assert.assertEquals("getClearReferencesStopTimerThreads did not match.",
                 Boolean.valueOf(this.loader.getClearReferencesStopTimerThreads()),
                 Boolean.valueOf(copiedLoader.getClearReferencesStopTimerThreads()));
-        assertEquals("getContextName did not match.", this.loader.getContextName(),
+        Assert.assertEquals("getContextName did not match.", this.loader.getContextName(),
                 copiedLoader.getContextName());
-        assertEquals("getDelegate did not match.",
+        Assert.assertEquals("getDelegate did not match.",
                 Boolean.valueOf(this.loader.getDelegate()),
                 Boolean.valueOf(copiedLoader.getDelegate()));
-        assertEquals("getURLs did not match.", this.loader.getURLs().length,
+        Assert.assertEquals("getURLs did not match.", this.loader.getURLs().length,
                 copiedLoader.getURLs().length);
-        assertSame("getParent did not match.", this.loader.getParent(), copiedLoader.getParent());
+        Assert.assertSame("getParent did not match.", this.loader.getParent(), copiedLoader.getParent());
 
     }
 
@@ -304,7 +298,7 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
             throws Exception {
 
         Class<?> c = loader.findClass("org.apache.catalina.loader." + className);
-        assertNotNull("The loaded class should not be null.", c);
+        Assert.assertNotNull("The loaded class should not be null.", c);
 
         Method m = c.getMethod("doMethod");
 

==================================================
TestMapperPerformance.java
index 3fd74b1819..f155f106e6 100644
--- a/test/org/apache/catalina/mapper/TestMapper.java
+++ b/test/org/apache/catalina/mapper/TestMapper.java
@@ -20,13 +20,7 @@ import java.util.Arrays;
 import java.util.HashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -165,14 +159,14 @@ public class TestMapper extends LoggingBaseTest {
 
         // Check we have the right number
         // (added 17 including one host alias. Three duplicates do not increase the count.)
-        assertEquals(19, mapper.hosts.length);
+        Assert.assertEquals(19, mapper.hosts.length);
 
         // Make sure adding a duplicate *does not* overwrite
         final int iowPos = 4;
-        assertEquals("blah7", mapper.hosts[iowPos].object.getName());
+        Assert.assertEquals("blah7", mapper.hosts[iowPos].object.getName());
 
         final int qwigPos = 10;
-        assertEquals("blah14", mapper.hosts[qwigPos].object.getName());
+        Assert.assertEquals("blah14", mapper.hosts[qwigPos].object.getName());
 
         // Check for alphabetical order of host names
         String previous;
@@ -180,69 +174,69 @@ public class TestMapper extends LoggingBaseTest {
         for (int i = 1; i < mapper.hosts.length; i++) {
             previous = current;
             current = mapper.hosts[i].name;
-            assertTrue(previous.compareTo(current) < 0);
+            Assert.assertTrue(previous.compareTo(current) < 0);
         }
 
         // Check that host alias has the same data
         Mapper.MappedHost host = mapper.hosts[iowPos];
         Mapper.MappedHost alias = mapper.hosts[iowPos + 1];
-        assertEquals("iowejoiejfoiew", host.name);
-        assertEquals("iowejoiejfoiew_alias", alias.name);
-        assertFalse(host.isAlias());
-        assertTrue(alias.isAlias());
-        assertEquals(host.object, alias.object);
+        Assert.assertEquals("iowejoiejfoiew", host.name);
+        Assert.assertEquals("iowejoiejfoiew_alias", alias.name);
+        Assert.assertFalse(host.isAlias());
+        Assert.assertTrue(alias.isAlias());
+        Assert.assertEquals(host.object, alias.object);
 
         // Test addContextVersion() followed by addHost()
         Host hostZ = createHost("zzzz");
         Context contextZ = createContext("contextZ");
 
-        assertEquals(19, mapper.hosts.length);
+        Assert.assertEquals(19, mapper.hosts.length);
         mapper.addContextVersion("zzzz", hostZ, "/", "", contextZ, null, null,
                 null);
-        assertEquals(20, mapper.hosts.length);
+        Assert.assertEquals(20, mapper.hosts.length);
 
         mapper.addHost("zzzz", new String[] { "zzzz_alias1", "zzzz_alias2" },
                 hostZ);
-        assertEquals(22, mapper.hosts.length);
+        Assert.assertEquals(22, mapper.hosts.length);
 
-        assertEquals("zzzz", mapper.hosts[19].name);
-        assertEquals("zzzz_alias1", mapper.hosts[20].name);
-        assertEquals("zzzz_alias2", mapper.hosts[21].name);
-        assertEquals(2, mapper.hosts[19].getAliases().size());
-        assertSame(contextZ,
+        Assert.assertEquals("zzzz", mapper.hosts[19].name);
+        Assert.assertEquals("zzzz_alias1", mapper.hosts[20].name);
+        Assert.assertEquals("zzzz_alias2", mapper.hosts[21].name);
+        Assert.assertEquals(2, mapper.hosts[19].getAliases().size());
+        Assert.assertSame(contextZ,
                 mapper.hosts[19].contextList.contexts[0].versions[0].object);
-        assertSame(contextZ,
+        Assert.assertSame(contextZ,
                 mapper.hosts[21].contextList.contexts[0].versions[0].object);
     }
 
     @Test
     public void testRemoveHost() {
-        assertEquals(19, mapper.hosts.length);
+        Assert.assertEquals(19, mapper.hosts.length);
         mapper.removeHostAlias("iowejoiejfoiew");
         mapper.removeHost("iowejoiejfoiew_alias");
-        assertEquals(19, mapper.hosts.length); // No change
+        Assert.assertEquals(19, mapper.hosts.length); // No change
         mapper.removeHostAlias("iowejoiejfoiew_alias");
-        assertEquals(18, mapper.hosts.length); // Removed
+        Assert.assertEquals(18, mapper.hosts.length); // Removed
 
         mapper.addHostAlias("iowejoiejfoiew", "iowejoiejfoiew_alias");
-        assertEquals(19, mapper.hosts.length);
+        Assert.assertEquals(19, mapper.hosts.length);
 
         final int iowPos = 4;
         Mapper.MappedHost hostMapping = mapper.hosts[iowPos];
         Mapper.MappedHost aliasMapping = mapper.hosts[iowPos + 1];
-        assertEquals("iowejoiejfoiew_alias", aliasMapping.name);
-        assertTrue(aliasMapping.isAlias());
-        assertSame(hostMapping.object, aliasMapping.object);
+        Assert.assertEquals("iowejoiejfoiew_alias", aliasMapping.name);
+        Assert.assertTrue(aliasMapping.isAlias());
+        Assert.assertSame(hostMapping.object, aliasMapping.object);
 
-        assertEquals("iowejoiejfoiew", hostMapping.getRealHostName());
-        assertEquals("iowejoiejfoiew", aliasMapping.getRealHostName());
-        assertSame(hostMapping, hostMapping.getRealHost());
-        assertSame(hostMapping, aliasMapping.getRealHost());
+        Assert.assertEquals("iowejoiejfoiew", hostMapping.getRealHostName());
+        Assert.assertEquals("iowejoiejfoiew", aliasMapping.getRealHostName());
+        Assert.assertSame(hostMapping, hostMapping.getRealHost());
+        Assert.assertSame(hostMapping, aliasMapping.getRealHost());
 
         mapper.removeHost("iowejoiejfoiew");
-        assertEquals(17, mapper.hosts.length); // Both host and alias removed
+        Assert.assertEquals(17, mapper.hosts.length); // Both host and alias removed
         for (Mapper.MappedHost host : mapper.hosts) {
-            assertTrue(host.name, !host.name.startsWith("iowejoiejfoiew"));
+            Assert.assertTrue(host.name, !host.name.startsWith("iowejoiejfoiew"));
         }
     }
 
@@ -261,13 +255,13 @@ public class TestMapper extends LoggingBaseTest {
         uri.getCharChunk().setLimit(-1);
 
         mapper.map(host, uri, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context2", mappingData.context.getName());
-        assertEquals("wrapper5", mappingData.wrapper.getName());
-        assertEquals("/foo/bar", mappingData.contextPath.toString());
-        assertEquals("/blah/bobou", mappingData.wrapperPath.toString());
-        assertEquals("/foo", mappingData.pathInfo.toString());
-        assertTrue(mappingData.redirectPath.isNull());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context2", mappingData.context.getName());
+        Assert.assertEquals("wrapper5", mappingData.wrapper.getName());
+        Assert.assertEquals("/foo/bar", mappingData.contextPath.toString());
+        Assert.assertEquals("/blah/bobou", mappingData.wrapperPath.toString());
+        Assert.assertEquals("/foo", mappingData.pathInfo.toString());
+        Assert.assertTrue(mappingData.redirectPath.isNull());
 
         mappingData.recycle();
         uri.recycle();
@@ -275,13 +269,13 @@ public class TestMapper extends LoggingBaseTest {
         uri.toChars();
         uri.getCharChunk().setLimit(-1);
         mapper.map(host, uri, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context3", mappingData.context.getName());
-        assertEquals("wrapper7", mappingData.wrapper.getName());
-        assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
-        assertEquals("/bobou", mappingData.wrapperPath.toString());
-        assertEquals("/foo", mappingData.pathInfo.toString());
-        assertTrue(mappingData.redirectPath.isNull());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context3", mappingData.context.getName());
+        Assert.assertEquals("wrapper7", mappingData.wrapper.getName());
+        Assert.assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
+        Assert.assertEquals("/bobou", mappingData.wrapperPath.toString());
+        Assert.assertEquals("/foo", mappingData.pathInfo.toString());
+        Assert.assertTrue(mappingData.redirectPath.isNull());
 
         mappingData.recycle();
         uri.recycle();
@@ -289,26 +283,26 @@ public class TestMapper extends LoggingBaseTest {
         uri.toChars();
         uri.getCharChunk().setLimit(-1);
         mapper.map(wildcard, uri, null, mappingData);
-        assertEquals("blah16", mappingData.host.getName());
-        assertEquals("context4", mappingData.context.getName());
-        assertEquals("context4-defaultWrapper", mappingData.wrapper.getName());
-        assertEquals("", mappingData.contextPath.toString());
-        assertEquals("/foo/bar/bla/bobou/foo", mappingData.wrapperPath.toString());
-        assertTrue(mappingData.pathInfo.isNull());
-        assertTrue(mappingData.redirectPath.isNull());
+        Assert.assertEquals("blah16", mappingData.host.getName());
+        Assert.assertEquals("context4", mappingData.context.getName());
+        Assert.assertEquals("context4-defaultWrapper", mappingData.wrapper.getName());
+        Assert.assertEquals("", mappingData.contextPath.toString());
+        Assert.assertEquals("/foo/bar/bla/bobou/foo", mappingData.wrapperPath.toString());
+        Assert.assertTrue(mappingData.pathInfo.isNull());
+        Assert.assertTrue(mappingData.redirectPath.isNull());
 
         mappingData.recycle();
         uri.setString("/foo/bar/bla/bobou/foo");
         uri.toChars();
         uri.getCharChunk().setLimit(-1);
         mapper.map(alias, uri, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context3", mappingData.context.getName());
-        assertEquals("wrapper7", mappingData.wrapper.getName());
-        assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
-        assertEquals("/bobou", mappingData.wrapperPath.toString());
-        assertEquals("/foo", mappingData.pathInfo.toString());
-        assertTrue(mappingData.redirectPath.isNull());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context3", mappingData.context.getName());
+        Assert.assertEquals("wrapper7", mappingData.wrapper.getName());
+        Assert.assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
+        Assert.assertEquals("/bobou", mappingData.wrapperPath.toString());
+        Assert.assertEquals("/foo", mappingData.pathInfo.toString());
+        Assert.assertTrue(mappingData.redirectPath.isNull());
     }
 
     @Test
@@ -326,26 +320,26 @@ public class TestMapper extends LoggingBaseTest {
 
         // Verifying configuration created by setUp()
         Mapper.MappedHost mappedHost = mapper.hosts[iowPos];
-        assertEquals(hostName, mappedHost.name);
+        Assert.assertEquals(hostName, mappedHost.name);
         Mapper.MappedContext mappedContext = mappedHost.contextList.contexts[contextPos];
-        assertEquals(contextPath, mappedContext.name);
-        assertEquals(1, mappedContext.versions.length);
-        assertEquals("0", mappedContext.versions[0].name);
+        Assert.assertEquals(contextPath, mappedContext.name);
+        Assert.assertEquals(1, mappedContext.versions.length);
+        Assert.assertEquals("0", mappedContext.versions[0].name);
         Host oldHost = mappedHost.object;
         Context oldContext = mappedContext.versions[0].object;
-        assertEquals("context2", oldContext.getName());
+        Assert.assertEquals("context2", oldContext.getName());
 
         Context oldContext1 = mappedHost.contextList.contexts[contextPos - 1].versions[0].object;
-        assertEquals("context1", oldContext1.getName());
+        Assert.assertEquals("context1", oldContext1.getName());
 
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context2", mappingData.context.getName());
-        assertEquals("wrapper5", mappingData.wrapper.getName());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context2", mappingData.context.getName());
+        Assert.assertEquals("wrapper5", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(oldContext, uriMB, mappingData);
-        assertEquals("wrapper5", mappingData.wrapper.getName());
+        Assert.assertEquals("wrapper5", mappingData.wrapper.getName());
 
         Context newContext = createContext("newContext");
         mapper.addContextVersion(
@@ -359,40 +353,40 @@ public class TestMapper extends LoggingBaseTest {
                 Arrays.asList(new WrapperMappingInfo[] { new WrapperMappingInfo(
                         "/", createWrapper("newContext-default"), false, false) }));
 
-        assertEquals(2, mappedContext.versions.length);
-        assertEquals("0", mappedContext.versions[0].name);
-        assertEquals("1", mappedContext.versions[1].name);
+        Assert.assertEquals(2, mappedContext.versions.length);
+        Assert.assertEquals("0", mappedContext.versions[0].name);
+        Assert.assertEquals("1", mappedContext.versions[1].name);
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("newContext", mappingData.context.getName());
-        assertEquals("newContext-default", mappingData.wrapper.getName());
+        Assert.assertEquals("newContext", mappingData.context.getName());
+        Assert.assertEquals("newContext-default", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(newContext, uriMB, mappingData);
-        assertEquals("newContext-default", mappingData.wrapper.getName());
+        Assert.assertEquals("newContext-default", mappingData.wrapper.getName());
 
         mapper.removeContextVersion(oldContext, hostName, contextPath, "0");
 
-        assertEquals(1, mappedContext.versions.length);
-        assertEquals("1", mappedContext.versions[0].name);
+        Assert.assertEquals(1, mappedContext.versions.length);
+        Assert.assertEquals("1", mappedContext.versions[0].name);
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("newContext", mappingData.context.getName());
-        assertEquals("newContext-default", mappingData.wrapper.getName());
+        Assert.assertEquals("newContext", mappingData.context.getName());
+        Assert.assertEquals("newContext-default", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(newContext, uriMB, mappingData);
-        assertEquals("newContext-default", mappingData.wrapper.getName());
+        Assert.assertEquals("newContext-default", mappingData.wrapper.getName());
 
         mapper.removeContextVersion(oldContext, hostName, contextPath, "1");
 
-        assertNotSame(mappedContext, mappedHost.contextList.contexts[contextPos]);
-        assertEquals("/foo/bar/bla", mappedHost.contextList.contexts[contextPos].name);
+        Assert.assertNotSame(mappedContext, mappedHost.contextList.contexts[contextPos]);
+        Assert.assertEquals("/foo/bar/bla", mappedHost.contextList.contexts[contextPos].name);
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("context1", mappingData.context.getName());
-        assertEquals("context1-defaultWrapper", mappingData.wrapper.getName());
+        Assert.assertEquals("context1", mappingData.context.getName());
+        Assert.assertEquals("context1-defaultWrapper", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(oldContext1, uriMB, mappingData);
-        assertEquals("context1-defaultWrapper", mappingData.wrapper.getName());
+        Assert.assertEquals("context1-defaultWrapper", mappingData.wrapper.getName());
 
         mapper.addContextVersion(
                 hostName,
@@ -406,16 +400,16 @@ public class TestMapper extends LoggingBaseTest {
                         "/", createWrapper("newContext-defaultWrapper2"), false, false) }));
         mappedContext = mappedHost.contextList.contexts[contextPos];
 
-        assertEquals(contextPath, mappedContext.name);
-        assertEquals(1, mappedContext.versions.length);
-        assertEquals("0", mappedContext.versions[0].name);
+        Assert.assertEquals(contextPath, mappedContext.name);
+        Assert.assertEquals(1, mappedContext.versions.length);
+        Assert.assertEquals("0", mappedContext.versions[0].name);
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("newContext", mappingData.context.getName());
-        assertEquals("newContext-defaultWrapper2", mappingData.wrapper.getName());
+        Assert.assertEquals("newContext", mappingData.context.getName());
+        Assert.assertEquals("newContext-defaultWrapper2", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(newContext, uriMB, mappingData);
-        assertEquals("newContext-defaultWrapper2", mappingData.wrapper.getName());
+        Assert.assertEquals("newContext-defaultWrapper2", mappingData.wrapper.getName());
     }
 
     @Test
@@ -433,26 +427,26 @@ public class TestMapper extends LoggingBaseTest {
 
         // Verifying configuration created by setUp()
         Mapper.MappedHost mappedHost = mapper.hosts[iowPos];
-        assertEquals(hostName, mappedHost.name);
+        Assert.assertEquals(hostName, mappedHost.name);
         Mapper.MappedContext mappedContext = mappedHost.contextList.contexts[contextPos];
-        assertEquals(contextPath, mappedContext.name);
-        assertEquals(1, mappedContext.versions.length);
-        assertEquals("0", mappedContext.versions[0].name);
+        Assert.assertEquals(contextPath, mappedContext.name);
+        Assert.assertEquals(1, mappedContext.versions.length);
+        Assert.assertEquals("0", mappedContext.versions[0].name);
         Host oldHost = mappedHost.object;
         Context oldContext = mappedContext.versions[0].object;
-        assertEquals("context2", oldContext.getName());
+        Assert.assertEquals("context2", oldContext.getName());
 
         Context oldContext1 = mappedHost.contextList.contexts[contextPos - 1].versions[0].object;
-        assertEquals("context1", oldContext1.getName());
+        Assert.assertEquals("context1", oldContext1.getName());
 
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context2", mappingData.context.getName());
-        assertEquals("wrapper5", mappingData.wrapper.getName());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context2", mappingData.context.getName());
+        Assert.assertEquals("wrapper5", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(oldContext, uriMB, mappingData);
-        assertEquals("wrapper5", mappingData.wrapper.getName());
+        Assert.assertEquals("wrapper5", mappingData.wrapper.getName());
 
         // Mark context as paused
         // This is what happens when context reload starts
@@ -460,14 +454,14 @@ public class TestMapper extends LoggingBaseTest {
 
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context2", mappingData.context.getName());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context2", mappingData.context.getName());
         // Wrapper is not mapped for incoming requests if context is paused
-        assertNull(mappingData.wrapper);
+        Assert.assertNull(mappingData.wrapper);
         mappingData.recycle();
         mapper.map(oldContext, uriMB, mappingData);
         // Wrapper is mapped for mapping method used by forward or include dispatch
-        assertEquals("wrapper5", mappingData.wrapper.getName());
+        Assert.assertEquals("wrapper5", mappingData.wrapper.getName());
 
         // Re-add the same context, but different list of wrappers
         // This is what happens when context reload completes
@@ -483,18 +477,18 @@ public class TestMapper extends LoggingBaseTest {
                         "/", createWrapper("newDefaultWrapper"), false, false) }));
 
         mappedContext = mappedHost.contextList.contexts[contextPos];
-        assertEquals(contextPath, mappedContext.name);
-        assertEquals(1, mappedContext.versions.length);
-        assertEquals("0", mappedContext.versions[0].name);
+        Assert.assertEquals(contextPath, mappedContext.name);
+        Assert.assertEquals(1, mappedContext.versions.length);
+        Assert.assertEquals("0", mappedContext.versions[0].name);
 
         mappingData.recycle();
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("blah7", mappingData.host.getName());
-        assertEquals("context2", mappingData.context.getName());
-        assertEquals("newDefaultWrapper", mappingData.wrapper.getName());
+        Assert.assertEquals("blah7", mappingData.host.getName());
+        Assert.assertEquals("context2", mappingData.context.getName());
+        Assert.assertEquals("newDefaultWrapper", mappingData.wrapper.getName());
         mappingData.recycle();
         mapper.map(oldContext, uriMB, mappingData);
-        assertEquals("newDefaultWrapper", mappingData.wrapper.getName());
+        Assert.assertEquals("newDefaultWrapper", mappingData.wrapper.getName());
     }
 
     @Test
@@ -545,24 +539,24 @@ public class TestMapper extends LoggingBaseTest {
         uriMB.setChars(uri, 0, uri.length);
 
         mapper.map(hostMB, uriMB, null, mappingData);
-        assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
+        Assert.assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
 
         mappingData.recycle();
         uriMB.setChars(uri, 0, uri.length);
         mapper.map(aliasMB, uriMB, null, mappingData);
-        assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
+        Assert.assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
 
         t.start();
         while (running.get()) {
             mappingData.recycle();
             uriMB.setChars(uri, 0, uri.length);
             mapper.map(hostMB, uriMB, null, mappingData);
-            assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
+            Assert.assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
 
             mappingData.recycle();
             uriMB.setChars(uri, 0, uri.length);
             mapper.map(aliasMB, uriMB, null, mappingData);
-            assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
+            Assert.assertEquals("/foo/bar/bla", mappingData.contextPath.toString());
         }
     }
 }

==================================================
TestRegistration.java
index 2683362d7a..e31b7b0bae 100644
--- a/test/org/apache/catalina/mapper/TestMapperPerformance.java
+++ b/test/org/apache/catalina/mapper/TestMapperPerformance.java
@@ -16,8 +16,7 @@
  */
 package org.apache.catalina.mapper;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -55,7 +54,7 @@ public class TestMapperPerformance extends TestMapper {
             time = testPerformanceImpl(requestedHostName);
             log.warn("testPerformance() test rerun completed in " + time + " ms");
         }
-        assertTrue(String.valueOf(time), time < maxTime);
+        Assert.assertTrue(String.valueOf(time), time < maxTime);
     }
 
     private long testPerformanceImpl(String requestedHostName) throws Exception {

==================================================
TestDefaultServlet.java
index e357a855f3..c0a311d97c 100644
--- a/test/org/apache/catalina/mbeans/TestRegistration.java
+++ b/test/org/apache/catalina/mbeans/TestRegistration.java
@@ -28,10 +28,6 @@ import javax.management.MBeanServer;
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -152,16 +148,16 @@ public class TestRegistration extends TomcatBaseTest {
         // Verify there are no Catalina or Tomcat MBeans
         Set<ObjectName> onames = mbeanServer.queryNames(new ObjectName("Catalina:*"), null);
         log.info(MBeanDumper.dumpBeans(mbeanServer, onames));
-        assertEquals("Unexpected: " + onames, 0, onames.size());
+        Assert.assertEquals("Unexpected: " + onames, 0, onames.size());
         onames = mbeanServer.queryNames(new ObjectName("Tomcat:*"), null);
         log.info(MBeanDumper.dumpBeans(mbeanServer, onames));
-        assertEquals("Unexpected: " + onames, 0, onames.size());
+        Assert.assertEquals("Unexpected: " + onames, 0, onames.size());
 
         final Tomcat tomcat = getTomcatInstance();
         final File contextDir = new File(getTemporaryDirectory(), "webappFoo");
         addDeleteOnTearDown(contextDir);
         if (!contextDir.mkdirs() && !contextDir.isDirectory()) {
-            fail("Failed to create: [" + contextDir.toString() + "]");
+            Assert.fail("Failed to create: [" + contextDir.toString() + "]");
         }
         Context ctx = tomcat.addContext(contextName, contextDir.getAbsolutePath());
 
@@ -177,7 +173,7 @@ public class TestRegistration extends TomcatBaseTest {
         // Verify there are no Catalina MBeans
         onames = mbeanServer.queryNames(new ObjectName("Catalina:*"), null);
         log.info(MBeanDumper.dumpBeans(mbeanServer, onames));
-        assertEquals("Found: " + onames, 0, onames.size());
+        Assert.assertEquals("Found: " + onames, 0, onames.size());
 
         // Verify there are the correct Tomcat MBeans
         onames = mbeanServer.queryNames(new ObjectName("Tomcat:*"), null);
@@ -207,18 +203,18 @@ public class TestRegistration extends TomcatBaseTest {
         // Did we find all expected MBeans?
         ArrayList<String> missing = new ArrayList<>(expected);
         missing.removeAll(found);
-        assertTrue("Missing Tomcat MBeans: " + missing, missing.isEmpty());
+        Assert.assertTrue("Missing Tomcat MBeans: " + missing, missing.isEmpty());
 
         // Did we find any unexpected MBeans?
         List<String> additional = found;
         additional.removeAll(expected);
-        assertTrue("Unexpected Tomcat MBeans: " + additional, additional.isEmpty());
+        Assert.assertTrue("Unexpected Tomcat MBeans: " + additional, additional.isEmpty());
 
         tomcat.stop();
 
         // There should still be some Tomcat MBeans
         onames = mbeanServer.queryNames(new ObjectName("Tomcat:*"), null);
-        assertTrue("No Tomcat MBeans", onames.size() > 0);
+        Assert.assertTrue("No Tomcat MBeans", onames.size() > 0);
 
         // add a new host
         StandardHost host = new StandardHost();
@@ -228,7 +224,7 @@ public class TestRegistration extends TomcatBaseTest {
         final File contextDir2 = new File(getTemporaryDirectory(), "webappFoo2");
         addDeleteOnTearDown(contextDir2);
         if (!contextDir2.mkdirs() && !contextDir2.isDirectory()) {
-            fail("Failed to create: [" + contextDir2.toString() + "]");
+            Assert.fail("Failed to create: [" + contextDir2.toString() + "]");
         }
         tomcat.addContext(host, contextName + "2", contextDir2.getAbsolutePath());
 
@@ -239,10 +235,10 @@ public class TestRegistration extends TomcatBaseTest {
         // There should be no Catalina MBeans and no Tomcat MBeans
         onames = mbeanServer.queryNames(new ObjectName("Catalina:*"), null);
         log.info(MBeanDumper.dumpBeans(mbeanServer, onames));
-        assertEquals("Remaining: " + onames, 0, onames.size());
+        Assert.assertEquals("Remaining: " + onames, 0, onames.size());
         onames = mbeanServer.queryNames(new ObjectName("Tomcat:*"), null);
         log.info(MBeanDumper.dumpBeans(mbeanServer, onames));
-        assertEquals("Remaining: " + onames, 0, onames.size());
+        Assert.assertEquals("Remaining: " + onames, 0, onames.size());
     }
 
     /*

==================================================
TestWebdavServlet.java
index ad7d2b851e..36d0303af2 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -31,16 +31,10 @@ import java.util.TimeZone;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
 import static org.apache.catalina.startup.SimpleHttpClient.CRLF;
-
 import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.startup.SimpleHttpClient;
@@ -72,23 +66,23 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/web.xml", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/MANIFEST.MF", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
     }
 
@@ -130,11 +124,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "Accept-Encoding: gzip, br" + CRLF + CRLF });
         gzipClient.connect();
         gzipClient.processRequest();
-        assertTrue(gzipClient.isResponse200());
+        Assert.assertTrue(gzipClient.isResponse200());
         List<String> responseHeaders = gzipClient.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: gzip"));
-        assertTrue(responseHeaders.contains("Content-Length: " + gzipSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: gzip"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + gzipSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
 
         gzipClient.reset();
         gzipClient.setRequest(new String[] {
@@ -143,12 +137,12 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "Connection: Close" + CRLF+ CRLF });
         gzipClient.connect();
         gzipClient.processRequest();
-        assertTrue(gzipClient.isResponse200());
+        Assert.assertTrue(gzipClient.isResponse200());
         responseHeaders = gzipClient.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Type: text/html"));
-        assertFalse(responseHeaders.contains("Content-Encoding: gzip"));
-        assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Type: text/html"));
+        Assert.assertFalse(responseHeaders.contains("Content-Encoding: gzip"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
     }
 
     /*
@@ -186,11 +180,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: br, gzip" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         List<String> responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: br"));
-        assertTrue(responseHeaders.contains("Content-Length: " + brSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: br"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + brSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
 
         client.reset();
         client.setRequest(new String[] {
@@ -199,12 +193,12 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Connection: Close" + CRLF+ CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Type: text/html"));
-        assertFalse(responseHeaders.contains("Content-Encoding"));
-        assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Type: text/html"));
+        Assert.assertFalse(responseHeaders.contains("Content-Encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
     }
 
     /*
@@ -241,11 +235,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: br, gzip ; q = 0.5 , custom" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         List<String> responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: custom"));
-        assertTrue(responseHeaders.contains("Content-Length: " + brSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: custom"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + brSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
 
         client.reset();
         client.setRequest(new String[] {
@@ -255,11 +249,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: br;q=1,gzip,custom" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: gzip"));
-        assertTrue(responseHeaders.contains("Content-Length: " + gzSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: gzip"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + gzSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
     }
 
     /*
@@ -297,11 +291,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: gzip;q=0.9,*" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         List<String> responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: br"));
-        assertTrue(responseHeaders.contains("Content-Length: " + brSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: br"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + brSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
 
         client.reset();
         client.setRequest(new String[] {
@@ -311,11 +305,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: gzip;q=0.9,br;q=0,identity," + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         responseHeaders = client.getResponseHeaders();
-        assertFalse(responseHeaders.contains("Content-Encoding"));
-        assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertFalse(responseHeaders.contains("Content-Encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
     }
 
     /*
@@ -352,11 +346,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: gzip, deflate, br" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         List<String> responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: br"));
-        assertTrue(responseHeaders.contains("Content-Length: " + brSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: br"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + brSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
 
         // Chrome 50 Accept-Encoding
         client.reset();
@@ -367,11 +361,11 @@ public class TestDefaultServlet extends TomcatBaseTest {
                         "Accept-Encoding: gzip, deflate, sdch, br" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         responseHeaders = client.getResponseHeaders();
-        assertTrue(responseHeaders.contains("Content-Encoding: br"));
-        assertTrue(responseHeaders.contains("Content-Length: " + brSize));
-        assertTrue(responseHeaders.contains("Vary: accept-encoding"));
+        Assert.assertTrue(responseHeaders.contains("Content-Encoding: br"));
+        Assert.assertTrue(responseHeaders.contains("Content-Length: " + brSize));
+        Assert.assertTrue(responseHeaders.contains("Vary: accept-encoding"));
     }
 
     /*
@@ -406,23 +400,23 @@ public class TestDefaultServlet extends TomcatBaseTest {
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/WEB-INF/web.xml", res, null);
 
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/WEB-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/WEB-INF/", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/META-INF/MANIFEST.MF", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/META-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         // Make sure DefaultServlet is serving resources relative to the
         // context root regardless of where the it is mapped
@@ -430,18 +424,18 @@ public class TestDefaultServlet extends TomcatBaseTest {
         final ByteChunk rootResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/index.html", rootResource, null);
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 
         final ByteChunk subpathResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/servlets/index.html", subpathResource, null);
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 
-        assertFalse(rootResource.toString().equals(subpathResource.toString()));
+        Assert.assertFalse(rootResource.toString().equals(subpathResource.toString()));
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/static/index.html", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
     }
 
@@ -479,8 +473,8 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "GET /MyApp/missing HTTP/1.0" +CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse404());
-        assertEquals("It is 404.html", client.getResponseBody());
+        Assert.assertTrue(client.isResponse404());
+        Assert.assertEquals("It is 404.html", client.getResponseBody());
 
         SimpleDateFormat format = new SimpleDateFormat(
                 "EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);
@@ -498,8 +492,8 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "If-Modified-Since: " + tomorrow + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse404());
-        assertEquals("It is 404.html", client.getResponseBody());
+        Assert.assertTrue(client.isResponse404());
+        Assert.assertEquals("It is 404.html", client.getResponseBody());
 
         // https://bz.apache.org/bugzilla/show_bug.cgi?id=50413#c6
         //
@@ -511,8 +505,8 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "Range: bytes=0-100" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse404());
-        assertEquals("It is 404.html", client.getResponseBody());
+        Assert.assertTrue(client.isResponse404());
+        Assert.assertEquals("It is 404.html", client.getResponseBody());
     }
 
     /*
@@ -525,7 +519,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
         File webInf = new File(appDir, "WEB-INF");
         addDeleteOnTearDown(appDir);
         if (!webInf.mkdirs() && !webInf.isDirectory()) {
-            fail("Unable to create directory [" + webInf + "]");
+            Assert.fail("Unable to create directory [" + webInf + "]");
         }
 
         File webxml = new File(appDir, "WEB-INF/web.xml");
@@ -555,7 +549,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "GET /MyApp/missing HTTP/1.0" + CRLF + CRLF });
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse404());
+        Assert.assertTrue(client.isResponse404());
     }
 
     /*

==================================================
Benchmarks.java
index 775e84a477..781ba7ddd3 100644
--- a/test/org/apache/catalina/servlets/TestWebdavServlet.java
+++ b/test/org/apache/catalina/servlets/TestWebdavServlet.java
@@ -23,8 +23,7 @@ import java.util.Map;
 
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.Tomcat;
@@ -57,23 +56,23 @@ public class TestWebdavServlet extends TomcatBaseTest {
 
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/web.xml", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/WEB-INF/", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/MANIFEST.MF", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/META-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
     }
 
@@ -106,41 +105,41 @@ public class TestWebdavServlet extends TomcatBaseTest {
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/WEB-INF/web.xml", res, null);
 
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/WEB-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/WEB-INF/", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/META-INF/MANIFEST.MF", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/META-INF/doesntexistanywhere", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
         // Make sure WebdavServlet is serving resources
         // relative to the map/mount point
         final ByteChunk rootResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/index.html", rootResource, null);
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 
         final ByteChunk subpathResource = new ByteChunk();
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/index.html", subpathResource, null);
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 
-        assertEquals(rootResource.toString(), subpathResource.toString());
+        Assert.assertEquals(rootResource.toString(), subpathResource.toString());
 
         rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/webdav/static/index.html", res, null);
-        assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
+        Assert.assertEquals(HttpServletResponse.SC_NOT_FOUND, rc);
 
     }
 

==================================================
Threading.java
index 704a4fa641..9aadb613d7 100644
--- a/test/org/apache/catalina/session/Benchmarks.java
+++ b/test/org/apache/catalina/session/Benchmarks.java
@@ -22,8 +22,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.security.SecureRandom;
 
-import static org.junit.Assert.fail;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -108,7 +107,7 @@ public class Benchmarks {
                 threads[i].join();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-                fail(e.getMessage());
+                Assert.fail(e.getMessage());
             }
         }
         long end = System.currentTimeMillis();
@@ -206,7 +205,7 @@ public class Benchmarks {
                 threads[i].join();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-                fail(e.getMessage());
+                Assert.fail(e.getMessage());
             }
         }
         long end = System.currentTimeMillis();
@@ -291,7 +290,7 @@ public class Benchmarks {
                 threads[i].join();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-                fail(e.getMessage());
+                Assert.fail(e.getMessage());
             }
         }
         long end = System.currentTimeMillis();

==================================================
LoggingBaseTest.java
index e0bc097d51..89baac378a 100644
--- a/test/org/apache/catalina/session/Threading.java
+++ b/test/org/apache/catalina/session/Threading.java
@@ -20,8 +20,7 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 
-import static org.junit.Assert.fail;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 /**
@@ -82,11 +81,11 @@ public class Threading {
             try {
                 threads[i].join();
                 if (runnables[i].isfailed()) {
-                    fail();
+                    Assert.fail();
                 }
             } catch (InterruptedException e) {
                 e.printStackTrace();
-                fail(e.getMessage());
+                Assert.fail(e.getMessage());
             }
         }
         long end = System.currentTimeMillis();

==================================================
TestBootstrap.java
index 61761c3119..5bc37585e7 100644
--- a/test/org/apache/catalina/startup/LoggingBaseTest.java
+++ b/test/org/apache/catalina/startup/LoggingBaseTest.java
@@ -24,10 +24,9 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.logging.LogManager;
 
-import static org.junit.Assert.fail;
-
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Rule;
@@ -117,7 +116,7 @@ public abstract class LoggingBaseTest {
         // Create catalina.base directory
         File tempBase = new File(System.getProperty("tomcat.test.temp", "output/tmp"));
         if (!tempBase.mkdirs() && !tempBase.isDirectory()) {
-            fail("Unable to create base temporary directory for tests");
+            Assert.fail("Unable to create base temporary directory for tests");
         }
         Path tempBasePath = FileSystems.getDefault().getPath(tempBase.getAbsolutePath());
         tempDir = Files.createTempDirectory(tempBasePath, "test").toFile();

==================================================
TestContextConfigAnnotation.java
index 51ae232b27..476ad796d2 100644
--- a/test/org/apache/catalina/startup/TestBootstrap.java
+++ b/test/org/apache/catalina/startup/TestBootstrap.java
@@ -16,8 +16,7 @@
  */
 package org.apache.catalina.startup;
 
-import static org.junit.Assert.assertArrayEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 
@@ -176,6 +175,6 @@ public class TestBootstrap {
     private void doTest(String input, String... expected) {
         String[] result = Bootstrap.getPaths(input);
 
-        assertArrayEquals(expected, result);
+        Assert.assertArrayEquals(expected, result);
     }
 }

==================================================
TestListener.java
index a88f383966..1321c9b1ec 100644
--- a/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
+++ b/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
@@ -31,12 +31,7 @@ import javax.servlet.ServletContainerInitializer;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -63,23 +58,23 @@ public class TestContextConfigAnnotation {
         ContextConfig config = new ContextConfig();
         File pFile = paramClassResource(
                 "org/apache/catalina/startup/ParamServlet");
-        assertTrue(pFile.exists());
+        Assert.assertTrue(pFile.exists());
         config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
         ServletDef servletDef = webxml.getServlets().get("param");
-        assertNotNull(servletDef);
-        assertEquals("Hello", servletDef.getParameterMap().get("foo"));
-        assertEquals("World!", servletDef.getParameterMap().get("bar"));
-        assertEquals("param", webxml.getServletMappings().get(
+        Assert.assertNotNull(servletDef);
+        Assert.assertEquals("Hello", servletDef.getParameterMap().get("foo"));
+        Assert.assertEquals("World!", servletDef.getParameterMap().get("bar"));
+        Assert.assertEquals("param", webxml.getServletMappings().get(
                 "/annotation/overwrite"));
 
-        assertEquals("param", servletDef.getDescription());
-        assertEquals("param", servletDef.getDisplayName());
-        assertEquals("paramLarge.png", servletDef.getLargeIcon());
-        assertEquals("paramSmall.png", servletDef.getSmallIcon());
-        assertEquals(Boolean.FALSE, servletDef.getAsyncSupported());
-        assertEquals(Integer.valueOf(0), servletDef.getLoadOnStartup());
-        assertNull(servletDef.getEnabled());
-        assertNull(servletDef.getJspFile());
+        Assert.assertEquals("param", servletDef.getDescription());
+        Assert.assertEquals("param", servletDef.getDisplayName());
+        Assert.assertEquals("paramLarge.png", servletDef.getLargeIcon());
+        Assert.assertEquals("paramSmall.png", servletDef.getSmallIcon());
+        Assert.assertEquals(Boolean.FALSE, servletDef.getAsyncSupported());
+        Assert.assertEquals(Integer.valueOf(0), servletDef.getLoadOnStartup());
+        Assert.assertNull(servletDef.getEnabled());
+        Assert.assertNull(servletDef.getJspFile());
 
     }
 
@@ -103,25 +98,25 @@ public class TestContextConfigAnnotation {
         ContextConfig config = new ContextConfig();
         File pFile = paramClassResource(
                 "org/apache/catalina/startup/ParamServlet");
-        assertTrue(pFile.exists());
+        Assert.assertTrue(pFile.exists());
         config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
 
-        assertEquals(servletDef, webxml.getServlets().get("param"));
+        Assert.assertEquals(servletDef, webxml.getServlets().get("param"));
 
-        assertEquals("tomcat", servletDef.getParameterMap().get("foo"));
-        assertEquals("param", webxml.getServletMappings().get("/param"));
+        Assert.assertEquals("tomcat", servletDef.getParameterMap().get("foo"));
+        Assert.assertEquals("param", webxml.getServletMappings().get("/param"));
         // annotation mapping not added s. Servlet Spec 3.0 (Nov 2009)
         // 8.2.3.3.iv page 81
-        assertNull(webxml.getServletMappings().get("/annotation/overwrite"));
-
-        assertEquals("Description", servletDef.getDescription());
-        assertEquals("DisplayName", servletDef.getDisplayName());
-        assertEquals("LargeIcon", servletDef.getLargeIcon());
-        assertEquals("SmallIcon", servletDef.getSmallIcon());
-        assertEquals(Boolean.TRUE, servletDef.getAsyncSupported());
-        assertEquals(Integer.valueOf(1), servletDef.getLoadOnStartup());
-        assertNull(servletDef.getEnabled());
-        assertNull(servletDef.getJspFile());
+        Assert.assertNull(webxml.getServletMappings().get("/annotation/overwrite"));
+
+        Assert.assertEquals("Description", servletDef.getDescription());
+        Assert.assertEquals("DisplayName", servletDef.getDisplayName());
+        Assert.assertEquals("LargeIcon", servletDef.getLargeIcon());
+        Assert.assertEquals("SmallIcon", servletDef.getSmallIcon());
+        Assert.assertEquals(Boolean.TRUE, servletDef.getAsyncSupported());
+        Assert.assertEquals(Integer.valueOf(1), servletDef.getLoadOnStartup());
+        Assert.assertNull(servletDef.getEnabled());
+        Assert.assertNull(servletDef.getJspFile());
     }
 
     @Test
@@ -131,15 +126,15 @@ public class TestContextConfigAnnotation {
         ContextConfig config = new ContextConfig();
         File pFile = paramClassResource(
                 "org/apache/catalina/startup/NoMappingParamServlet");
-        assertTrue(pFile.exists());
+        Assert.assertTrue(pFile.exists());
         config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
         ServletDef servletDef = webxml.getServlets().get("param1");
-        assertNull(servletDef);
+        Assert.assertNull(servletDef);
 
         webxml.addServletMapping("/param", "param1");
         config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
         servletDef = webxml.getServlets().get("param1");
-        assertNull(servletDef);
+        Assert.assertNull(servletDef);
 
     }
 
@@ -158,13 +153,13 @@ public class TestContextConfigAnnotation {
         ContextConfig config = new ContextConfig();
         File pFile = paramClassResource(
                 "org/apache/catalina/startup/NoMappingParamServlet");
-        assertTrue(pFile.exists());
+        Assert.assertTrue(pFile.exists());
         config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
-        assertEquals("tomcat", servletDef.getParameterMap().get("foo"));
-        assertEquals("World!", servletDef.getParameterMap().get("bar"));
+        Assert.assertEquals("tomcat", servletDef.getParameterMap().get("foo"));
+        Assert.assertEquals("World!", servletDef.getParameterMap().get("bar"));
         ServletDef servletDef1 = webxml.getServlets().get("param1");
-        assertNotNull(servletDef1);
-        assertEquals(servletDef, servletDef1);
+        Assert.assertNotNull(servletDef1);
+        Assert.assertEquals(servletDef, servletDef1);
     }
 
     @Test
@@ -174,15 +169,15 @@ public class TestContextConfigAnnotation {
         ContextConfig config = new ContextConfig();
         File pFile = paramClassResource(
                 "org/apache/catalina/startup/DuplicateMappingParamServlet");
-        assertTrue(pFile.exists());
+        Assert.assertTrue(pFile.exists());
         try {
             config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
-            fail();
+            Assert.fail();
         } catch (IllegalArgumentException ex) {
             // ignore
         }
         ServletDef servletDef = webxml.getServlets().get("param");
-        assertNull(servletDef);
+        Assert.assertNull(servletDef);
     }
 
     @Test
@@ -197,8 +192,8 @@ public class TestContextConfigAnnotation {
                 "org/apache/catalina/startup/ParamFilter");
         config.processAnnotationsFile(fFile, webxml, false, javaClassCache);
         FilterDef fdef = webxml.getFilters().get("paramFilter");
-        assertNotNull(fdef);
-        assertEquals("Servlet says: ",fdef.getParameterMap().get("message"));
+        Assert.assertNotNull(fdef);
+        Assert.assertEquals("Servlet says: ",fdef.getParameterMap().get("message"));
     }
 
     @Test
@@ -230,30 +225,30 @@ public class TestContextConfigAnnotation {
                 "org/apache/catalina/startup/ParamFilter");
         config.processAnnotationsFile(fFile, webxml, false, javaClassCache);
         FilterDef fdef = webxml.getFilters().get("paramFilter");
-        assertNotNull(fdef);
-        assertEquals(filterDef,fdef);
-        assertEquals("tomcat",fdef.getParameterMap().get("message"));
+        Assert.assertNotNull(fdef);
+        Assert.assertEquals(filterDef,fdef);
+        Assert.assertEquals("tomcat",fdef.getParameterMap().get("message"));
         Set<FilterMap> filterMappings = webxml.getFilterMappings();
-        assertTrue(filterMappings.contains(filterMap));
+        Assert.assertTrue(filterMappings.contains(filterMap));
         // annotation mapping not added s. Servlet Spec 3.0 (Nov 2009)
         // 8.2.3.3.vi page 81
         String[] urlPatterns = filterMap.getURLPatterns();
-        assertNotNull(urlPatterns);
-        assertEquals(1,urlPatterns.length);
-        assertEquals("/param1",urlPatterns[0]);
+        Assert.assertNotNull(urlPatterns);
+        Assert.assertEquals(1,urlPatterns.length);
+        Assert.assertEquals("/param1",urlPatterns[0]);
 
         // check simple Parameter
-        assertEquals("Description", fdef.getDescription());
-        assertEquals("DisplayName", fdef.getDisplayName());
-        assertEquals("LargeIcon", fdef.getLargeIcon());
-        assertEquals("SmallIcon", fdef.getSmallIcon());
+        Assert.assertEquals("Description", fdef.getDescription());
+        Assert.assertEquals("DisplayName", fdef.getDisplayName());
+        Assert.assertEquals("LargeIcon", fdef.getLargeIcon());
+        Assert.assertEquals("SmallIcon", fdef.getSmallIcon());
         // FIXME: Strange why servletDef is Boolean and FilterDef is String?
-        assertEquals("true", fdef.getAsyncSupported());
+        Assert.assertEquals("true", fdef.getAsyncSupported());
 
         String[] dis = filterMap.getDispatcherNames();
-        assertEquals(2, dis.length);
-        assertEquals(DispatcherType.ERROR.toString(),dis[0]);
-        assertEquals(DispatcherType.ASYNC.toString(),dis[1]);
+        Assert.assertEquals(2, dis.length);
+        Assert.assertEquals(DispatcherType.ERROR.toString(),dis[0]);
+        Assert.assertEquals(DispatcherType.ASYNC.toString(),dis[1]);
 
     }
 
@@ -264,15 +259,15 @@ public class TestContextConfigAnnotation {
         ContextConfig config = new ContextConfig();
         File pFile = paramClassResource(
                 "org/apache/catalina/startup/DuplicateMappingParamFilter");
-        assertTrue(pFile.exists());
+        Assert.assertTrue(pFile.exists());
         try {
             config.processAnnotationsFile(pFile, webxml, false, javaClassCache);
-            fail();
+            Assert.fail();
         } catch (IllegalArgumentException ex) {
             // ignore
         }
         FilterDef filterDef = webxml.getFilters().get("paramD");
-        assertNull(filterDef);
+        Assert.assertNull(filterDef);
     }
 
     @Test
@@ -318,9 +313,9 @@ public class TestContextConfigAnnotation {
         config.processAnnotationsFile(file, ignore, false, javaClassCache);
 
         // Check right number of classes were noted to be handled
-        assertEquals(0, config.initializerClassMap.get(sciNone).size());
-        assertEquals(2, config.initializerClassMap.get(sciServlet).size());
-        assertEquals(4, config.initializerClassMap.get(sciObject).size());
+        Assert.assertEquals(0, config.initializerClassMap.get(sciNone).size());
+        Assert.assertEquals(2, config.initializerClassMap.get(sciServlet).size());
+        Assert.assertEquals(4, config.initializerClassMap.get(sciObject).size());
     }
 
     private static final class SCI implements ServletContainerInitializer {
@@ -369,7 +364,7 @@ public class TestContextConfigAnnotation {
      */
     private File paramClassResource(String className) throws URISyntaxException {
         URL url = getClass().getClassLoader().getResource(className + ".class");
-        assertNotNull(url);
+        Assert.assertNotNull(url);
 
         File file = new File(url.toURI());
         return file;

==================================================
TestTomcat.java
index 91f5fae755..0d90d8e1aa 100644
--- a/test/org/apache/catalina/startup/TestListener.java
+++ b/test/org/apache/catalina/startup/TestListener.java
@@ -24,9 +24,7 @@ import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
 import javax.servlet.ServletException;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -47,7 +45,7 @@ public class TestListener extends TomcatBaseTest {
 
         context.addServletContainerInitializer(new SCI(), null);
         tomcat.start();
-        assertTrue(SCL.initialized);
+        Assert.assertTrue(SCL.initialized);
     }
 
     /*
@@ -68,7 +66,7 @@ public class TestListener extends TomcatBaseTest {
         tomcat.start();
 
         //check that the ServletContextInitializer wasn't initialized.
-        assertFalse(SCL3.initialized);
+        Assert.assertFalse(SCL3.initialized);
     }
 
     public static class SCI implements ServletContainerInitializer {

==================================================
TestTomcatClassLoader.java
index f790c96040..d87e09e4df 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -33,12 +33,6 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -198,7 +192,7 @@ public class TestTomcat extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("Hello world", res.toString());
+        Assert.assertEquals("Hello world", res.toString());
     }
 
     @Test
@@ -215,7 +209,7 @@ public class TestTomcat extends TomcatBaseTest {
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/examples/servlets/servlet/HelloWorldExample");
         String text = res.toString();
-        assertTrue(text, text.indexOf("<a href=\"../helloworld.html\">") > 0);
+        Assert.assertTrue(text, text.indexOf("<a href=\"../helloworld.html\">") > 0);
     }
 
     @Test
@@ -233,7 +227,7 @@ public class TestTomcat extends TomcatBaseTest {
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/examples/jsp/jsp2/el/basic-arithmetic.jsp");
         String text = res.toString();
-        assertTrue(text, text.indexOf("<td>${(1==2) ? 3 : 4}</td>") > 0);
+        Assert.assertTrue(text, text.indexOf("<td>${(1==2) ? 3 : 4}</td>") > 0);
     }
 
     @Test
@@ -249,7 +243,7 @@ public class TestTomcat extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("Hello world", res.toString());
+        Assert.assertEquals("Hello world", res.toString());
     }
 
     @Test
@@ -288,7 +282,7 @@ public class TestTomcat extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("Hello, Tomcat User", res.toString());
+        Assert.assertEquals("Hello, Tomcat User", res.toString());
     }
 
     /*
@@ -322,7 +316,7 @@ public class TestTomcat extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("Hello, Tomcat User", res.toString());
+        Assert.assertEquals("Hello, Tomcat User", res.toString());
     }
 
 
@@ -350,8 +344,8 @@ public class TestTomcat extends TomcatBaseTest {
 
         int rc =getUrl("http://localhost:" + getPort() + contextPath +
                 "/testGetResource", res, null);
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertTrue(res.toString().contains("<?xml version=\"1.0\" "));
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertTrue(res.toString().contains("<?xml version=\"1.0\" "));
     }
 
     @Test
@@ -370,7 +364,7 @@ public class TestTomcat extends TomcatBaseTest {
             ex.printStackTrace();
             e = ex;
         }
-        assertNull(e);
+        Assert.assertNull(e);
     }
 
     @Test
@@ -387,33 +381,33 @@ public class TestTomcat extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("OK", res.toString());
+        Assert.assertEquals("OK", res.toString());
 
-        assertEquals(1, initCount.getCallCount());
+        Assert.assertEquals(1, initCount.getCallCount());
     }
 
     @Test
     public void testGetWebappConfigFileFromDirectory() {
         Tomcat tomcat = new Tomcat();
-        assertNotNull(tomcat.getWebappConfigFile("test/deployment/dirContext", ""));
+        Assert.assertNotNull(tomcat.getWebappConfigFile("test/deployment/dirContext", ""));
     }
 
     @Test
     public void testGetWebappConfigFileFromDirectoryNegative() {
         Tomcat tomcat = new Tomcat();
-        assertNull(tomcat.getWebappConfigFile("test/deployment/dirNoContext", ""));
+        Assert.assertNull(tomcat.getWebappConfigFile("test/deployment/dirNoContext", ""));
     }
 
     @Test
     public void testGetWebappConfigFileFromJar() {
         Tomcat tomcat = new Tomcat();
-        assertNotNull(tomcat.getWebappConfigFile("test/deployment/context.war", ""));
+        Assert.assertNotNull(tomcat.getWebappConfigFile("test/deployment/context.war", ""));
     }
 
     @Test
     public void testGetWebappConfigFileFromJarNegative() {
         Tomcat tomcat = new Tomcat();
-        assertNull(tomcat.getWebappConfigFile("test/deployment/noContext.war", ""));
+        Assert.assertNull(tomcat.getWebappConfigFile("test/deployment/noContext.war", ""));
     }
 
     @Test
@@ -426,7 +420,7 @@ public class TestTomcat extends TomcatBaseTest {
 
         tomcat.start();
 
-        assertEquals("WAR_CONTEXT", context.getSessionCookieName());
+        Assert.assertEquals("WAR_CONTEXT", context.getSessionCookieName());
     }
 
     @Test
@@ -437,7 +431,7 @@ public class TestTomcat extends TomcatBaseTest {
         Context context = tomcat.addWebapp(null,
                 "/test", appFile.getAbsolutePath());
 
-        assertEquals(StandardContext.class.getName(), context.getClass()
+        Assert.assertEquals(StandardContext.class.getName(), context.getClass()
                 .getName());
     }
 
@@ -452,7 +446,7 @@ public class TestTomcat extends TomcatBaseTest {
         try {
             File appFile = new File("test/deployment/context.war");
             tomcat.addWebapp(null, "/test", appFile.getAbsolutePath());
-            fail();
+            Assert.fail();
         } catch (IllegalArgumentException e) {
             // OK
         }
@@ -471,7 +465,7 @@ public class TestTomcat extends TomcatBaseTest {
         Context context = tomcat.addWebapp(null, "/test",
                 appFile.getAbsolutePath());
 
-        assertEquals(ReplicatedContext.class.getName(), context.getClass()
+        Assert.assertEquals(ReplicatedContext.class.getName(), context.getClass()
                 .getName());
     }
 
@@ -488,7 +482,7 @@ public class TestTomcat extends TomcatBaseTest {
         Context context = tomcat.addWebapp(host, "/test",
                 appFile.getAbsolutePath());
 
-        assertEquals(ReplicatedContext.class.getName(), context.getClass()
+        Assert.assertEquals(ReplicatedContext.class.getName(), context.getClass()
                 .getName());
     }
 
@@ -498,7 +492,7 @@ public class TestTomcat extends TomcatBaseTest {
 
         // No file system docBase required
         Context ctx = tomcat.addContext(null, "", null);
-        assertEquals(StandardContext.class.getName(), ctx.getClass().getName());
+        Assert.assertEquals(StandardContext.class.getName(), ctx.getClass().getName());
     }
 
     @Test
@@ -512,7 +506,7 @@ public class TestTomcat extends TomcatBaseTest {
         // No file system docBase required
         try {
             tomcat.addContext(null, "", null);
-            fail();
+            Assert.fail();
         } catch (IllegalArgumentException e) {
             // OK
         }
@@ -529,7 +523,7 @@ public class TestTomcat extends TomcatBaseTest {
 
         // No file system docBase required
         Context ctx = tomcat.addContext(host, "", null);
-        assertEquals(ReplicatedContext.class.getName(), ctx.getClass()
+        Assert.assertEquals(ReplicatedContext.class.getName(), ctx.getClass()
                 .getName());
     }
 

==================================================
TomcatBaseTest.java
index 2cec79c7c3..85d95472cf 100644
--- a/test/org/apache/catalina/startup/TestTomcatClassLoader.java
+++ b/test/org/apache/catalina/startup/TestTomcatClassLoader.java
@@ -26,8 +26,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -49,7 +48,7 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("WEBAPP,SYSTEM,OTHER,", res.toString());
+        Assert.assertEquals("WEBAPP,SYSTEM,OTHER,", res.toString());
     }
 
     @Test
@@ -72,7 +71,7 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("WEBAPP,CUSTOM,SYSTEM,OTHER,", res.toString());
+        Assert.assertEquals("WEBAPP,CUSTOM,SYSTEM,OTHER,", res.toString());
     }
 
     private static final class ClassLoaderReport extends HttpServlet {

==================================================
TestGroupChannelOptionFlag.java
index 1ed1d3e43f..451d58d92d 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -42,8 +42,6 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
-import static org.junit.Assert.fail;
-
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -151,7 +149,7 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
 
         File appBase = new File(getTemporaryDirectory(), "webapps");
         if (!appBase.exists() && !appBase.mkdir()) {
-            fail("Unable to create appBase for test");
+            Assert.fail("Unable to create appBase for test");
         }
 
         tomcat = new TomcatWithFastSessionIDs();

==================================================
TestGroupChannelSenderConnections.java
index 8416cd16d4..86d238266d 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelOptionFlag.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelOptionFlag.java
@@ -16,10 +16,8 @@
  */
 package org.apache.catalina.tribes.group;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -62,7 +60,7 @@ public class TestGroupChannelOptionFlag {
         }catch ( ChannelException x ) {
             if (x.getMessage().contains("option flag conflict")) error = true;
         }
-        assertTrue(error);
+        Assert.assertTrue(error);
     }
 
     @Test
@@ -83,7 +81,7 @@ public class TestGroupChannelOptionFlag {
         }catch ( ChannelException x ) {
             if (x.getMessage().contains("option flag conflict")) error = true;
         }
-        assertFalse(error);
+        Assert.assertFalse(error);
     }
 
     public static class TestInterceptor extends ChannelInterceptorBase {

==================================================
TestGroupChannelStartStop.java
index c685ff6799..27b569752c 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelSenderConnections.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelSenderConnections.java
@@ -22,9 +22,8 @@ import java.util.HashMap;
 import java.util.Random;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.junit.Assert.fail;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -79,7 +78,7 @@ public class TestGroupChannelSenderConnections extends LoggingBaseTest {
         while ((countReceived = getReceivedMessageCount()) != n) {
             long time = System.currentTimeMillis();
             if ((time - startTime) > sleep) {
-                fail("Only " + countReceived + " out of " + n
+                Assert.fail("Only " + countReceived + " out of " + n
                         + " messages have been received in " + (sleep / 1000)
                         + " seconds");
                 break;

==================================================
TestDomainFilterInterceptor.java
index 58b140a0eb..19f825e928 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelStartStop.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelStartStop.java
@@ -16,9 +16,8 @@
  */
 package org.apache.catalina.tribes.group;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -57,7 +56,7 @@ public class TestGroupChannelStartStop {
             channel.start(Channel.DEFAULT);
             count++;
         } catch ( Exception x){x.printStackTrace();}
-        assertEquals(count,2);
+        Assert.assertEquals(count,2);
         channel.stop(Channel.DEFAULT);
     }
 
@@ -82,7 +81,7 @@ public class TestGroupChannelStartStop {
         } catch ( Exception x){
             // expected
         }
-        assertEquals(count,1);
+        Assert.assertEquals(count,1);
         channel.stop(Channel.DEFAULT);
         //double the membership sender
         count = 0;
@@ -97,7 +96,7 @@ public class TestGroupChannelStartStop {
         } catch ( Exception x){
             // expected
         }
-        assertEquals(count,1);
+        Assert.assertEquals(count,1);
         channel.stop(Channel.DEFAULT);
 
         count = 0;
@@ -111,7 +110,7 @@ public class TestGroupChannelStartStop {
         } catch ( Exception x){
             // expected
         }
-        assertEquals(count,1);
+        Assert.assertEquals(count,1);
         channel.stop(Channel.DEFAULT);
 
         count = 0;
@@ -125,7 +124,7 @@ public class TestGroupChannelStartStop {
         } catch ( Exception x){
             // expected
         }
-        assertEquals(count,1);
+        Assert.assertEquals(count,1);
         channel.stop(Channel.DEFAULT);
     }
 
@@ -143,7 +142,7 @@ public class TestGroupChannelStartStop {
         } catch ( Exception x){
             // expected
         }
-        assertEquals(count,2);
+        Assert.assertEquals(count,2);
         channel.stop(Channel.DEFAULT);
     }
 

==================================================
TestGzipInterceptor.java
index 95d78ce69d..199b005f19 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
@@ -18,9 +18,8 @@ package org.apache.catalina.tribes.group.interceptors;
 
 import java.util.ArrayList;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -77,7 +76,9 @@ public class TestDomainFilterInterceptor {
         for (int i=0; i<threads.length; i++ ) threads[i].start();
         for (int i=0; i<threads.length; i++ ) threads[i].join();
         System.out.println("All channels started.");
-        for (int i=listeners.length-1; i>=0; i-- ) assertEquals("Checking member arrival length",0,listeners[i].members.size());
+        for (int i=listeners.length-1; i>=0; i-- ) {
+            Assert.assertEquals("Checking member arrival length",0,listeners[i].members.size());
+        }
     }
 
     @After

==================================================
TestNonBlockingCoordinator.java
index 025ffbc850..dbcea246bf 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestGzipInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestGzipInterceptor.java
@@ -21,8 +21,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -54,6 +53,6 @@ public class TestGzipInterceptor {
         Arrays.fill(data, (byte)1);
         byte[] compress = GzipInterceptor.compress(data);
         byte[] result = GzipInterceptor.decompress(compress);
-        assertTrue(Arrays.equals(data, result));
+        Assert.assertTrue(Arrays.equals(data, result));
     }
 }

==================================================
TestOrderInterceptor.java
index a3464e4af7..4b202a97a9 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestNonBlockingCoordinator.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestNonBlockingCoordinator.java
@@ -16,9 +16,8 @@
  */
 package org.apache.catalina.tribes.group.interceptors;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -72,7 +71,7 @@ public class TestNonBlockingCoordinator {
     public void testCoord1() throws Exception {
         int expectedCount = channels[0].getMembers().length;
         for (int i = 1; i < CHANNEL_COUNT; i++) {
-            assertEquals("Message count expected to be equal.", expectedCount,
+            Assert.assertEquals("Message count expected to be equal.", expectedCount,
                     channels[i].getMembers().length);
         }
         Member member = coordinators[0].getCoordinator();
@@ -86,7 +85,7 @@ public class TestNonBlockingCoordinator {
             }
         }
         for (int i = 0; i < CHANNEL_COUNT; i++) {
-            assertEquals(member, coordinators[i].getCoordinator());
+            Assert.assertEquals(member, coordinators[i].getCoordinator());
         }
         System.out.println("Coordinator[1] is:" + member);
     }
@@ -114,7 +113,7 @@ public class TestNonBlockingCoordinator {
         member = coordinators[index].getCoordinator();
         for (int i = 1; i < CHANNEL_COUNT; i++) {
             if (i != dead) {
-                assertEquals(member, coordinators[i].getCoordinator());
+                Assert.assertEquals(member, coordinators[i].getCoordinator());
             }
         }
         System.out.println("Coordinator[2b] is:" + member);

==================================================
TestTcpFailureDetector.java
index fdaa0624e7..61cb530e5c 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
@@ -21,10 +21,8 @@ import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.fail;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -93,7 +91,7 @@ public class TestOrderInterceptor {
         }
         Thread.sleep(5000);
         for ( int i=0; i<test.length; i++ ) {
-            assertFalse(test[i].fail);
+            Assert.assertFalse(test[i].fail);
         }
     }
 
@@ -127,12 +125,12 @@ public class TestOrderInterceptor {
             threads[i].join();
         }
         if (!exceptionQueue.isEmpty()) {
-            fail("Exception while sending in threads: "
+            Assert.fail("Exception while sending in threads: "
                     + exceptionQueue.remove().toString());
         }
         Thread.sleep(5000);
         for ( int i=0; i<test.length; i++ ) {
-            assertFalse(test[i].fail);
+            Assert.assertFalse(test[i].fail);
         }
     }
 

==================================================
TestXByteBuffer.java
index 76fc4e8cc9..76b13bd91c 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestTcpFailureDetector.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestTcpFailureDetector.java
@@ -18,10 +18,8 @@ package org.apache.catalina.tribes.group.interceptors;
 
 import java.util.ArrayList;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -71,16 +69,16 @@ public class TestTcpFailureDetector {
         channel1.start(Channel.DEFAULT);
         channel2.start(Channel.DEFAULT);
         //Thread.sleep(1000);
-        assertEquals("Expecting member count to be equal",mbrlist1.members.size(),mbrlist2.members.size());
+        Assert.assertEquals("Expecting member count to be equal",mbrlist1.members.size(),mbrlist2.members.size());
         channel2.stop(Channel.SND_RX_SEQ);
         ByteMessage msg = new ByteMessage(new byte[1024]);
         try {
             channel1.send(channel1.getMembers(), msg, 0);
-            fail("Message send should have failed.");
+            Assert.fail("Message send should have failed.");
         } catch ( ChannelException x ) {
             // Ignore
         }
-        assertEquals("Expecting member count to not be equal",mbrlist1.members.size()+1,mbrlist2.members.size());
+        Assert.assertEquals("Expecting member count to not be equal",mbrlist1.members.size()+1,mbrlist2.members.size());
         channel1.stop(Channel.DEFAULT);
         channel2.stop(Channel.DEFAULT);
     }
@@ -96,7 +94,7 @@ public class TestTcpFailureDetector {
         channel2.stop(Channel.SND_RX_SEQ);
         channel2.start(Channel.MBR_TX_SEQ);
         //Thread.sleep(1000);
-        assertEquals("Expecting member count to not be equal",mbrlist1.members.size()+1,mbrlist2.members.size());
+        Assert.assertEquals("Expecting member count to not be equal",mbrlist1.members.size()+1,mbrlist2.members.size());
         channel1.stop(Channel.DEFAULT);
         channel2.stop(Channel.DEFAULT);
     }
@@ -108,15 +106,15 @@ public class TestTcpFailureDetector {
         channel1.start(Channel.DEFAULT);
         channel2.start(Channel.DEFAULT);
         //Thread.sleep(1000);
-        assertEquals("Expecting member count to be equal",mbrlist1.members.size(),mbrlist2.members.size());
+        Assert.assertEquals("Expecting member count to be equal",mbrlist1.members.size(),mbrlist2.members.size());
         channel2.stop(Channel.MBR_TX_SEQ);
         ByteMessage msg = new ByteMessage(new byte[1024]);
         try {
             Thread.sleep(5000);
-            assertEquals("Expecting member count to be equal",mbrlist1.members.size(),mbrlist2.members.size());
+            Assert.assertEquals("Expecting member count to be equal",mbrlist1.members.size(),mbrlist2.members.size());
             channel1.send(channel1.getMembers(), msg, 0);
         } catch ( ChannelException x ) {
-            fail("Message send should have succeeded.");
+            Assert.fail("Message send should have succeeded.");
         }
         channel1.stop(Channel.DEFAULT);
         channel2.stop(Channel.DEFAULT);

==================================================
TestMemberImplSerialization.java
index a7e237191e..5bbb7c28cd 100644
--- a/test/org/apache/catalina/tribes/io/TestXByteBuffer.java
+++ b/test/org/apache/catalina/tribes/io/TestXByteBuffer.java
@@ -16,10 +16,7 @@
  */
 package org.apache.catalina.tribes.io;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 public class TestXByteBuffer {
@@ -27,7 +24,7 @@ public class TestXByteBuffer {
     @Test
     public void testEmptyArray() throws Exception {
         Object obj = XByteBuffer.deserialize(new byte[0]);
-        assertNull(obj);
+        Assert.assertNull(obj);
     }
 
     @Test
@@ -35,7 +32,7 @@ public class TestXByteBuffer {
         String test = "This is as test.";
         byte[] msg = XByteBuffer.serialize(test);
         Object obj = XByteBuffer.deserialize(msg);
-        assertTrue(obj instanceof String);
-        assertEquals(test, obj);
+        Assert.assertTrue(obj instanceof String);
+        Assert.assertEquals(test, obj);
     }
 }

==================================================
TestChannelConfig.java
index 52cbf22bd2..d0a05c5afd 100644
--- a/test/org/apache/catalina/tribes/membership/TestMemberImplSerialization.java
+++ b/test/org/apache/catalina/tribes/membership/TestMemberImplSerialization.java
@@ -18,9 +18,7 @@ package org.apache.catalina.tribes.membership;
 
 import java.util.Arrays;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -51,13 +49,13 @@ public class TestMemberImplSerialization {
 
     @Test
     public void testCompare() throws Exception {
-        assertTrue(m1.equals(m2));
-        assertTrue(m2.equals(m1));
-        assertTrue(p1.equals(m2));
-        assertFalse(m1.equals(p2));
-        assertFalse(m1.equals(p2));
-        assertFalse(m2.equals(p2));
-        assertFalse(p1.equals(p2));
+        Assert.assertTrue(m1.equals(m2));
+        Assert.assertTrue(m2.equals(m1));
+        Assert.assertTrue(p1.equals(m2));
+        Assert.assertFalse(m1.equals(p2));
+        Assert.assertFalse(m1.equals(p2));
+        Assert.assertFalse(m2.equals(p2));
+        Assert.assertFalse(p1.equals(p2));
     }
 
     @Test
@@ -68,8 +66,8 @@ public class TestMemberImplSerialization {
         Member a1 = MemberImpl.getMember(md1);
         Member a2 = MemberImpl.getMember(md2);
 
-        assertTrue(a1.getUdpPort()==a2.getUdpPort());
-        assertTrue(a1.getUdpPort()==udpPort);
+        Assert.assertTrue(a1.getUdpPort()==a2.getUdpPort());
+        Assert.assertTrue(a1.getUdpPort()==udpPort);
     }
 
     @Test
@@ -77,23 +75,23 @@ public class TestMemberImplSerialization {
         Member m = m1;
         byte[] md1 = m.getData(false,true);
         byte[] mda1 = m.getData(false,false);
-        assertTrue(Arrays.equals(md1,mda1));
-        assertTrue(md1==mda1);
+        Assert.assertTrue(Arrays.equals(md1,mda1));
+        Assert.assertTrue(md1==mda1);
         mda1 = m.getData(true,true);
         Member ma1 = MemberImpl.getMember(mda1);
-        assertTrue(compareMembers(m,ma1));
+        Assert.assertTrue(compareMembers(m,ma1));
         mda1 = p1.getData(false);
-        assertFalse(Arrays.equals(md1,mda1));
+        Assert.assertFalse(Arrays.equals(md1,mda1));
         ma1 = MemberImpl.getMember(mda1);
-        assertTrue(compareMembers(p1,ma1));
+        Assert.assertTrue(compareMembers(p1,ma1));
 
         md1 = m.getData(true,true);
         Thread.sleep(50);
         mda1 = m.getData(true,true);
         Member a1 = MemberImpl.getMember(md1);
         Member a2 = MemberImpl.getMember(mda1);
-        assertTrue(a1.equals(a2));
-        assertFalse(Arrays.equals(md1,mda1));
+        Assert.assertTrue(a1.equals(a2));
+        Assert.assertFalse(Arrays.equals(md1,mda1));
 
 
     }

==================================================
TestDataIntegrity.java
index 1c4e40a274..32f17d3f0b 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestChannelConfig.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestChannelConfig.java
@@ -16,8 +16,7 @@
  */
 package org.apache.catalina.tribes.test.channel;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.ha.session.BackupManager;
@@ -32,7 +31,7 @@ public class TestChannelConfig {
 
         SimpleTcpCluster cluster = new SimpleTcpCluster();
         cluster.setChannelSendOptions(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST);
-        assertEquals(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST, cluster.getChannelSendOptions());
+        Assert.assertEquals(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST, cluster.getChannelSendOptions());
     }
 
     @Test
@@ -40,7 +39,7 @@ public class TestChannelConfig {
 
         SimpleTcpCluster cluster = new SimpleTcpCluster();
         cluster.setChannelSendOptions("multicast");
-        assertEquals(Channel.SEND_OPTIONS_MULTICAST, cluster.getChannelSendOptions());
+        Assert.assertEquals(Channel.SEND_OPTIONS_MULTICAST, cluster.getChannelSendOptions());
     }
 
     @Test
@@ -48,7 +47,7 @@ public class TestChannelConfig {
 
         SimpleTcpCluster cluster = new SimpleTcpCluster();
         cluster.setChannelSendOptions("async, multicast");
-        assertEquals(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST, cluster.getChannelSendOptions());
+        Assert.assertEquals(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST, cluster.getChannelSendOptions());
     }
 
     @Test
@@ -57,7 +56,7 @@ public class TestChannelConfig {
         String options = "multicast, async";
         SimpleTcpCluster cluster = new SimpleTcpCluster();
         cluster.setChannelSendOptions(options);
-        assertEquals(options, cluster.getChannelSendOptionsName());
+        Assert.assertEquals(options, cluster.getChannelSendOptionsName());
     }
 
     @Test
@@ -65,7 +64,7 @@ public class TestChannelConfig {
 
         BackupManager manager = new BackupManager();
         manager.setMapSendOptions("async, multicast");
-        assertEquals(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST, manager.getMapSendOptions());
+        Assert.assertEquals(Channel.SEND_OPTIONS_ASYNCHRONOUS | Channel.SEND_OPTIONS_MULTICAST, manager.getMapSendOptions());
     }
 
 }
\ No newline at end of file

==================================================
TestMulticastPackages.java
index 9f78833ebe..229294b3f5 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -20,9 +20,8 @@ import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Random;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -84,7 +83,7 @@ public class TestDataIntegrity {
         long start = System.currentTimeMillis();
         while ( (System.currentTimeMillis()-start)<15000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
         System.err.println("Finished NO_ACK ["+listener1.count+"]");
-        assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
+        Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
 
     @Test
@@ -111,7 +110,7 @@ public class TestDataIntegrity {
             long start = System.currentTimeMillis();
             while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
             System.err.println("Finished ASYNC MULTI THREAD ["+listener1.count+"]");
-            assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
+            Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
 
     @Test
@@ -122,7 +121,7 @@ public class TestDataIntegrity {
         long start = System.currentTimeMillis();
         while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count) Thread.sleep(500);
         System.err.println("Finished ASYNC");
-        assertEquals("Checking success messages.",msgCount,listener1.count);
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count);
     }
 
     @Test
@@ -131,7 +130,7 @@ public class TestDataIntegrity {
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_USE_ACK);
         Thread.sleep(250);
         System.err.println("Finished ACK");
-        assertEquals("Checking success messages.",msgCount,listener1.count);
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count);
     }
 
     @Test
@@ -140,7 +139,7 @@ public class TestDataIntegrity {
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK);
         Thread.sleep(250);
         System.err.println("Finished SYNC_ACK");
-        assertEquals("Checking success messages.",msgCount,listener1.count);
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count);
     }
 
     public static class Listener implements ChannelListener {

==================================================
TestRemoteProcessException.java
index 55a6e93139..80c49e9a66 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -22,9 +22,8 @@ import java.util.Random;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -91,7 +90,7 @@ public class TestMulticastPackages {
         channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(1024),Channel.SEND_OPTIONS_MULTICAST);
         Thread.sleep(500);
         System.err.println("Finished Single package NO_ACK ["+listener1.count+"]");
-        assertEquals("Checking success messages.",1,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",1,listener1.count.get());
     }
 
 
@@ -140,7 +139,7 @@ public class TestMulticastPackages {
         System.out.println("Sent "+counter.get()+ " messages. Received "+listener1.count+" Highest msg received:"+listener1.maxIdx);
         System.out.print("Missing messages:");
         printMissingMsgs(listener1.nrs,counter.get());
-        assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
     }
 
     @Test
@@ -151,7 +150,7 @@ public class TestMulticastPackages {
         long start = System.currentTimeMillis();
         while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count.get()) Thread.sleep(500);
         System.err.println("Finished ASYNC");
-        assertEquals("Checking success messages.",msgCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
     @Test
@@ -160,7 +159,7 @@ public class TestMulticastPackages {
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
         Thread.sleep(250);
         System.err.println("Finished ACK");
-        assertEquals("Checking success messages.",msgCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
     @Test
@@ -169,7 +168,7 @@ public class TestMulticastPackages {
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
         Thread.sleep(250);
         System.err.println("Finished SYNC_ACK");
-        assertEquals("Checking success messages.",msgCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
     public static class Listener implements ChannelListener {

==================================================
TestUdpPackages.java
index b70a2927a4..fa86fe30ad 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
@@ -21,10 +21,8 @@ import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Random;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -71,7 +69,7 @@ public class TestRemoteProcessException {
                         Channel.SEND_OPTIONS_SYNCHRONIZED_ACK
                                 | Channel.SEND_OPTIONS_USE_ACK);
                 if (error) {
-                    fail("A ChannelException was expected");
+                    Assert.fail("A ChannelException was expected");
                 }
             } catch (ChannelException e) {
                 if (!error) {
@@ -86,10 +84,10 @@ public class TestRemoteProcessException {
         // as it is being re-sent. Thus the listener1 count is off by +2.
         final int duplicate = 2;
 
-        assertEquals("Checking failure messages.", errC + duplicate,
+        Assert.assertEquals("Checking failure messages.", errC + duplicate,
                 listener1.errCnt);
-        assertEquals("Checking success messages.", nerrC, listener1.noErrCnt);
-        assertEquals("Checking all messages.", msgCount + duplicate,
+        Assert.assertEquals("Checking success messages.", nerrC, listener1.noErrCnt);
+        Assert.assertEquals("Checking all messages.", msgCount + duplicate,
                 listener1.noErrCnt + listener1.errCnt);
         System.out.println("Listener 1 stats:");
         listener1.printStats(System.out);

==================================================
TestContextName.java
index 52d9fd8de6..08d9f1b0e7 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
@@ -22,9 +22,8 @@ import java.util.Random;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -91,7 +90,7 @@ public class TestUdpPackages {
         channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(1024),Channel.SEND_OPTIONS_UDP);
         Thread.sleep(500);
         System.err.println("Finished Single package NO_ACK ["+listener1.count+"]");
-        assertEquals("Checking success messages.",1,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",1,listener1.count.get());
     }
 
     @Test
@@ -132,7 +131,7 @@ public class TestUdpPackages {
         System.out.println("Sent "+counter.get()+ " messages. Received "+listener1.count+" Highest msg received:"+listener1.maxIdx);
         System.out.print("Missing messages:");
         printMissingMsgs(listener1.nrs,counter.get());
-        assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
     }
 
     public static void printMissingMsgs(int[] msgs, int maxIdx) {
@@ -180,7 +179,7 @@ public class TestUdpPackages {
         System.out.println("Sent "+counter.get()+ " messages. Received "+listener1.count+" Highest msg received:"+listener1.maxIdx);
         System.out.print("Missing messages:");
         printMissingMsgs(listener1.nrs,counter.get());
-        assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
     }
 
     @Test
@@ -191,7 +190,7 @@ public class TestUdpPackages {
         long start = System.currentTimeMillis();
         while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count.get()) Thread.sleep(500);
         System.err.println("Finished ASYNC");
-        assertEquals("Checking success messages.",msgCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
     @Test
@@ -200,7 +199,7 @@ public class TestUdpPackages {
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_UDP);
         Thread.sleep(250);
         System.err.println("Finished ACK");
-        assertEquals("Checking success messages.",msgCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
     @Test
@@ -209,7 +208,7 @@ public class TestUdpPackages {
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_UDP);
         Thread.sleep(250);
         System.err.println("Finished SYNC_ACK");
-        assertEquals("Checking success messages.",msgCount,listener1.count.get());
+        Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
     public static class Listener implements ChannelListener {

==================================================
TestRemoteIpValve.java
index 211fa93a30..ff8d62e81c 100644
--- a/test/org/apache/catalina/util/TestContextName.java
+++ b/test/org/apache/catalina/util/TestContextName.java
@@ -16,8 +16,7 @@
  */
 package org.apache.catalina.util;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -75,132 +74,132 @@ public class TestContextName {
 
     @Test
     public void testGetBaseName() {
-        assertEquals("ROOT", cn1.getBaseName());
-        assertEquals("ROOT", cn2.getBaseName());
-        assertEquals("ROOT", cn3.getBaseName());
-        assertEquals("foo", cn4.getBaseName());
-        assertEquals("foo#bar", cn5.getBaseName());
-        assertEquals("ROOT##A", cn6.getBaseName());
-        assertEquals("ROOT##B", cn7.getBaseName());
-        assertEquals("ROOT##C", cn8.getBaseName());
-        assertEquals("foo##D", cn9.getBaseName());
-        assertEquals("foo#bar##E", cn10.getBaseName());
-        assertEquals("ROOT", cn11.getBaseName());
-        assertEquals("foo", cn12.getBaseName());
-        assertEquals("foo#bar", cn13.getBaseName());
-        assertEquals("ROOT##A", cn14.getBaseName());
-        assertEquals("foo##D", cn15.getBaseName());
-        assertEquals("foo#bar##E", cn16.getBaseName());
-        assertEquals("ROOT", cn17.getBaseName());
-        assertEquals("ROOT#bar", cn18.getBaseName());
-        assertEquals("ROOT#bar##A", cn19.getBaseName());
-        assertEquals("ROOT##A", cn20.getBaseName());
-        assertEquals("foo.war", cn21.getBaseName());
-        assertEquals("foo", cn22.getBaseName());
+        Assert.assertEquals("ROOT", cn1.getBaseName());
+        Assert.assertEquals("ROOT", cn2.getBaseName());
+        Assert.assertEquals("ROOT", cn3.getBaseName());
+        Assert.assertEquals("foo", cn4.getBaseName());
+        Assert.assertEquals("foo#bar", cn5.getBaseName());
+        Assert.assertEquals("ROOT##A", cn6.getBaseName());
+        Assert.assertEquals("ROOT##B", cn7.getBaseName());
+        Assert.assertEquals("ROOT##C", cn8.getBaseName());
+        Assert.assertEquals("foo##D", cn9.getBaseName());
+        Assert.assertEquals("foo#bar##E", cn10.getBaseName());
+        Assert.assertEquals("ROOT", cn11.getBaseName());
+        Assert.assertEquals("foo", cn12.getBaseName());
+        Assert.assertEquals("foo#bar", cn13.getBaseName());
+        Assert.assertEquals("ROOT##A", cn14.getBaseName());
+        Assert.assertEquals("foo##D", cn15.getBaseName());
+        Assert.assertEquals("foo#bar##E", cn16.getBaseName());
+        Assert.assertEquals("ROOT", cn17.getBaseName());
+        Assert.assertEquals("ROOT#bar", cn18.getBaseName());
+        Assert.assertEquals("ROOT#bar##A", cn19.getBaseName());
+        Assert.assertEquals("ROOT##A", cn20.getBaseName());
+        Assert.assertEquals("foo.war", cn21.getBaseName());
+        Assert.assertEquals("foo", cn22.getBaseName());
     }
 
     @Test
     public void testGetPath() {
-        assertEquals("", cn1.getPath());
-        assertEquals("", cn2.getPath());
-        assertEquals("", cn3.getPath());
-        assertEquals("/foo", cn4.getPath());
-        assertEquals("/foo/bar", cn5.getPath());
-        assertEquals("", cn6.getPath());
-        assertEquals("", cn7.getPath());
-        assertEquals("", cn8.getPath());
-        assertEquals("/foo", cn9.getPath());
-        assertEquals("/foo/bar", cn10.getPath());
-        assertEquals("", cn11.getPath());
-        assertEquals("/foo", cn12.getPath());
-        assertEquals("/foo/bar", cn13.getPath());
-        assertEquals("", cn14.getPath());
-        assertEquals("/foo", cn15.getPath());
-        assertEquals("/foo/bar", cn16.getPath());
-        assertEquals("", cn17.getPath());
-        assertEquals("/ROOT/bar", cn18.getPath());
-        assertEquals("/ROOT/bar", cn19.getPath());
-        assertEquals("", cn20.getPath());
-        assertEquals("/foo.war", cn21.getPath());
-        assertEquals("/foo", cn22.getPath());
+        Assert.assertEquals("", cn1.getPath());
+        Assert.assertEquals("", cn2.getPath());
+        Assert.assertEquals("", cn3.getPath());
+        Assert.assertEquals("/foo", cn4.getPath());
+        Assert.assertEquals("/foo/bar", cn5.getPath());
+        Assert.assertEquals("", cn6.getPath());
+        Assert.assertEquals("", cn7.getPath());
+        Assert.assertEquals("", cn8.getPath());
+        Assert.assertEquals("/foo", cn9.getPath());
+        Assert.assertEquals("/foo/bar", cn10.getPath());
+        Assert.assertEquals("", cn11.getPath());
+        Assert.assertEquals("/foo", cn12.getPath());
+        Assert.assertEquals("/foo/bar", cn13.getPath());
+        Assert.assertEquals("", cn14.getPath());
+        Assert.assertEquals("/foo", cn15.getPath());
+        Assert.assertEquals("/foo/bar", cn16.getPath());
+        Assert.assertEquals("", cn17.getPath());
+        Assert.assertEquals("/ROOT/bar", cn18.getPath());
+        Assert.assertEquals("/ROOT/bar", cn19.getPath());
+        Assert.assertEquals("", cn20.getPath());
+        Assert.assertEquals("/foo.war", cn21.getPath());
+        Assert.assertEquals("/foo", cn22.getPath());
     }
 
     @Test
     public void testGetVersion() {
-        assertEquals("", cn1.getVersion());
-        assertEquals("", cn2.getVersion());
-        assertEquals("", cn3.getVersion());
-        assertEquals("", cn4.getVersion());
-        assertEquals("", cn5.getVersion());
-        assertEquals("A", cn6.getVersion());
-        assertEquals("B", cn7.getVersion());
-        assertEquals("C", cn8.getVersion());
-        assertEquals("D", cn9.getVersion());
-        assertEquals("E", cn10.getVersion());
-        assertEquals("", cn11.getVersion());
-        assertEquals("", cn12.getVersion());
-        assertEquals("", cn13.getVersion());
-        assertEquals("A", cn14.getVersion());
-        assertEquals("D", cn15.getVersion());
-        assertEquals("E", cn16.getVersion());
-        assertEquals("", cn17.getVersion());
-        assertEquals("", cn18.getVersion());
-        assertEquals("A", cn19.getVersion());
-        assertEquals("A", cn20.getVersion());
-        assertEquals("", cn21.getVersion());
-        assertEquals("", cn22.getVersion());
+        Assert.assertEquals("", cn1.getVersion());
+        Assert.assertEquals("", cn2.getVersion());
+        Assert.assertEquals("", cn3.getVersion());
+        Assert.assertEquals("", cn4.getVersion());
+        Assert.assertEquals("", cn5.getVersion());
+        Assert.assertEquals("A", cn6.getVersion());
+        Assert.assertEquals("B", cn7.getVersion());
+        Assert.assertEquals("C", cn8.getVersion());
+        Assert.assertEquals("D", cn9.getVersion());
+        Assert.assertEquals("E", cn10.getVersion());
+        Assert.assertEquals("", cn11.getVersion());
+        Assert.assertEquals("", cn12.getVersion());
+        Assert.assertEquals("", cn13.getVersion());
+        Assert.assertEquals("A", cn14.getVersion());
+        Assert.assertEquals("D", cn15.getVersion());
+        Assert.assertEquals("E", cn16.getVersion());
+        Assert.assertEquals("", cn17.getVersion());
+        Assert.assertEquals("", cn18.getVersion());
+        Assert.assertEquals("A", cn19.getVersion());
+        Assert.assertEquals("A", cn20.getVersion());
+        Assert.assertEquals("", cn21.getVersion());
+        Assert.assertEquals("", cn22.getVersion());
     }
 
     @Test
     public void testGetName() {
-        assertEquals("", cn1.getName());
-        assertEquals("", cn2.getName());
-        assertEquals("", cn3.getName());
-        assertEquals("/foo", cn4.getName());
-        assertEquals("/foo/bar", cn5.getName());
-        assertEquals("##A", cn6.getName());
-        assertEquals("##B", cn7.getName());
-        assertEquals("##C", cn8.getName());
-        assertEquals("/foo##D", cn9.getName());
-        assertEquals("/foo/bar##E", cn10.getName());
-        assertEquals("", cn11.getName());
-        assertEquals("/foo", cn12.getName());
-        assertEquals("/foo/bar", cn13.getName());
-        assertEquals("##A", cn14.getName());
-        assertEquals("/foo##D", cn15.getName());
-        assertEquals("/foo/bar##E", cn16.getName());
-        assertEquals("", cn17.getName());
-        assertEquals("/ROOT/bar", cn18.getName());
-        assertEquals("/ROOT/bar##A", cn19.getName());
-        assertEquals("##A", cn20.getName());
-        assertEquals("/foo.war", cn21.getName());
-        assertEquals("/foo", cn22.getName());
+        Assert.assertEquals("", cn1.getName());
+        Assert.assertEquals("", cn2.getName());
+        Assert.assertEquals("", cn3.getName());
+        Assert.assertEquals("/foo", cn4.getName());
+        Assert.assertEquals("/foo/bar", cn5.getName());
+        Assert.assertEquals("##A", cn6.getName());
+        Assert.assertEquals("##B", cn7.getName());
+        Assert.assertEquals("##C", cn8.getName());
+        Assert.assertEquals("/foo##D", cn9.getName());
+        Assert.assertEquals("/foo/bar##E", cn10.getName());
+        Assert.assertEquals("", cn11.getName());
+        Assert.assertEquals("/foo", cn12.getName());
+        Assert.assertEquals("/foo/bar", cn13.getName());
+        Assert.assertEquals("##A", cn14.getName());
+        Assert.assertEquals("/foo##D", cn15.getName());
+        Assert.assertEquals("/foo/bar##E", cn16.getName());
+        Assert.assertEquals("", cn17.getName());
+        Assert.assertEquals("/ROOT/bar", cn18.getName());
+        Assert.assertEquals("/ROOT/bar##A", cn19.getName());
+        Assert.assertEquals("##A", cn20.getName());
+        Assert.assertEquals("/foo.war", cn21.getName());
+        Assert.assertEquals("/foo", cn22.getName());
     }
 
     @Test
     public void testGetDisplayName() {
-        assertEquals("/", cn1.getDisplayName());
-        assertEquals("/", cn2.getDisplayName());
-        assertEquals("/", cn3.getDisplayName());
-        assertEquals("/foo", cn4.getDisplayName());
-        assertEquals("/foo/bar", cn5.getDisplayName());
-        assertEquals("/##A", cn6.getDisplayName());
-        assertEquals("/##B", cn7.getDisplayName());
-        assertEquals("/##C", cn8.getDisplayName());
-        assertEquals("/foo##D", cn9.getDisplayName());
-        assertEquals("/foo/bar##E", cn10.getDisplayName());
-        assertEquals("/", cn11.getDisplayName());
-        assertEquals("/foo", cn12.getDisplayName());
-        assertEquals("/foo/bar", cn13.getDisplayName());
-        assertEquals("/##A", cn14.getDisplayName());
-        assertEquals("/foo##D", cn15.getDisplayName());
-        assertEquals("/foo/bar##E", cn16.getDisplayName());
-        assertEquals("/", cn17.getDisplayName());
-        assertEquals("/ROOT/bar", cn18.getDisplayName());
-        assertEquals("/ROOT/bar##A", cn19.getDisplayName());
-        assertEquals("/##A", cn20.getDisplayName());
-        assertEquals("/foo.war", cn21.getDisplayName());
-        assertEquals("/foo", cn22.getDisplayName());
+        Assert.assertEquals("/", cn1.getDisplayName());
+        Assert.assertEquals("/", cn2.getDisplayName());
+        Assert.assertEquals("/", cn3.getDisplayName());
+        Assert.assertEquals("/foo", cn4.getDisplayName());
+        Assert.assertEquals("/foo/bar", cn5.getDisplayName());
+        Assert.assertEquals("/##A", cn6.getDisplayName());
+        Assert.assertEquals("/##B", cn7.getDisplayName());
+        Assert.assertEquals("/##C", cn8.getDisplayName());
+        Assert.assertEquals("/foo##D", cn9.getDisplayName());
+        Assert.assertEquals("/foo/bar##E", cn10.getDisplayName());
+        Assert.assertEquals("/", cn11.getDisplayName());
+        Assert.assertEquals("/foo", cn12.getDisplayName());
+        Assert.assertEquals("/foo/bar", cn13.getDisplayName());
+        Assert.assertEquals("/##A", cn14.getDisplayName());
+        Assert.assertEquals("/foo##D", cn15.getDisplayName());
+        Assert.assertEquals("/foo/bar##E", cn16.getDisplayName());
+        Assert.assertEquals("/", cn17.getDisplayName());
+        Assert.assertEquals("/ROOT/bar", cn18.getDisplayName());
+        Assert.assertEquals("/ROOT/bar##A", cn19.getDisplayName());
+        Assert.assertEquals("/##A", cn20.getDisplayName());
+        Assert.assertEquals("/foo.war", cn21.getDisplayName());
+        Assert.assertEquals("/foo", cn22.getDisplayName());
     }
 
     @Test
@@ -236,10 +235,10 @@ public class TestContextName {
     }
 
     private void doCompare(ContextName cn1, ContextName cn2) {
-        assertEquals(cn1.getBaseName(), cn2.getBaseName());
-        assertEquals(cn1.getDisplayName(), cn2.getDisplayName());
-        assertEquals(cn1.getName(), cn2.getName());
-        assertEquals(cn1.getPath(), cn2.getPath());
-        assertEquals(cn1.getVersion(), cn2.getVersion());
+        Assert.assertEquals(cn1.getBaseName(), cn2.getBaseName());
+        Assert.assertEquals(cn1.getDisplayName(), cn2.getDisplayName());
+        Assert.assertEquals(cn1.getName(), cn2.getName());
+        Assert.assertEquals(cn1.getPath(), cn2.getPath());
+        Assert.assertEquals(cn1.getVersion(), cn2.getVersion());
     }
 }

==================================================
TestRequestFilterValve.java
index fbbe17a71d..952333337d 100644
--- a/test/org/apache/catalina/valves/TestRemoteIpValve.java
+++ b/test/org/apache/catalina/valves/TestRemoteIpValve.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.valves;
 
 import java.io.IOException;
@@ -24,12 +23,6 @@ import java.util.List;
 
 import javax.servlet.ServletException;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -112,20 +105,20 @@ public class TestRemoteIpValve {
     public void testListToCommaDelimitedString() {
         List<String> elements = Arrays.asList("element1", "element2", "element3");
         String actual = RemoteIpValve.listToCommaDelimitedString(elements);
-        assertEquals("element1, element2, element3", actual);
+        Assert.assertEquals("element1, element2, element3", actual);
     }
 
     @Test
     public void testListToCommaDelimitedStringEmptyList() {
         List<String> elements = new ArrayList<>();
         String actual = RemoteIpValve.listToCommaDelimitedString(elements);
-        assertEquals("", actual);
+        Assert.assertEquals("", actual);
     }
 
     @Test
     public void testCommaDelimitedListToStringArrayNullList() {
         String actual = RemoteIpValve.listToCommaDelimitedString(null);
-        assertEquals("", actual);
+        Assert.assertEquals("", actual);
     }
 
     @Test
@@ -149,22 +142,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
-        assertNull("x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("x-forwarded-by must be null", actualXForwardedBy);
+        Assert.assertNull("x-forwarded-by must be null", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "192.168.0.10", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "192.168.0.10", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "remote-host-original-value", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "remote-host-original-value", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
 
     }
 
@@ -191,22 +184,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();
-        assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
 
     @Test
@@ -233,22 +226,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();
-        assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
 
     @Test
@@ -274,22 +267,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("all proxies are internal, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are internal, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("all proxies are internal, x-forwarded-by must be null", actualXForwardedBy);
+        Assert.assertNull("all proxies are internal, x-forwarded-by must be null", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
 
     @Test
@@ -317,22 +310,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();
-        assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
 
     @Test
@@ -358,25 +351,25 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "209.244.0.3", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "209.244.0.3", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "209.244.0.3", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "209.244.0.3", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "209.244.0.3", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "209.244.0.3", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
 
         boolean isSecure = remoteAddrAndHostTrackerValve.isSecure();
-        assertTrue("request from internal proxy should be marked secure", isSecure);
+        Assert.assertTrue("request from internal proxy should be marked secure", isSecure);
 
         String scheme = remoteAddrAndHostTrackerValve.getScheme();
-        assertEquals("Scheme should be marked to https.","https",scheme);
+        Assert.assertEquals("Scheme should be marked to https.","https",scheme);
 
         request = new MockRequest();
         request.setCoyoteRequest(new org.apache.coyote.Request());
@@ -390,25 +383,25 @@ public class TestRemoteIpValve {
 
         // VERIFY
         actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "209.244.0.3", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "209.244.0.3", actualRemoteAddr);
 
         actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "209.244.0.3", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "209.244.0.3", actualRemoteHost);
 
         actualPostInvokeRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "209.244.0.3", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "209.244.0.3", actualPostInvokeRemoteAddr);
 
         actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
 
         isSecure = remoteAddrAndHostTrackerValve.isSecure();
-        assertTrue("request from internal proxy should be marked secure", isSecure);
+        Assert.assertTrue("request from internal proxy should be marked secure", isSecure);
 
         scheme = remoteAddrAndHostTrackerValve.getScheme();
-        assertEquals("Scheme should be marked to https.","https",scheme);
+        Assert.assertEquals("Scheme should be marked to https.","https",scheme);
 
 
     }
@@ -442,41 +435,41 @@ public class TestRemoteIpValve {
         // VERIFY
         // client ip
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("no intermediate trusted proxy", actualXForwardedBy);
+        Assert.assertNull("no intermediate trusted proxy", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
 
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
-        assertEquals("x-forwarded-proto says https", "https", actualScheme);
+        Assert.assertEquals("x-forwarded-proto says https", "https", actualScheme);
 
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
-        assertEquals("x-forwarded-proto says https", 443, actualServerPort);
+        Assert.assertEquals("x-forwarded-proto says https", 443, actualServerPort);
 
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
-        assertTrue("x-forwarded-proto says https", actualSecure);
+        Assert.assertTrue("x-forwarded-proto says https", actualSecure);
 
         boolean actualPostInvokeSecure = request.isSecure();
-        assertFalse("postInvoke secure", actualPostInvokeSecure);
+        Assert.assertFalse("postInvoke secure", actualPostInvokeSecure);
 
         int actualPostInvokeServerPort = request.getServerPort();
-        assertEquals("postInvoke serverPort", 8080, actualPostInvokeServerPort);
+        Assert.assertEquals("postInvoke serverPort", 8080, actualPostInvokeServerPort);
 
         String actualPostInvokeScheme = request.getScheme();
-        assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
+        Assert.assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
     }
 
     @Test
@@ -507,41 +500,41 @@ public class TestRemoteIpValve {
         // VERIFY
         // client ip
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("no intermediate trusted proxy", actualXForwardedBy);
+        Assert.assertNull("no intermediate trusted proxy", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
 
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
-        assertEquals("x-forwarded-proto is null", "http", actualScheme);
+        Assert.assertEquals("x-forwarded-proto is null", "http", actualScheme);
 
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
-        assertEquals("x-forwarded-proto is null", 8080, actualServerPort);
+        Assert.assertEquals("x-forwarded-proto is null", 8080, actualServerPort);
 
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
-        assertFalse("x-forwarded-proto is null", actualSecure);
+        Assert.assertFalse("x-forwarded-proto is null", actualSecure);
 
         boolean actualPostInvokeSecure = request.isSecure();
-        assertFalse("postInvoke secure", actualPostInvokeSecure);
+        Assert.assertFalse("postInvoke secure", actualPostInvokeSecure);
 
         int actualPostInvokeServerPort = request.getServerPort();
-        assertEquals("postInvoke serverPort", 8080, actualPostInvokeServerPort);
+        Assert.assertEquals("postInvoke serverPort", 8080, actualPostInvokeServerPort);
 
         String actualPostInvokeScheme = request.getScheme();
-        assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
+        Assert.assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
     }
 
     @Test
@@ -572,41 +565,41 @@ public class TestRemoteIpValve {
         // VERIFY
         // client ip
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();
-        assertNull("no intermediate trusted proxy", actualXForwardedBy);
+        Assert.assertNull("no intermediate trusted proxy", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
 
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
-        assertEquals("x-forwarded-proto says http", "http", actualScheme);
+        Assert.assertEquals("x-forwarded-proto says http", "http", actualScheme);
 
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
-        assertEquals("x-forwarded-proto says http", 80, actualServerPort);
+        Assert.assertEquals("x-forwarded-proto says http", 80, actualServerPort);
 
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
-        assertFalse("x-forwarded-proto says http", actualSecure);
+        Assert.assertFalse("x-forwarded-proto says http", actualSecure);
 
         boolean actualPostInvokeSecure = request.isSecure();
-        assertTrue("postInvoke secure", actualPostInvokeSecure);
+        Assert.assertTrue("postInvoke secure", actualPostInvokeSecure);
 
         int actualPostInvokeServerPort = request.getServerPort();
-        assertEquals("postInvoke serverPort", 8443, actualPostInvokeServerPort);
+        Assert.assertEquals("postInvoke serverPort", 8443, actualPostInvokeServerPort);
 
         String actualPostInvokeScheme = request.getScheme();
-        assertEquals("postInvoke scheme", "https", actualPostInvokeScheme);
+        Assert.assertEquals("postInvoke scheme", "https", actualPostInvokeScheme);
     }
 
     @Test
@@ -637,41 +630,41 @@ public class TestRemoteIpValve {
         // VERIFY
         // client ip
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
+        Assert.assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("no intermediate trusted proxy", actualXForwardedBy);
+        Assert.assertNull("no intermediate trusted proxy", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);
 
         // protocol
         String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
-        assertEquals("x-forwarded-proto is null", "https", actualScheme);
+        Assert.assertEquals("x-forwarded-proto is null", "https", actualScheme);
 
         int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
-        assertEquals("x-forwarded-proto is null", 8443, actualServerPort);
+        Assert.assertEquals("x-forwarded-proto is null", 8443, actualServerPort);
 
         boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
-        assertTrue("x-forwarded-proto is null", actualSecure);
+        Assert.assertTrue("x-forwarded-proto is null", actualSecure);
 
         boolean actualPostInvokeSecure = request.isSecure();
-        assertTrue("postInvoke secure", actualPostInvokeSecure);
+        Assert.assertTrue("postInvoke secure", actualPostInvokeSecure);
 
         int actualPostInvokeServerPort = request.getServerPort();
-        assertEquals("postInvoke serverPort", 8443, actualPostInvokeServerPort);
+        Assert.assertEquals("postInvoke serverPort", 8443, actualPostInvokeServerPort);
 
         String actualPostInvokeScheme = request.getScheme();
-        assertEquals("postInvoke scheme", "https", actualPostInvokeScheme);
+        Assert.assertEquals("postInvoke scheme", "https", actualPostInvokeScheme);
     }
 
     @Test
@@ -696,22 +689,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = request.getHeader("x-forwarded-for");
-        assertEquals("x-forwarded-for must be unchanged", "140.211.11.130, proxy1, proxy2", actualXForwardedFor);
+        Assert.assertEquals("x-forwarded-for must be unchanged", "140.211.11.130, proxy1, proxy2", actualXForwardedFor);
 
         String actualXForwardedBy = request.getHeader("x-forwarded-by");
-        assertNull("x-forwarded-by must be null", actualXForwardedBy);
+        Assert.assertNull("x-forwarded-by must be null", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "not-allowed-internal-proxy", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "not-allowed-internal-proxy", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "not-allowed-internal-proxy-host", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "not-allowed-internal-proxy-host", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "not-allowed-internal-proxy", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "not-allowed-internal-proxy", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "not-allowed-internal-proxy-host", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "not-allowed-internal-proxy-host", actualPostInvokeRemoteHost);
     }
 
     @Test
@@ -737,22 +730,22 @@ public class TestRemoteIpValve {
 
         // VERIFY
         String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();
-        assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130, proxy1", actualXForwardedFor);
+        Assert.assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130, proxy1", actualXForwardedFor);
 
         String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();
-        assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2", actualXForwardedBy);
+        Assert.assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2", actualXForwardedBy);
 
         String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();
-        assertEquals("remoteAddr", "untrusted-proxy", actualRemoteAddr);
+        Assert.assertEquals("remoteAddr", "untrusted-proxy", actualRemoteAddr);
 
         String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();
-        assertEquals("remoteHost", "untrusted-proxy", actualRemoteHost);
+        Assert.assertEquals("remoteHost", "untrusted-proxy", actualRemoteHost);
 
         String actualPostInvokeRemoteAddr = request.getRemoteAddr();
-        assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
+        Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);
 
         String actualPostInvokeRemoteHost = request.getRemoteHost();
-        assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
+        Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHost);
     }
 
     @Test
@@ -812,19 +805,19 @@ public class TestRemoteIpValve {
 
     private void assertArrayEquals(String[] expected, String[] actual) {
         if (expected == null) {
-            assertNull(actual);
+            Assert.assertNull(actual);
             return;
         }
-        assertNotNull(actual);
-        assertEquals(expected.length, actual.length);
+        Assert.assertNotNull(actual);
+        Assert.assertEquals(expected.length, actual.length);
         List<String> e = new ArrayList<>();
         e.addAll(Arrays.asList(expected));
         List<String> a = new ArrayList<>();
         a.addAll(Arrays.asList(actual));
 
         for (String entry : e) {
-            assertTrue(a.remove(entry));
+            Assert.assertTrue(a.remove(entry));
         }
-        assertTrue(a.isEmpty());
+        Assert.assertTrue(a.isEmpty());
     }
 }

==================================================
TesterAccessLogValve.java
index a167b7e39c..13f52230df 100644
--- a/test/org/apache/catalina/valves/TestRequestFilterValve.java
+++ b/test/org/apache/catalina/valves/TestRequestFilterValve.java
@@ -14,16 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.valves;
 
 import java.io.IOException;
 
 import javax.servlet.ServletException;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -133,7 +129,7 @@ public class TestRequestFilterValve {
             } else if (valve instanceof RemoteHostValve) {
                 ((RemoteHostValve)valve).setAddConnectorPort(true);
             } else {
-                fail("Can only set 'addConnectorPort' for RemoteAddrValve and RemoteHostValve");
+                Assert.fail("Can only set 'addConnectorPort' for RemoteAddrValve and RemoteHostValve");
             }
             msg.append(" addConnectorPort='true'");
         }
@@ -154,10 +150,10 @@ public class TestRequestFilterValve {
 
         // VERIFY
         if (!allowed && auth) {
-            assertEquals(msg.toString(), OK, response.getStatus());
-            assertEquals(msg.toString(), "invalid", request.getHeader("authorization"));
+            Assert.assertEquals(msg.toString(), OK, response.getStatus());
+            Assert.assertEquals(msg.toString(), "invalid", request.getHeader("authorization"));
         } else {
-            assertEquals(msg.toString(), expected, response.getStatus());
+            Assert.assertEquals(msg.toString(), expected, response.getStatus());
         }
     }
 

==================================================
TestHttp11InputBuffer.java
index 213f5a4948..d0dc0ca285 100644
--- a/test/org/apache/catalina/valves/TesterAccessLogValve.java
+++ b/test/org/apache/catalina/valves/TesterAccessLogValve.java
@@ -22,8 +22,7 @@ import java.util.concurrent.ConcurrentLinkedQueue;
 
 import javax.servlet.ServletException;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import org.junit.Assert;
 
 import org.apache.catalina.AccessLog;
 import org.apache.catalina.connector.Request;
@@ -85,12 +84,12 @@ public class TesterAccessLogValve extends ValveBase implements AccessLog {
             entriesLog.append(entry.toString());
             entriesLog.append(System.lineSeparator());
         }
-        assertEquals(entriesLog.toString(), count, entries.size());
+        Assert.assertEquals(entriesLog.toString(), count, entries.size());
         for (Entry entry : entries) {
-            assertEquals(status, entry.getStatus());
-            assertTrue(entry.toString() + " duration is not >= " + (minTime - ERROR_MARGIN),
+            Assert.assertEquals(status, entry.getStatus());
+            Assert.assertTrue(entry.toString() + " duration is not >= " + (minTime - ERROR_MARGIN),
                     entry.getTime() >= minTime - ERROR_MARGIN);
-            assertTrue(entry.toString() + " duration is not < " + (maxTime + ERROR_MARGIN),
+            Assert.assertTrue(entry.toString() + " duration is not < " + (maxTime + ERROR_MARGIN),
                     entry.getTime() < maxTime + ERROR_MARGIN);
         }
     }

==================================================
TestHttp11Processor.java
index f9d54db31b..131fa21569 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
@@ -26,10 +26,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -50,8 +47,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         Bug48839Client client = new Bug48839Client();
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -137,9 +134,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         Bug51557Client client = new Bug51557Client("X-Bug51557Valid", "1234");
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertEquals("1234abcd", client.getResponseBody());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("1234abcd", client.getResponseBody());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -149,7 +146,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         Bug51557Client client = new Bug51557Client("X-Bug51557=Invalid", "1234", true);
 
         client.doRequest();
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
 
@@ -159,9 +156,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         Bug51557Client client = new Bug51557Client("X-Bug51557NoColon");
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertEquals("abcd", client.getResponseBody());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("abcd", client.getResponseBody());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -197,9 +194,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 "foo" + SimpleHttpClient.CRLF + " bar");
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertEquals("abcd", client.getResponseBody());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("abcd", client.getResponseBody());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -210,9 +207,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 "invalid");
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertEquals("abcd", client.getResponseBody());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("abcd", client.getResponseBody());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -223,9 +220,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 "invalid");
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertEquals("abcd", client.getResponseBody());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("abcd", client.getResponseBody());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -234,9 +231,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
             new Bug51557Client("X-Bug" + s + "51557", "invalid");
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertEquals("abcd", client.getResponseBody());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("abcd", client.getResponseBody());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
     /**
@@ -367,8 +364,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         NewLinesClient client = new NewLinesClient(10);
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -385,9 +382,9 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         // fail and the response won't be read.
         Exception e = client.doRequest();
         if (e == null) {
-            assertTrue(client.getResponseLine(), client.isResponse400());
+            Assert.assertTrue(client.getResponseLine(), client.isResponse400());
         }
-        assertFalse(client.isResponseBodyOK());
+        Assert.assertFalse(client.isResponseBodyOK());
     }
 
 
@@ -462,8 +459,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         Bug54947Client client = new Bug54947Client();
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -528,8 +525,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         Bug59089Client client = new Bug59089Client();
 
         client.doRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 
@@ -594,8 +591,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         InvalidMethodClient client = new InvalidMethodClient();
 
         client.doRequest();
-        assertTrue(client.getResponseLine(), client.isResponse400());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.getResponseLine(), client.isResponse400());
+        Assert.assertTrue(client.isResponseBodyOK());
     }
 
 

==================================================
TestChunkedInputFilter.java
index e7c22b844d..5357526a11 100644
--- a/test/org/apache/coyote/http11/TestHttp11Processor.java
+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java
@@ -45,11 +45,6 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -97,7 +92,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         // Expected response is a 200 response followed by an incomplete chunked
         // body.
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
         // Should use chunked encoding
         String transferEncoding = null;
         for (String header : client.getResponseHeaders()) {
@@ -107,9 +102,9 @@ public class TestHttp11Processor extends TomcatBaseTest {
         }
         Assert.assertEquals("chunked", transferEncoding);
         // There should not be an end chunk
-        assertFalse(client.getResponseBody().endsWith("0"));
+        Assert.assertFalse(client.getResponseBody().endsWith("0"));
         // The last portion of text should be there
-        assertTrue(client.getResponseBody().endsWith("line03"));
+        Assert.assertTrue(client.getResponseBody().endsWith("line03"));
     }
 
     private static class ResponseWithErrorServlet extends HttpServlet {
@@ -163,7 +158,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse417());
+        Assert.assertTrue(client.isResponse417());
     }
 
 
@@ -186,7 +181,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse501());
+        Assert.assertTrue(client.isResponse501());
     }
 
 
@@ -209,7 +204,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse501());
+        Assert.assertTrue(client.isResponse501());
     }
 
 
@@ -249,8 +244,8 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.getResponseBody().contains("test - data"));
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.getResponseBody().contains("test - data"));
     }
 
 
@@ -274,8 +269,8 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.getResponseBody().contains("test - data"));
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.getResponseBody().contains("test - data"));
     }
 
 
@@ -298,7 +293,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse501());
+        Assert.assertTrue(client.isResponse501());
     }
 
 
@@ -321,7 +316,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertTrue(client.isResponse501());
+        Assert.assertTrue(client.isResponse501());
     }
 
 
@@ -372,16 +367,16 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         // Now read the first response
         client.readResponse(true);
-        assertFalse(client.isResponse50x());
-        assertTrue(client.isResponse200());
-        assertEquals("OK", client.getResponseBody());
+        Assert.assertFalse(client.isResponse50x());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("OK", client.getResponseBody());
 
         // Read the second response. No need to sleep, read will block until
         // there is data to process
         client.readResponse(true);
-        assertFalse(client.isResponse50x());
-        assertTrue(client.isResponse200());
-        assertEquals("OK", client.getResponseBody());
+        Assert.assertFalse(client.isResponse50x());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertEquals("OK", client.getResponseBody());
     }
 
 
@@ -403,11 +398,11 @@ public class TestHttp11Processor extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() + "/test", responseBody,
                 responseHeaders);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertTrue(responseHeaders.containsKey("Transfer-Encoding"));
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertTrue(responseHeaders.containsKey("Transfer-Encoding"));
         List<String> encodings = responseHeaders.get("Transfer-Encoding");
-        assertEquals(1, encodings.size());
-        assertEquals("chunked", encodings.get(0));
+        Assert.assertEquals(1, encodings.size());
+        Assert.assertEquals("chunked", encodings.get(0));
     }
 
     @Test
@@ -431,16 +426,16 @@ public class TestHttp11Processor extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() + "/test", responseBody,
                 responseHeaders);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
 
-        assertTrue(responseHeaders.containsKey("Connection"));
+        Assert.assertTrue(responseHeaders.containsKey("Connection"));
         List<String> connections = responseHeaders.get("Connection");
-        assertEquals(1, connections.size());
-        assertEquals("close", connections.get(0));
+        Assert.assertEquals(1, connections.size());
+        Assert.assertEquals("close", connections.get(0));
 
-        assertFalse(responseHeaders.containsKey("Transfer-Encoding"));
+        Assert.assertFalse(responseHeaders.containsKey("Transfer-Encoding"));
 
-        assertEquals("OK", responseBody.toString());
+        Assert.assertEquals("OK", responseBody.toString());
     }
 
     @Test
@@ -470,11 +465,11 @@ public class TestHttp11Processor extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() + "/test", responseBody,
                 responseHeaders);
 
-        assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
         if (responseBody.getLength() > 0) {
             // It will be >0 if the standard error page handling has been
             // triggered
-            assertFalse(responseBody.toString().contains("FAIL"));
+            Assert.assertFalse(responseBody.toString().contains("FAIL"));
         }
     }
 
@@ -746,14 +741,14 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.connect();
 
         client.doRequest();
-        assertTrue(client.getResponseLine(), client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.getResponseLine(), client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
 
         // Do the request again to ensure that the remaining body was swallowed
         client.resetResponse();
         client.processRequest();
-        assertTrue(client.isResponse200());
-        assertTrue(client.isResponseBodyOK());
+        Assert.assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponseBodyOK());
 
         client.disconnect();
     }
@@ -858,9 +853,9 @@ public class TestHttp11Processor extends TomcatBaseTest {
         int rc = headUrl("http://localhost:" + getPort() + "/test", responseBody,
                 responseHeaders);
 
-        assertEquals(HttpServletResponse.SC_OK, rc);
-        assertEquals(0, responseBody.getLength());
-        assertFalse(responseHeaders.containsKey("Content-Length"));
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+        Assert.assertEquals(0, responseBody.getLength());
+        Assert.assertFalse(responseHeaders.containsKey("Content-Length"));
     }
 
 
@@ -992,10 +987,10 @@ public class TestHttp11Processor extends TomcatBaseTest {
         Map<String,List<String>> responseHeaders = new HashMap<>();
         int rc = getUrl("http://localhost:" + getPort() + "/test", responseBody, responseHeaders);
 
-        assertEquals(HttpServletResponse.SC_RESET_CONTENT, rc);
-        assertNotNull(responseHeaders.get("Content-Length"));
-        assertTrue("0".equals(responseHeaders.get("Content-Length").get(0)));
-        assertTrue(responseBody.getLength() == 0);
+        Assert.assertEquals(HttpServletResponse.SC_RESET_CONTENT, rc);
+        Assert.assertNotNull(responseHeaders.get("Content-Length"));
+        Assert.assertTrue("0".equals(responseHeaders.get("Content-Length").get(0)));
+        Assert.assertTrue(responseBody.getLength() == 0);
     }
 
     private static final class Bug61086Servlet extends HttpServlet {
@@ -1042,7 +1037,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 400 response.
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
     /*
@@ -1078,7 +1073,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 400 response.
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
     @Test
@@ -1109,7 +1104,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 400 response.
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
     @Test
@@ -1141,7 +1136,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 400 response.
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
     @Test
@@ -1173,7 +1168,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 400 response.
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
     @Test
@@ -1205,7 +1200,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 400 response.
-        assertTrue(client.isResponse400());
+        Assert.assertTrue(client.isResponse400());
     }
 
     /*
@@ -1240,7 +1235,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 200 response.
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
     }
 
     /*
@@ -1275,7 +1270,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 200 response.
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
     }
 
     /*
@@ -1311,6 +1306,6 @@ public class TestHttp11Processor extends TomcatBaseTest {
         client.processRequest();
 
         // Expected response is a 200 response.
-        assertTrue(client.isResponse200());
+        Assert.assertTrue(client.isResponse200());
     }
 }

==================================================
TestGzipOutputFilter.java
index f90dfa0425..91ec506ced 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -26,11 +26,7 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -147,17 +143,17 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         }
 
         if (expectPass) {
-            assertTrue(client.isResponse200());
-            assertEquals("nullnull7TestValue1TestValue2",
+            Assert.assertTrue(client.isResponse200());
+            Assert.assertEquals("nullnull7TestValue1TestValue2",
                     client.getResponseBody());
-            assertNull(processException);
-            assertFalse(servlet.getExceptionDuringRead());
+            Assert.assertNull(processException);
+            Assert.assertFalse(servlet.getExceptionDuringRead());
         } else {
             if (processException == null) {
-                assertTrue(client.getResponseLine(), client.isResponse500());
+                Assert.assertTrue(client.getResponseLine(), client.isResponse500());
             } else {
                 // Use fall-back for checking the error occurred
-                assertTrue(servlet.getExceptionDuringRead());
+                Assert.assertTrue(servlet.getExceptionDuringRead());
             }
         }
     }
@@ -201,7 +197,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         client.processRequest();
         // Expected to fail because the trailers are longer
         // than the set limit of 10 bytes
-        assertTrue(client.isResponse500());
+        Assert.assertTrue(client.isResponse500());
     }
 
 
@@ -267,9 +263,9 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         client.processRequest();
 
         if (ok) {
-            assertTrue(client.isResponse200());
+            Assert.assertTrue(client.isResponse200());
         } else {
-            assertTrue(client.isResponse500());
+            Assert.assertTrue(client.isResponse500());
         }
     }
 
@@ -307,7 +303,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
 
         client.connect();
         client.processRequest();
-        assertEquals("nullnull7nullnull", client.getResponseBody());
+        Assert.assertEquals("nullnull7nullnull", client.getResponseBody());
     }
 
     @Test
@@ -411,20 +407,20 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         }
         if (expectPass) {
             if (expectReadWholeBody) {
-                assertNull(processException);
+                Assert.assertNull(processException);
             }
             if (processException == null) {
-                assertTrue(client.getResponseLine(), client.isResponse200());
-                assertEquals(String.valueOf(expectReadCount),
+                Assert.assertTrue(client.getResponseLine(), client.isResponse200());
+                Assert.assertEquals(String.valueOf(expectReadCount),
                         client.getResponseBody());
             }
-            assertEquals(expectReadCount, servlet.getCountRead());
+            Assert.assertEquals(expectReadCount, servlet.getCountRead());
         } else {
             if (processException == null) {
-                assertTrue(client.getResponseLine(), client.isResponse500());
+                Assert.assertTrue(client.getResponseLine(), client.isResponse500());
             }
-            assertEquals(0, servlet.getCountRead());
-            assertTrue(servlet.getExceptionDuringRead());
+            Assert.assertEquals(0, servlet.getCountRead());
+            Assert.assertTrue(servlet.getExceptionDuringRead());
         }
     }
 

==================================================
TestUpgrade.java
index 153c9f472c..5ddfaaa670 100644
--- a/test/org/apache/coyote/http11/filters/TestGzipOutputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestGzipOutputFilter.java
@@ -21,8 +21,7 @@ import java.io.ByteArrayOutputStream;
 import java.nio.ByteBuffer;
 import java.util.zip.GZIPOutputStream;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.coyote.Response;
@@ -81,6 +80,6 @@ public class TestGzipOutputFilter {
         byte[] dataExpected = gbos.toByteArray();
 
         // most of the data should have been flushed out
-        assertTrue(dataFound.length >= (dataExpected.length - 20));
+        Assert.assertTrue(dataFound.length >= (dataExpected.length - 20));
     }
 }

==================================================
TestUpgradeInternalHandler.java
index 207145390d..a137268a45 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgrade.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgrade.java
@@ -43,7 +43,6 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import static org.apache.catalina.startup.SimpleHttpClient.CRLF;
-
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;

==================================================
TestELEvaluation.java
index 25df6374a1..a6b53f6d0e 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
@@ -42,7 +42,6 @@ import org.junit.Assume;
 import org.junit.Test;
 
 import static org.apache.catalina.startup.SimpleHttpClient.CRLF;
-
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;

==================================================
TestMethodExpressionImpl.java
index c4960603d5..41e41e95db 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -23,11 +23,6 @@ import java.util.Date;
 import javax.el.ELException;
 import javax.el.ValueExpression;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -47,22 +42,22 @@ public class TestELEvaluation {
      */
     @Test
     public void testBug42565() {
-        assertEquals("false", evaluateExpression("${false?true:false}"));
-        assertEquals("false", evaluateExpression("${false?true: false}"));
-        assertEquals("false", evaluateExpression("${false?true :false}"));
-        assertEquals("false", evaluateExpression("${false?true : false}"));
-        assertEquals("false", evaluateExpression("${false? true:false}"));
-        assertEquals("false", evaluateExpression("${false? true: false}"));
-        assertEquals("false", evaluateExpression("${false? true :false}"));
-        assertEquals("false", evaluateExpression("${false? true : false}"));
-        assertEquals("false", evaluateExpression("${false ?true:false}"));
-        assertEquals("false", evaluateExpression("${false ?true: false}"));
-        assertEquals("false", evaluateExpression("${false ?true :false}"));
-        assertEquals("false", evaluateExpression("${false ?true : false}"));
-        assertEquals("false", evaluateExpression("${false ? true:false}"));
-        assertEquals("false", evaluateExpression("${false ? true: false}"));
-        assertEquals("false", evaluateExpression("${false ? true :false}"));
-        assertEquals("false", evaluateExpression("${false ? true : false}"));
+        Assert.assertEquals("false", evaluateExpression("${false?true:false}"));
+        Assert.assertEquals("false", evaluateExpression("${false?true: false}"));
+        Assert.assertEquals("false", evaluateExpression("${false?true :false}"));
+        Assert.assertEquals("false", evaluateExpression("${false?true : false}"));
+        Assert.assertEquals("false", evaluateExpression("${false? true:false}"));
+        Assert.assertEquals("false", evaluateExpression("${false? true: false}"));
+        Assert.assertEquals("false", evaluateExpression("${false? true :false}"));
+        Assert.assertEquals("false", evaluateExpression("${false? true : false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ?true:false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ?true: false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ?true :false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ?true : false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ? true:false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ? true: false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ? true :false}"));
+        Assert.assertEquals("false", evaluateExpression("${false ? true : false}"));
     }
 
 
@@ -71,27 +66,27 @@ public class TestELEvaluation {
      */
     @Test
     public void testBug44994() {
-        assertEquals("none", evaluateExpression(
+        Assert.assertEquals("none", evaluateExpression(
                 "${0 lt 0 ? 1 lt 0 ? 'many': 'one': 'none'}"));
-        assertEquals("one", evaluateExpression(
+        Assert.assertEquals("one", evaluateExpression(
                 "${0 lt 1 ? 1 lt 1 ? 'many': 'one': 'none'}"));
-        assertEquals("many", evaluateExpression(
+        Assert.assertEquals("many", evaluateExpression(
                 "${0 lt 2 ? 1 lt 2 ? 'many': 'one': 'none'}"));
     }
 
     @Test
     public void testParserBug45511() {
         // Test cases provided by OP
-        assertEquals("true", evaluateExpression("${empty ('')}"));
-        assertEquals("true", evaluateExpression("${empty('')}"));
-        assertEquals("false", evaluateExpression("${(true) and (false)}"));
-        assertEquals("false", evaluateExpression("${(true)and(false)}"));
+        Assert.assertEquals("true", evaluateExpression("${empty ('')}"));
+        Assert.assertEquals("true", evaluateExpression("${empty('')}"));
+        Assert.assertEquals("false", evaluateExpression("${(true) and (false)}"));
+        Assert.assertEquals("false", evaluateExpression("${(true)and(false)}"));
     }
 
     @Test
     public void testBug48112() {
         // bug 48112
-        assertEquals("{world}", evaluateExpression("${fn:trim('{world}')}"));
+        Assert.assertEquals("{world}", evaluateExpression("${fn:trim('{world}')}"));
     }
 
     @Test
@@ -100,30 +95,30 @@ public class TestELEvaluation {
         // list and looking at the spec to find some edge cases
 
         // '\' is only an escape character inside a StringLiteral
-        assertEquals("\\\\", evaluateExpression("\\\\"));
+        Assert.assertEquals("\\\\", evaluateExpression("\\\\"));
 
         /*
          * LiteralExpressions can only contain ${ or #{ if escaped with \
          * \ is not an escape character in any other circumstances including \\
          */
-        assertEquals("\\", evaluateExpression("\\"));
-        assertEquals("$", evaluateExpression("$"));
-        assertEquals("#", evaluateExpression("#"));
-        assertEquals("\\$", evaluateExpression("\\$"));
-        assertEquals("\\#", evaluateExpression("\\#"));
-        assertEquals("\\\\$", evaluateExpression("\\\\$"));
-        assertEquals("\\\\#", evaluateExpression("\\\\#"));
-        assertEquals("${", evaluateExpression("\\${"));
-        assertEquals("#{", evaluateExpression("\\#{"));
-        assertEquals("\\${", evaluateExpression("\\\\${"));
-        assertEquals("\\#{", evaluateExpression("\\\\#{"));
+        Assert.assertEquals("\\", evaluateExpression("\\"));
+        Assert.assertEquals("$", evaluateExpression("$"));
+        Assert.assertEquals("#", evaluateExpression("#"));
+        Assert.assertEquals("\\$", evaluateExpression("\\$"));
+        Assert.assertEquals("\\#", evaluateExpression("\\#"));
+        Assert.assertEquals("\\\\$", evaluateExpression("\\\\$"));
+        Assert.assertEquals("\\\\#", evaluateExpression("\\\\#"));
+        Assert.assertEquals("${", evaluateExpression("\\${"));
+        Assert.assertEquals("#{", evaluateExpression("\\#{"));
+        Assert.assertEquals("\\${", evaluateExpression("\\\\${"));
+        Assert.assertEquals("\\#{", evaluateExpression("\\\\#{"));
 
         // '\' is only an escape for '${' and '#{'.
-        assertEquals("\\$", evaluateExpression("\\$"));
-        assertEquals("${", evaluateExpression("\\${"));
-        assertEquals("\\$a", evaluateExpression("\\$a"));
-        assertEquals("\\a", evaluateExpression("\\a"));
-        assertEquals("\\\\", evaluateExpression("\\\\"));
+        Assert.assertEquals("\\$", evaluateExpression("\\$"));
+        Assert.assertEquals("${", evaluateExpression("\\${"));
+        Assert.assertEquals("\\$a", evaluateExpression("\\$a"));
+        Assert.assertEquals("\\a", evaluateExpression("\\a"));
+        Assert.assertEquals("\\\\", evaluateExpression("\\\\"));
     }
 
     @Test
@@ -133,10 +128,10 @@ public class TestELEvaluation {
 
         // The only characters that can be escaped inside a String literal
         // are \ " and '. # and $ are not escaped inside a String literal.
-        assertEquals("\\", evaluateExpression("${'\\\\'}"));
-        assertEquals("\\", evaluateExpression("${\"\\\\\"}"));
-        assertEquals("\\\"'$#", evaluateExpression("${'\\\\\\\"\\'$#'}"));
-        assertEquals("\\\"'$#", evaluateExpression("${\"\\\\\\\"\\'$#\"}"));
+        Assert.assertEquals("\\", evaluateExpression("${'\\\\'}"));
+        Assert.assertEquals("\\", evaluateExpression("${\"\\\\\"}"));
+        Assert.assertEquals("\\\"'$#", evaluateExpression("${'\\\\\\\"\\'$#'}"));
+        Assert.assertEquals("\\\"'$#", evaluateExpression("${\"\\\\\\\"\\'$#\"}"));
 
         // Trying to quote # or $ should throw an error
         Exception e = null;
@@ -145,34 +140,34 @@ public class TestELEvaluation {
         } catch (ELException el) {
             e = el;
         }
-        assertNotNull(e);
+        Assert.assertNotNull(e);
 
-        assertEquals("\\$", evaluateExpression("${'\\\\$'}"));
-        assertEquals("\\\\$", evaluateExpression("${'\\\\\\\\$'}"));
+        Assert.assertEquals("\\$", evaluateExpression("${'\\\\$'}"));
+        Assert.assertEquals("\\\\$", evaluateExpression("${'\\\\\\\\$'}"));
 
 
         // Can use ''' inside '"' when quoting with '"' and vice versa without
         // escaping
-        assertEquals("\\\"", evaluateExpression("${'\\\\\"'}"));
-        assertEquals("\"\\", evaluateExpression("${'\"\\\\'}"));
-        assertEquals("\\'", evaluateExpression("${'\\\\\\''}"));
-        assertEquals("'\\", evaluateExpression("${'\\'\\\\'}"));
-        assertEquals("\\'", evaluateExpression("${\"\\\\'\"}"));
-        assertEquals("'\\", evaluateExpression("${\"'\\\\\"}"));
-        assertEquals("\\\"", evaluateExpression("${\"\\\\\\\"\"}"));
-        assertEquals("\"\\", evaluateExpression("${\"\\\"\\\\\"}"));
+        Assert.assertEquals("\\\"", evaluateExpression("${'\\\\\"'}"));
+        Assert.assertEquals("\"\\", evaluateExpression("${'\"\\\\'}"));
+        Assert.assertEquals("\\'", evaluateExpression("${'\\\\\\''}"));
+        Assert.assertEquals("'\\", evaluateExpression("${'\\'\\\\'}"));
+        Assert.assertEquals("\\'", evaluateExpression("${\"\\\\'\"}"));
+        Assert.assertEquals("'\\", evaluateExpression("${\"'\\\\\"}"));
+        Assert.assertEquals("\\\"", evaluateExpression("${\"\\\\\\\"\"}"));
+        Assert.assertEquals("\"\\", evaluateExpression("${\"\\\"\\\\\"}"));
     }
 
     @Test
     public void testMultipleEscaping() throws Exception {
-        assertEquals("''", evaluateExpression("${\"\'\'\"}"));
+        Assert.assertEquals("''", evaluateExpression("${\"\'\'\"}"));
     }
 
     private void compareBoth(String msg, int expected, Object o1, Object o2){
         int i1 = ELSupport.compare(null, o1, o2);
         int i2 = ELSupport.compare(null, o2, o1);
-        assertEquals(msg,expected, i1);
-        assertEquals(msg,expected, -i2);
+        Assert.assertEquals(msg,expected, i1);
+        Assert.assertEquals(msg,expected, -i2);
     }
 
     @Test
@@ -184,11 +179,11 @@ public class TestELEvaluation {
         compareBoth("Date(0) should be less than Date(1)",-1, new Date(0), new Date(1));
         try {
             compareBoth("Should not compare",0, new Date(), new File(""));
-            fail("Expecting ClassCastException");
+            Assert.fail("Expecting ClassCastException");
         } catch (ClassCastException expected) {
             // Expected
         }
-        assertTrue(null == null);
+        Assert.assertTrue(null == null);
     }
 
     /**
@@ -203,7 +198,7 @@ public class TestELEvaluation {
         } catch (ELException el) {
             e = el;
         }
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test

==================================================
TestValueExpressionImpl.java
index 6a810da57a..b1d10768d9 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -22,11 +22,7 @@ import javax.el.ExpressionFactory;
 import javax.el.MethodExpression;
 import javax.el.ValueExpression;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -92,8 +88,8 @@ public class TestMethodExpressionImpl {
                 context, "${beanB.sayHello('JUnit')}", String.class,
                 new Class<?>[] { String.class });
 
-        assertFalse(me1.isParametersProvided());
-        assertTrue(me2.isParametersProvided());
+        Assert.assertFalse(me1.isParametersProvided());
+        Assert.assertTrue(me2.isParametersProvided());
     }
 
     @Test
@@ -107,15 +103,15 @@ public class TestMethodExpressionImpl {
                 context, "${beanB.sayHello}", String.class,
                 new Class<?>[] { String.class });
 
-        assertEquals("B", me1.invoke(context, null));
-        assertEquals("Hello JUnit from B", me2.invoke(context, null));
-        assertEquals("Hello JUnit from B",
+        Assert.assertEquals("B", me1.invoke(context, null));
+        Assert.assertEquals("Hello JUnit from B", me2.invoke(context, null));
+        Assert.assertEquals("Hello JUnit from B",
                 me2.invoke(context, new Object[] { "JUnit2" }));
-        assertEquals("Hello JUnit2 from B",
+        Assert.assertEquals("Hello JUnit2 from B",
                 me3.invoke(context, new Object[] { "JUnit2" }));
-        assertEquals("Hello JUnit from B",
+        Assert.assertEquals("Hello JUnit from B",
                 me2.invoke(context, new Object[] { null }));
-        assertEquals("Hello  from B",
+        Assert.assertEquals("Hello  from B",
                 me3.invoke(context, new Object[] { null }));
     }
 
@@ -128,7 +124,7 @@ public class TestMethodExpressionImpl {
         ValueExpression ve = factory.createValueExpression(context,
                 "${beanA.bean.name}", String.class);
         Object r = ve.getValue(context);
-        assertEquals("BB", r);
+        Assert.assertEquals("BB", r);
     }
 
     @Test
@@ -136,7 +132,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me2 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanA,beanB)}", null , null);
         Object r2 = me2.invoke(context, null);
-        assertEquals("AB: Hello A from B", r2.toString());
+        Assert.assertEquals("AB: Hello A from B", r2.toString());
     }
 
     @Test
@@ -144,7 +140,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me3 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanA,beanB)}", String.class , null);
         Object r3 = me3.invoke(context, null);
-        assertEquals("AB: Hello A from B", r3.toString());
+        Assert.assertEquals("AB: Hello A from B", r3.toString());
     }
 
     @Test
@@ -153,7 +149,7 @@ public class TestMethodExpressionImpl {
                 "${beanC.sayHello(beanA,beanB)}", null ,
                 new Class<?>[] {TesterBeanA.class, TesterBeanB.class});
         Object r4 = me4.invoke(context, null);
-        assertEquals("AB: Hello A from B", r4.toString());
+        Assert.assertEquals("AB: Hello A from B", r4.toString());
     }
 
     @Test
@@ -162,7 +158,7 @@ public class TestMethodExpressionImpl {
                 "${beanC.sayHello(beanA,beanB)}", String.class ,
                 new Class<?>[] {TesterBeanA.class, TesterBeanB.class});
         Object r5 = me5.invoke(context, null);
-        assertEquals("AB: Hello A from B", r5.toString());
+        Assert.assertEquals("AB: Hello A from B", r5.toString());
     }
 
     @Test
@@ -170,7 +166,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me6 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanA,beanBB)}", null , null);
         Object r6 = me6.invoke(context, null);
-        assertEquals("ABB: Hello A from BB", r6.toString());
+        Assert.assertEquals("ABB: Hello A from BB", r6.toString());
     }
 
     @Test
@@ -178,7 +174,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me7 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanA,beanBBB)}", null , null);
         Object r7 = me7.invoke(context, null);
-        assertEquals("ABB: Hello A from BBB", r7.toString());
+        Assert.assertEquals("ABB: Hello A from BBB", r7.toString());
     }
 
     @Test
@@ -186,7 +182,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me8 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAA,beanB)}", null , null);
         Object r8 = me8.invoke(context, null);
-        assertEquals("AAB: Hello AA from B", r8.toString());
+        Assert.assertEquals("AAB: Hello AA from B", r8.toString());
     }
 
     @Test
@@ -200,7 +196,7 @@ public class TestMethodExpressionImpl {
             e = e1;
         }
         // Expected to fail
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test
@@ -211,7 +207,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me10 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAA,beanBBB)}", null , null);
         Object r10 = me10.invoke(context, null);
-        assertEquals("AAB: Hello AA from BBB", r10.toString());
+        Assert.assertEquals("AAB: Hello AA from BBB", r10.toString());
     }
 
     @Test
@@ -219,7 +215,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me11 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAAA,beanB)}", null , null);
         Object r11 = me11.invoke(context, null);
-        assertEquals("AAB: Hello AAA from B", r11.toString());
+        Assert.assertEquals("AAB: Hello AAA from B", r11.toString());
     }
 
     @Test
@@ -230,7 +226,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me12 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAAA,beanBB)}", null , null);
         Object r12 = me12.invoke(context, null);
-        assertEquals("ABB: Hello AAA from BB", r12.toString());
+        Assert.assertEquals("ABB: Hello AAA from BB", r12.toString());
     }
 
     @Test
@@ -244,7 +240,7 @@ public class TestMethodExpressionImpl {
             e = e1;
         }
         // Expected to fail
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test
@@ -258,7 +254,7 @@ public class TestMethodExpressionImpl {
             e = e1;
         }
         // Expected to fail
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test
@@ -266,7 +262,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me2 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanA,beanBB,beanBB)}", null , null);
         Object r2 = me2.invoke(context, null);
-        assertEquals("ABB[]: Hello A from BB, BB", r2.toString());
+        Assert.assertEquals("ABB[]: Hello A from BB, BB", r2.toString());
     }
 
     @Test
@@ -274,7 +270,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me3 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanA,beanBBB,beanBBB)}", null , null);
         Object r3 = me3.invoke(context, null);
-        assertEquals("ABB[]: Hello A from BBB, BBB", r3.toString());
+        Assert.assertEquals("ABB[]: Hello A from BBB, BBB", r3.toString());
     }
 
     @Test
@@ -288,7 +284,7 @@ public class TestMethodExpressionImpl {
             e = e1;
         }
         // Expected to fail
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test
@@ -296,7 +292,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me5 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAA,beanBB,beanBB)}", null , null);
         Object r5 = me5.invoke(context, null);
-        assertEquals("ABB[]: Hello AA from BB, BB", r5.toString());
+        Assert.assertEquals("ABB[]: Hello AA from BB, BB", r5.toString());
     }
 
     @Test
@@ -304,7 +300,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me6 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAA,beanBBB,beanBBB)}", null , null);
         Object r6 = me6.invoke(context, null);
-        assertEquals("ABB[]: Hello AA from BBB, BBB", r6.toString());
+        Assert.assertEquals("ABB[]: Hello AA from BBB, BBB", r6.toString());
     }
 
     @Test
@@ -318,7 +314,7 @@ public class TestMethodExpressionImpl {
             e = e1;
         }
         // Expected to fail
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test
@@ -326,7 +322,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me8 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAAA,beanBB,beanBB)}", null , null);
         Object r8 = me8.invoke(context, null);
-        assertEquals("ABB[]: Hello AAA from BB, BB", r8.toString());
+        Assert.assertEquals("ABB[]: Hello AAA from BB, BB", r8.toString());
     }
 
     @Test
@@ -334,7 +330,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me9 = factory.createMethodExpression(context,
                 "${beanC.sayHello(beanAAA,beanBBB,beanBBB)}", null , null);
         Object r9 = me9.invoke(context, null);
-        assertEquals("ABB[]: Hello AAA from BBB, BBB", r9.toString());
+        Assert.assertEquals("ABB[]: Hello AAA from BBB, BBB", r9.toString());
     }
 
     /*
@@ -350,7 +346,7 @@ public class TestMethodExpressionImpl {
         me.invoke(context, null);
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanA.name}", java.lang.String.class);
-        assertEquals("New value", ve.getValue(context));
+        Assert.assertEquals("New value", ve.getValue(context));
     }
 
     @Test
@@ -360,7 +356,7 @@ public class TestMethodExpressionImpl {
         me.invoke(context, null);
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanA.valLong}", java.lang.String.class);
-        assertEquals("5", ve.getValue(context));
+        Assert.assertEquals("5", ve.getValue(context));
     }
 
     @Test
@@ -368,7 +364,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me1 = factory.createMethodExpression(context,
                 "${beanB.sayHello()}", null, null);
         String actual = (String) me1.invoke(context, null);
-        assertEquals("Hello from B", actual);
+        Assert.assertEquals("Hello from B", actual);
     }
 
     @Test
@@ -376,7 +372,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me1 = factory.createMethodExpression(context,
                 "${beanB.sayHello('Tomcat')}", null, null);
         String actual = (String) me1.invoke(context, null);
-        assertEquals("Hello Tomcat from B", actual);
+        Assert.assertEquals("Hello Tomcat from B", actual);
     }
 
     @Test
@@ -384,7 +380,7 @@ public class TestMethodExpressionImpl {
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanAA.name.contains(beanA.name)}", java.lang.Boolean.class);
         Boolean actual = (Boolean) ve.getValue(context);
-        assertEquals(Boolean.TRUE, actual);
+        Assert.assertEquals(Boolean.TRUE, actual);
     }
 
     @Test
@@ -392,7 +388,7 @@ public class TestMethodExpressionImpl {
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanA.name.contains(beanAA.name)}", java.lang.Boolean.class);
         Boolean actual = (Boolean) ve.getValue(context);
-        assertEquals(Boolean.FALSE, actual);
+        Assert.assertEquals(Boolean.FALSE, actual);
     }
 
     @Test
@@ -405,7 +401,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me1 = factory.createMethodExpression(context,
                 "${beanA.bean.sayHello()}", null, null);
         String actual = (String) me1.invoke(context, null);
-        assertEquals("Hello from BB", actual);
+        Assert.assertEquals("Hello from BB", actual);
     }
 
     @Test
@@ -418,7 +414,7 @@ public class TestMethodExpressionImpl {
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanEnum.lastSubmitted}", TesterEnum.class);
         TesterEnum actual = (TesterEnum) ve.getValue(context);
-        assertEquals(TesterEnum.APPLE, actual);
+        Assert.assertEquals(TesterEnum.APPLE, actual);
 
     }
 
@@ -436,7 +432,7 @@ public class TestMethodExpressionImpl {
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanA.getBean().name}", java.lang.String.class);
         String actual = (String) ve.getValue(context);
-        assertEquals(BUG53792, actual);
+        Assert.assertEquals(BUG53792, actual);
     }
 
     @Test
@@ -453,7 +449,7 @@ public class TestMethodExpressionImpl {
         ValueExpression ve = factory.createValueExpression(context,
                 "#{beanA.getBean().name.length()}", java.lang.Integer.class);
         Integer actual = (Integer) ve.getValue(context);
-        assertEquals(Integer.valueOf(BUG53792.length()), actual);
+        Assert.assertEquals(Integer.valueOf(BUG53792.length()), actual);
     }
 
 
@@ -462,7 +458,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me = factory.createMethodExpression(context,
                 "#{beanB.sayHello().length()}", null, new Class<?>[] {});
         Integer result = (Integer) me.invoke(context, null);
-        assertEquals(beanB.sayHello().length(), result.intValue());
+        Assert.assertEquals(beanB.sayHello().length(), result.intValue());
     }
 
 
@@ -471,7 +467,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me = factory.createMethodExpression(context,
                 "#{beanB.sayHello().length()}", null, new Class<?>[] {});
         Integer result = (Integer) me.invoke(context, new Object[] { "foo" });
-        assertEquals(beanB.sayHello().length(), result.intValue());
+        Assert.assertEquals(beanB.sayHello().length(), result.intValue());
     }
 
 
@@ -480,7 +476,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me = factory.createMethodExpression(context,
                 "${beanAA.echo1('Hello World!')}", null , null);
         Object r = me.invoke(context, null);
-        assertEquals("AA1Hello World!", r.toString());
+        Assert.assertEquals("AA1Hello World!", r.toString());
     }
 
 
@@ -489,7 +485,7 @@ public class TestMethodExpressionImpl {
         MethodExpression me = factory.createMethodExpression(context,
                 "${beanAA.echo2('Hello World!')}", null , null);
         Object r = me.invoke(context, null);
-        assertEquals("AA2Hello World!", r.toString());
+        Assert.assertEquals("AA2Hello World!", r.toString());
     }
 
 
@@ -521,14 +517,14 @@ public class TestMethodExpressionImpl {
         MethodExpression me = factory.createMethodExpression(context,
                 "${beanB.echo}", null , new Class[]{String.class});
         Object r = me.invoke(context, new String[] { "aaa" });
-        assertEquals("aaa", r.toString());
+        Assert.assertEquals("aaa", r.toString());
     }
     @Test
     public void testBug57855e() {
         MethodExpression me = factory.createMethodExpression(context,
                 "${beanB.echo}", null , new Class[]{String.class});
         Object r = me.invoke(context, new String[] { "aaa", "bbb" });
-        assertEquals("aaa, bbb", r.toString());
+        Assert.assertEquals("aaa, bbb", r.toString());
     }
 
 

==================================================
TestELArithmetic.java
index 0857091c16..0e816be1a7 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -28,9 +28,7 @@ import javax.el.ExpressionFactory;
 import javax.el.ValueExpression;
 import javax.el.ValueReference;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.jasper.el.ELContextImpl;
@@ -53,14 +51,14 @@ public class TestValueExpressionImpl {
 
         // First check the basics work
         String result = (String) ve.getValue(context);
-        assertEquals("Tomcat", result);
+        Assert.assertEquals("Tomcat", result);
 
         // Now check the value reference
         ValueReference vr = ve.getValueReference(context);
-        assertNotNull(vr);
+        Assert.assertNotNull(vr);
 
-        assertEquals(beanB, vr.getBase());
-        assertEquals("name", vr.getProperty());
+        Assert.assertEquals(beanB, vr.getBase());
+        Assert.assertEquals("name", vr.getProperty());
     }
 
     @Test
@@ -85,10 +83,10 @@ public class TestValueExpressionImpl {
 
         // Now check the value reference
         ValueReference vr = ve.getValueReference(context);
-        assertNotNull(vr);
+        Assert.assertNotNull(vr);
 
-        assertEquals(beanB, vr.getBase());
-        assertEquals("name", vr.getProperty());
+        Assert.assertEquals(beanB, vr.getBase());
+        Assert.assertEquals("name", vr.getProperty());
     }
 
     @Test
@@ -110,14 +108,14 @@ public class TestValueExpressionImpl {
 
         // First check the basics work
         String result = (String) ve.getValue(context);
-        assertEquals("Tomcat", result);
+        Assert.assertEquals("Tomcat", result);
 
         // Now check the value reference
         ValueReference vr = ve.getValueReference(context);
-        assertNotNull(vr);
+        Assert.assertNotNull(vr);
 
-        assertEquals(beanB, vr.getBase());
-        assertEquals("name", vr.getProperty());
+        Assert.assertEquals(beanB, vr.getBase());
+        Assert.assertEquals("name", vr.getProperty());
     }
 
     @Test
@@ -135,12 +133,12 @@ public class TestValueExpressionImpl {
         ValueExpression ve1 = factory.createValueExpression(
                 context, "${testEnum}", String.class);
         String result1 = (String) ve1.getValue(context);
-        assertEquals("APPLE", result1);
+        Assert.assertEquals("APPLE", result1);
 
         ValueExpression ve2 = factory.createValueExpression(
                 context, "foo${testEnum}bar", String.class);
         String result2 = (String) ve2.getValue(context);
-        assertEquals("fooAPPLEbar", result2);
+        Assert.assertEquals("fooAPPLEbar", result2);
     }
 
     @Test
@@ -162,12 +160,12 @@ public class TestValueExpressionImpl {
         ValueExpression ve1 = factory.createValueExpression(
                 context, "${map.key1}", Object.class);
         ve1.setValue(context, o2);
-        assertEquals(o2, ve1.getValue(context));
+        Assert.assertEquals(o2, ve1.getValue(context));
 
         ValueExpression ve2 = factory.createValueExpression(
                 context, "${map.key2}", Object.class);
         ve2.setValue(context, o1);
-        assertEquals(o1, ve2.getValue(context));
+        Assert.assertEquals(o1, ve2.getValue(context));
     }
 
     @Test
@@ -189,12 +187,12 @@ public class TestValueExpressionImpl {
         ValueExpression ve1 = factory.createValueExpression(
                 context, "${list[0]}", Object.class);
         ve1.setValue(context, o2);
-        assertEquals(o2, ve1.getValue(context));
+        Assert.assertEquals(o2, ve1.getValue(context));
 
         ValueExpression ve2 = factory.createValueExpression(
                 context, "${list[1]}", Object.class);
         ve2.setValue(context, o1);
-        assertEquals(o1, ve2.getValue(context));
+        Assert.assertEquals(o1, ve2.getValue(context));
     }
 
 
@@ -217,7 +215,7 @@ public class TestValueExpressionImpl {
                 context, "${beanA.valList.size()}", Integer.class);
 
         Integer result = (Integer) ve.getValue(context);
-        assertEquals(Integer.valueOf(0), result);
+        Assert.assertEquals(Integer.valueOf(0), result);
     }
 
 
@@ -239,7 +237,7 @@ public class TestValueExpressionImpl {
                 context, "${list.size()}", Integer.class);
 
         Integer result = (Integer) ve.getValue(context);
-        assertEquals(Integer.valueOf(0), result);
+        Assert.assertEquals(Integer.valueOf(0), result);
     }
 
 
@@ -259,11 +257,11 @@ public class TestValueExpressionImpl {
 
         // First check the basics work
         String result = (String) ve.getValue(context);
-        assertEquals("Tomcat", result);
+        Assert.assertEquals("Tomcat", result);
 
         // Now set the value to null
         ve.setValue(context, null);
 
-        assertEquals("", beanB.getName());
+        Assert.assertEquals("", beanB.getName());
     }
 }

==================================================
TestELSupport.java
index a9eaf8685a..bd47393c1b 100644
--- a/test/org/apache/el/lang/TestELArithmetic.java
+++ b/test/org/apache/el/lang/TestELArithmetic.java
@@ -21,8 +21,6 @@ import java.math.BigInteger;
 
 import javax.el.ELProcessor;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -33,7 +31,7 @@ public class TestELArithmetic {
 
     @Test
     public void testAdd01() throws Exception {
-        assertEquals("1000000000000000000001.1",
+        Assert.assertEquals("1000000000000000000001.1",
                 String.valueOf(ELArithmetic.add(a, b)));
     }
 
@@ -46,7 +44,7 @@ public class TestELArithmetic {
 
     @Test
     public void testSubtract01() throws Exception {
-        assertEquals("-999999999999999999998.9",
+        Assert.assertEquals("-999999999999999999998.9",
                 String.valueOf(ELArithmetic.subtract(a, b)));
     }
 
@@ -59,7 +57,7 @@ public class TestELArithmetic {
 
     @Test
     public void testMultiply01() throws Exception {
-        assertEquals("1100000000000000000000.0",
+        Assert.assertEquals("1100000000000000000000.0",
                 String.valueOf(ELArithmetic.multiply(a, b)));
     }
 
@@ -72,7 +70,7 @@ public class TestELArithmetic {
 
     @Test
     public void testDivide01() throws Exception {
-        assertEquals("0.0",
+        Assert.assertEquals("0.0",
                 String.valueOf(ELArithmetic.divide(a, b)));
     }
 
@@ -85,7 +83,7 @@ public class TestELArithmetic {
 
     @Test
     public void testMod01() throws Exception {
-        assertEquals("1.1",
+        Assert.assertEquals("1.1",
                 String.valueOf(ELArithmetic.mod(a, b)));
     }
 
@@ -105,38 +103,38 @@ public class TestELArithmetic {
 
     @Test
     public void testBug47371bigDecimal() throws Exception {
-        assertEquals(BigDecimal.valueOf(1),
+        Assert.assertEquals(BigDecimal.valueOf(1),
                 ELArithmetic.add("", BigDecimal.valueOf(1)));
     }
 
     @Test
     public void testBug47371double() throws Exception {
-        assertEquals(Double.valueOf(7), ELArithmetic.add("", Double.valueOf(7)));
+        Assert.assertEquals(Double.valueOf(7), ELArithmetic.add("", Double.valueOf(7)));
     }
 
     @Test
     public void testBug47371doubleString() throws Exception {
-        assertEquals(Double.valueOf(2), ELArithmetic.add("", "2."));
+        Assert.assertEquals(Double.valueOf(2), ELArithmetic.add("", "2."));
     }
 
     @Test
     public void testBug47371bigInteger() throws Exception {
-        assertEquals(BigInteger.valueOf(0),
+        Assert.assertEquals(BigInteger.valueOf(0),
                 ELArithmetic.multiply("", BigInteger.valueOf(1)));
     }
 
     @Test
     public void testBug47371long() throws Exception {
-        assertEquals(Long.valueOf(1), ELArithmetic.add("", Integer.valueOf(1)));
+        Assert.assertEquals(Long.valueOf(1), ELArithmetic.add("", Integer.valueOf(1)));
     }
 
     @Test
     public void testBug47371long2() throws Exception {
-        assertEquals(Long.valueOf(-3), ELArithmetic.subtract("1", "4"));
+        Assert.assertEquals(Long.valueOf(-3), ELArithmetic.subtract("1", "4"));
     }
 
     @Test
     public void testBug47371doubleString2() throws Exception {
-        assertEquals(Double.valueOf(2), ELArithmetic.add("1.", "1"));
+        Assert.assertEquals(Double.valueOf(2), ELArithmetic.add("1.", "1"));
     }
 }

==================================================
TestELParser.java
index 0e15022ed3..7152851fc8 100644
--- a/test/org/apache/el/lang/TestELSupport.java
+++ b/test/org/apache/el/lang/TestELSupport.java
@@ -23,17 +23,13 @@ import java.math.BigInteger;
 import javax.el.ELException;
 import javax.el.ELManager;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
 public class TestELSupport {
     @Test
     public void testEquals() {
-        assertTrue(ELSupport.equals(null, "01", Long.valueOf(1)));
+        Assert.assertTrue(ELSupport.equals(null, "01", Long.valueOf(1)));
     }
 
     @Test
@@ -82,13 +78,13 @@ public class TestELSupport {
     public void testCoerceIntegerToNumber() {
         Integer input = Integer.valueOf(4390241);
         Object output = ELSupport.coerceToType(null, input, Number.class);
-        assertEquals(input, output);
+        Assert.assertEquals(input, output);
     }
 
     @Test
     public void testCoerceNullToNumber() {
         Object output = ELSupport.coerceToType(null, null, Number.class);
-        assertNull(output);
+        Assert.assertNull(output);
     }
 
     @Test
@@ -97,7 +93,7 @@ public class TestELSupport {
         try {
             output = ELSupport.coerceToEnum(null, TestEnumA.VALA1, TestEnumA.class);
         } finally {
-            assertEquals(TestEnumA.VALA1, output);
+            Assert.assertEquals(TestEnumA.VALA1, output);
         }
     }
 
@@ -109,7 +105,7 @@ public class TestELSupport {
         } catch (ELException ele) {
             // Ignore
         }
-        assertNull(output);
+        Assert.assertNull(output);
     }
 
     @Test
@@ -120,7 +116,7 @@ public class TestELSupport {
         } catch (ELException ele) {
             // Ignore
         }
-        assertNull(output);
+        Assert.assertNull(output);
     }
 
     @Test
@@ -265,7 +261,7 @@ public class TestELSupport {
     }
 
     private static void testIsSame(Object value) {
-        assertEquals(value, ELSupport.coerceToNumber(null, value, value.getClass()));
+        Assert.assertEquals(value, ELSupport.coerceToNumber(null, value, value.getClass()));
     }
 
     private static enum TestEnumA {

==================================================
TestAttributeParser.java
index 90a5688141..d2f22ed9af 100644
--- a/test/org/apache/el/parser/TestELParser.java
+++ b/test/org/apache/el/parser/TestELParser.java
@@ -24,9 +24,7 @@ import javax.el.ELException;
 import javax.el.ExpressionFactory;
 import javax.el.ValueExpression;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
+import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
@@ -83,7 +81,7 @@ public class TestELParser {
         } catch (ELException ele) {
             e = ele;
         }
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
     @Test
@@ -104,7 +102,7 @@ public class TestELParser {
         } catch (ELException ele) {
             e = ele;
         }
-        assertNotNull(e);
+        Assert.assertNotNull(e);
     }
 
 
@@ -200,7 +198,7 @@ public class TestELParser {
                 context, expr.toString(), String.class);
 
         String result = (String) ve.getValue(context);
-        assertEquals("true", result);
+        Assert.assertEquals("true", result);
     }
 
     @Test
@@ -217,10 +215,10 @@ public class TestELParser {
             "${(myBean.int1 > 1 and myBean.myBool) or "+
             "((myBean.myBool or myBean.myBool1) and myBean.int1 > 1)}",
             Boolean.class);
-        assertEquals(Boolean.FALSE, ve.getValue(context));
+        Assert.assertEquals(Boolean.FALSE, ve.getValue(context));
         beanC.setInt1(2);
         beanC.setMyBool1(true);
-        assertEquals(Boolean.TRUE, ve.getValue(context));
+        Assert.assertEquals(Boolean.TRUE, ve.getValue(context));
     }
 
     private void testExpression(String expression, String expected) {
@@ -231,7 +229,7 @@ public class TestELParser {
                 context, expression, String.class);
 
         String result = (String) ve.getValue(context);
-        assertEquals(expected, result);
+        Assert.assertEquals(expected, result);
     }
 
     /*

==================================================
TestCompiler.java
index 7d14fcd114..eab6a42b74 100644
--- a/test/org/apache/jasper/compiler/TestAttributeParser.java
+++ b/test/org/apache/jasper/compiler/TestAttributeParser.java
@@ -19,8 +19,7 @@ package org.apache.jasper.compiler;
 
 import javax.el.ValueExpression;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.el.ExpressionFactoryImpl;
@@ -39,22 +38,22 @@ public class TestAttributeParser {
      */
     @Test
     public void testBug42565() {
-        assertEquals("false", evalAttr("${false?true:false}", '\"'));
-        assertEquals("false", evalAttr("${false?true: false}", '\"'));
-        assertEquals("false", evalAttr("${false?true :false}", '\"'));
-        assertEquals("false", evalAttr("${false?true : false}", '\"'));
-        assertEquals("false", evalAttr("${false? true:false}", '\"'));
-        assertEquals("false", evalAttr("${false? true: false}", '\"'));
-        assertEquals("false", evalAttr("${false? true :false}", '\"'));
-        assertEquals("false", evalAttr("${false? true : false}", '\"'));
-        assertEquals("false", evalAttr("${false ?true:false}", '\"'));
-        assertEquals("false", evalAttr("${false ?true: false}", '\"'));
-        assertEquals("false", evalAttr("${false ?true :false}", '\"'));
-        assertEquals("false", evalAttr("${false ?true : false}", '\"'));
-        assertEquals("false", evalAttr("${false ? true:false}", '\"'));
-        assertEquals("false", evalAttr("${false ? true: false}", '\"'));
-        assertEquals("false", evalAttr("${false ? true :false}", '\"'));
-        assertEquals("false", evalAttr("${false ? true : false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false?true:false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false?true: false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false?true :false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false?true : false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false? true:false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false? true: false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false? true :false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false? true : false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ?true:false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ?true: false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ?true :false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ?true : false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ? true:false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ? true: false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ? true :false}", '\"'));
+        Assert.assertEquals("false", evalAttr("${false ? true : false}", '\"'));
     }
 
 
@@ -65,11 +64,11 @@ public class TestAttributeParser {
      */
     @Test
     public void testBug44994() {
-        assertEquals("none",
+        Assert.assertEquals("none",
                 evalAttr("${0 lt 0 ? 1 lt 0 ? 'many': 'one': 'none'}", '\"'));
-        assertEquals("one",
+        Assert.assertEquals("one",
                 evalAttr("${0 lt 1 ? 1 lt 1 ? 'many': 'one': 'none'}", '\"'));
-        assertEquals("many",
+        Assert.assertEquals("many",
                 evalAttr("${0 lt 2 ? 1 lt 2 ? 'many': 'one': 'none'}", '\"'));
     }
 
@@ -82,40 +81,40 @@ public class TestAttributeParser {
     @Test
     public void testBug45015() {
         // Warning: Java String quoting vs. JSP attribute quoting
-        assertEquals("hello 'world'", evalAttr("hello 'world'", '\"'));
-        assertEquals("hello 'world", evalAttr("hello 'world", '\"'));
-        assertEquals("hello world'", evalAttr("hello world'", '\"'));
-        assertEquals("hello world'", evalAttr("hello world\\'", '\"'));
-        assertEquals("hello world\"", evalAttr("hello world\\\"", '\"'));
-        assertEquals("hello \"world\"", evalAttr("hello \"world\"", '\"'));
-        assertEquals("hello \"world", evalAttr("hello \"world", '\"'));
-        assertEquals("hello world\"", evalAttr("hello world\"", '\"'));
-        assertEquals("hello world'", evalAttr("hello world\\'", '\"'));
-        assertEquals("hello world\"", evalAttr("hello world\\\"", '\"'));
-
-        assertEquals("hello 'world'", evalAttr("hello 'world'", '\''));
-        assertEquals("hello 'world", evalAttr("hello 'world", '\''));
-        assertEquals("hello world'", evalAttr("hello world'", '\''));
-        assertEquals("hello world'", evalAttr("hello world\\'", '\''));
-        assertEquals("hello world\"", evalAttr("hello world\\\"", '\''));
-        assertEquals("hello \"world\"", evalAttr("hello \"world\"", '\''));
-        assertEquals("hello \"world", evalAttr("hello \"world", '\''));
-        assertEquals("hello world\"", evalAttr("hello world\"", '\''));
-        assertEquals("hello world'", evalAttr("hello world\\'", '\''));
-        assertEquals("hello world\"", evalAttr("hello world\\\"", '\''));
+        Assert.assertEquals("hello 'world'", evalAttr("hello 'world'", '\"'));
+        Assert.assertEquals("hello 'world", evalAttr("hello 'world", '\"'));
+        Assert.assertEquals("hello world'", evalAttr("hello world'", '\"'));
+        Assert.assertEquals("hello world'", evalAttr("hello world\\'", '\"'));
+        Assert.assertEquals("hello world\"", evalAttr("hello world\\\"", '\"'));
+        Assert.assertEquals("hello \"world\"", evalAttr("hello \"world\"", '\"'));
+        Assert.assertEquals("hello \"world", evalAttr("hello \"world", '\"'));
+        Assert.assertEquals("hello world\"", evalAttr("hello world\"", '\"'));
+        Assert.assertEquals("hello world'", evalAttr("hello world\\'", '\"'));
+        Assert.assertEquals("hello world\"", evalAttr("hello world\\\"", '\"'));
+
+        Assert.assertEquals("hello 'world'", evalAttr("hello 'world'", '\''));
+        Assert.assertEquals("hello 'world", evalAttr("hello 'world", '\''));
+        Assert.assertEquals("hello world'", evalAttr("hello world'", '\''));
+        Assert.assertEquals("hello world'", evalAttr("hello world\\'", '\''));
+        Assert.assertEquals("hello world\"", evalAttr("hello world\\\"", '\''));
+        Assert.assertEquals("hello \"world\"", evalAttr("hello \"world\"", '\''));
+        Assert.assertEquals("hello \"world", evalAttr("hello \"world", '\''));
+        Assert.assertEquals("hello world\"", evalAttr("hello world\"", '\''));
+        Assert.assertEquals("hello world'", evalAttr("hello world\\'", '\''));
+        Assert.assertEquals("hello world\"", evalAttr("hello world\\\"", '\''));
 
     }
 
     @Test
     public void testBug45451() {
-        assertEquals("2", evalAttr("${1+1}", '\"'));
-        assertEquals("${1+1}", evalAttr("\\${1+1}", '\"'));
-        assertEquals("\\2", evalAttr("\\\\${1+1}", '\"'));
+        Assert.assertEquals("2", evalAttr("${1+1}", '\"'));
+        Assert.assertEquals("${1+1}", evalAttr("\\${1+1}", '\"'));
+        Assert.assertEquals("\\2", evalAttr("\\\\${1+1}", '\"'));
     }
 
     @Test
     public void testBug49081() {
-        assertEquals("#2", evalAttr("#${1+1}", '\"'));
+        Assert.assertEquals("#2", evalAttr("#${1+1}", '\"'));
     }
 
     @Test
@@ -125,18 +124,18 @@ public class TestAttributeParser {
 
         // '\' is only an escape character inside a StringLiteral
         // Attribute escaping does not apply inside EL expressions
-        assertEquals("\\", evalAttr("${'\\\\'}", '\"'));
+        Assert.assertEquals("\\", evalAttr("${'\\\\'}", '\"'));
 
         // Can use ''' inside '"' when quoting with '"' and vice versa without
         // escaping
-        assertEquals("\\\"", evalAttr("${'\\\\\"'}", '\"'));
-        assertEquals("\"\\", evalAttr("${'\\\"\\\\'}", '\"'));
-        assertEquals("\\'", evalAttr("${'\\\\\\''}", '\"'));
-        assertEquals("'\\", evalAttr("${'\\'\\\\'}", '\"'));
+        Assert.assertEquals("\\\"", evalAttr("${'\\\\\"'}", '\"'));
+        Assert.assertEquals("\"\\", evalAttr("${'\\\"\\\\'}", '\"'));
+        Assert.assertEquals("\\'", evalAttr("${'\\\\\\''}", '\"'));
+        Assert.assertEquals("'\\", evalAttr("${'\\'\\\\'}", '\"'));
 
         // Quoting <% and %>
-        assertEquals("hello <% world", evalAttr("hello <\\% world", '\"'));
-        assertEquals("hello %> world", evalAttr("hello %> world", '\"'));
+        Assert.assertEquals("hello <% world", evalAttr("hello <\\% world", '\"'));
+        Assert.assertEquals("hello %> world", evalAttr("hello %> world", '\"'));
 
         // Test that the end of literal in EL expression is recognized in
         // parseEL(), be it quoted with single or double quotes. That is, that
@@ -148,16 +147,16 @@ public class TestAttributeParser {
         // inside of parseEL it will be printed as \${, thus preventing the EL
         // expression that follows from being evaluated.
         //
-        assertEquals("foo\\bar\\baz", evalAttr("${\'foo\'}\\\\${\'bar\'}\\\\${\'baz\'}", '\"'));
-        assertEquals("foo\\bar\\baz", evalAttr("${\'foo\'}\\\\${\"bar\"}\\\\${\'baz\'}", '\"'));
-        assertEquals("foo\\bar\\baz", evalAttr("${\"foo\"}\\\\${\'bar\'}\\\\${\"baz\"}", '\"'));
+        Assert.assertEquals("foo\\bar\\baz", evalAttr("${\'foo\'}\\\\${\'bar\'}\\\\${\'baz\'}", '\"'));
+        Assert.assertEquals("foo\\bar\\baz", evalAttr("${\'foo\'}\\\\${\"bar\"}\\\\${\'baz\'}", '\"'));
+        Assert.assertEquals("foo\\bar\\baz", evalAttr("${\"foo\"}\\\\${\'bar\'}\\\\${\"baz\"}", '\"'));
     }
 
     @Test
     public void testScriptExpressionLiterals() {
-        assertEquals(" \"hello world\" ", parseScriptExpression(
+        Assert.assertEquals(" \"hello world\" ", parseScriptExpression(
                 " \"hello world\" ", (char) 0));
-        assertEquals(" \"hello \\\"world\" ", parseScriptExpression(
+        Assert.assertEquals(" \"hello \\\"world\" ", parseScriptExpression(
                 " \"hello \\\\\"world\" ", (char) 0));
     }
 

==================================================
TestGenerator.java
index 49db96fd64..200e8f23ba 100644
--- a/test/org/apache/jasper/compiler/TestCompiler.java
+++ b/test/org/apache/jasper/compiler/TestCompiler.java
@@ -23,9 +23,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -50,7 +48,7 @@ public class TestCompiler extends TomcatBaseTest {
         assertEcho(result, "OK");
 
         // Check content type
-        assertTrue(headers.get("Content-Type").get(0).startsWith("text/html"));
+        Assert.assertTrue(headers.get("Content-Type").get(0).startsWith("text/html"));
     }
 
     @Test
@@ -68,7 +66,7 @@ public class TestCompiler extends TomcatBaseTest {
         assertEcho(result, "OK");
 
         // Check content type
-        assertTrue(headers.get("Content-Type").get(0).startsWith("text/plain"));
+        Assert.assertTrue(headers.get("Content-Type").get(0).startsWith("text/plain"));
     }
 
     @Test
@@ -166,7 +164,7 @@ public class TestCompiler extends TomcatBaseTest {
         ByteChunk res = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug53257/foo%2525bar.jsp", res, null);
-        assertEquals(404, rc);
+        Assert.assertEquals(404, rc);
     }
 
     @Test
@@ -197,12 +195,12 @@ public class TestCompiler extends TomcatBaseTest {
         Pattern coda = Pattern.compile(
                 "(.*This is a coda\\.){2}.*",
                 Pattern.MULTILINE|Pattern.DOTALL);
-        assertTrue(prelude.matcher(result).matches());
-        assertTrue(coda.matcher(result).matches());
+        Assert.assertTrue(prelude.matcher(result).matches());
+        Assert.assertTrue(coda.matcher(result).matches());
     }
 
     /** Assertion for text printed by tags:echo */
     private static void assertEcho(String result, String expected) {
-        assertTrue(result, result.indexOf("<p>" + expected + "</p>") > 0);
+        Assert.assertTrue(result, result.indexOf("<p>" + expected + "</p>") > 0);
     }
 }

==================================================
TestJspConfig.java
index 80c8332710..ed94c30cff 100644
--- a/test/org/apache/jasper/compiler/TestGenerator.java
+++ b/test/org/apache/jasper/compiler/TestGenerator.java
@@ -30,9 +30,6 @@ import javax.servlet.jsp.tagext.TagExtraInfo;
 import javax.servlet.jsp.tagext.TagSupport;
 import javax.servlet.jsp.tagext.VariableInfo;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -71,7 +68,7 @@ public class TestGenerator extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45015b.jsp", new ByteChunk(), null);
 
-        assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
     @Test
@@ -81,7 +78,7 @@ public class TestGenerator extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug45nnn/bug45015c.jsp", new ByteChunk(), null);
 
-        assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
     @Test
@@ -91,7 +88,7 @@ public class TestGenerator extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug48nnn/bug48701-fail.jsp", new ByteChunk(), null);
 
-        assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
     @Test
@@ -197,7 +194,7 @@ public class TestGenerator extends TomcatBaseTest {
         int i = 0;
         for (String line : lines) {
             if (line.length() > 0) {
-                assertEquals(expected[i], line);
+                Assert.assertEquals(expected[i], line);
                 i++;
             }
         }
@@ -205,7 +202,7 @@ public class TestGenerator extends TomcatBaseTest {
 
     /** Assertion for text printed by tags:echo */
     private static void assertEcho(String result, String expected) {
-        assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
     }
 
     @Test
@@ -278,8 +275,8 @@ public class TestGenerator extends TomcatBaseTest {
         }
 
         String result = res.toString();
-        assertTrue(result.startsWith("0 Hello world!\n"));
-        assertTrue(result.endsWith("999 Hello world!\n"));
+        Assert.assertTrue(result.startsWith("0 Hello world!\n"));
+        Assert.assertTrue(result.endsWith("999 Hello world!\n"));
     }
 
 

==================================================
TestParser.java
index d130fe7aea..21a1464b0d 100644
--- a/test/org/apache/jasper/compiler/TestJspConfig.java
+++ b/test/org/apache/jasper/compiler/TestJspConfig.java
@@ -19,8 +19,7 @@ package org.apache.jasper.compiler;
 
 import java.io.File;
 
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.Tomcat;
@@ -44,8 +43,8 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-${'hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-${'hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
     }
 
     @Test
@@ -64,8 +63,8 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-${'hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-${'hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
     }
 
     @Test
@@ -83,8 +82,8 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>01-#{'hello world'}</p>") > 0);
     }
 
     @Test
@@ -102,7 +101,7 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
 
     @Test
@@ -120,7 +119,7 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
 
     @Test
@@ -138,7 +137,7 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
 
     @Test
@@ -156,6 +155,6 @@ public class TestJspConfig extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
 }

==================================================
TestParserNoStrictWhitespace.java
index 6397292073..0a79a16a0d 100644
--- a/test/org/apache/jasper/compiler/TestParser.java
+++ b/test/org/apache/jasper/compiler/TestParser.java
@@ -19,9 +19,6 @@ package org.apache.jasper.compiler;
 import java.util.HashMap;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -106,7 +103,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297NoSpace.jsp", new ByteChunk(),
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     @Test
@@ -117,7 +114,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297DuplicateAttr.jsp", new ByteChunk(),
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     @Test
@@ -129,7 +126,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297MultipleImport1.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(200, sc);
+        Assert.assertEquals(200, sc);
         assertEcho(res.toString(), "OK");
     }
 
@@ -142,7 +139,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297MultipleImport2.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(200, sc);
+        Assert.assertEquals(200, sc);
         assertEcho(res.toString(), "OK");
     }
 
@@ -155,7 +152,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297MultiplePageEncoding1.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     @Test
@@ -167,7 +164,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297MultiplePageEncoding2.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     @Test
@@ -179,7 +176,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297MultiplePageEncoding3.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     @Test
@@ -191,7 +188,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297MultiplePageEncoding4.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     @Test
@@ -203,7 +200,7 @@ public class TestParser extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297Tag.jsp", res,
                 new HashMap<String,List<String>>());
 
-        assertEquals(200, sc);
+        Assert.assertEquals(200, sc);
         assertEcho(res.toString(), "OK");
     }
 
@@ -301,6 +298,6 @@ public class TestParser extends TomcatBaseTest {
 
     /** Assertion for text printed by tags:echo */
     private static void assertEcho(String result, String expected) {
-        assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
     }
 }

==================================================
TestScriptingVariabler.java
index f0e78fa0c1..a467239658 100644
--- a/test/org/apache/jasper/compiler/TestParserNoStrictWhitespace.java
+++ b/test/org/apache/jasper/compiler/TestParserNoStrictWhitespace.java
@@ -20,9 +20,7 @@ package org.apache.jasper.compiler;
 import java.util.HashMap;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -116,7 +114,7 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
                 new HashMap<String,List<String>>());
 
 
-        assertEquals(200, sc);
+        Assert.assertEquals(200, sc);
         assertEcho(res.toString(), "Hello World");
     }
 
@@ -128,11 +126,11 @@ public class TestParserNoStrictWhitespace extends TomcatBaseTest {
                 "/test/bug49nnn/bug49297DuplicateAttr.jsp", new ByteChunk(),
                 new HashMap<String,List<String>>());
 
-        assertEquals(500, sc);
+        Assert.assertEquals(500, sc);
     }
 
     /** Assertion for text printed by tags:echo */
     private static void assertEcho(String result, String expected) {
-        assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);
     }
 }

==================================================
TestValidator.java
index 50dbff9112..2aaef77f52 100644
--- a/test/org/apache/jasper/compiler/TestScriptingVariabler.java
+++ b/test/org/apache/jasper/compiler/TestScriptingVariabler.java
@@ -24,8 +24,7 @@ import javax.servlet.jsp.tagext.TagExtraInfo;
 import javax.servlet.jsp.tagext.TagSupport;
 import javax.servlet.jsp.tagext.VariableInfo;
 
-import static org.junit.Assert.assertNull;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -44,7 +43,7 @@ public class TestScriptingVariabler extends TomcatBaseTest {
         }
 
         // Should not fail
-        assertNull(e);
+        Assert.assertNull(e);
     }
 
     public static class Bug48616aTag extends TagSupport {
@@ -80,7 +79,7 @@ public class TestScriptingVariabler extends TomcatBaseTest {
         }
 
         // Should not fail
-        assertNull(e);
+        Assert.assertNull(e);
     }
 
     @Test
@@ -95,6 +94,6 @@ public class TestScriptingVariabler extends TomcatBaseTest {
         }
 
         // Should not fail
-        assertNull(e);
+        Assert.assertNull(e);
     }
 }

==================================================
TestFastRemovalDequeue.java
index ffe1c6abb4..8d8960e996 100644
--- a/test/org/apache/jasper/compiler/TestValidator.java
+++ b/test/org/apache/jasper/compiler/TestValidator.java
@@ -24,9 +24,7 @@ import javax.servlet.http.HttpServletResponse;
 import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.tagext.TagSupport;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.Tomcat;
@@ -42,7 +40,7 @@ public class TestValidator extends TomcatBaseTest {
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug47331.jsp", new ByteChunk(), null);
 
-        assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
     }
 
     @Test
@@ -61,13 +59,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>${'00-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>${'02-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>${'04-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>${'06-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'00-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'02-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'04-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'06-hello world'}</p>") > 0);
     }
 
     @Test
@@ -86,13 +84,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>${'00-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>${'02-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>${'04-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>${'06-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'00-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'02-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'04-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>${'06-hello world'}</p>") > 0);
     }
 
     @Test
@@ -111,13 +109,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
     }
 
     @Test
@@ -136,13 +134,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
     }
 
     @Test
@@ -161,13 +159,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
     }
 
     @Test
@@ -186,13 +184,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
     }
 
     @Test
@@ -211,13 +209,13 @@ public class TestValidator extends TomcatBaseTest {
 
         String result = res.toString();
 
-        assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
-        assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
-        assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'01-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>02-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'03-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>04-hello world</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>#{'05-hello world'}</p>") > 0);
+        Assert.assertTrue(result.indexOf("<p>06-hello world</p>") > 0);
     }
 
     public static class Echo extends TagSupport {

==================================================
TestFileHandler.java
index 8076910c0e..cf676ae648 100644
--- a/test/org/apache/jasper/util/TestFastRemovalDequeue.java
+++ b/test/org/apache/jasper/util/TestFastRemovalDequeue.java
@@ -16,9 +16,7 @@
  */
 package org.apache.jasper.util;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 
@@ -34,9 +32,9 @@ public class TestFastRemovalDequeue {
 
         Object r = q.pop();
 
-        assertEquals(o1, r);
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertEquals(o1, r);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -50,20 +48,20 @@ public class TestFastRemovalDequeue {
         q.push(o1);
         q.push(o2);
 
-        assertEquals(o2, q.first.getContent());
-        assertEquals(o1, q.last.getContent());
+        Assert.assertEquals(o2, q.first.getContent());
+        Assert.assertEquals(o1, q.last.getContent());
 
         Object r1 = q.pop();
 
-        assertEquals(o1, r1);
-        assertEquals(o2, q.first.getContent());
-        assertEquals(o2, q.last.getContent());
+        Assert.assertEquals(o1, r1);
+        Assert.assertEquals(o2, q.first.getContent());
+        Assert.assertEquals(o2, q.last.getContent());
 
 
         Object r2 = q.pop();
-        assertEquals(o2, r2);
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertEquals(o2, r2);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -77,9 +75,9 @@ public class TestFastRemovalDequeue {
 
         Object r = q.pop();
 
-        assertEquals(o1, r);
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertEquals(o1, r);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -93,20 +91,20 @@ public class TestFastRemovalDequeue {
         q.unpop(o1);
         q.unpop(o2);
 
-        assertEquals(o1, q.first.getContent());
-        assertEquals(o2, q.last.getContent());
+        Assert.assertEquals(o1, q.first.getContent());
+        Assert.assertEquals(o2, q.last.getContent());
 
         Object r2 = q.pop();
 
-        assertEquals(o2, r2);
-        assertEquals(o1, q.first.getContent());
-        assertEquals(o1, q.last.getContent());
+        Assert.assertEquals(o2, r2);
+        Assert.assertEquals(o1, q.first.getContent());
+        Assert.assertEquals(o1, q.last.getContent());
 
 
         Object r1 = q.pop();
-        assertEquals(o1, r1);
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertEquals(o1, r1);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -120,9 +118,9 @@ public class TestFastRemovalDequeue {
 
         Object r = q.unpush();
 
-        assertEquals(o1, r);
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertEquals(o1, r);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -136,20 +134,20 @@ public class TestFastRemovalDequeue {
         q.push(o1);
         q.push(o2);
 
-        assertEquals(o2, q.first.getContent());
-        assertEquals(o1, q.last.getContent());
+        Assert.assertEquals(o2, q.first.getContent());
+        Assert.assertEquals(o1, q.last.getContent());
 
         Object r2 = q.unpush();
 
-        assertEquals(o2, r2);
-        assertEquals(o1, q.first.getContent());
-        assertEquals(o1, q.last.getContent());
+        Assert.assertEquals(o2, r2);
+        Assert.assertEquals(o1, q.first.getContent());
+        Assert.assertEquals(o1, q.last.getContent());
 
 
         Object r1 = q.unpush();
-        assertEquals(o1, r1);
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertEquals(o1, r1);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -161,12 +159,12 @@ public class TestFastRemovalDequeue {
 
         FastRemovalDequeue<Object>.Entry e1 = q.push(o1);
 
-        assertEquals(o1, e1.getContent());
+        Assert.assertEquals(o1, e1.getContent());
 
         q.remove(e1);
 
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 
 
@@ -180,20 +178,20 @@ public class TestFastRemovalDequeue {
         FastRemovalDequeue<Object>.Entry e1 = q.push(o1);
         FastRemovalDequeue<Object>.Entry e2 = q.push(o2);
 
-        assertEquals(o1, e1.getContent());
-        assertEquals(o2, e2.getContent());
+        Assert.assertEquals(o1, e1.getContent());
+        Assert.assertEquals(o2, e2.getContent());
 
-        assertEquals(o2, q.first.getContent());
-        assertEquals(o1, q.last.getContent());
+        Assert.assertEquals(o2, q.first.getContent());
+        Assert.assertEquals(o1, q.last.getContent());
 
         q.remove(e1);
 
-        assertEquals(o2, q.first.getContent());
-        assertEquals(o2, q.last.getContent());
+        Assert.assertEquals(o2, q.first.getContent());
+        Assert.assertEquals(o2, q.last.getContent());
 
         q.remove(e2);
 
-        assertNull(q.first);
-        assertNull(q.last);
+        Assert.assertNull(q.first);
+        Assert.assertNull(q.last);
     }
 }

==================================================
TestFileHandlerNonRotatable.java
index 6a49416b11..9b9d7f14a1 100644
--- a/test/org/apache/juli/TestFileHandler.java
+++ b/test/org/apache/juli/TestFileHandler.java
@@ -25,9 +25,6 @@ import java.nio.file.Path;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -48,7 +45,7 @@ public class TestFileHandler {
     public void setUp() throws Exception {
         File logsBase = new File(System.getProperty("tomcat.test.temp", "output/tmp"));
         if (!logsBase.mkdirs() && !logsBase.isDirectory()) {
-            fail("Unable to create logs directory.");
+            Assert.fail("Unable to create logs directory.");
         }
         Path logsBasePath = FileSystems.getDefault().getPath(logsBase.getAbsolutePath());
         logsDir = Files.createTempDirectory(logsBasePath, "test").toFile();
@@ -85,7 +82,7 @@ public class TestFileHandler {
 
         Thread.sleep(1000);
 
-        assertTrue(logsDir.list().length == 16);
+        Assert.assertTrue(logsDir.list().length == 16);
     }
 
     @SuppressWarnings("unused")
@@ -100,7 +97,7 @@ public class TestFileHandler {
 
         Thread.sleep(1000);
 
-        assertTrue(logsDir.list().length == 16);
+        Assert.assertTrue(logsDir.list().length == 16);
     }
 
     @SuppressWarnings("unused")
@@ -112,7 +109,7 @@ public class TestFileHandler {
 
         Thread.sleep(1000);
 
-        assertTrue(logsDir.list().length == 17);
+        Assert.assertTrue(logsDir.list().length == 17);
     }
 
     private void generateLogFiles(File dir, String prefix, String sufix, int amount)

==================================================
TestNamingContext.java
index c9482c0c75..11e8bbb80d 100644
--- a/test/org/apache/juli/TestFileHandlerNonRotatable.java
+++ b/test/org/apache/juli/TestFileHandlerNonRotatable.java
@@ -19,9 +19,8 @@ package org.apache.juli;
 import java.io.File;
 import java.net.URLDecoder;
 
-import static org.junit.Assert.assertTrue;
-
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -56,7 +55,7 @@ public class TestFileHandlerNonRotatable extends LoggingBaseTest {
                 "juli.", ".log");
 
         File logFile = new File(this.getTemporaryDirectory(), "juli.log");
-        assertTrue(logFile.exists());
+        Assert.assertTrue(logFile.exists());
     }
 
     @Test
@@ -65,7 +64,7 @@ public class TestFileHandlerNonRotatable extends LoggingBaseTest {
                 "juli.", "log");
 
         File logFile = new File(this.getTemporaryDirectory(), "juli.log");
-        assertTrue(logFile.exists());
+        Assert.assertTrue(logFile.exists());
     }
 
     @Test
@@ -74,6 +73,6 @@ public class TestFileHandlerNonRotatable extends LoggingBaseTest {
                 "juli", ".log");
 
         File logFile = new File(this.getTemporaryDirectory(), "juli.log");
-        assertTrue(logFile.exists());
+        Assert.assertTrue(logFile.exists());
     }
 }
\ No newline at end of file

==================================================
TestWarDirContext.java
index a0b5a420f6..4ba69368b8 100644
--- a/test/org/apache/naming/resources/TestNamingContext.java
+++ b/test/org/apache/naming/resources/TestNamingContext.java
@@ -31,9 +31,6 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -86,7 +83,7 @@ public class TestNamingContext extends TomcatBaseTest {
         } else {
             expected = "NOTEQUAL";
         }
-        assertEquals(expected, bc.toString());
+        Assert.assertEquals(expected, bc.toString());
 
     }
 
@@ -139,7 +136,7 @@ public class TestNamingContext extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("org.apache.naming.resources.TesterObject", bc.toString());
+        Assert.assertEquals("org.apache.naming.resources.TesterObject", bc.toString());
     }
 
     public static final class Bug23950Servlet extends HttpServlet {
@@ -191,7 +188,7 @@ public class TestNamingContext extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk bc = getUrl("http://localhost:" + getPort() + "/");
-        assertEquals("value", bc.toString());
+        Assert.assertEquals("value", bc.toString());
     }
 
     public static final class Bug50351Servlet extends HttpServlet {
@@ -245,10 +242,10 @@ public class TestNamingContext extends TomcatBaseTest {
 
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + "/", bc, null);
-        assertEquals(200, rc);
-        assertTrue(bc.toString().contains(Bug51744Servlet.EXPECTED));
+        Assert.assertEquals(200, rc);
+        Assert.assertTrue(bc.toString().contains(Bug51744Servlet.EXPECTED));
         if (exceptionOnFailedWrite) {
-            assertTrue(bc.toString().contains(Bug51744Servlet.ERROR_MESSAGE));
+            Assert.assertTrue(bc.toString().contains(Bug51744Servlet.ERROR_MESSAGE));
         }
     }
 
@@ -308,8 +305,8 @@ public class TestNamingContext extends TomcatBaseTest {
 
         ByteChunk bc = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() + "/", bc, null);
-        assertEquals(200, rc);
-        assertTrue(bc.toString().contains("truetrue"));
+        Assert.assertEquals(200, rc);
+        Assert.assertTrue(bc.toString().contains("truetrue"));
     }
 
     public static final class Bug52830Servlet extends HttpServlet {

==================================================
TestByteChunk.java
index 32913d9b28..a86603f7a9 100644
--- a/test/org/apache/naming/resources/TestWarDirContext.java
+++ b/test/org/apache/naming/resources/TestWarDirContext.java
@@ -18,8 +18,7 @@ package org.apache.naming.resources;
 
 import java.io.File;
 
-import static org.junit.Assert.assertEquals;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.core.JreMemoryLeakPreventionListener;
@@ -60,7 +59,7 @@ public class TestWarDirContext extends TomcatBaseTest {
 
         ByteChunk bc = getUrl("http://localhost:" + getPort() +
                 "/test/warDirContext.jsp");
-        assertEquals("<p>java.lang.ClassNotFoundException</p>",
+        Assert.assertEquals("<p>java.lang.ClassNotFoundException</p>",
                 bc.toString());
     }
 
@@ -86,13 +85,13 @@ public class TestWarDirContext extends TomcatBaseTest {
         // Should be found in resources.jar
         ByteChunk bc = getUrl("http://localhost:" + getPort() +
                 "/test/'singlequote.jsp");
-        assertEquals("<p>'singlequote.jsp in resources.jar</p>",
+        Assert.assertEquals("<p>'singlequote.jsp in resources.jar</p>",
                 bc.toString());
 
         // Should be found in file system
         bc = getUrl("http://localhost:" + getPort() +
                 "/test/'singlequote2.jsp");
-        assertEquals("<p>'singlequote2.jsp in file system</p>",
+        Assert.assertEquals("<p>'singlequote2.jsp in file system</p>",
                 bc.toString());
     }
 
@@ -119,13 +118,13 @@ public class TestWarDirContext extends TomcatBaseTest {
         // Should be found in resources.jar
         ByteChunk bc = getUrl("http://localhost:" + getPort() +
                 "/test/'singlequote.jsp");
-        assertEquals("<p>'singlequote.jsp in resources.jar</p>",
+        Assert.assertEquals("<p>'singlequote.jsp in resources.jar</p>",
                 bc.toString());
 
         // Should be found in file system
         bc = getUrl("http://localhost:" + getPort() +
                 "/test/'singlequote2.jsp");
-        assertEquals("<p>'singlequote2.jsp in file system</p>",
+        Assert.assertEquals("<p>'singlequote2.jsp in file system</p>",
                 bc.toString());
     }
 }

==================================================
TestUEncoder.java
index 25a5cef643..36063488c4 100644
--- a/test/org/apache/tomcat/util/buf/TestByteChunk.java
+++ b/test/org/apache/tomcat/util/buf/TestByteChunk.java
@@ -19,9 +19,7 @@ package org.apache.tomcat.util.buf;
 import java.io.UnsupportedEncodingException;
 import java.util.Arrays;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 /**
@@ -34,7 +32,7 @@ public class TestByteChunk {
         String string = "HTTP/1.1 100 \r\n\r\n";
         byte[] bytes = ByteChunk.convertToBytes(string);
         byte[] expected = string.getBytes("ISO-8859-1");
-        assertTrue(Arrays.equals(bytes, expected));
+        Assert.assertTrue(Arrays.equals(bytes, expected));
     }
 
     /*
@@ -53,23 +51,23 @@ public class TestByteChunk {
         final int len = bytes.length;
 
         // indexOf() does not work outside of 0-127
-        assertEquals(5, ByteChunk.findByte(bytes, 0, len, (byte) '\u00a0'));
-        assertEquals(-1, ByteChunk.indexOf(bytes, 0, len, '\u00a0'));
+        Assert.assertEquals(5, ByteChunk.findByte(bytes, 0, len, (byte) '\u00a0'));
+        Assert.assertEquals(-1, ByteChunk.indexOf(bytes, 0, len, '\u00a0'));
 
-        assertEquals(0, ByteChunk.findByte(bytes, 0, len, (byte) 'H'));
-        assertEquals(0, ByteChunk.indexOf(bytes, 0, len, 'H'));
+        Assert.assertEquals(0, ByteChunk.findByte(bytes, 0, len, (byte) 'H'));
+        Assert.assertEquals(0, ByteChunk.indexOf(bytes, 0, len, 'H'));
 
-        assertEquals(len - 1, ByteChunk.findByte(bytes, 0, len, (byte) 'd'));
-        assertEquals(len - 1, ByteChunk.indexOf(bytes, 0, len, 'd'));
+        Assert.assertEquals(len - 1, ByteChunk.findByte(bytes, 0, len, (byte) 'd'));
+        Assert.assertEquals(len - 1, ByteChunk.indexOf(bytes, 0, len, 'd'));
 
-        assertEquals(-1, ByteChunk.findByte(bytes, 0, len, (byte) 'x'));
-        assertEquals(-1, ByteChunk.indexOf(bytes, 0, len, 'x'));
+        Assert.assertEquals(-1, ByteChunk.findByte(bytes, 0, len, (byte) 'x'));
+        Assert.assertEquals(-1, ByteChunk.indexOf(bytes, 0, len, 'x'));
 
-        assertEquals(7, ByteChunk.findByte(bytes, 5, len, (byte) 'o'));
-        assertEquals(7, ByteChunk.indexOf(bytes, 5, len, 'o'));
+        Assert.assertEquals(7, ByteChunk.findByte(bytes, 5, len, (byte) 'o'));
+        Assert.assertEquals(7, ByteChunk.indexOf(bytes, 5, len, 'o'));
 
-        assertEquals(-1, ByteChunk.findByte(bytes, 2, 5, (byte) 'w'));
-        assertEquals(-1, ByteChunk.indexOf(bytes, 5, 5, 'w'));
+        Assert.assertEquals(-1, ByteChunk.findByte(bytes, 2, 5, (byte) 'w'));
+        Assert.assertEquals(-1, ByteChunk.indexOf(bytes, 5, 5, 'w'));
     }
 
     @Test
@@ -80,18 +78,18 @@ public class TestByteChunk {
         ByteChunk bc = new ByteChunk();
         bc.setBytes(bytes, 0, len);
 
-        assertEquals(0, bc.indexOf('H', 0));
-        assertEquals(6, bc.indexOf('w', 0));
+        Assert.assertEquals(0, bc.indexOf('H', 0));
+        Assert.assertEquals(6, bc.indexOf('w', 0));
 
         // Does not work outside of 0-127
-        assertEquals(-1, bc.indexOf('\u00a0', 0));
+        Assert.assertEquals(-1, bc.indexOf('\u00a0', 0));
 
         bc.setBytes(bytes, 6, 5);
-        assertEquals(1, bc.indexOf('o', 0));
+        Assert.assertEquals(1, bc.indexOf('o', 0));
 
         bc.setBytes(bytes, 6, 2);
-        assertEquals(0, bc.indexOf('w', 0));
-        assertEquals(-1, bc.indexOf('d', 0));
+        Assert.assertEquals(0, bc.indexOf('w', 0));
+        Assert.assertEquals(-1, bc.indexOf('d', 0));
     }
 
     @Test
@@ -102,21 +100,21 @@ public class TestByteChunk {
         ByteChunk bc = new ByteChunk();
         bc.setBytes(bytes, 0, len);
 
-        assertEquals(0, bc.indexOf("Hello", 0, "Hello".length(), 0));
-        assertEquals(2, bc.indexOf("ll", 0, 2, 0));
-        assertEquals(2, bc.indexOf("Hello", 2, 2, 0));
+        Assert.assertEquals(0, bc.indexOf("Hello", 0, "Hello".length(), 0));
+        Assert.assertEquals(2, bc.indexOf("ll", 0, 2, 0));
+        Assert.assertEquals(2, bc.indexOf("Hello", 2, 2, 0));
 
-        assertEquals(7, bc.indexOf("o", 0, 1, 5));
+        Assert.assertEquals(7, bc.indexOf("o", 0, 1, 5));
 
         // Does not work outside of 0-127
-        assertEquals(-1, bc.indexOf("\u00a0", 0, 1, 0));
+        Assert.assertEquals(-1, bc.indexOf("\u00a0", 0, 1, 0));
 
         bc.setBytes(bytes, 6, 5);
-        assertEquals(1, bc.indexOf("o", 0, 1, 0));
+        Assert.assertEquals(1, bc.indexOf("o", 0, 1, 0));
 
         bc.setBytes(bytes, 6, 2);
-        assertEquals(0, bc.indexOf("wo", 0, 1, 0));
-        assertEquals(-1, bc.indexOf("d", 0, 1, 0));
+        Assert.assertEquals(0, bc.indexOf("wo", 0, 1, 0));
+        Assert.assertEquals(-1, bc.indexOf("d", 0, 1, 0));
     }
 
     @Test
@@ -124,15 +122,15 @@ public class TestByteChunk {
         byte[] bytes = "Hello\u00a0world".getBytes("ISO-8859-1");
         final int len = bytes.length;
 
-        assertEquals(0, ByteChunk.findBytes(bytes, 0, len, new byte[] { 'H' }));
-        assertEquals(5, ByteChunk.findBytes(bytes, 0, len, new byte[] {
+        Assert.assertEquals(0, ByteChunk.findBytes(bytes, 0, len, new byte[] { 'H' }));
+        Assert.assertEquals(5, ByteChunk.findBytes(bytes, 0, len, new byte[] {
                 (byte) '\u00a0', 'x' }));
-        assertEquals(5, ByteChunk.findBytes(bytes, 0, len - 4, new byte[] {
+        Assert.assertEquals(5, ByteChunk.findBytes(bytes, 0, len - 4, new byte[] {
                 'x', (byte) '\u00a0' }));
-        assertEquals(len - 1, ByteChunk.findBytes(bytes, 2, len, new byte[] {
+        Assert.assertEquals(len - 1, ByteChunk.findBytes(bytes, 2, len, new byte[] {
                 'x', 'd' }));
-        assertEquals(1, ByteChunk.findBytes(bytes, 0, len, new byte[] { 'o',
+        Assert.assertEquals(1, ByteChunk.findBytes(bytes, 0, len, new byte[] { 'o',
                 'e' }));
-        assertEquals(-1, ByteChunk.findBytes(bytes, 2, 5, new byte[] { 'w' }));
+        Assert.assertEquals(-1, ByteChunk.findBytes(bytes, 2, 5, new byte[] { 'w' }));
     }
 }

==================================================
TestSecurityConstraint.java
index 188f54d4f5..659f44bdf1 100644
--- a/test/org/apache/tomcat/util/buf/TestUEncoder.java
+++ b/test/org/apache/tomcat/util/buf/TestUEncoder.java
@@ -19,7 +19,7 @@ package org.apache.tomcat.util.buf;
 
 import java.io.IOException;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.tomcat.util.buf.UEncoder.SafeCharsSet;
@@ -34,13 +34,13 @@ public class TestUEncoder {
         UEncoder urlEncoder = new UEncoder(SafeCharsSet.WITH_SLASH);
 
         String s = "a+b/c/d+e.class";
-        assertTrue(urlEncoder.encodeURL(s, 0, s.length()).equals(
+        Assert.assertTrue(urlEncoder.encodeURL(s, 0, s.length()).equals(
                 "a%2bb/c/d%2be.class"));
-        assertTrue(urlEncoder.encodeURL(s, 2, s.length() - 2).equals(
+        Assert.assertTrue(urlEncoder.encodeURL(s, 2, s.length() - 2).equals(
                 "b/c/d%2be.cla"));
 
         s = new String(new char[] { 0xD801, 0xDC01 });
-        assertTrue(urlEncoder.encodeURL(s, 0, s.length())
+        Assert.assertTrue(urlEncoder.encodeURL(s, 0, s.length())
                 .equals("%f0%90%90%81"));
     }
 }

==================================================
TestWebXmlOrdering.java
index 499996f851..a7c68183d2 100644
--- a/test/org/apache/tomcat/util/descriptor/web/TestSecurityConstraint.java
+++ b/test/org/apache/tomcat/util/descriptor/web/TestSecurityConstraint.java
@@ -25,11 +25,6 @@ import javax.servlet.ServletSecurityElement;
 import javax.servlet.annotation.ServletSecurity;
 import javax.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -99,7 +94,7 @@ public class TestSecurityConstraint {
         element = new ServletSecurityElement();
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(0, result.length);
+        Assert.assertEquals(0, result.length);
 
         // Example 13-2
         // @ServletSecurity(
@@ -110,11 +105,11 @@ public class TestSecurityConstraint {
                         ServletSecurity.TransportGuarantee.CONFIDENTIAL));
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(1, result.length);
-        assertFalse(result[0].getAuthConstraint());
-        assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
-        assertEquals(0, result[0].findCollections()[0].findMethods().length);
-        assertEquals(ServletSecurity.TransportGuarantee.CONFIDENTIAL.name(),
+        Assert.assertEquals(1, result.length);
+        Assert.assertFalse(result[0].getAuthConstraint());
+        Assert.assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
+        Assert.assertEquals(0, result[0].findCollections()[0].findMethods().length);
+        Assert.assertEquals(ServletSecurity.TransportGuarantee.CONFIDENTIAL.name(),
                 result[0].getUserConstraint());
 
         // Example 13-3
@@ -123,11 +118,11 @@ public class TestSecurityConstraint {
                 new HttpConstraintElement(EmptyRoleSemantic.DENY));
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(1, result.length);
-        assertTrue(result[0].getAuthConstraint());
-        assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
-        assertEquals(0, result[0].findCollections()[0].findMethods().length);
-        assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
+        Assert.assertEquals(1, result.length);
+        Assert.assertTrue(result[0].getAuthConstraint());
+        Assert.assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
+        Assert.assertEquals(0, result[0].findCollections()[0].findMethods().length);
+        Assert.assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                 result[0].getUserConstraint());
 
         // Example 13-4
@@ -136,13 +131,13 @@ public class TestSecurityConstraint {
                 ServletSecurity.TransportGuarantee.NONE, ROLE1));
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(1, result.length);
-        assertTrue(result[0].getAuthConstraint());
-        assertEquals(1, result[0].findAuthRoles().length);
-        assertTrue(result[0].findAuthRole(ROLE1));
-        assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
-        assertEquals(0, result[0].findCollections()[0].findMethods().length);
-        assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
+        Assert.assertEquals(1, result.length);
+        Assert.assertTrue(result[0].getAuthConstraint());
+        Assert.assertEquals(1, result[0].findAuthRoles().length);
+        Assert.assertTrue(result[0].findAuthRole(ROLE1));
+        Assert.assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
+        Assert.assertEquals(0, result[0].findCollections()[0].findMethods().length);
+        Assert.assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                 result[0].getUserConstraint());
 
         // Example 13-5
@@ -162,22 +157,22 @@ public class TestSecurityConstraint {
         element = new ServletSecurityElement(hmces);
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(2, result.length);
+        Assert.assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
-            assertTrue(result[i].getAuthConstraint());
-            assertEquals(1, result[i].findAuthRoles().length);
-            assertTrue(result[i].findAuthRole(ROLE1));
-            assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
-            assertEquals(1, result[i].findCollections()[0].findMethods().length);
+            Assert.assertTrue(result[i].getAuthConstraint());
+            Assert.assertEquals(1, result[i].findAuthRoles().length);
+            Assert.assertTrue(result[i].findAuthRole(ROLE1));
+            Assert.assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
+            Assert.assertEquals(1, result[i].findCollections()[0].findMethods().length);
             String method = result[i].findCollections()[0].findMethods()[0];
             if ("GET".equals(method)) {
-                assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
+                Assert.assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                         result[i].getUserConstraint());
             } else if ("POST".equals(method)) {
-                assertEquals(ServletSecurity.TransportGuarantee.CONFIDENTIAL.name(),
+                Assert.assertEquals(ServletSecurity.TransportGuarantee.CONFIDENTIAL.name(),
                         result[i].getUserConstraint());
             } else {
-                fail("Unexpected method :[" + method + "]");
+                Assert.fail("Unexpected method :[" + method + "]");
             }
         }
 
@@ -193,23 +188,23 @@ public class TestSecurityConstraint {
                 hmces);
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(2, result.length);
+        Assert.assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
-            assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
+            Assert.assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
             if (result[i].findCollections()[0].findMethods().length == 1) {
-                assertEquals("GET",
+                Assert.assertEquals("GET",
                         result[i].findCollections()[0].findMethods()[0]);
-                assertFalse(result[i].getAuthConstraint());
+                Assert.assertFalse(result[i].getAuthConstraint());
             } else if (result[i].findCollections()[0].findOmittedMethods().length == 1) {
-                assertEquals("GET",
+                Assert.assertEquals("GET",
                         result[i].findCollections()[0].findOmittedMethods()[0]);
-                assertTrue(result[i].getAuthConstraint());
-                assertEquals(1, result[i].findAuthRoles().length);
-                assertEquals(ROLE1, result[i].findAuthRoles()[0]);
+                Assert.assertTrue(result[i].getAuthConstraint());
+                Assert.assertEquals(1, result[i].findAuthRoles().length);
+                Assert.assertEquals(ROLE1, result[i].findAuthRoles()[0]);
             } else {
-                fail("Unexpected number of methods defined");
+                Assert.fail("Unexpected number of methods defined");
             }
-            assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
+            Assert.assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                     result[i].getUserConstraint());
         }
 
@@ -227,24 +222,24 @@ public class TestSecurityConstraint {
                 hmces);
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
-        assertEquals(2, result.length);
+        Assert.assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
-            assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
+            Assert.assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
             if (result[i].findCollections()[0].findMethods().length == 1) {
-                assertEquals("TRACE",
+                Assert.assertEquals("TRACE",
                         result[i].findCollections()[0].findMethods()[0]);
-                assertTrue(result[i].getAuthConstraint());
-                assertEquals(0, result[i].findAuthRoles().length);
+                Assert.assertTrue(result[i].getAuthConstraint());
+                Assert.assertEquals(0, result[i].findAuthRoles().length);
             } else if (result[i].findCollections()[0].findOmittedMethods().length == 1) {
-                assertEquals("TRACE",
+                Assert.assertEquals("TRACE",
                         result[i].findCollections()[0].findOmittedMethods()[0]);
-                assertTrue(result[i].getAuthConstraint());
-                assertEquals(1, result[i].findAuthRoles().length);
-                assertEquals(ROLE1, result[i].findAuthRoles()[0]);
+                Assert.assertTrue(result[i].getAuthConstraint());
+                Assert.assertEquals(1, result[i].findAuthRoles().length);
+                Assert.assertEquals(ROLE1, result[i].findAuthRoles()[0]);
             } else {
-                fail("Unexpected number of methods defined");
+                Assert.fail("Unexpected number of methods defined");
             }
-            assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
+            Assert.assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                     result[i].getUserConstraint());
         }
 

==================================================
TestParameters.java
index 5bc5c783b5..cc52836b52 100644
--- a/test/org/apache/tomcat/util/descriptor/web/TestWebXmlOrdering.java
+++ b/test/org/apache/tomcat/util/descriptor/web/TestWebXmlOrdering.java
@@ -24,10 +24,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -86,12 +83,12 @@ public class TestWebXmlOrdering {
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments, null);
 
         Iterator<WebXml> iter = ordered.iterator();
-        assertEquals(c,iter.next());
-        assertEquals(a,iter.next());
-        assertEquals(b,iter.next());
-        assertEquals(e,iter.next());
-        assertEquals(d,iter.next());
-        assertFalse(iter.hasNext());
+        Assert.assertEquals(c,iter.next());
+        Assert.assertEquals(a,iter.next());
+        Assert.assertEquals(b,iter.next());
+        Assert.assertEquals(e,iter.next());
+        Assert.assertEquals(d,iter.next());
+        Assert.assertFalse(iter.hasNext());
     }
 
     @Test
@@ -102,9 +99,9 @@ public class TestWebXmlOrdering {
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments, null);
 
         Iterator<WebXml> iter = ordered.iterator();
-        assertEquals(c,iter.next());
-        assertEquals(a,iter.next());
-        assertFalse(iter.hasNext());
+        Assert.assertEquals(c,iter.next());
+        Assert.assertEquals(a,iter.next());
+        Assert.assertFalse(iter.hasNext());
     }
 
     @Test
@@ -124,12 +121,12 @@ public class TestWebXmlOrdering {
         Iterator<WebXml> iter = ordered.iterator();
         while (others.size() > 0) {
             WebXml o = iter.next();
-            assertTrue(others.contains(o));
+            Assert.assertTrue(others.contains(o));
             others.remove(o);
         }
-        assertEquals(b,iter.next());
-        assertEquals(d,iter.next());
-        assertFalse(iter.hasNext());
+        Assert.assertEquals(b,iter.next());
+        Assert.assertEquals(d,iter.next());
+        Assert.assertFalse(iter.hasNext());
     }
 
     @Test
@@ -147,15 +144,15 @@ public class TestWebXmlOrdering {
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments, null);
 
         Iterator<WebXml> iter = ordered.iterator();
-        assertEquals(b,iter.next());
+        Assert.assertEquals(b,iter.next());
 
         while (others.size() > 0) {
             WebXml o = iter.next();
-            assertTrue(others.contains(o));
+            Assert.assertTrue(others.contains(o));
             others.remove(o);
         }
-        assertEquals(d,iter.next());
-        assertFalse(iter.hasNext());
+        Assert.assertEquals(d,iter.next());
+        Assert.assertFalse(iter.hasNext());
     }
 
     @Test
@@ -163,8 +160,8 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering("a");
         app.addAbsoluteOrdering("z");
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments, null);
-        assertEquals(1,ordered.size());
-        assertEquals(fragments.get("a"),ordered.toArray()[0]);
+        Assert.assertEquals(1,ordered.size());
+        Assert.assertEquals(fragments.get("a"),ordered.toArray()[0]);
     }
 
     @Test
@@ -182,15 +179,15 @@ public class TestWebXmlOrdering {
         Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments, null);
 
         Iterator<WebXml> iter = ordered.iterator();
-        assertEquals(b,iter.next());
-        assertEquals(d,iter.next());
+        Assert.assertEquals(b,iter.next());
+        Assert.assertEquals(d,iter.next());
 
         while (others.size() > 0) {
             WebXml o = iter.next();
-            assertTrue(others.contains(o));
+            Assert.assertTrue(others.contains(o));
             others.remove(o);
         }
-        assertFalse(iter.hasNext());
+        Assert.assertFalse(iter.hasNext());
     }
 
     private void doRelativeOrderingTest(RelativeOrderingTestRunner runner) {
@@ -376,33 +373,33 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             //a.addAfterOrderingOthers();
-            assertTrue(order, posA > posB);
-            assertTrue(order, posA > posC);
-            assertTrue(order, posA > posD);
-            assertTrue(order, posA > posE);
-            assertTrue(order, posA > posF);
+            Assert.assertTrue(order, posA > posB);
+            Assert.assertTrue(order, posA > posC);
+            Assert.assertTrue(order, posA > posD);
+            Assert.assertTrue(order, posA > posE);
+            Assert.assertTrue(order, posA > posF);
 
             // a.addAfterOrdering("c");
-            assertTrue(order, posA > posC);
+            Assert.assertTrue(order, posA > posC);
 
             // b.addBeforeOrderingOthers();
-            assertTrue(order, posB < posC);
+            Assert.assertTrue(order, posB < posC);
 
             // c.addAfterOrderingOthers();
-            assertTrue(order, posC > posB);
-            assertTrue(order, posC > posD);
-            assertTrue(order, posC > posE);
-            assertTrue(order, posC > posF);
+            Assert.assertTrue(order, posC > posB);
+            Assert.assertTrue(order, posC > posD);
+            Assert.assertTrue(order, posC > posE);
+            Assert.assertTrue(order, posC > posF);
 
             // f.addBeforeOrderingOthers();
-            assertTrue(order, posF < posA);
-            assertTrue(order, posF < posB);
-            assertTrue(order, posF < posC);
-            assertTrue(order, posF < posD);
-            assertTrue(order, posF < posE);
+            Assert.assertTrue(order, posF < posA);
+            Assert.assertTrue(order, posF < posB);
+            Assert.assertTrue(order, posF < posC);
+            Assert.assertTrue(order, posF < posD);
+            Assert.assertTrue(order, posF < posE);
 
             // f.addBeforeOrdering("b");
-            assertTrue(order, posF < posB);
+            Assert.assertTrue(order, posF < posB);
         }
     }
 
@@ -423,32 +420,32 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // a.addAfterOrderingOthers();
-            assertTrue(order, posA > posB);
-            assertTrue(order, posA > posE);
-            assertTrue(order, posA > posF);
+            Assert.assertTrue(order, posA > posB);
+            Assert.assertTrue(order, posA > posE);
+            Assert.assertTrue(order, posA > posF);
 
             // a.addBeforeOrdering("c");
-            assertTrue(order, posC > posA);
-            assertTrue(order, posC > posB);
-            assertTrue(order, posC > posE);
-            assertTrue(order, posC > posF);
+            Assert.assertTrue(order, posC > posA);
+            Assert.assertTrue(order, posC > posB);
+            Assert.assertTrue(order, posC > posE);
+            Assert.assertTrue(order, posC > posF);
 
             // b.addBeforeOrderingOthers();
-            assertTrue(order, posB < posA);
-            assertTrue(order, posB < posC);
-            assertTrue(order, posB < posD);
-            assertTrue(order, posB < posF);
+            Assert.assertTrue(order, posB < posA);
+            Assert.assertTrue(order, posB < posC);
+            Assert.assertTrue(order, posB < posD);
+            Assert.assertTrue(order, posB < posF);
 
             // d.addAfterOrderingOthers();
-            assertTrue(order, posD > posB);
-            assertTrue(order, posD > posE);
-            assertTrue(order, posD > posF);
+            Assert.assertTrue(order, posD > posB);
+            Assert.assertTrue(order, posD > posE);
+            Assert.assertTrue(order, posD > posF);
 
             // e.addBeforeOrderingOthers();
-            assertTrue(order, posE < posA);
-            assertTrue(order, posE < posC);
-            assertTrue(order, posE < posD);
-            assertTrue(order, posE < posF);
+            Assert.assertTrue(order, posE < posA);
+            Assert.assertTrue(order, posE < posC);
+            Assert.assertTrue(order, posE < posD);
+            Assert.assertTrue(order, posE < posF);
         }
     }
 
@@ -466,14 +463,14 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // a.addAfterOrdering("b");
-            assertTrue(order, posA > posB);
+            Assert.assertTrue(order, posA > posB);
 
             // c.addBeforeOrderingOthers();
-            assertTrue(order, posC < posA);
-            assertTrue(order, posC < posB);
-            assertTrue(order, posC < posD);
-            assertTrue(order, posC < posE);
-            assertTrue(order, posC < posF);
+            Assert.assertTrue(order, posC < posA);
+            Assert.assertTrue(order, posC < posB);
+            Assert.assertTrue(order, posC < posD);
+            Assert.assertTrue(order, posC < posE);
+            Assert.assertTrue(order, posC < posF);
         }
     }
 
@@ -491,10 +488,10 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // b.addAfterOrdering("a");
-            assertTrue(order, posB > posA);
+            Assert.assertTrue(order, posB > posA);
 
             // c.addAfterOrdering("b");
-            assertTrue(order, posC > posB);
+            Assert.assertTrue(order, posC > posB);
         }
     }
 
@@ -512,10 +509,10 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // b.addBeforeOrdering("a");
-            assertTrue(order, posB < posA);
+            Assert.assertTrue(order, posB < posA);
 
             // c.addBeforeOrdering("b");
-            assertTrue(order, posC < posB);
+            Assert.assertTrue(order, posC < posB);
         }
     }
 
@@ -533,10 +530,10 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // b.addBeforeOrdering("a");
-            assertTrue(order, posB < posA);
+            Assert.assertTrue(order, posB < posA);
 
             //b.addAfterOrdering("c");
-            assertTrue(order, posB > posC);
+            Assert.assertTrue(order, posB > posC);
         }
     }
 
@@ -555,13 +552,13 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // b.addBeforeOrdering("a");
-            assertTrue(order, posB < posA);
+            Assert.assertTrue(order, posB < posA);
 
             // c.addBeforeOrdering("b");
-            assertTrue(order, posC < posB);
+            Assert.assertTrue(order, posC < posB);
 
             // a.addAfterOrdering("c");
-            assertTrue(order, posA > posC);
+            Assert.assertTrue(order, posA > posC);
         }
     }
 
@@ -585,42 +582,42 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // a.addBeforeOrderingOthers();
-            assertTrue(order, posA < posB);
-            assertTrue(order, posA < posC);
-            assertTrue(order, posA < posD);
-            assertTrue(order, posA < posE);
-            assertTrue(order, posA < posF);
+            Assert.assertTrue(order, posA < posB);
+            Assert.assertTrue(order, posA < posC);
+            Assert.assertTrue(order, posA < posD);
+            Assert.assertTrue(order, posA < posE);
+            Assert.assertTrue(order, posA < posF);
 
             // a.addBeforeOrdering("b");
-            assertTrue(order, posA < posB);
+            Assert.assertTrue(order, posA < posB);
 
             // b.addBeforeOrderingOthers();
-            assertTrue(order, posB < posC);
-            assertTrue(order, posB < posD);
-            assertTrue(order, posB < posE);
-            assertTrue(order, posB < posF);
+            Assert.assertTrue(order, posB < posC);
+            Assert.assertTrue(order, posB < posD);
+            Assert.assertTrue(order, posB < posE);
+            Assert.assertTrue(order, posB < posF);
 
             // c.addAfterOrdering("b");
-            assertTrue(order, posC > posB);
+            Assert.assertTrue(order, posC > posB);
 
             // d.addAfterOrdering("c");
-            assertTrue(order, posD > posC);
+            Assert.assertTrue(order, posD > posC);
 
             // e.addAfterOrderingOthers();
-            assertTrue(order, posE > posA);
-            assertTrue(order, posE > posB);
-            assertTrue(order, posE > posC);
-            assertTrue(order, posE > posD);
+            Assert.assertTrue(order, posE > posA);
+            Assert.assertTrue(order, posE > posB);
+            Assert.assertTrue(order, posE > posC);
+            Assert.assertTrue(order, posE > posD);
 
             // f.addAfterOrderingOthers();
-            assertTrue(order, posF > posA);
-            assertTrue(order, posF > posB);
-            assertTrue(order, posF > posC);
-            assertTrue(order, posF > posD);
-            assertTrue(order, posF > posE);
+            Assert.assertTrue(order, posF > posA);
+            Assert.assertTrue(order, posF > posB);
+            Assert.assertTrue(order, posF > posC);
+            Assert.assertTrue(order, posF > posD);
+            Assert.assertTrue(order, posF > posE);
 
             // f.addAfterOrdering("e");
-            assertTrue(order, posF > posE);
+            Assert.assertTrue(order, posF > posE);
         }
     }
 
@@ -639,15 +636,15 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // a.addBeforeOrderingOthers();
-            assertTrue(order, posA < posD);
-            assertTrue(order, posA < posE);
-            assertTrue(order, posA < posF);
+            Assert.assertTrue(order, posA < posD);
+            Assert.assertTrue(order, posA < posE);
+            Assert.assertTrue(order, posA < posF);
 
             // b.addBeforeOrdering("a");
-            assertTrue(order, posB < posA);
+            Assert.assertTrue(order, posB < posA);
 
             // c.addBeforeOrdering("b");
-            assertTrue(order, posC < posB);
+            Assert.assertTrue(order, posC < posB);
         }
     }
 
@@ -666,15 +663,15 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // a.addAfterOrderingOthers();
-            assertTrue(order, posA > posD);
-            assertTrue(order, posA > posE);
-            assertTrue(order, posA > posF);
+            Assert.assertTrue(order, posA > posD);
+            Assert.assertTrue(order, posA > posE);
+            Assert.assertTrue(order, posA > posF);
 
             // b.addAfterOrdering("a");
-            assertTrue(order, posB > posA);
+            Assert.assertTrue(order, posB > posA);
 
             // c.addAfterOrdering("b");
-            assertTrue(order, posC > posB);
+            Assert.assertTrue(order, posC > posB);
         }
     }
 
@@ -693,7 +690,7 @@ public class TestWebXmlOrdering {
             // check the tests are complete this way.
 
             // a.addAfterOrdering("b");
-            assertTrue(order, posA > posB);
+            Assert.assertTrue(order, posA > posB);
         }
     }
 }

==================================================
TesterParametersPerformance.java
index d9327c395e..b911e60fe3 100644
--- a/test/org/apache/tomcat/util/http/TestParameters.java
+++ b/test/org/apache/tomcat/util/http/TestParameters.java
@@ -21,13 +21,7 @@ import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.util.Enumeration;
 
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 public class TestParameters {
@@ -79,13 +73,13 @@ public class TestParameters {
     // Make sure the inner Parameter class behaves correctly
     @Test
     public void testInternal() {
-        assertEquals("foo1=bar1", SIMPLE.toString());
+        Assert.assertEquals("foo1=bar1", SIMPLE.toString());
         // Note: testing requires that ' ' is encoded as '+',
         // because that is what browsers will send us.
-        assertEquals("foo2=bar1&foo2=bar2&foo2=hello+world&foo2=%3F%25%40",
+        Assert.assertEquals("foo2=bar1&foo2=bar2&foo2=hello+world&foo2=%3F%25%40",
                 SIMPLE_MULTIPLE.toString());
-        assertEquals("foo3", NO_VALUE.toString());
-        assertEquals("foo4=", EMPTY_VALUE.toString());
+        Assert.assertEquals("foo3", NO_VALUE.toString());
+        Assert.assertEquals("foo4=", EMPTY_VALUE.toString());
     }
 
     private long doTestProcessParametersByteArrayIntInt(int limit,
@@ -128,13 +122,13 @@ public class TestParameters {
         Parameters p = new Parameters();
 
         String value = p.getParameter("foo");
-        assertNull(value);
+        Assert.assertNull(value);
 
         Enumeration<String> names = p.getParameterNames();
-        assertFalse(names.hasMoreElements());
+        Assert.assertFalse(names.hasMoreElements());
 
         String[] values = p.getParameterValues("foo");
-        assertNull(values);
+        Assert.assertNull(values);
     }
 
 
@@ -144,39 +138,39 @@ public class TestParameters {
 
         // Empty at this point
         Enumeration<String> names = p.getParameterNames();
-        assertFalse(names.hasMoreElements());
+        Assert.assertFalse(names.hasMoreElements());
         String[] values = p.getParameterValues("foo");
-        assertNull(values);
+        Assert.assertNull(values);
 
         // Add a parameter with two values
         p.addParameter("foo", "value1");
         p.addParameter("foo", "value2");
 
         names = p.getParameterNames();
-        assertTrue(names.hasMoreElements());
-        assertEquals("foo", names.nextElement());
-        assertFalse(names.hasMoreElements());
+        Assert.assertTrue(names.hasMoreElements());
+        Assert.assertEquals("foo", names.nextElement());
+        Assert.assertFalse(names.hasMoreElements());
 
         values = p.getParameterValues("foo");
-        assertEquals(2, values.length);
-        assertEquals("value1", values[0]);
-        assertEquals("value2", values[1]);
+        Assert.assertEquals(2, values.length);
+        Assert.assertEquals("value1", values[0]);
+        Assert.assertEquals("value2", values[1]);
 
         // Add two more values
         p.addParameter("foo", "value3");
         p.addParameter("foo", "value4");
 
         names = p.getParameterNames();
-        assertTrue(names.hasMoreElements());
-        assertEquals("foo", names.nextElement());
-        assertFalse(names.hasMoreElements());
+        Assert.assertTrue(names.hasMoreElements());
+        Assert.assertEquals("foo", names.nextElement());
+        Assert.assertFalse(names.hasMoreElements());
 
         values = p.getParameterValues("foo");
-        assertEquals(4, values.length);
-        assertEquals("value1", values[0]);
-        assertEquals("value2", values[1]);
-        assertEquals("value3", values[2]);
-        assertEquals("value4", values[3]);
+        Assert.assertEquals(4, values.length);
+        Assert.assertEquals("value1", values[0]);
+        Assert.assertEquals("value2", values[1]);
+        Assert.assertEquals("value3", values[2]);
+        Assert.assertEquals("value4", values[3]);
     }
 
     @Test
@@ -187,38 +181,38 @@ public class TestParameters {
 
         // Empty at this point
         Enumeration<String> names = p.getParameterNames();
-        assertFalse(names.hasMoreElements());
+        Assert.assertFalse(names.hasMoreElements());
         String[] values = p.getParameterValues("foo1");
-        assertNull(values);
+        Assert.assertNull(values);
 
         // Add a parameter
         p.addParameter("foo1", "value1");
 
         names = p.getParameterNames();
-        assertTrue(names.hasMoreElements());
-        assertEquals("foo1", names.nextElement());
-        assertFalse(names.hasMoreElements());
+        Assert.assertTrue(names.hasMoreElements());
+        Assert.assertEquals("foo1", names.nextElement());
+        Assert.assertFalse(names.hasMoreElements());
 
         values = p.getParameterValues("foo1");
-        assertEquals(1, values.length);
-        assertEquals("value1", values[0]);
+        Assert.assertEquals(1, values.length);
+        Assert.assertEquals("value1", values[0]);
 
         // Add another parameter
         p.addParameter("foo2", "value2");
 
         names = p.getParameterNames();
-        assertTrue(names.hasMoreElements());
-        assertEquals("foo1", names.nextElement());
-        assertEquals("foo2", names.nextElement());
-        assertFalse(names.hasMoreElements());
+        Assert.assertTrue(names.hasMoreElements());
+        Assert.assertEquals("foo1", names.nextElement());
+        Assert.assertEquals("foo2", names.nextElement());
+        Assert.assertFalse(names.hasMoreElements());
 
         values = p.getParameterValues("foo1");
-        assertEquals(1, values.length);
-        assertEquals("value1", values[0]);
+        Assert.assertEquals(1, values.length);
+        Assert.assertEquals("value1", values[0]);
 
         values = p.getParameterValues("foo2");
-        assertEquals(1, values.length);
-        assertEquals("value2", values[0]);
+        Assert.assertEquals(1, values.length);
+        Assert.assertEquals("value2", values[0]);
 
         // Add another parameter
         IllegalStateException e = null;
@@ -227,22 +221,22 @@ public class TestParameters {
         } catch (IllegalStateException ise) {
             e = ise;
         }
-        assertNotNull(e);
+        Assert.assertNotNull(e);
 
         // Check current parameters remain unaffected
         names = p.getParameterNames();
-        assertTrue(names.hasMoreElements());
-        assertEquals("foo1", names.nextElement());
-        assertEquals("foo2", names.nextElement());
-        assertFalse(names.hasMoreElements());
+        Assert.assertTrue(names.hasMoreElements());
+        Assert.assertEquals("foo1", names.nextElement());
+        Assert.assertEquals("foo2", names.nextElement());
+        Assert.assertFalse(names.hasMoreElements());
 
         values = p.getParameterValues("foo1");
-        assertEquals(1, values.length);
-        assertEquals("value1", values[0]);
+        Assert.assertEquals(1, values.length);
+        Assert.assertEquals("value1", values[0]);
 
         values = p.getParameterValues("foo2");
-        assertEquals(1, values.length);
-        assertEquals("value2", values[0]);
+        Assert.assertEquals(1, values.length);
+        Assert.assertEquals("value2", values[0]);
 
     }
 
@@ -265,14 +259,14 @@ public class TestParameters {
                     match = true;
                     if (parameter.values.length == 0) {
                         // Special case
-                        assertArrayEquals(new String[] {""}, values);
+                        Assert.assertArrayEquals(new String[] {""}, values);
                     } else {
-                        assertArrayEquals(parameter.getValues(), values);
+                        Assert.assertArrayEquals(parameter.getValues(), values);
                     }
                     break;
                 }
             }
-            assertTrue(match);
+            Assert.assertTrue(match);
         }
     }
 

==================================================
TestMediaType.java
index 79bd28a578..17a7d5f8ec 100644
--- a/test/org/apache/tomcat/util/http/TesterParametersPerformance.java
+++ b/test/org/apache/tomcat/util/http/TesterParametersPerformance.java
@@ -22,7 +22,7 @@ import java.nio.charset.StandardCharsets;
 import java.util.logging.Level;
 import java.util.logging.LogManager;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.tomcat.util.buf.B2CConverter;
@@ -47,7 +47,7 @@ public class TesterParametersPerformance {
     }
 
     private long doTestProcessParameters(byte[] input, int size) {
-        assertEquals(input.length, 3);
+        Assert.assertEquals(input.length, 3);
 
         Parameters p = new Parameters();
 

==================================================
TestSsl.java
index f762ffcb3c..c9c9d88c69 100644
--- a/test/org/apache/tomcat/util/http/parser/TestMediaType.java
+++ b/test/org/apache/tomcat/util/http/parser/TestMediaType.java
@@ -19,10 +19,6 @@ package org.apache.tomcat.util.http.parser;
 import java.io.IOException;
 import java.io.StringReader;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -138,9 +134,9 @@ public class TestMediaType {
         StringReader sr = new StringReader(sb.toString());
         MediaType m = MediaType.parseMediaType(sr);
 
-        assertEquals("foo/bar; charset=UTF-8; a=b", m.toString());
-        assertEquals(CHARSET, m.getCharset());
-        assertEquals("foo/bar; a=b", m.toStringNoCharset());
+        Assert.assertEquals("foo/bar; charset=UTF-8; a=b", m.toString());
+        Assert.assertEquals(CHARSET, m.getCharset());
+        Assert.assertEquals("foo/bar; a=b", m.toStringNoCharset());
     }
 
 
@@ -153,8 +149,8 @@ public class TestMediaType {
         StringReader sr = new StringReader(sb.toString());
         MediaType m = MediaType.parseMediaType(sr);
 
-        assertEquals(CHARSET_WS, m.getCharset());
-        assertEquals(TYPES.replaceAll(" ", ""),
+        Assert.assertEquals(CHARSET_WS, m.getCharset());
+        Assert.assertEquals(TYPES.replaceAll(" ", ""),
                 m.toStringNoCharset());
     }
 
@@ -169,23 +165,23 @@ public class TestMediaType {
         MediaType m = MediaType.parseMediaType(sr);
 
         // Check the types
-        assertEquals("multipart", m.getType());
-        assertEquals("related", m.getSubtype());
+        Assert.assertEquals("multipart", m.getType());
+        Assert.assertEquals("related", m.getSubtype());
 
         // Check the parameters
-        assertTrue(m.getParameterCount() == 3);
+        Assert.assertTrue(m.getParameterCount() == 3);
 
-        assertEquals("1_4F50BD36_CDF8C28", m.getParameterValue("boundary"));
-        assertEquals("\"<31671603.smil>\"", m.getParameterValue("Start"));
-        assertEquals("\"application/smil;charset=UTF-8\"",
+        Assert.assertEquals("1_4F50BD36_CDF8C28", m.getParameterValue("boundary"));
+        Assert.assertEquals("\"<31671603.smil>\"", m.getParameterValue("Start"));
+        Assert.assertEquals("\"application/smil;charset=UTF-8\"",
                 m.getParameterValue("Type"));
 
         String expected = "multipart/related; boundary=1_4F50BD36_CDF8C28; " +
                 "start=\"<31671603.smil>\"; " +
                 "type=\"application/smil;charset=UTF-8\"";
-        assertEquals(expected, m.toString());
-        assertEquals(expected, m.toStringNoCharset());
-        assertNull(m.getCharset());
+        Assert.assertEquals(expected, m.toString());
+        Assert.assertEquals(expected, m.toStringNoCharset());
+        Assert.assertNull(m.getCharset());
     }
 
 
@@ -197,18 +193,18 @@ public class TestMediaType {
         MediaType m = MediaType.parseMediaType(sr);
 
         // Check the types
-        assertEquals("text", m.getType());
-        assertEquals("html", m.getSubtype());
+        Assert.assertEquals("text", m.getType());
+        Assert.assertEquals("html", m.getSubtype());
 
         // Check the parameters
-        assertTrue(m.getParameterCount() == 2);
+        Assert.assertTrue(m.getParameterCount() == 2);
 
-        assertEquals("", m.getParameterValue("UTF-8"));
-        assertEquals("UTF-8", m.getCharset());
+        Assert.assertEquals("", m.getParameterValue("UTF-8"));
+        Assert.assertEquals("UTF-8", m.getCharset());
 
         // Note: Invalid input is filtered out
-        assertEquals("text/html; charset=UTF-8", m.toString());
-        assertEquals("UTF-8", m.getCharset());
+        Assert.assertEquals("text/html; charset=UTF-8", m.toString());
+        Assert.assertEquals("UTF-8", m.getCharset());
     }
 
 
@@ -219,15 +215,15 @@ public class TestMediaType {
         StringReader sr = new StringReader(input);
         MediaType m = MediaType.parseMediaType(sr);
 
-        assertEquals("text", m.getType());
-        assertEquals("html", m.getSubtype());
+        Assert.assertEquals("text", m.getType());
+        Assert.assertEquals("html", m.getSubtype());
 
-        assertTrue(m.getParameterCount() == 1);
+        Assert.assertTrue(m.getParameterCount() == 1);
 
-        assertEquals("UTF-8", m.getParameterValue("charset"));
-        assertEquals("UTF-8", m.getCharset());
+        Assert.assertEquals("UTF-8", m.getParameterValue("charset"));
+        Assert.assertEquals("UTF-8", m.getCharset());
 
-        assertEquals("text/html; charset=UTF-8", m.toString());
+        Assert.assertEquals("text/html; charset=UTF-8", m.toString());
     }
 
 
@@ -249,15 +245,15 @@ public class TestMediaType {
         MediaType m = MediaType.parseMediaType(sr);
 
         // Check all expected parameters are present
-        assertTrue(m.getParameterCount() == parameters.length);
+        Assert.assertTrue(m.getParameterCount() == parameters.length);
 
         // Check the types
-        assertEquals(TYPE.trim(), m.getType());
-        assertEquals(SUBTYPE.trim(), m.getSubtype());
+        Assert.assertEquals(TYPE.trim(), m.getType());
+        Assert.assertEquals(SUBTYPE.trim(), m.getSubtype());
 
         // Check the parameters
         for (int i = 0; i <  parameters.length; i++) {
-            assertEquals(parameters[i].getValue().trim(),
+            Assert.assertEquals(parameters[i].getValue().trim(),
                     m.getParameterValue(parameters[i].getName().trim()));
         }
     }

==================================================
