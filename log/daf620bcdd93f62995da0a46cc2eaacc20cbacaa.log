daf620bcdd93f62995da0a46cc2eaacc20cbacaa
==================================================
Fix Eclipse and FindBugs warnings
==================================================
Mark Emlyn
==================================================
Mon Mar 7 16:46:45 2011 +0000
==================================================
ContextAccessController.java
Fix Eclipse and FindBugs warnings
Removed unused code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1078850 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NameParserImpl.java
index 6dee3a1660..2fc437e004 100644
--- a/java/org/apache/naming/ContextAccessController.java
+++ b/java/org/apache/naming/ContextAccessController.java
@@ -87,11 +87,7 @@ public class ContextAccessController {
     public static boolean checkSecurityToken
         (Object name, Object token) {
         Object refToken = securityTokens.get(name);
-        if (refToken == null)
-            return (true);
-        if ((refToken != null) && (refToken.equals(token)))
-            return (true);
-        return (false);
+        return (refToken == null || refToken.equals(token));
     }
 
 

==================================================
NamingContextBindingsEnumeration.java
index 6e8220d990..844d64dabf 100644
--- a/java/org/apache/naming/NameParserImpl.java
+++ b/java/org/apache/naming/NameParserImpl.java
@@ -47,6 +47,7 @@ public class NameParserImpl
      * @return A non-null parsed form of the name using the naming convention 
      * of this parser.
      */
+    @Override
     public Name parse(String name)
         throws NamingException {
         return new CompositeName(name);

==================================================
NamingContextEnumeration.java
index 918e513a74..c0aa45aa04 100644
--- a/java/org/apache/naming/NamingContextBindingsEnumeration.java
+++ b/java/org/apache/naming/NamingContextBindingsEnumeration.java
@@ -67,6 +67,7 @@ public class NamingContextBindingsEnumeration
     /**
      * Retrieves the next element in the enumeration.
      */
+    @Override
     public Binding next()
         throws NamingException {
         return nextElementInternal();
@@ -76,6 +77,7 @@ public class NamingContextBindingsEnumeration
     /**
      * Determines whether there are any more elements in the enumeration.
      */
+    @Override
     public boolean hasMore()
         throws NamingException {
         return iterator.hasNext();
@@ -85,16 +87,19 @@ public class NamingContextBindingsEnumeration
     /**
      * Closes this enumeration.
      */
+    @Override
     public void close()
         throws NamingException {
     }
 
 
+    @Override
     public boolean hasMoreElements() {
         return iterator.hasNext();
     }
 
 
+    @Override
     public Binding nextElement() {
         try {
             return nextElementInternal();

==================================================
NamingService.java
index b1d9ed1569..4008c7cf69 100644
--- a/java/org/apache/naming/NamingContextEnumeration.java
+++ b/java/org/apache/naming/NamingContextEnumeration.java
@@ -58,6 +58,7 @@ public class NamingContextEnumeration
     /**
      * Retrieves the next element in the enumeration.
      */
+    @Override
     public NameClassPair next()
         throws NamingException {
         return nextElement();
@@ -67,6 +68,7 @@ public class NamingContextEnumeration
     /**
      * Determines whether there are any more elements in the enumeration.
      */
+    @Override
     public boolean hasMore()
         throws NamingException {
         return iterator.hasNext();
@@ -76,16 +78,19 @@ public class NamingContextEnumeration
     /**
      * Closes this enumeration.
      */
+    @Override
     public void close()
         throws NamingException {
     }
 
 
+    @Override
     public boolean hasMoreElements() {
         return iterator.hasNext();
     }
 
 
+    @Override
     public NameClassPair nextElement() {
         NamingEntry entry = iterator.next();
         return new NameClassPair(entry.name, entry.value.getClass().getName());

==================================================
NamingServiceMBean.java
deleted file mode 100644
index 92ee1a520e..0000000000
--- a/java/org/apache/naming/NamingService.java
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */ 
-
-package org.apache.naming;
-
-import javax.management.AttributeChangeNotification;
-import javax.management.MBeanRegistration;
-import javax.management.MBeanServer;
-import javax.management.Notification;
-import javax.management.NotificationBroadcasterSupport;
-import javax.management.ObjectName;
-import javax.naming.Context;
-
-/**
- * Implementation of the NamingService JMX MBean.
- * 
- * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
- * @version $Revision$
- */
-
-public final class NamingService
-    extends NotificationBroadcasterSupport
-    implements NamingServiceMBean, MBeanRegistration {
-    
-    
-    // ----------------------------------------------------- Instance Variables
-    
-    
-    /**
-     * Status of the Slide domain.
-     */
-    private int state = STOPPED;
-    
-    
-    /**
-     * Notification sequence number.
-     */
-    private long sequenceNumber = 0;
-    
-    
-    /**
-     * Old URL packages value.
-     */
-    private String oldUrlValue = "";
-    
-    
-    /**
-     * Old initial context value.
-     */
-    private String oldIcValue = "";
-    
-    
-    // ---------------------------------------------- MBeanRegistration Methods
-    
-    
-    public ObjectName preRegister(MBeanServer server, ObjectName name)
-        throws Exception {
-        return new ObjectName(OBJECT_NAME);
-    }
-    
-    
-    public void postRegister(Boolean registrationDone) {
-        if (!registrationDone.booleanValue())
-            destroy();
-    }
-    
-    
-    public void preDeregister()
-        throws Exception {
-    }
-    
-    
-    public void postDeregister() {
-        destroy();
-    }
-    
-    
-    // ----------------------------------------------------- SlideMBean Methods
-    
-    
-    /**
-     * Returns the Catalina component name.
-     */
-    public String getName() {
-        return NAME;
-    }
-    
-    
-    /**
-     * Returns the state.
-     */
-    public int getState() {
-        return state;
-    }
-    
-    
-    /**
-     * Returns a String representation of the state.
-     */
-    public String getStateString() {
-        return states[state];
-    }
-    
-    
-    /**
-     * Start the servlet container.
-     */
-    public void start()
-        throws Exception {
-        
-        Notification notification = null;
-        
-        if (state != STOPPED)
-            return;
-        
-        state = STARTING;
-        
-        // Notifying the MBEan server that we're starting
-        
-        notification = new AttributeChangeNotification
-            (this, sequenceNumber++, System.currentTimeMillis(), 
-             "Starting " + NAME, "State", "java.lang.Integer", 
-             new Integer(STOPPED), new Integer(STARTING));
-        sendNotification(notification);
-        
-        try {
-            
-            String value = "org.apache.naming";
-            String oldValue = System.getProperty(Context.URL_PKG_PREFIXES);
-            if (oldValue != null) {
-                oldUrlValue = oldValue;
-                value = oldValue + ":" + value;
-            }
-            System.setProperty(Context.URL_PKG_PREFIXES, value);
-            
-            oldValue = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);
-            if ((oldValue != null) && (oldValue.length() > 0)) {
-                oldIcValue = oldValue;
-            } else {
-                System.setProperty(Context.INITIAL_CONTEXT_FACTORY,
-                                   Constants.Package 
-                                   + ".java.javaURLContextFactory");
-            }
-            
-        } catch (Exception e) {
-            state = STOPPED;
-            notification = new AttributeChangeNotification
-                (this, sequenceNumber++, System.currentTimeMillis(), 
-                 "Stopped " + NAME, "State", "java.lang.Integer", 
-                 new Integer(STARTING), new Integer(STOPPED));
-            sendNotification(notification);
-        }
-        
-        state = STARTED;
-        notification = new AttributeChangeNotification
-            (this, sequenceNumber++, System.currentTimeMillis(), 
-             "Started " + NAME, "State", "java.lang.Integer", 
-             new Integer(STARTING), new Integer(STARTED));
-        sendNotification(notification);
-        
-    }
-    
-    
-    /**
-     * Stop the servlet container.
-     */
-    public void stop() {
-        
-        Notification notification = null;
-        
-        if (state != STARTED)
-            return;
-        
-        state = STOPPING;
-        
-        notification = new AttributeChangeNotification
-            (this, sequenceNumber++, System.currentTimeMillis(), 
-             "Stopping " + NAME, "State", "java.lang.Integer", 
-             new Integer(STARTED), new Integer(STOPPING));
-        sendNotification(notification);
-        
-        try {
-            
-            System.setProperty(Context.URL_PKG_PREFIXES, oldUrlValue);
-            System.setProperty(Context.INITIAL_CONTEXT_FACTORY, oldIcValue);
-            
-        } catch (Exception e) {
-            // FIXME
-            e.printStackTrace();
-        }
-        
-        state = STOPPED;
-        
-        notification = new AttributeChangeNotification
-            (this, sequenceNumber++, System.currentTimeMillis(), 
-             "Stopped " + NAME, "State", "java.lang.Integer", 
-             new Integer(STOPPING), new Integer(STOPPED));
-        sendNotification(notification);
-        
-    }
-    
-    
-    /**
-     * Destroy servlet container (if any is running).
-     */
-    public void destroy() {
-        
-        if (getState() != STOPPED)
-            stop();
-        
-    }
-    
-    
-}

==================================================
ServiceRef.java
deleted file mode 100644
index 12d312b2f7..0000000000
--- a/java/org/apache/naming/NamingServiceMBean.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */ 
-
-package org.apache.naming;
-
-/**
- * Naming MBean interface.
- * 
- * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
- * @version $Revision$
- */
-
-public interface NamingServiceMBean {
-    
-    
-    // -------------------------------------------------------------- Constants
-    
-    
-    /**
-     * Status constants.
-     */
-    public static final String[] states = 
-    {"Stopped", "Stopping", "Starting", "Started"};
-    
-    
-    public static final int STOPPED  = 0;
-    public static final int STOPPING = 1;
-    public static final int STARTING = 2;
-    public static final int STARTED  = 3;
-    
-    
-    /**
-     * Component name.
-     */
-    public static final String NAME = "Apache JNDI Naming Service";
-    
-    
-    /**
-     * Object name.
-     */
-    public static final String OBJECT_NAME = ":service=Naming";
-    
-    
-    // ------------------------------------------------------ Interface Methods
-    
-    
-    /**
-     * Returns the JNDI component name.
-     */
-    public String getName();
-    
-    
-    /**
-     * Returns the state.
-     */
-    public int getState();
-    
-    
-    /**
-     * Returns a String representation of the state.
-     */
-    public String getStateString();
-    
-    
-    /**
-     * Start the servlet container.
-     */
-    public void start()
-        throws Exception;
-    
-    
-    /**
-     * Stop the servlet container.
-     */
-    public void stop();
-    
-    
-    /**
-     * Destroy servlet container (if any is running).
-     */
-    public void destroy();
-    
-    
-}

==================================================
