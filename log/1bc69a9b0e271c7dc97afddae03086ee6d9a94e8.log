1bc69a9b0e271c7dc97afddae03086ee6d9a94e8
==================================================
Push down some more Processor methods
==================================================
Mark Thomas
==================================================
Tue Oct 20 09:02:11 2015 +0000
==================================================
AbstractProcessor.java
Push down some more Processor methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1709549 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProcessorLight.java
index 597832c13f..3c383c0d24 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -168,8 +168,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     /**
      * Obtain the Executor used by the underlying endpoint.
      */
-    @Override
-    public Executor getExecutor() {
+    protected Executor getExecutor() {
         return endpoint.getExecutor();
     }
 

==================================================
AsyncStateMachine.java
index 501a545854..28f9e3f0b7 100644
--- a/java/org/apache/coyote/AbstractProcessorLight.java
+++ b/java/org/apache/coyote/AbstractProcessorLight.java
@@ -97,7 +97,6 @@ public abstract class AbstractProcessorLight implements Processor {
     }
 
 
-    @Override
     public void addDispatch(DispatchType dispatchType) {
         synchronized (dispatches) {
             dispatches.add(dispatchType);
@@ -105,7 +104,6 @@ public abstract class AbstractProcessorLight implements Processor {
     }
 
 
-    @Override
     public Iterator<DispatchType> getIteratorAndClearDispatches() {
         // Note: Logic in AbstractProtocol depends on this method only returning
         // a non-null value if the iterator is non-empty. i.e. it should never
@@ -159,5 +157,7 @@ public abstract class AbstractProcessorLight implements Processor {
 
     protected abstract SocketState asyncPostProcess();
 
+    protected abstract void errorDispatch();
+
     protected abstract Log getLog();
 }

==================================================
Processor.java
index 8f1fe44396..c35a9eb922 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -157,10 +157,10 @@ public class AsyncStateMachine {
     private volatile AsyncState state = AsyncState.DISPATCHED;
     // Need this to fire listener on complete
     private AsyncContextCallback asyncCtxt = null;
-    private final Processor processor;
+    private final AbstractProcessor processor;
 
 
-    public AsyncStateMachine(Processor processor) {
+    public AsyncStateMachine(AbstractProcessor processor) {
         this.processor = processor;
     }
 

==================================================
UpgradeProcessorBase.java
index 35cfea6c4f..076783a06c 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -18,25 +18,18 @@ package org.apache.coyote;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Iterator;
-import java.util.concurrent.Executor;
-
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
-import org.apache.tomcat.util.net.DispatchType;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
-
 /**
  * Common interface for processors of all protocols.
  */
 public interface Processor {
 
-    Executor getExecutor();
-
     /**
      * Process a connection. This is called whenever an event occurs (e.g. more
      * data arrives) that allows processing to continue for a connection that is
@@ -56,8 +49,6 @@ public interface Processor {
 
     HttpUpgradeHandler getHttpUpgradeHandler();
 
-    void errorDispatch();
-
     boolean isAsync();
     boolean isUpgrade();
 
@@ -84,8 +75,4 @@ public interface Processor {
      * an existing multiplexed connection.
      */
     void pause();
-
-    void addDispatch(DispatchType dispatchType);
-
-    Iterator<DispatchType> getIteratorAndClearDispatches();
 }

==================================================
UpgradeServletInputStream.java
index 866b705acb..51f4324a57 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
@@ -18,8 +18,6 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.concurrent.Executor;
-
 import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.WebConnection;
 
@@ -63,12 +61,6 @@ public abstract class UpgradeProcessorBase extends AbstractProcessorLight implem
 
     // ---------------------------- Processor methods that are NO-OP for upgrade
 
-    @Override
-    public final Executor getExecutor() {
-        return null;
-    }
-
-
     @Override
     public final SocketState service(SocketWrapperBase<?> socketWrapper) throws IOException {
         return null;

==================================================
UpgradeServletOutputStream.java
index db057a9a61..864bcbb0a4 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
@@ -22,7 +22,6 @@ import javax.servlet.ReadListener;
 import javax.servlet.ServletInputStream;
 
 import org.apache.coyote.ContainerThreadMarker;
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -36,7 +35,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
     private static final StringManager sm =
             StringManager.getManager(UpgradeServletInputStream.class);
 
-    private final Processor processor;
+    private final UpgradeProcessorBase processor;
     private final SocketWrapperBase<?> socketWrapper;
 
     private volatile boolean closed = false;
@@ -47,7 +46,8 @@ public class UpgradeServletInputStream extends ServletInputStream {
     private volatile ClassLoader applicationLoader = null;
 
 
-    public UpgradeServletInputStream(Processor processor, SocketWrapperBase<?> socketWrapper) {
+    public UpgradeServletInputStream(UpgradeProcessorBase processor,
+            SocketWrapperBase<?> socketWrapper) {
         this.processor = processor;
         this.socketWrapper = socketWrapper;
     }

==================================================
