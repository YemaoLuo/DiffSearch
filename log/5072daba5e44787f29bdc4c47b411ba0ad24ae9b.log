5072daba5e44787f29bdc4c47b411ba0ad24ae9b
==================================================
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
==================================================
Mark Emlyn
==================================================
Thu Nov 5 01:21:11 2009 +0000
==================================================
CheckOutThreadTest.java
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
Patch provided by sebb

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832956 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectCountTest.java
index 9b859c61c9..0c718b4b8c 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java
@@ -374,6 +374,7 @@ public class CheckOutThreadTest extends DefaultTestCase {
     public class TestThread extends Thread {
         protected DataSource d;
         protected String query = null;
+        @Override
         public void run() {
             long max = -1, totalmax=0, totalcmax=0, cmax = -1, nroffetch = 0, totalruntime = 0;
             try {

==================================================
DefaultTestCase.java
index f0e8c103b1..98273954e0 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/ConnectCountTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/ConnectCountTest.java
@@ -239,6 +239,7 @@ public class ConnectCountTest extends DefaultTestCase {
         protected long sleep = 10;
         protected boolean async = false;
         long minwait = Long.MAX_VALUE, maxwait = -1, totalwait=0, totalcmax=0, cmax = -1, nroffetch = 0, totalruntime = 0;
+        @Override
         public void run() {
             try {
                 long now = System.currentTimeMillis();

==================================================
FairnessTest.java
index 47526925fa..f19ff638c7 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
@@ -171,6 +171,7 @@ public class DefaultTestCase extends TestCase {
     }
 
 
+    @Override
     protected void tearDown() throws Exception {
         try {datasource.close();}catch(Exception ignore){}
         try {tDatasource.close();}catch(Exception ignore){}

==================================================
TestAsyncQueue.java
index 9f7164e70a..b296eeefa5 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/FairnessTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/FairnessTest.java
@@ -218,6 +218,7 @@ public class FairnessTest extends DefaultTestCase {
         protected long sleep = 10;
         protected boolean async = false;
         long minwait = Long.MAX_VALUE, maxwait = -1, totalwait=0, totalcmax=0, cmax = -1, nroffetch = 0, totalruntime = 0;
+        @Override
         public void run() {
             try {
                 long now = System.currentTimeMillis();

==================================================
TestRequest.java
index d8ee55eeb4..7f21c5208b 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestAsyncQueue.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestAsyncQueue.java
@@ -27,11 +27,13 @@ import junit.framework.TestCase;
 
 public class TestAsyncQueue extends TestCase {
     protected FairBlockingQueue<Object> queue = null;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         this.queue = new FairBlockingQueue<Object>();
     }
 
+    @Override
     protected void tearDown() throws Exception {
         this.queue = null;
         super.tearDown();
@@ -72,6 +74,7 @@ public class TestAsyncQueue extends TestCase {
             this.setDaemon(false);
             this.setName(TestAsyncQueue.class.getName()+"-OfferThread");
         }
+        @Override
         public void run() {
             try {
                 sleep(delay);

==================================================
TestStandardContext.java
index 9bc19dcff3..45bb7cd46a 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -177,6 +177,7 @@ public class TestRequest extends TomcatBaseTest {
             return null;
         }
 
+        @Override
         public boolean isResponseBodyOK() {
             if (getResponseBody() == null) {
                 return false;

==================================================
TestTomcat.java
index b9d2b7d488..6607e2d734 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -79,6 +79,7 @@ public class TestStandardContext extends TomcatBaseTest {
     }
     
     private static final class Bug46243Client extends SimpleHttpClient {
+        @Override
         public boolean isResponseBodyOK() {
             // Don't care about the body in this test
             return true;

==================================================
TomcatBaseTest.java
index c7c0cf2538..bb03800930 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -40,6 +40,7 @@ public class TestTomcat extends TomcatBaseTest {
 
         private static final long serialVersionUID = 1L;
 
+        @Override
         public void doGet(HttpServletRequest req, HttpServletResponse res) 
                 throws IOException {
             res.getWriter().write("Hello world");
@@ -55,6 +56,7 @@ public class TestTomcat extends TomcatBaseTest {
 
         private static final String JNDI_ENV_NAME = "test";
         
+        @Override
         public void doGet(HttpServletRequest req, HttpServletResponse res) 
                 throws IOException {
             
@@ -79,6 +81,7 @@ public class TestTomcat extends TomcatBaseTest {
         
         private static final long serialVersionUID = 1L;
         
+        @Override
         public void doGet(HttpServletRequest req, HttpServletResponse res) 
         throws IOException {
             URL url = req.getServletContext().getResource("/WEB-INF/web.xml");

==================================================
CoordinationDemo.java
index 4df959c36b..715930d53b 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -66,6 +66,7 @@ public abstract class TomcatBaseTest extends TestCase {
         return getPort();
     }
     
+    @Override
     public void setUp() throws Exception {
         tempDir = new File("output/tmp");
         tempDir.mkdir();
@@ -80,6 +81,7 @@ public abstract class TomcatBaseTest extends TestCase {
         tomcat.setPort(port);
     }
     
+    @Override
     public void tearDown() throws Exception {
         tomcat.stop();
         ExpandWar.delete(tempDir);

==================================================
EchoRpcTest.java
index 43453ef5a2..770b203f29 100644
--- a/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
+++ b/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
@@ -136,6 +136,7 @@ public class CoordinationDemo {
             for (int i = 0; i < status.length; i++) {
                 final int j = i;
                 t[j] = new Thread() {
+                    @Override
                     public void run() {
                         status[j].stop();
                     }
@@ -161,6 +162,7 @@ public class CoordinationDemo {
             for (int i = 0; i < status.length; i++) {
                 final int j = i;
                 t[j] = new Thread() {
+                    @Override
                     public void run() {
                         status[j].start();
                     }
@@ -349,6 +351,7 @@ public class CoordinationDemo {
             channel = new GroupChannel();
             ((ReceiverBase)channel.getChannelReceiver()).setAutoBind(100);
             interceptor = new NonBlockingCoordinator() {
+                @Override
                 public void fireInterceptorEvent(InterceptorEvent event) {
                     status = event.getEventTypeDesc();
                     int type = event.getEventType();

==================================================
LoadTest.java
index 22ce161425..fec7c5dd9c 100644
--- a/test/org/apache/catalina/tribes/demos/EchoRpcTest.java
+++ b/test/org/apache/catalina/tribes/demos/EchoRpcTest.java
@@ -185,6 +185,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
                 this.channel = channel;
             }
     
+            @Override
             public void run() {
                 System.out.println("Shutting down...");
                 SystemExit exit = new SystemExit(5000);
@@ -204,6 +205,7 @@ public class EchoRpcTest implements RpcCallback, Runnable {
             public SystemExit(long delay) {
                 this.delay = delay;
             }
+            @Override
             public void run () {
                 try {
                     Thread.sleep(delay);

==================================================
MapDemo.java
index 38e303c8f9..462dd1c9a3 100644
--- a/test/org/apache/catalina/tribes/demos/LoadTest.java
+++ b/test/org/apache/catalina/tribes/demos/LoadTest.java
@@ -265,6 +265,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             // Default constructor
         }
         
+        @Override
         public byte[] getMessage() {
             if ( message == null ) {
                 message = outdata;
@@ -272,6 +273,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             return message;
         }
         
+        @Override
         public void setMessage(byte[] data) {
             this.message = data;
         }
@@ -382,6 +384,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             this.channel = channel;
         }
         
+        @Override
         public void run() {
             System.out.println("Shutting down...");
             SystemExit exit = new SystemExit(5000);
@@ -401,6 +404,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
         public SystemExit(long delay) {
             this.delay = delay;
         }
+        @Override
         public void run () {
             try {
                 Thread.sleep(delay);

==================================================
MembersWithProperties.java
index ab6e7e1941..6984be3808 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -166,6 +166,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
         }
 
         
+        @Override
         public void run() {
             System.out.println("Shutting down...");
             //create an exit thread that forces a shutdown if the JVM wont exit cleanly
@@ -188,6 +189,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
             this.delay = delay;
         }
 
+        @Override
         public void run() {
             try {
                 Thread.sleep(delay);
@@ -285,6 +287,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
 
             if (DEBUG) {
                 table.addMouseListener(new MouseAdapter() {
+                    @Override
                     public void mouseClicked(MouseEvent e) {
                         printDebugData(table);
                     }
@@ -375,6 +378,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
             }
             if ( "random".equals(e.getActionCommand()) ) {
                 Thread t = new Thread() {
+                    @Override
                     public void run() {
                         for (int i = 0; i < 5; i++) {
                             String key = random(5,0,0,true,true,null);
@@ -510,6 +514,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
             super();
         }
 
+        @Override
         public Component getTableCellRendererComponent
             (JTable table, Object value, boolean isSelected,
              boolean hasFocus, int row, int column) {

==================================================
TestChannelOptionFlag.java
index e817d95ef9..f02399db58 100644
--- a/test/org/apache/catalina/tribes/demos/MembersWithProperties.java
+++ b/test/org/apache/catalina/tribes/demos/MembersWithProperties.java
@@ -106,6 +106,7 @@ public class MembersWithProperties implements MembershipListener{
             this.channel = channel;
         }
 
+        @Override
         public void run() {
             System.out.println("Shutting down...");
             try {

==================================================
TestChannelStartStop.java
index 6595f33566..2beb8c7b98 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestChannelOptionFlag.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestChannelOptionFlag.java
@@ -34,11 +34,13 @@ import org.apache.catalina.tribes.ChannelException;
  */
 public class TestChannelOptionFlag extends TestCase {
     GroupChannel channel = null;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel = new GroupChannel();
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         if ( channel != null ) try {channel.stop(Channel.DEFAULT);}catch ( Exception ignore) { /* Ignore */ }

==================================================
TestDataIntegrity.java
index 517c51685b..0bfbf011a5 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestChannelStartStop.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestChannelStartStop.java
@@ -27,11 +27,13 @@ import org.apache.catalina.tribes.transport.ReceiverBase;
 public class TestChannelStartStop extends TestCase {
     GroupChannel channel = null;
     int udpPort = 45543;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel = new GroupChannel();
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         try {channel.stop(Channel.DEFAULT);}catch (Exception ignore){ /* Ignore */ }

==================================================
TestMulticastPackages.java
index c5bf7b3592..642ed59f4b 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -44,6 +44,7 @@ public class TestDataIntegrity extends TestCase {
     GroupChannel channel2;
     Listener listener1;
     int threadCounter = 0;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel1 = new GroupChannel();
@@ -56,6 +57,7 @@ public class TestDataIntegrity extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         channel1.stop(Channel.DEFAULT);
@@ -67,6 +69,7 @@ public class TestDataIntegrity extends TestCase {
         Thread[] threads = new Thread[threadCount];
         for (int x=0; x<threads.length; x++ ) {
             threads[x] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         long start = System.currentTimeMillis();
@@ -95,6 +98,7 @@ public class TestDataIntegrity extends TestCase {
             Thread[] threads = new Thread[threadCount];
             for (int x=0; x<threads.length; x++ ) {
                 threads[x] = new Thread() {
+                    @Override
                     public void run() {
                         try {
                             long start = System.currentTimeMillis();

==================================================
TestRemoteProcessException.java
index 33e8eb9d6b..bed575793e 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -44,6 +44,7 @@ public class TestMulticastPackages extends TestCase {
     GroupChannel channel2;
     Listener listener1;
     int threadCounter = 0;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel1 = new GroupChannel();
@@ -66,6 +67,7 @@ public class TestMulticastPackages extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         channel1.stop(Channel.DEFAULT);
@@ -105,6 +107,7 @@ public class TestMulticastPackages extends TestCase {
         Thread[] threads = new Thread[threadCount];
         for (int x=0; x<threads.length; x++ ) {
             threads[x] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         long start = System.currentTimeMillis();

==================================================
TestUdpPackages.java
index 03b051a0f6..d21d6d581b 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
@@ -42,6 +42,7 @@ public class TestRemoteProcessException extends TestCase {
     GroupChannel channel1;
     GroupChannel channel2;
     Listener listener1;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel1 = new GroupChannel();
@@ -52,6 +53,7 @@ public class TestRemoteProcessException extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         channel1.stop(Channel.DEFAULT);

==================================================
TestNonBlockingCoordinator.java
index 5af6411fbd..135eda6cea 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
@@ -44,6 +44,7 @@ public class TestUdpPackages extends TestCase {
     GroupChannel channel2;
     Listener listener1;
     int threadCounter = 0;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel1 = new GroupChannel();
@@ -66,6 +67,7 @@ public class TestUdpPackages extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         channel1.stop(Channel.DEFAULT);
@@ -98,6 +100,7 @@ public class TestUdpPackages extends TestCase {
         Thread[] threads = new Thread[threadCount];
         for (int x=0; x<threads.length; x++ ) {
             threads[x] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         long start = System.currentTimeMillis();
@@ -147,6 +150,7 @@ public class TestUdpPackages extends TestCase {
         Thread[] threads = new Thread[threadCount];
         for (int x=0; x<threads.length; x++ ) {
             threads[x] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         long start = System.currentTimeMillis();

==================================================
TestOrderInterceptor.java
index 10dd2e8a6f..104b1df143 100644
--- a/test/org/apache/catalina/tribes/test/interceptors/TestNonBlockingCoordinator.java
+++ b/test/org/apache/catalina/tribes/test/interceptors/TestNonBlockingCoordinator.java
@@ -31,6 +31,7 @@ public class TestNonBlockingCoordinator extends TestCase {
     NonBlockingCoordinator[] coordinators = null;
     int channelCount = 10;
     Thread[] threads = null;
+    @Override
     protected void setUp() throws Exception {
         System.out.println("Setup");
         super.setUp();
@@ -44,6 +45,7 @@ public class TestNonBlockingCoordinator extends TestCase {
             channels[i].addInterceptor(new TcpFailureDetector());
             final int j = i;
             threads[i] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         channels[j].start(Channel.DEFAULT);
@@ -90,6 +92,7 @@ public class TestNonBlockingCoordinator extends TestCase {
         System.out.println("Coordinator[2b] is:" + member);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         System.out.println("tearDown");
         super.tearDown();

==================================================
TestSenderConnections.java
index c88533d208..95ff4a63e1 100644
--- a/test/org/apache/catalina/tribes/test/interceptors/TestOrderInterceptor.java
+++ b/test/org/apache/catalina/tribes/test/interceptors/TestOrderInterceptor.java
@@ -39,6 +39,7 @@ public class TestOrderInterceptor extends TestCase {
     TestListener[] test = null;
     int channelCount = 2;
     Thread[] threads = null;
+    @Override
     protected void setUp() throws Exception {
         System.out.println("Setup");
         super.setUp();
@@ -59,6 +60,7 @@ public class TestOrderInterceptor extends TestCase {
             channels[i].addChannelListener(test[i]);
             final int j = i;
             threads[i] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         channels[j].start(Channel.DEFAULT);
@@ -120,6 +122,7 @@ public class TestOrderInterceptor extends TestCase {
     }
 
 
+    @Override
     protected void tearDown() throws Exception {
         System.out.println("tearDown");
         super.tearDown();
@@ -160,6 +163,7 @@ public class TestOrderInterceptor extends TestCase {
         int cnt = 1;
         ChannelMessage hold = null;
         Member[] dest = null;
+        @Override
         public synchronized void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
             if ( hold == null ) {
                 //System.out.println("Skipping message:"+msg);

==================================================
TestSerialization.java
index 8ee9057498..6f7a4d3237 100644
--- a/test/org/apache/catalina/tribes/test/io/TestSenderConnections.java
+++ b/test/org/apache/catalina/tribes/test/io/TestSenderConnections.java
@@ -34,6 +34,7 @@ public class TestSenderConnections extends TestCase {
     private ManagedChannel[] channels = new ManagedChannel[count];
     private TestMsgListener[] listeners = new TestMsgListener[count];
 
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         for (int i = 0; i < channels.length; i++) {
@@ -86,6 +87,7 @@ public class TestSenderConnections extends TestCase {
         sendMessages(2000,15000);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         for (int i = 0; i < channels.length; i++) {
             channels[i].stop(Channel.DEFAULT);

==================================================
TestDomainFilter.java
index bdb9fe034f..75debf0eff 100644
--- a/test/org/apache/catalina/tribes/test/io/TestSerialization.java
+++ b/test/org/apache/catalina/tribes/test/io/TestSerialization.java
@@ -20,6 +20,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
 import junit.framework.TestCase;
 
 public class TestSerialization extends TestCase {
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
     }
@@ -28,6 +29,7 @@ public class TestSerialization extends TestCase {
         
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
     }

==================================================
TestMemberArrival.java
index 0239fcc80b..62d6541289 100644
--- a/test/org/apache/catalina/tribes/test/membership/TestDomainFilter.java
+++ b/test/org/apache/catalina/tribes/test/membership/TestDomainFilter.java
@@ -33,6 +33,7 @@ public class TestDomainFilter
     private ManagedChannel[] channels = new ManagedChannel[count];
     private TestMbrListener[] listeners = new TestMbrListener[count];
 
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         for (int i = 0; i < channels.length; i++) {
@@ -59,6 +60,7 @@ public class TestDomainFilter
         for (int i=0; i<channels.length; i++ ) {
             final Channel channel = channels[i];
             Thread t = new Thread() {
+                @Override
                 public void run() {
                     try {
                         channel.start(Channel.DEFAULT);
@@ -75,6 +77,7 @@ public class TestDomainFilter
         for (int i=listeners.length-1; i>=0; i-- ) assertEquals("Checking member arrival length",0,listeners[i].members.size());
     }
 
+    @Override
     protected void tearDown() throws Exception {
 
         for (int i = 0; i < channels.length; i++) {

==================================================
TestMemberSerialization.java
index e74af4cfd0..b57fe054ca 100644
--- a/test/org/apache/catalina/tribes/test/membership/TestMemberArrival.java
+++ b/test/org/apache/catalina/tribes/test/membership/TestMemberArrival.java
@@ -31,6 +31,7 @@ public class TestMemberArrival
     private ManagedChannel[] channels = new ManagedChannel[count];
     private TestMbrListener[] listeners = new TestMbrListener[count];
 
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         for (int i = 0; i < channels.length; i++) {
@@ -55,6 +56,7 @@ public class TestMemberArrival
         for (int i=0; i<channels.length; i++ ) {
             final Channel channel = channels[i];
             Thread t = new Thread() {
+                @Override
                 public void run() {
                     try {
                         channel.start(Channel.DEFAULT);
@@ -72,6 +74,7 @@ public class TestMemberArrival
         for (int i=listeners.length-1; i>=0; i-- ) assertEquals("Checking member arrival length",channels.length-1,listeners[i].members.size());
     }
 
+    @Override
     protected void tearDown() throws Exception {
 
         for (int i = 0; i < channels.length; i++) {

==================================================
TestTcpFailureDetector.java
index 623f67446d..2eef4416a8 100644
--- a/test/org/apache/catalina/tribes/test/membership/TestMemberSerialization.java
+++ b/test/org/apache/catalina/tribes/test/membership/TestMemberSerialization.java
@@ -33,6 +33,7 @@ public class TestMemberSerialization extends TestCase {
     MemberImpl m1, m2, p1,p2;
     byte[] payload = null;
     int udpPort = 3445;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         payload = new byte[333];
@@ -108,6 +109,7 @@ public class TestMemberSerialization extends TestCase {
         return result;
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
     }

==================================================
SocketReceive.java
index e0600dbde6..ded0be2834 100644
--- a/test/org/apache/catalina/tribes/test/membership/TestTcpFailureDetector.java
+++ b/test/org/apache/catalina/tribes/test/membership/TestTcpFailureDetector.java
@@ -45,6 +45,7 @@ public class TestTcpFailureDetector extends TestCase {
     private ManagedChannel channel2 = null;
     private TestMbrListener mbrlist1 = null;
     private TestMbrListener mbrlist2 = null;
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         channel1 = new GroupChannel();
@@ -122,6 +123,7 @@ public class TestTcpFailureDetector extends TestCase {
     }
 
 
+    @Override
     protected void tearDown() throws Exception {
         tcpFailureDetector1 = null;
         tcpFailureDetector2 = null;

==================================================
SocketTribesReceive.java
index 1619b25b94..bb90f4c066 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketReceive.java
@@ -41,6 +41,7 @@ public class SocketReceive {
         socket.setReceiveBufferSize(43800);
         InputStream in = socket.getInputStream();
         Thread t = new Thread() {
+            @Override
             public void run() {
                 while ( true ) {
                     try {

==================================================
SocketValidateReceive.java
index e4b0555673..97f0099c1f 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketTribesReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketTribesReceive.java
@@ -45,6 +45,7 @@ public class SocketTribesReceive {
         socket.setReceiveBufferSize(size);
         InputStream in = socket.getInputStream();
         Thread t = new Thread() {
+            @Override
             public void run() {
                 while ( true ) {
                     try {

==================================================
Benchmarks.java
index e6193be5de..aa7113301c 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketValidateReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketValidateReceive.java
@@ -44,6 +44,7 @@ public class SocketValidateReceive {
         InputStream in = socket.getInputStream();
         MyDataReader reader = new MyDataReader(50000);
         Thread t = new Thread() {
+            @Override
             public void run() {
                 while ( true ) {
                     try {

==================================================
CookiesBaseTest.java
index 6fee6e10df..a986fa8b4e 100644
--- a/test/org/apache/catalina/valves/Benchmarks.java
+++ b/test/org/apache/catalina/valves/Benchmarks.java
@@ -41,6 +41,7 @@ public class Benchmarks extends TestCase {
 
     private static class GetDateBenchmarkTest_Sync implements Runnable {
 
+        @Override
         public String toString() {
             return "Syncs";
         }
@@ -68,11 +69,13 @@ public class Benchmarks extends TestCase {
 
     private static class GetDateBenchmarkTest_Local implements Runnable {
 
+        @Override
         public String toString() {
             return "ThreadLocals";
         }
 
         private ThreadLocal<Long> currentMillisLocal = new ThreadLocal<Long>() {
+            @Override
             protected Long initialValue() {
                 return Long.valueOf(0);
             }
@@ -97,6 +100,7 @@ public class Benchmarks extends TestCase {
     private static class GetDateBenchmarkTest_LocalMutableLong implements
             Runnable {
 
+        @Override
         public String toString() {
             return "ThreadLocals with a mutable Long";
         }
@@ -106,6 +110,7 @@ public class Benchmarks extends TestCase {
         }
 
         private ThreadLocal<MutableLong> currentMillisLocal = new ThreadLocal<MutableLong>() {
+            @Override
             protected MutableLong initialValue() {
                 return new MutableLong();
             }
@@ -129,6 +134,7 @@ public class Benchmarks extends TestCase {
 
     private static class GetDateBenchmarkTest_LocalStruct implements Runnable {
 
+        @Override
         public String toString() {
             return "single ThreadLocal";
         }
@@ -140,6 +146,7 @@ public class Benchmarks extends TestCase {
         }
 
         private ThreadLocal<Struct> currentStruct = new ThreadLocal<Struct>() {
+            @Override
             protected Struct initialValue() {
                 return new Struct();
             }
@@ -189,6 +196,7 @@ public class Benchmarks extends TestCase {
     private static class TimeDateElementBenchmarkTest_Sync extends
             TimeDateElementBenchmarkTestBase implements Runnable {
 
+        @Override
         public String toString() {
             return "Syncs";
         }
@@ -246,6 +254,7 @@ public class Benchmarks extends TestCase {
     private static class TimeDateElementBenchmarkTest_Local extends
             TimeDateElementBenchmarkTestBase implements Runnable {
 
+        @Override
         public String toString() {
             return "ThreadLocals";
         }
@@ -253,26 +262,31 @@ public class Benchmarks extends TestCase {
         private ThreadLocal<String> currentDateStringLocal = new ThreadLocal<String>();
 
         private ThreadLocal<Date> currentDateLocal = new ThreadLocal<Date>() {
+            @Override
             protected Date initialValue() {
                 return new Date();
             }
         };
         private ThreadLocal<SimpleDateFormat> dayFormatterLocal = new ThreadLocal<SimpleDateFormat>() {
+            @Override
             protected SimpleDateFormat initialValue() {
                 return new SimpleDateFormat("dd");
             }
         };
         private ThreadLocal<SimpleDateFormat> monthFormatterLocal = new ThreadLocal<SimpleDateFormat>() {
+            @Override
             protected SimpleDateFormat initialValue() {
                 return new SimpleDateFormat("MM");
             }
         };
         private ThreadLocal<SimpleDateFormat> yearFormatterLocal = new ThreadLocal<SimpleDateFormat>() {
+            @Override
             protected SimpleDateFormat initialValue() {
                 return new SimpleDateFormat("yyyy");
             }
         };
         private ThreadLocal<SimpleDateFormat> timeFormatterLocal = new ThreadLocal<SimpleDateFormat>() {
+            @Override
             protected SimpleDateFormat initialValue() {
                 return new SimpleDateFormat("hh:mm:ss");
             }
@@ -317,6 +331,7 @@ public class Benchmarks extends TestCase {
     private static class TimeDateElementBenchmarkTest_LocalStruct extends
             TimeDateElementBenchmarkTestBase implements Runnable {
 
+        @Override
         public String toString() {
             return "single ThreadLocal";
         }
@@ -332,6 +347,7 @@ public class Benchmarks extends TestCase {
         }
 
         private ThreadLocal<Struct> structLocal = new ThreadLocal<Struct>() {
+            @Override
             protected Struct initialValue() {
                 return new Struct();
             }
@@ -375,6 +391,7 @@ public class Benchmarks extends TestCase {
     private static class TimeDateElementBenchmarkTest_LocalStruct_SBuilder extends
             TimeDateElementBenchmarkTestBase implements Runnable {
 
+        @Override
         public String toString() {
             return "single ThreadLocal, with StringBuilder";
         }
@@ -390,6 +407,7 @@ public class Benchmarks extends TestCase {
         }
 
         private ThreadLocal<Struct> structLocal = new ThreadLocal<Struct>() {
+            @Override
             protected Struct initialValue() {
                 return new Struct();
             }

==================================================
TestCookiesNoFwdStrictSysProps.java
index d19eb73cc2..712f9e5eb9 100644
--- a/test/org/apache/tomcat/util/http/CookiesBaseTest.java
+++ b/test/org/apache/tomcat/util/http/CookiesBaseTest.java
@@ -51,6 +51,7 @@ public abstract class CookiesBaseTest extends TomcatBaseTest {
             this.cookieValue = cookieValue;
         }
         
+        @Override
         public void doGet(HttpServletRequest req, HttpServletResponse res) 
                 throws IOException {
             try {

==================================================
