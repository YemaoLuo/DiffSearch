7551bb8cb151c57032a024098886a6cffbc1d01b
==================================================
More migrations to Context bind()/unbind()
==================================================
Mark Emlyn
==================================================
Thu Jan 23 12:17:41 2014 +0000
==================================================
CoyoteAdapter.java
More migrations to Context bind()/unbind()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560659 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationDispatcher.java
index c59b5ffdbf..c7628064d6 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -316,15 +316,12 @@ public class CoyoteAdapter implements Adapter {
                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);
                 ReadListener readListener = req.getReadListener();
                 if (readListener != null) {
-                    ClassLoader oldCL =
-                            Thread.currentThread().getContextClassLoader();
-                    ClassLoader newCL =
-                            request.getContext().getLoader().getClassLoader();
+                    ClassLoader oldCL = null;
                     try {
-                        Thread.currentThread().setContextClassLoader(newCL);
+                        oldCL = request.getContext().bind(false, null);
                         readListener.onError(t);
                     } finally {
-                        Thread.currentThread().setContextClassLoader(oldCL);
+                        request.getContext().unbind(false, oldCL);
                     }
                 }
                 if (t != null) {
@@ -339,15 +336,12 @@ public class CoyoteAdapter implements Adapter {
                         RequestDispatcher.ERROR_EXCEPTION);
                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);
                 if (res.getWriteListener() != null) {
-                    ClassLoader oldCL =
-                            Thread.currentThread().getContextClassLoader();
-                    ClassLoader newCL =
-                            request.getContext().getLoader().getClassLoader();
+                    ClassLoader oldCL = null;
                     try {
-                        Thread.currentThread().setContextClassLoader(newCL);
+                        oldCL = request.getContext().bind(false, null);
                         res.getWriteListener().onError(t);
                     } finally {
-                        Thread.currentThread().setContextClassLoader(oldCL);
+                        request.getContext().unbind(false, oldCL);
                     }
                 }
                 if (t != null) {
@@ -360,12 +354,9 @@ public class CoyoteAdapter implements Adapter {
                 WriteListener writeListener = res.getWriteListener();
                 ReadListener readListener = req.getReadListener();
                 if (writeListener != null && status == SocketStatus.OPEN_WRITE) {
-                    ClassLoader oldCL =
-                            Thread.currentThread().getContextClassLoader();
-                    ClassLoader newCL =
-                            request.getContext().getLoader().getClassLoader();
+                    ClassLoader oldCL = null;
                     try {
-                        Thread.currentThread().setContextClassLoader(newCL);
+                        oldCL = request.getContext().bind(false, null);
                         res.onWritePossible();
                         if (request.isFinished() && req.sendAllDataReadEvent() &&
                                 readListener != null) {
@@ -376,16 +367,13 @@ public class CoyoteAdapter implements Adapter {
                         writeListener.onError(t);
                         throw t;
                     } finally {
-                        Thread.currentThread().setContextClassLoader(oldCL);
+                        request.getContext().unbind(false, oldCL);
                     }
                     success = true;
                 } else if (readListener != null && status == SocketStatus.OPEN_READ) {
-                    ClassLoader oldCL =
-                            Thread.currentThread().getContextClassLoader();
-                    ClassLoader newCL =
-                            request.getContext().getLoader().getClassLoader();
+                    ClassLoader oldCL = null;
                     try {
-                        Thread.currentThread().setContextClassLoader(newCL);
+                        oldCL = request.getContext().bind(false, null);
                         readListener.onDataAvailable();
                         if (request.isFinished() && req.sendAllDataReadEvent()) {
                             readListener.onAllDataRead();
@@ -395,7 +383,7 @@ public class CoyoteAdapter implements Adapter {
                         readListener.onError(t);
                         throw t;
                     } finally {
-                        Thread.currentThread().setContextClassLoader(oldCL);
+                        request.getContext().unbind(false, oldCL);
                     }
                     success = true;
                 }
@@ -548,17 +536,14 @@ public class CoyoteAdapter implements Adapter {
                 if (readListener != null && request.isFinished()) {
                     // Possible the all data may have been read during service()
                     // method so this needs to be checked here
-                    ClassLoader oldCL =
-                            Thread.currentThread().getContextClassLoader();
-                    ClassLoader newCL =
-                            request.getContext().getLoader().getClassLoader();
+                    ClassLoader oldCL = null;
                     try {
-                        Thread.currentThread().setContextClassLoader(newCL);
+                        oldCL = request.getContext().bind(false, null);
                         if (req.sendAllDataReadEvent()) {
                             req.getReadListener().onAllDataRead();
                         }
                     } finally {
-                        Thread.currentThread().setContextClassLoader(oldCL);
+                        request.getContext().unbind(false, oldCL);
                     }
                 }
             } else if (!comet) {

==================================================
ContainerBase.java
index 351acda394..3d24f42bfd 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -665,15 +665,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         // Checking to see if the context classloader is the current context
         // classloader. If it's not, we're saving it, and setting the context
         // classloader to the Context classloader
-        ClassLoader oldCCL = Thread.currentThread().getContextClassLoader();
-        ClassLoader contextClassLoader = context.getLoader().getClassLoader();
-
-        if (oldCCL != contextClassLoader) {
-            Thread.currentThread().setContextClassLoader(contextClassLoader);
-            context.getThreadBindingListener().bind();
-        } else {
-            oldCCL = null;
-        }
+        ClassLoader oldCCL = context.bind(false, null);
 
         // Initialize local variables we may need
         HttpServletResponse hresponse = state.hresponse;
@@ -796,10 +788,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         }
 
         // Reset the old context class loader
-        if (oldCCL != null) {
-            context.getThreadBindingListener().unbind();
-            Thread.currentThread().setContextClassLoader(oldCCL);
-        }
+        context.unbind(false, oldCCL);
 
         // Unwrap request/response if needed
         // See Bugzilla 30949

==================================================
StandardWrapper.java
index 2124ea8088..bdbeef38c2 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -55,7 +55,6 @@ import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Loader;
 import org.apache.catalina.Pipeline;
 import org.apache.catalina.Realm;
-import org.apache.catalina.ThreadBindingListener;
 import org.apache.catalina.Valve;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
@@ -1349,16 +1348,10 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                     if (loader == null) {
                         return;
                     }
+
                     // Ensure background processing for Contexts and Wrappers
                     // is performed under the web app's class loader
-                    originalClassLoader =
-                            Thread.currentThread().getContextClassLoader();
-                    Thread.currentThread().setContextClassLoader(
-                            loader.getClassLoader());
-                    ThreadBindingListener tbl = ((Context) container).getThreadBindingListener();
-                    if (tbl != null) {
-                        tbl.bind();
-                    }
+                    originalClassLoader = ((Context) container).bind(false, null);
                 }
                 container.backgroundProcess();
                 Container[] children = container.findChildren();
@@ -1371,15 +1364,8 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 ExceptionUtils.handleThrowable(t);
                 log.error("Exception invoking periodic operation: ", t);
             } finally {
-                if (originalClassLoader != null) {
-                    if (container instanceof Context) {
-                        ThreadBindingListener tbl = ((Context) container).getThreadBindingListener();
-                        if (tbl != null) {
-                            tbl.unbind();
-                        }
-                    }
-                    Thread.currentThread().setContextClassLoader(
-                            originalClassLoader);
+                if (container instanceof Context) {
+                    ((Context) container).unbind(false, originalClassLoader);
                }
             }
         }

==================================================
