b0bce7343b69d812ebbbd2dc1ae4187f325edfb8
==================================================
First cut HTTP upgrade for NIO/APR
==================================================
Mark Emlyn
==================================================
Sat Nov 24 17:35:46 2012 +0000
==================================================
UpgradeAprProcessor.java
First cut HTTP upgrade for NIO/APR
- Non-blocking not supported
- WebSocket broken

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1413212 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UpgradeNioProcessor.java
index 1275d32ff9..3d926fbfaf 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
@@ -26,76 +26,86 @@ import org.apache.tomcat.util.net.SocketWrapper;
 
 public class UpgradeAprProcessor extends UpgradeProcessor<Long> {
 
-    private final long socket;
-
+    private static final int INFINITE_TIMEOUT = -1;
 
     public UpgradeAprProcessor(SocketWrapper<Long> wrapper,
             ProtocolHandler httpUpgradeProcessor) {
-        super(upgradeInbound);
-
-        Socket.timeoutSet(wrapper.getSocket().longValue(),
-                upgradeInbound.getReadTimeout());
+        super(httpUpgradeProcessor,
+                new AprUpgradeServletInputStream(wrapper.getSocket().longValue()),
+                new AprUpgradeServletOutputStream(wrapper.getSocket().longValue()));
 
-        this.socket = wrapper.getSocket().longValue();
+        Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);
     }
 
 
-    /*
-     * Output methods
-     */
-    @Override
-    public void flush() throws IOException {
-        // NOOP
-    }
+    // ----------------------------------------------------------- Inner classes
 
+    private static class AprUpgradeServletInputStream
+            extends UpgradeServletInputStream {
 
-    @Override
-    public void write(int b) throws IOException {
-        Socket.send(socket, new byte[] {(byte) b}, 0, 1);
-    }
+        private final long socket;
 
+        public AprUpgradeServletInputStream(long socket) {
+            this.socket = socket;
+        }
 
-    @Override
-    public void write(byte[]b, int off, int len) throws IOException {
-        Socket.send(socket, b, off, len);
+        @Override
+        protected int doRead() throws IOException {
+            byte[] bytes = new byte[1];
+            int result = Socket.recv(socket, bytes, 0, 1);
+            if (result == -1) {
+                return -1;
+            } else {
+                return bytes[0] & 0xFF;
+            }
+        }
+
+        @Override
+        protected int doRead(byte[] b, int off, int len) throws IOException {
+            boolean block = true;
+            if (!block) {
+                Socket.optSet(socket, Socket.APR_SO_NONBLOCK, -1);
+            }
+            try {
+                int result = Socket.recv(socket, b, off, len);
+                if (result > 0) {
+                    return result;
+                } else if (-result == Status.EAGAIN) {
+                    return 0;
+                } else {
+                    throw new IOException(sm.getString("apr.error",
+                            Integer.valueOf(-result)));
+                }
+            } finally {
+                if (!block) {
+                    Socket.optSet(socket, Socket.APR_SO_NONBLOCK, 0);
+                }
+            }
+        }
     }
 
+    private static class AprUpgradeServletOutputStream
+            extends UpgradeServletOutputStream {
+
+        private final long socket;
 
-    /*
-     * Input methods
-     */
-    @Override
-    public int read() throws IOException {
-        byte[] bytes = new byte[1];
-        int result = Socket.recv(socket, bytes, 0, 1);
-        if (result == -1) {
-            return -1;
-        } else {
-            return bytes[0] & 0xFF;
+        public AprUpgradeServletOutputStream(long socket) {
+            this.socket = socket;
         }
-    }
 
+        @Override
+        protected void doWrite(int b) throws IOException {
+            Socket.send(socket, new byte[] {(byte) b}, 0, 1);
+        }
 
-    @Override
-    public int read(boolean block, byte[] bytes, int off, int len)
-            throws IOException {
-        if (!block) {
-            Socket.optSet(socket, Socket.APR_SO_NONBLOCK, -1);
+        @Override
+        protected void doWrite(byte[] b, int off, int len) throws IOException {
+            Socket.send(socket, b, off, len);
         }
-        try {
-            int result = Socket.recv(socket, bytes, off, len);
-            if (result > 0) {
-                return result;
-            } else if (-result == Status.EAGAIN) {
-                return 0;
-            } else {
-                throw new IOException(sm.getString("apr.error",
-                        Integer.valueOf(-result)));
-            }
-        } finally {
-            if (!block) {
-                Socket.optSet(socket, Socket.APR_SO_NONBLOCK, 0);
-            }
+
+        @Override
+        protected void doFlush() throws IOException {
+            // NO-OP
         }
     }
 }

==================================================
