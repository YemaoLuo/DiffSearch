794e2f2cece8d58fb25b22e215185e66391ac878
==================================================
Fix race condition in NIO2. The issue is:
==================================================
Mark Thomas
==================================================
Wed May 27 17:09:47 2015 +0000
==================================================
Http11Nio2Protocol.java
Fix race condition in NIO2. The issue is:
- Thread one (T1) triggers a non-blocking read
- The read returns no data so a read (R1) is pending
- T1 completes processing
- R1 completes and notifies/dispatches to thread 2 (T2)
- T1 calls awaitBytes which triggers a non-blocking read
- T1's read returns no data so a read (R2) is pending
- T2 starts processing
- T2 tries to read but the read fails because R2 is pending (even though there is data in the read buffer from R1).

It isn't safe to read the data from the read buffer while R2 is pending since R2 could modify the read buffer at any point.

This fix ensures that R1 remains pending until T2 starts processing. This in turn means that T1's call to awaitBytes() becomes a NO-OP. When T2 tries to read since no read is pending it is able to read (and process) the data from the read buffer and continue.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682079 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 614f7fca10..5bd259e5d8 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -94,8 +94,9 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
                 Processor processor, boolean addToPoller) {
             processor.recycle();
             recycledProcessors.push(processor);
-            // No need to add to poller. read() will have already been called
-            // with an appropriate completion handler.
+            if (addToPoller) {
+                socket.registerReadInterest();
+            }
         }
 
 
@@ -108,8 +109,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
                 //  - this is an upgraded connection
                 //  - the request line/headers have not been completely
                 //    read
-                // The completion handlers should be in place,
-                // so nothing to do here
+                socket.registerReadInterest();
             }
         }
 

==================================================
