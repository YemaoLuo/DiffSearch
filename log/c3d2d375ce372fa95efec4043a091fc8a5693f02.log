c3d2d375ce372fa95efec4043a091fc8a5693f02
==================================================
Fix some Javadoc errors reported by Eclipse.
==================================================
Mark Thomas
==================================================
Wed May 23 14:47:45 2018 +0000
==================================================
CorsFilter.java
Fix some Javadoc errors reported by Eclipse.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832108 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CsrfPreventionFilter.java
index e4f1ea6a57..fcb4baaabe 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -193,8 +193,6 @@ public class CorsFilter extends GenericFilter {
      * This method returns the parameter's value if it exists, or defaultValue
      * if not.
      *
-     * @param filterConfig  The configuration for the filter
-     *
      * @param name          The parameter's name
      *
      * @param defaultValue  The default value to return if the parameter does
@@ -203,7 +201,7 @@ public class CorsFilter extends GenericFilter {
      * @return The parameter's value or the default value if the parameter does
      *         not exist
      */
-    private String getInitParameter(String name, String defaultValue){
+    private String getInitParameter(String name, String defaultValue) {
 
         String value = getInitParameter(name);
         if (value != null) {

==================================================
WebappClassLoaderBase.java
index ed6517c283..fff5c2fedb 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -169,11 +169,8 @@ public class CsrfPreventionFilter extends CsrfPreventionFilterBase {
             return addNonce(super.encodeURL(url));
         }
 
-        /**
+        /*
          * Return the specified URL with the nonce added to the query string.
-         *
-         * @param url URL to be modified
-         * @param nonce The nonce to add
          */
         private String addNonce(String url) {
 

==================================================
MapperListener.java
index b889c0b75d..b5a2d63883 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -344,7 +344,8 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     private boolean clearReferencesStopTimerThreads = false;
 
     /**
-     * Should Tomcat call {@link org.apache.juli.logging.LogFactory#release()}
+     * Should Tomcat call
+     * {@link org.apache.juli.logging.LogFactory#release(ClassLoader)}
      * when the class loader is stopped? If not specified, the default value
      * of <code>true</code> is used. Changing the default setting is likely to
      * lead to memory leaks and other issues.

==================================================
SecurityUtil.java
index b2a97d6c43..5c0b839319 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -448,13 +448,9 @@ public class MapperListener extends LifecycleMBeanBase
         }
     }
 
-    /**
+    /*
      * Populate <code>wrappers</code> list with information for registration of
      * mappings for this wrapper in this context.
-     *
-     * @param context
-     * @param wrapper
-     * @param list
      */
     private void prepareWrapperMappingInfo(Context context, Wrapper wrapper,
             List<WrapperMappingInfo> wrappers) {

==================================================
WebdavServlet.java
index 74ec443264..4a550eaa6d 100644
--- a/java/org/apache/catalina/security/SecurityUtil.java
+++ b/java/org/apache/catalina/security/SecurityUtil.java
@@ -258,7 +258,7 @@ public final class SecurityUtil{
      * Perform work as a particular <code>Subject</code>. Here the work
      * will be granted to a <code>null</code> subject.
      *
-     * @param methodName the method to apply the security restriction
+     * @param method the method to apply the security restriction
      * @param targetObject the <code>Servlet</code> on which the method will
      *  be called.
      * @param targetArguments <code>Object</code> array contains the

==================================================
ELParser.java
index a1b8ad1bdd..f820e7e4dc 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -1957,7 +1957,6 @@ public class WebdavServlet extends DefaultServlet {
      * Propfind helper method.
      *
      * @param req The servlet request
-     * @param resources Resources object associated with this context
      * @param generatedXML XML response to the Propfind request
      * @param path Path of the current resource
      * @param type Propfind type
@@ -2000,7 +1999,7 @@ public class WebdavServlet extends DefaultServlet {
     /**
      * Propfind helper method. Displays the properties of a lock-null resource.
      *
-     * @param resources Resources object associated with this context
+     * @param req The servlet request
      * @param generatedXML XML response to the Propfind request
      * @param path Path of the current resource
      * @param type Propfind type

==================================================
JspReader.java
index 9f2dd2caf5..11276b3b2e 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -274,7 +274,6 @@ public class ELParser {
      * {@link #skipUntilEL()}.
      *
      * @param input Non-EL input to be escaped
-     * @param isDeferredSyntaxAllowedAsLiteral
      *
      * @return The escaped version of the input
      */

==================================================
JasperELResolver.java
index 7086235249..fb22b5f5a6 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -400,7 +400,7 @@ class JspReader {
      * Skip until the given string is matched in the stream.
      * When returned, the context is positioned past the end of the match.
      *
-     * @param s The String to match.
+     * @param limit The String to match.
      * @return A non-null <code>Mark</code> instance (positioned immediately
      *         before the search string) if found, <strong>null</strong>
      *         otherwise.
@@ -439,7 +439,7 @@ class JspReader {
      * chars initially escaped by a '\' and any EL expressions.
      * When returned, the context is positioned past the end of the match.
      *
-     * @param s The String to match.
+     * @param limit    The String to match.
      * @param ignoreEL <code>true</code> if something that looks like EL should
      *                 not be treated as EL.
      * @return A non-null <code>Mark</code> instance (positioned immediately

==================================================
PoolableConnection.java
index 431631b84f..73d133e147 100644
--- a/java/org/apache/jasper/el/JasperELResolver.java
+++ b/java/org/apache/jasper/el/JasperELResolver.java
@@ -158,8 +158,8 @@ public class JasperELResolver extends CompositeELResolver {
         return null;
     }
 
-    /**
-     * Copied from {@link org.apache.el.lang.ELSupport#coerceToString(Object)}.
+    /*
+     * Copied from org.apache.el.lang.ELSupport#coerceToString(ELContext,Object)
      */
     private static final String coerceToString(final Object obj) {
         if (obj == null) {

==================================================
PooledConnectionImpl.java
index 3b356dd83b..045f4896be 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnection.java
@@ -306,14 +306,14 @@ public class PoolableConnection extends DelegatingConnection<Connection>
         }
     }
 
-    /**
+    /*
      * Checks the SQLState of the input exception and any nested SQLExceptions it wraps.
-     * <p>
-     * If {@link #getDisconnectSqlCodes() disconnectSQLCodes} has been set, sql states
+     *
+     * If _disconnectSQLCodes has been set, sql states
      * are compared to those in the configured list of fatal exception codes.  If this
      * property is not set, codes are compared against the default codes in
-     * #{@link Utils.DISCONNECTION_SQL_CODES} and in this case anything starting with
-     * #{link Utils.DISCONNECTION_SQL_CODE_PREFIX} is considered a disconnection.</p>
+     * Utils.DISCONNECTION_SQL_CODES and in this case anything starting with
+     * Utils.DISCONNECTION_SQL_CODE_PREFIX is considered a disconnection.</p>
      *
      * @param e SQLException to be examined
      * @return true if the exception signals a disconnection

==================================================
PoolUtils.java
index ba48a9ac55..98269423de 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
@@ -360,14 +360,14 @@ class PooledConnectionImpl
     }
 
     /**
-     * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
+     * Create a {@link PStmtKeyCPDS} for the given arguments.
      */
     protected PStmtKeyCPDS createKey(final String sql, final int autoGeneratedKeys) {
         return new PStmtKeyCPDS(normalizeSQL(sql), autoGeneratedKeys);
     }
 
     /**
-     * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
+     * Create a {@link PStmtKeyCPDS} for the given arguments.
      */
     protected PStmtKeyCPDS createKey(final String sql, final int resultSetType,
             final int resultSetConcurrency, final int resultSetHoldability) {
@@ -376,21 +376,21 @@ class PooledConnectionImpl
     }
 
     /**
-     * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
+     * Create a {@link PStmtKeyCPDS} for the given arguments.
      */
     protected PStmtKeyCPDS createKey(final String sql, final int columnIndexes[]) {
         return new PStmtKeyCPDS(normalizeSQL(sql), columnIndexes);
     }
 
     /**
-     * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
+     * Create a {@link PStmtKeyCPDS} for the given arguments.
      */
     protected PStmtKeyCPDS createKey(final String sql, final String columnNames[]) {
         return new PStmtKeyCPDS(normalizeSQL(sql), columnNames);
     }
 
     /**
-     * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
+     * Create a {@link PStmtKeyCPDS} for the given arguments.
      */
     protected PStmtKeyCPDS createKey(final String sql, final int resultSetType,
                                final int resultSetConcurrency) {
@@ -399,7 +399,7 @@ class PooledConnectionImpl
     }
 
     /**
-     * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
+     * Create a {@link PStmtKeyCPDS} for the given arguments.
      */
     protected PStmtKeyCPDS createKey(final String sql) {
         return new PStmtKeyCPDS(normalizeSQL(sql));

==================================================
AbandonedConfig.java
index cef02750c4..cec1f743bb 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
@@ -1594,7 +1594,7 @@ public final class PoolUtils {
          * @param erodingFactor
          *            erosion factor - determines the frequency of erosion
          *            events
-         * @see #factor
+         * @see #erodingFactor
          */
         protected ErodingKeyedObjectPool(final KeyedObjectPool<K, V> keyedPool,
                 final ErodingFactor erodingFactor) {

==================================================
EvictionTimer.java
index b018962ede..19ab41c33c 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/AbandonedConfig.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/AbandonedConfig.java
@@ -232,9 +232,10 @@ public class AbandonedConfig {
     }
 
     /**
-     * If the pool implements {@link UsageTracking}, should the pool record a
-     * stack trace every time a method is called on a pooled object and retain
-     * the most recent stack trace to aid debugging of abandoned objects?
+     * If the pool implements
+     * {@link org.apache.tomcat.dbcp.pool2.UsageTracking}, should the pool
+     * record a stack trace every time a method is called on a pooled object and
+     * retain the most recent stack trace to aid debugging of abandoned objects?
      */
     private boolean useUsageTracking = false;
 

==================================================
ConstantLong.java
index 06e9f73b31..27036276cf 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/EvictionTimer.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/EvictionTimer.java
@@ -66,9 +66,9 @@ class EvictionTimer {
 
     /**
      * Add the specified eviction task to the timer. Tasks that are added with a
-     * call to this method *must* call {@link #cancel(TimerTask)} to cancel the
-     * task to prevent memory and/or thread leaks in application server
-     * environments.
+     * call to this method *must* call {@link #cancel(TimerTask,long,TimeUnit)}
+     * to cancel the task to prevent memory and/or thread leaks in application
+     * server environments.
      * @param task      Task to be scheduled
      * @param delay     Delay in milliseconds before task is executed
      * @param period    Time in milliseconds between executions

==================================================
JavaClass.java
index 6bb77e1f3e..d7b245c6ff 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -36,7 +36,7 @@ public final class ConstantLong extends Constant {
     /**
      * Initialize instance from file data.
      *
-     * @param file Input stream
+     * @param input Input stream
      * @throws IOException
      */
     ConstantLong(final DataInput input) throws IOException {

==================================================
IOUtils.java
index 67c361f381..5536492fde 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -40,7 +40,7 @@ public class JavaClass {
      * @param superclass_name Name of this class's superclass.
      * @param access_flags Access rights defined by bit flags
      * @param constant_pool Array of constants
-     * @param interfaces Implemented interfaces
+     * @param interface_names Implemented interfaces
      * @param runtimeVisibleAnnotations "RuntimeVisibleAnnotations" attribute defined on the Class, or null
      */
     JavaClass(final String class_name, final String superclass_name,

==================================================
Cookie.java
index e2eb2c3953..72c1eeb22a 100644
--- a/java/org/apache/tomcat/util/http/fileupload/IOUtils.java
+++ b/java/org/apache/tomcat/util/http/fileupload/IOUtils.java
@@ -62,9 +62,7 @@ public class IOUtils {
 
     /**
      * The default buffer size ({@value}) to use for
-     * {@link #copyLarge(InputStream, OutputStream)}
-     * and
-     * {@link #copyLarge(Reader, Writer)}
+     * {@link #copyLarge(InputStream, OutputStream)}.
      */
     private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;
 

==================================================
OpenSSLEngine.java
index a4331e2b50..176b2bb43a 100644
--- a/java/org/apache/tomcat/util/http/parser/Cookie.java
+++ b/java/org/apache/tomcat/util/http/parser/Cookie.java
@@ -622,7 +622,7 @@ public class Cookie {
 
     /**
      * Custom implementation that skips many of the safety checks in
-     * {@link javax.nio.ByteBuffer}.
+     * {@link java.nio.ByteBuffer}.
      */
     private static class ByteBuffer {
 

==================================================
TesterServletEncodeUrl.java
index 627d91c2da..15c6f56aa9 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java
@@ -173,7 +173,7 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
      * @param fallbackApplicationProtocol the fallback application protocol
      * @param clientMode {@code true} if this is used for clients, {@code false}
      * otherwise
-     * @param sessionContext the {@link OpenSslSessionContext} this
+     * @param sessionContext the {@link OpenSSLSessionContext} this
      * {@link SSLEngine} belongs to.
      * @param alpn {@code true} if alpn should be used, {@code false}
      * otherwise
@@ -192,7 +192,7 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
      * @param fallbackApplicationProtocol the fallback application protocol
      * @param clientMode {@code true} if this is used for clients, {@code false}
      * otherwise
-     * @param sessionContext the {@link OpenSslSessionContext} this
+     * @param sessionContext the {@link OpenSSLSessionContext} this
      * {@link SSLEngine} belongs to.
      * @param alpn {@code true} if alpn should be used, {@code false}
      * otherwise

==================================================
