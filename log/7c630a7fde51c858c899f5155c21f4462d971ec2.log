7c630a7fde51c858c899f5155c21f4462d971ec2
==================================================
ElResolver.getType() must return null for read-only resolvers/properties
==================================================
Mark Thomas
==================================================
Thu Sep 30 15:10:45 2021 +0100
==================================================
ArrayELResolver.java
ElResolver.getType() must return null for read-only resolvers/properties


==================================================
BeanELResolver.java
index 24e32d61f5..c9a0aff96b 100644
--- a/java/jakarta/el/ArrayELResolver.java
+++ b/java/jakarta/el/ArrayELResolver.java
@@ -45,6 +45,13 @@ public class ArrayELResolver extends ELResolver {
             } catch (IllegalArgumentException e) {
                 // ignore
             }
+            /*
+             * The resolver may have been created in read-only mode but the
+             * array and its elements will always be read-write.
+             */
+            if (readOnly) {
+                return null;
+            }
             return base.getClass().getComponentType();
         }
 

==================================================
BeanNameELResolver.java
index 2b6f455c5c..81a229bb98 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -69,7 +69,13 @@ public class BeanELResolver extends ELResolver {
         }
 
         context.setPropertyResolved(base, property);
-        return this.property(context, base, property).getPropertyType();
+        BeanProperty beanProperty = property(context, base, property);
+
+        if (readOnly || beanProperty.isReadOnly(base)) {
+            return null;
+        }
+
+        return beanProperty.getPropertyType();
     }
 
     @Override

==================================================
ListELResolver.java
index 814c6f5c01..ad65ccfcec 100644
--- a/java/jakarta/el/BeanNameELResolver.java
+++ b/java/jakarta/el/BeanNameELResolver.java
@@ -104,9 +104,16 @@ public class BeanNameELResolver extends ELResolver {
 
         try {
             if (beanNameResolver.isNameResolved(beanName)) {
-                Class<?> result = beanNameResolver.getBean(beanName).getClass();
                 context.setPropertyResolved(base, property);
-                return result;
+
+                /*
+                 * No resolver level isReadOnly property for this resolver
+                 */
+                if (beanNameResolver.isReadOnly((String) property)) {
+                    return null;
+                }
+
+                return beanNameResolver.getBean(beanName).getClass();
             }
         } catch (Throwable t) {
             Util.handleThrowable(t);

==================================================
MapELResolver.java
index 73fcc395f0..de50fdf866 100644
--- a/java/jakarta/el/ListELResolver.java
+++ b/java/jakarta/el/ListELResolver.java
@@ -51,6 +51,15 @@ public class ListELResolver extends ELResolver {
                 throw new PropertyNotFoundException(
                         new ArrayIndexOutOfBoundsException(idx).getMessage());
             }
+
+            /*
+             * Not perfect as a custom list implementation may be read-only but
+             * consistent with isReadOnly().
+             */
+            if (list.getClass() == UNMODIFIABLE || readOnly) {
+                return null;
+            }
+
             return Object.class;
         }
 

==================================================
ResourceBundleELResolver.java
index 6ce34227f4..95268301fc 100644
--- a/java/jakarta/el/MapELResolver.java
+++ b/java/jakarta/el/MapELResolver.java
@@ -46,6 +46,12 @@ public class MapELResolver extends ELResolver {
 
         if (base instanceof Map<?,?>) {
             context.setPropertyResolved(base, property);
+
+            Map<?, ?> map = (Map<?, ?>) base;
+            if (readOnly || map.getClass() == UNMODIFIABLE) {
+                return null;
+            }
+
             return Object.class;
         }
 

==================================================
StaticFieldELResolver.java
index 9f2563a1b4..e9d0cebab4 100644
--- a/java/jakarta/el/ResourceBundleELResolver.java
+++ b/java/jakarta/el/ResourceBundleELResolver.java
@@ -57,6 +57,10 @@ public class ResourceBundleELResolver extends ELResolver {
 
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(base, property);
+            /*
+             * ResourceBundles are always read-only so fall-through to return
+             * null
+             */
         }
 
         return null;

==================================================
