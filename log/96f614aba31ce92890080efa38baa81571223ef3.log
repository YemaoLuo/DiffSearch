96f614aba31ce92890080efa38baa81571223ef3
==================================================
Fix Ping/Pong issues identified by Autobahn
==================================================
Mark Emlyn
==================================================
Mon Dec 24 13:42:37 2012 +0000
==================================================
WsFrame.java
Fix Ping/Pong issues identified by Autobahn

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1425647 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsIOException.java
index 6e2c85dd4c..7529d9ad03 100644
--- a/java/org/apache/tomcat/websocket/WsFrame.java
+++ b/java/org/apache/tomcat/websocket/WsFrame.java
@@ -34,7 +34,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class WsFrame {
 
-    private static StringManager sm =
+    private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
 
     // Connection level attributes
@@ -177,9 +177,11 @@ public class WsFrame {
         }
         if (isControl()) {
             if (payloadLength > 125) {
-                throw new IOException(sm.getString(
-                        "wsFrame.controlPayloadTooBig",
-                        Long.valueOf(payloadLength)));
+                CloseReason cr = new CloseReason(
+                        CloseCodes.PROTOCOL_ERROR,
+                        sm.getString("wsFrame.controlPayloadTooBig",
+                                Long.valueOf(payloadLength)));
+                throw new WsIOException(cr);
             }
             if (!fin) {
                 throw new IOException("wsFrame.controlNoFin");
@@ -202,7 +204,7 @@ public class WsFrame {
             if (opCode == Constants.OPCODE_CLOSE) {
                 messageBuffer.flip();
                 String reason = null;
-                int code = CloseCodes.NO_STATUS_CODE.getCode();
+                int code = CloseCodes.NORMAL_CLOSURE.getCode();
                 if (messageBuffer.remaining() > 1) {
                     code = messageBuffer.getShort();
                     if (messageBuffer.remaining() > 0) {

==================================================
WsProtocolHandler.java
new file mode 100644
index 0000000000..beda82f089
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/WsIOException.java
@@ -0,0 +1,36 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.io.IOException;
+
+import javax.websocket.CloseReason;
+
+public class WsIOException extends IOException {
+
+    private static final long serialVersionUID = 1L;
+
+    private final CloseReason closeReason;
+
+    public WsIOException(CloseReason closeReason) {
+        this.closeReason = closeReason;
+    }
+
+    public CloseReason getCloseReason() {
+        return closeReason;
+    }
+}

==================================================
WsSession.java
index 7b5fd2fc83..386e42b7fc 100644
--- a/java/org/apache/tomcat/websocket/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/WsProtocolHandler.java
@@ -111,19 +111,25 @@ public class WsProtocolHandler implements ProtocolHandler {
         public void onDataAvailable() {
             try {
                 wsFrame.onDataAvailable();
-            } catch (IOException e) {
-                if (e instanceof EOFException){
-                    try {
-                        CloseReason cr = new CloseReason(
-                                CloseCodes.CLOSED_ABNORMALLY, e.getMessage());
-                        wsSession.onClose(cr);
-                        wsSession.close(cr);
-                    } catch (IOException e1) {
-                        // TODO
-                    }
-                } else {
-                    onError(e);
+            } catch (WsIOException ws) {
+                CloseReason cr = ws.getCloseReason();
+                wsSession.onClose(cr);
+                try {
+                    wsSession.close(cr);
+                } catch (IOException e) {
+                    // TODO Log?
                 }
+            } catch (EOFException eof) {
+                try {
+                    CloseReason cr = new CloseReason(
+                            CloseCodes.CLOSED_ABNORMALLY, eof.getMessage());
+                    wsSession.onClose(cr);
+                    wsSession.close(cr);
+                } catch (IOException e1) {
+                    // TODO Log?
+                }
+            } catch (IOException ioe) {
+                onError(ioe);
             }
         }
 

==================================================
