8082593a28d7d44ed3bb4e50cb7422e7e454914c
==================================================
Refactor to register and unregister endpoint instances and session instances rather than endpoint classes and session instances.
==================================================
Mark Emlyn
==================================================
Fri Jun 28 13:15:45 2013 +0000
==================================================
WsSession.java
Refactor to register and unregister endpoint instances and session instances rather than endpoint classes and session instances.
This is required to support implementation of WebSocket 1.0, section 7.2

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1497763 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsWebSocketContainer.java
index 7e5f2806de..865721c0c4 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -464,8 +464,7 @@ public class WsSession implements Session {
             wsRemoteEndpoint.close();
             localEndpoint.onError(this, ioe);
         } finally {
-            webSocketContainer.unregisterSession(
-                    localEndpoint.getClass(), this);
+            webSocketContainer.unregisterSession(localEndpoint, this);
         }
 
     }

==================================================
WsHttpUpgradeHandler.java
index f765f06037..94206b4949 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -334,7 +334,7 @@ public class WsWebSocketContainer
                 Collections.EMPTY_MAP, false,
                 clientEndpointConfiguration);
         endpoint.onOpen(wsSession, clientEndpointConfiguration);
-        registerSession(endpoint.getClass(), wsSession);
+        registerSession(endpoint, wsSession);
 
         // Object creation will trigger input processing
         @SuppressWarnings("unused")
@@ -345,7 +345,11 @@ public class WsWebSocketContainer
     }
 
 
-    protected void registerSession(Class<?> endpoint, WsSession wsSession) {
+    protected void registerSession(Object endpointInstance,
+            WsSession wsSession) {
+
+        Class<?> endpointClazz = endpointInstance.getClass();
+
         if (!wsSession.isOpen()) {
             // The session was closed during onOpen. No need to register it.
             return;
@@ -354,10 +358,10 @@ public class WsWebSocketContainer
             if (endpointSessionMap.size() == 0) {
                 BackgroundProcessManager.getInstance().register(this);
             }
-            Set<WsSession> wsSessions = endpointSessionMap.get(endpoint);
+            Set<WsSession> wsSessions = endpointSessionMap.get(endpointClazz);
             if (wsSessions == null) {
                 wsSessions = new HashSet<>();
-                endpointSessionMap.put(endpoint, wsSessions);
+                endpointSessionMap.put(endpointClazz, wsSessions);
             }
             wsSessions.add(wsSession);
         }
@@ -365,13 +369,17 @@ public class WsWebSocketContainer
     }
 
 
-    protected void unregisterSession(Class<?> endpoint, WsSession wsSession) {
+    protected void unregisterSession(Object endpointInstance,
+            WsSession wsSession) {
+
+        Class<?> endpointClazz = endpointInstance.getClass();
+
         synchronized (endPointSessionMapLock) {
-            Set<WsSession> wsSessions = endpointSessionMap.get(endpoint);
+            Set<WsSession> wsSessions = endpointSessionMap.get(endpointClazz);
             if (wsSessions != null) {
                 wsSessions.remove(wsSession);
                 if (wsSessions.size() == 0) {
-                    endpointSessionMap.remove(endpoint);
+                    endpointSessionMap.remove(endpointClazz);
                 }
             }
             if (endpointSessionMap.size() == 0) {

==================================================
WsServerContainer.java
index 09ac3692a6..e3dc3d530d 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -128,7 +128,7 @@ public class WsHttpUpgradeHandler implements HttpUpgradeHandler {
             sos.setWriteListener(
                     new WsWriteListener(this, wsRemoteEndpointServer));
             ep.onOpen(wsSession, endpointConfig);
-            webSocketContainer.registerSession(ep.getClass(), wsSession);
+            webSocketContainer.registerSession(ep, wsSession);
         } catch (DeploymentException e) {
             throw new IllegalArgumentException(e);
         } finally {

==================================================
