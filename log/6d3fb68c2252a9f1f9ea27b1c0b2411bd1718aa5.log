6d3fb68c2252a9f1f9ea27b1c0b2411bd1718aa5
==================================================
https://bz.apache.org/bugzilla/show_bug.cgi?id=60853
==================================================
Mark Thomas
==================================================
Tue Mar 21 12:52:04 2017 +0000
==================================================
AbstractHttp11Protocol.java
https://bz.apache.org/bugzilla/show_bug.cgi?id=60853
This is a partial fix. This restores read/write access to the deprecated attributes via JMX.
JMX access to the new objects is still TODO.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1787959 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLHostConfig.java
index d09a1cacd8..2144873496 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -568,203 +568,353 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
-    // TODO: All of these SSL setters can be removed once it is no longer
-    // necessary to support the old configuration attributes (Tomcat 10?).
+    // TODO: All of these SSL getters and setters can be removed once it is no
+    // longer necessary to support the old configuration attributes (Tomcat 10?)
 
+    public String getSslEnabledProtocols() {
+        registerDefaultSSLHostConfig();
+        return StringUtils.join(defaultSSLHostConfig.getEnabledProtocols());
+    }
     public void setSslEnabledProtocols(String enabledProtocols) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setProtocols(enabledProtocols);
     }
+    public String getSSLProtocol() {
+        registerDefaultSSLHostConfig();
+        return StringUtils.join(defaultSSLHostConfig.getEnabledProtocols());
+    }
     public void setSSLProtocol(String sslProtocol) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setProtocols(sslProtocol);
     }
 
 
+    public String getKeystoreFile() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeystoreFile();
+    }
     public void setKeystoreFile(String keystoreFile) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeystoreFile(keystoreFile);
     }
+    public String getSSLCertificateChainFile() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateChainFile();
+    }
     public void setSSLCertificateChainFile(String certificateChainFile) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateChainFile(certificateChainFile);
     }
+    public String getSSLCertificateFile() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateFile();
+    }
     public void setSSLCertificateFile(String certificateFile) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateFile(certificateFile);
     }
+    public String getSSLCertificateKeyFile() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeyFile();
+    }
     public void setSSLCertificateKeyFile(String certificateKeyFile) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeyFile(certificateKeyFile);
     }
 
 
+    public String getAlgorithm() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getKeyManagerAlgorithm();
+    }
     public void setAlgorithm(String keyManagerAlgorithm) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setKeyManagerAlgorithm(keyManagerAlgorithm);
     }
 
 
+    public String getClientAuth() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateVerification().toString();
+    }
     public void setClientAuth(String certificateVerification) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerification(certificateVerification);
     }
 
 
+    public String getSSLVerifyClient() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateVerification().toString();
+    }
     public void setSSLVerifyClient(String certificateVerification) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerification(certificateVerification);
     }
 
 
+    public int getTrustMaxCertLength(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateVerificationDepth();
+    }
     public void setTrustMaxCertLength(int certificateVerificationDepth){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerificationDepth(certificateVerificationDepth);
     }
+    public int getSSLVerifyDepth() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateVerificationDepth();
+    }
     public void setSSLVerifyDepth(int certificateVerificationDepth) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerificationDepth(certificateVerificationDepth);
     }
 
 
+    public boolean getUseServerCipherSuitesOrder() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getHonorCipherOrder();
+    }
     public void setUseServerCipherSuitesOrder(boolean honorCipherOrder) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setHonorCipherOrder(honorCipherOrder);
     }
+    public boolean getSSLHonorCipherOrder() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getHonorCipherOrder();
+    }
     public void setSSLHonorCipherOrder(boolean honorCipherOrder) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setHonorCipherOrder(honorCipherOrder);
     }
 
 
+    public String getCiphers() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCiphers();
+    }
     public void setCiphers(String ciphers) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCiphers(ciphers);
     }
+    public String getSSLCipherSuite() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCiphers();
+    }
     public void setSSLCipherSuite(String ciphers) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCiphers(ciphers);
     }
 
+
+    public String getKeystorePass() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeystorePassword();
+    }
     public void setKeystorePass(String certificateKeystorePassword) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeystorePassword(certificateKeystorePassword);
     }
 
+
+    public String getKeyPass() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeyPassword();
+    }
     public void setKeyPass(String certificateKeyPassword) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeyPassword(certificateKeyPassword);
     }
+    public String getSSLPassword() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeyPassword();
+    }
     public void setSSLPassword(String certificateKeyPassword) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeyPassword(certificateKeyPassword);
     }
 
 
+    public String getCrlFile(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateRevocationListFile();
+    }
     public void setCrlFile(String certificateRevocationListFile){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateRevocationListFile(certificateRevocationListFile);
     }
+    public String getSSLCARevocationFile() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateRevocationListFile();
+    }
     public void setSSLCARevocationFile(String certificateRevocationListFile) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateRevocationListFile(certificateRevocationListFile);
     }
+    public String getSSLCARevocationPath() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateRevocationListPath();
+    }
     public void setSSLCARevocationPath(String certificateRevocationListPath) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateRevocationListPath(certificateRevocationListPath);
     }
 
 
+    public String getKeystoreType() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeystoreType();
+    }
     public void setKeystoreType(String certificateKeystoreType) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeystoreType(certificateKeystoreType);
     }
 
 
+    public String getKeystoreProvider() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeystoreProvider();
+    }
     public void setKeystoreProvider(String certificateKeystoreProvider) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeystoreProvider(certificateKeystoreProvider);
     }
 
 
+    public String getKeyAlias() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCertificateKeyAlias();
+    }
     public void setKeyAlias(String certificateKeyAlias) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateKeyAlias(certificateKeyAlias);
     }
 
 
+    public String getTruststoreAlgorithm(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getTruststoreAlgorithm();
+    }
     public void setTruststoreAlgorithm(String truststoreAlgorithm){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setTruststoreAlgorithm(truststoreAlgorithm);
     }
 
 
+    public String getTruststoreFile(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getTruststoreFile();
+    }
     public void setTruststoreFile(String truststoreFile){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setTruststoreFile(truststoreFile);
     }
 
 
+    public String getTruststorePass(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getTruststorePassword();
+    }
     public void setTruststorePass(String truststorePassword){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setTruststorePassword(truststorePassword);
     }
 
 
+    public String getTruststoreType(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getTruststoreType();
+    }
     public void setTruststoreType(String truststoreType){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setTruststoreType(truststoreType);
     }
 
 
+    public String getTruststoreProvider(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getTruststoreProvider();
+    }
     public void setTruststoreProvider(String truststoreProvider){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setTruststoreProvider(truststoreProvider);
     }
 
 
+    public String getSslProtocol() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getSslProtocol();
+    }
     public void setSslProtocol(String sslProtocol) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setSslProtocol(sslProtocol);
     }
 
 
+    public int getSessionCacheSize(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getSessionCacheSize();
+    }
     public void setSessionCacheSize(int sessionCacheSize){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setSessionCacheSize(sessionCacheSize);
     }
 
 
+    public int getSessionTimeout(){
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getSessionTimeout();
+    }
     public void setSessionTimeout(int sessionTimeout){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setSessionTimeout(sessionTimeout);
     }
 
 
+    public String getSSLCACertificatePath() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCaCertificatePath();
+    }
     public void setSSLCACertificatePath(String caCertificatePath) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCaCertificatePath(caCertificatePath);
     }
 
 
+    public String getSSLCACertificateFile() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getCaCertificateFile();
+    }
     public void setSSLCACertificateFile(String caCertificateFile) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCaCertificateFile(caCertificateFile);
     }
 
 
+    public boolean getSSLDisableCompression() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getDisableCompression();
+    }
     public void setSSLDisableCompression(boolean disableCompression) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setDisableCompression(disableCompression);
     }
 
 
+    public boolean getSSLDisableSessionTickets() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getDisableSessionTickets();
+    }
     public void setSSLDisableSessionTickets(boolean disableSessionTickets) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setDisableSessionTickets(disableSessionTickets);
     }
 
 
+    public String getTrustManagerClassName() {
+        registerDefaultSSLHostConfig();
+        return defaultSSLHostConfig.getTrustManagerClassName();
+    }
     public void setTrustManagerClassName(String trustManagerClassName) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setTrustManagerClassName(trustManagerClassName);

==================================================
