d9d6ca9e92b4d038ba607bd12b7be174434f302e
==================================================
Better coverage for JSP attribute parsing
==================================================
Mark Emlyn
==================================================
Sun Jan 10 11:12:42 2010 +0000
==================================================
TestELEvaluation.java
Better coverage for JSP attribute parsing

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@897615 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestELInJsp.java
index 4246036439..e04f39da33 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -26,15 +26,54 @@ import javax.el.FunctionMapper;
 
 import org.apache.el.ExpressionFactoryImpl;
 import org.apache.el.lang.ELSupport;
+import org.apache.jasper.compiler.TestAttributeParser;
 import org.apache.jasper.el.ELContextImpl;
 
 import junit.framework.TestCase;
 
 /**
- * Tests for EL parsing and evaluation.
+ * Tests the EL engine directly. Similar tests may be found in
+ * {@link TestAttributeParser} and {@link TestELInJsp}.
  */
 public class TestELEvaluation extends TestCase {
 
+    /**
+     * Test use of spaces in ternary expressions. This was primarily an EL
+     * parser bug.
+     */
+    public void testBug42565() {
+        assertEquals("false", evaluateExpression("${false?true:false}"));
+        assertEquals("false", evaluateExpression("${false?true: false}"));
+        assertEquals("false", evaluateExpression("${false?true :false}"));
+        assertEquals("false", evaluateExpression("${false?true : false}"));
+        assertEquals("false", evaluateExpression("${false? true:false}"));
+        assertEquals("false", evaluateExpression("${false? true: false}"));
+        assertEquals("false", evaluateExpression("${false? true :false}"));
+        assertEquals("false", evaluateExpression("${false? true : false}"));
+        assertEquals("false", evaluateExpression("${false ?true:false}"));
+        assertEquals("false", evaluateExpression("${false ?true: false}"));
+        assertEquals("false", evaluateExpression("${false ?true :false}"));
+        assertEquals("false", evaluateExpression("${false ?true : false}"));
+        assertEquals("false", evaluateExpression("${false ? true:false}"));
+        assertEquals("false", evaluateExpression("${false ? true: false}"));
+        assertEquals("false", evaluateExpression("${false ? true :false}"));
+        assertEquals("false", evaluateExpression("${false ? true : false}"));
+    }
+
+
+    /**
+     * Test use nested ternary expressions. This was primarily an EL parser bug. 
+     */
+    public void testBug44994() {
+        assertEquals("none", evaluateExpression(
+                "${0 lt 0 ? 1 lt 0 ? 'many': 'one': 'none'}"));
+        assertEquals("one", evaluateExpression(
+                "${0 lt 1 ? 1 lt 1 ? 'many': 'one': 'none'}"));
+        assertEquals("many", evaluateExpression(
+                "${0 lt 2 ? 1 lt 2 ? 'many': 'one': 'none'}"));
+    }
+    
+    
     public void testParserBug45511() {
         // Test cases provided by OP
         assertEquals("true", evaluateExpression("${empty ('')}"));
@@ -43,11 +82,6 @@ public class TestELEvaluation extends TestCase {
         assertEquals("false", evaluateExpression("${(true)and(false)}"));
     }
 
-    public void testParserBug42565() {
-        // Test cases provided by OP
-        assertEquals("false", evaluateExpression("${false?true:false}"));
-    }
-
     public void testParserLiteralExpression() {
         // Inspired by work on bug 45451, comments from kkolinko on the dev
         // list and looking at the spec to find some edge cases

==================================================
TestAttributeParser.java
index 341de6f9ea..54f9e9902e 100644
--- a/test/org/apache/el/TestELInJsp.java
+++ b/test/org/apache/el/TestELInJsp.java
@@ -21,15 +21,19 @@ import java.io.File;
 
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.jasper.compiler.TestAttributeParser;
 import org.apache.tomcat.util.buf.ByteChunk;
 
+/**
+ * Tests EL with an without JSP attributes using a test web application. Similar
+ * tests may be found in {@link TestELEvaluation} and {@link TestAttributeParser}.
+ */
 public class TestELInJsp extends TomcatBaseTest {
     
     public void testBug42565() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
-            new File("test/webapp");
+        File appDir = new File("test/webapp");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
         
@@ -133,7 +137,6 @@ public class TestELInJsp extends TomcatBaseTest {
         
         res = getUrl("http://localhost:" + getPort() + "/test/bug45451b.jsp");
         result = res.toString();
-        System.out.println(result);
         // Warning: JSP attribute escaping != Java String escaping
         // Warning: Attributes are always unescaped before passing to the EL
         //          processor
@@ -143,9 +146,9 @@ public class TestELInJsp extends TomcatBaseTest {
         assertTrue(result.indexOf("03-\\\\${1+1}") > 0);
         assertTrue(result.indexOf("04-2") > 0);
         assertTrue(result.indexOf("05-${1+1}") > 0);
-        assertTrue(result.indexOf("06-\\2") > 0);      // TODO Fails (bug)
+        assertTrue(result.indexOf("06-\\2") > 0);      
         assertTrue(result.indexOf("07-\\${1+1}") > 0);
-        assertTrue(result.indexOf("08-\\\\2") > 0);    // TODO Fails (bug) 
+        assertTrue(result.indexOf("08-\\\\2") > 0); 
         
         res = getUrl("http://localhost:" + getPort() + "/test/bug45451c.jsp");
         result = res.toString();
@@ -268,8 +271,8 @@ public class TestELInJsp extends TomcatBaseTest {
         String result = res.toString();
         assertTrue(result.indexOf("00-\\\\\\\"${'hello world'}") > 0);
         assertTrue(result.indexOf("01-\\\\\\\"\\${'hello world'}") > 0);
-        assertTrue(result.indexOf("02-\\\"\\${'hello world'}") > 0); // TODO - bug
-        assertTrue(result.indexOf("03-\\\"\\hello world") > 0);      // TODO - bug
+        assertTrue(result.indexOf("02-\\\"${'hello world'}") > 0);
+        assertTrue(result.indexOf("03-\\\"\\hello world") > 0);
         assertTrue(result.indexOf("2az-04") > 0);
         assertTrue(result.indexOf("05-a2z") > 0);
         assertTrue(result.indexOf("06-az2") > 0);
@@ -280,5 +283,32 @@ public class TestELInJsp extends TomcatBaseTest {
         assertTrue(result.indexOf("11-\"}") > 0);
     }
 
+    public void testScriptingExpression() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/script-expr.jsp");
+        String result = res.toString();
+        System.out.println(result);
+        assertTrue(result.indexOf("00-hello world") > 0);
+        assertTrue(result.indexOf("01-hello \"world") > 0);
+        assertTrue(result.indexOf("02-hello \\\"world") > 0);
+        assertTrue(result.indexOf("03-hello ${world") > 0);
+        assertTrue(result.indexOf("04-hello \\${world") > 0);
+        assertTrue(result.indexOf("05-hello world") > 0);
+        assertTrue(result.indexOf("06-hello \"world") > 0);
+        assertTrue(result.indexOf("07-hello \\\"world") > 0);
+        assertTrue(result.indexOf("08-hello ${world") > 0);
+        assertTrue(result.indexOf("09-hello \\${world") > 0);
+        assertTrue(result.indexOf("10-hello <% world") > 0);
+        assertTrue(result.indexOf("11-hello %> world") > 0);
+    }
 
 }

==================================================
