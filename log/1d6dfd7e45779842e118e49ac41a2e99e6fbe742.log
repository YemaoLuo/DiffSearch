1d6dfd7e45779842e118e49ac41a2e99e6fbe742
==================================================
Implement alias resources. Key features:
==================================================
Mark Emlyn
==================================================
Fri Jun 12 11:38:29 2009 +0000
==================================================
Context.java
Implement alias resources. Key features:
- configured at the context level in the same way as the other resource related attributes
- maps paths to directories or WAR files (single files not supported)

Implementation notes:
- Correct results for getRealPath() required this to be pushed down to the BaseDirContext as the short-cuts previously used needed to take account of any aliases. This in turn meant an addition to the Context interface
- Thanks to Tim F. The configuration format is all his idea

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@784083 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 0727b7a030..625c7d5693 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1073,6 +1073,13 @@ public interface Context extends Container {
      */
     public void setTldNamespaceAware(boolean tldNamespaceAware);
 
+    /**
+     * Return the real path for a given virtual path, if possible; otherwise
+     * return <code>null</code>.
+     *
+     * @param path The path to the desired resource
+     */
+    public String getRealPath(String path);
 
 }
 

==================================================
StandardContext.java
index 7a3a07129f..42050099f9 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -371,17 +371,7 @@ public class ApplicationContext
      * @param path The path to the desired resource
      */
     public String getRealPath(String path) {
-
-        if (!context.isFilesystemBased())
-            return null;
-
-        if (path == null) {
-            return null;
-        }
-
-        File file = new File(basePath, path);
-        return (file.getAbsolutePath());
-
+        return context.getRealPath(path);
     }
 
 

==================================================
BaseDirContext.java
index e0c7a5a585..6b81ae979c 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -45,6 +45,10 @@
                 description="Object that creates and destroys servlets, filters, and listeners. Include dependency injection and postConstruct/preDestory handling"
                 type="org.apache.catalina.instanceManagement.InstanceManager" />
 
+    <attribute name="aliases"
+               description="List of resource aliases"
+               type="java.lang.String" />
+
     <attribute name="antiJARLocking"
                description="Take care to not lock jar files"
                type="boolean" />

==================================================
FileDirContext.java
index 788ff5f035..6258618982 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -18,7 +18,12 @@
 
 package org.apache.naming.resources;
 
+import java.io.File;
+import java.util.HashMap;
 import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
 
 import javax.naming.Binding;
 import javax.naming.Context;
@@ -119,9 +124,97 @@ public abstract class BaseDirContext implements DirContext {
     protected int cacheObjectMaxSize = 512; // 512 K
 
 
+    /**
+     * Aliases allow content to be included from other locations.
+     */
+    protected Map<String,BaseDirContext> aliases =
+        new HashMap<String,BaseDirContext>();
+
+
     // ------------------------------------------------------------- Properties
 
 
+    /**
+     * Add an alias.
+     */
+    public void addAlias(String path, BaseDirContext dirContext) {
+        if (!path.startsWith("/")) {
+            throw new IllegalArgumentException(
+                    sm.getString("resources.invalidAliasPath", path));
+        }
+        aliases.put(path, dirContext);
+    }
+
+    
+    /**
+     * Remove an alias.
+     */
+    public void removeAlias(String path) {
+        if (!path.startsWith("/")) {
+            throw new IllegalArgumentException(
+                    sm.getString("resources.invalidAliasPath", path));
+        }
+        aliases.remove(path);
+    }
+    
+    
+    /**
+     * Get the current alias configuration in String form. If no aliases are
+     * configured, an empty string will be returned.
+     */
+    public String getAliases() {
+        StringBuilder result = new StringBuilder();
+        Iterator<Entry<String,BaseDirContext>> iter =
+            aliases.entrySet().iterator();
+        boolean first = true;
+        while (iter.hasNext()) {
+            if (first) {
+                first = false;
+            } else {
+                result.append(',');
+            }
+            Entry<String,BaseDirContext> entry = iter.next();
+            result.append(entry.getKey());
+            result.append('=');
+            result.append(entry.getValue().getDocBase());
+        }
+        return result.toString();
+    }
+
+    
+    /**
+     * Set the current alias configuration from a String. The String should be
+     * of the form "/aliasPath1=docBase1,/aliasPath2=docBase2" where aliasPathN
+     * must include a leading '/' and docBaseN must be an absolute path to
+     * either a .war file or a directory. Any call to this method will replace
+     * the current set of aliases.
+     */
+    public void setAliases(String theAliases) {
+        // Overwrite whatever is currently set
+        aliases.clear();
+        
+        if (theAliases == null || theAliases.length() == 0)
+            return;
+        
+        String[] kvps = theAliases.split(",");
+        for (String kvp : kvps) {
+            String[] kv = kvp.split("=");
+            if (kv.length != 2 || kv[0].length() == 0 || kv[1].length() == 0)
+                throw new IllegalArgumentException(
+                        sm.getString("resources.invalidAliasMapping", kvp));
+            
+            BaseDirContext context;
+            if (kv[1].endsWith(".war") && !(new File(kv[1]).isDirectory())) {
+                context = new WARDirContext();
+            } else {
+                context = new FileDirContext();
+            }
+            context.setDocBase(kv[1]);
+            addAlias(kv[0], context);
+        }
+    }
+
+    
     /**
      * Return the document root for this component.
      */
@@ -235,6 +328,22 @@ public abstract class BaseDirContext implements DirContext {
         // No action taken by the default implementation
     }
 
+    
+    /**
+     * Return the real path for a given virtual path, if possible; otherwise
+     * return <code>null</code>.
+     *
+     * @param path The path to the desired resource
+     */
+    public String getRealPath(String name) {
+        if (!aliases.isEmpty()) {
+            AliasResult result = findAlias(name);
+            if (result.dirContext != null) {
+                return result.dirContext.doGetRealPath(result.aliasName);
+            }
+        }
+        return doGetRealPath(name);
+    }
 
     // -------------------------------------------------------- Context Methods
 
@@ -262,9 +371,15 @@ public abstract class BaseDirContext implements DirContext {
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
      */
-    public abstract Object lookup(String name)
-        throws NamingException;
-
+    public final Object lookup(String name) throws NamingException {
+        if (!aliases.isEmpty()) {
+            AliasResult result = findAlias(name);
+            if (result.dirContext != null) {
+                return result.dirContext.lookup(result.aliasName);
+            }
+        }
+        return doLookup(name);
+    }
 
     /**
      * Binds a name to an object. All intermediate contexts and the target 
@@ -779,9 +894,17 @@ public abstract class BaseDirContext implements DirContext {
      * indicates that none should be retrieved
      * @exception NamingException if a naming exception is encountered
      */
-    public abstract Attributes getAttributes(String name, String[] attrIds)
-        throws NamingException;
-
+    public final Attributes getAttributes(String name, String[] attrIds)
+        throws NamingException {
+        if (!aliases.isEmpty()) {
+            AliasResult result = findAlias(name);
+            if (result.dirContext != null) {
+                return result.dirContext.getAttributes(
+                        result.aliasName, attrIds);
+            }
+        }
+        return doGetAttributes(name, attrIds);
+    }
 
     /**
      * Modifies the attributes associated with a named object. The order of 
@@ -1229,6 +1352,37 @@ public abstract class BaseDirContext implements DirContext {
 
     // ------------------------------------------------------ Protected Methods
 
+    protected abstract Attributes doGetAttributes(String name, String[] attrIds)
+        throws NamingException;
+
+    protected abstract Object doLookup(String name) throws NamingException;
+
+    protected abstract String doGetRealPath(String name);
+
+    // -------------------------------------------------------- Private Methods
+    private AliasResult findAlias(String name) {
+        AliasResult result = new AliasResult();
+        
+        String searchName = name;
+        
+        result.dirContext = aliases.get(searchName);
+        while (result.dirContext == null) {
+            int slash = searchName.lastIndexOf('/');
+            if (slash < 0)
+                break;
+            searchName = searchName.substring(0, slash);
+            result.dirContext = aliases.get(searchName);
+        }
+        
+        if (result.dirContext != null)
+            result.aliasName = name.substring(searchName.length());
+        
+        return result;
+    }
 
+    private static class AliasResult {
+        BaseDirContext dirContext;
+        String aliasName;
+    }
 }
 

==================================================
VirtualDirContext.java
index 020da83f96..51aceeb373 100644
--- a/java/org/apache/naming/resources/LocalStrings.properties
+++ b/java/org/apache/naming/resources/LocalStrings.properties
@@ -28,6 +28,8 @@ resources.path=Context relative path {0} must start with ''/''
 resources.alreadyBound=Name {0} is already bound in this Context
 resources.bindFailed=Bind failed: {0}
 resources.unbindFailed=Unbind failed: {0}
+resources.invalidAliasPath=The alias path ''{0}'' must start with ''/''
+resources.invalidAliasMapping=The alias mapping ''{0}'' is not valid
 standardResources.alreadyStarted=Resources has already been started
 standardResources.directory=File base {0} is not a directory
 standardResources.exists=File base {0} does not exist

==================================================
WARDirContext.java
index dc21edf2da..6a21769ae3 100644
--- a/java/org/apache/naming/resources/VirtualDirContext.java
+++ b/java/org/apache/naming/resources/VirtualDirContext.java
@@ -160,7 +160,7 @@ public class VirtualDirContext extends FileDirContext {
     }
 
     @Override
-    public Object lookup(String name) throws NamingException {
+    protected Object doLookup(String name) throws NamingException {
 
         // handle "virtual" tlds
         if (name.startsWith("/WEB-INF/") && name.endsWith(".tld")) {

==================================================
