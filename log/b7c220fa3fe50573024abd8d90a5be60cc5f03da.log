b7c220fa3fe50573024abd8d90a5be60cc5f03da
==================================================
Remove a dependency on Java 6 that accidentally got introduced
==================================================
Filip Hanik
==================================================
Wed Jan 13 19:08:09 2010 +0000
==================================================
DataSourceFactory.java
Remove a dependency on Java 6 that accidentally got introduced


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898889 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DataSourceProxy.java
index fff8327259..fb36681bac 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -464,10 +464,10 @@ public class DataSourceFactory implements ObjectFactory {
     public static DataSource createDataSource(Properties properties,Context context) throws Exception {
         PoolConfiguration poolProperties = DataSourceFactory.parsePoolProperties(properties);
         if (poolProperties.getDataSourceJNDI()!=null && poolProperties.getDataSource()==null) {
-            javax.sql.CommonDataSource jndiDS = null;
+            Object jndiDS = null;
             try {
                 if (context!=null) {
-                    jndiDS = (javax.sql.CommonDataSource)context.lookup(poolProperties.getDataSourceJNDI());
+                    jndiDS = context.lookup(poolProperties.getDataSourceJNDI());
                 } else {
                     log.warn("dataSourceJNDI property is configued, but local JNDI context is null.");
                 }
@@ -477,7 +477,7 @@ public class DataSourceFactory implements ObjectFactory {
             if (jndiDS==null) {
                 try {
                     context = (Context) (new InitialContext());
-                    jndiDS = (javax.sql.CommonDataSource)context.lookup(poolProperties.getDataSourceJNDI());
+                    jndiDS = context.lookup(poolProperties.getDataSourceJNDI());
                 } catch (NamingException e) {
                     log.warn("The name \""+poolProperties.getDataSourceJNDI()+"\" can not be found in the InitialContext.");
                 }

==================================================
PoolConfiguration.java
index 69a3bcc73f..0f84cebf2c 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -23,7 +23,6 @@ import java.util.Iterator;
 import java.util.Properties;
 import java.util.concurrent.Future;
 
-import javax.sql.CommonDataSource;
 import javax.sql.XAConnection;
 
 import org.apache.juli.logging.Log;
@@ -1015,14 +1014,14 @@ public class DataSourceProxy implements PoolConfiguration {
     /** 
      * {@inheritDoc}
      */
-    public void setDataSource(javax.sql.CommonDataSource ds) {
+    public void setDataSource(Object ds) {
         getPoolProperties().setDataSource(ds);
     }
     
     /** 
      * {@inheritDoc}
      */
-    public CommonDataSource getDataSource() {
+    public Object getDataSource() {
         return getPoolProperties().getDataSource();
     }
     

==================================================
PoolProperties.java
index 3b3cf9effd..6c0458a804 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -18,8 +18,6 @@ package org.apache.tomcat.jdbc.pool;
 
 import java.util.Properties;
 
-import javax.sql.CommonDataSource;
-
 import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
 
 /**
@@ -730,14 +728,14 @@ public interface PoolConfiguration {
      * will be invoked.  
      * @param ds the {@link javax.sql.DataSource} to be used for creating connections to be pooled.
      */
-    public void setDataSource(CommonDataSource ds);
+    public void setDataSource(Object ds);
     
     /**
      * Returns a datasource, if one exists that is being used to create connections.
      * This method will return null if the pool is using a {@link java.sql.Driver}
      * @return the {@link javax.sql.DataSource} to be used for creating connections to be pooled or null if a Driver is used.
      */
-    public CommonDataSource getDataSource();
+    public Object getDataSource();
     
     /**
      * Configure the connection pool to use a DataSource according to {@link PoolConfiguration#setDataSource(CommonDataSource)}

==================================================
ConnectionPool.java
index 8e91070aea..e9a070e475 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -25,7 +25,6 @@ import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.sql.CommonDataSource;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -77,7 +76,7 @@ public class PoolProperties implements PoolConfiguration {
     protected boolean useLock = false;
     protected InterceptorDefinition[] interceptors = null;
     protected int suspectTimeout = 0;
-    protected javax.sql.CommonDataSource dataSource = null;
+    protected Object dataSource = null;
     protected String dataSourceJNDI = null;
     
     
@@ -878,14 +877,14 @@ public class PoolProperties implements PoolConfiguration {
     /** 
      * {@inheritDoc}
      */
-    public void setDataSource(javax.sql.CommonDataSource ds) {
+    public void setDataSource(Object ds) {
         this.dataSource = ds;
     }
     
     /** 
      * {@inheritDoc}
      */
-    public CommonDataSource getDataSource() {
+    public Object getDataSource() {
         return dataSource;
     }
     

==================================================
