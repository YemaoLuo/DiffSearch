7fe14fe18eb2ee4bd585c1e35d7da561284071ad
==================================================
Refactoring: HTTP/1.1 - HTTP/2 alignment
==================================================
Mark Thomas
==================================================
Thu Nov 30 10:20:27 2017 +0000
==================================================
Http2AsyncUpgradeHandler.java
Refactoring: HTTP/1.1 - HTTP/2 alignment

Change StreamOutputBuffer to implement HttpOutputBuffer

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816700 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index cfcaf6c322..9b26f8b200 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -329,7 +329,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
             sendfile.left -= bytesWritten;
             if (sendfile.left == 0) {
                 try {
-                    sendfile.stream.getOutputBuffer().close();
+                    sendfile.stream.getOutputBuffer().end();
                 } catch (IOException e) {
                     failed(e, sendfile);
                 }

==================================================
StreamProcessor.java
index 197c43d9a2..fa0cd2e930 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -31,9 +31,9 @@ import java.util.function.Supplier;
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.CloseNowException;
 import org.apache.coyote.InputBuffer;
-import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.Response;
+import org.apache.coyote.http.HttpOutputBuffer;
 import org.apache.coyote.http2.HpackDecoder.HeaderEmitter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -685,7 +685,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    class StreamOutputBuffer implements OutputBuffer {
+    class StreamOutputBuffer implements HttpOutputBuffer {
 
         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);
         private volatile long written = 0;
@@ -784,7 +784,8 @@ class Stream extends AbstractStream implements HeaderEmitter {
             return written;
         }
 
-        final void close() throws IOException {
+        @Override
+        public final void end() throws IOException {
             closed = true;
             flushData();
             writeTrailers();
@@ -797,6 +798,11 @@ class Stream extends AbstractStream implements HeaderEmitter {
         final boolean hasNoBody() {
             return ((written == 0) && closed);
         }
+
+        @Override
+        public void flush() throws IOException {
+            flush(true);
+        }
     }
 
 

==================================================
