9fb335047f9c115e72cd27b38a576f8aa36d0caf
==================================================
Fix some Eclipse warnings
==================================================
Mark Emlyn
==================================================
Sat Mar 6 09:42:33 2010 +0000
==================================================
LazyReplicatedMap.java
Fix some Eclipse warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@919725 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index f3a5fd92d6..393b66756e 100644
--- a/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
@@ -92,7 +92,7 @@ public class LazyReplicatedMap extends AbstractReplicatedMap {
          * @param initialCapacity int - the size of this map, see HashMap
          */
         public LazyReplicatedMap(MapOwner owner, Channel channel, long timeout, String mapContextName, int initialCapacity, ClassLoader[] cls) {
-            super(owner, channel,timeout,mapContextName,initialCapacity, LazyReplicatedMap.DEFAULT_LOAD_FACTOR, Channel.SEND_OPTIONS_DEFAULT, cls);
+            super(owner, channel,timeout,mapContextName,initialCapacity, AbstractReplicatedMap.DEFAULT_LOAD_FACTOR, Channel.SEND_OPTIONS_DEFAULT, cls);
         }
 
         /**
@@ -102,7 +102,7 @@ public class LazyReplicatedMap extends AbstractReplicatedMap {
          * @param mapContextName String - unique name for this map, to allow multiple maps per channel
          */
         public LazyReplicatedMap(MapOwner owner, Channel channel, long timeout, String mapContextName, ClassLoader[] cls) {
-            super(owner, channel,timeout,mapContextName, LazyReplicatedMap.DEFAULT_INITIAL_CAPACITY,LazyReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT, cls);
+            super(owner, channel,timeout,mapContextName, AbstractReplicatedMap.DEFAULT_INITIAL_CAPACITY,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT, cls);
         }
 
 

==================================================
AjpProcessor.java
index c51d4c4e5d..7159bcd960 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -42,6 +42,7 @@ import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.http.MimeHeaders;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -572,7 +573,7 @@ public class AjpAprProcessor implements ActionHook {
                     log.error(sm.getString("ajpprocessor.certs.fail"), e);
                     return;
                 }
-                request.setAttribute(AprEndpoint.CERTIFICATE_KEY, jsseCerts);
+                request.setAttribute(AbstractEndpoint.CERTIFICATE_KEY, jsseCerts);
             }
 
         } else if (actionCode == ActionCode.ACTION_REQ_HOST_ATTRIBUTE) {
@@ -786,19 +787,19 @@ public class AjpAprProcessor implements ActionHook {
             case Constants.SC_A_SSL_CIPHER :
                 request.scheme().setString("https");
                 requestHeaderMessage.getBytes(tmpMB);
-                request.setAttribute(AprEndpoint.CIPHER_SUITE_KEY,
+                request.setAttribute(AbstractEndpoint.CIPHER_SUITE_KEY,
                                      tmpMB.toString());
                 break;
 
             case Constants.SC_A_SSL_SESSION :
                 request.scheme().setString("https");
                 requestHeaderMessage.getBytes(tmpMB);
-                request.setAttribute(AprEndpoint.SESSION_ID_KEY,
+                request.setAttribute(AbstractEndpoint.SESSION_ID_KEY,
                                      tmpMB.toString());
                 break;
 
             case Constants.SC_A_SSL_KEY_SIZE :
-                request.setAttribute(AprEndpoint.KEY_SIZE_KEY,
+                request.setAttribute(AbstractEndpoint.KEY_SIZE_KEY,
                                      new Integer(requestHeaderMessage.getInt()));
                 break;
 

==================================================
Http11AprProcessor.java
index 7d63fdcf22..48fb25c7f5 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -42,6 +42,7 @@ import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.http.MimeHeaders;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.JIoEndpoint;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -570,7 +571,7 @@ public class AjpProcessor implements ActionHook {
                     log.error(sm.getString("ajpprocessor.certs.fail"), e);
                     return;
                 }
-                request.setAttribute(JIoEndpoint.CERTIFICATE_KEY, jsseCerts);
+                request.setAttribute(AbstractEndpoint.CERTIFICATE_KEY, jsseCerts);
             }
 
         } else if (actionCode == ActionCode.ACTION_REQ_HOST_ATTRIBUTE) {
@@ -784,19 +785,19 @@ public class AjpProcessor implements ActionHook {
             case Constants.SC_A_SSL_CIPHER :
                 request.scheme().setString("https");
                 requestHeaderMessage.getBytes(tmpMB);
-                request.setAttribute(JIoEndpoint.CIPHER_SUITE_KEY,
+                request.setAttribute(AbstractEndpoint.CIPHER_SUITE_KEY,
                                      tmpMB.toString());
                 break;
 
             case Constants.SC_A_SSL_SESSION :
                 request.scheme().setString("https");
                 requestHeaderMessage.getBytes(tmpMB);
-                request.setAttribute(JIoEndpoint.SESSION_ID_KEY,
+                request.setAttribute(AbstractEndpoint.SESSION_ID_KEY,
                                      tmpMB.toString());
                 break;
 
             case Constants.SC_A_SSL_KEY_SIZE :
-                request.setAttribute(JIoEndpoint.KEY_SIZE_KEY,
+                request.setAttribute(AbstractEndpoint.KEY_SIZE_KEY,
                                      new Integer(requestHeaderMessage.getInt()));
                 break;
 

==================================================
