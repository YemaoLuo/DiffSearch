afbf343d1946b2385ff0b8a55c72f39ac6fe3cb4
==================================================
Pull up useSendfile
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:50:54 2014 +0000
==================================================
AbstractEndpoint.java
Pull up useSendfile

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641284 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index c7f29c36b8..7c52347565 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -198,6 +198,20 @@ public abstract class AbstractEndpoint<S> {
 
     // ----------------------------------------------------------------- Properties
 
+    /**
+     * Has the user requested that send file be used where possible?
+     */
+    private boolean useSendfile = true;
+    public boolean getUseSendfile() {
+        return useSendfile;
+    }
+    public void setUseSendfile(boolean useSendfile) {
+        this.useSendfile = useSendfile;
+    }
+
+
+
+
     /**
      * Time to wait for the internal executor (if used) to terminate when the
      * endpoint is stopped in milliseconds. Defaults to 5000 (5 seconds).
@@ -821,10 +835,6 @@ public abstract class AbstractEndpoint<S> {
     }
 
     protected abstract Log getLog();
-    // Flags to indicate optional feature support
-    // Some of these are always hard-coded, some are hard-coded to false (i.e.
-    // the endpoint does not support them) and some are configurable.
-    public abstract boolean getUseSendfile();
 
     protected LimitLatch initializeConnectionLatch() {
         if (maxConnections==-1) return null;

==================================================
Nio2Endpoint.java
index 37e3250c61..0e6cc703b8 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -144,10 +144,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
     public void setPollTime(int pollTime) { if (pollTime > 0) { this.pollTime = pollTime; } }
 
 
-    /**
-     * Use sendfile for sending static files.
-     */
-    protected boolean useSendfile = false;
     /*
      * When the endpoint is created and configured, the APR library will not
      * have been initialised. This flag is used to determine if the default
@@ -156,12 +152,17 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
      * by configuration, that configuration will always take priority.
      */
     private boolean useSendFileSet = false;
+    @Override
     public void setUseSendfile(boolean useSendfile) {
         useSendFileSet = true;
-        this.useSendfile = useSendfile;
+        super.setUseSendfile(useSendfile);
+    }
+    /*
+     * For internal use to avoid setting the useSendFileSet flag
+     */
+    private void setUseSendfileInternal(boolean useSendfile) {
+        super.setUseSendfile(useSendfile);
     }
-    @Override
-    public boolean getUseSendfile() { return useSendfile; }
 
 
     /**
@@ -457,9 +458,9 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         // Enable Sendfile by default if it has not been configured but usage on
         // systems which don't support it cause major problems
         if (!useSendFileSet) {
-            useSendfile = Library.APR_HAS_SENDFILE;
-        } else if (useSendfile && !Library.APR_HAS_SENDFILE) {
-            useSendfile = false;
+            setUseSendfileInternal(Library.APR_HAS_SENDFILE);
+        } else if (getUseSendfile() && !Library.APR_HAS_SENDFILE) {
+            setUseSendfileInternal(false);
         }
 
         // Initialize thread count default for acceptor
@@ -596,8 +597,8 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             }
             SSLContext.setVerify(sslContext, value, SSLVerifyDepth);
             // For now, sendfile is not supported with SSL
-            if (useSendfile) {
-                useSendfile = false;
+            if (getUseSendfile()) {
+                setUseSendfileInternal(false);
                 if (useSendFileSet) {
                     log.warn(sm.getString("endpoint.apr.noSendfileWithSSL"));
                 }
@@ -635,7 +636,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             pollerThread.start();
 
             // Start sendfile thread
-            if (useSendfile) {
+            if (getUseSendfile()) {
                 sendfile = new Sendfile();
                 sendfile.init();
                 Thread sendfileThread =
@@ -701,7 +702,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             }
             poller = null;
             connections.clear();
-            if (useSendfile) {
+            if (getUseSendfile()) {
                 try {
                     sendfile.destroy();
                 } catch (Exception e) {

==================================================
NioEndpoint.java
index 01fc64791b..35c8193eda 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -73,11 +73,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
      */
     private AsynchronousServerSocketChannel serverSock = null;
 
-    /**
-     * use send file
-     */
-    private boolean useSendfile = true;
-
     /**
      * The size of the OOM parachute.
      */
@@ -160,10 +155,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         this.socketProperties = socketProperties;
     }
 
-    public void setUseSendfile(boolean useSendfile) {
-        this.useSendfile = useSendfile;
-    }
-
     /**
      * Is deferAccept supported?
      */
@@ -462,11 +453,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         return socketProperties.getRxBufSize();
     }
 
-    @Override
-    public boolean getUseSendfile() {
-        return useSendfile;
-    }
-
     public int getOomParachute() {
         return oomParachute;
     }

==================================================
