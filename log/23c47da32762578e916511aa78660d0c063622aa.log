23c47da32762578e916511aa78660d0c063622aa
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46933
==================================================
Mark Emlyn
==================================================
Wed Apr 8 11:08:17 2009 +0000
==================================================
StringManager.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46933
Simplify StringManager using Java 5 features.
Based on a patch by Jens Kapitza.
Include a test case to ensure simplification is OK for null input

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@763183 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestStringManager.java
index 41136f1eab..ce3ea356a1 100644
--- a/java/org/apache/tomcat/util/res/StringManager.java
+++ b/java/org/apache/tomcat/util/res/StringManager.java
@@ -131,107 +131,17 @@ public class StringManager {
      * @param args
      */
 
-    public String getString(String key, Object[] args) {
-        String iString = null;
+    public String getString(final String key, final Object... args) {
         String value = getString(key);
-
-        // this check for the runtime exception is some pre 1.1.6
-        // VM's don't do an automatic toString() on the passed in
-        // objects and barf out
-
-        try {
-            // ensure the arguments are not null so pre 1.2 VM's don't barf
-            if(args==null){
-                args = new Object[1];
-            }
-            
-            Object[] nonNullArgs = args;
-            for (int i=0; i<args.length; i++) {
-                if (args[i] == null) {
-                    if (nonNullArgs==args){
-                        nonNullArgs=args.clone();
-                    }
-                    nonNullArgs[i] = "null";
-                }
-            }
-            if( value==null ) value=key;
-	    MessageFormat mf = new MessageFormat(value);
-            mf.setLocale(locale);
-            iString = mf.format(nonNullArgs, new StringBuffer(), null).toString();
-        } catch (IllegalArgumentException iae) {
-            StringBuffer buf = new StringBuffer();
-            buf.append(value);
-            for (int i = 0; i < args.length; i++) {
-                buf.append(" arg[" + i + "]=" + args[i]);
-            }
-            iString = buf.toString();
+        if (value == null) {
+            value = key;
         }
-        return iString;
-    }
-
-    /**
-     * Get a string from the underlying resource bundle and format it
-     * with the given object argument. This argument can of course be
-     * a String object.
-     *
-     * @param key
-     * @param arg
-     */
 
-    public String getString(String key, Object arg) {
-	Object[] args = new Object[] {arg};
-	return getString(key, args);
+        MessageFormat mf = new MessageFormat(value);
+        mf.setLocale(locale);
+        return mf.format(args, new StringBuffer(), null).toString();
     }
 
-    /**
-     * Get a string from the underlying resource bundle and format it
-     * with the given object arguments. These arguments can of course
-     * be String objects.
-     *
-     * @param key
-     * @param arg1
-     * @param arg2
-     */
-
-    public String getString(String key, Object arg1, Object arg2) {
-	Object[] args = new Object[] {arg1, arg2};
-	return getString(key, args);
-    }
-    
-    /**
-     * Get a string from the underlying resource bundle and format it
-     * with the given object arguments. These arguments can of course
-     * be String objects.
-     *
-     * @param key
-     * @param arg1
-     * @param arg2
-     * @param arg3
-     */
-
-    public String getString(String key, Object arg1, Object arg2,
-			    Object arg3) {
-	Object[] args = new Object[] {arg1, arg2, arg3};
-	return getString(key, args);
-    }
-
-    /**
-     * Get a string from the underlying resource bundle and format it
-     * with the given object arguments. These arguments can of course
-     * be String objects.
-     *
-     * @param key
-     * @param arg1
-     * @param arg2
-     * @param arg3
-     * @param arg4
-     */
-
-    public String getString(String key, Object arg1, Object arg2,
-			    Object arg3, Object arg4) {
-	Object[] args = new Object[] {arg1, arg2, arg3, arg4};
-	return getString(key, args);
-    }
     // --------------------------------------------------------------
     // STATIC SUPPORT METHODS
     // --------------------------------------------------------------

==================================================
