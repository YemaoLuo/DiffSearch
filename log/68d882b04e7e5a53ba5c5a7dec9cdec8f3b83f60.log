68d882b04e7e5a53ba5c5a7dec9cdec8f3b83f60
==================================================
Revert 1713285
==================================================
Mark Thomas
==================================================
Tue Nov 10 11:10:44 2015 +0000
==================================================
SessionIdGenerator.java
Revert 1713285
A better solution is available

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713612 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerBase.java
index 9bb83d4ba5..b980d76e82 100644
--- a/java/org/apache/catalina/SessionIdGenerator.java
+++ b/java/org/apache/catalina/SessionIdGenerator.java
@@ -55,18 +55,4 @@ public interface SessionIdGenerator {
      * @param route   node identifier to include in generated id
      */
     public String generateSessionId(String route);
-
-    /**
-     * Determine, based on implementation specific rules which may be as strict
-     * or as relaxed as the implementor wishes, if the provided session ID is
-     * valid. This may be used when generating sessions with user provided
-     * session IDs to ensure that they are suitable or if a new ID needs to be
-     * generated.
-     *
-     * @param sessionId The proposed session ID to test
-     *
-     * @return {@code true} if the proposed session ID is acceptable, otherwise
-     *         {@code false}
-     */
-    public boolean validateSessionId(String sessionId);
 }

==================================================
SessionIdGeneratorBase.java
index 7a6a5522f6..c869448f6b 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -627,7 +627,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         session.setCreationTime(System.currentTimeMillis());
         session.setMaxInactiveInterval(this.maxInactiveInterval);
         String id = sessionId;
-        if (id == null || !sessionIdGenerator.validateSessionId(id)) {
+        if (id == null) {
             id = generateSessionId();
         }
         session.setId(id);

==================================================
StandardSessionIdGenerator.java
index e4b814c538..f0e1282829 100644
--- a/java/org/apache/catalina/util/SessionIdGeneratorBase.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -273,18 +273,6 @@ public abstract class SessionIdGeneratorBase extends LifecycleBase
     }
 
 
-    /**
-     * {@inheritDoc}
-     * <p>
-     * The base implementation performs no validation and treats all proposed
-     * session IDs as valid.
-     */
-    @Override
-    public boolean validateSessionId(String sessionId) {
-        return true;
-    }
-
-
     @Override
     protected void initInternal() throws LifecycleException {
         // NO-OP

==================================================
TestStandardSessionIdGenerator.java
index 6d39ca0a4d..437a28a4c0 100644
--- a/java/org/apache/catalina/util/StandardSessionIdGenerator.java
+++ b/java/org/apache/catalina/util/StandardSessionIdGenerator.java
@@ -16,8 +16,6 @@
  */
 package org.apache.catalina.util;
 
-import org.apache.tomcat.util.buf.HexUtils;
-
 public class StandardSessionIdGenerator extends SessionIdGeneratorBase {
 
     @Override
@@ -62,40 +60,4 @@ public class StandardSessionIdGenerator extends SessionIdGeneratorBase {
 
         return buffer.toString();
     }
-
-    /**
-     * {@inheritDoc}
-     * <p>
-     * This implementation performs the following checks:
-     * <ul>
-     * <li>The characters up to the first period (if any) are valid hex
-     *     digits</li>
-     * <li>There are at least enough hex digits to represent the specified
-     *     session ID length</li>
-     * <li>Anything after the first period is not validated since that is
-     *     assumed to be a JVM route and we can't easily determine valid
-     *     values</li>
-     * </ul>
-     */
-    @Override
-    public boolean validateSessionId(String sessionId) {
-        if (sessionId == null) {
-            return false;
-        }
-        int len = sessionId.indexOf('.');
-        if (len == -1) {
-            len = sessionId.length();
-        }
-        // Session ID length is in bytes and 2 hex digits are required for each
-        // byte
-        if (len < getSessionIdLength() * 2) {
-            return false;
-        }
-        for (int i = 0; i < len; i++) {
-            if (HexUtils.getDec(sessionId.charAt(i)) == -1) {
-                return false;
-            }
-        }
-        return true;
-    }
 }

==================================================
