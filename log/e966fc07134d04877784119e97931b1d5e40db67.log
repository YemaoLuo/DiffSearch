e966fc07134d04877784119e97931b1d5e40db67
==================================================
Further refactoring to support resource JARs in packed WARs
==================================================
Mark Emlyn
==================================================
Mon Sep 16 13:13:56 2013 +0000
==================================================
AbstractArchiveResource.java
Further refactoring to support resource JARs in packed WARs

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1523632 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JarResource.java
new file mode 100644
index 0000000000..efffa99afc
--- /dev/null
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -0,0 +1,160 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+import org.apache.catalina.WebResourceRoot;
+
+public abstract class AbstractArchiveResource extends AbstractResource {
+
+    protected final JarEntry resource;
+    protected String name;
+
+    protected AbstractArchiveResource(WebResourceRoot root, String webAppPath,
+            JarEntry jarEntry) {
+        super(root, webAppPath);
+        this.resource = jarEntry;
+    }
+
+    @Override
+    public long getLastModified() {
+        return resource.getTime();
+    }
+
+    @Override
+    public boolean exists() {
+        return true;
+    }
+
+    @Override
+    public boolean isVirtual() {
+        return false;
+    }
+
+    @Override
+    public boolean isDirectory() {
+        return resource.isDirectory();
+    }
+
+    @Override
+    public boolean isFile() {
+        return !resource.isDirectory();
+    }
+
+    @Override
+    public boolean delete() {
+        return false;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public long getContentLength() {
+        return resource.getSize();
+    }
+
+    @Override
+    public String getCanonicalPath() {
+        return null;
+    }
+
+    @Override
+    public boolean canRead() {
+        return true;
+    }
+
+    @Override
+    public long getCreation() {
+        return resource.getTime();
+    }
+
+
+    protected static class JarInputStreamWrapper extends InputStream {
+
+        private final JarFile jarFile;
+        private final InputStream is;
+
+
+        public JarInputStreamWrapper(JarFile jarFile, InputStream is) {
+            this.jarFile = jarFile;
+            this.is = is;
+        }
+
+
+        @Override
+        public int read() throws IOException {
+            return is.read();
+        }
+
+
+        @Override
+        public int read(byte[] b) throws IOException {
+            return is.read(b);
+        }
+
+
+        @Override
+        public int read(byte[] b, int off, int len) throws IOException {
+            return is.read(b, off, len);
+        }
+
+
+        @Override
+        public long skip(long n) throws IOException {
+            return is.skip(n);
+        }
+
+
+        @Override
+        public int available() throws IOException {
+            return is.available();
+        }
+
+
+        @Override
+        public void close() throws IOException {
+            // Closing the JarFile releases the file lock on the JAR and also
+            // closes all input streams created from the JarFile.
+            jarFile.close();
+        }
+
+
+        @Override
+        public synchronized void mark(int readlimit) {
+            is.mark(readlimit);
+        }
+
+
+        @Override
+        public synchronized void reset() throws IOException {
+            is.reset();
+        }
+
+
+        @Override
+        public boolean markSupported() {
+            return is.markSupported();
+        }
+    }
+}

==================================================
JarResourceSet.java
index 29a856d1b4..770e3111f1 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -31,21 +31,18 @@ import org.apache.juli.logging.LogFactory;
  * Represents a single resource (file or directory) that is located within a
  * JAR.
  */
-public class JarResource extends AbstractResource {
+public class JarResource extends AbstractArchiveResource {
 
     private static final Log log = LogFactory.getLog(JarResource.class);
 
     private final String base;
     private final String baseUrl;
-    private final JarEntry resource;
-    private final String name;
 
     public JarResource(WebResourceRoot root, String base, String baseUrl,
             JarEntry jarEntry, String internalPath, String webAppPath) {
-        super(root, webAppPath);
+        super(root, webAppPath, jarEntry);
         this.base = base;
         this.baseUrl = "jar:" + baseUrl;
-        this.resource = jarEntry;
 
         String resourceName = resource.getName();
         if (resourceName.charAt(resourceName.length() - 1) == '/') {
@@ -64,56 +61,6 @@ public class JarResource extends AbstractResource {
         }
     }
 
-    @Override
-    public long getLastModified() {
-        return resource.getTime();
-    }
-
-    @Override
-    public boolean exists() {
-        return true;
-    }
-
-    @Override
-    public boolean isVirtual() {
-        return false;
-    }
-
-    @Override
-    public boolean isDirectory() {
-        return resource.isDirectory();
-    }
-
-    @Override
-    public boolean isFile() {
-        return !resource.isDirectory();
-    }
-
-    @Override
-    public boolean delete() {
-        return false;
-    }
-
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    @Override
-    public long getContentLength() {
-        return resource.getSize();
-    }
-
-    @Override
-    public String getCanonicalPath() {
-        return null;
-    }
-
-    @Override
-    public boolean canRead() {
-        return true;
-    }
-
     @Override
     public InputStream getInputStream() {
         try {
@@ -129,11 +76,6 @@ public class JarResource extends AbstractResource {
         }
     }
 
-    @Override
-    public long getCreation() {
-        return resource.getTime();
-    }
-
     @Override
     public URL getURL() {
         try {
@@ -151,72 +93,4 @@ public class JarResource extends AbstractResource {
     protected Log getLog() {
         return log;
     }
-
-    private static class JarInputStreamWrapper extends InputStream {
-
-        private final JarFile jarFile;
-        private final InputStream is;
-
-
-        public JarInputStreamWrapper(JarFile jarFile, InputStream is) {
-            this.jarFile = jarFile;
-            this.is = is;
-        }
-
-
-        @Override
-        public int read() throws IOException {
-            return is.read();
-        }
-
-
-        @Override
-        public int read(byte[] b) throws IOException {
-            return is.read(b);
-        }
-
-
-        @Override
-        public int read(byte[] b, int off, int len) throws IOException {
-            return is.read(b, off, len);
-        }
-
-
-        @Override
-        public long skip(long n) throws IOException {
-            return is.skip(n);
-        }
-
-
-        @Override
-        public int available() throws IOException {
-            return is.available();
-        }
-
-
-        @Override
-        public void close() throws IOException {
-            // Closing the JarFile releases the file lock on the JAR and also
-            // closes all input streams created from the JarFile.
-            jarFile.close();
-        }
-
-
-        @Override
-        public synchronized void mark(int readlimit) {
-            is.mark(readlimit);
-        }
-
-
-        @Override
-        public synchronized void reset() throws IOException {
-            is.reset();
-        }
-
-
-        @Override
-        public boolean markSupported() {
-            return is.markSupported();
-        }
-    }
 }

==================================================
JarWarResource.java
index 0038e5ae1d..92cc1c2114 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -20,7 +20,6 @@ import java.io.File;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
@@ -33,7 +32,6 @@ import org.apache.catalina.WebResourceRoot;
  */
 public class JarResourceSet extends AbstractArchiveResourceSet {
 
-    protected HashMap<String,JarEntry> jarFileEntries = new HashMap<>();
     protected String baseUrl;
 
     /**

==================================================
JarWarResourceSet.java
new file mode 100644
index 0000000000..f37384858f
--- /dev/null
+++ b/java/org/apache/catalina/webresources/JarWarResource.java
@@ -0,0 +1,123 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.jar.JarInputStream;
+
+import org.apache.catalina.WebResourceRoot;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
+/**
+ * Represents a single resource (file or directory) that is located within a
+ * JAR that in turn is located in a WAR file.
+ */
+public class JarWarResource extends AbstractArchiveResource {
+
+    private static final Log log = LogFactory.getLog(JarResource.class);
+
+    private final String base;
+    private final String baseUrl;
+    private final String archivePath;
+
+    public JarWarResource(WebResourceRoot root, String base, String baseUrl,
+            JarEntry jarEntry, String archivePath, String internalPath,
+            String webAppPath) {
+        super(root, webAppPath, jarEntry);
+        this.base = base;
+        this.archivePath = archivePath;
+        this.baseUrl = "jar:" + baseUrl;
+
+        String resourceName = resource.getName();
+        if (resourceName.charAt(resourceName.length() - 1) == '/') {
+            resourceName = resourceName.substring(0, resourceName.length() - 1);
+        }
+        if (internalPath.length() > 0 && resourceName.equals(
+                internalPath.subSequence(1, internalPath.length()))) {
+            name = "";
+        } else {
+            int index = resourceName.lastIndexOf('/');
+            if (index == -1) {
+                name = resourceName;
+            } else {
+                name = resourceName.substring(index + 1);
+            }
+        }
+    }
+
+    @Override
+    public InputStream getInputStream() {
+        try {
+            JarFile warFile = new JarFile(base);
+            JarEntry jarFileInWar = warFile.getJarEntry(archivePath);
+            InputStream isInWar = warFile.getInputStream(jarFileInWar);
+
+            JarInputStream jarIs = new JarInputStream(isInWar);
+            JarEntry entry = jarIs.getNextJarEntry();
+            while (entry != null &&
+                    !entry.getName().equals(resource.getName())) {
+                entry = jarIs.getNextJarEntry();
+            }
+
+            if (entry == null) {
+                try {
+                    jarIs.close();
+                } catch (IOException ioe) {
+                    // Ignore
+                }
+                try {
+                    warFile.close();
+                } catch (IOException ioe) {
+                    // Ignore
+                }
+                return null;
+            }
+
+            return new JarInputStreamWrapper(warFile, jarIs);
+        } catch (IOException e) {
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("fileResource.getInputStreamFail",
+                        resource.getName(), baseUrl), e);
+            }
+            return null;
+        }
+    }
+
+    @Override
+    public URL getURL() {
+        try {
+            return new URL(baseUrl + "!/" + resource.getName());
+        } catch (MalformedURLException e) {
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("fileResource.getUrlFail",
+                        resource.getName(), baseUrl), e);
+            }
+            return null;
+        }
+    }
+
+    @Override
+    protected Log getLog() {
+        return log;
+    }
+}

==================================================
