fb29fd7b702e866f9f58d172f530f848af9906e9
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Mon Jul 15 19:26:07 2013 +0000
==================================================
Stream.java
EL 3.0 collections operations.
Implement sorted.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503433 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StreamELResolverImpl.java
index 82b6cc3895..89b409acc4 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -17,6 +17,8 @@
 package org.apache.el.stream;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -29,10 +31,10 @@ import org.apache.el.lang.ELSupport;
 
 public class Stream {
 
-    private final Iterator<?> iterator;
+    private final Iterator<Object> iterator;
 
 
-    public Stream(Iterator<?> iterator) {
+    public Stream(Iterator<Object > iterator) {
         this.iterator = iterator;
     }
 
@@ -117,6 +119,67 @@ public class Stream {
     }
 
 
+    public Stream sorted() {
+        Iterator<Object> downStream = new OpIterator() {
+
+            private Iterator<Object> sorted = null;
+
+            @Override
+            protected void findNext() {
+                if (sorted == null) {
+                    sort();
+                }
+                if (sorted.hasNext()) {
+                    next = sorted.next();
+                    foundNext = true;
+                }
+            }
+
+            @SuppressWarnings({ "rawtypes", "unchecked" })
+            private final void sort() {
+                List list = new ArrayList<>();
+                while (iterator.hasNext()) {
+                    list.add(iterator.next());
+                }
+                Collections.sort(list);
+                sorted = list.iterator();
+            }
+        };
+        return new Stream(downStream);
+    }
+
+
+    public Stream sorted(final LambdaExpression le) {
+        Iterator<Object> downStream = new OpIterator() {
+
+            private Iterator<Object> sorted = null;
+
+            @Override
+            protected void findNext() {
+                if (sorted == null) {
+                    sort(le);
+                }
+                if (sorted.hasNext()) {
+                    next = sorted.next();
+                    foundNext = true;
+                }
+            }
+
+            @SuppressWarnings({ "rawtypes", "unchecked" })
+            private final void sort(LambdaExpression le) {
+                List list = new ArrayList<>();
+                Comparator<Object> c = new LambdaExpressionComparator(le);
+                while (iterator.hasNext()) {
+                    list.add(iterator.next());
+                }
+                Collections.sort(list, c);
+                sorted = list.iterator();
+            }
+        };
+        return new Stream(downStream);
+    }
+
+
     public Iterator<?> iterator() {
         return iterator;
     }
@@ -131,6 +194,23 @@ public class Stream {
     }
 
 
+    private static class LambdaExpressionComparator
+            implements Comparator<Object>{
+
+        private final LambdaExpression le;
+
+        public LambdaExpressionComparator(LambdaExpression le) {
+            this.le = le;
+        }
+
+        @Override
+        public int compare(Object o1, Object o2) {
+            return ELSupport.coerceToNumber(
+                    le.invoke(o1, o2), Integer.class).intValue();
+        }
+    }
+
+
     private abstract static class OpIterator implements Iterator<Object> {
         protected boolean foundNext = false;
         protected Object next;

==================================================
TestCollectionOperations.java
index 28f2ce3bce..d76dd7e10f 100644
--- a/java/org/apache/el/stream/StreamELResolverImpl.java
+++ b/java/org/apache/el/stream/StreamELResolverImpl.java
@@ -68,7 +68,9 @@ public class StreamELResolverImpl extends ELResolver {
                 return new Stream(new ArrayIterator(base));
             } else if (base instanceof Collection) {
                 context.setPropertyResolved(true);
-                return new Stream(((Collection<?>) base).iterator());
+                @SuppressWarnings("unchecked")
+                Collection<Object> collection = (Collection<Object>) base;
+                return new Stream(collection.iterator());
             }
         }
 

==================================================
