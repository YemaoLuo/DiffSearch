17d73d263d9bf852a8105987c4762cf432f3661a
==================================================
Add JSR-356 (WebSocket) API.
==================================================
Mark Emlyn
==================================================
Fri Oct 12 11:47:53 2012 +0000
==================================================
ClientContainer.java
Add JSR-356 (WebSocket) API.
This is the Early Draft Review - version 6
I have tweaked a few things (mainly generics) to reduce the number of reported errors.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397522 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClientEndpointConfiguration.java
new file mode 100644
index 0000000000..d13e360013
--- /dev/null
+++ b/java/javax/net/websocket/ClientContainer.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.util.Set;
+
+import javax.net.websocket.extensions.Extension;
+
+public interface ClientContainer {
+
+    void connectToServer(Endpoint endpoint, ClientEndpointConfiguration olc);
+
+    Set<Session<?>> getActiveSessions();
+
+    long getMaxSessionIdleTimeout();
+
+    void setMaxSessionIdleTimeout(long timeout);
+
+    long getMaxBinaryMessageBufferSize();
+
+    void setMaxBinaryMessageBufferSize(long max);
+
+    long getMaxTextMessageBufferSize();
+
+    void setMaxTextMessageBufferSize(long max);
+
+    Set<Extension> getInstalledExtensions();
+}

==================================================
CloseReason.java
new file mode 100644
index 0000000000..bcdbd9d718
--- /dev/null
+++ b/java/javax/net/websocket/ClientEndpointConfiguration.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.util.List;
+
+import javax.net.websocket.extensions.Extension;
+
+public interface ClientEndpointConfiguration extends EndpointConfiguration {
+
+    List<String> getPreferredSubprotocols();
+
+    List<Extension> getExtensions();
+}

==================================================
ContainerProvider.java
new file mode 100644
index 0000000000..b3b1c71162
--- /dev/null
+++ b/java/javax/net/websocket/CloseReason.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public class CloseReason {
+
+    @SuppressWarnings("unused")
+    public CloseReason(CloseReason.CloseCode closeCode, String reasonPhrase) {
+        // FIXME - These need accessors
+    }
+
+    public interface CloseCode {
+        int getCode();
+    }
+
+    public enum CloseCodes implements CloseReason.CloseCode {
+
+        NORMAL_CLOSURE(1000),
+        GOING_AWAY(1001),
+        PROTOCOL_ERROR(1002),
+        CANNOT_ACCEPT(1003),
+        RESERVED(1004),
+        NO_STATUS_CODE(1005),
+        CLOSED_ABNORMALLY(1006),
+        NOT_CONSISTENT(1007),
+        VIOLATED_POLICY(1008),
+        TOO_BIG(1009),
+        NO_EXTENSION(1010),
+        UNEXPECTED_CONDITION(1011),
+        TLS_HANDSHAKE_FAILURE(1015);
+
+        private int code;
+
+        CloseCodes(int code) {
+            this.code = code;
+        }
+
+        @Override
+        public int getCode() {
+            return code;
+        }
+    }
+}

==================================================
DecodeException.java
new file mode 100644
index 0000000000..ee6c889a9c
--- /dev/null
+++ b/java/javax/net/websocket/ContainerProvider.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public class ContainerProvider {
+
+    public static ServerContainer getServerContainer() {
+        // TODO
+        return null;
+    }
+
+    public static ClientContainer getClientContainer() {
+        // TODO
+        return null;
+    }
+}

==================================================
Decoder.java
new file mode 100644
index 0000000000..006d33d623
--- /dev/null
+++ b/java/javax/net/websocket/DecodeException.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.nio.ByteBuffer;
+
+public class DecodeException extends Exception {
+
+    private static final long serialVersionUID = 1L;
+
+    private ByteBuffer bb;
+    private String encodedString;
+
+    public DecodeException(ByteBuffer bb, String message, Throwable cause) {
+        super(message, cause);
+        this.bb = bb;
+    }
+
+    public DecodeException(String encodedString, String message,
+            Throwable cause) {
+        super(message, cause);
+        this.encodedString = encodedString;
+    }
+
+    public DecodeException(ByteBuffer bb, String message) {
+        super(message);
+        this.bb = bb;
+    }
+
+    public DecodeException(String encodedString, String message) {
+        super(message);
+        this.encodedString = encodedString;
+    }
+
+    public ByteBuffer getBytes() {
+        return bb;
+    }
+
+    public String getText() {
+        return encodedString;
+    }
+}

==================================================
DefaultClientConfiguration.java
new file mode 100644
index 0000000000..22a6da4b7c
--- /dev/null
+++ b/java/javax/net/websocket/Decoder.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+import java.nio.ByteBuffer;
+
+public interface Decoder {
+
+    interface Binary<T> extends Decoder {
+
+        T decode(ByteBuffer bytes) throws DecodeException;
+
+        boolean willDecode(ByteBuffer bytes);
+    }
+
+    interface BinaryStream<T> extends Decoder {
+
+        T decode(InputStream is) throws DecodeException, IOException;
+    }
+
+    interface Text<T> extends Decoder {
+
+        T decode(String s) throws DecodeException;
+
+        boolean willDecode(String s);
+    }
+
+    interface TextStream<T> extends Decoder {
+
+        T decode(Reader reader) throws DecodeException, IOException;
+    }
+}

==================================================
DefaultServerConfiguration.java
new file mode 100644
index 0000000000..8580e178a1
--- /dev/null
+++ b/java/javax/net/websocket/DefaultClientConfiguration.java
@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.net.websocket.extensions.Extension;
+
+public class DefaultClientConfiguration implements ClientEndpointConfiguration {
+    private URI uri;
+    private List<String> preferredSubprotocols = new ArrayList<>();
+    private List<Extension> extensions = new ArrayList<>();
+    private List<Encoder> encoders = new ArrayList<>();
+    private List<Decoder> decoders = new ArrayList<>();
+
+    public DefaultClientConfiguration(URI uri) {
+        this.uri = uri;
+    }
+
+    public URI getURI() {
+        return uri;
+    }
+
+    @Override
+    public List<String> getPreferredSubprotocols() {
+        return preferredSubprotocols;
+    }
+
+    public DefaultClientConfiguration setPreferredSubprotocols(
+            List<String> preferredSubprotocols) {
+        this.preferredSubprotocols = preferredSubprotocols;
+        return this;
+    }
+
+    @Override
+    public List<Extension> getExtensions() {
+        return extensions;
+    }
+
+    public ClientEndpointConfiguration setExtensions(
+            List<Extension> extensions) {
+        this.extensions = extensions;
+        return this;
+    }
+
+    @Override
+    public List<Encoder> getEncoders() {
+        return encoders;
+    }
+
+    public ClientEndpointConfiguration setEncoders(List<Encoder> encoders) {
+        this.encoders = encoders;
+        return this;
+    }
+
+    @Override
+    public List<Decoder> getDecoders() {
+        return decoders;
+    }
+
+    public ClientEndpointConfiguration setDecoders(List<Decoder> decoders) {
+        this.decoders = decoders;
+        return this;
+    }
+}

==================================================
EncodeException.java
new file mode 100644
index 0000000000..73bf1948ae
--- /dev/null
+++ b/java/javax/net/websocket/DefaultServerConfiguration.java
@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.net.websocket.extensions.Extension;
+
+public class DefaultServerConfiguration implements ServerEndpointConfiguration {
+    private URI uri;
+    private List<String> subprotocols = new ArrayList<>();
+    private List<Extension> extensions = new ArrayList<>();
+    private List<Encoder> encoders = new ArrayList<>();
+    private List<Decoder> decoders = new ArrayList<>();
+
+    protected DefaultServerConfiguration() {
+    }
+
+    public DefaultServerConfiguration(URI uri) {
+        this.uri = uri;
+    }
+
+    public DefaultServerConfiguration setEncoders(List<Encoder> encoders) {
+        this.encoders = encoders;
+        return this;
+    }
+
+    public DefaultServerConfiguration setDecoders(List<Decoder> decoders) {
+        this.decoders = decoders;
+        return this;
+    }
+
+    public DefaultServerConfiguration setSubprotocols(
+            List<String> subprotocols) {
+        this.subprotocols = subprotocols;
+        return this;
+    }
+
+    public DefaultServerConfiguration setExtensions(
+            List<Extension> extensions) {
+        this.extensions = extensions;
+        return this;
+    }
+
+
+    @Override
+    public List<Encoder> getEncoders() {
+        return this.encoders;
+    }
+
+
+    @Override
+    public List<Decoder> getDecoders() {
+        return this.decoders;
+    }
+
+    @Override
+    public String getNegotiatedSubprotocol(List<String> requestedSubprotocols) {
+        // TODO
+        return null;
+    }
+
+
+    @Override
+    public List<Extension> getNegotiatedExtensions(
+            List<Extension> requestedExtensions) {
+        // TODO
+        return null;
+    }
+
+    @Override
+    public boolean checkOrigin(String originHeaderValue) {
+        // TODO
+        return false;
+    }
+
+    @Override
+    public boolean matchesURI(URI uri) {
+        return this.uri.equals(uri);
+    }
+
+    @Override
+    public void modifyHandshake(HandshakeRequest request,
+            HandshakeResponse response) {
+        // TODO
+    }
+}

==================================================
Encoder.java
new file mode 100644
index 0000000000..a5e7440512
--- /dev/null
+++ b/java/javax/net/websocket/EncodeException.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public class EncodeException extends Exception {
+
+    private static final long serialVersionUID = 1L;
+
+    private Object object;
+
+    public EncodeException(String message, Object object) {
+        super(message);
+        this.object = object;
+    }
+
+    public EncodeException(String message, Object object, Throwable cause) {
+        super(message, cause);
+        this.object = object;
+    }
+
+    public Object getObject() {
+        return this.object;
+    }
+}

==================================================
Endpoint.java
new file mode 100644
index 0000000000..a0aa4df0e2
--- /dev/null
+++ b/java/javax/net/websocket/Encoder.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.Writer;
+import java.nio.ByteBuffer;
+
+public interface Encoder {
+
+    interface Text<T> extends Encoder {
+
+        String encode(T object) throws EncodeException;
+    }
+
+    interface TextStream<T> extends Encoder {
+
+        void encode(T object, Writer writer)
+                throws EncodeException, IOException;
+    }
+
+    interface Binary<T> extends Encoder {
+
+        ByteBuffer encode(T object) throws EncodeException;
+    }
+
+    interface BinaryStream<T> extends Encoder {
+
+        void encode(T object, OutputStream os)
+                throws EncodeException, IOException;
+    }
+}

==================================================
EndpointConfiguration.java
new file mode 100644
index 0000000000..f511a0fa57
--- /dev/null
+++ b/java/javax/net/websocket/Endpoint.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public abstract class Endpoint {
+
+    /**
+     * Event that is triggered when a new session starts.
+     *
+     * @param session   The new session.
+     */
+    public abstract void onOpen(Session<?> session);
+
+    /**
+     * Event that is triggered when a session has closed.
+     *
+     * @param session       The session that has closed
+     * @param closeReason   Why the session was closed
+     */
+    public void onClose(Session<?> session, CloseReason closeReason) {
+        // NO-OP by default
+    }
+
+    /**
+     * Event that is triggered when a protocol error occurs.
+     *
+     * @param throwable The exception
+     * @param session   The session that experienced the error
+     */
+    public void onError(Throwable throwable, Session<?> session) {
+        // NO-OP by default
+    }
+}

==================================================
HandshakeRequest.java
new file mode 100644
index 0000000000..bd70562d19
--- /dev/null
+++ b/java/javax/net/websocket/EndpointConfiguration.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.util.List;
+
+public interface EndpointConfiguration {
+
+    List<Encoder> getEncoders();
+
+    List<Decoder> getDecoders();
+}

==================================================
HandshakeResponse.java
new file mode 100644
index 0000000000..42eea29503
--- /dev/null
+++ b/java/javax/net/websocket/HandshakeRequest.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.net.URI;
+import java.security.Principal;
+import java.util.List;
+import java.util.Map;
+
+public interface HandshakeRequest {
+
+    Map<String,List<String>> getHeaders();
+
+    Principal getUserPrincipal();
+
+    URI getRequestURI();
+
+    boolean isUserInRole(String role);
+
+    Object getSession();
+
+    Map<String, String[]> getParameterMap();
+
+    String getQueryString();
+}

==================================================
MessageHandler.java
new file mode 100644
index 0000000000..ff72fa7ad5
--- /dev/null
+++ b/java/javax/net/websocket/HandshakeResponse.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.util.List;
+import java.util.Map;
+
+public interface HandshakeResponse {
+
+    Map<String,List<String>> getHeaders();
+}

==================================================
RemoteEndpoint.java
new file mode 100644
index 0000000000..d6dedb5935
--- /dev/null
+++ b/java/javax/net/websocket/MessageHandler.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.io.InputStream;
+import java.io.Reader;
+import java.nio.ByteBuffer;
+
+public interface MessageHandler {
+
+    interface Text extends MessageHandler {
+
+        void onMessage(String text);
+    }
+
+
+    interface Binary extends MessageHandler {
+
+        void onMessage(ByteBuffer data);
+    }
+
+
+    interface AsyncBinary extends MessageHandler {
+
+         void onMessagePart(ByteBuffer part, boolean last);
+    }
+
+
+    interface AsyncText extends MessageHandler {
+
+        void onMessagePart(String part, boolean last);
+    }
+
+
+    interface DecodedObject<T> extends MessageHandler {
+
+        void onMessage(T customObject);
+    }
+
+    interface BinaryStream extends MessageHandler {
+
+        void onMessage(InputStream is);
+    }
+
+
+    interface CharacterStream extends MessageHandler {
+
+        void onMessage(Reader r);
+    }
+
+
+    interface Pong extends MessageHandler {
+
+        void onPong(ByteBuffer applicationData);
+    }
+}

==================================================
SendHandler.java
new file mode 100644
index 0000000000..393a58b7bf
--- /dev/null
+++ b/java/javax/net/websocket/RemoteEndpoint.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.Writer;
+import java.nio.ByteBuffer;
+import java.util.concurrent.Future;
+
+
+public interface RemoteEndpoint<T> {
+
+    void sendString(String text) throws IOException;
+
+    void sendBytes(ByteBuffer data) throws IOException;
+
+    void sendPartialString(String fragment, boolean isLast) throws IOException;
+
+    void sendPartialBytes(ByteBuffer partialByte, boolean isLast) throws IOException; // or Iterable<byte[]>
+
+    OutputStream getSendStream() throws IOException;
+
+    Writer getSendWriter() throws IOException;
+
+    void sendObject(T o) throws IOException, EncodeException;
+
+    Future<SendResult> sendString(String text, SendHandler completion);
+
+    Future<SendResult> sendBytes(ByteBuffer data, SendHandler completion);
+
+    Future<SendResult> sendObject(T o, SendHandler handler);
+
+    void sendPing(ByteBuffer applicationData);
+
+    void sendPong(ByteBuffer applicationData);
+}
+

==================================================
SendResult.java
new file mode 100644
index 0000000000..64712c9efb
--- /dev/null
+++ b/java/javax/net/websocket/SendHandler.java
@@ -0,0 +1,22 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public interface SendHandler {
+
+    void setResult(SendResult result);
+}

==================================================
ServerContainer.java
new file mode 100644
index 0000000000..1b1c004a9d
--- /dev/null
+++ b/java/javax/net/websocket/SendResult.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public class SendResult {
+    private Throwable exception;
+    private boolean ok = true;
+
+    public SendResult(Throwable exception) {
+        this.exception = exception;
+        this.ok = false;
+    }
+
+    public SendResult() {
+        // NO-OP
+    }
+
+    public Throwable getException() {
+        return exception;
+    }
+
+    public boolean isOK() {
+        return ok;
+    }
+}

==================================================
ServerEndpointConfiguration.java
new file mode 100644
index 0000000000..0d0d3a5918
--- /dev/null
+++ b/java/javax/net/websocket/ServerContainer.java
@@ -0,0 +1,22 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+public interface ServerContainer extends ClientContainer {
+
+    void publishServer(Endpoint endpoint, ServerEndpointConfiguration ilc);
+}

==================================================
Session.java
new file mode 100644
index 0000000000..e0420734f3
--- /dev/null
+++ b/java/javax/net/websocket/ServerEndpointConfiguration.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.net.URI;
+import java.util.List;
+
+import javax.net.websocket.extensions.Extension;
+
+public interface ServerEndpointConfiguration extends EndpointConfiguration {
+
+    String getNegotiatedSubprotocol(List<String> requestedSubprotocols);
+
+    List<Extension> getNegotiatedExtensions(List<Extension> requestedExtensions);
+
+    boolean checkOrigin(String originHeaderValue);
+
+    boolean matchesURI(URI uri);
+
+    void modifyHandshake(HandshakeRequest request, HandshakeResponse response);
+}

==================================================
WebSocketClose.java
new file mode 100644
index 0000000000..76e96288eb
--- /dev/null
+++ b/java/javax/net/websocket/Session.java
@@ -0,0 +1,72 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.net.websocket.extensions.Extension;
+
+public interface Session<T> {
+
+    ClientContainer getContainer();
+
+    void setEncoders(List<Encoder> encoders);
+
+    void addMessageHandler(MessageHandler listener);
+
+    Set<MessageHandler> getMessageHandlers();
+
+    void removeMessageHandler(MessageHandler listener);
+
+    String getProtocolVersion();
+
+    String getNegotiatedSubprotocol();
+
+    List<Extension> getNegotiatedExtensions();
+
+    boolean isSecure();
+
+    long getInactiveTime();
+
+    boolean isActive();
+
+    long getTimeout();
+
+    void setTimeout(long seconds);
+
+    void setMaximumMessageSize(long length);
+
+    long getMaximumMessageSize();
+
+    RemoteEndpoint<?> getRemote();
+
+    RemoteEndpoint<T> getRemoteL(Class<T> c);
+
+    void close() throws IOException;
+
+    void close(CloseReason closeStatus) throws IOException;
+
+    URI getRequestURI();
+
+    Map<String, String[]> getParameterMap();
+
+    String getQueryString();
+}

==================================================
WebSocketEndpoint.java
new file mode 100644
index 0000000000..20d46f24d3
--- /dev/null
+++ b/java/javax/net/websocket/annotations/WebSocketClose.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface WebSocketClose {
+}

==================================================
WebSocketError.java
new file mode 100644
index 0000000000..5a8ca939a7
--- /dev/null
+++ b/java/javax/net/websocket/annotations/WebSocketEndpoint.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface WebSocketEndpoint {
+
+    public String value();
+
+    public String[] subprotocols() default {};
+
+    public Class<?>[] decoders() default {};
+
+    public Class<?>[] encoders() default {};
+}

==================================================
WebSocketMessage.java
new file mode 100644
index 0000000000..75ec4e224a
--- /dev/null
+++ b/java/javax/net/websocket/annotations/WebSocketError.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface WebSocketError {
+}

==================================================
WebSocketOpen.java
new file mode 100644
index 0000000000..601e7d1817
--- /dev/null
+++ b/java/javax/net/websocket/annotations/WebSocketMessage.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface WebSocketMessage {
+    public long maxMessageSize() default -1;
+}

==================================================
WebSocketPathParam.java
new file mode 100644
index 0000000000..4b80096782
--- /dev/null
+++ b/java/javax/net/websocket/annotations/WebSocketOpen.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface WebSocketOpen {
+}

==================================================
Extension.java
new file mode 100644
index 0000000000..670d2cca4d
--- /dev/null
+++ b/java/javax/net/websocket/annotations/WebSocketPathParam.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface WebSocketPathParam {
+    public String value();
+}

==================================================
Frame.java
new file mode 100644
index 0000000000..f37c8ebd05
--- /dev/null
+++ b/java/javax/net/websocket/extensions/Extension.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.extensions;
+
+import java.util.Map;
+
+public interface Extension {
+
+    String getName();
+
+    Map<String, String> getParameters();
+
+    FrameHandler createIncomingFrameHandler(FrameHandler downstream);
+
+    FrameHandler createOutgoingFrameHandler(FrameHandler upstream);
+}

==================================================
FrameBuilder.java
new file mode 100644
index 0000000000..d8dee9a61a
--- /dev/null
+++ b/java/javax/net/websocket/extensions/Frame.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.extensions;
+
+import javax.net.websocket.CloseReason;
+
+public interface Frame {
+
+    interface Data extends Frame {
+
+        byte[] getExtensionData();
+
+        interface Text extends Frame.Data {
+
+            String getText();
+
+            interface Continuation extends Frame.Data.Text {
+
+                boolean isLast();
+            }
+        }
+
+        interface Binary extends Frame.Data {
+
+            byte[] getData();
+
+            interface Continuation extends Frame.Data.Binary {
+
+                boolean isLast();
+            }
+        }
+    }
+
+    interface Control extends Frame {
+
+        interface Ping extends Frame.Control  {
+
+            byte[] getApplicationData();
+        }
+
+        interface Pong extends Frame.Control {
+
+            byte[] getApplicationData();
+        }
+
+        interface Close extends Frame.Control {
+
+            String getReasonPhrase();
+
+            CloseReason.CloseCode getCloseCode();
+        }
+    }
+}

==================================================
FrameHandler.java
new file mode 100644
index 0000000000..efcdccaffc
--- /dev/null
+++ b/java/javax/net/websocket/extensions/FrameBuilder.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.net.websocket.extensions;
+
+import java.nio.ByteBuffer;
+
+public class FrameBuilder {
+
+    public static FrameBuilder getBuilder() {
+        // TODO
+        return null;
+    }
+
+    public Frame.Data.Text createTextFrame(String s) {
+        // TODO
+        return null;
+    }
+
+    public Frame.Data.Text.Continuation createTextContinuationFrame(
+            String s, boolean isLast) {
+        // TODO
+        return null;
+    }
+
+    public Frame.Data.Binary createBinaryFrame(ByteBuffer bb) {
+        // TODO
+        return null;
+    }
+
+    public Frame.Data.Binary.Continuation createBinaryContinuationFrame(
+            ByteBuffer bb, boolean isLast) {
+        // TODO
+        return null;
+    }
+}

==================================================
