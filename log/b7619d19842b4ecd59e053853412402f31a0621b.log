b7619d19842b4ecd59e053853412402f31a0621b
==================================================
Clean-up l12n messages
==================================================
Mark Emlyn
==================================================
Wed Aug 15 19:12:38 2012 +0000
==================================================
AbstractProtocol.java
Clean-up l12n messages

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1373578 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
new file mode 100644
index 0000000000..477d9705f1
--- /dev/null
+++ b/java/org/apache/coyote/LocalStrings_es.properties
@@ -0,0 +1,15 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+abstractConnectionHandler.error = Error leyendo requerimiento, ignorado

==================================================
AjpNioProcessor.java
index ad6a4ae413..036088de7f 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -319,7 +319,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
             if (nRead > 0) {
                 inputBuffer.limit(inputBuffer.limit() + nRead);
             } else {
-                throw new IOException(sm.getString("ajpprotocol.failedread"));
+                throw new IOException(sm.getString("ajpprocessor.failedread"));
             }
         }
 
@@ -355,7 +355,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
                 if ((-nRead) == Status.ETIMEDOUT || (-nRead) == Status.TIMEUP) {
                     return false;
                 } else {
-                    throw new IOException(sm.getString("ajpprotocol.failedread"));
+                    throw new IOException(sm.getString("ajpprocessor.failedread"));
                 }
             }
         }

==================================================
AjpProcessor.java
index 396c5db240..9b287d5981 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -316,7 +316,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
             } else if (res == 0 && !block) {
                 break;
             } else {
-                throw new IOException(sm.getString("ajpprotocol.failedread"));
+                throw new IOException(sm.getString("ajpprocessor.failedread"));
             }
             block = true;
         }

==================================================
