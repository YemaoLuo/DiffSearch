855137c63bce55c7e70d21c30fddf2a9d165d067
==================================================
More updates to the async error handling triggered by kkolinko's review
==================================================
Mark Emlyn
==================================================
Tue Nov 13 23:44:15 2012 +0000
==================================================
CoyoteAdapter.java
More updates to the async error handling triggered by kkolinko's review
- simplify check to see if listeners changed async state during onTimeout
- add option to control if onError fires during error handling (it doesn't if called from the timeout code since that has its own event)
- add check to see if listeners changed state during onError
- add check to see if state changed during "error dispatch"
- remove AsyncState.ERROR as a valid start state for asyncPostProcess()
- aligned the unit tests (one change) with the new behaviour

Not tested with the TCK.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1409030 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncContextImpl.java
index b8ae07e4f9..e3989dcf07 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -300,7 +300,7 @@ public class CoyoteAdapter implements Adapter {
             if (status==SocketStatus.TIMEOUT) {
                 success = true;
                 if (!asyncConImpl.timeout()) {
-                    asyncConImpl.setErrorState(null);
+                    asyncConImpl.setErrorState(null, false);
                 }
             } else if (status==SocketStatus.ASYNC_READ_ERROR) {
                 success = true;
@@ -308,7 +308,7 @@ public class CoyoteAdapter implements Adapter {
                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);
                 asyncConImpl.notifyReadError(t);
                 if (t != null) {
-                    asyncConImpl.setErrorState(t);
+                    asyncConImpl.setErrorState(t, true);
                 }
             } else if (status==SocketStatus.ASYNC_WRITE_ERROR) {
                 success = true;
@@ -316,7 +316,7 @@ public class CoyoteAdapter implements Adapter {
                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);
                 asyncConImpl.notifyWriteError(t);
                 if (t != null) {
-                    asyncConImpl.setErrorState(t);
+                    asyncConImpl.setErrorState(t, true);
                 }
             }
 
@@ -338,7 +338,7 @@ public class CoyoteAdapter implements Adapter {
                 Throwable t = (Throwable) request.getAttribute(
                         RequestDispatcher.ERROR_EXCEPTION);
                 if (t != null) {
-                    asyncConImpl.setErrorState(t);
+                    asyncConImpl.setErrorState(t, true);
                 }
             }
 

==================================================
ActionCode.java
index 54a0c02ef0..818e1353cf 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -171,7 +171,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         }
     }
 
-    public boolean timeout() throws IOException {
+    public boolean timeout() {
         AtomicBoolean result = new AtomicBoolean();
         request.getCoyoteRequest().action(ActionCode.ASYNC_TIMEOUT, result);
 
@@ -181,22 +181,19 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             ClassLoader newCL = request.getContext().getLoader().getClassLoader();
             try {
                 Thread.currentThread().setContextClassLoader(newCL);
-                boolean listenerInvoked = false;
                 List<AsyncListenerWrapper> listenersCopy = new ArrayList<>();
                 listenersCopy.addAll(listeners);
                 for (AsyncListenerWrapper listener : listenersCopy) {
-                    listener.fireOnTimeout(event);
-                    listenerInvoked = true;
+                    try {
+                        listener.fireOnTimeout(event);
+                    } catch (IOException ioe) {
+                        log.warn("onTimeout() failed for listener of type [" +
+                                listener.getClass().getName() + "]", ioe);
+                    }
                 }
-                if (listenerInvoked) {
-                    request.getCoyoteRequest().action(
-                            ActionCode.ASYNC_IS_TIMINGOUT, result);
-                    return !result.get();
-                } else {
-                    // No listeners, trigger error handling
-                    return false;
-                }
-
+                request.getCoyoteRequest().action(
+                        ActionCode.ASYNC_IS_TIMINGOUT, result);
+                return !result.get();
             } finally {
                 Thread.currentThread().setContextClassLoader(oldCL);
             }
@@ -420,37 +417,50 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
     }
 
 
-    public void setErrorState(Throwable t) {
+    public void setErrorState(Throwable t, boolean fireOnError) {
         if (t!=null) request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);
         request.getCoyoteRequest().action(ActionCode.ASYNC_ERROR, null);
-        AsyncEvent errorEvent = new AsyncEvent(event.getAsyncContext(),
-                event.getSuppliedRequest(), event.getSuppliedResponse(), t);
-        List<AsyncListenerWrapper> listenersCopy = new ArrayList<>();
-        listenersCopy.addAll(listeners);
-        for (AsyncListenerWrapper listener : listenersCopy) {
-            try {
-                listener.fireOnError(errorEvent);
-            } catch (IOException ioe) {
-                log.warn("onError() failed for listener of type [" +
-                        listener.getClass().getName() + "]", ioe);
+
+        if (fireOnError) {
+            AsyncEvent errorEvent = new AsyncEvent(event.getAsyncContext(),
+                    event.getSuppliedRequest(), event.getSuppliedResponse(), t);
+            List<AsyncListenerWrapper> listenersCopy = new ArrayList<>();
+            listenersCopy.addAll(listeners);
+            for (AsyncListenerWrapper listener : listenersCopy) {
+                try {
+                    listener.fireOnError(errorEvent);
+                } catch (IOException ioe) {
+                    log.warn("onError() failed for listener of type [" +
+                            listener.getClass().getName() + "]", ioe);
+                }
             }
         }
 
-        // SRV.2.3.3.3 (search for "error dispatch")
-        if (servletResponse instanceof HttpServletResponse) {
-            ((HttpServletResponse) servletResponse).setStatus(
-                    HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
-        }
 
-        Host host = (Host) context.getParent();
-        Valve stdHostValve = host.getPipeline().getBasic();
-        if (stdHostValve instanceof StandardHostValve) {
-            ((StandardHostValve) stdHostValve).throwable(request,
-                    request.getResponse(), t);
-        }
+        AtomicBoolean result = new AtomicBoolean();
+        request.getCoyoteRequest().action(ActionCode.ASYNC_IS_ERROR, result);
+        if (result.get()) {
+            // No listener called dispatch() or complete(). This is an error.
+            // SRV.2.3.3.3 (search for "error dispatch")
+            if (servletResponse instanceof HttpServletResponse) {
+                ((HttpServletResponse) servletResponse).setStatus(
+                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+            }
 
-        if (isStarted() && !request.isAsyncDispatching()) {
-            complete();
+            Host host = (Host) context.getParent();
+            Valve stdHostValve = host.getPipeline().getBasic();
+            if (stdHostValve instanceof StandardHostValve) {
+                ((StandardHostValve) stdHostValve).throwable(request,
+                        request.getResponse(), t);
+            }
+
+            request.getCoyoteRequest().action(
+                    ActionCode.ASYNC_IS_ERROR, result);
+            if (result.get()) {
+                // Still in the error state. The error page did not call
+                // complete() or dispatch(). Complete the async processing.
+                complete();
+            }
         }
     }
 

==================================================
AsyncStateMachine.java
index 4d5ce54170..58e94552d4 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -202,6 +202,11 @@ public enum ActionCode {
      */
     ASYNC_IS_TIMINGOUT,
 
+    /**
+    * Callback to determine if async is in error
+    */
+    ASYNC_IS_ERROR,
+
     /**
      * Callback to trigger the HTTP upgrade process.
      */

==================================================
AbstractAjpProcessor.java
index 1bfb7941b6..6c1a7386a5 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -52,41 +52,45 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * |----------------->--------------|
  * |                               \|/
- * |   |----------<---------------ERROR-----------------------<----------------------------------|
- * |   |      complete()         /|\ |                                                           |
- * |   |                          |  |postProcess()                                              |
- * |   |                   error()|  |                                                           |
- * |   |                          |  |  |--|timeout()                                            |
- * |   |           postProcess()  | \|/ | \|/            auto                                    |
- * |   |         |--------------->DISPATCHED<-----------------------COMPLETING<-----|            |
- * |   |         |               /|\  |                               | /|\         |            |
- * |   |         |    |--->-------|   |                               |--|          |            |
- * |   |         ^    |               |startAsync()                 timeout()       |            |
- * |   |         |    |               |                                             |            |
- * |  \|/        |    |  complete()  \|/        postProcess()                       |            |
- * | MUST_COMPLETE-<- | ----<------STARTING-->--------------------|                 ^            |
- * |  /|\    /|\      |               |                           |      complete() |            |
- * |   |      |       |               |                           |     /-----------|            |
- * |   |      |       ^               |dispatch()                 |    /                         |
- * |   |      |       |               |                           |   /                          |
- * |   |      |       |              \|/                         \|/ /                           |
- * |   |      |       |         MUST_DISPATCH                  STARTED                           |
- * |   |      |       |           |                            /|  \ \                           |
- * |   |      |       |           |postProcess()              / |   \ \                          |
- * ^   |      ^       |           |              dispatch()  /  |    \ \                         |
- * |   |      |       |           |                         /   |     \ \    postProcess()       |
- * |   |      |       |           |    |-------------------/    |auto  \ \----<--------------|   |
- * |   |      |       | auto     \|/  \|/                      \|/      \                    |   |
- * |   |      |       |---<----DISPATCHING<-----------------TIMING_OUT   \                   |   |
- * |   |      |                               dispatch()      |   |      |asyncOperation()   ^   |
- * |   |      |                                               |   |     \|/                  |   ^
- * |   |      |-------<----------------------------------<----|   |      READ_WRITE_OP->-----|   |
- * |   |                          complete()                      |         |      |             |
- * |   |                                                          |         |      |  error()    |
- * |<- | ----<-------------------<-----------------------------<--|         |      |->-----------|
- *     |                           error()                                  |
- *     |                                                  complete()        |
- *     |--------------------------------------------------------------------|
+ * |   |----------<---------------ERROR---------------------------<-------------------------------|
+ * |   |      complete()         /|\ | \                                                          |
+ * |   |                          |  |  \---------------|                                         |
+ * |   |                          |  |                  |dispatch()                               |
+ * |   |                          |  |postProcess()    \|/                                        |
+ * |   |                   error()|  |                  |                                         |
+ * |   |                          |  |  |--|timeout()   |                                         |
+ * |   |           postProcess()  | \|/ | \|/           |         auto                            |
+ * |   |         |--------------->DISPATCHED<---------- | --------------COMPLETING<-----|         |
+ * |   |         |               /|\  |                 |                 | /|\         |         |
+ * |   |         |    |--->-------|   |                 |                 |--|          |         |
+ * |   |         ^    |               |startAsync()     |               timeout()       |         |
+ * |   |         |    |               |                 |                               |         |
+ * |  \|/        |    |  complete()  \|/  postProcess() |                               |         |
+ * | MUST_COMPLETE-<- | ----<------STARTING-->--------- | ------------|                 ^         |
+ * |  /|\    /|\      |               |                 |             |      complete() |         |
+ * |   |      |       |               |                 |             |     /-----------|         |
+ * |   |      |       ^               |dispatch()       |             |    /                      |
+ * |   |      |       |               |                 |             |   /                       |
+ * |   |      |       |              \|/                /            \|/ /                        |
+ * |   |      |       |         MUST_DISPATCH          /           STARTED                        |
+ * |   |      |       |           |                   /            /|  \ \                        |
+ * |   |      |       |           |postProcess()     /            / |   \ \                       |
+ * ^   |      ^       |           |                 /  dispatch()/  |    \ \                      |
+ * |   |      |       |           |                /            /   |     \ \   postProcess()     |
+ * |   |      |       |           |   |---------- / -----------/    |auto  \ \----<-----------|   |
+ * |   |      |       |           |   |          /                  |       \                 |   |
+ * |   |      |       |           |   |   |-----/                   |       |                 |   |
+ * |   |      |       | auto     \|/ \|/ \|/                       \|/      |                 |   |
+ * |   |      |       |---<------DISPATCHING<-----------------TIMING_OUT    |                 |   |
+ * |   |      |                               dispatch()        |   |       |asyncOperation() ^   |
+ * |   |      |                                                 |   |      \|/                |   ^
+ * |   |      |-------<----------------------------------<------|   |     READ_WRITE_OP->-----|   |
+ * |   |                          complete()                        |        |      |             |
+ * |   |                                                            |        |      |  error()    |
+ * |<- | ----<-------------------<-------------------------------<--|        |      |->-----------|
+ *     |                           error()                                   |
+ *     |                                                  complete()         |
+ *     |---------------------------------------------------------------------|
  * </pre>
  */
 public class AsyncStateMachine<S> {
@@ -165,6 +169,9 @@ public class AsyncStateMachine<S> {
         return state == AsyncState.TIMING_OUT;
     }
 
+    public boolean isAsyncError() {
+        return state == AsyncState.ERROR;
+    }
 
     public synchronized void asyncStart(AsyncContextCallback asyncCtxt) {
         if (state == AsyncState.DISPATCHED) {
@@ -211,13 +218,6 @@ public class AsyncStateMachine<S> {
         } else if (state == AsyncState.DISPATCHING) {
             state = AsyncState.DISPATCHED;
             return SocketState.ASYNC_END;
-        } else if (state == AsyncState.ERROR) {
-            asyncCtxt.fireOnComplete();
-            state = AsyncState.DISPATCHED;
-            return SocketState.ASYNC_END;
-        //} else if (state == AsyncState.DISPATCHED) {
-        //    // No state change
-        //    return SocketState.OPEN;
         } else {
             throw new IllegalStateException(
                     sm.getString("asyncStateMachine.invalidAsyncState",

==================================================
AbstractHttp11Processor.java
index e9cacd4439..2e267563a9 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -459,6 +459,8 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncOperation());
         } else if (actionCode == ActionCode.ASYNC_IS_TIMINGOUT) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());
+        } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
+            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
         } else if (actionCode == ActionCode.UPGRADE) {
             // HTTP connections only. Unsupported for AJP.
             // NOOP

==================================================
SpdyProcessor.java
index 88a56efd98..45e7e596ec 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -800,6 +800,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncOperation());
         } else if (actionCode == ActionCode.ASYNC_IS_TIMINGOUT) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());
+        } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
+            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
         } else if (actionCode == ActionCode.UPGRADE) {
             upgradeInbound = (UpgradeInbound) param;
             // Stop further HTTP output

==================================================
TestAsyncContextImpl.java
index f0029cb624..40ecfa4e0b 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -375,6 +375,8 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncOperation());
         } else if (actionCode == ActionCode.ASYNC_IS_TIMINGOUT) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());
+        } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
+            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
         } else {
             // TODO:
             // actionInternal(actionCode, param);

==================================================
