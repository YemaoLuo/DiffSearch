8008f3d25e02368349ab144f5425c7f9ac2fdfd6
==================================================
One more use case
==================================================
Filip Hanik
==================================================
Thu Aug 6 19:34:34 2009 +0000
==================================================
ApplicationFilterChain.java
One more use case


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@801789 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardWrapperValve.java
index c2790c4ba3..2b577a96ff 100644
--- a/java/org/apache/catalina/core/ApplicationFilterChain.java
+++ b/java/org/apache/catalina/core/ApplicationFilterChain.java
@@ -160,6 +160,8 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
      */                                                 
     private static Class<?>[] classTypeUsedInEvent = 
         new Class[] { CometEvent.class };
+    
+    
 
     // ---------------------------------------------------- FilterChain Methods
 
@@ -570,6 +572,16 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
         this.support = support;
 
     }
+    
+    public boolean isAsyncSupported() {
+        boolean supported = true;
+        for (ApplicationFilterConfig config : filters) {
+            if (config!=null && config.getFilterDef()!=null) {
+                supported = supported & config.getFilterDef().isAsyncSupported();
+            }
+        }
+        return supported;
+    }
 
 
 }

==================================================
Http11NioProcessor.java
index 049aee1ad3..2f0b266ba9 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -196,8 +196,11 @@ final class StandardWrapperValve
             ApplicationFilterFactory.getInstance();
         ApplicationFilterChain filterChain =
             factory.createFilterChain(request, wrapper, servlet);
+        
         // Reset comet flag value after creating the filter chain
         request.setComet(false);
+        //check filters to see if we support async or not.
+        request.setAsyncSupported(filterChain.isAsyncSupported());
 
         // Call the filter chain for this request
         // NOTE: This also calls the servlet's service() method

==================================================
Async3.java
index 5926147c7b..aadcd75d05 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -1326,8 +1326,9 @@ public class Http11NioProcessor implements ActionHook {
             AtomicBoolean dispatch = (AtomicBoolean)param;
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) {//async handling
                 endpoint.processSocket(this.socket, SocketStatus.OPEN, true);
-            } else { 
                 dispatch.set(true);
+            } else { 
+                
             }
         }
     }

==================================================
