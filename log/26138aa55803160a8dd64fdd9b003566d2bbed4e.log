26138aa55803160a8dd64fdd9b003566d2bbed4e
==================================================
Add support for the MultipartConfig annotation
==================================================
Mark Emlyn
==================================================
Thu Dec 3 15:25:54 2009 +0000
==================================================
Wrapper.java
Add support for the MultipartConfig annotation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@886814 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 465924e260..bd684374f3 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -340,12 +340,12 @@ public interface Wrapper extends Container {
      * multi-part configuration has been defined, then <code>null</code> will be
      * returned.
      */
-    public MultipartConfigElement getMultipartConfig();
+    public MultipartConfigElement getMultipartConfigElement();
     
     
     /**
      * Set the multi-part configuration for the associated servlet. To clear the
      * multi-part configuration specify <code>null</code> as the new value.
      */
-    public void setMultipartConfig(MultipartConfigElement multipartConfig);
+    public void setMultipartConfigElement(MultipartConfigElement multipartConfig);
 }

==================================================
StandardWrapper.java
index 743655e2be..47f481a2fc 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2393,12 +2393,19 @@ public class Request
     public Collection<Part> getParts() throws IOException, IllegalStateException,
             ServletException {
         
-        MultipartConfigElement mce = getWrapper().getMultipartConfig();
+        MultipartConfigElement mce = getWrapper().getMultipartConfigElement();
         if (mce == null) {
             return Collections.emptyList();
         }
         
-        File location = new File(mce.getLocation());
+        File location;
+        String locationStr = mce.getLocation();
+        if (locationStr == null || locationStr.length() == 0) {
+            location = ((File) context.getServletContext().getAttribute(
+                    ServletContext.TEMPDIR));
+        } else {
+            location = new File(locationStr);
+        }
         
         if (!location.isAbsolute() || !location.isDirectory()) {
             throw new IOException(

==================================================
WebXml.java
index 1ab5b021f1..90435d61f2 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -44,6 +44,7 @@ import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import javax.servlet.SingleThreadModel;
 import javax.servlet.UnavailableException;
+import javax.servlet.annotation.MultipartConfig;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
@@ -258,7 +259,7 @@ public class StandardWrapper
     /**
      * Multipart config
      */
-    protected MultipartConfigElement multipartConfig = null;
+    protected MultipartConfigElement multipartConfigElement = null;
 
     /**
      * Static class array used when the SecurityManager is turned on and 
@@ -1052,6 +1053,15 @@ public class StandardWrapper
                     (sm.getString("standardWrapper.instantiate", actualClass), e);
             }
 
+            if (multipartConfigElement == null) {
+                MultipartConfig annotation =
+                        servlet.getClass().getAnnotation(MultipartConfig.class);
+                if (annotation != null) {
+                    multipartConfigElement =
+                            new MultipartConfigElement(annotation);
+                }
+            }
+
             // Special handling for ContainerServlet instances
             if ((servlet instanceof ContainerServlet) &&
                   (isContainerProvidedServlet(actualClass) ||
@@ -1483,12 +1493,13 @@ public class StandardWrapper
         return classLoadTime;
     }
 
-    public MultipartConfigElement getMultipartConfig() {
-        return multipartConfig;
+    public MultipartConfigElement getMultipartConfigElement() {
+        return multipartConfigElement;
     }
 
-    public void setMultipartConfig(MultipartConfigElement multipartConfig) {
-        this.multipartConfig = multipartConfig;
+    public void setMultipartConfigElement(
+            MultipartConfigElement multipartConfigElement) {
+        this.multipartConfigElement = multipartConfigElement;
     }
 
     // -------------------------------------------------------- Package Methods

==================================================
