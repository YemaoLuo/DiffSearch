2cc3c1a4adacb66aa99fc7b1caf083f051cf05f1
==================================================
Javadoc fixes.
==================================================
Remy Maucherat
==================================================
Wed Jan 13 13:01:28 2016 +0000
==================================================
Bootstrap.java
Javadoc fixes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1724416 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Catalina.java
index 8337a8affa..fc18b5a04a 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -250,6 +250,7 @@ public final class Bootstrap {
 
     /**
      * Initialize daemon.
+     * @throws Exception Fatal initialization error
      */
     public void init() throws Exception {
 
@@ -330,6 +331,8 @@ public final class Bootstrap {
 
     /**
      * Load the Catalina daemon.
+     * @param arguments Initialization arguments
+     * @throws Exception Fatal initialization error
      */
     public void init(String[] arguments)
         throws Exception {
@@ -342,6 +345,7 @@ public final class Bootstrap {
 
     /**
      * Start the Catalina daemon.
+     * @throws Exception Fatal start error
      */
     public void start()
         throws Exception {
@@ -355,6 +359,7 @@ public final class Bootstrap {
 
     /**
      * Stop the Catalina Daemon.
+     * @throws Exception Fatal stop error
      */
     public void stop()
         throws Exception {
@@ -367,6 +372,7 @@ public final class Bootstrap {
 
     /**
      * Stop the standalone server.
+     * @throws Exception Fatal stop error
      */
     public void stopServer()
         throws Exception {
@@ -380,6 +386,8 @@ public final class Bootstrap {
 
    /**
      * Stop the standalone server.
+     * @param arguments Command line arguments
+     * @throws Exception Fatal stop error
      */
     public void stopServer(String[] arguments)
         throws Exception {
@@ -404,6 +412,8 @@ public final class Bootstrap {
 
     /**
      * Set flag.
+     * @param await <code>true</code> if the daemon should block
+     * @throws Exception Reflection error
      */
     public void setAwait(boolean await)
         throws Exception {
@@ -511,6 +521,7 @@ public final class Bootstrap {
     /**
      * Obtain the name of configured home (binary) directory. Note that home and
      * base may be the same (and are by default).
+     * @return the catalina home
      */
     public static String getCatalinaHome() {
         return catalinaHomeFile.getPath();
@@ -521,6 +532,7 @@ public final class Bootstrap {
      * Obtain the name of the configured base (instance) directory. Note that
      * home and base may be the same (and are by default). If this is not set
      * the value returned by {@link #getCatalinaHome()} will be used.
+     * @return the catalina base
      */
     public static String getCatalinaBase() {
         return catalinaBaseFile.getPath();
@@ -530,6 +542,7 @@ public final class Bootstrap {
     /**
      * Obtain the configured home (binary) directory. Note that home and
      * base may be the same (and are by default).
+     * @return the catalina home as a file
      */
     public static File getCatalinaHomeFile() {
         return catalinaHomeFile;
@@ -540,6 +553,7 @@ public final class Bootstrap {
      * Obtain the configured base (instance) directory. Note that
      * home and base may be the same (and are by default). If this is not set
      * the value returned by {@link #getCatalinaHomeFile()} will be used.
+     * @return the catalina base as a file
      */
     public static File getCatalinaBaseFile() {
         return catalinaBaseFile;

==================================================
CatalinaProperties.java
index 3580966e0a..22a8d34894 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -177,7 +177,7 @@ public class Catalina {
 
 
     /**
-     * Return true if naming is enabled.
+     * @return <code>true</code> if naming is enabled.
      */
     public boolean isUseNaming() {
         return (this.useNaming);
@@ -205,11 +205,10 @@ public class Catalina {
 
 
     /**
-     * Process the specified command line arguments, and return
-     * <code>true</code> if we should continue processing; otherwise
-     * return <code>false</code>.
+     * Process the specified command line arguments.
      *
      * @param args Command line arguments to process
+     * @return <code>true</code> if we should continue processing
      */
     protected boolean arguments(String args[]) {
 
@@ -249,6 +248,7 @@ public class Catalina {
 
     /**
      * Return a File object representing our configuration file.
+     * @return the main configuration file
      */
     protected File configFile() {
 
@@ -263,6 +263,7 @@ public class Catalina {
 
     /**
      * Create and configure the Digester we will be using for startup.
+     * @return the main digester to parse server.xml
      */
     protected Digester createStartDigester() {
         long t1=System.currentTimeMillis();
@@ -412,6 +413,7 @@ public class Catalina {
 
     /**
      * Create and configure the Digester we will be using for shutdown.
+     * @return the digester to process the stop operation
      */
     protected Digester createStopDigester() {
 

==================================================
ClassLoaderFactory.java
index 4bb0555604..fb2223a5ad 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -46,7 +46,8 @@ public class CatalinaProperties {
 
 
     /**
-     * Return specified property value.
+     * @param name The property name
+     * @return specified property value
      */
     public static String getProperty(String name) {
         return properties.getProperty(name);

==================================================
ContextConfig.java
index 2698e17f20..623d4e27ed 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -67,6 +67,7 @@ public final class ClassLoaderFactory {
      * or <code>null</code> for no directories of JAR files to be considered
      * @param parent Parent class loader for the new class loader, or
      *  <code>null</code> for the system class loader.
+     * @return the new class loader
      *
      * @exception Exception if an error occurs constructing the class loader
      */
@@ -142,6 +143,7 @@ public final class ClassLoaderFactory {
      *                     the class loader.
      * @param parent Parent class loader for the new class loader, or
      *  <code>null</code> for the system class loader.
+     * @return the new class loader
      *
      * @exception Exception if an error occurs constructing the class loader
      */

==================================================
ContextRuleSet.java
index feb5c035b9..b27e9f7c39 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -435,6 +435,7 @@ public class ContextConfig implements LifecycleListener {
     /**
      * Create (if necessary) and return a Digester configured to process the
      * context configuration descriptor for an application.
+     * @return the digester for context.xml files
      */
     protected Digester createContextDigester() {
         Digester digester = new Digester();
@@ -455,6 +456,7 @@ public class ContextConfig implements LifecycleListener {
 
     /**
      * Process the default configuration file, if it exists.
+     * @param digester The digester that will be used for XML parsing
      */
     protected void contextConfig(Digester digester) {
 
@@ -505,6 +507,8 @@ public class ContextConfig implements LifecycleListener {
 
     /**
      * Process a context.xml.
+     * @param digester The digester that will be used for XML parsing
+     * @param contextXml The URL to the context.xml configuration
      */
     protected void processContextConfig(Digester digester, URL contextXml) {
 
@@ -573,6 +577,7 @@ public class ContextConfig implements LifecycleListener {
 
     /**
      * Adjust docBase.
+     * @throws IOException cannot access the context base path
      */
     protected void fixDocBase()
         throws IOException {
@@ -1665,6 +1670,8 @@ public class ContextConfig implements LifecycleListener {
      * configure this application to see if they also contain static resources.
      * If static resources are found, add them to the context. Resources are
      * added in web-fragment.xml priority order.
+     * @param fragments The set of fragments that will be scanned for
+     *  static resources
      */
     protected void processResourceJARs(Set<WebXml> fragments) {
         for (WebXml fragment : fragments) {
@@ -1708,6 +1715,7 @@ public class ContextConfig implements LifecycleListener {
     /**
      * Identify the default web.xml to be used and obtain an input source for
      * it.
+     * @return an input source to the default web.xml
      */
     protected InputSource getGlobalWebXmlSource() {
         // Is a default web.xml specified for the Context?
@@ -1730,6 +1738,7 @@ public class ContextConfig implements LifecycleListener {
     /**
      * Identify the host web.xml to be used and obtain an input source for
      * it.
+     * @return an input source to the default per host web.xml
      */
     protected InputSource getHostWebXmlSource() {
         File hostConfigBase = getHostConfigBase();
@@ -1742,6 +1751,7 @@ public class ContextConfig implements LifecycleListener {
     /**
      * Identify the application web.xml to be used and obtain an input source
      * for it.
+     * @return an input source to the context web.xml
      */
     protected InputSource getContextWebXmlSource() {
         InputStream stream = null;
@@ -1799,10 +1809,11 @@ public class ContextConfig implements LifecycleListener {
     }
 
     /**
-     *
+     * Utility method to create an input source from the specified XML file.
      * @param filename  Name of the file (possibly with one or more leading path
      *                  segments) to read
      * @param path      Location that filename is relative to
+     * @return the input source
      */
     protected InputSource getWebXmlSource(String filename, String path) {
         File file = new File(filename);
@@ -1855,6 +1866,7 @@ public class ContextConfig implements LifecycleListener {
      * <code>null</code> will be used if no web-fragment.xml was found. Any JARs
      * known not contain fragments will be skipped.
      *
+     * @param application The main web.xml metadata
      * @return A map of JAR name to processed web fragment (if any)
      */
     protected Map<String,WebXml> processJarsForWebFragments(WebXml application) {
@@ -2043,7 +2055,7 @@ public class ContextConfig implements LifecycleListener {
      * For classes packaged with the web application, the class and each
      * super class needs to be checked for a match with {@link HandlesTypes} or
      * for an annotation that matches {@link HandlesTypes}.
-     * @param javaClass
+     * @param javaClass the class to check
      */
     protected void checkHandlesTypes(JavaClass javaClass) {
 
@@ -2356,9 +2368,9 @@ public class ContextConfig implements LifecycleListener {
      * process filter annotation and merge with existing one!
      * FIXME: refactoring method too long and has redundant subroutines with
      *        processAnnotationWebServlet!
-     * @param className
-     * @param ae
-     * @param fragment
+     * @param className The filter class name
+     * @param ae The filter annotation
+     * @param fragment The corresponding fragment
      */
     protected void processAnnotationWebFilter(String className,
             AnnotationEntry ae, WebXml fragment) {

==================================================
ExpandWar.java
index 92507be749..04052d009a 100644
--- a/java/org/apache/catalina/startup/ContextRuleSet.java
+++ b/java/org/apache/catalina/startup/ContextRuleSet.java
@@ -77,6 +77,8 @@ public class ContextRuleSet extends RuleSetBase {
      *
      * @param prefix Prefix for matching pattern rules (including the
      *  trailing slash character)
+     * @param create <code>true</code> if the main context instance should be
+     *  created
      */
     public ContextRuleSet(String prefix, boolean create) {
         this.namespaceURI = null;

==================================================
HostConfig.java
index ba64d3baa5..967d338e1a 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -241,6 +241,7 @@ public class ExpandWar {
      *
      * @param src File object representing the source
      * @param dest File object representing the destination
+     * @return <code>true</code> if the copy was successful
      */
     public static boolean copy(File src, File dest) {
 
@@ -281,6 +282,7 @@ public class ExpandWar {
      * sub-directories recursively. Any failure will be logged.
      *
      * @param dir File object representing the directory to be deleted
+     * @return <code>true</code> if the deletion was successful
      */
     public static boolean delete(File dir) {
         // Log failure by default
@@ -295,6 +297,7 @@ public class ExpandWar {
      * @param dir File object representing the directory to be deleted
      * @param logFailure <code>true</code> if failure to delete the resource
      *                   should be logged
+     * @return <code>true</code> if the deletion was successful
      */
     public static boolean delete(File dir, boolean logFailure) {
         boolean result;
@@ -320,6 +323,7 @@ public class ExpandWar {
      * sub-directories recursively. Any failure will be logged.
      *
      * @param dir File object representing the directory to be deleted
+     * @return <code>true</code> if the deletion was successful
      */
     public static boolean deleteDir(File dir) {
         return deleteDir(dir, true);
@@ -333,6 +337,7 @@ public class ExpandWar {
      * @param dir File object representing the directory to be deleted
      * @param logFailure <code>true</code> if failure to delete the resource
      *                   should be logged
+     * @return <code>true</code> if the deletion was successful
      */
     public static boolean deleteDir(File dir, boolean logFailure) {
 

==================================================
Tomcat.java
index 1fb812c8e6..3bedaad0a8 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -157,7 +157,7 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * Return the Context implementation class name.
+     * @return the Context implementation class name.
      */
     public String getContextClass() {
 
@@ -185,7 +185,7 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * Return the deploy XML config file flag for this component.
+     * @return the deploy XML config file flag for this component.
      */
     public boolean isDeployXML() {
 
@@ -207,7 +207,7 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * Return the copy XML config file flag for this component.
+     * @return the copy XML config file flag for this component.
      */
     public boolean isCopyXML() {
 
@@ -229,7 +229,7 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * Return the unpack WARs flag.
+     * @return the unpack WARs flag.
      */
     public boolean isUnpackWARs() {
 
@@ -288,6 +288,7 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Add a serviced application to the list.
+     * @param name the context name
      */
     public synchronized void addServiced(String name) {
         serviced.add(name);
@@ -296,6 +297,7 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Is application serviced ?
+     * @param name the context name
      * @return state of the application
      */
     public synchronized boolean isServiced(String name) {
@@ -305,6 +307,7 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Removed a serviced application from the list.
+     * @param name the context name
      */
     public synchronized void removeServiced(String name) {
         serviced.remove(name);
@@ -313,8 +316,9 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Get the instant where an application was deployed.
+     * @param name the context name
      * @return 0L if no application with that name is deployed, or the instant
-     * on which the application was deployed
+     *  on which the application was deployed
      */
     public long getDeploymentTime(String name) {
         DeployedApplication app = deployed.get(name);
@@ -329,9 +333,10 @@ public class HostConfig implements LifecycleListener {
     /**
      * Has the specified application been deployed? Note applications defined
      * in server.xml will not have been deployed.
+     * @param name the context name
      * @return <code>true</code> if the application has been deployed and
-     * <code>false</code> if the application has not been deployed or does not
-     * exist
+     *  <code>false</code> if the application has not been deployed or does not
+     *  exist
      */
     public boolean isDeployed(String name) {
         DeployedApplication app = deployed.get(name);
@@ -348,6 +353,9 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Create the digester which will be used to parse context config files.
+     * @param contextClassName The class which will be used to create the
+     *  context instance
+     * @return the digester
      */
     protected static Digester createDigester(String contextClassName) {
         Digester digester = new Digester();
@@ -375,6 +383,7 @@ public class HostConfig implements LifecycleListener {
     /**
      * Get the name of the configBase.
      * For use with JMX management.
+     * @return the config base
      */
     public String getConfigBaseName() {
         return host.getConfigBaseFile().getAbsolutePath();
@@ -437,6 +446,7 @@ public class HostConfig implements LifecycleListener {
     /**
      * Deploy applications for any directories or WAR files that are found
      * in our "application root" directory.
+     * @param name The context name which should be deployed
      */
     protected void deployApps(String name) {
 
@@ -470,6 +480,8 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Deploy XML context descriptors.
+     * @param configBase The config base
+     * @param files The XML descriptors which should be deployed
      */
     protected void deployDescriptors(File configBase, String[] files) {
 
@@ -505,8 +517,9 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * @param cn
-     * @param contextXml
+     * Deploy specified context descriptor.
+     * @param cn The context name
+     * @param contextXml The descriptor
      */
     @SuppressWarnings("null") // context is not null
     protected void deployDescriptor(ContextName cn, File contextXml) {
@@ -661,6 +674,8 @@ public class HostConfig implements LifecycleListener {
 
     /**
      * Deploy WAR files.
+     * @param appBase The base path for applications
+     * @param files The WARs to deploy
      */
     protected void deployWARs(File appBase, String[] files) {
 
@@ -770,8 +785,9 @@ public class HostConfig implements LifecycleListener {
     }
 
     /**
-     * @param cn
-     * @param war
+     * Deploy packed WAR.
+     * @param cn The context name
+     * @param war The WAR file
      */
     protected void deployWAR(ContextName cn, File war) {
 
@@ -979,7 +995,9 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * Deploy directories.
+     * Deploy exploded webapps.
+     * @param appBase The base path for applications
+     * @param files The exploded webapps that should be deployed
      */
     protected void deployDirectories(File appBase, String[] files) {
 
@@ -1018,8 +1036,9 @@ public class HostConfig implements LifecycleListener {
 
 
     /**
-     * @param cn
-     * @param dir
+     * Deploy exploded webapp.
+     * @param cn The context name
+     * @param dir The path to the root folder of the weapp
      */
     protected void deployDirectory(ContextName cn, File dir) {
 
@@ -1150,6 +1169,7 @@ public class HostConfig implements LifecycleListener {
      * Check if a webapp is already deployed in this host.
      *
      * @param contextName of the context which will be checked
+     * @return <code>true</code> if the specified deployment exists
      */
     protected boolean deploymentExists(String contextName) {
         return (deployed.containsKey(contextName) ||
@@ -1628,6 +1648,7 @@ public class HostConfig implements LifecycleListener {
     /**
      * Add a new Context to be managed by us.
      * Entry point for the admin webapp, and other JMX Context controllers.
+     * @param context The context instance
      */
     public void manageApp(Context context)  {
 
@@ -1673,6 +1694,7 @@ public class HostConfig implements LifecycleListener {
     /**
      * Remove a webapp from our control.
      * Entry point for the admin webapp, and other JMX Context controllers.
+     * @param contextName The context name
      */
     public void unmanageApp(String contextName) {
         if(isServiced(contextName)) {

==================================================
UserConfig.java
index 0b1b5febb7..3801118e31 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -169,6 +169,9 @@ public class Tomcat {
      * (/tmp doesn't seem a good choice for security).
      *
      * TODO: disable work dir if not needed ( no jsp, etc ).
+     *
+     * @param basedir The Tomcat base folder on which all others
+     *  will be derived
      */
     public void setBaseDir(String basedir) {
         this.basedir = basedir;
@@ -177,6 +180,7 @@ public class Tomcat {
     /**
      * Set the port for the default connector. Must
      * be called before start().
+     * @param port The port number
      */
     public void setPort(int port) {
         this.port = port;
@@ -185,6 +189,7 @@ public class Tomcat {
     /**
      * The the hostname of the default host, default is
      * 'localhost'.
+     * @param s The default host name
      */
     public void setHostname(String s) {
         hostname = s;
@@ -198,7 +203,11 @@ public class Tomcat {
      * {@link javax.servlet.ServletContainerInitializer} processing will be
      * applied.
      *
-     * @throws ServletException
+     * @param contextPath The context mapping to use, "" for root context.
+     * @param docBase Base directory for the context, for static files.
+     *  Must exist, relative to the server home
+     * @return the deployed context
+     * @throws ServletException if a deployment error occurs
      */
     public Context addWebapp(String contextPath, String docBase) throws ServletException {
         return addWebapp(getHost(), contextPath, docBase);
@@ -236,9 +245,10 @@ public class Tomcat {
      *
      * TODO: add the rest
      *
-     *  @param contextPath "" for root context.
-     *  @param docBase base dir for the context, for static files. Must exist,
-     *  relative to the server home
+     * @param contextPath The context mapping to use, "" for root context.
+     * @param docBase Base directory for the context, for static files.
+     *  Must exist, relative to the server home
+     * @return the deployed context
      */
     public Context addContext(String contextPath, String docBase) {
         return addContext(getHost(), contextPath, docBase);
@@ -322,9 +332,9 @@ public class Tomcat {
 
 
     /**
-     * Initialise the server.
+     * Initialize the server.
      *
-     * @throws LifecycleException
+     * @throws LifecycleException Init error
      */
     public void init() throws LifecycleException {
         getServer();
@@ -336,7 +346,7 @@ public class Tomcat {
     /**
      * Start the server.
      *
-     * @throws LifecycleException
+     * @throws LifecycleException Start error
      */
     public void start() throws LifecycleException {
         getServer();
@@ -347,7 +357,7 @@ public class Tomcat {
     /**
      * Stop the server.
      *
-     * @throws LifecycleException
+     * @throws LifecycleException Stop error
      */
     public void stop() throws LifecycleException {
         getServer();
@@ -358,6 +368,8 @@ public class Tomcat {
     /**
      * Destroy the server. This object cannot be used once this method has been
      * called.
+     *
+     * @throws LifecycleException Destroy error
      */
     public void destroy() throws LifecycleException {
         getServer();
@@ -368,14 +380,18 @@ public class Tomcat {
     /**
      * Add a user for the in-memory realm. All created apps use this
      * by default, can be replaced using setRealm().
-     *
+     * @param user The user name
+     * @param pass The password
      */
     public void addUser(String user, String pass) {
         userPass.put(user, pass);
     }
 
     /**
+     * Add a role to a user.
      * @see #addUser(String, String)
+     * @param user The user name
+     * @param role The role name
      */
     public void addRole(String user, String role) {
         List<String> roles = userRoles.get(user);
@@ -421,6 +437,7 @@ public class Tomcat {
     /**
      * Get the service object. Can be used to add more
      * connectors and few other global settings.
+     * @return The service
      */
     public Service getService() {
         getServer();
@@ -432,7 +449,7 @@ public class Tomcat {
      * be added to this host. When tomcat starts, the
      * host will be the default host.
      *
-     * @param host
+     * @param host The current host
      */
     public void setHost(Host host) {
         this.host = host;
@@ -450,6 +467,7 @@ public class Tomcat {
 
     /**
      * Access to the engine, for further customization.
+     * @return The engine
      */
     public Engine getEngine() {
         if(engine == null ) {
@@ -466,6 +484,7 @@ public class Tomcat {
     /**
      * Get the server object. You can add listeners and few more
      * customizations. JNDI is disabled by default.
+     * @return The Server
      */
     public Server getServer() {
 
@@ -488,6 +507,11 @@ public class Tomcat {
     }
 
     /**
+     * @param host The host in which the context will be deployed
+     * @param contextPath The context mapping to use, "" for root context.
+     * @param dir Base directory for the context, for static files.
+     *  Must exist, relative to the server home
+     * @return the deployed context
      * @see #addContext(String, String)
      */
     public Context addContext(Host host, String contextPath, String dir) {
@@ -495,6 +519,12 @@ public class Tomcat {
     }
 
     /**
+     * @param host The host in which the context will be deployed
+     * @param contextPath The context mapping to use, "" for root context.
+     * @param contextName The context name
+     * @param dir Base directory for the context, for static files.
+     *  Must exist, relative to the server home
+     * @return the deployed context
      * @see #addContext(String, String)
      */
     public Context addContext(Host host, String contextPath, String contextName,
@@ -515,6 +545,11 @@ public class Tomcat {
     }
 
     /**
+     * @param host The host in which the context will be deployed
+     * @param contextPath The context mapping to use, "" for root context.
+     * @param docBase Base directory for the context, for static files.
+     *  Must exist, relative to the server home
+     * @return the deployed context
      * @see #addWebapp(String, String)
      */
     public Context addWebapp(Host host, String contextPath, String docBase) {
@@ -522,6 +557,12 @@ public class Tomcat {
     }
 
     /**
+     * @param host The host in which the context will be deployed
+     * @param contextPath The context mapping to use, "" for root context.
+     * @param docBase Base directory for the context, for static files.
+     *  Must exist, relative to the server home
+     * @param config Custom context configurator helper
+     * @return the deployed context
      * @see #addWebapp(String, String)
      */
     public Context addWebapp(Host host, String contextPath, String docBase, ContextConfig config) {
@@ -576,6 +617,7 @@ public class Tomcat {
      * one. The Realm created here will be added to the Engine by default and
      * may be replaced at the Engine level or over-ridden (as per normal Tomcat
      * behaviour) at the Host or Context level.
+     * @return a realm instance
      */
     protected Realm createDefaultRealm() {
         return new RealmBase() {

==================================================
UserDatabase.java
index 8de9ed813d..22baacff45 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -113,7 +113,7 @@ public final class UserConfig
 
 
     /**
-     * Return the Context configuration class name.
+     * @return the Context configuration class name.
      */
     public String getConfigClass() {
 
@@ -135,7 +135,7 @@ public final class UserConfig
 
 
     /**
-     * Return the Context implementation class name.
+     * @return the Context implementation class name.
      */
     public String getContextClass() {
 
@@ -157,7 +157,7 @@ public final class UserConfig
 
 
     /**
-     * Return the directory name for user web applications.
+     * @return the directory name for user web applications.
      */
     public String getDirectoryName() {
 
@@ -179,7 +179,7 @@ public final class UserConfig
 
 
     /**
-     * Return the base directory containing user home directories.
+     * @return the base directory containing user home directories.
      */
     public String getHomeBase() {
 
@@ -201,7 +201,7 @@ public final class UserConfig
 
 
     /**
-     * Return the user database class name for this component.
+     * @return the user database class name for this component.
      */
     public String getUserClass() {
 
@@ -212,6 +212,7 @@ public final class UserConfig
 
     /**
      * Set the user database class name for this component.
+     * @param userClass The user database class name
      */
     public void setUserClass(String userClass) {
 
@@ -220,7 +221,7 @@ public final class UserConfig
     }
 
     /**
-     * Return the regular expression used to test for user who deployment is allowed.
+     * @return the regular expression used to test for user who deployment is allowed.
      */
     public String getAllow() {
         if (allow == null) return null;
@@ -243,7 +244,7 @@ public final class UserConfig
 
 
     /**
-     * Return the regular expression used to test for user who deployment is denied.
+     * @return the regular expression used to test for user who deployment is denied.
      */
     public String getDeny() {
         if (deny == null) return null;

==================================================
WebAnnotationSet.java
index ea7467ed55..45db18a0a8 100644
--- a/java/org/apache/catalina/startup/UserDatabase.java
+++ b/java/org/apache/catalina/startup/UserDatabase.java
@@ -35,7 +35,7 @@ public interface UserDatabase {
 
 
     /**
-     * Return the UserConfig listener with which we are associated.
+     * @return the UserConfig listener with which we are associated.
      */
     public UserConfig getUserConfig();
 
@@ -52,7 +52,7 @@ public interface UserDatabase {
 
 
     /**
-     * Return an absolute pathname to the home directory for the specified user.
+     * @return an absolute pathname to the home directory for the specified user.
      *
      * @param user User for which a home directory should be retrieved
      */
@@ -60,7 +60,7 @@ public interface UserDatabase {
 
 
     /**
-     * Return an enumeration of the usernames defined on this server.
+     * @return an enumeration of the usernames defined on this server.
      */
     public Enumeration<String> getUsers();
 

==================================================
