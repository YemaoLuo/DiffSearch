0093619f08f567513ee18227a5e02178d72e2855
==================================================
Make naming context tokens for containers more robust by using a separate object
==================================================
Mark Emlyn
==================================================
Thu May 8 13:02:26 2014 +0000
==================================================
Context.java
Make naming context tokens for containers more robust by using a separate object

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1593257 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Server.java
index 82d17a43cf..1ce7344e9d 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1632,4 +1632,10 @@ public interface Context extends Container {
      *          The class loader to restore as the thread context class loader
      */
     public void unbind(boolean usePrivilegedAction, ClassLoader originalClassLoader);
+
+    /**
+     * Obtain the token necessary for operations on the associated JNDI naming
+     * context.
+     */
+    public Object getNamingToken();
 }

==================================================
NamingContextListener.java
index 088e6d792a..d2a37279a4 100644
--- a/java/org/apache/catalina/Server.java
+++ b/java/org/apache/catalina/Server.java
@@ -206,4 +206,11 @@ public interface Server extends Lifecycle {
      * @param service The Service to be removed
      */
     public void removeService(Service service);
+
+
+    /**
+     * Obtain the token necessary for operations on the associated JNDI naming
+     * context.
+     */
+    public Object getNamingToken();
 }

==================================================
StandardContext.java
index 30fedd2bb8..748ed175f4 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -100,6 +100,10 @@ public class NamingContextListener
      */
     protected Object container = null;
 
+    /**
+     * Token for configuring associated JNDI context.
+     */
+    private Object token = null;
 
     /**
      * Initialized flag.
@@ -214,8 +218,10 @@ public class NamingContextListener
         if (container instanceof Context) {
             namingResources = ((Context) container).getNamingResources();
             logger = log;
+            token = ((Context) container).getNamingToken();
         } else if (container instanceof Server) {
             namingResources = ((Server) container).getGlobalNamingResources();
+            token = ((Server) container).getNamingToken();
         } else {
             return;
         }
@@ -231,8 +237,9 @@ public class NamingContextListener
             } catch (NamingException e) {
                 // Never happens
             }
-            ContextAccessController.setSecurityToken(getName(), container);
-            ContextBindings.bindContext(container, namingContext, container);
+            ContextAccessController.setSecurityToken(getName(), token);
+            ContextAccessController.setSecurityToken(container, token);
+            ContextBindings.bindContext(container, namingContext, token);
             if( log.isDebugEnabled() ) {
                 log.debug("Bound " + container );
             }
@@ -242,7 +249,7 @@ public class NamingContextListener
                     getExceptionOnFailedWrite());
 
             // Setting the context in read/write mode
-            ContextAccessController.setWritable(getName(), container);
+            ContextAccessController.setWritable(getName(), token);
 
             try {
                 createNamingContext();
@@ -258,9 +265,8 @@ public class NamingContextListener
                 // Setting the context in read only mode
                 ContextAccessController.setReadOnly(getName());
                 try {
-                    ContextBindings.bindClassLoader
-                        (container, container,
-                         ((Context) container).getLoader().getClassLoader());
+                    ContextBindings.bindClassLoader(container, token,
+                            ((Context) container).getLoader().getClassLoader());
                 } catch (NamingException e) {
                     logger.error(sm.getString("naming.bindFailed", e));
                 }
@@ -270,9 +276,8 @@ public class NamingContextListener
                 org.apache.naming.factory.ResourceLinkFactory.setGlobalContext
                     (namingContext);
                 try {
-                    ContextBindings.bindClassLoader
-                        (container, container,
-                         this.getClass().getClassLoader());
+                    ContextBindings.bindClassLoader(container, token,
+                            this.getClass().getClassLoader());
                 } catch (NamingException e) {
                     logger.error(sm.getString("naming.bindFailed", e));
                 }
@@ -290,23 +295,21 @@ public class NamingContextListener
                 return;
 
             // Setting the context in read/write mode
-            ContextAccessController.setWritable(getName(), container);
-            ContextBindings.unbindContext(container, container);
+            ContextAccessController.setWritable(getName(), token);
+            ContextBindings.unbindContext(container, token);
 
             if (container instanceof Context) {
-                ContextBindings.unbindClassLoader
-                    (container, container,
-                     ((Context) container).getLoader().getClassLoader());
+                ContextBindings.unbindClassLoader(container, token,
+                        ((Context) container).getLoader().getClassLoader());
             }
 
             if (container instanceof Server) {
                 namingResources.removePropertyChangeListener(this);
-                ContextBindings.unbindClassLoader
-                    (container, container,
-                     this.getClass().getClassLoader());
+                ContextBindings.unbindClassLoader(container, token,
+                        this.getClass().getClassLoader());
             }
 
-            ContextAccessController.unsetSecurityToken(getName(), container);
+            ContextAccessController.unsetSecurityToken(getName(), token);
 
             // unregister mbeans.
             Collection<ObjectName> names = objectNames.values();
@@ -342,7 +345,7 @@ public class NamingContextListener
             return;
 
         // Setting the context in read/write mode
-        ContextAccessController.setWritable(getName(), container);
+        ContextAccessController.setWritable(getName(), token);
 
         String type = event.getType();
 
@@ -483,7 +486,7 @@ public class NamingContextListener
         if (source == namingResources) {
 
             // Setting the context in read/write mode
-            ContextAccessController.setWritable(getName(), container);
+            ContextAccessController.setWritable(getName(), token);
 
             processGlobalResourcesChange(event.getPropertyName(),
                                          event.getOldValue(),

==================================================
StandardServer.java
index 91f569942f..4709366b41 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -818,8 +818,17 @@ public class StandardContext extends ContainerBase
     });
     protected ThreadBindingListener threadBindingListener = DEFAULT_NAMING_LISTENER;
 
+    private final Object namingToken = new Object();
+
+
     // ----------------------------------------------------- Context Properties
 
+    @Override
+    public Object getNamingToken() {
+        return namingToken;
+    }
+
+
     @Override
     public void setContainerSciFilter(String containerSciFilter) {
         this.containerSciFilter = containerSciFilter;
@@ -5718,7 +5727,7 @@ public class StandardContext extends ContainerBase
 
         if (isUseNaming()) {
             try {
-                ContextBindings.bindThread(this, this);
+                ContextBindings.bindThread(this, getNamingToken());
             } catch (NamingException e) {
                 // Silent catch, as this is a normal case during the early
                 // startup stages
@@ -5735,7 +5744,7 @@ public class StandardContext extends ContainerBase
     protected void unbindThread(ClassLoader oldContextClassLoader) {
 
         if (isUseNaming()) {
-            ContextBindings.unbindThread(this, this);
+            ContextBindings.unbindThread(this, getNamingToken());
         }
 
         unbind(false, oldContextClassLoader);

==================================================
FailedContext.java
index aaebd2030c..3e9e9876eb 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -168,9 +168,17 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
 
     private File catalinaBase = null;
 
+    private final Object namingToken = new Object();
+
 
     // ------------------------------------------------------------- Properties
 
+    @Override
+    public Object getNamingToken() {
+        return namingToken;
+    }
+
+
     /**
      * Return the global naming resources context.
      */

==================================================
TesterContext.java
index 6472074c1f..69127e615b 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -752,4 +752,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     public void unbind(boolean usePrivilegedAction, ClassLoader originalClassLoader) {
         // NO-OP
     }
+
+    @Override
+    public Object getNamingToken() {
+        return null;
+    }
 }
\ No newline at end of file

==================================================
