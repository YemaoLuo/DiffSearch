d01f20c575ed0b919e95a577c7038a60d56369c2
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Tue Jul 16 12:34:36 2013 +0000
==================================================
Stream.java
EL 3.0 collections operations.
Implement max and min.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503683 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCollectionOperations.java
index 8687073d40..820753f20a 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -25,6 +25,7 @@ import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Set;
 
+import javax.el.ELException;
 import javax.el.LambdaExpression;
 
 import org.apache.el.lang.ELSupport;
@@ -287,6 +288,87 @@ public class Stream {
     }
 
 
+    public Optional max() {
+        return compare(true);
+    }
+
+
+    public Optional max(LambdaExpression le) {
+        return compare(true, le);
+    }
+
+
+    public Optional min() {
+        return compare(false);
+    }
+
+
+    public Optional min(LambdaExpression le) {
+        return compare(false, le);
+    }
+
+
+    @SuppressWarnings({ "rawtypes", "unchecked" })
+    private Optional compare(boolean isMax) {
+        Comparable result = null;
+
+        if (iterator.hasNext()) {
+            Object obj = iterator.next();
+            if ((obj instanceof Comparable)) {
+                result = (Comparable) obj;
+            } else {
+                throw new ELException();
+            }
+        }
+
+        while (iterator.hasNext()) {
+            Object obj = iterator.next();
+            if ((obj instanceof Comparable)) {
+                if (isMax && ((Comparable) obj).compareTo(result) > 0) {
+                    result = (Comparable) obj;
+                } else if (!isMax && ((Comparable) obj).compareTo(result) < 0) {
+                    result = (Comparable) obj;
+                }
+            } else {
+                throw new ELException();
+            }
+        }
+
+        if (result == null) {
+            return Optional.EMPTY;
+        } else {
+            return new Optional(result);
+        }
+    }
+
+
+    private Optional compare(boolean isMax, LambdaExpression le) {
+        Object result = null;
+
+        if (iterator.hasNext()) {
+            Object obj = iterator.next();
+            result = obj;
+        }
+
+        while (iterator.hasNext()) {
+            Object obj = iterator.next();
+            if (isMax && ELSupport.coerceToNumber(le.invoke(obj, result),
+                    Integer.class).intValue() > 0) {
+                result = obj;
+            } else if (!isMax && ELSupport.coerceToNumber(le.invoke(obj, result),
+                    Integer.class).intValue() < 0) {
+                result = obj;
+            }
+        }
+
+        if (result == null) {
+            return Optional.EMPTY;
+        } else {
+            return new Optional(result);
+        }
+    }
+
+
     private static class LambdaExpressionComparator
             implements Comparator<Object>{
 

==================================================
