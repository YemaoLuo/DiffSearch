592cf7033ad098c5cde7c3d143705851d392c9ff
==================================================
Take advantage of GenericFilter
==================================================
Mark Thomas
==================================================
Fri Oct 9 19:24:31 2015 +0000
==================================================
RequestDumperFilter.java
Take advantage of GenericFilter

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1707798 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSIFilter.java
index 8c1c64202e..af0a53542a 100644
--- a/java/org/apache/catalina/filters/RequestDumperFilter.java
+++ b/java/org/apache/catalina/filters/RequestDumperFilter.java
@@ -21,9 +21,8 @@ import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Enumeration;
 
-import javax.servlet.Filter;
 import javax.servlet.FilterChain;
-import javax.servlet.FilterConfig;
+import javax.servlet.GenericFilter;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
@@ -48,7 +47,9 @@ import org.apache.juli.logging.LogFactory;
  *
  * @author Craig R. McClanahan
  */
-public class RequestDumperFilter implements Filter {
+public class RequestDumperFilter extends GenericFilter {
+
+    private static final long serialVersionUID = 1L;
 
     private static final String NON_HTTP_REQ_MSG =
         "Not available. Non-http request.";
@@ -264,16 +265,6 @@ public class RequestDumperFilter implements Filter {
         return ts.dateString;
     }
 
-    @Override
-    public void init(FilterConfig filterConfig) throws ServletException {
-        // NOOP
-    }
-
-    @Override
-    public void destroy() {
-        // NOOP
-    }
-
     private static final class Timestamp {
         private final Date date = new Date(0);
         private final SimpleDateFormat format =

==================================================
ExampleFilter.java
index 708395789b..0f19cd8697 100644
--- a/java/org/apache/catalina/ssi/SSIFilter.java
+++ b/java/org/apache/catalina/ssi/SSIFilter.java
@@ -28,9 +28,8 @@ import java.io.Reader;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.servlet.Filter;
 import javax.servlet.FilterChain;
-import javax.servlet.FilterConfig;
+import javax.servlet.GenericFilter;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
@@ -45,8 +44,8 @@ import org.apache.catalina.Globals;
  * @author David Becker
  * @see org.apache.catalina.ssi.SSIServlet
  */
-public class SSIFilter implements Filter {
-    protected FilterConfig config = null;
+public class SSIFilter extends GenericFilter {
+    private static final long serialVersionUID = 1L;
     /** Debug level for this servlet. */
     protected int debug = 0;
     /** Expiration time in seconds for the doc. */
@@ -62,37 +61,27 @@ public class SSIFilter implements Filter {
     protected boolean allowExec = false;
 
 
-    //----------------- Public methods.
-    /**
-     * Initialize this servlet.
-     *
-     * @exception ServletException
-     *                if an error occurs
-     */
     @Override
-    public void init(FilterConfig config) throws ServletException {
-        this.config = config;
-
-        if (config.getInitParameter("debug") != null) {
-            debug = Integer.parseInt(config.getInitParameter("debug"));
+    public void init() throws ServletException {
+        if (getInitParameter("debug") != null) {
+            debug = Integer.parseInt(getInitParameter("debug"));
         }
 
-        if (config.getInitParameter("contentType") != null) {
-            contentTypeRegEx = Pattern.compile(config.getInitParameter("contentType"));
+        if (getInitParameter("contentType") != null) {
+            contentTypeRegEx = Pattern.compile(getInitParameter("contentType"));
         } else {
             contentTypeRegEx = shtmlRegEx;
         }
 
-        isVirtualWebappRelative =
-            Boolean.parseBoolean(config.getInitParameter("isVirtualWebappRelative"));
+        isVirtualWebappRelative = Boolean.parseBoolean(getInitParameter("isVirtualWebappRelative"));
 
-        if (config.getInitParameter("expires") != null)
-            expires = Long.valueOf(config.getInitParameter("expires"));
+        if (getInitParameter("expires") != null)
+            expires = Long.valueOf(getInitParameter("expires"));
 
-        allowExec = Boolean.parseBoolean(config.getInitParameter("allowExec"));
+        allowExec = Boolean.parseBoolean(getInitParameter("allowExec"));
 
         if (debug > 0)
-            config.getServletContext().log(
+            getServletContext().log(
                     "SSIFilter.init() SSI invoker started with 'debug'=" + debug);
     }
 
@@ -109,7 +98,7 @@ public class SSIFilter implements Filter {
         // setup to capture output
         ByteArrayServletOutputStream basos = new ByteArrayServletOutputStream();
         ResponseIncludeWrapper responseIncludeWrapper =
-            new ResponseIncludeWrapper(config.getServletContext(),req, res, basos);
+                new ResponseIncludeWrapper(getServletContext(),req, res, basos);
 
         // process remainder of filter chain
         chain.doFilter(req, responseIncludeWrapper);
@@ -127,7 +116,7 @@ public class SSIFilter implements Filter {
 
             // set up SSI processing
             SSIExternalResolver ssiExternalResolver =
-                new SSIServletExternalResolver(config.getServletContext(), req,
+                new SSIServletExternalResolver(getServletContext(), req,
                         res, isVirtualWebappRelative, debug, encoding);
             SSIProcessor ssiProcessor = new SSIProcessor(ssiExternalResolver,
                     debug, allowExec);

==================================================
