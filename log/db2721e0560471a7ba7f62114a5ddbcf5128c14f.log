db2721e0560471a7ba7f62114a5ddbcf5128c14f
==================================================
Further improve handling of nested lambda expressions.
==================================================
Mark Emlyn
==================================================
Wed Jul 17 13:24:09 2013 +0000
==================================================
AstLambdaExpression.java
index f3c0cb56c7..d631e848f3 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -52,3 +52,4 @@ error.context.null=ELContext was null
 
 # Parser
 error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
+error.lambda.tooManyMethodParameterSets=There are more sets of method parameters specified than there are nested lambda expressions

==================================================
TestAstLambdaExpression.java
index 25a930077b..2ff2654bc8 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -25,6 +25,7 @@ import javax.el.LambdaExpression;
 
 import org.apache.el.ValueExpressionImpl;
 import org.apache.el.lang.EvaluationContext;
+import org.apache.el.util.MessageFactory;
 
 public class AstLambdaExpression extends SimpleNode {
 
@@ -35,6 +36,24 @@ public class AstLambdaExpression extends SimpleNode {
     @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
 
+        // Check that there are not more sets of method parameters than there
+        // are nested lambda expressions
+        int methodParameterSetCount = jjtGetNumChildren() - 2;
+        if (methodParameterSetCount > 0) {
+            // We know this node is an expression
+            methodParameterSetCount--;
+            Node n = this.jjtGetChild(1);
+            while (methodParameterSetCount > 0) {
+                if (n.jjtGetNumChildren() <2 ||
+                        !(n.jjtGetChild(0) instanceof AstLambdaParameters)) {
+                    throw new ELException(MessageFactory.get(
+                            "error.lambda.tooManyMethodParameterSets"));
+                }
+                n = n.jjtGetChild(1);
+                methodParameterSetCount--;
+            }
+        }
+
         // First child is always parameters even if there aren't any
         AstLambdaParameters formalParametersNode =
                 (AstLambdaParameters) children[0];
@@ -54,16 +73,22 @@ public class AstLambdaExpression extends SimpleNode {
         LambdaExpression le = new LambdaExpression(formalParameters, ve);
         le.setELContext(ctx);
 
-        if (formalParameters.isEmpty()) {
+        if (formalParameters.isEmpty() && jjtGetNumChildren() == 2) {
             // No formal parameters - invoke the expression
             return le.invoke(ctx, (Object[]) null);
         }
 
         // If there are method parameters, need to invoke the expression with
-        // those parameters. If there are multiple method parameters there
-        // should be that many nested expressions.
-        // If there are more nested expressions that parameters this will return
-        // a LambdaExpression
+        // those parameters. If there are multiple sets of method parameters
+        // there should be at least that many nested expressions.
+        // If there are more nested expressions than sets of method parameters
+        // this may return a LambdaExpression.
+        // If there are more sets of method parameters than nested expressions
+        // an ELException will have been thrown by the check at the start of
+        // this method.
+        // If the inner most expression(s) do not require parameters then a
+        // value will be returned once the outermost expression that does
+        // require a parameter has been evaluated.
         Object result = le;
         int i = 2;
         while (result instanceof LambdaExpression && i < jjtGetNumChildren()) {
@@ -72,10 +97,6 @@ public class AstLambdaExpression extends SimpleNode {
             i++;
         }
 
-        if (i < jjtGetNumChildren()) {
-            throw new ELException();
-        }
-
         return result;
     }
 }

==================================================
