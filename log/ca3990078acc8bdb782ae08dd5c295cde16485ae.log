ca3990078acc8bdb782ae08dd5c295cde16485ae
==================================================
Update package renamed Apache Commons BCEL to r1593495 to pick up some additional changes for Java 7 support and some code clean up.
==================================================
Mark Emlyn
==================================================
Fri May 9 10:16:51 2014 +0000
==================================================
Constants.java
Update package renamed Apache Commons BCEL to r1593495 to pick up some additional changes for Java 7 support and some code clean up.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1593506 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationDefault.java
index 70252a2256..1cced6d897 100644
--- a/java/org/apache/tomcat/util/bcel/Constants.java
+++ b/java/org/apache/tomcat/util/bcel/Constants.java
@@ -108,15 +108,17 @@ public interface Constants {
   public static final byte ATTR_SIGNATURE                               = 10;
   public static final byte ATTR_STACK_MAP                               = 11;
   public static final byte ATTR_RUNTIME_VISIBLE_ANNOTATIONS             = 12;
-  public static final byte ATTR_RUNTIMEIN_VISIBLE_ANNOTATIONS           = 13;
+  public static final byte ATTR_RUNTIME_INVISIBLE_ANNOTATIONS           = 13;
   public static final byte ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS   = 14;
-  public static final byte ATTR_RUNTIMEIN_VISIBLE_PARAMETER_ANNOTATIONS = 15;
+  public static final byte ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = 15;
   public static final byte ATTR_ANNOTATION_DEFAULT                      = 16;
   public static final byte ATTR_LOCAL_VARIABLE_TYPE_TABLE               = 17;
   public static final byte ATTR_ENCLOSING_METHOD                        = 18;
   public static final byte ATTR_STACK_MAP_TABLE                         = 19;
+  public static final byte ATTR_BOOTSTRAP_METHODS                       = 20;
+  public static final byte ATTR_METHOD_PARAMETERS                       = 21;
 
-  public static final short KNOWN_ATTRIBUTES = 20;
+  public static final short KNOWN_ATTRIBUTES = 22;
 
   // TOFO: FIXXXXX
   public static final String[] ATTRIBUTE_NAMES = {
@@ -126,7 +128,8 @@ public interface Constants {
     "PMGClass", "Signature", "StackMap",
     "RuntimeVisibleAnnotations", "RuntimeInvisibleAnnotations",
     "RuntimeVisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations",
-    "AnnotationDefault", "LocalVariableTypeTable", "EnclosingMethod", "StackMapTable"
+    "AnnotationDefault", "LocalVariableTypeTable", "EnclosingMethod", "StackMapTable",
+    "BootstrapMethods", "MethodParameters"
   };
 
   /** Constants used in the StackMap attribute.

==================================================
AnnotationElementValue.java
index 805cd88da3..189469e2fe 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -24,7 +24,7 @@ import java.io.IOException;
  * represents the default value of a annotation for a method info
  *
  * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class AnnotationDefault extends Attribute
 {

==================================================
AnnotationEntry.java
index 44cad4c665..3bfd98e45d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -26,9 +26,10 @@ public class AnnotationElementValue extends ElementValue
             ConstantPool cpool)
     {
         super(type, cpool);
-        if (type != ANNOTATION)
+        if (type != ANNOTATION) {
             throw new RuntimeException(
                     "Only element values of type annotation can be built with this ctor - type specified: " + type);
+        }
         this.annotationEntry = annotationEntry;
     }
 

==================================================
Annotations.java
index 3e7b209f02..c3583a6bda 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -28,7 +28,7 @@ import org.apache.tomcat.util.bcel.Constants;
  * represents one annotation in the annotation table
  *
  * @author  <A HREF="mailto:dbrosius@mebigfatguy.com">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class AnnotationEntry implements Constants {
 

==================================================
ArrayElementValue.java
index 624e0952fc..1f5b955f70 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -24,7 +24,7 @@ import java.io.IOException;
  * base class for annotations
  *
  * @author  <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public abstract class Annotations extends Attribute {
 

==================================================
Attribute.java
index a891a4c81f..72045001c0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -25,9 +25,10 @@ public class ArrayElementValue extends ElementValue
     public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
     {
         super(type, cpool);
-        if (type != ARRAY)
+        if (type != ARRAY) {
             throw new RuntimeException(
                     "Only element values of type array can be built with this ctor - type specified: " + type);
+        }
         this.evalues = datums;
     }
 
@@ -39,8 +40,9 @@ public class ArrayElementValue extends ElementValue
         for (int i = 0; i < evalues.length; i++)
         {
             sb.append(evalues[i].stringifyValue());
-            if ((i + 1) < evalues.length)
+            if ((i + 1) < evalues.length) {
                 sb.append(",");
+            }
         }
         sb.append("]");
         return sb.toString();

==================================================
ClassParser.java
index a2c298c965..eb1617b26e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -132,13 +132,13 @@ public abstract class Attribute implements Cloneable, Serializable
         case Constants.ATTR_RUNTIME_VISIBLE_ANNOTATIONS:
             return new RuntimeVisibleAnnotations(name_index, length, file,
                     constant_pool);
-        case Constants.ATTR_RUNTIMEIN_VISIBLE_ANNOTATIONS:
+        case Constants.ATTR_RUNTIME_INVISIBLE_ANNOTATIONS:
             return new RuntimeInvisibleAnnotations(name_index, length, file,
                     constant_pool);
         case Constants.ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS:
             return new RuntimeVisibleParameterAnnotations(name_index, length,
                     file, constant_pool);
-        case Constants.ATTR_RUNTIMEIN_VISIBLE_PARAMETER_ANNOTATIONS:
+        case Constants.ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS:
             return new RuntimeInvisibleParameterAnnotations(name_index, length,
                     file, constant_pool);
         case Constants.ATTR_ANNOTATION_DEFAULT:
@@ -152,6 +152,12 @@ public abstract class Attribute implements Cloneable, Serializable
         case Constants.ATTR_STACK_MAP_TABLE:
             Utility.swallowStackMapTable(file);
             return null;
+        case Constants.ATTR_BOOTSTRAP_METHODS:
+            Utility.swallowBootstrapMethods(file);
+            return null;
+        case Constants.ATTR_METHOD_PARAMETERS:
+            Utility.swallowMethodParameters(file);
+            return null;
         default: // Never reached
             throw new IllegalStateException("Unrecognized attribute type tag parsed: " + tag);
         }

==================================================
Code.java
index 1dbd63a55c..6e51d3b6b3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -127,7 +127,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readAttributes() throws IOException, ClassFormatException {
+    private void readAttributes() throws IOException, ClassFormatException {
         int attributes_count;
         attributes_count = file.readUnsignedShort();
         attributes = new Attribute[attributes_count];
@@ -142,7 +142,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readClassInfo() throws IOException, ClassFormatException {
+    private void readClassInfo() throws IOException, ClassFormatException {
         access_flags = file.readUnsignedShort();
         /* Interfaces are implicitely abstract, the flag should be set
          * according to the JVM specification.
@@ -164,7 +164,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readConstantPool() throws IOException, ClassFormatException {
+    private void readConstantPool() throws IOException, ClassFormatException {
         constant_pool = new ConstantPool(file);
     }
 
@@ -174,7 +174,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readFields() throws IOException, ClassFormatException {
+    private void readFields() throws IOException, ClassFormatException {
         int fields_count;
         fields_count = file.readUnsignedShort();
         fields = new FieldOrMethod[fields_count];
@@ -191,7 +191,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readID() throws IOException, ClassFormatException {
+    private void readID() throws IOException, ClassFormatException {
         if (file.readInt() != MAGIC) {
             throw new ClassFormatException(file_name + " is not a Java .class file");
         }
@@ -203,7 +203,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readInterfaces() throws IOException, ClassFormatException {
+    private void readInterfaces() throws IOException, ClassFormatException {
         int interfaces_count;
         interfaces_count = file.readUnsignedShort();
         interfaces = new int[interfaces_count];
@@ -218,7 +218,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readMethods() throws IOException, ClassFormatException {
+    private void readMethods() throws IOException, ClassFormatException {
         int methods_count;
         methods_count = file.readUnsignedShort();
         methods = new FieldOrMethod[methods_count];
@@ -233,7 +233,7 @@ public final class ClassParser {
      * @throws  IOException
      * @throws  ClassFormatException
      */
-    private final void readVersion() throws IOException, ClassFormatException {
+    private void readVersion() throws IOException, ClassFormatException {
         file.readUnsignedShort();   // Unused minor
         file.readUnsignedShort();   // Unused major
     }

==================================================
Constant.java
index a7e3e8d2e3..c04504a975 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -105,7 +105,7 @@ public final class Code extends Attribute {
      * @return the internal length of this code attribute (minus the first 6 bytes)
      * and excluding all its attributes
      */
-    private final int getInternalLength() {
+    private int getInternalLength() {
         return 2 /*max_stack*/+ 2 /*max_locals*/+ 4 /*code length*/
                 + code_length /*byte-code*/
                 + 2 /*exception-table length*/
@@ -118,7 +118,7 @@ public final class Code extends Attribute {
      * @return the full size of this code attribute, minus its first 6 bytes,
      * including the size of all its contained attributes
      */
-    private final int calculateLength() {
+    private int calculateLength() {
         int len = 0;
         for (int i = 0; i < attributes_count; i++) {
             len += attributes[i].length + 6 /*attribute header size*/;

==================================================
ConstantPool.java
index 889f70e0ea..dbc3c609fc 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -76,9 +76,9 @@ public abstract class Constant implements Cloneable, Serializable {
 
 
     @Override
-    public Constant clone() {
+    public Object clone() {
         try {
-            return (Constant) super.clone();
+            return super.clone();
         } catch (CloneNotSupportedException e) {
             throw new Error("Clone Not Supported"); // never happens
         }
@@ -91,7 +91,7 @@ public abstract class Constant implements Cloneable, Serializable {
      * @param file Input stream
      * @return Constant object
      */
-    static final Constant readConstant( DataInputStream file ) throws IOException,
+    static Constant readConstant( DataInputStream file ) throws IOException,
             ClassFormatException {
         byte b = file.readByte(); // Read tag byte
         switch (b) {

==================================================
ElementValue.java
index d9931c3366..8a869fa64a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -128,7 +128,7 @@ public class ConstantPool implements Cloneable, Serializable {
     }
 
 
-    private static final String escape( String str ) {
+    private static String escape( String str ) {
         int len = str.length();
         StringBuilder buf = new StringBuilder(len + 5);
         char[] ch = str.toCharArray();

==================================================
ElementValuePair.java
index da783537fc..79bdfc3427 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -22,7 +22,7 @@ import java.io.IOException;
 
 /**
  * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public abstract class ElementValue
 {

==================================================
JavaClass.java
index 9795017ced..54c829378d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
@@ -23,7 +23,7 @@ import org.apache.tomcat.util.bcel.Constants;
  * an annotation's element value pair
  *
  * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class ElementValuePair
 {

==================================================
LocalVariableTypeTable.java
index 961be29108..1034a1a4e3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -116,8 +116,7 @@ public class JavaClass extends AccessFlags
         if (annotationsOutOfDate) {
             // Find attributes that contain annotation data
             List<AnnotationEntry> accumulatedAnnotations = new ArrayList<>();
-            for (int i = 0; i < attributes.length; i++) {
-                Attribute attribute = attributes[i];
+            for (Attribute attribute : attributes) {
                 if (attribute instanceof Annotations) {
                     Annotations runtimeAnnotations = (Annotations)attribute;
                     for(int j = 0; j < runtimeAnnotations.getAnnotationEntries().length; j++)

==================================================
ParameterAnnotationEntry.java
index ea9b1abcde..43c0fb81d3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -56,7 +56,8 @@ public class LocalVariableTypeTable extends Attribute {
 
         int local_variable_type_table_length = (dis.readUnsignedShort());
 
-        for(int i=0; i < local_variable_type_table_length; i++)
+        for(int i=0; i < local_variable_type_table_length; i++) {
             Utility.swallowLocalVariable(dis);
+        }
     }
 }

==================================================
ParameterAnnotations.java
index cbd6a1f130..cbb87df040 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotationEntry.java
@@ -26,7 +26,7 @@ import org.apache.tomcat.util.bcel.Constants;
  * represents one parameter annotation in the parameter annotation table
  *
  * @author  <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class ParameterAnnotationEntry implements Constants {
 

==================================================
RuntimeInvisibleAnnotations.java
index c2f80ef814..9ae1ddfe41 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
@@ -24,7 +24,7 @@ import java.io.IOException;
  * base class for parameter annotations
  *
  * @author  <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public abstract class ParameterAnnotations extends Attribute {
 

==================================================
RuntimeInvisibleParameterAnnotations.java
index 5ee8558b88..2c275b6f82 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
@@ -25,7 +25,7 @@ import java.io.IOException;
  * provided to the JVM.
  *
  * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class RuntimeInvisibleAnnotations extends Annotations
 {

==================================================
RuntimeVisibleAnnotations.java
index 58dba20821..2ff1aa5a1a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
@@ -25,7 +25,7 @@ import java.io.IOException;
  * but is not provided to the JVM.
  *
  * @author  <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class RuntimeInvisibleParameterAnnotations extends ParameterAnnotations {
 

==================================================
RuntimeVisibleParameterAnnotations.java
index 666022532f..f0dbf4ccdd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
@@ -25,7 +25,7 @@ import java.io.IOException;
  * provided to the JVM.
  *
  * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class RuntimeVisibleAnnotations extends Annotations
 {

==================================================
Utility.java
index 97cef2a041..44837fd6a8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
@@ -25,7 +25,7 @@ import java.io.IOException;
  * and is provided to the JVM.
  *
  * @author  <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 5.3
+ * @since 6.0
  */
 public class RuntimeVisibleParameterAnnotations extends ParameterAnnotations {
 

==================================================
