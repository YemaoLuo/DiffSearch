8d7ff10719b7a8da26f5c85b60cede6786022df3
==================================================
Align implementation with new name in spec WsProtocolHandler -> WsHttpUpgradeHanlder
==================================================
Mark Emlyn
==================================================
Wed Mar 20 09:58:07 2013 +0000
==================================================
HttpServletRequest.java
Align implementation with new name in spec WsProtocolHandler -> WsHttpUpgradeHanlder
Align implementation with new HttpServletRequest.upgrade() method

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458710 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequestWrapper.java
index bb541e2292..3ccda5d9e6 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -512,5 +512,6 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.1
      */
-    public void upgrade(HttpUpgradeHandler handler) throws java.io.IOException;
+    public <T extends HttpUpgradeHandler> T upgrade(
+            Class<T> httpUpgradeHandlerClass) throws java.io.IOException;
 }

==================================================
HttpUpgradeHandler.java
index 9abc33bd32..e7328901e2 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -364,13 +364,13 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * {@inheritDoc}
      * <p>
      * The default behavior of this method is to return
-     * {@link HttpServletRequest#upgrade(HttpUpgradeHandler)}
-     * on the wrapped request object.
+     * {@link HttpServletRequest#upgrade(Class)} on the wrapped request object.
      *
      * @since Servlet 3.1
      */
     @Override
-    public void upgrade(HttpUpgradeHandler handler) throws java.io.IOException {
-        this._getHttpServletRequest().upgrade(handler);
+    public <T extends HttpUpgradeHandler> T upgrade(
+            Class<T> httpUpgradeHandlerClass) throws IOException {
+        return this._getHttpServletRequest().upgrade(httpUpgradeHandlerClass);
     }
 }

==================================================
Request.java
index c4beb4175c..095200cd39 100644
--- a/java/javax/servlet/http/HttpUpgradeHandler.java
+++ b/java/javax/servlet/http/HttpUpgradeHandler.java
@@ -25,13 +25,18 @@ public interface HttpUpgradeHandler {
 
     /**
      * This method is called once the request/response pair where
-     * {@link HttpServletRequest#upgrade(HttpUpgradeHandler)} is called has
-     * completed processing and is the point where control of the connection
-     * passes from the container to the {@link HttpUpgradeHandler}.
+     * {@link HttpServletRequest#upgrade(Class)} is called has completed
+     * processing and is the point where control of the connection passes from
+     * the container to the {@link HttpUpgradeHandler}.
      *
      * @param connection    The connection that has been upgraded
      *
      * @since Servlet 3.1
      */
     void init(WebConnection connection);
+
+    /**
+     * This method is called after the upgraded connection has been closed.
+     */
+    void destroy();
 }

==================================================
RequestFacade.java
index 4293cf8bd8..5009acdd76 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1885,13 +1885,24 @@ public class Request
      * @since Servlet 3.1
      */
     @Override
-    public void upgrade(HttpUpgradeHandler handler) throws IOException {
+    public <T extends HttpUpgradeHandler> T upgrade(
+            Class<T> httpUpgradeHandlerClass) throws java.io.IOException {
+
+        T handler;
+        try {
+            handler = httpUpgradeHandlerClass.newInstance();
+        } catch (InstantiationException | IllegalAccessException e) {
+            throw new IOException(e);
+        }
+
         coyoteRequest.action(ActionCode.UPGRADE, handler);
 
         // Output required by RFC2616. Protocol specific headers should have
         // already been set.
         response.setStatus(HttpServletResponse.SC_SWITCHING_PROTOCOLS);
         response.flushBuffer();
+
+        return handler;
     }
 
     /**

==================================================
AbstractProtocol.java
index 2695d41c34..9c440033cf 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -1112,7 +1112,8 @@ public class RequestFacade implements HttpServletRequest {
      * @since Servlet 3.1
      */
     @Override
-    public void upgrade(HttpUpgradeHandler handler) throws IOException {
-        request.upgrade(handler);
+    public <T extends HttpUpgradeHandler> T upgrade(
+            Class<T> httpUpgradeHandlerClass) throws java.io.IOException {
+        return request.upgrade(httpUpgradeHandlerClass);
     }
 }

==================================================
WsHttpUpgradeHandler.java
index f6f61d9cbf..ea6f78c16b 100644
--- a/java/org/apache/tomcat/websocket/server/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
@@ -24,4 +24,6 @@ serverContainer.servletContextMissing=No ServletContext was specified
 
 uriTemplate.noMatch=The input template [{0}] generated the pattern [{1}] which did not match the supplied pathInfo [{2}]
 
+wsHttpUpgradeHandler.noPreInit=The preInit() method must be called to configure the WebSocket HttpUpgradeHandler before the container calls init(). Usually, this means the Servlet that created the WsHttpUpgradeHandler instance should also call preInit()
+
 wsRemoteEndpointServer.closeFailed=Failed to close the ServletOutputStream connection cleanly
\ No newline at end of file

==================================================
WsRemoteEndpointImplServer.java
similarity index 86%
rename from java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
rename to java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
index 46ef6987e8..d35808737f 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -32,27 +32,37 @@ import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfig;
 
+import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.WsIOException;
 import org.apache.tomcat.websocket.WsSession;
 
 /**
  * Servlet 3.1 HTTP upgrade handler for WebSocket connections.
  */
-public class WsProtocolHandler implements HttpUpgradeHandler {
+public class WsHttpUpgradeHandler implements HttpUpgradeHandler {
 
-    private final Endpoint ep;
-    private final EndpointConfig endpointConfig;
     private final ClassLoader applicationClassLoader;
-    private final WsServerContainer webSocketContainer;
-    private final WsHandshakeRequest handshakeRequest;
-    private final String subProtocol;
-    private final Map<String,String> pathParameters;
-    private final boolean secure;
+
+    private Endpoint ep;
+    private EndpointConfig endpointConfig;
+    private WsServerContainer webSocketContainer;
+    private WsHandshakeRequest handshakeRequest;
+    private String subProtocol;
+    private Map<String,String> pathParameters;
+    private boolean secure;
 
     private WsSession wsSession;
 
+    private static final StringManager sm =
+            StringManager.getManager(Constants.PACKAGE_NAME);
+
 
-    public WsProtocolHandler(Endpoint ep, EndpointConfig endpointConfig,
+    public WsHttpUpgradeHandler() {
+        applicationClassLoader = Thread.currentThread().getContextClassLoader();
+    }
+
+
+    public void preInit(Endpoint ep, EndpointConfig endpointConfig,
             WsServerContainer wsc, WsHandshakeRequest handshakeRequest,
             String subProtocol, Map<String,String> pathParameters,
             boolean secure) {
@@ -63,12 +73,16 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
         this.subProtocol = subProtocol;
         this.pathParameters = pathParameters;
         this.secure = secure;
-        applicationClassLoader = Thread.currentThread().getContextClassLoader();
     }
 
 
     @Override
     public void init(WebConnection connection) {
+        if (ep == null) {
+            throw new IllegalStateException(
+                    sm.getString("wsHttpUpgradeHandler.noPreInit"));
+        }
+
         ServletInputStream sis;
         ServletOutputStream sos;
         try {
@@ -110,6 +124,12 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
     }
 
 
+    @Override
+    public void destroy() {
+        // NO-OP
+    }
+
+
     private void onError(Throwable throwable) {
         // Need to call onError using the web application's class loader
         Thread t = Thread.currentThread();
@@ -138,11 +158,11 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
 
     private static class WsReadListener implements ReadListener {
 
-        private final WsProtocolHandler wsProtocolHandler;
+        private final WsHttpUpgradeHandler wsProtocolHandler;
         private final WsFrameServer wsFrame;
 
 
-        private WsReadListener(WsProtocolHandler wsProtocolHandler,
+        private WsReadListener(WsHttpUpgradeHandler wsProtocolHandler,
                 WsFrameServer wsFrame) {
             this.wsProtocolHandler = wsProtocolHandler;
             this.wsFrame = wsFrame;
@@ -181,10 +201,10 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
 
     private static class WsWriteListener implements WriteListener {
 
-        private final WsProtocolHandler wsProtocolHandler;
+        private final WsHttpUpgradeHandler wsProtocolHandler;
         private final WsRemoteEndpointImplServer wsRemoteEndpointServer;
 
-        private WsWriteListener(WsProtocolHandler wsProtocolHandler,
+        private WsWriteListener(WsHttpUpgradeHandler wsProtocolHandler,
                 WsRemoteEndpointImplServer wsRemoteEndpointServer) {
             this.wsProtocolHandler = wsProtocolHandler;
             this.wsRemoteEndpointServer = wsRemoteEndpointServer;

==================================================
WsServlet.java
index e2c0e2b329..e325af2c36 100644
--- a/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java
+++ b/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java
@@ -39,7 +39,7 @@ public class WsRemoteEndpointImplServer extends WsRemoteEndpointImplBase {
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
     private static final Log log =
-            LogFactory.getLog(WsProtocolHandler.class);
+            LogFactory.getLog(WsHttpUpgradeHandler.class);
 
     private final ServletOutputStream sos;
     private final WsWriteTimeout wsWriteTimeout;

==================================================
TestUpgrade.java
index a5aa06aecc..68e622a358 100644
--- a/java/org/apache/tomcat/websocket/server/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/server/WsServlet.java
@@ -34,7 +34,6 @@ import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpUpgradeHandler;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
 import javax.websocket.server.ServerEndpointConfig;
@@ -155,9 +154,10 @@ public class WsServlet extends HttpServlet {
             }
         }
 
-        HttpUpgradeHandler wsHandler = new WsProtocolHandler(ep, sec, sc,
-                wsRequest, subProtocol, pathParameters, req.isSecure());
-        req.upgrade(wsHandler);
+        WsHttpUpgradeHandler wsHandler =
+                req.upgrade(WsHttpUpgradeHandler.class);
+        wsHandler.preInit(ep, sec, sc, wsRequest, subProtocol, pathParameters,
+                req.isSecure());
     }
 
 

==================================================
