a34bf2d74d0aaf78ea2027c68a5df0838f2bf514
==================================================
Refactoring (with a longer term aim of aligning HTTP/1.1 and HTTP/2 to enable reuse)
==================================================
Mark Thomas
==================================================
Tue Nov 28 11:38:48 2017 +0000
==================================================
OutputFilter.java
Refactoring (with a longer term aim of aligning HTTP/1.1 and HTTP/2 to enable reuse)
- Remove unused return value from end()
- Remove duplicated Javadoc
- Clean-up extra blank lines


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816538 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ChunkedOutputFilter.java
index f2549e569b..2f7d5b1082 100644
--- a/java/org/apache/coyote/http11/OutputFilter.java
+++ b/java/org/apache/coyote/http11/OutputFilter.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.coyote.http11;
 
 import java.io.IOException;
@@ -29,7 +28,6 @@ import org.apache.coyote.Response;
  */
 public interface OutputFilter extends OutputBuffer {
 
-
     /**
      * Some filters need additional parameters from the response. All the
      * necessary reading can occur in that method, as this method is called
@@ -58,12 +56,7 @@ public interface OutputFilter extends OutputBuffer {
      * End the current request. It is acceptable to write extra bytes using
      * buffer.doWrite during the execution of this method.
      *
-     * @return Should return 0 unless the filter does some content length
-     * delimitation, in which case the number is the amount of extra bytes or
-     * missing bytes, which would indicate an error.
-     * Note: It is recommended that extra bytes be swallowed by the filter.
-     *
      * @throws IOException If an I/O error occurs while writing to the client
      */
-    public long end() throws IOException;
+    public void end() throws IOException;
 }

==================================================
GzipOutputFilter.java
index 929dd5d29e..6631907861 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
@@ -139,32 +139,20 @@ public class ChunkedOutputFilter implements OutputFilter {
 
     // --------------------------------------------------- OutputFilter Methods
 
-    /**
-     * Some filters need additional parameters from the response. All the
-     * necessary reading can occur in that method, as this method is called
-     * after the response header processing is complete.
-     */
     @Override
     public void setResponse(Response response) {
         this.response = response;
     }
 
 
-    /**
-     * Set the next buffer in the filter pipeline.
-     */
     @Override
     public void setBuffer(OutputBuffer buffer) {
         this.buffer = buffer;
     }
 
 
-    /**
-     * End the current request. It is acceptable to write extra bytes using
-     * buffer.doWrite during the execution of this method.
-     */
     @Override
-    public long end() throws IOException {
+    public void end() throws IOException {
 
         Supplier<Map<String,String>> trailerFieldsSupplier = response.getTrailerFields();
         Map<String,String> trailerFields = null;
@@ -201,14 +189,9 @@ public class ChunkedOutputFilter implements OutputFilter {
             buffer.doWrite(crlfChunk);
             crlfChunk.position(0).limit(crlfChunk.capacity());
         }
-
-        return 0;
     }
 
 
-    /**
-     * Make the filter ready to process the next request.
-     */
     @Override
     public void recycle() {
         response = null;

==================================================
IdentityOutputFilter.java
index c84f61369a..b5da07d8d6 100644
--- a/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
@@ -35,13 +34,11 @@ import org.apache.juli.logging.LogFactory;
  */
 public class GzipOutputFilter implements OutputFilter {
 
-
     protected static final Log log = LogFactory.getLog(GzipOutputFilter.class);
 
 
     // ----------------------------------------------------- Instance Variables
 
-
     /**
      * Next buffer in the pipeline.
      */
@@ -105,39 +102,27 @@ public class GzipOutputFilter implements OutputFilter {
         }
     }
 
-    /**
-     * Some filters need additional parameters from the response. All the
-     * necessary reading can occur in that method, as this method is called
-     * after the response header processing is complete.
-     */
+
     @Override
     public void setResponse(Response response) {
         // NOOP: No need for parameters from response in this filter
     }
 
 
-    /**
-     * Set the next buffer in the filter pipeline.
-     */
     @Override
     public void setBuffer(OutputBuffer buffer) {
         this.buffer = buffer;
     }
 
 
-    /**
-     * End the current request. It is acceptable to write extra bytes using
-     * buffer.doWrite during the execution of this method.
-     */
     @Override
-    public long end()
-        throws IOException {
+    public void end() throws IOException {
         if (compressionStream == null) {
             compressionStream = new GZIPOutputStream(fakeOutputStream, true);
         }
         compressionStream.finish();
         compressionStream.close();
-        return ((OutputFilter) buffer).end();
+        ((OutputFilter) buffer).end();
     }
 
 

==================================================
VoidOutputFilter.java
index 148641b13e..5bf06e6f91 100644
--- a/java/org/apache/coyote/http11/filters/IdentityOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityOutputFilter.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
@@ -31,10 +30,8 @@ import org.apache.coyote.http11.OutputFilter;
  */
 public class IdentityOutputFilter implements OutputFilter {
 
-
     // ----------------------------------------------------- Instance Variables
 
-
     /**
      * Content length.
      */
@@ -101,12 +98,6 @@ public class IdentityOutputFilter implements OutputFilter {
 
     // --------------------------------------------------- OutputFilter Methods
 
-
-    /**
-     * Some filters need additional parameters from the response. All the
-     * necessary reading can occur in that method, as this method is called
-     * after the response header processing is complete.
-     */
     @Override
     public void setResponse(Response response) {
         contentLength = response.getContentLengthLong();
@@ -114,33 +105,18 @@ public class IdentityOutputFilter implements OutputFilter {
     }
 
 
-    /**
-     * Set the next buffer in the filter pipeline.
-     */
     @Override
     public void setBuffer(OutputBuffer buffer) {
         this.buffer = buffer;
     }
 
 
-    /**
-     * End the current request. It is acceptable to write extra bytes using
-     * buffer.doWrite during the execution of this method.
-     */
     @Override
-    public long end()
-        throws IOException {
-
-        if (remaining > 0)
-            return remaining;
-        return 0;
-
+    public void end() throws IOException {
+        // NO-OP
     }
 
 
-    /**
-     * Make the filter ready to process the next request.
-     */
     @Override
     public void recycle() {
         contentLength = -1;

==================================================
