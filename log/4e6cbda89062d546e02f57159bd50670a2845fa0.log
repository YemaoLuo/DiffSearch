4e6cbda89062d546e02f57159bd50670a2845fa0
==================================================
Update the WebSocket API to v011 of the JSR 356 draft
==================================================
Mark Emlyn
==================================================
Sat Dec 22 22:08:35 2012 +0000
==================================================
ClientEndpointConfiguration.java
Update the WebSocket API to v011 of the JSR 356 draft

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1425352 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerProvider.java
index c9127df084..428a8d9d64 100644
--- a/java/javax/websocket/ClientEndpointConfiguration.java
+++ b/java/javax/websocket/ClientEndpointConfiguration.java
@@ -17,6 +17,7 @@
 package javax.websocket;
 
 import java.util.List;
+import java.util.Map;
 
 public interface ClientEndpointConfiguration extends EndpointConfiguration {
 
@@ -24,7 +25,7 @@ public interface ClientEndpointConfiguration extends EndpointConfiguration {
 
     List<String> getExtensions();
 
-    void beforeRequest(HandshakeRequest handshakeRequest);
+    void beforeRequest(Map<String, List<String>> headers);
 
     void afterResponse(HandshakeResponse handshakeResponse);
 }

==================================================
DefaultClientConfiguration.java
index 054bc450f6..121b29330d 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -16,45 +16,17 @@
  */
 package javax.websocket;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
 /**
  * Provides access to the implementation. This version of the API is hard-coded
  * to use the Apache Tomcat WebSocket implementation.
  */
 public class ContainerProvider {
 
-    private static final String CONTAINER_PROVIDER_IMPL =
-            "org.apache.tomcat.websocket.ServerContainerImpl";
-
-    /**
-     * Obtain a reference to the Server container used for processing incoming
-     * WebSocket connections.
-     */
-    public static ServerContainer getServerContainer() {
-        // Note: No special handling required when running under a
-        //       SecurityManager as the container provider implementation and
-        //       this class have the same class loader.
-        ServerContainer result = null;
-        try {
-            Class<?> clazz = Class.forName(CONTAINER_PROVIDER_IMPL);
-            Method m = clazz.getMethod("getServerContainer", (Class<?>[]) null);
-            result = (ServerContainer) m.invoke(null, (Object[]) null);
-        } catch (ClassNotFoundException | NoSuchMethodException |
-                SecurityException | IllegalAccessException |
-                IllegalArgumentException | InvocationTargetException e) {
-            e.printStackTrace();
-        }
-
-        return result;
-    }
-
     /**
      * Obtain a reference to the ClientContainer used to create outgoing
      * WebSocket connections.
      */
-    public static ClientContainer getClientContainer() {
+    public static WebSocketContainer getClientContainer() {
         return null;
     }
 }

==================================================
Endpoint.java
index b0c7fcd175..813dbb83b0 100644
--- a/java/javax/websocket/DefaultClientConfiguration.java
+++ b/java/javax/websocket/DefaultClientConfiguration.java
@@ -18,6 +18,7 @@ package javax.websocket;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 public class DefaultClientConfiguration implements ClientEndpointConfiguration {
     private List<String> preferredSubprotocols = new ArrayList<>();
@@ -68,7 +69,7 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
     }
 
     @Override
-    public void beforeRequest(HandshakeRequest handshakeRequest) {
+    public void beforeRequest(Map<String, List<String>> headers) {
         // NO-OP
     }
 

==================================================
Extension.java
index f73095b05d..553c7bd265 100644
--- a/java/javax/websocket/Endpoint.java
+++ b/java/javax/websocket/Endpoint.java
@@ -23,23 +23,25 @@ public abstract class Endpoint {
      *
      * @param session   The new session.
      */
-    public abstract void onOpen(Session session);
+    public abstract void onOpen(Session session, EndpointConfiguration config);
 
     /**
      * Event that is triggered when a session has closed.
      *
+     * @param session       The session
      * @param closeReason   Why the session was closed
      */
-    public void onClose(CloseReason closeReason) {
+    public void onClose(Session session, CloseReason closeReason) {
         // NO-OP by default
     }
 
     /**
      * Event that is triggered when a protocol error occurs.
      *
+     * @param session   The session
      * @param throwable The exception
      */
-    public void onError(Throwable throwable) {
+    public void onError(Session session, Throwable throwable) {
         // NO-OP by default
     }
 }

==================================================
HandshakeResponse.java
new file mode 100644
index 0000000000..ade2f9a055
--- /dev/null
+++ b/java/javax/websocket/Extension.java
@@ -0,0 +1,24 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.websocket;
+
+import java.util.Map;
+
+public interface Extension {
+    String getName();
+    Map<String,String> getParameters();
+}

==================================================
RemoteEndpoint.java
index 07e9df9637..898993a4ea 100644
--- a/java/javax/websocket/HandshakeResponse.java
+++ b/java/javax/websocket/HandshakeResponse.java
@@ -21,5 +21,8 @@ import java.util.Map;
 
 public interface HandshakeResponse {
 
+    public static final String SEC_WEBSOCKET_ACCEPT =
+            "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
+
     Map<String,List<String>> getHeaders();
 }

==================================================
ServerContainer.java
index 7dba1e1cb3..586d918d6d 100644
--- a/java/javax/websocket/RemoteEndpoint.java
+++ b/java/javax/websocket/RemoteEndpoint.java
@@ -25,6 +25,12 @@ import java.util.concurrent.Future;
 
 public interface RemoteEndpoint {
 
+    void setBatchingAllowed(boolean batchingAllowed);
+    boolean getBatchingAllowed();
+    void flushBatch();
+    long getAsyncSendTimeout();
+    void setAsyncSendTimeout(long timeout);
+
     /**
      * Send the message, blocking until the message is sent.
      * @param text  The text message to send.

==================================================
Session.java
deleted file mode 100644
index c6a021609e..0000000000
--- a/java/javax/websocket/ServerContainer.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket;
-
-/**
- * Defines the additional server specific methods.
- */
-public interface ServerContainer extends ClientContainer {
-
-    /**
-     * Publish the Endpoint associated with the given configuration in this
-     * ServerContainer.
-     *
-     * @param clazz The configuration class for the Endpoint
-     *
-     * @throws DeploymentException  If the publish process fails for any reason
-     */
-    void publishServer(
-            Class<? extends ServerEndpointConfiguration<?>> clazz)
-            throws DeploymentException;
-}

==================================================
WebSocketContainer.java
index a981601160..e949315239 100644
--- a/java/javax/websocket/Session.java
+++ b/java/javax/websocket/Session.java
@@ -18,15 +18,17 @@ package javax.websocket;
 
 import java.io.IOException;
 import java.net.URI;
+import java.security.Principal;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 public interface Session {
 
-    ClientContainer getContainer();
+    WebSocketContainer getContainer();
 
-    void addMessageHandler(MessageHandler listener);
+    void addMessageHandler(MessageHandler listener)
+            throws IllegalStateException;
 
     Set<MessageHandler> getMessageHandlers();
 
@@ -40,8 +42,6 @@ public interface Session {
 
     boolean isSecure();
 
-    long getInactiveTime();
-
     boolean isOpen();
 
     long getTimeout();
@@ -54,6 +54,8 @@ public interface Session {
 
     RemoteEndpoint getRemote();
 
+    String getId();
+
     /**
      * Close the connection to the remote end point using the code
      * {@link javax.websocket.CloseReason.CloseCodes#NORMAL_CLOSURE} and an
@@ -74,11 +76,13 @@ public interface Session {
 
     URI getRequestURI();
 
-    Map<String, String[]> getRequestParameterMap();
+    Map<String, List<String>> getRequestParameterMap();
 
     String getQueryString();
 
     Map<String,String> getPathParameters();
 
     Map<String,Object> getUserProperties();
+
+    Principal getUserPrincipal();
 }

==================================================
DefaultServerConfiguration.java
similarity index 81%
rename from java/javax/websocket/ClientContainer.java
rename to java/javax/websocket/WebSocketContainer.java
index 8ccfd683df..bafbb044bb 100644
--- a/java/javax/websocket/ClientContainer.java
+++ b/java/javax/websocket/WebSocketContainer.java
@@ -19,12 +19,16 @@ package javax.websocket;
 import java.net.URI;
 import java.util.Set;
 
-public interface ClientContainer {
+public interface WebSocketContainer {
 
-    Session connectToServer(Object endpoint, URI path)
+    long getDefaultAsyncSendTimeout();
+
+    void setAsyncSendTimeout(long timeout);
+
+    Session connectToServer(Class<?> annotatedEndpointClass, URI path)
             throws DeploymentException;
 
-    Session connectToServer(Endpoint endpoint,
+    Session connectToServer(Class<? extends Endpoint> endpoint,
             ClientEndpointConfiguration clientEndpointConfiguration, URI path)
             throws DeploymentException;
 
@@ -42,5 +46,5 @@ public interface ClientContainer {
 
     void setMaxTextMessageBufferSize(long max);
 
-    Set<String> getInstalledExtensions();
+    Set<Extension> getInstalledExtensions();
 }

==================================================
HandshakeRequest.java
similarity index 60%
rename from java/javax/websocket/DefaultServerConfiguration.java
rename to java/javax/websocket/server/DefaultServerConfiguration.java
index 359604def6..861e9a05f0 100644
--- a/java/javax/websocket/DefaultServerConfiguration.java
+++ b/java/javax/websocket/server/DefaultServerConfiguration.java
@@ -14,59 +14,65 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.websocket;
+package javax.websocket.server;
 
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 
-public class DefaultServerConfiguration<T>
-        implements ServerEndpointConfiguration<T> {
+import javax.websocket.Decoder;
+import javax.websocket.Encoder;
+import javax.websocket.Endpoint;
+import javax.websocket.Extension;
+import javax.websocket.HandshakeResponse;
 
+public class DefaultServerConfiguration implements ServerEndpointConfiguration {
+
+    private Class<? extends Endpoint> endpointClass;
     private String path;
-    @SuppressWarnings("unused") // TODO Remove this once implemented
     private List<String> subprotocols = new ArrayList<>();
-    @SuppressWarnings("unused") // TODO Remove this once implemented
-    private List<String> extensions = new ArrayList<>();
+    private List<Extension> extensions = new ArrayList<>();
     private List<Encoder> encoders = new ArrayList<>();
     private List<Decoder> decoders = new ArrayList<>();
 
-    protected DefaultServerConfiguration() {
-    }
-
-    @Override
-    public EndpointFactory<T> getEndpointFactory() {
-        // TODO
-        return null;
-    }
-
-    public DefaultServerConfiguration(String path) {
+    public DefaultServerConfiguration(Class<? extends Endpoint> endpointClass,
+            String path) {
+        this.endpointClass = endpointClass;
         this.path = path;
     }
 
-    public DefaultServerConfiguration<T> setEncoders(List<Encoder> encoders) {
-        this.encoders = encoders;
+    public DefaultServerConfiguration setEncoders(List<Encoder> encoders) {
+        this.encoders.clear();
+        this.encoders.addAll(encoders);
         return this;
     }
 
-    public DefaultServerConfiguration<T> setDecoders(List<Decoder> decoders) {
-        this.decoders = decoders;
+    public DefaultServerConfiguration setDecoders(List<Decoder> decoders) {
+        this.decoders.clear();
+        this.decoders.addAll(decoders);
         return this;
     }
 
-    public DefaultServerConfiguration<T> setSubprotocols(
+    public DefaultServerConfiguration setSubprotocols(
             List<String> subprotocols) {
-        this.subprotocols = subprotocols;
+        this.subprotocols.clear();
+        this.subprotocols.addAll(subprotocols);
         return this;
     }
 
-    public DefaultServerConfiguration<T> setExtensions(
-            List<String> extensions) {
-        this.extensions = extensions;
+    public DefaultServerConfiguration setExtensions(
+            List<Extension> extensions) {
+        this.extensions.clear();
+        this.extensions.addAll(extensions);
         return this;
     }
 
 
+    @Override
+    public Class<? extends Endpoint> getEndpointClass() {
+        return endpointClass;
+    }
+
     @Override
     public List<Encoder> getEncoders() {
         return this.encoders;
@@ -89,16 +95,15 @@ public class DefaultServerConfiguration<T>
     }
 
     @Override
-    public List<String> getNegotiatedExtensions(
-            List<String> requestedExtensions) {
+    public List<Extension> getNegotiatedExtensions(
+            List<Extension> requestedExtensions) {
         // TODO
         return null;
     }
 
     @Override
     public boolean checkOrigin(String originHeaderValue) {
-        // TODO
-        return false;
+        return true;
     }
 
     @Override

==================================================
ServerApplicationConfiguration.java
similarity index 77%
rename from java/javax/websocket/HandshakeRequest.java
rename to java/javax/websocket/server/HandshakeRequest.java
index 9c218b7bde..d67f4401d8 100644
--- a/java/javax/websocket/HandshakeRequest.java
+++ b/java/javax/websocket/server/HandshakeRequest.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.websocket;
+package javax.websocket.server;
 
 import java.net.URI;
 import java.security.Principal;
@@ -23,6 +23,11 @@ import java.util.Map;
 
 public interface HandshakeRequest {
 
+    static final String SEC_WEBSOCKET_KEY = "Sec-WebSocket-Key";
+    static final String SEC_WEBSOCKET_PROTOCOL = "Sec-WebSocket-Protocol";
+    static final String SEC_WEBSOCKET_VERSION = "Sec-WebSocket-Version";
+    static final String SEC_WEBSOCKET_EXTENSIONS= "Sec-WebSocket-Extensions";
+
     Map<String,List<String>> getHeaders();
 
     Principal getUserPrincipal();
@@ -37,7 +42,7 @@ public interface HandshakeRequest {
      */
     Object getSession();
 
-    Map<String, String[]> getParameterMap();
+    Map<String, List<String>> getParameterMap();
 
     String getQueryString();
 }

==================================================
ServerEndpointConfiguration.java
similarity index 71%
rename from java/javax/websocket/EndpointFactory.java
rename to java/javax/websocket/server/ServerApplicationConfiguration.java
index 726e2d81ae..66221005fc 100644
--- a/java/javax/websocket/EndpointFactory.java
+++ b/java/javax/websocket/server/ServerApplicationConfiguration.java
@@ -14,8 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.websocket;
+package javax.websocket.server;
 
-public interface EndpointFactory<T> {
-    T createEndpoint();
+import java.util.Set;
+
+public interface ServerApplicationConfiguration {
+
+    Set<Class<? extends ServerEndpointConfiguration>> getEndpointConfigurationClasses(Set<Class<? extends ServerEndpointConfiguration>> scanned);
+
+    Set<Class<?>> getAnnotatedEndpointClasses(Set<Class<?>> scanned);
 }

==================================================
WebSocketEndpoint.java
similarity index 73%
rename from java/javax/websocket/ServerEndpointConfiguration.java
rename to java/javax/websocket/server/ServerEndpointConfiguration.java
index 1d048eb0c1..5276ffc02e 100644
--- a/java/javax/websocket/ServerEndpointConfiguration.java
+++ b/java/javax/websocket/server/ServerEndpointConfiguration.java
@@ -14,18 +14,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.websocket;
+package javax.websocket.server;
 
 import java.net.URI;
 import java.util.List;
 
-public interface ServerEndpointConfiguration<T> extends EndpointConfiguration {
+import javax.websocket.Endpoint;
+import javax.websocket.EndpointConfiguration;
+import javax.websocket.Extension;
+import javax.websocket.HandshakeResponse;
 
-    EndpointFactory<T> getEndpointFactory();
+public interface ServerEndpointConfiguration extends EndpointConfiguration {
+
+    Class<? extends Endpoint> getEndpointClass();
 
     String getNegotiatedSubprotocol(List<String> requestedSubprotocols);
 
-    List<String> getNegotiatedExtensions(List<String> requestedExtensions);
+    List<Extension> getNegotiatedExtensions(List<Extension> requestedExtensions);
 
     boolean checkOrigin(String originHeaderValue);
 

==================================================
WebSocketPathParam.java
similarity index 86%
rename from java/javax/websocket/WebSocketEndpoint.java
rename to java/javax/websocket/server/WebSocketEndpoint.java
index 918447c297..a88f953242 100644
--- a/java/javax/websocket/WebSocketEndpoint.java
+++ b/java/javax/websocket/server/WebSocketEndpoint.java
@@ -14,13 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.websocket;
+package javax.websocket.server;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import javax.websocket.Decoder;
+import javax.websocket.Encoder;
+
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface WebSocketEndpoint {
@@ -36,5 +39,6 @@ public @interface WebSocketEndpoint {
 
     Class<? extends Encoder>[] encoders() default {};
 
-    //Class<? extends EndpointFactory<?>> factory();
+    Class<? extends DefaultServerConfiguration> configuration()
+            default DefaultServerConfiguration.class;
 }

==================================================
