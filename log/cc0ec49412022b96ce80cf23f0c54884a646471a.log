cc0ec49412022b96ce80cf23f0c54884a646471a
==================================================
Don't duplicate storage of compression in the Processor
==================================================
Mark Thomas
==================================================
Wed Dec 14 11:05:26 2016 +0000
==================================================
AbstractHttp11Protocol.java
Don't duplicate storage of compression in the Processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774179 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 7ccf0351a0..8ae3ff6693 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -155,12 +155,53 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    private int compressionLevel = 0;
     /**
-     * Integrated compression support.
+     * Set compression level.
+     *
+     * @param compression One of <code>on</code>, <code>force</code>,
+     *                    <code>off</code> or the minimum compression size in
+     *                    bytes which implies <code>on</code>
      */
-    private String compression = "off";
-    public String getCompression() { return compression; }
-    public void setCompression(String valueS) { compression = valueS; }
+    public void setCompression(String compression) {
+        if (compression.equals("on")) {
+            this.compressionLevel = 1;
+        } else if (compression.equals("force")) {
+            this.compressionLevel = 2;
+        } else if (compression.equals("off")) {
+            this.compressionLevel = 0;
+        } else {
+            try {
+                // Try to parse compression as an int, which would give the
+                // minimum compression size
+                setCompressionMinSize(Integer.parseInt(compression));
+                this.compressionLevel = 1;
+            } catch (Exception e) {
+                this.compressionLevel = 0;
+            }
+        }
+    }
+
+
+    /**
+     * Return compression level.
+     *
+     * @return The current compression level in string form (off/on/force)
+     */
+    public String getCompression() {
+        switch (compressionLevel) {
+        case 0:
+            return "off";
+        case 1:
+            return "on";
+        case 2:
+            return "force";
+        }
+        return "off";
+    }
+    protected int getCompressionLevel() {
+        return compressionLevel;
+    }
 
 
     private Pattern noCompressionUserAgents = null;
@@ -737,7 +778,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     protected Processor createProcessor() {
         Http11Processor processor = new Http11Processor(this);
         processor.setAdapter(getAdapter());
-        processor.setCompression(getCompression());
         return processor;
     }
 

==================================================
