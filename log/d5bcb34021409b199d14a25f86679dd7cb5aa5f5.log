d5bcb34021409b199d14a25f86679dd7cb5aa5f5
==================================================
Add i18n for ha/* packages.
==================================================
Remy Maucherat
==================================================
Fri Dec 7 13:19:04 2018 +0000
==================================================
CollectedInfo.java
Add i18n for ha/* packages.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848401 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HeartbeatListener.java
index b92bd0b70b..3d69b552c8 100644
--- a/java/org/apache/catalina/ha/backend/CollectedInfo.java
+++ b/java/org/apache/catalina/ha/backend/CollectedInfo.java
@@ -27,6 +27,7 @@ import javax.management.ObjectInstance;
 import javax.management.ObjectName;
 
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.res.StringManager;
 
 /*
  * Listener to provider informations to mod_heartbeat.c
@@ -37,6 +38,8 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class CollectedInfo {
 
+    private static final StringManager sm = StringManager.getManager(CollectedInfo.class);
+
     /* Collect info via JMX */
     protected MBeanServer mBeanServer = null;
     protected ObjectName objName = null;
@@ -90,8 +93,9 @@ public class CollectedInfo {
             objName = null;
             shost = null;
         }
-        if (objName == null)
-            throw new Exception("Can't find connector for " + host + ":" + port);
+        if (objName == null) {
+            throw new Exception(sm.getString("collectedInfo.noConnector", host, port));
+        }
         this.port = iport;
         this.host = shost;
 
@@ -99,7 +103,7 @@ public class CollectedInfo {
 
     public void refresh() throws Exception {
         if (mBeanServer == null || objName == null) {
-            throw new Exception("Not initialized!!!");
+            throw new Exception(sm.getString("collectedInfo.notInitialized"));
         }
         Integer imax = (Integer) mBeanServer.getAttribute(objName, "maxThreads");
 

==================================================
MultiCastSender.java
new file mode 100644
index 0000000000..b404aca525
--- /dev/null
+++ b/java/org/apache/catalina/ha/backend/LocalStrings.properties
@@ -0,0 +1,33 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+collectedInfo.noConnector=Cannot find connector for [{0}]:[{1}]
+collectedInfo.notInitialized=Not initialized
+
+heartbeatListener.errorCollectingInfo=Unable to initialize info collection
+heartbeatListener.refreshError=Unable to collect load information
+heartbeatListener.senderInitError=Unable to initialize Sender
+heartbeatListener.sendError=Unable to send collected load information
+
+multiCastSender.multiCastFailed=Unable to use multicast
+multiCastSender.sendFailed=Unable to send collected load information
+
+tcpSender.connectionFailed=Unable to connect to proxy
+tcpSender.invalidProxyList=Invalid proxy list
+tcpSender.notInitialized=Not initialized
+tcpSender.readError=Error reading response content
+tcpSender.responseError=Unable to read response from proxy
+tcpSender.responseErrorCode=Response error with code [{0}]
+tcpSender.sendFailed=Unable to send collected load information to proxy

==================================================
TcpSender.java
index 60feacfcc7..a5e19bb917 100644
--- a/java/org/apache/catalina/ha/backend/MultiCastSender.java
+++ b/java/org/apache/catalina/ha/backend/MultiCastSender.java
@@ -26,6 +26,7 @@ import java.nio.charset.StandardCharsets;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
 
 /*
  * Sender to proxies using multicast socket.
@@ -34,6 +35,7 @@ public class MultiCastSender
     implements Sender {
 
     private static final Log log = LogFactory.getLog(HeartbeatListener.class);
+    private static final StringManager sm = StringManager.getManager(MultiCastSender.class);
 
     HeartbeatListener config = null;
 
@@ -61,7 +63,7 @@ public class MultiCastSender
                 s.setTimeToLive(config.getTtl());
                 s.joinGroup(group);
             } catch (Exception ex) {
-                log.error("Unable to use multicast: " + ex);
+                log.error(sm.getString("multiCastSender.multiCastFailed"), ex);
                 s = null;
                 return -1;
             }
@@ -73,7 +75,7 @@ public class MultiCastSender
         try {
             s.send(data);
         } catch (Exception ex) {
-            log.error("Unable to send collected load information: " + ex);
+            log.error(sm.getString("multiCastSender.sendFailed"), ex);
             s.close();
             s = null;
             return -1;

==================================================
FarmWarDeployer.java
index af80512734..73d564e2c4 100644
--- a/java/org/apache/catalina/ha/backend/TcpSender.java
+++ b/java/org/apache/catalina/ha/backend/TcpSender.java
@@ -30,6 +30,7 @@ import java.util.StringTokenizer;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
 
 /*
  * Sender to proxies using multicast socket.
@@ -38,6 +39,7 @@ public class TcpSender
     implements Sender {
 
     private static final Log log = LogFactory.getLog(HeartbeatListener.class);
+    private static final StringManager sm = StringManager.getManager(TcpSender.class);
 
     HeartbeatListener config = null;
 
@@ -65,14 +67,15 @@ public class TcpSender
         while (tok.hasMoreTokens()) {
             String token = tok.nextToken().trim();
             int pos = token.indexOf(':');
-            if (pos <=0)
-                throw new Exception("bad ProxyList");
+            if (pos <= 0) {
+                throw new Exception(sm.getString("tcpSender.invalidProxyList"));
+            }
             proxies[i] = new Proxy();
             proxies[i].port = Integer.parseInt(token.substring(pos + 1));
             try {
                  proxies[i].address = InetAddress.getByName(token.substring(0, pos));
             } catch (Exception e) {
-                throw new Exception("bad ProxyList");
+                throw new Exception(sm.getString("tcpSender.invalidProxyList"));
             }
             i++;
         }
@@ -85,7 +88,7 @@ public class TcpSender
     @Override
     public int send(String mess) throws Exception {
         if (connections == null) {
-            log.error("Not initialized");
+            log.error(sm.getString("tcpSender.notInitialized"));
             return -1;
         }
         String requestLine = "POST " + config.getProxyURL() + " HTTP/1.0";
@@ -106,7 +109,7 @@ public class TcpSender
                     connectionReaders[i] = new BufferedReader(new InputStreamReader(connections[i].getInputStream()));
                     connectionWriters[i] = new BufferedWriter(new OutputStreamWriter(connections[i].getOutputStream()));
                 } catch (Exception ex) {
-                    log.error("Unable to connect to proxy: " + ex);
+                    log.error(sm.getString("tcpSender.connectionFailed"), ex);
                     close(i);
                 }
             }
@@ -124,7 +127,7 @@ public class TcpSender
                 writer.write("\r\n");
                 writer.flush();
             } catch (Exception ex) {
-                log.error("Unable to send collected load information to proxy: " + ex);
+                log.error(sm.getString("tcpSender.sendFailed"), ex);
                 close(i);
             }
             if (connections[i] == null)
@@ -133,14 +136,14 @@ public class TcpSender
             /* Read httpd answer */
             String responseStatus = connectionReaders[i].readLine();
             if (responseStatus == null) {
-                log.error("Unable to read response from proxy");
+                log.error(sm.getString("tcpSender.responseError"));
                 close(i);
                 continue;
             } else {
                 responseStatus = responseStatus.substring(responseStatus.indexOf(' ') + 1, responseStatus.indexOf(' ', responseStatus.indexOf(' ') + 1));
                 int status = Integer.parseInt(responseStatus);
                 if (status != 200) {
-                    log.error("Status is " + status);
+                    log.error(sm.getString("tcpSender.responseErrorCode", status));
                     close(i);
                     continue;
                 }
@@ -163,7 +166,7 @@ public class TcpSender
                         int thisTime = (contentLength > buf.length) ? buf.length : contentLength;
                         int n = connectionReaders[i].read(buf, 0, thisTime);
                         if (n <= 0) {
-                            log.error("Read content failed");
+                            log.error(sm.getString("tcpSender.readError"));
                             close(i);
                             break;
                         } else {

==================================================
FileMessageFactory.java
index a65adb6e4f..cccc25b978 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -250,7 +250,7 @@ public class FarmWarDeployer extends ClusterListener
                                     "farmWarDeployer.servicingDeploy",
                                     contextName, name));
                     } catch (Exception ex) {
-                        log.error(ex);
+                        log.error(sm.getString("farmWarDeployer.fileMessageError"), ex);
                     } finally {
                         removeFactory(fmsg);
                     }
@@ -278,7 +278,7 @@ public class FarmWarDeployer extends ClusterListener
                                 "farmWarDeployer.servicingUndeploy",
                                 contextName));
                 } catch (Exception ex) {
-                    log.error(ex);
+                    log.error(sm.getString("farmWarDeployer.undeployMessageError"), ex);
                 }
             }
         } catch (java.io.IOException x) {

==================================================
