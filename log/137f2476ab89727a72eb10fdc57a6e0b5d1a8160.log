137f2476ab89727a72eb10fdc57a6e0b5d1a8160
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49099
==================================================
Mark Emlyn
==================================================
Wed Jun 2 15:12:36 2010 +0000
==================================================
AccessLog.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49099
Hooking the CoyoteAdaptor into the existing AccessLog wasn't as invasive as I feared so go that route to log requests rejected by the Adaptor before the request/response reaches the AcessLogValve

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@950587 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
new file mode 100644
index 0000000000..fc9061d6e7
--- /dev/null
+++ b/java/org/apache/catalina/AccessLog.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.catalina;
+
+import org.apache.catalina.connector.Request;
+import org.apache.catalina.connector.Response;
+
+
+/**
+ * Intended for use by a {@link Valve} to indicate that the {@link Valve}
+ * provides access logging. It is used by the Tomcat internals (the
+ * {@link org.apache.catalina.connector.CoyoteAdapter} at the time of writing)
+ * to identify a Valve that logs access requests so requests that are rejected
+ * earlier in the processing chain can still be added to the access log.
+ * Implementations of this interface should be robust against the provided
+ * {@link Request} and {@link Response} objects being null, having null
+ * attributes or any other 'oddness' that may result from attempting to log
+ * a request that was almost certainly rejected because it was mal-formed.
+ */
+public interface AccessLog {
+
+    /**
+     * Add the request/response to the access log using the specified processing
+     * time.
+     * 
+     * @param request   Request (associated with the response) to log
+     * @param response  Response (associated with the request) to log
+     * @param time      Time taken to process the request/response in
+     *                  milliseconds (use 0 if not known) 
+     */
+    public void log(Request request, Response response, long time);
+}

==================================================
AccessLogValve.java
index 0e99df6b53..ad5fe884c0 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -24,8 +24,13 @@ import java.util.EnumSet;
 
 import javax.servlet.SessionTrackingMode;
 
+import org.apache.catalina.AccessLog;
+import org.apache.catalina.Container;
 import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
 import org.apache.catalina.Globals;
+import org.apache.catalina.Host;
+import org.apache.catalina.Valve;
 import org.apache.catalina.Wrapper;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.catalina.comet.CometEvent;
@@ -115,6 +120,11 @@ public class CoyoteAdapter implements Adapter {
     protected static URLEncoder urlEncoder;
 
 
+    /**
+     * Access log to use for rejected requests
+     */
+    private volatile AccessLog accessLog = null;
+    
     // ----------------------------------------------------- Static Initializer
 
 
@@ -512,12 +522,14 @@ public class CoyoteAdapter implements Adapter {
         } catch (IOException ioe) {
             res.setStatus(400);
             res.setMessage("Invalid URI: " + ioe.getMessage());
+            getAccessLog().log(request, response, 0);
             return false;
         }
         // Normalization
         if (!normalize(req.decodedURI())) {
             res.setStatus(400);
             res.setMessage("Invalid URI");
+            getAccessLog().log(request, response, 0);
             return false;
         }
         // Character decoding
@@ -526,6 +538,7 @@ public class CoyoteAdapter implements Adapter {
         if (!checkNormalize(req.decodedURI())) {
             res.setStatus(400);
             res.setMessage("Invalid URI character encoding");
+            getAccessLog().log(request, response, 0);
             return false;
         }
 
@@ -585,6 +598,7 @@ public class CoyoteAdapter implements Adapter {
             res.setStatus(405);
             res.addHeader("Allow", header);
             res.setMessage("TRACE method is not allowed");
+            getAccessLog().log(request, response, 0);
             return false;
         }
 
@@ -623,6 +637,7 @@ public class CoyoteAdapter implements Adapter {
                 redirectPath = redirectPath + "?" + query;
             }
             response.sendRedirect(redirectPath);
+            getAccessLog().log(request, response, 0);
             return false;
         }
 
@@ -1075,4 +1090,61 @@ public class CoyoteAdapter implements Adapter {
     }
 
 
+    /**
+     * Obtain a reference to the access log to use to log rejected requests.
+     * 
+     * @return
+     */
+    protected AccessLog getAccessLog() {
+        if (accessLog != null) {
+            return accessLog;
+        }
+        
+        // First look in Engine for associated service
+        Engine engine = (Engine) connector.getService().getContainer();
+        accessLog = findAccessLog(engine);
+        if (accessLog != null) {
+            return accessLog;
+        }
+        
+        // Then look in default host
+        Host defaultHost = (Host) engine.findChild(engine.getDefaultHost());
+        accessLog = findAccessLog(defaultHost);
+        if (accessLog != null) {
+            return accessLog;
+        }
+            
+        // Then look in ROOT context of default host
+        Context defaultContext = (Context) defaultHost.findChild("/");
+        accessLog = findAccessLog(defaultContext);
+        if (accessLog != null) {
+            return accessLog;
+        }
+
+        accessLog = new NoopAccessLog(); 
+        return accessLog;
+    }
+    
+    private AccessLog findAccessLog(Container container) {
+        if (container == null) {
+            return new NoopAccessLog();
+        }
+
+        Valve valves[] = container.getPipeline().getValves();
+        for (Valve valve : valves) {
+            if (valve instanceof AccessLog) {
+                return (AccessLog) valve;
+            }
+        }
+        return null;
+    }
+    
+    private static final class NoopAccessLog implements AccessLog {
+
+        @Override
+        public void log(Request request, Response response, long time) {
+            // NOOP
+        }
+        
+    }
 }

==================================================
