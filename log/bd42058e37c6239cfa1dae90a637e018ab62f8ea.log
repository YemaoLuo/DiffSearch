bd42058e37c6239cfa1dae90a637e018ab62f8ea
==================================================
Fix deprecation warnings with newer JUnit 4 in 2020.03 Eclipse IDE
==================================================
Mark Thomas
==================================================
Fri Mar 27 09:37:51 2020 +0000
==================================================
TestStandardContext.java
Fix deprecation warnings with newer JUnit 4 in 2020.03 Eclipse IDE



==================================================
TestEncryptInterceptor.java
index f7e57938b2..b28905a05f 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -46,6 +46,7 @@ import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -972,7 +973,7 @@ public class TestStandardContext extends TomcatBaseTest {
         Context context = new StandardContext();
 
         context.setResourceOnlyServlets("a,b,c");
-        Assert.assertThat(Arrays.asList(context.getResourceOnlyServlets().split(",")),
+        MatcherAssert.assertThat(Arrays.asList(context.getResourceOnlyServlets().split(",")),
                 CoreMatchers.hasItems("a", "b", "c"));
     }
 

==================================================
TestQuotedStringTokenizer.java
index 5b76df77ea..172ca2047e 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
@@ -26,6 +26,7 @@ import java.util.Collection;
 
 import javax.crypto.Cipher;
 
+import org.hamcrest.MatcherAssert;
 import org.hamcrest.core.IsEqual;
 import org.hamcrest.core.IsNot;
 
@@ -371,7 +372,7 @@ public class TestEncryptInterceptor {
 
         byte[] cipherText2 = ((ValueCaptureInterceptor)src.getNext()).getValue();
 
-        Assert.assertThat("Two identical cleartexts encrypt to the same ciphertext",
+        MatcherAssert.assertThat("Two identical cleartexts encrypt to the same ciphertext",
                 cipherText1, IsNot.not(IsEqual.equalTo(cipherText2)));
     }
 

==================================================
TestHttp2Limits.java
index ec228ae635..2104155889 100644
--- a/test/org/apache/catalina/valves/rewrite/TestQuotedStringTokenizer.java
+++ b/test/org/apache/catalina/valves/rewrite/TestQuotedStringTokenizer.java
@@ -23,8 +23,8 @@ import java.util.Collections;
 import java.util.List;
 
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -60,12 +60,12 @@ public class TestQuotedStringTokenizer {
         List<String> result = new ArrayList<>();
         int count = tokens.size();
         while (tokenizer.hasMoreTokens()) {
-            Assert.assertThat(Integer.valueOf(tokenizer.countTokens()), CoreMatchers.is(Integer.valueOf(count)));
+            MatcherAssert.assertThat(Integer.valueOf(tokenizer.countTokens()), CoreMatchers.is(Integer.valueOf(count)));
             result.add(tokenizer.nextToken());
             count--;
         }
-        Assert.assertThat(Integer.valueOf(tokenizer.countTokens()), CoreMatchers.is(Integer.valueOf(0)));
-        Assert.assertThat(tokens, CoreMatchers.is(result));
+        MatcherAssert.assertThat(Integer.valueOf(tokenizer.countTokens()), CoreMatchers.is(Integer.valueOf(0)));
+        MatcherAssert.assertThat(tokens, CoreMatchers.is(result));
     }
 
 }

==================================================
TestOpenSSLConf.java
index d3ad8c8719..69f6438baa 100644
--- a/test/org/apache/coyote/http2/TestHttp2Limits.java
+++ b/test/org/apache/coyote/http2/TestHttp2Limits.java
@@ -23,6 +23,7 @@ import java.util.List;
 import java.util.Random;
 
 import org.hamcrest.Description;
+import org.hamcrest.MatcherAssert;
 import org.hamcrest.TypeSafeMatcher;
 
 import org.junit.Assert;
@@ -265,7 +266,7 @@ public class TestHttp2Limits extends Http2TestBase {
             //       above.
             try {
                 parser.readFrame(true);
-                Assert.assertThat(output.getTrace(), RegexMatcher.matchesRegex(
+                MatcherAssert.assertThat(output.getTrace(), RegexMatcher.matchesRegex(
                         "0-Goaway-\\[1\\]-\\[11\\]-\\[" + limitMessage + "\\]"));
             } catch (IOException se) {
                 // Expected on some platforms
@@ -505,7 +506,7 @@ public class TestHttp2Limits extends Http2TestBase {
             // the escaped values.
             String limitMessage = sm.getString("http2Parser.headerLimitSize", "\\d++", "3");
             limitMessage = limitMessage.replace("[", "\\[").replace("]", "\\]");
-            Assert.assertThat(output.getTrace(), RegexMatcher.matchesRegex(
+            MatcherAssert.assertThat(output.getTrace(), RegexMatcher.matchesRegex(
                     "0-Goaway-\\[3\\]-\\[11\\]-\\[" + limitMessage + "\\]"));
             break;
         }

==================================================
