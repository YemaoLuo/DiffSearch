597dcea65324b44c5bcd9cbb0971fbc640b47805
==================================================
Code clean-up. Formatting. No functional change.
==================================================
Mark Thomas
==================================================
Wed Mar 8 18:27:25 2023 +0000
==================================================
TestConnectionLimit.java
Code clean-up. Formatting. No functional change.


==================================================
TestPerMessageDeflate.java
index 80b4045bda..2408f1a3e5 100644
--- a/test/org/apache/tomcat/websocket/TestConnectionLimit.java
+++ b/test/org/apache/tomcat/websocket/TestConnectionLimit.java
@@ -38,8 +38,7 @@ import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEn
 public class TestConnectionLimit extends TomcatBaseTest {
 
     /*
-     * Simple test to see how many outgoing connections can be created on a
-     * single machine.
+     * Simple test to see how many outgoing connections can be created on a single machine.
      */
     @Test
     public void testSingleMachine() throws Exception {
@@ -54,8 +53,7 @@ public class TestConnectionLimit extends TomcatBaseTest {
 
         tomcat.start();
 
-        URI uri = new URI("ws://localhost:" + getPort() +
-                TesterEchoServer.Config.PATH_ASYNC);
+        URI uri = new URI("ws://localhost:" + getPort() + TesterEchoServer.Config.PATH_ASYNC);
         AtomicInteger counter = new AtomicInteger(0);
 
         int threadCount = 50;
@@ -87,8 +85,7 @@ public class TestConnectionLimit extends TomcatBaseTest {
 
         @Override
         public void run() {
-            WebSocketContainer wsContainer =
-                    ContainerProvider.getWebSocketContainer();
+            WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
             int count = 0;
 

==================================================
TestUtil.java
index 0c6a17ed20..fd62f976a6 100644
--- a/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java
+++ b/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java
@@ -93,17 +93,16 @@ public class TestPerMessageDeflate {
 
         ByteBuffer received = ByteBuffer.allocate(8192);
 
-        TransformationResult tr = perMessageDeflateRx.getMoreData(
-                compressedPart.getOpCode(), compressedPart.isFin(), compressedPart.getRsv(), received);
+        TransformationResult tr = perMessageDeflateRx.getMoreData(compressedPart.getOpCode(), compressedPart.isFin(),
+                compressedPart.getRsv(), received);
 
         Assert.assertEquals(8192, received.position());
-        Assert.assertEquals(TransformationResult.END_OF_FRAME , tr);
+        Assert.assertEquals(TransformationResult.END_OF_FRAME, tr);
     }
 
 
     /*
-     * Minimal implementation to enable other transformations to be tested. It
-     * is NOT robust.
+     * Minimal implementation to enable other transformations to be tested. It is NOT robust.
      */
     private static class TesterTransformation implements Transformation {
 
@@ -121,30 +120,35 @@ public class TestPerMessageDeflate {
         public boolean validateRsvBits(int i) {
             return false;
         }
+
         @Override
         public boolean validateRsv(int rsv, byte opCode) {
             return false;
         }
+
         @Override
         public void setNext(Transformation t) {
         }
+
         @Override
         public List<MessagePart> sendMessagePart(List<MessagePart> messageParts) {
             return messageParts;
         }
+
         @Override
-        public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteBuffer dest)
-                throws IOException {
+        public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteBuffer dest) throws IOException {
             if (data == null) {
                 return TransformationResult.UNDERFLOW;
             }
             dest.put(data);
             return TransformationResult.END_OF_FRAME;
         }
+
         @Override
         public Extension getExtensionResponse() {
             return null;
         }
+
         @Override
         public void close() {
         }

==================================================
TestWebSocketFrameClient.java
index 1364f6faed..e7a8c59e92 100644
--- a/test/org/apache/tomcat/websocket/TestUtil.java
+++ b/test/org/apache/tomcat/websocket/TestUtil.java
@@ -38,97 +38,83 @@ public class TestUtil {
 
     @Test
     public void testGetMessageTypeSimple() {
-        Assert.assertEquals(
-                String.class, Util.getMessageType(new SimpleMessageHandler()));
+        Assert.assertEquals(String.class, Util.getMessageType(new SimpleMessageHandler()));
     }
 
 
     @Test
     public void testGetMessageTypeSubclass() {
-        Assert.assertEquals(String.class,
-                Util.getMessageType(new SubSimpleMessageHandler()));
+        Assert.assertEquals(String.class, Util.getMessageType(new SubSimpleMessageHandler()));
     }
 
 
     @Test
     public void testGetMessageTypeGenericSubclass() {
-        Assert.assertEquals(String.class,
-                Util.getMessageType(new GenericSubMessageHandler()));
+        Assert.assertEquals(String.class, Util.getMessageType(new GenericSubMessageHandler()));
     }
 
 
     @Test
     public void testGetMessageTypeGenericMultipleSubclass() {
-        Assert.assertEquals(String.class,
-                Util.getMessageType(new GenericMultipleSubSubMessageHandler()));
+        Assert.assertEquals(String.class, Util.getMessageType(new GenericMultipleSubSubMessageHandler()));
     }
 
 
     @Test
     public void testGetMessageTypeGenericMultipleSubclassSwap() {
-        Assert.assertEquals(String.class,
-                Util.getMessageType(new GenericMultipleSubSubSwapMessageHandler()));
+        Assert.assertEquals(String.class, Util.getMessageType(new GenericMultipleSubSubSwapMessageHandler()));
     }
 
 
     @Test
     public void testGetEncoderTypeSimple() {
-        Assert.assertEquals(
-                String.class, Util.getEncoderType(SimpleEncoder.class));
+        Assert.assertEquals(String.class, Util.getEncoderType(SimpleEncoder.class));
     }
 
 
     @Test
     public void testGetEncoderTypeSubclass() {
-        Assert.assertEquals(String.class,
-                Util.getEncoderType(SubSimpleEncoder.class));
+        Assert.assertEquals(String.class, Util.getEncoderType(SubSimpleEncoder.class));
     }
 
 
     @Test
     public void testGetEncoderTypeGenericSubclass() {
-        Assert.assertEquals(String.class,
-                Util.getEncoderType(GenericSubEncoder.class));
+        Assert.assertEquals(String.class, Util.getEncoderType(GenericSubEncoder.class));
     }
 
 
     @Test
     public void testGetEncoderTypeGenericMultipleSubclass() {
-        Assert.assertEquals(String.class,
-                Util.getEncoderType(GenericMultipleSubSubEncoder.class));
+        Assert.assertEquals(String.class, Util.getEncoderType(GenericMultipleSubSubEncoder.class));
     }
 
 
     @Test
     public void testGetEncoderTypeGenericMultipleSubclassSwap() {
-        Assert.assertEquals(String.class,
-                Util.getEncoderType(GenericMultipleSubSubSwapEncoder.class));
+        Assert.assertEquals(String.class, Util.getEncoderType(GenericMultipleSubSubSwapEncoder.class));
     }
 
 
     @Test
     public void testGetEncoderTypeSimpleWithGenericType() {
-        Assert.assertEquals(List.class,
-                Util.getEncoderType(SimpleEncoderWithGenericType.class));
+        Assert.assertEquals(List.class, Util.getEncoderType(SimpleEncoderWithGenericType.class));
     }
 
 
     @Test
     public void testGenericArrayEncoderString() {
-        Assert.assertEquals(String[].class,
-                Util.getEncoderType(GenericArrayEncoderString.class));
+        Assert.assertEquals(String[].class, Util.getEncoderType(GenericArrayEncoderString.class));
     }
 
 
     @Test
     public void testGenericArraySubEncoderString() {
-        Assert.assertEquals(String[][].class,
-                Util.getEncoderType(GenericArraySubEncoderString.class));
+        Assert.assertEquals(String[][].class, Util.getEncoderType(GenericArraySubEncoderString.class));
     }
 
 
-    private static class SimpleMessageHandler
-            implements MessageHandler.Whole<String> {
+    private static class SimpleMessageHandler implements MessageHandler.Whole<String> {
         @Override
         public void onMessage(String message) {
             // NO-OP
@@ -157,18 +143,15 @@ public class TestUtil {
     }
 
 
-    private abstract static class GenericMultipleMessageHandler<A,B>
-            implements MessageHandler.Whole<A>, Foo<B> {
+    private abstract static class GenericMultipleMessageHandler<A, B> implements MessageHandler.Whole<A>, Foo<B> {
     }
 
 
-    private abstract static class GenericMultipleSubMessageHandler<X,Y>
-            extends GenericMultipleMessageHandler<X,Y> {
+    private abstract static class GenericMultipleSubMessageHandler<X, Y> extends GenericMultipleMessageHandler<X, Y> {
     }
 
 
-    private static class GenericMultipleSubSubMessageHandler
-            extends GenericMultipleSubMessageHandler<String,Boolean> {
+    private static class GenericMultipleSubSubMessageHandler extends GenericMultipleSubMessageHandler<String, Boolean> {
 
         @Override
         public void onMessage(String message) {
@@ -182,13 +165,13 @@ public class TestUtil {
     }
 
 
-    private abstract static class GenericMultipleSubSwapMessageHandler<Y,X>
-            extends GenericMultipleMessageHandler<X,Y> {
+    private abstract static class GenericMultipleSubSwapMessageHandler<Y, X>
+            extends GenericMultipleMessageHandler<X, Y> {
     }
 
 
     private static class GenericMultipleSubSubSwapMessageHandler
-            extends GenericMultipleSubSwapMessageHandler<Boolean,String> {
+            extends GenericMultipleSubSwapMessageHandler<Boolean, String> {
 
         @Override
         public void onMessage(String message) {
@@ -249,8 +232,7 @@ public class TestUtil {
     }
 
 
-    private abstract static class GenericMultipleEncoder<A,B>
-            implements Encoder.Text<A>, Foo<B> {
+    private abstract static class GenericMultipleEncoder<A, B> implements Encoder.Text<A>, Foo<B> {
 
         @Override
         public void init(EndpointConfig endpointConfig) {
@@ -264,13 +246,11 @@ public class TestUtil {
     }
 
 
-    private abstract static class GenericMultipleSubEncoder<X,Y>
-            extends GenericMultipleEncoder<X,Y> {
+    private abstract static class GenericMultipleSubEncoder<X, Y> extends GenericMultipleEncoder<X, Y> {
     }
 
 
-    private static class GenericMultipleSubSubEncoder
-            extends GenericMultipleSubEncoder<String,Boolean> {
+    private static class GenericMultipleSubSubEncoder extends GenericMultipleSubEncoder<String, Boolean> {
 
         @Override
         public String encode(String object) throws EncodeException {
@@ -285,13 +265,11 @@ public class TestUtil {
     }
 
 
-    private abstract static class GenericMultipleSubSwapEncoder<Y,X>
-            extends GenericMultipleEncoder<X,Y> {
+    private abstract static class GenericMultipleSubSwapEncoder<Y, X> extends GenericMultipleEncoder<X, Y> {
     }
 
 
-    private static class GenericMultipleSubSubSwapEncoder
-            extends GenericMultipleSubSwapEncoder<Boolean,String> {
+    private static class GenericMultipleSubSubSwapEncoder extends GenericMultipleSubSwapEncoder<Boolean, String> {
 
         @Override
         public String encode(String object) throws EncodeException {
@@ -305,8 +283,7 @@ public class TestUtil {
     }
 
 
-    private static class SimpleEncoderWithGenericType
-            implements Encoder.Text<List<String>> {
+    private static class SimpleEncoderWithGenericType implements Encoder.Text<List<String>> {
 
         @Override
         public void init(EndpointConfig endpointConfig) {
@@ -418,8 +395,7 @@ public class TestUtil {
 
     @Test
     public void testParseExtensionHeaderMultiple02() {
-        doTestParseExtensionHeaderMultiple(
-                " ext ; a = 1 ; b = 2 , ext2 ; c ; d = xyz , ext3 ");
+        doTestParseExtensionHeaderMultiple(" ext ; a = 1 ; b = 2 , ext2 ; c ; d = xyz , ext3 ");
     }
 
     private void doTestParseExtensionHeaderMultiple(String header) {
@@ -457,12 +433,12 @@ public class TestUtil {
         Assert.assertEquals(0, params3.size());
     }
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void testParseExtensionHeaderInvalid01() {
         Util.parseExtensionHeader(new ArrayList<>(), "ext;a=\"1;b=2");
     }
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void testParseExtensionHeaderInvalid02() {
         Util.parseExtensionHeader(new ArrayList<>(), "ext;a=1\";b=2");
     }

==================================================
TestWebSocketFrameClientSSL.java
index fd222dde1d..fe20795af7 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -64,23 +64,19 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         // BZ 62596
-        ClientEndpointConfig clientEndpointConfig =
-                ClientEndpointConfig.Builder.create().configurator(new Configurator() {
+        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create()
+                .configurator(new Configurator() {
                     @Override
                     public void beforeRequest(Map<String, List<String>> headers) {
-                        headers.put("Dummy", Collections.singletonList(
-                                String.join("", Collections.nCopies(4000, "A"))));
+                        headers.put("Dummy",
+                                Collections.singletonList(String.join("", Collections.nCopies(4000, "A"))));
                         super.beforeRequest(headers);
                     }
                 }).build();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("ws://localhost:" + getPort() +
-                        TesterFirehoseServer.PATH));
-        CountDownLatch latch =
-                new CountDownLatch(TesterFirehoseServer.MESSAGE_COUNT);
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
+                new URI("ws://localhost:" + getPort() + TesterFirehoseServer.PATH));
+        CountDownLatch latch = new CountDownLatch(TesterFirehoseServer.MESSAGE_COUNT);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);
         wsSession.getBasicRemote().sendText("Hello");
@@ -89,12 +85,10 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
 
         // Ignore the latch result as the message count test below will tell us
         // if the right number of messages arrived
-        handler.getLatch().await(TesterFirehoseServer.WAIT_TIME_MILLIS,
-                TimeUnit.MILLISECONDS);
+        handler.getLatch().await(TesterFirehoseServer.WAIT_TIME_MILLIS, TimeUnit.MILLISECONDS);
 
         Queue<String> messages = handler.getMessages();
-        Assert.assertEquals(
-                TesterFirehoseServer.MESSAGE_COUNT, messages.size());
+        Assert.assertEquals(TesterFirehoseServer.MESSAGE_COUNT, messages.size());
         for (String message : messages) {
             Assert.assertEquals(TesterFirehoseServer.MESSAGE, message);
         }
@@ -115,15 +109,14 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
 
         tomcat.start();
 
-        echoTester("",null);
-        echoTester("/",null);
+        echoTester("", null);
+        echoTester("/", null);
         // This will trigger a redirect so there will be 5 requests logged
-        echoTester("/foo",null);
-        echoTester("/foo/",null);
+        echoTester("/foo", null);
+        echoTester("/foo/", null);
     }
 
-    public void echoTester(String path, ClientEndpointConfig clientEndpointConfig)
-            throws Exception {
+    public void echoTester(String path, ClientEndpointConfig clientEndpointConfig) throws Exception {
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         if (clientEndpointConfig == null) {
@@ -133,8 +126,8 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
         // CI systems.
         clientEndpointConfig.getUserProperties().put(Constants.IO_TIMEOUT_MS_PROPERTY, "10000");
 
-        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
-                clientEndpointConfig, new URI("ws://localhost:" + getPort() + path));
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
+                new URI("ws://localhost:" + getPort() + path));
         CountDownLatch latch = new CountDownLatch(1);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);
@@ -220,7 +213,7 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
 
         ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();
         clientEndpointConfig.getUserProperties().put(Constants.WS_AUTHENTICATION_USER_NAME, USER);
-        clientEndpointConfig.getUserProperties().put(Constants.WS_AUTHENTICATION_PASSWORD,PWD);
+        clientEndpointConfig.getUserProperties().put(Constants.WS_AUTHENTICATION_PASSWORD, PWD);
 
         echoTester(URI_PROTECTED, clientEndpointConfig);
     }

==================================================
TestWsFrame.java
index b887ba6522..5eae78a1bc 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
@@ -61,12 +61,11 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
     @Parameterized.Parameters(name = "{0}")
     public static Collection<Object[]> parameters() {
         List<Object[]> parameterSets = new ArrayList<>();
-        parameterSets.add(new Object[] {
-                "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
-        parameterSets.add(new Object[] {
-                "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
-        parameterSets.add(new Object[] {
-                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
+        parameterSets.add(new Object[] { "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation" });
+        parameterSets.add(
+                new Object[] { "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation" });
+        parameterSets.add(new Object[] { "OpenSSL-Panama", Boolean.FALSE,
+                "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation" });
 
         return parameterSets;
     }
@@ -103,18 +102,14 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
         }
         TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
         tmf.init(ks);
-        sslContext.init(null,  tmf.getTrustManagers(), null);
-
-        ClientEndpointConfig clientEndpointConfig =
-                ClientEndpointConfig.Builder.create().sslContext(sslContext).build();
-
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("wss://localhost:" + getPort() +
-                        TesterFirehoseServer.PATH));
-        CountDownLatch latch =
-                new CountDownLatch(TesterFirehoseServer.MESSAGE_COUNT);
+        sslContext.init(null, tmf.getTrustManagers(), null);
+
+        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().sslContext(sslContext)
+                .build();
+
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
+                new URI("wss://localhost:" + getPort() + TesterFirehoseServer.PATH));
+        CountDownLatch latch = new CountDownLatch(TesterFirehoseServer.MESSAGE_COUNT);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);
         wsSession.getBasicRemote().sendText("Hello");
@@ -123,12 +118,10 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
 
         // Ignore the latch result as the message count test below will tell us
         // if the right number of messages arrived
-        handler.getLatch().await(TesterFirehoseServer.WAIT_TIME_MILLIS,
-                TimeUnit.MILLISECONDS);
+        handler.getLatch().await(TesterFirehoseServer.WAIT_TIME_MILLIS, TimeUnit.MILLISECONDS);
 
         Queue<String> messages = handler.getMessages();
-        Assert.assertEquals(
-                TesterFirehoseServer.MESSAGE_COUNT, messages.size());
+        Assert.assertEquals(TesterFirehoseServer.MESSAGE_COUNT, messages.size());
         for (String message : messages) {
             Assert.assertEquals(TesterFirehoseServer.MESSAGE, message);
         }
@@ -157,16 +150,13 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
         }
         TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
         tmf.init(ks);
-        sslContext.init(null,  tmf.getTrustManagers(), null);
+        sslContext.init(null, tmf.getTrustManagers(), null);
 
-        ClientEndpointConfig clientEndpointConfig =
-                ClientEndpointConfig.Builder.create().sslContext(sslContext).build();
+        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().sslContext(sslContext)
+                .build();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("wss://localhost:" + getPort() +
-                        TesterFirehoseServer.PATH));
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
+                new URI("wss://localhost:" + getPort() + TesterFirehoseServer.PATH));
 
         // Process incoming messages very slowly
         MessageHandler handler = new SleepingText(5000);
@@ -180,7 +170,7 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
         System.out.println("Waiting for server to report an error");
         while (TesterFirehoseServer.Endpoint.getErrorCount() == 0 && count < limit) {
             Thread.sleep(100);
-            count ++;
+            count++;
         }
 
         if (TesterFirehoseServer.Endpoint.getErrorCount() == 0) {
@@ -194,7 +184,7 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
         limit = TesterFirehoseServer.WAIT_TIME_MILLIS / 100;
         while (TesterFirehoseServer.Endpoint.getOpenConnectionCount() != 0 && count < limit) {
             Thread.sleep(100);
-            count ++;
+            count++;
         }
 
         int openConnectionCount = TesterFirehoseServer.Endpoint.getOpenConnectionCount();

==================================================
TestWsPingPongMessages.java
index d6afce0cfd..c14386d68e 100644
--- a/test/org/apache/tomcat/websocket/TestWsFrame.java
+++ b/test/org/apache/tomcat/websocket/TestWsFrame.java
@@ -37,8 +37,7 @@ public class TestWsFrame {
                 WsFrameBase.byteArrayToLong(new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 7));
         Assert.assertEquals(0x7FFFFFFFFFFFFFFFL,
                 WsFrameBase.byteArrayToLong(new byte[] { 127, -1, -1, -1, -1, -1, -1, -1 }, 0, 8));
-        Assert.assertEquals(-1,
-                WsFrameBase.byteArrayToLong(new byte[] { -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8));
+        Assert.assertEquals(-1, WsFrameBase.byteArrayToLong(new byte[] { -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8));
     }
 
 
@@ -57,7 +56,6 @@ public class TestWsFrame {
                 WsFrameBase.byteArrayToLong(new byte[] { 20, -1, -1, -1, -1, -1, -1, -1 }, 1, 7));
         Assert.assertEquals(0x7FFFFFFFFFFFFFFFL,
                 WsFrameBase.byteArrayToLong(new byte[] { 20, 127, -1, -1, -1, -1, -1, -1, -1 }, 1, 8));
-        Assert.assertEquals(-1,
-                WsFrameBase.byteArrayToLong(new byte[] { 20, -1, -1, -1, -1, -1, -1, -1, -1 }, 1, 8));
+        Assert.assertEquals(-1, WsFrameBase.byteArrayToLong(new byte[] { 20, -1, -1, -1, -1, -1, -1, -1, -1 }, 1, 8));
     }
 }

==================================================
TestWsRemoteEndpoint.java
index 25951da5da..ac29d367f2 100644
--- a/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
+++ b/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
@@ -54,17 +54,14 @@ public class TestWsPingPongMessages extends WebSocketBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer = ContainerProvider
-                .getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class, ClientEndpointConfig.Builder
-                        .create().build(), new URI("ws://localhost:"
-                        + getPort() + TesterEchoServer.Config.PATH_ASYNC));
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
+                ClientEndpointConfig.Builder.create().build(),
+                new URI("ws://localhost:" + getPort() + TesterEchoServer.Config.PATH_ASYNC));
 
         CountDownLatch latch = new CountDownLatch(1);
-        TesterEndpoint tep = (TesterEndpoint) wsSession.getUserProperties()
-                .get("endpoint");
+        TesterEndpoint tep = (TesterEndpoint) wsSession.getUserProperties().get("endpoint");
         tep.setLatch(latch);
 
         PongMessageHandler handler = new PongMessageHandler(latch);
@@ -73,12 +70,10 @@ public class TestWsPingPongMessages extends WebSocketBaseTest {
 
         boolean latchResult = handler.getLatch().await(10, TimeUnit.SECONDS);
         Assert.assertTrue(latchResult);
-        Assert.assertArrayEquals(applicationData.array(),
-                (handler.getMessages().peek()).getApplicationData().array());
+        Assert.assertArrayEquals(applicationData.array(), (handler.getMessages().peek()).getApplicationData().array());
     }
 
-    public static class PongMessageHandler extends
-            TesterMessageCountClient.BasicHandler<PongMessage> {
+    public static class PongMessageHandler extends TesterMessageCountClient.BasicHandler<PongMessage> {
         public PongMessageHandler(CountDownLatch latch) {
             super(latch);
         }

==================================================
TestWsSessionSuspendResume.java
index d2c9edd1f6..5aaa95bdbe 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -97,27 +97,22 @@ public class TestWsRemoteEndpoint extends WebSocketBaseTest {
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMappingDecoded("/", "default");
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         tomcat.start();
 
         Session wsSession;
-        URI uri = new URI("ws://localhost:" + getPort() +
-                TesterEchoServer.Config.PATH_ASYNC);
+        URI uri = new URI("ws://localhost:" + getPort() + TesterEchoServer.Config.PATH_ASYNC);
         if (Endpoint.class.isAssignableFrom(clazz)) {
             @SuppressWarnings("unchecked")
-            Class<? extends Endpoint> endpointClazz =
-                    (Class<? extends Endpoint>) clazz;
-            wsSession = wsContainer.connectToServer(endpointClazz,
-                    Builder.create().build(), uri);
+            Class<? extends Endpoint> endpointClazz = (Class<? extends Endpoint>) clazz;
+            wsSession = wsContainer.connectToServer(endpointClazz, Builder.create().build(), uri);
         } else {
             wsSession = wsContainer.connectToServer(clazz, uri);
         }
 
         CountDownLatch latch = new CountDownLatch(1);
-        TesterEndpoint tep =
-                (TesterEndpoint) wsSession.getUserProperties().get("endpoint");
+        TesterEndpoint tep = (TesterEndpoint) wsSession.getUserProperties().get("endpoint");
         tep.setLatch(latch);
         AsyncHandler<?> handler;
         if (useWriter) {
@@ -175,8 +170,7 @@ public class TestWsRemoteEndpoint extends WebSocketBaseTest {
                 Assert.assertEquals(0, result.length());
             } else {
                 // First may be a fragment
-                Assert.assertEquals(SEQUENCE.substring(offset, S_LEN),
-                        result.substring(0, S_LEN - offset));
+                Assert.assertEquals(SEQUENCE.substring(offset, S_LEN), result.substring(0, S_LEN - offset));
                 i = S_LEN - offset;
                 while (i + S_LEN < result.length()) {
                     if (!SEQUENCE.equals(result.substring(i, i + S_LEN))) {

==================================================
TestWsSubprotocols.java
index b17dddf54f..73b0472586 100644
--- a/test/org/apache/tomcat/websocket/TestWsSessionSuspendResume.java
+++ b/test/org/apache/tomcat/websocket/TestWsSessionSuspendResume.java
@@ -58,9 +58,7 @@ public class TestWsSessionSuspendResume extends WebSocketBaseTest {
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
                 new URI("ws://localhost:" + getPort() + Config.PATH));
 
         CountDownLatch latch = new CountDownLatch(2);
@@ -97,7 +95,7 @@ public class TestWsSessionSuspendResume extends WebSocketBaseTest {
     public static final class SuspendResumeEndpoint extends Endpoint {
 
         @Override
-        public void onOpen(Session session, EndpointConfig  epc) {
+        public void onOpen(Session session, EndpointConfig epc) {
             MessageProcessor processor = new MessageProcessor(session, 3);
             session.addMessageHandler(String.class, message -> processor.addMessage(message));
         }

==================================================
TestWsWebSocketContainer.java
index 9a38161806..ecf54cc2b8 100644
--- a/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
+++ b/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
@@ -53,16 +53,13 @@ public class TestWsSubprotocols extends WebSocketBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer = ContainerProvider
-                .getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class, ClientEndpointConfig.Builder
-                        .create().preferredSubprotocols(Arrays.asList("sp3"))
-                        .build(), new URI("ws://localhost:" + getPort()
-                        + SubProtocolsEndpoint.PATH_BASIC));
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
+                ClientEndpointConfig.Builder.create().preferredSubprotocols(Arrays.asList("sp3")).build(),
+                new URI("ws://localhost:" + getPort() + SubProtocolsEndpoint.PATH_BASIC));
 
         Assert.assertTrue(wsSession.isOpen());
         if (wsSession.getNegotiatedSubprotocol() != null) {
@@ -71,11 +68,9 @@ public class TestWsSubprotocols extends WebSocketBaseTest {
         wsSession.close();
         SubProtocolsEndpoint.recycle();
 
-        wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class, ClientEndpointConfig.Builder
-                        .create().preferredSubprotocols(Arrays.asList("sp2"))
-                        .build(), new URI("ws://localhost:" + getPort()
-                        + SubProtocolsEndpoint.PATH_BASIC));
+        wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
+                ClientEndpointConfig.Builder.create().preferredSubprotocols(Arrays.asList("sp2")).build(),
+                new URI("ws://localhost:" + getPort() + SubProtocolsEndpoint.PATH_BASIC));
 
         Assert.assertTrue(wsSession.isOpen());
         Assert.assertEquals("sp2", wsSession.getNegotiatedSubprotocol());
@@ -87,21 +82,20 @@ public class TestWsSubprotocols extends WebSocketBaseTest {
             Thread.sleep(100);
         }
         Assert.assertNotNull(SubProtocolsEndpoint.subprotocols);
-        Assert.assertArrayEquals(new String[]{"sp1","sp2"},
+        Assert.assertArrayEquals(new String[] { "sp1", "sp2" },
                 SubProtocolsEndpoint.subprotocols.toArray(new String[0]));
         wsSession.close();
         SubProtocolsEndpoint.recycle();
     }
 
-    @ServerEndpoint(value = "/echo", subprotocols = {"sp1","sp2"})
+    @ServerEndpoint(value = "/echo", subprotocols = { "sp1", "sp2" })
     public static class SubProtocolsEndpoint {
         public static final String PATH_BASIC = "/echo";
         public static volatile List<String> subprotocols;
 
         @OnOpen
-        public void processOpen(@SuppressWarnings("unused") Session session,
-                EndpointConfig  epc) {
-            subprotocols = ((ServerEndpointConfig)epc).getSubprotocols();
+        public void processOpen(@SuppressWarnings("unused") Session session, EndpointConfig epc) {
+            subprotocols = ((ServerEndpointConfig) epc).getSubprotocols();
         }
 
         public static void recycle() {

==================================================
TestWsWebSocketContainerGetOpenSessions.java
index de8631446c..470ae1f219 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -82,16 +82,13 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
         // Set this artificially small to trigger
         // https://bz.apache.org/bugzilla/show_bug.cgi?id=57054
         wsContainer.setDefaultMaxBinaryMessageBufferSize(64);
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
-                new URI("ws://" + getHostName() + ":" + getPort() +
-                        TesterEchoServer.Config.PATH_ASYNC));
+                new URI("ws://" + getHostName() + ":" + getPort() + TesterEchoServer.Config.PATH_ASYNC));
         CountDownLatch latch = new CountDownLatch(1);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);
@@ -109,7 +106,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
     }
 
 
-    @Test(expected=jakarta.websocket.DeploymentException.class)
+    @Test(expected = jakarta.websocket.DeploymentException.class)
     public void testConnectToServerEndpointInvalidScheme() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required
@@ -118,16 +115,13 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
-        wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
-                ClientEndpointConfig.Builder.create().build(),
-                new URI("ftp://" + getHostName() + ":" + getPort() +
-                        TesterEchoServer.Config.PATH_ASYNC));
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
+        wsContainer.connectToServer(TesterProgrammaticEndpoint.class, ClientEndpointConfig.Builder.create().build(),
+                new URI("ftp://" + getHostName() + ":" + getPort() + TesterEchoServer.Config.PATH_ASYNC));
     }
 
 
-    @Test(expected=jakarta.websocket.DeploymentException.class)
+    @Test(expected = jakarta.websocket.DeploymentException.class)
     public void testConnectToServerEndpointNoHost() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required
@@ -136,10 +130,8 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
-        wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
-                ClientEndpointConfig.Builder.create().build(),
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
+        wsContainer.connectToServer(TesterProgrammaticEndpoint.class, ClientEndpointConfig.Builder.create().build(),
                 new URI("ws://" + TesterEchoServer.Config.PATH_ASYNC));
     }
 
@@ -192,8 +184,8 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
     }
 
 
-    private void doBufferTest(boolean isTextBuffer, boolean isServerBuffer,
-            boolean isTextMessage, boolean pass) throws Exception {
+    private void doBufferTest(boolean isTextBuffer, boolean isServerBuffer, boolean isTextMessage, boolean pass)
+            throws Exception {
 
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required
@@ -202,19 +194,16 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMappingDecoded("/", "default");
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         if (isServerBuffer) {
             if (isTextBuffer) {
                 ctx.addParameter(
-                        org.apache.tomcat.websocket.server.Constants.
-                                TEXT_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM,
+                        org.apache.tomcat.websocket.server.Constants.TEXT_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM,
                         "1024");
             } else {
                 ctx.addParameter(
-                        org.apache.tomcat.websocket.server.Constants.
-                                BINARY_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM,
+                        org.apache.tomcat.websocket.server.Constants.BINARY_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM,
                         "1024");
             }
         } else {
@@ -227,15 +216,12 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
-                        new URI("ws://" + getHostName() + ":" + getPort() +
-                                TesterEchoServer.Config.PATH_BASIC));
+                new URI("ws://" + getHostName() + ":" + getPort() + TesterEchoServer.Config.PATH_BASIC));
         BasicHandler<?> handler;
         CountDownLatch latch = new CountDownLatch(1);
-        TesterEndpoint tep =
-                (TesterEndpoint) wsSession.getUserProperties().get("endpoint");
+        TesterEndpoint tep = (TesterEndpoint) wsSession.getUserProperties().get("endpoint");
         tep.setLatch(latch);
         if (isTextMessage) {
             handler = new BasicText(latch);
@@ -248,8 +234,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
             if (isTextMessage) {
                 wsSession.getBasicRemote().sendText(MESSAGE_TEXT_4K);
             } else {
-                wsSession.getBasicRemote().sendBinary(
-                        ByteBuffer.wrap(MESSAGE_BINARY_4K));
+                wsSession.getBasicRemote().sendBinary(ByteBuffer.wrap(MESSAGE_BINARY_4K));
             }
         } catch (IOException ioe) {
             // Some messages sends are expected to fail. Assertions further on
@@ -267,8 +252,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
             if (isTextMessage) {
                 Assert.assertEquals(MESSAGE_TEXT_4K, messages.peek());
             } else {
-                Assert.assertEquals(ByteBuffer.wrap(MESSAGE_BINARY_4K),
-                        messages.peek());
+                Assert.assertEquals(ByteBuffer.wrap(MESSAGE_BINARY_4K), messages.peek());
             }
         } else {
             // When the message exceeds the buffer size, the WebSocket is
@@ -295,9 +279,8 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainer sc =
-                    (ServerContainer) sce.getServletContext().getAttribute(
-                            org.apache.tomcat.websocket.server.Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
+            ServerContainer sc = (ServerContainer) sce.getServletContext().getAttribute(
+                    org.apache.tomcat.websocket.server.Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
             try {
                 // Reset blocking state
                 BlockingPojo.resetBlock();
@@ -331,6 +314,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
                 block = true;
             }
         }
+
         @SuppressWarnings("unused")
         @OnMessage
         public void echoTextMessage(Session session, String msg, boolean last) {
@@ -348,8 +332,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         @SuppressWarnings("unused")
         @OnMessage
-        public void echoBinaryMessage(Session session, ByteBuffer msg,
-                boolean last) {
+        public void echoBinaryMessage(Session session, ByteBuffer msg, boolean last) {
             try {
                 synchronized (monitor) {
                     while (block) {
@@ -363,8 +346,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
     }
 
 
-    public static class BlockingBinaryHandler
-            implements MessageHandler.Partial<ByteBuffer> {
+    public static class BlockingBinaryHandler implements MessageHandler.Partial<ByteBuffer> {
 
         @Override
         public void onMessage(ByteBuffer messagePart, boolean last) {
@@ -388,22 +370,16 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         EndpointA endpointA = new EndpointA();
-        Session s1a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
-        Session s2a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
-        Session s3a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
+        Session s1a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
+        Session s2a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
+        Session s3a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
 
         EndpointB endpointB = new EndpointB();
-        Session s1b = connectToEchoServer(wsContainer, endpointB,
-                TesterEchoServer.Config.PATH_BASIC);
-        Session s2b = connectToEchoServer(wsContainer, endpointB,
-                TesterEchoServer.Config.PATH_BASIC);
+        Session s1b = connectToEchoServer(wsContainer, endpointB, TesterEchoServer.Config.PATH_BASIC);
+        Session s2b = connectToEchoServer(wsContainer, endpointB, TesterEchoServer.Config.PATH_BASIC);
 
         Set<Session> setA = s3a.getOpenSessions();
         Assert.assertEquals(3, setA.size());
@@ -466,7 +442,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
         // but that is still well under the 90s configured for the session.
         int count = 0;
         while (count < 300 && s1a.isOpen()) {
-            count ++;
+            count++;
             Thread.sleep(100);
         }
         Assert.assertFalse(s1a.isOpen());
@@ -506,7 +482,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
         // but that is still well under the 90s configured for the session.
         int count = 0;
         while (count < 300 && s1a.isOpen()) {
-            count ++;
+            count++;
             Thread.sleep(100);
         }
         Assert.assertFalse(s1a.isOpen());
@@ -533,48 +509,45 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
     @Test
     public void testMaxMessageSize01() throws Exception {
-        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW,
-                TesterEchoServer.BasicLimitLow.MAX_SIZE - 1, true);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW, TesterEchoServer.BasicLimitLow.MAX_SIZE - 1,
+                true);
     }
 
 
     @Test
     public void testMaxMessageSize02() throws Exception {
-        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW,
-                TesterEchoServer.BasicLimitLow.MAX_SIZE, true);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW, TesterEchoServer.BasicLimitLow.MAX_SIZE, true);
     }
 
 
     @Test
     public void testMaxMessageSize03() throws Exception {
-        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW,
-                TesterEchoServer.BasicLimitLow.MAX_SIZE + 1, false);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW, TesterEchoServer.BasicLimitLow.MAX_SIZE + 1,
+                false);
     }
 
 
     @Test
     public void testMaxMessageSize04() throws Exception {
-        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH,
-                TesterEchoServer.BasicLimitHigh.MAX_SIZE - 1, true);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH, TesterEchoServer.BasicLimitHigh.MAX_SIZE - 1,
+                true);
     }
 
 
     @Test
     public void testMaxMessageSize05() throws Exception {
-        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH,
-                TesterEchoServer.BasicLimitHigh.MAX_SIZE, true);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH, TesterEchoServer.BasicLimitHigh.MAX_SIZE, true);
     }
 
 
     @Test
     public void testMaxMessageSize06() throws Exception {
-        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH,
-                TesterEchoServer.BasicLimitHigh.MAX_SIZE + 1, false);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH, TesterEchoServer.BasicLimitHigh.MAX_SIZE + 1,
+                false);
     }
 
 
-    private void doMaxMessageSize(String path, long size, boolean expectOpen)
-            throws Exception {
+    private void doMaxMessageSize(String path, long size, boolean expectOpen) throws Exception {
 
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required
@@ -585,8 +558,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
 
         tomcat.start();
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         Session s = connectToEchoServer(wsContainer, new EndpointA(), path);
 
@@ -609,8 +581,7 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
             open = s.isOpen();
         }
 
-        Assert.assertEquals(Boolean.valueOf(expectOpen),
-                Boolean.valueOf(s.isOpen()));
+        Assert.assertEquals(Boolean.valueOf(expectOpen), Boolean.valueOf(s.isOpen()));
 
         // Close the session if it is expected to be open
         if (expectOpen) {
@@ -673,16 +644,11 @@ public class TestWsWebSocketContainer extends WsWebSocketContainerBaseTest {
         List<Extension> extensions = new ArrayList<>(1);
         extensions.add(perMessageDeflate);
 
-        ClientEndpointConfig clientConfig =
-                ClientEndpointConfig.Builder.create().extensions(extensions).build();
+        ClientEndpointConfig clientConfig = ClientEndpointConfig.Builder.create().extensions(extensions).build();
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientConfig,
-                new URI("ws://" + getHostName() + ":" + getPort() +
-                        TesterEchoServer.Config.PATH_ASYNC));
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientConfig,
+                new URI("ws://" + getHostName() + ":" + getPort() + TesterEchoServer.Config.PATH_ASYNC));
         CountDownLatch latch = new CountDownLatch(count);
         BasicText handler = new BasicText(latch, msg);
         wsSession.addMessageHandler(handler);

==================================================
TestWsWebSocketContainerSSL.java
index c6802ba09c..974275d5fb 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerGetOpenSessions.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerGetOpenSessions.java
@@ -164,8 +164,8 @@ public class TestWsWebSocketContainerGetOpenSessions extends WebSocketBaseTest {
     }
 
 
-    private void doTest(Endpoint client1, Endpoint client2, String server1, String server2,
-            int client1Count, int client2Count, int server1Count, int server2Count) throws Exception {
+    private void doTest(Endpoint client1, Endpoint client2, String server1, String server2, int client1Count,
+            int client2Count, int server1Count, int server2Count) throws Exception {
         Tracker.reset();
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required
@@ -205,12 +205,10 @@ public class TestWsWebSocketContainerGetOpenSessions extends WebSocketBaseTest {
     }
 
 
-    private Session createSession(WebSocketContainer wsContainer, Endpoint client,
-            String clientName, String server)
+    private Session createSession(WebSocketContainer wsContainer, Endpoint client, String clientName, String server)
             throws DeploymentException, IOException, URISyntaxException {
 
-        Session s = wsContainer.connectToServer(client,
-                ClientEndpointConfig.Builder.create().build(),
+        Session s = wsContainer.connectToServer(client, ClientEndpointConfig.Builder.create().build(),
                 new URI("ws://localhost:" + getPort() + server));
         Tracker.addRecord(clientName, s.getOpenSessions().size());
         s.getBasicRemote().sendText("X");
@@ -223,17 +221,14 @@ public class TestWsWebSocketContainerGetOpenSessions extends WebSocketBaseTest {
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainer sc =
-                    (ServerContainer) sce.getServletContext().getAttribute(
-                            Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
+            ServerContainer sc = (ServerContainer) sce.getServletContext()
+                    .getAttribute(Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
 
             try {
                 sc.addEndpoint(PojoEndpointA.class);
                 sc.addEndpoint(PojoEndpointB.class);
-                sc.addEndpoint(ServerEndpointConfig.Builder.create(
-                        ServerEndpointA.class, "/progA").build());
-                sc.addEndpoint(ServerEndpointConfig.Builder.create(
-                        ServerEndpointB.class, "/progB").build());
+                sc.addEndpoint(ServerEndpointConfig.Builder.create(ServerEndpointA.class, "/progA").build());
+                sc.addEndpoint(ServerEndpointConfig.Builder.create(ServerEndpointB.class, "/progB").build());
             } catch (DeploymentException e) {
                 throw new IllegalStateException(e);
             }
@@ -272,7 +267,7 @@ public class TestWsWebSocketContainerGetOpenSessions extends WebSocketBaseTest {
     }
 
 
-    public abstract static class ServerEndpointBase extends Endpoint{
+    public abstract static class ServerEndpointBase extends Endpoint {
 
         @Override
         public void onOpen(Session session, EndpointConfig config) {

==================================================
TestWsWebSocketContainerSessionExpiryContainer.java
index 65a755e0f2..1a9f6e50fb 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerSSL.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerSSL.java
@@ -59,12 +59,11 @@ public class TestWsWebSocketContainerSSL extends WebSocketBaseTest {
     @Parameterized.Parameters(name = "{0}")
     public static Collection<Object[]> parameters() {
         List<Object[]> parameterSets = new ArrayList<>();
-        parameterSets.add(new Object[] {
-                "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
-        parameterSets.add(new Object[] {
-                "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
-        parameterSets.add(new Object[] {
-                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
+        parameterSets.add(new Object[] { "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation" });
+        parameterSets.add(
+                new Object[] { "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation" });
+        parameterSets.add(new Object[] { "OpenSSL-Panama", Boolean.FALSE,
+                "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation" });
 
         return parameterSets;
     }
@@ -104,16 +103,13 @@ public class TestWsWebSocketContainerSSL extends WebSocketBaseTest {
         }
         TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
         tmf.init(ks);
-        sslContext.init(null,  tmf.getTrustManagers(), null);
+        sslContext.init(null, tmf.getTrustManagers(), null);
 
-        ClientEndpointConfig clientEndpointConfig =
-                ClientEndpointConfig.Builder.create().sslContext(sslContext).build();
+        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().sslContext(sslContext)
+                .build();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("wss://localhost:" + getPort() +
-                        TesterEchoServer.Config.PATH_ASYNC));
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
+                new URI("wss://localhost:" + getPort() + TesterEchoServer.Config.PATH_ASYNC));
         CountDownLatch latch = new CountDownLatch(1);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);

==================================================
TestWsWebSocketContainerSessionExpirySession.java
index 8f5dfb6881..790c71f28c 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerSessionExpiryContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerSessionExpiryContainer.java
@@ -35,7 +35,7 @@ import org.apache.tomcat.websocket.TestWsWebSocketContainer.EndpointA;
  * significantly extends the length of a test run when using multiple test
  * threads.
  */
-public class TestWsWebSocketContainerSessionExpiryContainer  extends WsWebSocketContainerBaseTest {
+public class TestWsWebSocketContainerSessionExpiryContainer extends WsWebSocketContainerBaseTest {
 
     @Test
     public void testSessionExpiryContainer() throws Exception {
@@ -50,20 +50,16 @@ public class TestWsWebSocketContainerSessionExpiryContainer  extends WsWebSocket
         tomcat.start();
 
         // Need access to implementation methods for configuring unit tests
-        WsWebSocketContainer wsContainer = (WsWebSocketContainer)
-                ContainerProvider.getWebSocketContainer();
+        WsWebSocketContainer wsContainer = (WsWebSocketContainer) ContainerProvider.getWebSocketContainer();
 
         // 5 second timeout
         wsContainer.setDefaultMaxSessionIdleTimeout(5000);
         wsContainer.setProcessPeriod(1);
 
         EndpointA endpointA = new EndpointA();
-        connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
-        connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
-        Session s3a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
+        connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
+        connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
+        Session s3a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
 
         // Check all three sessions are open
         Set<Session> setA = s3a.getOpenSessions();
@@ -72,7 +68,7 @@ public class TestWsWebSocketContainerSessionExpiryContainer  extends WsWebSocket
         int count = 0;
         boolean isOpen = true;
         while (isOpen && count < 8) {
-            count ++;
+            count++;
             Thread.sleep(1000);
             isOpen = false;
             for (Session session : setA) {
@@ -86,8 +82,7 @@ public class TestWsWebSocketContainerSessionExpiryContainer  extends WsWebSocket
         if (isOpen) {
             for (Session session : setA) {
                 if (session.isOpen()) {
-                    System.err.println("Session with ID [" + session.getId() +
-                            "] is open");
+                    System.err.println("Session with ID [" + session.getId() + "] is open");
                 }
             }
             Assert.fail("There were open sessions");

==================================================
TestWsWebSocketContainerTimeoutClient.java
index b265e081f9..bb893e4ae6 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerSessionExpirySession.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerSessionExpirySession.java
@@ -35,7 +35,7 @@ import org.apache.tomcat.websocket.TestWsWebSocketContainer.EndpointA;
  * significantly extends the length of a test run when using multiple test
  * threads.
  */
-public class TestWsWebSocketContainerSessionExpirySession  extends WsWebSocketContainerBaseTest {
+public class TestWsWebSocketContainerSessionExpirySession extends WsWebSocketContainerBaseTest {
 
     @Test
     public void testSessionExpirySession() throws Exception {
@@ -50,22 +50,18 @@ public class TestWsWebSocketContainerSessionExpirySession  extends WsWebSocketCo
         tomcat.start();
 
         // Need access to implementation methods for configuring unit tests
-        WsWebSocketContainer wsContainer = (WsWebSocketContainer)
-                ContainerProvider.getWebSocketContainer();
+        WsWebSocketContainer wsContainer = (WsWebSocketContainer) ContainerProvider.getWebSocketContainer();
 
         // 5 second timeout
         wsContainer.setDefaultMaxSessionIdleTimeout(5000);
         wsContainer.setProcessPeriod(1);
 
         EndpointA endpointA = new EndpointA();
-        Session s1a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
+        Session s1a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
         s1a.setMaxIdleTimeout(3000);
-        Session s2a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
+        Session s2a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
         s2a.setMaxIdleTimeout(6000);
-        Session s3a = connectToEchoServer(wsContainer, endpointA,
-                TesterEchoServer.Config.PATH_BASIC);
+        Session s3a = connectToEchoServer(wsContainer, endpointA, TesterEchoServer.Config.PATH_BASIC);
         s3a.setMaxIdleTimeout(9000);
 
         // Check all three sessions are open
@@ -77,7 +73,7 @@ public class TestWsWebSocketContainerSessionExpirySession  extends WsWebSocketCo
 
             int count = 0;
             while (getOpenCount(setA) == expected && count < 50) {
-                count ++;
+                count++;
                 Thread.sleep(100);
             }
 

==================================================
TestWsWebSocketContainerTimeoutServer.java
index b9175065d9..401e1ea00f 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerTimeoutClient.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerTimeoutClient.java
@@ -41,7 +41,7 @@ import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEn
  * significantly extends the length of a test run when using multiple test
  * threads.
  */
-public class TestWsWebSocketContainerTimeoutClient  extends WsWebSocketContainerBaseTest {
+public class TestWsWebSocketContainerTimeoutClient extends WsWebSocketContainerBaseTest {
 
     @Test
     public void testWriteTimeoutClientContainer() throws Exception {
@@ -55,8 +55,7 @@ public class TestWsWebSocketContainerTimeoutClient  extends WsWebSocketContainer
     }
 
 
-    private void doTestWriteTimeoutClient(boolean setTimeoutOnContainer)
-            throws Exception {
+    private void doTestWriteTimeoutClient(boolean setTimeoutOnContainer) throws Exception {
 
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required
@@ -65,8 +64,7 @@ public class TestWsWebSocketContainerTimeoutClient  extends WsWebSocketContainer
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMappingDecoded("/", "default");
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         // Set the async timeout
         if (setTimeoutOnContainer) {
@@ -75,8 +73,7 @@ public class TestWsWebSocketContainerTimeoutClient  extends WsWebSocketContainer
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                 new URI("ws://" + getHostName() + ":" + getPort() + BlockingConfig.PATH));
 
@@ -92,8 +89,7 @@ public class TestWsWebSocketContainerTimeoutClient  extends WsWebSocketContainer
         try {
             while (true) {
                 lastSend = System.currentTimeMillis();
-                Future<Void> f = wsSession.getAsyncRemote().sendBinary(
-                        ByteBuffer.wrap(MESSAGE_BINARY_4K));
+                Future<Void> f = wsSession.getAsyncRemote().sendBinary(ByteBuffer.wrap(MESSAGE_BINARY_4K));
                 f.get();
             }
         } catch (Exception e) {
@@ -113,7 +109,7 @@ public class TestWsWebSocketContainerTimeoutClient  extends WsWebSocketContainer
         String msg = "Time out was [" + timeout + "] ms";
 
         // Check correct time passed
-        Assert.assertTrue(msg, timeout >= TIMEOUT_MS - MARGIN );
+        Assert.assertTrue(msg, timeout >= TIMEOUT_MS - MARGIN);
 
         // Check the timeout wasn't too long
         Assert.assertTrue(msg, timeout < TIMEOUT_MS * 2);

==================================================
TestWsWebSocketContainerWithProxy.java
index f275324d78..ea30d0eee0 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerTimeoutServer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerTimeoutServer.java
@@ -49,7 +49,7 @@ import org.apache.tomcat.websocket.server.WsContextListener;
  * significantly extends the length of a test run when using multiple test
  * threads.
  */
-public class TestWsWebSocketContainerTimeoutServer  extends WsWebSocketContainerBaseTest {
+public class TestWsWebSocketContainerTimeoutServer extends WsWebSocketContainerBaseTest {
 
     @Test
     public void testWriteTimeoutServerContainer() throws Exception {
@@ -65,13 +65,11 @@ public class TestWsWebSocketContainerTimeoutServer  extends WsWebSocketContainer
 
     private static volatile boolean timeoutOnContainer = false;
 
-    private void doTestWriteTimeoutServer(boolean setTimeoutOnContainer)
-            throws Exception {
+    private void doTestWriteTimeoutServer(boolean setTimeoutOnContainer) throws Exception {
 
         /*
-         * Note: There are all sorts of horrible uses of statics in this test
-         *       because the API uses classes and the tests really need access
-         *       to the instances which simply isn't possible.
+         * Note: There are all sorts of horrible uses of statics in this test because the API uses classes and the tests
+         * really need access to the instances which simply isn't possible.
          */
         timeoutOnContainer = setTimeoutOnContainer;
 
@@ -83,16 +81,13 @@ public class TestWsWebSocketContainerTimeoutServer  extends WsWebSocketContainer
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMappingDecoded("/", "default");
 
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
-                new URI("ws://" + getHostName() + ":" + getPort() +
-                        ConstantTxConfig.PATH));
+                new URI("ws://" + getHostName() + ":" + getPort() + ConstantTxConfig.PATH));
 
         wsSession.addMessageHandler(new BlockingBinaryHandler());
 
@@ -111,17 +106,15 @@ public class TestWsWebSocketContainerTimeoutServer  extends WsWebSocketContainer
 
         // Check the right exception was thrown
         Assert.assertNotNull(ConstantTxEndpoint.getException());
-        Assert.assertEquals(ExecutionException.class,
-                ConstantTxEndpoint.getException().getClass());
+        Assert.assertEquals(ExecutionException.class, ConstantTxEndpoint.getException().getClass());
         Assert.assertNotNull(ConstantTxEndpoint.getException().getCause());
-        Assert.assertEquals(SocketTimeoutException.class,
-                ConstantTxEndpoint.getException().getCause().getClass());
+        Assert.assertEquals(SocketTimeoutException.class, ConstantTxEndpoint.getException().getCause().getClass());
 
         // Check correct time passed
         Assert.assertTrue(ConstantTxEndpoint.getTimeout() >= TIMEOUT_MS);
 
         // Check the timeout wasn't too long
-        Assert.assertTrue(ConstantTxEndpoint.getTimeout() < TIMEOUT_MS*2);
+        Assert.assertTrue(ConstantTxEndpoint.getTimeout() < TIMEOUT_MS * 2);
     }
 
 
@@ -132,12 +125,10 @@ public class TestWsWebSocketContainerTimeoutServer  extends WsWebSocketContainer
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainer sc =
-                    (ServerContainer) sce.getServletContext().getAttribute(
-                            org.apache.tomcat.websocket.server.Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
+            ServerContainer sc = (ServerContainer) sce.getServletContext().getAttribute(
+                    org.apache.tomcat.websocket.server.Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
             try {
-                sc.addEndpoint(ServerEndpointConfig.Builder.create(
-                        ConstantTxEndpoint.class, PATH).build());
+                sc.addEndpoint(ServerEndpointConfig.Builder.create(ConstantTxEndpoint.class, PATH).build());
                 if (timeoutOnContainer) {
                     sc.setAsyncSendTimeout(TIMEOUT_MS);
                 }
@@ -175,8 +166,7 @@ public class TestWsWebSocketContainerTimeoutServer  extends WsWebSocketContainer
             try {
                 while (true) {
                     lastSend = System.currentTimeMillis();
-                    Future<Void> f = session.getAsyncRemote().sendBinary(
-                            ByteBuffer.wrap(MESSAGE_BINARY_4K));
+                    Future<Void> f = session.getAsyncRemote().sendBinary(ByteBuffer.wrap(MESSAGE_BINARY_4K));
                     f.get();
                 }
             } catch (ExecutionException | InterruptedException e) {

==================================================
TesterAsyncTiming.java
index 64bb5a7547..f7f4c6a03e 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainerWithProxy.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainerWithProxy.java
@@ -39,7 +39,7 @@ public class TestWsWebSocketContainerWithProxy extends TestWsWebSocketContainer
         // With httpd 2.2, AllowCONNECT requires fixed ports. From 2.4, a range
         // can be used.
         getTomcatInstance().getConnector().setPort(8080);
-        Assert.assertTrue(getTomcatInstance().getConnector().setProperty("address","0.0.0.0"));
+        Assert.assertTrue(getTomcatInstance().getConnector().setProperty("address", "0.0.0.0"));
     }
 
     @Override

==================================================
TesterBlockWebSocketSCI.java
index 61cfbff69e..780b3a4112 100644
--- a/test/org/apache/tomcat/websocket/TesterAsyncTiming.java
+++ b/test/org/apache/tomcat/websocket/TesterAsyncTiming.java
@@ -45,8 +45,8 @@ public class TesterAsyncTiming {
     @ServerEndpoint(Config.PATH)
     public static class Endpoint {
 
-        private static final ByteBuffer LARGE_DATA= ByteBuffer.allocate(16 * 1024);
-        private static final ByteBuffer SMALL_DATA= ByteBuffer.allocate(4 * 1024);
+        private static final ByteBuffer LARGE_DATA = ByteBuffer.allocate(16 * 1024);
+        private static final ByteBuffer SMALL_DATA = ByteBuffer.allocate(4 * 1024);
 
         @OnMessage
         public void onMessage(Session session, @SuppressWarnings("unused") String text) {

==================================================
TesterEchoServer.java
index 3a691aad5d..05c9acdc7c 100644
--- a/test/org/apache/tomcat/websocket/TesterBlockWebSocketSCI.java
+++ b/test/org/apache/tomcat/websocket/TesterBlockWebSocketSCI.java
@@ -24,18 +24,15 @@ import jakarta.websocket.server.ServerApplicationConfig;
 import jakarta.websocket.server.ServerEndpointConfig;
 
 /**
- * This configuration blocks any endpoints discovered by the SCI from being
- * deployed. It is intended to prevent testing errors generated when the
- * WebSocket SCI scans the test classes for endpoints as it will discover
- * multiple endpoints mapped to the same path ('/'). The tests all explicitly
- * configure their required endpoints so have no need for SCI based
- * configuration.
+ * This configuration blocks any endpoints discovered by the SCI from being deployed. It is intended to prevent testing
+ * errors generated when the WebSocket SCI scans the test classes for endpoints as it will discover multiple endpoints
+ * mapped to the same path ('/'). The tests all explicitly configure their required endpoints so have no need for SCI
+ * based configuration.
  */
 public class TesterBlockWebSocketSCI implements ServerApplicationConfig {
 
     @Override
-    public Set<ServerEndpointConfig> getEndpointConfigs(
-            Set<Class<? extends Endpoint>> scanned) {
+    public Set<ServerEndpointConfig> getEndpointConfigs(Set<Class<? extends Endpoint>> scanned) {
         return Collections.emptySet();
     }
 

==================================================
TesterFirehoseServer.java
index cfc0855e20..f3007aff5a 100644
--- a/test/org/apache/tomcat/websocket/TesterEchoServer.java
+++ b/test/org/apache/tomcat/websocket/TesterEchoServer.java
@@ -42,9 +42,8 @@ public class TesterEchoServer {
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainer sc =
-                    (ServerContainer) sce.getServletContext().getAttribute(
-                            Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
+            ServerContainer sc = (ServerContainer) sce.getServletContext()
+                    .getAttribute(Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE);
             try {
                 sc.addEndpoint(Async.class);
                 sc.addEndpoint(Basic.class);
@@ -77,8 +76,7 @@ public class TesterEchoServer {
 
 
         @OnMessage
-        public void echoBinaryMessage(Session session, ByteBuffer msg,
-                boolean last) {
+        public void echoBinaryMessage(Session session, ByteBuffer msg, boolean last) {
             try {
                 session.getBasicRemote().sendBinary(msg, last);
             } catch (IOException e) {

==================================================
TesterMessageCountClient.java
index cae75528ad..4ddcb131bc 100644
--- a/test/org/apache/tomcat/websocket/TesterFirehoseServer.java
+++ b/test/org/apache/tomcat/websocket/TesterFirehoseServer.java
@@ -32,8 +32,8 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.websocket.server.TesterEndpointConfig;
 
 /**
- * Sends {@link #MESSAGE_COUNT} messages of size {@link #MESSAGE_SIZE} bytes as
- * quickly as possible after the client sends its first message.
+ * Sends {@link #MESSAGE_COUNT} messages of size {@link #MESSAGE_SIZE} bytes as quickly as possible after the client
+ * sends its first message.
  */
 public class TesterFirehoseServer {
 
@@ -156,8 +156,7 @@ public class TesterFirehoseServer {
         }
 
         public void doRun() throws IOException {
-            session.getUserProperties().put(
-                    org.apache.tomcat.websocket.Constants.BLOCKING_SEND_TIMEOUT_PROPERTY,
+            session.getUserProperties().put(org.apache.tomcat.websocket.Constants.BLOCKING_SEND_TIMEOUT_PROPERTY,
                     Long.valueOf(SEND_TIME_OUT_MILLIS));
 
             Basic remote = session.getBasicRemote();

==================================================
TesterWebSocketClientProxy.java
index 8faa193702..85a2f775d1 100644
--- a/test/org/apache/tomcat/websocket/TesterMessageCountClient.java
+++ b/test/org/apache/tomcat/websocket/TesterMessageCountClient.java
@@ -39,8 +39,7 @@ public class TesterMessageCountClient {
         void setLatch(CountDownLatch latch);
     }
 
-    public static class TesterProgrammaticEndpoint
-            extends Endpoint implements TesterEndpoint {
+    public static class TesterProgrammaticEndpoint extends Endpoint implements TesterEndpoint {
 
         private CountDownLatch latch = null;
 
@@ -108,8 +107,7 @@ public class TesterMessageCountClient {
     }
 
 
-    public abstract static class BasicHandler<T>
-            implements MessageHandler.Whole<T> {
+    public abstract static class BasicHandler<T> implements MessageHandler.Whole<T> {
 
         private final CountDownLatch latch;
 
@@ -162,9 +160,7 @@ public class TesterMessageCountClient {
                 getMessages().add(message);
             } else {
                 if (!expected.equals(message)) {
-                    throw new IllegalStateException(
-                            "Expected: [" + expected + "]\r\n" +
-                            "Was:      [" + message + "]");
+                    throw new IllegalStateException("Expected: [" + expected + "]\r\n" + "Was:      [" + message + "]");
                 }
             }
             if (getLatch() != null) {
@@ -191,8 +187,7 @@ public class TesterMessageCountClient {
         }
     }
 
-    public abstract static class AsyncHandler<T>
-            implements MessageHandler.Partial<T> {
+    public abstract static class AsyncHandler<T> implements MessageHandler.Partial<T> {
 
         private final CountDownLatch latch;
 

==================================================
TesterWsClientAutobahn.java
index 89919c8d8a..1bb9c4a225 100644
--- a/test/org/apache/tomcat/websocket/TesterWebSocketClientProxy.java
+++ b/test/org/apache/tomcat/websocket/TesterWebSocketClientProxy.java
@@ -171,11 +171,8 @@ public class TesterWebSocketClientProxy extends WebSocketBaseTest {
             clientEndpointConfig.getUserProperties().put(Constants.WS_AUTHENTICATION_PROXY_PASSWORD, PROXY_PASSWORD);
         }
 
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("ws://" + TOMCAT_ADDRESS + ":" + getPort() +
-                        TesterEchoServer.Config.PATH_ASYNC));
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class, clientEndpointConfig,
+                new URI("ws://" + TOMCAT_ADDRESS + ":" + getPort() + TesterEchoServer.Config.PATH_ASYNC));
         CountDownLatch latch = new CountDownLatch(1);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);

==================================================
WebSocketBaseTest.java
index 79c5e2ab2f..78259ebf56 100644
--- a/test/org/apache/tomcat/websocket/TesterWsClientAutobahn.java
+++ b/test/org/apache/tomcat/websocket/TesterWsClientAutobahn.java
@@ -38,8 +38,7 @@ import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.websocket.pojo.PojoEndpointClient;
 
 /**
- * Runs the Autobahn test suite in client mode for testing the WebSocket client
- * implementation.
+ * Runs the Autobahn test suite in client mode for testing the WebSocket client implementation.
  */
 public class TesterWsClientAutobahn {
 
@@ -73,8 +72,7 @@ public class TesterWsClientAutobahn {
     }
 
 
-    private static int getTestCaseCount(WebSocketContainer wsc)
-            throws Exception {
+    private static int getTestCaseCount(WebSocketContainer wsc) throws Exception {
 
         URI uri = new URI("ws://" + HOST + ":" + PORT + "/getCaseCount");
         CaseCountClient caseCountClient = new CaseCountClient();
@@ -83,10 +81,8 @@ public class TesterWsClientAutobahn {
     }
 
 
-    private static void executeTestCase(WebSocketContainer wsc, int testCase)
-            throws Exception {
-        URI uri = new URI("ws://" + HOST + ":" + PORT + "/runCase?case=" +
-                testCase + "&agent=" + USER_AGENT);
+    private static void executeTestCase(WebSocketContainer wsc, int testCase) throws Exception {
+        URI uri = new URI("ws://" + HOST + ":" + PORT + "/runCase?case=" + testCase + "&agent=" + USER_AGENT);
         TestCaseClient testCaseClient = new TestCaseClient();
 
         Extension permessageDeflate = new WsExtension("permessage-deflate");
@@ -94,8 +90,7 @@ public class TesterWsClientAutobahn {
         // Client only supports some values so there will be some failures here
         // Note Autobahn returns a 400 response if you provide a value for
         // client_max_window_bits
-        permessageDeflate.getParameters().add(
-                new WsExtensionParameter("client_max_window_bits", null));
+        permessageDeflate.getParameters().add(new WsExtensionParameter("client_max_window_bits", null));
         List<Extension> extensions = new ArrayList<>(1);
         extensions.add(permessageDeflate);
 
@@ -108,11 +103,9 @@ public class TesterWsClientAutobahn {
     }
 
 
-    private static void updateReports(WebSocketContainer wsc)
-            throws Exception {
+    private static void updateReports(WebSocketContainer wsc) throws Exception {
 
-        URI uri = new URI("ws://" + HOST + ":" + PORT +
-                "/updateReports?agent=" + USER_AGENT);
+        URI uri = new URI("ws://" + HOST + ":" + PORT + "/updateReports?agent=" + USER_AGENT);
         UpdateReportsClient updateReportsClient = new UpdateReportsClient();
         wsc.connectToServer(updateReportsClient, uri);
     }
@@ -170,8 +163,7 @@ public class TesterWsClientAutobahn {
         }
 
         @OnMessage
-        public void echoBinaryMessage(Session session, ByteBuffer bb,
-                boolean last) {
+        public void echoBinaryMessage(Session session, ByteBuffer bb, boolean last) {
             try {
                 if (session.isOpen()) {
                     session.getBasicRemote().sendBinary(bb, last);

==================================================
WsWebSocketContainerBaseTest.java
index 3d55c9d161..84b8414fcd 100644
--- a/test/org/apache/tomcat/websocket/WebSocketBaseTest.java
+++ b/test/org/apache/tomcat/websocket/WebSocketBaseTest.java
@@ -28,9 +28,7 @@ import org.apache.tomcat.websocket.server.WsContextListener;
 
 public abstract class WebSocketBaseTest extends TomcatBaseTest {
 
-    protected Tomcat startServer(
-            final Class<? extends WsContextListener> configClass)
-            throws LifecycleException {
+    protected Tomcat startServer(final Class<? extends WsContextListener> configClass) throws LifecycleException {
 
         Tomcat tomcat = getTomcatInstance();
         // No file system docBase required

==================================================
