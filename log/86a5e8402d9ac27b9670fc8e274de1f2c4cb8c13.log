86a5e8402d9ac27b9670fc8e274de1f2c4cb8c13
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57005
==================================================
Mark Emlyn
==================================================
Sun Oct 12 10:39:51 2014 +0000
==================================================
DataSourceFactory.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57005
Fix javadoc errors when building with Java 8. Patch provided by Pierre Viret.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631158 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PoolConfiguration.java
index 0f6c89ab45..0b4e6d9019 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -583,7 +583,6 @@ public class DataSourceFactory implements ObjectFactory {
      * <p>Parse properties from the string. Format of the string must be [propertyName=property;]*<p>
      * @param propText
      * @return Properties
-     * @throws Exception
      */
     protected static Properties getProperties(String propText) {
         return PoolProperties.getProperties(propText,null);

==================================================
PooledConnection.java
index 0cd1df4973..da965b8dff 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -665,12 +665,12 @@ public interface PoolConfiguration {
     /**
      * Returns true if the pool sweeper is enabled for the connection pool.
      * The pool sweeper is enabled if any settings that require async intervention in the pool are turned on
-     * <source>
-        boolean result = getTimeBetweenEvictionRunsMillis()>0;
-        result = result && (isRemoveAbandoned() && getRemoveAbandonedTimeout()>0);
-        result = result || (isTestWhileIdle() && getValidationQuery()!=null);
+     * <code>
+        boolean result = getTimeBetweenEvictionRunsMillis()&gt;0;
+        result = result &amp;&amp; (isRemoveAbandoned() &amp;&amp; getRemoveAbandonedTimeout()&gt;0);
+        result = result || (isTestWhileIdle() &amp;amp;& getValidationQuery()!=null);
         return result;
-       </source>
+       </code>
      *
      * @return true if a background thread is or will be enabled for this pool
      */
@@ -698,7 +698,7 @@ public interface PoolConfiguration {
     /**
      * Time in milliseconds to keep this connection alive even when used.
      * When a connection is returned to the pool, the pool will check to see if the
-     * ((now - time-when-connected) > maxAge) has been reached, and if so,
+     * ((now - time-when-connected) &gt; maxAge) has been reached, and if so,
      * it closes the connection rather than returning it to the pool.
      * The default value is 0, which implies that connections will be left open and no
      * age check will be done upon returning the connection to the pool.
@@ -711,7 +711,7 @@ public interface PoolConfiguration {
     /**
      * Time in milliseconds to keep this connection alive even when used.
      * When a connection is returned to the pool, the pool will check to see if the
-     * ((now - time-when-connected) > maxAge) has been reached, and if so,
+     * ((now - time-when-connected) &gt; maxAge) has been reached, and if so,
      * it closes the connection rather than returning it to the pool.
      * The default value is 0, which implies that connections will be left open and no
      * age check will be done upon returning the connection to the pool.

==================================================
