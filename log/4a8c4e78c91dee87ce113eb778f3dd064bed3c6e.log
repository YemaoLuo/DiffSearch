4a8c4e78c91dee87ce113eb778f3dd064bed3c6e
==================================================
o.a.tomcat.util.net should not depend on o.a.catalina
==================================================
Mark Emlyn
==================================================
Sat Dec 11 21:14:45 2010 +0000
==================================================
AbstractEndpoint.java
o.a.tomcat.util.net should not depend on o.a.catalina

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1044723 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index ada0951227..ff77f30d0a 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -28,7 +28,6 @@ import java.util.concurrent.TimeUnit;
 
 import javax.net.ssl.KeyManagerFactory;
 
-import org.apache.catalina.Globals;
 import org.apache.coyote.RequestGroupInfo;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.IntrospectionUtils;
@@ -586,7 +585,8 @@ public abstract class AbstractEndpoint {
     private String keystoreFile = System.getProperty("user.home")+"/.keystore";
     public String getKeystoreFile() { return keystoreFile;}
     public void setKeystoreFile(String s ) {
-        String file = adjustRelativePath(s, System.getProperty(Globals.CATALINA_BASE_PROP));
+        String file = adjustRelativePath(s,
+                System.getProperty(Constants.CATALINA_BASE_PROP));
         this.keystoreFile = file;
     }
 
@@ -633,7 +633,8 @@ public abstract class AbstractEndpoint {
     private String truststoreFile = System.getProperty("javax.net.ssl.trustStore");
     public String getTruststoreFile() {return truststoreFile;}
     public void setTruststoreFile(String s) {
-        String file = adjustRelativePath(s, System.getProperty(Globals.CATALINA_BASE_PROP));
+        String file = adjustRelativePath(s,
+                System.getProperty(Constants.CATALINA_BASE_PROP));
         this.truststoreFile = file;
     }
 

==================================================
JIoEndpoint.java
new file mode 100644
index 0000000000..67ed4935aa
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/Constants.java
@@ -0,0 +1,33 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.net;
+
+public class Constants {
+
+    /**
+     * Name of the system property containing
+     * the tomcat instance installation path
+     */
+    public static final String CATALINA_BASE_PROP = "catalina.base";
+
+
+    /**
+     * Has security been turned on?
+     */
+    public static final boolean IS_SECURITY_ENABLED =
+        (System.getSecurityManager() != null);
+}

==================================================
JSSESocketFactory.java
index 38893e6131..23fa87c10b 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -28,7 +28,6 @@ import java.util.Iterator;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.RejectedExecutionException;
 
-import org.apache.catalina.Globals;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -508,7 +507,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                 ClassLoader loader = Thread.currentThread().getContextClassLoader();
                 try {
                     //threads should not be created by the webapp classloader
-                    if (Globals.IS_SECURITY_ENABLED) {
+                    if (Constants.IS_SECURITY_ENABLED) {
                         PrivilegedAction<Void> pa = new PrivilegedSetTccl(
                                 getClass().getClassLoader());
                         AccessController.doPrivileged(pa);
@@ -522,7 +521,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                     }
                     getExecutor().execute(proc);
                 }finally {
-                    if (Globals.IS_SECURITY_ENABLED) {
+                    if (Constants.IS_SECURITY_ENABLED) {
                         PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader);
                         AccessController.doPrivileged(pa);
                     } else {

==================================================
