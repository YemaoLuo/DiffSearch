d1d7df5b66b352ccd35ea49c3f1bdecd5dce7713
==================================================
Drop the connector specific ServletInputStream implementations for HTTP
==================================================
Mark Emlyn
==================================================
Mon Nov 10 16:46:50 2014 +0000
==================================================
AbstractProcessor.java
Drop the connector specific ServletInputStream implementations for HTTP
upgrade

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637930 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprProcessor.java
index 1283aa01cf..1f47eb3d36 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
@@ -42,11 +42,11 @@ public abstract class AbstractProcessor<S>
     protected abstract Log getLog();
 
     private final HttpUpgradeHandler httpUpgradeHandler;
-    private final AbstractServletInputStream upgradeServletInputStream;
+    private final ServletInputStreamImpl upgradeServletInputStream;
     private final AbstractServletOutputStream<S> upgradeServletOutputStream;
 
     protected AbstractProcessor (HttpUpgradeHandler httpUpgradeHandler,
-            AbstractServletInputStream upgradeServletInputStream,
+            ServletInputStreamImpl upgradeServletInputStream,
             AbstractServletOutputStream<S> upgradeServletOutputStream) {
         this.httpUpgradeHandler = httpUpgradeHandler;
         this.upgradeServletInputStream = upgradeServletInputStream;

==================================================
AprServletInputStream.java
index 9a78b8cafa..ddb7869858 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -37,7 +37,7 @@ public class AprProcessor extends AbstractProcessor<Long> {
     public AprProcessor(SocketWrapperBase<Long> wrapper, ByteBuffer leftOverInput,
             HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
-                new AprServletInputStream(wrapper),
+                new ServletInputStreamImpl(wrapper),
                 new AprServletOutputStream(wrapper, asyncWriteBufferSize));
         ((AprSocketWrapper) wrapper).setLeftOverInput(leftOverInput);
         Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);

==================================================
Nio2Processor.java
deleted file mode 100644
index 6c39fa01a9..0000000000
--- a/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.AprEndpoint.AprSocketWrapper;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-
-public class AprServletInputStream extends AbstractServletInputStream {
-
-    private final SocketWrapperBase<Long> wrapper;
-
-    public AprServletInputStream(SocketWrapperBase<Long> wrapper) {
-        this.wrapper = wrapper;
-    }
-
-    @Override
-    protected boolean doIsReady() throws IOException {
-        return ((AprSocketWrapper) wrapper).isReady();
-    }
-
-    @Override
-    protected int doRead(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((AprSocketWrapper) wrapper).read(block, b, off, len);
-    }
-
-    @Override
-    protected void doClose() throws IOException {
-        ((AprSocketWrapper) wrapper).close();
-    }
-}

==================================================
Nio2ServletInputStream.java
index 19c5538b1e..0f311a8f18 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
@@ -36,7 +36,7 @@ public class Nio2Processor extends AbstractProcessor<Nio2Channel> {
     public Nio2Processor(SocketWrapperBase<Nio2Channel> wrapper, ByteBuffer leftoverInput,
             HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
-                new Nio2ServletInputStream(wrapper),
+                new ServletInputStreamImpl(wrapper),
                 new Nio2ServletOutputStream(wrapper, asyncWriteBufferSize));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);

==================================================
NioProcessor.java
deleted file mode 100644
index 366e7450d6..0000000000
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.Nio2Channel;
-import org.apache.tomcat.util.net.Nio2Endpoint.Nio2SocketWrapper;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-
-public class Nio2ServletInputStream extends AbstractServletInputStream {
-
-    private final SocketWrapperBase<Nio2Channel> wrapper;
-
-    public Nio2ServletInputStream(SocketWrapperBase<Nio2Channel> wrapper) {
-        this.wrapper = wrapper;
-    }
-
-    @Override
-    protected boolean doIsReady() throws IOException {
-        return ((Nio2SocketWrapper) wrapper).isReady();
-    }
-
-    @Override
-    protected int doRead(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((Nio2SocketWrapper) wrapper).read(block, b, off, len);
-    }
-
-    @Override
-    protected void doClose() throws IOException {
-        ((Nio2SocketWrapper) wrapper).close();
-    }
-}

==================================================
NioServletInputStream.java
index 55f164e7ab..55b971a62a 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -36,7 +36,7 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
     public NioProcessor(SocketWrapperBase<NioChannel> wrapper, ByteBuffer leftoverInput,
             HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
-                new NioServletInputStream(wrapper),
+                new ServletInputStreamImpl(wrapper),
                 new NioServletOutputStream(wrapper, asyncWriteBufferSize));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);

==================================================
ServletInputStreamImpl.java
deleted file mode 100644
index 8599beb34d..0000000000
--- a/java/org/apache/coyote/http11/upgrade/NioServletInputStream.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.NioChannel;
-import org.apache.tomcat.util.net.NioEndpoint.NioSocketWrapper;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-
-public class NioServletInputStream extends AbstractServletInputStream {
-
-    private final SocketWrapperBase<NioChannel> wrapper;
-
-    public NioServletInputStream(SocketWrapperBase<NioChannel> wrapper) {
-        this.wrapper = wrapper;
-    }
-
-    @Override
-    protected boolean doIsReady() throws IOException {
-        return ((NioSocketWrapper) wrapper).isReady();
-    }
-
-    @Override
-    protected int doRead(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((NioSocketWrapper) wrapper).read(block, b, off, len);
-    }
-
-    @Override
-    protected void doClose() throws IOException {
-        ((NioSocketWrapper) wrapper).close();
-    }
-}

==================================================
