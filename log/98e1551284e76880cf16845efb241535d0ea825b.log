98e1551284e76880cf16845efb241535d0ea825b
==================================================
Make configuration issues for security related valves and filters result in the failure of the valve or filter rather than just a warning message.
==================================================
Mark Emlyn
==================================================
Wed Oct 26 15:02:01 2011 +0000
==================================================
CsrfPreventionFilter.java
Make configuration issues for security related valves and filters result in the failure of the valve or filter rather than just a warning message.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1189256 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FilterBase.java
index b6cfcf954f..f98c785167 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -186,6 +186,13 @@ public class CsrfPreventionFilter extends FilterBase {
         chain.doFilter(request, wResponse);
     }
 
+
+    @Override
+    protected boolean isConfigProblemFatal() {
+        return true;
+    }
+
+
     /**
      * Generate a once time token (nonce) for authenticating subsequent
      * requests. This will also add the token to the session. The nonce

==================================================
RequestFilter.java
index d6b2a612b5..bb6572472a 100644
--- a/java/org/apache/catalina/filters/FilterBase.java
+++ b/java/org/apache/catalina/filters/FilterBase.java
@@ -47,8 +47,13 @@ public abstract class FilterBase implements Filter {
             String paramName = paramNames.nextElement();
             if (!IntrospectionUtils.setProperty(this, paramName,
                     filterConfig.getInitParameter(paramName))) {
-                getLogger().warn(sm.getString("filterbase.noSuchProperty",
-                        paramName, this.getClass().getName()));
+                String msg = sm.getString("filterbase.noSuchProperty",
+                        paramName, this.getClass().getName());
+                if (isConfigProblemFatal()) {
+                    throw new ServletException(msg);
+                } else {
+                    getLogger().warn(msg);
+                }
             }
         }
     }
@@ -58,4 +63,15 @@ public abstract class FilterBase implements Filter {
         // NOOP
     }
 
+    /**
+     * Determines if an exception when calling a setter or an unknown
+     * configuration attribute triggers the failure of the this filter which in
+     * turn will prevent the web application from starting.
+     *
+     * @return <code>true</true> if a problem should trigger the failure of this
+     *         filter, else <code>false</code>
+     */
+    protected boolean isConfigProblemFatal() {
+        return false;
+    }
 }

==================================================
RequestFilterValve.java
index 960a7f11c7..60e89a132d 100644
--- a/java/org/apache/catalina/valves/LocalStrings.properties
+++ b/java/org/apache/catalina/valves/LocalStrings.properties
@@ -40,6 +40,8 @@ errorReportValve.rootCauseInLogs=The full stack trace of the root cause is avail
 # Remote IP valve
 remoteIpValve.invalidPortHeader=Invalid value [{0}] found for port in HTTP header [{1}]
 
+requestFilterValve.configInvalid=One or more invalid configuration settings were provided for the Remote[Host|Ip]Valve which prevented the Valve and its parent containers from starting
+
 sslValve.certError=Failed to process certificate string [{0}] to create a java.security.cert.X509Certificate object
 sslValve.invalidProvider=The SSL provider specified on the connector associated with this request of [{0}] is invalid. The certificate data could not be processed.
 

==================================================
