9b3dc6eb9baf00050ca486fa3d6227a6dd6af1af
==================================================
Servlet 4.0
==================================================
Mark Thomas
==================================================
Wed May 24 13:00:47 2017 +0000
==================================================
HttpServletRequest.java
Servlet 4.0
Update API and implementation for reading trailer fields from the request

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1796054 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequestWrapper.java
index 449aded5c0..3c12fa49d9 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -590,4 +590,23 @@ public interface HttpServletRequest extends ServletRequest {
     public default Map<String,String> getTrailerFields() {
         return Collections.emptyMap();
     }
+
+    /**
+     * Are trailer fields ready to be read (there may still be no trailers to
+     * read). This method always returns {@code true} if the underlying protocol
+     * does not support trailer fields. Otherwise, {@code true} is returned once
+     * all of the following are true:
+     * <ul>
+     * <li>The application has ready all the request data and an EOF has been
+     *     received or the content-length is zero</li>
+     * <li>All trailer fields, if any, have been received</li>
+     * </ul>
+     *
+     * @return {@code true} if trailers are ready to be read
+     *
+     * @since Servlet 4.0
+     */
+    public default boolean isTrailerFieldsReady() {
+        return false;
+    }
 }

==================================================
Request.java
index c9e02be47c..2a933b9e47 100644
--- a/java/org/apache/catalina/connector/LocalStrings.properties
+++ b/java/org/apache/catalina/connector/LocalStrings.properties
@@ -56,6 +56,7 @@ coyoteRequest.filterAsyncSupportUnknown=Unable to determine if any filters do no
 coyoteRequest.maxPostSizeExceeded=The multi-part request contained parameter data (excluding uploaded files) that exceeded the limit for maxPostSize set on the associated connector
 coyoteRequest.noAsync=Unable to start async because the following classes in the processing chain do not support async [{0}]
 coyoteRequest.noMultipartConfig=Unable to process parts as no multi-part configuration has been provided
+coyoteRequest.trailersNotReady=It is illegal to call getTrailerFields() before isTrailerFieldsReady() has returned true
 
 coyoteResponse.encoding.invalid=The encoding [{0}] is not recognised by the JRE
 coyoteResponse.getOutputStream.ise=getWriter() has already been called for this response

==================================================
RequestFacade.java
index 3cd790cb1f..6b19fdd4f5 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1952,19 +1952,23 @@ public class Request implements HttpServletRequest {
 
     // --------------------------------------------- HttpServletRequest Methods
 
+    @Override
+    public boolean isTrailerFieldsReady() {
+        return coyoteRequest.isTrailerFieldsReady();
+    }
+
+
     @Override
     public Map<String, String> getTrailerFields() {
+        if (!isTrailerFieldsReady()) {
+            throw new IllegalStateException(sm.getString("coyoteRequest.trailersNotReady"));
+        }
         Map<String,String> result = new HashMap<>();
         result.putAll(coyoteRequest.getTrailerFields());
         return result;
     }
 
 
-    /**
-     * {@inheritDoc}
-     *
-     * @since Servlet 4.0
-     */
     @Override
     public PushBuilder newPushBuilder() {
         AtomicBoolean result = new AtomicBoolean();
@@ -1977,11 +1981,6 @@ public class Request implements HttpServletRequest {
     }
 
 
-    /**
-     * {@inheritDoc}
-     *
-     * @since Servlet 3.1
-     */
     @SuppressWarnings("unchecked")
     @Override
     public <T extends HttpUpgradeHandler> T upgrade(

==================================================
AbstractProcessor.java
index 34ec80c096..e3b49104b8 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -1068,11 +1068,13 @@ public class RequestFacade implements HttpServletRequest {
         return request.getAsyncContext();
     }
 
+
     @Override
     public DispatcherType getDispatcherType() {
         return request.getDispatcherType();
     }
 
+
     @Override
     public boolean authenticate(HttpServletResponse response)
     throws IOException, ServletException {
@@ -1096,31 +1098,25 @@ public class RequestFacade implements HttpServletRequest {
         return request.getParts();
     }
 
+
     @Override
     public Part getPart(String name) throws IllegalStateException, IOException,
             ServletException {
         return request.getPart(name);
     }
 
+
     public boolean getAllowTrace() {
         return request.getConnector().getAllowTrace();
     }
 
-    /**
-     * {@inheritDoc}
-     *
-     * @since Servlet 3.1
-     */
+
     @Override
     public long getContentLengthLong() {
         return request.getContentLengthLong();
     }
 
-    /**
-     * {@inheritDoc}
-     *
-     * @since Servlet 3.1
-     */
+
     @Override
     public <T extends HttpUpgradeHandler> T upgrade(
             Class<T> httpUpgradeHandlerClass) throws java.io.IOException, ServletException {
@@ -1128,22 +1124,18 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
-    /**
-     * {@inheritDoc}
-     *
-     * @since Servlet 4.0
-     */
     @Override
     public PushBuilder newPushBuilder() {
         return request.newPushBuilder();
     }
 
 
-    /**
-     * {@inheritDoc}
-     *
-     * @since Servlet 4.0
-     */
+    @Override
+    public boolean isTrailerFieldsReady() {
+        return request.isTrailerFieldsReady();
+    }
+
+
     @Override
     public Map<String, String> getTrailerFields() {
         return request.getTrailerFields();

==================================================
ActionCode.java
index e2a3ca6eb3..b41081d954 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -485,6 +485,13 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
             doPush((Request) param);
             break;
         }
+
+        // Servlet 4.0 Trailers
+        case TRAILER_FIELDS_READY: {
+            AtomicBoolean result = (AtomicBoolean) param;
+            result.set(isTrailerFieldsReady());
+            break;
+        }
         }
     }
 
@@ -759,6 +766,9 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     }
 
 
+    protected abstract boolean isTrailerFieldsReady();
+
+
     /**
      * Flush any pending writes. Used during non-blocking writes to flush any
      * remaining data from a previous incomplete write.

==================================================
Request.java
index 00f87c4e01..e39cd5985e 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -245,5 +245,12 @@ public enum ActionCode {
     /**
      * Push a request on behalf of the client of the current request.
      */
-    PUSH_REQUEST
+    PUSH_REQUEST,
+
+    /**
+     * Are the request trailer fields ready to be read? Note that this returns
+     * true if it is known that request trailer fields are not supported so an
+     * empty collection of trailers can then be read.
+     */
+    TRAILER_FIELDS_READY
 }

==================================================
AjpProcessor.java
index c0b8d36a73..270966a3f9 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -197,6 +197,13 @@ public final class Request {
     }
 
 
+    public boolean isTrailerFieldsReady() {
+        AtomicBoolean result = new AtomicBoolean(false);
+        action(ActionCode.TRAILER_FIELDS_READY, result);
+        return result.get();
+    }
+
+
     public Map<String,String> getTrailerFields() {
         return trailerFields;
     }
@@ -670,5 +677,4 @@ public final class Request {
 
         return result;
     }
-
 }

==================================================
Http11InputBuffer.java
index 54e0816e22..0dbf3d7e9a 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1190,6 +1190,14 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
+    @Override
+    protected boolean isTrailerFieldsReady() {
+        // AJP does not support trailers so return true so app can request the
+        // trailers and find out that there are none.
+        return true;
+    }
+
+
     /**
      * Read at least the specified amount of bytes, and place them
      * in the input buffer. Note that if any data is available to read then this

==================================================
Http11Processor.java
index b433389b1a..d293663a36 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -656,6 +656,16 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
     }
 
 
+    boolean isChunking() {
+        for (int i = 0; i < lastActiveFilter; i++) {
+            if (activeFilters[i] == filterLibrary[Constants.CHUNKED_FILTER]) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+
     void init(SocketWrapperBase<?> socketWrapper) {
 
         wrapper = socketWrapper;

==================================================
Stream.java
index 8d01b3e708..a16ddaef2e 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1307,6 +1307,16 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    @Override
+    protected boolean isTrailerFieldsReady() {
+        if (inputBuffer.isChunking()) {
+            return inputBuffer.isFinished();
+        } else {
+            return true;
+        }
+    }
+
+
     /**
      * Trigger sendfile processing if required.
      *

==================================================
StreamProcessor.java
index 8956f67b68..2e795cc94b 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -585,6 +585,12 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    public boolean isTrailerFieldsReady() {
+        // Once EndOfStream has been received, canRead will be false
+        return !state.canRead();
+    }
+
+
     private static void push(final Http2UpgradeHandler handler, final Request request,
             final Stream stream) throws IOException {
         if (org.apache.coyote.Constants.IS_SECURITY_ENABLED) {

==================================================
StreamStateMachine.java
index 218d830d71..1df6d00e88 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -217,6 +217,12 @@ class StreamProcessor extends AbstractProcessor {
     }
 
 
+    @Override
+    protected boolean isTrailerFieldsReady() {
+        return stream.isTrailerFieldsReady();
+    }
+
+
     @Override
     public final void recycle() {
         // StreamProcessor instances are not re-used.

==================================================
TesterHttpServletRequest.java
index 313ad2cba9..3b67f865d3 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -136,6 +136,11 @@ class StreamStateMachine {
     }
 
 
+    final synchronized boolean canRead() {
+        return state.canRead();
+    }
+
+
     final synchronized boolean canWrite() {
         return state.canWrite();
     }
@@ -222,6 +227,10 @@ class StreamStateMachine {
             return canWrite || canRead;
         }
 
+        public boolean canRead() {
+            return canRead;
+        }
+
         public boolean canWrite() {
             return canWrite;
         }

==================================================
