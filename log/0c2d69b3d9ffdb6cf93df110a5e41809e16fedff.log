0c2d69b3d9ffdb6cf93df110a5e41809e16fedff
==================================================
Enable ignored test now handling for stream errors has been implemented.
==================================================
Mark Thomas
==================================================
Tue Jun 9 13:43:15 2015 +0000
==================================================
Http2Parser.java
Enable ignored test now handling for stream errors has been implemented.
More clarifications around sub-states for closed streams (these need some unit tests)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684421 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StreamStateMachine.java
index 66b05f6bab..489a4a8752 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -236,6 +236,8 @@ class Http2Parser {
 
         long errorCode = ByteUtil.getFourBytes(payload, 0);
         output.reset(streamId, errorCode);
+        headersCurrentStream = -1;
+        headersEndStream = false;
     }
 
 
@@ -427,7 +429,9 @@ class Http2Parser {
                         connectionId, Integer.toString(headersCurrentStream),
                         Integer.toString(streamId)), Error.COMPRESSION_ERROR);
             }
-            if (frameType != FrameType.CONTINUATION) {
+            if (frameType == FrameType.RST) {
+                // NO-OP: RST is OK here
+            } else if (frameType != FrameType.CONTINUATION) {
                 throw new ConnectionError(sm.getString("http2Parser.headers.wrongFrameType",
                         connectionId, Integer.toString(headersCurrentStream),
                         frameType), Error.COMPRESSION_ERROR);

==================================================
TestHttp2Section_5_1.java
index 0e27c6cc29..7f37abad9e 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -83,12 +83,12 @@ public class StreamStateMachine {
 
 
     public synchronized void sendReset() {
-        stateChange(state, State.CLOSED_TX);
+        stateChange(state, State.CLOSED_RST_TX);
     }
 
 
     public synchronized void receiveReset() {
-        stateChange(state, State.CLOSED_RST);
+        stateChange(state, State.CLOSED_RST_RX);
     }
 
 
@@ -140,9 +140,13 @@ public class StreamStateMachine {
         HALF_CLOSED_REMOTE (true,  Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE),
         CLOSED_RX          (true,  Error.STREAM_CLOSED, FrameType.PRIORITY),
-        CLOSED_RST         (false, Error.STREAM_CLOSED, FrameType.PRIORITY),
         CLOSED_TX          (true,  Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
-                                    FrameType.WINDOW_UPDATE);
+                                    FrameType.WINDOW_UPDATE),
+        CLOSED_RST_RX      (false, Error.STREAM_CLOSED, FrameType.PRIORITY),
+        CLOSED_RST_TX      (false, Error.STREAM_CLOSED, FrameType.DATA, FrameType.HEADERS,
+                                    FrameType.PRIORITY, FrameType.RST, FrameType.PUSH_PROMISE,
+                                    FrameType.WINDOW_UPDATE),
+        CLOSED_FINAL       (true,  Error.PROTOCOL_ERROR, FrameType.PRIORITY);
 
         private final boolean connectionErrorForInvalidFrame;
         private final Error errorCodeForInvalidFrame;

==================================================
