0a330bca67ae98a4be4c0f142ff74bdb66f28f6a
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=61503
==================================================
Mark Thomas
==================================================
Tue Sep 12 13:54:01 2017 +0000
==================================================
JarWarResourceSet.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=61503
This corrects a potential regression in the fix for bug 60940 with an alternative solution that adds the JarEntry objects normally skipped by a JarInputStream only if those entries exist.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1808116 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TomcatJarInputStream.java
index 2bb2384cc2..1d09f9e411 100644
--- a/java/org/apache/catalina/webresources/JarWarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarWarResourceSet.java
@@ -106,29 +106,26 @@ public class JarWarResourceSet extends AbstractArchiveResourceSet {
                     JarEntry jarFileInWar = warFile.getJarEntry(archivePath);
                     jarFileIs = warFile.getInputStream(jarFileInWar);
 
-                    try (JarInputStream jarIs = new JarInputStream(jarFileIs)) {
+                    try (TomcatJarInputStream jarIs = new TomcatJarInputStream(jarFileIs)) {
                         JarEntry entry = jarIs.getNextJarEntry();
-                        boolean hasMetaInf = false;
                         while (entry != null) {
-                            if (!hasMetaInf && entry.getName().startsWith("META-INF/")) {
-                                hasMetaInf = true;
-                            }
                             archiveEntries.put(entry.getName(), entry);
                             entry = jarIs.getNextJarEntry();
                         }
                         setManifest(jarIs.getManifest());
-                        // Hacks to work-around JarInputStream swallowing these
-                        // entries. The attributes for these entries will be
-                        // incomplete. Making the attributes available would
-                        // require (re-)reading the stream as a ZipInputStream
-                        // and creating JarEntry objects from the ZipEntries.
-                        if (hasMetaInf) {
-                            JarEntry metaInfDir = new JarEntry("META-INF/");
-                            archiveEntries.put(metaInfDir.getName(), metaInfDir);
+                        // Hack to work-around JarInputStream swallowing these
+                        // entries. TomcatJarInputStream is used above which
+                        // extends JarInputStream and the method that creates
+                        // the entries over-ridden so we can a) tell if the
+                        // entries are present and b) cache them so we can
+                        // access them here.
+                        entry = jarIs.getMetaInfEntry();
+                        if (entry != null) {
+                            archiveEntries.put(entry.getName(), entry);
                         }
-                        if (jarIs.getManifest() != null) {
-                            JarEntry manifest = new JarEntry("META-INF/MANIFEST.MF");
-                            archiveEntries.put(manifest.getName(), manifest);
+                        entry = jarIs.getManifestEntry();
+                        if (entry != null) {
+                            archiveEntries.put(entry.getName(), entry);
                         }
                     }
                 } catch (IOException ioe) {

==================================================
