df8f37cbe399f18b29c51efa063b6756fe543693
==================================================
Add the ability to validate client provided session IDs and implement basic validation for the Standard session ID generator.
==================================================
Mark Thomas
==================================================
Sun Nov 8 20:05:27 2015 +0000
==================================================
SessionIdGenerator.java
Add the ability to validate client provided session IDs and implement basic validation for the Standard session ID generator.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713285 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerBase.java
index 85b443107e..9bb83d4ba5 100644
--- a/java/org/apache/catalina/SessionIdGenerator.java
+++ b/java/org/apache/catalina/SessionIdGenerator.java
@@ -56,4 +56,17 @@ public interface SessionIdGenerator {
      */
     public String generateSessionId(String route);
 
+    /**
+     * Determine, based on implementation specific rules which may be as strict
+     * or as relaxed as the implementor wishes, if the provided session ID is
+     * valid. This may be used when generating sessions with user provided
+     * session IDs to ensure that they are suitable or if a new ID needs to be
+     * generated.
+     *
+     * @param sessionId The proposed session ID to test
+     *
+     * @return {@code true} if the proposed session ID is acceptable, otherwise
+     *         {@code false}
+     */
+    public boolean validateSessionId(String sessionId);
 }

==================================================
SessionIdGeneratorBase.java
index c869448f6b..7a6a5522f6 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -627,7 +627,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         session.setCreationTime(System.currentTimeMillis());
         session.setMaxInactiveInterval(this.maxInactiveInterval);
         String id = sessionId;
-        if (id == null) {
+        if (id == null || !sessionIdGenerator.validateSessionId(id)) {
             id = generateSessionId();
         }
         session.setId(id);

==================================================
StandardSessionIdGenerator.java
index f0e1282829..e4b814c538 100644
--- a/java/org/apache/catalina/util/SessionIdGeneratorBase.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -273,6 +273,18 @@ public abstract class SessionIdGeneratorBase extends LifecycleBase
     }
 
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * The base implementation performs no validation and treats all proposed
+     * session IDs as valid.
+     */
+    @Override
+    public boolean validateSessionId(String sessionId) {
+        return true;
+    }
+
+
     @Override
     protected void initInternal() throws LifecycleException {
         // NO-OP

==================================================
TestStandardSessionIdGenerator.java
index 2902874fa6..6d39ca0a4d 100644
--- a/java/org/apache/catalina/util/StandardSessionIdGenerator.java
+++ b/java/org/apache/catalina/util/StandardSessionIdGenerator.java
@@ -16,6 +16,8 @@
  */
 package org.apache.catalina.util;
 
+import org.apache.tomcat.util.buf.HexUtils;
+
 public class StandardSessionIdGenerator extends SessionIdGeneratorBase {
 
     @Override
@@ -61,4 +63,39 @@ public class StandardSessionIdGenerator extends SessionIdGeneratorBase {
         return buffer.toString();
     }
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * This implementation performs the following checks:
+     * <ul>
+     * <li>The characters up to the first period (if any) are valid hex
+     *     digits</li>
+     * <li>There are at least enough hex digits to represent the specified
+     *     session ID length</li>
+     * <li>Anything after the first period is not validated since that is
+     *     assumed to be a JVM route and we can't easily determine valid
+     *     values</li>
+     * </ul>
+     */
+    @Override
+    public boolean validateSessionId(String sessionId) {
+        if (sessionId == null) {
+            return false;
+        }
+        int len = sessionId.indexOf('.');
+        if (len == -1) {
+            len = sessionId.length();
+        }
+        // Session ID length is in bytes and 2 hex digits are required for each
+        // byte
+        if (len < getSessionIdLength() * 2) {
+            return false;
+        }
+        for (int i = 0; i < len; i++) {
+            if (HexUtils.getDec(sessionId.charAt(i)) == -1) {
+                return false;
+            }
+        }
+        return true;
+    }
 }

==================================================
