e1b4e83519a58c0870f706c730ef58096b41665b
==================================================
WebSocket
==================================================
Mark Emlyn
==================================================
Thu Jan 17 22:23:08 2013 +0000
==================================================
ContainerProvider.java
WebSocket
Add the plumbing to obtain references to the WebSocketContainer
Includes a test case to make sure there are no mempry leaks

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434938 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestContainerProvider.java
index 121b29330d..2e3ada5ba1 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -16,17 +16,53 @@
  */
 package javax.websocket;
 
+import java.util.Map;
+import java.util.WeakHashMap;
+
 /**
  * Provides access to the implementation. This version of the API is hard-coded
  * to use the Apache Tomcat WebSocket implementation.
  */
 public class ContainerProvider {
 
+    // Needs to be a WeakHashMap to prevent memory leaks when a context is
+    // stopped
+    private static Map<ClassLoader,WebSocketContainer> classLoaderContainerMap =
+            new WeakHashMap<>();
+    private static Object classLoaderContainerMapLock = new Object();
+
+    private static final String DEFAULT_PROVIDER_CLASS_NAME =
+            "org.apache.tomcat.websocket.WsWebSocketContainer";
+
+    private static final Class<WebSocketContainer> clazz;
+
+    static {
+        try {
+            clazz = (Class<WebSocketContainer>) Class.forName(
+                    DEFAULT_PROVIDER_CLASS_NAME);
+        } catch (ClassNotFoundException e) {
+            throw new IllegalArgumentException(e);
+        }
+    }
+
     /**
-     * Obtain a reference to the ClientContainer used to create outgoing
-     * WebSocket connections.
+     * Obtain a reference to the per class loader ClientContainer used to create
+     * outgoing WebSocket connections.
      */
     public static WebSocketContainer getClientContainer() {
-        return null;
+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+        WebSocketContainer result = null;
+        synchronized (classLoaderContainerMapLock) {
+            result = classLoaderContainerMap.get(tccl);
+            if (result == null) {
+                try {
+                    result = clazz.newInstance();
+                } catch (InstantiationException | IllegalAccessException e) {
+                    throw new IllegalArgumentException(e);
+                }
+                classLoaderContainerMap.put(tccl, result);
+            }
+        }
+        return result;
     }
 }

==================================================
