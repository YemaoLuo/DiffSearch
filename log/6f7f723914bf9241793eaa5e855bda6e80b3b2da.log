6f7f723914bf9241793eaa5e855bda6e80b3b2da
==================================================
Remove unused code identified by Eclipse
==================================================
Mark Emlyn
==================================================
Sat Oct 13 21:54:57 2012 +0000
==================================================
CodeException.java
Remove unused code identified by Eclipse

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397957 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InnerClass.java
index d8584b16fd..7e5ebd012e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -43,12 +43,10 @@ public final class CodeException implements Cloneable, Constants, Serializable {
      * @throws IOException
      */
     CodeException(DataInput file) throws IOException {
-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file
-                .readUnsignedShort());
-    }
-
-
-    public CodeException(int start_pc, int end_pc, int handler_pc, int catch_type) {
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
     }
 
 

==================================================
LocalVariable.java
index e8671c6444..b5bd1f3186 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -40,13 +40,10 @@ public final class InnerClass implements Cloneable, Serializable {
      * @throws IOException
      */
     InnerClass(DataInput file) throws IOException {
-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file
-                .readUnsignedShort());
-    }
-
-
-    public InnerClass(int inner_class_index, int outer_class_index, int inner_name_index,
-            int inner_access_flags) {
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
     }
 
 

==================================================
LocalVariableTable.java
index 16ad44a154..adbf272ee3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -44,15 +44,12 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    LocalVariable(DataInput file, ConstantPool constant_pool) throws IOException {
-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file
-                .readUnsignedShort(), file.readUnsignedShort(), constant_pool);
-    }
-
-
-    public LocalVariable(int start_pc, int length, int name_index, int signature_index, int index,
-            ConstantPool constant_pool) {
-        this.index = index;
+    LocalVariable(DataInput file) throws IOException {
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
+        this.index = file.readUnsignedShort();
     }
 
 

==================================================
LocalVariableTypeTable.java
index 56122f9a36..22d2d95b01 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -65,7 +65,7 @@ public class LocalVariableTable extends Attribute {
         local_variable_table_length = (file.readUnsignedShort());
         local_variable_table = new LocalVariable[local_variable_table_length];
         for (int i = 0; i < local_variable_table_length; i++) {
-            local_variable_table[i] = new LocalVariable(file, constant_pool);
+            local_variable_table[i] = new LocalVariable(file);
         }
     }
 

==================================================
PMGClass.java
index 1e394be6fe..56e59bc10d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -68,7 +68,7 @@ private int             local_variable_type_table_length; // Table of local
     local_variable_type_table = new LocalVariable[local_variable_type_table_length];
 
     for(int i=0; i < local_variable_type_table_length; i++)
-      local_variable_type_table[i] = new LocalVariable(dis, cpool);
+      local_variable_type_table[i] = new LocalVariable(dis);
   }
 
   public final void setLocalVariableTable(LocalVariable[] local_variable_table)

==================================================
Signature.java
index f33d9fc232..2d7d76e4ba 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -33,7 +33,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class PMGClass extends Attribute {
 
     private static final long serialVersionUID = -1876065562391587509L;
-    private int pmg_class_index, pmg_index;
 
 
     /**
@@ -46,22 +45,19 @@ public final class PMGClass extends Attribute {
      */
     PMGClass(int name_index, int length, DataInput file, ConstantPool constant_pool)
             throws IOException {
-        this(name_index, length, file.readUnsignedShort(), file.readUnsignedShort(), constant_pool);
+        this(name_index, length, constant_pool);
+        file.readUnsignedShort();
+        file.readUnsignedShort();
     }
 
 
     /**
      * @param name_index Index in constant pool to CONSTANT_Utf8
      * @param length Content length in bytes
-     * @param pmg_index index in constant pool for source file name
-     * @param pmg_class_index Index in constant pool to CONSTANT_Utf8
      * @param constant_pool Array of constants
      */
-    public PMGClass(int name_index, int length, int pmg_index, int pmg_class_index,
-            ConstantPool constant_pool) {
+    public PMGClass(int name_index, int length, ConstantPool constant_pool) {
         super(Constants.ATTR_PMG, name_index, length, constant_pool);
-        this.pmg_index = pmg_index;
-        this.pmg_class_index = pmg_class_index;
     }
 
 

==================================================
SourceFile.java
index 62fa9859b8..822b6c4465 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -33,7 +33,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class Signature extends Attribute {
 
     private static final long serialVersionUID = 7493781777025829964L;
-    private int signature_index;
 
 
     /**
@@ -46,19 +45,18 @@ public final class Signature extends Attribute {
      */
     Signature(int name_index, int length, DataInput file, ConstantPool constant_pool)
             throws IOException {
-        this(name_index, length, file.readUnsignedShort(), constant_pool);
+        this(name_index, length, constant_pool);
+        file.readUnsignedShort();
     }
 
 
     /**
      * @param name_index Index in constant pool to CONSTANT_Utf8
      * @param length Content length in bytes
-     * @param signature_index Index in constant pool to CONSTANT_Utf8
      * @param constant_pool Array of constants
      */
-    public Signature(int name_index, int length, int signature_index, ConstantPool constant_pool) {
+    public Signature(int name_index, int length, ConstantPool constant_pool) {
         super(Constants.ATTR_SIGNATURE, name_index, length, constant_pool);
-        this.signature_index = signature_index;
     }
 
 

==================================================
StackMapEntry.java
index 9e12291e51..b8bc7d9cf9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -35,7 +35,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class SourceFile extends Attribute {
 
     private static final long serialVersionUID = 332346699609443704L;
-    private int sourcefile_index;
 
 
     /**
@@ -48,7 +47,8 @@ public final class SourceFile extends Attribute {
      */
     SourceFile(int name_index, int length, DataInput file, ConstantPool constant_pool)
             throws IOException {
-        this(name_index, length, file.readUnsignedShort(), constant_pool);
+        this(name_index, length, constant_pool);
+        file.readUnsignedShort();
     }
 
 
@@ -58,16 +58,9 @@ public final class SourceFile extends Attribute {
      * @param length Content length in bytes, the value should be 2.
      * @param constant_pool The constant pool that this attribute is
      * associated with.
-     * @param sourcefile_index Index in constant pool to CONSTANT_Utf8.  This
-     * string will be interpreted as the name of the file from which this
-     * class was compiled.  It will not be interpreted as indicating the name
-     * of the directory contqining the file or an absolute path; this
-     * information has to be supplied the consumer of this attribute - in
-     * many cases, the JVM.
      */
-    public SourceFile(int name_index, int length, int sourcefile_index, ConstantPool constant_pool) {
+    public SourceFile(int name_index, int length, ConstantPool constant_pool) {
         super(Constants.ATTR_SOURCE_FILE, name_index, length, constant_pool);
-        this.sourcefile_index = sourcefile_index;
     }
 
 

==================================================
StackMapTableEntry.java
index 5c246d7b4b..184a79606f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -36,13 +36,8 @@ public final class StackMapEntry implements Cloneable, Serializable {
     private static final long serialVersionUID = 1L;
 
     StackMapEntry(DataInputStream file) throws IOException {
-        this(file.readShort(), file.readShort(), null, -1, null);
-    }
-
-
-    public StackMapEntry(int byte_code_offset, int number_of_locals,
-            StackMapType[] types_of_locals, int number_of_stack_items,
-            StackMapType[] types_of_stack_items) {
+        file.readShort();
+        file.readShort();
     }
 
 

==================================================
