8460d7712dcbb72e3d4f2f8ebb9a26fc4e9ddcf9
==================================================
Fix a cause of multiple attempts to close the same socket.
==================================================
Mark Thomas
==================================================
Wed Jun 8 14:52:58 2016 +0000
==================================================
AprEndpoint.java
Fix a cause of multiple attempts to close the same socket.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1747404 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index c571543a49..589e071df2 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2436,6 +2436,14 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
         }
 
 
+        @Override
+        public boolean isClosed() {
+            synchronized (closedLock) {
+                return closed;
+            }
+        }
+
+
         @Override
         protected void doWrite(boolean block) throws IOException {
             if (closed) {

==================================================
NioEndpoint.java
index ec9470bb11..a4b32aa873 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -895,6 +895,13 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
             getSocket().close();
         }
 
+
+        @Override
+        public boolean isClosed() {
+            return !getSocket().isOpen();
+        }
+
+
         @Override
         public boolean hasAsyncIO() {
             return false;

==================================================
SocketProcessorBase.java
index b33a2bc084..52d0a8a3e6 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1186,6 +1186,12 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
         }
 
 
+        @Override
+        public boolean isClosed() {
+            return !getSocket().isOpen();
+        }
+
+
         private int fillReadBuffer(boolean block) throws IOException {
             int nRead;
             NioChannel channel = getSocket();

==================================================
SocketWrapperBase.java
index e934a2b304..4948192fe9 100644
--- a/java/org/apache/tomcat/util/net/SocketProcessorBase.java
+++ b/java/org/apache/tomcat/util/net/SocketProcessorBase.java
@@ -41,6 +41,14 @@ public abstract class SocketProcessorBase<S> implements Runnable {
     @Override
     public final void run() {
         synchronized (socketWrapper) {
+            // It is possible that processing may be triggered for read and
+            // write at the same time. The sync above makes sure that processing
+            // does not occur in parallel. The test below ensures that if the
+            // first event to be processed results in the socket being closed,
+            // the subsequent events are not processed.
+            if (socketWrapper.isClosed()) {
+                return;
+            }
             doRun();
         }
     }

==================================================
