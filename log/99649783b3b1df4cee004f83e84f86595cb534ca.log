99649783b3b1df4cee004f83e84f86595cb534ca
==================================================
Move cookie header preservation to an option on the legacy cookie processor
==================================================
Mark Emlyn
==================================================
Mon Sep 29 21:45:10 2014 +0000
==================================================
CookieSupport.java
Move cookie header preservation to an option on the legacy cookie processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1628324 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LegacyCookieProcessor.java
index 17267e6b65..ec32e7b2f5 100644
--- a/java/org/apache/tomcat/util/http/CookieSupport.java
+++ b/java/org/apache/tomcat/util/http/CookieSupport.java
@@ -67,7 +67,10 @@ public final class CookieSupport {
     /**
      * If set to true, the cookie header will be preserved. In most cases
      * except debugging, this is not useful.
+     *
+     * @deprecated  Will be removed in Tomcat 9.
      */
+    @Deprecated
     public static final boolean PRESERVE_COOKIE_HEADER;
 
     /**

==================================================
TestCookieParsing.java
index 6bf2e163af..59fa9beebe 100644
--- a/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
@@ -54,6 +54,10 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     @SuppressWarnings("deprecation") // Default to false when deprecated code is removed
     private boolean allowHttpSepsInV0 = CookieSupport.ALLOW_HTTP_SEPARATORS_IN_V0;
 
+    @SuppressWarnings("deprecation") // Default to STRICT_SERVLET_COMPLIANCE
+                                     // when deprecated code is removed
+    private boolean presserveCookieHeader = CookieSupport.PRESERVE_COOKIE_HEADER;
+
 
     public boolean getAllowEqualsInValue() {
         return allowEqualsInValue;
@@ -85,6 +89,16 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     }
 
 
+    public boolean getPreserveCookieHeader() {
+        return presserveCookieHeader;
+    }
+
+
+    public void setPreserveCookieHeader(boolean presserveCookieHeader) {
+        this.presserveCookieHeader = presserveCookieHeader;
+    }
+
+
     @Override
     public Charset getCharset() {
         return StandardCharsets.ISO_8859_1;
@@ -113,7 +127,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
                     log.debug("Cookies: Parsing b[]: " + cookieValue.toString());
                 }
                 ByteChunk bc = cookieValue.getByteChunk();
-                if (CookieSupport.PRESERVE_COOKIE_HEADER) {
+                if (getPreserveCookieHeader()) {
                     int len = bc.getLength();
                     if (len > 0) {
                         byte[] buf = new byte[len];

==================================================
