2562aaa7246de498e9979a9098270e4c3cb121c5
==================================================
Code clean-up for javax.servlet
==================================================
Mark Emlyn
==================================================
Thu Jul 12 17:04:02 2012 +0000
==================================================
ServletSecurityElement.java
Code clean-up for javax.servlet
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1360814 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Cookie.java
index cfc651fa93..cf2832f063 100644
--- a/java/javax/servlet/ServletSecurityElement.java
+++ b/java/javax/servlet/ServletSecurityElement.java
@@ -34,7 +34,7 @@ import javax.servlet.annotation.ServletSecurity;
 public class ServletSecurityElement extends HttpConstraintElement {
 
     private final Map<String,HttpMethodConstraintElement> methodConstraints =
-        new HashMap<String,HttpMethodConstraintElement>();
+        new HashMap<>();
 
     /**
      * Use default HttpConstraint.
@@ -90,8 +90,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
                 annotation.value().transportGuarantee(),
                 annotation.value().rolesAllowed()));
 
-        List<HttpMethodConstraintElement> l =
-            new ArrayList<HttpMethodConstraintElement>();
+        List<HttpMethodConstraintElement> l = new ArrayList<>();
         HttpMethodConstraint[] constraints = annotation.httpMethodConstraints();
         if (constraints != null) {
             for (int i = 0; i < constraints.length; i++) {
@@ -108,14 +107,13 @@ public class ServletSecurityElement extends HttpConstraintElement {
     }
 
     public Collection<HttpMethodConstraintElement> getHttpMethodConstraints() {
-        Collection<HttpMethodConstraintElement> result =
-                new HashSet<HttpMethodConstraintElement>();
+        Collection<HttpMethodConstraintElement> result = new HashSet<>();
         result.addAll(methodConstraints.values());
         return result;
     }
 
     public Collection<String> getMethodNames() {
-        Collection<String> result = new HashSet<String>();
+        Collection<String> result = new HashSet<>();
         result.addAll(methodConstraints.keySet());
         return result;
     }

==================================================
HttpServlet.java
index 30516fde48..8e753fceed 100644
--- a/java/javax/servlet/http/Cookie.java
+++ b/java/javax/servlet/http/Cookie.java
@@ -59,13 +59,14 @@ public class Cookie implements Cloneable, Serializable {
     private static final long serialVersionUID = 1L;
 
     private static final String LSTRING_FILE = "javax.servlet.http.LocalStrings";
-    private static ResourceBundle lStrings = ResourceBundle.getBundle(LSTRING_FILE);
+    private static final ResourceBundle lStrings =
+            ResourceBundle.getBundle(LSTRING_FILE);
 
     //
     // The value of the cookie itself.
     //
 
-    private String name; // NAME= ... "$Name" style is reserved
+    private final String name; // NAME= ... "$Name" style is reserved
     private String value; // value of NAME
 
     //

==================================================
HttpSessionContext.java
index 4b24106a18..902e7ea69a 100644
--- a/java/javax/servlet/http/HttpServlet.java
+++ b/java/javax/servlet/http/HttpServlet.java
@@ -90,7 +90,7 @@ public abstract class HttpServlet extends GenericServlet {
 
     private static final String LSTRING_FILE =
         "javax.servlet.http.LocalStrings";
-    private static ResourceBundle lStrings =
+    private static final ResourceBundle lStrings =
         ResourceBundle.getBundle(LSTRING_FILE);
 
 
@@ -732,9 +732,9 @@ public abstract class HttpServlet extends GenericServlet {
  */
 // file private
 class NoBodyResponse extends HttpServletResponseWrapper {
-    private NoBodyOutputStream                noBody;
-    private PrintWriter                        writer;
-    private boolean                        didSetContentLength;
+    private final NoBodyOutputStream noBody;
+    private PrintWriter writer;
+    private boolean didSetContentLength;
 
     // file private
     NoBodyResponse(HttpServletResponse r) {
@@ -821,10 +821,10 @@ class NoBodyOutputStream extends ServletOutputStream {
 
     private static final String LSTRING_FILE =
         "javax.servlet.http.LocalStrings";
-    private static ResourceBundle lStrings =
+    private static final ResourceBundle lStrings =
         ResourceBundle.getBundle(LSTRING_FILE);
 
-    private int                contentLength = 0;
+    private int contentLength = 0;
 
     // file private
     NoBodyOutputStream() {

==================================================
HttpUtils.java
index f6b2bcb6b8..e3bd476a86 100644
--- a/java/javax/servlet/http/HttpSessionContext.java
+++ b/java/javax/servlet/http/HttpSessionContext.java
@@ -38,7 +38,6 @@ public interface HttpSessionContext {
      *             must return null and will be removed in a future version of
      *             this API.
      */
-    @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public HttpSession getSession(String sessionId);
 
@@ -47,7 +46,6 @@ public interface HttpSessionContext {
      *             must return an empty <code>Enumeration</code> and will be
      *             removed in a future version of this API.
      */
-    @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public Enumeration<String> getIds();
 }

==================================================
ImplicitObjectELResolver.java
index 5467ccf5cb..a0b4971d2f 100644
--- a/java/javax/servlet/http/HttpUtils.java
+++ b/java/javax/servlet/http/HttpUtils.java
@@ -35,7 +35,7 @@ public class HttpUtils {
 
     private static final String LSTRING_FILE =
         "javax.servlet.http.LocalStrings";
-    private static ResourceBundle lStrings =
+    private static final ResourceBundle lStrings =
         ResourceBundle.getBundle(LSTRING_FILE);
 
 
@@ -86,7 +86,7 @@ public class HttpUtils {
         if (s == null) {
             throw new IllegalArgumentException();
         }
-        Hashtable<String,String[]> ht = new Hashtable<String,String[]>();
+        Hashtable<String,String[]> ht = new Hashtable<>();
         StringBuilder sb = new StringBuilder();
         StringTokenizer st = new StringTokenizer(s, "&");
         while (st.hasMoreTokens()) {
@@ -161,7 +161,7 @@ public class HttpUtils {
 
         // cheap hack to return an empty hash
         if (len <=0)
-            return new Hashtable<String,String[]>();
+            return new Hashtable<>();
 
         if (in == null) {
             throw new IllegalArgumentException();

==================================================
ScopedAttributeELResolver.java
index 588039df00..740f4d4dd6 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -174,8 +174,7 @@ public class ImplicitObjectELResolver extends ELResolver {
 
     @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>(
-                SCOPE_NAMES.length);
+        List<FeatureDescriptor> feats = new ArrayList<>(SCOPE_NAMES.length);
         FeatureDescriptor feat;
         for (int i = 0; i < SCOPE_NAMES.length; i++) {
             feat = new FeatureDescriptor();
@@ -272,7 +271,7 @@ public class ImplicitObjectELResolver extends ELResolver {
                         Cookie[] c = ((HttpServletRequest) page.getRequest())
                                 .getCookies();
                         if (c != null) {
-                            Vector<String> v = new Vector<String>();
+                            Vector<String> v = new Vector<>();
                             for (int i = 0; i < c.length; i++) {
                                 v.add(c[i].getName());
                             }
@@ -334,7 +333,7 @@ public class ImplicitObjectELResolver extends ELResolver {
                             ((HttpServletRequest) page.getRequest())
                                     .getHeaders(name);
                         if (e != null) {
-                            List<String> list = new ArrayList<String>();
+                            List<String> list = new ArrayList<>();
                             while (e.hasMoreElements()) {
                                 list.add(e.nextElement());
                             }
@@ -517,7 +516,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         @Override
         public final Set<Map.Entry<String,V>> entrySet() {
             Enumeration<String> e = getAttributeNames();
-            Set<Map.Entry<String, V>> set = new HashSet<Map.Entry<String, V>>();
+            Set<Map.Entry<String, V>> set = new HashSet<>();
             if (e != null) {
                 while (e.hasMoreElements()) {
                     set.add(new ScopeEntry(e.nextElement()));

==================================================
TagAdapter.java
index 2fba8bbf05..102b902c48 100644
--- a/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
+++ b/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
@@ -119,7 +119,7 @@ public class ScopedAttributeELResolver extends ELResolver {
             Object base) {
 
         PageContext ctxt = (PageContext) context.getContext(JspContext.class);
-        List<FeatureDescriptor> list = new ArrayList<FeatureDescriptor>();
+        List<FeatureDescriptor> list = new ArrayList<>();
         Enumeration<String> e;
         Object value;
         String name;

==================================================
TagData.java
index 1ae8bb8f7b..aedc16db48 100644
--- a/java/javax/servlet/jsp/tagext/TagAdapter.java
+++ b/java/javax/servlet/jsp/tagext/TagAdapter.java
@@ -34,7 +34,7 @@ import javax.servlet.jsp.PageContext;
  */
 public class TagAdapter implements Tag {
     /** The simple tag that's being adapted. */
-    private SimpleTag simpleTagAdaptee;
+    private final SimpleTag simpleTagAdaptee;
 
     /** The parent, of this tag, converted (if necessary) to be of type Tag. */
     private Tag parent;

==================================================
TagInfo.java
index 354e8e3efc..6d8606fa3d 100644
--- a/java/javax/servlet/jsp/tagext/TagData.java
+++ b/java/javax/servlet/jsp/tagext/TagData.java
@@ -56,9 +56,9 @@ public class TagData implements Cloneable {
      */
     public TagData(Object[] atts[]) {
         if (atts == null) {
-            attributes = new Hashtable<String, Object>();
+            attributes = new Hashtable<>();
         } else {
-            attributes = new Hashtable<String, Object>(atts.length);
+            attributes = new Hashtable<>(atts.length);
         }
 
         if (atts != null) {

==================================================
TagLibraryInfo.java
index 95b7e7057e..2d00fe1d12 100644
--- a/java/javax/servlet/jsp/tagext/TagInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagInfo.java
@@ -90,6 +90,13 @@ public class TagInfo {
         this.tagExtraInfo  = tagExtraInfo;
         this.attributeInfo = attributeInfo;
 
+        // Use defaults for unspecified values
+        this.displayName = null;
+        this.largeIcon = null;
+        this.smallIcon = null;
+        this.tagVariableInfo = null;
+        this.dynamicAttributes = false;
+
         if (tagExtraInfo != null)
             tagExtraInfo.setTagInfo(this);
     }
@@ -141,6 +148,9 @@ public class TagInfo {
         this.largeIcon = largeIcon;
         this.tagVariableInfo = tvi;
 
+        // Use defaults for unspecified values
+        this.dynamicAttributes = false;
+
         if (tagExtraInfo != null)
             tagExtraInfo.setTagInfo(this);
     }
@@ -424,24 +434,24 @@ public class TagInfo {
     /*
      * private fields for 1.1 info
      */
-    private String             tagName; // the name of the tag
-    private String             tagClassName;
-    private String             bodyContent;
-    private String             infoString;
-    private TagLibraryInfo     tagLibrary;
-    private TagExtraInfo       tagExtraInfo; // instance of TagExtraInfo
-    private TagAttributeInfo[] attributeInfo;
+    private final String             tagName; // the name of the tag
+    private final String             tagClassName;
+    private final String             bodyContent;
+    private final String             infoString;
+    private TagLibraryInfo           tagLibrary;
+    private TagExtraInfo             tagExtraInfo; // instance of TagExtraInfo
+    private final TagAttributeInfo[] attributeInfo;
 
     /*
      * private fields for 1.2 info
      */
-    private String             displayName;
-    private String             smallIcon;
-    private String             largeIcon;
-    private TagVariableInfo[]  tagVariableInfo;
+    private final String             displayName;
+    private final String             smallIcon;
+    private final String             largeIcon;
+    private final TagVariableInfo[]  tagVariableInfo;
 
     /*
      * Additional private fields for 2.0 info
      */
-    private boolean dynamicAttributes;
+    private final boolean dynamicAttributes;
 }

==================================================
TagSupport.java
index 79eb9c2638..cd4d591986 100644
--- a/java/javax/servlet/jsp/tagext/TagLibraryInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagLibraryInfo.java
@@ -230,13 +230,13 @@ public abstract class TagLibraryInfo {
     /**
      * The prefix assigned to this taglib from the taglib directive.
      */
-    protected String prefix;
+    protected final String prefix;
 
     /**
      * The value of the uri attribute from the taglib directive for this
      * library.
      */
-    protected String uri;
+    protected final String uri;
 
     /**
      * An array describing the tags that are defined in this tag library.

==================================================
