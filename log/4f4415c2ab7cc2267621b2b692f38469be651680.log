4f4415c2ab7cc2267621b2b692f38469be651680
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58988
==================================================
Felix Schumacher
==================================================
Wed Feb 10 20:56:55 2016 +0000
==================================================
Substitution.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58988
Add quotation of special characters in substitutions of the RewriteValve.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1729730 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestRewriteValve.java
index 385d4aacdf..933d0c5253 100644
--- a/java/org/apache/catalina/valves/rewrite/Substitution.java
+++ b/java/org/apache/catalina/valves/rewrite/Substitution.java
@@ -111,17 +111,27 @@ public class Substitution {
         int pos = 0;
         int percentPos = 0;
         int dollarPos = 0;
+        int backslashPos = 0;
 
         while (pos < sub.length()) {
             percentPos = sub.indexOf('%', pos);
             dollarPos = sub.indexOf('$', pos);
-            if (percentPos == -1 && dollarPos == -1) {
+            backslashPos = sub.indexOf('\\', pos);
+            if (percentPos == -1 && dollarPos == -1 && backslashPos == -1) {
                 // Static text
                 StaticElement newElement = new StaticElement();
                 newElement.value = sub.substring(pos, sub.length());
                 pos = sub.length();
                 elements.add(newElement);
-            } else if (percentPos == -1 || ((dollarPos != -1) && (dollarPos < percentPos))) {
+            } else if (isFirstPos(backslashPos, dollarPos, percentPos)) {
+                if (backslashPos + 1 == sub.length()) {
+                    throw new IllegalArgumentException(sub);
+                }
+                StaticElement newElement = new StaticElement();
+                newElement.value = sub.substring(pos, backslashPos) + sub.substring(backslashPos + 1, backslashPos + 2);
+                pos = backslashPos + 2;
+                elements.add(newElement);
+            } else if (isFirstPos(dollarPos, percentPos)) {
                 // $: back reference to rule or map lookup
                 if (dollarPos + 1 == sub.length()) {
                     throw new IllegalArgumentException(sub);
@@ -240,4 +250,28 @@ public class Substitution {
         }
         return buf.toString();
     }
+
+    /**
+     * Checks whether the first int is non negative and smaller than any non negative other int
+     * given with {@code others}.
+     *
+     * @param testPos
+     *            integer to test against
+     * @param others
+     *            list of integers that are paired against {@code testPos}. Any
+     *            negative integer will be ignored.
+     * @return {@code true} if {@code testPos} is not negative and is less then any given other
+     *         integer, {@code false} otherwise
+     */
+    private boolean isFirstPos(int testPos, int... others) {
+        if (testPos < 0) {
+            return false;
+        }
+        for (int other : others) {
+            if (other >= 0 && other < testPos) {
+                return false;
+            }
+        }
+        return true;
+    }
 }

==================================================
