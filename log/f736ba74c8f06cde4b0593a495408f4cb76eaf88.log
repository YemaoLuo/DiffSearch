f736ba74c8f06cde4b0593a495408f4cb76eaf88
==================================================
- Port memory optimizations to the classic HTTP connector.
==================================================
Remy Maucherat
==================================================
Thu Nov 16 11:17:41 2006 +0000
==================================================
InternalInputBuffer.java
- Port memory optimizations to the classic HTTP connector.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@475686 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalOutputBuffer.java
index 67a9ca7d0d..6b77f24862 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -61,13 +61,7 @@ public class InternalInputBuffer implements InputBuffer {
         this.request = request;
         headers = request.getMimeHeaders();
 
-        headerBuffer1 = new byte[headerBufferSize];
-        headerBuffer2 = new byte[headerBufferSize];
-        bodyBuffer = new byte[headerBufferSize];
-        buf = headerBuffer1;
-
-        headerBuffer = new char[headerBufferSize];
-        ascbuf = headerBuffer;
+        buf = new byte[headerBufferSize];
 
         inputStreamInputBuffer = new InputStreamInputBuffer();
 
@@ -124,12 +118,6 @@ public class InternalInputBuffer implements InputBuffer {
     protected byte[] buf;
 
 
-    /**
-     * Pointer to the US-ASCII header buffer.
-     */
-    protected char[] ascbuf;
-
-
     /**
      * Last valid byte.
      */
@@ -143,27 +131,10 @@ public class InternalInputBuffer implements InputBuffer {
 
 
     /**
-     * HTTP header buffer no 1.
-     */
-    protected byte[] headerBuffer1;
-
-
-    /**
-     * HTTP header buffer no 2.
-     */
-    protected byte[] headerBuffer2;
-
-
-    /**
-     * HTTP body buffer.
-     */
-    protected byte[] bodyBuffer;
-
-
-    /**
-     * US-ASCII header buffer.
+     * Pos of the end of the header in the buffer, which is also the
+     * start of the body.
      */
-    protected char[] headerBuffer;
+    protected int end;
 
 
     /**
@@ -306,7 +277,6 @@ public class InternalInputBuffer implements InputBuffer {
         request.recycle();
 
         inputStream = null;
-        buf = headerBuffer1;
         lastValid = 0;
         pos = 0;
         lastActiveFilter = -1;
@@ -322,26 +292,23 @@ public class InternalInputBuffer implements InputBuffer {
      * consumed. This method only resets all the pointers so that we are ready
      * to parse the next HTTP request.
      */
-    public void nextRequest()
-        throws IOException {
+    public void nextRequest() {
 
         // Recycle Request object
         request.recycle();
 
-        // Determine the header buffer used for next request
-        byte[] newHeaderBuf = null;
-        if (buf == headerBuffer1) {
-            newHeaderBuf = headerBuffer2;
-        } else {
-            newHeaderBuf = headerBuffer1;
+        // Copy leftover bytes to the beginning of the buffer
+        if (lastValid - pos > 0) {
+            int npos = 0;
+            int opos = pos;
+            while (lastValid - opos > opos - npos) {
+                System.arraycopy(buf, opos, buf, npos, opos - npos);
+                npos += pos;
+                opos += pos;
+            }
+            System.arraycopy(buf, opos, buf, npos, lastValid - opos);
         }
 
-        // Copy leftover bytes from buf to newHeaderBuf
-        System.arraycopy(buf, pos, newHeaderBuf, 0, lastValid - pos);
-
-        // Swap buffers
-        buf = newHeaderBuf;
-
         // Recycle filters
         for (int i = 0; i <= lastActiveFilter; i++) {
             activeFilters[i].recycle();
@@ -424,11 +391,9 @@ public class InternalInputBuffer implements InputBuffer {
                     throw new EOFException(sm.getString("iib.eof.error"));
             }
 
-            ascbuf[pos] = (char) buf[pos];
-
             if (buf[pos] == Constants.SP) {
                 space = true;
-                request.method().setChars(ascbuf, start, pos - start);
+                request.method().setBytes(buf, start, pos - start);
             }
 
             pos++;
@@ -499,8 +464,6 @@ public class InternalInputBuffer implements InputBuffer {
                     throw new EOFException(sm.getString("iib.eof.error"));
             }
 
-            ascbuf[pos] = (char) buf[pos];
-
             if (buf[pos] == Constants.CR) {
                 end = pos;
             } else if (buf[pos] == Constants.LF) {
@@ -514,7 +477,7 @@ public class InternalInputBuffer implements InputBuffer {
         }
 
         if ((end - start) > 0) {
-            request.protocol().setChars(ascbuf, start, end - start);
+            request.protocol().setBytes(buf, start, end - start);
         } else {
             request.protocol().setString("");
         }
@@ -532,6 +495,7 @@ public class InternalInputBuffer implements InputBuffer {
         }
 
         parsingHeader = false;
+        end = pos;
 
     }
 
@@ -594,15 +558,13 @@ public class InternalInputBuffer implements InputBuffer {
 
             if (buf[pos] == Constants.COLON) {
                 colon = true;
-                headerValue = headers.addValue(ascbuf, start, pos - start);
+                headerValue = headers.addValue(buf, start, pos - start);
             }
             chr = buf[pos];
             if ((chr >= Constants.A) && (chr <= Constants.Z)) {
                 buf[pos] = (byte) (chr - Constants.LC_OFFSET);
             }
 
-            ascbuf[pos] = (char) buf[pos];
-
             pos++;
 
         }
@@ -742,12 +704,18 @@ public class InternalInputBuffer implements InputBuffer {
 
         } else {
 
-            buf = bodyBuffer;
-            pos = 0;
-            lastValid = 0;
-            nRead = inputStream.read(buf, 0, buf.length);
+            if (buf.length - end < 4500) {
+                // In this case, the request header was really large, so we allocate a 
+                // brand new one; the old one will get GCed when subsequent requests
+                // clear all references
+                buf = new byte[buf.length];
+                end = 0;
+            }
+            pos = end;
+            lastValid = pos;
+            nRead = inputStream.read(buf, pos, buf.length - lastValid);
             if (nRead > 0) {
-                lastValid = nRead;
+                lastValid = pos + nRead;
             }
 
         }

==================================================
