b4578e21d7166db9a7b109d95c110e30ad402d7c
==================================================
- Drop the code from SSO (I didn't know StandardSession.expire was already setting the context CL.
==================================================
Remy Maucherat
==================================================
Wed Jan 22 14:39:51 2014 +0000
==================================================
SingleSignOn.java
- Drop the code from SSO (I didn't know StandardSession.expire was already setting the context CL.
- Add bind/unbind to StandardSession.expire instead (and only do it if the classloader actually changes).
- See later if the bind/unbind code can be moved to StandardContext, but all uses seem slightly different.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560363 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecurityClassLoad.java
index bd1de7d48d..a65f689f11 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOn.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOn.java
@@ -20,23 +20,17 @@ package org.apache.catalina.authenticator;
 
 
 import java.io.IOException;
-import java.security.AccessController;
 import java.security.Principal;
-import java.security.PrivilegedAction;
 import java.util.HashMap;
 import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
 
-import org.apache.catalina.Context;
-import org.apache.catalina.Globals;
-import org.apache.catalina.Manager;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Session;
 import org.apache.catalina.SessionEvent;
 import org.apache.catalina.SessionListener;
-import org.apache.catalina.ThreadBindingListener;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.valves.ValveBase;
@@ -421,15 +415,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
                 reverse.remove(sessions[i]);
             }
             // Invalidate this session
-            ClassLoader oldContextClassLoader = null;
-            try {
-                oldContextClassLoader = bindThread(sessions[i]);
-                sessions[i].expire();
-            } finally {
-                if (oldContextClassLoader != null) {
-                    unbindThread(sessions[i], oldContextClassLoader);
-                }
-            }
+            sessions[i].expire();
         }
 
         // NOTE:  Clients may still possess the old single sign on cookie,
@@ -438,97 +424,6 @@ public class SingleSignOn extends ValveBase implements SessionListener {
 
     }
 
-    protected ClassLoader bindThread(Session session) {
-
-        Manager manager = session.getManager();
-        Context context = null;
-        ClassLoader contextClassLoader = null;
-        ThreadBindingListener threadBindingListener = null;
-        if (manager != null) {
-            context = manager.getContext();
-        }
-        if (context != null) {
-            if (context.getLoader() != null && context.getLoader().getClassLoader() != null) {
-                contextClassLoader = context.getLoader().getClassLoader();
-            }
-            threadBindingListener = context.getThreadBindingListener();
-        }
-        if (threadBindingListener == null || contextClassLoader == null) {
-            return null;
-        }
-
-        if (Globals.IS_SECURITY_ENABLED) {
-            return AccessController.doPrivileged(new PrivilegedBind(contextClassLoader, threadBindingListener));
-        } else {
-            ClassLoader oldContextClassLoader =
-                    Thread.currentThread().getContextClassLoader();
-            Thread.currentThread().setContextClassLoader(contextClassLoader);
-            threadBindingListener.bind();
-            return oldContextClassLoader;
-        }
-
-    }
-
-    protected class PrivilegedBind implements PrivilegedAction<ClassLoader> {
-        private ClassLoader contextClassLoader;
-        private ThreadBindingListener threadBindingListener;
-
-        PrivilegedBind(ClassLoader contextClassLoader, ThreadBindingListener threadBindingListener) {
-            this.contextClassLoader = contextClassLoader;
-            this.threadBindingListener = threadBindingListener;
-        }
-
-        @Override
-        public ClassLoader run() {
-            ClassLoader oldContextClassLoader =
-                    Thread.currentThread().getContextClassLoader();
-            Thread.currentThread().setContextClassLoader(contextClassLoader);
-            threadBindingListener.bind();
-            return oldContextClassLoader;
-        }
-    }
-
-    protected void unbindThread(Session session, ClassLoader oldContextClassLoader) {
-
-        Manager manager = session.getManager();
-        Context context = null;
-        ThreadBindingListener threadBindingListener = null;
-        if (manager != null) {
-            context = manager.getContext();
-        }
-        if (context != null) {
-            threadBindingListener = context.getThreadBindingListener();
-        }
-        if (threadBindingListener == null) {
-            return;
-        }
-
-        if (Globals.IS_SECURITY_ENABLED) {
-            AccessController.doPrivileged(new PrivilegedUnbind(oldContextClassLoader, threadBindingListener));
-        } else {
-            threadBindingListener.unbind();
-            Thread.currentThread().setContextClassLoader(oldContextClassLoader);
-        }
-
-    }
-
-    protected class PrivilegedUnbind implements PrivilegedAction<Void> {
-        private ClassLoader oldContextClassLoader;
-        private ThreadBindingListener threadBindingListener;
-
-        PrivilegedUnbind(ClassLoader oldContextClassLoader, ThreadBindingListener threadBindingListener) {
-            this.oldContextClassLoader = oldContextClassLoader;
-            this.threadBindingListener = threadBindingListener;
-        }
-
-        @Override
-        public Void run() {
-            threadBindingListener.unbind();
-            Thread.currentThread().setContextClassLoader(oldContextClassLoader);
-            return null;
-        }
-    }
-
     /**
      * Attempts reauthentication to the given <code>Realm</code> using
      * the credentials associated with the single sign-on session

==================================================
StandardSession.java
index 3aebab9f08..47fbe65a80 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -42,7 +42,6 @@ public final class SecurityClassLoad {
             return;
         }
 
-        loadAuthenticatorPackage(loader);
         loadCorePackage(loader);
         loadCoyotePackage(loader);
         loadLoaderPackage(loader);
@@ -56,18 +55,6 @@ public final class SecurityClassLoad {
     }
 
 
-    private static final void loadAuthenticatorPackage(ClassLoader loader)
-            throws Exception {
-        final String basePackage = "org.apache.catalina.authenticator.";
-        loader.loadClass
-            (basePackage +
-             "SingleSignOn$PrivilegedBind");
-        loader.loadClass
-            (basePackage +
-             "SingleSignOn$PrivilegedUnbind");
-   }
-
-
     private static final void loadCorePackage(ClassLoader loader)
             throws Exception {
         final String basePackage = "org.apache.catalina.core.";
@@ -148,7 +135,9 @@ public final class SecurityClassLoad {
         loader.loadClass
             (basePackage + "StandardSession");
         loader.loadClass
-            (basePackage + "StandardSession$PrivilegedSetTccl");
+            (basePackage + "StandardSession$PrivilegedBind");
+        loader.loadClass
+            (basePackage + "StandardSession$PrivilegedUnbind");
         loader.loadClass
             (basePackage + "StandardSession$1");
         loader.loadClass

==================================================
