2ac108b99f2fca5bb027d51cc3611eb08886f8cf
==================================================
Reduce duplicated code.
==================================================
Keiichi Fujino
==================================================
Tue Sep 16 10:10:37 2014 +0000
==================================================
AbstractAjpProtocol.java
Reduce duplicated code.
All AJP connectors use common method to configuration of processor.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1625234 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 3ae3b963e8..d163be9d85 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -75,6 +75,14 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         }
     }
 
+    protected void configureProcessor(AbstractAjpProcessor<S> processor) {
+        processor.setAdapter(getAdapter());
+        processor.setTomcatAuthentication(getTomcatAuthentication());
+        processor.setRequiredSecret(requiredSecret);
+        processor.setKeepAliveTimeout(getKeepAliveTimeout());
+        processor.setClientCertProvider(getClientCertProvider());
+    }
+
     protected abstract static class AbstractAjpConnectionHandler<S,P extends AbstractAjpProcessor<S>>
             extends AbstractConnectionHandler<S, P> {
 

==================================================
AjpNio2Protocol.java
index d92353c6ad..1a3ecb6735 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -143,11 +143,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
         @Override
         protected AjpAprProcessor createProcessor() {
             AjpAprProcessor processor = new AjpAprProcessor(proto.packetSize, (AprEndpoint)proto.endpoint);
-            processor.setAdapter(proto.getAdapter());
-            processor.setTomcatAuthentication(proto.tomcatAuthentication);
-            processor.setRequiredSecret(proto.requiredSecret);
-            processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
-            processor.setClientCertProvider(proto.getClientCertProvider());
+            proto.configureProcessor(processor);
             register(processor);
             return processor;
         }

==================================================
AjpNioProtocol.java
index 4c38a8b3e0..df720134f5 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -144,11 +144,7 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
         @Override
         protected AjpNio2Processor createProcessor() {
             AjpNio2Processor processor = new AjpNio2Processor(proto.packetSize, (Nio2Endpoint) proto.endpoint);
-            processor.setAdapter(proto.getAdapter());
-            processor.setTomcatAuthentication(proto.tomcatAuthentication);
-            processor.setRequiredSecret(proto.requiredSecret);
-            processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
-            processor.setClientCertProvider(proto.getClientCertProvider());
+            proto.configureProcessor(processor);
             register(processor);
             return processor;
         }

==================================================
AjpProtocol.java
index 5718328721..35a239a7c0 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -173,11 +173,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
         @Override
         protected AjpNioProcessor createProcessor() {
             AjpNioProcessor processor = new AjpNioProcessor(proto.packetSize, (NioEndpoint)proto.endpoint);
-            processor.setAdapter(proto.getAdapter());
-            processor.setTomcatAuthentication(proto.tomcatAuthentication);
-            processor.setRequiredSecret(proto.requiredSecret);
-            processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
-            processor.setClientCertProvider(proto.getClientCertProvider());
+            proto.configureProcessor(processor);
             register(processor);
             return processor;
         }

==================================================
