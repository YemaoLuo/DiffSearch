4ec992c1fc394671d3d333f0c2697d339e79dd07
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56492
==================================================
Sylvain Laurent
==================================================
Wed May 7 20:39:07 2014 +0000
==================================================
StopPooledThreadException.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56492
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56492
Avoid eclipse debugger pausing on uncaught exceptions when tomcat renews its threads

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1593132 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TaskThread.java
new file mode 100644
index 0000000000..fcee34ad1a
--- /dev/null
+++ b/java/org/apache/tomcat/util/threads/StopPooledThreadException.java
@@ -0,0 +1,31 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.threads;
+
+
+/**
+ * A custom {@link RuntimeException} thrown by the {@link ThreadPoolExecutor}
+ * to signal that the thread should be disposed of.
+ */
+public class StopPooledThreadException extends RuntimeException {
+
+    private static final long serialVersionUID = 1L;
+
+    public StopPooledThreadException(String msg) {
+        super(msg);
+    }
+}

==================================================
ThreadPoolExecutor.java
index c7fb265e1d..5a7e0f373f 100644
--- a/java/org/apache/tomcat/util/threads/TaskThread.java
+++ b/java/org/apache/tomcat/util/threads/TaskThread.java
@@ -16,22 +16,26 @@
  */
 package org.apache.tomcat.util.threads;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * A Thread implementation that records the time at which it was created.
  *
  */
 public class TaskThread extends Thread {
 
+    private static final Log log = LogFactory.getLog(TaskThread.class);
     private final long creationTime;
 
     public TaskThread(ThreadGroup group, Runnable target, String name) {
-        super(group, target, name);
+        super(group, new WrappingRunnable(target), name);
         this.creationTime = System.currentTimeMillis();
     }
 
     public TaskThread(ThreadGroup group, Runnable target, String name,
             long stackSize) {
-        super(group, target, name, stackSize);
+        super(group, new WrappingRunnable(target), name, stackSize);
         this.creationTime = System.currentTimeMillis();
     }
 
@@ -42,4 +46,26 @@ public class TaskThread extends Thread {
         return creationTime;
     }
 
+    /**
+     * Wraps a {@link Runnable} to swallow any {@link StopPooledThreadException}
+     * instead of letting it go and potentially trigger a break in a debugger.
+     */
+    private static class WrappingRunnable implements Runnable {
+        private Runnable wrappedRunnable;
+        WrappingRunnable(Runnable wrappedRunnable) {
+            this.wrappedRunnable = wrappedRunnable;
+        }
+        @Override
+        public void run() {
+            try {
+                wrappedRunnable.run();
+            } catch(StopPooledThreadException exc) {
+                //expected : we just swallow the exception to avoid disturbing
+                //debuggers like eclipse's
+                log.debug("Thread exiting on purpose", exc);
+            }
+        }
+
+    }
+
 }

==================================================
