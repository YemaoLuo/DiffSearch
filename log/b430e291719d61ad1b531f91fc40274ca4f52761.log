b430e291719d61ad1b531f91fc40274ca4f52761
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56029 a regression in the fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=55198
==================================================
Mark Emlyn
==================================================
Sat Jan 18 19:33:19 2014 +0000
==================================================
ELParser.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56029 a regression in the fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=55198
Remove the code to skip whitespace from the 'simple'EL parser. It is far simpler to retain the whitespace than it is to teach this simple parser parser when to insert it. This also has the benefit that the EL should remain unchanged.
A a number of test cases for BZ 56029

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1559397 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestELParser.java
index ca707f3ba2..976c51d1a2 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -101,7 +101,7 @@ public class ELParser {
 
         StringBuilder buf = new StringBuilder();
         ELexpr = new ELNode.Nodes();
-        while (hasNext()) {
+        while (hasNextChar()) {
             curToken = nextToken();
             if (curToken instanceof Char) {
                 if (curToken.toChar() == '}') {
@@ -138,16 +138,16 @@ public class ELParser {
         }
         String s1 = null; // Function prefix
         String s2 = curToken.toString(); // Function name
-        if (hasNext()) {
+        if (hasNextChar()) {
             int mark = getIndex();
             curToken = nextToken();
             if (curToken.toChar() == ':') {
-                if (hasNext()) {
+                if (hasNextChar()) {
                     Token t2 = nextToken();
                     if (t2 instanceof Id) {
                         s1 = s2;
                         s2 = t2.toString();
-                        if (hasNext()) {
+                        if (hasNextChar()) {
                             curToken = nextToken();
                         }
                     }
@@ -167,11 +167,12 @@ public class ELParser {
      * Test if an id is a reserved word in EL
      */
     private boolean isELReserved(String id) {
+        String trimmed = id.trim();
         int i = 0;
         int j = reservedWords.length;
         while (i < j) {
             int k = (i + j) / 2;
-            int result = reservedWords[k].compareTo(id);
+            int result = reservedWords[k].compareTo(trimmed);
             if (result == 0) {
                 return true;
             }
@@ -228,21 +229,11 @@ public class ELParser {
         return buf.toString();
     }
 
-    /*
-     * @return true if there is something left in EL expression buffer other
-     * than white spaces.
-     */
-    private boolean hasNext() {
-        skipSpaces();
-        return hasNextChar();
-    }
-
     /*
      * @return The next token in the EL expression buffer.
      */
     private Token nextToken() {
         prevToken = curToken;
-        skipSpaces();
         if (hasNextChar()) {
             char ch = nextChar();
             if (Character.isJavaIdentifierStart(ch)) {
@@ -297,14 +288,6 @@ public class ELParser {
      * expression buffer.
      */
 
-    private void skipSpaces() {
-        while (hasNextChar()) {
-            if (expression.charAt(index) > ' ')
-                break;
-            index++;
-        }
-    }
-
     private boolean hasNextChar() {
         return index < expression.length();
     }

==================================================
