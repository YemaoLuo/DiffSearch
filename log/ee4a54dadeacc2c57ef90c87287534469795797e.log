ee4a54dadeacc2c57ef90c87287534469795797e
==================================================
Silence IDE warnings
==================================================
Mark Thomas
==================================================
Tue Oct 9 17:37:23 2018 +0000
==================================================
JSONParser.java
Silence IDE warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1843315 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JSONParserTokenManager.java
index 5f9461fdaf..6a803aa23c 100644
--- a/java/org/apache/tomcat/util/json/JSONParser.java
+++ b/java/org/apache/tomcat/util/json/JSONParser.java
@@ -24,7 +24,7 @@ import java.util.*;
 import java.math.*;
 
 /**
-* Basic JSON parser generated by JavaCC. It consumes the input provided through the constructor when 
+* Basic JSON parser generated by JavaCC. It consumes the input provided through the constructor when
 * {@code parseObject()}, {@code parseList()}, or {@code parse()} are called, and there is no way to directly
 * reset the state.
 * Set the {@code fallbackToString} property if you want to enable
@@ -35,6 +35,7 @@ import java.math.*;
 *
 * This class makes no pretenses towards being thread safe.
 */
+@SuppressWarnings("all") // Ignore warnings in generated code
 public class JSONParser implements JSONParserConstants {
 
     private boolean nativeNumbers = false;
@@ -62,7 +63,7 @@ public class JSONParser implements JSONParserConstants {
     }
 
     /**
-    * Parses any JSON-parseable object, returning the value. 
+    * Parses any JSON-parseable object, returning the value.
     */
     public Object parse() throws ParseException {
         Object toReturn = anything();

==================================================
JavaCharStream.java
index 5f41aefa5a..8919cc4dfc 100644
--- a/java/org/apache/tomcat/util/json/JSONParserTokenManager.java
+++ b/java/org/apache/tomcat/util/json/JSONParserTokenManager.java
@@ -18,11 +18,9 @@
  */
 
 package org.apache.tomcat.util.json;
-import java.io.*;
-import java.util.*;
-import java.math.*;
 
 /** Token Manager. */
+@SuppressWarnings("all") // Ignore warnings in generated code
 public class JSONParserTokenManager implements JSONParserConstants {
 
   /** Debug output. */
@@ -593,8 +591,8 @@ private int jjMoveNfa_0(int startState, int curPos)
 
 /** Token literal values. */
 public static final String[] jjstrLiteralImages = {
-"", null, null, null, null, null, "\54", "\173", "\175", "\72", "\133", 
-"\135", null, null, null, null, null, null, null, null, null, null, "\47\47", 
+"", null, null, null, null, null, "\54", "\173", "\175", "\72", "\133",
+"\135", null, null, null, null, null, null, null, null, null, null, "\47\47",
 "\42\42", null, null, null, null, null, null, };
 protected Token jjFillToken()
 {
@@ -622,8 +620,8 @@ protected Token jjFillToken()
    return t;
 }
 static final int[] jjnextStates = {
-   6, 7, 9, 27, 28, 30, 36, 19, 22, 29, 37, 31, 27, 30, 31, 11, 
-   12, 14, 1, 2, 20, 21, 23, 25, 34, 35, 
+   6, 7, 9, 27, 28, 30, 36, 19, 22, 29, 37, 31, 27, 30, 31, 11,
+   12, 14, 1, 2, 20, 21, 23, 25, 34, 35,
 };
 private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
 {
@@ -646,7 +644,7 @@ int jjmatchedPos;
 int jjmatchedKind;
 
 /** Get the next Token. */
-public Token getNextToken() 
+public Token getNextToken()
 {
   Token matchedToken;
   int curPos = 0;
@@ -774,7 +772,7 @@ private void jjCheckNAddStates(int start, int end)
   }
 
   /** Reinitialise parser. */
-  
+
   public void ReInit(JavaCharStream stream)
   {
 
@@ -797,7 +795,7 @@ private void jjCheckNAddStates(int start, int end)
 
   /** Reinitialise parser. */
   public void ReInit(JavaCharStream stream, int lexState)
-  
+
   {
     ReInit(stream);
     SwitchTo(lexState);
@@ -820,20 +818,20 @@ public static final String[] lexStateNames = {
 
 /** Lex State array. */
 public static final int[] jjnewLexState = {
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-   -1, -1, -1, -1, -1, 
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+   -1, -1, -1, -1, -1,
 };
 static final long[] jjtoToken = {
-   0x3ccf8fc1L, 
+   0x3ccf8fc1L,
 };
 static final long[] jjtoSkip = {
-   0x3eL, 
+   0x3eL,
 };
 static final long[] jjtoSpecial = {
-   0x0L, 
+   0x0L,
 };
 static final long[] jjtoMore = {
-   0x0L, 
+   0x0L,
 };
     protected JavaCharStream  input_stream;
 

==================================================
ParseException.java
index 7ad682faef..aa07267ef1 100644
--- a/java/org/apache/tomcat/util/json/JavaCharStream.java
+++ b/java/org/apache/tomcat/util/json/JavaCharStream.java
@@ -23,7 +23,7 @@ package org.apache.tomcat.util.json;
  * An implementation of interface CharStream, where the stream is assumed to
  * contain only ASCII characters (with java-like unicode escape processing).
  */
-
+@SuppressWarnings("all") // Ignore warnings in generated code
 public
 class JavaCharStream
 {

==================================================
Token.java
index a132de1f41..9d51f5f702 100644
--- a/java/org/apache/tomcat/util/json/ParseException.java
+++ b/java/org/apache/tomcat/util/json/ParseException.java
@@ -28,6 +28,7 @@ package org.apache.tomcat.util.json;
  * You can modify this class to customize your error reporting
  * mechanisms so long as you retain the public fields.
  */
+@SuppressWarnings("all") // Ignore warnings in generated code
 public class ParseException extends Exception {
 
   /**
@@ -141,8 +142,8 @@ public class ParseException extends Exception {
     }
     retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
     retval += "." + EOL;
-    
-    
+
+
     if (expectedTokenSequences.length == 0) {
         // Nothing to add here
     } else {
@@ -153,7 +154,7 @@ public class ParseException extends Exception {
 	    }
 	    retval += expected.toString();
     }
-    
+
     return retval;
   }
 

==================================================
TokenMgrError.java
index 7c2c92e2d6..2f3b338bb5 100644
--- a/java/org/apache/tomcat/util/json/Token.java
+++ b/java/org/apache/tomcat/util/json/Token.java
@@ -22,7 +22,7 @@ package org.apache.tomcat.util.json;
 /**
  * Describes the input token stream.
  */
-
+@SuppressWarnings("all") // Ignore warnings in generated code
 public class Token implements java.io.Serializable {
 
   /**

==================================================
