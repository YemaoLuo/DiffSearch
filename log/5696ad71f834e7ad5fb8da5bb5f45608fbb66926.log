5696ad71f834e7ad5fb8da5bb5f45608fbb66926
==================================================
Refactor obtaining system properties - no functional change
==================================================
Mark Thomas
==================================================
Wed Feb 15 15:59:24 2023 +0000
==================================================
BeanELResolver.java
Refactor obtaining system properties - no functional change


==================================================
Globals.java
index d63500ed10..4a5e93cb31 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -37,7 +37,7 @@ public class BeanELResolver extends ELResolver {
     private static final String CACHE_SIZE_PROP = "org.apache.el.BeanELResolver.CACHE_SIZE";
 
     static {
-        CACHE_SIZE = Integer.parseInt(System.getProperty(CACHE_SIZE_PROP, "1000"));
+        CACHE_SIZE = Integer.getInteger(CACHE_SIZE_PROP, 1000).intValue();
     }
 
     private final boolean readOnly;

==================================================
FileResource.java
index a5f1fed466..0d112ea6c2 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -266,7 +266,7 @@ public final class Globals {
      * this flag to {@code true} will change the defaults for other settings.
      */
     public static final boolean STRICT_SERVLET_COMPLIANCE =
-            Boolean.parseBoolean(System.getProperty("org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "false"));
+            Boolean.getBoolean("org.apache.catalina.STRICT_SERVLET_COMPLIANCE");
 
 
     /**

==================================================
StringCache.java
index 319aed4598..f1b674450b 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -24,6 +24,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.attribute.BasicFileAttributes;
@@ -45,7 +46,7 @@ public class FileResource extends AbstractResource {
     static {
         boolean isEBCDIC = false;
         try {
-            String encoding = System.getProperty("file.encoding");
+            String encoding = Charset.defaultCharset().displayName();
             if (encoding.contains("EBCDIC")) {
                 isEBCDIC = true;
             }

==================================================
FastHttpDateFormat.java
index 37a3c28336..483748970c 100644
--- a/java/org/apache/tomcat/util/buf/StringCache.java
+++ b/java/org/apache/tomcat/util/buf/StringCache.java
@@ -42,25 +42,22 @@ public class StringCache {
     /**
      * Enabled ?
      */
-    protected static boolean byteEnabled = ("true".equals(System.getProperty(
-            "tomcat.util.buf.StringCache.byte.enabled", "false")));
+    protected static boolean byteEnabled = Boolean.getBoolean("tomcat.util.buf.StringCache.byte.enabled");
 
 
-    protected static boolean charEnabled = ("true".equals(System.getProperty(
-            "tomcat.util.buf.StringCache.char.enabled", "false")));
+    protected static boolean charEnabled = Boolean.getBoolean("tomcat.util.buf.StringCache.char.enabled");
 
 
-    protected static int trainThreshold = Integer.parseInt(System.getProperty(
-            "tomcat.util.buf.StringCache.trainThreshold", "20000"));
+    protected static int trainThreshold =
+            Integer.getInteger("tomcat.util.buf.StringCache.trainThreshold", 20000).intValue();
 
 
-    protected static int cacheSize = Integer.parseInt(System.getProperty(
-            "tomcat.util.buf.StringCache.cacheSize", "200"));
+    protected static int cacheSize =
+            Integer.getInteger("tomcat.util.buf.StringCache.cacheSize", 200).intValue();
 
 
     protected static final int maxStringSize =
-            Integer.parseInt(System.getProperty(
-                    "tomcat.util.buf.StringCache.maxStringSize", "128"));
+            Integer.getInteger("tomcat.util.buf.StringCache.maxStringSize", 128).intValue();
 
 
    /**

==================================================
ClassLoaderUtil.java
index 91d192c501..83b79a2f8b 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -35,7 +35,7 @@ public final class FastHttpDateFormat {
 
 
     private static final int CACHE_SIZE =
-        Integer.parseInt(System.getProperty("org.apache.tomcat.util.http.FastHttpDateFormat.CACHE_SIZE", "1000"));
+            Integer.getInteger("org.apache.tomcat.util.http.FastHttpDateFormat.CACHE_SIZE", 1000).intValue();
 
 
     // HTTP date formats

==================================================
TomcatBaseTest.java
index b95ca5c406..c654f7fe2b 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ClassLoaderUtil.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ClassLoaderUtil.java
@@ -24,7 +24,7 @@ public class ClassLoaderUtil {
     private static final Log log = LogFactory.getLog(ClassLoaderUtil.class);
 
     private static final boolean onlyAttemptFirstLoader =
-        Boolean.parseBoolean(System.getProperty("org.apache.tomcat.jdbc.pool.onlyAttemptCurrentClassLoader", "false"));
+            Boolean.getBoolean("org.apache.tomcat.jdbc.pool.onlyAttemptCurrentClassLoader");
 
     public static Class<?> loadClass(String className, ClassLoader... classLoaders) throws ClassNotFoundException {
         ClassNotFoundException last = null;

==================================================
