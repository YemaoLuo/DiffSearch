b1ab3a33f99199283084adf68d5b1ec05aec3768
==================================================
Tomcat needs to know if it is running on Java 9 since the reflection used by the RMI memory leak detection will break unless the right command line option is specified.
==================================================
Mark Thomas
==================================================
Mon May 16 21:36:39 2016 +0000
==================================================
Jre9Compat.java
Tomcat needs to know if it is running on Java 9 since the reflection used by the RMI memory leak detection will break unless the right command line option is specified.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744149 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JreCompat.java
new file mode 100644
index 0000000000..6a0f3d5697
--- /dev/null
+++ b/java/org/apache/tomcat/util/compat/Jre9Compat.java
@@ -0,0 +1,50 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.compat;
+
+class Jre9Compat extends JreCompat {
+
+    private static final Class<?> inaccessibleObjectExceptionClazz;
+
+
+    static {
+        Class<?> c1 = null;
+        try {
+            c1 = Class.forName("java.lang.reflect.InaccessibleObjectException");
+        } catch (SecurityException e) {
+            // Should never happen
+        } catch (ClassNotFoundException e) {
+            // Must be Java 8
+        }
+        inaccessibleObjectExceptionClazz = c1;
+    }
+
+
+    static boolean isSupported() {
+        return inaccessibleObjectExceptionClazz != null;
+    }
+
+
+    @Override
+    public boolean isInstanceOfInaccessibleObjectException(Exception e) {
+        if (e == null) {
+            return false;
+        }
+
+        return inaccessibleObjectExceptionClazz.isAssignableFrom(e.getClass());
+    }
+}

==================================================
