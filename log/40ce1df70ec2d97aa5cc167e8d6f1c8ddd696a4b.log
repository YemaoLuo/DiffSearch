40ce1df70ec2d97aa5cc167e8d6f1c8ddd696a4b
==================================================
Clean up
==================================================
Mark Emlyn
==================================================
Wed Aug 29 21:17:00 2012 +0000
==================================================
AsyncStockServlet.java
Clean up
- Java 7 <>
- UCDetector

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1378736 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stockticker.java
index 0d8280e2af..462dd96e92 100644
--- a/webapps/examples/WEB-INF/classes/async/AsyncStockServlet.java
+++ b/webapps/examples/WEB-INF/classes/async/AsyncStockServlet.java
@@ -42,10 +42,11 @@ public class AsyncStockServlet extends HttpServlet implements TickListener, Asyn
     public static final String LONG_POLL = "LONG-POLL";
     public static final String STREAM = "STREAM";
 
-    static ArrayList<Stock> ticks = new ArrayList<Stock>();
-    static ConcurrentLinkedQueue<AsyncContext> clients = new ConcurrentLinkedQueue<AsyncContext>();
-    static AtomicInteger clientcount = new AtomicInteger(0);
-    static Stockticker ticker = new Stockticker();
+    static final ArrayList<Stock> ticks = new ArrayList<>();
+    static final ConcurrentLinkedQueue<AsyncContext> clients =
+            new ConcurrentLinkedQueue<>();
+    static final AtomicInteger clientcount = new AtomicInteger(0);
+    static final Stockticker ticker = new Stockticker();
 
     public AsyncStockServlet() {
         System.out.println("AsyncStockServlet created");

==================================================
Entries.java
index 97687d7325..8965b603cf 100644
--- a/webapps/examples/WEB-INF/classes/async/Stockticker.java
+++ b/webapps/examples/WEB-INF/classes/async/Stockticker.java
@@ -23,8 +23,8 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public class Stockticker implements Runnable {
         public volatile boolean run = true;
-        protected AtomicInteger counter = new AtomicInteger(0);
-        ArrayList<TickListener> listeners = new ArrayList<TickListener>();
+        protected final AtomicInteger counter = new AtomicInteger(0);
+        final ArrayList<TickListener> listeners = new ArrayList<>();
         protected volatile Thread ticker = null;
         protected volatile int ticknr = 0;
 
@@ -100,8 +100,8 @@ public class Stockticker implements Runnable {
     }
 
     public static final class Stock implements Cloneable {
-        protected static DecimalFormat df = new DecimalFormat("0.00");
-        protected String symbol = "";
+        protected static final DecimalFormat df = new DecimalFormat("0.00");
+        protected final String symbol;
         protected double value = 0.0d;
         protected double lastchange = 0.0d;
         protected int cnt = 0;

==================================================
Entry.java
index e95f3a0d51..02860195e1 100644
--- a/webapps/examples/WEB-INF/classes/cal/Entries.java
+++ b/webapps/examples/WEB-INF/classes/cal/Entries.java
@@ -22,13 +22,13 @@ import javax.servlet.http.HttpServletRequest;
 
 public class Entries {
 
-    private Hashtable<String, Entry> entries;
+    private final Hashtable<String, Entry> entries;
     private static final String[] time = { "8am", "9am", "10am", "11am",
             "12pm", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm" };
     public static final int rows = 12;
 
     public Entries() {
-        entries = new Hashtable<String, Entry>(rows);
+        entries = new Hashtable<>(rows);
         for (int i = 0; i < rows; i++) {
             entries.put(time[i], new Entry(time[i]));
         }

==================================================
