2563bfc8437b6ce0cea92dae06dde4eac912dac2
==================================================
Align OutputBuffer initialisation across the connectors
==================================================
Mark Emlyn
==================================================
Fri Aug 12 18:24:21 2011 +0000
==================================================
AbstractOutputBuffer.java
Align OutputBuffer initialisation across the connectors
Reduce visibility of properties and methods


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1157204 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index b4a4345277..a709720a46 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -28,9 +28,11 @@ import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.HttpMessages;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.SocketWrapper;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractOutputBuffer implements OutputBuffer{
+public abstract class AbstractOutputBuffer<S> implements OutputBuffer{
 
     // ----------------------------------------------------- Instance Variables
 
@@ -316,7 +318,11 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
             activeFilters[lastActiveFilter].end();
         finished = true;
     }
+
     
+    public abstract void init(SocketWrapper<S> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException;
+
     public abstract void sendAck() throws IOException;
     
     protected abstract void commit() throws IOException;

==================================================
Http11NioProcessor.java
index 7d184a3ed5..01f884a8fb 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -175,8 +175,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         // Setting up the socket
         this.socket = socketWrapper;
         inputBuffer.init(socketWrapper, endpoint);
-        long socketRef = socketWrapper.getSocket().longValue();
-        outputBuffer.setSocket(socketRef);
+        outputBuffer.init(socketWrapper, endpoint);
 
         // Error flag
         error = false;
@@ -190,6 +189,8 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         boolean openSocket = false;
         boolean sendfileInProgress = false;
 
+        long socketRef = socketWrapper.getSocket().longValue();
+
         while (!error && keepAlive && !comet && !isAsync() && !endpoint.isPaused()) {
 
             // Parsing the request header
@@ -624,7 +625,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
     @Override
-    protected AbstractOutputBuffer getOutputBuffer() {
+    protected AbstractOutputBuffer<Long> getOutputBuffer() {
         return outputBuffer;
     }
 }

==================================================
Http11Processor.java
index b0078ec6ec..3ac9421886 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -206,8 +206,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         // Setting up the socket
         this.socket = socketWrapper;
         inputBuffer.init(socketWrapper, endpoint);
-        outputBuffer.setSocket(this.socket.getSocket());
-        outputBuffer.setSelectorPool(((NioEndpoint)endpoint).getSelectorPool());
+        outputBuffer.init(socketWrapper, endpoint);
 
         // Error flag
         error = false;
@@ -651,7 +650,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
     @Override
-    protected AbstractOutputBuffer getOutputBuffer() {
+    protected AbstractOutputBuffer<NioChannel> getOutputBuffer() {
         return outputBuffer;
     }
 

==================================================
InternalAprOutputBuffer.java
index ef797ab2c4..0bf482953d 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -139,7 +139,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
         // Setting up the I/O
         this.socket = socketWrapper;
         inputBuffer.init(socketWrapper, endpoint);
-        outputBuffer.setOutputStream(socket.getSocket().getOutputStream());
+        outputBuffer.init(socketWrapper, endpoint);
 
         // Error flag
         error = false;
@@ -563,7 +563,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
     }
 
     @Override
-    protected AbstractOutputBuffer getOutputBuffer() {
+    protected AbstractOutputBuffer<Socket> getOutputBuffer() {
         return outputBuffer;
     }
 

==================================================
InternalNioOutputBuffer.java
index 53b331b0da..94b8a8943f 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -26,13 +26,15 @@ import org.apache.coyote.Response;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.http.HttpMessages;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.SocketWrapper;
 
 /**
  * Output buffer.
  * 
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  */
-public class InternalAprOutputBuffer extends AbstractOutputBuffer {
+public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
 
 
     // ----------------------------------------------------------- Constructors
@@ -72,30 +74,26 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer {
     /**
      * Underlying socket.
      */
-    protected long socket;
+    private long socket;
 
 
     /**
      * Direct byte buffer used for writing.
      */
-    protected ByteBuffer bbuf = null;
+    private ByteBuffer bbuf = null;
 
     
-    // ------------------------------------------------------------- Properties
+    // --------------------------------------------------------- Public Methods
 
+    @Override
+    public void init(SocketWrapper<Long> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException {
 
-    /**
-     * Set the underlying socket.
-     */
-    public void setSocket(long socket) {
-        this.socket = socket;
+        socket = socketWrapper.getSocket().longValue();
         Socket.setsbb(this.socket, bbuf);
     }
 
 
-    // --------------------------------------------------------- Public Methods
-
-
     /**
      * Flush the response.
      * 
@@ -197,11 +195,10 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer {
     }
 
 
-
     /**
      * Callback to write data from the buffer.
      */
-    protected void flushBuffer()
+    private void flushBuffer()
         throws IOException {
         if (bbuf.position() > 0) {
             if (Socket.sendbb(socket, 0, bbuf.position()) < 0) {
@@ -253,6 +250,4 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer {
             return byteCount;
         }
     }
-
-
 }

==================================================
InternalOutputBuffer.java
index ecdd7e78b9..938b7cf56d 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -27,9 +27,11 @@ import org.apache.coyote.Response;
 import org.apache.tomcat.util.MutableInteger;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.http.HttpMessages;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioSelectorPool;
+import org.apache.tomcat.util.net.SocketWrapper;
 
 /**
  * Output buffer.
@@ -37,7 +39,7 @@ import org.apache.tomcat.util.net.NioSelectorPool;
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @author Filip Hanik
  */
-public class InternalNioOutputBuffer extends AbstractOutputBuffer {
+public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 
     // ----------------------------------------------------------- Constructors
 
@@ -68,37 +70,19 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
     /**
      * Number of bytes last written
      */
-    protected MutableInteger lastWrite = new MutableInteger(1);
+    private MutableInteger lastWrite = new MutableInteger(1);
 
     /**
      * Underlying socket.
      */
-    protected NioChannel socket;
+    private NioChannel socket;
     
     /**
      * Selector pool, for blocking reads and blocking writes
      */
-    protected NioSelectorPool pool;
+    private NioSelectorPool pool;
 
 
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * Set the underlying socket.
-     */
-    public void setSocket(NioChannel socket) {
-        this.socket = socket;
-    }
-
-    public void setSelectorPool(NioSelectorPool pool) { 
-        this.pool = pool;
-    }
-
-    public NioSelectorPool getSelectorPool() {
-        return pool;
-    }    
-
     // --------------------------------------------------------- Public Methods
 
 
@@ -178,18 +162,18 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
         long writeTimeout = att.getTimeout();
         Selector selector = null;
         try {
-            selector = getSelectorPool().get();
+            selector = pool.get();
         } catch ( IOException x ) {
             //ignore
         }
         try {
-            written = getSelectorPool().write(bytebuffer, socket, selector, writeTimeout, block,lastWrite);
+            written = pool.write(bytebuffer, socket, selector, writeTimeout, block,lastWrite);
             //make sure we are flushed 
             do {
                 if (socket.flush(true,selector,writeTimeout,lastWrite)) break;
             }while ( true );
         }finally { 
-            if ( selector != null ) getSelectorPool().put(selector);
+            if ( selector != null ) pool.put(selector);
         }
         if ( block ) bytebuffer.clear(); //only clear
         this.total = 0;
@@ -199,6 +183,14 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
 
     // ------------------------------------------------------ Protected Methods
 
+    @Override
+    public void init(SocketWrapper<NioChannel> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException {
+
+        socket = socketWrapper.getSocket();
+        pool = ((NioEndpoint)endpoint).getSelectorPool();
+    }
+
 
     /**
      * Commit the response.
@@ -220,7 +212,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
 
     }
 
-    int total = 0;
+    private int total = 0;
     private synchronized void addToBB(byte[] buf, int offset, int length) throws IOException {
         while (length > 0) {
             int thisTime = length;
@@ -245,8 +237,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
     /**
      * Callback to write data from the buffer.
      */
-    protected void flushBuffer()
-        throws IOException {
+    private void flushBuffer() throws IOException {
 
         //prevent timeout for async,
         SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
@@ -294,6 +285,4 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
             return byteCount;
         }
     }
-
-
 }

==================================================
TestGzipOutputFilter.java
index a2e3c08579..b3e1259fdd 100644
--- a/java/org/apache/coyote/http11/InternalOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalOutputBuffer.java
@@ -19,17 +19,20 @@ package org.apache.coyote.http11;
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.net.Socket;
 
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Response;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.SocketWrapper;
 
 /**
  * Output buffer.
  * 
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  */
-public class InternalOutputBuffer extends AbstractOutputBuffer
+public class InternalOutputBuffer extends AbstractOutputBuffer<Socket>
     implements ByteChunk.ByteOutputChannel {
 
     // ----------------------------------------------------------- Constructors
@@ -58,7 +61,7 @@ public class InternalOutputBuffer extends AbstractOutputBuffer
     }
 
     /**
-     * Underlying output stream.
+     * Underlying output stream. Note: protected to assist with unit testing
      */
     protected OutputStream outputStream;
 
@@ -66,27 +69,15 @@ public class InternalOutputBuffer extends AbstractOutputBuffer
     /**
      * Socket buffer.
      */
-    protected ByteChunk socketBuffer;
+    private ByteChunk socketBuffer;
 
 
     /**
      * Socket buffer (extra buffering to reduce number of packets sent).
      */
-    protected boolean useSocketBuffer = false;    
+    private boolean useSocketBuffer = false;    
     
 
-    /**
-     * Set the underlying socket output stream.
-     */
-    public void setOutputStream(OutputStream outputStream) {
-
-        // FIXME: Check for null ?
-
-        this.outputStream = outputStream;
-
-    }
-
-
     /**
      * Set the socket buffer size.
      */
@@ -104,6 +95,13 @@ public class InternalOutputBuffer extends AbstractOutputBuffer
 
     // --------------------------------------------------------- Public Methods
 
+    @Override
+    public void init(SocketWrapper<Socket> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException {
+
+        outputStream = socketWrapper.getSocket().getOutputStream();
+    }
+
 
     /**
      * Flush the response.
@@ -255,6 +253,4 @@ public class InternalOutputBuffer extends AbstractOutputBuffer
             return byteCount;
         }
     }
-
-
 }

==================================================
