1edc77ca19779a0421ad8e601bb4b86973ac2c7b
==================================================
Use isEmpty instead of size on collections to test for emptiness
==================================================
Felix Schumacher
==================================================
Thu Aug 16 11:01:13 2018 +0000
==================================================
ConnectionPool.java
Use isEmpty instead of size on collections to test for emptiness


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1838188 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FairBlockingQueue.java
index 74c3f12cf0..b2ede14456 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -387,8 +387,8 @@ public class ConnectionPool {
         }
 
         /* release all idle connections */
-        BlockingQueue<PooledConnection> pool = (idle.size()>0)?idle:(force?busy:idle);
-        while (pool.size()>0) {
+        BlockingQueue<PooledConnection> pool = (!idle.isEmpty())?idle:(force?busy:idle);
+        while (!pool.isEmpty()) {
             try {
                 //retrieve the next connection
                 PooledConnection con = pool.poll(1000, TimeUnit.MILLISECONDS);
@@ -399,7 +399,7 @@ public class ConnectionPool {
                         release(con);
                     else
                         abandon(con);
-                    if (pool.size()>0) {
+                    if (!pool.isEmpty()) {
                         con = pool.poll(1000, TimeUnit.MILLISECONDS);
                     } else {
                         break;
@@ -410,7 +410,7 @@ public class ConnectionPool {
                     Thread.currentThread().interrupt();
                 }
             }
-            if (pool.size()==0 && force && pool!=busy) pool = busy;
+            if (pool.isEmpty() && force && pool!=busy) pool = busy;
         }
         if (this.getPoolProperties().isJmxEnabled()) this.jmxPool = null;
         PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
@@ -980,7 +980,7 @@ public class ConnectionPool {
      */
     public void checkAbandoned() {
         try {
-            if (busy.size()==0) return;
+            if (busy.isEmpty()) return;
             Iterator<PooledConnection> locked = busy.iterator();
             int sto = getPoolProperties().getSuspectTimeout();
             while (locked.hasNext()) {
@@ -1027,7 +1027,7 @@ public class ConnectionPool {
     public void checkIdle(boolean ignoreMinSize) {
 
         try {
-            if (idle.size()==0) return;
+            if (idle.isEmpty()) return;
             long now = System.currentTimeMillis();
             Iterator<PooledConnection> unlocked = idle.iterator();
             while ( (ignoreMinSize || (idle.size()>=getPoolProperties().getMinIdle())) && unlocked.hasNext()) {
@@ -1072,7 +1072,7 @@ public class ConnectionPool {
      */
     public void testAllIdle() {
         try {
-            if (idle.size()==0) return;
+            if (idle.isEmpty()) return;
             Iterator<PooledConnection> unlocked = idle.iterator();
             while (unlocked.hasNext()) {
                 PooledConnection con = unlocked.next();
@@ -1413,7 +1413,7 @@ public class ConnectionPool {
             cleaner.cancel();
             if (poolCleanTimer != null) {
                 poolCleanTimer.purge();
-                if (cleaners.size() == 0) {
+                if (cleaners.isEmpty()) {
                     poolCleanTimer.cancel();
                     poolCleanTimer = null;
                 }

==================================================
MultiLockFairBlockingQueue.java
index 0418eb6e6f..d144065003 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -96,7 +96,7 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
         ExchangeCountDownLatch<E> c = null;
         try {
             //check to see if threads are waiting for an object
-            if (waiters.size() > 0) {
+            if (!waiters.isEmpty()) {
                 //if threads are waiting grab the latch for that thread
                 c = waiters.poll();
                 //give the object to the thread instead of adding it to the pool

==================================================
StatementFinalizer.java
index f27a96b3a6..a0435f4d24 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
@@ -107,7 +107,7 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
         ExchangeCountDownLatch<E> c = null;
         try {
             //check to see if threads are waiting for an object
-            if (waiters[idx].size() > 0) {
+            if (!waiters[idx].isEmpty()) {
                 //if threads are waiting grab the latch for that thread
                 c = waiters[idx].poll();
                 //give the object to the thread instead of adding it to the pool

==================================================
