38fde1ad830d177b748a147dd32ea5f6b4ea907b
==================================================
s/can not/cannot/
==================================================
Mark Thomas
==================================================
Mon Mar 16 15:55:56 2015 +0000
==================================================
WebSocketContainer.java
s/can not/cannot/

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1667048 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Wrapper.java
index 729619abe9..f2da3e4327 100644
--- a/java/javax/websocket/WebSocketContainer.java
+++ b/java/javax/websocket/WebSocketContainer.java
@@ -55,7 +55,7 @@ public interface WebSocketContainer {
      *
      * @return The WebSocket session for the connection
      *
-     * @throws DeploymentException  If the connection can not be established
+     * @throws DeploymentException  If the connection cannot be established
      * @throws IOException If an I/O occurred while trying to establish the
      *                     connection
      */
@@ -76,7 +76,7 @@ public interface WebSocketContainer {
      *
      * @return The WebSocket session for the connection
      *
-     * @throws DeploymentException  If the connection can not be established
+     * @throws DeploymentException  If the connection cannot be established
      * @throws IOException If an I/O occurred while trying to establish the
      *                     connection
      */

==================================================
CoyoteAdapter.java
index fc2f8dde3b..c479eff768 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -136,7 +136,7 @@ public interface Wrapper extends Container {
      * @return Array of names of the methods supported by the underlying
      *         servlet
      *
-     * @throws ServletException If the target servlet can not be loaded
+     * @throws ServletException If the target servlet cannot be loaded
      */
     public String[] getServletMethods() throws ServletException;
 

==================================================
RemoteIpFilter.java
index 66116e42fe..b5edf6f29a 100644
--- a/java/org/apache/catalina/filters/LocalStrings.properties
+++ b/java/org/apache/catalina/filters/LocalStrings.properties
@@ -29,7 +29,7 @@ expiresFilter.noExpirationConfigured=Request "{0}" with response status "{1}" co
 expiresFilter.setExpirationDate=Request "{0}" with response status "{1}" content-type "{2}", set expiration date {3}
 expiresFilter.startingPointNotFound=Starting point (access|now|modification|a<seconds>|m<seconds>) not found in directive "{0}"
 expiresFilter.startingPointInvalid=Invalid starting point (access|now|modification|a<seconds>|m<seconds>) "{0}" in directive "{1}"
-expiresFilter.responseAlreadyCommited=Request "{0}", can not apply ExpiresFilter on already committed response.
+expiresFilter.responseAlreadyCommited=Request "{0}", cannot apply ExpiresFilter on already committed response.
 expiresFilter.noExpirationConfiguredForContentType=No Expires configuration found for content-type "{0}"
 expiresFilter.useMatchingConfiguration=Use {0} matching "{1}" for content-type "{2}" returns {3}
 expiresFilter.useDefaultConfiguration=Use default {0} for content-type "{1}" returns {2}

==================================================
FileMessageFactory.java
index db637891fc..f55d8b48d0 100644
--- a/java/org/apache/catalina/filters/RemoteIpFilter.java
+++ b/java/org/apache/catalina/filters/RemoteIpFilter.java
@@ -430,7 +430,7 @@ import org.apache.juli.logging.LogFactory;
  * </table>
  * <p>
  * Note : <code>x-forwarded-by</code> holds the trusted proxy <code>proxy1</code>. <code>x-forwarded-by</code> holds
- * <code>140.211.11.130</code> because <code>untrusted-proxy</code> is not trusted and thus, we can not trust that
+ * <code>140.211.11.130</code> because <code>untrusted-proxy</code> is not trusted and thus, we cannot trust that
  * <code>untrusted-proxy</code> is the actual remote ip. <code>request.remoteAddr</code> is <code>untrusted-proxy</code> that is an IP
  * verified by <code>proxy1</code>.
  * </p>

==================================================
JdbcLeakPrevention.java
index 2823876b8b..426f20ea70 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -66,7 +66,7 @@ public class FileMessageFactory {
     protected final boolean openForWrite;
 
     /**
-     * Once the factory is used, it can not be reused.
+     * Once the factory is used, it cannot be reused.
      */
     protected boolean closed = false;
 

==================================================
JNDIRealm.java
index 95a8a08b24..351e193912 100644
--- a/java/org/apache/catalina/manager/LocalStrings.properties
+++ b/java/org/apache/catalina/manager/LocalStrings.properties
@@ -90,7 +90,7 @@ managerServlet.noCommand=FAIL - No command was specified
 managerServlet.noContext=FAIL - No context exists for path {0}
 managerServlet.noGlobal=FAIL - No global JNDI resources are available
 managerServlet.noManager=FAIL - No manager exists for path {0}
-managerServlet.noSelf=FAIL - The manager can not reload, undeploy, stop, or undeploy itself
+managerServlet.noSelf=FAIL - The manager cannot reload, undeploy, stop, or undeploy itself
 managerServlet.noWrapper=Container has not called setWrapper() for this servlet
 managerServlet.notDeployed=FAIL - Context {0} is defined in server.xml and may not be undeployed
 managerServlet.notSslConnector=SSL is not enabled for this connector

==================================================
DefaultServlet.java
index b70b26645c..5863c11d78 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -76,7 +76,7 @@ import org.ietf.jgss.GSSCredential;
  *     element in the top level <code>DirContext</code> that is accessed
  *     via the <code>connectionURL</code> property.</li>
  *
- * <li>If a socket connection can not be made to the <code>connectURL</code>
+ * <li>If a socket connection cannot be made to the <code>connectURL</code>
  *     an attempt will be made to use the <code>alternateURL</code> if it
  *     exists.</li>
  *

==================================================
Channel.java
index 9c10098b2a..e2ecd6fbd6 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -333,7 +333,7 @@ public class DefaultServlet extends HttpServlet {
     protected String getRelativePath(HttpServletRequest request) {
         // IMPORTANT: DefaultServlet can be mapped to '/' or '/path/*' but always
         // serves resources from the web app root with context rooted paths.
-        // i.e. it can not be used to mount the web app root under a sub-path
+        // i.e. it cannot be used to mount the web app root under a sub-path
         // This method must construct a complete context rooted path, although
         // subclasses can change this behaviour.
 

==================================================
NonBlockingCoordinator.java
index ca84ff50c4..17e2b4c051 100644
--- a/java/org/apache/catalina/tribes/Channel.java
+++ b/java/org/apache/catalina/tribes/Channel.java
@@ -246,7 +246,7 @@ public interface Channel {
 
     /**
      * Send a message to one or more members in the cluster
-     * @param destination Member[] - the destinations, can not be null or zero length, the reason for that
+     * @param destination Member[] - the destinations, cannot be null or zero length, the reason for that
      * is that a membership change can occur and at that time the application is uncertain what group the message
      * actually got sent to.
      * @param msg Serializable - the message to send, has to be serializable, or a <code>ByteMessage</code> to

==================================================
RemoteIpValve.java
index 636048b0a3..0d5460a48a 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
@@ -96,7 +96,7 @@ import org.apache.juli.logging.LogFactory;
  * Lets assume that C1 arrives, C1 has lower priority than C, but higher priority than D.<br>
  * Lets also assume that C1 sees the following view {B,D,E}<br>
  * C1 waits for a token to arrive. When the token arrives, the same scenario as above will happen.<br>
- * In the scenario where C1 sees {D,E} and A,B,C can not see C1, no token will ever arrive.<br>
+ * In the scenario where C1 sees {D,E} and A,B,C cannot see C1, no token will ever arrive.<br>
  * In this case, C1 sends a Z{C1-ldr, C1-src, mbrs-C1,D,E} to D<br>
  * D receives Z{C1-ldr, C1-src, mbrs-C1,D,E} and sends Z{A-ldr, C1-src, mbrs-A,B,C,C1,D,E} to E<br>
  * E receives Z{A-ldr, C1-src, mbrs-A,B,C,C1,D,E} and sends it to A<br>

==================================================
ReflectionUtil.java
index 03ae57385a..41bbf34646 100644
--- a/java/org/apache/catalina/valves/RemoteIpValve.java
+++ b/java/org/apache/catalina/valves/RemoteIpValve.java
@@ -341,7 +341,7 @@ import org.apache.juli.logging.LogFactory;
  * </table>
  * <p>
  * Note : <code>x-forwarded-by</code> holds the trusted proxy <code>proxy1</code>. <code>x-forwarded-by</code> holds
- * <code>140.211.11.130</code> because <code>untrusted-proxy</code> is not trusted and thus, we can not trust that
+ * <code>140.211.11.130</code> because <code>untrusted-proxy</code> is not trusted and thus, we cannot trust that
  * <code>untrusted-proxy</code> is the actual remote ip. <code>request.remoteAddr</code> is <code>untrusted-proxy</code> that is an IP
  * verified by <code>proxy1</code>.
  * </p>

==================================================
ELParser.java
index 7792b0b5f4..0b0ff5b584 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -118,7 +118,7 @@ public class ReflectionUtil {
      * @param paramTypes the parameter types to use
      * @param paramValues the parameter values
      * @return the method specified
-     * @throws MethodNotFoundException If a method can not be found that matches
+     * @throws MethodNotFoundException If a method cannot be found that matches
      *         the given criteria
      */
     /*

==================================================
JspServlet.java
index 02b72da698..8760cf9249 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -96,7 +96,7 @@ public class ELParser {
      *
      * @return An ELNode.Nodes representing the EL expression
      *
-     * Note: This can not be refactored to use the standard EL implementation as
+     * Note: This cannot be refactored to use the standard EL implementation as
      *       the EL API does not provide the level of access required to the
      *       parsed expression.
      */

==================================================
FactoryBase.java
index 925d4512ec..48693596e6 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -123,7 +123,7 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
                     return;
                 }
             } catch (MalformedURLException e) {
-                throw new ServletException("Can not locate jsp file", e);
+                throw new ServletException("cannot locate jsp file", e);
             }
             try {
                 if (SecurityUtil.isPackageProtectionEnabled()){

==================================================
SoftReferenceObjectPool.java
index 2c58e85d46..e78fa2b595 100644
--- a/java/org/apache/naming/factory/FactoryBase.java
+++ b/java/org/apache/naming/factory/FactoryBase.java
@@ -121,7 +121,7 @@ public abstract class FactoryBase implements ObjectFactory {
      * @return  The default factory for the given reference object or
      *          <code>null</code> if no default factory exists.
      *
-     * @throws NamingException  If the default factory can not be craeted
+     * @throws NamingException  If the default factory cannot be craeted
      */
     protected abstract ObjectFactory getDefaultFactory(Reference ref)
             throws NamingException;

==================================================
Rfc6265CookieProcessor.java
index 290c39e767..28dc8e10f5 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/SoftReferenceObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/SoftReferenceObjectPool.java
@@ -110,7 +110,7 @@ public class SoftReferenceObjectPool<T> extends BaseObjectPool<T> {
      *             if an exception occurs creating a new instance
      * @return a valid, activated object instance
      */
-    @SuppressWarnings("null") // ref can not be null
+    @SuppressWarnings("null") // ref cannot be null
     @Override
     public synchronized T borrowObject() throws Exception {
         assertOpen();

==================================================
MultipartStream.java
index b61f597b3e..b890a922e2 100644
--- a/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
@@ -96,7 +96,7 @@ public class Rfc6265CookieProcessor implements CookieProcessor {
     public String generateHeader(javax.servlet.http.Cookie cookie) {
 
         StringBuilder header = new StringBuilder();
-        // TODO: Name validation takes place in Cookie and can not be configured
+        // TODO: Name validation takes place in Cookie and cannot be configured
         //       per Context. Moving it to here would allow per Context config
         //       but delay validation until the header is generated. However,
         //       the spec requires an IllegalArgumentException on Cookie

==================================================
WsServerContainer.java
index 00c536abf8..7ecfecb19d 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -60,7 +60,7 @@ wsFrame.messageTooBig=The message was [{0}] bytes long but the MessageHandler ha
 wsFrame.noContinuation=A new message was started when a continuation frame was expected
 wsFrame.notMasked=The client frame was not masked but all client frames must be masked
 wsFrame.oneByteCloseCode=The client sent a close frame with a single byte payload which is not valid
-wsFrame.sessionClosed=The client data can not be processed because the session has already been closed
+wsFrame.sessionClosed=The client data cannot be processed because the session has already been closed
 wsFrame.textMessageTooBig=The decoded text message was too big for the output buffer and the endpoint does not support partial messages
 wsFrame.wrongRsv=The client frame set the reserved bits to [{0}] for a message with opCode [{1}] which was not supported by this endpoint
 

==================================================
DataSourceFactory.java
index b2d39521a7..42d0cbdc9e 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -588,7 +588,7 @@
     </p>
   </subsection>
   <subsection name="org.apache.tomcat.jdbc.pool.JdbcInterceptor">
-    <p>Abstract base class for all interceptors, can not be instantiated.</p>
+    <p>Abstract base class for all interceptors, cannot be instantiated.</p>
     <attributes>
       <attribute name="useEquals" required="false">
         <p>(boolean) Set to true if you wish the <code>ProxyConnection</code> class to use <code>String.equals</code> and set to <code>false</code>

==================================================
DataSourceProxy.java
index 0b4e6d9019..e421cd032c 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -564,14 +564,14 @@ public class DataSourceFactory implements ObjectFactory {
                 log.warn("dataSourceJNDI property is configued, but local JNDI context is null.");
             }
         } catch (NamingException e) {
-            log.debug("The name \""+poolProperties.getDataSourceJNDI()+"\" can not be found in the local context.");
+            log.debug("The name \""+poolProperties.getDataSourceJNDI()+"\" cannot be found in the local context.");
         }
         if (jndiDS==null) {
             try {
                 context = new InitialContext();
                 jndiDS = context.lookup(poolProperties.getDataSourceJNDI());
             } catch (NamingException e) {
-                log.warn("The name \""+poolProperties.getDataSourceJNDI()+"\" can not be found in the InitialContext.");
+                log.warn("The name \""+poolProperties.getDataSourceJNDI()+"\" cannot be found in the InitialContext.");
             }
         }
         if (jndiDS!=null) {

==================================================
Benchmarks.java
index 5997428094..2d7f7dba29 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -55,7 +55,7 @@ public class DataSourceProxy implements PoolConfiguration {
     }
 
     public DataSourceProxy(PoolConfiguration poolProperties) {
-        if (poolProperties == null) throw new NullPointerException("PoolConfiguration can not be null.");
+        if (poolProperties == null) throw new NullPointerException("PoolConfiguration cannot be null.");
         this.poolProperties = poolProperties;
     }
 

==================================================
