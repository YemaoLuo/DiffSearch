b3ff8357a9559e781ae6f9bcd61738cd7ccae2bf
==================================================
Improve the SSLValve so it is able to handle the ssl_client_escaped_cert header from Nginx
==================================================
Florent Guillaume
==================================================
Fri Mar 5 16:49:13 2021 +0100
==================================================
SSLValve.java
Improve the SSLValve so it is able to handle the ssl_client_escaped_cert header from Nginx



==================================================
TestSSLValve.java
index e2ea6aef0a..05b60f7cb6 100644
--- a/java/org/apache/catalina/valves/SSLValve.java
+++ b/java/org/apache/catalina/valves/SSLValve.java
@@ -30,6 +30,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.UDecoder;
 
 /**
  * When using mod_proxy_http, the client SSL information is not included in the
@@ -65,6 +66,7 @@ public class SSLValve extends ValveBase {
     private static final Log log = LogFactory.getLog(SSLValve.class);
 
     private String sslClientCertHeader = "ssl_client_cert";
+    private String sslClientEscapedCertHeader = "ssl_client_escaped_cert";
     private String sslCipherHeader = "ssl_cipher";
     private String sslSessionIdHeader = "ssl_session_id";
     private String sslCipherUserKeySizeHeader = "ssl_cipher_usekeysize";
@@ -83,6 +85,14 @@ public class SSLValve extends ValveBase {
         this.sslClientCertHeader = sslClientCertHeader;
     }
 
+    public String getSslClientEscapedCertHeader() {
+        return sslClientEscapedCertHeader;
+    }
+
+    public void setSslClientEscapedCertHeader(String sslClientEscapedCertHeader) {
+        this.sslClientEscapedCertHeader = sslClientEscapedCertHeader;
+    }
+
     public String getSslCipherHeader() {
         return sslCipherHeader;
     }
@@ -128,6 +138,8 @@ public class SSLValve extends ValveBase {
          * processing below:
          * - mod_header converts the '\n' into ' '
          * - nginx converts the '\n' into multiple ' '
+         * - nginx ssl_client_escaped_cert uses "uri component" escaping,
+         *   keeping only ALPHA, DIGIT, "-", ".", "_", "~"
          *
          * The code assumes that the trimmed header value starts with
          * '-----BEGIN CERTIFICATE-----' and ends with
@@ -137,7 +149,13 @@ public class SSLValve extends ValveBase {
          *       separate lines, the CertificateFactory is tolerant of any
          *       additional whitespace.
          */
-        String headerValue = mygetHeader(request, sslClientCertHeader);
+        String headerValue;
+        String headerEscapedValue = mygetHeader(request, sslClientEscapedCertHeader);
+        if (headerEscapedValue != null) {
+            headerValue = UDecoder.URLDecode(headerEscapedValue, null);
+        } else {
+            headerValue = mygetHeader(request, sslClientCertHeader);
+        }
         if (headerValue != null) {
             headerValue = headerValue.trim();
             if (headerValue.length() > 27) {

==================================================
