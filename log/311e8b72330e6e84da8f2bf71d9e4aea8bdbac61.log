311e8b72330e6e84da8f2bf71d9e4aea8bdbac61
==================================================
Refactor logging
==================================================
Mark Emlyn
==================================================
Wed Sep 29 15:36:54 2010 +0000
==================================================
AbstractHttp11Processor.java
Refactor logging

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1002683 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index ae4f0f3cb5..8eccaf7ffa 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -40,7 +40,6 @@ import org.apache.coyote.http11.filters.SavedRequestInputFilter;
 import org.apache.coyote.http11.filters.VoidInputFilter;
 import org.apache.coyote.http11.filters.VoidOutputFilter;
 import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.Ascii;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -53,10 +52,7 @@ import org.apache.tomcat.util.res.StringManager;
 
 public abstract class AbstractHttp11Processor {
 
-    /**
-     * Logger.
-     */
-    private static final Log log = LogFactory.getLog(AbstractHttp11Processor.class);
+    protected abstract Log getLog();
 
     /**
      * The string manager for this package.
@@ -284,7 +280,7 @@ public abstract class AbstractHttp11Processor {
             noCompressionUserAgents =
                 addREArray(noCompressionUserAgents, nRule);
         } catch (PatternSyntaxException pse) {
-            log.error(sm.getString("http11processor.regexp.error", userAgent), pse);
+            getLog().error(sm.getString("http11processor.regexp.error", userAgent), pse);
         }
     }
 
@@ -454,7 +450,7 @@ public abstract class AbstractHttp11Processor {
             Pattern nRule = Pattern.compile(userAgent);
             restrictedUserAgents = addREArray(restrictedUserAgents, nRule);
         } catch (PatternSyntaxException pse) {
-            log.error(sm.getString("http11processor.regexp.error", userAgent), pse);
+            getLog().error(sm.getString("http11processor.regexp.error", userAgent), pse);
         }
     }
 
@@ -806,11 +802,11 @@ public abstract class AbstractHttp11Processor {
             } else if (obj instanceof OutputFilter) {
                 getOutputBuffer().addFilter((OutputFilter) obj);
             } else {
-                log.warn(sm.getString("http11processor.filter.unknown",
+                getLog().warn(sm.getString("http11processor.filter.unknown",
                         className));
             }
         } catch (Exception e) {
-            log.error(sm.getString(
+            getLog().error(sm.getString(
                     "http11processor.filter.error", className), e);
         }
     }
@@ -1098,7 +1094,7 @@ public abstract class AbstractHttp11Processor {
             error = true;
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error(sm.getString("http11processor.request.finish"), t);
+            getLog().error(sm.getString("http11processor.request.finish"), t);
             // 500 - Internal Server Error
             response.setStatus(500);
             adapter.log(request, response, 0);
@@ -1110,7 +1106,7 @@ public abstract class AbstractHttp11Processor {
             error = true;
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error(sm.getString("http11processor.response.finish"), t);
+            getLog().error(sm.getString("http11processor.response.finish"), t);
             error = true;
         }
 

==================================================
Http11NioProcessor.java
index 2c8a2023f2..fa89994bcc 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -58,10 +58,11 @@ import org.apache.tomcat.util.net.SocketWrapper;
 public class Http11AprProcessor extends AbstractHttp11Processor implements ActionHook {
 
 
-    /**
-     * Logger.
-     */
     private static final Log log = LogFactory.getLog(Http11AprProcessor.class);
+    @Override
+    protected Log getLog() {
+        return log;
+    }
 
     // ----------------------------------------------------------- Constructors
 

==================================================
Http11Processor.java
index 963f7e790e..4fe8d32284 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -54,10 +54,11 @@ import org.apache.tomcat.util.net.SocketStatus;
  */
 public class Http11NioProcessor extends AbstractHttp11Processor implements ActionHook {
 
-    /**
-     * Logger.
-     */
     private static final Log log = LogFactory.getLog(Http11NioProcessor.class);
+    @Override
+    protected Log getLog() {
+        return log;
+    }
 
 
     /**

==================================================
