9c1d404e03978f23b0fa547d797085ecd1b8c455
==================================================
Remove unnecessary method
==================================================
Mark Thomas
==================================================
Wed Jun 1 19:16:48 2016 +0000
==================================================
AprEndpoint.java
Remove unnecessary method

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1746490 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index d154e55ad7..74bd52db2b 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2465,7 +2465,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
 
 
         @Override
-        protected void doWriteInternal(boolean block) throws IOException {
+        protected void doWrite(boolean block) throws IOException {
             if (closed) {
                 throw new IOException(sm.getString("socket.apr.closed", getSocket()));
             }

==================================================
NioEndpoint.java
index 732d57af22..dc9db643a3 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1218,7 +1218,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
          *              blocking case
          */
         @Override
-        protected void doWriteInternal(boolean block) throws IOException {
+        protected void doWrite(boolean block) throws IOException {
             Future<Integer> integer = null;
             try {
                 socketBufferHandler.configureWriteBufferForRead();

==================================================
SocketWrapperBase.java
index 54c39692aa..19585b856a 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -435,18 +435,18 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
 
     @Override
     public void processSocket(SocketWrapperBase<NioChannel> socketWrapper,
-            SocketEvent socketStatus, boolean dispatch) {
-        processSocket((NioSocketWrapper) socketWrapper, socketStatus, dispatch);
+            SocketEvent event, boolean dispatch) {
+        processSocket((NioSocketWrapper) socketWrapper, event, dispatch);
     }
 
-    protected boolean processSocket(NioSocketWrapper attachment, SocketEvent status, boolean dispatch) {
+    protected boolean processSocket(NioSocketWrapper socketWrapper, SocketEvent event, boolean dispatch) {
         try {
-            if (attachment == null) {
+            if (socketWrapper == null) {
                 return false;
             }
             SocketProcessor sc = processorCache.pop();
-            if ( sc == null ) sc = new SocketProcessor(attachment, status);
-            else sc.reset(attachment, status);
+            if ( sc == null ) sc = new SocketProcessor(socketWrapper, event);
+            else sc.reset(socketWrapper, event);
             Executor executor = getExecutor();
             if (dispatch && executor != null) {
                 executor.execute(sc);
@@ -454,7 +454,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
                 sc.run();
             }
         } catch (RejectedExecutionException ree) {
-            log.warn(sm.getString("endpoint.executor.fail", attachment.getSocket()), ree);
+            log.warn(sm.getString("endpoint.executor.fail", socketWrapper.getSocket()), ree);
             return false;
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
@@ -1269,7 +1269,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
 
 
         @Override
-        protected synchronized void doWriteInternal(boolean block) throws IOException {
+        protected synchronized void doWrite(boolean block) throws IOException {
             socketBufferHandler.configureWriteBufferForRead();
 
             long writeTimeout = getWriteTimeout();

==================================================
