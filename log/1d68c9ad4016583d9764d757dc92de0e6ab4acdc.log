1d68c9ad4016583d9764d757dc92de0e6ab4acdc
==================================================
Add missing @Override
==================================================
Mark Emlyn
==================================================
Mon Apr 18 16:59:26 2011 +0000
==================================================
AbstractGroup.java
Add missing @Override

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1094650 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractRole.java
index 86f2b763ae..1d814ff369 100644
--- a/java/org/apache/catalina/users/AbstractGroup.java
+++ b/java/org/apache/catalina/users/AbstractGroup.java
@@ -59,6 +59,7 @@ public abstract class AbstractGroup implements Group {
     /**
      * Return the description of this group.
      */
+    @Override
     public String getDescription() {
 
         return (this.description);
@@ -71,6 +72,7 @@ public abstract class AbstractGroup implements Group {
      *
      * @param description The new description
      */
+    @Override
     public void setDescription(String description) {
 
         this.description = description;
@@ -82,6 +84,7 @@ public abstract class AbstractGroup implements Group {
      * Return the group name of this group, which must be unique
      * within the scope of a {@link UserDatabase}.
      */
+    @Override
     public String getGroupname() {
 
         return (this.groupname);
@@ -95,6 +98,7 @@ public abstract class AbstractGroup implements Group {
      *
      * @param groupname The new group name
      */
+    @Override
     public void setGroupname(String groupname) {
 
         this.groupname = groupname;
@@ -105,12 +109,14 @@ public abstract class AbstractGroup implements Group {
     /**
      * Return the set of {@link Role}s assigned specifically to this group.
      */
+    @Override
     public abstract Iterator<Role> getRoles();
 
 
     /**
      * Return the {@link UserDatabase} within which this Group is defined.
      */
+    @Override
     public abstract UserDatabase getUserDatabase();
 
 
@@ -118,6 +124,7 @@ public abstract class AbstractGroup implements Group {
      * Return an Iterator over the set of {@link org.apache.catalina.User}s that 
      * are members of this group.
      */
+    @Override
     public abstract Iterator<User> getUsers();
 
 
@@ -129,6 +136,7 @@ public abstract class AbstractGroup implements Group {
      *
      * @param role The new role
      */
+    @Override
     public abstract void addRole(Role role);
 
 
@@ -137,6 +145,7 @@ public abstract class AbstractGroup implements Group {
      *
      * @param role The role to check
      */
+    @Override
     public abstract boolean isInRole(Role role);
 
 
@@ -145,12 +154,14 @@ public abstract class AbstractGroup implements Group {
      *
      * @param role The old role
      */
+    @Override
     public abstract void removeRole(Role role);
 
 
     /**
      * Remove all {@link Role}s from those assigned to this group.
      */
+    @Override
     public abstract void removeRoles();
 
 
@@ -160,6 +171,7 @@ public abstract class AbstractGroup implements Group {
     /**
      * Make the principal name the same as the group name.
      */
+    @Override
     public String getName() {
 
         return (getGroupname());

==================================================
AbstractUser.java
index 528a2746c1..445f17a41d 100644
--- a/java/org/apache/catalina/users/AbstractRole.java
+++ b/java/org/apache/catalina/users/AbstractRole.java
@@ -55,6 +55,7 @@ public abstract class AbstractRole implements Role {
     /**
      * Return the description of this role.
      */
+    @Override
     public String getDescription() {
 
         return (this.description);
@@ -67,6 +68,7 @@ public abstract class AbstractRole implements Role {
      *
      * @param description The new description
      */
+    @Override
     public void setDescription(String description) {
 
         this.description = description;
@@ -78,6 +80,7 @@ public abstract class AbstractRole implements Role {
      * Return the role name of this role, which must be unique
      * within the scope of a {@link UserDatabase}.
      */
+    @Override
     public String getRolename() {
 
         return (this.rolename);
@@ -91,6 +94,7 @@ public abstract class AbstractRole implements Role {
      *
      * @param rolename The new role name
      */
+    @Override
     public void setRolename(String rolename) {
 
         this.rolename = rolename;
@@ -101,6 +105,7 @@ public abstract class AbstractRole implements Role {
     /**
      * Return the {@link UserDatabase} within which this Role is defined.
      */
+    @Override
     public abstract UserDatabase getUserDatabase();
 
 
@@ -113,6 +118,7 @@ public abstract class AbstractRole implements Role {
     /**
      * Make the principal name the same as the role name.
      */
+    @Override
     public String getName() {
 
         return (getRolename());

==================================================
MemoryUser.java
index 4b59fef9c0..192b588ab8 100644
--- a/java/org/apache/catalina/users/AbstractUser.java
+++ b/java/org/apache/catalina/users/AbstractUser.java
@@ -64,6 +64,7 @@ public abstract class AbstractUser implements User {
     /**
      * Return the full name of this user.
      */
+    @Override
     public String getFullName() {
 
         return (this.fullName);
@@ -76,6 +77,7 @@ public abstract class AbstractUser implements User {
      *
      * @param fullName The new full name
      */
+    @Override
     public void setFullName(String fullName) {
 
         this.fullName = fullName;
@@ -86,6 +88,7 @@ public abstract class AbstractUser implements User {
     /**
      * Return the set of {@link Group}s to which this user belongs.
      */
+    @Override
     public abstract Iterator<Group> getGroups();
 
 
@@ -94,6 +97,7 @@ public abstract class AbstractUser implements User {
      * identifier of an encoding scheme surrounded by curly braces, such as
      * <code>{md5}xxxxx</code>.
      */
+    @Override
     public String getPassword() {
 
         return (this.password);
@@ -108,6 +112,7 @@ public abstract class AbstractUser implements User {
      *
      * @param password The new logon password
      */
+    @Override
     public void setPassword(String password) {
 
         this.password = password;
@@ -118,6 +123,7 @@ public abstract class AbstractUser implements User {
     /**
      * Return the set of {@link Role}s assigned specifically to this user.
      */
+    @Override
     public abstract Iterator<Role> getRoles();
 
 
@@ -125,6 +131,7 @@ public abstract class AbstractUser implements User {
      * Return the logon username of this user, which must be unique
      * within the scope of a {@link org.apache.catalina.UserDatabase}.
      */
+    @Override
     public String getUsername() {
 
         return (this.username);
@@ -138,6 +145,7 @@ public abstract class AbstractUser implements User {
      *
      * @param username The new logon username
      */
+    @Override
     public void setUsername(String username) {
 
         this.username = username;
@@ -153,6 +161,7 @@ public abstract class AbstractUser implements User {
      *
      * @param group The new group
      */
+    @Override
     public abstract void addGroup(Group group);
 
 
@@ -161,6 +170,7 @@ public abstract class AbstractUser implements User {
      *
      * @param role The new role
      */
+    @Override
     public abstract void addRole(Role role);
 
 
@@ -169,6 +179,7 @@ public abstract class AbstractUser implements User {
      *
      * @param group The group to check
      */
+    @Override
     public abstract boolean isInGroup(Group group);
 
 
@@ -179,6 +190,7 @@ public abstract class AbstractUser implements User {
      *
      * @param role The role to check
      */
+    @Override
     public abstract boolean isInRole(Role role);
 
 
@@ -187,12 +199,14 @@ public abstract class AbstractUser implements User {
      *
      * @param group The old group
      */
+    @Override
     public abstract void removeGroup(Group group);
 
 
     /**
      * Remove all {@link Group}s from those this user belongs to.
      */
+    @Override
     public abstract void removeGroups();
 
 
@@ -201,12 +215,14 @@ public abstract class AbstractUser implements User {
      *
      * @param role The old role
      */
+    @Override
     public abstract void removeRole(Role role);
 
 
     /**
      * Remove all {@link Role}s from those assigned to this user.
      */
+    @Override
     public abstract void removeRoles();
 
 
@@ -216,6 +232,7 @@ public abstract class AbstractUser implements User {
     /**
      * Make the principal name the same as the group name.
      */
+    @Override
     public String getName() {
 
         return (getUsername());

==================================================
MemoryUserDatabase.java
index 60401b3389..9eb5927d1b 100644
--- a/java/org/apache/catalina/users/MemoryUser.java
+++ b/java/org/apache/catalina/users/MemoryUser.java
@@ -116,6 +116,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Return the {@link UserDatabase} within which this User is defined.
      */
+    @Override
     public UserDatabase getUserDatabase() {
 
         return (this.database);

==================================================
MemoryUserDatabaseFactory.java
index e0186813f6..7b6120becf 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -152,6 +152,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the set of {@link Group}s defined in this user database.
      */
+    @Override
     public Iterator<Group> getGroups() {
 
         synchronized (groups) {
@@ -164,6 +165,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the unique global identifier of this user database.
      */
+    @Override
     public String getId() {
 
         return (this.id);
@@ -220,6 +222,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the set of {@link Role}s defined in this user database.
      */
+    @Override
     public Iterator<Role> getRoles() {
 
         synchronized (roles) {
@@ -232,6 +235,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the set of {@link User}s defined in this user database.
      */
+    @Override
     public Iterator<User> getUsers() {
 
         synchronized (users) {
@@ -250,6 +254,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @exception Exception if any exception is thrown during closing
      */
+    @Override
     public void close() throws Exception {
 
         save();
@@ -270,6 +275,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * @param groupname The group name of the new group (must be unique)
      * @param description The description of this group
      */
+    @Override
     public Group createGroup(String groupname, String description) {
 
         if (groupname == null || groupname.length() == 0) {
@@ -293,6 +299,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * @param rolename The role name of the new group (must be unique)
      * @param description The description of this group
      */
+    @Override
     public Role createRole(String rolename, String description) {
 
         if (rolename == null || rolename.length() == 0) {
@@ -317,6 +324,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * @param password The logon password of the new user
      * @param fullName The full name of the new user
      */
+    @Override
     public User createUser(String username, String password,
                            String fullName) {
 
@@ -340,6 +348,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @param groupname Name of the group to return
      */
+    @Override
     public Group findGroup(String groupname) {
 
         synchronized (groups) {
@@ -355,6 +364,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @param rolename Name of the role to return
      */
+    @Override
     public Role findRole(String rolename) {
 
         synchronized (roles) {
@@ -370,6 +380,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @param username Name of the user to return
      */
+    @Override
     public User findUser(String username) {
 
         synchronized (users) {
@@ -384,6 +395,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @exception Exception if any exception is thrown during opening
      */
+    @Override
     public void open() throws Exception {
 
         synchronized (groups) {
@@ -448,6 +460,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @param group The group to be removed
      */
+    @Override
     public void removeGroup(Group group) {
 
         synchronized (groups) {
@@ -467,6 +480,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @param role The role to be removed
      */
+    @Override
     public void removeRole(Role role) {
 
         synchronized (roles) {
@@ -491,6 +505,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @param user The user to be removed
      */
+    @Override
     public void removeUser(User user) {
 
         synchronized (users) {
@@ -524,6 +539,7 @@ public class MemoryUserDatabase implements UserDatabase {
      *
      * @exception Exception if any exception is thrown during saving
      */
+    @Override
     public void save() throws Exception {
 
         if (getReadonly()) {
@@ -673,6 +689,7 @@ class MemoryGroupCreationFactory implements ObjectCreationFactory {
         this.database = database;
     }
 
+    @Override
     public Object createObject(Attributes attributes) {
         String groupname = attributes.getValue("groupname");
         if (groupname == null) {
@@ -708,10 +725,12 @@ class MemoryGroupCreationFactory implements ObjectCreationFactory {
 
     private Digester digester = null;
 
+    @Override
     public Digester getDigester() {
         return (this.digester);
     }
 
+    @Override
     public void setDigester(Digester digester) {
         this.digester = digester;
     }
@@ -728,6 +747,7 @@ class MemoryRoleCreationFactory implements ObjectCreationFactory {
         this.database = database;
     }
 
+    @Override
     public Object createObject(Attributes attributes) {
         String rolename = attributes.getValue("rolename");
         if (rolename == null) {
@@ -742,10 +762,12 @@ class MemoryRoleCreationFactory implements ObjectCreationFactory {
 
     private Digester digester = null;
 
+    @Override
     public Digester getDigester() {
         return (this.digester);
     }
 
+    @Override
     public void setDigester(Digester digester) {
         this.digester = digester;
     }
@@ -762,6 +784,7 @@ class MemoryUserCreationFactory implements ObjectCreationFactory {
         this.database = database;
     }
 
+    @Override
     public Object createObject(Attributes attributes) {
         String username = attributes.getValue("username");
         if (username == null) {
@@ -822,10 +845,12 @@ class MemoryUserCreationFactory implements ObjectCreationFactory {
 
     private Digester digester = null;
 
+    @Override
     public Digester getDigester() {
         return (this.digester);
     }
 
+    @Override
     public void setDigester(Digester digester) {
         this.digester = digester;
     }

==================================================
