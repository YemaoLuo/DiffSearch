a8bdccecf41fa955b3eaa0dc71ff536ca8c9f3f1
==================================================
Trivial Javadoc commit to trigger a CI build
==================================================
Mark Thomas
==================================================
Tue Aug 18 11:41:46 2015 +0000
==================================================
CompressionServletResponseWrapper.java
Trivial Javadoc commit to trigger a CI build

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1696403 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Client.java
index 62559dcfaf..60413c5441 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
@@ -116,7 +116,9 @@ public class CompressionServletResponseWrapper
     }
 
     /**
-     * Set compression buffer
+     * Set compression buffer.
+     *
+     * @param buffer New size of buffer to use for compressed output
      */
     public void setCompressionBuffer(int buffer) {
         if (debug > 1) {
@@ -126,7 +128,10 @@ public class CompressionServletResponseWrapper
     }
 
     /**
-     * Set compressible mime types
+     * Set compressible mime types.
+     *
+     * @param mimeTypes The new list of mime types that will be considered for
+     *                  compression
      */
     public void setCompressionMimeTypes(String[] mimeTypes) {
         if (debug > 1) {
@@ -137,7 +142,9 @@ public class CompressionServletResponseWrapper
     }
 
     /**
-     * Set debug level
+     * Set debug level.
+     *
+     * @param debug The new debug level
      */
     public void setDebugLevel(int debug) {
         this.debug = debug;
@@ -149,8 +156,11 @@ public class CompressionServletResponseWrapper
      * associated with this Response.
      *
      * @exception IOException if an input/output error occurs
+     *
+     * @return A new servlet output stream that compressed any data written to
+     *         it
      */
-    public ServletOutputStream createOutputStream() throws IOException {
+    protected ServletOutputStream createOutputStream() throws IOException {
         if (debug > 1) {
             System.out.println("createOutputStream gets called");
         }

==================================================
DrawMessage.java
index 2ccbc68673..8026bf2957 100644
--- a/webapps/examples/WEB-INF/classes/websocket/drawboard/Client.java
+++ b/webapps/examples/WEB-INF/classes/websocket/drawboard/Client.java
@@ -80,7 +80,8 @@ public class Client {
      * will be buffered and sent when possible.<br><br>
      *
      * This method can be called from multiple threads.
-     * @param msg
+     *
+     * @param msg The message to send
      */
     public void sendMessage(AbstractWebsocketMessage msg) {
         synchronized (messagesToSend) {

==================================================
