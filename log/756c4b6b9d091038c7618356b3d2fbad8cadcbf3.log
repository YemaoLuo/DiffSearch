756c4b6b9d091038c7618356b3d2fbad8cadcbf3
==================================================
Remove use of string constant for package name
==================================================
Mark Thomas
==================================================
Fri Jul 23 16:19:05 2021 +0100
==================================================
ApplicationContext.java
Remove use of string constant for package name


==================================================
ApplicationDispatcher.java
index 3eebb1ef8c..c91f540ece 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -165,7 +165,7 @@ public class ApplicationContext implements ServletContext {
     /**
      * The string manager for this package.
      */
-    private static final StringManager sm = StringManager.getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(ApplicationContext.class);
 
 
     /**

==================================================
ApplicationFilterChain.java
index a87d8ad8ae..4a4e97cf9a 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -252,7 +252,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
     /**
      * The StringManager for this package.
      */
-    private static final StringManager sm = StringManager.getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(ApplicationDispatcher.class);
 
 
     /**

==================================================
ApplicationFilterConfig.java
index c3230648db..9d4265cee1 100644
--- a/java/org/apache/catalina/core/ApplicationFilterChain.java
+++ b/java/org/apache/catalina/core/ApplicationFilterChain.java
@@ -97,8 +97,7 @@ public final class ApplicationFilterChain implements FilterChain {
     /**
      * The string manager for our package.
      */
-    private static final StringManager sm =
-      StringManager.getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(ApplicationFilterChain.class);
 
 
     /**

==================================================
ApplicationFilterRegistration.java
index 33ec91d794..aede3504a6 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -57,8 +57,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
 
     private static final long serialVersionUID = 1L;
 
-    static final StringManager sm =
-        StringManager.getManager(Constants.Package);
+    static final StringManager sm = StringManager.getManager(ApplicationFilterConfig.class);
 
     private transient Log log = LogFactory.getLog(ApplicationFilterConfig.class); // must not be static
 

==================================================
ApplicationServletRegistration.java
index 62b51cf7ee..844e178f0c 100644
--- a/java/org/apache/catalina/core/ApplicationFilterRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationFilterRegistration.java
@@ -32,14 +32,12 @@ import org.apache.tomcat.util.descriptor.web.FilterDef;
 import org.apache.tomcat.util.descriptor.web.FilterMap;
 import org.apache.tomcat.util.res.StringManager;
 
-public class ApplicationFilterRegistration
-        implements FilterRegistration.Dynamic {
+public class ApplicationFilterRegistration implements FilterRegistration.Dynamic {
 
     /**
      * The string manager for this package.
      */
-    private static final StringManager sm =
-      StringManager.getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(ApplicationFilterRegistration.class);
 
     private final FilterDef filterDef;
     private final Context context;

==================================================
ApplicationSessionCookieConfig.java
index 8bccdf6212..351836c5e3 100644
--- a/java/org/apache/catalina/core/ApplicationServletRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationServletRegistration.java
@@ -34,14 +34,12 @@ import org.apache.catalina.util.ParameterMap;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.res.StringManager;
 
-public class ApplicationServletRegistration
-        implements ServletRegistration.Dynamic {
+public class ApplicationServletRegistration implements ServletRegistration.Dynamic {
 
     /**
      * The string manager for this package.
      */
-    private static final StringManager sm =
-      StringManager.getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(ApplicationServletRegistration.class);
 
     private final Wrapper wrapper;
     private final Context context;

==================================================
AprLifecycleListener.java
index a2f9f83aac..5793d92eaa 100644
--- a/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
+++ b/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
@@ -29,8 +29,7 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
     /**
      * The string manager for this package.
      */
-    private static final StringManager sm = StringManager
-            .getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(ApplicationSessionCookieConfig.class);
 
     private boolean httpOnly;
     private boolean secure;

==================================================
AsyncContextImpl.java
index 2f6194c84d..9ff94966f4 100644
--- a/java/org/apache/catalina/core/AprLifecycleListener.java
+++ b/java/org/apache/catalina/core/AprLifecycleListener.java
@@ -41,8 +41,7 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @since 4.1
  */
-public class AprLifecycleListener
-    implements LifecycleListener {
+public class AprLifecycleListener implements LifecycleListener {
 
     private static final Log log = LogFactory.getLog(AprLifecycleListener.class);
     /**
@@ -55,8 +54,7 @@ public class AprLifecycleListener
     /**
      * The string manager for this package.
      */
-    protected static final StringManager sm =
-        StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(AprLifecycleListener.class);
 
 
     // ---------------------------------------------- Constants

==================================================
Constants.java
index ad01ce4f45..d38f1ae8f9 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -54,8 +54,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
 
     private static final Log log = LogFactory.getLog(AsyncContextImpl.class);
 
-    protected static final StringManager sm =
-        StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(AsyncContextImpl.class);
 
     /* When a request uses a sequence of multiple start(); dispatch() with
      * non-container threads it is possible for a previous dispatch() to

==================================================
ContainerBase.java
index 89affe44a0..d7161ba884 100644
--- a/java/org/apache/catalina/core/Constants.java
+++ b/java/org/apache/catalina/core/Constants.java
@@ -18,6 +18,10 @@ package org.apache.catalina.core;
 
 public class Constants {
 
+    /**
+     * Unused. Will be removed in Apache Tomcat 10.1.x onwards.
+     */
+    @Deprecated
     public static final String Package = "org.apache.catalina.core";
     public static final int MAJOR_VERSION = 5;
     public static final int MINOR_VERSION = 1;

==================================================
DefaultInstanceManager.java
index d7d6bacde1..2e3752f27c 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -126,8 +126,7 @@ import org.apache.tomcat.util.threads.InlineExecutorService;
  *
  * @author Craig R. McClanahan
  */
-public abstract class ContainerBase extends LifecycleMBeanBase
-        implements Container {
+public abstract class ContainerBase extends LifecycleMBeanBase implements Container {
 
     private static final Log log = LogFactory.getLog(ContainerBase.class);
 
@@ -241,8 +240,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     /**
      * The string manager for this package.
      */
-    protected static final StringManager sm =
-        StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(ContainerBase.class);
 
 
     /**

==================================================
JniLifecycleListener.java
index bf2993b467..c82f1cc479 100644
--- a/java/org/apache/catalina/core/DefaultInstanceManager.java
+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java
@@ -65,8 +65,7 @@ public class DefaultInstanceManager implements InstanceManager {
     /**
      * The string manager for this package.
      */
-    protected static final StringManager sm =
-        StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(DefaultInstanceManager.class);
 
     private static final boolean EJB_PRESENT;
     private static final boolean JPA_PRESENT;

==================================================
JreMemoryLeakPreventionListener.java
index 15c59bdb32..8e129da164 100644
--- a/java/org/apache/catalina/core/JniLifecycleListener.java
+++ b/java/org/apache/catalina/core/JniLifecycleListener.java
@@ -38,7 +38,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class JniLifecycleListener implements LifecycleListener {
 
     private static final Log log = LogFactory.getLog(JniLifecycleListener.class);
-    protected static final StringManager sm = StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(JniLifecycleListener.class);
 
     private String libraryName = "";
     private String libraryPath = "";

==================================================
StandardHostValve.java
index d3a511e96d..b3c56a5cc3 100644
--- a/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
@@ -58,10 +58,8 @@ import org.w3c.dom.ls.DOMImplementationLS;
  */
 public class JreMemoryLeakPreventionListener implements LifecycleListener {
 
-    private static final Log log =
-        LogFactory.getLog(JreMemoryLeakPreventionListener.class);
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
+    private static final Log log = LogFactory.getLog(JreMemoryLeakPreventionListener.class);
+    private static final StringManager sm = StringManager.getManager(JreMemoryLeakPreventionListener.class);
 
     private static final String FORK_JOIN_POOL_THREAD_FACTORY_PROPERTY =
             "java.util.concurrent.ForkJoinPool.common.threadFactory";

==================================================
StandardPipeline.java
index c4b75c1ffc..81cbff4bf2 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -52,28 +52,20 @@ import org.apache.tomcat.util.res.StringManager;
 final class StandardHostValve extends ValveBase {
 
     private static final Log log = LogFactory.getLog(StandardHostValve.class);
+    private static final StringManager sm = StringManager.getManager(StandardHostValve.class);
 
     // Saves a call to getClassLoader() on very request. Under high load these
     // calls took just long enough to appear as a hot spot (although a very
     // minor one) in a profiler.
-    private static final ClassLoader MY_CLASSLOADER =
-            StandardHostValve.class.getClassLoader();
+    private static final ClassLoader MY_CLASSLOADER = StandardHostValve.class.getClassLoader();
 
     //------------------------------------------------------ Constructor
+
     public StandardHostValve() {
         super(true);
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * The string manager for this package.
-     */
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-
     // --------------------------------------------------------- Public Methods
 
     /**

==================================================
StandardServer.java
index 7ffcb699f5..6673fed829 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -52,7 +52,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class StandardPipeline extends LifecycleBase implements Pipeline {
 
     private static final Log log = LogFactory.getLog(StandardPipeline.class);
-    private static final StringManager sm = StringManager.getManager(Constants.Package);
+    private static final StringManager sm = StringManager.getManager(StandardPipeline.class);
 
     // ----------------------------------------------------------- Constructors
 

==================================================
StandardService.java
index 6ab79fcf1d..d0ead54c4a 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -71,11 +71,11 @@ import org.apache.tomcat.util.threads.TaskThreadFactory;
 public final class StandardServer extends LifecycleMBeanBase implements Server {
 
     private static final Log log = LogFactory.getLog(StandardServer.class);
+    private static final StringManager sm = StringManager.getManager(StandardServer.class);
 
 
     // ------------------------------------------------------------ Constructor
 
-
     /**
      * Construct a default instance of this class.
      */
@@ -150,13 +150,6 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     private String shutdown = "SHUTDOWN";
 
 
-    /**
-     * The string manager for this package.
-     */
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-
     /**
      * The property change support for this component.
      */

==================================================
StandardThreadExecutor.java
index 6a58e49f1c..bdeb13eb1c 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -51,6 +51,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class StandardService extends LifecycleMBeanBase implements Service {
 
     private static final Log log = LogFactory.getLog(StandardService.class);
+    private static final StringManager sm = StringManager.getManager(StandardService.class);
 
 
     // ----------------------------------------------------- Instance Variables
@@ -61,12 +62,6 @@ public class StandardService extends LifecycleMBeanBase implements Service {
     private String name = null;
 
 
-    /**
-     * The string manager for this package.
-     */
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
     /**
      * The <code>Server</code> that owns this Service, if any.
      */

==================================================
StandardWrapperValve.java
index 0141503411..2c714efedc 100644
--- a/java/org/apache/catalina/core/StandardThreadExecutor.java
+++ b/java/org/apache/catalina/core/StandardThreadExecutor.java
@@ -31,8 +31,7 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 public class StandardThreadExecutor extends LifecycleMBeanBase
         implements Executor, ResizableExecutor {
 
-    protected static final StringManager sm =
-            StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(StandardThreadExecutor.class);
 
     // ---------------------------------------------- Properties
     /**

==================================================
ThreadLocalLeakPreventionListener.java
index dbdef690a0..bc7e067837 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -47,16 +47,19 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @author Craig R. McClanahan
  */
-final class StandardWrapperValve
-    extends ValveBase {
+final class StandardWrapperValve extends ValveBase {
+
+    private static final StringManager sm = StringManager.getManager(StandardWrapperValve.class);
+
 
     //------------------------------------------------------ Constructor
+
     public StandardWrapperValve() {
         super(true);
     }
 
-    // ----------------------------------------------------- Instance Variables
 
+    // ----------------------------------------------------- Instance Variables
 
     // Some JMX statistics. This valve is associated with a StandardWrapper.
     // We expose the StandardWrapper as JMX ( j2eeType=Servlet ). The fields
@@ -68,16 +71,8 @@ final class StandardWrapperValve
     private final AtomicInteger errorCount = new AtomicInteger(0);
 
 
-    /**
-     * The string manager for this package.
-     */
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-
     // --------------------------------------------------------- Public Methods
 
-
     /**
      * Invoke the servlet we are managing, respecting the rules regarding
      * servlet lifecycle and SingleThreadModel support.

==================================================
