eff9aca497cbbb65d89503a019b0e729683b50a8
==================================================
Whitespace removal from /java/javax
==================================================
Mark Emlyn
==================================================
Sat Oct 22 20:54:57 2011 +0000
==================================================
Generated.java
Whitespace removal from /java/javax

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187778 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PostConstruct.java
index d4721db26a..5d6bc72d41 100644
--- a/java/javax/annotation/Generated.java
+++ b/java/javax/annotation/Generated.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -23,8 +23,8 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-@Target({ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, 
-    ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.METHOD, 
+@Target({ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR,
+    ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.METHOD,
     ElementType.PACKAGE, ElementType.PARAMETER, ElementType.TYPE})
 @Retention(RetentionPolicy.SOURCE)
 

==================================================
PreDestroy.java
index 8ad363af3c..52be88b1ce 100644
--- a/java/javax/annotation/PostConstruct.java
+++ b/java/javax/annotation/PostConstruct.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Resource.java
index d5be75a272..a7230db174 100644
--- a/java/javax/annotation/PreDestroy.java
+++ b/java/javax/annotation/PreDestroy.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Resources.java
index 21a5d8b3fb..3bfa46d1fb 100644
--- a/java/javax/annotation/Resource.java
+++ b/java/javax/annotation/Resource.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
DeclareRoles.java
index 4b398f2aff..f4ff5d10d3 100644
--- a/java/javax/annotation/Resources.java
+++ b/java/javax/annotation/Resources.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
DenyAll.java
index d5d214aee5..46fa490568 100644
--- a/java/javax/annotation/security/DeclareRoles.java
+++ b/java/javax/annotation/security/DeclareRoles.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
PermitAll.java
index 6fdf829714..f237d50f67 100644
--- a/java/javax/annotation/security/DenyAll.java
+++ b/java/javax/annotation/security/DenyAll.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
RolesAllowed.java
index dfe3aa5924..7297868e11 100644
--- a/java/javax/annotation/security/PermitAll.java
+++ b/java/javax/annotation/security/PermitAll.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
RunAs.java
index fced7619a3..a99a98df5e 100644
--- a/java/javax/annotation/security/RolesAllowed.java
+++ b/java/javax/annotation/security/RolesAllowed.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
EJB.java
index 3920d7c601..eeae720323 100644
--- a/java/javax/annotation/security/RunAs.java
+++ b/java/javax/annotation/security/RunAs.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
EJBs.java
index 85233ed13a..f9e98dfde1 100644
--- a/java/javax/ejb/EJB.java
+++ b/java/javax/ejb/EJB.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ArrayELResolver.java
index 3f752f9f57..a394464e9f 100644
--- a/java/javax/ejb/EJBs.java
+++ b/java/javax/ejb/EJBs.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
BeanELResolver.java
index a319d60e02..15a160f96e 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
CompositeELResolver.java
index 307ba620e9..74f089cb25 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -230,7 +230,7 @@ public class BeanELResolver extends ELResolver {
         public BeanProperty getBeanProperty(String name) {
             return get(null, name);
         }
-        
+
         private Class<?> getType() {
             return type;
         }
@@ -342,19 +342,19 @@ public class BeanELResolver extends ELResolver {
         }
         return null;
     }
-    
+
     private static final class ConcurrentCache<K,V> {
 
         private final int size;
         private final Map<K,V> eden;
         private final Map<K,V> longterm;
-        
+
         public ConcurrentCache(int size) {
             this.size = size;
             this.eden = new ConcurrentHashMap<K,V>(size);
             this.longterm = new WeakHashMap<K,V>(size);
         }
-        
+
         public V get(K key) {
             V value = this.eden.get(key);
             if (value == null) {
@@ -367,7 +367,7 @@ public class BeanELResolver extends ELResolver {
             }
             return value;
         }
-        
+
         public void put(K key, V value) {
             if (this.eden.size() >= this.size) {
                 synchronized (longterm) {
@@ -379,7 +379,7 @@ public class BeanELResolver extends ELResolver {
         }
 
     }
-    
+
     /**
      * @since EL 2.2
      */
@@ -394,9 +394,9 @@ public class BeanELResolver extends ELResolver {
         }
 
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        
+
         String methodName = (String) factory.coerceToType(method, String.class);
-        
+
         // Find the matching method
         Method matchingMethod = null;
         Class<?> clazz = base.getClass();
@@ -475,7 +475,7 @@ public class BeanELResolver extends ELResolver {
         } catch (InvocationTargetException e) {
             throw new ELException(e.getCause());
         }
-        
+
         context.setPropertyResolved(true);
         return result;
     }

==================================================
ELContext.java
index 7d9ed11bb5..e37b5c3eff 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/javax/el/CompositeELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,7 +30,7 @@ public class CompositeELResolver extends ELResolver {
             clazz =
                 Class.forName("javax.servlet.jsp.el.ScopedAttributeELResolver");
         } catch (ClassNotFoundException e) {
-            // Ignore. This is expected if using the EL stand-alone 
+            // Ignore. This is expected if using the EL stand-alone
         }
         SCOPED_ATTRIBUTE_EL_RESOLVER = clazz;
     }
@@ -193,7 +193,7 @@ public class CompositeELResolver extends ELResolver {
             this.idx = 0;
             this.guaranteeIterator();
         }
-        
+
         private void guaranteeIterator() {
             while (this.itr == null && this.idx < this.size) {
                 this.itr = this.resolvers[this.idx].getFeatureDescriptors(
@@ -203,7 +203,7 @@ public class CompositeELResolver extends ELResolver {
         }
 
         @Override
-        public boolean hasNext() {          
+        public boolean hasNext() {
             if (this.next != null)
                 return true;
             if (this.itr != null){

==================================================
ELContextEvent.java
index 1cdf5c7787..0b0af42e59 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,18 +27,18 @@ import java.util.Map;
 public abstract class ELContext {
 
     private Locale locale;
-    
+
     private Map<Class<?>, Object> map;
-    
+
     private boolean resolved;
-    
+
     /**
-     * 
+     *
      */
     public ELContext() {
         this.resolved = false;
     }
-    
+
     // Can't use Class<?> because API needs to match specification
     public Object getContext(@SuppressWarnings("rawtypes") Class key) {
         if (this.map == null) {
@@ -46,39 +46,39 @@ public abstract class ELContext {
         }
         return this.map.get(key);
     }
-    
+
     // Can't use Class<?> because API needs to match specification
     public void putContext(@SuppressWarnings("rawtypes") Class key,
             Object contextObject) throws NullPointerException {
         if (key == null || contextObject == null) {
             throw new NullPointerException();
         }
-        
+
         if (this.map == null) {
             this.map = new HashMap<Class<?>, Object>();
         }
-        
+
         this.map.put(key, contextObject);
     }
-    
+
     public void setPropertyResolved(boolean resolved) {
         this.resolved = resolved;
     }
-    
+
     public boolean isPropertyResolved() {
         return this.resolved;
     }
-    
+
     public abstract ELResolver getELResolver();
 
     public abstract FunctionMapper getFunctionMapper();
-    
+
     public abstract VariableMapper getVariableMapper();
-    
+
     public Locale getLocale() {
         return this.locale;
     }
-    
+
     public void setLocale(Locale locale) {
         this.locale = locale;
     }

==================================================
ELContextListener.java
index a6675256f6..e2e9ee5e18 100644
--- a/java/javax/el/ELContextEvent.java
+++ b/java/javax/el/ELContextEvent.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -32,7 +32,7 @@ public class ELContextEvent extends EventObject {
     public ELContextEvent(ELContext source) {
         super(source);
     }
-    
+
     public ELContext getELContext() {
         return (ELContext) this.getSource();
     }

==================================================
ELException.java
index a21038b81c..f8701f85c6 100644
--- a/java/javax/el/ELContextListener.java
+++ b/java/javax/el/ELContextListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -22,7 +22,7 @@ package javax.el;
  *
  */
 public interface ELContextListener extends java.util.EventListener {
-    
+
     public void contextCreated(ELContextEvent event);
 
 }

==================================================
ELResolver.java
index 22efff7273..c569478845 100644
--- a/java/javax/el/ELException.java
+++ b/java/javax/el/ELException.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -20,7 +20,7 @@ package javax.el;
 /**
  * Represents any of the exception conditions that can arise during expression
  * evaluation.
- * 
+ *
  * @since 2.1
  */
 public class ELException extends RuntimeException {
@@ -36,7 +36,7 @@ public class ELException extends RuntimeException {
 
     /**
      * Creates an ELException with the provided detail message.
-     * 
+     *
      * @param message
      *            the detail message
      */
@@ -46,7 +46,7 @@ public class ELException extends RuntimeException {
 
     /**
      * Creates an ELException with the given detail message and root cause.
-     * 
+     *
      * @param message
      *            the detail message
      * @param cause
@@ -58,7 +58,7 @@ public class ELException extends RuntimeException {
 
     /**
      * Creates an ELException with the given cause
-     * 
+     *
      * @param cause
      *            the originating cause of this exception
      */

==================================================
Expression.java
index 4c905039f0..dcdc8c93b3 100644
--- a/java/javax/el/ELResolver.java
+++ b/java/javax/el/ELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,7 +28,7 @@ import java.util.ResourceBundle;
  *
  */
 public abstract class ELResolver {
-    
+
     static String message(ELContext context, String name, Object[] props) {
         Locale locale = context.getLocale();
         if (locale == null) {
@@ -52,21 +52,21 @@ public abstract class ELResolver {
     }
 
     public static final String RESOLVABLE_AT_DESIGN_TIME = "resolvableAtDesignTime";
-    
+
     public static final String TYPE = "type";
-    
+
     public abstract Object getValue(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;
-    
+
     public abstract Class<?> getType(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;
-    
+
     public abstract void setValue(ELContext context, Object base, Object property, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException;
 
     public abstract boolean isReadOnly(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;
-    
+
     public abstract Iterator<java.beans.FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base);
-    
+
     public abstract Class<?> getCommonPropertyType(ELContext context, Object base);
-    
+
     /**
      * @since EL 2.2
      */

==================================================
ExpressionFactory.java
index 40fbd57069..5c94d229fb 100644
--- a/java/javax/el/Expression.java
+++ b/java/javax/el/Expression.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -31,9 +31,9 @@ public abstract class Expression implements Serializable {
 
     @Override
     public abstract int hashCode();
-    
+
     public abstract String getExpressionString();
-    
+
     public abstract boolean isLiteralText();
 
 }

==================================================
FunctionMapper.java
index 7f4a2401e1..d5ca71d4f8 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -32,11 +32,11 @@ import java.security.PrivilegedAction;
 import java.util.Properties;
 
 /**
- * 
+ *
  * @since 2.1
  */
 public abstract class ExpressionFactory {
-    
+
     private static final boolean IS_SECURITY_ENABLED =
         (System.getSecurityManager() != null);
 
@@ -110,14 +110,14 @@ public abstract class ExpressionFactory {
     /**
      * Create a new {@link ExpressionFactory} passing in the provided
      * {@link Properties}. Search order is the same as {@link #newInstance()}.
-     * 
+     *
      * @param properties the properties to be passed to the new instance (may be null)
      * @return the new ExpressionFactory
      */
     public static ExpressionFactory newInstance(Properties properties) {
         String className = null;
         ExpressionFactory result = null;
-        
+
         ClassLoader tccl = Thread.currentThread().getContextClassLoader();
 
         // First services API
@@ -148,7 +148,7 @@ public abstract class ExpressionFactory {
                         }
                 );
             } else {
-                // Third system property 
+                // Third system property
                 className = getClassNameSysProp();
             }
         }
@@ -156,7 +156,7 @@ public abstract class ExpressionFactory {
             // Fourth - default
             className = "org.apache.el.ExpressionFactoryImpl";
         }
-        
+
         try {
             Class<?> clazz = null;
             if (tccl == null) {
@@ -182,7 +182,7 @@ public abstract class ExpressionFactory {
                 result =
                     (ExpressionFactory) constructor.newInstance(properties);
             }
-            
+
         } catch (ClassNotFoundException e) {
             throw new ELException(
                     "Unable to find ExpressionFactory of type: " + className,
@@ -204,13 +204,13 @@ public abstract class ExpressionFactory {
                     "Unable to create ExpressionFactory of type: " + className,
                     e);
         }
-        
+
         return result;
     }
-    
+
     private static String getClassNameServices(ClassLoader tccl) {
         InputStream is = null;
-        
+
         if (tccl == null) {
             is = ClassLoader.getSystemResourceAsStream(SERVICE_RESOURCE_NAME);
         } else {
@@ -243,10 +243,10 @@ public abstract class ExpressionFactory {
                 } catch (IOException ioe) {/*Ignore*/}
             }
         }
-        
+
         return null;
     }
-    
+
     private static String getClassNameJreDir() {
         File file = new File(PROPERTY_FILE);
         if (file.canRead()) {
@@ -275,7 +275,7 @@ public abstract class ExpressionFactory {
         }
         return null;
     }
-    
+
     private static final String getClassNameSysProp() {
         String value = System.getProperty(PROPERTY_NAME);
         if (value != null && value.trim().length() > 0) {

==================================================
ListELResolver.java
index 666a76cc42..edf24e28e1 100644
--- a/java/javax/el/FunctionMapper.java
+++ b/java/javax/el/FunctionMapper.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,5 +25,5 @@ import java.lang.reflect.Method;
 public abstract class FunctionMapper {
 
     public abstract Method resolveFunction(String prefix, String localName);
-    
+
 }

==================================================
MapELResolver.java
index bc63932a49..18a7adf691 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
MethodExpression.java
index 118301e667..a1fc543866 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -51,7 +51,7 @@ public class MapELResolver extends ELResolver {
             context.setPropertyResolved(true);
             return ((Map<?,?>) base).get(property);
         }
-        
+
         return null;
     }
 
@@ -66,7 +66,7 @@ public class MapELResolver extends ELResolver {
             context.setPropertyResolved(true);
             return Object.class;
         }
-        
+
         return null;
     }
 
@@ -109,7 +109,7 @@ public class MapELResolver extends ELResolver {
             context.setPropertyResolved(true);
             return this.readOnly || UNMODIFIABLE.equals(base.getClass());
         }
-        
+
         return this.readOnly;
     }
 

==================================================
MethodInfo.java
index 6835a41e8a..fcfbaa11c9 100644
--- a/java/javax/el/MethodExpression.java
+++ b/java/javax/el/MethodExpression.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,12 +25,12 @@ public abstract class MethodExpression extends Expression {
     private static final long serialVersionUID = 8163925562047324656L;
 
     public abstract MethodInfo getMethodInfo(ELContext context) throws NullPointerException, PropertyNotFoundException, MethodNotFoundException, ELException;
-    
+
     public abstract Object invoke(ELContext context, Object[] params) throws NullPointerException, PropertyNotFoundException, MethodNotFoundException, ELException;
-    
+
     /**
      * @since EL 2.2
-     * 
+     *
      * Note: The spelling mistake is deliberate.
      * isParmetersProvided()  - Specification definition
      * isParametersProvided() - Corrected spelling

==================================================
MethodNotFoundException.java
index 8047e259cb..dff61f7972 100644
--- a/java/javax/el/MethodInfo.java
+++ b/java/javax/el/MethodInfo.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -23,28 +23,28 @@ package javax.el;
 public class MethodInfo {
 
     private final String name;
-    
+
     private final Class<?>[] paramTypes;
-    
+
     private final Class<?> returnType;
-    
+
     /**
-     * 
+     *
      */
     public MethodInfo(String name, Class<?> returnType, Class<?>[] paramTypes) {
         this.name = name;
         this.returnType = returnType;
         this.paramTypes = paramTypes;
     }
-    
+
     public String getName() {
         return this.name;
     }
-    
+
     public Class<?>[] getParamTypes() {
         return this.paramTypes;
     }
-    
+
     public Class<?> getReturnType() {
         return this.returnType;
     }

==================================================
PropertyNotFoundException.java
index be0968133f..8d4a835816 100644
--- a/java/javax/el/MethodNotFoundException.java
+++ b/java/javax/el/MethodNotFoundException.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ public class MethodNotFoundException extends ELException {
     private static final long serialVersionUID = -3631968116081480328L;
 
     /**
-     * 
+     *
      */
     public MethodNotFoundException() {
         super();

==================================================
PropertyNotWritableException.java
index e19127a370..28b7f94f4f 100644
--- a/java/javax/el/PropertyNotFoundException.java
+++ b/java/javax/el/PropertyNotFoundException.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ public class PropertyNotFoundException extends ELException {
     private static final long serialVersionUID = -3799200961303506745L;
 
     /**
-     * 
+     *
      */
     public PropertyNotFoundException() {
         super();

==================================================
ResourceBundleELResolver.java
index 6beddb7bf2..fc9f64411c 100644
--- a/java/javax/el/PropertyNotWritableException.java
+++ b/java/javax/el/PropertyNotWritableException.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ public class PropertyNotWritableException extends ELException {
     private static final long serialVersionUID = 827987155471214717L;
 
     /**
-     * 
+     *
      */
     public PropertyNotWritableException() {
         super();

==================================================
ValueExpression.java
index f10ae4134a..aa8289c21d 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -37,7 +37,7 @@ public class ResourceBundleELResolver extends ELResolver {
         if (context == null) {
             throw new NullPointerException();
         }
-        
+
         if (base instanceof ResourceBundle) {
             if (property != null) {
                 try {
@@ -60,11 +60,11 @@ public class ResourceBundleELResolver extends ELResolver {
         if (context == null) {
             throw new NullPointerException();
         }
-        
+
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(true);
         }
-        
+
         return null;
     }
 
@@ -76,7 +76,7 @@ public class ResourceBundleELResolver extends ELResolver {
         if (context == null) {
             throw new NullPointerException();
         }
-        
+
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(true);
             throw new PropertyNotWritableException(message(context,
@@ -91,18 +91,18 @@ public class ResourceBundleELResolver extends ELResolver {
         if (context == null) {
             throw new NullPointerException();
         }
-        
+
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(true);
         }
-        
+
         return true;
     }
 
     @Override
     // Can't use Iterator<FeatureDescriptor> because API needs to match
     // specification
-    @SuppressWarnings({ "unchecked", "rawtypes" }) 
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public Iterator getFeatureDescriptors(
             ELContext context, Object base) {
         if (base instanceof ResourceBundle) {

==================================================
ValueReference.java
index ad785485fc..0c34122fe5 100644
--- a/java/javax/el/ValueExpression.java
+++ b/java/javax/el/ValueExpression.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,13 +25,13 @@ public abstract class ValueExpression extends Expression {
     private static final long serialVersionUID = 8577809572381654673L;
 
     public abstract Class<?> getExpectedType();
-    
+
     public abstract Class<?> getType(ELContext context) throws NullPointerException, PropertyNotFoundException, ELException;
-    
+
     public abstract boolean isReadOnly(ELContext context) throws NullPointerException, PropertyNotFoundException, ELException;
-    
+
     public abstract void setValue(ELContext context, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException;
-    
+
     public abstract Object getValue(ELContext context) throws NullPointerException, PropertyNotFoundException, ELException;
 
     /**

==================================================
VariableMapper.java
index 61807fec3a..0c7f3eba51 100644
--- a/java/javax/el/ValueReference.java
+++ b/java/javax/el/ValueReference.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,10 +25,10 @@ import java.io.Serializable;
 public class ValueReference implements Serializable {
 
     private static final long serialVersionUID = 1L;
-    
+
     private final Object base;
     private final Object property;
-    
+
     public ValueReference(Object base, Object property) {
         this.base = base;
         this.property = property;
@@ -37,7 +37,7 @@ public class ValueReference implements Serializable {
     public Object getBase() {
         return base;
     }
-    
+
     public Object getProperty() {
         return property;
     }

==================================================
PersistenceContext.java
index 84c3682230..4577e3839d 100644
--- a/java/javax/el/VariableMapper.java
+++ b/java/javax/el/VariableMapper.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -23,6 +23,6 @@ package javax.el;
 public abstract class VariableMapper {
 
     public abstract ValueExpression resolveVariable(String variable);
-    
+
     public abstract ValueExpression setVariable(String variable, ValueExpression expression);
 }

==================================================
PersistenceContextType.java
index e8417e2c78..ee4b79b26c 100644
--- a/java/javax/persistence/PersistenceContext.java
+++ b/java/javax/persistence/PersistenceContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
PersistenceContexts.java
index 500c692bae..8b287fe5c4 100644
--- a/java/javax/persistence/PersistenceContextType.java
+++ b/java/javax/persistence/PersistenceContextType.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
PersistenceUnit.java
index d451f24899..e43a2ddddd 100644
--- a/java/javax/persistence/PersistenceContexts.java
+++ b/java/javax/persistence/PersistenceContexts.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
PersistenceUnits.java
index e42a3b2600..9f341987db 100644
--- a/java/javax/persistence/PersistenceUnit.java
+++ b/java/javax/persistence/PersistenceUnit.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
AsyncContext.java
index 3f5184566b..e98e5c8e90 100644
--- a/java/javax/persistence/PersistenceUnits.java
+++ b/java/javax/persistence/PersistenceUnits.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
AsyncEvent.java
index f965f4adf9..4203a4f60b 100644
--- a/java/javax/servlet/AsyncContext.java
+++ b/java/javax/servlet/AsyncContext.java
@@ -32,51 +32,51 @@ public interface AsyncContext {
         "javax.servlet.async.servlet_path";
     public static final String ASYNC_QUERY_STRING =
         "javax.servlet.async.query_string";
-    
+
     ServletRequest getRequest();
-    
+
     ServletResponse getResponse();
-    
+
     boolean hasOriginalRequestAndResponse();
-    
+
     /**
-     * 
+     *
      * @throws IllegalStateException
      */
     void dispatch();
-    
+
     /**
-     * 
+     *
      * @param path
      * @throws IllegalStateException
      */
     void dispatch(String path);
-    
+
     /**
-     * 
+     *
      * @param context
      * @param path
      * @throws IllegalStateException
      */
     void dispatch(ServletContext context, String path);
-    
+
     void complete();
-    
+
     void start(Runnable run);
-    
+
     void addListener(AsyncListener listener);
-    
+
     void addListener(AsyncListener listener, ServletRequest request,
             ServletResponse response);
-    
+
     <T extends AsyncListener> T createListener(Class<T> clazz)
     throws ServletException;
-    
+
     /**
      * Get timeout in milliseconds. 0 or less indicates no timeout.
      */
     long getTimeout();
-    
+
     /**
      * Set timeout in milliseconds. 0 or less indicates no timeout.
      */

==================================================
Filter.java
index 69112935c6..4b0f0b3800 100644
--- a/java/javax/servlet/AsyncEvent.java
+++ b/java/javax/servlet/AsyncEvent.java
@@ -25,7 +25,7 @@ public class AsyncEvent {
     private final ServletRequest request;
     private final ServletResponse response;
     private final Throwable throwable;
-    
+
     public AsyncEvent(AsyncContext context) {
         this.context = context;
         this.request = null;
@@ -40,7 +40,7 @@ public class AsyncEvent {
         this.response = response;
         this.throwable = null;
     }
-    
+
     public AsyncEvent(AsyncContext context, Throwable throwable) {
         this.context = context;
         this.throwable = throwable;
@@ -55,7 +55,7 @@ public class AsyncEvent {
         this.response = response;
         this.throwable = throwable;
     }
-    
+
     public AsyncContext getAsyncContext() {
         return context;
     }
@@ -63,11 +63,11 @@ public class AsyncEvent {
     public ServletRequest getSuppliedRequest() {
         return request;
     }
-    
+
     public ServletResponse getSuppliedResponse() {
         return response;
     }
-    
+
     public Throwable getThrowable() {
         return throwable;
     }

==================================================
FilterChain.java
index d29f07a4b1..b36b37d8ce 100644
--- a/java/javax/servlet/Filter.java
+++ b/java/javax/servlet/Filter.java
@@ -40,7 +40,7 @@ import java.io.IOException;
  * 7) Filters that trigger resource access events <br>
  * 8) XSL/T filters <br>
  * 9) Mime-type chain Filter <br>
- * 
+ *
  * @since Servlet 2.3
  */
 public interface Filter {
@@ -89,7 +89,7 @@ public interface Filter {
      * passed. After the web container calls this method, it will not call the
      * doFilter method again on this instance of the filter. <br>
      * <br>
-     * 
+     *
      * This method gives the filter an opportunity to clean up any resources
      * that are being held (for example, memory, file handles, threads) and make
      * sure that any persistent state is synchronized with the filter's current

==================================================
FilterConfig.java
index 13c19fe3f7..cdc5206ade 100644
--- a/java/javax/servlet/FilterChain.java
+++ b/java/javax/servlet/FilterChain.java
@@ -24,7 +24,7 @@ import java.io.IOException;
  * Filters use the FilterChain to invoke the next filter in the chain, or if the
  * calling filter is the last filter in the chain, to invoke the resource at the
  * end of the chain.
- * 
+ *
  * @see Filter
  * @since Servlet 2.3
  **/
@@ -35,12 +35,12 @@ public interface FilterChain {
      * Causes the next filter in the chain to be invoked, or if the calling
      * filter is the last filter in the chain, causes the resource at the end of
      * the chain to be invoked.
-     * 
+     *
      * @param request
      *            the request to pass along the chain.
      * @param response
      *            the response to pass along the chain.
-     * 
+     *
      * @since 2.3
      */
     public void doFilter(ServletRequest request, ServletResponse response)

==================================================
FilterRegistration.java
index 30bba6480d..4a0a65b64f 100644
--- a/java/javax/servlet/FilterConfig.java
+++ b/java/javax/servlet/FilterConfig.java
@@ -20,10 +20,10 @@ package javax.servlet;
 import java.util.Enumeration;
 
 /**
- * 
+ *
  * A filter configuration object used by a servlet container to pass information
  * to a filter during initialization.
- * 
+ *
  * @see Filter
  * @since Servlet 2.3
  */
@@ -38,10 +38,10 @@ public interface FilterConfig {
     /**
      * Returns a reference to the {@link ServletContext} in which the caller is
      * executing.
-     * 
+     *
      * @return {@link ServletContext} object, used by the caller to interact
      *         with its servlet container
-     * 
+     *
      * @see ServletContext
      */
     public ServletContext getServletContext();
@@ -50,11 +50,11 @@ public interface FilterConfig {
      * Returns a <code>String</code> containing the value of the named
      * initialization parameter, or <code>null</code> if the parameter does not
      * exist.
-     * 
+     *
      * @param name
      *            <code>String</code> specifying the name of the initialization
      *            parameter
-     * 
+     *
      * @return <code>String</code> containing the value of the initialization
      *         parameter
      */
@@ -64,7 +64,7 @@ public interface FilterConfig {
      * Returns the names of the filter's initialization parameters as an
      * <code>Enumeration</code> of <code>String</code> objects, or an empty
      * <code>Enumeration</code> if the filter has no initialization parameters.
-     * 
+     *
      * @return <code>Enumeration</code> of <code>String</code> objects
      *         containing the names of the filter's initialization parameters
      */

==================================================
GenericServlet.java
index cce12d65d6..52d9596727 100644
--- a/java/javax/servlet/FilterRegistration.java
+++ b/java/javax/servlet/FilterRegistration.java
@@ -24,9 +24,9 @@ import java.util.EnumSet;
  * TODO SERVLET3 - Add comments
  */
 public interface FilterRegistration extends Registration {
-    
+
     /**
-     * 
+     *
      * @param dispatcherTypes
      * @param isMatchAfter
      * @param servletNames
@@ -37,13 +37,13 @@ public interface FilterRegistration extends Registration {
             EnumSet<DispatcherType> dispatcherTypes,
             boolean isMatchAfter, String... servletNames);
     /**
-     * 
+     *
      * @return TODO
      */
     public Collection<String> getServletNameMappings();
-    
+
     /**
-     * 
+     *
      * @param dispatcherTypes
      * @param isMatchAfter
      * @param urlPatterns
@@ -55,11 +55,11 @@ public interface FilterRegistration extends Registration {
             boolean isMatchAfter, String... urlPatterns);
 
     /**
-     * 
+     *
      * @return TODO
      */
     public Collection<String> getUrlPatternMappings();
-    
+
     public static interface Dynamic
     extends FilterRegistration, Registration.Dynamic {
         // No additional methods

==================================================
HttpConstraintElement.java
index d3bb2d3ee4..5d9be55bd7 100644
--- a/java/javax/servlet/GenericServlet.java
+++ b/java/javax/servlet/GenericServlet.java
@@ -36,7 +36,7 @@ import java.util.Enumeration;
  * <p>
  * To write a generic servlet, you need only override the abstract
  * <code>service</code> method.
- * 
+ *
  * @version $Version$
  */
 public abstract class GenericServlet implements Servlet, ServletConfig,
@@ -70,7 +70,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * <p>
      * This method is supplied for convenience. It gets the value of the named
      * parameter from the servlet's <code>ServletConfig</code> object.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the
      *            initialization parameter
@@ -90,7 +90,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * <p>
      * This method is supplied for convenience. It gets the parameter names from
      * the servlet's <code>ServletConfig</code> object.
-     * 
+     *
      * @return Enumeration an enumeration of <code>String</code> objects
      *         containing the names of the servlet's initialization parameters
      */
@@ -101,7 +101,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
 
     /**
      * Returns this servlet's {@link ServletConfig} object.
-     * 
+     *
      * @return ServletConfig the <code>ServletConfig</code> object that
      *         initialized this servlet
      */
@@ -116,7 +116,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * <p>
      * This method is supplied for convenience. It gets the context from the
      * servlet's <code>ServletConfig</code> object.
-     * 
+     *
      * @return ServletContext the <code>ServletContext</code> object passed to
      *         this servlet by the <code>init</code> method
      */
@@ -130,7 +130,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * copyright. By default, this method returns an empty string. Override this
      * method to have it return a meaningful value. See
      * {@link Servlet#getServletInfo}.
-     * 
+     *
      * @return String information about this servlet, by default an empty string
      */
     @Override
@@ -145,7 +145,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * This implementation stores the {@link ServletConfig} object it receives
      * from the servlet container for later use. When overriding this form of
      * the method, call <code>super.init(config)</code>.
-     * 
+     *
      * @param config
      *            the <code>ServletConfig</code> object that contains
      *            configuration information for this servlet
@@ -169,7 +169,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * <code>GenericServlet.init(ServletConfig config)</code>. The
      * <code>ServletConfig</code> object can still be retrieved via
      * {@link #getServletConfig}.
-     * 
+     *
      * @exception ServletException
      *                if an exception occurs that interrupts the servlet's
      *                normal operation
@@ -181,7 +181,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     /**
      * Writes the specified message to a servlet log file, prepended by the
      * servlet's name. See {@link ServletContext#log(String)}.
-     * 
+     *
      * @param msg
      *            a <code>String</code> specifying the message to be written to
      *            the log file
@@ -194,7 +194,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * Writes an explanatory message and a stack trace for a given
      * <code>Throwable</code> exception to the servlet log file, prepended by
      * the servlet's name. See {@link ServletContext#log(String, Throwable)}.
-     * 
+     *
      * @param message
      *            a <code>String</code> that describes the error or exception
      * @param t
@@ -210,7 +210,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * <p>
      * This method is declared abstract so subclasses, such as
      * <code>HttpServlet</code>, must override it.
-     * 
+     *
      * @param req
      *            the <code>ServletRequest</code> object that contains the
      *            client's request
@@ -230,7 +230,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     /**
      * Returns the name of this servlet instance. See
      * {@link ServletConfig#getServletName}.
-     * 
+     *
      * @return the name of this servlet instance
      */
     @Override

==================================================
HttpMethodConstraintElement.java
index 1a0fd84451..c7a4f93f14 100644
--- a/java/javax/servlet/HttpConstraintElement.java
+++ b/java/javax/servlet/HttpConstraintElement.java
@@ -26,7 +26,7 @@ import javax.servlet.annotation.ServletSecurity.TransportGuarantee;
  * TODO SERVLET3 - Add comments
  */
 public class HttpConstraintElement {
-    
+
     private static final String LSTRING_FILE = "javax.servlet.LocalStrings";
     private static final ResourceBundle lStrings =
         ResourceBundle.getBundle(LSTRING_FILE);
@@ -34,7 +34,7 @@ public class HttpConstraintElement {
     private final EmptyRoleSemantic emptyRoleSemantic;// = EmptyRoleSemantic.PERMIT;
     private final TransportGuarantee transportGuarantee;// = TransportGuarantee.NONE;
     private final String[] rolesAllowed;// = new String[0];
-    
+
     /**
      * Default constraint is permit with no transport guarantee.
      */
@@ -44,17 +44,17 @@ public class HttpConstraintElement {
         this.transportGuarantee = TransportGuarantee.NONE;
         this.rolesAllowed = new String[0];
     }
-    
+
     /**
      * Convenience constructor for {@link EmptyRoleSemantic#DENY}.
-     * 
+     *
      */
     public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic) {
         this.emptyRoleSemantic = emptyRoleSemantic;
         this.transportGuarantee = TransportGuarantee.NONE;
         this.rolesAllowed = new String[0];
     }
-    
+
     /**
      * Convenience constructor to specify transport guarantee and/or roles.
      */
@@ -66,7 +66,7 @@ public class HttpConstraintElement {
     }
 
     /**
-     * 
+     *
      * @param emptyRoleSemantic
      * @param transportGuarantee
      * @param rolesAllowed
@@ -83,15 +83,15 @@ public class HttpConstraintElement {
         this.transportGuarantee = transportGuarantee;
         this.rolesAllowed = rolesAllowed;
     }
-    
+
     public EmptyRoleSemantic getEmptyRoleSemantic() {
         return emptyRoleSemantic;
     }
-    
+
     public TransportGuarantee getTransportGuarantee() {
         return transportGuarantee;
     }
-    
+
     public String[] getRolesAllowed() {
         return rolesAllowed;
     }

==================================================
MultipartConfigElement.java
index aea2575896..05f75eccb6 100644
--- a/java/javax/servlet/LocalStrings_fr.properties
+++ b/java/javax/servlet/LocalStrings_fr.properties
@@ -18,6 +18,6 @@
 
 err.not_iso8859_1={0} n''est pas un caract\u00e8re ISO 8859-1
 value.true=true
-value.false=false 
+value.false=false
 
 

==================================================
Registration.java
index e7b3e4b96c..39b9f8b54b 100644
--- a/java/javax/servlet/MultipartConfigElement.java
+++ b/java/javax/servlet/MultipartConfigElement.java
@@ -23,12 +23,12 @@ import javax.servlet.annotation.MultipartConfig;
  * TODO SERVLET3 - Add comments
  */
 public class MultipartConfigElement {
-    
+
     private final String location;// = "";
     private final long maxFileSize;// = -1;
     private final long maxRequestSize;// = -1;
     private final int fileSizeThreshold;// = 0;
-    
+
     public MultipartConfigElement(String location) {
         // Keep empty string default if location is null
         if (location != null) {
@@ -40,7 +40,7 @@ public class MultipartConfigElement {
         this.maxRequestSize = -1;
         this.fileSizeThreshold = 0;
     }
-    
+
     public MultipartConfigElement(String location, long maxFileSize,
             long maxRequestSize, int fileSizeThreshold) {
         // Keep empty string default if location is null
@@ -53,26 +53,26 @@ public class MultipartConfigElement {
         this.maxRequestSize = maxRequestSize;
         this.fileSizeThreshold = fileSizeThreshold;
     }
-    
+
     public MultipartConfigElement(MultipartConfig annotation) {
         location = annotation.location();
         maxFileSize = annotation.maxFileSize();
         maxRequestSize = annotation.maxRequestSize();
         fileSizeThreshold = annotation.fileSizeThreshold();
     }
-    
+
     public String getLocation() {
         return location;
     }
-    
+
     public long getMaxFileSize() {
         return maxFileSize;
     }
-    
+
     public long getMaxRequestSize() {
         return maxRequestSize;
     }
-    
+
     public int getFileSizeThreshold() {
         return fileSizeThreshold;
     }

==================================================
RequestDispatcher.java
index 834a08bb54..4230236a21 100644
--- a/java/javax/servlet/Registration.java
+++ b/java/javax/servlet/Registration.java
@@ -25,13 +25,13 @@ import java.util.Set;
  * TODO SERVLET3 - Add comments
  */
 public interface Registration {
-    
+
     public String getName();
-    
+
     public String getClassName();
 
     /**
-     * 
+     *
      * @param name
      * @param value
      * @return TODO
@@ -41,9 +41,9 @@ public interface Registration {
     public boolean setInitParameter(String name, String value);
 
     public String getInitParameter(String name);
-    
+
     /**
-     * 
+     *
      * @param initParameters
      * @return TODO
      * @throws IllegalArgumentException
@@ -54,9 +54,9 @@ public interface Registration {
     public Map<String, String> getInitParameters();
 
     public interface Dynamic extends Registration {
-        
+
         /**
-         * 
+         *
          * @param isAsyncSupported
          * @throws IllegalStateException
          */

==================================================
Servlet.java
index c82693e8eb..0d3feb48b6 100644
--- a/java/javax/servlet/RequestDispatcher.java
+++ b/java/javax/servlet/RequestDispatcher.java
@@ -24,18 +24,18 @@ import java.io.IOException;
  * servlet container creates the <code>RequestDispatcher</code> object, which is
  * used as a wrapper around a server resource located at a particular path or
  * given by a particular name.
- * 
+ *
  * <p>
  * This interface is intended to wrap servlets, but a servlet container can
  * create <code>RequestDispatcher</code> objects to wrap any type of resource.
- * 
+ *
  * @author Various
  * @version $Version$
- * 
+ *
  * @see ServletContext#getRequestDispatcher(java.lang.String)
  * @see ServletContext#getNamedDispatcher(java.lang.String)
  * @see ServletRequest#getRequestDispatcher(java.lang.String)
- * 
+ *
  */
 public interface RequestDispatcher {
 
@@ -61,41 +61,41 @@ public interface RequestDispatcher {
      * or HTML file) on the server. This method allows one servlet to do
      * preliminary processing of a request and another resource to generate the
      * response.
-     * 
+     *
      * <p>
      * For a <code>RequestDispatcher</code> obtained via
      * <code>getRequestDispatcher()</code>, the <code>ServletRequest</code>
      * object has its path elements and parameters adjusted to match the path of
      * the target resource.
-     * 
+     *
      * <p>
      * <code>forward</code> should be called before the response has been
      * committed to the client (before response body output has been flushed).
      * If the response already has been committed, this method throws an
      * <code>IllegalStateException</code>. Uncommitted output in the response
      * buffer is automatically cleared before the forward.
-     * 
+     *
      * <p>
      * The request and response parameters must be either the same objects as
      * were passed to the calling servlet's service method or be subclasses of
      * the {@link ServletRequestWrapper} or {@link ServletResponseWrapper}
      * classes that wrap them.
-     * 
-     * 
+     *
+     *
      * @param request
      *            a {@link ServletRequest} object that represents the request
      *            the client makes of the servlet
-     * 
+     *
      * @param response
      *            a {@link ServletResponse} object that represents the response
      *            the servlet returns to the client
-     * 
+     *
      * @exception ServletException
      *                if the target resource throws this exception
-     * 
+     *
      * @exception IOException
      *                if the target resource throws this exception
-     * 
+     *
      * @exception IllegalStateException
      *                if the response was already committed
      */
@@ -106,30 +106,30 @@ public interface RequestDispatcher {
      * Includes the content of a resource (servlet, JSP page, HTML file) in the
      * response. In essence, this method enables programmatic server-side
      * includes.
-     * 
+     *
      * <p>
      * The {@link ServletResponse} object has its path elements and parameters
      * remain unchanged from the caller's. The included servlet cannot change
      * the response status code or set headers; any attempt to make a change is
      * ignored.
-     * 
+     *
      * <p>
      * The request and response parameters must be either the same objects as
      * were passed to the calling servlet's service method or be subclasses of
      * the {@link ServletRequestWrapper} or {@link ServletResponseWrapper}
      * classes that wrap them.
-     * 
+     *
      * @param request
      *            a {@link ServletRequest} object that contains the client's
      *            request
-     * 
+     *
      * @param response
      *            a {@link ServletResponse} object that contains the servlet's
      *            response
-     * 
+     *
      * @exception ServletException
      *                if the included resource throws this exception
-     * 
+     *
      * @exception IOException
      *                if the included resource throws this exception
      */

==================================================
ServletConfig.java
index 6043d3bb0e..f64d826cd6 100644
--- a/java/javax/servlet/Servlet.java
+++ b/java/javax/servlet/Servlet.java
@@ -21,17 +21,17 @@ import java.io.IOException;
 
 /**
  * Defines methods that all servlets must implement.
- * 
+ *
  * <p>
  * A servlet is a small Java program that runs within a Web server. Servlets
  * receive and respond to requests from Web clients, usually across HTTP, the
  * HyperText Transfer Protocol.
- * 
+ *
  * <p>
  * To implement this interface, you can write a generic servlet that extends
  * <code>javax.servlet.GenericServlet</code> or an HTTP servlet that extends
  * <code>javax.servlet.http.HttpServlet</code>.
- * 
+ *
  * <p>
  * This interface defines methods to initialize a servlet, to service requests,
  * and to remove a servlet from the server. These are known as life-cycle
@@ -43,16 +43,16 @@ import java.io.IOException;
  * <li>The servlet is taken out of service, then destroyed with the
  * <code>destroy</code> method, then garbage collected and finalized.
  * </ol>
- * 
+ *
  * <p>
  * In addition to the life-cycle methods, this interface provides the
  * <code>getServletConfig</code> method, which the servlet can use to get any
  * startup information, and the <code>getServletInfo</code> method, which allows
  * the servlet to return basic information about itself, such as author,
  * version, and copyright.
- * 
+ *
  * @version $Version$
- * 
+ *
  * @see GenericServlet
  * @see javax.servlet.http.HttpServlet
  */
@@ -61,12 +61,12 @@ public interface Servlet {
     /**
      * Called by the servlet container to indicate to a servlet that the servlet
      * is being placed into service.
-     * 
+     *
      * <p>
      * The servlet container calls the <code>init</code> method exactly once
      * after instantiating the servlet. The <code>init</code> method must
      * complete successfully before the servlet can receive any requests.
-     * 
+     *
      * <p>
      * The servlet container cannot place the servlet into service if the
      * <code>init</code> method
@@ -74,36 +74,36 @@ public interface Servlet {
      * <li>Throws a <code>ServletException</code>
      * <li>Does not return within a time period defined by the Web server
      * </ol>
-     * 
-     * 
+     *
+     *
      * @param config
      *            a <code>ServletConfig</code> object containing the servlet's
      *            configuration and initialization parameters
-     * 
+     *
      * @exception ServletException
      *                if an exception has occurred that interferes with the
      *                servlet's normal operation
-     * 
+     *
      * @see UnavailableException
      * @see #getServletConfig
      */
     public void init(ServletConfig config) throws ServletException;
 
     /**
-     * 
+     *
      * Returns a {@link ServletConfig} object, which contains initialization and
      * startup parameters for this servlet. The <code>ServletConfig</code>
      * object returned is the one passed to the <code>init</code> method.
-     * 
+     *
      * <p>
      * Implementations of this interface are responsible for storing the
      * <code>ServletConfig</code> object so that this method can return it. The
      * {@link GenericServlet} class, which implements this interface, already
      * does this.
-     * 
+     *
      * @return the <code>ServletConfig</code> object that initializes this
      *         servlet
-     * 
+     *
      * @see #init
      */
     public ServletConfig getServletConfig();
@@ -111,16 +111,16 @@ public interface Servlet {
     /**
      * Called by the servlet container to allow the servlet to respond to a
      * request.
-     * 
+     *
      * <p>
      * This method is only called after the servlet's <code>init()</code> method
      * has completed successfully.
-     * 
+     *
      * <p>
      * The status code of the response always should be set for a servlet that
      * throws or sends an error.
-     * 
-     * 
+     *
+     *
      * <p>
      * Servlets typically run inside multithreaded servlet containers that can
      * handle multiple requests concurrently. Developers must be aware to
@@ -130,20 +130,20 @@ public interface Servlet {
      * href
      * ="http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html">
      * the Java tutorial on multi-threaded programming</a>.
-     * 
-     * 
+     *
+     *
      * @param req
      *            the <code>ServletRequest</code> object that contains the
      *            client's request
-     * 
+     *
      * @param res
      *            the <code>ServletResponse</code> object that contains the
      *            servlet's response
-     * 
+     *
      * @exception ServletException
      *                if an exception occurs that interferes with the servlet's
      *                normal operation
-     * 
+     *
      * @exception IOException
      *                if an input or output exception occurs
      */
@@ -153,11 +153,11 @@ public interface Servlet {
     /**
      * Returns information about the servlet, such as author, version, and
      * copyright.
-     * 
+     *
      * <p>
      * The string that this method returns should be plain text and not markup
      * of any kind (such as HTML, XML, etc.).
-     * 
+     *
      * @return a <code>String</code> containing servlet information
      */
     public String getServletInfo();
@@ -169,7 +169,7 @@ public interface Servlet {
      * after a timeout period has passed. After the servlet container calls this
      * method, it will not call the <code>service</code> method again on this
      * servlet.
-     * 
+     *
      * <p>
      * This method gives the servlet an opportunity to clean up any resources
      * that are being held (for example, memory, file handles, threads) and make

==================================================
ServletContainerInitializer.java
index 71301a0e1f..be61656e8f 100644
--- a/java/javax/servlet/ServletConfig.java
+++ b/java/javax/servlet/ServletConfig.java
@@ -29,7 +29,7 @@ public interface ServletConfig {
      * server administration, assigned in the web application deployment
      * descriptor, or for an unregistered (and thus unnamed) servlet instance it
      * will be the servlet's class name.
-     * 
+     *
      * @return the name of the servlet instance
      */
     public String getServletName();
@@ -37,7 +37,7 @@ public interface ServletConfig {
     /**
      * Returns a reference to the {@link ServletContext} in which the caller is
      * executing.
-     * 
+     *
      * @return a {@link ServletContext} object, used by the caller to interact
      *         with its servlet container
      * @see ServletContext
@@ -48,7 +48,7 @@ public interface ServletConfig {
      * Returns a <code>String</code> containing the value of the named
      * initialization parameter, or <code>null</code> if the parameter does not
      * exist.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the
      *            initialization parameter
@@ -61,7 +61,7 @@ public interface ServletConfig {
      * Returns the names of the servlet's initialization parameters as an
      * <code>Enumeration</code> of <code>String</code> objects, or an empty
      * <code>Enumeration</code> if the servlet has no initialization parameters.
-     * 
+     *
      * @return an <code>Enumeration</code> of <code>String</code> objects
      *         containing the names of the servlet's initialization parameters
      */

==================================================
ServletContext.java
index a0a7a7f80e..d3e9e53f5c 100644
--- a/java/javax/servlet/ServletContainerInitializer.java
+++ b/java/javax/servlet/ServletContainerInitializer.java
@@ -24,9 +24,9 @@ import java.util.Set;
  * TODO SERVLET3 - Add comments
  */
 public interface ServletContainerInitializer {
-    
+
     /**
-     * 
+     *
      * @param c
      * @param ctx
      * @throws ServletException

==================================================
ServletContextAttributeEvent.java
index cfcfaf685c..2ff25a7e08 100644
--- a/java/javax/servlet/ServletContext.java
+++ b/java/javax/servlet/ServletContext.java
@@ -45,7 +45,7 @@ import javax.servlet.descriptor.JspConfigDescriptor;
  * The <code>ServletContext</code> object is contained within the
  * {@link ServletConfig} object, which the Web server provides the servlet when
  * the servlet is initialized.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see Servlet#getServletConfig
@@ -72,7 +72,7 @@ public interface ServletContext {
      * <p>
      * In a security conscious environment, the servlet container may return
      * <code>null</code> for a given URL.
-     * 
+     *
      * @param uripath
      *            a <code>String</code> specifying the context path of another
      *            web application in the container.
@@ -89,7 +89,7 @@ public interface ServletContext {
      * Returns the major version of the Java Servlet API that this servlet
      * container supports. All implementations that comply with Version 3.0 must
      * have this method return the integer 3.
-     * 
+     *
      * @return 3
      */
     public int getMajorVersion();
@@ -98,7 +98,7 @@ public interface ServletContext {
      * Returns the minor version of the Servlet API that this servlet container
      * supports. All implementations that comply with Version 3.0 must have this
      * method return the integer 0.
-     * 
+     *
      * @return 0
      */
     public int getMinorVersion();
@@ -123,7 +123,7 @@ public interface ServletContext {
      * of the servlet container, and may be specified in a web application
      * deployment descriptor. Common MIME types are <code>"text/html"</code> and
      * <code>"image/gif"</code>.
-     * 
+     *
      * @param file
      *            a <code>String</code> specifying the name of a file
      * @return a <code>String</code> specifying the file's MIME type
@@ -150,7 +150,7 @@ public interface ServletContext {
      * "/customer/", "/WEB-INF/"}<br>
      * getResourcePaths("/catalog/") returns {"/catalog/index.html",
      * "/catalog/products.html", "/catalog/offers/"}.<br>
-     * 
+     *
      * @param path
      *            the partial path used to match the resources, which must start
      *            with a /
@@ -188,7 +188,7 @@ public interface ServletContext {
      * This method has a different purpose than
      * <code>java.lang.Class.getResource</code>, which looks up resources based
      * on a class loader. This method does not use class loaders.
-     * 
+     *
      * @param path
      *            a <code>String</code> specifying the path to the resource
      * @return the resource located at the named path, or <code>null</code> if
@@ -218,7 +218,7 @@ public interface ServletContext {
      * <code>java.lang.Class.getResourceAsStream</code>, which uses a class
      * loader. This method allows servlet containers to make a resource
      * available to a servlet from any location, without using a class loader.
-     * 
+     *
      * @param path
      *            a <code>String</code> specifying the path to the resource
      * @return the <code>InputStream</code> returned to the servlet, or
@@ -237,7 +237,7 @@ public interface ServletContext {
      * <code>RequestDispatcher</code> for resources in foreign contexts. This
      * method returns <code>null</code> if the <code>ServletContext</code>
      * cannot return a <code>RequestDispatcher</code>.
-     * 
+     *
      * @param path
      *            a <code>String</code> specifying the pathname to the resource
      * @return a <code>RequestDispatcher</code> object that acts as a wrapper for
@@ -260,7 +260,7 @@ public interface ServletContext {
      * <p>
      * This method returns <code>null</code> if the <code>ServletContext</code>
      * cannot return a <code>RequestDispatcher</code> for any reason.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of a servlet to wrap
      * @return a <code>RequestDispatcher</code> object that acts as a wrapper for
@@ -323,7 +323,7 @@ public interface ServletContext {
      * Writes the specified message to a servlet log file, usually an event log.
      * The name and type of the servlet log file is specific to the servlet
      * container.
-     * 
+     *
      * @param msg
      *            a <code>String</code> specifying the message to be written to
      *            the log file
@@ -347,7 +347,7 @@ public interface ServletContext {
      * <code>Throwable</code> exception to the servlet log file. The name and
      * type of the servlet log file is specific to the servlet container,
      * usually an event log.
-     * 
+     *
      * @param message
      *            a <code>String</code> that describes the error or exception
      * @param throwable
@@ -368,7 +368,7 @@ public interface ServletContext {
      * servlet container cannot translate the virtual path to a real path for
      * any reason (such as when the content is being made available from a
      * <code>.war</code> archive).
-     * 
+     *
      * @param path
      *            a <code>String</code> specifying a virtual path
      * @return a <code>String</code> specifying the real path, or null if the
@@ -388,7 +388,7 @@ public interface ServletContext {
      * The servlet container may return other optional information after the
      * primary string in parentheses, for example,
      * <code>JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86)</code>.
-     * 
+     *
      * @return a <code>String</code> containing at least the servlet container
      *         name and version number
      */
@@ -402,7 +402,7 @@ public interface ServletContext {
      * This method can make available configuration information useful to an
      * entire "web application". For example, it can provide a webmaster's email
      * address or the name of a system that holds critical data.
-     * 
+     *
      * @param name
      *            a <code>String</code> containing the name of the parameter
      *            whose value is requested
@@ -416,7 +416,7 @@ public interface ServletContext {
      * Returns the names of the context's initialization parameters as an
      * <code>Enumeration</code> of <code>String</code> objects, or an empty
      * <code>Enumeration</code> if the context has no initialization parameters.
-     * 
+     *
      * @return an <code>Enumeration</code> of <code>String</code> objects
      *         containing the names of the context's initialization parameters
      * @see ServletConfig#getInitParameter
@@ -446,7 +446,7 @@ public interface ServletContext {
      * subclass. Attribute names should follow the same convention as package
      * names. The Java Servlet API specification reserves names matching
      * <code>java.*</code>, <code>javax.*</code>, and <code>sun.*</code>.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the attribute
      * @return an <code>Object</code> containing the value of the attribute, or
@@ -459,7 +459,7 @@ public interface ServletContext {
      * Returns an <code>Enumeration</code> containing the attribute names
      * available within this servlet context. Use the {@link #getAttribute}
      * method with an attribute name to get the value of an attribute.
-     * 
+     *
      * @return an <code>Enumeration</code> of attribute names
      * @see #getAttribute
      */
@@ -479,7 +479,7 @@ public interface ServletContext {
      * Attribute names should follow the same convention as package names. The
      * Java Servlet API specification reserves names matching
      * <code>java.*</code>, <code>javax.*</code>, and <code>sun.*</code>.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the attribute
      * @param object
@@ -494,7 +494,7 @@ public interface ServletContext {
      * <p>
      * If listeners are configured on the <code>ServletContext</code> the
      * container notifies them accordingly.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the attribute to
      *            be removed
@@ -505,7 +505,7 @@ public interface ServletContext {
      * Returns the name of this web application corresponding to this
      * ServletContext as specified in the deployment descriptor for this web
      * application by the display-name element.
-     * 
+     *
      * @return The name of the web application or null if no name has been
      *         declared in the deployment descriptor.
      * @since Servlet 2.3

==================================================
ServletContextAttributeListener.java
index be23e8298e..b1bf727afd 100644
--- a/java/javax/servlet/ServletContextAttributeEvent.java
+++ b/java/javax/servlet/ServletContextAttributeEvent.java
@@ -19,7 +19,7 @@ package javax.servlet;
 /**
  * This is the event class for notifications about changes to the attributes of
  * the servlet context of a web application.
- * 
+ *
  * @see ServletContextAttributeListener
  * @since v 2.3
  */

==================================================
ServletContextEvent.java
index 8864135599..60cd3abb9b 100644
--- a/java/javax/servlet/ServletContextAttributeListener.java
+++ b/java/javax/servlet/ServletContextAttributeListener.java
@@ -23,7 +23,7 @@ import java.util.EventListener;
  * attribute list on the servlet context of a web application. To receive
  * notification events, the implementation class must be configured in the
  * deployment descriptor for the web application.
- * 
+ *
  * @see ServletContextAttributeEvent
  * @since v 2.3
  */

==================================================
ServletContextListener.java
index 06ff312e1d..92a9120db4 100644
--- a/java/javax/servlet/ServletContextEvent.java
+++ b/java/javax/servlet/ServletContextEvent.java
@@ -19,7 +19,7 @@ package javax.servlet;
 /**
  * This is the event class for notifications about changes to the servlet
  * context of a web application.
- * 
+ *
  * @see ServletContextListener
  * @since v 2.3
  */
@@ -29,7 +29,7 @@ public class ServletContextEvent extends java.util.EventObject {
 
     /**
      * Construct a ServletContextEvent from the given context.
-     * 
+     *
      * @param source
      *            - the ServletContext that is sending the event.
      */
@@ -39,7 +39,7 @@ public class ServletContextEvent extends java.util.EventObject {
 
     /**
      * Return the ServletContext that changed.
-     * 
+     *
      * @return the ServletContext that sent the event.
      */
     public ServletContext getServletContext() {

==================================================
ServletException.java
index e780199236..7d1b8e622a 100644
--- a/java/javax/servlet/ServletContextListener.java
+++ b/java/javax/servlet/ServletContextListener.java
@@ -23,13 +23,13 @@ import java.util.EventListener;
  * servlet context of the web application they are part of. To receive
  * notification events, the implementation class must be configured in the
  * deployment descriptor for the web application.
- * 
+ *
  * @see ServletContextEvent
  * @since v 2.3
  */
 
 public interface ServletContextListener extends EventListener {
-    
+
     /**
      ** Notification that the web application initialization process is starting.
      * All ServletContextListeners are notified of context initialization before

==================================================
ServletInputStream.java
index e22a065716..4e60fb4a25 100644
--- a/java/javax/servlet/ServletException.java
+++ b/java/javax/servlet/ServletException.java
@@ -19,7 +19,7 @@ package javax.servlet;
 /**
  * Defines a general exception a servlet can throw when it encounters
  * difficulty.
- * 
+ *
  * @author Various
  * @version $Version$
  */
@@ -37,7 +37,7 @@ public class ServletException extends Exception {
     /**
      * Constructs a new servlet exception with the specified message. The
      * message can be written to the server log and/or displayed for the user.
-     * 
+     *
      * @param message
      *            a <code>String</code> specifying the text of the exception
      *            message
@@ -50,7 +50,7 @@ public class ServletException extends Exception {
      * Constructs a new servlet exception when the servlet needs to throw an
      * exception and include a message about the "root cause" exception that
      * interfered with its normal operation, including a description message.
-     * 
+     *
      * @param message
      *            a <code>String</code> containing the text of the exception
      *            message
@@ -73,7 +73,7 @@ public class ServletException extends Exception {
      * <code>Throwable</code> exception to get a localized exception message.
      * When subclassing <code>ServletException</code>, this method can be
      * overridden to create an exception message designed for a specific locale.
-     * 
+     *
      * @param rootCause
      *            the <code>Throwable</code> exception that interfered with the
      *            servlet's normal operation, making the servlet exception
@@ -85,7 +85,7 @@ public class ServletException extends Exception {
 
     /**
      * Returns the exception that caused this servlet exception.
-     * 
+     *
      * @return the <code>Throwable</code> that caused this servlet exception
      */
     public Throwable getRootCause() {

==================================================
ServletOutputStream.java
index 247d37c508..9226e61965 100644
--- a/java/javax/servlet/ServletInputStream.java
+++ b/java/javax/servlet/ServletInputStream.java
@@ -31,7 +31,7 @@ import java.io.InputStream;
  * <p>
  * This is an abstract class that a servlet container implements. Subclasses of
  * this class must implement the <code>java.io.InputStream.read()</code> method.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see ServletRequest
@@ -52,7 +52,7 @@ public abstract class ServletInputStream extends InputStream {
      * <p>
      * This method returns -1 if it reaches the end of the input stream before
      * reading the maximum number of bytes.
-     * 
+     *
      * @param b
      *            an array of bytes into which data is read
      * @param off

==================================================
ServletRegistration.java
index 248e180988..cbafca1e6e 100644
--- a/java/javax/servlet/ServletOutputStream.java
+++ b/java/javax/servlet/ServletOutputStream.java
@@ -30,7 +30,7 @@ import java.util.ResourceBundle;
  * This is an abstract class that the servlet container implements. Subclasses
  * of this class must implement the <code>java.io.OutputStream.write(int)</code>
  * method.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see ServletResponse
@@ -50,7 +50,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>String</code> to the client, without a carriage
      * return-line feed (CRLF) character at the end.
-     * 
+     *
      * @param s
      *            the <code>String</code> to send to the client
      * @exception IOException
@@ -83,7 +83,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>boolean</code> value to the client, with no carriage
      * return-line feed (CRLF) character at the end.
-     * 
+     *
      * @param b
      *            the <code>boolean</code> value to send to the client
      * @exception IOException
@@ -102,7 +102,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a character to the client, with no carriage return-line feed
      * (CRLF) at the end.
-     * 
+     *
      * @param c
      *            the character to send to the client
      * @exception IOException
@@ -115,7 +115,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes an int to the client, with no carriage return-line feed (CRLF) at
      * the end.
-     * 
+     *
      * @param i
      *            the int to send to the client
      * @exception IOException
@@ -128,7 +128,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>long</code> value to the client, with no carriage
      * return-line feed (CRLF) at the end.
-     * 
+     *
      * @param l
      *            the <code>long</code> value to send to the client
      * @exception IOException
@@ -141,7 +141,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>float</code> value to the client, with no carriage
      * return-line feed (CRLF) at the end.
-     * 
+     *
      * @param f
      *            the <code>float</code> value to send to the client
      * @exception IOException
@@ -154,7 +154,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>double</code> value to the client, with no carriage
      * return-line feed (CRLF) at the end.
-     * 
+     *
      * @param d
      *            the <code>double</code> value to send to the client
      * @exception IOException
@@ -166,7 +166,7 @@ public abstract class ServletOutputStream extends OutputStream {
 
     /**
      * Writes a carriage return-line feed (CRLF) to the client.
-     * 
+     *
      * @exception IOException
      *                if an input or output exception occurred
      */
@@ -177,7 +177,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>String</code> to the client, followed by a carriage
      * return-line feed (CRLF).
-     * 
+     *
      * @param s
      *            the <code>String</code> to write to the client
      * @exception IOException
@@ -191,7 +191,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>boolean</code> value to the client, followed by a carriage
      * return-line feed (CRLF).
-     * 
+     *
      * @param b
      *            the <code>boolean</code> value to write to the client
      * @exception IOException
@@ -205,7 +205,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a character to the client, followed by a carriage return-line feed
      * (CRLF).
-     * 
+     *
      * @param c
      *            the character to write to the client
      * @exception IOException
@@ -219,7 +219,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes an int to the client, followed by a carriage return-line feed
      * (CRLF) character.
-     * 
+     *
      * @param i
      *            the int to write to the client
      * @exception IOException
@@ -233,7 +233,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>long</code> value to the client, followed by a carriage
      * return-line feed (CRLF).
-     * 
+     *
      * @param l
      *            the <code>long</code> value to write to the client
      * @exception IOException
@@ -247,7 +247,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>float</code> value to the client, followed by a carriage
      * return-line feed (CRLF).
-     * 
+     *
      * @param f
      *            the <code>float</code> value to write to the client
      * @exception IOException
@@ -261,7 +261,7 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a <code>double</code> value to the client, followed by a carriage
      * return-line feed (CRLF).
-     * 
+     *
      * @param d
      *            the <code>double</code> value to write to the client
      * @exception IOException

==================================================
ServletRequest.java
index 9734c5444d..9ad03371ce 100644
--- a/java/javax/servlet/ServletRegistration.java
+++ b/java/javax/servlet/ServletRegistration.java
@@ -25,9 +25,9 @@ import java.util.Set;
  * TODO SERVLET3 - Add comments
  */
 public interface ServletRegistration extends Registration {
-    
+
     /**
-     * 
+     *
      * @param urlPatterns
      * @return TODO
      * @throws IllegalArgumentException if urlPattern is null or empty
@@ -35,11 +35,11 @@ public interface ServletRegistration extends Registration {
      *                                  already been initialised
      */
     public Set<String> addMapping(String... urlPatterns);
-    
+
     public Collection<String> getMappings();
-    
+
     public String getRunAsRole();
-    
+
     public static interface Dynamic
     extends ServletRegistration, Registration.Dynamic {
         public void setLoadOnStartup(int loadOnStartup);

==================================================
ServletRequestAttributeEvent.java
index acde691ef6..9fd5605368 100644
--- a/java/javax/servlet/ServletRequest.java
+++ b/java/javax/servlet/ServletRequest.java
@@ -32,7 +32,7 @@ import java.util.Map;
  * <code>ServletRequest</code> can provide additional protocol-specific data
  * (for example, HTTP data is provided by
  * {@link javax.servlet.http.HttpServletRequest}.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see javax.servlet.http.HttpServletRequest
@@ -55,7 +55,7 @@ public interface ServletRequest {
      * Attribute names should follow the same conventions as package names. This
      * specification reserves names matching <code>java.*</code>,
      * <code>javax.*</code>, and <code>sun.*</code>.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the attribute
      * @return an <code>Object</code> containing the value of the attribute, or
@@ -68,7 +68,7 @@ public interface ServletRequest {
      * attributes available to this request. This method returns an empty
      * <code>Enumeration</code> if the request has no attributes available to
      * it.
-     * 
+     *
      * @return an <code>Enumeration</code> of strings containing the names of the
      *         request's attributes
      */
@@ -78,7 +78,7 @@ public interface ServletRequest {
      * Returns the name of the character encoding used in the body of this
      * request. This method returns <code>null</code> if the request does not
      * specify a character encoding
-     * 
+     *
      * @return a <code>String</code> containing the name of the character
      *         encoding, or <code>null</code> if the request does not specify a
      *         character encoding
@@ -89,7 +89,7 @@ public interface ServletRequest {
      * Overrides the name of the character encoding used in the body of this
      * request. This method must be called prior to reading request parameters
      * or reading input using getReader().
-     * 
+     *
      * @param env
      *            a <code>String</code> containing the name of the character
      *            encoding.
@@ -103,7 +103,7 @@ public interface ServletRequest {
      * Returns the length, in bytes, of the request body and made available by
      * the input stream, or -1 if the length is not known. For HTTP servlets,
      * same as the value of the CGI variable CONTENT_LENGTH.
-     * 
+     *
      * @return an integer containing the length of the request body or -1 if the
      *         length is not known
      */
@@ -113,7 +113,7 @@ public interface ServletRequest {
      * Returns the MIME type of the body of the request, or <code>null</code> if
      * the type is not known. For HTTP servlets, same as the value of the CGI
      * variable CONTENT_TYPE.
-     * 
+     *
      * @return a <code>String</code> containing the name of the MIME type of the
      *         request, or null if the type is not known
      */
@@ -123,7 +123,7 @@ public interface ServletRequest {
      * Retrieves the body of the request as binary data using a
      * {@link ServletInputStream}. Either this method or {@link #getReader} may
      * be called to read the body, not both.
-     * 
+     *
      * @return a {@link ServletInputStream} object containing the body of the
      *         request
      * @exception IllegalStateException
@@ -152,7 +152,7 @@ public interface ServletRequest {
      * an HTTP POST request, then reading the body directly via
      * {@link #getInputStream} or {@link #getReader} can interfere with the
      * execution of this method.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the parameter
      * @return a <code>String</code> representing the single value of the
@@ -166,7 +166,7 @@ public interface ServletRequest {
      * containing the names of the parameters contained in this request. If the
      * request has no parameters, the method returns an empty
      * <code>Enumeration</code>.
-     * 
+     *
      * @return an <code>Enumeration</code> of <code>String</code> objects, each
      *         <code>String</code> containing the name of a request parameter;
      *         or an empty <code>Enumeration</code> if the request has no
@@ -180,7 +180,7 @@ public interface ServletRequest {
      * parameter does not exist.
      * <p>
      * If the parameter has a single value, the array has a length of 1.
-     * 
+     *
      * @param name
      *            a <code>String</code> containing the name of the parameter
      *            whose value is requested
@@ -195,7 +195,7 @@ public interface ServletRequest {
      * parameters are extra information sent with the request. For HTTP
      * servlets, parameters are contained in the query string or posted form
      * data.
-     * 
+     *
      * @return an immutable java.util.Map containing parameter names as keys and
      *         parameter values as map values. The keys in the parameter map are
      *         of type String. The values in the parameter map are of type
@@ -208,7 +208,7 @@ public interface ServletRequest {
      * <i>protocol/majorVersion.minorVersion</i>, for example, HTTP/1.1. For
      * HTTP servlets, the value returned is the same as the value of the CGI
      * variable <code>SERVER_PROTOCOL</code>.
-     * 
+     *
      * @return a <code>String</code> containing the protocol name and version
      *         number
      */
@@ -218,7 +218,7 @@ public interface ServletRequest {
      * Returns the name of the scheme used to make this request, for example,
      * <code>http</code>, <code>https</code>, or <code>ftp</code>. Different
      * schemes have different rules for constructing URLs, as noted in RFC 1738.
-     * 
+     *
      * @return a <code>String</code> containing the name of the scheme used to
      *         make this request
      */
@@ -228,7 +228,7 @@ public interface ServletRequest {
      * Returns the host name of the server to which the request was sent. It is
      * the value of the part before ":" in the <code>Host</code> header value,
      * if any, or the resolved server name, or the server IP address.
-     * 
+     *
      * @return a <code>String</code> containing the name of the server
      */
     public String getServerName();
@@ -237,7 +237,7 @@ public interface ServletRequest {
      * Returns the port number to which the request was sent. It is the value of
      * the part after ":" in the <code>Host</code> header value, if any, or the
      * server port where the client connection was accepted on.
-     * 
+     *
      * @return an integer specifying the port number
      */
     public int getServerPort();
@@ -247,7 +247,7 @@ public interface ServletRequest {
      * <code>BufferedReader</code>. The reader translates the character data
      * according to the character encoding used on the body. Either this method
      * or {@link #getInputStream} may be called to read the body, not both.
-     * 
+     *
      * @return a <code>BufferedReader</code> containing the body of the request
      * @exception java.io.UnsupportedEncodingException
      *                if the character set encoding used is not supported and
@@ -265,7 +265,7 @@ public interface ServletRequest {
      * Returns the Internet Protocol (IP) address of the client or last proxy
      * that sent the request. For HTTP servlets, same as the value of the CGI
      * variable <code>REMOTE_ADDR</code>.
-     * 
+     *
      * @return a <code>String</code> containing the IP address of the client
      *         that sent the request
      */
@@ -277,7 +277,7 @@ public interface ServletRequest {
      * hostname (to improve performance), this method returns the dotted-string
      * form of the IP address. For HTTP servlets, same as the value of the CGI
      * variable <code>REMOTE_HOST</code>.
-     * 
+     *
      * @return a <code>String</code> containing the fully qualified name of the
      *         client
      */
@@ -297,7 +297,7 @@ public interface ServletRequest {
      * in a different web application by <code>RequestDispatcher</code>, the
      * object set by this method may not be correctly retrieved in the caller
      * servlet.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the attribute
      * @param o
@@ -313,7 +313,7 @@ public interface ServletRequest {
      * Attribute names should follow the same conventions as package names.
      * Names beginning with <code>java.*</code>, <code>javax.*</code>, and
      * <code>com.sun.*</code>, are reserved for use by Sun Microsystems.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the attribute to
      *            remove
@@ -325,7 +325,7 @@ public interface ServletRequest {
      * content in, based on the Accept-Language header. If the client request
      * doesn't provide an Accept-Language header, this method returns the
      * default locale for the server.
-     * 
+     *
      * @return the preferred <code>Locale</code> for the client
      */
     public Locale getLocale();
@@ -337,7 +337,7 @@ public interface ServletRequest {
      * header. If the client request doesn't provide an Accept-Language header,
      * this method returns an <code>Enumeration</code> containing one
      * <code>Locale</code>, the default locale for the server.
-     * 
+     *
      * @return an <code>Enumeration</code> of preferred <code>Locale</code>
      *         objects for the client
      */
@@ -346,7 +346,7 @@ public interface ServletRequest {
     /**
      * Returns a boolean indicating whether this request was made using a secure
      * channel, such as HTTPS.
-     * 
+     *
      * @return a boolean indicating if the request was made using a secure
      *         channel
      */
@@ -367,7 +367,7 @@ public interface ServletRequest {
      * The difference between this method and
      * {@link ServletContext#getRequestDispatcher} is that this method can take
      * a relative path.
-     * 
+     *
      * @param path
      *            a <code>String</code> specifying the pathname to the resource.
      *            If it is relative, it must be relative against the current
@@ -391,7 +391,7 @@ public interface ServletRequest {
     /**
      * Returns the Internet Protocol (IP) source port of the client or last
      * proxy that sent the request.
-     * 
+     *
      * @return an integer specifying the port number
      * @since 2.4
      */
@@ -400,7 +400,7 @@ public interface ServletRequest {
     /**
      * Returns the host name of the Internet Protocol (IP) interface on which
      * the request was received.
-     * 
+     *
      * @return a <code>String</code> containing the host name of the IP on which
      *         the request was received.
      * @since 2.4
@@ -410,7 +410,7 @@ public interface ServletRequest {
     /**
      * Returns the Internet Protocol (IP) address of the interface on which the
      * request was received.
-     * 
+     *
      * @return a <code>String</code> containing the IP address on which the
      *         request was received.
      * @since 2.4
@@ -420,7 +420,7 @@ public interface ServletRequest {
     /**
      * Returns the Internet Protocol (IP) port number of the interface on which
      * the request was received.
-     * 
+     *
      * @return an integer specifying the port number
      * @since 2.4
      */

==================================================
ServletRequestEvent.java
index 29795989ad..9b25184155 100644
--- a/java/javax/servlet/ServletRequestAttributeEvent.java
+++ b/java/javax/servlet/ServletRequestAttributeEvent.java
@@ -19,7 +19,7 @@ package javax.servlet;
 /**
  * This is the event class for notifications of changes to the attributes of the
  * servlet request in an application.
- * 
+ *
  * @see ServletRequestAttributeListener
  * @since Servlet 2.4
  */
@@ -33,7 +33,7 @@ public class ServletRequestAttributeEvent extends ServletRequestEvent {
      * Construct a ServletRequestAttributeEvent giving the servlet context of
      * this web application, the ServletRequest whose attributes are changing
      * and the name and value of the attribute.
-     * 
+     *
      * @param sc
      *            the ServletContext that is sending the event.
      * @param request
@@ -52,7 +52,7 @@ public class ServletRequestAttributeEvent extends ServletRequestEvent {
 
     /**
      * Return the name of the attribute that changed on the ServletRequest.
-     * 
+     *
      * @return the name of the changed request attribute
      */
     public String getName() {
@@ -64,7 +64,7 @@ public class ServletRequestAttributeEvent extends ServletRequestEvent {
      * replaced. If the attribute was added, this is the value of the attribute.
      * If the attribute was removed, this is the value of the removed attribute.
      * If the attribute was replaced, this is the old value of the attribute.
-     * 
+     *
      * @return the value of the changed request attribute
      */
     public Object getValue() {

==================================================
ServletRequestWrapper.java
index 4b473b2619..5d95eab28b 100644
--- a/java/javax/servlet/ServletRequestEvent.java
+++ b/java/javax/servlet/ServletRequestEvent.java
@@ -19,7 +19,7 @@ package javax.servlet;
 /**
  * Events of this kind indicate lifecycle events for a ServletRequest. The
  * source of the event is the ServletContext of this web application.
- * 
+ *
  * @see ServletRequestListener
  * @since Servlet 2.4
  */
@@ -31,7 +31,7 @@ public class ServletRequestEvent extends java.util.EventObject {
     /**
      * Construct a ServletRequestEvent for the given ServletContext and
      * ServletRequest.
-     * 
+     *
      * @param sc
      *            the ServletContext of the web application.
      * @param request

==================================================
ServletResponse.java
index 88b799c6d2..d22e7119db 100644
--- a/java/javax/servlet/ServletRequestWrapper.java
+++ b/java/javax/servlet/ServletRequestWrapper.java
@@ -27,7 +27,7 @@ import java.util.Map;
  * be subclassed by developers wishing to adapt the request to a Servlet. This
  * class implements the Wrapper or Decorator pattern. Methods default to calling
  * through to the wrapped request object.
- * 
+ *
  * @since v 2.3
  * @see javax.servlet.ServletRequest
  */
@@ -36,7 +36,7 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * Creates a ServletRequest adaptor wrapping the given request object.
-     * 
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the request is null
      */
@@ -56,7 +56,7 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * Sets the request object being wrapped.
-     * 
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the request is null.
      */
@@ -287,7 +287,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getRealPath(String path)
      * on the wrapped request object.
-     * 
+     *
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
     @Override
@@ -300,7 +300,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getRemotePort() on the
      * wrapped request object.
-     * 
+     *
      * @since 2.4
      */
     @Override
@@ -311,7 +311,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getLocalName() on the
      * wrapped request object.
-     * 
+     *
      * @since 2.4
      */
     @Override
@@ -322,7 +322,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getLocalAddr() on the
      * wrapped request object.
-     * 
+     *
      * @since 2.4
      */
     @Override
@@ -333,7 +333,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getLocalPort() on the
      * wrapped request object.
-     * 
+     *
      * @since 2.4
      */
     @Override
@@ -344,7 +344,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getServletContext() on
      * the wrapped request object.
-     * 
+     *
      * @since Servlet 3.0
      */
     @Override
@@ -355,7 +355,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return startAsync() on the
      * wrapped request object.
-     * 
+     *
      * @throws java.lang.IllegalStateException
      * @since Servlet 3.0
      */
@@ -367,7 +367,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return startAsync(Runnable) on
      * the wrapped request object.
-     * 
+     *
      * @param servletRequest
      * @param servletResponse
      * @throws java.lang.IllegalStateException
@@ -382,7 +382,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return isAsyncStarted() on the
      * wrapped request object.
-     * 
+     *
      * @since Servlet 3.0
      */
     @Override
@@ -393,7 +393,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return isAsyncSupported() on
      * the wrapped request object.
-     * 
+     *
      * @since Servlet 3.0
      */
     @Override
@@ -404,7 +404,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to return getAsyncContext() on the
      * wrapped request object.
-     * 
+     *
      * @since Servlet 3.0
      */
     @Override
@@ -445,7 +445,7 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * The default behavior of this method is to call getDispatcherType() on the
      * wrapped request object.
-     * 
+     *
      * @since Servlet 3.0
      */
     @Override

==================================================
ServletResponseWrapper.java
index 006d7bd94a..2e0880f26f 100644
--- a/java/javax/servlet/ServletResponse.java
+++ b/java/javax/servlet/ServletResponse.java
@@ -44,7 +44,7 @@ import java.util.Locale;
  * See the Internet RFCs such as <a href="http://www.ietf.org/rfc/rfc2045.txt">
  * RFC 2045</a> for more information on MIME. Protocols such as SMTP and HTTP
  * define profiles of MIME, and those standards are still evolving.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see ServletOutputStream
@@ -64,7 +64,7 @@ public interface ServletResponse {
      * <p>
      * See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) for more information
      * about character encoding and MIME.
-     * 
+     *
      * @return a <code>String</code> specifying the name of the character
      *         encoding, for example, <code>UTF-8</code>
      */
@@ -79,7 +79,7 @@ public interface ServletResponse {
      * specified as described in {@link #getCharacterEncoding}, the charset
      * parameter is included in the string returned. If no character encoding
      * has been specified, the charset parameter is omitted.
-     * 
+     *
      * @return a <code>String</code> specifying the content type, for example,
      *         <code>text/html; charset=UTF-8</code>, or null
      * @since 2.4
@@ -93,7 +93,7 @@ public interface ServletResponse {
      * Calling flush() on the ServletOutputStream commits the response. Either
      * this method or {@link #getWriter} may be called to write the body, not
      * both.
-     * 
+     *
      * @return a {@link ServletOutputStream} for writing binary data
      * @exception IllegalStateException
      *                if the <code>getWriter</code> method has been called on
@@ -117,7 +117,7 @@ public interface ServletResponse {
      * <p>
      * Either this method or {@link #getOutputStream} may be called to write the
      * body, not both.
-     * 
+     *
      * @return a <code>PrintWriter</code> object that can return character data
      *         to the client
      * @exception java.io.UnsupportedEncodingException
@@ -154,7 +154,7 @@ public interface ServletResponse {
      * the character encoding cannot be communicated via HTTP headers if the
      * servlet does not specify a content type; however, it is still used to
      * encode text written via the servlet response's writer.
-     * 
+     *
      * @param charset
      *            a String specifying only the character set defined by IANA
      *            Character Sets
@@ -167,7 +167,7 @@ public interface ServletResponse {
     /**
      * Sets the length of the content body in the response In HTTP servlets,
      * this method sets the HTTP Content-Length header.
-     * 
+     *
      * @param len
      *            an integer specifying the length of the content being returned
      *            to the client; sets the Content-Length header
@@ -192,7 +192,7 @@ public interface ServletResponse {
      * used for the servlet response's writer to the client if the protocol
      * provides a way for doing so. In the case of HTTP, the
      * <code>Content-Type</code> header is used.
-     * 
+     *
      * @param type
      *            a <code>String</code> specifying the MIME type of the content
      * @see #setLocale
@@ -215,7 +215,7 @@ public interface ServletResponse {
      * This method must be called before any response body content is written;
      * if content has been written or the response object has been committed,
      * this method throws an <code>IllegalStateException</code>.
-     * 
+     *
      * @param size
      *            the preferred buffer size
      * @exception IllegalStateException
@@ -230,7 +230,7 @@ public interface ServletResponse {
     /**
      * Returns the actual buffer size used for the response. If no buffering is
      * used, this method returns 0.
-     * 
+     *
      * @return the actual buffer size used
      * @see #setBufferSize
      * @see #flushBuffer
@@ -243,7 +243,7 @@ public interface ServletResponse {
      * Forces any content in the buffer to be written to the client. A call to
      * this method automatically commits the response, meaning the status code
      * and headers will be written.
-     * 
+     *
      * @see #setBufferSize
      * @see #getBufferSize
      * @see #isCommitted
@@ -255,7 +255,7 @@ public interface ServletResponse {
      * Clears the content of the underlying buffer in the response without
      * clearing headers or status code. If the response has been committed, this
      * method throws an <code>IllegalStateException</code>.
-     * 
+     *
      * @see #setBufferSize
      * @see #getBufferSize
      * @see #isCommitted
@@ -267,7 +267,7 @@ public interface ServletResponse {
     /**
      * Returns a boolean indicating if the response has been committed. A
      * committed response has already had its status code and headers written.
-     * 
+     *
      * @return a boolean indicating if the response has been committed
      * @see #setBufferSize
      * @see #getBufferSize
@@ -280,7 +280,7 @@ public interface ServletResponse {
      * Clears any data that exists in the buffer as well as the status code and
      * headers. If the response has been committed, this method throws an
      * <code>IllegalStateException</code>.
-     * 
+     *
      * @exception IllegalStateException
      *                if the response has already been committed
      * @see #setBufferSize
@@ -317,7 +317,7 @@ public interface ServletResponse {
      * the character encoding cannot be communicated via HTTP headers if the
      * servlet does not specify a content type; however, it is still used to
      * encode text written via the servlet response's writer.
-     * 
+     *
      * @param loc
      *            the locale of the response
      * @see #getLocale
@@ -331,7 +331,7 @@ public interface ServletResponse {
      * {@link #setLocale} method. Calls made to <code>setLocale</code> after the
      * response is committed have no effect. If no locale has been specified,
      * the container's default locale is returned.
-     * 
+     *
      * @see #setLocale
      */
     public Locale getLocale();

==================================================
ServletSecurityElement.java
index 335d322b31..6e9d5bab4a 100644
--- a/java/javax/servlet/ServletResponseWrapper.java
+++ b/java/javax/servlet/ServletResponseWrapper.java
@@ -25,7 +25,7 @@ import java.util.Locale;
  * can be subclassed by developers wishing to adapt the response from a Servlet.
  * This class implements the Wrapper or Decorator pattern. Methods default to
  * calling through to the wrapped response object.
- * 
+ *
  * @author Various
  * @version $Version$
  * @since v 2.3
@@ -36,7 +36,7 @@ public class ServletResponseWrapper implements ServletResponse {
 
     /**
      * Creates a ServletResponse adaptor wrapping the given response object.
-     * 
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the response is null.
      */
@@ -56,7 +56,7 @@ public class ServletResponseWrapper implements ServletResponse {
 
     /**
      * Sets the response being wrapped.
-     * 
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the response is null.
      */
@@ -70,7 +70,7 @@ public class ServletResponseWrapper implements ServletResponse {
     /**
      * The default behavior of this method is to call
      * setCharacterEncoding(String charset) on the wrapped response object.
-     * 
+     *
      * @since 2.4
      */
     @Override
@@ -126,7 +126,7 @@ public class ServletResponseWrapper implements ServletResponse {
     /**
      * The default behavior of this method is to return getContentType() on the
      * wrapped response object.
-     * 
+     *
      * @since 2.4
      */
     @Override

==================================================
SessionCookieConfig.java
index 942bd58c49..73ca331667 100644
--- a/java/javax/servlet/ServletSecurityElement.java
+++ b/java/javax/servlet/ServletSecurityElement.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,12 +26,12 @@ import javax.servlet.annotation.HttpMethodConstraint;
 import javax.servlet.annotation.ServletSecurity;
 
 /**
- * 
+ *
  * @since Servlet 3.0
  * TODO SERVLET3 - Add comments
  */
 public class ServletSecurityElement extends HttpConstraintElement {
-    
+
     private final Map<String,HttpMethodConstraintElement> methodConstraints =
         new HashMap<String,HttpMethodConstraintElement>();
 
@@ -41,8 +41,8 @@ public class ServletSecurityElement extends HttpConstraintElement {
     public ServletSecurityElement() {
         super();
     }
-    
-    
+
+
     /**
      * Use specific constraints for specified methods and default
      * HttpConstraintElement for all other methods.
@@ -55,7 +55,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
         super();
         addHttpMethodConstraints(httpMethodConstraints);
     }
-    
+
     /**
      * Use specified HttpConstraintElement.
      * @param httpConstraintElement
@@ -63,7 +63,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
     public ServletSecurityElement(HttpConstraintElement httpConstraintElement) {
         this (httpConstraintElement, null);
     }
-    
+
     /**
      * Use specified HttpConstraintElement as default and specific constraints
      * for specified methods.
@@ -78,7 +78,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
                 httpConstraintElement.getRolesAllowed());
         addHttpMethodConstraints(httpMethodConstraints);
     }
-    
+
     /**
      * Create from an annotation.
      * @param annotation
@@ -88,7 +88,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
         this(new HttpConstraintElement(annotation.value().value(),
                 annotation.value().transportGuarantee(),
                 annotation.value().rolesAllowed()));
-        
+
         List<HttpMethodConstraintElement> l =
             new ArrayList<HttpMethodConstraintElement>();
         HttpMethodConstraint[] constraints = annotation.httpMethodConstraints();
@@ -105,15 +105,15 @@ public class ServletSecurityElement extends HttpConstraintElement {
         }
         addHttpMethodConstraints(l);
     }
-    
+
     public Collection<HttpMethodConstraintElement> getHttpMethodConstraints() {
         return methodConstraints.values();
     }
-    
+
     public Collection<String> getMethodNames() {
         return methodConstraints.keySet();
     }
-    
+
     private void addHttpMethodConstraints(
             Collection<HttpMethodConstraintElement> httpMethodConstraints) {
         if (httpMethodConstraints == null) {

==================================================
SingleThreadModel.java
index 80637f6f15..cd4a23d050 100644
--- a/java/javax/servlet/SessionCookieConfig.java
+++ b/java/javax/servlet/SessionCookieConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,75 +17,75 @@
 package javax.servlet;
 
 /**
- * 
+ *
  * @since Servlet 3.0
  * $Id$
  * TODO SERVLET3 - Add comments
  */
 public interface SessionCookieConfig {
-    
+
     /**
-     * 
+     *
      * @param name
      * @throws IllegalStateException
      */
     public void setName(String name);
-    
+
     public String getName();
-    
+
     /**
-     * 
+     *
      * @param domain
      * @throws IllegalStateException
      */
     public void setDomain(String domain);
-    
+
     public String getDomain();
-    
+
     /**
-     * 
+     *
      * @param path
      * @throws IllegalStateException
      */
     public void setPath(String path);
-    
+
     public String getPath();
-    
+
     /**
-     * 
+     *
      * @param comment
      * @throws IllegalStateException
      */
     public void setComment(String comment);
-    
+
     public String getComment();
-    
+
     /**
-     * 
+     *
      * @param httpOnly
      * @throws IllegalStateException
      */
     public void setHttpOnly(boolean httpOnly);
-    
+
     public boolean isHttpOnly();
-    
+
     /**
-     * 
+     *
      * @param secure
      * @throws IllegalStateException
      */
     public void setSecure(boolean secure);
-    
+
     public boolean isSecure();
 
     /**
      * Sets the maximum age.
-     * 
+     *
      * @param MaxAge the maximum age to set
      * @throws IllegalStateException
      */
     public void setMaxAge(int MaxAge);
-    
+
     public int getMaxAge();
-    
+
 }

==================================================
UnavailableException.java
index 4f2bb8e124..3e27628d8f 100644
--- a/java/javax/servlet/SingleThreadModel.java
+++ b/java/javax/servlet/SingleThreadModel.java
@@ -34,7 +34,7 @@ package javax.servlet;
  * such as avoiding the usage of an instance variable or synchronizing the block
  * of the code accessing those resources. This interface is deprecated in
  * Servlet API version 2.4.
- * 
+ *
  * @author Various
  * @version $Version$
  * @deprecated As of Java Servlet API 2.4, with no direct replacement.

==================================================
HandlesTypes.java
index 172cb8ed67..16d33d42c8 100644
--- a/java/javax/servlet/UnavailableException.java
+++ b/java/javax/servlet/UnavailableException.java
@@ -38,7 +38,7 @@ package javax.servlet;
  * the servlet container more robust. Specifically, the servlet container might
  * block requests to the servlet or filter for a period of time suggested by the
  * exception, rather than rejecting them until the servlet container restarts.
- * 
+ *
  * @author Various
  * @version $Version$
  */
@@ -95,7 +95,7 @@ public class UnavailableException extends ServletException {
     /**
      * Constructs a new exception with a descriptive message indicating that the
      * servlet is permanently unavailable.
-     * 
+     *
      * @param msg
      *            a <code>String</code> specifying the descriptive message
      */
@@ -116,7 +116,7 @@ public class UnavailableException extends ServletException {
      * to report how long it will take to be restored to functionality. This can
      * be indicated with a negative or zero value for the <code>seconds</code>
      * argument.
-     * 
+     *
      * @param msg
      *            a <code>String</code> specifying the descriptive message,
      *            which can be written to a log file or displayed for the user.
@@ -140,7 +140,7 @@ public class UnavailableException extends ServletException {
      * Returns a <code>boolean</code> indicating whether the servlet is
      * permanently unavailable. If so, something is wrong with the servlet, and
      * the system administrator must take some corrective action.
-     * 
+     *
      * @return <code>true</code> if the servlet is permanently unavailable;
      *         <code>false</code> if the servlet is available or temporarily
      *         unavailable
@@ -151,7 +151,7 @@ public class UnavailableException extends ServletException {
 
     /**
      * Returns the servlet that is reporting its unavailability.
-     * 
+     *
      * @return the <code>Servlet</code> object that is throwing the
      *         <code>UnavailableException</code>
      * @deprecated As of Java Servlet API 2.2, with no replacement.
@@ -170,7 +170,7 @@ public class UnavailableException extends ServletException {
      * unavailable or cannot provide an estimate of how long it will be
      * unavailable. No effort is made to correct for the time elapsed since the
      * exception was first reported.
-     * 
+     *
      * @return an integer specifying the number of seconds the servlet will be
      *         temporarily unavailable, or a negative number if the servlet is
      *         permanently unavailable or cannot make an estimate

==================================================
HttpConstraint.java
index f1ff122996..a84285e258 100644
--- a/java/javax/servlet/annotation/HandlesTypes.java
+++ b/java/javax/servlet/annotation/HandlesTypes.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,7 +24,7 @@ import java.lang.annotation.Target;
 /**
  * This annotation is used to declare an array of application classes which are
  * passed to a {@link javax.servlet.ServletContainerInitializer}.
- * 
+ *
  * @since Servlet 3.0
  */
 @Target({ElementType.TYPE})

==================================================
HttpMethodConstraint.java
index 2223e92945..fd4366c474 100644
--- a/java/javax/servlet/annotation/HttpConstraint.java
+++ b/java/javax/servlet/annotation/HttpConstraint.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,7 +28,7 @@ import javax.servlet.annotation.ServletSecurity.TransportGuarantee;
  * requests with HTTP protocol method types that are not otherwise represented
  * by a corresponding {@link javax.servlet.annotation.HttpMethodConstraint} in a
  * {@link javax.servlet.annotation.ServletSecurity} annotation.
- * 
+ *
  * @since Servlet 3.0
  */
 @Retention(RetentionPolicy.RUNTIME)
@@ -38,14 +38,14 @@ public @interface HttpConstraint {
     /**
      * The EmptyRoleSemantic determines the behaviour when the rolesAllowed list
      * is empty.
-     * 
+     *
      * @return empty role semantic
      */
     EmptyRoleSemantic value() default EmptyRoleSemantic.PERMIT;
 
     /**
      * Determines whether SSL/TLS is required to process the current request.
-     * 
+     *
      * @return transport guarantee
      */
     TransportGuarantee transportGuarantee() default TransportGuarantee.NONE;
@@ -54,7 +54,7 @@ public @interface HttpConstraint {
      * The authorized roles' names. The container may discard duplicate role
      * names during processing of the annotation. N.B. The String "*" does not
      * have a special meaning if it occurs as a role name.
-     * 
+     *
      * @return array of names. The array may be of zero length, in which case
      *         the EmptyRoleSemantic applies; the returned value determines
      *         whether access is to be permitted or denied regardless of the
@@ -62,7 +62,7 @@ public @interface HttpConstraint {
      *         Otherwise, when the array contains one or more role names access
      *         is permitted if the user a member of at least one of the named
      *         roles. The EmptyRoleSemantic is not applied in this case.
-     * 
+     *
      */
     String[] rolesAllowed() default {};
 

==================================================
MultipartConfig.java
index 4175a7c528..84e7c1d073 100644
--- a/java/javax/servlet/annotation/HttpMethodConstraint.java
+++ b/java/javax/servlet/annotation/HttpMethodConstraint.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,9 +27,9 @@ import javax.servlet.annotation.ServletSecurity.TransportGuarantee;
  * Specific security constraints can be applied to different types of request,
  * differentiated by the HTTP protocol method type by using this annotation
  * inside the {@link javax.servlet.annotation.ServletSecurity} annotation.
- * 
+ *
  * @since Servlet 3.0
- * 
+ *
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
@@ -37,7 +37,7 @@ public @interface HttpMethodConstraint {
 
     /**
      * HTTP Protocol method name (e.g. POST, PUT)
-     * 
+     *
      * @return method name
      */
     String value();
@@ -45,14 +45,14 @@ public @interface HttpMethodConstraint {
     /**
      * The EmptyRoleSemantic determines the behaviour when the rolesAllowed list
      * is empty.
-     * 
+     *
      * @return empty role semantic
      */
     EmptyRoleSemantic emptyRoleSemantic() default EmptyRoleSemantic.PERMIT;
 
     /**
      * Determines whether SSL/TLS is required to process the current request.
-     * 
+     *
      * @return transport guarantee
      */
     TransportGuarantee transportGuarantee() default TransportGuarantee.NONE;
@@ -61,7 +61,7 @@ public @interface HttpMethodConstraint {
      * The authorized roles' names. The container may discard duplicate role
      * names during processing of the annotation. N.B. The String "*" does not
      * have a special meaning if it occurs as a role name.
-     * 
+     *
      * @return array of names. The array may be of zero length, in which case
      *         the EmptyRoleSemantic applies; the returned value determines
      *         whether access is to be permitted or denied regardless of the

==================================================
ServletSecurity.java
index 4b8bb2f545..a86f86ed16 100644
--- a/java/javax/servlet/annotation/MultipartConfig.java
+++ b/java/javax/servlet/annotation/MultipartConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,19 +26,19 @@ import java.lang.annotation.Target;
  * which it is declared expects requests to made using the {@code
  * multipart/form-data} MIME type. <br />
  * <br />
- * 
+ *
  * {@link javax.servlet.http.Part} components of a given {@code
  * multipart/form-data} request are retrieved by a Servlet annotated with
  * {@code MultipartConfig} by calling
  * {@link javax.servlet.http.HttpServletRequest#getPart} or
  * {@link javax.servlet.http.HttpServletRequest#getParts}.<br />
  * <br />
- * 
+ *
  * E.g. <code>@WebServlet("/upload")}</code><br />
- * 
+ *
  * <code>@MultipartConfig()</code> <code>public class UploadServlet extends
  * HttpServlet ... } </code><br />
- * 
+ *
  * @since Servlet 3.0
  */
 @Target({ElementType.TYPE})

==================================================
WebFilter.java
index cebb072c6d..7ed432ee10 100644
--- a/java/javax/servlet/annotation/ServletSecurity.java
+++ b/java/javax/servlet/annotation/ServletSecurity.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -29,7 +29,7 @@ import java.lang.annotation.Target;
  * The container applies constraints to the URL patterns mapped to each Servlet
  * which declares this annotation.<br />
  * <br />
- * 
+ *
  * @since Servlet 3.0
  */
 @Inherited
@@ -75,7 +75,7 @@ public @interface ServletSecurity {
     /**
      * The default constraint to apply to requests not handled by specific
      * method constraints
-     * 
+     *
      * @return http constraint
      */
     HttpConstraint value() default @HttpConstraint;
@@ -83,7 +83,7 @@ public @interface ServletSecurity {
     /**
      * An array of HttpMethodContraint objects to which the security constraint
      * will be applied
-     * 
+     *
      * @return array of http method constraint
      */
     HttpMethodConstraint[] httpMethodConstraints() default {};

==================================================
WebInitParam.java
index aaac99487d..08cbfdbd15 100644
--- a/java/javax/servlet/annotation/WebFilter.java
+++ b/java/javax/servlet/annotation/WebFilter.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,35 +27,35 @@ import javax.servlet.DispatcherType;
 /**
  * The annotation used to declare a Servlet {@link javax.servlet.Filter}. <br />
  * <br />
- * 
+ *
  * This annotation will be processed by the container during deployment, the
  * Filter class in which it is found will be created as per the configuration
  * and applied to the URL patterns, {@link javax.servlet.Servlet}s and
  * {@link javax.servlet.DispatcherType}s.<br />
  * <br/>
- * 
+ *
  * If the name attribute is not defined, the fully qualified name of the class
  * is used.<br/>
  * <br/>
- * 
+ *
  * At least one URL pattern MUST be declared in either the {@code value} or
  * {@code urlPattern} attribute of the annotation, but not both.<br/>
  * <br/>
- * 
+ *
  * The {@code value} attribute is recommended for use when the URL pattern is
  * the only attribute being set, otherwise the {@code urlPattern} attribute
  * should be used.<br />
  * <br />
- * 
+ *
  * The annotated class MUST implement {@link javax.servlet.Filter}.
- * 
+ *
  * E.g.
- * 
+ *
  * <code>@WebFilter("/path/*")</code><br />
  * <code>public class AnExampleFilter implements Filter { ... </code><br />
- * 
+ *
  * @since Servlet 3.0 (Section 8.1.2)
- * 
+ *
  */
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
@@ -99,7 +99,7 @@ public @interface WebFilter {
 
     /**
      * A convenience method, to allow extremely simple annotation of a class.
-     * 
+     *
      * @return array of URL patterns
      * @see #urlPatterns()
      */

==================================================
WebListener.java
index d4b7573365..e5fb73f64d 100644
--- a/java/javax/servlet/annotation/WebInitParam.java
+++ b/java/javax/servlet/annotation/WebInitParam.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,11 +28,11 @@ import java.lang.annotation.Target;
  * {@link javax.servlet.annotation.WebFilter} or
  * {@link javax.servlet.annotation.WebServlet} annotation.<br />
  * <br />
- * 
+ *
  * E.g.
  * <code>&amp;#064;WebServlet(name="TestServlet", urlPatterns={"/test"},initParams={&amp;#064;WebInitParam(name="test", value="true")})
  * public class TestServlet extends HttpServlet { ... </code><br />
- * 
+ *
  * @since Servlet 3.0
  */
 @Target({ElementType.TYPE})

==================================================
WebServlet.java
index eeed16d4cf..df822616d6 100644
--- a/java/javax/servlet/annotation/WebListener.java
+++ b/java/javax/servlet/annotation/WebListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,7 +26,7 @@ import java.lang.annotation.Target;
  * The annotation used to declare a listener for various types of event, in a
  * given web application context.<br />
  * <br />
- * 
+ *
  * The class annotated MUST implement one, (or more), of the following
  * interfaces: {@link javax.servlet.http.HttpSessionAttributeListener},
  * {@link javax.servlet.http.HttpSessionListener},
@@ -35,10 +35,10 @@ import java.lang.annotation.Target;
  * {@link javax.servlet.ServletRequestAttributeListener},
  * {@link javax.servlet.ServletRequestListener} <br />
  * <br />
- * 
+ *
  * E.g. <code>@WebListener</code><br />
  * <code>public TestListener implements ServletContextListener {</code><br />
- * 
+ *
  * @since Servlet 3.0
  */
 @Target({ElementType.TYPE})

==================================================
JspConfigDescriptor.java
index 53f9b4c02a..eebf8bacb9 100644
--- a/java/javax/servlet/annotation/WebServlet.java
+++ b/java/javax/servlet/annotation/WebServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,33 +25,33 @@ import java.lang.annotation.Target;
 /**
  * This annotation is used to declare the configuration of an
  * {@link javax.servlet.Servlet}. <br/>
- * 
+ *
  * If the name attribute is not defined, the fully qualified name of the class
  * is used.<br/>
  * <br/>
- * 
+ *
  * At least one URL pattern MUST be declared in either the {@code value} or
  * {@code urlPattern} attribute of the annotation, but not both.<br/>
  * <br/>
- * 
+ *
  * The {@code value} attribute is recommended for use when the URL pattern is
  * the only attribute being set, otherwise the {@code urlPattern} attribute
  * should be used.<br />
  * <br />
- * 
+ *
  * The class on which this annotation is declared MUST extend
  * {@link javax.servlet.http.HttpServlet}. <br />
  * <br />
- * 
+ *
  * E.g. <code>@WebServlet("/path")}<br />
  * public class TestServlet extends HttpServlet ... {</code><br />
- * 
+ *
  * E.g.
  * <code>@WebServlet(name="TestServlet", urlPatterns={"/path", "/alt"}) <br />
  * public class TestServlet extends HttpServlet ... {</code><br />
- * 
+ *
  * @since Servlet 3.0 (Section 8.1.1)
- * 
+ *
  */
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
@@ -65,7 +65,7 @@ public @interface WebServlet {
 
     /**
      * A convenience method, to allow extremely simple annotation of a class.
-     * 
+     *
      * @return array of URL patterns
      * @see #urlPatterns()
      */

==================================================
JspPropertyGroupDescriptor.java
index 8296d44ae9..27b3cc7f8b 100644
--- a/java/javax/servlet/descriptor/JspConfigDescriptor.java
+++ b/java/javax/servlet/descriptor/JspConfigDescriptor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
TaglibDescriptor.java
index 25c71a9285..ddee69b9b5 100644
--- a/java/javax/servlet/descriptor/JspPropertyGroupDescriptor.java
+++ b/java/javax/servlet/descriptor/JspPropertyGroupDescriptor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Cookie.java
index f930c5d585..b2e8e98c6f 100644
--- a/java/javax/servlet/descriptor/TaglibDescriptor.java
+++ b/java/javax/servlet/descriptor/TaglibDescriptor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
HttpServlet.java
index 829b242543..a14f2592db 100644
--- a/java/javax/servlet/http/Cookie.java
+++ b/java/javax/servlet/http/Cookie.java
@@ -50,7 +50,7 @@ import java.util.ResourceBundle;
  * This class supports both the Version 0 (by Netscape) and Version 1 (by RFC
  * 2109) cookie specifications. By default, cookies are created using Version 0
  * to ensure the best interoperability.
- * 
+ *
  * @author Various
  * @version $Version$
  */
@@ -96,7 +96,7 @@ public class Cookie implements Cloneable, Serializable {
      * By default, cookies are created according to the Netscape cookie
      * specification. The version can be changed with the
      * <code>setVersion</code> method.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the cookie
      * @param value
@@ -140,7 +140,7 @@ public class Cookie implements Cloneable, Serializable {
      * Specifies a comment that describes a cookie's purpose. The comment is
      * useful if the browser presents the cookie to the user. Comments are not
      * supported by Netscape Version 0 cookies.
-     * 
+     *
      * @param purpose
      *            a <code>String</code> specifying the comment to display to the
      *            user
@@ -153,7 +153,7 @@ public class Cookie implements Cloneable, Serializable {
     /**
      * Returns the comment describing the purpose of this cookie, or
      * <code>null</code> if the cookie has no comment.
-     * 
+     *
      * @return a <code>String</code> containing the comment, or
      *         <code>null</code> if none
      * @see #setComment
@@ -170,7 +170,7 @@ public class Cookie implements Cloneable, Serializable {
      * visible to servers in a specified Domain Name System (DNS) zone (for
      * example, <code>www.foo.com</code>, but not <code>a.b.foo.com</code>). By
      * default, cookies are only returned to the server that sent them.
-     * 
+     *
      * @param pattern
      *            a <code>String</code> containing the domain name within which
      *            this cookie is visible; form is according to RFC 2109
@@ -183,7 +183,7 @@ public class Cookie implements Cloneable, Serializable {
     /**
      * Returns the domain name set for this cookie. The form of the domain name
      * is set by RFC 2109.
-     * 
+     *
      * @return a <code>String</code> containing the domain name
      * @see #setDomain
      */
@@ -201,7 +201,7 @@ public class Cookie implements Cloneable, Serializable {
      * A negative value means that the cookie is not stored persistently and
      * will be deleted when the Web browser exits. A zero value causes the
      * cookie to be deleted.
-     * 
+     *
      * @param expiry
      *            an integer specifying the maximum age of the cookie in
      *            seconds; if negative, means the cookie is not stored; if zero,
@@ -216,7 +216,7 @@ public class Cookie implements Cloneable, Serializable {
      * Returns the maximum age of the cookie, specified in seconds, By default,
      * <code>-1</code> indicating the cookie will persist until browser
      * shutdown.
-     * 
+     *
      * @return an integer specifying the maximum age of the cookie in seconds; if
      *         negative, means the cookie persists until browser shutdown
      * @see #setMaxAge
@@ -237,7 +237,7 @@ public class Cookie implements Cloneable, Serializable {
      * <p>
      * Consult RFC 2109 (available on the Internet) for more information on
      * setting path names for cookies.
-     * 
+     *
      * @param uri
      *            a <code>String</code> specifying a path
      * @see #getPath
@@ -249,7 +249,7 @@ public class Cookie implements Cloneable, Serializable {
     /**
      * Returns the path on the server to which the browser returns this cookie.
      * The cookie is visible to all subpaths on the server.
-     * 
+     *
      * @return a <code>String</code> specifying a path that contains a servlet
      *         name, for example, <i>/catalog</i>
      * @see #setPath
@@ -263,7 +263,7 @@ public class Cookie implements Cloneable, Serializable {
      * secure protocol, such as HTTPS or SSL.
      * <p>
      * The default value is <code>false</code>.
-     * 
+     *
      * @param flag
      *            if <code>true</code>, sends the cookie from the browser to the
      *            server only when using a secure protocol; if
@@ -278,7 +278,7 @@ public class Cookie implements Cloneable, Serializable {
      * Returns <code>true</code> if the browser is sending cookies only over a
      * secure protocol, or <code>false</code> if the browser can send cookies
      * using any protocol.
-     * 
+     *
      * @return <code>true</code> if the browser uses a secure protocol;
      *         otherwise, <code>true</code>
      * @see #setSecure
@@ -290,7 +290,7 @@ public class Cookie implements Cloneable, Serializable {
     /**
      * Returns the name of the cookie. The name cannot be changed after
      * creation.
-     * 
+     *
      * @return a <code>String</code> specifying the cookie's name
      */
     public String getName() {
@@ -305,7 +305,7 @@ public class Cookie implements Cloneable, Serializable {
      * parentheses, equals signs, commas, double quotes, slashes, question
      * marks, at signs, colons, and semicolons. Empty values may not behave the
      * same way on all browsers.
-     * 
+     *
      * @param newValue
      *            a <code>String</code> specifying the new value
      * @see #getValue
@@ -317,7 +317,7 @@ public class Cookie implements Cloneable, Serializable {
 
     /**
      * Returns the value of the cookie.
-     * 
+     *
      * @return a <code>String</code> containing the cookie's present value
      * @see #setValue
      * @see Cookie
@@ -331,7 +331,7 @@ public class Cookie implements Cloneable, Serializable {
      * complies with RFC 2109, and version 0 complies with the original cookie
      * specification drafted by Netscape. Cookies provided by a browser use and
      * identify the browser's cookie version.
-     * 
+     *
      * @return 0 if the cookie complies with the original Netscape specification;
      *         1 if the cookie complies with RFC 2109
      * @see #setVersion
@@ -347,7 +347,7 @@ public class Cookie implements Cloneable, Serializable {
      * <p>
      * Since RFC 2109 is still somewhat new, consider version 1 as experimental;
      * do not use it yet on production sites.
-     * 
+     *
      * @param v
      *            0 if the cookie should comply with the original Netscape
      *            specification; 1 if the cookie should comply with RFC 2109
@@ -359,7 +359,7 @@ public class Cookie implements Cloneable, Serializable {
 
     // Note -- disabled for now to allow full Netscape compatibility
     // from RFC 2068, token special case characters
-    // 
+    //
     // private static final String tspecials = "()<>@,;:\\\"/[]?={} \t";
 
     private static final String tspecials = ",; ";

==================================================
HttpServletRequest.java
index 92ea07dfae..04be6d1b4d 100644
--- a/java/javax/servlet/http/HttpServlet.java
+++ b/java/javax/servlet/http/HttpServlet.java
@@ -35,7 +35,7 @@ import javax.servlet.ServletResponse;
 /**
  * Provides an abstract class to be subclassed to create
  * an HTTP servlet suitable for a Web site. A subclass of
- * <code>HttpServlet</code> must override at least 
+ * <code>HttpServlet</code> must override at least
  * one method, usually one of these:
  *
  * <ul>
@@ -43,10 +43,10 @@ import javax.servlet.ServletResponse;
  * <li> <code>doPost</code>, for HTTP POST requests
  * <li> <code>doPut</code>, for HTTP PUT requests
  * <li> <code>doDelete</code>, for HTTP DELETE requests
- * <li> <code>init</code> and <code>destroy</code>, 
+ * <li> <code>init</code> and <code>destroy</code>,
  * to manage resources that are held for the life of the servlet
  * <li> <code>getServletInfo</code>, which the servlet uses to
- * provide information about itself 
+ * provide information about itself
  * </ul>
  *
  * <p>There's almost no reason to override the <code>service</code>
@@ -55,15 +55,15 @@ import javax.servlet.ServletResponse;
  * for each HTTP request type (the <code>do</code><i>XXX</i>
  * methods listed above).
  *
- * <p>Likewise, there's almost no reason to override the 
+ * <p>Likewise, there's almost no reason to override the
  * <code>doOptions</code> and <code>doTrace</code> methods.
- * 
+ *
  * <p>Servlets typically run on multithreaded servers,
  * so be aware that a servlet must handle concurrent
  * requests and be careful to synchronize access to shared resources.
  * Shared resources include in-memory data such as
  * instance or class variables and external objects
- * such as files, database connections, and network 
+ * such as files, database connections, and network
  * connections.
  * See the
  * <a href="http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html">
@@ -87,24 +87,24 @@ public abstract class HttpServlet extends GenericServlet {
 
     private static final String HEADER_IFMODSINCE = "If-Modified-Since";
     private static final String HEADER_LASTMOD = "Last-Modified";
-    
+
     private static final String LSTRING_FILE =
         "javax.servlet.http.LocalStrings";
     private static ResourceBundle lStrings =
         ResourceBundle.getBundle(LSTRING_FILE);
-   
-    
+
+
     /**
      * Does nothing, because this is an abstract class.
      */
     public HttpServlet() {
         // NOOP
     }
-    
-    
+
+
     /**
      * Called by the server (via the <code>service</code> method) to
-     * allow a servlet to handle a GET request. 
+     * allow a servlet to handle a GET request.
      *
      * <p>Overriding this method to support a GET request also
      * automatically supports an HTTP HEAD request. A HEAD
@@ -112,7 +112,7 @@ public abstract class HttpServlet extends GenericServlet {
      * response, only the request header fields.
      *
      * <p>When overriding this method, read the request data,
-     * write the response headers, get the response's writer or 
+     * write the response headers, get the response's writer or
      * output stream object, and finally, write the response data.
      * It's best to include content type and encoding. When using
      * a <code>PrintWriter</code> object to return the response,
@@ -125,7 +125,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * <p>Where possible, set the Content-Length header (with the
      * {@link javax.servlet.ServletResponse#setContentLength} method),
-     * to allow the servlet container to use a persistent connection 
+     * to allow the servlet container to use a persistent connection
      * to return its response to the client, improving performance.
      * The content length is automatically set if the entire response fits
      * inside the response buffer.
@@ -141,10 +141,10 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * <p>The GET method should also be idempotent, meaning
      * that it can be safely repeated. Sometimes making a
-     * method safe also makes it idempotent. For example, 
+     * method safe also makes it idempotent. For example,
      * repeating queries is both safe and idempotent, but
      * buying a product online or modifying data is neither
-     * safe nor idempotent. 
+     * safe nor idempotent.
      *
      * <p>If the request is incorrectly formatted, <code>doGet</code>
      * returns an HTTP "Bad Request" message.
@@ -156,14 +156,14 @@ public abstract class HttpServlet extends GenericServlet {
      * @param resp  an {@link HttpServletResponse} object that
      *                  contains the response the servlet sends
      *                  to the client
-     * 
-     * @exception IOException   if an input or output error is 
+     *
+     * @exception IOException   if an input or output error is
      *                              detected when the servlet handles
      *                              the GET request
      *
      * @exception ServletException  if the request for the GET
      *                                  could not be handled
-     * 
+     *
      * @see javax.servlet.ServletResponse#setContentType
      */
     protected void doGet(HttpServletRequest req, HttpServletResponse resp)
@@ -191,7 +191,7 @@ public abstract class HttpServlet extends GenericServlet {
      * This makes browser and proxy caches work more effectively,
      * reducing the load on server and network resources.
      *
-     * @param req   the <code>HttpServletRequest</code> 
+     * @param req   the <code>HttpServletRequest</code>
      *                  object that is sent to the servlet
      *
      * @return  a <code>long</code> integer specifying
@@ -257,28 +257,28 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * <p>When overriding this method, read the request data,
      * write the response headers, get the response's writer or output
-     * stream object, and finally, write the response data. It's best 
+     * stream object, and finally, write the response data. It's best
      * to include content type and encoding. When using a
-     * <code>PrintWriter</code> object to return the response, set the 
-     * content type before accessing the <code>PrintWriter</code> object. 
+     * <code>PrintWriter</code> object to return the response, set the
+     * content type before accessing the <code>PrintWriter</code> object.
      *
      * <p>The servlet container must write the headers before committing the
-     * response, because in HTTP the headers must be sent before the 
+     * response, because in HTTP the headers must be sent before the
      * response body.
      *
      * <p>Where possible, set the Content-Length header (with the
      * {@link javax.servlet.ServletResponse#setContentLength} method),
-     * to allow the servlet container to use a persistent connection 
+     * to allow the servlet container to use a persistent connection
      * to return its response to the client, improving performance.
      * The content length is automatically set if the entire response fits
-     * inside the response buffer.  
+     * inside the response buffer.
      *
      * <p>When using HTTP 1.1 chunked encoding (which means that the response
-     * has a Transfer-Encoding header), do not set the Content-Length header. 
+     * has a Transfer-Encoding header), do not set the Content-Length header.
      *
      * <p>This method does not need to be either safe or idempotent.
      * Operations requested through POST can have side effects for
-     * which the user can be held accountable, for example, 
+     * which the user can be held accountable, for example,
      * updating stored data or buying items online.
      *
      * <p>If the HTTP POST request is incorrectly formatted,
@@ -292,8 +292,8 @@ public abstract class HttpServlet extends GenericServlet {
      * @param resp  an {@link HttpServletResponse} object that
      *                  contains the response the servlet sends
      *                  to the client
-     * 
-     * @exception IOException   if an input or output error is 
+     *
+     * @exception IOException   if an input or output error is
      *                              detected when the servlet handles
      *                              the request
      *
@@ -320,8 +320,8 @@ public abstract class HttpServlet extends GenericServlet {
      * Called by the server (via the <code>service</code> method)
      * to allow a servlet to handle a PUT request.
      *
-     * The PUT operation allows a client to 
-     * place a file on the server and is similar to 
+     * The PUT operation allows a client to
+     * place a file on the server and is similar to
      * sending a file by FTP.
      *
      * <p>When overriding this method, leave intact
@@ -377,7 +377,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * The DELETE operation allows a client to remove a document
      * or Web page from the server.
-     * 
+     *
      * <p>This method does not need to be either safe
      * or idempotent. Operations requested through
      * DELETE can have side effects for which users
@@ -396,7 +396,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * @param resp  the {@link HttpServletResponse} object that
      *                  contains the response the servlet returns
-     *                  to the client                                
+     *                  to the client
      *
      * @exception IOException   if an input or output error occurs
      *                              while the servlet is handling the
@@ -417,7 +417,7 @@ public abstract class HttpServlet extends GenericServlet {
             resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);
         }
     }
-    
+
 
     private static Method[] getAllDeclaredMethods(Class<?> c) {
 
@@ -427,7 +427,7 @@ public abstract class HttpServlet extends GenericServlet {
 
         Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());
         Method[] thisMethods = c.getDeclaredMethods();
-        
+
         if ((parentMethods != null) && (parentMethods.length > 0)) {
             Method[] allMethods =
                 new Method[parentMethods.length + thisMethods.length];
@@ -447,7 +447,7 @@ public abstract class HttpServlet extends GenericServlet {
      * Called by the server (via the <code>service</code> method)
      * to allow a servlet to handle a OPTIONS request.
      *
-     * The OPTIONS request determines which HTTP methods 
+     * The OPTIONS request determines which HTTP methods
      * the server supports and
      * returns an appropriate header. For example, if a servlet
      * overrides <code>doGet</code>, this method returns the
@@ -456,7 +456,7 @@ public abstract class HttpServlet extends GenericServlet {
      * <p><code>Allow: GET, HEAD, TRACE, OPTIONS</code>
      *
      * <p>There's no need to override this method unless the
-     * servlet implements new HTTP methods, beyond those 
+     * servlet implements new HTTP methods, beyond those
      * implemented by HTTP 1.1.
      *
      * @param req   the {@link HttpServletRequest} object that
@@ -465,7 +465,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * @param resp  the {@link HttpServletResponse} object that
      *                  contains the response the servlet returns
-     *                  to the client                                
+     *                  to the client
      *
      * @exception IOException   if an input or output error occurs
      *                              while the servlet is handling the
@@ -479,7 +479,7 @@ public abstract class HttpServlet extends GenericServlet {
         throws ServletException, IOException {
 
         Method[] methods = getAllDeclaredMethods(this.getClass());
-        
+
         boolean ALLOW_GET = false;
         boolean ALLOW_HEAD = false;
         boolean ALLOW_POST = false;
@@ -487,22 +487,22 @@ public abstract class HttpServlet extends GenericServlet {
         boolean ALLOW_DELETE = false;
         boolean ALLOW_TRACE = true;
         boolean ALLOW_OPTIONS = true;
-        
+
         for (int i=0; i<methods.length; i++) {
             Method m = methods[i];
-            
+
             if (m.getName().equals("doGet")) {
                 ALLOW_GET = true;
                 ALLOW_HEAD = true;
             }
-            if (m.getName().equals("doPost")) 
+            if (m.getName().equals("doPost"))
                 ALLOW_POST = true;
             if (m.getName().equals("doPut"))
                 ALLOW_PUT = true;
             if (m.getName().equals("doDelete"))
                 ALLOW_DELETE = true;
         }
-        
+
         String allow = null;
         if (ALLOW_GET)
             allow=METHOD_GET;
@@ -524,18 +524,18 @@ public abstract class HttpServlet extends GenericServlet {
         if (ALLOW_OPTIONS)
             if (allow==null) allow=METHOD_OPTIONS;
             else allow += ", " + METHOD_OPTIONS;
-        
+
         resp.setHeader("Allow", allow);
     }
-    
-    
+
+
     /**
      * Called by the server (via the <code>service</code> method)
      * to allow a servlet to handle a TRACE request.
      *
      * A TRACE returns the headers sent with the TRACE
      * request to the client, so that they can be used in
-     * debugging. There's no need to override this method. 
+     * debugging. There's no need to override this method.
      *
      * @param req   the {@link HttpServletRequest} object that
      *                  contains the request the client made of
@@ -543,7 +543,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * @param resp  the {@link HttpServletResponse} object that
      *                  contains the response the servlet returns
-     *                  to the client                                
+     *                  to the client
      *
      * @exception IOException   if an input or output error occurs
      *                              while the servlet is handling the
@@ -552,42 +552,42 @@ public abstract class HttpServlet extends GenericServlet {
      * @exception ServletException  if the request for the
      *                                  TRACE cannot be handled
      */
-    protected void doTrace(HttpServletRequest req, HttpServletResponse resp) 
+    protected void doTrace(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException
     {
-        
+
         int responseLength;
-        
+
         String CRLF = "\r\n";
         StringBuilder buffer = new StringBuilder("TRACE ").append(req.getRequestURI())
             .append(" ").append(req.getProtocol());
-        
+
         Enumeration<String> reqHeaderEnum = req.getHeaderNames();
-        
+
         while( reqHeaderEnum.hasMoreElements() ) {
             String headerName = reqHeaderEnum.nextElement();
             buffer.append(CRLF).append(headerName).append(": ")
-                .append(req.getHeader(headerName)); 
+                .append(req.getHeader(headerName));
         }
-        
+
         buffer.append(CRLF);
-        
+
         responseLength = buffer.length();
-        
+
         resp.setContentType("message/http");
         resp.setContentLength(responseLength);
         ServletOutputStream out = resp.getOutputStream();
-        out.print(buffer.toString());        
+        out.print(buffer.toString());
         out.close();
         return;
-    }                
+    }
 
 
     /**
      * Receives standard HTTP requests from the public
      * <code>service</code> method and dispatches
-     * them to the <code>do</code><i>XXX</i> methods defined in 
-     * this class. This method is an HTTP-specific version of the 
+     * them to the <code>do</code><i>XXX</i> methods defined in
+     * this class. This method is an HTTP-specific version of the
      * {@link javax.servlet.Servlet#service} method. There's no
      * need to override this method.
      *
@@ -597,7 +597,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * @param resp  the {@link HttpServletResponse} object that
      *                  contains the response the servlet returns
-     *                  to the client                                
+     *                  to the client
      *
      * @exception IOException   if an input or output error occurs
      *                              while the servlet is handling the
@@ -605,7 +605,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * @exception ServletException  if the HTTP request
      *                                  cannot be handled
-     * 
+     *
      * @see javax.servlet.Servlet#service
      */
     protected void service(HttpServletRequest req, HttpServletResponse resp)
@@ -639,19 +639,19 @@ public abstract class HttpServlet extends GenericServlet {
 
         } else if (method.equals(METHOD_POST)) {
             doPost(req, resp);
-            
+
         } else if (method.equals(METHOD_PUT)) {
-            doPut(req, resp);        
-            
+            doPut(req, resp);
+
         } else if (method.equals(METHOD_DELETE)) {
             doDelete(req, resp);
-            
+
         } else if (method.equals(METHOD_OPTIONS)) {
             doOptions(req,resp);
-            
+
         } else if (method.equals(METHOD_TRACE)) {
             doTrace(req,resp);
-            
+
         } else {
             //
             // Note that this means NO servlet supports whatever
@@ -662,7 +662,7 @@ public abstract class HttpServlet extends GenericServlet {
             Object[] errArgs = new Object[1];
             errArgs[0] = method;
             errMsg = MessageFormat.format(errMsg, errArgs);
-            
+
             resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);
         }
     }
@@ -682,20 +682,20 @@ public abstract class HttpServlet extends GenericServlet {
         if (lastModified >= 0)
             resp.setDateHeader(HEADER_LASTMOD, lastModified);
     }
-   
-    
+
+
     /**
      * Dispatches client requests to the protected
      * <code>service</code> method. There's no need to
      * override this method.
-     * 
+     *
      * @param req   the {@link HttpServletRequest} object that
      *                  contains the request the client made of
      *                  the servlet
      *
      * @param res   the {@link HttpServletResponse} object that
      *                  contains the response the servlet returns
-     *                  to the client                                
+     *                  to the client
      *
      * @exception IOException   if an input or output error occurs
      *                              while the servlet is handling the
@@ -703,7 +703,7 @@ public abstract class HttpServlet extends GenericServlet {
      *
      * @exception ServletException  if the HTTP request cannot
      *                                  be handled
-     * 
+     *
      * @see javax.servlet.Servlet#service
      */
     @Override
@@ -712,7 +712,7 @@ public abstract class HttpServlet extends GenericServlet {
 
         HttpServletRequest  request;
         HttpServletResponse response;
-        
+
         try {
             request = (HttpServletRequest) req;
             response = (HttpServletResponse) res;
@@ -779,7 +779,7 @@ class NoBodyResponse extends HttpServletResponseWrapper {
 /*
  * Servlet output stream that gobbles up all its data.
  */
- 
+
 // file private
 class NoBodyOutputStream extends ServletOutputStream {
 
@@ -814,7 +814,7 @@ class NoBodyOutputStream extends ServletOutputStream {
         } else {
             // XXX
             // isn't this really an IllegalArgumentException?
-            
+
             String msg = lStrings.getString("err.io.negativelength");
             throw new IOException(msg);
         }

==================================================
HttpServletRequestWrapper.java
index b1b0a7231b..969ce947fc 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -30,7 +30,7 @@ import javax.servlet.ServletRequest;
  * <p>
  * The servlet container creates an <code>HttpServletRequest</code> object and
  * passes it as an argument to the servlet's service methods (<code>doGet</code>, <code>doPost</code>, etc).
- * 
+ *
  * @author Various
  * @version $Version$
  */
@@ -62,7 +62,7 @@ public interface HttpServletRequest extends ServletRequest {
      * returned.
      * <p>
      * Same as the value of the CGI variable AUTH_TYPE.
-     * 
+     *
      * @return one of the static members BASIC_AUTH, FORM_AUTH, CLIENT_CERT_AUTH,
      *         DIGEST_AUTH (suitable for == comparison) or the
      *         container-specific string indicating the authentication scheme,
@@ -74,7 +74,7 @@ public interface HttpServletRequest extends ServletRequest {
      * Returns an array containing all of the <code>Cookie</code> objects the
      * client sent with this request. This method returns <code>null</code> if
      * no cookies were sent.
-     * 
+     *
      * @return an array of all the <code>Cookies</code> included with this
      *         request, or <code>null</code> if the request has no cookies
      */
@@ -91,7 +91,7 @@ public interface HttpServletRequest extends ServletRequest {
      * If the request did not have a header of the specified name, this method
      * returns -1. If the header can't be converted to a date, the method throws
      * an <code>IllegalArgumentException</code>.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of the header
      * @return a <code>long</code> value representing the date specified in the
@@ -110,7 +110,7 @@ public interface HttpServletRequest extends ServletRequest {
      * multiple headers with the same name, this method returns the first head
      * in the request. The header name is case insensitive. You can use this
      * method with any request header.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the header name
      * @return a <code>String</code> containing the value of the requested
@@ -130,7 +130,7 @@ public interface HttpServletRequest extends ServletRequest {
      * If the request did not include any headers of the specified name, this
      * method returns an empty <code>Enumeration</code>. The header name is case
      * insensitive. You can use this method with any request header.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the header name
      * @return an <code>Enumeration</code> containing the values of the requested
@@ -146,7 +146,7 @@ public interface HttpServletRequest extends ServletRequest {
      * <p>
      * Some servlet containers do not allow servlets to access headers using
      * this method, in which case this method returns <code>null</code>
-     * 
+     *
      * @return an enumeration of all the header names sent with this request; if
      *         the request has no headers, an empty enumeration; if the servlet
      *         container does not allow servlets to use this method,
@@ -161,7 +161,7 @@ public interface HttpServletRequest extends ServletRequest {
      * throws a <code>NumberFormatException</code>.
      * <p>
      * The header name is case insensitive.
-     * 
+     *
      * @param name
      *            a <code>String</code> specifying the name of a request header
      * @return an integer expressing the value of the request header or -1 if the
@@ -176,7 +176,7 @@ public interface HttpServletRequest extends ServletRequest {
      * Returns the name of the HTTP method with which this request was made, for
      * example, GET, POST, or PUT. Same as the value of the CGI variable
      * REQUEST_METHOD.
-     * 
+     *
      * @return a <code>String</code> specifying the name of the method with
      *         which this request was made
      */
@@ -192,7 +192,7 @@ public interface HttpServletRequest extends ServletRequest {
      * information.
      * <p>
      * Same as the value of the CGI variable PATH_INFO.
-     * 
+     *
      * @return a <code>String</code>, decoded by the web container, specifying
      *         extra path information that comes after the servlet path but
      *         before the query string in the request URL; or <code>null</code>
@@ -209,7 +209,7 @@ public interface HttpServletRequest extends ServletRequest {
      * <code>null</code> or the servlet container cannot translate the virtual
      * path to a real path for any reason (such as when the web application is
      * executed from an archive). The web container does not decode this string.
-     * 
+     *
      * @return a <code>String</code> specifying the real path, or
      *         <code>null</code> if the URL does not have any extra path
      *         information
@@ -222,7 +222,7 @@ public interface HttpServletRequest extends ServletRequest {
      * starts with a "/" character but does not end with a "/" character. For
      * servlets in the default (root) context, this method returns "". The
      * container does not decode this string.
-     * 
+     *
      * @return a <code>String</code> specifying the portion of the request URI
      *         that indicates the context of the request
      */
@@ -232,7 +232,7 @@ public interface HttpServletRequest extends ServletRequest {
      * Returns the query string that is contained in the request URL after the
      * path. This method returns <code>null</code> if the URL does not have a
      * query string. Same as the value of the CGI variable QUERY_STRING.
-     * 
+     *
      * @return a <code>String</code> containing the query string or
      *         <code>null</code> if the URL contains no query string. The value
      *         is not decoded by the container.
@@ -245,7 +245,7 @@ public interface HttpServletRequest extends ServletRequest {
      * authenticated. Whether the user name is sent with each subsequent request
      * depends on the browser and type of authentication. Same as the value of
      * the CGI variable REMOTE_USER.
-     * 
+     *
      * @return a <code>String</code> specifying the login of the user making
      *         this request, or <code>null</code> if the user login is not known
      */
@@ -256,7 +256,7 @@ public interface HttpServletRequest extends ServletRequest {
      * in the specified logical "role". Roles and role membership can be defined
      * using deployment descriptors. If the user has not been authenticated, the
      * method returns <code>false</code>.
-     * 
+     *
      * @param role
      *            a <code>String</code> specifying the name of the role
      * @return a <code>boolean</code> indicating whether the user making this
@@ -269,7 +269,7 @@ public interface HttpServletRequest extends ServletRequest {
      * Returns a <code>java.security.Principal</code> object containing the name
      * of the current authenticated user. If the user has not been
      * authenticated, the method returns <code>null</code>.
-     * 
+     *
      * @return a <code>java.security.Principal</code> containing the name of the
      *         user making this request; <code>null</code> if the user has not
      *         been authenticated
@@ -280,7 +280,7 @@ public interface HttpServletRequest extends ServletRequest {
      * Returns the session ID specified by the client. This may not be the same
      * as the ID of the current valid session for this request. If the client
      * did not specify a session ID, this method returns <code>null</code>.
-     * 
+     *
      * @return a <code>String</code> specifying the session ID, or
      *         <code>null</code> if the request did not specify a session ID
      * @see #isRequestedSessionIdValid
@@ -311,7 +311,7 @@ public interface HttpServletRequest extends ServletRequest {
      * <p>
      * To reconstruct an URL with a scheme and host, use
      * {@link HttpUtils#getRequestURL}.
-     * 
+     *
      * @return a <code>String</code> containing the part of the URL from the
      *         protocol name up to the query string
      * @see HttpUtils#getRequestURL
@@ -328,7 +328,7 @@ public interface HttpServletRequest extends ServletRequest {
      * <p>
      * This method is useful for creating redirect messages and for reporting
      * errors.
-     * 
+     *
      * @return a <code>StringBuffer</code> object containing the reconstructed
      *         URL
      */
@@ -342,7 +342,7 @@ public interface HttpServletRequest extends ServletRequest {
      * <p>
      * This method will return an empty string ("") if the servlet used to
      * process this request was matched using the "/*" pattern.
-     * 
+     *
      * @return a <code>String</code> containing the name or path of the servlet
      *         being called, as specified in the request URL, decoded, or an
      *         empty string if the servlet used to process the request is
@@ -363,7 +363,7 @@ public interface HttpServletRequest extends ServletRequest {
      * cookies to maintain session integrity and is asked to create a new
      * session when the response is committed, an IllegalStateException is
      * thrown.
-     * 
+     *
      * @param create
      *            <code>true</code> to create a new session for this request if
      *            necessary; <code>false</code> to return <code>null</code> if
@@ -378,7 +378,7 @@ public interface HttpServletRequest extends ServletRequest {
     /**
      * Returns the current session associated with this request, or if the
      * request does not have a session, creates one.
-     * 
+     *
      * @return the <code>HttpSession</code> associated with this request
      * @see #getSession(boolean)
      */
@@ -386,7 +386,7 @@ public interface HttpServletRequest extends ServletRequest {
 
     /**
      * Checks whether the requested session ID is still valid.
-     * 
+     *
      * @return <code>true</code> if this request has an id for a valid session
      *         in the current session context; <code>false</code> otherwise
      * @see #getRequestedSessionId
@@ -397,7 +397,7 @@ public interface HttpServletRequest extends ServletRequest {
 
     /**
      * Checks whether the requested session ID came in as a cookie.
-     * 
+     *
      * @return <code>true</code> if the session ID came in as a cookie;
      *         otherwise, <code>false</code>
      * @see #getSession
@@ -407,7 +407,7 @@ public interface HttpServletRequest extends ServletRequest {
     /**
      * Checks whether the requested session ID came in as part of the request
      * URL.
-     * 
+     *
      * @return <code>true</code> if the session ID came in as part of a URL;
      *         otherwise, <code>false</code>
      * @see #getSession
@@ -454,7 +454,7 @@ public interface HttpServletRequest extends ServletRequest {
 
     /**
      * Return a collection of all uploaded Parts.
-     * 
+     *
      * @return A collection of all uploaded Parts.
      * @throws IOException
      *             if an I/O error occurs
@@ -470,7 +470,7 @@ public interface HttpServletRequest extends ServletRequest {
     /**
      * Gets the named Part or null if the Part does not exist. Triggers upload
      * of all Parts.
-     * 
+     *
      * @param name
      * @return The named Part or null if the Part does not exist
      * @throws IOException

==================================================
HttpServletResponse.java
index 1d3b3290e5..ce98eb2ce6 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -28,7 +28,7 @@ import javax.servlet.ServletRequestWrapper;
  * can be subclassed by developers wishing to adapt the request to a Servlet.
  * This class implements the Wrapper or Decorator pattern. Methods default to
  * calling through to the wrapped request object.
- * 
+ *
  * @see javax.servlet.http.HttpServletRequest
  * @since v 2.3
  */
@@ -37,7 +37,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
 
     /**
      * Constructs a request object wrapping the given request.
-     * 
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the request is null
      */
@@ -268,7 +268,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * The default behavior of this method is to return
      * isRequestedSessionIdFromUrl() on the wrapped request object.
-     * 
+     *
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
     @Override

==================================================
HttpServletResponseWrapper.java
index c111a4d394..5ea6601042 100644
--- a/java/javax/servlet/http/HttpServletResponse.java
+++ b/java/javax/servlet/http/HttpServletResponse.java
@@ -28,7 +28,7 @@ import javax.servlet.ServletResponse;
  * <p>
  * The servlet container creates an <code>HttpServletResponse</code> object and
  * passes it as an argument to the servlet's service methods (<code>doGet</code>, <code>doPost</code>, etc).
- * 
+ *
  * @author Various
  * @version $Version$
  * @see javax.servlet.ServletResponse
@@ -38,7 +38,7 @@ public interface HttpServletResponse extends ServletResponse {
     /**
      * Adds the specified cookie to the response. This method can be called
      * multiple times to set more than one cookie.
-     * 
+     *
      * @param cookie
      *            the Cookie to return to the client
      */
@@ -47,7 +47,7 @@ public interface HttpServletResponse extends ServletResponse {
     /**
      * Returns a boolean indicating whether the named response header has
      * already been set.
-     * 
+     *
      * @param name
      *            the header name
      * @return <code>true</code> if the named response header has already been
@@ -65,7 +65,7 @@ public interface HttpServletResponse extends ServletResponse {
      * For robust session tracking, all URLs emitted by a servlet should be run
      * through this method. Otherwise, URL rewriting cannot be used with
      * browsers which do not support cookies.
-     * 
+     *
      * @param url
      *            the url to be encoded.
      * @return the encoded URL if encoding is needed; the unchanged URL
@@ -85,7 +85,7 @@ public interface HttpServletResponse extends ServletResponse {
      * All URLs sent to the <code>HttpServletResponse.sendRedirect</code> method
      * should be run through this method. Otherwise, URL rewriting cannot be
      * used with browsers which do not support cookies.
-     * 
+     *
      * @param url
      *            the url to be encoded.
      * @return the encoded URL if encoding is needed; the unchanged URL
@@ -129,7 +129,7 @@ public interface HttpServletResponse extends ServletResponse {
      * If the response has already been committed, this method throws an
      * IllegalStateException. After using this method, the response should be
      * considered to be committed and should not be written to.
-     * 
+     *
      * @param sc
      *            the error status code
      * @param msg
@@ -148,7 +148,7 @@ public interface HttpServletResponse extends ServletResponse {
      * If the response has already been committed, this method throws an
      * IllegalStateException. After using this method, the response should be
      * considered to be committed and should not be written to.
-     * 
+     *
      * @param sc
      *            the error status code
      * @exception IOException
@@ -170,7 +170,7 @@ public interface HttpServletResponse extends ServletResponse {
      * If the response has already been committed, this method throws an
      * IllegalStateException. After using this method, the response should be
      * considered to be committed and should not be written to.
-     * 
+     *
      * @param location
      *            the redirect location URL
      * @exception IOException
@@ -187,7 +187,7 @@ public interface HttpServletResponse extends ServletResponse {
      * already been set, the new value overwrites the previous one. The
      * <code>containsHeader</code> method can be used to test for the presence
      * of a header before setting its value.
-     * 
+     *
      * @param name
      *            the name of the header to set
      * @param date
@@ -201,7 +201,7 @@ public interface HttpServletResponse extends ServletResponse {
      * Adds a response header with the given name and date-value. The date is
      * specified in terms of milliseconds since the epoch. This method allows
      * response headers to have multiple values.
-     * 
+     *
      * @param name
      *            the name of the header to set
      * @param date
@@ -215,7 +215,7 @@ public interface HttpServletResponse extends ServletResponse {
      * already been set, the new value overwrites the previous one. The
      * <code>containsHeader</code> method can be used to test for the presence
      * of a header before setting its value.
-     * 
+     *
      * @param name
      *            the name of the header
      * @param value
@@ -230,7 +230,7 @@ public interface HttpServletResponse extends ServletResponse {
     /**
      * Adds a response header with the given name and value. This method allows
      * response headers to have multiple values.
-     * 
+     *
      * @param name
      *            the name of the header
      * @param value
@@ -246,7 +246,7 @@ public interface HttpServletResponse extends ServletResponse {
      * header had already been set, the new value overwrites the previous one.
      * The <code>containsHeader</code> method can be used to test for the
      * presence of a header before setting its value.
-     * 
+     *
      * @param name
      *            the name of the header
      * @param value
@@ -259,7 +259,7 @@ public interface HttpServletResponse extends ServletResponse {
     /**
      * Adds a response header with the given name and integer value. This method
      * allows response headers to have multiple values.
-     * 
+     *
      * @param name
      *            the name of the header
      * @param value
@@ -277,7 +277,7 @@ public interface HttpServletResponse extends ServletResponse {
      * <p>
      * The container clears the buffer and sets the Location header, preserving
      * cookies and other headers.
-     * 
+     *
      * @param sc
      *            the status code
      * @see #sendError
@@ -286,7 +286,7 @@ public interface HttpServletResponse extends ServletResponse {
 
     /**
      * Sets the status code and message for this response.
-     * 
+     *
      * @param sc
      *            the status code
      * @param sm

==================================================
HttpSession.java
index 516290656f..22240de845 100644
--- a/java/javax/servlet/http/HttpServletResponseWrapper.java
+++ b/java/javax/servlet/http/HttpServletResponseWrapper.java
@@ -26,7 +26,7 @@ import javax.servlet.ServletResponseWrapper;
  * that can be subclassed by developers wishing to adapt the response from a
  * Servlet. This class implements the Wrapper or Decorator pattern. Methods
  * default to calling through to the wrapped response object.
- * 
+ *
  * @author Various
  * @version $Version$
  * @since v 2.3
@@ -37,7 +37,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
 
     /**
      * Constructs a response adaptor wrapping the given response.
-     * 
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the response is null
      */
@@ -88,7 +88,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * The default behavior of this method is to call encodeUrl(String url) on
      * the wrapped response object.
-     * 
+     *
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
     @Override
@@ -101,7 +101,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * The default behavior of this method is to return encodeRedirectUrl(String
      * url) on the wrapped response object.
-     * 
+     *
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
     @Override
@@ -204,7 +204,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * The default behavior of this method is to call setStatus(int sc, String
      * sm) on the wrapped response object.
-     * 
+     *
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
     @Override

==================================================
HttpSessionActivationListener.java
index 60f98b16aa..54470db6a5 100644
--- a/java/javax/servlet/http/HttpSession.java
+++ b/java/javax/servlet/http/HttpSession.java
@@ -60,7 +60,7 @@ import javax.servlet.ServletContext;
  * Session information is scoped only to the current web application (
  * <code>ServletContext</code>), so information stored in one context will not
  * be directly visible in another.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see HttpSessionBindingListener
@@ -71,7 +71,7 @@ public interface HttpSession {
     /**
      * Returns the time when this session was created, measured in milliseconds
      * since midnight January 1, 1970 GMT.
-     * 
+     *
      * @return a <code>long</code> specifying when this session was created,
      *         expressed in milliseconds since 1/1/1970 GMT
      * @exception IllegalStateException
@@ -83,7 +83,7 @@ public interface HttpSession {
      * Returns a string containing the unique identifier assigned to this
      * session. The identifier is assigned by the servlet container and is
      * implementation dependent.
-     * 
+     *
      * @return a string specifying the identifier assigned to this session
      * @exception IllegalStateException
      *                if this method is called on an invalidated session
@@ -97,7 +97,7 @@ public interface HttpSession {
      * <p>
      * Actions that your application takes, such as getting or setting a value
      * associated with the session, do not affect the access time.
-     * 
+     *
      * @return a <code>long</code> representing the last time the client sent a
      *         request associated with this session, expressed in milliseconds
      *         since 1/1/1970 GMT
@@ -108,7 +108,7 @@ public interface HttpSession {
 
     /**
      * Returns the ServletContext to which this session belongs.
-     * 
+     *
      * @return The ServletContext object for the web application
      * @since 2.3
      */
@@ -118,7 +118,7 @@ public interface HttpSession {
      * Specifies the time, in seconds, between client requests before the
      * servlet container will invalidate this session. A negative time indicates
      * the session should never timeout.
-     * 
+     *
      * @param interval
      *            An integer specifying the number of seconds
      */
@@ -130,7 +130,7 @@ public interface HttpSession {
      * the servlet container will invalidate the session. The maximum time
      * interval can be set with the <code>setMaxInactiveInterval</code> method.
      * A negative time indicates the session should never timeout.
-     * 
+     *
      * @return an integer specifying the number of seconds this session remains
      *         open between client requests
      * @see #setMaxInactiveInterval
@@ -149,7 +149,7 @@ public interface HttpSession {
     /**
      * Returns the object bound with the specified name in this session, or
      * <code>null</code> if no object is bound under the name.
-     * 
+     *
      * @param name
      *            a string specifying the name of the object
      * @return the object with the specified name
@@ -174,7 +174,7 @@ public interface HttpSession {
     /**
      * Returns an <code>Enumeration</code> of <code>String</code> objects
      * containing the names of all the objects bound to this session.
-     * 
+     *
      * @return an <code>Enumeration</code> of <code>String</code> objects
      *         specifying the names of all the objects bound to this session
      * @exception IllegalStateException
@@ -210,7 +210,7 @@ public interface HttpSession {
      * <p>
      * If the value passed in is null, this has the same effect as calling
      * <code>removeAttribute()<code>.
-     * 
+     *
      * @param name
      *            the name to which the object is bound; cannot be null
      * @param value
@@ -244,7 +244,7 @@ public interface HttpSession {
      * <code>HttpSessionBindingListener.valueUnbound</code>. The container then
      * notifies any <code>HttpSessionAttributeListener</code>s in the web
      * application.
-     * 
+     *
      * @param name
      *            the name of the object to remove from this session
      * @exception IllegalStateException
@@ -266,7 +266,7 @@ public interface HttpSession {
 
     /**
      * Invalidates this session then unbinds any objects bound to it.
-     * 
+     *
      * @exception IllegalStateException
      *                if this method is called on an already invalidated session
      */
@@ -277,7 +277,7 @@ public interface HttpSession {
      * session or if the client chooses not to join the session. For example, if
      * the server used only cookie-based sessions, and the client had disabled
      * the use of cookies, then a session would be new on each request.
-     * 
+     *
      * @return <code>true</code> if the server has created a session, but the
      *         client has not yet joined
      * @exception IllegalStateException

==================================================
HttpSessionAttributeListener.java
index 99a9f03db1..eace111e74 100644
--- a/java/javax/servlet/http/HttpSessionActivationListener.java
+++ b/java/javax/servlet/http/HttpSessionActivationListener.java
@@ -26,12 +26,12 @@ import java.util.EventListener;
     **
     * @since 2.3
     */
-    
-public interface HttpSessionActivationListener extends EventListener { 
+
+public interface HttpSessionActivationListener extends EventListener {
 
     /** Notification that the session is about to be passivated.*/
-    public void sessionWillPassivate(HttpSessionEvent se); 
+    public void sessionWillPassivate(HttpSessionEvent se);
     /** Notification that the session has just been activated.*/
     public void sessionDidActivate(HttpSessionEvent se);
-} 
+}
 

==================================================
HttpSessionBindingEvent.java
index 05554a1cc5..0c8f9caa6a 100644
--- a/java/javax/servlet/http/HttpSessionAttributeListener.java
+++ b/java/javax/servlet/http/HttpSessionAttributeListener.java
@@ -21,7 +21,7 @@ import java.util.EventListener;
 /**
  * This listener interface can be implemented in order to get notifications of
  * changes to the attribute lists of sessions within this web application.
- * 
+ *
  * @since v 2.3
  */
 public interface HttpSessionAttributeListener extends EventListener {

==================================================
HttpSessionBindingListener.java
index 3501fcafec..0392213716 100644
--- a/java/javax/servlet/http/HttpSessionBindingEvent.java
+++ b/java/javax/servlet/http/HttpSessionBindingEvent.java
@@ -27,7 +27,7 @@ package javax.servlet.http;
  * The session binds the object by a call to
  * <code>HttpSession.setAttribute</code> and unbinds the object by a call to
  * <code>HttpSession.removeAttribute</code>.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see HttpSession
@@ -48,7 +48,7 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
      * Constructs an event that notifies an object that it has been bound to or
      * unbound from a session. To receive the event, the object must implement
      * {@link HttpSessionBindingListener}.
-     * 
+     *
      * @param session
      *            the session to which the object is bound or unbound
      * @param name
@@ -66,7 +66,7 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
      * Constructs an event that notifies an object that it has been bound to or
      * unbound from a session. To receive the event, the object must implement
      * {@link HttpSessionBindingListener}.
-     * 
+     *
      * @param session
      *            the session to which the object is bound or unbound
      * @param name
@@ -90,7 +90,7 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
     /**
      * Returns the name with which the attribute is bound to or unbound from the
      * session.
-     * 
+     *
      * @return a string specifying the name with which the object is bound to or
      *         unbound from the session
      */
@@ -104,7 +104,7 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
      * attribute. If the attribute was removed (or unbound), this is the value
      * of the removed attribute. If the attribute was replaced, this is the old
      * value of the attribute.
-     * 
+     *
      * @since 2.3
      */
     public Object getValue() {

==================================================
HttpSessionEvent.java
index 121ca1ab80..323f32876d 100644
--- a/java/javax/servlet/http/HttpSessionBindingListener.java
+++ b/java/javax/servlet/http/HttpSessionBindingListener.java
@@ -25,7 +25,7 @@ import java.util.EventListener;
  * This may be as a result of a servlet programmer explicitly unbinding an
  * attribute from a session, due to a session being invalidated, or due to a
  * session timing out.
- * 
+ *
  * @author Various
  * @version $Version$
  * @see HttpSession
@@ -36,7 +36,7 @@ public interface HttpSessionBindingListener extends EventListener {
     /**
      * Notifies the object that it is being bound to a session and identifies
      * the session.
-     * 
+     *
      * @param event
      *            the event that identifies the session
      * @see #valueUnbound
@@ -46,7 +46,7 @@ public interface HttpSessionBindingListener extends EventListener {
     /**
      * Notifies the object that it is being unbound from a session and
      * identifies the session.
-     * 
+     *
      * @param event
      *            the event that identifies the session
      * @see #valueBound

==================================================
HttpSessionListener.java
index 79a34c5534..ef83877ffd 100644
--- a/java/javax/servlet/http/HttpSessionEvent.java
+++ b/java/javax/servlet/http/HttpSessionEvent.java
@@ -19,7 +19,7 @@ package javax.servlet.http;
 /**
  * This is the class representing event notifications for changes to sessions
  * within a web application.
- * 
+ *
  * @since v 2.3
  */
 public class HttpSessionEvent extends java.util.EventObject {

==================================================
HttpUtils.java
index f7f862c58f..a0f1009393 100644
--- a/java/javax/servlet/http/HttpSessionListener.java
+++ b/java/javax/servlet/http/HttpSessionListener.java
@@ -23,7 +23,7 @@ import java.util.EventListener;
  * active sessions in a web application. To receive notification events, the
  * implementation class must be configured in the deployment descriptor for the
  * web application.
- * 
+ *
  * @see HttpSessionEvent
  * @since v 2.3
  */
@@ -31,7 +31,7 @@ public interface HttpSessionListener extends EventListener {
 
     /**
      * Notification that a session was created.
-     * 
+     *
      * @param se
      *            the notification event
      */
@@ -39,7 +39,7 @@ public interface HttpSessionListener extends EventListener {
 
     /**
      * Notification that a session is about to be invalidated.
-     * 
+     *
      * @param se
      *            the notification event
      */

==================================================
Part.java
index 47b8dd78a5..18fd1c09a1 100644
--- a/java/javax/servlet/http/LocalStrings_fr.properties
+++ b/java/javax/servlet/http/LocalStrings_fr.properties
@@ -25,4 +25,4 @@ http.method_not_implemented=Le m\u00e9thode {0} n''est pas d\u00e9finie dans la
 http.method_get_not_supported=La m\u00e9thode HTTP GET n''est pas support\u00e9e par cette URL
 http.method_post_not_supported=La m\u00e9thode HTTP POST n''est pas support\u00e9e par cette URL
 http.method_put_not_supported=La m\u00e9thode HTTP PUT n''est pas support\u00e9e par cette URL
-http.method_delete_not_supported=La m\u00e9thode HTTP DELETE n''est pas support\u00e9e par cette URL 
+http.method_delete_not_supported=La m\u00e9thode HTTP DELETE n''est pas support\u00e9e par cette URL

==================================================
ErrorData.java
index 3e60e406a1..670806df44 100644
--- a/java/javax/servlet/http/Part.java
+++ b/java/javax/servlet/http/Part.java
@@ -31,7 +31,7 @@ public interface Part {
     public long getSize();
     public void write(String fileName) throws IOException;
     public void delete() throws IOException;
-    
+
     /**
      * Obtains the value of the specified mime header for the part.
      * @param name Header name

==================================================
HttpJspPage.java
index a517ad79d8..45615fcffa 100644
--- a/java/javax/servlet/jsp/ErrorData.java
+++ b/java/javax/servlet/jsp/ErrorData.java
@@ -21,7 +21,7 @@ package javax.servlet.jsp;
  * contained in this instance is meaningless if not used in the context of an
  * error page. To indicate a JSP is an error page, the page author must set the
  * isErrorPage attribute of the page directive to "true".
- * 
+ *
  * @see PageContext#getErrorData
  * @since 2.0
  */
@@ -34,7 +34,7 @@ public final class ErrorData {
 
     /**
      * Creates a new ErrorData object.
-     * 
+     *
      * @param throwable
      *            The Throwable that is the cause of the error
      * @param statusCode
@@ -54,7 +54,7 @@ public final class ErrorData {
 
     /**
      * Returns the Throwable that caused the error.
-     * 
+     *
      * @return The Throwable that caused the error
      */
     public Throwable getThrowable() {
@@ -63,7 +63,7 @@ public final class ErrorData {
 
     /**
      * Returns the status code of the error.
-     * 
+     *
      * @return The status code of the error
      */
     public int getStatusCode() {
@@ -72,7 +72,7 @@ public final class ErrorData {
 
     /**
      * Returns the request URI.
-     * 
+     *
      * @return The request URI
      */
     public String getRequestURI() {
@@ -81,7 +81,7 @@ public final class ErrorData {
 
     /**
      * Returns the name of the servlet invoked.
-     * 
+     *
      * @return The name of the servlet invoked
      */
     public String getServletName() {

==================================================
JspApplicationContext.java
index 0351a09ff4..1ee74d226b 100644
--- a/java/javax/servlet/jsp/HttpJspPage.java
+++ b/java/javax/servlet/jsp/HttpJspPage.java
@@ -14,7 +14,7 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
- 
+
 package javax.servlet.jsp;
 
 import java.io.IOException;
@@ -31,7 +31,7 @@ import javax.servlet.http.HttpServletResponse;
  * The behaviour is identical to that of the JspPage, except for the signature
  * of the _jspService method, which is now expressible in the Java type
  * system and included explicitly in the interface.
- * 
+ *
  * @see JspPage
  */
 
@@ -48,8 +48,8 @@ public interface HttpJspPage extends JspPage {
      *
      * @param request Provides client request information to the JSP.
      * @param response Assists the JSP in sending a response to the client.
-     * @throws ServletException Thrown if an error occurred during the 
-     *     processing of the JSP and that the container should take 
+     * @throws ServletException Thrown if an error occurred during the
+     *     processing of the JSP and that the container should take
      *     appropriate action to clean up the request.
      * @throws IOException Thrown if an error occurred while writing the
      *     response for this page.

==================================================
JspContext.java
index 10817e0dd4..5e31de97ed 100644
--- a/java/javax/servlet/jsp/JspApplicationContext.java
+++ b/java/javax/servlet/jsp/JspApplicationContext.java
@@ -24,7 +24,7 @@ import javax.el.ExpressionFactory;
  * <p>
  * Stores <i>application</i>-scoped information for the JSP container.
  * </p>
- * 
+ *
  * @since 2.1
  */
 public interface JspApplicationContext {
@@ -39,7 +39,7 @@ public interface JspApplicationContext {
      * reference to the <code>JspContext</code> under
      * <code>JspContext.class</code>.
      * </p>
-     * 
+     *
      * @param listener
      */
     public void addELContextListener(ELContextListener listener);
@@ -61,7 +61,7 @@ public interface JspApplicationContext {
      * <li><code>ScopedAttributeELResolver</code></li>
      * </ul>
      * </p>
-     * 
+     *
      * @param resolver
      *            an additional resolver
      * @throws IllegalStateException
@@ -75,7 +75,7 @@ public interface JspApplicationContext {
      * Returns the JSP container's <code>ExpressionFactory</code> implementation
      * for EL use.
      * </p>
-     * 
+     *
      * @return an <code>ExpressionFactory</code> implementation
      */
     public ExpressionFactory getExpressionFactory();

==================================================
JspEngineInfo.java
index 3898319679..07c82fe42c 100644
--- a/java/javax/servlet/jsp/JspContext.java
+++ b/java/javax/servlet/jsp/JspContext.java
@@ -13,7 +13,7 @@
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-*/ 
+*/
 package javax.servlet.jsp;
 
 import java.util.Enumeration;
@@ -22,23 +22,23 @@ import javax.el.ELContext;
 
 /**
  * <p>
- * <code>JspContext</code> serves as the base class for the 
+ * <code>JspContext</code> serves as the base class for the
  * PageContext class and abstracts all information that is not specific
  * to servlets.  This allows for Simple Tag Extensions to be used
  * outside of the context of a request/response Servlet.
  * <p>
- * The JspContext provides a number of facilities to the 
+ * The JspContext provides a number of facilities to the
  * page/component author and page implementor, including:
  * <ul>
  * <li>a single API to manage the various scoped namespaces
  * <li>a mechanism to obtain the JspWriter for output
- * <li>a mechanism to expose page directive attributes to the 
+ * <li>a mechanism to expose page directive attributes to the
  *     scripting environment
  * </ul>
  *
  * <p><B>Methods Intended for Container Generated Code</B>
  * <p>
- * The following methods enable the <B>management of nested</B> JspWriter 
+ * The following methods enable the <B>management of nested</B> JspWriter
  * streams to implement Tag Extensions: <code>pushBody()</code> and
  * <code>popBody()</code>
  *
@@ -52,15 +52,15 @@ import javax.el.ELContext;
  * The methods are:
  * <code>setAttribute()</code>,  <code>getAttribute()</code>,
  * <code>findAttribute()</code>,  <code>removeAttribute()</code>,
- * <code>getAttributesScope()</code> and 
+ * <code>getAttributesScope()</code> and
  * <code>getAttributeNamesInScope()</code>.
- * 
+ *
  * <p>
  * The following methods provide <B>convenient access</B> to implicit objects:
  * <code>getOut()</code>
  *
  * <p>
- * The following methods provide <B>programmatic access</b> to the 
+ * The following methods provide <B>programmatic access</b> to the
  * Expression Language evaluator:
  * <code>getExpressionEvaluator()</code>, <code>getVariableResolver()</code>
  *
@@ -70,17 +70,17 @@ import javax.el.ELContext;
 public abstract class JspContext {
 
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public JspContext() {
         // NOOP by default
     }
-    
-    /** 
+
+    /**
      * Register the name and value specified with page scope semantics.
-     * If the value passed in is <code>null</code>, this has the same 
-     * effect as calling 
+     * If the value passed in is <code>null</code>, this has the same
+     * effect as calling
      * <code>removeAttribute( name, PageContext.PAGE_SCOPE )</code>.
      *
      * @param name the name of the attribute to set
@@ -92,19 +92,19 @@ public abstract class JspContext {
     public abstract void setAttribute(String name, Object value);
 
     /**
-     * Register the name and value specified with appropriate 
-     * scope semantics.  If the value passed in is <code>null</code>, 
+     * Register the name and value specified with appropriate
+     * scope semantics.  If the value passed in is <code>null</code>,
      * this has the same effect as calling
      * <code>removeAttribute( name, scope )</code>.
-     * 
+     *
      * @param name the name of the attribute to set
      * @param value the object to associate with the name, or null if
      *     the attribute is to be removed from the specified scope.
      * @param scope the scope with which to associate the name/object
-     * 
+     *
      * @throws NullPointerException if the name is null
      * @throws IllegalArgumentException if the scope is invalid
-     * @throws IllegalStateException if the scope is 
+     * @throws IllegalStateException if the scope is
      *     PageContext.SESSION_SCOPE but the page that was requested
      *     does not participate in a session or the session has been
      *     invalidated.
@@ -117,9 +117,9 @@ public abstract class JspContext {
      * if not found.
      *
      * @param name the name of the attribute to get
-     * @return the object associated with the name in the page scope 
+     * @return the object associated with the name in the page scope
      *     or null if not found.
-     * 
+     *
      * @throws NullPointerException if the name is null
      */
 
@@ -133,10 +133,10 @@ public abstract class JspContext {
      * @param scope the scope with which to associate the name/object
      * @return the object associated with the name in the specified
      *     scope or null if not found.
-     * 
+     *
      * @throws NullPointerException if the name is null
-     * @throws IllegalArgumentException if the scope is invalid 
-     * @throws IllegalStateException if the scope is 
+     * @throws IllegalArgumentException if the scope is invalid
+     * @throws IllegalStateException if the scope is
      *     PageContext.SESSION_SCOPE but the page that was requested
      *     does not participate in a session or the session has been
      *     invalidated.
@@ -173,7 +173,7 @@ public abstract class JspContext {
      * @param name The name of the object to remove.
      * @param scope The scope where to look.
      * @throws IllegalArgumentException if the scope is invalid
-     * @throws IllegalStateException if the scope is 
+     * @throws IllegalStateException if the scope is
      *     PageContext.SESSION_SCOPE but the page that was requested
      *     does not participate in a session or the session has been
      *     invalidated.
@@ -196,10 +196,10 @@ public abstract class JspContext {
      * Enumerate all the attributes in a given scope.
      *
      * @param scope the scope to enumerate all the attributes for
-     * @return an enumeration of names (java.lang.String) of all the 
+     * @return an enumeration of names (java.lang.String) of all the
      *     attributes the specified scope
      * @throws IllegalArgumentException if the scope is invalid
-     * @throws IllegalStateException if the scope is 
+     * @throws IllegalStateException if the scope is
      *     PageContext.SESSION_SCOPE but the page that was requested
      *     does not participate in a session or the session has been
      *     invalidated.
@@ -213,10 +213,10 @@ public abstract class JspContext {
      * @return the current JspWriter stream being used for client response
      */
     public abstract JspWriter getOut();
-    
+
     /**
      * Provides programmatic access to the ExpressionEvaluator.
-     * The JSP Container must return a valid instance of an 
+     * The JSP Container must return a valid instance of an
      * ExpressionEvaluator that can parse EL expressions.
      *
      * @return A valid instance of an ExpressionEvaluator.
@@ -226,10 +226,10 @@ public abstract class JspContext {
      */
     @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
     public abstract javax.servlet.jsp.el.ExpressionEvaluator getExpressionEvaluator();
-    
-    
+
+
     public abstract ELContext getELContext();
-    
+
     /**
      * Returns an instance of a VariableResolver that provides access to the
      * implicit objects specified in the JSP specification using this JspContext
@@ -244,7 +244,7 @@ public abstract class JspContext {
      */
     @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
     public abstract javax.servlet.jsp.el.VariableResolver getVariableResolver();
-    
+
     /**
      * Return a new JspWriter object that sends output to the
      * provided Writer.  Saves the current "out" JspWriter,
@@ -268,7 +268,7 @@ public abstract class JspContext {
     public JspWriter pushBody( java.io.Writer writer ) {
         return null; // XXX to implement
     }
-    
+
     /**
      * Return the previous JspWriter "out" saved by the matching
      * pushBody(), and update the value of the "out" attribute in

==================================================
JspException.java
index b07a0a3252..e369b48925 100644
--- a/java/javax/servlet/jsp/JspEngineInfo.java
+++ b/java/javax/servlet/jsp/JspEngineInfo.java
@@ -13,7 +13,7 @@
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-*/ 
+*/
 package javax.servlet.jsp;
 
 /**
@@ -24,13 +24,13 @@ package javax.servlet.jsp;
 public abstract class JspEngineInfo {
 
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public JspEngineInfo() {
         // NOOP by default
     }
-    
+
     /**
      * Return the version number of the JSP specification that is supported by
      * this JSP engine.

==================================================
JspFactory.java
index 90f311a620..7e378ee6a7 100644
--- a/java/javax/servlet/jsp/JspException.java
+++ b/java/javax/servlet/jsp/JspException.java
@@ -36,8 +36,8 @@ public class JspException extends Exception {
 
     /**
      * Constructs a new JSP exception with the
-     * specified message. The message can be written 
-     * to the server log and/or displayed for the user. 
+     * specified message. The message can be written
+     * to the server log and/or displayed for the user.
      *
      * @param msg   a <code>String</code> specifying the text of the exception
      *              message
@@ -52,7 +52,7 @@ public class JspException extends Exception {
      * message and cause. The cause is saved for later retrieval by the
      * <code>java.lang.Throwable.getCause()</code> and {@link #getRootCause()}
      * methods.
-     * 
+     *
      * @see <code>java.lang.Exception.Exception(String, Throwable)</code>
      *
      * @param message       a <code>String</code> containing the text of the
@@ -62,7 +62,7 @@ public class JspException extends Exception {
      *                      interfered with the JSP's normal operation,
      *                      making this JSP exception necessary
      */
-    
+
     public JspException(String message, Throwable cause) {
         super(message, cause);
     }
@@ -73,7 +73,7 @@ public class JspException extends Exception {
      * The cause is saved for later retrieval by the
      * <code>java.lang.Throwable.getCause()</code> and {@link #getRootCause()}
      * methods.
-     * 
+     *
      * @see <code>java.lang.Exception.Exception(Throwable)</code>
      *
      * @param cause         the <code>Throwable</code> exception that
@@ -85,12 +85,12 @@ public class JspException extends Exception {
         super(cause);
     }
 
-    
+
     /**
      * Returns the exception that caused this JSP exception.
      *
      * @return  the <code>Throwable</code> that caused this JSP exception
-     * 
+     *
      * @deprecated As of JSP 2.1, replaced by
      * <code>java.lang.Throwable.getCause()</code>
      */

==================================================
JspPage.java
index 278c528326..86cd16e55a 100644
--- a/java/javax/servlet/jsp/JspFactory.java
+++ b/java/javax/servlet/jsp/JspFactory.java
@@ -25,11 +25,11 @@ import javax.servlet.ServletResponse;
  * <p>
  * The JspFactory is an abstract class that defines a number of factory
  * methods available to a JSP page at runtime for the purposes of creating
- * instances of various interfaces and classes used to support the JSP 
+ * instances of various interfaces and classes used to support the JSP
  * implementation.
  * <p>
  * A conformant JSP Engine implementation will, during it's initialization
- * instantiate an implementation dependent subclass of this class, and make 
+ * instantiate an implementation dependent subclass of this class, and make
  * it globally available for use by JSP implementation classes by registering
  * the instance created with this class via the
  * static <code> setDefaultFactory() </code> method.
@@ -43,9 +43,9 @@ import javax.servlet.ServletResponse;
 public abstract class JspFactory {
 
     private static volatile JspFactory deflt = null;
-    
+
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public JspFactory() {
@@ -77,14 +77,14 @@ public abstract class JspFactory {
 
     /**
      * <p>
-     * obtains an instance of an implementation dependent 
+     * obtains an instance of an implementation dependent
      * javax.servlet.jsp.PageContext abstract class for the calling Servlet
      * and currently pending request and response.
      * </p>
      *
      * <p>
-     * This method is typically called early in the processing of the 
-     * _jspService() method of a JSP implementation class in order to 
+     * This method is typically called early in the processing of the
+     * _jspService() method of a JSP implementation class in order to
      * obtain a PageContext object for the request being processed.
      * </p>
      * <p>
@@ -138,16 +138,16 @@ public abstract class JspFactory {
      *
      * @return a JspEngineInfo object describing the current JSP engine
      */
-    
+
     public abstract JspEngineInfo getEngineInfo();
-    
+
     /**
      * <p>
      * Obtain the <code>JspApplicationContext</code> instance that was
      * associated within the passed <code>ServletContext</code> for this web
      * application.
      * </p>
-     * 
+     *
      * @param context the current web application's <code>ServletContext</code>
      * @return <code>JspApplicationContext</code> instance
      * @since 2.1

==================================================
JspTagException.java
index bcc9a92be6..ddeb9a9a84 100644
--- a/java/javax/servlet/jsp/JspPage.java
+++ b/java/javax/servlet/jsp/JspPage.java
@@ -13,7 +13,7 @@
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-*/ 
+*/
 package javax.servlet.jsp;
 
 import javax.servlet.Servlet;
@@ -79,7 +79,7 @@ public interface JspPage extends Servlet {
     /**
      * The jspDestroy() method is invoked when the JSP page is about to be
      * destroyed.
-     * 
+     *
      * A JSP page can override this method by including a definition for it
      * in a declaration element.
      *

==================================================
JspWriter.java
index 64d86971ce..ce554b6a23 100644
--- a/java/javax/servlet/jsp/JspTagException.java
+++ b/java/javax/servlet/jsp/JspTagException.java
@@ -28,7 +28,7 @@ public class JspTagException extends JspException {
     /**
      * Constructs a new JspTagException with the specified message. The message
      * can be written to the server log and/or displayed for the user.
-     * 
+     *
      * @param msg
      *            a <code>String</code> specifying the text of the exception
      *            message
@@ -48,7 +48,7 @@ public class JspTagException extends JspException {
      * Constructs a new JspTagException when the JSP Tag needs to throw an
      * exception and include a message about the "root cause" exception that
      * interfered with its normal operation, including a description message.
-     * 
+     *
      * @param message
      *            a <code>String</code> containing the text of the exception
      *            message
@@ -72,7 +72,7 @@ public class JspTagException extends JspException {
      * <code>Throwable</code> exception to get a localized exception message.
      * When subclassing <code>JspTagException</code>, this method can be
      * overridden to create an exception message designed for a specific locale.
-     * 
+     *
      * @param rootCause
      *            the <code>Throwable</code> exception that interfered with the
      *            JSP Tag's normal operation, making the JSP Tag exception

==================================================
PageContext.java
index 4348c43175..691f354737 100644
--- a/java/javax/servlet/jsp/JspWriter.java
+++ b/java/javax/servlet/jsp/JspWriter.java
@@ -72,7 +72,7 @@ import java.io.IOException;
  * without a flush. If autoflush="false" then all the I/O operations on this
  * class shall throw an IOException if performing the current operation would
  * result in a buffer overflow condition.
- * 
+ *
  * @see java.io.Writer
  * @see java.io.BufferedWriter
  * @see java.io.PrintWriter
@@ -98,7 +98,7 @@ public abstract class JspWriter extends java.io.Writer {
 
     /**
      * Protected constructor.
-     * 
+     *
      * @param bufferSize
      *            the size of the buffer to be used by the JspWriter
      * @param autoFlush
@@ -113,7 +113,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Write a line separator. The line separator string is defined by the
      * system property <tt>line.separator</tt>, and is not necessarily a single
      * newline ('\n') character.
-     * 
+     *
      * @exception IOException
      *                If an I/O error occurs
      */
@@ -124,7 +124,7 @@ public abstract class JspWriter extends java.io.Writer {
      * java.lang.String#valueOf(boolean)}</code>
      * is written to the JspWriter's buffer or, if no buffer is used, directly
      * to the underlying writer.
-     * 
+     *
      * @param b
      *            The <code>boolean</code> to be printed
      * @throws java.io.IOException
@@ -135,7 +135,7 @@ public abstract class JspWriter extends java.io.Writer {
     /**
      * Print a character. The character is written to the JspWriter's buffer or,
      * if no buffer is used, directly to the underlying writer.
-     * 
+     *
      * @param c
      *            The <code>char</code> to be printed
      * @throws java.io.IOException
@@ -148,7 +148,7 @@ public abstract class JspWriter extends java.io.Writer {
      * java.lang.String#valueOf(int)}</code>
      * is written to the JspWriter's buffer or, if no buffer is used, directly
      * to the underlying writer.
-     * 
+     *
      * @param i
      *            The <code>int</code> to be printed
      * @see java.lang.Integer#toString(int)
@@ -162,7 +162,7 @@ public abstract class JspWriter extends java.io.Writer {
      * java.lang.String#valueOf(long)}</code>
      * is written to the JspWriter's buffer or, if no buffer is used, directly
      * to the underlying writer.
-     * 
+     *
      * @param l
      *            The <code>long</code> to be printed
      * @see java.lang.Long#toString(long)
@@ -176,7 +176,7 @@ public abstract class JspWriter extends java.io.Writer {
      * java.lang.String#valueOf(float)}</code>
      * is written to the JspWriter's buffer or, if no buffer is used, directly
      * to the underlying writer.
-     * 
+     *
      * @param f
      *            The <code>float</code> to be printed
      * @see java.lang.Float#toString(float)
@@ -190,7 +190,7 @@ public abstract class JspWriter extends java.io.Writer {
      * <code>{@link java.lang.String#valueOf(double)}</code> is written to the
      * JspWriter's buffer or, if no buffer is used, directly to the underlying
      * writer.
-     * 
+     *
      * @param d
      *            The <code>double</code> to be printed
      * @see java.lang.Double#toString(double)
@@ -203,7 +203,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print an array of characters. The characters are written to the
      * JspWriter's buffer or, if no buffer is used, directly to the underlying
      * writer.
-     * 
+     *
      * @param s
      *            The array of chars to be printed
      * @throws NullPointerException
@@ -218,7 +218,7 @@ public abstract class JspWriter extends java.io.Writer {
      * <code>"null"</code> is printed. Otherwise, the string's characters are
      * written to the JspWriter's buffer or, if no buffer is used, directly to
      * the underlying writer.
-     * 
+     *
      * @param s
      *            The <code>String</code> to be printed
      * @throws java.io.IOException
@@ -231,7 +231,7 @@ public abstract class JspWriter extends java.io.Writer {
      * java.lang.String#valueOf(Object)}</code>
      * method is written to the JspWriter's buffer or, if no buffer is used,
      * directly to the underlying writer.
-     * 
+     *
      * @param obj
      *            The <code>Object</code> to be printed
      * @see java.lang.Object#toString()
@@ -245,7 +245,7 @@ public abstract class JspWriter extends java.io.Writer {
      * separator string is defined by the system property
      * <code>line.separator</code>, and is not necessarily a single newline
      * character (<code>'\n'</code>).
-     * 
+     *
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
@@ -255,7 +255,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print a boolean value and then terminate the line. This method behaves as
      * though it invokes <code>{@link #print(boolean)}</code> and then
      * <code>{@link #println()}</code>.
-     * 
+     *
      * @param x
      *            the boolean to write
      * @throws java.io.IOException
@@ -268,7 +268,7 @@ public abstract class JspWriter extends java.io.Writer {
      * though it invokes <code>{@link #print(char)}</code> and then <code>{@link
      * #println()}</code>
      * .
-     * 
+     *
      * @param x
      *            the char to write
      * @throws java.io.IOException
@@ -281,7 +281,7 @@ public abstract class JspWriter extends java.io.Writer {
      * though it invokes <code>{@link #print(int)}</code> and then <code>{@link
      * #println()}</code>
      * .
-     * 
+     *
      * @param x
      *            the int to write
      * @throws java.io.IOException
@@ -293,7 +293,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print a long integer and then terminate the line. This method behaves as
      * though it invokes <code>{@link #print(long)}</code> and then
      * <code>{@link #println()}</code>.
-     * 
+     *
      * @param x
      *            the long to write
      * @throws java.io.IOException
@@ -305,7 +305,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print a floating-point number and then terminate the line. This method
      * behaves as though it invokes <code>{@link #print(float)}</code> and then
      * <code>{@link #println()}</code>.
-     * 
+     *
      * @param x
      *            the float to write
      * @throws java.io.IOException
@@ -318,7 +318,7 @@ public abstract class JspWriter extends java.io.Writer {
      * line. This method behaves as though it invokes <code>{@link
      * #print(double)}</code> and
      * then <code>{@link #println()}</code>.
-     * 
+     *
      * @param x
      *            the double to write
      * @throws java.io.IOException
@@ -330,7 +330,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print an array of characters and then terminate the line. This method
      * behaves as though it invokes <code>print(char[])</code> and then
      * <code>println()</code>.
-     * 
+     *
      * @param x
      *            the char[] to write
      * @throws java.io.IOException
@@ -342,7 +342,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print a String and then terminate the line. This method behaves as though
      * it invokes <code>{@link #print(String)}</code> and then
      * <code>{@link #println()}</code>.
-     * 
+     *
      * @param x
      *            the String to write
      * @throws java.io.IOException
@@ -354,7 +354,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Print an Object and then terminate the line. This method behaves as
      * though it invokes <code>{@link #print(Object)}</code> and then
      * <code>{@link #println()}</code>.
-     * 
+     *
      * @param x
      *            the Object to write
      * @throws java.io.IOException
@@ -367,7 +367,7 @@ public abstract class JspWriter extends java.io.Writer {
      * flushed then the clear operation shall throw an IOException to signal the
      * fact that some data has already been irrevocably written to the client
      * response stream.
-     * 
+     *
      * @throws IOException
      *             If an I/O error occurs
      */
@@ -377,7 +377,7 @@ public abstract class JspWriter extends java.io.Writer {
      * Clears the current contents of the buffer. Unlike clear(), this method
      * will not throw an IOException if the buffer has already been flushed. It
      * merely clears the current content of the buffer and returns.
-     * 
+     *
      * @throws IOException
      *             If an I/O error occurs
      */
@@ -394,7 +394,7 @@ public abstract class JspWriter extends java.io.Writer {
      * <p>
      * Once a stream has been closed, further write() or flush() invocations
      * will cause an IOException to be thrown.
-     * 
+     *
      * @exception IOException
      *                If an I/O error occurs
      */
@@ -409,7 +409,7 @@ public abstract class JspWriter extends java.io.Writer {
      * to close().
      * <p>
      * Closing a previously-closed stream, unlike flush(), has no effect.
-     * 
+     *
      * @exception IOException
      *                If an I/O error occurs
      */
@@ -418,7 +418,7 @@ public abstract class JspWriter extends java.io.Writer {
 
     /**
      * This method returns the size of the buffer used by the JspWriter.
-     * 
+     *
      * @return the size of the buffer in bytes, or 0 is unbuffered.
      */
     public int getBufferSize() {
@@ -427,14 +427,14 @@ public abstract class JspWriter extends java.io.Writer {
 
     /**
      * This method returns the number of unused bytes in the buffer.
-     * 
+     *
      * @return the number of bytes unused in the buffer
      */
     public abstract int getRemaining();
 
     /**
      * This method indicates whether the JspWriter is autoFlushing.
-     * 
+     *
      * @return if this JspWriter is auto flushing or throwing IOExceptions on
      *         buffer overflow conditions
      */

==================================================
SkipPageException.java
index b320a021e1..598b4f086b 100644
--- a/java/javax/servlet/jsp/PageContext.java
+++ b/java/javax/servlet/jsp/PageContext.java
@@ -14,7 +14,7 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
- 
+
 package javax.servlet.jsp;
 
 import java.io.IOException;
@@ -41,7 +41,7 @@ import javax.servlet.jsp.tagext.BodyContent;
  *
  * <p> The <code> PageContext </code> class is an abstract class, designed to be
  * extended to provide implementation dependent implementations thereof, by
- * conformant JSP engine runtime environments. A PageContext instance is 
+ * conformant JSP engine runtime environments. A PageContext instance is
  * obtained by a JSP implementation class by calling the
  * JspFactory.getPageContext() method, and is released by calling
  * JspFactory.releasePageContext().
@@ -50,29 +50,29 @@ import javax.servlet.jsp.tagext.BodyContent;
  * used  within a JSP Page Implementation object is given elsewhere.
  *
  * <p>
- * The PageContext provides a number of facilities to the page/component 
+ * The PageContext provides a number of facilities to the page/component
  * author and page implementor, including:
  * <ul>
  * <li>a single API to manage the various scoped namespaces
  * <li>a number of convenience API's to access various public objects
  * <li>a mechanism to obtain the JspWriter for output
  * <li>a mechanism to manage session usage by the page
- * <li>a mechanism to expose page directive attributes to the scripting 
+ * <li>a mechanism to expose page directive attributes to the scripting
  *     environment
- * <li>mechanisms to forward or include the current request to other active 
+ * <li>mechanisms to forward or include the current request to other active
  *     components in the application
  * <li>a mechanism to handle errorpage exception processing
  * </ul>
  *
  * <p><B>Methods Intended for Container Generated Code</B>
  * <p>Some methods are intended to be used by the code generated by the
- * container, not by code written by JSP page authors, or JSP tag library 
+ * container, not by code written by JSP page authors, or JSP tag library
  * authors.
  * <p>The methods supporting <B>lifecycle</B> are <code>initialize()</code>
  * and <code>release()</code>
  *
  * <p>
- * The following methods enable the <B>management of nested</B> JspWriter 
+ * The following methods enable the <B>management of nested</B> JspWriter
  * streams to implement Tag Extensions: <code>pushBody()</code>
  *
  * <p><B>Methods Intended for JSP authors</B>
@@ -90,18 +90,18 @@ import javax.servlet.jsp.tagext.BodyContent;
  * and  <code>handlePageException()</code>.
  */
 
-public abstract class PageContext 
+public abstract class PageContext
     extends JspContext
 {
-    
+
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public PageContext() {
         // NOOP by default
     }
-    
+
     /**
      * Page scope: (this is the default) the named reference remains available
      * in this PageContext until the return from the current Servlet.service()
@@ -111,8 +111,8 @@ public abstract class PageContext
     public static final int PAGE_SCOPE = 1;
 
     /**
-     * Request scope: the named reference remains available from the 
-     * ServletRequest associated with the Servlet until the current request 
+     * Request scope: the named reference remains available from the
+     * ServletRequest associated with the Servlet until the current request
      * is completed.
      */
 
@@ -127,7 +127,7 @@ public abstract class PageContext
     public static final int SESSION_SCOPE = 3;
 
     /**
-     * Application scope: named reference remains available in the 
+     * Application scope: named reference remains available in the
      * ServletContext until it is reclaimed.
      */
 
@@ -181,7 +181,7 @@ public abstract class PageContext
     public static final String APPLICATION = "javax.servlet.jsp.jspApplication";
 
     /**
-     * Name used to store uncaught exception in ServletRequest attribute 
+     * Name used to store uncaught exception in ServletRequest attribute
      * list and PageContext name table.
      */
 
@@ -207,13 +207,13 @@ public abstract class PageContext
      * @param servlet The Servlet that is associated with this PageContext
      * @param request The currently pending request for this Servlet
      * @param response The currently pending response for this Servlet
-     * @param errorPageURL The value of the errorpage attribute from the page 
+     * @param errorPageURL The value of the errorpage attribute from the page
      *     directive or null
-     * @param needsSession The value of the session attribute from the 
+     * @param needsSession The value of the session attribute from the
      *     page directive
-     * @param bufferSize The value of the buffer attribute from the page 
+     * @param bufferSize The value of the buffer attribute from the page
      *     directive
-     * @param autoFlush The value of the autoflush attribute from the page 
+     * @param autoFlush The value of the autoflush attribute from the page
      *     directive
      *
      * @throws IOException during creation of JspWriter
@@ -221,10 +221,10 @@ public abstract class PageContext
      * @throws IllegalArgumentException If one of the given parameters
      *     is invalid
      */
- 
-    public abstract void initialize(Servlet servlet, ServletRequest request, 
-        ServletResponse response, String errorPageURL, boolean needsSession, 
-        int bufferSize, boolean autoFlush)  
+
+    public abstract void initialize(Servlet servlet, ServletRequest request,
+        ServletResponse response, String errorPageURL, boolean needsSession,
+        int bufferSize, boolean autoFlush)
         throws IOException, IllegalStateException, IllegalArgumentException;
 
     /**
@@ -253,10 +253,10 @@ public abstract class PageContext
     public abstract HttpSession getSession();
 
     /**
-     * The current value of the page object (In a Servlet environment, 
+     * The current value of the page object (In a Servlet environment,
      * this is an instance of javax.servlet.Servlet).
      *
-     * @return the Page implementation class instance associated 
+     * @return the Page implementation class instance associated
      *     with this PageContext
      */
 
@@ -297,7 +297,7 @@ public abstract class PageContext
 
     /**
      * The ServletContext instance.
-     * 
+     *
      * @return the ServletContext for this PageContext
      */
 
@@ -305,14 +305,14 @@ public abstract class PageContext
 
     /**
      * <p>
-     * This method is used to re-direct, or "forward" the current 
-     * ServletRequest and ServletResponse to another active component in 
+     * This method is used to re-direct, or "forward" the current
+     * ServletRequest and ServletResponse to another active component in
      * the application.
      * </p>
      * <p>
      * If the <I> relativeUrlPath </I> begins with a "/" then the URL specified
      * is calculated relative to the DOCROOT of the <code> ServletContext </code>
-     * for this JSP. If the path does not begin with a "/" then the URL 
+     * for this JSP. If the path does not begin with a "/" then the URL
      * specified is calculated relative to the URL of the request that was
      * mapped to the calling JSP.
      * </p>
@@ -324,21 +324,21 @@ public abstract class PageContext
      * Once this method has been called successfully, it is illegal for the
      * calling <code> Thread </code> to attempt to modify the <code>
      * ServletResponse </code> object.  Any such attempt to do so, shall result
-     * in undefined behavior. Typically, callers immediately return from 
+     * in undefined behavior. Typically, callers immediately return from
      * <code> _jspService(...) </code> after calling this method.
      * </p>
      *
-     * @param relativeUrlPath specifies the relative URL path to the target 
+     * @param relativeUrlPath specifies the relative URL path to the target
      *     resource as described above
      *
-     * @throws IllegalStateException if <code> ServletResponse </code> is not 
+     * @throws IllegalStateException if <code> ServletResponse </code> is not
      *     in a state where a forward can be performed
      * @throws ServletException if the page that was forwarded to throws
      *     a ServletException
      * @throws IOException if an I/O error occurred while forwarding
      */
 
-    public abstract void forward(String relativeUrlPath) 
+    public abstract void forward(String relativeUrlPath)
         throws ServletException, IOException;
 
     /**
@@ -355,7 +355,7 @@ public abstract class PageContext
      * <p>
      * If the <I> relativeUrlPath </I> begins with a "/" then the URL specified
      * is calculated relative to the DOCROOT of the <code>ServletContext</code>
-     * for this JSP. If the path does not begin with a "/" then the URL 
+     * for this JSP. If the path does not begin with a "/" then the URL
      * specified is calculated relative to the URL of the request that was
      * mapped to the calling JSP.
      * </p>
@@ -364,14 +364,14 @@ public abstract class PageContext
      * executing within a <code> _jspService(...) </code> method of a JSP.
      * </p>
      *
-     * @param relativeUrlPath specifies the relative URL path to the target 
+     * @param relativeUrlPath specifies the relative URL path to the target
      *     resource to be included
      *
      * @throws ServletException if the page that was forwarded to throws
      *     a ServletException
      * @throws IOException if an I/O error occurred while forwarding
      */
-    public abstract void include(String relativeUrlPath) 
+    public abstract void include(String relativeUrlPath)
         throws ServletException, IOException;
 
     /**
@@ -382,14 +382,14 @@ public abstract class PageContext
      * directly to the current JspWriter returned by a call to getOut().
      * </p>
      * <p>
-     * If flush is true, The current JspWriter "out" for this JSP 
-     * is flushed as a side-effect of this call, prior to processing 
+     * If flush is true, The current JspWriter "out" for this JSP
+     * is flushed as a side-effect of this call, prior to processing
      * the include.  Otherwise, the JspWriter "out" is not flushed.
      * </p>
      * <p>
      * If the <i>relativeUrlPath</i> begins with a "/" then the URL specified
      * is calculated relative to the DOCROOT of the <code>ServletContext</code>
-     * for this JSP. If the path does not begin with a "/" then the URL 
+     * for this JSP. If the path does not begin with a "/" then the URL
      * specified is calculated relative to the URL of the request that was
      * mapped to the calling JSP.
      * </p>
@@ -398,7 +398,7 @@ public abstract class PageContext
      * executing within a <code> _jspService(...) </code> method of a JSP.
      * </p>
      *
-     * @param relativeUrlPath specifies the relative URL path to the 
+     * @param relativeUrlPath specifies the relative URL path to the
      *     target resource to be included
      * @param flush True if the JspWriter is to be flushed before the include,
      *     or false if not.
@@ -408,7 +408,7 @@ public abstract class PageContext
      * @throws IOException if an I/O error occurred while forwarding
      * @since 2.0
      */
-    public abstract void include(String relativeUrlPath, boolean flush) 
+    public abstract void include(String relativeUrlPath, boolean flush)
         throws ServletException, IOException;
 
     /**
@@ -428,7 +428,7 @@ public abstract class PageContext
      * <p>
      * A JSP implementation class shall typically clean up any local state
      * prior to invoking this and will return immediately thereafter. It is
-     * illegal to generate any output to the client, or to modify any 
+     * illegal to generate any output to the client, or to modify any
      * ServletResponse state after invoking this call.
      *
      * <p>
@@ -445,7 +445,7 @@ public abstract class PageContext
      * @see #handlePageException(Throwable)
      */
 
-    public abstract void handlePageException(Exception e) 
+    public abstract void handlePageException(Exception e)
         throws ServletException, IOException;
 
     /**
@@ -471,7 +471,7 @@ public abstract class PageContext
      * <p>
      * A JSP implementation class shall typically clean up any local state
      * prior to invoking this and will return immediately thereafter. It is
-     * illegal to generate any output to the client, or to modify any 
+     * illegal to generate any output to the client, or to modify any
      * ServletResponse state after invoking this call.
      *
      * @param t the throwable to be handled
@@ -484,7 +484,7 @@ public abstract class PageContext
      * @see #handlePageException(Exception)
      */
 
-    public abstract void handlePageException(Throwable t) 
+    public abstract void handlePageException(Throwable t)
         throws ServletException, IOException;
 
     /**
@@ -498,13 +498,13 @@ public abstract class PageContext
     public BodyContent pushBody() {
         return null; // XXX to implement
     }
-         
+
 
     /**
      * Provides convenient access to error information.
      *
-     * @return an ErrorData instance containing information about the 
-     * error, as obtained from the request attributes, as per the 
+     * @return an ErrorData instance containing information about the
+     * error, as obtained from the request attributes, as per the
      * Servlet specification.  If this is not an error page (that is,
      * if the isErrorPage attribute of the page directive is not set
      * to "true"), the information is meaningless.
@@ -513,15 +513,15 @@ public abstract class PageContext
      */
     public ErrorData getErrorData() {
         int status = 0;
-        
-        Integer status_code = (Integer)getRequest().getAttribute( 
+
+        Integer status_code = (Integer)getRequest().getAttribute(
                 RequestDispatcher.ERROR_STATUS_CODE);
         // Avoid NPE if attribute is not set
         if (status_code != null) {
             status = status_code.intValue();
         }
 
-        return new ErrorData( 
+        return new ErrorData(
             (Throwable)getRequest().getAttribute(
                     RequestDispatcher.ERROR_EXCEPTION),
             status,
@@ -531,5 +531,5 @@ public abstract class PageContext
                     RequestDispatcher.ERROR_SERVLET_NAME)
             );
     }
-    
+
 }

==================================================
ELException.java
index ba0e15a26d..2098c9bfb7 100644
--- a/java/javax/servlet/jsp/SkipPageException.java
+++ b/java/javax/servlet/jsp/SkipPageException.java
@@ -26,7 +26,7 @@ package javax.servlet.jsp;
  * should not be thrown manually in a JSP page or tag file - the behavior is
  * undefined. The exception is intended to be thrown inside SimpleTag handlers
  * and in JSP fragments.
- * 
+ *
  * @see javax.servlet.jsp.tagext.SimpleTag#doTag
  * @see javax.servlet.jsp.tagext.JspFragment#invoke
  * @see javax.servlet.jsp.tagext.Tag#doEndTag
@@ -45,7 +45,7 @@ public class SkipPageException extends JspException {
 
     /**
      * Creates a SkipPageException with the provided message.
-     * 
+     *
      * @param message
      *            the detail message
      */
@@ -55,7 +55,7 @@ public class SkipPageException extends JspException {
 
     /**
      * Creates a SkipPageException with the provided message and root cause.
-     * 
+     *
      * @param message
      *            the detail message
      * @param rootCause
@@ -67,7 +67,7 @@ public class SkipPageException extends JspException {
 
     /**
      * Creates a SkipPageException with the provided root cause.
-     * 
+     *
      * @param rootCause
      *            the originating cause of this exception
      */

==================================================
Expression.java
index cf3bd195aa..132cc7d847 100644
--- a/java/javax/servlet/jsp/el/ELException.java
+++ b/java/javax/servlet/jsp/el/ELException.java
@@ -20,7 +20,7 @@ package javax.servlet.jsp.el;
 /**
  * Represents any of the exception conditions that arise during the operation
  * evaluation of the evaluator.
- * 
+ *
  * @since 2.0
  * @deprecated As of JSP 2.1, replaced by javax.el.ELException
  */
@@ -38,7 +38,7 @@ public class ELException extends Exception {
 
     /**
      * Creates an ELException with the provided detail message.
-     * 
+     *
      * @param pMessage
      *            the detail message
      **/
@@ -48,7 +48,7 @@ public class ELException extends Exception {
 
     /**
      * Creates an ELException with the given root cause.
-     * 
+     *
      * @param pRootCause
      *            the originating cause of this exception
      **/
@@ -59,7 +59,7 @@ public class ELException extends Exception {
     // -------------------------------------
     /**
      * Creates an ELException with the given detail message and root cause.
-     * 
+     *
      * @param pMessage
      *            the detail message
      * @param pRootCause
@@ -72,7 +72,7 @@ public class ELException extends Exception {
     // -------------------------------------
     /**
      * Returns the root cause.
-     * 
+     *
      * @return the root cause of this exception
      */
     public Throwable getRootCause() {

==================================================
ExpressionEvaluator.java
index 8d446aacbb..51635bc655 100644
--- a/java/javax/servlet/jsp/el/Expression.java
+++ b/java/javax/servlet/jsp/el/Expression.java
@@ -22,11 +22,11 @@ package javax.servlet.jsp.el;
 /**
  * <p>The abstract class for a prepared expression.</p>
  *
- * <p>An instance of an Expression can be obtained via from an 
+ * <p>An instance of an Expression can be obtained via from an
  * ExpressionEvaluator instance.</p>
  *
  * <p>An Expression may or not have done a syntactic parse of the expression.
- * A client invoking the evaluate() method should be ready for the case 
+ * A client invoking the evaluate() method should be ready for the case
  * where ELParseException exceptions are raised. </p>
  *
  * @since 2.0
@@ -35,19 +35,19 @@ package javax.servlet.jsp.el;
 @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public abstract class Expression {
 
-    /** 
-     * Evaluates an expression that was previously prepared.  In some 
-     * implementations preparing an expression involves full syntactic 
-     * validation, but others may not do so.  Evaluating the expression may 
-     * raise an ELParseException as well as other ELExceptions due to 
+    /**
+     * Evaluates an expression that was previously prepared.  In some
+     * implementations preparing an expression involves full syntactic
+     * validation, but others may not do so.  Evaluating the expression may
+     * raise an ELParseException as well as other ELExceptions due to
      * run-time evaluation.
      *
-     * @param vResolver A VariableResolver instance that can be used at 
+     * @param vResolver A VariableResolver instance that can be used at
      *   runtime to resolve the name of implicit objects into Objects.
      * @return The result of the expression evaluation.
      *
      * @exception ELException Thrown if the expression evaluation failed.
-     */ 
+     */
     public abstract Object evaluate( VariableResolver vResolver )
         throws ELException;
 }

==================================================
FunctionMapper.java
index 52d41dead5..a4b301e11e 100644
--- a/java/javax/servlet/jsp/el/ExpressionEvaluator.java
+++ b/java/javax/servlet/jsp/el/ExpressionEvaluator.java
@@ -50,7 +50,7 @@ package javax.servlet.jsp.el;
  * <li><code>${my:reverse('hello')}</code></li>
  * </ul>
  * </p>
- * 
+ *
  * @since 2.0
  * @deprecated As of JSP 2.1, replaced by javax.el.ExpressionFactory
  */
@@ -62,7 +62,7 @@ public abstract class ExpressionEvaluator {
      * Prepare an expression for later evaluation. This method should perform
      * syntactic validation of the expression; if in doing so it detects errors,
      * it should raise an ELParseException.
-     * 
+     *
      * @param expression
      *            The expression to be evaluated.
      * @param expectedType
@@ -91,7 +91,7 @@ public abstract class ExpressionEvaluator {
      * validation and, if so, it should raise an ELParseException error if it
      * encounters syntactic errors. EL evaluation errors should cause an
      * ELException to be raised.
-     * 
+     *
      * @param expression
      *            The expression to be evaluated.
      * @param expectedType

==================================================
VariableResolver.java
index 3a8e940efd..900820f749 100644
--- a/java/javax/servlet/jsp/el/FunctionMapper.java
+++ b/java/javax/servlet/jsp/el/FunctionMapper.java
@@ -31,11 +31,11 @@ public interface FunctionMapper {
   /**
    * Resolves the specified local name and prefix into a Java.lang.Method.
    * Returns null if the prefix and local name are not found.
-   * 
+   *
    * @param prefix the prefix of the function, or "" if no prefix.
    * @param localName the short name of the function
    * @return the result of the method mapping.  Null means no entry found.
    **/
-  public java.lang.reflect.Method resolveFunction(String prefix, 
+  public java.lang.reflect.Method resolveFunction(String prefix,
       String localName);
 }

==================================================
BodyContent.java
index 46b89222bf..2714f78e78 100644
--- a/java/javax/servlet/jsp/resources/web-jsptaglibrary_2_1.xsd
+++ b/java/javax/servlet/jsp/resources/web-jsptaglibrary_2_1.xsd
@@ -24,11 +24,11 @@
   **  XSD.
 -->
 
-<xsd:schema targetNamespace="http://java.sun.com/xml/ns/javaee" 
-            xmlns:javaee="http://java.sun.com/xml/ns/javaee" 
-            xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
-            elementFormDefault="qualified" 
-            attributeFormDefault="unqualified" 
+<xsd:schema targetNamespace="http://java.sun.com/xml/ns/javaee"
+            xmlns:javaee="http://java.sun.com/xml/ns/javaee"
+            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+            elementFormDefault="qualified"
+            attributeFormDefault="unqualified"
             version="2.1">
 
     <xsd:include schemaLocation="javaee_5.xsd" />

==================================================
BodyTag.java
index f700cb67b6..92c23e2319 100644
--- a/java/javax/servlet/jsp/tagext/BodyContent.java
+++ b/java/javax/servlet/jsp/tagext/BodyContent.java
@@ -48,7 +48,7 @@ public abstract class BodyContent extends JspWriter {
 
     /**
      * Protected constructor. Unbounded buffer, no autoflushing.
-     * 
+     *
      * @param e
      *            the enclosing JspWriter
      */
@@ -62,7 +62,7 @@ public abstract class BodyContent extends JspWriter {
      * <p>
      * It is not valid to flush a BodyContent because there is no backing stream
      * behind it.
-     * 
+     *
      * @throws IOException
      *             always thrown
      */
@@ -85,14 +85,14 @@ public abstract class BodyContent extends JspWriter {
 
     /**
      * Return the value of this BodyContent as a Reader.
-     * 
+     *
      * @return the value of this BodyContent as a Reader
      */
     public abstract Reader getReader();
 
     /**
      * Return the value of the BodyContent as a String.
-     * 
+     *
      * @return the value of the BodyContent as a String
      */
     public abstract String getString();
@@ -100,7 +100,7 @@ public abstract class BodyContent extends JspWriter {
     /**
      * Write the contents of this BodyContent into a Writer. Subclasses may
      * optimize common invocation patterns.
-     * 
+     *
      * @param out
      *            The writer into which to place the contents of this body
      *            evaluation
@@ -112,7 +112,7 @@ public abstract class BodyContent extends JspWriter {
 
     /**
      * Get the enclosing JspWriter.
-     * 
+     *
      * @return the enclosing JspWriter passed at construction time
      */
     public JspWriter getEnclosingWriter() {

==================================================
BodyTagSupport.java
index 6452bd504e..b4c59fab06 100644
--- a/java/javax/servlet/jsp/tagext/BodyTag.java
+++ b/java/javax/servlet/jsp/tagext/BodyTag.java
@@ -104,7 +104,7 @@ public interface BodyTag extends IterationTag {
      * Deprecated constant that has the same value as EVAL_BODY_BUFFERED and
      * EVAL_BODY_AGAIN. This name has been marked as deprecated to encourage the
      * use of the two different terms, which are much more descriptive.
-     * 
+     *
      * @deprecated As of Java JSP API 1.2, use BodyTag.EVAL_BODY_BUFFERED or
      *             IterationTag.EVAL_BODY_AGAIN.
      */
@@ -135,7 +135,7 @@ public interface BodyTag extends IterationTag {
      * The BodyContent object is available and with the appropriate content
      * until after the invocation of the doEndTag method, at which case it may
      * be reused.
-     * 
+     *
      * @param b
      *            the BodyContent
      * @see #doInitBody
@@ -153,7 +153,7 @@ public interface BodyTag extends IterationTag {
      * The JSP container will resynchronize the values of any AT_BEGIN and
      * NESTED variables (defined by the associated TagExtraInfo or TLD) after
      * the invocation of doInitBody().
-     * 
+     *
      * @throws JspException
      *             if an error occurred while processing this tag
      * @see #doAfterBody

==================================================
DynamicAttributes.java
index 740a73bda5..ba2dfd321d 100644
--- a/java/javax/servlet/jsp/tagext/BodyTagSupport.java
+++ b/java/javax/servlet/jsp/tagext/BodyTagSupport.java
@@ -44,7 +44,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
 
     /**
      * Default processing of the start tag returning EVAL_BODY_BUFFERED.
-     * 
+     *
      * @return EVAL_BODY_BUFFERED
      * @throws JspException
      *             if an error occurred while processing this tag
@@ -57,7 +57,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
 
     /**
      * Default processing of the end tag returning EVAL_PAGE.
-     * 
+     *
      * @return EVAL_PAGE
      * @throws JspException
      *             if an error occurred while processing this tag
@@ -72,7 +72,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
 
     /**
      * Prepare for evaluation of the body: stash the bodyContent away.
-     * 
+     *
      * @param b
      *            the BodyContent
      * @see #doAfterBody
@@ -87,7 +87,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
     /**
      * Prepare for evaluation of the body just before the first body evaluation:
      * no action.
-     * 
+     *
      * @throws JspException
      *             if an error occurred while processing this tag
      * @see #setBodyContent
@@ -102,7 +102,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
     /**
      * After the body evaluation: do not reevaluate and continue with the page.
      * By default nothing is done with the bodyContent data (if any).
-     * 
+     *
      * @return SKIP_BODY
      * @throws JspException
      *             if an error occurred while processing this tag
@@ -116,7 +116,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
 
     /**
      * Release state.
-     * 
+     *
      * @see Tag#release
      */
     @Override
@@ -128,7 +128,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
 
     /**
      * Get current bodyContent.
-     * 
+     *
      * @return the body content.
      */
     public BodyContent getBodyContent() {
@@ -137,7 +137,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
 
     /**
      * Get surrounding out JspWriter.
-     * 
+     *
      * @return the enclosing JspWriter, from the bodyContent.
      */
     public JspWriter getPreviousOut() {

==================================================
FunctionInfo.java
index be77f64436..4ddefadbfb 100644
--- a/java/javax/servlet/jsp/tagext/DynamicAttributes.java
+++ b/java/javax/servlet/jsp/tagext/DynamicAttributes.java
@@ -20,33 +20,33 @@ import javax.servlet.jsp.JspException;
 
 /**
  * For a tag to declare that it accepts dynamic attributes, it must implement
- * this interface.  The entry for the tag in the Tag Library Descriptor must 
+ * this interface.  The entry for the tag in the Tag Library Descriptor must
  * also be configured to indicate dynamic attributes are accepted.
  * <br>
  * For any attribute that is not declared in the Tag Library Descriptor for
- * this tag, instead of getting an error at translation time, the 
+ * this tag, instead of getting an error at translation time, the
  * <code>setDynamicAttribute()</code> method is called, with the name and
- * value of the attribute.  It is the responsibility of the tag to 
+ * value of the attribute.  It is the responsibility of the tag to
  * remember the names and values of the dynamic attributes.
  *
  * @since 2.0
  */
 public interface DynamicAttributes {
-    
+
     /**
      * Called when a tag declared to accept dynamic attributes is passed
      * an attribute that is not declared in the Tag Library Descriptor.
-     * 
+     *
      * @param uri the namespace of the attribute, or null if in the default
      *     namespace.
      * @param localName the name of the attribute being set.
      * @param value the value of the attribute
      * @throws JspException if the tag handler wishes to
-     *     signal that it does not accept the given attribute.  The 
+     *     signal that it does not accept the given attribute.  The
      *     container must not call doStartTag() or doTag() for this tag.
      */
     public void setDynamicAttribute(
-        String uri, String localName, Object value ) 
+        String uri, String localName, Object value )
         throws JspException;
-    
+
 }

==================================================
IterationTag.java
index 56e2341e78..9df9c64654 100644
--- a/java/javax/servlet/jsp/tagext/FunctionInfo.java
+++ b/java/javax/servlet/jsp/tagext/FunctionInfo.java
@@ -14,14 +14,14 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
- 
+
 package javax.servlet.jsp.tagext;
 
 /**
  * Information for a function in a Tag Library.
  * This class is instantiated from the Tag Library Descriptor file (TLD)
  * and is available only at translation time.
- * 
+ *
  * @since 2.0
  */
 public class FunctionInfo {

==================================================
JspFragment.java
index f2aaef50ce..93f505e997 100644
--- a/java/javax/servlet/jsp/tagext/IterationTag.java
+++ b/java/javax/servlet/jsp/tagext/IterationTag.java
@@ -55,7 +55,7 @@ import javax.servlet.jsp.JspException;
  *
  * <p><B>Empty and Non-Empty Action</B>
  * <p> If the TagLibraryDescriptor file indicates that the action must
- * always have an empty element body, by a &lt;body-content&gt; entry of 
+ * always have an empty element body, by a &lt;body-content&gt; entry of
  * "empty", then the doStartTag() method must return SKIP_BODY.
  *
  * <p>Note that which methods are invoked after the doStartTag() depends on
@@ -68,8 +68,8 @@ import javax.servlet.jsp.JspException;
  *
  * <p>
  * If EVAL_BODY_INCLUDE is returned, and the custom action element is not
- * empty, the body is evaluated and "passed through" to the current out, 
- * then doAfterBody() is invoked and, after zero or more iterations, 
+ * empty, the body is evaluated and "passed through" to the current out,
+ * then doAfterBody() is invoked and, after zero or more iterations,
  * doEndTag() is invoked.
  */
 
@@ -81,9 +81,9 @@ public interface IterationTag extends Tag {
      *
      * For compatibility with JSP 1.1, the value is carefully selected
      * to be the same as the, now deprecated, BodyTag.EVAL_BODY_TAG,
-     * 
+     *
      */
- 
+
     public static final int EVAL_BODY_AGAIN = 2;
 
     /**
@@ -100,7 +100,7 @@ public interface IterationTag extends Tag {
      *
      * <p>
      * If this tag handler implements BodyTag and doAfterBody returns
-     * SKIP_BODY, the value of out will be restored using the popBody 
+     * SKIP_BODY, the value of out will be restored using the popBody
      * method in pageContext prior to invoking doEndTag.
      *
      * <p>

==================================================
JspTag.java
index c5b3b08242..90a45b3130 100644
--- a/java/javax/servlet/jsp/tagext/JspFragment.java
+++ b/java/javax/servlet/jsp/tagext/JspFragment.java
@@ -14,7 +14,7 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
- 
+
 package javax.servlet.jsp.tagext;
 
 import java.io.IOException;
@@ -24,31 +24,31 @@ import javax.servlet.jsp.JspContext;
 import javax.servlet.jsp.JspException;
 
 /**
- * Encapsulates a portion of JSP code in an object that 
- * can be invoked as many times as needed.  JSP Fragments are defined 
- * using JSP syntax as the body of a tag for an invocation to a SimpleTag 
+ * Encapsulates a portion of JSP code in an object that
+ * can be invoked as many times as needed.  JSP Fragments are defined
+ * using JSP syntax as the body of a tag for an invocation to a SimpleTag
  * handler, or as the body of a &lt;jsp:attribute&gt; standard action
  * specifying the value of an attribute that is declared as a fragment,
  * or to be of type JspFragment in the TLD.
  * <p>
- * The definition of the JSP fragment must only contain template 
+ * The definition of the JSP fragment must only contain template
  * text and JSP action elements.  In other words, it must not contain
- * scriptlets or scriptlet expressions.  At translation time, the 
+ * scriptlets or scriptlet expressions.  At translation time, the
  * container generates an implementation of the JspFragment abstract class
  * capable of executing the defined fragment.
  * <p>
- * A tag handler can invoke the fragment zero or more times, or 
+ * A tag handler can invoke the fragment zero or more times, or
  * pass it along to other tags, before returning.  To communicate values
- * to/from a JSP fragment, tag handlers store/retrieve values in 
+ * to/from a JSP fragment, tag handlers store/retrieve values in
  * the JspContext associated with the fragment.
  * <p>
  * Note that tag library developers and page authors should not generate
  * JspFragment implementations manually.
  * <p>
- * <i>Implementation Note</i>: It is not necessary to generate a 
- * separate class for each fragment.  One possible implementation is 
- * to generate a single helper class for each page that implements 
- * JspFragment. Upon construction, a discriminator can be passed to 
+ * <i>Implementation Note</i>: It is not necessary to generate a
+ * separate class for each fragment.  One possible implementation is
+ * to generate a single helper class for each page that implements
+ * JspFragment. Upon construction, a discriminator can be passed to
  * select which fragment that instance will execute.
  *
  * @since 2.0
@@ -60,7 +60,7 @@ public abstract class JspFragment {
      * or the JspWriter returned by the getOut() method of the JspContext
      * associated with the fragment if out is null.
      *
-     * @param out The Writer to output the fragment to, or null if 
+     * @param out The Writer to output the fragment to, or null if
      *     output should be sent to JspContext.getOut().
      * @throws javax.servlet.jsp.JspException Thrown if an error occurred
      *     while invoking this fragment.
@@ -69,7 +69,7 @@ public abstract class JspFragment {
      *     invoked this fragment is to cease evaluation.  The container
      *     must throw this exception if a Classic Tag Handler returned
      *     Tag.SKIP_PAGE or if a Simple Tag Handler threw SkipPageException.
-     * @throws java.io.IOException If there was an error writing to the 
+     * @throws java.io.IOException If there was an error writing to the
      *     stream.
      */
     public abstract void invoke( Writer out )

==================================================
PageData.java
index 3c8d138d7b..2be75fddbc 100644
--- a/java/javax/servlet/jsp/tagext/JspTag.java
+++ b/java/javax/servlet/jsp/tagext/JspTag.java
@@ -17,7 +17,7 @@
 package javax.servlet.jsp.tagext;
 
 /**
- * Serves as a base class for Tag and SimpleTag.  
+ * Serves as a base class for Tag and SimpleTag.
  * This is mostly for organizational and type-safety purposes.
  *
  * @since 2.0

==================================================
SimpleTag.java
index 9f6343cfe8..737d394914 100644
--- a/java/javax/servlet/jsp/tagext/PageData.java
+++ b/java/javax/servlet/jsp/tagext/PageData.java
@@ -32,18 +32,18 @@ import java.io.InputStream;
 public abstract class PageData {
 
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public PageData() {
         // NOOP by default
     }
-    
+
     /**
      * Returns an input stream on the XML view of a JSP page.
-     * The stream is encoded in UTF-8.  Recall that the XML view of a 
+     * The stream is encoded in UTF-8.  Recall that the XML view of a
      * JSP page has the include directives expanded.
-     * 
+     *
      * @return An input stream on the document.
      */
    public abstract InputStream getInputStream();

==================================================
SimpleTagSupport.java
index 25569a77e4..48a5ac7f60 100644
--- a/java/javax/servlet/jsp/tagext/SimpleTag.java
+++ b/java/javax/servlet/jsp/tagext/SimpleTag.java
@@ -20,59 +20,59 @@ import javax.servlet.jsp.JspContext;
 
 /**
  * Interface for defining Simple Tag Handlers.
- * 
- * <p>Simple Tag Handlers differ from Classic Tag Handlers in that instead 
- * of supporting <code>doStartTag()</code> and <code>doEndTag()</code>, 
- * the <code>SimpleTag</code> interface provides a simple 
- * <code>doTag()</code> method, which is called once and only once for any 
- * given tag invocation.  All tag logic, iteration, body evaluations, etc. 
- * are to be performed in this single method.  Thus, simple tag handlers 
- * have the equivalent power of <code>BodyTag</code>, but with a much 
+ *
+ * <p>Simple Tag Handlers differ from Classic Tag Handlers in that instead
+ * of supporting <code>doStartTag()</code> and <code>doEndTag()</code>,
+ * the <code>SimpleTag</code> interface provides a simple
+ * <code>doTag()</code> method, which is called once and only once for any
+ * given tag invocation.  All tag logic, iteration, body evaluations, etc.
+ * are to be performed in this single method.  Thus, simple tag handlers
+ * have the equivalent power of <code>BodyTag</code>, but with a much
  * simpler lifecycle and interface.</p>
  *
- * <p>To support body content, the <code>setJspBody()</code> 
- * method is provided.  The container invokes the <code>setJspBody()</code> 
- * method with a <code>JspFragment</code> object encapsulating the body of 
- * the tag.  The tag handler implementation can call 
+ * <p>To support body content, the <code>setJspBody()</code>
+ * method is provided.  The container invokes the <code>setJspBody()</code>
+ * method with a <code>JspFragment</code> object encapsulating the body of
+ * the tag.  The tag handler implementation can call
  * <code>invoke()</code> on that fragment to evaluate the body as
  * many times as it needs.</p>
  *
  * <p>A SimpleTag handler must have a public no-args constructor.  Most
  * SimpleTag handlers should extend SimpleTagSupport.</p>
- * 
+ *
  * <p><b>Lifecycle</b></p>
  *
- * <p>The following is a non-normative, brief overview of the 
+ * <p>The following is a non-normative, brief overview of the
  * SimpleTag lifecycle.  Refer to the JSP Specification for details.</p>
  *
  * <ol>
- *   <li>A new tag handler instance is created each time by the container 
+ *   <li>A new tag handler instance is created each time by the container
  *       by calling the provided zero-args constructor.  Unlike classic
  *       tag handlers, simple tag handlers are never cached and reused by
  *       the JSP container.</li>
- *   <li>The <code>setJspContext()</code> and <code>setParent()</code> 
+ *   <li>The <code>setJspContext()</code> and <code>setParent()</code>
  *       methods are called by the container.  The <code>setParent()</code>
- *       method is only called if the element is nested within another tag 
+ *       method is only called if the element is nested within another tag
  *       invocation.</li>
  *   <li>The setters for each attribute defined for this tag are called
  *       by the container.</li>
- *   <li>If a body exists, the <code>setJspBody()</code> method is called 
- *       by the container to set the body of this tag, as a 
+ *   <li>If a body exists, the <code>setJspBody()</code> method is called
+ *       by the container to set the body of this tag, as a
  *       <code>JspFragment</code>.  If the action element is empty in
  *       the page, this method is not called at all.</li>
  *   <li>The <code>doTag()</code> method is called by the container.  All
- *       tag logic, iteration, body evaluations, etc. occur in this 
+ *       tag logic, iteration, body evaluations, etc. occur in this
  *       method.</li>
  *   <li>The <code>doTag()</code> method returns and all variables are
  *       synchronized.</li>
  * </ol>
- * 
+ *
  * @see SimpleTagSupport
  * @since 2.0
  */
 public interface SimpleTag extends JspTag {
-    
-    /** 
+
+    /**
      * Called by the container to invoke this tag.
      * The implementation of this method is provided by the tag library
      * developer, and handles all tag processing, body iteration, etc.
@@ -81,60 +81,60 @@ public interface SimpleTag extends JspTag {
      * The JSP container will resynchronize any AT_BEGIN and AT_END
      * variables (defined by the associated tag file, TagExtraInfo, or TLD)
      * after the invocation of doTag().
-     * 
-     * @throws javax.servlet.jsp.JspException If an error occurred 
+     *
+     * @throws javax.servlet.jsp.JspException If an error occurred
      *     while processing this tag.
      * @throws javax.servlet.jsp.SkipPageException If the page that
      *     (either directly or indirectly) invoked this tag is to
-     *     cease evaluation.  A Simple Tag Handler generated from a 
-     *     tag file must throw this exception if an invoked Classic 
+     *     cease evaluation.  A Simple Tag Handler generated from a
+     *     tag file must throw this exception if an invoked Classic
      *     Tag Handler returned SKIP_PAGE or if an invoked Simple
      *     Tag Handler threw SkipPageException or if an invoked Jsp Fragment
      *     threw a SkipPageException.
      * @throws java.io.IOException If there was an error writing to the
      *     output stream.
-     */ 
-    public void doTag() 
+     */
+    public void doTag()
         throws javax.servlet.jsp.JspException, java.io.IOException;
-    
+
     /**
      * Sets the parent of this tag, for collaboration purposes.
      * <p>
-     * The container invokes this method only if this tag invocation is 
+     * The container invokes this method only if this tag invocation is
      * nested within another tag invocation.
      *
      * @param parent the tag that encloses this tag
      */
     public void setParent( JspTag parent );
-    
+
     /**
      * Returns the parent of this tag, for collaboration purposes.
      *
      * @return the parent of this tag
-     */ 
+     */
     public JspTag getParent();
-    
+
     /**
      * Called by the container to provide this tag handler with
      * the <code>JspContext</code> for this invocation.
      * An implementation should save this value.
-     * 
+     *
      * @param pc the page context for this invocation
      * @see Tag#setPageContext
      */
     public void setJspContext( JspContext pc );
-                
-    /** 
-     * Provides the body of this tag as a JspFragment object, able to be 
-     * invoked zero or more times by the tag handler. 
+
+    /**
+     * Provides the body of this tag as a JspFragment object, able to be
+     * invoked zero or more times by the tag handler.
      * <p>
-     * This method is invoked by the JSP page implementation 
+     * This method is invoked by the JSP page implementation
      * object prior to <code>doTag()</code>.  If the action element is
      * empty in the page, this method is not called at all.
-     * 
+     *
      * @param jspBody The fragment encapsulating the body of this tag.
-     */ 
+     */
     public void setJspBody( JspFragment jspBody );
 
-    
+
 }

==================================================
Tag.java
index 43967ec252..50c767db1f 100644
--- a/java/javax/servlet/jsp/tagext/SimpleTagSupport.java
+++ b/java/javax/servlet/jsp/tagext/SimpleTagSupport.java
@@ -35,42 +35,42 @@ import javax.servlet.jsp.JspException;
 public class SimpleTagSupport implements SimpleTag {
     /** Reference to the enclosing tag. */
     private JspTag parentTag;
-    
+
     /** The JSP context for the upcoming tag invocation. */
     private JspContext jspContext;
-    
+
     /** The body of the tag. */
     private JspFragment jspBody;
-    
+
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public SimpleTagSupport() {
         // NOOP by default
     }
-    
-    /** 
+
+    /**
      * Default processing of the tag does nothing.
      *
      * @throws JspException Subclasses can throw JspException to indicate
      *     an error occurred while processing this tag.
      * @throws javax.servlet.jsp.SkipPageException If the page that
      *     (either directly or indirectly) invoked this tag is to
-     *     cease evaluation.  A Simple Tag Handler generated from a 
-     *     tag file must throw this exception if an invoked Classic 
+     *     cease evaluation.  A Simple Tag Handler generated from a
+     *     tag file must throw this exception if an invoked Classic
      *     Tag Handler returned SKIP_PAGE or if an invoked Simple
      *     Tag Handler threw SkipPageException or if an invoked Jsp Fragment
      *     threw a SkipPageException.
      * @throws IOException Subclasses can throw IOException if there was
      *     an error writing to the output stream
      * @see SimpleTag#doTag()
-     */ 
+     */
     @Override
     public void doTag() throws JspException, IOException {
         // NOOP by default
     }
-    
+
     /**
      * Sets the parent of this tag, for collaboration purposes.
      * <p>
@@ -83,22 +83,22 @@ public class SimpleTagSupport implements SimpleTag {
     public void setParent( JspTag parent ) {
         this.parentTag = parent;
     }
-    
+
     /**
      * Returns the parent of this tag, for collaboration purposes.
      *
      * @return the parent of this tag
-     */ 
+     */
     @Override
     public JspTag getParent() {
         return this.parentTag;
     }
-    
+
     /**
      * Stores the provided JSP context in the private jspContext field.
-     * Subclasses can access the <code>JspContext</code> via 
+     * Subclasses can access the <code>JspContext</code> via
      * <code>getJspContext()</code>.
-     * 
+     *
      * @param pc the page context for this invocation
      * @see SimpleTag#setJspContext
      */
@@ -106,9 +106,9 @@ public class SimpleTagSupport implements SimpleTag {
     public void setJspContext( JspContext pc ) {
         this.jspContext = pc;
     }
-    
+
     /**
-     * Returns the page context passed in by the container via 
+     * Returns the page context passed in by the container via
      * setJspContext.
      *
      * @return the page context for this invocation
@@ -116,20 +116,20 @@ public class SimpleTagSupport implements SimpleTag {
     protected JspContext getJspContext() {
         return this.jspContext;
     }
-                
-    /** 
+
+    /**
      * Stores the provided JspFragment.
      *
      * @param jspBody The fragment encapsulating the body of this tag.
-     *     If the action element is empty in the page, this method is 
+     *     If the action element is empty in the page, this method is
      *     not called at all.
      * @see SimpleTag#setJspBody
-     */ 
+     */
     @Override
     public void setJspBody( JspFragment jspBody ) {
         this.jspBody = jspBody;
     }
-    
+
     /**
      * Returns the body passed in by the container via setJspBody.
      *
@@ -144,7 +144,7 @@ public class SimpleTagSupport implements SimpleTag {
      * Find the instance of a given class type that is closest to a given
      * instance.
      * This method uses the getParent method from the Tag and/or SimpleTag
-     * interfaces.  This method is used for coordination among 
+     * interfaces.  This method is used for coordination among
      * cooperating tags.
      *
      * <p> For every instance of TagAdapter
@@ -172,7 +172,7 @@ public class SimpleTagSupport implements SimpleTag {
      * should adhere to that constraint.  Specifically, the Class
      * passed to findAncestorWithClass should be a subtype of the
      * observable type.
-     * 
+     *
      *
      * @param from The instance from where to start looking.
      * @param klass The subclass of JspTag or interface to be matched
@@ -180,7 +180,7 @@ public class SimpleTagSupport implements SimpleTag {
      * or is an instance of the class specified
      */
     public static final JspTag findAncestorWithClass(
-        JspTag from, Class<?> klass) 
+        JspTag from, Class<?> klass)
     {
         boolean isInterface = false;
 
@@ -213,5 +213,5 @@ public class SimpleTagSupport implements SimpleTag {
 
             from = parent;
         }
-    }    
+    }
 }

==================================================
TagAdapter.java
index fdd3b07061..288fcfaf83 100644
--- a/java/javax/servlet/jsp/tagext/Tag.java
+++ b/java/javax/servlet/jsp/tagext/Tag.java
@@ -14,7 +14,7 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
- 
+
 package javax.servlet.jsp.tagext;
 
 import javax.servlet.jsp.JspException;
@@ -22,9 +22,9 @@ import javax.servlet.jsp.PageContext;
 
 
 /**
- * The interface of a classic tag handler that does not want to manipulate 
- * its body.  The Tag interface defines the basic protocol between a Tag 
- * handler and JSP page implementation class.  It defines the life cycle 
+ * The interface of a classic tag handler that does not want to manipulate
+ * its body.  The Tag interface defines the basic protocol between a Tag
+ * handler and JSP page implementation class.  It defines the life cycle
  * and the methods to be invoked at start and end tag.
  *
  * <p><B>Properties</B></p>
@@ -55,11 +55,11 @@ import javax.servlet.jsp.PageContext;
  * or not.
  * <li> [2] This transition happens if and only if the tag ends normally
  * without raising an exception
- * <li> [3] Some setters may be called again before a tag handler is 
- * reused.  For instance, <code>setParent()</code> is called if it's 
- * reused within the same page but at a different level, 
- * <code>setPageContext()</code> is called if it's used in another page, 
- * and attribute setters are called if the values differ or are expressed 
+ * <li> [3] Some setters may be called again before a tag handler is
+ * reused.  For instance, <code>setParent()</code> is called if it's
+ * reused within the same page but at a different level,
+ * <code>setPageContext()</code> is called if it's used in another page,
+ * and attribute setters are called if the values differ or are expressed
  * as request-time attribute values.
  * <li> Check the TryCatchFinally interface for additional details related
  * to exception handling and resource management.
@@ -67,7 +67,7 @@ import javax.servlet.jsp.PageContext;
  *
  * <IMG src="doc-files/TagProtocol.gif"
  *      alt="Lifecycle Details Transition Diagram for Tag"/>
- * 
+ *
  * <p>Once all invocations on the tag handler
  * are completed, the release method is invoked on it.  Once a release
  * method is invoked <em>all</em> properties, including parent and
@@ -84,7 +84,7 @@ import javax.servlet.jsp.PageContext;
  * EVAL_BODY_INCLUDE.</p>
  *
  * <p>If SKIP_BODY is returned the body, if present, is not evaluated.</p>
- * 
+ *
  * <p>If EVAL_BODY_INCLUDE is returned, the body is evaluated and
  * "passed through" to the current out.</p>
 */
@@ -95,14 +95,14 @@ public interface Tag extends JspTag {
      * Skip body evaluation.
      * Valid return value for doStartTag and doAfterBody.
      */
- 
+
     public static final int SKIP_BODY = 0;
- 
+
     /**
      * Evaluate body into existing out stream.
      * Valid return value for doStartTag.
      */
- 
+
     public static final int EVAL_BODY_INCLUDE = 1;
 
     /**
@@ -214,14 +214,14 @@ public interface Tag extends JspTag {
      * implementing BodyTag whose doStartTag() method returns
      * BodyTag.EVAL_BODY_BUFFERED.
      *
-     * @return EVAL_BODY_INCLUDE if the tag wants to process body, SKIP_BODY 
+     * @return EVAL_BODY_INCLUDE if the tag wants to process body, SKIP_BODY
      *     if it does not want to process it.
      * @throws JspException if an error occurred while processing this tag
      * @see BodyTag
      */
- 
+
     int doStartTag() throws JspException;
- 
+
 
     /**
      * Process the end tag for this instance.
@@ -236,7 +236,7 @@ public interface Tag extends JspTag {
      * <p>
      * If this method returns EVAL_PAGE, the rest of the page continues
      * to be evaluated.  If this method returns SKIP_PAGE, the rest of
-     * the page is not evaluated, the request is completed, and 
+     * the page is not evaluated, the request is completed, and
      * the doEndTag() methods of enclosing tags are not invoked.  If this
      * request was forwarded or included from another page (or Servlet),
      * only the current page evaluation is stopped.

==================================================
TagAttributeInfo.java
index 3d2f19caef..1ae8bb8f7b 100644
--- a/java/javax/servlet/jsp/tagext/TagAdapter.java
+++ b/java/javax/servlet/jsp/tagext/TagAdapter.java
@@ -29,7 +29,7 @@ import javax.servlet.jsp.PageContext;
  * created to wrap the SimpleTag parent, and the adapter is passed to
  * setParent() instead. A classic Tag Handler can call getAdaptee() to retrieve
  * the encapsulated SimpleTag instance.
- * 
+ *
  * @since 2.0
  */
 public class TagAdapter implements Tag {
@@ -45,7 +45,7 @@ public class TagAdapter implements Tag {
     /**
      * Creates a new TagAdapter that wraps the given SimpleTag and returns the
      * parent tag when getParent() is called.
-     * 
+     *
      * @param adaptee
      *            The SimpleTag being adapted as a Tag.
      */
@@ -59,7 +59,7 @@ public class TagAdapter implements Tag {
 
     /**
      * Must not be called.
-     * 
+     *
      * @param pc
      *            ignored.
      * @throws UnsupportedOperationException
@@ -74,7 +74,7 @@ public class TagAdapter implements Tag {
     /**
      * Must not be called. The parent of this tag is always
      * getAdaptee().getParent().
-     * 
+     *
      * @param parentTag
      *            ignored.
      * @throws UnsupportedOperationException
@@ -91,7 +91,7 @@ public class TagAdapter implements Tag {
      * This will either be the enclosing Tag (if getAdaptee().getParent()
      * implements Tag), or an adapter to the enclosing Tag (if
      * getAdaptee().getParent() does not implement Tag).
-     * 
+     *
      * @return The parent of the tag being adapted.
      */
     @Override
@@ -116,7 +116,7 @@ public class TagAdapter implements Tag {
      * Gets the tag that is being adapted to the Tag interface. This should be
      * an instance of SimpleTag in JSP 2.0, but room is left for other kinds of
      * tags in future spec versions.
-     * 
+     *
      * @return the tag that is being adapted
      */
     public JspTag getAdaptee() {
@@ -125,7 +125,7 @@ public class TagAdapter implements Tag {
 
     /**
      * Must not be called.
-     * 
+     *
      * @return always throws UnsupportedOperationException
      * @throws UnsupportedOperationException
      *             Must not be called
@@ -140,7 +140,7 @@ public class TagAdapter implements Tag {
 
     /**
      * Must not be called.
-     * 
+     *
      * @return always throws UnsupportedOperationException
      * @throws UnsupportedOperationException
      *             Must not be called
@@ -155,7 +155,7 @@ public class TagAdapter implements Tag {
 
     /**
      * Must not be called.
-     * 
+     *
      * @throws UnsupportedOperationException
      *             Must not be called
      */

==================================================
TagData.java
index 3888de2198..2573547f9f 100644
--- a/java/javax/servlet/jsp/tagext/TagAttributeInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagAttributeInfo.java
@@ -20,7 +20,7 @@ package javax.servlet.jsp.tagext;
 /**
  * Information on the attributes of a Tag, available at translation time. This
  * class is instantiated from the Tag Library Descriptor file (TLD).
- * 
+ *
  * <p>
  * Only the information needed to generate code is included here. Other
  * information like SCHEMA for validation belongs elsewhere.
@@ -38,7 +38,7 @@ public class TagAttributeInfo {
      * Constructor for TagAttributeInfo. This class is to be instantiated only
      * from the TagLibrary code under request from some JSP code that is parsing
      * a TLD (Tag Library Descriptor).
-     * 
+     *
      * @param name
      *            The name of the attribute.
      * @param required
@@ -58,7 +58,7 @@ public class TagAttributeInfo {
      * JSP 2.0 Constructor for TagAttributeInfo. This class is to be
      * instantiated only from the TagLibrary code under request from some JSP
      * code that is parsing a TLD (Tag Library Descriptor).
-     * 
+     *
      * @param name
      *            The name of the attribute.
      * @param required
@@ -69,7 +69,7 @@ public class TagAttributeInfo {
      *            Whether this attribute holds a request-time Attribute.
      * @param fragment
      *            Whether this attribute is of type JspFragment
-     * 
+     *
      * @since 2.0
      */
 
@@ -99,7 +99,7 @@ public class TagAttributeInfo {
 
     /**
      * The name of this attribute.
-     * 
+     *
      * @return the name of the attribute
      */
 
@@ -109,7 +109,7 @@ public class TagAttributeInfo {
 
     /**
      * The type (as a String) of this attribute.
-     * 
+     *
      * @return the type of the attribute
      */
 
@@ -119,7 +119,7 @@ public class TagAttributeInfo {
 
     /**
      * Whether this attribute can hold a request-time value.
-     * 
+     *
      * @return if the attribute can hold a request-time value.
      */
 
@@ -129,7 +129,7 @@ public class TagAttributeInfo {
 
     /**
      * Whether this attribute is required.
-     * 
+     *
      * @return if the attribute is required.
      */
     public boolean isRequired() {
@@ -139,7 +139,7 @@ public class TagAttributeInfo {
     /**
      * Convenience static method that goes through an array of TagAttributeInfo
      * objects and looks for "id".
-     * 
+     *
      * @param a
      *            An array of TagAttributeInfo
      * @return The TagAttributeInfo reference with name "id"
@@ -155,9 +155,9 @@ public class TagAttributeInfo {
 
     /**
      * Whether this attribute is of type JspFragment.
-     * 
+     *
      * @return if the attribute is of type JspFragment
-     * 
+     *
      * @since 2.0
      */
     public boolean isFragment() {
@@ -167,7 +167,7 @@ public class TagAttributeInfo {
     /**
      * Returns a String representation of this TagAttributeInfo, suitable for
      * debugging purposes.
-     * 
+     *
      * @return a String representation of this TagAttributeInfo
      */
     @Override

==================================================
TagExtraInfo.java
index 72908a4915..354e8e3efc 100644
--- a/java/javax/servlet/jsp/tagext/TagData.java
+++ b/java/javax/servlet/jsp/tagext/TagData.java
@@ -23,8 +23,8 @@ import java.util.Hashtable;
  * The (translation-time only) attribute/value information for a tag instance.
  *
  * <p>
- * TagData is only used as an argument to the isValid, validate, and 
- * getVariableInfo methods of TagExtraInfo, which are invoked at 
+ * TagData is only used as an argument to the isValid, validate, and
+ * getVariableInfo methods of TagExtraInfo, which are invoked at
  * translation time.
  */
 
@@ -72,7 +72,7 @@ public class TagData implements Cloneable {
      * Constructor for a TagData.
      *
      * If you already have the attributes in a hashtable, use this
-     * constructor. 
+     * constructor.
      *
      * @param attrs A hashtable to get the values from.
      */
@@ -99,9 +99,9 @@ public class TagData implements Cloneable {
      * The distinguished object REQUEST_TIME_VALUE is only returned if
      * the value is specified as a request-time attribute expression
      * or via the &lt;jsp:attribute&gt; action with a body that contains
-     * dynamic content (scriptlets, scripting expressions, EL expressions, 
-     * standard actions, or custom actions).  Returns null if the attribute 
-     * is not set. 
+     * dynamic content (scriptlets, scripting expressions, EL expressions,
+     * standard actions, or custom actions).  Returns null if the attribute
+     * is not set.
      *
      * @param attName the name of the attribute
      * @return the attribute's value

==================================================
TagFileInfo.java
index b6c298adff..027e7c2233 100644
--- a/java/javax/servlet/jsp/tagext/TagExtraInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagExtraInfo.java
@@ -15,7 +15,7 @@
 * limitations under the License.
 */
 
- 
+
 package javax.servlet.jsp.tagext;
 
 /**
@@ -36,7 +36,7 @@ package javax.servlet.jsp.tagext;
  * object for the tag being translated. If an explicit call to
  * setTagInfo() is done, then the object passed will be returned in
  * subsequent calls to getTagInfo().
- * 
+ *
  * <p>
  * The only way to affect the value returned by getTagInfo()
  * is through a setTagInfo() call, and thus, TagExtraInfo.setTagInfo() is
@@ -55,13 +55,13 @@ package javax.servlet.jsp.tagext;
 public abstract class TagExtraInfo {
 
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public TagExtraInfo() {
         // NOOP by default
     }
-    
+
     /**
      * information on scripting variables defined by the tag associated with
      * this TagExtraInfo instance.
@@ -76,7 +76,7 @@ public abstract class TagExtraInfo {
     }
 
     /**
-     * Translation-time validation of the attributes. 
+     * Translation-time validation of the attributes.
      * Request-time attributes are indicated as such in the TagData parameter.
      * Note that the preferred way to do validation is with the validate()
      * method, since it can return more detailed information.
@@ -93,17 +93,17 @@ public abstract class TagExtraInfo {
     /**
      * Translation-time validation of the attributes.
      * Request-time attributes are indicated as such in the TagData parameter.
-     * Because of the higher quality validation messages possible, 
-     * this is the preferred way to do validation (although isValid() 
-     * still works).  
-     * 
+     * Because of the higher quality validation messages possible,
+     * this is the preferred way to do validation (although isValid()
+     * still works).
+     *
      * <p>JSP 2.0 and higher containers call validate() instead of isValid().
-     * The default implementation of this method is to call isValid().  If 
+     * The default implementation of this method is to call isValid().  If
      * isValid() returns false, a generic ValidationMessage[] is returned
      * indicating isValid() returned false.</p>
      *
      * @param data The TagData instance.
-     * @return A null object, or zero length array if no errors, an 
+     * @return A null object, or zero length array if no errors, an
      *     array of ValidationMessages otherwise.
      * @since 2.0
      */
@@ -135,7 +135,7 @@ public abstract class TagExtraInfo {
     public final TagInfo getTagInfo() {
         return tagInfo;
     }
-    
+
     // private data
     private  TagInfo tagInfo;
 

==================================================
TagInfo.java
index e825c918cb..dfa15f61a8 100644
--- a/java/javax/servlet/jsp/tagext/TagFileInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagFileInfo.java
@@ -15,7 +15,7 @@
 * limitations under the License.
 */
 
- 
+
 package javax.servlet.jsp.tagext;
 
 /**
@@ -39,7 +39,7 @@ public class TagFileInfo {
      * design error, which may be fixed in the future.
      *
      * @param name The unique action name of this tag
-     * @param path Where to find the .tag file implementing this 
+     * @param path Where to find the .tag file implementing this
      *     action, relative to the location of the TLD file.
      * @param tagInfo The detailed information about this tag, as parsed
      *     from the directives in the tag file.
@@ -62,7 +62,7 @@ public class TagFileInfo {
     /**
      * Where to find the .tag file implementing this action.
      *
-     * @return The path of the tag file, relative to the TLD, or "." if 
+     * @return The path of the tag file, relative to the TLD, or "." if
      *     the tag file was defined in an implicit tag file.
      */
     public String getPath() {
@@ -70,7 +70,7 @@ public class TagFileInfo {
     }
 
     /**
-     * Returns information about this tag, parsed from the directives 
+     * Returns information about this tag, parsed from the directives
      * in the tag file.
      *
      * @return a TagInfo object containing information about this tag

==================================================
TagLibraryInfo.java
index fcafa2b172..95b7e7057e 100644
--- a/java/javax/servlet/jsp/tagext/TagInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagInfo.java
@@ -15,7 +15,7 @@
 * limitations under the License.
 */
 
- 
+
 package javax.servlet.jsp.tagext;
 
 /**
@@ -23,7 +23,7 @@ package javax.servlet.jsp.tagext;
  * This class is instantiated from the Tag Library Descriptor file (TLD)
  * and is available only at translation time.
  *
- * 
+ *
 */
 
 public class TagInfo {
@@ -46,12 +46,12 @@ public class TagInfo {
      */
 
     public static final String BODY_CONTENT_EMPTY = "empty";
-    
+
     /**
      * Static constant for getBodyContent() when it is scriptless.
-     * 
+     *
      * @since 2.0
-     */ 
+     */
     public static final String BODY_CONTENT_SCRIPTLESS = "scriptless";
 
     /**
@@ -93,7 +93,7 @@ public class TagInfo {
         if (tagExtraInfo != null)
             tagExtraInfo.setTagInfo(this);
     }
-                         
+
     /**
      * Constructor for TagInfo from data in the JSP 1.2 format for TLD.
      * This class is to be instantiated only from the TagLibrary code
@@ -144,7 +144,7 @@ public class TagInfo {
         if (tagExtraInfo != null)
             tagExtraInfo.setTagInfo(this);
     }
-                         
+
     /**
      * Constructor for TagInfo from data in the JSP 2.0 format for TLD.
      * This class is to be instantiated only from the TagLibrary code
@@ -243,7 +243,7 @@ public class TagInfo {
    }
 
     /**
-     * Translation-time validation of the attributes. 
+     * Translation-time validation of the attributes.
      * This is a convenience method on the associated TagExtraInfo class.
      *
      * @param data The translation-time TagData instance.
@@ -276,7 +276,7 @@ public class TagInfo {
 
     /**
      * Set the instance for extra tag information.
-     * 
+     *
      * @param tei the TagExtraInfo instance
      */
     public void setTagExtraInfo(TagExtraInfo tei) {
@@ -286,7 +286,7 @@ public class TagInfo {
 
     /**
      * The instance (if any) for extra tag information.
-     * 
+     *
      * @return The TagExtraInfo instance, if any.
      */
     public TagExtraInfo getTagExtraInfo() {
@@ -299,7 +299,7 @@ public class TagInfo {
      *
      * @return The name of the tag handler class.
      */
-    
+
     public String getTagClassName() {
         return tagClassName;
     }
@@ -321,7 +321,7 @@ public class TagInfo {
     /**
      * The information string for the tag.
      *
-     * @return the info string, or null if 
+     * @return the info string, or null if
      *         not defined
      */
 

==================================================
TagLibraryValidator.java
index 7e78658792..79eb9c2638 100644
--- a/java/javax/servlet/jsp/tagext/TagLibraryInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagLibraryInfo.java
@@ -27,7 +27,7 @@ public abstract class TagLibraryInfo {
     /**
      * Constructor. This will invoke the constructors for TagInfo, and
      * TagAttributeInfo after parsing the TLD file.
-     * 
+     *
      * @param prefix
      *            the prefix actually used by the taglib directive
      * @param uri
@@ -43,7 +43,7 @@ public abstract class TagLibraryInfo {
     /**
      * The value of the uri attribute from the taglib directive for this
      * library.
-     * 
+     *
      * @return the value of the uri attribute
      */
     public String getURI() {
@@ -52,7 +52,7 @@ public abstract class TagLibraryInfo {
 
     /**
      * The prefix assigned to this taglib from the taglib directive
-     * 
+     *
      * @return the prefix assigned to this taglib from the taglib directive
      */
     public String getPrefixString() {
@@ -65,7 +65,7 @@ public abstract class TagLibraryInfo {
      * The preferred short name (prefix) as indicated in the TLD. This may be
      * used by authoring tools as the preferred prefix to use when creating an
      * taglib directive for this library.
-     * 
+     *
      * @return the preferred short name for the library
      */
     public String getShortName() {
@@ -76,7 +76,7 @@ public abstract class TagLibraryInfo {
      * The "reliable" URN indicated in the TLD (the uri element). This may be
      * used by authoring tools as a global identifier to use when creating a
      * taglib directive for this library.
-     * 
+     *
      * @return a reliable URN to a TLD like this
      */
     public String getReliableURN() {
@@ -85,7 +85,7 @@ public abstract class TagLibraryInfo {
 
     /**
      * Information (documentation) for this TLD.
-     * 
+     *
      * @return the info string for this tag lib
      */
     public String getInfoString() {
@@ -94,7 +94,7 @@ public abstract class TagLibraryInfo {
 
     /**
      * A string describing the required version of the JSP container.
-     * 
+     *
      * @return the (minimal) required version of the JSP container.
      * @see javax.servlet.jsp.JspEngineInfo
      */
@@ -104,7 +104,7 @@ public abstract class TagLibraryInfo {
 
     /**
      * An array describing the tags that are defined in this tag library.
-     * 
+     *
      * @return the TagInfo objects corresponding to the tags defined by this tag
      *         library, or a zero length array if this tag library defines no
      *         tags
@@ -115,7 +115,7 @@ public abstract class TagLibraryInfo {
 
     /**
      * An array describing the tag files that are defined in this tag library.
-     * 
+     *
      * @return the TagFileInfo objects corresponding to the tag files defined by
      *         this tag library, or a zero length array if this tag library
      *         defines no tags files
@@ -128,7 +128,7 @@ public abstract class TagLibraryInfo {
     /**
      * Get the TagInfo for a given tag name, looking through all the tags in
      * this tag library.
-     * 
+     *
      * @param shortname
      *            The short name (no prefix) of the tag
      * @return the TagInfo for the tag with the specified short name, or null if
@@ -152,7 +152,7 @@ public abstract class TagLibraryInfo {
     /**
      * Get the TagFileInfo for a given tag name, looking through all the tag
      * files in this tag library.
-     * 
+     *
      * @param shortname
      *            The short name (no prefix) of the tag
      * @return the TagFileInfo for the specified Tag file, or null if no Tag
@@ -176,7 +176,7 @@ public abstract class TagLibraryInfo {
 
     /**
      * An array describing the functions that are defined in this tag library.
-     * 
+     *
      * @return the functions defined in this tag library, or a zero length array
      *         if the tag library defines no functions.
      * @since 2.0
@@ -188,7 +188,7 @@ public abstract class TagLibraryInfo {
     /**
      * Get the FunctionInfo for a given function name, looking through all the
      * functions in this tag library.
-     * 
+     *
      * @param name
      *            The name (no prefix) of the function
      * @return the FunctionInfo for the function with the given name, or null if
@@ -216,7 +216,7 @@ public abstract class TagLibraryInfo {
      * If a tag library is imported more than once and bound to different
      * prefixes, only the TagLibraryInfo bound to the first prefix must be
      * included in the returned array.
-     * 
+     *
      * @return Array of TagLibraryInfo objects representing the entire set of
      *         tag libraries (including this TagLibraryInfo) imported by taglib
      *         directives in the translation unit that references this
@@ -245,14 +245,14 @@ public abstract class TagLibraryInfo {
 
     /**
      * An array describing the tag files that are defined in this tag library.
-     * 
+     *
      * @since 2.0
      */
     protected TagFileInfo[] tagFiles;
 
     /**
      * An array describing the functions that are defined in this tag library.
-     * 
+     *
      * @since 2.0
      */
     protected FunctionInfo[] functions;

==================================================
TagSupport.java
index 632c89b6d6..33032d4622 100644
--- a/java/javax/servlet/jsp/tagext/TagLibraryValidator.java
+++ b/java/javax/servlet/jsp/tagext/TagLibraryValidator.java
@@ -20,7 +20,7 @@ package javax.servlet.jsp.tagext;
 import java.util.Map;
 
 /**
- * Translation-time validator class for a JSP page. 
+ * Translation-time validator class for a JSP page.
  * A validator operates on the XML view associated with the JSP page.
  *
  * <p>
@@ -40,12 +40,12 @@ import java.util.Map;
  * be invoked, where the first two arguments are the prefix
  * and uri for this tag library in the XML View.  The prefix is intended
  * to make it easier to produce an error message.  However, it is not
- * always accurate.  In the case where a single URI is mapped to more 
+ * always accurate.  In the case where a single URI is mapped to more
  * than one prefix in the XML view, the prefix of the first URI is provided.
- * Therefore, to provide high quality error messages in cases where the 
- * tag elements themselves are checked, the prefix parameter should be 
- * ignored and the actual prefix of the element should be used instead.  
- * TagLibraryValidators should always use the uri to identify elements 
+ * Therefore, to provide high quality error messages in cases where the
+ * tag elements themselves are checked, the prefix parameter should be
+ * ignored and the actual prefix of the element should be used instead.
+ * TagLibraryValidators should always use the uri to identify elements
  * as beloning to the tag library, not the prefix.
  *
  * <p>
@@ -73,7 +73,7 @@ import java.util.Map;
  * of an error.
  *
  * <p>
- * The actual prefix of the <code>id</code> attribute may or may not be 
+ * The actual prefix of the <code>id</code> attribute may or may not be
  * <code>jsp</code> but it will always map to the namespace
  * <code>http://java.sun.com/JSP/Page</code>.  A TagLibraryValidator
  * implementation must rely on the uri, not the prefix, of the <code>id</code>
@@ -83,13 +83,13 @@ import java.util.Map;
 public abstract class TagLibraryValidator {
 
     /**
-     * Sole constructor. (For invocation by subclass constructors, 
+     * Sole constructor. (For invocation by subclass constructors,
      * typically implicit.)
      */
     public TagLibraryValidator() {
         // NOOP by default
     }
-    
+
     /**
      * Set the init data in the TLD for this validator.
      * Parameter names are keys, and parameter values are the values.
@@ -118,15 +118,15 @@ public abstract class TagLibraryValidator {
      * the method should return an array of ValidationMessage objects.
      * An array of length zero is also interpreted as no errors.
      *
-     * @param prefix the first prefix with which the tag library is 
-     *     associated, in the XML view.  Note that some tags may use 
+     * @param prefix the first prefix with which the tag library is
+     *     associated, in the XML view.  Note that some tags may use
      *     a different prefix if the namespace is redefined.
      * @param uri the tag library's unique identifier
      * @param page the JspData page object
      * @return A null object, or zero length array if no errors, an array
      * of ValidationMessages otherwise.
      */
-    public ValidationMessage[] validate(String prefix, String uri, 
+    public ValidationMessage[] validate(String prefix, String uri,
         PageData page) {
         return null;
     }

==================================================
TagVariableInfo.java
index 4355e71d35..9a8934dfdd 100644
--- a/java/javax/servlet/jsp/tagext/TagSupport.java
+++ b/java/javax/servlet/jsp/tagext/TagSupport.java
@@ -34,7 +34,7 @@ import javax.servlet.jsp.PageContext;
  * facilitate coordination among cooperating tags.
  *
  * <p> Many tag handlers will extend TagSupport and only redefine a
- * few methods. 
+ * few methods.
  */
 public class TagSupport implements IterationTag, Serializable {
 
@@ -66,7 +66,7 @@ public class TagSupport implements IterationTag, Serializable {
      * should adhere to that constraint.  Specifically, the Class
      * passed to findAncestorWithClass should be a subtype of the
      * observable type.
-     * 
+     *
      *
      * @param from The instance from where to start looking.
      * @param klass The subclass of Tag or interface to be matched

==================================================
TryCatchFinally.java
index 87a75409e4..70ac7bf387 100644
--- a/java/javax/servlet/jsp/tagext/TagVariableInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagVariableInfo.java
@@ -26,7 +26,7 @@ public class TagVariableInfo {
 
     /**
      * Constructor for TagVariableInfo.
-     * 
+     *
      * @param nameGiven
      *            value of &lt;name-given&gt;
      * @param nameFromAttribute
@@ -49,7 +49,7 @@ public class TagVariableInfo {
 
     /**
      * The body of the &lt;name-given&gt; element.
-     * 
+     *
      * @return The variable name as a constant
      */
     public String getNameGiven() {
@@ -61,7 +61,7 @@ public class TagVariableInfo {
      * an attribute whose (translation-time) value will give the name of the
      * variable. One of &lt;name-given&gt; or &lt;name-from-attribute&gt; is
      * required.
-     * 
+     *
      * @return The attribute whose value defines the variable name
      */
     public String getNameFromAttribute() {
@@ -70,7 +70,7 @@ public class TagVariableInfo {
 
     /**
      * The body of the &lt;variable-class&gt; element.
-     * 
+     *
      * @return The name of the class of the variable or 'java.lang.String' if
      *         not defined in the TLD.
      */
@@ -80,7 +80,7 @@ public class TagVariableInfo {
 
     /**
      * The body of the &lt;declare&gt; element.
-     * 
+     *
      * @return Whether the variable is to be declared or not. If not defined in
      *         the TLD, 'true' will be returned.
      */
@@ -90,7 +90,7 @@ public class TagVariableInfo {
 
     /**
      * The body of the &lt;scope&gt; element.
-     * 
+     *
      * @return The scope to give the variable. NESTED scope will be returned if
      *         not defined in the TLD.
      */

==================================================
ValidationMessage.java
index 64621f07a6..46b0d4e916 100644
--- a/java/javax/servlet/jsp/tagext/TryCatchFinally.java
+++ b/java/javax/servlet/jsp/tagext/TryCatchFinally.java
@@ -15,7 +15,7 @@
 * limitations under the License.
 */
 
- 
+
 package javax.servlet.jsp.tagext;
 
 
@@ -33,7 +33,7 @@ package javax.servlet.jsp.tagext;
  * h.setPageContext(pc);  // initialize as desired
  * h.setParent(null);
  * h.setFoo("foo");
- * 
+ *
  * // tag invocation protocol; see Tag.java
  * try {
  *   doStartTag()...
@@ -46,7 +46,7 @@ package javax.servlet.jsp.tagext;
  *   // restore data invariants and release per-invocation resources
  *   h.doFinally();
  * }
- * 
+ *
  * ... other invocations perhaps with some new setters
  * ...
  * h.release();  // release long-term resources
@@ -72,10 +72,10 @@ public interface TryCatchFinally {
      * condition.
      *
      * @param t The throwable exception navigating through this tag.
-     * @throws Throwable if the exception is to be rethrown further up 
+     * @throws Throwable if the exception is to be rethrown further up
      *     the nest chain.
      */
- 
+
     void doCatch(Throwable t) throws Throwable;
 
     /**

==================================================
VariableInfo.java
index 98590749a1..4c0b34c98b 100644
--- a/java/javax/servlet/jsp/tagext/ValidationMessage.java
+++ b/java/javax/servlet/jsp/tagext/ValidationMessage.java
@@ -42,7 +42,7 @@ public class ValidationMessage {
      * element, or if no jsp:id attributes were passed on. If non-null, the
      * value of id must be the value of a jsp:id attribute for the PageData
      * passed into the validate() method.
-     * 
+     *
      * @param id
      *            Either null, or the value of a jsp:id attribute.
      * @param message
@@ -55,7 +55,7 @@ public class ValidationMessage {
 
     /**
      * Get the jsp:id. Null means that there is no information available.
-     * 
+     *
      * @return The jsp:id information.
      */
     public String getId() {
@@ -64,7 +64,7 @@ public class ValidationMessage {
 
     /**
      * Get the localized validation message.
-     * 
+     *
      * @return A validation message
      */
     public String getMessage() {

==================================================
WebServiceRef.java
index fb866b60fe..82bb2cc9cb 100644
--- a/java/javax/servlet/resources/xml.xsd
+++ b/java/javax/servlet/resources/xml.xsd
@@ -44,7 +44,7 @@
         &lt;type . . .>
          . . .
          &lt;attributeGroup ref="xml:specialAttrs"/>
- 
+
          will define a type which will schema-validate an instance
          element with any of those attributes</xs:documentation>
  </xs:annotation>

==================================================
WebServiceRefs.java
index 6d0d3899eb..28b150e784 100644
--- a/java/javax/xml/ws/WebServiceRef.java
+++ b/java/javax/xml/ws/WebServiceRef.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
