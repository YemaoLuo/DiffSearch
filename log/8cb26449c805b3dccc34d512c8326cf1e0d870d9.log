8cb26449c805b3dccc34d512c8326cf1e0d870d9
==================================================
Fix missing @Override markers in Jasper and remove an unnecessary null check
==================================================
Mark Emlyn
==================================================
Thu Dec 9 23:29:15 2010 +0000
==================================================
EmbeddedServletOptions.java
Fix missing @Override markers in Jasper and remove an unnecessary null check

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1044162 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspC.java
index a430457ab7..0ab63ab3b4 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -213,6 +213,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Are we keeping generated code around?
      */
+    @Override
     public boolean getKeepGenerated() {
         return keepGenerated;
     }
@@ -220,10 +221,12 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Should white spaces between directives or actions be trimmed?
      */
+    @Override
     public boolean getTrimSpaces() {
         return trimSpaces;
     }
     
+    @Override
     public boolean isPoolingEnabled() {
         return isPoolingEnabled;
     }
@@ -231,6 +234,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Are we supporting HTML mapped servlets?
      */
+    @Override
     public boolean getMappedFile() {
         return mappedFile;
     }
@@ -238,6 +242,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Should class files be compiled with debug information?
      */
+    @Override
     public boolean getClassDebugInfo() {
         return classDebugInfo;
     }
@@ -245,6 +250,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Background JSP compile thread check interval
      */
+    @Override
     public int getCheckInterval() {
         return checkInterval;
     }
@@ -252,6 +258,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Modification test interval.
      */
+    @Override
     public int getModificationTestInterval() {
         return modificationTestInterval;
     }
@@ -259,6 +266,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Re-compile on failure.
      */
+    @Override
     public boolean getRecompileOnFail() {
         return recompileOnFail;
     }
@@ -266,6 +274,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Is Jasper being used in development mode?
      */
+    @Override
     public boolean getDevelopment() {
         return development;
     }
@@ -273,6 +282,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Is the generation of SMAP info for JSR45 debugging suppressed?
      */
+    @Override
     public boolean isSmapSuppressed() {
         return isSmapSuppressed;
     }
@@ -280,6 +290,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Should SMAP info for JSR45 debugging be dumped to a file?
      */
+    @Override
     public boolean isSmapDumped() {
         return isSmapDumped;
     }
@@ -287,6 +298,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Are Text strings to be generated as char arrays?
      */
+    @Override
     public boolean genStringAsCharArray() {
         return this.genStringAsCharArray;
     }
@@ -294,6 +306,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Class ID for use in the plugin tag when the browser is IE. 
      */
+    @Override
     public String getIeClassId() {
         return ieClassId;
     }
@@ -301,6 +314,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * What is my scratch dir?
      */
+    @Override
     public File getScratchDir() {
         return scratchDir;
     }
@@ -309,6 +323,7 @@ public final class EmbeddedServletOptions implements Options {
      * What classpath should I use while compiling the servlets
      * generated from JSP files?
      */
+    @Override
     public String getClassPath() {
         return classpath;
     }
@@ -316,6 +331,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Is generation of X-Powered-By response header enabled/disabled?
      */
+    @Override
     public boolean isXpoweredBy() {
         return xpoweredBy;
     }
@@ -323,6 +339,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Compiler to use.
      */
+    @Override
     public String getCompiler() {
         return compiler;
     }
@@ -330,6 +347,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * @see Options#getCompilerTargetVM
      */
+    @Override
     public String getCompilerTargetVM() {
         return compilerTargetVM;
     }
@@ -337,6 +355,7 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * @see Options#getCompilerSourceVM
      */
+    @Override
     public String getCompilerSourceVM() {
         return compilerSourceVM;
     }
@@ -344,10 +363,12 @@ public final class EmbeddedServletOptions implements Options {
     /**
      * Java compiler class to use.
      */
+    @Override
     public String getCompilerClassName() {
         return compilerClassName;
     }
 
+    @Override
     public boolean getErrorOnUseBeanInvalidClassAttribute() {
         return errorOnUseBeanInvalidClassAttribute;
     }
@@ -356,6 +377,7 @@ public final class EmbeddedServletOptions implements Options {
         errorOnUseBeanInvalidClassAttribute = b;
     }
     
+    @Override
     public TldLocationsCache getTldLocationsCache() {
         return tldLocationsCache;
     }
@@ -364,26 +386,32 @@ public final class EmbeddedServletOptions implements Options {
         tldLocationsCache = tldC;
     }
     
+    @Override
     public String getJavaEncoding() {
         return javaEncoding;
     }
     
+    @Override
     public boolean getFork() {
         return fork;
     }
     
+    @Override
     public JspConfig getJspConfig() {
         return jspConfig;
     }
     
+    @Override
     public TagPluginManager getTagPluginManager() {
         return tagPluginManager;
     }
     
+    @Override
     public boolean isCaching() {
         return false;
     }
     
+    @Override
     public Map<String, TagLibraryInfo> getCache() {
         return null;
     }
@@ -392,6 +420,7 @@ public final class EmbeddedServletOptions implements Options {
      * Should we include a source fragment in exception messages, which could be displayed
      * to the developer ?
      */
+    @Override
     public boolean getDisplaySourceFragment() {
         return displaySourceFragment;
     }
@@ -400,6 +429,7 @@ public final class EmbeddedServletOptions implements Options {
      * Should jsps be unloaded if to many are loaded?
      * If set to a value greater than 0 eviction of jsps is started. Default: -1
      */
+    @Override
     public int getMaxLoadedJsps() {
         return maxLoadedJsps;
     }
@@ -408,6 +438,7 @@ public final class EmbeddedServletOptions implements Options {
      * Should any jsps be unloaded when being idle for this time in seconds?
      * If set to a value greater than 0 eviction of jsps is started. Default: -1
      */
+    @Override
     public int getJspIdleTimeout() {
         return jspIdleTimeout;
     }

==================================================
DefaultErrorHandler.java
index a1e03c5f3d..0300a51096 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -388,6 +388,7 @@ public class JspC implements Options {
      * In JspC this always returns <code>true</code>.
      * {@inheritDoc}
      */
+    @Override
     public boolean getKeepGenerated() {
         // isn't this why we are running jspc?
         return true;
@@ -396,6 +397,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean getTrimSpaces() {
         return trimSpaces;
     }
@@ -410,6 +412,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isPoolingEnabled() {
         return poolingEnabled;
     }
@@ -424,6 +427,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isXpoweredBy() {
         return xpoweredBy;
     }
@@ -439,14 +443,17 @@ public class JspC implements Options {
      * In JspC this always returns <code>true</code>.
      * {@inheritDoc}
      */
+    @Override
     public boolean getDisplaySourceFragment() {
         return true;
     }
 
+    @Override
     public int getMaxLoadedJsps() {
         return -1;
     }
 
+    @Override
     public int getJspIdleTimeout() {
         return -1;
     }
@@ -454,6 +461,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean getErrorOnUseBeanInvalidClassAttribute() {
         return errorOnUseBeanInvalidClassAttribute;
     }
@@ -469,6 +477,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean getMappedFile() {
         return mappedFile;
     }
@@ -483,6 +492,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean getClassDebugInfo() {
         // compile with debug info
         return classDebugInfo;
@@ -491,6 +501,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isCaching() {
         return caching;
     }
@@ -507,6 +518,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public Map<String, TagLibraryInfo> getCache() {
         return cache;
     }
@@ -515,6 +527,7 @@ public class JspC implements Options {
      * In JspC this always returns <code>0</code>.
      * {@inheritDoc}
      */
+    @Override
     public int getCheckInterval() {
         return 0;
     }
@@ -523,6 +536,7 @@ public class JspC implements Options {
      * In JspC this always returns <code>0</code>.
      * {@inheritDoc}
      */
+    @Override
     public int getModificationTestInterval() {
         return 0;
     }
@@ -532,6 +546,7 @@ public class JspC implements Options {
      * In JspC this always returns <code>false</code>.
      * {@inheritDoc}
      */
+    @Override
     public boolean getRecompileOnFail() {
         return false;
     }
@@ -541,6 +556,7 @@ public class JspC implements Options {
      * In JspC this always returns <code>false</code>.
      * {@inheritDoc}
      */
+    @Override
     public boolean getDevelopment() {
         return false;
     }
@@ -548,6 +564,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isSmapSuppressed() {
         return smapSuppressed;
     }
@@ -562,6 +579,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isSmapDumped() {
         return smapDumped;
     }
@@ -590,6 +608,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean genStringAsCharArray() {
         return genStringAsCharArray;
     }
@@ -608,6 +627,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getIeClassId() {
         return ieClassId;
     }
@@ -615,6 +635,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public File getScratchDir() {
         return scratchDir;
     }
@@ -622,6 +643,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getCompiler() {
         return compiler;
     }
@@ -638,6 +660,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getCompilerClassName() {
         return null;
     }
@@ -645,6 +668,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getCompilerTargetVM() {
         return compilerTargetVM;
     }
@@ -661,7 +685,8 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
-     public String getCompilerSourceVM() {
+     @Override
+    public String getCompilerSourceVM() {
          return compilerSourceVM;
      }
 
@@ -677,6 +702,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public TldLocationsCache getTldLocationsCache() {
         return tldLocationsCache;
     }
@@ -687,6 +713,7 @@ public class JspC implements Options {
      *
      * @return String The encoding
      */
+    @Override
     public String getJavaEncoding() {
         return javaEncoding;
     }
@@ -704,6 +731,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean getFork() {
         return false;
     }
@@ -711,6 +739,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getClassPath() {
         if( classPath != null )
             return classPath;
@@ -924,6 +953,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public JspConfig getJspConfig() {
         return jspConfig;
     }
@@ -931,6 +961,7 @@ public class JspC implements Options {
     /**
      * {@inheritDoc}
      */
+    @Override
     public TagPluginManager getTagPluginManager() {
         return tagPluginManager;
     }
@@ -1513,7 +1544,7 @@ public class JspC implements Options {
         try {
             if (f.exists()) {
                 f = new File(f.getAbsolutePath());
-                while (f != null) {
+                while (true) {
                     File g = new File(f, "WEB-INF");
                     if (g.exists() && g.isDirectory()) {
                         uriRoot = f.getCanonicalPath();

==================================================
ELFunctionMapper.java
index a8a6e59b1d..f12ff5fa16 100644
--- a/java/org/apache/jasper/compiler/DefaultErrorHandler.java
+++ b/java/org/apache/jasper/compiler/DefaultErrorHandler.java
@@ -35,6 +35,7 @@ class DefaultErrorHandler implements ErrorHandler {
      * @param errMsg Parse error message
      * @param exception Parse exception
      */
+    @Override
     public void jspError(String fname, int line, int column, String errMsg,
             Exception ex) throws JasperException {
         throw new JasperException(fname + "(" + line + "," + column + ")"
@@ -47,6 +48,7 @@ class DefaultErrorHandler implements ErrorHandler {
      * @param errMsg Parse error message
      * @param exception Parse exception
      */
+    @Override
     public void jspError(String errMsg, Exception ex) throws JasperException {
         throw new JasperException(errMsg, ex);
     }
@@ -57,6 +59,7 @@ class DefaultErrorHandler implements ErrorHandler {
      * @param details Array of JavacErrorDetail instances corresponding to the
      * compilation errors
      */
+    @Override
     public void javacError(JavacErrorDetail[] details) throws JasperException {
         
         if (details == null) {
@@ -99,6 +102,7 @@ class DefaultErrorHandler implements ErrorHandler {
      * @param errorReport Compilation error report
      * @param exception Compilation exception
      */
+    @Override
     public void javacError(String errorReport, Exception exception)
     throws JasperException {
         

==================================================
JarURLResource.java
index 939eceb755..6c8b2146d6 100644
--- a/java/org/apache/jasper/compiler/ELFunctionMapper.java
+++ b/java/org/apache/jasper/compiler/ELFunctionMapper.java
@@ -323,6 +323,7 @@ public class ELFunctionMapper {
     private static class PrivilegedGetTccl
             implements PrivilegedAction<ClassLoader> {
 
+        @Override
         public ClassLoader run() {
             return Thread.currentThread().getContextClassLoader();
         }

==================================================
JspDocumentParser.java
index 6fbd0ee9e5..4ea16cf10f 100644
--- a/java/org/apache/jasper/compiler/JarURLResource.java
+++ b/java/org/apache/jasper/compiler/JarURLResource.java
@@ -35,6 +35,7 @@ public class JarURLResource implements JarResource {
         this.jarUrl = jarUrl;
     }
     
+    @Override
     public JarFile getJarFile() throws IOException {
         URL jarFileUrl = new URL("jar:" + jarUrl + "!/");
         JarURLConnection conn = (JarURLConnection) jarFileUrl.openConnection();
@@ -43,10 +44,12 @@ public class JarURLResource implements JarResource {
         return conn.getJarFile();
     }
        
+    @Override
     public String getUrl() {
         return jarUrl;
     }
     
+    @Override
     public URL getEntry(String name) {
         try {
             return new URL("jar:" + jarUrl + "!/" + name);

==================================================
TagPluginManager.java
index 0e3cc24000..f5edf7e221 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -698,6 +698,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void comment(char[] buf, int offset, int len) throws SAXException {
 
         processChars();  // Flush char buffer and remove white spaces
@@ -717,6 +718,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void startCDATA() throws SAXException {
 
         processChars();  // Flush char buffer and remove white spaces
@@ -727,6 +729,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void endCDATA() throws SAXException {
         processChars();  // Flush char buffer and remove white spaces
     }
@@ -734,6 +737,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void startEntity(String name) throws SAXException {
         // do nothing
     }
@@ -741,6 +745,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void endEntity(String name) throws SAXException {
         // do nothing
     }
@@ -748,6 +753,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void startDTD(String name, String publicId, String systemId)
         throws SAXException {
         if (!isValidating) {
@@ -760,6 +766,7 @@ class JspDocumentParser
     /*
      * See org.xml.sax.ext.LexicalHandler.
      */
+    @Override
     public void endDTD() throws SAXException {
         inDTD = false;
     }

==================================================
JspMethodExpression.java
index dc86a8b81a..63d324d401 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -154,6 +154,7 @@ public class TagPluginManager {
             pluginAttributes = new HashMap<String, Object>();
         }
 
+        @Override
         public TagPluginContext getParentContext() {
             Node parent = node.getParent();
             if (! (parent instanceof Node.CustomTag)) {
@@ -162,18 +163,22 @@ public class TagPluginManager {
             return ((Node.CustomTag) parent).getTagPluginContext();
         }
 
+        @Override
         public void setPluginAttribute(String key, Object value) {
             pluginAttributes.put(key, value);
         }
 
+        @Override
         public Object getPluginAttribute(String key) {
             return pluginAttributes.get(key);
         }
 
+        @Override
         public boolean isScriptless() {
             return node.getChildInfo().isScriptless();
         }
 
+        @Override
         public boolean isConstantAttribute(String attribute) {
             Node.JspAttribute attr = getNodeAttribute(attribute);
             if (attr == null)
@@ -181,6 +186,7 @@ public class TagPluginManager {
             return attr.isLiteral();
         }
 
+        @Override
         public String getConstantAttribute(String attribute) {
             Node.JspAttribute attr = getNodeAttribute(attribute);
             if (attr == null)
@@ -188,18 +194,22 @@ public class TagPluginManager {
             return attr.getValue();
         }
 
+        @Override
         public boolean isAttributeSpecified(String attribute) {
             return getNodeAttribute(attribute) != null;
         }
 
+        @Override
         public String getTemporaryVariableName() {
             return node.getRoot().nextTemporaryVariableName();
         }
 
+        @Override
         public void generateImport(String imp) {
             pageInfo.addImport(imp);
         }
 
+        @Override
         public void generateDeclaration(String id, String text) {
             if (pageInfo.isPluginDeclared(id)) {
                 return;
@@ -207,21 +217,25 @@ public class TagPluginManager {
             curNodes.add(new Node.Declaration(text, node.getStart(), null));
         }
 
+        @Override
         public void generateJavaSource(String sourceCode) {
             curNodes.add(new Node.Scriptlet(sourceCode, node.getStart(),
                                             null));
         }
 
+        @Override
         public void generateAttribute(String attributeName) {
             curNodes.add(new Node.AttributeGenerator(node.getStart(),
                                                      attributeName,
                                                      node));
         }
 
+        @Override
         public void dontUseTagPlugin() {
             node.setUseTagPlugin(false);
         }
 
+        @Override
         public void generateBody() {
             // Since we'll generate the body anyway, this is really a nop, 
             // except for the fact that it lets us put the Java sources the

==================================================
JspValueExpression.java
index 9de7f00a56..51d4c55197 100644
--- a/java/org/apache/jasper/el/JspMethodExpression.java
+++ b/java/org/apache/jasper/el/JspMethodExpression.java
@@ -100,11 +100,13 @@ public final class JspMethodExpression extends MethodExpression implements
         return this.target.isLiteralText();
     }
 
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         out.writeUTF(this.mark);
         out.writeObject(this.target);
     }
 
+    @Override
     public void readExternal(ObjectInput in) throws IOException,
             ClassNotFoundException {
         this.mark = in.readUTF();

==================================================
VariableResolverImpl.java
index dccafba91d..cc5a41007c 100644
--- a/java/org/apache/jasper/el/JspValueExpression.java
+++ b/java/org/apache/jasper/el/JspValueExpression.java
@@ -133,11 +133,13 @@ public final class JspValueExpression extends ValueExpression implements
         return this.target.isLiteralText();
     }
 
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         out.writeUTF(this.mark);
         out.writeObject(this.target);
     }
 
+    @Override
     public void readExternal(ObjectInput in) throws IOException,
             ClassNotFoundException {
         this.mark = in.readUTF();

==================================================
HttpJspBase.java
index 1115be3a93..33dd712f67 100644
--- a/java/org/apache/jasper/el/VariableResolverImpl.java
+++ b/java/org/apache/jasper/el/VariableResolverImpl.java
@@ -29,6 +29,7 @@ public final class VariableResolverImpl implements VariableResolver {
         this.ctx = ctx;
     }
 
+    @Override
     public Object resolveVariable(String pName) throws ELException {
         return this.ctx.getELResolver().getValue(this.ctx, null, pName);
     }

==================================================
JspApplicationContextImpl.java
index 73969706ff..f455833a81 100644
--- a/java/org/apache/jasper/runtime/HttpJspBase.java
+++ b/java/org/apache/jasper/runtime/HttpJspBase.java
@@ -70,18 +70,21 @@ public abstract class HttpJspBase extends HttpServlet implements HttpJspPage {
         _jspService(request, response);
     }
     
+    @Override
     public void jspInit() {
     }
 
     public void _jspInit() {
     }
 
+    @Override
     public void jspDestroy() {
     }
 
     protected void _jspDestroy() {
     }
 
+    @Override
     public abstract void _jspService(HttpServletRequest request, 
                                      HttpServletResponse response) 
         throws ServletException, IOException;

==================================================
JspContextWrapper.java
index 7ebf455614..8f48ff02ae 100644
--- a/java/org/apache/jasper/runtime/JspApplicationContextImpl.java
+++ b/java/org/apache/jasper/runtime/JspApplicationContextImpl.java
@@ -65,6 +65,7 @@ public class JspApplicationContextImpl implements JspApplicationContext {
 
     }
 
+    @Override
     public void addELContextListener(ELContextListener listener) {
         if (listener == null) {
             throw new IllegalArgumentException("ELConextListener was null");
@@ -96,6 +97,7 @@ public class JspApplicationContextImpl implements JspApplicationContext {
         if (Constants.IS_SECURITY_ENABLED) {
             ctx = AccessController.doPrivileged(
                     new PrivilegedAction<ELContextImpl>() {
+                        @Override
                         public ELContextImpl run() {
                             return new ELContextImpl(r);
                         }
@@ -134,6 +136,7 @@ public class JspApplicationContextImpl implements JspApplicationContext {
         return this.resolver;
     }
 
+    @Override
     public void addELResolver(ELResolver resolver) throws IllegalStateException {
         if (resolver == null) {
             throw new IllegalArgumentException("ELResolver was null");
@@ -145,6 +148,7 @@ public class JspApplicationContextImpl implements JspApplicationContext {
         this.resolvers.add(resolver);
     }
 
+    @Override
     public ExpressionFactory getExpressionFactory() {
         return expressionFactory;
     }

==================================================
JspFactoryImpl.java
index 6aaf0d497c..d7f0927012 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -346,6 +346,7 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
     /**
      * VariableResolver interface
      */
+    @Override
     @Deprecated
     public Object resolveVariable(String pName) throws ELException {
         ELContext ctx = this.getELContext();

==================================================
JspRuntimeLibrary.java
index f63a86005a..7855abc9a5 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -151,6 +151,7 @@ public class JspFactoryImpl extends JspFactory {
             this.autoflush = autoflush;
         }
 
+        @Override
         public PageContext run() {
             return factory.internalGetPageContext(servlet, request, response,
                     errorPageURL, needsSession, bufferSize, autoflush);
@@ -169,6 +170,7 @@ public class JspFactoryImpl extends JspFactory {
             this.pageContext = pageContext;
         }
 
+        @Override
         public Void run() {
             factory.internalReleasePageContext(pageContext);
             return null;
@@ -209,6 +211,7 @@ public class JspFactoryImpl extends JspFactory {
         if (Constants.IS_SECURITY_ENABLED) {
             return AccessController.doPrivileged(
                     new PrivilegedAction<JspApplicationContext>() {
+                @Override
                 public JspApplicationContext run() {
                     return JspApplicationContextImpl.getInstance(context);
                 }

==================================================
JspWriterImpl.java
index a41ed63277..174eca79b2 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -82,6 +82,7 @@ public class JspRuntimeLibrary {
             this.ignoreMethodNF = ignoreMethodNF;
         }
          
+        @Override
         public Void run() throws JasperException {
             internalIntrospecthelper(
                 bean,prop,value,request,param,ignoreMethodNF);

==================================================
PageContextImpl.java
index 3e5f9780e5..92a07a9114 100644
--- a/java/org/apache/jasper/runtime/JspWriterImpl.java
+++ b/java/org/apache/jasper/runtime/JspWriterImpl.java
@@ -129,6 +129,7 @@ public class JspWriterImpl extends JspWriter {
     private String getLocalizeMessage(final String message){
         if (SecurityUtil.isPackageProtectionEnabled()){
             return AccessController.doPrivileged(new PrivilegedAction<String>(){
+                @Override
                 public String run(){
                     return Localizer.getMessage(message); 
                 }

==================================================
ProtectedFunctionMapper.java
index f7a0a63f1f..b040e7a390 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -221,6 +221,7 @@ public class PageContextImpl extends PageContext {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return AccessController.doPrivileged(
                     new PrivilegedAction<Object>() {
+                @Override
                 public Object run() {
                     return doGetAttribute(name);
                 }
@@ -246,6 +247,7 @@ public class PageContextImpl extends PageContext {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return AccessController.doPrivileged(
                     new PrivilegedAction<Object>() {
+                @Override
                 public Object run() {
                     return doGetAttribute(name, scope);
                 }
@@ -289,6 +291,7 @@ public class PageContextImpl extends PageContext {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                @Override
                 public Void run() {
                     doSetAttribute(name, attribute);
                     return null;
@@ -317,6 +320,7 @@ public class PageContextImpl extends PageContext {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                @Override
                 public Void run() {
                     doSetAttribute(name, o, scope);
                     return null;
@@ -368,6 +372,7 @@ public class PageContextImpl extends PageContext {
         }
         if (SecurityUtil.isPackageProtectionEnabled()) {
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                @Override
                 public Void run() {
                     doRemoveAttribute(name, scope);
                     return null;
@@ -416,6 +421,7 @@ public class PageContextImpl extends PageContext {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return (AccessController
                     .doPrivileged(new PrivilegedAction<Integer>() {
+                        @Override
                         public Integer run() {
                             return new Integer(doGetAttributeScope(name));
                         }
@@ -453,6 +459,7 @@ public class PageContextImpl extends PageContext {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return AccessController.doPrivileged(
                     new PrivilegedAction<Object>() {
+                @Override
                 public Object run() {
                     if (name == null) {
                         throw new NullPointerException(Localizer
@@ -501,6 +508,7 @@ public class PageContextImpl extends PageContext {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return AccessController.doPrivileged(
                     new PrivilegedAction<Enumeration<String>>() {
+                        @Override
                         public Enumeration<String> run() {
                             return doGetAttributeNamesInScope(scope);
                         }
@@ -543,6 +551,7 @@ public class PageContextImpl extends PageContext {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                @Override
                 public Void run() {
                     doRemoveAttribute(name);
                     return null;
@@ -654,6 +663,7 @@ public class PageContextImpl extends PageContext {
             try {
                 AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Void>() {
+                    @Override
                     public Void run() throws Exception {
                         doInclude(relativeUrlPath, flush);
                         return null;
@@ -691,6 +701,7 @@ public class PageContextImpl extends PageContext {
             try {
                 AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Void>() {
+                    @Override
                     public Void run() throws Exception {
                         doForward(relativeUrlPath);
                         return null;
@@ -813,6 +824,7 @@ public class PageContextImpl extends PageContext {
             try {
                 AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Void>() {
+                    @Override
                     public Void run() throws Exception {
                         doHandlePageException(t);
                         return null;
@@ -952,6 +964,7 @@ public class PageContextImpl extends PageContext {
                 retValue = AccessController
                         .doPrivileged(new PrivilegedExceptionAction<Object>() {
 
+                            @Override
                             public Object run() throws Exception {
                                 ELContextImpl ctx = (ELContextImpl) pageContext.getELContext();
                                 ctx.setFunctionMapper(new FunctionMapperImpl(functionMap));

==================================================
Catch.java
index d85fea2605..dca4bd9e9e 100644
--- a/java/org/apache/jasper/runtime/ProtectedFunctionMapper.java
+++ b/java/org/apache/jasper/runtime/ProtectedFunctionMapper.java
@@ -67,6 +67,7 @@ public final class ProtectedFunctionMapper extends javax.el.FunctionMapper
         if (SecurityUtil.isPackageProtectionEnabled()) {
             funcMapper = AccessController.doPrivileged(
                     new PrivilegedAction<ProtectedFunctionMapper>() {
+                        @Override
                         public ProtectedFunctionMapper run() {
                             return new ProtectedFunctionMapper();
                         }
@@ -100,6 +101,7 @@ public final class ProtectedFunctionMapper extends javax.el.FunctionMapper
             try {
                 method = AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Method>() {
+                            @Override
                             public Method run() throws Exception {
                                 return c.getDeclaredMethod(methodName, args);
                             }
@@ -145,6 +147,7 @@ public final class ProtectedFunctionMapper extends javax.el.FunctionMapper
         if (SecurityUtil.isPackageProtectionEnabled()) {
             funcMapper = AccessController.doPrivileged(
                     new PrivilegedAction<ProtectedFunctionMapper>() {
+                        @Override
                         public ProtectedFunctionMapper run() {
                             return new ProtectedFunctionMapper();
                         }
@@ -153,6 +156,7 @@ public final class ProtectedFunctionMapper extends javax.el.FunctionMapper
             try {
                 method = AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Method>() {
+                            @Override
                             public Method run() throws Exception {
                                 return c.getDeclaredMethod(methodName, args);
                             }

==================================================
Choose.java
index c7d154aa42..7e006523ef 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Catch.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Catch.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public class Catch implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //flag for the existence of the var attribute

==================================================
ForEach.java
index 914f396846..97eca05e49 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Choose.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Choose.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class Choose implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         // Not much to do here, much of the work will be done in the

==================================================
ForTokens.java
index cd67da6533..2b8c00f399 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java
@@ -25,6 +25,7 @@ public final class ForEach implements TagPlugin {
     
     private boolean hasVar, hasBegin, hasEnd, hasStep;
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         String index = null;

==================================================
If.java
index c72f0ad213..99d31da2d6 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/ForTokens.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/ForTokens.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public class ForTokens implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         boolean hasVar, hasVarStatus, hasBegin, hasEnd, hasStep;
         

==================================================
Import.java
index 52efa8a17c..662c740c25 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/If.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/If.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class If implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         String condV = ctxt.getTemporaryVariableName();
         ctxt.generateJavaSource("boolean " + condV + "=");

==================================================
Otherwise.java
index d92df284c0..20900191bc 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Import.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Import.java
@@ -24,6 +24,7 @@ import org.apache.jasper.tagplugins.jstl.Util;
 
 public class Import implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         boolean hasContext, hasVar, hasScope, hasVarReader, hasCharEncoding;
         

==================================================
Out.java
index 3273fcf843..11afe2cbe9 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Otherwise.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Otherwise.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class Otherwise implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         // See When.java for the reason whey "}" is need at the beginng and

==================================================
Param.java
index 92ac1fe03f..58d3a9e404 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Out.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Out.java
@@ -24,6 +24,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class Out implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //these two data member are to indicate 

==================================================
Redirect.java
index 1ba85ce757..43a7e12cc0 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Param.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Param.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public class Param implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //don't support the body content

==================================================
Remove.java
index 6a5813fb8e..0390dc1677 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Redirect.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Redirect.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public class Redirect implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //flag for the existence of the "context"

==================================================
Set.java
index f21fa8f493..f7e8404834 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Remove.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Remove.java
@@ -24,6 +24,7 @@ import org.apache.jasper.tagplugins.jstl.Util;
 
 public class Remove implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //scope flag

==================================================
Url.java
index bfb2c8bf94..04341d4ad2 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Set.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Set.java
@@ -24,6 +24,7 @@ import org.apache.jasper.tagplugins.jstl.Util;
 
 public class Set implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //the flags to indicate whether the attributes have been specified

==================================================
When.java
index 9db64f64a0..f7b79faf05 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Url.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Url.java
@@ -24,6 +24,7 @@ import org.apache.jasper.tagplugins.jstl.Util;
 
 public class Url implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         
         //flags

==================================================
ParserUtils.java
index a55a45448f..e44e1ae066 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/When.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/When.java
@@ -23,6 +23,7 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class When implements TagPlugin {
     
+    @Override
     public void doTag(TagPluginContext ctxt) {
         // Get the parent context to determine if this is the first <c:when>
         TagPluginContext parentContext = ctxt.getParentContext();

==================================================
