6795794fa65a57c5b54556519645b9a64c62bd4b
==================================================
Get unit tests passing (using Windows binaries linked from openssl.org) for 0.9.8, 1.0.0, 1.0.1 & 1.0.2.
==================================================
Mark Thomas
==================================================
Tue Aug 11 11:15:39 2015 +0000
==================================================
TestCipher.java
Get unit tests passing (using Windows binaries linked from openssl.org) for 0.9.8, 1.0.0, 1.0.1 & 1.0.2.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1695263 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestOpenSSLCipherConfigurationParser.java
index 393458b2ab..35c5576afe 100644
--- a/test/org/apache/tomcat/util/net/jsse/openssl/TestCipher.java
+++ b/test/org/apache/tomcat/util/net/jsse/openssl/TestCipher.java
@@ -73,7 +73,11 @@ public class TestCipher {
      */
     @Test
     public void testOpenSSLCipherAvailability() throws Exception {
-        Set<String> availableCipherSuites = TesterOpenSSL.getOpenSSLCiphersAsSet("ALL:eNULL");
+        // OpenSSL 0.9.8 does not include aNULL or eNULL in all.
+        // OpenSSL does not include ECDH/ECDHE ciphers in all and there is no
+        //         EC alias. Use aRSA.
+        // OpenSSL 1.0.0 onwards does not include eNULL in all.
+        Set<String> availableCipherSuites = TesterOpenSSL.getOpenSSLCiphersAsSet("ALL:eNULL:aNULL:aRSA");
         Set<String> expectedCipherSuites = new HashSet<>();
         for (Cipher cipher : Cipher.values()) {
             if (TesterOpenSSL.OPENSSL_UNIMPLEMENTED_CIPHERS.contains(cipher)) {

==================================================
TesterOpenSSL.java
index 952d7e0807..285343e2ec 100644
--- a/test/org/apache/tomcat/util/net/jsse/openssl/TestOpenSSLCipherConfigurationParser.java
+++ b/test/org/apache/tomcat/util/net/jsse/openssl/TestOpenSSLCipherConfigurationParser.java
@@ -28,7 +28,13 @@ public class TestOpenSSLCipherConfigurationParser {
     public void testDEFAULT() throws Exception {
         // EXPORT was removed from DEFAULT in 1.1.0 but we prefer the old
         // behaviour
-        testSpecification("DEFAULT:!EXPORT");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA:!SSLv2:!eNULL as an EC alias isn't available)
+            testSpecification("DEFAULT:!EXPORT:aRSA:!SSLv2:!eNULL");
+        } else {
+            testSpecification("DEFAULT:!EXPORT");
+        }
     }
 
 
@@ -36,19 +42,40 @@ public class TestOpenSSLCipherConfigurationParser {
     public void testCOMPLEMENTOFDEFAULT() throws Exception {
         // EXPORT was removed from DEFAULT in 1.1.0 but we prefer the old
         // behaviour
-        testSpecification("COMPLEMENTOFDEFAULT:EXPORT");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            testSpecification("COMPLEMENTOFDEFAULT:EXPORT:aNULL");
+        } else {
+            testSpecification("COMPLEMENTOFDEFAULT:EXPORT");
+        }
     }
 
 
     @Test
     public void testALL() throws Exception {
-        testSpecification("ALL");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled whereas
+            // later versions include it.
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA:kECDHr as an EC alias isn't available)
+            testSpecification("ALL:aNULL:aRSA:kECDHr");
+        } else {
+            testSpecification("ALL");
+        }
     }
 
 
     @Test
     public void testCOMPLEMENTOFALL() throws Exception {
-        testSpecification("COMPLEMENTOFALL");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled whereas
+            // later versions include it.
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA:kECDHr as an EC alias isn't available)
+            testSpecification("COMPLEMENTOFALL:!aNULL:!aRSA:!kECDHr");
+        } else {
+            testSpecification("COMPLEMENTOFALL");
+        }
     }
 
 
@@ -60,19 +87,56 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testeNULL() throws Exception {
-        testSpecification("eNULL");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("eNULL:eNULL+aNULL:eNULL+aRSA");
+        } else {
+            testSpecification("eNULL");
+        }
     }
 
 
     @Test
     public void testHIGH() throws Exception {
-        testSpecification("HIGH");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 describes the following ciphers as HIGH whereas
+            // later versions use MEDIUM
+            //   TLS_ECDH_anon_WITH_RC4_128_SHA (AECDH-RC4-SHA)
+            //   TLS_ECDHE_RSA_WITH_RC4_128_SHA (ECDHE-RSA-RC4-SHA)
+            //   TLS_ECDH_RSA_WITH_RC4_128_SHA  (ECDH-RSA-RC4-SHA)
+            //   TLS_ECDHE_RSA_WITH_NULL_SHA    (ECDHE-RSA-NULL-SHA)
+            //   TLS_ECDH_RSA_WITH_NULL_SHA     (ECDH-RSA-NULL-SHA)
+            //
+            // OpenSSL 0.9.8 describes TLS_ECDH_anon_WITH_NULL_SHA
+            // (AECDH-NULL-SHA) as HIGH whereas later versions use STRONG_NONE
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("HIGH:HIGH+aNULL:HIGH+aRSA:" +
+                    "!AECDH-RC4-SHA:!ECDHE-RSA-RC4-SHA:!ECDH-RSA-RC4-SHA:!ECDHE-RSA-NULL-SHA:!ECDH-RSA-NULL-SHA:" +
+                    "!AECDH-NULL-SHA");
+        } else {
+            testSpecification("HIGH");
+        }
     }
 
 
     @Test
     public void testMEDIUM() throws Exception {
-        testSpecification("MEDIUM");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 describes the following ciphers as HIGH whereas
+            // later versions use MEDIUM
+            //   TLS_ECDH_anon_WITH_RC4_128_SHA (AECDH-RC4-SHA)
+            //   TLS_ECDHE_RSA_WITH_RC4_128_SHA (ECDHE-RSA-RC4-SHA)
+            //   TLS_ECDH_RSA_WITH_RC4_128_SHA  (ECDH-RSA-RC4-SHA)
+            //   TLS_ECDHE_RSA_WITH_NULL_SHA    (ECDHE-RSA-NULL-SHA)
+            //   TLS_ECDH_RSA_WITH_NULL_SHA     (ECDH-RSA-NULL-SHA)
+            testSpecification("MEDIUM:AECDH-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-NULL-SHA:ECDH-RSA-NULL-SHA");
+        } else {
+            testSpecification("MEDIUM");
+        }
     }
 
 
@@ -102,7 +166,12 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testaRSA() throws Exception {
-        testSpecification("aRSA");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 treats kECDHr as aRSA
+            testSpecification("aRSA:kECDHr");
+        } else {
+            testSpecification("aRSA");
+        }
     }
 
 
@@ -129,7 +198,10 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testEDH() throws Exception {
-        testSpecification("EDH");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("EDH");
+        }
     }
 
 
@@ -162,7 +234,10 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testkECDHr() throws Exception {
-        testSpecification("kECDHr");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("kECDHr");
+        }
     }
 
 
@@ -174,19 +249,28 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testkECDH() throws Exception {
-        testSpecification("kECDH");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("kECDH");
+        }
     }
 
 
     @Test
     public void testkEECDH() throws Exception {
-        testSpecification("kEECDH");
+     // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("kEECDH");
+        }
     }
 
 
     @Test
     public void testECDH() throws Exception {
-        testSpecification("ECDH");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("ECDH");
+        }
     }
 
 
@@ -213,7 +297,10 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testAECDH() throws Exception {
-        testSpecification("AECDH");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("AECDH");
+        }
     }
 
 
@@ -231,7 +318,10 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testaECDH() throws Exception {
-        testSpecification("aECDH");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("aECDH");
+        }
     }
 
 
@@ -279,7 +369,14 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testTLSv1() throws Exception {
-        testSpecification("TLSv1");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("TLSv1:TLSv1+aNULL:TLSv1+aRSA");
+        } else {
+            testSpecification("TLSv1");
+        }
     }
 
 
@@ -291,7 +388,14 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testSSLv3() throws Exception {
-        testSpecification("SSLv3");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("SSLv3:SSLv3+aNULL:SSLv3+aRSA");
+        } else {
+            testSpecification("SSLv3");
+        }
     }
 
 
@@ -309,19 +413,32 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testAES128() throws Exception {
-        testSpecification("AES128");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("AES128");
+        }
     }
 
 
     @Test
     public void testAES256() throws Exception {
-        testSpecification("AES256");
+        // This alias was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("AES256");
+        }
     }
 
 
     @Test
     public void testAES() throws Exception {
-        testSpecification("AES");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("AES:AES+aNULL:AES+aRSA");
+        } else {
+            testSpecification("AES");
+        }
     }
 
 
@@ -351,7 +468,14 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void test3DES() throws Exception {
-        testSpecification("3DES");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("3DES:3DES+aNULL:3DES+aRSA");
+        } else {
+            testSpecification("3DES");
+        }
     }
 
 
@@ -363,7 +487,12 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testRC4() throws Exception {
-        testSpecification("RC4");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            testSpecification("RC4:RC4+aNULL:RC4+aRSA");
+        } else {
+            testSpecification("RC4");
+        }
     }
 
 
@@ -393,13 +522,27 @@ public class TestOpenSSLCipherConfigurationParser {
 
     @Test
     public void testSHA1() throws Exception {
-        testSpecification("SHA1");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("SHA1:SHA1+aNULL:SHA1+aRSA");
+        } else {
+            testSpecification("SHA1");
+        }
     }
 
 
     @Test
     public void testSHA() throws Exception {
-        testSpecification("SHA");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes aNULL unless explicitly enabled
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA as an EC alias isn't available)
+            testSpecification("SHA:SHA+aNULL:SHA+aRSA");
+        } else {
+            testSpecification("SHA");
+        }
     }
 
 
@@ -470,24 +613,37 @@ public class TestOpenSSLCipherConfigurationParser {
         // Tomcat 8 default as of 2014-08-04
         // This gets an A- from https://www.ssllabs.com/ssltest with no FS for
         // a number of the reference browsers
-        testSpecification("HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA:kECDHr as an EC alias isn't available)
+            testSpecification("HIGH:aRSA:kECDHr:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5");
+        } else {
+            testSpecification("HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5");
+        }
     }
 
 
     @Test
     public void testSpecification02() throws Exception {
         // Suggestion from dev list (s/ECDHE/kEECDH/, s/DHE/EDH/
-        testSpecification("!aNULL:!eNULL:!EXPORT:!DSS:!DES:!SSLv2:kEECDH:ECDH:EDH:AES256-GCM-SHA384:AES128-GCM-SHA256:+RC4:HIGH:MEDIUM");
+        if (TesterOpenSSL.VERSION < 10000) {
+            // OpenSSL 0.9.8 excludes EC ciphers unless explicitly enabled
+            // (using aRSA:kECDHr as an EC alias isn't available)
+        } else {
+            testSpecification("!aNULL:!eNULL:!EXPORT:!DSS:!DES:!SSLv2:kEECDH:ECDH:EDH:AES256-GCM-SHA384:AES128-GCM-SHA256:+RC4:HIGH:aRSA:kECDHr:MEDIUM");
+        }
     }
 
 
     @Test
     public void testSpecification03() throws Exception {
         // Reported as failing during 8.0.11 release vote by Ognjen Blagojevic
-        testSpecification("EECDH+aRSA+SHA384:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS");
+        // EDH was introduced in 1.0.0
+        if (TesterOpenSSL.VERSION >= 10000) {
+            testSpecification("EECDH+aRSA+SHA384:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS");
+        }
     }
 
-
     private void testSpecification(String specification) throws Exception {
         // Filter out cipher suites that OpenSSL does not implement
         String openSSLCipherList = TesterOpenSSL.getOpenSSLCiphersAsExpression(specification);

==================================================
