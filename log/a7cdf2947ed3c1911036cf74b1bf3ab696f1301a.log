a7cdf2947ed3c1911036cf74b1bf3ab696f1301a
==================================================
Extend checkstyle to include checking * imports
==================================================
Mark Emlyn
==================================================
Wed Aug 4 21:55:19 2010 +0000
==================================================
CompositeELResolver.java
index 4a4f8efa40..17e1ed97dd 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -32,6 +32,7 @@
     
     <!-- Imports -->
     <module name="IllegalImport"/>
+    <module name="AvoidStarImport"/>
     <!--
     Do not use - does not take account of imports required for Javadocs
     <module name="UnusedImports"/>

==================================================
GenericServlet.java
index 86c6527dd5..e93b05e76a 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/javax/el/CompositeELResolver.java
@@ -178,6 +178,7 @@ public class CompositeELResolver extends ELResolver {
             }
         }
 
+        @Override
         public boolean hasNext() {          
             if (this.next != null)
                 return true;
@@ -195,6 +196,7 @@ public class CompositeELResolver extends ELResolver {
             return hasNext();
         }
 
+        @Override
         public FeatureDescriptor next() {
             if (!hasNext())
                 throw new NoSuchElementException();
@@ -204,6 +206,7 @@ public class CompositeELResolver extends ELResolver {
 
         }
 
+        @Override
         public void remove() {
             throw new UnsupportedOperationException();
         }

==================================================
ServletRequestWrapper.java
index 4e5f54cc96..68034cff9d 100644
--- a/java/javax/servlet/GenericServlet.java
+++ b/java/javax/servlet/GenericServlet.java
@@ -56,6 +56,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * Called by the servlet container to indicate to a servlet that the servlet
      * is being taken out of service. See {@link Servlet#destroy}.
      */
+    @Override
     public void destroy() {
         // NOOP by default
     }
@@ -74,6 +75,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * @return String a <code>String</code> containing the value of the
      *         initialization parameter
      */
+    @Override
     public String getInitParameter(String name) {
         return getServletConfig().getInitParameter(name);
     }
@@ -90,6 +92,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * @return Enumeration an enumeration of <code>String</code> objects
      *         containing the names of the servlet's initialization parameters
      */
+    @Override
     public Enumeration<String> getInitParameterNames() {
         return getServletConfig().getInitParameterNames();
     }
@@ -100,6 +103,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * @return ServletConfig the <code>ServletConfig</code> object that
      *         initialized this servlet
      */
+    @Override
     public ServletConfig getServletConfig() {
         return config;
     }
@@ -114,6 +118,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * @return ServletContext the <code>ServletContext</code> object passed to
      *         this servlet by the <code>init</code> method
      */
+    @Override
     public ServletContext getServletContext() {
         return getServletConfig().getServletContext();
     }
@@ -126,6 +131,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * 
      * @return String information about this servlet, by default an empty string
      */
+    @Override
     public String getServletInfo() {
         return "";
     }
@@ -146,6 +152,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      *                normal operation
      * @see UnavailableException
      */
+    @Override
     public void init(ServletConfig config) throws ServletException {
         this.config = config;
         this.init();
@@ -214,6 +221,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * @exception IOException
      *                if an input or output exception occurs
      */
+    @Override
     public abstract void service(ServletRequest req, ServletResponse res)
             throws ServletException, IOException;
 
@@ -223,6 +231,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
      * 
      * @return the name of this servlet instance
      */
+    @Override
     public String getServletName() {
         return config.getServletName();
     }

==================================================
ServletResponseWrapper.java
index b4610487c1..a83b8c2601 100644
--- a/java/javax/servlet/ServletRequestWrapper.java
+++ b/java/javax/servlet/ServletRequestWrapper.java
@@ -71,6 +71,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to call getAttribute(String name)
      * on the wrapped request object.
      */
+    @Override
     public Object getAttribute(String name) {
         return this.request.getAttribute(name);
     }
@@ -79,6 +80,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getAttributeNames() on
      * the wrapped request object.
      */
+    @Override
     public Enumeration<String> getAttributeNames() {
         return this.request.getAttributeNames();
     }
@@ -87,6 +89,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getCharacterEncoding()
      * on the wrapped request object.
      */
+    @Override
     public String getCharacterEncoding() {
         return this.request.getCharacterEncoding();
     }
@@ -95,6 +98,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to set the character encoding on
      * the wrapped request object.
      */
+    @Override
     public void setCharacterEncoding(String enc)
             throws java.io.UnsupportedEncodingException {
         this.request.setCharacterEncoding(enc);
@@ -104,6 +108,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getContentLength() on
      * the wrapped request object.
      */
+    @Override
     public int getContentLength() {
         return this.request.getContentLength();
     }
@@ -112,6 +117,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getContentType() on the
      * wrapped request object.
      */
+    @Override
     public String getContentType() {
         return this.request.getContentType();
     }
@@ -120,6 +126,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getInputStream() on the
      * wrapped request object.
      */
+    @Override
     public ServletInputStream getInputStream() throws IOException {
         return this.request.getInputStream();
     }
@@ -128,6 +135,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getParameter(String
      * name) on the wrapped request object.
      */
+    @Override
     public String getParameter(String name) {
         return this.request.getParameter(name);
     }
@@ -136,6 +144,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getParameterMap() on the
      * wrapped request object.
      */
+    @Override
     public Map<String, String[]> getParameterMap() {
         return this.request.getParameterMap();
     }
@@ -144,6 +153,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getParameterNames() on
      * the wrapped request object.
      */
+    @Override
     public Enumeration<String> getParameterNames() {
         return this.request.getParameterNames();
     }
@@ -152,6 +162,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return
      * getParameterValues(String name) on the wrapped request object.
      */
+    @Override
     public String[] getParameterValues(String name) {
         return this.request.getParameterValues(name);
     }
@@ -160,6 +171,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getProtocol() on the
      * wrapped request object.
      */
+    @Override
     public String getProtocol() {
         return this.request.getProtocol();
     }
@@ -168,6 +180,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getScheme() on the
      * wrapped request object.
      */
+    @Override
     public String getScheme() {
         return this.request.getScheme();
     }
@@ -176,6 +189,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getServerName() on the
      * wrapped request object.
      */
+    @Override
     public String getServerName() {
         return this.request.getServerName();
     }
@@ -184,6 +198,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getServerPort() on the
      * wrapped request object.
      */
+    @Override
     public int getServerPort() {
         return this.request.getServerPort();
     }
@@ -192,6 +207,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getReader() on the
      * wrapped request object.
      */
+    @Override
     public BufferedReader getReader() throws IOException {
         return this.request.getReader();
     }
@@ -200,6 +216,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getRemoteAddr() on the
      * wrapped request object.
      */
+    @Override
     public String getRemoteAddr() {
         return this.request.getRemoteAddr();
     }
@@ -208,6 +225,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getRemoteHost() on the
      * wrapped request object.
      */
+    @Override
     public String getRemoteHost() {
         return this.request.getRemoteHost();
     }
@@ -216,6 +234,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return setAttribute(String
      * name, Object o) on the wrapped request object.
      */
+    @Override
     public void setAttribute(String name, Object o) {
         this.request.setAttribute(name, o);
     }
@@ -224,6 +243,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to call removeAttribute(String
      * name) on the wrapped request object.
      */
+    @Override
     public void removeAttribute(String name) {
         this.request.removeAttribute(name);
     }
@@ -232,6 +252,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getLocale() on the
      * wrapped request object.
      */
+    @Override
     public Locale getLocale() {
         return this.request.getLocale();
     }
@@ -240,6 +261,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return getLocales() on the
      * wrapped request object.
      */
+    @Override
     public Enumeration<Locale> getLocales() {
         return this.request.getLocales();
     }
@@ -248,6 +270,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return isSecure() on the
      * wrapped request object.
      */
+    @Override
     public boolean isSecure() {
         return this.request.isSecure();
     }
@@ -256,6 +279,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * The default behavior of this method is to return
      * getRequestDispatcher(String path) on the wrapped request object.
      */
+    @Override
     public RequestDispatcher getRequestDispatcher(String path) {
         return this.request.getRequestDispatcher(path);
     }
@@ -266,6 +290,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
+    @Override
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public String getRealPath(String path) {
@@ -278,6 +303,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since 2.4
      */
+    @Override
     public int getRemotePort() {
         return this.request.getRemotePort();
     }
@@ -288,6 +314,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since 2.4
      */
+    @Override
     public String getLocalName() {
         return this.request.getLocalName();
     }
@@ -298,6 +325,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since 2.4
      */
+    @Override
     public String getLocalAddr() {
         return this.request.getLocalAddr();
     }
@@ -308,6 +336,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since 2.4
      */
+    @Override
     public int getLocalPort() {
         return this.request.getLocalPort();
     }
@@ -318,6 +347,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since Servlet 3.0
      */
+    @Override
     public ServletContext getServletContext() {
         return request.getServletContext();
     }
@@ -329,6 +359,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * @throws java.lang.IllegalStateException
      * @since Servlet 3.0
      */
+    @Override
     public AsyncContext startAsync() {
         return request.startAsync();
     }
@@ -342,6 +373,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * @throws java.lang.IllegalStateException
      * @since Servlet 3.0
      */
+    @Override
     public AsyncContext startAsync(ServletRequest servletRequest,
             ServletResponse servletResponse) throws IllegalStateException {
         return request.startAsync(servletRequest, servletResponse);
@@ -353,6 +385,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since Servlet 3.0
      */
+    @Override
     public boolean isAsyncStarted() {
         return request.isAsyncStarted();
     }
@@ -363,6 +396,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since Servlet 3.0
      */
+    @Override
     public boolean isAsyncSupported() {
         return request.isAsyncSupported();
     }
@@ -373,6 +407,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since Servlet 3.0
      */
+    @Override
     public AsyncContext getAsyncContext() {
         return request.getAsyncContext();
     }
@@ -413,6 +448,7 @@ public class ServletRequestWrapper implements ServletRequest {
      * 
      * @since Servlet 3.0
      */
+    @Override
     public DispatcherType getDispatcherType() {
         return this.request.getDispatcherType();
     }

==================================================
HttpServletRequestWrapper.java
index 81ea47c57a..b0f0dd3f53 100644
--- a/java/javax/servlet/ServletResponseWrapper.java
+++ b/java/javax/servlet/ServletResponseWrapper.java
@@ -73,6 +73,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * 
      * @since 2.4
      */
+    @Override
     public void setCharacterEncoding(String charset) {
         this.response.setCharacterEncoding(charset);
     }
@@ -81,6 +82,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to return getCharacterEncoding()
      * on the wrapped response object.
      */
+    @Override
     public String getCharacterEncoding() {
         return this.response.getCharacterEncoding();
     }
@@ -89,6 +91,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to return getOutputStream() on the
      * wrapped response object.
      */
+    @Override
     public ServletOutputStream getOutputStream() throws IOException {
         return this.response.getOutputStream();
     }
@@ -97,6 +100,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to return getWriter() on the
      * wrapped response object.
      */
+    @Override
     public PrintWriter getWriter() throws IOException {
         return this.response.getWriter();
     }
@@ -105,6 +109,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call setContentLength(int len)
      * on the wrapped response object.
      */
+    @Override
     public void setContentLength(int len) {
         this.response.setContentLength(len);
     }
@@ -113,6 +118,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call setContentType(String
      * type) on the wrapped response object.
      */
+    @Override
     public void setContentType(String type) {
         this.response.setContentType(type);
     }
@@ -123,6 +129,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * 
      * @since 2.4
      */
+    @Override
     public String getContentType() {
         return this.response.getContentType();
     }
@@ -131,6 +138,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call setBufferSize(int size) on
      * the wrapped response object.
      */
+    @Override
     public void setBufferSize(int size) {
         this.response.setBufferSize(size);
     }
@@ -139,6 +147,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to return getBufferSize() on the
      * wrapped response object.
      */
+    @Override
     public int getBufferSize() {
         return this.response.getBufferSize();
     }
@@ -147,6 +156,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call flushBuffer() on the
      * wrapped response object.
      */
+    @Override
     public void flushBuffer() throws IOException {
         this.response.flushBuffer();
     }
@@ -155,6 +165,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to return isCommitted() on the
      * wrapped response object.
      */
+    @Override
     public boolean isCommitted() {
         return this.response.isCommitted();
     }
@@ -163,6 +174,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call reset() on the wrapped
      * response object.
      */
+    @Override
     public void reset() {
         this.response.reset();
     }
@@ -171,6 +183,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call resetBuffer() on the
      * wrapped response object.
      */
+    @Override
     public void resetBuffer() {
         this.response.resetBuffer();
     }
@@ -179,6 +192,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to call setLocale(Locale loc) on
      * the wrapped response object.
      */
+    @Override
     public void setLocale(Locale loc) {
         this.response.setLocale(loc);
     }
@@ -187,6 +201,7 @@ public class ServletResponseWrapper implements ServletResponse {
      * The default behavior of this method is to return getLocale() on the
      * wrapped response object.
      */
+    @Override
     public Locale getLocale() {
         return this.response.getLocale();
     }

==================================================
HttpServletResponseWrapper.java
index 50ba7e63c7..c2c7274eb5 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -53,6 +53,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getAuthType() on the
      * wrapped request object.
      */
+    @Override
     public String getAuthType() {
         return this._getHttpServletRequest().getAuthType();
     }
@@ -61,6 +62,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getCookies() on the
      * wrapped request object.
      */
+    @Override
     public Cookie[] getCookies() {
         return this._getHttpServletRequest().getCookies();
     }
@@ -69,6 +71,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getDateHeader(String
      * name) on the wrapped request object.
      */
+    @Override
     public long getDateHeader(String name) {
         return this._getHttpServletRequest().getDateHeader(name);
     }
@@ -77,6 +80,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getHeader(String name)
      * on the wrapped request object.
      */
+    @Override
     public String getHeader(String name) {
         return this._getHttpServletRequest().getHeader(name);
     }
@@ -85,6 +89,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getHeaders(String name)
      * on the wrapped request object.
      */
+    @Override
     public Enumeration<String> getHeaders(String name) {
         return this._getHttpServletRequest().getHeaders(name);
     }
@@ -93,6 +98,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getHeaderNames() on the
      * wrapped request object.
      */
+    @Override
     public Enumeration<String> getHeaderNames() {
         return this._getHttpServletRequest().getHeaderNames();
     }
@@ -101,6 +107,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getIntHeader(String
      * name) on the wrapped request object.
      */
+    @Override
     public int getIntHeader(String name) {
         return this._getHttpServletRequest().getIntHeader(name);
     }
@@ -109,6 +116,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getMethod() on the
      * wrapped request object.
      */
+    @Override
     public String getMethod() {
         return this._getHttpServletRequest().getMethod();
     }
@@ -117,6 +125,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getPathInfo() on the
      * wrapped request object.
      */
+    @Override
     public String getPathInfo() {
         return this._getHttpServletRequest().getPathInfo();
     }
@@ -125,6 +134,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getPathTranslated() on
      * the wrapped request object.
      */
+    @Override
     public String getPathTranslated() {
         return this._getHttpServletRequest().getPathTranslated();
     }
@@ -133,6 +143,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getContextPath() on the
      * wrapped request object.
      */
+    @Override
     public String getContextPath() {
         return this._getHttpServletRequest().getContextPath();
     }
@@ -141,6 +152,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getQueryString() on the
      * wrapped request object.
      */
+    @Override
     public String getQueryString() {
         return this._getHttpServletRequest().getQueryString();
     }
@@ -149,6 +161,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getRemoteUser() on the
      * wrapped request object.
      */
+    @Override
     public String getRemoteUser() {
         return this._getHttpServletRequest().getRemoteUser();
     }
@@ -157,6 +170,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return isUserInRole(String
      * role) on the wrapped request object.
      */
+    @Override
     public boolean isUserInRole(String role) {
         return this._getHttpServletRequest().isUserInRole(role);
     }
@@ -165,6 +179,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getUserPrincipal() on
      * the wrapped request object.
      */
+    @Override
     public java.security.Principal getUserPrincipal() {
         return this._getHttpServletRequest().getUserPrincipal();
     }
@@ -173,6 +188,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getRequestedSessionId()
      * on the wrapped request object.
      */
+    @Override
     public String getRequestedSessionId() {
         return this._getHttpServletRequest().getRequestedSessionId();
     }
@@ -181,6 +197,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getRequestURI() on the
      * wrapped request object.
      */
+    @Override
     public String getRequestURI() {
         return this._getHttpServletRequest().getRequestURI();
     }
@@ -189,6 +206,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getRequestURL() on the
      * wrapped request object.
      */
+    @Override
     public StringBuffer getRequestURL() {
         return this._getHttpServletRequest().getRequestURL();
     }
@@ -197,6 +215,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getServletPath() on the
      * wrapped request object.
      */
+    @Override
     public String getServletPath() {
         return this._getHttpServletRequest().getServletPath();
     }
@@ -205,6 +224,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getSession(boolean
      * create) on the wrapped request object.
      */
+    @Override
     public HttpSession getSession(boolean create) {
         return this._getHttpServletRequest().getSession(create);
     }
@@ -213,6 +233,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return getSession() on the
      * wrapped request object.
      */
+    @Override
     public HttpSession getSession() {
         return this._getHttpServletRequest().getSession();
     }
@@ -221,6 +242,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return
      * isRequestedSessionIdValid() on the wrapped request object.
      */
+    @Override
     public boolean isRequestedSessionIdValid() {
         return this._getHttpServletRequest().isRequestedSessionIdValid();
     }
@@ -229,6 +251,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return
      * isRequestedSessionIdFromCookie() on the wrapped request object.
      */
+    @Override
     public boolean isRequestedSessionIdFromCookie() {
         return this._getHttpServletRequest().isRequestedSessionIdFromCookie();
     }
@@ -237,6 +260,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * The default behavior of this method is to return
      * isRequestedSessionIdFromURL() on the wrapped request object.
      */
+    @Override
     public boolean isRequestedSessionIdFromURL() {
         return this._getHttpServletRequest().isRequestedSessionIdFromURL();
     }
@@ -247,6 +271,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * 
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
+    @Override
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public boolean isRequestedSessionIdFromUrl() {
@@ -256,6 +281,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public boolean authenticate(HttpServletResponse response)
             throws IOException, ServletException {
         return this._getHttpServletRequest().authenticate(response);
@@ -264,6 +290,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public void login(String username, String password) throws ServletException {
         this._getHttpServletRequest().login(username, password);
     }
@@ -271,6 +298,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public void logout() throws ServletException {
         this._getHttpServletRequest().logout();
     }
@@ -278,6 +306,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public Collection<Part> getParts() throws IllegalStateException,
             IOException, ServletException {
         return this._getHttpServletRequest().getParts();
@@ -289,6 +318,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * @throws IllegalStateException
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public Part getPart(String name) throws IllegalStateException, IOException,
             ServletException {
         return this._getHttpServletRequest().getPart(name);

==================================================
HttpJspPage.java
index fee7da3214..516290656f 100644
--- a/java/javax/servlet/http/HttpServletResponseWrapper.java
+++ b/java/javax/servlet/http/HttpServletResponseWrapper.java
@@ -53,6 +53,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call addCookie(Cookie cookie)
      * on the wrapped response object.
      */
+    @Override
     public void addCookie(Cookie cookie) {
         this._getHttpServletResponse().addCookie(cookie);
     }
@@ -61,6 +62,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call containsHeader(String
      * name) on the wrapped response object.
      */
+    @Override
     public boolean containsHeader(String name) {
         return this._getHttpServletResponse().containsHeader(name);
     }
@@ -69,6 +71,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call encodeURL(String url) on
      * the wrapped response object.
      */
+    @Override
     public String encodeURL(String url) {
         return this._getHttpServletResponse().encodeURL(url);
     }
@@ -77,6 +80,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to return encodeRedirectURL(String
      * url) on the wrapped response object.
      */
+    @Override
     public String encodeRedirectURL(String url) {
         return this._getHttpServletResponse().encodeRedirectURL(url);
     }
@@ -87,6 +91,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * 
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
+    @Override
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public String encodeUrl(String url) {
@@ -99,6 +104,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * 
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
+    @Override
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public String encodeRedirectUrl(String url) {
@@ -109,6 +115,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call sendError(int sc, String
      * msg) on the wrapped response object.
      */
+    @Override
     public void sendError(int sc, String msg) throws IOException {
         this._getHttpServletResponse().sendError(sc, msg);
     }
@@ -117,6 +124,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call sendError(int sc) on the
      * wrapped response object.
      */
+    @Override
     public void sendError(int sc) throws IOException {
         this._getHttpServletResponse().sendError(sc);
     }
@@ -125,6 +133,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to return sendRedirect(String
      * location) on the wrapped response object.
      */
+    @Override
     public void sendRedirect(String location) throws IOException {
         this._getHttpServletResponse().sendRedirect(location);
     }
@@ -133,6 +142,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call setDateHeader(String name,
      * long date) on the wrapped response object.
      */
+    @Override
     public void setDateHeader(String name, long date) {
         this._getHttpServletResponse().setDateHeader(name, date);
     }
@@ -141,6 +151,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call addDateHeader(String name,
      * long date) on the wrapped response object.
      */
+    @Override
     public void addDateHeader(String name, long date) {
         this._getHttpServletResponse().addDateHeader(name, date);
     }
@@ -149,6 +160,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to return setHeader(String name,
      * String value) on the wrapped response object.
      */
+    @Override
     public void setHeader(String name, String value) {
         this._getHttpServletResponse().setHeader(name, value);
     }
@@ -157,6 +169,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to return addHeader(String name,
      * String value) on the wrapped response object.
      */
+    @Override
     public void addHeader(String name, String value) {
         this._getHttpServletResponse().addHeader(name, value);
     }
@@ -165,6 +178,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call setIntHeader(String name,
      * int value) on the wrapped response object.
      */
+    @Override
     public void setIntHeader(String name, int value) {
         this._getHttpServletResponse().setIntHeader(name, value);
     }
@@ -173,6 +187,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call addIntHeader(String name,
      * int value) on the wrapped response object.
      */
+    @Override
     public void addIntHeader(String name, int value) {
         this._getHttpServletResponse().addIntHeader(name, value);
     }
@@ -181,6 +196,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * The default behavior of this method is to call setStatus(int sc) on the
      * wrapped response object.
      */
+    @Override
     public void setStatus(int sc) {
         this._getHttpServletResponse().setStatus(sc);
     }
@@ -191,6 +207,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
      * 
      * @deprecated As of Version 3.0 of the Java Servlet API
      */
+    @Override
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public void setStatus(int sc, String sm) {
@@ -200,6 +217,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public int getStatus() {
         return this._getHttpServletResponse().getStatus();
     }
@@ -207,6 +225,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public String getHeader(String name) {
         return this._getHttpServletResponse().getHeader(name);
     }
@@ -214,6 +233,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public Collection<String> getHeaders(String name) {
         return this._getHttpServletResponse().getHeaders(name);
     }
@@ -221,6 +241,7 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
+    @Override
     public Collection<String> getHeaderNames() {
         return this._getHttpServletResponse().getHeaderNames();
     }

==================================================
JspPage.java
index 685caf8339..0351a09ff4 100644
--- a/java/javax/servlet/jsp/HttpJspPage.java
+++ b/java/javax/servlet/jsp/HttpJspPage.java
@@ -17,10 +17,12 @@
  
 package javax.servlet.jsp;
 
-import javax.servlet.*;
-import javax.servlet.http.*;
 import java.io.IOException;
 
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
 /**
  * The HttpJspPage interface describes the interaction that a JSP Page
  * Implementation Class must satisfy when using the HTTP protocol.

==================================================
ImplicitObjectELResolver.java
index 75cfcce896..bcc9a92be6 100644
--- a/java/javax/servlet/jsp/JspPage.java
+++ b/java/javax/servlet/jsp/JspPage.java
@@ -16,7 +16,7 @@
 */ 
 package javax.servlet.jsp;
 
-import javax.servlet.*;
+import javax.servlet.Servlet;
 
 /**
  * The JspPage interface describes the generic interaction that a JSP Page

==================================================
BodyContent.java
index acc31c9026..7eae3ed230 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -561,14 +561,17 @@ public class ImplicitObjectELResolver extends ELResolver {
                 this.key = key;
             }
 
+            @Override
             public String getKey() {
                 return this.key;
             }
 
+            @Override
             public V getValue() {
                 return getAttribute(this.key);
             }
 
+            @Override
             public V setValue(Object value) {
                 if (value == null) {
                     removeAttribute(this.key);

==================================================
BodyTag.java
index 0e7428df3f..a7a111089c 100644
--- a/java/javax/servlet/jsp/tagext/BodyContent.java
+++ b/java/javax/servlet/jsp/tagext/BodyContent.java
@@ -19,7 +19,8 @@ package javax.servlet.jsp.tagext;
 import java.io.Reader;
 import java.io.Writer;
 import java.io.IOException;
-import javax.servlet.jsp.*;
+
+import javax.servlet.jsp.JspWriter;
 
 /**
  * An encapsulation of the evaluation of the body of an action so it is

==================================================
BodyTagSupport.java
index 847cc3ed45..e4f598e99f 100644
--- a/java/javax/servlet/jsp/tagext/BodyTag.java
+++ b/java/javax/servlet/jsp/tagext/BodyTag.java
@@ -16,7 +16,8 @@
  */
 package javax.servlet.jsp.tagext;
 
-import javax.servlet.jsp.*;
+import javax.servlet.jsp.JspException;
+
 
 /**
  * The BodyTag interface extends IterationTag by defining additional methods

==================================================
IterationTag.java
index 5f694f431c..928234a28a 100644
--- a/java/javax/servlet/jsp/tagext/BodyTagSupport.java
+++ b/java/javax/servlet/jsp/tagext/BodyTagSupport.java
@@ -30,6 +30,8 @@ import javax.servlet.jsp.JspWriter;
  */
 public class BodyTagSupport extends TagSupport implements BodyTag {
 
+    private static final long serialVersionUID = -7235752615580319833L;
+
     /**
      * Default constructor, all subclasses are required to only define a public
      * constructor with the same signature, and to call the superclass
@@ -77,6 +79,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
      * @see #doInitBody()
      * @see BodyTag#setBodyContent
      */
+    @Override
     public void setBodyContent(BodyContent b) {
         this.bodyContent = b;
     }
@@ -91,6 +94,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
      * @see #doAfterBody
      * @see BodyTag#doInitBody
      */
+    @Override
     public void doInitBody() throws JspException {
         // NOOP by default
     }

==================================================
JspFragment.java
index 6f4a3622e5..e97fed02ba 100644
--- a/java/javax/servlet/jsp/tagext/IterationTag.java
+++ b/java/javax/servlet/jsp/tagext/IterationTag.java
@@ -17,7 +17,8 @@
 
 package javax.servlet.jsp.tagext;
 
-import javax.servlet.jsp.*;
+import javax.servlet.jsp.JspException;
+
 
 /**
  * The IterationTag interface extends Tag by defining one additional

==================================================
SimpleTagSupport.java
index 5182c6c870..c5b3b08242 100644
--- a/java/javax/servlet/jsp/tagext/JspFragment.java
+++ b/java/javax/servlet/jsp/tagext/JspFragment.java
@@ -19,7 +19,9 @@ package javax.servlet.jsp.tagext;
 
 import java.io.IOException;
 import java.io.Writer;
-import javax.servlet.jsp.*;
+
+import javax.servlet.jsp.JspContext;
+import javax.servlet.jsp.JspException;
 
 /**
  * Encapsulates a portion of JSP code in an object that 

==================================================
Tag.java
index 63ee122f48..4c93621e8c 100644
--- a/java/javax/servlet/jsp/tagext/SimpleTagSupport.java
+++ b/java/javax/servlet/jsp/tagext/SimpleTagSupport.java
@@ -65,6 +65,7 @@ public class SimpleTagSupport implements SimpleTag {
      *     an error writing to the output stream
      * @see SimpleTag#doTag()
      */ 
+    @Override
     public void doTag() throws JspException, IOException {
         // NOOP by default
     }
@@ -77,6 +78,7 @@ public class SimpleTagSupport implements SimpleTag {
      *
      * @param parent the tag that encloses this tag
      */
+    @Override
     public void setParent( JspTag parent ) {
         this.parentTag = parent;
     }
@@ -86,6 +88,7 @@ public class SimpleTagSupport implements SimpleTag {
      *
      * @return the parent of this tag
      */ 
+    @Override
     public JspTag getParent() {
         return this.parentTag;
     }
@@ -98,6 +101,7 @@ public class SimpleTagSupport implements SimpleTag {
      * @param pc the page context for this invocation
      * @see SimpleTag#setJspContext
      */
+    @Override
     public void setJspContext( JspContext pc ) {
         this.jspContext = pc;
     }
@@ -120,6 +124,7 @@ public class SimpleTagSupport implements SimpleTag {
      *     not called at all.
      * @see SimpleTag#setJspBody
      */ 
+    @Override
     public void setJspBody( JspFragment jspBody ) {
         this.jspBody = jspBody;
     }

==================================================
TagAdapter.java
index 449d72631a..c1f07c0bc8 100644
--- a/java/javax/servlet/jsp/tagext/Tag.java
+++ b/java/javax/servlet/jsp/tagext/Tag.java
@@ -17,7 +17,8 @@
  
 package javax.servlet.jsp.tagext;
 
-import javax.servlet.jsp.*;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.PageContext;
 
 
 /**

==================================================
TagSupport.java
index 72b15a374f..3d2f19caef 100644
--- a/java/javax/servlet/jsp/tagext/TagAdapter.java
+++ b/java/javax/servlet/jsp/tagext/TagAdapter.java
@@ -16,7 +16,8 @@
  */
 package javax.servlet.jsp.tagext;
 
-import javax.servlet.jsp.*;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.PageContext;
 
 /**
  * Wraps any SimpleTag and exposes it using a Tag interface. This is used to
@@ -64,6 +65,7 @@ public class TagAdapter implements Tag {
      * @throws UnsupportedOperationException
      *             Must not be called
      */
+    @Override
     public void setPageContext(PageContext pc) {
         throw new UnsupportedOperationException(
                 "Illegal to invoke setPageContext() on TagAdapter wrapper");
@@ -78,6 +80,7 @@ public class TagAdapter implements Tag {
      * @throws UnsupportedOperationException
      *             Must not be called.
      */
+    @Override
     public void setParent(Tag parentTag) {
         throw new UnsupportedOperationException(
                 "Illegal to invoke setParent() on TagAdapter wrapper");
@@ -91,6 +94,7 @@ public class TagAdapter implements Tag {
      * 
      * @return The parent of the tag being adapted.
      */
+    @Override
     public Tag getParent() {
         if (!parentDetermined) {
             JspTag adapteeParent = simpleTagAdaptee.getParent();
@@ -128,6 +132,7 @@ public class TagAdapter implements Tag {
      * @throws JspException
      *             never thrown
      */
+    @Override
     public int doStartTag() throws JspException {
         throw new UnsupportedOperationException(
                 "Illegal to invoke doStartTag() on TagAdapter wrapper");
@@ -142,6 +147,7 @@ public class TagAdapter implements Tag {
      * @throws JspException
      *             never thrown
      */
+    @Override
     public int doEndTag() throws JspException {
         throw new UnsupportedOperationException(
                 "Illegal to invoke doEndTag() on TagAdapter wrapper");
@@ -153,6 +159,7 @@ public class TagAdapter implements Tag {
      * @throws UnsupportedOperationException
      *             Must not be called
      */
+    @Override
     public void release() {
         throw new UnsupportedOperationException(
                 "Illegal to invoke release() on TagAdapter wrapper");

==================================================
NioSender.java
index 3234e7d8e1..51d1c0a57e 100644
--- a/java/javax/servlet/jsp/tagext/TagSupport.java
+++ b/java/javax/servlet/jsp/tagext/TagSupport.java
@@ -119,6 +119,7 @@ public class TagSupport implements IterationTag, Serializable {
      *
      * @see Tag#doStartTag()
      */
+    @Override
     public int doStartTag() throws JspException {
         return SKIP_BODY;
     }
@@ -131,6 +132,7 @@ public class TagSupport implements IterationTag, Serializable {
      *
      * @see Tag#doEndTag()
      */
+    @Override
     public int doEndTag() throws JspException {
         return EVAL_PAGE;
     }
@@ -144,6 +146,7 @@ public class TagSupport implements IterationTag, Serializable {
      *
      * @see IterationTag#doAfterBody()
      */
+    @Override
     public int doAfterBody() throws JspException {
         return SKIP_BODY;
     }
@@ -156,6 +159,7 @@ public class TagSupport implements IterationTag, Serializable {
      *
      * @see Tag#release()
      */
+    @Override
     public void release() {
         parent = null;
         id = null;
@@ -171,6 +175,7 @@ public class TagSupport implements IterationTag, Serializable {
      * @param t The parent Tag.
      * @see Tag#setParent(Tag)
      */
+    @Override
     public void setParent(Tag t) {
         parent = t;
     }
@@ -181,6 +186,7 @@ public class TagSupport implements IterationTag, Serializable {
      *
      * @return the parent tag instance or null
      */
+    @Override
     public Tag getParent() {
         return parent;
     }
@@ -209,6 +215,7 @@ public class TagSupport implements IterationTag, Serializable {
      * @param pageContext The PageContext.
      * @see Tag#setPageContext
      */
+    @Override
     public void setPageContext(PageContext pageContext) {
         this.pageContext = pageContext;
     }

==================================================
MIME2Java.java
index 4c6a1223aa..b5f1251ad8 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -19,6 +19,7 @@ package org.apache.catalina.tribes.transport.nio;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
+import java.net.SocketException;
 import java.nio.ByteBuffer;
 import java.nio.channels.DatagramChannel;
 import java.nio.channels.SelectionKey;
@@ -33,7 +34,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 import java.io.EOFException;
-import java.net.*;
 
 /**
  * This class is NOT thread safe and should never be used with more than one thread at a time

==================================================
EmbeddedServletOptions.java
index 2d4b4d832f..89bec180cf 100644
--- a/java/org/apache/catalina/util/MIME2Java.java
+++ b/java/org/apache/catalina/util/MIME2Java.java
@@ -17,7 +17,8 @@
 
 package org.apache.catalina.util;
 
-import java.util.*;
+import java.util.Hashtable;
+import java.util.Locale;
 
 /**
  * MIME2Java is a convenience class which handles conversions between MIME charset names

==================================================
ELNode.java
index 733654f480..b75c005e8b 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -18,7 +18,9 @@
 package org.apache.jasper;
 
 import java.io.File;
-import java.util.*;
+import java.util.Enumeration;
+import java.util.Map;
+import java.util.Properties;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;

==================================================
JasperTagInfo.java
index e1d1776ed8..1ec4aca507 100644
--- a/java/org/apache/jasper/compiler/ELNode.java
+++ b/java/org/apache/jasper/compiler/ELNode.java
@@ -17,7 +17,10 @@
 
 package org.apache.jasper.compiler;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
 import javax.servlet.jsp.tagext.FunctionInfo;
 import org.apache.jasper.JasperException;
 

==================================================
ScriptingVariabler.java
index 58cd57f998..d8b91cc706 100644
--- a/java/org/apache/jasper/compiler/JasperTagInfo.java
+++ b/java/org/apache/jasper/compiler/JasperTagInfo.java
@@ -17,7 +17,11 @@
 
 package org.apache.jasper.compiler;
 
-import javax.servlet.jsp.tagext.*;
+import javax.servlet.jsp.tagext.TagAttributeInfo;
+import javax.servlet.jsp.tagext.TagExtraInfo;
+import javax.servlet.jsp.tagext.TagInfo;
+import javax.servlet.jsp.tagext.TagLibraryInfo;
+import javax.servlet.jsp.tagext.TagVariableInfo;
 
 /**
  * TagInfo extension used by tag handlers that are implemented via tag files.

==================================================
TagPluginManager.java
index 6a1048ad6c..3249496bd4 100644
--- a/java/org/apache/jasper/compiler/ScriptingVariabler.java
+++ b/java/org/apache/jasper/compiler/ScriptingVariabler.java
@@ -17,8 +17,14 @@
 
 package org.apache.jasper.compiler;
 
-import java.util.*;
-import javax.servlet.jsp.tagext.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.servlet.jsp.tagext.TagVariableInfo;
+import javax.servlet.jsp.tagext.VariableInfo;
+
 import org.apache.jasper.JasperException;
 
 /**

==================================================
Choose.java
index a2c4592bfe..d0e35fe3d4 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -17,8 +17,10 @@
 
 package org.apache.jasper.compiler;
 
-import java.util.*;
-import java.io.*;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Iterator;
+
 import javax.servlet.ServletContext;
 
 import org.apache.jasper.JasperException;

==================================================
ForEach.java
index 7622ceea21..914f396846 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Choose.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Choose.java
@@ -18,7 +18,8 @@
 
 package org.apache.jasper.tagplugins.jstl.core;
 
-import org.apache.jasper.compiler.tagplugin.*;
+import org.apache.jasper.compiler.tagplugin.TagPlugin;
+import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class Choose implements TagPlugin {
     

==================================================
If.java
index e5bab629cd..cd67da6533 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java
@@ -18,7 +18,8 @@
 
 package org.apache.jasper.tagplugins.jstl.core;
 
-import org.apache.jasper.compiler.tagplugin.*;
+import org.apache.jasper.compiler.tagplugin.TagPlugin;
+import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class ForEach implements TagPlugin {
     

==================================================
Otherwise.java
index 5f5a6df44c..52efa8a17c 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/If.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/If.java
@@ -18,7 +18,8 @@
 
 package org.apache.jasper.tagplugins.jstl.core;
 
-import org.apache.jasper.compiler.tagplugin.*;
+import org.apache.jasper.compiler.tagplugin.TagPlugin;
+import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class If implements TagPlugin {
     

==================================================
When.java
index 3119d30272..3273fcf843 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Otherwise.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Otherwise.java
@@ -18,7 +18,8 @@
 
 package org.apache.jasper.tagplugins.jstl.core;
 
-import org.apache.jasper.compiler.tagplugin.*;
+import org.apache.jasper.compiler.tagplugin.TagPlugin;
+import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class Otherwise implements TagPlugin {
     

==================================================
LocalVariableTypeTable.java
index 10aefc8f13..a55a45448f 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/When.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/When.java
@@ -18,7 +18,8 @@
 
 package org.apache.jasper.tagplugins.jstl.core;
 
-import org.apache.jasper.compiler.tagplugin.*;
+import org.apache.jasper.compiler.tagplugin.TagPlugin;
+import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 
 public final class When implements TagPlugin {
     

==================================================
DefaultServerSocketFactory.java
index 0607a98db9..b7df253d41 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -16,8 +16,11 @@
  */
 package org.apache.tomcat.util.bcel.classfile;
 
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
 import  org.apache.tomcat.util.bcel.Constants;
-import  java.io.*;
 
 // The new table is used when generic types are about...
 

==================================================
TestChannelOptionFlag.java
index 0b92300047..1b4c7f04c0 100644
--- a/java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java
+++ b/java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java
@@ -17,8 +17,10 @@
 
 package org.apache.tomcat.util.net;
 
-import java.io.*;
-import java.net.*;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.ServerSocket;
+import java.net.Socket;
 
 /**
  * Default server socket factory. Doesn't do much except give us

==================================================
CookieExample.java
index 2beb8c7b98..3637723622 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestChannelOptionFlag.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestChannelOptionFlag.java
@@ -16,11 +16,13 @@
  */
 package org.apache.catalina.tribes.test.channel;
 
-import junit.framework.*;
-import org.apache.catalina.tribes.group.*;
+import junit.framework.TestCase;
+
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelInterceptor;
 import org.apache.catalina.tribes.ChannelException;
+import org.apache.catalina.tribes.group.ChannelInterceptorBase;
+import org.apache.catalina.tribes.group.GroupChannel;
 
 /**
  * <p>Title: </p> 

==================================================
HelloWorldExample.java
index 3c1c58ae3e..c49abeabda 100644
--- a/webapps/examples/WEB-INF/classes/CookieExample.java
+++ b/webapps/examples/WEB-INF/classes/CookieExample.java
@@ -18,10 +18,15 @@
  *
  */
 
-import java.io.*;
-import java.util.*;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ResourceBundle;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 import util.HTMLFilter;
 

==================================================
RequestHeaderExample.java
index cc2c6b67b1..f44cee0af2 100644
--- a/webapps/examples/WEB-INF/classes/HelloWorldExample.java
+++ b/webapps/examples/WEB-INF/classes/HelloWorldExample.java
@@ -1,3 +1,4 @@
+
 /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
@@ -18,10 +19,14 @@
  *
  */
 
-import java.io.*;
-import java.util.*;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ResourceBundle;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 /**
  * The simplest possible servlet.

==================================================
RequestInfoExample.java
index 1dd7bacfb5..b42da02b4b 100644
--- a/webapps/examples/WEB-INF/classes/RequestHeaderExample.java
+++ b/webapps/examples/WEB-INF/classes/RequestHeaderExample.java
@@ -18,10 +18,15 @@
  *
  */
 
-import java.io.*;
-import java.util.*;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.Enumeration;
+import java.util.ResourceBundle;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 import util.HTMLFilter;
 

==================================================
RequestParamExample.java
index d9ad44a86b..ecb31316b5 100644
--- a/webapps/examples/WEB-INF/classes/RequestInfoExample.java
+++ b/webapps/examples/WEB-INF/classes/RequestInfoExample.java
@@ -18,10 +18,14 @@
  *
  */
 
-import java.io.*;
-import java.util.*;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ResourceBundle;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 import util.HTMLFilter;
 

==================================================
SessionExample.java
index 9a7ab4220b..aceea086fa 100644
--- a/webapps/examples/WEB-INF/classes/RequestParamExample.java
+++ b/webapps/examples/WEB-INF/classes/RequestParamExample.java
@@ -18,10 +18,14 @@
  *
  */
 
-import java.io.*;
-import java.util.*;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ResourceBundle;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 import util.HTMLFilter;
 

==================================================
Entries.java
index da3b85b5a0..34b393ec41 100644
--- a/webapps/examples/WEB-INF/classes/SessionExample.java
+++ b/webapps/examples/WEB-INF/classes/SessionExample.java
@@ -18,10 +18,17 @@
  *
  */
 
-import java.io.*;
-import java.util.*;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.ResourceBundle;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
 
 import util.HTMLFilter;
 

==================================================
JspCalendar.java
index 03afc7e408..e95f3a0d51 100644
--- a/webapps/examples/WEB-INF/classes/cal/Entries.java
+++ b/webapps/examples/WEB-INF/classes/cal/Entries.java
@@ -17,7 +17,8 @@
 package cal;
 
 import java.util.Hashtable;
-import javax.servlet.http.*;
+
+import javax.servlet.http.HttpServletRequest;
 
 public class Entries {
 

==================================================
TableBean.java
index 34d1c5b806..0552a97acd 100644
--- a/webapps/examples/WEB-INF/classes/cal/JspCalendar.java
+++ b/webapps/examples/WEB-INF/classes/cal/JspCalendar.java
@@ -17,7 +17,8 @@
 
 package cal;
 
-import java.util.*;
+import java.util.Calendar;
+import java.util.Date;
 
 public class JspCalendar {
     Calendar  calendar = null;

==================================================
CompressionFilterTestServlet.java
index d158a669b8..6db4672066 100644
--- a/webapps/examples/WEB-INF/classes/cal/TableBean.java
+++ b/webapps/examples/WEB-INF/classes/cal/TableBean.java
@@ -16,9 +16,10 @@
  */
 package cal;
 
-import javax.servlet.http.*;
 import java.util.Hashtable;
 
+import javax.servlet.http.HttpServletRequest;
+
 public class TableBean {
 
     Hashtable<String, Entries> table;

==================================================
JspCalendar.java
index 6f00ca7460..7d873fb8ee 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilterTestServlet.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilterTestServlet.java
@@ -19,8 +19,12 @@ package compressionFilters;
 
 import java.io.IOException;
 import java.util.Enumeration;
-import javax.servlet.*;
-import javax.servlet.http.*;
+
+import javax.servlet.ServletException;
+import javax.servlet.ServletOutputStream;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 /**
  * Very Simple test servlet to test compression filter

==================================================
ExampleTagBase.java
index 0008ca13fc..77ad2a3b0b 100644
--- a/webapps/examples/WEB-INF/classes/dates/JspCalendar.java
+++ b/webapps/examples/WEB-INF/classes/dates/JspCalendar.java
@@ -16,7 +16,8 @@
 */
 package dates;
 
-import java.util.*;
+import java.util.Calendar;
+import java.util.Date;
 
 public class JspCalendar {
     Calendar  calendar = null;

==================================================
FooTag.java
index cea926db46..254af4776b 100644
--- a/webapps/examples/WEB-INF/classes/examples/ExampleTagBase.java
+++ b/webapps/examples/WEB-INF/classes/examples/ExampleTagBase.java
@@ -16,8 +16,11 @@
 */
 package examples;
 
-import javax.servlet.jsp.*;
-import javax.servlet.jsp.tagext.*;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.PageContext;
+import javax.servlet.jsp.tagext.BodyContent;
+import javax.servlet.jsp.tagext.BodyTagSupport;
+import javax.servlet.jsp.tagext.Tag;
 
 public abstract class ExampleTagBase extends BodyTagSupport {
 

==================================================
FooTagExtraInfo.java
index 6f716578a5..a8bba6a9a5 100644
--- a/webapps/examples/WEB-INF/classes/examples/FooTag.java
+++ b/webapps/examples/WEB-INF/classes/examples/FooTag.java
@@ -16,9 +16,11 @@
 */
 package examples;
 
-import javax.servlet.jsp.*;
 import java.io.IOException;
 
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+
 /**
  * Example1: the simplest tag
  * Collect attributes and call into some actions

==================================================
LogTag.java
index 9aaa628587..470bfcda11 100644
--- a/webapps/examples/WEB-INF/classes/examples/FooTagExtraInfo.java
+++ b/webapps/examples/WEB-INF/classes/examples/FooTagExtraInfo.java
@@ -16,7 +16,9 @@
 */
 package examples;
 
-import javax.servlet.jsp.tagext.*;
+import javax.servlet.jsp.tagext.TagData;
+import javax.servlet.jsp.tagext.TagExtraInfo;
+import javax.servlet.jsp.tagext.VariableInfo;
 
 public class FooTagExtraInfo extends TagExtraInfo {
     @Override

==================================================
ShowSource.java
index 9bc4789077..2be11d674e 100644
--- a/webapps/examples/WEB-INF/classes/examples/LogTag.java
+++ b/webapps/examples/WEB-INF/classes/examples/LogTag.java
@@ -16,11 +16,11 @@
 */
 package examples;
 
-
-import javax.servlet.jsp.*;
-
 import java.io.IOException;
 
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+
 /**
  * Log the contents of the body. Could be used to handle errors etc. 
  */

==================================================
ValuesTag.java
index 1c74c5775e..72c10cc86c 100644
--- a/webapps/examples/WEB-INF/classes/examples/ShowSource.java
+++ b/webapps/examples/WEB-INF/classes/examples/ShowSource.java
@@ -16,13 +16,15 @@
 */
 package examples;
 
-
-import javax.servlet.jsp.*;
-import javax.servlet.jsp.tagext.*;
-
-import java.io.*;
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.Locale;
 
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+import javax.servlet.jsp.JspWriter;
+import javax.servlet.jsp.tagext.TagSupport;
+
 /**
  * Display the sources of the JSP file.
  */

==================================================
servletToJsp.java
index 869c34a7ca..b33586059d 100644
--- a/webapps/examples/WEB-INF/classes/examples/ValuesTag.java
+++ b/webapps/examples/WEB-INF/classes/examples/ValuesTag.java
@@ -16,10 +16,12 @@
  */
 package examples;
 
-import javax.servlet.jsp.*;
-import javax.servlet.jsp.tagext.*;
+import java.io.IOException;
 
-import java.io.*;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+import javax.servlet.jsp.JspWriter;
+import javax.servlet.jsp.tagext.TagSupport;
 
 /**
  * Accept and display a value.

==================================================
Clock2.java
index 0bc8739ab7..c0ccda0297 100644
--- a/webapps/examples/WEB-INF/classes/servletToJsp.java
+++ b/webapps/examples/WEB-INF/classes/servletToJsp.java
@@ -14,7 +14,10 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-import javax.servlet.http.*;
+
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 public class servletToJsp extends HttpServlet {
 

==================================================
Clock2.java
index 1b865203ef..0892d379cb 100644
--- a/webapps/examples/WEB-INF/jsp/applet/Clock2.java
+++ b/webapps/examples/WEB-INF/jsp/applet/Clock2.java
@@ -14,10 +14,15 @@
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-import java.util.*;
-import java.awt.*;
-import java.applet.*;
-import java.text.*;
+
+import java.applet.Applet;
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.Graphics;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
 
 /**
  * Time!

==================================================
