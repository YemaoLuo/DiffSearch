4be50a0ce4e727ac2f2729e1dd2ec9666c043a60
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=43682
==================================================
Mark Emlyn
==================================================
Tue Oct 7 12:36:17 2014 +0000
==================================================
WebappClassLoaderBase.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=43682
Add support for referring to the current context, host and service name in per Context logging.properties files

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1629871 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClassLoaderLogManager.java
index c170448e58..35321f5915 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -65,6 +65,7 @@ import java.util.jar.Manifest;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.catalina.Container;
 import org.apache.catalina.Globals;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
@@ -73,6 +74,7 @@ import org.apache.catalina.LifecycleState;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.webresources.TomcatURLStreamHandlerFactory;
+import org.apache.juli.WebappProperties;
 import org.apache.tomcat.InstrumentableClassLoader;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
@@ -123,7 +125,7 @@ import org.apache.tomcat.util.res.StringManager;
  * @author Craig R. McClanahan
  */
 public abstract class WebappClassLoaderBase extends URLClassLoader
-        implements Lifecycle, InstrumentableClassLoader {
+        implements Lifecycle, InstrumentableClassLoader, WebappProperties {
 
     private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(WebappClassLoaderBase.class);
@@ -2785,4 +2787,37 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         super.addURL(url);
         hasExternalRepositories = true;
     }
+
+
+    @Override
+    public String getWebappName() {
+        return getContextName();
+    }
+
+
+    @Override
+    public String getHostName() {
+        if (resources != null) {
+            Container host = resources.getContext().getParent();
+            if (host != null) {
+                return host.getName();
+            }
+        }
+        return null;
+    }
+
+
+    @Override
+    public String getServiceName() {
+        if (resources != null) {
+            Container host = resources.getContext().getParent();
+            if (host != null) {
+                Container engine = host.getParent();
+                if (engine != null) {
+                    return engine.getName();
+                }
+            }
+        }
+        return null;
+    }
 }

==================================================
WebappProperties.java
index f4fa801cc5..2c933760a7 100644
--- a/java/org/apache/juli/ClassLoaderLogManager.java
+++ b/java/org/apache/juli/ClassLoaderLogManager.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.juli;
 
 import java.io.File;
@@ -618,8 +617,11 @@ public class ClassLoaderLogManager extends LogManager {
                     break;
                 }
                 String propName = str.substring(pos_start + 2, pos_end);
-                String replacement = propName.length() > 0 ? System
-                        .getProperty(propName) : null;
+
+                String replacement = replaceWebApplicationProperties(propName);
+                if (replacement == null) {
+                    replacement = propName.length() > 0 ? System.getProperty(propName) : null;
+                }
                 if (replacement != null) {
                     builder.append(replacement);
                 } else {
@@ -633,6 +635,26 @@ public class ClassLoaderLogManager extends LogManager {
         return result;
     }
 
+
+    private String replaceWebApplicationProperties(String propName) {
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        if (cl instanceof WebappProperties) {
+            WebappProperties wProps = (WebappProperties) cl;
+            if ("classloader.webappName".equals(propName)) {
+                return wProps.getWebappName();
+            } else if ("classloader.hostName".equals(propName)) {
+                return wProps.getHostName();
+            } else if ("classloader.serviceName".equals(propName)) {
+                return wProps.getServiceName();
+            } else {
+                return null;
+            }
+        } else {
+            return null;
+        }
+    }
+
+
     // ---------------------------------------------------- LogNode Inner Class
 
 

==================================================
