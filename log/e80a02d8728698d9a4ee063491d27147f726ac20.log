e80a02d8728698d9a4ee063491d27147f726ac20
==================================================
No longer need implementation specific UpgradeServletOutputStreams.
==================================================
Mark Emlyn
==================================================
Mon Nov 10 16:47:40 2014 +0000
==================================================
AbstractProcessor.java
No longer need implementation specific UpgradeServletOutputStreams.
Collapse the unnecessary class hierarchy.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637938 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprProcessor.java
index c512a1dee5..55a3b3dfae 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
@@ -43,11 +43,11 @@ public abstract class AbstractProcessor<S>
 
     private final HttpUpgradeHandler httpUpgradeHandler;
     private final UpgradeServletInputStream upgradeServletInputStream;
-    private final AbstractServletOutputStream<S> upgradeServletOutputStream;
+    private final UpgradeServletOutputStream upgradeServletOutputStream;
 
     protected AbstractProcessor (HttpUpgradeHandler httpUpgradeHandler,
             UpgradeServletInputStream upgradeServletInputStream,
-            AbstractServletOutputStream<S> upgradeServletOutputStream) {
+            UpgradeServletOutputStream upgradeServletOutputStream) {
         this.httpUpgradeHandler = httpUpgradeHandler;
         this.upgradeServletInputStream = upgradeServletInputStream;
         this.upgradeServletOutputStream = upgradeServletOutputStream;

==================================================
AprServletOutputStream.java
index 68e6e5a5e5..4938b8ce42 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -38,7 +38,7 @@ public class AprProcessor extends AbstractProcessor<Long> {
             HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
                 new UpgradeServletInputStream(wrapper),
-                new AprServletOutputStream(wrapper, asyncWriteBufferSize));
+                new UpgradeServletOutputStream(wrapper, asyncWriteBufferSize));
         ((AprSocketWrapper) wrapper).setLeftOverInput(leftOverInput);
         Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);
     }

==================================================
Nio2Processor.java
deleted file mode 100644
index bac33454e5..0000000000
--- a/java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.AprEndpoint.AprSocketWrapper;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-
-public class AprServletOutputStream extends AbstractServletOutputStream<Long> {
-
-    public AprServletOutputStream(SocketWrapperBase<Long> socketWrapper,
-            int asyncWriteBufferSize) {
-        super(socketWrapper, asyncWriteBufferSize);
-    }
-
-
-    @Override
-    protected int doWrite(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((AprSocketWrapper) socketWrapper).write(block, b, off, len);
-    }
-
-
-    @Override
-    protected void doFlush() throws IOException {
-        ((AprSocketWrapper) socketWrapper).flush();
-    }
-}

==================================================
Nio2ServletOutputStream.java
index 82b762ada8..e7ad12a1ab 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
@@ -37,7 +37,7 @@ public class Nio2Processor extends AbstractProcessor<Nio2Channel> {
             HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
                 new UpgradeServletInputStream(wrapper),
-                new Nio2ServletOutputStream(wrapper, asyncWriteBufferSize));
+                new UpgradeServletOutputStream(wrapper, asyncWriteBufferSize));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
         if (leftoverInput != null) {

==================================================
NioProcessor.java
deleted file mode 100644
index bd190c255a..0000000000
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletOutputStream.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.Nio2Channel;
-import org.apache.tomcat.util.net.Nio2Endpoint.Nio2SocketWrapper;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-
-public class Nio2ServletOutputStream extends AbstractServletOutputStream<Nio2Channel> {
-
-    public Nio2ServletOutputStream(SocketWrapperBase<Nio2Channel> socketWrapper0,
-            int asyncWriteBufferSize) {
-        super(socketWrapper0, asyncWriteBufferSize);
-    }
-
-    @Override
-    protected int doWrite(boolean block, byte[] b, int off, int len)
-            throws IOException {
-        return ((Nio2SocketWrapper) socketWrapper).write(block, b, off, len);
-    }
-
-    @Override
-    protected void doFlush() throws IOException {
-        ((Nio2SocketWrapper) socketWrapper).flush();
-    }
-}

==================================================
NioServletOutputStream.java
index d8a22634b7..3af425aa69 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -37,7 +37,7 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
             HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
                 new UpgradeServletInputStream(wrapper),
-                new NioServletOutputStream(wrapper, asyncWriteBufferSize));
+                new UpgradeServletOutputStream(wrapper, asyncWriteBufferSize));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
         if (leftoverInput != null) {

==================================================
UpgradeServletOutputStream.java
deleted file mode 100644
index 48b1409129..0000000000
--- a/java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.NioChannel;
-import org.apache.tomcat.util.net.NioEndpoint.NioSocketWrapper;
-import org.apache.tomcat.util.net.SocketWrapperBase;
-
-public class NioServletOutputStream extends AbstractServletOutputStream<NioChannel> {
-
-    public NioServletOutputStream(SocketWrapperBase<NioChannel> socketWrapper,
-            int asyncWriteBufferSize) {
-        super(socketWrapper, asyncWriteBufferSize);
-    }
-
-
-    @Override
-    protected int doWrite(boolean block, byte[] b, int off, int len)
-            throws IOException {
-        return ((NioSocketWrapper) socketWrapper).write(block, b, off, len);
-    }
-
-
-    @Override
-    protected void doFlush() throws IOException {
-        ((NioSocketWrapper) socketWrapper).flush();
-    }
-}

==================================================
AprEndpoint.java
similarity index 90%
rename from java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java
rename to java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java
index 1eaed65b3d..9d20b253ce 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java
@@ -26,12 +26,12 @@ import org.apache.tomcat.util.net.DispatchType;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractServletOutputStream<S> extends ServletOutputStream {
+public class UpgradeServletOutputStream extends ServletOutputStream {
 
     protected static final StringManager sm = StringManager.getManager(
-            AbstractServletOutputStream.class.getPackage().getName());
+            UpgradeServletOutputStream.class.getPackage().getName());
 
-    protected final SocketWrapperBase<S> socketWrapper;
+    protected final SocketWrapperBase<?> socketWrapper;
 
     // Used to ensure that isReady() and onWritePossible() have a consistent
     // view of buffer and fireListener when determining if the listener should
@@ -62,7 +62,7 @@ public abstract class AbstractServletOutputStream<S> extends ServletOutputStream
     private final int asyncWriteBufferSize;
 
 
-    public AbstractServletOutputStream(SocketWrapperBase<S> socketWrapper,
+    public UpgradeServletOutputStream(SocketWrapperBase<?> socketWrapper,
             int asyncWriteBufferSize) {
         this.socketWrapper = socketWrapper;
         this.asyncWriteBufferSize = asyncWriteBufferSize;
@@ -151,7 +151,7 @@ public abstract class AbstractServletOutputStream<S> extends ServletOutputStream
     private void writeInternal(byte[] b, int off, int len) throws IOException {
         if (listener == null) {
             // Simple case - blocking IO
-            doWrite(true, b, off, len);
+            socketWrapper.write(true, b, off, len);
         } else {
             // Non-blocking IO
             // If the non-blocking read does not complete, doWrite() will add
@@ -159,7 +159,7 @@ public abstract class AbstractServletOutputStream<S> extends ServletOutputStream
             // write event before this method has finished updating buffer. The
             // writeLock sync makes sure that buffer is updated before the next
             // write executes.
-            int written = doWrite(false, b, off, len);
+            int written = socketWrapper.write(false, b, off, len);
             if (written < len) {
                 if (b == buffer) {
                     // This is a partial write of the existing buffer. Just
@@ -239,16 +239,4 @@ public abstract class AbstractServletOutputStream<S> extends ServletOutputStream
             thread.setContextClassLoader(originalClassLoader);
         }
     }
-
-
-    /**
-     * Abstract method to be overridden by concrete implementations. The base
-     * class will ensure that there are no concurrent calls to this method for
-     * the same socket by ensuring that the writeLock is held when making any
-     * calls to this method.
-     */
-    protected abstract int doWrite(boolean block, byte[] b, int off, int len)
-            throws IOException;
-
-    protected abstract void doFlush() throws IOException;
 }

==================================================
Nio2Endpoint.java
index 878f26460f..ea022e9878 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2483,6 +2483,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
+        @Override
         public int write(boolean block, byte[] b, int off, int len) throws IOException {
 
             if (closed) {
@@ -2583,6 +2584,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
+        @Override
         public void flush() {
             // NO-OP
         }

==================================================
NioEndpoint.java
index 74aa40c856..f1a84be5a0 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -986,6 +986,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
+        @Override
         public int write(boolean block, byte[] b, int off, int len) throws IOException {
             int leftToWrite = len;
             int count = 0;
@@ -1060,6 +1061,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
+        @Override
         public void flush() throws IOException {
             try {
                 // Block until a possible non blocking write is done

==================================================
SocketWrapperBase.java
index 32fa8c85fc..f1fb79f2f5 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1517,8 +1517,8 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         }
 
 
-        public int write(boolean block, byte[] b, int off, int len)
-                throws IOException {
+        @Override
+        public int write(boolean block, byte[] b, int off, int len) throws IOException {
             int leftToWrite = len;
             int count = 0;
             int offset = off;
@@ -1582,6 +1582,7 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         }
 
 
+        @Override
         public void flush() throws IOException {
             NioEndpoint.NioSocketWrapper att =
                     (NioEndpoint.NioSocketWrapper) getSocket().getAttachment(false);

==================================================
