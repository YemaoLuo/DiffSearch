279ab2edceabed0a6529c8fe06dad224ad639c72
==================================================
Fix various cookie related issues in Authenticator tests now the RFC6265 cookie parser is used by default
==================================================
Mark Thomas
==================================================
Mon Sep 14 15:36:35 2015 +0000
==================================================
TestNonLoginAndBasicAuthenticator.java
Fix various cookie related issues in Authenticator tests now the RFC6265 cookie parser is used by default

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1702970 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestSSOnonLoginAndBasicAuthenticator.java
index 3dc4014345..8792d32329 100644
--- a/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
@@ -356,8 +356,8 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
         Map<String,List<String>> reqHeaders = new HashMap<>();
         Map<String,List<String>> respHeaders = new HashMap<>();
 
-        if (useCookie && (cookies != null)) {
-            reqHeaders.put(CLIENT_COOKIE_HEADER + ":", cookies);
+        if (useCookie) {
+            addCookies(reqHeaders);
         }
 
         ByteChunk bc = new ByteChunk();
@@ -379,8 +379,8 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
         Map<String,List<String>> reqHeaders = new HashMap<>();
         Map<String,List<String>> respHeaders = new HashMap<>();
 
-        if (useCookie && (cookies != null)) {
-            reqHeaders.put(CLIENT_COOKIE_HEADER + ":", cookies);
+        if (useCookie) {
+            addCookies(reqHeaders);
         }
         else {
             if (credentials != null) {
@@ -415,7 +415,7 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
             List<String> newCookies = respHeaders.get(SERVER_COOKIE_HEADER);
             if (newCookies != null) {
                 // harvest cookies whenever the server sends some new ones
-                cookies = newCookies;
+                saveCookies(respHeaders);
             }
         }
     }
@@ -568,4 +568,41 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
             return credentials;
         }
     }
+
+    /*
+     * extract and save the server cookies from the incoming response
+     */
+    protected void saveCookies(Map<String,List<String>> respHeaders) {
+        // we only save the Cookie values, not header prefix
+        List<String> cookieHeaders = respHeaders.get(SERVER_COOKIE_HEADER);
+        if (cookieHeaders == null) {
+            cookies = null;
+        } else {
+            cookies = new ArrayList<>(cookieHeaders.size());
+            for (String cookieHeader : cookieHeaders) {
+                cookies.add(cookieHeader.substring(0, cookieHeader.indexOf(';')));
+            }
+        }
+    }
+
+    /*
+     * add all saved cookies to the outgoing request
+     */
+    protected void addCookies(Map<String,List<String>> reqHeaders) {
+        if ((cookies != null) && (cookies.size() > 0)) {
+            StringBuilder cookieHeader = new StringBuilder();
+            boolean first = true;
+            for (String cookie : cookies) {
+                if (!first) {
+                    cookieHeader.append(';');
+                } else {
+                    first = false;
+                }
+                cookieHeader.append(cookie);
+            }
+            List<String> cookieHeaderList = new ArrayList<>(1);
+            cookieHeaderList.add(cookieHeader.toString());
+            reqHeaders.put(CLIENT_COOKIE_HEADER, cookieHeaderList);
+        }
+    }
 }
\ No newline at end of file

==================================================
TestSSOnonLoginAndDigestAuthenticator.java
index 4f2e0c08a3..84434bc256 100644
--- a/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
@@ -355,7 +355,7 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         Map<String,List<String>> respHeaders = new HashMap<>();
 
         if (useCookie && (cookies != null)) {
-            reqHeaders.put(CLIENT_COOKIE_HEADER + ":", cookies);
+            addCookies(reqHeaders);
         }
 
         ByteChunk bc = new ByteChunk();
@@ -379,7 +379,7 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         Map<String,List<String>> respHeaders = new HashMap<>();
 
         if (useCookie && (cookies != null)) {
-            reqHeaders.put(CLIENT_COOKIE_HEADER + ":", cookies);
+            addCookies(reqHeaders);
         }
         else {
             if (credentials != null) {
@@ -554,18 +554,36 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
      * extract and save the server cookies from the incoming response
      */
     protected void saveCookies(Map<String,List<String>> respHeaders) {
-
         // we only save the Cookie values, not header prefix
-        cookies = respHeaders.get(SERVER_COOKIE_HEADER);
+        List<String> cookieHeaders = respHeaders.get(SERVER_COOKIE_HEADER);
+        if (cookieHeaders == null) {
+            cookies = null;
+        } else {
+            cookies = new ArrayList<>(cookieHeaders.size());
+            for (String cookieHeader : cookieHeaders) {
+                cookies.add(cookieHeader.substring(0, cookieHeader.indexOf(';')));
+            }
+        }
     }
 
     /*
      * add all saved cookies to the outgoing request
      */
     protected void addCookies(Map<String,List<String>> reqHeaders) {
-
         if ((cookies != null) && (cookies.size() > 0)) {
-            reqHeaders.put(CLIENT_COOKIE_HEADER + ":", cookies);
+            StringBuilder cookieHeader = new StringBuilder();
+            boolean first = true;
+            for (String cookie : cookies) {
+                if (!first) {
+                    cookieHeader.append(';');
+                } else {
+                    first = false;
+                }
+                cookieHeader.append(cookie);
+            }
+            List<String> cookieHeaderList = new ArrayList<>(1);
+            cookieHeaderList.add(cookieHeader.toString());
+            reqHeaders.put(CLIENT_COOKIE_HEADER, cookieHeaderList);
         }
     }
 

==================================================
