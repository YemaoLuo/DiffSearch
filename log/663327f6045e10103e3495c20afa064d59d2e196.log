663327f6045e10103e3495c20afa064d59d2e196
==================================================
fix unit tests
==================================================
Filip Hanik
==================================================
Tue Apr 10 16:28:31 2012 +0000
==================================================
BorrowWaitTest.java
fix unit tests


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1311841 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DefaultProperties.java
index a03f9528c9..c189fb4654 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/BorrowWaitTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/BorrowWaitTest.java
@@ -27,21 +27,21 @@ public class BorrowWaitTest extends DefaultTestCase {
     }
 
     public void testWaitTime() throws Exception {
+
         int wait = 10000;
         this.init();
         this.datasource.setMaxActive(1);
         this.datasource.setMaxWait(wait);
         Connection con = datasource.getConnection();
+        long start = System.currentTimeMillis();
         try {
             Connection con2 = datasource.getConnection();
             assertFalse("This should not happen, connection should be unavailable.",true);
             con2.close();
         }catch (SQLException x) {
-            long delta = System.currentTimeMillis();
-            boolean inrange = Math.abs(wait-delta) < 1000;
-            assertTrue(
-                    "Connection should have been acquired within +/- 1 second.",
-                    inrange);
+            long delta = System.currentTimeMillis() - start;
+            boolean inrange = Math.abs(wait-delta) <= 1000;
+            assertTrue("Connection should have been acquired within +/- 1 second, but was "+(wait-delta)+" ms.",inrange);
         }
         con.close();
     }

==================================================
TestInterceptorShortName.java
index 26c7340765..21a3080976 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultProperties.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultProperties.java
@@ -29,7 +29,7 @@ public class DefaultProperties extends PoolProperties {
     private static final long serialVersionUID = 1L;
 
     public DefaultProperties() {
-        dbProperties = new Properties();
+        setDbProperties(new Properties());
 
         //mysql
         //url = System.getProperty("url","jdbc:mysql://localhost:3306/mysql?autoReconnect=true");
@@ -39,38 +39,38 @@ public class DefaultProperties extends PoolProperties {
         //url = System.getProperty("url","jdbc:derby:derbyDB;create=true");
         //driverClassName = System.getProperty("driverClassName","org.apache.derby.jdbc.EmbeddedDriver");
 
-        url = System.getProperty("url","jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE");
-        driverClassName = System.getProperty("driverClassName","org.h2.Driver");
+        setUrl(System.getProperty("url","jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE"));
+        setDriverClassName(System.getProperty("driverClassName","org.h2.Driver"));
         System.setProperty("h2.serverCachedObjects", "10000");
 
-        password = System.getProperty("password","password");
-        username = System.getProperty("username","root");
+        setPassword(System.getProperty("password","password"));
+        setUsername(System.getProperty("username","root"));
 
-        validationQuery = System.getProperty("validationQuery","SELECT 1");
-        defaultAutoCommit = Boolean.TRUE;
-        defaultReadOnly = Boolean.FALSE;
-        defaultTransactionIsolation = DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION;
-        connectionProperties = null;
-        defaultCatalog = null;
-        initialSize = 10;
-        maxActive = 100;
-        maxIdle = initialSize;
-        minIdle = initialSize;
-        maxWait = 10000;
+        setValidationQuery(System.getProperty("validationQuery","SELECT 1"));
+        setDefaultAutoCommit(Boolean.TRUE);
+        setDefaultReadOnly(Boolean.FALSE);
+        setDefaultTransactionIsolation(DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION);
+        setConnectionProperties(null);
+        setDefaultCatalog(null);
+        setInitialSize(10);
+        setMaxActive(100);
+        setMaxIdle(getInitialSize());
+        setMinIdle(getInitialSize());
+        setMaxWait(10000);
 
-        testOnBorrow = true;
-        testOnReturn = false;
-        testWhileIdle = true;
-        timeBetweenEvictionRunsMillis = 5000;
-        numTestsPerEvictionRun = 0;
-        minEvictableIdleTimeMillis = 1000;
-        removeAbandoned = true;
-        removeAbandonedTimeout = 5000;
-        logAbandoned = true;
-        validationInterval = 0; //always validate
-        initSQL = null;
-        testOnConnect = false;
-        dbProperties.setProperty("user",username);
-        dbProperties.setProperty("password",password);
+        setTestOnBorrow(true);
+        setTestOnReturn(false);
+        setTestWhileIdle(true);
+        setTimeBetweenEvictionRunsMillis(5000);
+        setNumTestsPerEvictionRun(0);
+        setMinEvictableIdleTimeMillis(1000);
+        setRemoveAbandoned(true);
+        setRemoveAbandonedTimeout(5000);
+        setLogAbandoned(true);
+        setValidationInterval(0); //always validate
+        setInitSQL(null);
+        setTestOnConnect(false);
+        getDbProperties().setProperty("user",getUsername());
+        getDbProperties().setProperty("password",getPassword());
     }
 }

==================================================
