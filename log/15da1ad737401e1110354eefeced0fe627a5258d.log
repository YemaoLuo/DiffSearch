15da1ad737401e1110354eefeced0fe627a5258d
==================================================
Revert my previously not so clever implementation.
==================================================
Filip Hanik
==================================================
Wed Jun 10 19:40:31 2009 +0000
==================================================
AprEndpoint.java
Revert my previously not so clever implementation.
If there is an executor being used, then one shall expect that the executor is reporting the numbers of threads itself, and it should no longer be the responsibility of the connector



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@783468 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JIoEndpoint.java
index 3191ae10e1..bfb5c5c14d 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -17,12 +17,10 @@
 
 package org.apache.tomcat.util.net;
 
-import java.lang.reflect.Method;
 import java.net.InetAddress;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ThreadPoolExecutor;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -38,7 +36,6 @@ import org.apache.tomcat.jni.SSLContext;
 import org.apache.tomcat.jni.SSLSocket;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.jni.Status;
-import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -548,22 +545,7 @@ public class AprEndpoint {
      */
     public int getCurrentThreadCount() {
         if (executor!=null) {
-            if (executor instanceof ThreadPoolExecutor) {
-                return ((ThreadPoolExecutor)executor).getPoolSize();
-            } else {
-                try {
-                    Method m = IntrospectionUtils.findMethod(executor.getClass(), "getPoolSize", new Class[] {}); 
-                    if (m!=null) {
-                        return ((Integer)m.invoke(executor, null)).intValue();
-                    } else {
-                        return -1;
-                    }
-                }catch (Exception ignore) {
-                    if (log.isDebugEnabled()) 
-                        log.debug("Unable to invoke getPoolSize",ignore);
-                    return -2;
-                }
-            }
+            return -1;
         } else {
             return curThreads;
         }
@@ -576,22 +558,7 @@ public class AprEndpoint {
      */
     public int getCurrentThreadsBusy() {
         if (executor!=null) {
-            if (executor instanceof ThreadPoolExecutor) {
-                return ((ThreadPoolExecutor)executor).getActiveCount();
-            } else {
-                try {
-                    Method m = IntrospectionUtils.findMethod(executor.getClass(), "getActiveCount", new Class[] {}); 
-                    if (m!=null) {
-                        return ((Integer)m.invoke(executor, null)).intValue();
-                    } else {
-                        return -1;
-                    }
-                }catch (Exception ignore) {
-                    if (log.isDebugEnabled()) 
-                        log.debug("Unable to invoke getActiveCount",ignore);
-                    return -2;
-                }
-            }
+            return -1;
         } else {
             return workers!=null?curThreads - workers.size():0;
         }

==================================================
NioEndpoint.java
index 349a172e90..e8b5ef4470 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -18,13 +18,11 @@
 package org.apache.tomcat.util.net;
 
 import java.io.IOException;
-import java.lang.reflect.Method;
 import java.net.BindException;
 import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ThreadPoolExecutor;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -306,22 +304,7 @@ public class JIoEndpoint {
      */
     public int getCurrentThreadCount() {
         if (executor!=null) {
-            if (executor instanceof ThreadPoolExecutor) {
-                return ((ThreadPoolExecutor)executor).getPoolSize();
-            } else {
-                try {
-                    Method m = IntrospectionUtils.findMethod(executor.getClass(), "getPoolSize", new Class[] {}); 
-                    if (m!=null) {
-                        return ((Integer)m.invoke(executor, null)).intValue();
-                    } else {
-                        return -1;
-                    }
-                }catch (Exception ignore) {
-                    if (log.isDebugEnabled()) 
-                        log.debug("Unable to invoke getPoolSize",ignore);
-                    return -2;
-                }
-            }
+            return -1;
         } else {
             return curThreads;
         }
@@ -334,22 +317,7 @@ public class JIoEndpoint {
      */
     public int getCurrentThreadsBusy() {
         if (executor!=null) {
-            if (executor instanceof ThreadPoolExecutor) {
-                return ((ThreadPoolExecutor)executor).getActiveCount();
-            } else {
-                try {
-                    Method m = IntrospectionUtils.findMethod(executor.getClass(), "getActiveCount", new Class[] {}); 
-                    if (m!=null) {
-                        return ((Integer)m.invoke(executor, null)).intValue();
-                    } else {
-                        return -1;
-                    }
-                }catch (Exception ignore) {
-                    if (log.isDebugEnabled()) 
-                        log.debug("Unable to invoke getActiveCount",ignore);
-                    return -2;
-                }
-            }
+            return -1;
         } else {
             return workers!=null?curThreads - workers.size():0;
         }

==================================================
