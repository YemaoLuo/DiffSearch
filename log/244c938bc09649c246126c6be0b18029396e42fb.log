244c938bc09649c246126c6be0b18029396e42fb
==================================================
Improve handling of flow control errors.
==================================================
Mark Thomas
==================================================
Tue Aug 18 20:50:01 2020 +0100
==================================================
Stream.java
Improve handling of flow control errors.



==================================================
WindowAllocationManager.java
index 11e662b53c..00220dc270 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -729,6 +729,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
                             se.getError()));
                 }
                 state.sendReset();
+                cancelAllocationRequests();
                 handler.sendStreamReset(se);
             } catch (IOException ioe) {
                 ConnectionException ce = new ConnectionException(

==================================================
TestHttp2Section_5_1.java
index f286430df6..973ce59133 100644
--- a/java/org/apache/coyote/http2/WindowAllocationManager.java
+++ b/java/org/apache/coyote/http2/WindowAllocationManager.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http2;
 
 import org.apache.coyote.ActionCode;
+import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
@@ -184,24 +185,27 @@ class WindowAllocationManager {
                 // to stream.notify(). Additional notify() calls may trigger
                 // unexpected timeouts.
                 waitingFor = NONE;
-                if (stream.getCoyoteResponse().getWriteListener() == null) {
-                    // Blocking, so use notify to release StreamOutputBuffer
-                    if (log.isDebugEnabled()) {
-                        log.debug(sm.getString("windowAllocationManager.notified",
-                                stream.getConnectionId(), stream.getIdentifier()));
+                Response response = stream.getCoyoteResponse();
+                if (response != null) {
+                    if (response.getWriteListener() == null) {
+                        // Blocking, so use notify to release StreamOutputBuffer
+                        if (log.isDebugEnabled()) {
+                            log.debug(sm.getString("windowAllocationManager.notified",
+                                    stream.getConnectionId(), stream.getIdentifier()));
+                        }
+                        stream.notify();
+                    } else {
+                        // Non-blocking so dispatch
+                        if (log.isDebugEnabled()) {
+                            log.debug(sm.getString("windowAllocationManager.dispatched",
+                                    stream.getConnectionId(), stream.getIdentifier()));
+                        }
+                        response.action(ActionCode.DISPATCH_WRITE, null);
+                        // Need to explicitly execute dispatches on the StreamProcessor
+                        // as this thread is being processed by an UpgradeProcessor
+                        // which won't see this dispatch
+                        response.action(ActionCode.DISPATCH_EXECUTE, null);
                     }
-                    stream.notify();
-                } else {
-                    // Non-blocking so dispatch
-                    if (log.isDebugEnabled()) {
-                        log.debug(sm.getString("windowAllocationManager.dispatched",
-                                stream.getConnectionId(), stream.getIdentifier()));
-                    }
-                    stream.getCoyoteResponse().action(ActionCode.DISPATCH_WRITE, null);
-                    // Need to explicitly execute dispatches on the StreamProcessor
-                    // as this thread is being processed by an UpgradeProcessor
-                    // which won't see this dispatch
-                    stream.getCoyoteResponse().action(ActionCode.DISPATCH_EXECUTE, null);
                 }
             }
         }

==================================================
