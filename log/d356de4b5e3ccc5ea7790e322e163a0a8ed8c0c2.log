d356de4b5e3ccc5ea7790e322e163a0a8ed8c0c2
==================================================
Arrange APR logic.
==================================================
Jean-Frederic Clere
==================================================
Thu May 20 15:42:17 2010 +0000
==================================================
AjpAprProtocol.java
Arrange APR logic.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@946674 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 84c68a8cf4..b2862795e0 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -416,6 +416,11 @@ public class AjpAprProtocol
             return SocketState.CLOSED;
         }
 
+        // FIXME: Support for this could be added in AJP as well
+        public SocketState asyncDispatch(long socket, SocketStatus status) {
+            return SocketState.CLOSED;
+        }
+        
         protected AjpAprProcessor createProcessor() {
             AjpAprProcessor processor = new AjpAprProcessor(proto.packetSize, proto.endpoint);
             processor.setAdapter(proto.adapter);

==================================================
Http11AprProtocol.java
index 54839a59ff..14a7c936b9 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -926,7 +926,12 @@ public class Http11AprProcessor implements ActionHook {
     }
 
     /* Copied from the AjpProcessor.java */
-    public SocketState asyncDispatch(SocketStatus status) throws IOException {
+    public SocketState asyncDispatch(long socket, SocketStatus status) throws IOException {
+
+        // Setting up the socket
+        this.socket = socket;
+        inputBuffer.setSocket(socket);
+        outputBuffer.setSocket(socket);
 
         RequestInfo rp = request.getRequestProcessor();
         try {
@@ -1267,11 +1272,7 @@ public class Http11AprProcessor implements ActionHook {
             RequestInfo rp = request.getRequestProcessor();
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) { //async handling
                 dispatch.set(true);
-                try {
-                    asyncDispatch(SocketStatus.STOP); // What to do with return code ?
-                } catch (IOException ex) {
-                    error = true;
-                }
+                endpoint.getHandler().asyncDispatch(this.socket, SocketStatus.STOP);
             } else {
                 dispatch.set(false);
             }

==================================================
AprEndpoint.java
index f55fe057e3..ae94a0e799 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -609,6 +609,47 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             return SocketState.CLOSED;
         }
 
+        public SocketState asyncDispatch(long socket, SocketStatus status) {
+            Http11AprProcessor result = connections.get(Long.valueOf(socket));
+            
+            SocketState state = SocketState.CLOSED; 
+            if (result != null) {
+                // Call the appropriate event
+                try {
+                    state = result.asyncDispatch(socket, status);
+                } catch (java.net.SocketException e) {
+                    // SocketExceptions are normal
+                    Http11AprProtocol.log.debug
+                        (sm.getString
+                            ("http11protocol.proto.socketexception.debug"), e);
+                } catch (java.io.IOException e) {
+                    // IOExceptions are normal
+                    Http11AprProtocol.log.debug
+                        (sm.getString
+                            ("http11protocol.proto.ioexception.debug"), e);
+                }
+                // Future developers: if you discover any other
+                // rare-but-nonfatal exceptions, catch them here, and log as
+                // above.
+                catch (Throwable e) {
+                    // any other exception or error is odd. Here we log it
+                    // with "ERROR" level, so it will show up even on
+                    // less-than-verbose logs.
+                    Http11AprProtocol.log.error
+                        (sm.getString("http11protocol.proto.error"), e);
+                } finally {
+                    if (state != SocketState.LONG) {
+                        connections.remove(Long.valueOf(socket));
+                        recycledProcessors.offer(result);
+                        if (state == SocketState.OPEN) {
+                            proto.endpoint.getPoller().add(socket);
+                        }
+                    }
+                }
+            }
+            return state;
+        }
+
         protected Http11AprProcessor createProcessor() {
             Http11AprProcessor processor =
                 new Http11AprProcessor(proto.maxHttpHeaderSize, proto.endpoint);

==================================================
