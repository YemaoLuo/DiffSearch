b29394010866e9c0d614347d83e90a70b2ef5500
==================================================
Whitespace removal from remaining /java/org/apache/catalina
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:16:40 2011 +0000
==================================================
AccessLog.java
Whitespace removal from remaining /java/org/apache/catalina

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187801 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Authenticator.java
index 9e9a4182d3..b862269e7f 100644
--- a/java/org/apache/catalina/AccessLog.java
+++ b/java/org/apache/catalina/AccessLog.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -60,26 +60,26 @@ public interface AccessLog {
      */
     public static final String SERVER_PORT_ATTRIBUTE =
         "org.apache.catalina.AccessLog.ServerPort";
-    
+
 
     /**
      * Add the request/response to the access log using the specified processing
      * time.
-     * 
+     *
      * @param request   Request (associated with the response) to log
      * @param response  Response (associated with the request) to log
      * @param time      Time taken to process the request/response in
-     *                  milliseconds (use 0 if not known) 
+     *                  milliseconds (use 0 if not known)
      */
     public void log(Request request, Response response, long time);
-    
+
     /**
      * Should this valve set request attributes for IP address, Hostname,
      * protocol and port used for the request? This are typically used in
      * conjunction with the {@link org.apache.catalina.valves.AccessLogValve}
      * which will otherwise log the original values.
      * Default is <code>true</code>.
-     * 
+     *
      * The attributes set are:
      * <ul>
      * <li>org.apache.catalina.RemoteAddr</li>
@@ -87,13 +87,13 @@ public interface AccessLog {
      * <li>org.apache.catalina.Protocol</li>
      * <li>org.apache.catalina.ServerPost</li>
      * </ul>
-     * 
+     *
      * @param requestAttributesEnabled  <code>true</code> causes the attributes
      *                                  to be set, <code>false</code> disables
-     *                                  the setting of the attributes. 
+     *                                  the setting of the attributes.
      */
     public void setRequestAttributesEnabled(boolean requestAttributesEnabled);
-    
+
     /**
      * @see #setRequestAttributesEnabled(boolean)
      * @return <code>true</code> if the attributes will be logged, otherwise

==================================================
CatalinaFactory.java
index 46e9861b00..0e79820fb2 100644
--- a/java/org/apache/catalina/Authenticator.java
+++ b/java/org/apache/catalina/Authenticator.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -36,7 +36,7 @@ import org.apache.catalina.deploy.LoginConfig;
  */
 
 public interface Authenticator {
-    
+
     /**
      * Authenticate the user making this request, based on the specified
      * login configuration.  Return <code>true</code> if any specified
@@ -52,7 +52,7 @@ public interface Authenticator {
      */
     public boolean authenticate(Request request, HttpServletResponse response,
             LoginConfig config) throws IOException;
-    
+
     public void login(String userName, String password, Request request)
             throws ServletException;
 

==================================================
Cluster.java
index 412c1b49e2..f7fd27bd83 100644
--- a/java/org/apache/catalina/CatalinaFactory.java
+++ b/java/org/apache/catalina/CatalinaFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,21 +25,21 @@ import org.apache.catalina.core.StandardPipeline;
  * other components.  The current implementation is as simple as possible. If
  * there is demand it can be extended to support alternative factories and/or
  * alternative defaults.
- * 
+ *
  * TODO: Create the other standard components via this factory
  */
 public class CatalinaFactory {
-    
+
     private static CatalinaFactory factory = new CatalinaFactory();
-    
+
     public static CatalinaFactory getFactory() {
         return factory;
     }
-    
+
     private CatalinaFactory() {
         // Hide the default constructor
     }
-    
+
     public String getDefaultPipelineClassName() {
         return StandardPipeline.class.getName();
     }

==================================================
Contained.java
index f89fa8ed7c..2af803b2ef 100644
--- a/java/org/apache/catalina/Cluster.java
+++ b/java/org/apache/catalina/Cluster.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -94,15 +94,15 @@ public interface Cluster {
      * associated
      */
     public Manager createManager(String name);
-    
+
     /**
-     * Register a manager with the cluster. If the cluster is not responsible 
-     * for creating a manager, then the container will at least notify the 
+     * Register a manager with the cluster. If the cluster is not responsible
+     * for creating a manager, then the container will at least notify the
      * cluster that this manager is participating in the cluster.
      * @param manager Manager
      */
     public void registerManager(Manager manager);
-    
+
     /**
      * Removes a manager from the cluster
      * @param manager Manager
@@ -110,8 +110,8 @@ public interface Cluster {
     public void removeManager(Manager manager);
 
     // --------------------------------------------------------- Cluster Wide Deployments
-    
-    
+
+
     /**
      * Execute a periodic task, such as reloading, etc. This method will be
      * invoked inside the classloading context of this container. Unexpected

==================================================
Container.java
index 8123150fe2..752df90ea2 100644
--- a/java/org/apache/catalina/Contained.java
+++ b/java/org/apache/catalina/Contained.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ContainerEvent.java
index 1322e0a019..2a679e9612 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -178,11 +178,11 @@ public interface Container extends Lifecycle {
      */
     public Object getMappingObject();
 
-    
+
     /**
      * Return the JMX name associated with this container.
      */
-    public ObjectName getObjectName();    
+    public ObjectName getObjectName();
 
     /**
      * Return the Pipeline object that manages the Valves associated with
@@ -210,10 +210,10 @@ public interface Container extends Lifecycle {
     /**
      * Get the delay between the invocation of the backgroundProcess method on
      * this container and its children. Child containers will not be invoked
-     * if their delay value is not negative (which would mean they are using 
-     * their own thread). Setting this to a positive value will cause 
-     * a thread to be spawn. After waiting the specified amount of time, 
-     * the thread will invoke the executePeriodic method on this container 
+     * if their delay value is not negative (which would mean they are using
+     * their own thread). Setting this to a positive value will cause
+     * a thread to be spawn. After waiting the specified amount of time,
+     * the thread will invoke the executePeriodic method on this container
      * and all its children.
      */
     public int getBackgroundProcessorDelay();
@@ -222,8 +222,8 @@ public interface Container extends Lifecycle {
     /**
      * Set the delay between the invocation of the execute method on this
      * container and its children.
-     * 
-     * @param delay The delay in seconds between the invocation of 
+     *
+     * @param delay The delay in seconds between the invocation of
      *              backgroundProcess methods
      */
     public void setBackgroundProcessorDelay(int delay);
@@ -444,8 +444,8 @@ public interface Container extends Lifecycle {
      * @param data Event data
      */
     public void fireContainerEvent(String type, Object data);
-    
-    
+
+
     /**
      * Log a request/response that was destined for this container but has been
      * handled earlier in the processing chain so that the request/response
@@ -453,14 +453,14 @@ public interface Container extends Lifecycle {
      * @param request       Request (associated with the response) to log
      * @param response      Response (associated with the request) to log
      * @param time          Time taken to process the request/response in
-     *                      milliseconds (use 0 if not known) 
+     *                      milliseconds (use 0 if not known)
      * @param   useDefault  Flag that indicates that the request/response should
      *                      be logged in the engine's default access log
      */
     public void logAccess(Request request, Response response, long time,
             boolean useDefault);
-    
-    
+
+
     /**
      * Identify the AccessLog to use to log a request/response that was destined
      * for this container but was handled earlier in the processing chain so

==================================================
ContainerListener.java
index 974130e83b..93cc3ca827 100644
--- a/java/org/apache/catalina/ContainerEvent.java
+++ b/java/org/apache/catalina/ContainerEvent.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ContainerServlet.java
index edce3a3fef..b34c3d484e 100644
--- a/java/org/apache/catalina/ContainerListener.java
+++ b/java/org/apache/catalina/ContainerListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Context.java
index e0f3906ec1..3a0dd2f8c1 100644
--- a/java/org/apache/catalina/ContainerServlet.java
+++ b/java/org/apache/catalina/ContainerServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
DistributedManager.java
index a448b07694..015b8b3060 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -76,7 +76,7 @@ public interface Context extends Container {
      * Container event for adding a welcome file.
      */
     public static final String ADD_WELCOME_FILE_EVENT = "addWelcomeFile";
-    
+
     /**
      * Container event for removing a wrapper.
      */
@@ -222,29 +222,29 @@ public interface Context extends Container {
      */
     public void setCookies(boolean cookies);
 
-    
+
     /**
      * Gets the name to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @return  The value of the default session cookie name or null if not
      *          specified
      */
     public String getSessionCookieName();
-    
-    
+
+
     /**
      * Sets the name to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @param sessionCookieName   The name to use
      */
     public void setSessionCookieName(String sessionCookieName);
 
-    
+
     /**
      * Gets the value of the use HttpOnly cookies for session cookies flag.
-     * 
+     *
      * @return <code>true</code> if the HttpOnly flag should be set on session
      *         cookies
      */
@@ -253,93 +253,93 @@ public interface Context extends Container {
 
     /**
      * Sets the use HttpOnly cookies for session cookies flag.
-     * 
+     *
      * @param useHttpOnly   Set to <code>true</code> to use HttpOnly cookies
      *                          for session cookies
      */
     public void setUseHttpOnly(boolean useHttpOnly);
-    
-    
+
+
     /**
      * Gets the domain to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @return  The value of the default session cookie domain or null if not
      *          specified
      */
     public String getSessionCookieDomain();
-    
-    
+
+
     /**
      * Sets the domain to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @param sessionCookieDomain   The domain to use
      */
     public void setSessionCookieDomain(String sessionCookieDomain);
 
-    
+
     /**
      * Gets the path to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @return  The value of the default session cookie path or null if not
      *          specified
      */
     public String getSessionCookiePath();
-    
-    
+
+
     /**
      * Sets the path to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @param sessionCookiePath   The path to use
      */
     public void setSessionCookiePath(String sessionCookiePath);
 
-    
+
     /**
      * Is a / added to the end of the session cookie path to ensure browsers,
      * particularly IE, don't send a session cookie for context /foo with
      * requests intended for context /foobar.
-     * 
+     *
      * @return <code>true</code> if the slash is added, otherwise
-     *         <code>false</code>  
+     *         <code>false</code>
      */
     public boolean getSessionCookiePathUsesTrailingSlash();
-    
-    
+
+
     /**
      * Configures if a / is added to the end of the session cookie path to
      * ensure browsers, particularly IE, don't send a session cookie for context
      * /foo with requests intended for context /foobar.
-     * 
+     *
      * @param sessionCookiePathUsesTrailingSlash   <code>true</code> if the
      *                                             slash is should be added,
-     *                                             otherwise <code>false</code>  
+     *                                             otherwise <code>false</code>
      */
     public void setSessionCookiePathUsesTrailingSlash(
             boolean sessionCookiePathUsesTrailingSlash);
 
-    
+
     /**
      * Return the "allow crossing servlet contexts" flag.
      */
     public boolean getCrossContext();
 
-    
+
     /**
      * Return the alternate Deployment Descriptor name.
      */
     public String getAltDDName();
-    
-    
+
+
     /**
      * Set an alternate Deployment Descriptor name.
      */
     public void setAltDDName(String altDDName) ;
-    
-    
+
+
     /**
      * Set the "allow crossing servlet contexts" flag.
      *
@@ -402,17 +402,17 @@ public interface Context extends Container {
      * Return the boolean on the annotations parsing.
      */
     public boolean getIgnoreAnnotations();
-    
-    
+
+
     /**
-     * Set the boolean on the annotations parsing for this web 
+     * Set the boolean on the annotations parsing for this web
      * application.
-     * 
+     *
      * @param ignoreAnnotations The boolean on the annotations parsing
      */
     public void setIgnoreAnnotations(boolean ignoreAnnotations);
-    
-    
+
+
     /**
      * Return the login configuration descriptor for this web application.
      */
@@ -626,11 +626,11 @@ public interface Context extends Container {
      * Get the server.xml <context> attribute's xmlValidation.
      * @return true if validation is enabled.
      */
-     
+
 
     /**
      * Set the validation feature of the XML parser used when
-     * parsing tlds files. 
+     * parsing tlds files.
      * @param tldValidation true to enable xml instance validation
      */
     public void setTldValidation(boolean tldValidation);
@@ -677,18 +677,18 @@ public interface Context extends Container {
      * <code>null</code> if none is used.
      */
     public Authenticator getAuthenticator();
-    
+
     /**
      * Set whether or not the effective web.xml for this context should be
      * logged on context start.
      */
     public void setLogEffectiveWebXml(boolean logEffectiveWebXml);
-    
+
     /**
      * Should the effective web.xml for this context be logged on context start?
      */
     public boolean getLogEffectiveWebXml();
-    
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -831,11 +831,11 @@ public interface Context extends Container {
     /**
      * Add a resource which will be watched for reloading by the host auto
      * deployer. Note: this will not be used in embedded mode.
-     * 
+     *
      * @param name Path to the resource, relative to docBase
      */
     public void addWatchedResource(String name);
-    
+
 
     /**
      * Add a new welcome file to the set recognized by this Context.
@@ -1039,11 +1039,11 @@ public interface Context extends Container {
 
 
     /**
-     * Return the set of watched resources for this Context. If none are 
+     * Return the set of watched resources for this Context. If none are
      * defined, a zero length array will be returned.
      */
     public String[] findWatchedResources();
-    
+
 
     /**
      * Return <code>true</code> if the specified welcome file is defined
@@ -1053,7 +1053,7 @@ public interface Context extends Container {
      */
     public boolean findWelcomeFile(String name);
 
-    
+
     /**
      * Return the set of welcome files defined for this Context.  If none are
      * defined, a zero-length array is returned.
@@ -1207,11 +1207,11 @@ public interface Context extends Container {
     /**
      * Remove the specified watched resource name from the list associated
      * with this Context.
-     * 
+     *
      * @param name Name of the watched resource to be removed
      */
     public void removeWatchedResource(String name);
-    
+
 
     /**
      * Remove the specified welcome file name from the list recognized
@@ -1247,66 +1247,66 @@ public interface Context extends Container {
      * @param path The path to the desired resource
      */
     public String getRealPath(String path);
-    
-    
+
+
     /**
      * Return the effective major version of the Servlet spec used by this
      * context.
      */
     public int getEffectiveMajorVersion();
-    
-    
+
+
     /**
      * Set the effective major version of the Servlet spec used by this
      * context.
      */
     public void setEffectiveMajorVersion(int major);
-    
-    
+
+
     /**
      * Return the effective minor version of the Servlet spec used by this
      * context.
      */
     public int getEffectiveMinorVersion();
-    
-    
+
+
     /**
      * Set the effective minor version of the Servlet spec used by this
      * context.
      */
     public void setEffectiveMinorVersion(int minor);
-    
-    
+
+
     /**
      * Obtain the JSP configuration for this context.
      */
     public JspConfigDescriptor getJspConfigDescriptor();
 
-    
+
     /**
      * Add a URL for a JAR that contains static resources in a
      * META-INF/resources directory that should be included in the static
      * resources for this context.
      */
     public void addResourceJarUrl(URL url);
-    
-    
+
+
     /**
      * Add a ServletContainerInitializer instance to this web application.
-     * 
+     *
      * @param sci       The instance to add
      * @param classes   The classes in which the initializer expressed an
      *                  interest
      */
     public void addServletContainerInitializer(
             ServletContainerInitializer sci, Set<Class<?>> classes);
-    
+
     /**
      * Is this Context paused whilst it is reloaded?
      */
     public boolean getPaused();
 
-    
+
     /**
      * Is this context using version 2.2 of the Servlet spec?
      */
@@ -1322,36 +1322,36 @@ public interface Context extends Container {
      */
     Set<String> addServletSecurity(ApplicationServletRegistration registration,
             ServletSecurityElement servletSecurityElement);
-    
+
     /**
      * Sets the (comma separated) list of Servlets that expect a resource to be
      * present. Used to ensure that welcome files associated with Servlets that
-     * expect a resource to be present are not mapped when there is no resource. 
+     * expect a resource to be present are not mapped when there is no resource.
      */
     public void setResourceOnlyServlets(String resourceOnlyServlets);
-    
+
     /**
      * Obtains the list of Servlets that expect a resource to be present.
-     * 
+     *
      * @return  A comma separated list of Servlet names as used in web.xml
      */
     public String getResourceOnlyServlets();
 
     /**
      * Checks the named Servlet to see if it expects a resource to be present.
-     * 
+     *
      * @param servletName   Name of the Servlet (as per web.xml) to check
      * @return              <code>true</code> if the Servlet expects a resource,
      *                      otherwise <code>false</code>
      */
     public boolean isResourceOnlyServlet(String servletName);
-    
+
     /**
      * Return the base name to use for WARs, directories or context.xml files
      * for this context.
      */
     public String getBaseName();
-     
+
     /**
      * Set the version of this web application - used to differentiate
      * different versions of the same web application when using parallel
@@ -1365,7 +1365,7 @@ public interface Context extends Container {
      * deployment. If not specified, defaults to the empty string.
      */
     public String getWebappVersion();
-    
+
     /**
      * Configure whether or not requests listeners will be fired on forwards for
      * this Context.
@@ -1377,7 +1377,7 @@ public interface Context extends Container {
      * this Context.
      */
     public boolean getFireRequestListenersOnForwards();
-    
+
     /**
      * Configures if a user presents authentication credentials, whether the
      * context will process them when the request is for a non-protected
@@ -1397,7 +1397,7 @@ public interface Context extends Container {
      * sent to the client.
      */
     public void setSendRedirectBody(boolean enable);
-    
+
     /**
      * Dtermines if the context is configured to included a response body as
      * part of a redirect response.

==================================================
Engine.java
index 2d042c697c..bd9e76193b 100644
--- a/java/org/apache/catalina/DistributedManager.java
+++ b/java/org/apache/catalina/DistributedManager.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -31,14 +31,14 @@ public interface DistributedManager {
 
     /**
      * Returns the total session count for primary, backup and proxy.
-     * 
+     *
      * @return  The total session count across the cluster.
      */
     public int getActiveSessionsFull();
 
     /**
      * Returns the list of all sessions IDS (primary, backup and proxy).
-     * 
+     *
      * @return  The complete set of sessions IDs across the cluster.
      */
     public Set<String> getSessionIdsFull();

==================================================
Executor.java
index 1dbc0e1543..b300dfca7e 100644
--- a/java/org/apache/catalina/Engine.java
+++ b/java/org/apache/catalina/Engine.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Globals.java
index 6ce8755cc9..0f7d49ac03 100644
--- a/java/org/apache/catalina/Executor.java
+++ b/java/org/apache/catalina/Executor.java
@@ -21,13 +21,13 @@ import java.util.concurrent.TimeUnit;
 
 public interface Executor extends java.util.concurrent.Executor, Lifecycle {
     public String getName();
-    
+
     /**
      * Executes the given command at some time in the future.  The command
      * may execute in a new thread, in a pooled thread, or in the calling
      * thread, at the discretion of the <tt>Executor</tt> implementation.
      * If no threads are available, it will be added to the work queue.
-     * If the work queue is full, the system will wait for the specified 
+     * If the work queue is full, the system will wait for the specified
      * time until it throws a RejectedExecutionException
      *
      * @param command the runnable task

==================================================
Group.java
index 403fb875ef..bd0079917c 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,9 +30,9 @@ public final class Globals {
 
     /**
      * The servlet context attribute under which we store the alternate
-     * deployment descriptor for this web application 
+     * deployment descriptor for this web application
      */
-    public static final String ALT_DD_ATTR = 
+    public static final String ALT_DD_ATTR =
         "org.apache.catalina.deploy.alt_dd";
 
 
@@ -57,14 +57,14 @@ public final class Globals {
     /**
      * Request dispatcher state.
      */
-    public static final String DISPATCHER_TYPE_ATTR = 
+    public static final String DISPATCHER_TYPE_ATTR =
         "org.apache.catalina.core.DISPATCHER_TYPE";
 
 
     /**
      * Request dispatcher path.
      */
-    public static final String DISPATCHER_REQUEST_PATH_ATTR = 
+    public static final String DISPATCHER_REQUEST_PATH_ATTR =
         "org.apache.catalina.core.DISPATCHER_REQUEST_PATH";
 
 
@@ -150,13 +150,13 @@ public final class Globals {
     public static final String SUBJECT_ATTR =
         "javax.security.auth.subject";
 
-    
+
     public static final String GSS_CREDENTIAL_ATTR =
         "org.apache.catalina.realm.GSS_CREDENTIAL";
 
 
     /**
-     * The master flag which controls strict servlet specification 
+     * The master flag which controls strict servlet specification
      * compliance.
      */
     public static final boolean STRICT_SERVLET_COMPLIANCE =
@@ -168,14 +168,14 @@ public final class Globals {
      */
     public static final boolean IS_SECURITY_ENABLED =
         (System.getSecurityManager() != null);
-    
+
     /**
-     * 
+     *
      */
-    public static final String ASYNC_SUPPORTED_ATTR = 
+    public static final String ASYNC_SUPPORTED_ATTR =
         "org.apache.catalina.ASYNC_SUPPORTED";
 
-    
+
     /**
      * Default domain for MBeans if none can be determined
      */

==================================================
Host.java
index 298333bfb1..40409bf8fe 100644
--- a/java/org/apache/catalina/Group.java
+++ b/java/org/apache/catalina/Group.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
InstanceEvent.java
index 72f5dc2e42..3d496af95c 100644
--- a/java/org/apache/catalina/Host.java
+++ b/java/org/apache/catalina/Host.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -74,7 +74,7 @@ public interface Host extends Container {
      * ${catalina.base}/conf/&lt;engine name&gt;/&lt;host name&gt; directory
      */
     public String getXmlBase();
-    
+
     /**
      * Set the Xml root for this Host.  This can be an absolute
      * pathname, a relative pathname, or a URL.
@@ -109,8 +109,8 @@ public interface Host extends Container {
 
 
     /**
-     * Return the value of the auto deploy flag.  If true, it indicates that 
-     * this host's child webapps should be discovered and automatically 
+     * Return the value of the auto deploy flag.  If true, it indicates that
+     * this host's child webapps should be discovered and automatically
      * deployed dynamically.
      */
     public boolean getAutoDeploy();
@@ -118,7 +118,7 @@ public interface Host extends Container {
 
     /**
      * Set the auto deploy flag value for this host.
-     * 
+     *
      * @param autoDeploy The new auto deploy flag
      */
     public void setAutoDeploy(boolean autoDeploy);
@@ -130,7 +130,7 @@ public interface Host extends Container {
      */
     public String getConfigClass();
 
-    
+
     /**
      * Set the Java class name of the context configuration class
      * for new web applications.
@@ -139,10 +139,10 @@ public interface Host extends Container {
      */
     public void setConfigClass(String configClass);
 
-        
+
     /**
-     * Return the value of the deploy on startup flag.  If true, it indicates 
-     * that this host's child webapps should be discovered and automatically 
+     * Return the value of the deploy on startup flag.  If true, it indicates
+     * that this host's child webapps should be discovered and automatically
      * deployed.
      */
     public boolean getDeployOnStartup();
@@ -150,7 +150,7 @@ public interface Host extends Container {
 
     /**
      * Set the deploy on startup flag value for this host.
-     * 
+     *
      * @param deployOnStartup The new deploy on startup flag
      */
     public void setDeployOnStartup(boolean deployOnStartup);

==================================================
InstanceListener.java
index 939c29ddac..1346cfd8cb 100644
--- a/java/org/apache/catalina/InstanceEvent.java
+++ b/java/org/apache/catalina/InstanceEvent.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -316,7 +316,7 @@ public final class InstanceEvent extends EventObject {
 
     /**
      * The exception that was thrown during the processing being reported
-     * by this event (AFTER_INIT_EVENT, AFTER_SERVICE_EVENT, 
+     * by this event (AFTER_INIT_EVENT, AFTER_SERVICE_EVENT,
      * AFTER_DESTROY_EVENT, AFTER_DISPATCH_EVENT, and AFTER_FILTER_EVENT only).
      */
     private Throwable exception = null;

==================================================
Lifecycle.java
index d7b85f1d71..b3055e7a1b 100644
--- a/java/org/apache/catalina/InstanceListener.java
+++ b/java/org/apache/catalina/InstanceListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
LifecycleEvent.java
index eb2551fc9a..12d5e63d85 100644
--- a/java/org/apache/catalina/Lifecycle.java
+++ b/java/org/apache/catalina/Lifecycle.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -62,38 +62,38 @@ package org.apache.catalina;
  * |                                                               |
  * |                            stop()                             |
  * --->------------------------------>------------------------------
- *   
+ *
  * Any state can transition to FAILED.
- * 
+ *
  * Calling start() while a component is in states STARTING_PREP, STARTING or
  * STARTED has no effect.
- * 
+ *
  * Calling start() while a component is in state NEW will cause init() to be
  * called immediately after the start() method is entered.
- * 
+ *
  * Calling stop() while a component is in states STOPPING_PREP, STOPPING or
  * STOPPED has no effect.
- * 
+ *
  * Calling stop() while a component is in state NEW transitions the component
  * to STOPPED. This is typically encountered when a component fails to start and
  * does not start all its sub-components. When the component is stopped, it will
  * try to stop all sub-components - even those it didn't start.
- * 
+ *
  * MUST_STOP is used to indicate that the {@link #stop()} should be called on
  * the component as soon as {@link #start()} exits. It is typically used when a
  * component has failed to start.
- * 
+ *
  * MUST_DESTROY is used to indicate that the {@link #stop()} should be called on
  * the component as soon as {@link #stop()} exits. It is typically used when a
  * component is not designed to be restarted.
- * 
+ *
  * Attempting any other transition will throw {@link LifecycleException}.
- * 
+ *
  * </pre>
  * The {@link LifecycleEvent}s fired during state changes are defined in the
  * methods that trigger the changed. No {@link LifecycleEvent}s are fired if the
  * attempted transition is not valid.
- * 
+ *
  * TODO: Not all components may transition from STOPPED to STARTING_PREP. These
  *       components should use MUST_DESTROY to signal this.
  *
@@ -180,7 +180,7 @@ public interface Lifecycle {
      */
     public static final String CONFIGURE_START_EVENT = "configure_start";
 
-    
+
     /**
      * The LifecycleEvent type for the "configure_stop" event. Used by those
      * components that use a separate component to perform configuration and
@@ -189,7 +189,7 @@ public interface Lifecycle {
      */
     public static final String CONFIGURE_STOP_EVENT = "configure_stop";
 
-    
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -202,7 +202,7 @@ public interface Lifecycle {
 
 
     /**
-     * Get the life cycle listeners associated with this life cycle. If this 
+     * Get the life cycle listeners associated with this life cycle. If this
      * component has no listeners registered, a zero-length array is returned.
      */
     public LifecycleListener[] findLifecycleListeners();
@@ -224,7 +224,7 @@ public interface Lifecycle {
      *   <li>INIT_EVENT: On the successful completion of component
      *                   initialization.</li>
      * </ol>
-     * 
+     *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
@@ -245,7 +245,7 @@ public interface Lifecycle {
      *                    any child components. It is at this point that the
      *                    state transitions to {@link LifecycleState#STARTING}
      *                    and that the public methods other than property
-     *                    getters/setters and life cycle methods may be 
+     *                    getters/setters and life cycle methods may be
      *                    used.</li>
      *   <li>AFTER_START_EVENT: At the end of the method, immediately before it
      *                          returns. It is at this point that the state
@@ -280,13 +280,13 @@ public interface Lifecycle {
      *                         transitions to {@link LifecycleState#STOPPED}.
      *                         </li>
      * </ol>
-     * 
+     *
      * Note that if transitioning from {@link LifecycleState#FAILED} then the
      * three events above will be fired but the component will transition
      * directly from {@link LifecycleState#FAILED} to
      * {@link LifecycleState#STOPPING}, bypassing
      * {@link LifecycleState#STOPPING_PREP}
-     * 
+     *
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
@@ -299,7 +299,7 @@ public interface Lifecycle {
      *   <li>DESTROY_EVENT: On the successful completion of component
      *                      destruction.</li>
      * </ol>
-     * 
+     *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
@@ -308,12 +308,12 @@ public interface Lifecycle {
 
     /**
      * Obtain the current state of the source component.
-     * 
+     *
      * @return The current state of the source component.
      */
     public LifecycleState getState();
-    
-    
+
+
     /**
      * Obtain a textual representation of the current component state. Useful
      * for JMX.

==================================================
LifecycleException.java
index 8c4b7b9fce..b78da768a1 100644
--- a/java/org/apache/catalina/LifecycleEvent.java
+++ b/java/org/apache/catalina/LifecycleEvent.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
LifecycleListener.java
index 54aa3f083d..fcb26b0a34 100644
--- a/java/org/apache/catalina/LifecycleException.java
+++ b/java/org/apache/catalina/LifecycleException.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
LifecycleState.java
index 4f75f049b0..8e1000ef06 100644
--- a/java/org/apache/catalina/LifecycleListener.java
+++ b/java/org/apache/catalina/LifecycleListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Loader.java
index 46c80fc866..dc5a7d6f59 100644
--- a/java/org/apache/catalina/LifecycleState.java
+++ b/java/org/apache/catalina/LifecycleState.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -36,15 +36,15 @@ public enum LifecycleState {
     FAILED(false, null),
     MUST_STOP(true, null),
     MUST_DESTROY(false, null);
-    
+
     private final boolean available;
     private final String lifecycleEvent;
-    
+
     private LifecycleState(boolean available, String lifecycleEvent) {
         this.available = available;
         this.lifecycleEvent = lifecycleEvent;
     }
-    
+
     /**
      * May the public methods other than property getters/setters and lifecycle
      * methods be called for a component in this state? It returns
@@ -59,9 +59,9 @@ public enum LifecycleState {
     public boolean isAvailable() {
         return available;
     }
-    
+
     /**
-     * 
+     *
      */
     public String getLifecycleEvent() {
         return lifecycleEvent;

==================================================
Manager.java
index 26354876fd..beb22ebb29 100644
--- a/java/org/apache/catalina/Loader.java
+++ b/java/org/apache/catalina/Loader.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Pipeline.java
index 5a3cd2058c..bec11ed518 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -114,7 +114,7 @@ public interface Manager {
     public void setSessionIdLength(int idLength);
 
 
-    /** 
+    /**
      * Returns the total number of sessions created by this manager.
      *
      * @return Total number of sessions created by this manager.
@@ -122,7 +122,7 @@ public interface Manager {
     public long getSessionCounter();
 
 
-    /** 
+    /**
      * Sets the total number of sessions created by this manager.
      *
      * @param sessionCounter Total number of sessions created by this manager.
@@ -150,7 +150,7 @@ public interface Manager {
     public void setMaxActive(int maxActive);
 
 
-    /** 
+    /**
      * Gets the number of currently active sessions.
      *
      * @return Number of currently active sessions
@@ -206,26 +206,26 @@ public interface Manager {
     /**
      * Gets the average time (in seconds) that expired sessions had been
      * alive. This may be based on sample data.
-     * 
+     *
      * @return Average time (in seconds) that expired sessions had been
      * alive.
      */
     public int getSessionAverageAliveTime();
 
-    
+
     /**
      * Gets the current rate of session creation (in session per minute). This
      * may be based on sample data.
-     * 
+     *
      * @return  The current rate (in sessions per minute) of session creation
      */
     public int getSessionCreateRate();
-    
+
 
     /**
      * Gets the current rate of session expiration (in session per minute). This
      * may be based on sample data
-     * 
+     *
      * @return  The current rate (in sessions per minute) of session expiration
      */
     public int getSessionExpireRate();
@@ -251,17 +251,17 @@ public interface Manager {
     /**
      * Change the session ID of the current session to a new randomly generated
      * session ID.
-     * 
+     *
      * @param session   The session to change the session ID for
      */
     public void changeSessionId(Session session);
-    
-    
+
+
     /**
      * Get a session from the recycled ones or create a new empty one.
      * The PersistentManager manager does not need to create session data
      * because it reads it from the Store.
-     */                                                                         
+     */
     public Session createEmptySession();
 
 
@@ -269,9 +269,9 @@ public interface Manager {
      * Construct and return a new session object, based on the default
      * settings specified by this Manager's properties.  The session
      * id specified will be used as the session id.
-     * If a new session cannot be created for any reason, return 
+     * If a new session cannot be created for any reason, return
      * <code>null</code>.
-     * 
+     *
      * @param sessionId The session id which should be used to create the
      *  new session; if <code>null</code>, the session
      *  id will be assigned by this method, and available via the getId()
@@ -348,7 +348,7 @@ public interface Manager {
      * @exception IOException if an input/output error occurs
      */
     public void unload() throws IOException;
-    
+
      /**
       * This method will be invoked by the context/container on a periodic
       * basis and allows the manager to implement

==================================================
Realm.java
index 6d46045d6d..008a49008b 100644
--- a/java/org/apache/catalina/Pipeline.java
+++ b/java/org/apache/catalina/Pipeline.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -83,7 +83,7 @@ public interface Pipeline {
      * <p>Implementation note: Implementations are expected to trigger the
      * {@link Container#ADD_VALVE_EVENT} for the associated container if this
      * call is successful.</p>
-     * 
+     *
      * @param valve Valve to be added
      *
      * @exception IllegalArgumentException if this Container refused to
@@ -124,7 +124,7 @@ public interface Pipeline {
      * Valve for this Pipeline (if any).
      */
     public Valve getFirst();
-    
+
     /**
      * Returns true if all the valves in this pipeline support async, false otherwise
      * @return true if all the valves in this pipeline support async, false otherwise

==================================================
Role.java
index 13ac47169e..b7fab91e81 100644
--- a/java/org/apache/catalina/Realm.java
+++ b/java/org/apache/catalina/Realm.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -59,7 +59,6 @@ public interface Realm {
 
 
     // --------------------------------------------------------- Public Methods
-    
     /**
      * Add a property change listener to this component.
      *
@@ -107,8 +106,8 @@ public interface Realm {
      *                   credentials in the returned Principal?
      */
     public Principal authenticate(GSSContext gssContext, boolean storeCreds);
-    
-    
+
+
     /**
      * Return the Principal associated with the specified chain of X509
      * client certificates.  If there is none, return <code>null</code>.
@@ -117,8 +116,8 @@ public interface Realm {
      *  the array being the certificate of the client itself.
      */
     public Principal authenticate(X509Certificate certs[]);
-    
-    
+
+
     /**
      * Execute a periodic task, such as reloading, etc. This method will be
      * invoked inside the classloading context of this container. Unexpected
@@ -135,8 +134,8 @@ public interface Realm {
      */
     public SecurityConstraint [] findSecurityConstraints(Request request,
                                                      Context context);
-    
-    
+
+
     /**
      * Perform access control based on the specified authorization constraint.
      * Return <code>true</code> if this constraint is satisfied and processing
@@ -154,8 +153,8 @@ public interface Realm {
                                          SecurityConstraint [] constraint,
                                          Context context)
         throws IOException;
-    
-    
+
+
     /**
      * Return <code>true</code> if the specified Principal has the specified
      * security role, within the context of this Realm; otherwise return
@@ -183,7 +182,7 @@ public interface Realm {
                                          Response response,
                                          SecurityConstraint []constraint)
         throws IOException;
-    
+
     /**
      * Remove a property change listener from this component.
      *

==================================================
Server.java
index fa7f216dbd..03e96f7fb4 100644
--- a/java/org/apache/catalina/Role.java
+++ b/java/org/apache/catalina/Role.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Service.java
index 41f0e1951e..5114ab3451 100644
--- a/java/org/apache/catalina/Server.java
+++ b/java/org/apache/catalina/Server.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -58,7 +58,7 @@ public interface Server extends Lifecycle {
 
     /**
      * Set the global naming resources.
-     * 
+     *
      * @param globalNamingResources The new global naming resources
      */
     public void setGlobalNamingResources
@@ -112,7 +112,7 @@ public interface Server extends Lifecycle {
      */
     public void setShutdown(String shutdown);
 
-    
+
     /**
      * Return the parent class loader for this component. If not set, return
      * {@link #getCatalina()} {@link Catalina#getParentClassLoader()}. If
@@ -128,17 +128,17 @@ public interface Server extends Lifecycle {
      */
     public void setParentClassLoader(ClassLoader parent);
 
-    
+
     /**
      * Return the outer Catalina startup/shutdown component if present.
      */
     public Catalina getCatalina();
-    
+
     /**
      * Set the outer Catalina startup/shutdown component if present.
      */
     public void setCatalina(Catalina catalina);
-    
+
     // --------------------------------------------------------- Public Methods
 
 

==================================================
Session.java
index 4df271861d..da9295ea6e 100644
--- a/java/org/apache/catalina/Service.java
+++ b/java/org/apache/catalina/Service.java
@@ -134,7 +134,7 @@ public interface Service extends Lifecycle {
      * @return Executor
      */
     public Executor getExecutor(String name);
-    
+
     /**
      * Removes an executor from the service
      * @param ex Executor

==================================================
SessionEvent.java
index 94d3ab57b7..c289c52e6a 100644
--- a/java/org/apache/catalina/Session.java
+++ b/java/org/apache/catalina/Session.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -132,7 +132,7 @@ public interface Session {
      *
      * @param id        The new session identifier
      * @param notify    Should any associated listeners be notified that a new
-     *                      session has been created? 
+     *                      session has been created?
      */
     public void setId(String id, boolean notify);
 

==================================================
SessionListener.java
index 3d718ff0c9..9a37f8904d 100644
--- a/java/org/apache/catalina/SessionEvent.java
+++ b/java/org/apache/catalina/SessionEvent.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Store.java
index 33e11f9082..f3070e402c 100644
--- a/java/org/apache/catalina/SessionListener.java
+++ b/java/org/apache/catalina/SessionListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
User.java
index 94d22877ae..218066479c 100644
--- a/java/org/apache/catalina/Store.java
+++ b/java/org/apache/catalina/Store.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
UserDatabase.java
index 191b42d8dd..aa34ce12b1 100644
--- a/java/org/apache/catalina/User.java
+++ b/java/org/apache/catalina/User.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Wrapper.java
index 0805a6cb1e..63875ad0da 100644
--- a/java/org/apache/catalina/UserDatabase.java
+++ b/java/org/apache/catalina/UserDatabase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
CometEvent.java
index 2580def02d..7d23f3723f 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -54,7 +54,7 @@ public interface Wrapper extends Container {
      * Container event for adding a wrapper.
      */
     public static final String ADD_MAPPING_EVENT = "addMapping";
-    
+
     /**
      * Container event for removing a wrapper.
      */
@@ -146,12 +146,12 @@ public interface Wrapper extends Container {
      */
     public boolean isUnavailable();
 
-    
+
     /**
      * Return the associated servlet instance.
      */
     public Servlet getServlet();
-    
+
 
     /**
      * Set the associated servlet instance
@@ -180,7 +180,7 @@ public interface Wrapper extends Container {
 
     /**
      * Add a mapping associated with the Wrapper.
-     * 
+     *
      * @param mapping The new wrapper mapping
      */
     public void addMapping(String mapping);
@@ -341,31 +341,31 @@ public interface Wrapper extends Container {
      * returned.
      */
     public MultipartConfigElement getMultipartConfigElement();
-    
-    
+
+
     /**
      * Set the multi-part configuration for the associated servlet. To clear the
      * multi-part configuration specify <code>null</code> as the new value.
      */
     public void setMultipartConfigElement(
             MultipartConfigElement multipartConfig);
-    
+
     /**
      * Does the associated Servlet support async processing? Defaults to
      * <code>true</code>
      */
     public boolean isAsyncSupported();
-    
+
     /**
      * Set the async support for the associated servlet.
      */
     public void setAsyncSupported(boolean asyncSupport);
-    
+
     /**
      * Is the associated Servlet enabled? Defaults to <code>true</code>.
      */
     public boolean isEnabled();
-    
+
     /**
      * Sets the enabled attribute for the associated servlet.
      */
@@ -375,18 +375,18 @@ public interface Wrapper extends Container {
      * Set the flag that indicates
      * {@link javax.servlet.annotation.ServletSecurity} annotations must be
      * scanned when the Servlet is first used.
-     * 
+     *
      * @param b The new value of the flag
      */
     public void setServletSecurityAnnotationScanRequired(boolean b);
-    
+
     /**
      * Scan for (if necessary) and process (if found) the
      * {@link javax.servlet.annotation.ServletSecurity} annotations for the
      * Servlet associated with this wrapper.
      */
     public void servletSecurityAnnotationScan() throws ServletException;
-    
+
     /**
      * Is the Servlet overridable by a ServletContainerInitializer?
      */

==================================================
CometFilter.java
index 3ec1556c91..3f734ca2df 100644
--- a/java/org/apache/catalina/comet/CometEvent.java
+++ b/java/org/apache/catalina/comet/CometEvent.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,39 +26,39 @@ import javax.servlet.http.HttpServletResponse;
 
 /**
  * The CometEvent interface.
- * 
+ *
  * @author Filip Hanik
  * @author Remy Maucherat
  */
 public interface CometEvent {
 
     /**
-     * Enumeration describing the major events that the container can invoke 
+     * Enumeration describing the major events that the container can invoke
      * the CometProcessors event() method with.<br>
-     * BEGIN - will be called at the beginning 
-     *  of the processing of the connection. It can be used to initialize any relevant 
-     *  fields using the request and response objects. Between the end of the processing 
+     * BEGIN - will be called at the beginning
+     *  of the processing of the connection. It can be used to initialize any relevant
+     *  fields using the request and response objects. Between the end of the processing
      *  of this event, and the beginning of the processing of the end or error events,
      *  it is possible to use the response object to write data on the open connection.
-     *  Note that the response object and dependent OutputStream and Writer are still 
-     *  not synchronized, so when they are accessed by multiple threads, 
-     *  synchronization is mandatory. After processing the initial event, the request 
+     *  Note that the response object and dependent OutputStream and Writer are still
+     *  not synchronized, so when they are accessed by multiple threads,
+     *  synchronization is mandatory. After processing the initial event, the request
      *  is considered to be committed.<br>
      * READ - This indicates that input data is available, and that one read can be made
      *  without blocking. The available and ready methods of the InputStream or
      *  Reader may be used to determine if there is a risk of blocking: the servlet
-     *  should read while data is reported available. When encountering a read error, 
-     *  the servlet should report it by propagating the exception properly. Throwing 
-     *  an exception will cause the error event to be invoked, and the connection 
-     *  will be closed. 
+     *  should read while data is reported available. When encountering a read error,
+     *  the servlet should report it by propagating the exception properly. Throwing
+     *  an exception will cause the error event to be invoked, and the connection
+     *  will be closed.
      *  Alternately, it is also possible to catch any exception, perform clean up
      *  on any data structure the servlet may be using, and using the close method
-     *  of the event. It is not allowed to attempt reading data from the request 
+     *  of the event. It is not allowed to attempt reading data from the request
      *  object outside of the execution of this method.<br>
      * END - End may be called to end the processing of the request. Fields that have
      *  been initialized in the begin method should be reset. After this event has
      *  been processed, the request and response objects, as well as all their dependent
-     *  objects will be recycled and used to process other requests. End will also be 
+     *  objects will be recycled and used to process other requests. End will also be
      *  called when data is available and the end of file is reached on the request input
      *  (this usually indicates the client has pipelined a request).<br>
      * ERROR - Error will be called by the container in the case where an IO exception
@@ -68,8 +68,8 @@ public interface CometEvent {
      *  objects will be recycled and used to process other requests.
      */
     public enum EventType {BEGIN, READ, END, ERROR}
-    
-    
+
+
     /**
      * Event details.<br>
      * TIMEOUT - the connection timed out (sub type of ERROR); note that this ERROR type is not fatal, and
@@ -81,60 +81,60 @@ public interface CometEvent {
      * SESSION_END - the servlet ended the session (sub type of END)
      */
     public enum EventSubType { TIMEOUT, CLIENT_DISCONNECT, IOEXCEPTION, WEBAPP_RELOAD, SERVER_SHUTDOWN, SESSION_END }
-    
-    
+
+
     /**
      * Returns the HttpServletRequest.
-     * 
+     *
      * @return HttpServletRequest
      */
     public HttpServletRequest getHttpServletRequest();
-    
+
     /**
      * Returns the HttpServletResponse.
-     * 
+     *
      * @return HttpServletResponse
      */
     public HttpServletResponse getHttpServletResponse();
-    
+
     /**
      * Returns the event type.
-     * 
+     *
      * @return EventType
      */
     public EventType getEventType();
-    
+
     /**
      * Returns the sub type of this event.
-     * 
+     *
      * @return EventSubType
      */
     public EventSubType getEventSubType();
-    
+
     /**
-     * Ends the Comet session. This signals to the container that 
+     * Ends the Comet session. This signals to the container that
      * the container wants to end the comet session. This will send back to the
      * client a notice that the server has no more data to send as part of this
      * request. The servlet should perform any needed cleanup as if it had received
-     * an END or ERROR event. 
-     * 
+     * an END or ERROR event.
+     *
      * @throws IOException if an IO exception occurs
      */
     public void close() throws IOException;
-    
+
     /**
-     * Sets the timeout for this Comet connection. Please NOTE, that the implementation 
+     * Sets the timeout for this Comet connection. Please NOTE, that the implementation
      * of a per connection timeout is OPTIONAL and MAY NOT be implemented.<br/>
      * This method sets the timeout in milliseconds of idle time on the connection.
      * The timeout is reset every time data is received from the connection or data is flushed
-     * using <code>response.flushBuffer()</code>. If a timeout occurs, the 
-     * <code>error(HttpServletRequest, HttpServletResponse)</code> method is invoked. The 
+     * using <code>response.flushBuffer()</code>. If a timeout occurs, the
+     * <code>error(HttpServletRequest, HttpServletResponse)</code> method is invoked. The
      * web application SHOULD NOT attempt to reuse the request and response objects after a timeout
      * as the <code>error(HttpServletRequest, HttpServletResponse)</code> method indicates.<br/>
      * This method should not be called asynchronously, as that will have no effect.
-     * 
+     *
      * @param timeout The timeout in milliseconds for this connection, must be a positive value, larger than 0
-     * @throws IOException An IOException may be thrown to indicate an IO error, 
+     * @throws IOException An IOException may be thrown to indicate an IO error,
      *         or that the EOF has been reached on the connection
      * @throws ServletException An exception has occurred, as specified by the root
      *         cause

==================================================
CometFilterChain.java
index 2b69bc4753..f5bcfa6f4b 100644
--- a/java/org/apache/catalina/comet/CometFilter.java
+++ b/java/org/apache/catalina/comet/CometFilter.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,10 +24,10 @@ import javax.servlet.Filter;
 import javax.servlet.ServletException;
 
 /**
- * A Comet filter, similar to regular filters, performs filtering tasks on either 
+ * A Comet filter, similar to regular filters, performs filtering tasks on either
  * the request to a resource (a Comet servlet), or on the response from a resource, or both.
  * <br><br>
- * Filters perform filtering in the <code>doFilterEvent</code> method. Every Filter has access to 
+ * Filters perform filtering in the <code>doFilterEvent</code> method. Every Filter has access to
  * a FilterConfig object from which it can obtain its initialization parameters, a
  * reference to the ServletContext which it can use, for example, to load resources
  * needed for filtering tasks.
@@ -45,13 +45,13 @@ import javax.servlet.ServletException;
  * 8) XSL/T filters <br>
  * 9) Mime-type chain Filter <br>
  * <br>
- * 
+ *
  * @author Remy Maucherat
  * @author Filip Hanik
  */
 public interface CometFilter extends Filter {
 
-    
+
     /**
      * The <code>doFilterEvent</code> method of the CometFilter is called by the container
      * each time a request/response pair is passed through the chain due
@@ -66,17 +66,17 @@ public interface CometFilter extends Filter {
      * 3. Optionally wrap the response object contained in the event with a custom implementation to
      * filter content or headers for output filtering and pass a CometEvent instance containing
      * the wrapped request to the next filter<br>
-     * 4. a) <strong>Either</strong> invoke the next entity in the chain using the CometFilterChain object (<code>chain.doFilterEvent()</code>), <br>   
+     * 4. a) <strong>Either</strong> invoke the next entity in the chain using the CometFilterChain object (<code>chain.doFilterEvent()</code>), <br>
      * 4. b) <strong>or</strong> not pass on the request/response pair to the next entity in the filter chain to block the event processing<br>
      * 5. Directly set fields on the response after invocation of the next entity in the filter chain.
-     * 
+     *
      * @param event the event that is being processed. Another event may be passed along the chain.
-     * @param chain 
+     * @param chain
      * @throws IOException
      * @throws ServletException
      */
     public void doFilterEvent(CometEvent event, CometFilterChain chain)
         throws IOException, ServletException;
-    
+
 
 }

==================================================
CometProcessor.java
index b4ca50e68c..2b27d7b037 100644
--- a/java/org/apache/catalina/comet/CometFilterChain.java
+++ b/java/org/apache/catalina/comet/CometFilterChain.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,13 +27,13 @@ import javax.servlet.ServletException;
  * giving a view into the invocation chain of a filtered event for a resource. Filters
  * use the CometFilterChain to invoke the next filter in the chain, or if the calling filter
  * is the last filter in the chain, to invoke the resource at the end of the chain.
- * 
+ *
  * @author Remy Maucherat
  * @author Filip Hanik
  */
 public interface CometFilterChain {
 
-    
+
     /**
      * Causes the next filter in the chain to be invoked, or if the calling filter is the last filter
      * in the chain, causes the resource at the end of the chain to be invoked.
@@ -41,6 +41,6 @@ public interface CometFilterChain {
      * @param event the event to pass along the chain.
      */
     public void doFilterEvent(CometEvent event) throws IOException, ServletException;
-    
+
 
 }

==================================================
Constants.java
index bd1da68e91..c90128fd51 100644
--- a/java/org/apache/catalina/connector/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/connector/mbeans-descriptors.xml
@@ -34,12 +34,12 @@
     <attribute   name="acceptCount"
           description="The accept count for this Connector"
                  type="int"/>
-    
+
     <!-- Common -->
     <attribute   name="address"
           description="The IP address on which to bind"
                  type="java.lang.String"/>
-                 
+
     <attribute   name="allowTrace"
           description="Allow disabling TRACE method"
                  type="boolean"/>
@@ -48,7 +48,7 @@
           description="Fully qualified class name of the managed object"
                  type="java.lang.String"
             writeable="false"/>
-    
+
     <!-- Common -->
     <attribute   name="connectionLinger"
           description="Linger value on the incoming connection"
@@ -58,7 +58,7 @@
     <attribute   name="connectionTimeout"
           description="Timeout value on the incoming connection"
                  type="int"/>
-                 
+
     <attribute   name="emptySessionPath"
           description="The 'empty session path' flag for this Connector"
                  type="boolean"/>
@@ -84,10 +84,10 @@
     <attribute   name="maxPostSize"
           description="Maximum size in bytes of a POST which will be handled by the servlet API provided features"
                  type="int"/>
-                 
+
     <attribute   name="maxSavePostSize"
           description="Maximum size of a POST which will be saved by the container during authentication"
-                 type="int"/>                
+                 type="int"/>
 
     <!-- Common -->
     <attribute   name="maxThreads"
@@ -102,15 +102,15 @@
     <attribute   name="packetSize"
           description="The ajp packet size."
                  type="int"/>
-                 
+
     <attribute   name="port"
           description="The port number on which we listen for ajp13 requests"
                 type="int"/>
-    
-    <!-- Common -->            
+
+    <!-- Common -->
     <attribute   name="processorCache"
           description="The processor cache size."
-                 type="int"/>    
+                 type="int"/>
 
     <attribute   name="protocol"
           description="Coyote protocol handler in use"
@@ -139,17 +139,17 @@
 
     <attribute   name="secret"
           description="Authentication secret (I guess ... not in Javadocs)"
-            readable = "false" 
+            readable = "false"
                  type="java.lang.String"/>
 
     <attribute   name="secure"
           description="Is this a secure (SSL) Connector?"
                  type="boolean"/>
-                 
+
     <attribute   name="sslProtocols"
           description="Comma-separated list of SSL protocol variants to be enabled"
                  type="java.lang.String"/>
-                 
+
     <attribute   name="stateName"
           description="The name of the LifecycleState that this component is currently in"
                  type="java.lang.String"
@@ -159,12 +159,12 @@
     <attribute   name="tcpNoDelay"
           description="Should we use TCP no delay?"
                  type="boolean"/>
-    
+
     <!-- Common -->
     <attribute    name="threadPriority"
            description="The thread priority for processors"
                   type="int"/>
-                  
+
     <attribute   name="URIEncoding"
           description="Character encoding used to decode the URI"
                  type="java.lang.String"/>
@@ -172,7 +172,7 @@
     <attribute   name="useBodyEncodingForURI"
           description="Should the body encoding be used for URI query parameters"
                  type="boolean"/>
-                 
+
     <attribute   name="useIPVHosts"
           description="Should IP-based virtual hosting be used? "
                  type="boolean"/>

==================================================
SecurityClassLoad.java
index ac42683186..e5be570c6c 100644
--- a/java/org/apache/catalina/security/Constants.java
+++ b/java/org/apache/catalina/security/Constants.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
SecurityConfig.java
index be52a48b8e..f25e0f3d28 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -36,7 +36,7 @@ public final class SecurityClassLoad {
         if( System.getSecurityManager() == null ){
             return;
         }
-        
+
         loadCorePackage(loader);
         loadCoyotePackage(loader);
         loadLoaderPackage(loader);
@@ -44,11 +44,11 @@ public final class SecurityClassLoad {
         loadSessionPackage(loader);
         loadUtilPackage(loader);
         loadJavaxPackage(loader);
-        loadConnectorPackage(loader);        
+        loadConnectorPackage(loader);
         loadTomcatPackage(loader);
     }
-    
-    
+
+
     private static final void loadCorePackage(ClassLoader loader)
         throws Exception {
         final String basePackage = "org.apache.catalina.core.";
@@ -95,8 +95,8 @@ public final class SecurityClassLoad {
             (basePackage +
              "ApplicationHttpRequest$AttributeNamesEnumerator");
     }
-    
-    
+
+
     private static final void loadLoaderPackage(ClassLoader loader)
         throws Exception {
         final String basePackage = "org.apache.catalina.loader.";
@@ -104,8 +104,8 @@ public final class SecurityClassLoad {
             (basePackage +
              "WebappClassLoader$PrivilegedFindResourceByName");
     }
-    
-    
+
+
     private static final void loadRealmPackage(ClassLoader loader)
             throws Exception {
         final String basePackage = "org.apache.catalina.realm.";
@@ -126,16 +126,16 @@ public final class SecurityClassLoad {
         loader.loadClass
             (basePackage + "StandardManager$PrivilegedDoUnload");
     }
-    
-    
+
+
     private static final void loadUtilPackage(ClassLoader loader)
         throws Exception {
         final String basePackage = "org.apache.catalina.util.";
         loader.loadClass(basePackage + "Enumerator");
         loader.loadClass(basePackage + "ParameterMap");
     }
-    
-    
+
+
     private static final void loadCoyotePackage(ClassLoader loader)
             throws Exception {
         final String basePackage = "org.apache.coyote.";
@@ -151,7 +151,7 @@ public final class SecurityClassLoad {
         throws Exception {
         loader.loadClass("javax.servlet.http.Cookie");
     }
-    
+
 
     private static final void loadConnectorPackage(ClassLoader loader)
         throws Exception {
@@ -182,7 +182,7 @@ public final class SecurityClassLoad {
              "RequestFacade$GetHeadersPrivilegedAction");
         loader.loadClass
             (basePackage +
-             "RequestFacade$GetHeaderNamesPrivilegedAction");  
+             "RequestFacade$GetHeaderNamesPrivilegedAction");
         loader.loadClass
             (basePackage +
              "RequestFacade$GetCookiesPrivilegedAction");
@@ -196,7 +196,7 @@ public final class SecurityClassLoad {
             (basePackage +
              "ResponseFacade$SetContentTypePrivilegedAction");
         loader.loadClass
-            (basePackage + 
+            (basePackage +
              "ResponseFacade$DateHeaderPrivilegedAction");
         loader.loadClass
             (basePackage +

==================================================
SecurityListener.java
index 8963fbe5a0..5b4cd04ae6 100644
--- a/java/org/apache/catalina/security/SecurityConfig.java
+++ b/java/org/apache/catalina/security/SecurityConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -32,17 +32,17 @@ public final class SecurityConfig{
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( SecurityConfig.class );
 
-    
+
     private static final String PACKAGE_ACCESS =  "sun.,"
-                                                + "org.apache.catalina." 
+                                                + "org.apache.catalina."
                                                 + ",org.apache.jasper."
                                                 + ",org.apache.coyote."
                                                 + ",org.apache.tomcat.";
-    
+
     // FIX ME package "javax." was removed to prevent HotSpot
     // fatal internal errors
     private static final String PACKAGE_DEFINITION= "java.,sun."
-                                                + ",org.apache.catalina." 
+                                                + ",org.apache.catalina."
                                                 + ",org.apache.coyote."
                                                 + ",org.apache.tomcat."
                                                 + ",org.apache.jasper.";
@@ -50,29 +50,29 @@ public final class SecurityConfig{
      * List of protected package from conf/catalina.properties
      */
     private String packageDefinition;
-    
-    
+
+
     /**
      * List of protected package from conf/catalina.properties
      */
-    private String packageAccess; 
-    
-    
+    private String packageAccess;
+
+
     /**
      * Create a single instance of this class.
      */
-    private SecurityConfig(){  
+    private SecurityConfig(){
         try{
             packageDefinition = CatalinaProperties.getProperty("package.definition");
             packageAccess = CatalinaProperties.getProperty("package.access");
         } catch (java.lang.Exception ex){
             if (log.isDebugEnabled()){
-                log.debug("Unable to load properties using CatalinaProperties", ex); 
-            }            
+                log.debug("Unable to load properties using CatalinaProperties", ex);
+            }
         }
     }
-    
-    
+
+
     /**
      * Returns the singleton instance of that class.
      * @return an instance of that class.
@@ -83,21 +83,21 @@ public final class SecurityConfig{
         }
         return singleton;
     }
-    
-    
+
+
     /**
      * Set the security package.access value.
      */
     public void setPackageAccess(){
         // If catalina.properties is missing, protect all by default.
         if (packageAccess == null){
-            setSecurityProperty("package.access", PACKAGE_ACCESS);   
+            setSecurityProperty("package.access", PACKAGE_ACCESS);
         } else {
-            setSecurityProperty("package.access", packageAccess);   
+            setSecurityProperty("package.access", packageAccess);
         }
     }
-    
-    
+
+
     /**
      * Set the security package.definition value.
      */
@@ -109,8 +109,8 @@ public final class SecurityConfig{
             setSecurityProperty("package.definition", packageDefinition);
          }
     }
-     
-     
+
+
     /**
      * Set the proper security property
      * @param properties the package.* property.
@@ -129,8 +129,8 @@ public final class SecurityConfig{
             Security.setProperty(properties, definition);
         }
     }
-    
-    
+
+
 }
 
 

==================================================
SecurityUtil.java
index fe4e2b1af9..6a51ea533a 100644
--- a/java/org/apache/catalina/security/SecurityListener.java
+++ b/java/org/apache/catalina/security/SecurityListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -32,7 +32,7 @@ public class SecurityListener implements LifecycleListener {
     private static final Log log = LogFactory.getLog(SecurityListener.class);
 
     private static final StringManager sm =
-        StringManager.getManager(Constants.PACKAGE);    
+        StringManager.getManager(Constants.PACKAGE);
 
     private static final String UMASK_PROPERTY_NAME =
         Constants.PACKAGE + ".SecurityListener.UMASK";
@@ -71,7 +71,7 @@ public class SecurityListener implements LifecycleListener {
      * with null or the empty string will clear the list of users and
      * effectively disables this check. User names will always be checked in a
      * case insensitive manner.
-     * 
+     *
      * @param userNameList  A comma separated list of operating system users not
      *                      permitted to run Tomcat
      */
@@ -92,7 +92,7 @@ public class SecurityListener implements LifecycleListener {
     /**
      * Returns the current list of operating system users not permitted to run
      * Tomcat.
-     * 
+     *
      * @return  A comma separated list of operating sytem user names.
      */
     public String getCheckedOsUsers() {
@@ -113,7 +113,7 @@ public class SecurityListener implements LifecycleListener {
 
     /**
      * Set the minimum umask that must be configured before Tomcat will start.
-     * 
+     *
      * @param umask The 4-digit umask as returned by the OS command <i>umask</i>
      */
     public void setMinimumUmask(String umask) {
@@ -127,7 +127,7 @@ public class SecurityListener implements LifecycleListener {
 
     /**
      * Get the minimum umask that must be configured before Tomcat will start.
-     * 
+     *
      * @return  The 4-digit umask as used by the OS command <i>umask</i>
      */
     public String getMinimumUmask() {
@@ -142,13 +142,13 @@ public class SecurityListener implements LifecycleListener {
         checkOsUser();
         checkUmask();
     }
-    
+
 
     protected void checkOsUser() {
         String userName = System.getProperty("user.name");
         if (userName != null) {
             String userNameLC = userName.toLowerCase();
-        
+
             if (checkedOsUsers.contains(userNameLC)) {
                 // Have to throw Error to force start process to be aborted
                 throw new Error(sm.getString(
@@ -156,7 +156,7 @@ public class SecurityListener implements LifecycleListener {
             }
         }
     }
-    
+
 
     protected void checkUmask() {
         String prop = System.getProperty(UMASK_PROPERTY_NAME);
@@ -185,7 +185,7 @@ public class SecurityListener implements LifecycleListener {
                 return;
             }
         }
-        
+
         if ((umask.intValue() & minimumUmask.intValue()) !=
                 minimumUmask.intValue()) {
             throw new Error(sm.getString("SecurityListener.checkUmaskFail",

==================================================
CGIServlet.java
index 0e1eddb8f2..794aff31fd 100644
--- a/java/org/apache/catalina/security/SecurityUtil.java
+++ b/java/org/apache/catalina/security/SecurityUtil.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -37,9 +37,9 @@ import javax.servlet.http.HttpSession;
 import org.apache.catalina.Globals;
 import org.apache.tomcat.util.res.StringManager;
 /**
- * This utility class associates a <code>Subject</code> to the current 
+ * This utility class associates a <code>Subject</code> to the current
  * <code>AccessControlContext</code>. When a <code>SecurityManager</code> is
- * used, * the container will always associate the called thread with an 
+ * used, * the container will always associate the called thread with an
  * AccessControlContext * containing only the principal of the requested
  * Servlet/Filter.
  *
@@ -49,100 +49,100 @@ import org.apache.tomcat.util.res.StringManager;
  */
 
 public final class SecurityUtil{
-    
+
     private static final int INIT= 0;
     private static final int SERVICE = 1;
     private static final int DOFILTER = 1;
     private static final int EVENT = 2;
     private static final int DOFILTEREVENT = 2;
     private static final int DESTROY = 3;
-    
+
     private static final String INIT_METHOD = "init";
     private static final String DOFILTER_METHOD = "doFilter";
     private static final String SERVICE_METHOD = "service";
     private static final String EVENT_METHOD = "event";
     private static final String DOFILTEREVENT_METHOD = "doFilterEvent";
     private static final String DESTROY_METHOD = "destroy";
-   
+
     /**
      * Cache every object for which we are creating method on it.
      */
     private static final Map<Object,Method[]> objectCache =
         new ConcurrentHashMap<Object,Method[]>();
-        
+
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( SecurityUtil.class );
-    
-    private static boolean packageDefinitionEnabled =  
-         (System.getProperty("package.definition") == null && 
+
+    private static boolean packageDefinitionEnabled =
+         (System.getProperty("package.definition") == null &&
            System.getProperty("package.access")  == null) ? false : true;
-    
+
     /**
      * The string resources for this package.
      */
     private static final StringManager sm =
-        StringManager.getManager(Constants.PACKAGE);    
-    
-    
+        StringManager.getManager(Constants.PACKAGE);
+
+
     /**
      * Perform work as a particular </code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
      * @param targetObject the <code>Servlet</code> on which the method will
      * be called.
      */
-    public static void doAsPrivilege(final String methodName, 
+    public static void doAsPrivilege(final String methodName,
                                      final Servlet targetObject) throws java.lang.Exception{
-         doAsPrivilege(methodName, targetObject, null, null, null);                                
+         doAsPrivilege(methodName, targetObject, null, null, null);
     }
 
-    
+
     /**
      * Perform work as a particular </code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
      * @param targetObject the <code>Servlet</code> on which the method will
      * be called.
      * @param targetType <code>Class</code> array used to instantiate a
      * <code>Method</code> object.
-     * @param targetArguments <code>Object</code> array contains the runtime 
+     * @param targetArguments <code>Object</code> array contains the runtime
      * parameters instance.
      */
-    public static void doAsPrivilege(final String methodName, 
-                                     final Servlet targetObject, 
+    public static void doAsPrivilege(final String methodName,
+                                     final Servlet targetObject,
                                      final Class<?>[] targetType,
-                                     final Object[] targetArguments) 
-        throws java.lang.Exception{    
-
-         doAsPrivilege(methodName, 
-                       targetObject, 
-                       targetType, 
-                       targetArguments, 
-                       null);                                
+                                     final Object[] targetArguments)
+        throws java.lang.Exception{
+
+         doAsPrivilege(methodName,
+                       targetObject,
+                       targetType,
+                       targetArguments,
+                       null);
     }
-    
-    
+
+
     /**
      * Perform work as a particular </code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
      * @param targetObject the <code>Servlet</code> on which the method will
      * be called.
-     * @param targetType <code>Class</code> array used to instantiate a 
+     * @param targetType <code>Class</code> array used to instantiate a
      * <code>Method</code> object.
-     * @param targetArguments <code>Object</code> array contains the 
+     * @param targetArguments <code>Object</code> array contains the
      * runtime parameters instance.
-     * @param principal the <code>Principal</code> to which the security 
+     * @param principal the <code>Principal</code> to which the security
      * privilege apply..
-     */    
-    public static void doAsPrivilege(final String methodName, 
-                                     final Servlet targetObject, 
+     */
+    public static void doAsPrivilege(final String methodName,
+                                     final Servlet targetObject,
                                      final Class<?>[] targetType,
                                      final Object[] targetArguments,
-                                     Principal principal) 
+                                     Principal principal)
         throws java.lang.Exception{
 
         Method method = null;
@@ -151,7 +151,7 @@ public final class SecurityUtil{
             method = createMethodAndCacheIt(methodsCache,
                                             methodName,
                                             targetObject,
-                                            targetType);                     
+                                            targetType);
         } else {
             method = findMethod(methodsCache, methodName);
             if (method == null) {
@@ -164,74 +164,74 @@ public final class SecurityUtil{
 
         execute(method, targetObject, targetArguments, principal);
     }
- 
-    
+
+
     /**
      * Perform work as a particular </code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
-     * @param targetObject the <code>Filter</code> on which the method will 
+     * @param targetObject the <code>Filter</code> on which the method will
      * be called.
-     */    
-    public static void doAsPrivilege(final String methodName, 
-                                     final Filter targetObject) 
+     */
+    public static void doAsPrivilege(final String methodName,
+                                     final Filter targetObject)
         throws java.lang.Exception{
 
-         doAsPrivilege(methodName, targetObject, null, null);                                
+         doAsPrivilege(methodName, targetObject, null, null);
     }
- 
-    
+
+
     /**
      * Perform work as a particular <code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
-     * @param targetObject the <code>Filter</code> on which the method will 
+     * @param targetObject the <code>Filter</code> on which the method will
      * be called.
      * @param targetType <code>Class</code> array used to instantiate a
      * <code>Method</code> object.
-     * @param targetArguments <code>Object</code> array contains the 
+     * @param targetArguments <code>Object</code> array contains the
      * runtime parameters instance.
-     */    
-    public static void doAsPrivilege(final String methodName, 
-                                     final Filter targetObject, 
+     */
+    public static void doAsPrivilege(final String methodName,
+                                     final Filter targetObject,
                                      final Class<?>[] targetType,
-                                     final Object[] targetArguments) 
+                                     final Object[] targetArguments)
         throws java.lang.Exception{
 
         doAsPrivilege(
                 methodName, targetObject, targetType, targetArguments, null);
     }
-    
+
     /**
      * Perform work as a particular <code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
-     * @param targetObject the <code>Filter</code> on which the method will 
+     * @param targetObject the <code>Filter</code> on which the method will
      * be called.
      * @param targetType <code>Class</code> array used to instantiate a
      * <code>Method</code> object.
-     * @param targetArguments <code>Object</code> array contains the 
+     * @param targetArguments <code>Object</code> array contains the
      * runtime parameters instance.
-     * @param principal the <code>Principal</code> to which the security 
+     * @param principal the <code>Principal</code> to which the security
      * privilege apply
-     */    
-    public static void doAsPrivilege(final String methodName, 
-                                     final Filter targetObject, 
+     */
+    public static void doAsPrivilege(final String methodName,
+                                     final Filter targetObject,
                                      final Class<?>[] targetType,
                                      final Object[] targetArguments,
-                                     Principal principal) 
+                                     Principal principal)
         throws java.lang.Exception{
-        
+
         Method method = null;
         Method[] methodsCache = objectCache.get(targetObject);
         if(methodsCache == null) {
             method = createMethodAndCacheIt(methodsCache,
                                             methodName,
                                             targetObject,
-                                            targetType);                     
+                                            targetType);
         } else {
             method = findMethod(methodsCache, methodName);
             if (method == null) {
@@ -244,27 +244,27 @@ public final class SecurityUtil{
 
         execute(method, targetObject, targetArguments, principal);
     }
-    
-    
+
+
     /**
      * Perform work as a particular </code>Subject</code>. Here the work
-     * will be granted to a <code>null</code> subject. 
+     * will be granted to a <code>null</code> subject.
      *
      * @param methodName the method to apply the security restriction
      * @param targetObject the <code>Servlet</code> on which the method will
      * be called.
-     * @param targetArguments <code>Object</code> array contains the 
+     * @param targetArguments <code>Object</code> array contains the
      * runtime parameters instance.
-     * @param principal the <code>Principal</code> to which the security 
+     * @param principal the <code>Principal</code> to which the security
      * privilege applies
-     */    
+     */
     private static void execute(final Method method,
-                                final Object targetObject, 
+                                final Object targetObject,
                                 final Object[] targetArguments,
-                                Principal principal) 
+                                Principal principal)
         throws java.lang.Exception{
-       
-        try{   
+
+        try{
             Subject subject = null;
             PrivilegedExceptionAction<Void> pea =
                 new PrivilegedExceptionAction<Void>(){
@@ -276,22 +276,22 @@ public final class SecurityUtil{
             };
 
             // The first argument is always the request object
-            if (targetArguments != null 
+            if (targetArguments != null
                     && targetArguments[0] instanceof HttpServletRequest){
-                HttpServletRequest request = 
+                HttpServletRequest request =
                     (HttpServletRequest)targetArguments[0];
 
                 boolean hasSubject = false;
                 HttpSession session = request.getSession(false);
                 if (session != null){
-                    subject = 
+                    subject =
                         (Subject)session.getAttribute(Globals.SUBJECT_ATTR);
                     hasSubject = (subject != null);
                 }
 
                 if (subject == null){
                     subject = new Subject();
-                    
+
                     if (principal != null){
                         subject.getPrincipals().add(principal);
                     }
@@ -302,7 +302,7 @@ public final class SecurityUtil{
                 }
             }
 
-            Subject.doAsPrivileged(subject, pea, null);       
+            Subject.doAsPrivileged(subject, pea, null);
         } catch( PrivilegedActionException pe) {
             Throwable e;
             if (pe.getException() instanceof InvocationTargetException) {
@@ -311,11 +311,11 @@ public final class SecurityUtil{
             } else {
                 e = pe;
             }
-            
+
             if (log.isDebugEnabled()){
-                log.debug(sm.getString("SecurityUtil.doAsPrivilege"), e); 
+                log.debug(sm.getString("SecurityUtil.doAsPrivilege"), e);
             }
-            
+
             if (e instanceof UnavailableException)
                 throw (UnavailableException) e;
             else if (e instanceof ServletException)
@@ -326,10 +326,10 @@ public final class SecurityUtil{
                 throw (RuntimeException) e;
             else
                 throw new ServletException(e.getMessage(), e);
-        }  
+        }
     }
-    
-    
+
+
     /**
      * Find a method stored within the cache.
      * @param methodsCache the cache used to store method instance
@@ -338,51 +338,51 @@ public final class SecurityUtil{
      */
     private static Method findMethod(Method[] methodsCache,
                                      String methodName){
-        if (methodName.equalsIgnoreCase(INIT_METHOD) 
+        if (methodName.equalsIgnoreCase(INIT_METHOD)
                 && methodsCache[INIT] != null){
             return methodsCache[INIT];
-        } else if (methodName.equalsIgnoreCase(DESTROY_METHOD) 
+        } else if (methodName.equalsIgnoreCase(DESTROY_METHOD)
                 && methodsCache[DESTROY] != null){
-            return methodsCache[DESTROY];            
-        } else if (methodName.equalsIgnoreCase(SERVICE_METHOD) 
+            return methodsCache[DESTROY];
+        } else if (methodName.equalsIgnoreCase(SERVICE_METHOD)
                 && methodsCache[SERVICE] != null){
             return methodsCache[SERVICE];
-        } else if (methodName.equalsIgnoreCase(DOFILTER_METHOD) 
+        } else if (methodName.equalsIgnoreCase(DOFILTER_METHOD)
                 && methodsCache[DOFILTER] != null){
-            return methodsCache[DOFILTER];          
-        } else if (methodName.equalsIgnoreCase(EVENT_METHOD) 
+            return methodsCache[DOFILTER];
+        } else if (methodName.equalsIgnoreCase(EVENT_METHOD)
                 && methodsCache[EVENT] != null){
-            return methodsCache[EVENT];          
-        } else if (methodName.equalsIgnoreCase(DOFILTEREVENT_METHOD) 
+            return methodsCache[EVENT];
+        } else if (methodName.equalsIgnoreCase(DOFILTEREVENT_METHOD)
                 && methodsCache[DOFILTEREVENT] != null){
-            return methodsCache[DOFILTEREVENT];          
-        } 
+            return methodsCache[DOFILTEREVENT];
+        }
         return null;
     }
-    
-    
+
+
     /**
      * Create the method and cache it for further re-use.
      * @param methodsCache the cache used to store method instance
      * @param methodName the method to apply the security restriction
      * @param targetObject the <code>Servlet</code> on which the method will
      * be called.
-     * @param targetType <code>Class</code> array used to instantiate a 
+     * @param targetType <code>Class</code> array used to instantiate a
      * <code>Method</code> object.
      * @return the method instance.
      */
     private static Method createMethodAndCacheIt(Method[] methodsCache,
                                                  String methodName,
                                                  Object targetObject,
-                                                 Class<?>[] targetType) 
+                                                 Class<?>[] targetType)
             throws Exception{
-        
+
         if ( methodsCache == null){
             methodsCache = new Method[4];
-        }               
-                
-        Method method = 
-            targetObject.getClass().getMethod(methodName, targetType); 
+        }
+
+        Method method =
+            targetObject.getClass().getMethod(methodName, targetType);
 
         if (methodName.equalsIgnoreCase(INIT_METHOD)){
             methodsCache[INIT] = method;
@@ -396,14 +396,14 @@ public final class SecurityUtil{
             methodsCache[EVENT] = method;
         } else if (methodName.equalsIgnoreCase(DOFILTEREVENT_METHOD)){
             methodsCache[DOFILTEREVENT] = method;
-        } 
-         
+        }
+
         objectCache.put(targetObject, methodsCache );
-                                           
+
         return method;
     }
 
-    
+
     /**
      * Remove the object from the cache.
      *
@@ -412,8 +412,8 @@ public final class SecurityUtil{
     public static void remove(Object cachedObject){
         objectCache.remove(cachedObject);
     }
-    
-    
+
+
     /**
      * Return the <code>SecurityManager</code> only if Security is enabled AND
      * package protection mechanism is enabled.
@@ -424,6 +424,6 @@ public final class SecurityUtil{
         }
         return false;
     }
-    
-    
+
+
 }

==================================================
Constants.java
index f9a025b473..1fbafcdfc6 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -302,7 +302,7 @@ public final class CGIServlet extends HttpServlet {
         if (getServletConfig().getInitParameter("debug") != null)
             debug = Integer.parseInt(getServletConfig().getInitParameter("debug"));
         cgiPathPrefix = getServletConfig().getInitParameter("cgiPathPrefix");
-        boolean passShellEnvironment = 
+        boolean passShellEnvironment =
             Boolean.valueOf(getServletConfig().getInitParameter("passShellEnvironment")).booleanValue();
 
         if (passShellEnvironment) {
@@ -598,7 +598,7 @@ public final class CGIServlet extends HttpServlet {
         if (!cgiEnv.isValid()) {
             res.setStatus(404);
         }
- 
+
         if (debug >= 10) {
 
             ServletOutputStream out = res.getOutputStream();
@@ -730,7 +730,7 @@ public final class CGIServlet extends HttpServlet {
          *
          * @param  req   HttpServletRequest for information provided by
          *               the Servlet API
-         * @throws UnsupportedEncodingException 
+         * @throws UnsupportedEncodingException
          */
         protected void setupFromRequest(HttpServletRequest req)
                 throws UnsupportedEncodingException {
@@ -956,8 +956,8 @@ public final class CGIServlet extends HttpServlet {
                 // The app has not been deployed in exploded form
                 webAppRootDir = tmpDir.toString();
                 expandCGIScript();
-            } 
-            
+            }
+
             sCGINames = findCGI(sPathInfoOrig,
                                 webAppRootDir,
                                 contextPath,
@@ -1101,7 +1101,7 @@ public final class CGIServlet extends HttpServlet {
         }
 
         /**
-         * Extracts requested resource from web app archive to context work 
+         * Extracts requested resource from web app archive to context work
          * directory to enable CGI script to be executed.
          */
         protected void expandCGIScript() {
@@ -1143,7 +1143,7 @@ public final class CGIServlet extends HttpServlet {
             if (f.exists()) {
                 // Don't need to expand if it already exists
                 return;
-            } 
+            }
 
             // create directories
             String dirPath = destPath.toString().substring(
@@ -1179,7 +1179,7 @@ public final class CGIServlet extends HttpServlet {
                     }
                 }
             } catch (IOException ioe) {
-                // delete in case file is corrupted 
+                // delete in case file is corrupted
                 if (f.exists()) {
                     if (!f.delete() && debug >= 2) {
                         log("expandCGIScript: failed to delete '" +
@@ -1611,7 +1611,7 @@ public final class CGIServlet extends HttpServlet {
                 proc = rt.exec(
                         cmdAndArgs.toArray(new String[cmdAndArgs.size()]),
                         hashToStringArray(env), wd);
-    
+
                 String sContentLength = env.get("CONTENT_LENGTH");
 
                 if(!"".equals(sContentLength)) {
@@ -1643,7 +1643,7 @@ public final class CGIServlet extends HttpServlet {
                     new HTTPHeaderInputStream(proc.getInputStream());
                 cgiHeaderReader =
                     new BufferedReader(new InputStreamReader(cgiHeaderStream));
-            
+
                 while (isRunning) {
                     try {
                         //set headers
@@ -1659,7 +1659,7 @@ public final class CGIServlet extends HttpServlet {
                                 String header =
                                     line.substring(0, line.indexOf(":")).trim();
                                 String value =
-                                    line.substring(line.indexOf(":") + 1).trim(); 
+                                    line.substring(line.indexOf(":") + 1).trim();
                                 if (header.equalsIgnoreCase("status")) {
                                     response.setStatus(getSCFromCGIStatusHeader(value));
                                 } else {
@@ -1669,13 +1669,13 @@ public final class CGIServlet extends HttpServlet {
                                 log("runCGI: bad header line \"" + line + "\"");
                             }
                         }
-    
+
                         //write output
                         byte[] bBuf = new byte[2048];
-    
+
                         OutputStream out = response.getOutputStream();
                         cgiOutput = proc.getInputStream();
-    
+
                         try {
                             while ((bufRead = cgiOutput.read(bBuf)) != -1) {
                                 if (debug >= 4) {
@@ -1694,11 +1694,11 @@ public final class CGIServlet extends HttpServlet {
                                 }
                             }
                         }
-        
+
                         proc.exitValue(); // Throws exception if alive
-    
+
                         isRunning = false;
-    
+
                     } catch (IllegalThreadStateException e) {
                         try {
                             Thread.sleep(500);
@@ -1707,7 +1707,7 @@ public final class CGIServlet extends HttpServlet {
                         }
                     }
                 } //replacement for Process.waitFor()
-    
+
             }
             catch (IOException e){
                 log ("Caught exception " + e);
@@ -1750,22 +1750,22 @@ public final class CGIServlet extends HttpServlet {
 
         /**
          * Parses the Status-Line and extracts the status code.
-         * 
+         *
          * @param line The HTTP Status-Line (RFC2616, section 6.1)
          * @return The extracted status code or the code representing an
-         * internal error if a valid status code cannot be extracted. 
+         * internal error if a valid status code cannot be extracted.
          */
         private int getSCFromHttpStatusLine(String line) {
             int statusStart = line.indexOf(' ') + 1;
-            
+
             if (statusStart < 1 || line.length() < statusStart + 3) {
                 // Not a valid HTTP Status-Line
                 log ("runCGI: invalid HTTP Status-Line:" + line);
                 return HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
             }
-            
+
             String status = line.substring(statusStart, statusStart + 3);
-            
+
             int statusCode;
             try {
                 statusCode = Integer.parseInt(status);
@@ -1774,17 +1774,17 @@ public final class CGIServlet extends HttpServlet {
                 log ("runCGI: invalid status code:" + status);
                 return HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
             }
-            
+
             return statusCode;
         }
 
         /**
          * Parses the CGI Status Header value and extracts the status code.
-         * 
+         *
          * @param value The CGI Status value of the form <code>
          *             digit digit digit SP reason-phrase</code>
          * @return The extracted status code or the code representing an
-         * internal error if a valid status code cannot be extracted. 
+         * internal error if a valid status code cannot be extracted.
          */
         private int getSCFromCGIStatusHeader(String value) {
             if (value.length() < 3) {
@@ -1792,9 +1792,9 @@ public final class CGIServlet extends HttpServlet {
                 log ("runCGI: invalid status value:" + value);
                 return HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
             }
-            
+
             String status = value.substring(0, 3);
-            
+
             int statusCode;
             try {
                 statusCode = Integer.parseInt(status);
@@ -1803,10 +1803,10 @@ public final class CGIServlet extends HttpServlet {
                 log ("runCGI: invalid status code:" + status);
                 return HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
             }
-            
+
             return statusCode;
         }
-        
+
         private void sendToLog(BufferedReader rdr) {
             String line = null;
             int lineCount = 0 ;
@@ -1841,10 +1841,10 @@ public final class CGIServlet extends HttpServlet {
         private static final int STATE_FIRST_LF = 2;
         private static final int STATE_SECOND_CR = 3;
         private static final int STATE_HEADER_END = 4;
-        
+
         private InputStream input;
         private int state;
-        
+
         HTTPHeaderInputStream(InputStream theInput) {
             input = theInput;
             state = STATE_CHARACTER;
@@ -1876,7 +1876,7 @@ public final class CGIServlet extends HttpServlet {
             //            |(CR)    ^(LF)
             //            |        |
             //          (CR2)-->---
-            
+
             if (i == 10) {
                 // LF
                 switch(state) {
@@ -1909,8 +1909,8 @@ public final class CGIServlet extends HttpServlet {
             } else {
                 state = STATE_CHARACTER;
             }
-            
-            return i;            
+
+            return i;
         }
     }  // class HTTPHeaderInputStream
 

==================================================
DefaultServlet.java
index f716da1d17..52f4bdc89b 100644
--- a/java/org/apache/catalina/servlets/Constants.java
+++ b/java/org/apache/catalina/servlets/Constants.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
WebdavServlet.java
index 5772ae528e..5417079fc0 100644
--- a/java/org/apache/catalina/servlets/LocalStrings_ja.properties
+++ b/java/org/apache/catalina/servlets/LocalStrings_ja.properties
@@ -13,8 +13,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-defaultservlet.directorylistingfor=\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7: 
-defaultservlet.upto=\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: 
+defaultservlet.directorylistingfor=\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7:
+defaultservlet.upto=\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea:
 defaultservlet.subdirectories=\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea:
 defaultservlet.files=\u30d5\u30a1\u30a4\u30eb:
 webdavservlet.jaxpfailed=JAXP\u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f

==================================================
