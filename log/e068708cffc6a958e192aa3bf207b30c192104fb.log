e068708cffc6a958e192aa3bf207b30c192104fb
==================================================
Move the cache for the attributes listed below from the Processor to the SocketWrapper as they are fixed for the lifetime of the socket and the Processor gets recycled on every request
==================================================
Mark Emlyn
==================================================
Tue Sep 25 21:36:55 2012 +0000
==================================================
AbstractHttp11Processor.java
Move the cache for the attributes listed below from the Processor to the SocketWrapper as they are fixed for the lifetime of the socket and the Processor gets recycled on every request
- remote address
- remote host name
- remote port
- local address
- local host name
- local port

This reduces object allocation during my load test by ~30% (the allocations were triggered by the AccessLogValve logging the remote IP)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1390162 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 36994152bc..41c294a9ae 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -158,42 +158,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      */
     protected int keepAliveTimeout = -1;
 
-    /**
-     * Remote Address associated with the current connection.
-     */
-    protected String remoteAddr = null;
-
-
-    /**
-     * Remote Host associated with the current connection.
-     */
-    protected String remoteHost = null;
-
-
-    /**
-     * Local Host associated with the current connection.
-     */
-    protected String localName = null;
-
-
-    /**
-     * Local port to which the socket is connected
-     */
-    protected int localPort = -1;
-
-
-    /**
-     * Remote port to which the socket is connected
-     */
-    protected int remotePort = -1;
-
-
-    /**
-     * The local Host address.
-     */
-    protected String localAddr = null;
-
-
     /**
      * Maximum timeout on uploads. 5 minutes as in Apache HTTPD server.
      */
@@ -1662,12 +1626,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             asyncStateMachine.recycle();
         }
         upgradeInbound = null;
-        remoteAddr = null;
-        remoteHost = null;
-        localAddr = null;
-        localName = null;
-        remotePort = -1;
-        localPort = -1;
         comet = false;
         recycleInternal();
     }

==================================================
Http11NioProcessor.java
index cc1f0590ea..42707cd954 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -278,87 +278,110 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
 
         if (actionCode == ActionCode.REQ_HOST_ADDR_ATTRIBUTE) {
 
-            // Get remote host address
-            if (remoteAddr == null && (socketRef != 0)) {
-                try {
-                    long sa = Address.get(Socket.APR_REMOTE, socketRef);
-                    remoteAddr = Address.getip(sa);
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.info"), e);
+            if (socketRef == 0) {
+                request.remoteAddr().recycle();
+            } else {
+                if (socket.getRemoteAddr() == null) {
+                    try {
+                        long sa = Address.get(Socket.APR_REMOTE, socketRef);
+                        socket.setRemoteAddr(Address.getip(sa));
+                    } catch (Exception e) {
+                        log.warn(sm.getString("http11processor.socket.info"), e);
+                    }
                 }
+                request.remoteAddr().setString(socket.getRemoteAddr());
             }
-            request.remoteAddr().setString(remoteAddr);
 
         } else if (actionCode == ActionCode.REQ_LOCAL_NAME_ATTRIBUTE) {
 
-            // Get local host name
-            if (localName == null && (socketRef != 0)) {
-                try {
-                    long sa = Address.get(Socket.APR_LOCAL, socketRef);
-                    localName = Address.getnameinfo(sa, 0);
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.info"), e);
+            if (socketRef == 0) {
+                request.localName().recycle();
+            } else {
+                if (socket.getLocalName() == null) {
+                    try {
+                        long sa = Address.get(Socket.APR_LOCAL, socketRef);
+                        socket.setLocalName(Address.getnameinfo(sa, 0));
+                    } catch (Exception e) {
+                        log.warn(sm.getString("http11processor.socket.info"), e);
+                    }
                 }
+                request.localName().setString(socket.getLocalName());
             }
-            request.localName().setString(localName);
 
         } else if (actionCode == ActionCode.REQ_HOST_ATTRIBUTE) {
 
-            // Get remote host name
-            if (remoteHost == null && (socketRef != 0)) {
-                try {
-                    long sa = Address.get(Socket.APR_REMOTE, socketRef);
-                    remoteHost = Address.getnameinfo(sa, 0);
-                    if (remoteHost == null) {
-                        remoteHost = Address.getip(sa);
+            if (socketRef == 0) {
+                request.remoteHost().recycle();
+            } else {
+                if (socket.getRemoteHost() == null) {
+                    try {
+                        long sa = Address.get(Socket.APR_REMOTE, socketRef);
+                        socket.setRemoteHost(Address.getnameinfo(sa, 0));
+                        if (socket.getRemoteHost() == null) {
+                            if (socket.getRemoteAddr() == null) {
+                                socket.setRemoteAddr(Address.getip(sa));
+                            }
+                            if (socket.getRemoteAddr() != null) {
+                                socket.setRemoteHost(socket.getRemoteAddr());
+                            }
+                        }
+                    } catch (Exception e) {
+                        log.warn(sm.getString("http11processor.socket.info"), e);
                     }
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.info"), e);
+                } else {
+                    request.remoteHost().setString(socket.getRemoteHost());
                 }
             }
-            request.remoteHost().setString(remoteHost);
 
         } else if (actionCode == ActionCode.REQ_LOCAL_ADDR_ATTRIBUTE) {
 
-            // Get local host address
-            if (localAddr == null && (socketRef != 0)) {
-                try {
-                    long sa = Address.get(Socket.APR_LOCAL, socketRef);
-                    localAddr = Address.getip(sa);
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.info"), e);
+            if (socketRef == 0) {
+                request.localAddr().recycle();
+            } else {
+                if (socket.getLocalAddr() == null) {
+                    try {
+                        long sa = Address.get(Socket.APR_LOCAL, socketRef);
+                        socket.setLocalAddr(Address.getip(sa));
+                    } catch (Exception e) {
+                        log.warn(sm.getString("http11processor.socket.info"), e);
+                    }
                 }
+                request.localAddr().setString(socket.getLocalAddr());
             }
 
-            request.localAddr().setString(localAddr);
-
         } else if (actionCode == ActionCode.REQ_REMOTEPORT_ATTRIBUTE) {
 
-            // Get remote port
-            if (remotePort == -1 && (socketRef != 0)) {
-                try {
-                    long sa = Address.get(Socket.APR_REMOTE, socketRef);
-                    Sockaddr addr = Address.getInfo(sa);
-                    remotePort = addr.port;
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.info"), e);
+            if (socketRef == 0) {
+                request.setRemotePort(0);
+            } else {
+                if (socket.getRemotePort() == -1) {
+                    try {
+                        long sa = Address.get(Socket.APR_REMOTE, socketRef);
+                        Sockaddr addr = Address.getInfo(sa);
+                        socket.setRemotePort(addr.port);
+                    } catch (Exception e) {
+                        log.warn(sm.getString("http11processor.socket.info"), e);
+                    }
                 }
+                request.setRemotePort(socket.getRemotePort());
             }
-            request.setRemotePort(remotePort);
 
         } else if (actionCode == ActionCode.REQ_LOCALPORT_ATTRIBUTE) {
 
-            // Get local port
-            if (localPort == -1 && (socketRef != 0)) {
-                try {
-                    long sa = Address.get(Socket.APR_LOCAL, socketRef);
-                    Sockaddr addr = Address.getInfo(sa);
-                    localPort = addr.port;
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.info"), e);
+            if (socketRef == 0) {
+                request.setLocalPort(0);
+            } else {
+                if (socket.getLocalPort() == -1) {
+                    try {
+                        long sa = Address.get(Socket.APR_LOCAL, socketRef);
+                        Sockaddr addr = Address.getInfo(sa);
+                        socket.setLocalPort(addr.port);
+                    } catch (Exception e) {
+                        log.warn(sm.getString("http11processor.socket.info"), e);
+                    }
                 }
+                request.setLocalPort(socket.getLocalPort());
             }
-            request.setLocalPort(localPort);
 
         } else if (actionCode == ActionCode.REQ_SSL_ATTRIBUTE ) {
 

==================================================
Http11Processor.java
index 4d5257ce4c..a67d60c774 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -397,65 +397,88 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
 
         if (actionCode == ActionCode.REQ_HOST_ADDR_ATTRIBUTE) {
 
-            // Get remote host address
-            if ((remoteAddr == null) && (socket != null)) {
-                InetAddress inetAddr = socket.getSocket().getIOChannel().socket().getInetAddress();
-                if (inetAddr != null) {
-                    remoteAddr = inetAddr.getHostAddress();
+            if (socket == null) {
+                request.remoteAddr().recycle();
+            } else {
+                if (socket.getRemoteAddr() == null) {
+                    InetAddress inetAddr = socket.getSocket().getIOChannel().socket().getInetAddress();
+                    if (inetAddr != null) {
+                        socket.setRemoteAddr(inetAddr.getHostAddress());
+                    }
                 }
+                request.remoteAddr().setString(socket.getRemoteAddr());
             }
-            request.remoteAddr().setString(remoteAddr);
 
         } else if (actionCode == ActionCode.REQ_LOCAL_NAME_ATTRIBUTE) {
 
-            // Get local host name
-            if ((localName == null) && (socket != null)) {
-                InetAddress inetAddr = socket.getSocket().getIOChannel().socket().getLocalAddress();
-                if (inetAddr != null) {
-                    localName = inetAddr.getHostName();
+            if (socket == null) {
+                request.localName().recycle();
+            } else {
+                if (socket.getLocalName() == null) {
+                    InetAddress inetAddr = socket.getSocket().getIOChannel().socket().getLocalAddress();
+                    if (inetAddr != null) {
+                        socket.setLocalName(inetAddr.getHostName());
+                    }
                 }
+                request.localName().setString(socket.getLocalName());
             }
-            request.localName().setString(localName);
 
         } else if (actionCode == ActionCode.REQ_HOST_ATTRIBUTE) {
 
-            // Get remote host name
-            if ((remoteHost == null) && (socket != null)) {
-                InetAddress inetAddr = socket.getSocket().getIOChannel().socket().getInetAddress();
-                if (inetAddr != null) {
-                    remoteHost = inetAddr.getHostName();
-                }
-                if(remoteHost == null) {
-                    if(remoteAddr != null) {
-                        remoteHost = remoteAddr;
-                    } else { // all we can do is punt
-                        request.remoteHost().recycle();
+            if (socket == null) {
+                request.remoteHost().recycle();
+            } else {
+                if (socket.getRemoteHost() == null) {
+                    InetAddress inetAddr = socket.getSocket().getIOChannel().socket().getInetAddress();
+                    if (inetAddr != null) {
+                        socket.setRemoteHost(inetAddr.getHostName());
+                    }
+                    if (socket.getRemoteHost() == null) {
+                        if (socket.getRemoteAddr() == null &&
+                                inetAddr != null) {
+                            socket.setRemoteAddr(inetAddr.getHostAddress());
+                        }
+                        if (socket.getRemoteAddr() != null) {
+                            socket.setRemoteHost(socket.getRemoteAddr());
+                        }
                     }
                 }
+                request.remoteHost().setString(socket.getRemoteHost());
             }
-            request.remoteHost().setString(remoteHost);
 
         } else if (actionCode == ActionCode.REQ_LOCAL_ADDR_ATTRIBUTE) {
 
-            if (localAddr == null) {
-                localAddr = socket.getSocket().getIOChannel().socket().getLocalAddress().getHostAddress();
+            if (socket == null) {
+                request.localAddr().recycle();
+            } else {
+                if (socket.getLocalAddr() == null) {
+                    socket.setLocalAddr(
+                            socket.getSocket().getIOChannel().socket().getLocalAddress().getHostAddress());
+                }
+                request.localAddr().setString(socket.getLocalAddr());
             }
 
-            request.localAddr().setString(localAddr);
-
         } else if (actionCode == ActionCode.REQ_REMOTEPORT_ATTRIBUTE) {
 
-            if ((remotePort == -1 ) && (socket !=null)) {
-                remotePort = socket.getSocket().getIOChannel().socket().getPort();
+            if (socket == null) {
+                request.setRemotePort(0);
+            } else {
+                if (socket.getRemotePort() == -1) {
+                    socket.setRemotePort(socket.getSocket().getIOChannel().socket().getPort());
+                }
+                request.setRemotePort(socket.getRemotePort());
             }
-            request.setRemotePort(remotePort);
 
         } else if (actionCode == ActionCode.REQ_LOCALPORT_ATTRIBUTE) {
 
-            if ((localPort == -1 ) && (socket !=null)) {
-                localPort = socket.getSocket().getIOChannel().socket().getLocalPort();
+            if (socket == null) {
+                request.setLocalPort(0);
+            } else {
+                if (socket.getLocalPort() == -1) {
+                    socket.setLocalPort(socket.getSocket().getIOChannel().socket().getLocalPort());
+                }
+                request.setLocalPort(socket.getLocalPort());
             }
-            request.setLocalPort(localPort);
 
         } else if (actionCode == ActionCode.REQ_SSL_ATTRIBUTE ) {
 

==================================================
SocketWrapper.java
index 765620c3b8..a7e6ce84c8 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -273,61 +273,88 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
 
         } else if (actionCode == ActionCode.REQ_HOST_ADDR_ATTRIBUTE) {
 
-            if ((remoteAddr == null) && (socket != null)) {
-                InetAddress inetAddr = socket.getSocket().getInetAddress();
-                if (inetAddr != null) {
-                    remoteAddr = inetAddr.getHostAddress();
+            if (socket == null) {
+                request.remoteAddr().recycle();
+            } else {
+                if (socket.getRemoteAddr() == null) {
+                    InetAddress inetAddr = socket.getSocket().getInetAddress();
+                    if (inetAddr != null) {
+                        socket.setRemoteAddr(inetAddr.getHostAddress());
+                    }
                 }
+                request.remoteAddr().setString(socket.getRemoteAddr());
             }
-            request.remoteAddr().setString(remoteAddr);
 
         } else if (actionCode == ActionCode.REQ_LOCAL_NAME_ATTRIBUTE) {
 
-            if ((localName == null) && (socket != null)) {
-                InetAddress inetAddr = socket.getSocket().getLocalAddress();
-                if (inetAddr != null) {
-                    localName = inetAddr.getHostName();
+            if (socket == null) {
+                request.localName().recycle();
+            } else {
+                if (socket.getLocalName() == null) {
+                    InetAddress inetAddr = socket.getSocket().getLocalAddress();
+                    if (inetAddr != null) {
+                        socket.setLocalName(inetAddr.getHostName());
+                    }
                 }
+                request.localName().setString(socket.getLocalName());
             }
-            request.localName().setString(localName);
 
         } else if (actionCode == ActionCode.REQ_HOST_ATTRIBUTE) {
 
-            if ((remoteHost == null) && (socket != null)) {
-                InetAddress inetAddr = socket.getSocket().getInetAddress();
-                if (inetAddr != null) {
-                    remoteHost = inetAddr.getHostName();
-                }
-                if(remoteHost == null) {
-                    if(remoteAddr != null) {
-                        remoteHost = remoteAddr;
-                    } else { // all we can do is punt
-                        request.remoteHost().recycle();
+            if (socket == null) {
+                request.remoteHost().recycle();
+            } else {
+                if (socket.getRemoteHost() == null) {
+                    InetAddress inetAddr = socket.getSocket().getInetAddress();
+                    if (inetAddr != null) {
+                        socket.setRemoteHost(inetAddr.getHostName());
+                    }
+                    if (socket.getRemoteHost() == null) {
+                        if (socket.getRemoteAddr() == null &&
+                                inetAddr != null) {
+                            socket.setRemoteAddr(inetAddr.getHostAddress());
+                        }
+                        if (socket.getRemoteAddr() != null) {
+                            socket.setRemoteHost(socket.getRemoteAddr());
+                        }
                     }
                 }
+                request.remoteHost().setString(socket.getRemoteHost());
             }
-            request.remoteHost().setString(remoteHost);
 
         } else if (actionCode == ActionCode.REQ_LOCAL_ADDR_ATTRIBUTE) {
 
-            if (localAddr == null)
-               localAddr = socket.getSocket().getLocalAddress().getHostAddress();
-
-            request.localAddr().setString(localAddr);
+            if (socket == null) {
+                request.localAddr().recycle();
+            } else {
+                if (socket.getLocalAddr() == null) {
+                    socket.setLocalAddr(
+                            socket.getSocket().getLocalAddress().getHostAddress());
+                }
+                request.localAddr().setString(socket.getLocalAddr());
+            }
 
         } else if (actionCode == ActionCode.REQ_REMOTEPORT_ATTRIBUTE) {
 
-            if ((remotePort == -1 ) && (socket !=null)) {
-                remotePort = socket.getSocket().getPort();
+            if (socket == null) {
+                request.setRemotePort(0);
+            } else {
+                if (socket.getRemotePort() == -1) {
+                    socket.setRemotePort(socket.getSocket().getPort());
+                }
+                request.setRemotePort(socket.getRemotePort());
             }
-            request.setRemotePort(remotePort);
 
         } else if (actionCode == ActionCode.REQ_LOCALPORT_ATTRIBUTE) {
 
-            if ((localPort == -1 ) && (socket !=null)) {
-                localPort = socket.getSocket().getLocalPort();
+            if (socket == null) {
+                request.setLocalPort(0);
+            } else {
+                if (socket.getLocalPort() == -1) {
+                    socket.setLocalPort(socket.getSocket().getLocalPort());
+                }
+                request.setLocalPort(socket.getLocalPort());
             }
-            request.setLocalPort(localPort);
 
         } else if (actionCode == ActionCode.REQ_SSL_CERTIFICATE) {
             if( sslSupport != null) {

==================================================
