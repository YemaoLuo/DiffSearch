04f7066dcaec35ca3d247c7e56ea85c313afd668
==================================================
Make handling of keep-alive timeout consistent
==================================================
Mark Emlyn
==================================================
Tue Aug 16 11:12:13 2011 +0000
==================================================
Http11AprProcessor.java
Make handling of keep-alive timeout consistent
No need for local variable, processor has the keep-alive timeout

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1158199 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index 01f884a8fb..4a94330f4f 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -182,8 +182,9 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         keepAlive = true;
         comet = false;
 
-        int keepAliveLeft = maxKeepAliveRequests;
         long soTimeout = endpoint.getSoTimeout();
+
+        int keepAliveLeft = maxKeepAliveRequests;
         
         boolean keptAlive = false;
         boolean openSocket = false;

==================================================
Http11NioProcessor.java
index b0ecbc8600..47a6ac4d05 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -247,6 +247,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                     proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
+            processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
             processor.setConnectionUploadTimeout(
                     proto.getConnectionUploadTimeout());
             processor.setDisableUploadTimeout(proto.getDisableUploadTimeout());

==================================================
Http11NioProtocol.java
index 3ac9421886..78f91e60e6 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -123,7 +123,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         throws IOException {
 
         long soTimeout = endpoint.getSoTimeout();
-        int keepAliveTimeout = endpoint.getKeepAliveTimeout();
 
         RequestInfo rp = request.getRequestProcessor();
         final NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socket.getSocket().getAttachment(false);
@@ -176,7 +175,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         if (!error && attach != null &&
                 asyncStateMachine.isAsyncDispatching()) {
             long soTimeout = endpoint.getSoTimeout();
-            int keepAliveTimeout = endpoint.getKeepAliveTimeout();
 
             //reset the timeout
             if (keepAlive && keepAliveTimeout>0) {
@@ -214,7 +212,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         comet = false;
         
         long soTimeout = endpoint.getSoTimeout();
-        int keepAliveTimeout = endpoint.getKeepAliveTimeout();
 
         boolean keptAlive = false;
         boolean openSocket = false;

==================================================
Http11Processor.java
index ece2c0aa87..1ff59ff4d2 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -277,6 +277,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                     proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
+            processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
             processor.setConnectionUploadTimeout(
                     proto.getConnectionUploadTimeout());
             processor.setDisableUploadTimeout(proto.getDisableUploadTimeout());

==================================================
