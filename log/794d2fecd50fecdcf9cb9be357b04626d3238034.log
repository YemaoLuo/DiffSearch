794d2fecd50fecdcf9cb9be357b04626d3238034
==================================================
Add server key+cert to SSLHostConfig. SNI now working with NIO although much of the config that should be per host is still at the connector level.
==================================================
Mark Thomas
==================================================
Fri Apr 24 18:01:35 2015 +0000
==================================================
AbstractHttp11JsseProtocol.java
Add server key+cert to SSLHostConfig. SNI now working with NIO although much of the config that should be per host is still at the connector level.
Also add the necessary code to SSLHostConfig to warn when OpenSSL config is used with JSSE (or the other way around)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1675908 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 627ca27588..bc384d6c73 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -31,9 +31,6 @@ public abstract class AbstractHttp11JsseProtocol<S>
     public String getClientAuth() { return getEndpoint().getClientAuth();}
     public void setClientAuth(String s ) { getEndpoint().setClientAuth(s);}
 
-    public String getKeystoreFile() { return getEndpoint().getKeystoreFile();}
-    public void setKeystoreFile(String s ) { getEndpoint().setKeystoreFile(s);}
-
     public String getKeystorePass() { return getEndpoint().getKeystorePass();}
     public void setKeystorePass(String s ) { getEndpoint().setKeystorePass(s);}
 

==================================================
Http11AprProtocol.java
index 700f90fb09..6abaa18978 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -363,6 +363,20 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    public void setKeystoreFile(String keystoreFile) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setKeystoreFile(keystoreFile);
+    }
+    public void setCertificateFile(String certificateFile) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateFile(certificateFile);
+    }
+    public void setCertificateKeyFile(String certificateKeyFile) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeyFile(certificateKeyFile);
+    }
+
+
     // ------------------------------------------------------------- Common code
 
     // Common configuration required for all new HTTP11 processors

==================================================
AbstractEndpoint.java
index 0b8bfc98f9..59acc49121 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -98,20 +98,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     public void setSSLHonorCipherOrder(boolean SSLHonorCipherOrder) { ((AprEndpoint)getEndpoint()).setSSLHonorCipherOrder(SSLHonorCipherOrder); }
 
 
-    /**
-     * SSL certificate file.
-     */
-    public String getSSLCertificateFile() { return ((AprEndpoint)getEndpoint()).getSSLCertificateFile(); }
-    public void setSSLCertificateFile(String SSLCertificateFile) { ((AprEndpoint)getEndpoint()).setSSLCertificateFile(SSLCertificateFile); }
-
-
-    /**
-     * SSL certificate key file.
-     */
-    public String getSSLCertificateKeyFile() { return ((AprEndpoint)getEndpoint()).getSSLCertificateKeyFile(); }
-    public void setSSLCertificateKeyFile(String SSLCertificateKeyFile) { ((AprEndpoint)getEndpoint()).setSSLCertificateKeyFile(SSLCertificateKeyFile); }
-
-
     /**
      * SSL certificate chain file.
      */

==================================================
AbstractJsseEndpoint.java
index b1c1f7b828..9b5bb3dcaa 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -227,8 +227,9 @@ public abstract class AbstractEndpoint<S> {
             // TODO i18n
             throw new IllegalArgumentException();
         }
+        sslHostConfig.setConfigType(getSslConfigType());
     }
-
+    protected abstract SSLHostConfig.Type getSslConfigType();
 
     /**
      * Has the user requested that send file be used where possible?
@@ -949,13 +950,6 @@ public abstract class AbstractEndpoint<S> {
     public String getClientAuth() { return clientAuth;}
     public void setClientAuth(String s ) { this.clientAuth = s;}
 
-    private String keystoreFile = System.getProperty("user.home")+"/.keystore";
-    public String getKeystoreFile() { return keystoreFile;}
-    public void setKeystoreFile(String s ) {
-        keystoreFile = adjustRelativePath(s,
-                System.getProperty(Constants.CATALINA_BASE_PROP));
-    }
-
     private String keystorePass = null;
     public String getKeystorePass() { return keystorePass;}
     public void setKeystorePass(String s ) { this.keystorePass = s;}

==================================================
AprEndpoint.java
index 1331437d32..9606e521fd 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -27,6 +27,7 @@ import javax.net.ssl.SSLParameters;
 import javax.net.ssl.SSLSessionContext;
 import javax.net.ssl.X509KeyManager;
 
+import org.apache.tomcat.util.net.SSLHostConfig.Type;
 import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
 
 public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
@@ -39,6 +40,12 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
     }
 
 
+    @Override
+    protected Type getSslConfigType() {
+        return SSLHostConfig.Type.JSSE;
+    }
+
+
     protected void initialiseSsl() throws Exception {
         if (isSSLEnabled()) {
             sslImplementation = SSLImplementation.getInstance(getSslImplementationName());

==================================================
SSLHostConfig.java
index 98d97c9fc5..fd501b5c6e 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -108,3 +108,4 @@ socket.apr.read.sslGeneralError=An APR general error was returned by the SSL rea
 socket.apr.write.error=Unexpected error [{0}] writing data to the APR/native socket [{1}] with wrapper [{2}].
 socket.apr.closed=The socket [{0}] associated with this connection has been closed.
 
+sslHostConfig.mismatch=The property [{0}] was set on the SSLHostConfig named [{1}] but this property is for connectors of type [{2}] by the SSLHostConfig is being used with a connector of type [{3}]
\ No newline at end of file

==================================================
JSSESocketFactory.java
index 823e9dfa44..8dbfe35ca5 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -16,22 +16,72 @@
  */
 package org.apache.tomcat.util.net;
 
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
+
 public class SSLHostConfig {
 
+    private static final Log log = LogFactory.getLog(SSLHostConfig.class);
+    private static final StringManager sm = StringManager.getManager(SSLHostConfig.class);
+
     public static final String DEFAULT_SSL_HOST_NAME = "_default_";
 
+    private Type configType = null;
+    private Map<Type,Set<String>> configuredProperties = new HashMap<>();
+
     private String hostName = DEFAULT_SSL_HOST_NAME;
 
+    // Common
     private Set<String> protocols = new HashSet<>();
+    // JSSE
+    private String keystoreFile = System.getProperty("user.home")+"/.keystore";
+    // OpenSSL
+    private String certificateFile;
+    private String certificateKeyFile;
 
     public SSLHostConfig() {
         // Set defaults that can't be (easily) set when defining the fields.
         setProtocols("all");
     }
 
+
+    public void setConfigType(Type configType) {
+        this.configType = configType;
+        configuredProperties.remove(configType);
+        for (Map.Entry<Type,Set<String>> entry : configuredProperties.entrySet()) {
+            for (String property : entry.getValue()) {
+                log.warn(sm.getString("sslHostConfig.mismatch",
+                        property, getHostName(), entry.getKey(), configType));
+            }
+        }
+    }
+
+
+    private void setProperty(String name, Type configType) {
+        if (this.configType == null) {
+            Set<String> properties = configuredProperties.get(configType);
+            if (properties == null) {
+                properties = new HashSet<>();
+                configuredProperties.put(configType, properties);
+            }
+            properties.add(name);
+        } else {
+            if (configType != this.configType) {
+                log.warn(sm.getString("sslHostConfig.mismatch",
+                        name, getHostName(), configType, this.configType));
+            }
+        }
+    }
+
+
+    // ----------------------------------------- Common configuration properties
+
     public void setHostName(String hostName) {
         this.hostName = hostName;
     }
@@ -66,4 +116,49 @@ public class SSLHostConfig {
     public Set<String> getProtocols() {
         return protocols;
     }
+
+
+    // ---------------------------------- JSSE specific configuration properties
+
+    public void setKeystoreFile(String keystoreFile) {
+        setProperty("keystoreFile", Type.JSSE);
+        this.keystoreFile = keystoreFile;
+    }
+
+
+    public String getKeystoreFile() {
+        return keystoreFile;
+    }
+
+
+    // ------------------------------- OpenSSL specific configuration properties
+
+    public void setCertificateFile(String certificateFile) {
+        setProperty("certificateFile", Type.OPENSSL);
+        this.certificateFile = certificateFile;
+    }
+
+
+    public String getCertificateFile() {
+        return certificateFile;
+    }
+
+
+    public void setCertificateKeyFile(String certificateKeyFile) {
+        setProperty("certificateKeyFile", Type.OPENSSL);
+        this.certificateKeyFile = certificateKeyFile;
+    }
+
+
+    public String getCertificateKeyFile() {
+        return certificateKeyFile;
+    }
+
+
+    // ----------------------------------------------------------- Inner classes
+
+    public static enum Type {
+        JSSE,
+        OPENSSL
+    }
 }

==================================================
