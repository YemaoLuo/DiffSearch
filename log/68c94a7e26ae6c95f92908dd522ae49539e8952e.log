68c94a7e26ae6c95f92908dd522ae49539e8952e
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59284
==================================================
Mark Thomas
==================================================
Thu Apr 14 20:50:11 2016 +0000
==================================================
SimpleServerAuthConfig.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59284
Allow the Tomcat provided JASPIC SimpleServerAuthConfig to pick up module confiuration properties from either the property set passed to its constructor or from the properties passed in the call to getAuthContext.
Based on a patch by Thomas Maslen.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1739191 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestSimpleServerAuthConfig.java
index fcf6f78073..7fa5b32756 100644
--- a/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
@@ -102,16 +102,14 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
                     if (this.properties != null) {
                         mergedProperties.putAll(this.properties);
                     }
-                    if (properties == null) {
-                        throw new AuthException(sm.getString("simpleServerAuthConfig.noModules"));
-                    } else {
+                    if (properties != null) {
                         mergedProperties.putAll(properties);
                     }
 
                     List<ServerAuthModule> modules = new ArrayList<>();
                     int moduleIndex = 1;
                     String key = SERVER_AUTH_MODULE_KEY_PREFIX + moduleIndex;
-                    String moduleClassName = (String) properties.get(key);
+                    String moduleClassName = mergedProperties.get(key);
                     while (moduleClassName != null) {
                         try {
                             Class<?> clazz = Class.forName(moduleClassName);
@@ -127,7 +125,7 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
                         // Look for the next module
                         moduleIndex++;
                         key = SERVER_AUTH_MODULE_KEY_PREFIX + moduleIndex;
-                        moduleClassName = (String) properties.get(key);
+                        moduleClassName = mergedProperties.get(key);
                     }
 
                     if (modules.size() == 0) {

==================================================
TesterMessageInfo.java
new file mode 100644
index 0000000000..b663c8736d
--- /dev/null
+++ b/test/org/apache/catalina/authenticator/jaspic/TestSimpleServerAuthConfig.java
@@ -0,0 +1,74 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.MessageInfo;
+import javax.security.auth.message.config.ServerAuthConfig;
+import javax.security.auth.message.config.ServerAuthContext;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestSimpleServerAuthConfig {
+
+    private static final String SERVER_AUTH_MODULE_KEY_PREFIX =
+            "org.apache.catalina.authenticator.jaspic.ServerAuthModule.";
+
+    private static final Map<String,String> CONFIG_PROPERTIES;
+    static {
+        CONFIG_PROPERTIES = new HashMap<>();
+        CONFIG_PROPERTIES.put(SERVER_AUTH_MODULE_KEY_PREFIX + "1",
+                TesterServerAuthModuleA.class.getName());
+    }
+
+    @Test
+    public void testConfigOnServerAuthConfig() throws Exception {
+        ServerAuthConfig serverAuthConfig =
+                new SimpleServerAuthConfig(null,  null, null, CONFIG_PROPERTIES);
+        ServerAuthContext serverAuthContext = serverAuthConfig.getAuthContext(null, null, null);
+
+        validateServerAuthContext(serverAuthContext);
+    }
+
+
+    @Test
+    public void testConfigOnGetAuthContext() throws Exception {
+        ServerAuthConfig serverAuthConfig = new SimpleServerAuthConfig(null,  null, null, null);
+        ServerAuthContext serverAuthContext =
+                serverAuthConfig.getAuthContext(null, null, CONFIG_PROPERTIES);
+
+        validateServerAuthContext(serverAuthContext);
+    }
+
+
+    @Test(expected=AuthException.class)
+    public void testConfigNone() throws Exception {
+        ServerAuthConfig serverAuthConfig = new SimpleServerAuthConfig(null,  null, null, null);
+        serverAuthConfig.getAuthContext(null, null, null);
+    }
+
+
+    private void validateServerAuthContext(ServerAuthContext serverAuthContext) throws Exception {
+        MessageInfo msgInfo = new TesterMessageInfo();
+        serverAuthContext.cleanSubject(msgInfo, null);
+        Assert.assertEquals("init()-cleanSubject()-", msgInfo.getMap().get("trace"));
+    }
+}

==================================================
TesterServerAuthModuleA.java
new file mode 100644
index 0000000000..ba8592ed08
--- /dev/null
+++ b/test/org/apache/catalina/authenticator/jaspic/TesterMessageInfo.java
@@ -0,0 +1,55 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.security.auth.message.MessageInfo;
+
+public class TesterMessageInfo implements MessageInfo {
+
+    private Object requestMessage;
+    private Object responseMessage;
+    private final Map<String,String> map = new HashMap<>();
+
+    @Override
+    public Object getRequestMessage() {
+        return requestMessage;
+    }
+
+    @Override
+    public Object getResponseMessage() {
+        return responseMessage;
+    }
+
+    @Override
+    public void setRequestMessage(Object request) {
+        requestMessage = request;
+    }
+
+    @Override
+    public void setResponseMessage(Object response) {
+        responseMessage = response;
+    }
+
+    @SuppressWarnings("rawtypes")
+    @Override
+    public Map getMap() {
+        return map;
+    }
+}

==================================================
