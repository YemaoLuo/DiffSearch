ef80739b368fe61bc742700caf9d630c96a85315
==================================================
Servlet 3.1 non-blocking refactoring
==================================================
Mark Emlyn
==================================================
Fri May 3 10:15:06 2013 +0000
==================================================
AbstractHttp11Processor.java
Servlet 3.1 non-blocking refactoring
Pull up InputBuffer to AbstractHttp11Processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478713 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractInputBuffer.java
index 82e2fc2934..22fa4b3e08 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -64,6 +64,12 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         StringManager.getManager(Constants.Package);
 
 
+    /**
+     * Input.
+     */
+    protected AbstractInputBuffer<S> inputBuffer ;
+
+
     /**
      * Output.
      */

==================================================
Http11AprProcessor.java
index aa0b13d829..834c61c382 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -238,9 +238,14 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
     protected abstract void init(SocketWrapper<S> socketWrapper,
             AbstractEndpoint endpoint) throws IOException;
 
+    /**
+     * Issues a non blocking read.
+     * @return int  Number of bytes read
+     */
+    protected abstract int nbRead() throws IOException;
 
-    // --------------------------------------------------------- Public Methods
 
+    // --------------------------------------------------------- Public Methods
 
     /**
      * Recycle the input buffer. This should be called when closing the

==================================================
Http11NioProcessor.java
index ed456f5f68..23788655c1 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -74,13 +74,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
 
     // ----------------------------------------------------- Instance Variables
 
-
-    /**
-     * Input.
-     */
-    protected final InternalAprInputBuffer inputBuffer;
-
-
     /**
      * Sendfile data.
      */

==================================================
Http11Processor.java
index 036e449d5a..f3351e29f9 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -79,11 +79,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
 
 
     // ----------------------------------------------------- Instance Variables
-    /**
-     * Input.
-     */
-    protected final InternalNioInputBuffer inputBuffer;
-
 
     /**
      * Sendfile data.
@@ -283,7 +278,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         // open
         openSocket = true;
         // Check to see if we have read any of the request line yet
-        if (inputBuffer.getParsingRequestLinePhase() < 2) {
+        if (((InternalNioInputBuffer)
+                inputBuffer).getParsingRequestLinePhase() < 2) {
             if (socket.getLastAccess() > -1 || keptAlive) {
                 // Haven't read the request line and have previously processed a
                 // request. Must be keep-alive. Make sure poller uses keepAlive.

==================================================
InternalAprInputBuffer.java
index aad66017e2..756e631962 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -66,13 +66,6 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
 
     // ----------------------------------------------------- Instance Variables
 
-
-    /**
-     * Input.
-     */
-    protected final InternalInputBuffer inputBuffer ;
-
-
     /**
      * SSL information.
      */
@@ -164,7 +157,8 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
                 }
             }
             socket.getSocket().setSoTimeout(firstReadTimeout);
-            if (!inputBuffer.fill()) {
+            // Blocking IO so fill() always blocks
+            if (!inputBuffer.fill(true)) {
                 throw new EOFException(sm.getString("iib.eof.error"));
             }
             // Once the first byte has been read, the standard timeout should be

==================================================
InternalInputBuffer.java
index 7dc9d80e94..f3acb7b5a0 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -629,9 +629,15 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
     }
 
 
-    // ------------------------------------- InputStreamInputBuffer Inner Class
+    @Override
+    protected int nbRead() throws IOException {
+        // TODO Auto-generated method stub
+        return 0;
+    }
 
 
+    // ------------------------------------- InputStreamInputBuffer Inner Class
+
     /**
      * This class is an input buffer which will read its data from an input
      * stream.

==================================================
InternalNioInputBuffer.java
index aa47182a64..645596f13f 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -547,9 +547,15 @@ public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
     }
 
 
-    // ------------------------------------- InputStreamInputBuffer Inner Class
+    @Override
+    protected int nbRead() throws IOException {
+        // TODO Auto-generated method stub
+        return 0;
+    }
 
 
+    // ------------------------------------- InputStreamInputBuffer Inner Class
+
     /**
      * This class is an input buffer which will read its data from an input
      * stream.

==================================================
