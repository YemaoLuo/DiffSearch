83226d99cc91396cee328ae6b2478d749b4932b7
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48662
==================================================
Mark Emlyn
==================================================
Sun Mar 28 11:57:46 2010 +0000
==================================================
Context.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48662
Make extraction of context.xml files configurable and disable it by default for Tomcat 7

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@928380 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index e55b728572..53c49746c8 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -19,6 +19,8 @@
 package org.apache.catalina;
 
 
+import java.net.URL;
+
 import javax.servlet.ServletContext;
 import javax.servlet.descriptor.JspConfigDescriptor;
 
@@ -133,17 +135,17 @@ public interface Context extends Container {
 
 
     /**
-     * Return the path to a file to save this Context information.
+     * Return the URL of the XML descriptor for this context.
      */
-    public String getConfigFile();
+    public URL getConfigFile();
 
 
     /**
-     * Set the path to a file to save this Context information.
+     * Set the URL of the XML descriptor for this context.
      *
-     * @param configFile The path to a file to save this Context information.
+     * @param configFile The URL of the XML descriptor for this context.
      */
-    public void setConfigFile(String configFile);
+    public void setConfigFile(URL configFile);
 
 
     /**

==================================================
StandardHost.java
index 03d9d6da46..0d6878f2ad 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -23,6 +23,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Hashtable;
@@ -255,9 +256,9 @@ public class StandardContext
 
 
     /**
-     * The path to a file to save this Context information.
+     * The URL of the XML descriptor for this context.
      */
-    private String configFile = null;
+    private URL configFile = null;
 
 
     /**
@@ -1196,9 +1197,9 @@ public class StandardContext
     }
 
     /**
-     * Return the path to a file to save this Context information.
+     * Return the URL of the XML descriptor for this context.
      */
-    public String getConfigFile() {
+    public URL getConfigFile() {
 
         return (this.configFile);
 
@@ -1206,11 +1207,11 @@ public class StandardContext
 
 
     /**
-     * Set the path to a file to save this Context information.
+     * Set the URL of the XML descriptor for this context.
      *
-     * @param configFile The path to a file to save this Context information.
+     * @param configFile The URL of the XML descriptor for this context.
      */
-    public void setConfigFile(String configFile) {
+    public void setConfigFile(URL configFile) {
 
         this.configFile = configFile;
     }

==================================================
MBeanFactory.java
index 5526e2c31c..fffe1c1789 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -130,6 +130,13 @@ public class StandardHost
     private boolean deployXML = true;
 
 
+    /**
+     * Should XML files be copied to $CATALINA_BASE/conf/<engine>/<host> by
+     * default when a web application is deployed?
+     */
+    private boolean copyXML = false;
+
+
     /**
      * The Java class name of the default error reporter implementation class 
      * for deployed web applications.
@@ -377,6 +384,28 @@ public class StandardHost
     }
 
 
+    /**
+     * Return the copy XML config file flag for this component.
+     */
+    public boolean isCopyXML() {
+
+        return (this.copyXML);
+
+    }
+
+
+    /**
+     * Set the copy XML config file flag for this component.
+     *
+     * @param copyXML The new copy XML flag
+     */
+    public void setCopyXML(boolean copyXML) {
+
+        this.copyXML= copyXML;
+
+    }
+    
+    
     /**
      * Return the value of the live deploy flag.  If true, it indicates that 
      * a background thread should be started that looks for web application

==================================================
ContextConfig.java
index 7e62ad56f6..e63b7c5f93 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -611,7 +611,7 @@ public class MBeanFactory extends BaseModelMBean {
                                                              "configBaseName");
             String baseName = getConfigFile(contextPath);
             File configFile = new File(new File(configPath), baseName+".xml");
-            context.setConfigFile(configFile.getAbsolutePath());
+            context.setConfigFile(configFile.toURI().toURL());
             mserver.invoke(deployer, "manageApp",
                            new Object[] {context},
                            new String[] {"org.apache.catalina.Context"});

==================================================
HostConfig.java
index 843e0ab19c..25faae0e92 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -518,11 +518,31 @@ public class ContextConfig
         if( defaultContextXml==null ) getDefaultContextXml();
 
         if (!context.getOverride()) {
-            processContextConfig(new File(getBaseDir()), defaultContextXml);
-            processContextConfig(getConfigBase(), getHostConfigPath(Constants.HostContextXml));
+            File defaultContextFile = new File(getBaseDir(), defaultContextXml);
+            if (defaultContextFile.exists()) {
+                try {
+                    URL defaultContextUrl = defaultContextFile.toURI().toURL();
+                    processContextConfig(defaultContextUrl);
+                } catch (MalformedURLException e) {
+                    log.error(sm.getString(
+                            "contextConfig.badUrl", defaultContextFile), e);
+                }
+            }
+            
+            File hostContextFile = new File(getConfigBase(),
+                    getHostConfigPath(Constants.HostContextXml));
+            if (hostContextFile.exists()) {
+                try {
+                    URL hostContextUrl = hostContextFile.toURI().toURL();
+                    processContextConfig(hostContextUrl);
+                } catch (MalformedURLException e) {
+                    log.error(sm.getString(
+                            "contextConfig.badUrl", hostContextFile), e);
+                }
+            }
         }
         if (context.getConfigFile() != null)
-            processContextConfig(new File(context.getConfigFile()), null);
+            processContextConfig(context.getConfigFile());
         
     }
 
@@ -530,43 +550,28 @@ public class ContextConfig
     /**
      * Process a context.xml.
      */
-    protected void processContextConfig(File baseDir, String resourceName) {
+    protected void processContextConfig(URL contextXml) {
         
         if (log.isDebugEnabled())
             log.debug("Processing context [" + context.getName() 
-                    + "] configuration file " + baseDir + " " + resourceName);
+                    + "] configuration file [" + contextXml + "]");
 
         InputSource source = null;
         InputStream stream = null;
 
-        File file = baseDir;
-        if (resourceName != null) {
-            file = new File(baseDir, resourceName);
-        }
-        
         try {
-            if ( !file.exists() ) {
-                if (resourceName != null) {
-                    // Use getResource and getResourceAsStream
-                    stream = getClass().getClassLoader()
-                        .getResourceAsStream(resourceName);
-                    if( stream != null ) {
-                        source = new InputSource
-                            (getClass().getClassLoader()
-                            .getResource(resourceName).toString());
-                    }
-                }
-            } else {
-                source =
-                    new InputSource("file://" + file.getAbsolutePath());
-                stream = new FileInputStream(file);
-                // Add as watched resource so that cascade reload occurs if a default
-                // config file is modified/added/removed
-                context.addWatchedResource(file.getAbsolutePath());
+            source = new InputSource(contextXml.toString());
+            stream = contextXml.openStream();
+            
+            // Add as watched resource so that cascade reload occurs if a default
+            // config file is modified/added/removed
+            if (contextXml.getProtocol() == "file") {
+                context.addWatchedResource(
+                        (new File(contextXml.toURI())).getAbsolutePath());
             }
         } catch (Exception e) {
             log.error(sm.getString("contextConfig.contextMissing",  
-                      resourceName + " " + file) , e);
+                      contextXml) , e);
         }
         
         if (source == null)
@@ -586,7 +591,7 @@ public class ContextConfig
                 }
                 if (log.isDebugEnabled())
                     log.debug("Successfully processed context [" + context.getName() 
-                            + "] configuration file " + baseDir + " " + resourceName);
+                            + "] configuration file [" + contextXml + "]");
             } catch (SAXParseException e) {
                 log.error(sm.getString("contextConfig.contextParse",
                         context.getName()), e);

==================================================
