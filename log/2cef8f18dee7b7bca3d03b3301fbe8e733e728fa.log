2cef8f18dee7b7bca3d03b3301fbe8e733e728fa
==================================================
Change forcedRemainingCapacity from Integer to int
==================================================
Martin Tzvetanov
==================================================
Tue Aug 25 14:36:23 2020 +0300
==================================================
TaskQueue.java
Change forcedRemainingCapacity from Integer to int

No need to create object (or use Integer cache) and cast it to primitive int.
'forcedRemainingCapacity' can do its job with a primitive int, since Queue's capacity cannot be negative value



==================================================
ThreadPoolExecutor.java
index 87c93a9a8e..35f1d89e10 100644
--- a/java/org/apache/tomcat/util/threads/TaskQueue.java
+++ b/java/org/apache/tomcat/util/threads/TaskQueue.java
@@ -35,12 +35,13 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
     private static final long serialVersionUID = 1L;
     protected static final StringManager sm = StringManager
             .getManager("org.apache.tomcat.util.threads.res");
+    private static final int DEFAULT_FORCED_REMAINING_CAPACITY = -1;
 
     private transient volatile ThreadPoolExecutor parent = null;
 
     // No need to be volatile. This is written and read in a single thread
-    // (when stopping a context and firing the  listeners)
-    private Integer forcedRemainingCapacity = null;
+    // (when stopping a context and firing the listeners)
+    private int forcedRemainingCapacity = -1;
 
     public TaskQueue() {
         super();
@@ -109,18 +110,22 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
 
     @Override
     public int remainingCapacity() {
-        if (forcedRemainingCapacity != null) {
+        if (forcedRemainingCapacity > DEFAULT_FORCED_REMAINING_CAPACITY) {
             // ThreadPoolExecutor.setCorePoolSize checks that
             // remainingCapacity==0 to allow to interrupt idle threads
             // I don't see why, but this hack allows to conform to this
             // "requirement"
-            return forcedRemainingCapacity.intValue();
+            return forcedRemainingCapacity;
         }
         return super.remainingCapacity();
     }
 
-    public void setForcedRemainingCapacity(Integer forcedRemainingCapacity) {
+    public void setForcedRemainingCapacity(int forcedRemainingCapacity) {
         this.forcedRemainingCapacity = forcedRemainingCapacity;
     }
 
+    void resetForcedRemainingCapacity() {
+        this.forcedRemainingCapacity = DEFAULT_FORCED_REMAINING_CAPACITY;
+    }
+
 }

==================================================
