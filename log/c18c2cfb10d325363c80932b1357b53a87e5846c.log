c18c2cfb10d325363c80932b1357b53a87e5846c
==================================================
Refactoring towards v014 API (not yet complete)
==================================================
Mark Emlyn
==================================================
Wed Mar 6 14:45:24 2013 +0000
==================================================
ContainerProvider.java
Refactoring towards v014 API (not yet complete)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1453350 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DefaultServerEndpointConfig.java
index b3b24a3909..774efe2657 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -38,7 +38,7 @@ public abstract class ContainerProvider {
                 ServiceLoader.load(ContainerProvider.class);
         Iterator<ContainerProvider> iter = serviceLoader.iterator();
         while (result == null && iter.hasNext()) {
-            result = iter.next().getContainer(WebSocketContainer.class);
+            result = iter.next().getContainer();
         }
 
         // Fall-back. Also used by unit tests
@@ -56,5 +56,5 @@ public abstract class ContainerProvider {
         return result;
     }
 
-    protected abstract <T> T getContainer(Class<T> containerClass);
+    protected abstract WebSocketContainer getContainer();
 }

==================================================
ServerApplicationConfig.java
similarity index 85%
rename from java/javax/websocket/server/DefaultServerEndpointConfiguration.java
rename to java/javax/websocket/server/DefaultServerEndpointConfig.java
index 6cff5b1d3d..70ec30bc1a 100644
--- a/java/javax/websocket/server/DefaultServerEndpointConfiguration.java
+++ b/java/javax/websocket/server/DefaultServerEndpointConfig.java
@@ -27,8 +27,7 @@ import javax.websocket.Extension;
 /**
  * Provides the default configuration for WebSocket server endpoints.
  */
-public class DefaultServerEndpointConfiguration
-        implements ServerEndpointConfiguration {
+final class DefaultServerEndpointConfig implements ServerEndpointConfig {
 
     private final Class<?> endpointClass;
     private final String path;
@@ -36,15 +35,15 @@ public class DefaultServerEndpointConfiguration
     private final List<Extension> extensions;
     private final List<Class<? extends Encoder>> encoders;
     private final List<Class<? extends Decoder>> decoders;
-    private final ServerEndpointConfigurator serverEndpointConfigurator;
+    private final Configurator serverEndpointConfigurator;
     private final Map<String,Object> userProperties = new HashMap<>();
 
-    DefaultServerEndpointConfiguration(
+    DefaultServerEndpointConfig(
             Class<?> endpointClass, String path,
             List<String> subprotocols, List<Extension> extensions,
             List<Class<? extends Encoder>> encoders,
             List<Class<? extends Decoder>> decoders,
-            ServerEndpointConfigurator serverEndpointConfigurator) {
+            Configurator serverEndpointConfigurator) {
         this.endpointClass = endpointClass;
         this.path = path;
         this.subprotocols = subprotocols;
@@ -75,7 +74,7 @@ public class DefaultServerEndpointConfiguration
     }
 
     @Override
-    public ServerEndpointConfigurator getServerEndpointConfigurator() {
+    public Configurator getConfigurator() {
         return serverEndpointConfigurator;
     }
 
@@ -85,12 +84,12 @@ public class DefaultServerEndpointConfiguration
     }
 
     @Override
-    public List<String> getSubprotocols() {
+    public final List<String> getSubprotocols() {
         return subprotocols;
     }
 
     @Override
-    public List<Extension> getExtensions() {
+    public final List<Extension> getExtensions() {
         return extensions;
     }
 }

==================================================
ServerEndpoint.java
similarity index 88%
rename from java/javax/websocket/server/ServerApplicationConfiguration.java
rename to java/javax/websocket/server/ServerApplicationConfig.java
index 0ef2f11d26..b8fc7fa335 100644
--- a/java/javax/websocket/server/ServerApplicationConfiguration.java
+++ b/java/javax/websocket/server/ServerApplicationConfig.java
@@ -20,9 +20,9 @@ import java.util.Set;
 
 import javax.websocket.Endpoint;
 
-public interface ServerApplicationConfiguration {
+public interface ServerApplicationConfig {
 
-    Set<Class<? extends ServerEndpointConfiguration>> getEndpointConfiguration(
+    Set<Class<? extends ServerEndpointConfig>> getEndpointConfiguration(
             Set<Class<? extends Endpoint>> scanned);
 
     Set<Class<?>> getAnnotatedEndpointClasses(Set<Class<?>> scanned);

==================================================
ServerEndpointConfig.java
index 0811210bb2..ae16660a5c 100644
--- a/java/javax/websocket/server/ServerEndpoint.java
+++ b/java/javax/websocket/server/ServerEndpoint.java
@@ -39,6 +39,6 @@ public @interface ServerEndpoint {
 
     Class<? extends Encoder>[] encoders() default {};
 
-    public Class<? extends ServerEndpointConfigurator> configurator()
-            default ServerEndpointConfigurator.class;
+    public Class<? extends ServerEndpointConfig.Configurator> configurator()
+            default ServerEndpointConfig.Configurator.class;
 }

==================================================
ServerEndpointConfiguration.java
new file mode 100644
index 0000000000..180325e6b5
--- /dev/null
+++ b/java/javax/websocket/server/ServerEndpointConfig.java
@@ -0,0 +1,213 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket.server;
+
+import java.net.URI;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.ServiceLoader;
+
+import javax.websocket.Decoder;
+import javax.websocket.Encoder;
+import javax.websocket.EndpointConfig;
+import javax.websocket.Extension;
+import javax.websocket.HandshakeResponse;
+
+/**
+ * Provides configuration information for WebSocket endpoints published to a
+ * server. Applications may provide their own implementation or use
+ * {@link Builder}.
+ */
+public interface ServerEndpointConfig extends EndpointConfig {
+
+    Class<?> getEndpointClass();
+
+    /**
+     * Returns the path at which this WebSocket server endpoint has been
+     * registered. It may be a path or a level 0 URI template.
+     */
+    String getPath();
+
+    List<String> getSubprotocols();
+
+    List<Extension> getExtensions();
+
+    Configurator getConfigurator();
+
+
+    public final class Builder {
+
+        public static Builder create(
+                Class<?> endpointClass, String path) {
+            return new Builder(endpointClass, path);
+        }
+
+
+        private final Class<?> endpointClass;
+        private final String path;
+        private List<Class<? extends Encoder>> encoders = Collections.EMPTY_LIST;
+        private List<Class<? extends Decoder>> decoders = Collections.EMPTY_LIST;
+        private List<String> subprotocols = Collections.EMPTY_LIST;
+        private List<Extension> extensions = Collections.EMPTY_LIST;
+        private Configurator configurator =
+                Configurator.fetchContainerDefaultConfigurator();
+
+
+        private Builder(Class<?> endpointClass,
+                String path) {
+            this.endpointClass = endpointClass;
+            this.path = path;
+        }
+
+        public ServerEndpointConfig build() {
+            return new DefaultServerEndpointConfig(endpointClass, path,
+                    subprotocols, extensions, encoders, decoders, configurator);
+        }
+
+
+        public Builder encoders(
+                List<Class<? extends Encoder>> encoders) {
+            if (encoders == null || encoders.size() == 0) {
+                this.encoders = Collections.EMPTY_LIST;
+            } else {
+                this.encoders = Collections.unmodifiableList(encoders);
+            }
+            return this;
+        }
+
+
+        public Builder decoders(
+                List<Class<? extends Decoder>> decoders) {
+            if (decoders == null || decoders.size() == 0) {
+                this.decoders = Collections.EMPTY_LIST;
+            } else {
+                this.decoders = Collections.unmodifiableList(decoders);
+            }
+            return this;
+        }
+
+
+        public Builder subprotocols(
+                List<String> subprotocols) {
+            if (subprotocols == null || subprotocols.size() == 0) {
+                this.subprotocols = Collections.EMPTY_LIST;
+            } else {
+                this.subprotocols = Collections.unmodifiableList(subprotocols);
+            }
+            return this;
+        }
+
+
+        public Builder extensions(
+                List<Extension> extensions) {
+            if (extensions == null || extensions.size() == 0) {
+                this.extensions = Collections.EMPTY_LIST;
+            } else {
+                this.extensions = Collections.unmodifiableList(extensions);
+            }
+            return this;
+        }
+
+
+        public Builder configurator(Configurator serverEndpointConfigurator) {
+            if (serverEndpointConfigurator == null) {
+                this.configurator = Configurator.fetchContainerDefaultConfigurator();
+            } else {
+                this.configurator = serverEndpointConfigurator;
+            }
+            return this;
+        }
+    }
+
+
+    public abstract class Configurator {
+
+        private static volatile Configurator defaultImpl = null;
+        private static final Object defaultImplLock = new Object();
+
+        private static final String DEFAULT_IMPL_CLASSNAME =
+                "org.apache.tomcat.websocket.server.DefaultServerEndpointConfigurator";
+
+        static Configurator fetchContainerDefaultConfigurator() {
+            if (defaultImpl == null) {
+                synchronized (defaultImplLock) {
+                    if (defaultImpl == null) {
+                        defaultImpl = loadDefault();
+                    }
+                }
+            }
+            return defaultImpl;
+        }
+
+
+        private static Configurator loadDefault() {
+            Configurator result = null;
+
+            ServiceLoader<Configurator> serviceLoader =
+                    ServiceLoader.load(Configurator.class);
+
+            Iterator<Configurator> iter = serviceLoader.iterator();
+            while (result == null && iter.hasNext()) {
+                result = iter.next();
+            }
+
+            // Fall-back. Also used by unit tests
+            if (result == null) {
+                try {
+                    Class<Configurator> clazz =
+                            (Class<Configurator>) Class.forName(
+                                    DEFAULT_IMPL_CLASSNAME);
+                    result = clazz.newInstance();
+                } catch (ClassNotFoundException | InstantiationException |
+                        IllegalAccessException e) {
+                    // No options left. Just return null.
+                }
+            }
+            return result;
+        }
+
+        public String getNegotiatedSubprotocol(List<String> supported,
+                List<String> requested) {
+            return fetchContainerDefaultConfigurator().getNegotiatedSubprotocol(supported, requested);
+        }
+
+
+        public List<Extension> getNegotiatedExtensions(List<Extension> installed,
+                List<Extension> requested) {
+            return fetchContainerDefaultConfigurator().getNegotiatedExtensions(installed, requested);
+        }
+
+
+        public boolean checkOrigin(String originHeaderValue) {
+            return fetchContainerDefaultConfigurator().checkOrigin(originHeaderValue);
+        }
+
+
+        public boolean matchesURI(String path, URI requestUri,
+                Map<String, String> templateExpansion) {
+            return fetchContainerDefaultConfigurator().matchesURI(path, requestUri, templateExpansion);
+        }
+
+
+        public void modifyHandshake(ServerEndpointConfig sec,
+                HandshakeRequest request, HandshakeResponse response) {
+            fetchContainerDefaultConfigurator().modifyHandshake(sec, request, response);
+        }
+    }
+}

==================================================
ServerEndpointConfigurationBuilder.java
deleted file mode 100644
index 999f95dcaf..0000000000
--- a/java/javax/websocket/server/ServerEndpointConfiguration.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket.server;
-
-import java.util.List;
-
-import javax.websocket.EndpointConfig;
-import javax.websocket.Extension;
-
-/**
- * Provides configuration information for WebSocket endpoints published to a
- * server. Applications may provide their own implementation or use
- * {@link ServerEndpointConfigurationBuilder}.
- */
-public interface ServerEndpointConfiguration extends EndpointConfig {
-
-    Class<?> getEndpointClass();
-
-    List<String> getSubprotocols();
-
-    List<Extension> getExtensions();
-
-    /**
-     * Returns the path at which this WebSocket server endpoint has been
-     * registered. It may be a path or a level 0 URI template.
-     */
-    String getPath();
-
-    ServerEndpointConfigurator getServerEndpointConfigurator();
-}

==================================================
ServerEndpointConfigurator.java
deleted file mode 100644
index 3c81f05a57..0000000000
--- a/java/javax/websocket/server/ServerEndpointConfigurationBuilder.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket.server;
-
-import java.util.Collections;
-import java.util.List;
-
-import javax.websocket.Decoder;
-import javax.websocket.Encoder;
-import javax.websocket.Extension;
-
-public class ServerEndpointConfigurationBuilder {
-
-    public static ServerEndpointConfigurationBuilder create(
-            Class<?> endpointClass, String path) {
-        return new ServerEndpointConfigurationBuilder(endpointClass, path);
-    }
-
-
-    private final Class<?> endpointClass;
-    private final String path;
-    private List<Class<? extends Encoder>> encoders = Collections.EMPTY_LIST;
-    private List<Class<? extends Decoder>> decoders = Collections.EMPTY_LIST;
-    private List<String> subprotocols = Collections.EMPTY_LIST;
-    private List<Extension> extensions = Collections.EMPTY_LIST;
-    private ServerEndpointConfigurator configurator =
-            ServerEndpointConfigurator.getDefault();
-
-
-    private ServerEndpointConfigurationBuilder(Class<?> endpointClass,
-            String path) {
-        this.endpointClass = endpointClass;
-        this.path = path;
-    }
-
-    public ServerEndpointConfiguration build() {
-        return new DefaultServerEndpointConfiguration(endpointClass, path,
-                subprotocols, extensions, encoders, decoders, configurator);
-    }
-
-
-    public ServerEndpointConfigurationBuilder encoders(
-            List<Class<? extends Encoder>> encoders) {
-        if (encoders == null || encoders.size() == 0) {
-            this.encoders = Collections.EMPTY_LIST;
-        } else {
-            this.encoders = Collections.unmodifiableList(encoders);
-        }
-        return this;
-    }
-
-
-    public ServerEndpointConfigurationBuilder decoders(
-            List<Class<? extends Decoder>> decoders) {
-        if (decoders == null || decoders.size() == 0) {
-            this.decoders = Collections.EMPTY_LIST;
-        } else {
-            this.decoders = Collections.unmodifiableList(decoders);
-        }
-        return this;
-    }
-
-
-    public ServerEndpointConfigurationBuilder subprotocols(
-            List<String> subprotocols) {
-        if (subprotocols == null || subprotocols.size() == 0) {
-            this.subprotocols = Collections.EMPTY_LIST;
-        } else {
-            this.subprotocols = Collections.unmodifiableList(subprotocols);
-        }
-        return this;
-    }
-
-
-    public ServerEndpointConfigurationBuilder extensions(
-            List<Extension> extensions) {
-        if (extensions == null || extensions.size() == 0) {
-            this.extensions = Collections.EMPTY_LIST;
-        } else {
-            this.extensions = Collections.unmodifiableList(extensions);
-        }
-        return this;
-    }
-
-
-    public ServerEndpointConfigurationBuilder serverEndpointConfigurator(
-            ServerEndpointConfigurator serverEndpointConfigurator) {
-        if (serverEndpointConfigurator == null) {
-            this.configurator = ServerEndpointConfigurator.getDefault();
-        } else {
-            this.configurator = serverEndpointConfigurator;
-        }
-        return this;
-    }
-}

==================================================
WsContainerProvider.java
deleted file mode 100644
index 5dab0bfe6d..0000000000
--- a/java/javax/websocket/server/ServerEndpointConfigurator.java
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket.server;
-
-import java.net.URI;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.ServiceLoader;
-
-import javax.websocket.Extension;
-import javax.websocket.HandshakeResponse;
-
-public abstract class ServerEndpointConfigurator {
-
-    private static volatile ServerEndpointConfigurator defaultImpl = null;
-    private static final Object defaultImplLock = new Object();
-
-    private static final String DEFAULT_IMPL_CLASSNAME =
-            "org.apache.tomcat.websocket.server.DefaultServerEndpointConfigurator";
-
-    static ServerEndpointConfigurator getDefault() {
-        if (defaultImpl == null) {
-            synchronized (defaultImplLock) {
-                if (defaultImpl == null) {
-                    defaultImpl = loadDefault();
-                }
-            }
-        }
-        return defaultImpl;
-    }
-
-
-    private static ServerEndpointConfigurator loadDefault() {
-        ServerEndpointConfigurator result = null;
-
-        ServiceLoader<ServerEndpointConfigurator> serviceLoader =
-                ServiceLoader.load(ServerEndpointConfigurator.class);
-
-        Iterator<ServerEndpointConfigurator> iter = serviceLoader.iterator();
-        while (result == null && iter.hasNext()) {
-            result = iter.next();
-        }
-
-        // Fall-back. Also used by unit tests
-        if (result == null) {
-            try {
-                Class<ServerEndpointConfigurator> clazz =
-                        (Class<ServerEndpointConfigurator>) Class.forName(
-                                DEFAULT_IMPL_CLASSNAME);
-                result = clazz.newInstance();
-            } catch (ClassNotFoundException | InstantiationException |
-                    IllegalAccessException e) {
-                // No options left. Just return null.
-            }
-        }
-        return result;
-    }
-
-    public String getNegotiatedSubprotocol(List<String> supported,
-            List<String> requested) {
-        return getDefault().getNegotiatedSubprotocol(supported, requested);
-    }
-
-
-    public List<Extension> getNegotiatedExtensions(List<Extension> installed,
-            List<Extension> requested) {
-        return getDefault().getNegotiatedExtensions(installed, requested);
-    }
-
-
-    public boolean checkOrigin(String originHeaderValue) {
-        return getDefault().checkOrigin(originHeaderValue);
-    }
-
-
-    public boolean matchesURI(String path, URI requestUri,
-            Map<String, String> templateExpansion) {
-        return getDefault().matchesURI(path, requestUri, templateExpansion);
-    }
-
-
-    public void modifyHandshake(ServerEndpointConfiguration sec,
-            HandshakeRequest request, HandshakeResponse response) {
-        getDefault().modifyHandshake(sec, request, response);
-    }
-}

==================================================
PojoEndpoint.java
index fe463302fa..654ad79077 100644
--- a/java/org/apache/tomcat/websocket/WsContainerProvider.java
+++ b/java/org/apache/tomcat/websocket/WsContainerProvider.java
@@ -17,18 +17,12 @@
 package org.apache.tomcat.websocket;
 
 import javax.websocket.ContainerProvider;
+import javax.websocket.WebSocketContainer;
 
 public class WsContainerProvider extends ContainerProvider {
 
     @Override
-    protected <T> T getContainer(Class<T> containerClass) {
-        if (containerClass.isAssignableFrom(WsWebSocketContainer.class)) {
-            @SuppressWarnings("unchecked")
-            T result = (T) new WsWebSocketContainer();
-            return result;
-        } else {
-            // Not supported
-            return null;
-        }
+    protected WebSocketContainer getContainer() {
+        return new WsWebSocketContainer();
     }
 }

==================================================
DefaultServerEndpointConfigurator.java
index e26e1d8942..0eaab03b1f 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
@@ -24,7 +24,7 @@ import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfig;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
-import javax.websocket.server.ServerEndpointConfiguration;
+import javax.websocket.server.ServerEndpointConfig;
 
 /**
  * Wrapper class for instances of POJOs annotated with
@@ -47,8 +47,8 @@ public class PojoEndpoint extends Endpoint {
     public void onOpen(Session session,
             EndpointConfig endpointConfiguration) {
 
-        ServerEndpointConfiguration sec =
-                (ServerEndpointConfiguration) endpointConfiguration;
+        ServerEndpointConfig sec =
+                (ServerEndpointConfig) endpointConfiguration;
 
         try {
             pojo = sec.getEndpointClass().newInstance();

==================================================
ServerContainerImpl.java
index ad5598082a..4c60db3156 100644
--- a/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
+++ b/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
@@ -24,11 +24,10 @@ import java.util.Map;
 import javax.websocket.Extension;
 import javax.websocket.HandshakeResponse;
 import javax.websocket.server.HandshakeRequest;
-import javax.websocket.server.ServerEndpointConfiguration;
-import javax.websocket.server.ServerEndpointConfigurator;
+import javax.websocket.server.ServerEndpointConfig;
 
 public class DefaultServerEndpointConfigurator
-        extends ServerEndpointConfigurator {
+        extends ServerEndpointConfig.Configurator {
 
     @Override
     public String getNegotiatedSubprotocol(List<String> supported,
@@ -96,7 +95,7 @@ public class DefaultServerEndpointConfigurator
     }
 
     @Override
-    public void modifyHandshake(ServerEndpointConfiguration sec,
+    public void modifyHandshake(ServerEndpointConfig sec,
             HandshakeRequest request, HandshakeResponse response) {
         // NO-OP
     }

==================================================
WsServlet.java
index 99f378cb54..24f5815ca4 100644
--- a/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
@@ -25,8 +25,7 @@ import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
 import javax.websocket.DeploymentException;
 import javax.websocket.server.ServerEndpoint;
-import javax.websocket.server.ServerEndpointConfiguration;
-import javax.websocket.server.ServerEndpointConfigurationBuilder;
+import javax.websocket.server.ServerEndpointConfig;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -74,7 +73,7 @@ public class ServerContainerImpl extends WsWebSocketContainer {
     private final WsWriteTimeout wsWriteTimeout = new WsWriteTimeout();
 
     private volatile ServletContext servletContext = null;
-    private final Map<String,ServerEndpointConfiguration> configMap =
+    private final Map<String,ServerEndpointConfig> configMap =
             new ConcurrentHashMap<>();
     private final Map<String,UriTemplate> templateMap =
             new ConcurrentHashMap<>();
@@ -114,7 +113,7 @@ public class ServerContainerImpl extends WsWebSocketContainer {
      * @param sec   The configuration to use when creating endpoint instances
      * @throws DeploymentException
      */
-    public void deploy(ServerEndpointConfiguration sec)
+    public void deploy(ServerEndpointConfig sec)
             throws DeploymentException {
         if (servletContext == null) {
             throw new DeploymentException(
@@ -142,7 +141,7 @@ public class ServerContainerImpl extends WsWebSocketContainer {
 
 
     /**
-     * Provides the equivalent of {@link #deploy(ServerEndpointConfiguration)}
+     * Provides the equivalent of {@link #deploy(ServerEndpointConfig)}
      * for publishing plain old java objects (POJOs) that have been annotated as
      * WebSocket endpoints.
      *
@@ -189,9 +188,9 @@ public class ServerContainerImpl extends WsWebSocketContainer {
     }
 
 
-    public ServerEndpointConfiguration getServerEndpointConfiguration(
+    public ServerEndpointConfig getServerEndpointConfiguration(
             String servletPath, Map<String,String> pathParameters) {
-        ServerEndpointConfiguration sec = configMap.get(servletPath);
+        ServerEndpointConfig sec = configMap.get(servletPath);
         if (sec != null) {
             return sec;
         }
@@ -199,7 +198,7 @@ public class ServerContainerImpl extends WsWebSocketContainer {
         if (pojo != null) {
             PojoMethodMapping methodMapping = pojoMethodMap.get(pojo);
             if (methodMapping != null) {
-                sec = ServerEndpointConfigurationBuilder.create(
+                sec = ServerEndpointConfig.Builder.create(
                         pojo, methodMapping.getWsPath()).build();
                 sec.getUserProperties().put(
                         PojoEndpoint.POJO_PATH_PARAM_KEY, pathParameters);

==================================================
TestWsWebSocketContainer.java
index 182087702a..e3877e6299 100644
--- a/java/org/apache/tomcat/websocket/server/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/server/WsServlet.java
@@ -41,7 +41,7 @@ import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpUpgradeHandler;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
-import javax.websocket.server.ServerEndpointConfiguration;
+import javax.websocket.server.ServerEndpointConfig;
 import javax.xml.bind.DatatypeConverter;
 
 import org.apache.tomcat.websocket.Constants;
@@ -95,11 +95,11 @@ public class WsServlet extends HttpServlet {
         ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
         Map<String,String> pathParameters = sc.getPathParameters(
                 req.getServletPath(),  req.getPathInfo());
-        ServerEndpointConfiguration sec = sc.getServerEndpointConfiguration(
+        ServerEndpointConfig sec = sc.getServerEndpointConfiguration(
                 req.getServletPath(), pathParameters);
         // Origin check
         String origin = req.getHeader("Origin");
-        if (!sec.getServerEndpointConfigurator().checkOrigin(origin)) {
+        if (!sec.getConfigurator().checkOrigin(origin)) {
             resp.sendError(HttpServletResponse.SC_FORBIDDEN);
             return;
         }
@@ -107,7 +107,7 @@ public class WsServlet extends HttpServlet {
         List<String> subProtocols = getTokensFromHeader(req,
                 "Sec-WebSocket-Protocol");
         if (!subProtocols.isEmpty()) {
-            subProtocol = sec.getServerEndpointConfigurator().
+            subProtocol = sec.getConfigurator().
                     getNegotiatedSubprotocol(
                             sec.getSubprotocols(), subProtocols);
         }

==================================================
WsConfigListener.java
index 5a9ff72f3f..5c090c0c1d 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -27,7 +27,7 @@ import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
 import javax.servlet.ServletContextEvent;
-import javax.websocket.ClientEndpointConfig.Builder;
+import javax.websocket.ClientEndpointConfig;
 import javax.websocket.ContainerProvider;
 import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
@@ -37,7 +37,7 @@ import javax.websocket.OnMessage;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
 import javax.websocket.server.ServerEndpoint;
-import javax.websocket.server.ServerEndpointConfigurationBuilder;
+import javax.websocket.server.ServerEndpointConfig;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -84,7 +84,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_ASYNC));
         CountDownLatch latch = new CountDownLatch(1);
@@ -115,7 +115,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
         wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                 new URI("ftp://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_ASYNC));
     }
@@ -134,7 +134,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
         wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                 new URI("http://" + TesterEchoServer.Config.PATH_ASYNC));
     }
 
@@ -222,7 +222,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                         new URI("http://localhost:" + getPort() +
                                 TesterEchoServer.Config.PATH_BASIC));
         BasicHandler<?> handler;
@@ -293,7 +293,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() + BlockingConfig.PATH));
 
         if (!setTimeoutOnContainer) {
@@ -374,7 +374,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         ConstantTxConfig.PATH));
 
@@ -524,7 +524,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
             super.contextInitialized(sce);
             ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
             try {
-                sc.deploy(ServerEndpointConfigurationBuilder.create(
+                sc.deploy(ServerEndpointConfig.Builder.create(
                         ConstantTxEndpoint.class, PATH).build());
                 if (TestWsWebSocketContainer.timoutOnContainer) {
                     sc.setAsyncSendTimeout(TIMEOUT_MS);
@@ -668,7 +668,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
     private Session connectToEchoServerBasic(WebSocketContainer wsContainer,
             Class<? extends Endpoint> clazz) throws Exception {
         return wsContainer.connectToServer(clazz,
-                Builder.create().build(),
+                ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_BASIC));
     }

==================================================
