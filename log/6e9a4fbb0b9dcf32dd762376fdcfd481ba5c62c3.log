6e9a4fbb0b9dcf32dd762376fdcfd481ba5c62c3
==================================================
Adjust javadoc phrasing since the attributes
==================================================
Rainer Jung
==================================================
Wed Jan 27 10:56:11 2016 +0000
==================================================
AbstractAjpProtocol.java
Adjust javadoc phrasing since the attributes
finally have another name.

Followup to r1726972.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1726991 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index a108971ae6..e45514bc76 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -86,11 +86,15 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     // ------------------------------------------ managed in the ProtocolHandler
 
     /**
-     * Ignore explicit flush?
-     * An explicit flush will send a zero byte AJP13 SEND_BODY_CHUNK
-     * package. AJP does flush at the and of the response, so if
+     * Send AJP flush packet when flushing.
+     * An flush packet is a zero byte AJP13 SEND_BODY_CHUNK
+     * packet. mod_jk and mod_proxy_ajp interprete this as
+     * a request to flush data to the client.
+     * AJP always does flush at the and of the response, so if
      * it is not important, that the packets get streamed up to
-     * the client, do not use explicit flush.
+     * the client, do not use extra flush packets.
+     * For compatibility and to stay on the safe side, flush
+     * packets are enabled by default.
      */
     protected boolean ajpFlush = true;
     public boolean getAjpFlush() { return ajpFlush; }

==================================================
