7d822e6eb27bffcb01ea27aac152d40e4b0edd04
==================================================
UCdetector
==================================================
Mark Emlyn
==================================================
Wed Feb 13 22:47:39 2013 +0000
==================================================
JavacErrorDetail.java
UCdetector
Reduce visibility, make fields final, remove unused code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1445964 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspDocumentParser.java
index ed2d5c5b10..42498bfc46 100644
--- a/java/org/apache/jasper/compiler/JavacErrorDetail.java
+++ b/java/org/apache/jasper/compiler/JavacErrorDetail.java
@@ -36,11 +36,11 @@ import org.apache.jasper.JspCompilationContext;
  */
 public class JavacErrorDetail {
 
-    private String javaFileName;
-    private int javaLineNum;
-    private String jspFileName;
+    private final String javaFileName;
+    private final int javaLineNum;
+    private final String jspFileName;
     private int jspBeginLineNum;
-    private StringBuilder errMsg;
+    private final StringBuilder errMsg;
     private String jspExtract = null;
 
     /**
@@ -55,10 +55,7 @@ public class JavacErrorDetail {
                             int javaLineNum,
                             StringBuilder errMsg) {
 
-        this.javaFileName = javaFileName;
-        this.javaLineNum = javaLineNum;
-        this.errMsg = errMsg;
-        this.jspBeginLineNum = -1;
+        this(javaFileName, javaLineNum, null, -1, errMsg, null);
     }
 
     /**
@@ -81,9 +78,10 @@ public class JavacErrorDetail {
             StringBuilder errMsg,
             JspCompilationContext ctxt) {
 
-        this(javaFileName, javaLineNum, errMsg);
+        this.javaFileName = javaFileName;
+        this.javaLineNum = javaLineNum;
+        this.errMsg = errMsg;
         this.jspFileName = jspFileName;
-        this.jspBeginLineNum = jspBeginLineNum;
 
         if (jspBeginLineNum > 0 && ctxt != null) {
             InputStream is = null;
@@ -114,7 +112,7 @@ public class JavacErrorDetail {
                     for (int i=jspBeginLineNum-1; i<jspLines.length; i++) {
                         if (jspLines[i].indexOf(javaLine) != -1) {
                             // Update jsp line number
-                            this.jspBeginLineNum = i+1;
+                            jspBeginLineNum = i+1;
                             break;
                         }
                     }
@@ -153,6 +151,7 @@ public class JavacErrorDetail {
                 }
             }
         }
+        this.jspBeginLineNum = jspBeginLineNum;
     }
 
     /**

==================================================
JspReader.java
index b3094a45b4..6cbd353cfc 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -58,10 +58,10 @@ class JspDocumentParser
         "http://xml.org/sax/properties/lexical-handler";
     private static final String JSP_URI = "http://java.sun.com/JSP/Page";
 
-    private ParserController parserController;
-    private JspCompilationContext ctxt;
-    private PageInfo pageInfo;
-    private String path;
+    private final ParserController parserController;
+    private final JspCompilationContext ctxt;
+    private final PageInfo pageInfo;
+    private final String path;
     private StringBuilder charBuffer;
 
     // Node representing the XML element currently being parsed
@@ -93,9 +93,9 @@ class JspDocumentParser
 
     private boolean isValidating;
 
-    private ErrorDispatcher err;
-    private boolean isTagFile;
-    private boolean directivesOnly;
+    private final ErrorDispatcher err;
+    private final boolean isTagFile;
+    private final boolean directivesOnly;
     private boolean isTop;
 
     // Nesting level of Tag dependent bodies

==================================================
JspRuntimeContext.java
index cd3f3089c2..8296191ef9 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -67,7 +67,7 @@ class JspReader {
     /**
      * The list of source files.
      */
-    private List<String> sourceFiles;
+    private final List<String> sourceFiles;
 
     /**
      * The current file ID (-1 indicates an error or no file).
@@ -77,12 +77,12 @@ class JspReader {
     /**
      * The compilation context.
      */
-    private JspCompilationContext context;
+    private final JspCompilationContext context;
 
     /**
      * The Jasper error dispatcher.
      */
-    private ErrorDispatcher err;
+    private final ErrorDispatcher err;
 
     /**
      * Set to true when using the JspReader on a single file where we read up

==================================================
JspUtil.java
index 9b26f88cd0..c1bd6821c4 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -67,12 +67,12 @@ public final class JspRuntimeContext {
     /*
      * Counts how many times the webapp's JSPs have been reloaded.
      */
-    private AtomicInteger jspReloadCount = new AtomicInteger(0);
+    private final AtomicInteger jspReloadCount = new AtomicInteger(0);
 
     /*
      * Counts how many times JSPs have been unloaded in this webapp.
      */
-    private AtomicInteger jspUnloadCount = new AtomicInteger(0);
+    private final AtomicInteger jspUnloadCount = new AtomicInteger(0);
 
     /**
      * Preload classes required at runtime by a JSP servlet so that
@@ -192,7 +192,8 @@ public final class JspRuntimeContext {
     /**
      * Maps JSP pages to their JspServletWrapper's
      */
-    private Map<String, JspServletWrapper> jsps = new ConcurrentHashMap<>();
+    private final Map<String, JspServletWrapper> jsps =
+            new ConcurrentHashMap<>();
 
     /**
      * Keeps JSP pages ordered by last access.
@@ -356,13 +357,6 @@ public final class JspRuntimeContext {
         return -1;
     }
 
-    /**
-     * Increments the JSP unload counter.
-     */
-    public void incrementJspUnloadCount() {
-        jspUnloadCount.incrementAndGet();
-    }
-
     /**
      * Gets the number of JSPs that have been unloaded.
      *

==================================================
Localizer.java
index 7b1b979723..e5c058d6e9 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -232,36 +232,10 @@ public class JspUtil {
         return sb.toString();
     }
 
-    /**
-     * Replaces any occurrences of the character <tt>replace</tt> with the
-     * string <tt>with</tt>.
-     */
-    public static String replace(String name, char replace, String with) {
-        StringBuilder buf = new StringBuilder();
-        int begin = 0;
-        int end;
-        int last = name.length();
-
-        while (true) {
-            end = name.indexOf(replace, begin);
-            if (end < 0) {
-                end = last;
-            }
-            buf.append(name.substring(begin, end));
-            if (end == last) {
-                break;
-            }
-            buf.append(with);
-            begin = end + 1;
-        }
-
-        return buf.toString();
-    }
-
     public static class ValidAttribute {
-        String name;
 
-        boolean mandatory;
+        private final String name;
+        private final boolean mandatory;
 
         public ValidAttribute(String name, boolean mandatory) {
             this.name = name;
@@ -907,31 +881,6 @@ public class JspUtil {
         return false;
     }
 
-    public static boolean isJavaIdentifier(String key) {
-        // Should not be the case but check to be sure
-        if (key == null || key.length() == 0) {
-            return false;
-        }
-
-        if (isJavaKeyword(key)) {
-            return false;
-        }
-
-        // Check the start character that has more restrictions
-        if (!Character.isJavaIdentifierStart(key.charAt(0))) {
-            return false;
-        }
-
-        // Check each remaining character used is permitted
-        for (int idx = 1; idx < key.length(); idx++) {
-            if (!Character.isJavaIdentifierPart(key.charAt(idx))) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
     static InputStreamReader getReader(String fname, String encoding,
             JarFile jarFile, JspCompilationContext ctxt, ErrorDispatcher err)
             throws JasperException, IOException {

==================================================
Mark.java
index eb428e7a02..f44400c6a9 100644
--- a/java/org/apache/jasper/compiler/Localizer.java
+++ b/java/org/apache/jasper/compiler/Localizer.java
@@ -31,12 +31,12 @@ import org.apache.jasper.util.ExceptionUtils;
  */
 public class Localizer {
 
-    private static ResourceBundle bundle = null;
+    private static ResourceBundle bundle;
 
     static {
         try {
-        bundle = ResourceBundle.getBundle(
-            "org.apache.jasper.resources.LocalStrings");
+            bundle = ResourceBundle.getBundle(
+                    "org.apache.jasper.resources.LocalStrings");
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             t.printStackTrace();

==================================================
Node.java
index 04ecc04fcc..0e0dc5fe33 100644
--- a/java/org/apache/jasper/compiler/Mark.java
+++ b/java/org/apache/jasper/compiler/Mark.java
@@ -198,8 +198,6 @@ final class Mark {
     }
 
 
-    // -------------------- Locator interface --------------------
-
     public int getLineNumber() {
         return line;
     }
@@ -208,14 +206,6 @@ final class Mark {
         return col;
     }
 
-    public String getSystemId() {
-        return getFile();
-    }
-
-    public String getPublicId() {
-        return null;
-    }
-
     @Override
     public String toString() {
         return getFile()+"("+line+","+col+")";
@@ -267,12 +257,12 @@ final class Mark {
      * included file. In other words, it's the parser's continuation to be
      * reinstalled after the included file parsing is done.
      */
-    class IncludeState {
-        int cursor, line, col;
-        int fileId;
-        String fileName;
-        String baseDir;
-        char[] stream = null;
+    private class IncludeState {
+        private final int cursor, line, col;
+        private final int fileId;
+        private final String fileName;
+        private final String baseDir;
+        private final char[] stream;
 
         IncludeState(int inCursor, int inLine, int inCol, int inFileId,
                      String name, String inBaseDir, String inEncoding,

==================================================
