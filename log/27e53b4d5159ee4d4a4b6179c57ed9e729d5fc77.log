27e53b4d5159ee4d4a4b6179c57ed9e729d5fc77
==================================================
Add unit tests for ELResolver.convertToType
==================================================
Mark Emlyn
==================================================
Sat Jul 6 19:31:39 2013 +0000
==================================================
ELContext.java
Add unit tests for ELResolver.convertToType
Fix a couple of bugs in ELContext.convertToType highlighted by / spotted while writing the unit tests
Update the EL implementation to use convertToType

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1500317 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MethodExpressionLiteral.java
index 014e802d4c..a3e5e6211f 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -216,16 +216,19 @@ public abstract class ELContext {
     public Object convertToType(Object obj, Class<?> type) {
 
         boolean originalResolved = isPropertyResolved();
+        setPropertyResolved(false);
         try {
             ELResolver resolver = getELResolver();
-            Object result = resolver.convertToType(this, obj, type);
-            if (isPropertyResolved()) {
-                return result;
+            if (resolver != null) {
+                Object result = resolver.convertToType(this, obj, type);
+                if (isPropertyResolved()) {
+                    return result;
+                }
             }
         } finally {
             setPropertyResolved(originalResolved);
         }
 
-        return Util.getExpressionFactory().coerceToType(type, type);
+        return Util.getExpressionFactory().coerceToType(obj, type);
     }
 }

==================================================
ValueExpressionImpl.java
index e8b411ca3e..765916c0d3 100644
--- a/java/org/apache/el/MethodExpressionLiteral.java
+++ b/java/org/apache/el/MethodExpressionLiteral.java
@@ -27,7 +27,6 @@ import javax.el.ELException;
 import javax.el.MethodExpression;
 import javax.el.MethodInfo;
 
-import org.apache.el.lang.ELSupport;
 import org.apache.el.util.ReflectionUtil;
 
 
@@ -58,7 +57,7 @@ public class MethodExpressionLiteral extends MethodExpression implements Externa
     @Override
     public Object invoke(ELContext context, Object[] params) throws ELException {
         if (this.expectedType != null) {
-            return ELSupport.coerceToType(this.expr, this.expectedType);
+            return context.convertToType(this.expr, this.expectedType);
         } else {
             return this.expr;
         }

==================================================
ValueExpressionLiteral.java
index 319cc0f050..197dfd90bb 100644
--- a/java/org/apache/el/ValueExpressionImpl.java
+++ b/java/org/apache/el/ValueExpressionImpl.java
@@ -31,7 +31,6 @@ import javax.el.ValueExpression;
 import javax.el.ValueReference;
 import javax.el.VariableMapper;
 
-import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.lang.ExpressionBuilder;
 import org.apache.el.parser.AstLiteralExpression;
@@ -184,7 +183,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
                 this.varMapper);
         Object value = this.getNode().getValue(ctx);
         if (this.expectedType != null) {
-            return ELSupport.coerceToType(value, this.expectedType);
+            return context.convertToType(value, this.expectedType);
         }
         return value;
     }

==================================================
TestELResolver.java
index e3dbe98af9..b0b47be1f3 100644
--- a/java/org/apache/el/ValueExpressionLiteral.java
+++ b/java/org/apache/el/ValueExpressionLiteral.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.el;
 
 import java.io.Externalizable;
@@ -26,7 +25,6 @@ import javax.el.ELContext;
 import javax.el.PropertyNotWritableException;
 import javax.el.ValueExpression;
 
-import org.apache.el.lang.ELSupport;
 import org.apache.el.util.MessageFactory;
 import org.apache.el.util.ReflectionUtil;
 
@@ -52,7 +50,7 @@ public final class ValueExpressionLiteral extends ValueExpression implements
     @Override
     public Object getValue(ELContext context) {
         if (this.expectedType != null) {
-            return ELSupport.coerceToType(this.value, this.expectedType);
+            return context.convertToType(this.value, this.expectedType);
         }
         return this.value;
     }

==================================================
TesterELContext.java
new file mode 100644
index 0000000000..4466be330b
--- /dev/null
+++ b/test/javax/el/TestELResolver.java
@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.el;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestELResolver {
+
+    @Test
+    public void testConvertToType01() {
+        ELContext context = new TesterELContext();
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "1", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("1", result);
+    }
+
+
+    @Test
+    public void testConvertToType02() {
+        ELContext context = new TesterELContext(new TesterELResolverOne());
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "1", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("ONE", result);
+    }
+
+
+    @Test
+    public void testConvertToType03() {
+        ELContext context = new TesterELContext(new TesterELResolverOne());
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "2", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("2", result);
+    }
+
+
+    @Test
+    public void testConvertToType04() {
+        CompositeELResolver resolver = new CompositeELResolver();
+        ELContext context = new TesterELContext(resolver);
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "2", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("2", result);
+    }
+
+
+    @Test
+    public void testConvertToType05() {
+        CompositeELResolver resolver = new CompositeELResolver();
+        resolver.add(new TesterELResolverOne());
+        resolver.add(new TesterELResolverTwo());
+        ELContext context = new TesterELContext(resolver);
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "1", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("ONE", result);
+    }
+
+
+    @Test
+    public void testConvertToType06() {
+        CompositeELResolver resolver = new CompositeELResolver();
+        resolver.add(new TesterELResolverOne());
+        resolver.add(new TesterELResolverTwo());
+        ELContext context = new TesterELContext(resolver);
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "2", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("TWO", result);
+    }
+
+
+    @Test
+    public void testConvertToType07() {
+        CompositeELResolver resolver = new CompositeELResolver();
+        resolver.add(new TesterELResolverOne());
+        resolver.add(new TesterELResolverTwo());
+        ELContext context = new TesterELContext(resolver);
+
+        ValueExpression ve =
+                ELManager.getExpressionFactory().createValueExpression(
+                        context, "3", String.class);
+
+        String result = (String) ve.getValue(context);
+
+        Assert.assertEquals("3", result);
+    }
+}

==================================================
TesterELResolverBase.java
index c0fd1a2f7c..34f3106f40 100644
--- a/test/javax/el/TesterELContext.java
+++ b/test/javax/el/TesterELContext.java
@@ -18,9 +18,19 @@ package javax.el;
 
 public class TesterELContext extends ELContext {
 
+    private final ELResolver resolver;
+
+    public TesterELContext() {
+        this(null);
+    }
+
+    public TesterELContext(ELResolver resolver) {
+        this.resolver = resolver;
+    }
+
     @Override
     public ELResolver getELResolver() {
-        return null;
+        return resolver;
     }
 
     @Override
@@ -32,5 +42,4 @@ public class TesterELContext extends ELContext {
     public VariableMapper getVariableMapper() {
         return null;
     }
-
 }

==================================================
TesterELResolverOne.java
new file mode 100644
index 0000000000..93a4c19169
--- /dev/null
+++ b/test/javax/el/TesterELResolverBase.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.el;
+
+import java.beans.FeatureDescriptor;
+import java.util.Iterator;
+
+public abstract class TesterELResolverBase extends ELResolver {
+
+
+    @Override
+    public abstract Object convertToType(ELContext context, Object obj,
+            Class<?> type);
+
+    @Override
+    public Object getValue(ELContext context, Object base, Object property) {
+        return null;
+    }
+
+    @Override
+    public Class<?> getType(ELContext context, Object base, Object property) {
+        return null;
+    }
+
+    @Override
+    public void setValue(ELContext context, Object base, Object property,
+            Object value) {
+        // NO-OP
+    }
+
+    @Override
+    public boolean isReadOnly(ELContext context, Object base, Object property) {
+        return false;
+    }
+
+    @Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,
+            Object base) {
+        return null;
+    }
+
+    @Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
+        return null;
+    }
+}

==================================================
TesterELResolverTwo.java
new file mode 100644
index 0000000000..7df8d634c9
--- /dev/null
+++ b/test/javax/el/TesterELResolverOne.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.el;
+
+public class TesterELResolverOne extends TesterELResolverBase {
+
+    @Override
+    public Object convertToType(ELContext context, Object obj, Class<?> type) {
+        if ("1".equals(obj) && type == String.class) {
+            context.setPropertyResolved(true);
+            return "ONE";
+        }
+        return null;
+    }
+}

==================================================
