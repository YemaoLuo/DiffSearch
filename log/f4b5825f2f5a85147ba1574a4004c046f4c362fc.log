f4b5825f2f5a85147ba1574a4004c046f4c362fc
==================================================
Move alias, keystoreType and keystoreProvider to SSlHostConfig
==================================================
Mark Thomas
==================================================
Tue May 5 19:48:53 2015 +0000
==================================================
AbstractHttp11JsseProtocol.java
Move alias, keystoreType and keystoreProvider to SSlHostConfig

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1677884 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index df469ef17e..18dc47861b 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -25,22 +25,9 @@ public abstract class AbstractHttp11JsseProtocol<S>
         super(endpoint);
     }
 
-    public String getKeystoreType() { return getEndpoint().getKeystoreType();}
-    public void setKeystoreType(String s ) { getEndpoint().setKeystoreType(s);}
-
-    public String getKeystoreProvider() {
-        return getEndpoint().getKeystoreProvider();
-    }
-    public void setKeystoreProvider(String s ) {
-        getEndpoint().setKeystoreProvider(s);
-    }
-
     public String getSslProtocol() { return getEndpoint().getSslProtocol();}
     public void setSslProtocol(String s) { getEndpoint().setSslProtocol(s);}
 
-    public String getKeyAlias() { return getEndpoint().getKeyAlias();}
-    public void setKeyAlias(String s ) { getEndpoint().setKeyAlias(s);}
-
     public void setTruststoreFile(String f){ getEndpoint().setTruststoreFile(f);}
     public String getTruststoreFile(){ return getEndpoint().getTruststoreFile();}
 

==================================================
AbstractEndpoint.java
index f8e3b6c191..415ca5aaf0 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -459,6 +459,24 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    public void setKeystoreType(String certificateKeystoreType) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeystoreType(certificateKeystoreType);
+    }
+
+
+    public void setKeystoreProvider(String certificateKeystoreProvider) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeystoreProvider(certificateKeystoreProvider);
+    }
+
+
+    public void setKeyAlias(String certificateKeyAlias) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeyAlias(certificateKeyAlias);
+    }
+
+
     // ------------------------------------------------------------- Common code
 
     // Common configuration required for all new HTTP11 processors

==================================================
AbstractJsseEndpoint.java
index c90b0d4536..a728b216a4 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -982,22 +982,10 @@ public abstract class AbstractEndpoint<S> {
         this.sslImplementationName = s;
     }
 
-    private String keystoreType = "JKS";
-    public String getKeystoreType() { return keystoreType;}
-    public void setKeystoreType(String s ) { this.keystoreType = s;}
-
-    private String keystoreProvider = null;
-    public String getKeystoreProvider() { return keystoreProvider;}
-    public void setKeystoreProvider(String s ) { this.keystoreProvider = s;}
-
     private String sslProtocol = "TLS";
     public String getSslProtocol() { return sslProtocol;}
     public void setSslProtocol(String s) { sslProtocol = s;}
 
-    private String keyAlias = null;
-    public String getKeyAlias() { return keyAlias;}
-    public void setKeyAlias(String s ) { keyAlias = s;}
-
     private String truststoreFile = System.getProperty("javax.net.ssl.trustStore");
     public String getTruststoreFile() {return truststoreFile;}
     public void setTruststoreFile(String s) {

==================================================
SSLHostConfig.java
index 953781be40..6a58d3e5c1 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -57,7 +57,7 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
             for (SSLHostConfig sslHostConfig : sslHostConfigs.values()) {
                 SSLUtil sslUtil = sslImplementation.getSSLUtil(this, sslHostConfig);
                 SSLContext sslContext = sslUtil.createSSLContext();
-                sslContext.init(wrap(sslUtil.getKeyManagers()),
+                sslContext.init(wrap(sslUtil.getKeyManagers(), sslHostConfig),
                         sslUtil.getTrustManagers(), null);
 
                 SSLSessionContext sessionContext =
@@ -115,14 +115,15 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
     }
 
 
-    private KeyManager[] wrap(KeyManager[] managers) {
+    private KeyManager[] wrap(KeyManager[] managers, SSLHostConfig sslHostConfig) {
         if (managers==null) return null;
         KeyManager[] result = new KeyManager[managers.length];
         for (int i=0; i<result.length; i++) {
-            if (managers[i] instanceof X509KeyManager && getKeyAlias() != null) {
-                String keyAlias = getKeyAlias();
+            if (managers[i] instanceof X509KeyManager &&
+                    sslHostConfig.getCertificateKeyAlias() != null) {
+                String keyAlias = sslHostConfig.getCertificateKeyAlias();
                 // JKS keystores always convert the alias name to lower case
-                if ("jks".equalsIgnoreCase(getKeystoreType())) {
+                if ("jks".equalsIgnoreCase(sslHostConfig.getCertificateKeystoreType())) {
                     keyAlias = keyAlias.toLowerCase(Locale.ENGLISH);
                 }
                 result[i] = new NioX509KeyManager((X509KeyManager) managers[i], keyAlias);

==================================================
JSSESocketFactory.java
index 0c5ad6182e..918b248735 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -53,8 +53,11 @@ public class SSLHostConfig {
     private Set<String> protocols = new HashSet<>();
     private String certificateRevocationListFile;
     // JSSE
+    private String certificateKeyAlias;
     private String certificateKeystorePassword = "changeit";
     private String certificateKeystoreFile = System.getProperty("user.home")+"/.keystore";
+    private String certificateKeystoreProvider;
+    private String certificateKeystoreType = "JKS";
     private String keyManagerAlgorithm = KeyManagerFactory.getDefaultAlgorithm();
     // OpenSSL
     private String certificateFile;
@@ -230,13 +233,14 @@ public class SSLHostConfig {
 
     // ---------------------------------- JSSE specific configuration properties
 
-    public void setCertificateKeystorePassword(String certificateKeystorePassword) {
-        this.certificateKeystorePassword = certificateKeystorePassword;
+    public void setCertificateKeyAlias(String certificateKeyAlias) {
+        setProperty("certificateKeyAlias", Type.JSSE);
+        this.certificateKeyAlias = certificateKeyAlias;
     }
 
 
-    public String getCertificateKeystorePassword() {
-        return certificateKeystorePassword;
+    public String getCertificateKeyAlias() {
+        return certificateKeyAlias;
     }
 
 
@@ -251,6 +255,39 @@ public class SSLHostConfig {
     }
 
 
+    public void setCertificateKeystorePassword(String certificateKeystorePassword) {
+        setProperty("certificateKeystorePassword", Type.JSSE);
+        this.certificateKeystorePassword = certificateKeystorePassword;
+    }
+
+
+    public String getCertificateKeystorePassword() {
+        return certificateKeystorePassword;
+    }
+
+
+    public void setCertificateKeystoreProvider(String certificateKeystoreProvider) {
+        setProperty("certificateKeystoreProvider", Type.JSSE);
+        this.certificateKeystoreProvider = certificateKeystoreProvider;
+    }
+
+
+    public String getCertificateKeystoreProvider() {
+        return certificateKeystoreProvider;
+    }
+
+
+    public void setCertificateKeystoreType(String certificateKeystoreType) {
+        setProperty("certificateKeystoreType", Type.JSSE);
+        this.certificateKeystoreType = certificateKeystoreType;
+    }
+
+
+    public String getCertificateKeystoreType() {
+        return certificateKeystoreType;
+    }
+
+
     public void setKeyManagerAlgorithm(String keyManagerAlgorithm) {
         setProperty("keyManagerAlgorithm", Type.JSSE);
         this.keyManagerAlgorithm = keyManagerAlgorithm;

==================================================
