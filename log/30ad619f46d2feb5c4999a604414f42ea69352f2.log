30ad619f46d2feb5c4999a604414f42ea69352f2
==================================================
Code clean-up for o.a.catalina.startup
==================================================
Mark Emlyn
==================================================
Sat Jul 21 18:52:54 2012 +0000
==================================================
ClassLoaderFactory.java
Code clean-up for o.a.catalina.startup
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1364147 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContextConfig.java
index daa60f0e10..c0eee8752c 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -80,7 +80,7 @@ public final class ClassLoaderFactory {
             log.debug("Creating new class loader");
 
         // Construct the "class path" for this class loader
-        Set<URL> set = new LinkedHashSet<URL>();
+        Set<URL> set = new LinkedHashSet<>();
 
         // Add unpacked directories
         if (unpacked != null) {
@@ -152,7 +152,7 @@ public final class ClassLoaderFactory {
             log.debug("Creating new class loader");
 
         // Construct the "class path" for this class loader
-        Set<URL> set = new LinkedHashSet<URL>();
+        Set<URL> set = new LinkedHashSet<>();
 
         if (repositories != null) {
             for (Repository repository : repositories)  {
@@ -275,8 +275,8 @@ public final class ClassLoaderFactory {
     }
 
     public static class Repository {
-        private String location;
-        private RepositoryType type;
+        private final String location;
+        private final RepositoryType type;
 
         public Repository(String location, RepositoryType type) {
             this.location = location;

==================================================
ContextRuleSet.java
index 1c76dce438..91f25077b9 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -162,7 +162,7 @@ public class ContextConfig implements LifecycleListener {
      * Cache of default web.xml fragments per Host
      */
     protected static final Map<Host,DefaultWebXmlCacheEntry> hostWebXmlCache =
-        new ConcurrentHashMap<Host,DefaultWebXmlCacheEntry>();
+            new ConcurrentHashMap<>();
 
 
     // ----------------------------------------------------- Instance Variables
@@ -200,14 +200,14 @@ public class ContextConfig implements LifecycleListener {
      * Map of ServletContainerInitializer to classes they expressed interest in.
      */
     protected final Map<ServletContainerInitializer, Set<Class<?>>> initializerClassMap =
-            new LinkedHashMap<ServletContainerInitializer, Set<Class<?>>>();
+            new LinkedHashMap<>();
 
     /**
      * Map of Types to ServletContainerInitializer that are interested in those
      * types.
      */
     protected final Map<Class<?>, Set<ServletContainerInitializer>> typeInitializerMap =
-            new HashMap<Class<?>, Set<ServletContainerInitializer>>();
+            new HashMap<>();
 
     /**
      * Cache of JavaClass objects (byte code) by fully qualified class name.
@@ -215,7 +215,7 @@ public class ContextConfig implements LifecycleListener {
      * as part of the processing for {@link HandlesTypes}.
      */
     protected final Map<String,JavaClassCacheEntry> javaClassCache =
-            new HashMap<String,JavaClassCacheEntry>();
+            new HashMap<>();
 
     /**
      * Flag that indicates if at least one {@link HandlesTypes} entry is present
@@ -467,9 +467,8 @@ public class ContextConfig implements LifecycleListener {
         Digester digester = new Digester();
         digester.setValidating(false);
         digester.setRulesValidation(true);
-        HashMap<Class<?>, List<String>> fakeAttributes =
-            new HashMap<Class<?>, List<String>>();
-        ArrayList<String> attrs = new ArrayList<String>();
+        HashMap<Class<?>, List<String>> fakeAttributes = new HashMap<>();
+        ArrayList<String> attrs = new ArrayList<>();
         attrs.add("className");
         fakeAttributes.put(Object.class, attrs);
         digester.setFakeAttributes(fakeAttributes);
@@ -1146,7 +1145,7 @@ public class ContextConfig implements LifecycleListener {
          *   those in JARs excluded from an absolute ordering) need to be
          *   scanned to check if they match.
          */
-        Set<WebXml> defaults = new HashSet<WebXml>();
+        Set<WebXml> defaults = new HashSet<>();
         defaults.add(getDefaultWebXmlFragment());
 
         WebXml webXml = createWebXml();
@@ -1270,7 +1269,7 @@ public class ContextConfig implements LifecycleListener {
         if (ok) {
             // Spec does not define an order.
             // Use ordered JARs followed by remaining JARs
-            Set<WebXml> resourceJars = new LinkedHashSet<WebXml>();
+            Set<WebXml> resourceJars = new LinkedHashSet<>();
             if (orderedFragments != null) {
                 for (WebXml fragment : orderedFragments) {
                     resourceJars.add(fragment);
@@ -1393,7 +1392,7 @@ public class ContextConfig implements LifecycleListener {
         Map<String,String> jspInitParams;
         ServletDef jspServlet = webXml.getServlets().get("jsp");
         if (jspServlet == null) {
-            jspInitParams = new HashMap<String,String>();
+            jspInitParams = new HashMap<>();
             Wrapper w = (Wrapper) context.findChild("jsp");
             if (w != null) {
                 String[] params = w.findInitParameters();
@@ -1511,7 +1510,7 @@ public class ContextConfig implements LifecycleListener {
                         Set<ServletContainerInitializer> scis =
                             typeInitializerMap.get(type);
                         if (scis == null) {
-                            scis = new HashSet<ServletContainerInitializer>();
+                            scis = new HashSet<>();
                             typeInitializerMap.put(type, scis);
                         }
                         scis.add(sci);
@@ -1823,7 +1822,7 @@ public class ContextConfig implements LifecycleListener {
             URL url = fragment.getURL();
             processAnnotationsUrl(url, annotations,
                     (handlesTypesOnly || fragment.isMetadataComplete()));
-            Set<WebXml> set = new HashSet<WebXml>();
+            Set<WebXml> set = new HashSet<>();
             set.add(annotations);
             // Merge annotations into fragment - fragment takes priority
             fragment.merge(set);
@@ -2061,7 +2060,7 @@ public class ContextConfig implements LifecycleListener {
                         entry.getSciSet()) {
                     Set<Class<?>> classes = initializerClassMap.get(sci);
                     if (classes == null) {
-                        classes = new HashSet<Class<?>>();
+                        classes = new HashSet<>();
                         initializerClassMap.put(sci, classes);
                     }
                     classes.add(clazz);
@@ -2137,8 +2136,7 @@ public class ContextConfig implements LifecycleListener {
     }
 
     private void populateSCIsForCacheEntry(JavaClassCacheEntry cacheEntry) {
-        Set<ServletContainerInitializer> result =
-                new HashSet<ServletContainerInitializer>();
+        Set<ServletContainerInitializer> result = new HashSet<>();
 
         JavaClass javaClass = cacheEntry.getJavaClass();
 
@@ -2455,7 +2453,7 @@ public class ContextConfig implements LifecycleListener {
     }
 
     protected String[] processAnnotationsStringArray(ElementValue ev) {
-        ArrayList<String> values = new ArrayList<String>();
+        ArrayList<String> values = new ArrayList<>();
         if (ev instanceof ArrayElementValue) {
             ElementValue[] arrayValues =
                 ((ArrayElementValue) ev).getElementValuesArray();
@@ -2471,7 +2469,7 @@ public class ContextConfig implements LifecycleListener {
 
     protected Map<String,String> processAnnotationWebInitParams(
             ElementValue ev) {
-        Map<String, String> result = new HashMap<String,String>();
+        Map<String, String> result = new HashMap<>();
         if (ev instanceof ArrayElementValue) {
             ElementValue[] arrayValues =
                 ((ArrayElementValue) ev).getElementValuesArray();
@@ -2501,7 +2499,7 @@ public class ContextConfig implements LifecycleListener {
 
         private static final String FRAGMENT_LOCATION =
             "META-INF/web-fragment.xml";
-        private final Map<String,WebXml> fragments = new HashMap<String,WebXml>();
+        private final Map<String,WebXml> fragments = new HashMap<>();
 
         @Override
         public void scan(JarURLConnection jarConn) throws IOException {

==================================================
EngineRuleSet.java
index e5203f3a16..4b5c011837 100644
--- a/java/org/apache/catalina/startup/ContextRuleSet.java
+++ b/java/org/apache/catalina/startup/ContextRuleSet.java
@@ -40,13 +40,13 @@ public class ContextRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     /**
      * Should the context be created.
      */
-    protected boolean create = true;
+    protected final boolean create;
 
 
     // ------------------------------------------------------------ Constructor
@@ -57,9 +57,7 @@ public class ContextRuleSet extends RuleSetBase {
      * matching pattern prefix.
      */
     public ContextRuleSet() {
-
         this("");
-
     }
 
 
@@ -71,11 +69,7 @@ public class ContextRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public ContextRuleSet(String prefix) {
-
-        super();
-        this.namespaceURI = null;
-        this.prefix = prefix;
-
+        this(prefix, true);
     }
 
 
@@ -87,12 +81,9 @@ public class ContextRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public ContextRuleSet(String prefix, boolean create) {
-
-        super();
         this.namespaceURI = null;
         this.prefix = prefix;
         this.create = create;
-
     }
 
 

==================================================
HomesUserDatabase.java
index feff5ebc8e..4028a346b6 100644
--- a/java/org/apache/catalina/startup/EngineRuleSet.java
+++ b/java/org/apache/catalina/startup/EngineRuleSet.java
@@ -42,7 +42,7 @@ public class EngineRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     // ------------------------------------------------------------ Constructor
@@ -53,9 +53,7 @@ public class EngineRuleSet extends RuleSetBase {
      * matching pattern prefix.
      */
     public EngineRuleSet() {
-
         this("");
-
     }
 
 
@@ -67,11 +65,8 @@ public class EngineRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public EngineRuleSet(String prefix) {
-
-        super();
         this.namespaceURI = null;
         this.prefix = prefix;
-
     }
 
 

==================================================
HostConfig.java
index 0a7b47e0f8..a2438d1bd0 100644
--- a/java/org/apache/catalina/startup/HomesUserDatabase.java
+++ b/java/org/apache/catalina/startup/HomesUserDatabase.java
@@ -56,7 +56,7 @@ public final class HomesUserDatabase
     /**
      * The set of home directories for all defined users, keyed by username.
      */
-    private Hashtable<String,String> homes = new Hashtable<String,String>();
+    private final Hashtable<String,String> homes = new Hashtable<>();
 
 
     /**

==================================================
HostRuleSet.java
index 6060316c41..ea02059f4e 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -131,27 +131,27 @@ public class HostConfig
     /**
      * Map of deployed applications.
      */
-    protected Map<String, DeployedApplication> deployed =
-        new ConcurrentHashMap<String, DeployedApplication>();
+    protected final Map<String, DeployedApplication> deployed =
+            new ConcurrentHashMap<>();
 
 
     /**
      * List of applications which are being serviced, and shouldn't be
      * deployed/undeployed/redeployed at the moment.
      */
-    protected ArrayList<String> serviced = new ArrayList<String>();
+    protected final ArrayList<String> serviced = new ArrayList<>();
 
 
     /**
      * The <code>Digester</code> instance used to parse context descriptors.
      */
-    protected static Digester digester = createDigester();
+    protected static final Digester digester = createDigester();
 
     /**
      * The list of Wars in the appBase to be ignored because they are invalid
      * (e.g. contain /../ sequences).
      */
-    protected Set<String> invalidWars = new HashSet<String>();
+    protected final Set<String> invalidWars = new HashSet<>();
 
     // ------------------------------------------------------------- Properties
 
@@ -431,7 +431,7 @@ public class HostConfig
             return unfilteredAppPaths;
         }
 
-        List<String> filteredList = new ArrayList<String>();
+        List<String> filteredList = new ArrayList<>();
         Matcher matcher = null;
         for (String appPath : unfilteredAppPaths) {
             if (matcher == null) {
@@ -494,7 +494,7 @@ public class HostConfig
             return;
 
         ExecutorService es = host.getStartStopExecutor();
-        List<Future<?>> results = new ArrayList<Future<?>>();
+        List<Future<?>> results = new ArrayList<>();
 
         for (int i = 0; i < files.length; i++) {
             File contextXml = new File(configBase, files[i]);
@@ -659,7 +659,7 @@ public class HostConfig
             return;
 
         ExecutorService es = host.getStartStopExecutor();
-        List<Future<?>> results = new ArrayList<Future<?>>();
+        List<Future<?>> results = new ArrayList<>();
 
         for (int i = 0; i < files.length; i++) {
 
@@ -940,7 +940,7 @@ public class HostConfig
             return;
 
         ExecutorService es = host.getStartStopExecutor();
-        List<Future<?>> results = new ArrayList<Future<?>>();
+        List<Future<?>> results = new ArrayList<>();
 
         for (int i = 0; i < files.length; i++) {
 
@@ -1474,7 +1474,7 @@ public class HostConfig
          * Application context path. The assertion is that
          * (host.getChild(name) != null).
          */
-        public String name;
+        public final String name;
 
         /**
          * Any modification of the specified (static) resources will cause a
@@ -1483,8 +1483,8 @@ public class HostConfig
          * contain resources like the context.xml file, a compressed WAR path.
          * The value is the last modification time.
          */
-        public LinkedHashMap<String, Long> redeployResources =
-            new LinkedHashMap<String, Long>();
+        public final LinkedHashMap<String, Long> redeployResources =
+                new LinkedHashMap<>();
 
         /**
          * Any modification of the specified (static) resources will cause a
@@ -1493,8 +1493,7 @@ public class HostConfig
          * additional descriptors.
          * The value is the last modification time.
          */
-        public HashMap<String, Long> reloadResources =
-            new HashMap<String, Long>();
+        public final HashMap<String, Long> reloadResources = new HashMap<>();
 
         /**
          * Instant where the application was last put in service.

==================================================
LifecycleListenerRule.java
index da614c65bc..e6f99c6b31 100644
--- a/java/org/apache/catalina/startup/HostRuleSet.java
+++ b/java/org/apache/catalina/startup/HostRuleSet.java
@@ -42,7 +42,7 @@ public class HostRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     // ------------------------------------------------------------ Constructor
@@ -53,9 +53,7 @@ public class HostRuleSet extends RuleSetBase {
      * matching pattern prefix.
      */
     public HostRuleSet() {
-
         this("");
-
     }
 
 
@@ -67,11 +65,8 @@ public class HostRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public HostRuleSet(String prefix) {
-
-        super();
         this.namespaceURI = null;
         this.prefix = prefix;
-
     }
 
 

==================================================
NamingRuleSet.java
index e3b46b8d3a..8543520e1e 100644
--- a/java/org/apache/catalina/startup/LifecycleListenerRule.java
+++ b/java/org/apache/catalina/startup/LifecycleListenerRule.java
@@ -69,13 +69,13 @@ public class LifecycleListenerRule extends Rule {
      * The attribute name of an attribute that can override the
      * implementation class name.
      */
-    private String attributeName;
+    private final String attributeName;
 
 
     /**
      * The name of the <code>LifecycleListener</code> implementation class.
      */
-    private String listenerClass;
+    private final String listenerClass;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
PasswdUserDatabase.java
index 41e0610fd8..c41356e3ab 100644
--- a/java/org/apache/catalina/startup/NamingRuleSet.java
+++ b/java/org/apache/catalina/startup/NamingRuleSet.java
@@ -41,7 +41,7 @@ public class NamingRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     // ------------------------------------------------------------ Constructor
@@ -52,9 +52,7 @@ public class NamingRuleSet extends RuleSetBase {
      * matching pattern prefix.
      */
     public NamingRuleSet() {
-
         this("");
-
     }
 
 
@@ -66,11 +64,8 @@ public class NamingRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public NamingRuleSet(String prefix) {
-
-        super();
         this.namespaceURI = null;
         this.prefix = prefix;
-
     }
 
 

==================================================
RealmRuleSet.java
index 1fe4d0c396..392a22bb99 100644
--- a/java/org/apache/catalina/startup/PasswdUserDatabase.java
+++ b/java/org/apache/catalina/startup/PasswdUserDatabase.java
@@ -63,7 +63,7 @@ public final class PasswdUserDatabase
     /**
      * The set of home directories for all defined users, keyed by username.
      */
-    private Hashtable<String,String> homes = new Hashtable<String,String>();
+    private final Hashtable<String,String> homes = new Hashtable<>();
 
 
     /**

==================================================
SetAllPropertiesRule.java
index 9444442252..e0e2fa8b6e 100644
--- a/java/org/apache/catalina/startup/RealmRuleSet.java
+++ b/java/org/apache/catalina/startup/RealmRuleSet.java
@@ -40,7 +40,7 @@ public class RealmRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     // ------------------------------------------------------------ Constructor
@@ -51,9 +51,7 @@ public class RealmRuleSet extends RuleSetBase {
      * matching pattern prefix.
      */
     public RealmRuleSet() {
-
         this("");
-
     }
 
 
@@ -65,11 +63,8 @@ public class RealmRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public RealmRuleSet(String prefix) {
-
-        super();
         this.namespaceURI = null;
         this.prefix = prefix;
-
     }
 
 

==================================================
SetNextNamingRule.java
index fd4ecb08fa..5168aa841f 100644
--- a/java/org/apache/catalina/startup/SetAllPropertiesRule.java
+++ b/java/org/apache/catalina/startup/SetAllPropertiesRule.java
@@ -41,7 +41,7 @@ public class SetAllPropertiesRule extends Rule {
     }
 
     // ----------------------------------------------------- Instance Variables
-    protected HashMap<String,String> excludes = new HashMap<String,String>();
+    protected final HashMap<String,String> excludes = new HashMap<>();
 
     // --------------------------------------------------------- Public Methods
 

==================================================
TldConfig.java
index 57e9e1019f..5e20697f99 100644
--- a/java/org/apache/catalina/startup/SetNextNamingRule.java
+++ b/java/org/apache/catalina/startup/SetNextNamingRule.java
@@ -65,13 +65,13 @@ public class SetNextNamingRule extends Rule {
     /**
      * The method name to call on the parent object.
      */
-    protected String methodName = null;
+    protected final String methodName;
 
 
     /**
      * The Java class name of the parameter type expected by the method.
      */
-    protected String paramType = null;
+    protected final String paramType;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
TldRuleSet.java
index 744955446e..2cde2d8bbb 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -76,7 +76,7 @@ public final class TldConfig  implements LifecycleListener {
     /**
      * The <code>Digester</code>s available to process tld files.
      */
-    private static Digester[] tldDigesters = new Digester[4];
+    private static final Digester[] tldDigesters = new Digester[4];
 
     /**
      * Create (if necessary) and return a Digester configured to process the
@@ -139,11 +139,11 @@ public final class TldConfig  implements LifecycleListener {
      * correct processing priority. Only the TLD associated with the first
      * instance of any URI will be processed.
      */
-    private Set<String> taglibUris = new HashSet<String>();
+    private final Set<String> taglibUris = new HashSet<>();
 
-    private Set<String> webxmlTaglibUris = new HashSet<String>();
+    private final Set<String> webxmlTaglibUris = new HashSet<>();
 
-    private ArrayList<String> listeners = new ArrayList<String>();
+    private final ArrayList<String> listeners = new ArrayList<>();
 
     // --------------------------------------------------------- Public Methods
 
@@ -179,7 +179,7 @@ public final class TldConfig  implements LifecycleListener {
             noTldJars = null;
         } else {
             if (noTldJars == null) {
-                noTldJars = new HashSet<String>();
+                noTldJars = new HashSet<>();
             } else {
                 noTldJars.clear();
             }

==================================================
Tomcat.java
index 8bdcc44810..990e725ce8 100644
--- a/java/org/apache/catalina/startup/TldRuleSet.java
+++ b/java/org/apache/catalina/startup/TldRuleSet.java
@@ -41,7 +41,7 @@ public class TldRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     // ------------------------------------------------------------ Constructor
@@ -52,9 +52,7 @@ public class TldRuleSet extends RuleSetBase {
      * matching pattern prefix.
      */
     public TldRuleSet() {
-
         this("");
-
     }
 
 
@@ -66,11 +64,8 @@ public class TldRuleSet extends RuleSetBase {
      *  trailing slash character)
      */
     public TldRuleSet(String prefix) {
-
-        super();
         this.namespaceURI = null;
         this.prefix = prefix;
-
     }
 
 

==================================================
Tool.java
index 46503745d7..6ddef5854a 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -139,11 +139,9 @@ public class Tomcat {
     protected String hostname = "localhost";
     protected String basedir;
 
-    private final Map<String, String> userPass = new HashMap<String, String>();
-    private final Map<String, List<String>> userRoles =
-        new HashMap<String, List<String>>();
-    private final Map<String, Principal> userPrincipals =
-        new HashMap<String, Principal>();
+    private final Map<String, String> userPass = new HashMap<>();
+    private final Map<String, List<String>> userRoles = new HashMap<>();
+    private final Map<String, Principal> userPrincipals = new HashMap<>();
 
     public Tomcat() {
         // NOOP
@@ -364,7 +362,7 @@ public class Tomcat {
     public void addRole(String user, String role) {
         List<String> roles = userRoles.get(user);
         if (roles == null) {
-            roles = new ArrayList<String>();
+            roles = new ArrayList<>();
             userRoles.put(user, roles);
         }
         roles.add(role);
@@ -804,7 +802,7 @@ public class Tomcat {
             this.existing = existing;
             if (existing instanceof javax.servlet.SingleThreadModel) {
                 singleThreadModel = true;
-                instancePool = new Stack<Servlet>();
+                instancePool = new Stack<>();
             }
             this.asyncSupported = hasAsync();
         }

==================================================
UserConfig.java
index d7b62890b6..531be07b03 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -89,7 +89,8 @@ public final class Tool {
     /**
      * The pathname of our installation base directory.
      */
-    private static String catalinaHome = System.getProperty(Globals.CATALINA_HOME_PROP);
+    private static final String catalinaHome =
+            System.getProperty(Globals.CATALINA_HOME_PROP);
 
 
     /**
@@ -158,8 +159,8 @@ public final class Tool {
         // Construct the class loader we will be using
         ClassLoader classLoader = null;
         try {
-            ArrayList<File> packed = new ArrayList<File>();
-            ArrayList<File> unpacked = new ArrayList<File>();
+            ArrayList<File> packed = new ArrayList<>();
+            ArrayList<File> unpacked = new ArrayList<>();
             unpacked.add(new File(catalinaHome, "classes"));
             packed.add(new File(catalinaHome, "lib"));
             if (common) {

==================================================
WebRuleSet.java
index 9ed2a2a3bd..2552adc128 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -317,7 +317,7 @@ public final class UserConfig
         }
 
         ExecutorService executor = host.getStartStopExecutor();
-        List<Future<?>> results = new ArrayList<Future<?>>();
+        List<Future<?>> results = new ArrayList<>();
 
         // Deploy the web application (if any) for each defined user
         Enumeration<String> users = database.getUsers();

==================================================
XmlErrorHandler.java
index 2232647dfd..ca646000dc 100644
--- a/java/org/apache/catalina/startup/WebRuleSet.java
+++ b/java/org/apache/catalina/startup/WebRuleSet.java
@@ -61,54 +61,54 @@ public class WebRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
     /**
      * The full pattern matching prefix, including the webapp or web-fragment
      * component, to use for matching elements
      */
-    protected String fullPrefix = null;
+    protected final String fullPrefix;
 
     /**
      * Flag that indicates if this ruleset is for a web-fragment.xml file or for
      * a web.xml file.
      */
-    protected boolean fragment = false;
+    protected final boolean fragment;
 
     /**
      * The <code>SetSessionConfig</code> rule used to parse the web.xml
      */
-    protected SetSessionConfig sessionConfig = new SetSessionConfig();
+    protected final SetSessionConfig sessionConfig = new SetSessionConfig();
 
 
     /**
      * The <code>SetLoginConfig</code> rule used to parse the web.xml
      */
-    protected SetLoginConfig loginConfig = new SetLoginConfig();
+    protected final SetLoginConfig loginConfig = new SetLoginConfig();
 
 
     /**
      * The <code>SetJspConfig</code> rule used to parse the web.xml
      */
-    protected SetJspConfig jspConfig = new SetJspConfig();
+    protected final SetJspConfig jspConfig = new SetJspConfig();
 
 
     /**
      * The <code>NameRule</code> rule used to parse the web.xml
      */
-    protected NameRule name = new NameRule();
+    protected final NameRule name = new NameRule();
 
 
     /**
      * The <code>AbsoluteOrderingRule</code> rule used to parse the web.xml
      */
-    protected AbsoluteOrderingRule absoluteOrdering;
+    protected final AbsoluteOrderingRule absoluteOrdering;
 
 
     /**
      * The <code>RelativeOrderingRule</code> rule used to parse the web.xml
      */
-    protected RelativeOrderingRule relativeOrdering;
+    protected final RelativeOrderingRule relativeOrdering;
 
 
 
@@ -908,7 +908,7 @@ final class CallParamMultiRule extends CallParamRule {
             @SuppressWarnings("unchecked")
             ArrayList<String> params = (ArrayList<String>) parameters[paramIndex];
             if (params == null) {
-                params = new ArrayList<String>();
+                params = new ArrayList<>();
                 parameters[paramIndex] = params;
             }
             params.add(bodyTextStack.pop());
@@ -924,7 +924,7 @@ final class CallParamMultiRule extends CallParamRule {
  */
 final class CallMethodMultiRule extends CallMethodRule {
 
-    protected int multiParamIndex = 0;
+    protected final int multiParamIndex;
 
     public CallMethodMultiRule(String methodName, int paramCount, int multiParamIndex) {
         super(methodName, paramCount);

==================================================
