c7389bdcdaff4a2e9dcafc2246b66377b49dd075
==================================================
Comet connection handling. When the response.getWriter().close() method has been called,
==================================================
Filip Hanik
==================================================
Wed Jul 19 17:49:47 2006 +0000
==================================================
Http11NioProcessor.java
Comet connection handling. When the response.getWriter().close() method has been called,
the comet connection is setup for closure instead of waiting for a timeout.
This is necessary since the servlet could have set a long timeout.
Also, improve on timeout checking. Only use the optimization for how frequently we need to check the keys if there has been no activity on the selector. During heavy activity, the optimization takes into effect.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@423544 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNioOutputBuffer.java
index 4d44aa0332..ce2a7b2996 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -174,7 +174,14 @@ public class Http11NioProcessor implements ActionHook {
      * Comet used.
      */
     protected boolean comet = false;
-
+    
+    /**
+     * Closed flag, a Comet async thread can 
+     * signal for this Nio processor to be closed and recycled instead
+     * of waiting for a timeout.
+     * Closed by HttpServletResponse.getWriter().close()
+     */
+    protected boolean cometClose = false;
 
     /**
      * Content delimitator for the request (if false, the connection will
@@ -970,6 +977,8 @@ public class Http11NioProcessor implements ActionHook {
         inputBuffer.recycle();
         outputBuffer.recycle();
         this.socket = null;
+        this.cometClose = false;
+        this.comet = false;
     }
 
 
@@ -1034,6 +1043,17 @@ public class Http11NioProcessor implements ActionHook {
             // transactions with the client
 
             comet = false;
+            cometClose = true;
+            SelectionKey key = socket.keyFor(endpoint.getPoller().getSelector());
+            if ( key != null ) {
+                NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment) key.attachment();
+                if ( attach!=null && attach.getComet()) {
+                    //we need to recycle
+                    request.getAttributes().remove("org.apache.tomcat.comet.timeout");
+                    attach.setError(true);
+                }
+            }
+
             try {
                 outputBuffer.endRequest();
             } catch (IOException e) {

==================================================
NioEndpoint.java
index 265927ee84..7947e42eda 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -571,16 +571,11 @@ public class InternalNioOutputBuffer
 
     int total = 0;
     private synchronized void addToBB(byte[] buf, int offset, int length) throws IOException {
-        try {
-            if (bbuf.capacity() <= (offset + length)) {
-                flushBuffer();
-            }
-            bbuf.put(buf, offset, length);
-            total += length;
-        }catch ( Exception x ) {
-            x.printStackTrace();
+        if (bbuf.capacity() <= (offset + length)) {
+            flushBuffer();
         }
-        //System.out.println("Total:"+total);
+        bbuf.put(buf, offset, length);
+        total += length;
     }
 
 

==================================================
