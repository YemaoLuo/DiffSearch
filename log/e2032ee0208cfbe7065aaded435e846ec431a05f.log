e2032ee0208cfbe7065aaded435e846ec431a05f
==================================================
javax.el.ListELResolver:
==================================================
Violeta Georgieva
==================================================
Wed Jul 10 16:16:42 2013 +0000
==================================================
ListELResolver.java
javax.el.ListELResolver:
According to javadoc:
1. getFeatureDescriptors - always returns null
2. isReadOnly - when property cannot be coerced into an integer it is ignored by the resolver.
Unit tests are added

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1501823 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestListELResolver.java
index 1fb2ced682..031b02c48f 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -19,7 +19,6 @@ package javax.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
@@ -115,10 +114,15 @@ public class ListELResolver extends ELResolver {
         if (base instanceof List<?>) {
             context.setPropertyResolved(base, property);
             List<?> list = (List<?>) base;
-            int idx = coerce(property);
-            if (idx < 0 || idx >= list.size()) {
-                throw new PropertyNotFoundException(
-                        new ArrayIndexOutOfBoundsException(idx).getMessage());
+            try {
+                int idx = coerce(property);
+                if (idx < 0 || idx >= list.size()) {
+                    throw new PropertyNotFoundException(
+                            new ArrayIndexOutOfBoundsException(idx)
+                                    .getMessage());
+                }
+            } catch (IllegalArgumentException e) {
+                // ignore
             }
             return this.readOnly || UNMODIFIABLE.equals(list.getClass());
         }
@@ -128,20 +132,6 @@ public class ListELResolver extends ELResolver {
 
     @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        if (base instanceof List<?>) {
-            FeatureDescriptor[] descs = new FeatureDescriptor[((List<?>) base).size()];
-            for (int i = 0; i < descs.length; i++) {
-                descs[i] = new FeatureDescriptor();
-                descs[i].setDisplayName("["+i+"]");
-                descs[i].setExpert(false);
-                descs[i].setHidden(false);
-                descs[i].setName(""+i);
-                descs[i].setPreferred(true);
-                descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
-                descs[i].setValue(TYPE, Integer.class);
-            }
-            return Arrays.asList(descs).iterator();
-        }
         return null;
     }
 

==================================================
