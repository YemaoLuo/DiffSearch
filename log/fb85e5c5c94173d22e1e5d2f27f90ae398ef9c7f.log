fb85e5c5c94173d22e1e5d2f27f90ae398ef9c7f
==================================================
Fail earlier if trailer headers don't end the stream
==================================================
Mark Thomas
==================================================
Tue Oct 25 14:14:08 2016 +0000
==================================================
Http2Parser.java
Fail earlier if trailer headers don't end the stream

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1766535 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index bdd0263365..76df8f5a82 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -199,11 +199,13 @@ class Http2Parser {
     private void readHeadersFrame(int streamId, int flags, int payloadSize)
             throws Http2Exception, IOException {
 
+        headersEndStream = Flags.isEndOfStream(flags);
+
         if (hpackDecoder == null) {
             hpackDecoder = output.getHpackDecoder();
         }
         try {
-            hpackDecoder.setHeaderEmitter(output.headersStart(streamId));
+            hpackDecoder.setHeaderEmitter(output.headersStart(streamId, headersEndStream));
         } catch (StreamException se) {
             swallow(streamId, payloadSize, false);
             throw se;
@@ -247,8 +249,6 @@ class Http2Parser {
 
         swallow(streamId, padLength, true);
 
-        headersEndStream = Flags.isEndOfStream(flags);
-
         if (Flags.isEndOfHeaders(flags)) {
             onHeadersComplete(streamId);
         } else {
@@ -638,7 +638,7 @@ class Http2Parser {
         void swallowedPadding(int streamId, int paddingLength) throws ConnectionException, IOException;
 
         // Header frames
-        HeaderEmitter headersStart(int streamId) throws Http2Exception;
+        HeaderEmitter headersStart(int streamId, boolean headersEndStream) throws Http2Exception;
         void headersEnd(int streamId) throws ConnectionException;
 
         // Priority frames (also headers)

==================================================
Stream.java
index cd4bb5a8fe..bb638db7e7 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -77,6 +77,7 @@ stream.notWritable=Connection [{0}], Stream [{1}], This stream is not writable
 stream.reprioritisation.debug=Connection [{0}], Stream [{1}], Exclusive [{2}], Parent [{3}], Weight [{4}]
 stream.reset.debug=Connection [{0}], Stream [{1}], Reset due to [{2}]
 stream.reset.fail=Connection [{0}], Stream [{1}], Failed to reset stream
+stream.trialerHeader.noEndOfStream=Connection [{0}], Stream [{1}], The trailer headers did not include the end of stream flag
 stream.write=Connection [{0}], Stream [{1}]
 
 stream.inputBuffer.copy=Copying [{0}] bytes from inBuffer to outBuffer

==================================================
Http2TestBase.java
index 7e20984d05..ab65aefb08 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -356,15 +356,21 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    final void receivedStartOfHeaders() {
+    final void receivedStartOfHeaders(boolean headersEndStream) throws Http2Exception {
         if (headerState == HEADER_STATE_START) {
             headerState = HEADER_STATE_PSEUDO;
             handler.getHpackDecoder().setMaxHeaderCount(handler.getMaxHeaderCount());
             handler.getHpackDecoder().setMaxHeaderSize(handler.getMaxHeaderSize());
         } else if (headerState == HEADER_STATE_PSEUDO || headerState == HEADER_STATE_REGULAR) {
-            headerState = HEADER_STATE_TRAILER;
-            handler.getHpackDecoder().setMaxHeaderCount(handler.getMaxTrailerCount());
-            handler.getHpackDecoder().setMaxHeaderSize(handler.getMaxTrailerSize());
+            // Trailer headers MUST include the end of stream flag
+            if (headersEndStream) {
+                headerState = HEADER_STATE_TRAILER;
+                handler.getHpackDecoder().setMaxHeaderCount(handler.getMaxTrailerCount());
+                handler.getHpackDecoder().setMaxHeaderSize(handler.getMaxTrailerSize());
+            } else {
+                throw new ConnectionException(sm.getString("stream.trialerHeader.noEndOfStream",
+                        getConnectionId(), getIdentifier()), Http2Error.PROTOCOL_ERROR);
+            }
         }
         // Parser will catch attempt to send a headers frame after the stream
         // has closed.

==================================================
