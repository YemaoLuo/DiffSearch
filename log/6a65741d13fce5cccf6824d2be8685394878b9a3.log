6a65741d13fce5cccf6824d2be8685394878b9a3
==================================================
Fix BZ 65448 for blocking IO
==================================================
Mark Thomas
==================================================
Thu Jul 15 16:56:00 2021 +0100
==================================================
NioEndpoint.java
Fix BZ 65448 for blocking IO

If the write completes (from the application perspective) but the
encrypted data is not fully written, the connection (from the client's
perspective) will appear to hang until the client sends another request
(pipelining) or the connection times out.



==================================================
SecureNioChannel.java
index ffdecc2c39..7865d42cde 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1339,7 +1339,11 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
                     n = getSocket().write(buffer);
                     if (n == -1) {
                         throw new EOFException();
-                    } else if (n == 0) {
+                    } else if (n == 0 && (buffer.hasRemaining() || getSocket().getOutboundRemaining() > 0)) {
+                        // n == 0 could be an incomplete write but it could also
+                        // indicate that a previous incomplete write of the
+                        // outbound buffer (for TLS) has now completed. Only
+                        // block if there is still data to write.
                         writeBlocking = true;
                         registerWriteInterest();
                         synchronized (writeLock) {
@@ -1362,7 +1366,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
                         timeout = getWriteTimeout();
                         startNanos = 0;
                     }
-                } while (buffer.hasRemaining());
+                } while (buffer.hasRemaining() || getSocket().getOutboundRemaining() > 0);
             } else {
                 do {
                     n = getSocket().write(buffer);

==================================================
