0da9b12474179b8c33329869a9f1ce71b2715720
==================================================
Clean-up - formatting. No functional change.
==================================================
Mark Thomas
==================================================
Thu Feb 23 16:47:52 2023 +0000
==================================================
TestHttp11InputBuffer.java
Clean-up - formatting. No functional change.


==================================================
TestHttp11InputBufferCRLF.java
index 9e8c5b43b0..40276619de 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
@@ -39,7 +39,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
     private static final String CR = "\r";
     private static final String LF = "\n";
-    private  static final String CRLF = CR + LF;
+    private static final String CRLF = CR + LF;
 
     /**
      * Test case for https://bz.apache.org/bugzilla/show_bug.cgi?id=48839
@@ -76,13 +76,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 connect();
 
                 String[] request = new String[1];
-                request[0] =
-                    "GET http://localhost:8080/test HTTP/1.1" + CRLF +
-                    "Host: localhost:8080" + CRLF +
-                    "X-Bug48839: abcd" + CRLF +
-                    "\tefgh" + CRLF +
-                    "Connection: close" + CRLF +
-                    CRLF;
+                request[0] = "GET http://localhost:8080/test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF +
+                        "X-Bug48839: abcd" + CRLF + "\tefgh" + CRLF + "Connection: close" + CRLF + CRLF;
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
@@ -116,8 +111,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
          * Only interested in the request headers from a GET request
          */
         @Override
-        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
-                throws ServletException, IOException {
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             // Just echo the header value back as plain text
             resp.setContentType("text/plain");
 
@@ -167,9 +161,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
     @Test
     public void testBug51557SeparatorsInName() throws Exception {
-        char httpSeparators[] = new char[] {
-                '\t', ' ', '\"', '(', ')', ',', '/', ':', ';', '<',
-                '=', '>', '?', '@', '[', '\\', ']', '{', '}' };
+        char httpSeparators[] = new char[] { '\t', ' ', '\"', '(', ')', ',', '/', ':', ';', '<', '=', '>', '?', '@',
+                '[', '\\', ']', '{', '}' };
 
         for (char s : httpSeparators) {
             doTestBug51557CharInName(s);
@@ -222,8 +215,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     @Test
     public void testBug51557Continuation() {
 
-        Bug51557Client client = new Bug51557Client("X-Bug=51557NoColon",
-                "foo" + SimpleHttpClient.CRLF + " bar");
+        Bug51557Client client = new Bug51557Client("X-Bug=51557NoColon", "foo" + SimpleHttpClient.CRLF + " bar");
 
         client.doRequest();
         Assert.assertTrue(client.isResponse200());
@@ -235,8 +227,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     @Test
     public void testBug51557BoundaryStart() {
 
-        Bug51557Client client = new Bug51557Client("=X-Bug51557",
-                "invalid");
+        Bug51557Client client = new Bug51557Client("=X-Bug51557", "invalid");
 
         client.doRequest();
         Assert.assertTrue(client.isResponse200());
@@ -248,8 +239,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     @Test
     public void testBug51557BoundaryEnd() {
 
-        Bug51557Client client = new Bug51557Client("X-Bug51557=",
-                "invalid");
+        Bug51557Client client = new Bug51557Client("X-Bug51557=", "invalid");
 
         client.doRequest();
         Assert.assertTrue(client.isResponse200());
@@ -259,8 +249,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
 
     private void doTestBug51557CharInName(char s) {
-        Bug51557Client client =
-            new Bug51557Client("X-Bug" + s + "51557", "invalid");
+        Bug51557Client client = new Bug51557Client("X-Bug" + s + "51557", "invalid");
 
         client.doRequest();
         Assert.assertTrue(client.isResponse200());
@@ -270,8 +259,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
 
     private void doTestBug51557InvalidCharInValue(char s) {
-        Bug51557Client client =
-            new Bug51557Client("X-Bug51557-Invalid", "invalid" + s + "invalid");
+        Bug51557Client client = new Bug51557Client("X-Bug51557-Invalid", "invalid" + s + "invalid");
 
         client.doRequest();
         Assert.assertTrue("Testing [" + (int) s + "]", client.isResponse200());
@@ -281,8 +269,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
 
     private void doTestBug51557ValidCharInValue(char s) {
-        Bug51557Client client =
-            new Bug51557Client("X-Bug51557-Valid", "valid" + s + "valid");
+        Bug51557Client client = new Bug51557Client("X-Bug51557-Valid", "valid" + s + "valid");
 
         client.doRequest();
         Assert.assertTrue("Testing [" + (int) s + "]", client.isResponse200());
@@ -310,8 +297,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
             this(headerName, headerValue, false);
         }
 
-        Bug51557Client(String headerName, String headerValue,
-                boolean rejectIllegalHeader) {
+        Bug51557Client(String headerName, String headerValue, boolean rejectIllegalHeader) {
             this.headerName = headerName;
             this.headerLine = headerName + ": " + headerValue;
             this.rejectIllegalHeader = rejectIllegalHeader;
@@ -322,14 +308,12 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
             Tomcat tomcat = getTomcatInstance();
 
             Context root = tomcat.addContext("", TEMP_DIR);
-            Tomcat.addServlet(root, "Bug51557",
-                    new Bug51557Servlet(headerName));
+            Tomcat.addServlet(root, "Bug51557", new Bug51557Servlet(headerName));
             root.addServletMappingDecoded("/test", "Bug51557");
 
             try {
                 Connector connector = tomcat.getConnector();
-                Assert.assertTrue(connector.setProperty(
-                        "rejectIllegalHeader", Boolean.toString(rejectIllegalHeader)));
+                Assert.assertTrue(connector.setProperty("rejectIllegalHeader", Boolean.toString(rejectIllegalHeader)));
                 tomcat.start();
                 setPort(connector.getLocalPort());
 
@@ -338,13 +322,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 connect();
 
                 String[] request = new String[1];
-                request[0] =
-                    "GET http://localhost:8080/test HTTP/1.1" + CRLF +
-                    "Host: localhost:8080" + CRLF +
-                    headerLine + CRLF +
-                    "X-Bug51557: abcd" + CRLF +
-                    "Connection: close" + CRLF +
-                    CRLF;
+                request[0] = "GET http://localhost:8080/test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF +
+                        headerLine + CRLF + "X-Bug51557: abcd" + CRLF + "Connection: close" + CRLF + CRLF;
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
@@ -377,8 +356,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         private String invalidHeaderName;
 
         /**
-         * @param invalidHeaderName The header name should be invalid and
-         *                          therefore ignored by the header parsing code
+         * @param invalidHeaderName The header name should be invalid and therefore ignored by the header parsing code
          */
         Bug51557Servlet(String invalidHeaderName) {
             this.invalidHeaderName = invalidHeaderName;
@@ -388,8 +366,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
          * Only interested in the request headers from a GET request
          */
         @Override
-        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
-                throws ServletException, IOException {
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             // Just echo the header value back as plain text
             resp.setContentType("text/plain");
 
@@ -399,8 +376,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
             processHeaders("X-Bug51557", req, out);
         }
 
-        private void processHeaders(String header, HttpServletRequest req,
-                PrintWriter out) {
+        private void processHeaders(String header, HttpServletRequest req, PrintWriter out) {
             Enumeration<String> values = req.getHeaders(header);
             while (values.hasMoreElements()) {
                 out.println(values.nextElement());
@@ -410,8 +386,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
 
     /**
-     * Test case for new lines at the start of a request. RFC2616
-     * does not permit any, but Tomcat is tolerant of them if they are present.
+     * Test case for new lines at the start of a request. RFC2616 does not permit any, but Tomcat is tolerant of them if
+     * they are present.
      */
     @Test
     public void testNewLines() {
@@ -425,8 +401,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
 
     /**
-     * Test case for new lines at the start of a request. RFC2616
-     * does not permit any, but Tomcat is tolerant of them if they are present.
+     * Test case for new lines at the start of a request. RFC2616 does not permit any, but Tomcat is tolerant of them if
+     * they are present.
      */
     @Test
     public void testNewLinesExcessive() {
@@ -471,14 +447,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 connect();
 
                 String[] request = new String[1];
-                request[0] =
-                    newLines +
-                    "GET http://localhost:8080/test HTTP/1.1" + CRLF +
-                    "Host: localhost:8080" + CRLF +
-                    "X-Bug48839: abcd" + CRLF +
-                    "\tefgh" + CRLF +
-                    "Connection: close" + CRLF +
-                    CRLF;
+                request[0] = newLines + "GET http://localhost:8080/test HTTP/1.1" + CRLF + "Host: localhost:8080" +
+                        CRLF + "X-Bug48839: abcd" + CRLF + "\tefgh" + CRLF + "Connection: close" + CRLF + CRLF;
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
@@ -541,10 +511,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
                 String[] request = new String[2];
                 request[0] = "GET http://localhost:8080/test HTTP/1.1" + CR;
-                request[1] = LF +
-                        "Host: localhost:8080" + CRLF +
-                        "Connection: close" + CRLF +
-                        CRLF;
+                request[1] = LF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF;
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
@@ -611,10 +578,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 connect();
 
                 String[] request = new String[1];
-                request[0] = "GET http://localhost:8080/test HTTP/1.1" + CRLF +
-                        "Host: localhost:8080" + CRLF +
-                        "X-Header: Ignore" + CRLF +
-                        "X-Header" + (char) 130 + ": Broken" + CRLF + CRLF;
+                request[0] = "GET http://localhost:8080/test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF +
+                        "X-Header: Ignore" + CRLF + "X-Header" + (char) 130 + ": Broken" + CRLF + CRLF;
 
                 setRequest(request);
                 processRequest(); // blocks until response has been read
@@ -644,11 +609,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     public void testInvalidMethod() {
 
         String[] request = new String[1];
-        request[0] =
-            "GET" + (char) 0 + " /test HTTP/1.1" + CRLF +
-            "Host: localhost:8080" + CRLF +
-            "Connection: close" + CRLF +
-            CRLF;
+        request[0] = "GET" + (char) 0 + " /test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" +
+                CRLF + CRLF;
 
         InvalidClient client = new InvalidClient(request);
 
@@ -676,11 +638,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     public void testInvalidEndOfRequestLine01() {
 
         String[] request = new String[1];
-        request[0] =
-                "GET /test HTTP/1.1" + CR +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF;
+        request[0] = "GET /test HTTP/1.1" + CR + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF;
 
         InvalidClient client = new InvalidClient(request);
 
@@ -694,12 +652,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     public void testInvalidHeader01() {
 
         String[] request = new String[1];
-        request[0] =
-                "GET /test HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                CR + "X-Header: xxx" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF;
+        request[0] = "GET /test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + CR + "X-Header: xxx" + CRLF +
+                "Connection: close" + CRLF + CRLF;
 
         InvalidClient client = new InvalidClient(request);
 
@@ -725,12 +679,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         getTomcatInstance().getConnector().setProperty("rejectIllegalHeader", Boolean.toString(rejectIllegalHeader));
 
         String[] request = new String[1];
-        request[0] =
-                "POST /test HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Content-Length: 12\u000734" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF;
+        request[0] = "POST /test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Content-Length: 12\u000734" +
+                CRLF + "Connection: close" + CRLF + CRLF;
 
         InvalidClient client = new InvalidClient(request);
 

==================================================
TestHttp11OutputBuffer.java
index a38e6d78ab..d87bfa2cfa 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBufferCRLF.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBufferCRLF.java
@@ -45,10 +45,8 @@ public class TestHttp11InputBufferCRLF extends TomcatBaseTest {
 
         // Requests to exercise code that allows HT in place of SP
         parameterSets.add(new Object[] { Boolean.FALSE, new String[] {
-                "GET\t/test\tHTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-               "Connection: close" + CRLF +
-                CRLF }, Boolean.TRUE } );
+                "GET\t/test\tHTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF },
+                Boolean.TRUE });
 
         // Requests to simulate package boundaries
         // HTTP/0.9 request
@@ -68,67 +66,44 @@ public class TestHttp11InputBufferCRLF extends TomcatBaseTest {
         addRequestWithSplits("GET /test " + LF, Boolean.FALSE, Boolean.FALSE, parameterSets);
 
         // Standard HTTP/1.1 request
-        addRequestWithSplits("GET /test HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF,
+        addRequestWithSplits(
+                "GET /test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF,
                 Boolean.FALSE, parameterSets);
 
         // Standard HTTP/1.1 request with invalid HTTP protocol
-        addRequestWithSplits("GET /test HTTP/" + CR + "1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF,
-                Boolean.FALSE, Boolean.FALSE, parameterSets);
+        addRequestWithSplits("GET /test HTTP/" + CR + "1.1" + CRLF + "Host: localhost:8080" + CRLF +
+                "Connection: close" + CRLF + CRLF, Boolean.FALSE, Boolean.FALSE, parameterSets);
 
         // Invalid (request target) HTTP/1.1 request
-        addRequestWithSplits("GET /te<st HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF,
+        addRequestWithSplits(
+                "GET /te<st HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF,
                 Boolean.FALSE, Boolean.FALSE, parameterSets);
 
         // Invalid (use of CR) HTTP/1.1 request
-        addRequestWithSplits("GET /test HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                "X-aaa: bbb" + CR + CRLF +
-                CRLF,
-                Boolean.FALSE, Boolean.FALSE, parameterSets);
+        addRequestWithSplits("GET /test HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF +
+                "X-aaa: bbb" + CR + CRLF + CRLF, Boolean.FALSE, Boolean.FALSE, parameterSets);
 
         // Standard HTTP/1.1 request with a query string
-        addRequestWithSplits("GET /test?a=b HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF,
+        addRequestWithSplits(
+                "GET /test?a=b HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF,
                 Boolean.FALSE, parameterSets);
 
         // Standard HTTP/1.1 request with a query string that includes ?
-        addRequestWithSplits("GET /test?a=?b HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF,
+        addRequestWithSplits(
+                "GET /test?a=?b HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF,
                 Boolean.FALSE, parameterSets);
 
         // Standard HTTP/1.1 request with an invalid query string
-        addRequestWithSplits("GET /test?a=<b HTTP/1.1" + CRLF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF,
+        addRequestWithSplits(
+                "GET /test?a=<b HTTP/1.1" + CRLF + "Host: localhost:8080" + CRLF + "Connection: close" + CRLF + CRLF,
                 Boolean.FALSE, Boolean.FALSE, parameterSets);
 
         // Standard HTTP/1.1 request using LF rather than CRLF
-        addRequestWithSplits("GET /test HTTP/1.1" + LF +
-                "Host: localhost:8080" + LF +
-                "Connection: close" + LF +
-                LF,
+        addRequestWithSplits("GET /test HTTP/1.1" + LF + "Host: localhost:8080" + LF + "Connection: close" + LF + LF,
                 Boolean.FALSE, parameterSets);
 
         // Invalid HTTP/1.1 request using CR rather than CRLF
-        addRequestWithSplits("GET /test HTTP/1.1" + CR +
-                "Host: localhost:8080" + CR +
-                "Connection: close" + CR +
-                CR,
+        addRequestWithSplits("GET /test HTTP/1.1" + CR + "Host: localhost:8080" + CR + "Connection: close" + CR + CR,
                 Boolean.FALSE, Boolean.FALSE, parameterSets);
 
         return parameterSets;
@@ -139,7 +114,8 @@ public class TestHttp11InputBufferCRLF extends TomcatBaseTest {
         addRequestWithSplits(request, isHttp09, Boolean.TRUE, parameterSets);
     }
 
-    private static void addRequestWithSplits(String request, Boolean isHttp09, Boolean valid, List<Object[]> parameterSets) {
+    private static void addRequestWithSplits(String request, Boolean isHttp09, Boolean valid,
+            List<Object[]> parameterSets) {
         // Add as a single String
         parameterSets.add(new Object[] { isHttp09, new String[] { request }, valid });
 
@@ -182,7 +158,7 @@ public class TestHttp11InputBufferCRLF extends TomcatBaseTest {
 
         if (valid) {
             Assert.assertTrue(client.isResponseBodyOK());
-        } else if (e == null){
+        } else if (e == null) {
             Assert.assertTrue(client.isResponse400());
         } else {
             // The invalid request was detected before the entire request had

==================================================
TestHttp11Processor.java
index 43aa9b83a5..d092051e83 100644
--- a/test/org/apache/coyote/http11/TestHttp11OutputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11OutputBuffer.java
@@ -97,7 +97,7 @@ public class TestHttp11OutputBuffer extends TomcatBaseTest {
 
         tomcat.start();
 
-        Map<String,List<String>> resHeaders = new HashMap<>();
+        Map<String, List<String>> resHeaders = new HashMap<>();
         int rc = getUrl("http://localhost:" + getPort() + "/header", new ByteChunk(), resHeaders);
 
         if (valid) {

==================================================
