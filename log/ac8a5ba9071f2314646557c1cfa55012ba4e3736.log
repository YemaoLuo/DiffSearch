ac8a5ba9071f2314646557c1cfa55012ba4e3736
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48971
==================================================
Mark Emlyn
==================================================
Tue Jun 1 16:59:14 2010 +0000
==================================================
StandardContext.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48971
Make stopping of TimerThreads optional and disabled by default

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@950164 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index 9b393d885d..0e0ec5eca4 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -759,9 +759,16 @@ public class StandardContext extends ContainerBase
      * instability. As such, enabling this should be viewed as an option of last
      * resort in a development environment and is not recommended in a
      * production environment. If not specified, the default value of
-     * <code>false</code> will be used. 
+     * <code>false</code> will be used.
      */
     private boolean clearReferencesStopThreads = false;
+
+    /**
+     * Should Tomcat attempt to terminate any {@link java.util.TimerThread}s
+     * that have been started by the web application? If not specified, the
+     * default value of <code>false</code> will be used.
+     */
+    private boolean clearReferencesStopTimerThreads = false;
     
     /**
      * Should Tomcat attempt to clear any ThreadLocal objects that are instances
@@ -2308,6 +2315,31 @@ public class StandardContext extends ContainerBase
     }
 
 
+    /**
+     * Return the clearReferencesStopTimerThreads flag for this Context.
+     */
+    public boolean getClearReferencesStopTimerThreads() {
+        return (this.clearReferencesStopTimerThreads);
+    }
+
+
+    /**
+     * Set the clearReferencesStopTimerThreads feature for this Context.
+     *
+     * @param clearReferencesStopTimerThreads The new flag value
+     */
+    public void setClearReferencesStopTimerThreads(
+            boolean clearReferencesStopTimerThreads) {
+
+        boolean oldClearReferencesStopTimerThreads =
+            this.clearReferencesStopTimerThreads;
+        this.clearReferencesStopTimerThreads = clearReferencesStopTimerThreads;
+        support.firePropertyChange("clearReferencesStopTimerThreads",
+                                   oldClearReferencesStopTimerThreads,
+                                   this.clearReferencesStopTimerThreads);
+    }
+
+
     /**
      * Return the clearReferencesThreadLocals flag for this Context.
      */

==================================================
WebappLoader.java
index 561b2e6d02..74388df4c8 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -444,12 +444,17 @@ public class WebappClassLoader
      * instability. As such, enabling this should be viewed as an option of last
      * resort in a development environment and is not recommended in a
      * production environment. If not specified, the default value of
-     * <code>false</code> will be used. Note that instances of
-     * java.util.TimerThread will always be terminate since a safe method exists
-     * to do so.
+     * <code>false</code> will be used.
      */
     private boolean clearReferencesStopThreads = false;
 
+    /**
+     * Should Tomcat attempt to terminate any {@link java.util.TimerThread}s
+     * that have been started by the web application? If not specified, the
+     * default value of <code>false</code> will be used.
+     */
+    private boolean clearReferencesStopTimerThreads = false;
+
     /**
      * Should Tomcat attempt to clear any ThreadLocal objects that are instances
      * of classes loaded by this class loader. Failure to remove any such
@@ -706,6 +711,25 @@ public class WebappClassLoader
      }
 
 
+     /**
+      * Return the clearReferencesStopTimerThreads flag for this Context.
+      */
+     public boolean getClearReferencesStopTimerThreads() {
+         return (this.clearReferencesStopTimerThreads);
+     }
+
+
+     /**
+      * Set the clearReferencesStopTimerThreads feature for this Context.
+      *
+      * @param clearReferencesStopTimerThreads The new flag value
+      */
+     public void setClearReferencesStopTimerThreads(
+             boolean clearReferencesStopTimerThreads) {
+         this.clearReferencesStopTimerThreads = clearReferencesStopTimerThreads;
+     }
+
+
      /**
       * Return the clearReferencesLogFactoryRelease flag for this Context.
       */
@@ -714,6 +738,16 @@ public class WebappClassLoader
      }
 
 
+     /**
+      * Set the clearReferencesLogFactoryRelease feature for this Context.
+      *
+      * @param clearReferencesLogFactoryRelease The new flag value
+      */
+     public void setClearReferencesLogFactoryRelease(
+             boolean clearReferencesLogFactoryRelease) {
+         this.clearReferencesLogFactoryRelease =
+             clearReferencesLogFactoryRelease;
+     }
 
 
      /**
@@ -735,18 +769,6 @@ public class WebappClassLoader
      }
 
 
-     /**
-      * Set the clearReferencesLogFactoryRelease feature for this Context.
-      *
-      * @param clearReferencesLogFactoryRelease The new flag value
-      */
-     public void setClearReferencesLogFactoryRelease(
-             boolean clearReferencesLogFactoryRelease) {
-         this.clearReferencesLogFactoryRelease =
-             clearReferencesLogFactoryRelease;
-     }
-
-
     // ------------------------------------------------------- Reloader Methods
 
 
@@ -2152,9 +2174,10 @@ public class WebappClassLoader
                         continue;
                     }
                    
-                    // TimerThread is not normally visible
+                    // TimerThread can be stopped safely so treat separately
                     if (thread.getClass().getName().equals(
-                            "java.util.TimerThread")) {
+                            "java.util.TimerThread") &&
+                            clearReferencesStopTimerThreads) {
                         clearReferencesStopTimerThread(thread);
                         continue;
                     }

==================================================
