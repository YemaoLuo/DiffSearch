bba1b692d14a2deaddc590de3e81ce153279a52d
==================================================
Start to pull up common code from constructors
==================================================
Mark Emlyn
==================================================
Sun Jun 19 10:53:00 2011 +0000
==================================================
AbstractAjpProcessor.java
Start to pull up common code from constructors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1137335 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index 53f97709a7..17061c11cc 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -34,6 +34,7 @@ import org.apache.coyote.AsyncStateMachine;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
+import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -41,6 +42,7 @@ import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.http.MimeHeaders;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -219,6 +221,24 @@ public abstract class AbstractAjpProcessor extends AbstractProcessor {
     protected long byteCount = 0;
     
     
+    // ------------------------------------------------------------ Constructor
+    
+    public AbstractAjpProcessor(int packetSize, AbstractEndpoint endpoint) {
+        this.packetSize = packetSize;
+        this.endpoint = endpoint;
+
+        request = new Request();
+        request.setInputBuffer(new SocketInputBuffer());
+        
+        response = new Response();
+        request.setResponse(response);
+
+        requestHeaderMessage = new AjpMessage(packetSize);
+        responseHeaderMessage = new AjpMessage(packetSize);
+        bodyMessage = new AjpMessage(packetSize);
+    }
+
+    
     // ------------------------------------------------------------- Properties
 
 

==================================================
AjpNioProcessor.java
index 732abc632a..b75a6e823f 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -23,7 +23,6 @@ import java.nio.ByteBuffer;
 
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.OutputBuffer;
-import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
@@ -69,20 +68,10 @@ public class AjpAprProcessor extends AbstractAjpProcessor {
 
     public AjpAprProcessor(int packetSize, AprEndpoint endpoint) {
 
-        this.endpoint = endpoint;
+        super(packetSize, endpoint);
 
-        request = new Request();
-        request.setInputBuffer(new SocketInputBuffer());
-
-        response = new Response();
         response.setHook(this);
         response.setOutputBuffer(new SocketOutputBuffer());
-        request.setResponse(response);
-
-        this.packetSize = packetSize;
-        requestHeaderMessage = new AjpMessage(packetSize);
-        responseHeaderMessage = new AjpMessage(packetSize);
-        bodyMessage = new AjpMessage(packetSize);
 
         // Set the get body message buffer
         AjpMessage getBodyMessage = new AjpMessage(16);

==================================================
AjpProcessor.java
index e7ab8a28d8..0a9e16e9c4 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -25,7 +25,6 @@ import java.nio.channels.Selector;
 
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.OutputBuffer;
-import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
@@ -62,23 +61,13 @@ public class AjpNioProcessor extends AbstractAjpProcessor {
 
     public AjpNioProcessor(int packetSize, NioEndpoint endpoint) {
 
-        this.endpoint = endpoint;
+        super(packetSize, endpoint);
 
-        request = new Request();
-        request.setInputBuffer(new SocketInputBuffer());
-
-        response = new Response();
         response.setHook(this);
         response.setOutputBuffer(new SocketOutputBuffer());
-        request.setResponse(response);
 
         pool = endpoint.getSelectorPool();
 
-        this.packetSize = packetSize;
-        requestHeaderMessage = new AjpMessage(packetSize);
-        responseHeaderMessage = new AjpMessage(packetSize);
-        bodyMessage = new AjpMessage(packetSize);
-
         // Set the get body message buffer
         AjpMessage getBodyMessage = new AjpMessage(16);
         getBodyMessage.reset();

==================================================
