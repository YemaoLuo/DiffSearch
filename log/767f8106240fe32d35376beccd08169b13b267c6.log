767f8106240fe32d35376beccd08169b13b267c6
==================================================
Remove the need to pass an Executor into the AbstractProcessor
==================================================
Mark Thomas
==================================================
Wed Dec 14 11:07:12 2016 +0000
==================================================
AbstractProcessor.java
Remove the need to pass an Executor into the AbstractProcessor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774193 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncStateMachine.java
index 463e3bd2f1..908ee89028 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -20,7 +20,6 @@ import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.nio.ByteBuffer;
 import java.util.Iterator;
-import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.servlet.RequestDispatcher;
@@ -45,7 +44,6 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     protected Adapter adapter;
     protected final AsyncStateMachine asyncStateMachine;
     private volatile long asyncTimeout = -1;
-    protected final Executor executor;
     protected final Request request;
     protected final Response response;
     protected volatile SocketWrapperBase<?> socketWrapper = null;
@@ -58,14 +56,12 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     private ErrorState errorState = ErrorState.NONE;
 
 
-    public AbstractProcessor(AbstractProtocol<?> protocol) {
-        this(protocol.getExecutor(), new Request(), new Response());
+    public AbstractProcessor() {
+        this(new Request(), new Response());
     }
 
 
-    protected AbstractProcessor(Executor executor, Request coyoteRequest,
-            Response coyoteResponse) {
-        this.executor = executor;
+    protected AbstractProcessor(Request coyoteRequest, Response coyoteResponse) {
         asyncStateMachine = new AsyncStateMachine(this);
         request = coyoteRequest;
         response = coyoteResponse;
@@ -156,10 +152,15 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
 
 
     /**
-     * @return the Executor used to dispatch processing to a container thread
+     * Provides a mechanism to trigger processing on a container thread.
      */
-    protected Executor getExecutor() {
-        return executor;
+    protected void execute(Runnable runnable) {
+        SocketWrapperBase<?> socketWrapper = this.socketWrapper;
+        if (socketWrapper == null) {
+            getLog().warn(sm.getString("abstractProcessor.noExecute"), new Exception());
+        } else {
+            socketWrapper.getExecutor().execute(runnable);
+        }
     }
 
 

==================================================
AjpProcessor.java
index d5123d0ddd..98d42d9f52 100644
--- a/java/org/apache/coyote/LocalStrings.properties
+++ b/java/org/apache/coyote/LocalStrings.properties
@@ -20,6 +20,7 @@ abstractConnectionHandler.socketexception.debug=SocketExceptions are normal, ign
 abstractConnectionHandler.negotiatedProcessor.fail=Failed to create Processor for negotiated protocol [{0}]
 
 abstractProcessor.httpupgrade.notsupported=HTTP upgrade is not supported by this protocol
+abstractProcessor.noExecute=Unable to transfer processing to a container thread because this Processor is not currently associated with a SocketWrapper
 abstractProcessor.nonContainerThreadError=An error occurred in processing while on a non-container thread. The connection will be closed immediately
 abstractProcessor.pushrequest.notsupported=Server push requests are not supported by this protocol
 abstractProcessor.socket.ssl=Exception getting SSL attributes

==================================================
Http11Processor.java
index 6e7a0623f1..edd8ba2fb8 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -245,8 +245,7 @@ public class AjpProcessor extends AbstractProcessor {
     // ------------------------------------------------------------ Constructor
 
     public AjpProcessor(AbstractAjpProtocol<?> protocol) {
-
-        super(protocol);
+        super();
         this.protocol = protocol;
 
         int packetSize = protocol.getPacketSize();

==================================================
StreamProcessor.java
index fa5b7f85e0..868daf52fa 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -148,8 +148,7 @@ public class Http11Processor extends AbstractProcessor {
 
 
     public Http11Processor(AbstractHttp11Protocol<?> protocol) {
-
-        super(protocol);
+        super();
         this.protocol = protocol;
 
         userDataHelper = new UserDataHelper(log);

==================================================
