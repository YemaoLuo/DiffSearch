7ead1889048a05814e9a25a7a0bdf0a2cfc8f015
==================================================
Differentiate between checking to see if OutputBuffer has data to write
==================================================
Mark Thomas
==================================================
Thu Jan 8 13:11:31 2015 +0000
==================================================
AjpProcessor.java
Differentiate between checking to see if OutputBuffer has data to write
and isReady() (for write). The later requires a write registration if it
is not ready.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1650286 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UpgradeServletOutputStream.java
index b6a579e4e8..222f5fe7fe 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -586,7 +586,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
         }
         case NB_WRITE_INTEREST: {
             AtomicBoolean isReady = (AtomicBoolean)param;
-            boolean result = !socketWrapper.hasDataToWrite() && responseMsgPos == -1;
+            boolean result = socketWrapper.isReadyForWrite() && responseMsgPos == -1;
             isReady.set(result);
             if (!result) {
                 registerForEvent(false, true);

==================================================
Nio2Endpoint.java
index 3c84e2b8e3..7aa1920365 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java
@@ -72,7 +72,7 @@ public class UpgradeServletOutputStream extends ServletOutputStream {
         // Make sure isReady() and onWritePossible() have a consistent view of
         // buffer and fireListener when determining if the listener should fire
         synchronized (fireListenerLock) {
-            boolean result = !socketWrapper.hasDataToWrite();
+            boolean result = socketWrapper.isReadyForWrite();
             fireListener = !result;
             return result;
         }
@@ -170,7 +170,7 @@ public class UpgradeServletOutputStream extends ServletOutputStream {
         // should fire
         boolean fire = false;
         synchronized (fireListenerLock) {
-            if (!socketWrapper.hasDataToWrite() && fireListener) {
+            if (socketWrapper.isReadyForWrite() && fireListener) {
                 fireListener = false;
                 fire = true;
             }

==================================================
SocketWrapperBase.java
index 1590bcd598..d25c80e992 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1267,6 +1267,16 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
+        @Override
+        public boolean isReadyForWrite() {
+            boolean result = super.isReadyForWrite();
+            if (!result) {
+                writeInterest = true;
+            }
+            return result;
+        }
+
+
         @Override
         public void registerWriteInterest() {
             synchronized (writeCompletionHandler) {

==================================================
