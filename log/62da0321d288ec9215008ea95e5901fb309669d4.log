62da0321d288ec9215008ea95e5901fb309669d4
==================================================
Switch tests to using per connection control of redirects rather than
==================================================
Mark Thomas
==================================================
Fri Feb 2 21:42:05 2018 +0000
==================================================
TestMapperWebapps.java
Switch tests to using per connection control of redirects rather than
changing the default which may fail when testing with concurrent
threads.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1823007 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestRewriteValve.java
index c128aaf334..4fc9bd5afb 100644
--- a/test/org/apache/catalina/mapper/TestMapperWebapps.java
+++ b/test/org/apache/catalina/mapper/TestMapperWebapps.java
@@ -18,7 +18,6 @@ package org.apache.catalina.mapper;
 
 import java.io.File;
 import java.io.IOException;
-import java.net.HttpURLConnection;
 import java.util.HashMap;
 import java.util.List;
 
@@ -231,61 +230,54 @@ public class TestMapperWebapps extends TomcatBaseTest{
 
     @Test
     public void testRedirect() throws Exception {
-        // Disable the following of redirects for this test only
-        boolean originalValue = HttpURLConnection.getFollowRedirects();
-        HttpURLConnection.setFollowRedirects(false);
-        try {
-            Tomcat tomcat = getTomcatInstance();
-
-            // Use standard test webapp as ROOT
-            File rootDir = new File("test/webapp");
-            org.apache.catalina.Context root =
-                    tomcat.addWebapp(null, "", rootDir.getAbsolutePath());
-
-            // Add a security constraint
-            SecurityConstraint constraint = new SecurityConstraint();
-            SecurityCollection collection = new SecurityCollection();
-            collection.addPatternDecoded("/welcome-files/*");
-            collection.addPatternDecoded("/welcome-files");
-            constraint.addCollection(collection);
-            constraint.addAuthRole("foo");
-            root.addConstraint(constraint);
-
-            // Also make examples available
-            File examplesDir = new File(getBuildDirectory(), "webapps/examples");
-            org.apache.catalina.Context examples  = tomcat.addWebapp(
-                    null, "/examples", examplesDir.getAbsolutePath());
-            examples.setMapperContextRootRedirectEnabled(false);
-            // Then block access to the examples to test redirection
-            RemoteAddrValve rav = new RemoteAddrValve();
-            rav.setDeny(".*");
-            rav.setDenyStatus(404);
-            examples.getPipeline().addValve(rav);
-
-            tomcat.start();
-
-            // Redirects within a web application
-            doRedirectTest("/welcome-files", 401);
-            doRedirectTest("/welcome-files/", 401);
-
-            doRedirectTest("/jsp", 302);
-            doRedirectTest("/jsp/", 404);
-
-            doRedirectTest("/WEB-INF", 404);
-            doRedirectTest("/WEB-INF/", 404);
-
-            // Redirects between web applications
-            doRedirectTest("/examples", 404);
-            doRedirectTest("/examples/", 404);
-        } finally {
-            HttpURLConnection.setFollowRedirects(originalValue);
-        }
+        Tomcat tomcat = getTomcatInstance();
+
+        // Use standard test webapp as ROOT
+        File rootDir = new File("test/webapp");
+        org.apache.catalina.Context root =
+                tomcat.addWebapp(null, "", rootDir.getAbsolutePath());
+
+        // Add a security constraint
+        SecurityConstraint constraint = new SecurityConstraint();
+        SecurityCollection collection = new SecurityCollection();
+        collection.addPatternDecoded("/welcome-files/*");
+        collection.addPatternDecoded("/welcome-files");
+        constraint.addCollection(collection);
+        constraint.addAuthRole("foo");
+        root.addConstraint(constraint);
+
+        // Also make examples available
+        File examplesDir = new File(getBuildDirectory(), "webapps/examples");
+        org.apache.catalina.Context examples  = tomcat.addWebapp(
+                null, "/examples", examplesDir.getAbsolutePath());
+        examples.setMapperContextRootRedirectEnabled(false);
+        // Then block access to the examples to test redirection
+        RemoteAddrValve rav = new RemoteAddrValve();
+        rav.setDeny(".*");
+        rav.setDenyStatus(404);
+        examples.getPipeline().addValve(rav);
+
+        tomcat.start();
+
+        // Redirects within a web application
+        doRedirectTest("/welcome-files", 401);
+        doRedirectTest("/welcome-files/", 401);
+
+        doRedirectTest("/jsp", 302);
+        doRedirectTest("/jsp/", 404);
+
+        doRedirectTest("/WEB-INF", 404);
+        doRedirectTest("/WEB-INF/", 404);
+
+        // Redirects between web applications
+        doRedirectTest("/examples", 404);
+        doRedirectTest("/examples/", 404);
     }
 
 
     private void doRedirectTest(String path, int expected) throws IOException {
         ByteChunk bc = new ByteChunk();
-        int rc = getUrl("http://localhost:" + getPort() + path, bc, null);
+        int rc = getUrl("http://localhost:" + getPort() + path, bc, false);
         Assert.assertEquals(expected, rc);
     }
 

==================================================
