54dbe0653550139c698d239ef2601d8b9d76c8af
==================================================
More consistent naming
==================================================
Mark Thomas
==================================================
Tue Oct 18 14:35:33 2016 +0000
==================================================
Http2Parser.java
More consistent naming

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1765447 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index 72991d8b26..68c52514f2 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -172,7 +172,7 @@ class Http2Parser {
                 swallow(streamId, padLength, true);
             }
             if (endOfStream) {
-                output.receiveEndOfStream(streamId);
+                output.receivedEndOfStream(streamId);
             }
         } else {
             synchronized (dest) {
@@ -183,7 +183,7 @@ class Http2Parser {
                     swallow(streamId, padLength, true);
                 }
                 if (endOfStream) {
-                    output.receiveEndOfStream(streamId);
+                    output.receivedEndOfStream(streamId);
                 }
                 output.endRequestBodyFrame(streamId);
             }
@@ -411,7 +411,7 @@ class Http2Parser {
         output.headersEnd(streamId);
 
         if (headersEndStream) {
-            output.receiveEndOfStream(streamId);
+            output.receivedEndOfStream(streamId);
             headersEndStream = false;
         }
     }
@@ -580,7 +580,7 @@ class Http2Parser {
         // Data frames
         ByteBuffer startRequestBodyFrame(int streamId, int payloadSize) throws Http2Exception;
         void endRequestBodyFrame(int streamId) throws Http2Exception;
-        void receiveEndOfStream(int streamId) throws ConnectionException;
+        void receivedEndOfStream(int streamId) throws ConnectionException;
         void swallowedPadding(int streamId, int paddingLength) throws ConnectionException, IOException;
 
         // Header frames

==================================================
Stream.java
index 88aa9f6727..8df2273d3c 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -1167,7 +1167,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
 
 
     @Override
-    public void receiveEndOfStream(int streamId) throws ConnectionException {
+    public void receivedEndOfStream(int streamId) throws ConnectionException {
         Stream stream = getStream(streamId, connectionState.get().isNewStreamAllowed());
         if (stream != null) {
             stream.receivedEndOfStream();
@@ -1247,7 +1247,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         setMaxProcessedStream(streamId);
         Stream stream = getStream(streamId, connectionState.get().isNewStreamAllowed());
         if (stream != null && stream.isActive()) {
-            stream.headersEnd();
+            stream.receivedEndOfHeaders();
             processStreamOnContainerThread(stream);
         }
     }

==================================================
StreamStateMachine.java
index 239ba6db85..8c5785807f 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -125,7 +125,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
                     Long.toString(errorCode)));
         }
         // Set the new state first since read and write both check this
-        state.receiveReset();
+        state.receivedReset();
         // Reads wait internally so need to call a method to break the wait()
         if (inputBuffer != null) {
             inputBuffer.receiveReset();
@@ -251,7 +251,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    final void headersEnd() {
+    final void receivedEndOfHeaders() {
         // Cookie headers need to be concatenated into a single header
         // See RFC 7540 8.1.2.5
         // Can only do this once the headers are fully received

==================================================
Http2TestBase.java
index 2aa09bf200..5bcd8f68d2 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -71,7 +71,7 @@ class StreamStateMachine {
     }
 
 
-    final synchronized void receiveReset() {
+    final synchronized void receivedReset() {
         stateChange(state, State.CLOSED_RST_RX);
     }
 

==================================================
