06800ebb069df51c7a0f243a962a1cfe05893b31
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54710
==================================================
Mark Emlyn
==================================================
Mon Mar 18 21:47:02 2013 +0000
==================================================
PojoEndpointBase.java
index 2b058f4ffd..8cd099d177 100644
--- a/java/org/apache/tomcat/websocket/pojo/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/pojo/LocalStrings.properties
@@ -24,7 +24,9 @@ pojoMethodMapping.duplicateSessionParam=Multiple session parameters present on t
 pojoMethodMapping.invalidType=Unable to coerce value [{0}] to type [{1}]. That type is not supported.
 pojoMethodMapping.noPayload=No payload parameter present on the method [{0}] of class [{1}] that was annotated with OnMessage
 pojoMethodMapping.onErrorNoThrowable=No Throwable parameter was present on the method [{0}] of class [{1}] that was annotated with OnError
-pojoMethodMapping.partialPong=Invalid PongMessgae and boolean parameters present on the method [{0}] of class [{1}] that was annotated with OnMessage
+pojoMethodMapping.partialInputStream=Invalid InputStream and boolean parameters present on the method [{0}] of class [{1}] that was annotated with OnMessage
+pojoMethodMapping.partialPong=Invalid PongMesssge and boolean parameters present on the method [{0}] of class [{1}] that was annotated with OnMessage
+pojoMethodMapping.partialReader=Invalid Reader and boolean parameters present on the method [{0}] of class [{1}] that was annotated with OnMessage
 pojoMethodMapping.pongWithPayload=Invalid PongMessgae and Message parameters present on the method [{0}] of class [{1}] that was annotated with OnMessage
 pojoMessageHandlerWhole.decodeFail=Failed to decode received message with first matching Decoder instance
 pojoMessageHandlerWhole.decodeIoFail=IO error while decoding message
\ No newline at end of file

==================================================
PojoMessageHandlerBase.java
index c491b6552e..09bba46762 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
@@ -74,7 +74,7 @@ public abstract class PojoEndpointBase extends Endpoint {
         if (methodMapping.getOnClose() != null) {
             try {
                 methodMapping.getOnClose().invoke(pojo,
-                        methodMapping.getOnCloseArgs(pathParameters, session));
+                        methodMapping.getOnCloseArgs(pathParameters, session, closeReason));
             } catch (IllegalAccessException | IllegalArgumentException
                     | InvocationTargetException e) {
                 log.error(sm.getString("pojoEndpointBase.onCloseFail",

==================================================
PojoMessageHandlerPartialBase.java
index 0a6e68cf3b..b2974f97f1 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerBase.java
@@ -36,19 +36,19 @@ public abstract class PojoMessageHandlerBase<T> {
     protected final Session session;
     protected final Object[] params;
     protected final int indexPayload;
-    protected final boolean unwrap;
+    protected final boolean convert;
     protected final int indexSession;
 
 
     public PojoMessageHandlerBase(Object pojo, Method method,
-            Session session, Object[] params, int indexPayload, boolean unwrap,
+            Session session, Object[] params, int indexPayload, boolean convert,
             int indexSession) {
         this.pojo = pojo;
         this.method = method;
         this.session = session;
         this.params = params;
         this.indexPayload = indexPayload;
-        this.unwrap = unwrap;
+        this.convert = convert;
         this.indexSession = indexSession;
     }
 

==================================================
PojoMessageHandlerPartialBinary.java
index 330e151864..d756f8f4ff 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBase.java
@@ -36,8 +36,8 @@ public abstract class PojoMessageHandlerPartialBase<T>
 
     public PojoMessageHandlerPartialBase(Object pojo, Method method,
             Session session, Object[] params, int indexPayload,
-            boolean unwrap, int indexBoolean, int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap,
+            boolean convert, int indexBoolean, int indexSession) {
+        super(pojo, method, session, params, indexPayload, convert,
                 indexSession);
         this.indexBoolean = indexBoolean;
     }
@@ -52,7 +52,7 @@ public abstract class PojoMessageHandlerPartialBase<T>
         if (indexSession != -1) {
             parameters[indexSession] = session;
         }
-        if (unwrap) {
+        if (convert) {
             parameters[indexPayload] = ((ByteBuffer) message).array();
         } else {
             parameters[indexPayload] = message;

==================================================
PojoMessageHandlerPartialText.java
index eef83a0454..1f51f1d8d5 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBinary.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBinary.java
@@ -28,9 +28,9 @@ public class PojoMessageHandlerPartialBinary
         extends PojoMessageHandlerPartialBase<ByteBuffer>{
 
     public PojoMessageHandlerPartialBinary(Object pojo, Method method,
-            Session session, Object[] params, int indexPayload, boolean unwrap,
+            Session session, Object[] params, int indexPayload, boolean convert,
             int indexBoolean, int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap, indexBoolean,
+        super(pojo, method, session, params, indexPayload, convert, indexBoolean,
                 indexSession);
     }
 }

==================================================
PojoMessageHandlerWholeBase.java
index 5789a5bafe..271dfcd987 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialText.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialText.java
@@ -27,9 +27,9 @@ public class PojoMessageHandlerPartialText
         extends PojoMessageHandlerPartialBase<String>{
 
     public PojoMessageHandlerPartialText(Object pojo, Method method,
-            Session session, Object[] params, int indexPayload, boolean unwrap,
+            Session session, Object[] params, int indexPayload, boolean convert,
             int indexBoolean, int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap, indexBoolean,
+        super(pojo, method, session, params, indexPayload, convert, indexBoolean,
                 indexSession);
     }
 }

==================================================
PojoMessageHandlerWholeBinary.java
index a63ee209c2..7229f22b23 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.websocket.pojo;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.nio.ByteBuffer;
 
 import javax.websocket.DecodeException;
 import javax.websocket.MessageHandler;
@@ -42,8 +41,8 @@ public abstract class PojoMessageHandlerWholeBase<T>
 
     public PojoMessageHandlerWholeBase(Object pojo, Method method,
             Session session, Object[] params, int indexPayload,
-            boolean unwrap, int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap,
+            boolean convert, int indexSession) {
+        super(pojo, method, session, params, indexPayload, convert,
                 indexSession);
     }
 
@@ -63,13 +62,9 @@ public abstract class PojoMessageHandlerWholeBase<T>
         }
 
         if (payload == null) {
-            // Not decoded. Unwrap if required. Unwrap only ever applies to
-            // ByteBuffers
-            if (unwrap) {
-                ByteBuffer bb = (ByteBuffer) message;
-                byte[] array = new byte[bb.remaining()];
-                bb.get(array);
-                payload = array;
+            // Not decoded. Convert if required.
+            if (convert) {
+                payload = convert(message);
             } else {
                 payload = message;
             }
@@ -90,6 +85,10 @@ public abstract class PojoMessageHandlerWholeBase<T>
         processResult(result);
     }
 
+    protected Object convert(T message) {
+        return message;
+    }
+
 
     protected abstract Object decode(T message) throws DecodeException;
     protected abstract void onClose();

==================================================
PojoMessageHandlerWholePong.java
index 1e8a5a099f..e44cd9fe1a 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
@@ -43,18 +43,21 @@ public class PojoMessageHandlerWholeBinary
 
     private final List<Decoder> decoders = new ArrayList<>();
 
+    private final boolean isForInputStream;
+
     public PojoMessageHandlerWholeBinary(Object pojo, Method method,
             Session session, EndpointConfig config, Object[] params,
-            int indexPayload, boolean unwrap, int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap, indexSession);
+            int indexPayload, boolean convert, int indexSession,
+            boolean isForInputStream) {
+        super(pojo, method, session, params, indexPayload, convert,
+                indexSession);
         try {
             for (Class<? extends Decoder> decoderClazz : config.getDecoders()) {
                 if (Binary.class.isAssignableFrom(decoderClazz)) {
                     Binary<?> decoder = (Binary<?>) decoderClazz.newInstance();
                     decoder.init(config);
                     decoders.add(decoder);
-                } else if (Decoder.TextStream.class.isAssignableFrom(
-                        decoderClazz)) {
+                } else if (BinaryStream.class.isAssignableFrom(decoderClazz)) {
                     BinaryStream<?> decoder =
                             (BinaryStream<?>) decoderClazz.newInstance();
                     decoder.init(config);
@@ -66,6 +69,7 @@ public class PojoMessageHandlerWholeBinary
         } catch (IllegalAccessException | InstantiationException e) {
             throw new IllegalArgumentException(e);
         }
+        this.isForInputStream = isForInputStream;
     }
 
 
@@ -92,6 +96,18 @@ public class PojoMessageHandlerWholeBinary
     }
 
 
+    @Override
+    protected Object convert(ByteBuffer message) {
+        byte[] array = new byte[message.remaining()];
+        message.get(array);
+        if (isForInputStream) {
+            return new ByteArrayInputStream(array);
+        } else {
+            return array;
+        }
+    }
+
+
     @Override
     protected void onClose() {
         for (Decoder decoder : decoders) {

==================================================
PojoMessageHandlerWholeText.java
index 229d554d44..c2962cbfe9 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholePong.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholePong.java
@@ -28,9 +28,9 @@ public class PojoMessageHandlerWholePong
         extends PojoMessageHandlerWholeBase<PongMessage> {
 
     public PojoMessageHandlerWholePong(Object pojo, Method method,
-            Session session, Object[] params, int indexPayload, boolean unwrap,
+            Session session, Object[] params, int indexPayload, boolean convert,
             int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap, indexSession);
+        super(pojo, method, session, params, indexPayload, convert, indexSession);
     }
 
     @Override

==================================================
PojoMethodMapping.java
index 4885285e70..ff5b1351af 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java
@@ -44,8 +44,8 @@ public class PojoMessageHandlerWholeText
 
     public PojoMessageHandlerWholeText(Object pojo, Method method,
             Session session, EndpointConfig config, Object[] params,
-            int indexPayload, boolean unwrap, int indexSession) {
-        super(pojo, method, session, params, indexPayload, unwrap,
+            int indexPayload, boolean convert, int indexSession) {
+        super(pojo, method, session, params, indexPayload, convert,
                 indexSession);
         try {
             for (Class<? extends Decoder> decoderClazz : config.getDecoders()) {
@@ -53,8 +53,7 @@ public class PojoMessageHandlerWholeText
                     Text<?> decoder = (Text<?>) decoderClazz.newInstance();
                     decoder.init(config);
                     decoders.add(decoder);
-                } else if (Decoder.TextStream.class.isAssignableFrom(
-                        decoderClazz)) {
+                } else if (TextStream.class.isAssignableFrom(decoderClazz)) {
                     TextStream<?> decoder =
                             (TextStream<?>) decoderClazz.newInstance();
                     decoder.init(config);
@@ -90,6 +89,12 @@ public class PojoMessageHandlerWholeText
     }
 
 
+    @Override
+    protected Object convert(String message) {
+        return new StringReader(message);
+    }
+
+
     @Override
     protected void onClose() {
         for (Decoder decoder : decoders) {

==================================================
