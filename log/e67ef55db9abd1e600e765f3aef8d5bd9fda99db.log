e67ef55db9abd1e600e765f3aef8d5bd9fda99db
==================================================
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48379
==================================================
Mark Emlyn
==================================================
Wed Mar 10 13:56:28 2010 +0000
==================================================
Context.java
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48379
Allow session cookie path to be configured per context
With this option, the servlet 3 options and Connector.emptySessionPath there were just too many places this was being configured so the Connector option has been removed for Tomcat 7.
Based on a patch by Brane F. Gracnar

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@921352 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index 621678737c..5efefa4df6 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -211,13 +211,32 @@ public interface Context extends Container {
      * @param sessionCookieDomain   The domain to use
      */
     public void setSessionCookieDomain(String sessionCookieDomain);
+
+    
+    /**
+     * Gets the path to use for session cookies. Overrides any setting that
+     * may be specified by the application.
+     * 
+     * @return  The value of the default session cookie path or null if not
+     *          specified
+     */
+    public String getSessionCookiePath();
+    
+    
+    /**
+     * Sets the path to use for session cookies. Overrides any setting that
+     * may be specified by the application.
+     * 
+     * @param sessionCookiePath   The path to use
+     */
+    public void setSessionCookiePath(String sessionCookiePath);
+
     
     /**
      * Return the "allow crossing servlet contexts" flag.
      */
     public boolean getCrossContext();
 
-
     
     /**
      * Return the alternate Deployment Descriptor name.

==================================================
Request.java
index 9a735dfa1b..92c49a50c5 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -104,12 +104,6 @@ public class Connector extends LifecycleBase implements MBeanRegistration {
     protected Container container = null;
 
 
-    /**
-     * Use "/" as path for session cookies ?
-     */
-    protected boolean emptySessionPath = false;
-
-
     /**
      * The "enable DNS lookups" flag for this Connector.
      */
@@ -397,29 +391,6 @@ public class Connector extends LifecycleBase implements MBeanRegistration {
     }
 
 
-    /**
-     * Return the "empty session path" flag.
-     */
-    public boolean getEmptySessionPath() {
-
-        return (this.emptySessionPath);
-
-    }
-
-
-    /**
-     * Set the "empty session path" flag.
-     *
-     * @param emptySessionPath The new "empty session path" flag value
-     */
-    public void setEmptySessionPath(boolean emptySessionPath) {
-
-        this.emptySessionPath = emptySessionPath;
-        setProperty("emptySessionPath", String.valueOf(emptySessionPath));
-
-    }
-
-
     /**
      * Return the "enable DNS lookups" flag.
      */

==================================================
ApplicationSessionCookieConfig.java
index dd5c01cf32..65d4091e58 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2273,14 +2273,8 @@ public class Request
         
         if (response != null) {
             Cookie newCookie =
-                ApplicationSessionCookieConfig.createSessionCookie(
-                        context.getServletContext().getSessionCookieConfig(),
-                        newSessionId,
-                        secure,
-                        context.getUseHttpOnly(),
-                        response.getConnector().getEmptySessionPath(),
-                        context.getEncodedPath(),
-                        context.getSessionCookieDomain());
+                ApplicationSessionCookieConfig.createSessionCookie(context,
+                        newSessionId, secure);
             response.addCookie(newCookie);
         }
     }
@@ -2542,7 +2536,7 @@ public class Request
         // Do not reuse the session id if it is from a URL, to prevent possible
         // phishing attacks
         // Use the SSL session ID if one is present. 
-        if ((connector.getEmptySessionPath() 
+        if (("/".equals(context.getSessionCookiePath()) 
                 && isRequestedSessionIdFromCookie()) || requestedSessionSSL ) {
             session = manager.createSession(getRequestedSessionId());
         } else {
@@ -2556,13 +2550,7 @@ public class Request
                                SessionTrackingMode.COOKIE)) {
             Cookie cookie =
                 ApplicationSessionCookieConfig.createSessionCookie(
-                        context.getServletContext().getSessionCookieConfig(),
-                        session.getIdInternal(),
-                        isSecure(),
-                        context.getUseHttpOnly(),
-                        connector.getEmptySessionPath(),
-                        context.getEncodedPath(),
-                        context.getSessionCookieDomain());
+                        context, session.getIdInternal(), isSecure());
             
             response.addCookieInternal(cookie);
         }

==================================================
StandardContext.java
index faa22a349a..7e76eda891 100644
--- a/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
+++ b/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
@@ -20,6 +20,7 @@ package org.apache.catalina.core;
 import javax.servlet.SessionCookieConfig;
 import javax.servlet.http.Cookie;
 
+import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
 
 public class ApplicationSessionCookieConfig implements SessionCookieConfig {
@@ -105,62 +106,60 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
     /**
      * Creates a new session cookie for the given session ID
      *
-     * @param scc         The default session cookie configuration
+     * @param conetxt     The Context for the web application
      * @param sessionId   The ID of the session for which the cookie will be
      *                    created
      * @param secure      Should session cookie be configured as secure
-     * @param httpOnly    Should session cookie be configured as httpOnly
-     * @param emptyPath   Should session cookie be configured with empty path
-     * @param contextPath Context path to use if required       
-     * @param domain      Domain to use for the session cookie. If null, use the
-     *                    domain specified by the scc parameter.
      */
-    public static Cookie createSessionCookie(SessionCookieConfig scc,
-            String sessionId, boolean secure, boolean httpOnly,
-            boolean emptyPath, String contextPath, String domain) {
-
-       // Session config can over-ride default name  
-       String cookieName = scc.getName();
-       if (cookieName == null) {
-           cookieName = Globals.SESSION_COOKIE_NAME;
-       }
-       Cookie cookie = new Cookie(cookieName, sessionId);
+    public static Cookie createSessionCookie(Context context,
+            String sessionId, boolean secure) {
+
+        SessionCookieConfig scc =
+            context.getServletContext().getSessionCookieConfig();
+
+        // NOTE: The priority order for session cookie configuration is:
+        //       1. Context level configuration
+        //       2. Values from SessionCookieConfig
+        //       3. Defaults
+
+        String cookieName = scc.getName();
+        if (cookieName == null) {
+            cookieName = Globals.SESSION_COOKIE_NAME;
+        }
+        Cookie cookie = new Cookie(cookieName, sessionId);
        
-       // Just apply the defaults.
-       cookie.setMaxAge(scc.getMaxAge());
-       cookie.setComment(scc.getComment());
+        // Just apply the defaults.
+        cookie.setMaxAge(scc.getMaxAge());
+        cookie.setComment(scc.getComment());
        
-       if (domain == null) {
-           // Avoid possible NPE
-           if (scc.getDomain() != null) {
-               cookie.setDomain(scc.getDomain());
-           }
-       } else {
-           cookie.setDomain(domain);
-       }
-
-       // Always set secure if the request is secure
-       if (scc.isSecure() || secure) {
-           cookie.setSecure(true);
-       }
-
-       // Always set httpOnly if the context is configured for that
-       if (scc.isHttpOnly() || httpOnly) {
-           cookie.setHttpOnly(true);
-       }
+        if (context.getSessionCookieDomain() == null) {
+            // Avoid possible NPE
+            if (scc.getDomain() != null) {
+                cookie.setDomain(scc.getDomain());
+            }
+        } else {
+            cookie.setDomain(context.getSessionCookieDomain());
+        }
+
+        // Always set secure if the request is secure
+        if (scc.isSecure() || secure) {
+            cookie.setSecure(true);
+        }
+
+        // Always set httpOnly if the context is configured for that
+        if (scc.isHttpOnly() || context.getUseHttpOnly()) {
+            cookie.setHttpOnly(true);
+        }
        
-       // Don't set the path if the connector is configured to over-ride
-       if (!emptyPath && scc.getPath() != null) {
-           cookie.setPath(scc.getPath());
-       } else {
-           if (!emptyPath && contextPath != null && (contextPath.length() > 0)) {
-               cookie.setPath(contextPath);
-           } else {
-               cookie.setPath("/");
-           }
-       }
-       return cookie;
-   }
-   
- 
+        String contextPath = context.getSessionCookiePath();
+        if (contextPath == null || contextPath.length() == 0) {
+            contextPath = scc.getPath();
+        }
+        if (contextPath == null || contextPath.length() == 0) {
+            contextPath = context.getEncodedPath();
+        }
+        cookie.setPath(contextPath);
+
+        return cookie;
+    }
 }

==================================================
