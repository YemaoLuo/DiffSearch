62b2f672946b2a684db9e9d22467ef0ef14d20e3
==================================================
Pre-populate Charset cache.
==================================================
Mark Emlyn
==================================================
Mon Jun 27 13:39:13 2011 +0000
==================================================
B2CConverter.java
Pre-populate Charset cache.
Since cache is pre-populated, no need to look up non-matching values which effectively caches misses too.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1140156 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index 542f02cbce..433899405d 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -23,11 +23,12 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
-import java.nio.charset.IllegalCharsetNameException;
-import java.nio.charset.UnsupportedCharsetException;
 import java.util.Locale;
+import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.tomcat.util.res.StringManager;
+
 /** Efficient conversion of bytes  to character .
  *  
  *  This uses the standard JDK mechanism - a reader - but provides mechanisms
@@ -45,9 +46,20 @@ public class B2CConverter {
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( B2CConverter.class );
     
+    private static final StringManager sm =
+        StringManager.getManager(Constants.Package);
+
     private static final ConcurrentHashMap<String, Charset> encodingToCharsetCache =
         new ConcurrentHashMap<String, Charset>();
 
+    static {
+        for (Entry<String,Charset> entry :
+                Charset.availableCharsets().entrySet()) {
+            encodingToCharsetCache.put(entry.getKey().toLowerCase(),
+                    entry.getValue());
+        }
+    }
+
     public static Charset getCharset(String enc)
             throws UnsupportedEncodingException{
 
@@ -55,21 +67,11 @@ public class B2CConverter {
         String lowerCaseEnc = enc.toLowerCase(Locale.US);
 
         Charset charset = encodingToCharsetCache.get(lowerCaseEnc);
+        
         if (charset == null) {
-            try {
-                charset = Charset.forName(enc);
-            } catch (IllegalCharsetNameException icne) {
-                UnsupportedEncodingException uee =
-                    new UnsupportedEncodingException();
-                uee.initCause(icne);
-                throw uee;
-            } catch (UnsupportedCharsetException uce) {
-                UnsupportedEncodingException uee =
-                    new UnsupportedEncodingException();
-                uee.initCause(uce);
-                throw uee;
-            }
-            encodingToCharsetCache.put(enc, charset);
+            // Pre-population of the cache means this must be invalid
+            throw new UnsupportedEncodingException(
+                    sm.getString("b2cConvertor.unknownEncoding", enc));
         }
         return charset;
     }

==================================================
