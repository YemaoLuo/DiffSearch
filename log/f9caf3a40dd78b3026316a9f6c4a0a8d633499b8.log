f9caf3a40dd78b3026316a9f6c4a0a8d633499b8
==================================================
patch by sebb for 
==================================================
Filip Hanik
==================================================
Wed Aug 5 16:10:05 2009 +0000
==================================================
ConnectionPool.java
patch by sebb for 
https://issues.apache.org/bugzilla/show_bug.cgi?id=47577


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@801283 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DataSourceProxy.java
index b4332229c4..85be2f6755 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -143,10 +143,10 @@ public class ConnectionPool {
      */
     public Future<Connection> getConnectionAsync() throws SQLException {
         //we can only retrieve a future if the underlying queue supports it.
-        if (idle instanceof FairBlockingQueue) {
+        if (idle instanceof FairBlockingQueue<?>) {
             Future<PooledConnection> pcf = ((FairBlockingQueue<PooledConnection>)idle).pollAsync();
             return new ConnectionFuture(pcf);
-        } else if (idle instanceof MultiLockFairBlockingQueue) {
+        } else if (idle instanceof MultiLockFairBlockingQueue<?>) {
                 Future<PooledConnection> pcf = ((MultiLockFairBlockingQueue<PooledConnection>)idle).pollAsync();
                 return new ConnectionFuture(pcf);
         } else {
@@ -1069,6 +1069,7 @@ public class ConnectionPool {
             }
         }
 
+        @Override
         public void run() {
             while (run) {
                 try {

==================================================
FairBlockingQueue.java
index ff291aab00..142c5b7cb8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -188,6 +188,7 @@ public class DataSourceProxy implements PoolConfiguration {
         else return p.getSize();
     }
 
+    @Override
     public String toString() {
         return super.toString()+"{"+getPoolProperties()+"}";
     }

==================================================
MultiLockFairBlockingQueue.java
index 5a0325c33e..ea56e86717 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -185,11 +185,11 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
                 waiters.addLast(c);
                 lock.unlock();
                 //return a future that will wait for the object
-                result = new ItemFuture(c);
+                result = new ItemFuture<E>(c);
             } else {
                 lock.unlock();
                 //return a future with the item
-                result = new ItemFuture(item);
+                result = new ItemFuture<E>(item);
             }
             error = false;
         } finally {

==================================================
PoolProperties.java
index 1ec8064a0d..7d37eaa9e6 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
@@ -196,11 +196,11 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
                 waiters[idx].addLast(c);
                 lock.unlock();
                 //return a future that will wait for the object
-                result = new ItemFuture(c);
+                result = new ItemFuture<E>(c);
             } else {
                 lock.unlock();
                 //return a future with the item
-                result = new ItemFuture(item);
+                result = new ItemFuture<E>(item);
             }
             error = false;
         } finally {
@@ -323,9 +323,9 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
      * {@inheritDoc}
      */
     public boolean addAll(Collection<? extends E> c) {
-        Iterator i = c.iterator();
+        Iterator<? extends E> i = c.iterator();
         while (i.hasNext()) {
-            E e = (E)i.next();
+            E e = i.next();
             offer(e);
         }
         return true;

==================================================
PooledConnection.java
index d55e766d44..63e6a3a0e2 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -651,6 +651,7 @@ public class PoolProperties implements PoolConfiguration {
         this.interceptors = null;
     }
 
+    @Override
     public String toString() {
         StringBuffer buf = new StringBuffer("ConnectionPool[");
         try {
@@ -786,9 +787,11 @@ public class PoolProperties implements PoolConfiguration {
         public String getValue() {
             return value;
         }
+        @Override
         public int hashCode() {
             return name.hashCode();
         }
+        @Override
         public boolean equals(Object o) {
             if (o==this) return true;
             if (o instanceof InterceptorProperty) {

==================================================
ProxyConnection.java
index 8991a605b7..167f1ae2cf 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -291,7 +291,8 @@ public class PooledConnection {
      *  
      * @return true if the connection was validated successfully. It returns true even if validation was not performed, such as when 
      * {@link PoolConfiguration#setValidationInterval(long)} has been called with a positive value. 
-     * @return false if the validation failed. The caller should close the connection if false is returned since a session could have been left in 
+     * <p>
+     * false if the validation failed. The caller should close the connection if false is returned since a session could have been left in 
      * an unknown state during initialization.
      */
     public boolean validate(int validateAction,String sql) {
@@ -322,7 +323,7 @@ public class PooledConnection {
         Statement stmt = null;
         try {
             stmt = connection.createStatement();
-            boolean exec = stmt.execute(query);
+            stmt.execute(query);
             stmt.close();
             this.lastValidated = now;
             return true;
@@ -516,6 +517,7 @@ public class PooledConnection {
         this.handler = handler;
     }
     
+    @Override
     public String toString() {
         return "PooledConnection["+(connection!=null?connection.toString():"null")+"]";
     }

==================================================
ConnectionState.java
index f3cab3a073..8357846ba1 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
@@ -59,6 +59,7 @@ public class ProxyConnection extends JdbcInterceptor {
         setUseEquals(useEquals);
     }
 
+    @Override
     public void reset(ConnectionPool parent, PooledConnection con) {
         this.pool = parent;
         this.connection = con;
@@ -77,6 +78,7 @@ public class ProxyConnection extends JdbcInterceptor {
         }
     }
 
+    @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         if (compare(ISCLOSED_VAL,method)) {
             return Boolean.valueOf(isClosed());
@@ -117,6 +119,7 @@ public class ProxyConnection extends JdbcInterceptor {
         return pool;
     }
     
+    @Override
     public String toString() {
         return "ProxyConnection["+(connection!=null?connection.toString():"null")+"]";
     }

==================================================
SlowQueryReport.java
index 300b815a52..50567784f0 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
@@ -52,6 +52,7 @@ public class ConnectionState extends JdbcInterceptor  {
     protected String catalog = null;
     
     
+    @Override
     public void reset(ConnectionPool parent, PooledConnection con) {
         if (parent==null || con==null) return;
         PoolConfiguration poolProperties = parent.getPoolProperties();

==================================================
