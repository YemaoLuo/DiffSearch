4d432e7ebcd991c7f8c912d4bc08769319ca8b3c
==================================================
Refactor obtaining the SSL attributes.
==================================================
Mark Thomas
==================================================
Thu Jan 29 20:37:04 2015 +0000
==================================================
AbstractProcessor.java
Refactor obtaining the SSL attributes.
Add an AprSSLSupport wrapper which allows APR to be aligned with NIO/NIO2 and then pulled up to the AbstractHttp11Processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655847 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Processor.java
index dfb4ba374e..568b30b90b 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -42,6 +42,7 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
     protected final Request request;
     protected final Response response;
     protected SocketWrapperBase<S> socketWrapper = null;
+    private String clientCertProvider = null;
 
     /**
      * Error state for the request/response currently being processed.
@@ -137,6 +138,16 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
     }
 
 
+    public String getClientCertProvider() {
+        return clientCertProvider;
+    }
+
+
+    public void setClientCertProvider(String s) {
+        this.clientCertProvider = s;
+    }
+
+
     /**
      * Set the socket wrapper being used.
      */

==================================================
AjpProcessor.java
index f5abb6126c..4c875e9e57 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -55,6 +55,20 @@ public interface Processor<S> {
      */
     void recycle();
 
+    /**
+     * When client certificate information is presented in a form other than
+     * instances of {@link java.security.cert.X509Certificate} it needs to be
+     * converted before it can be used and this property controls which JSSE
+     * provider is used to perform the conversion. For example it is used with
+     * the AJP connectors, the HTTP APR connector and with the
+     * {@link org.apache.catalina.valves.SSLValve}. If not specified, the
+     * default provider will be used.
+     *
+     * @return The name of the JSSE provider to use for certificate
+     *         transformation if required
+     */
+    String getClientCertProvider();
+
     void setSslSupport(SSLSupport sslSupport);
 
     /**
@@ -62,4 +76,6 @@ public interface Processor<S> {
      * @return leftover bytes
      */
     ByteBuffer getLeftoverInput();
+
+
 }

==================================================
AbstractHttp11Processor.java
index d443c083da..ffdb49cc2b 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -313,19 +313,6 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
     }
 
 
-    /**
-     * When client certificate information is presented in a form other than
-     * instances of {@link java.security.cert.X509Certificate} it needs to be
-     * converted before it can be used and this property controls which JSSE
-     * provider is used to perform the conversion. For example it is used with
-     * the AJP connectors, the HTTP APR connector and with the
-     * {@link org.apache.catalina.valves.SSLValve}. If not specified, the
-     * default provider will be used.
-     */
-    private String clientCertProvider = null;
-    public String getClientCertProvider() { return clientCertProvider; }
-    public void setClientCertProvider(String s) { this.clientCertProvider = s; }
-
     // --------------------------------------------------------- Public Methods
 
 
@@ -415,6 +402,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
                 // Fill the  elements.
                 try {
                     CertificateFactory cf;
+                    String clientCertProvider = getClientCertProvider();
                     if (clientCertProvider == null) {
                         cf = CertificateFactory.getInstance("X.509");
                     } else {

==================================================
Http11AprProcessor.java
index 55c4b30197..101140b871 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -53,6 +53,7 @@ import org.apache.tomcat.util.log.UserDataHelper;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.DispatchType;
+import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SendfileDataBase;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
@@ -229,6 +230,12 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     protected SendfileDataBase sendfileData = null;
 
 
+    /**
+     * SSL information.
+     */
+    protected SSLSupport sslSupport;
+
+
     public AbstractHttp11Processor(int maxHttpHeaderSize, AbstractEndpoint<S> endpoint,
             int maxTrailerSize, int maxExtensionSize, int maxSwallowSize) {
 
@@ -690,6 +697,15 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     }
 
 
+    /**
+     * Set the SSL information for this HTTP connection.
+     */
+    @Override
+    public void setSslSupport(SSLSupport sslSupport) {
+        this.sslSupport = sslSupport;
+    }
+
+
     /**
      * Send an action to the connector.
      *
@@ -934,6 +950,36 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             }
             break;
         }
+        case REQ_SSL_ATTRIBUTE: {
+            try {
+                if (sslSupport != null) {
+                    Object sslO = sslSupport.getCipherSuite();
+                    if (sslO != null) {
+                        request.setAttribute
+                            (SSLSupport.CIPHER_SUITE_KEY, sslO);
+                    }
+                    sslO = sslSupport.getPeerCertificateChain(false);
+                    if (sslO != null) {
+                        request.setAttribute
+                            (SSLSupport.CERTIFICATE_KEY, sslO);
+                    }
+                    sslO = sslSupport.getKeySize();
+                    if (sslO != null) {
+                        request.setAttribute
+                            (SSLSupport.KEY_SIZE_KEY, sslO);
+                    }
+                    sslO = sslSupport.getSessionId();
+                    if (sslO != null) {
+                        request.setAttribute
+                            (SSLSupport.SESSION_ID_KEY, sslO);
+                    }
+                    request.setAttribute(SSLSupport.SESSION_MGR, sslSupport);
+                }
+            } catch (Exception e) {
+                getLog().warn(sm.getString("http11processor.socket.ssl"), e);
+            }
+            break;
+        }
         default: {
             actionInternal(actionCode, param);
             break;

==================================================
Http11AprProtocol.java
index 0188171155..d154ceb8a3 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -55,30 +55,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * When client certificate information is presented in a form other than
-     * instances of {@link java.security.cert.X509Certificate} it needs to be
-     * converted before it can be used and this property controls which JSSE
-     * provider is used to perform the conversion. For example it is used with
-     * the AJP connectors, the HTTP APR connector and with the
-     * {@link org.apache.catalina.valves.SSLValve}. If not specified, the
-     * default provider will be used.
-     */
-    protected String clientCertProvider = null;
-    public String getClientCertProvider() { return clientCertProvider; }
-    public void setClientCertProvider(String s) { this.clientCertProvider = s; }
-
-
-    // --------------------------------------------------------- Public Methods
-
-    @Override
-    public void setSslSupport(SSLSupport sslSupport) {
-        // NOOP for APR
-    }
-
-
     // ----------------------------------------------------- ActionHook Methods
 
     /**
@@ -94,55 +70,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         long socketRef = socketWrapper.getSocket().longValue();
 
         switch (actionCode) {
-        case REQ_SSL_ATTRIBUTE: {
-            if (endpoint.isSSLEnabled() && (socketRef != 0)) {
-                try {
-                    // Cipher suite
-                    Object sslO = SSLSocket.getInfoS(socketRef, SSL.SSL_INFO_CIPHER);
-                    if (sslO != null) {
-                        request.setAttribute(SSLSupport.CIPHER_SUITE_KEY, sslO);
-                    }
-                    // Get client certificate and the certificate chain if present
-                    // certLength == -1 indicates an error
-                    int certLength = SSLSocket.getInfoI(socketRef, SSL.SSL_INFO_CLIENT_CERT_CHAIN);
-                    byte[] clientCert = SSLSocket.getInfoB(socketRef, SSL.SSL_INFO_CLIENT_CERT);
-                    X509Certificate[] certs = null;
-                    if (clientCert != null  && certLength > -1) {
-                        certs = new X509Certificate[certLength + 1];
-                        CertificateFactory cf;
-                        if (clientCertProvider == null) {
-                            cf = CertificateFactory.getInstance("X.509");
-                        } else {
-                            cf = CertificateFactory.getInstance("X.509",
-                                    clientCertProvider);
-                        }
-                        certs[0] = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(clientCert));
-                        for (int i = 0; i < certLength; i++) {
-                            byte[] data = SSLSocket.getInfoB(socketRef, SSL.SSL_INFO_CLIENT_CERT_CHAIN + i);
-                            certs[i+1] = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(data));
-                        }
-                    }
-                    if (certs != null) {
-                        request.setAttribute(SSLSupport.CERTIFICATE_KEY, certs);
-                    }
-                    // User key size
-                    sslO = Integer.valueOf(SSLSocket.getInfoI(socketRef,
-                            SSL.SSL_INFO_CIPHER_USEKEYSIZE));
-                    request.setAttribute(SSLSupport.KEY_SIZE_KEY, sslO);
-
-                    // SSL session ID
-                    sslO = SSLSocket.getInfoS(socketRef, SSL.SSL_INFO_SESSION_ID);
-                    if (sslO != null) {
-                        request.setAttribute(SSLSupport.SESSION_ID_KEY, sslO);
-                    }
-                    //TODO provide a hook to enable the SSL session to be
-                    // invalidated. Set AprEndpoint.SESSION_MGR req attr
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.ssl"), e);
-                }
-            }
-            break;
-        }
         case REQ_SSL_CERTIFICATE: {
             if (endpoint.isSSLEnabled() && (socketRef != 0)) {
                 // Consume and buffer the request body, so that it does not

==================================================
Http11Nio2Processor.java
index 7c71b56014..4cca8c2999 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -28,6 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint.Poller;
+import org.apache.tomcat.util.net.AprSSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
@@ -264,9 +265,14 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         }
 
         @Override
-        protected void initSsl(SocketWrapperBase<Long> socket,
-                Processor<Long> processor) {
-            // NOOP for APR
+        protected void initSsl(SocketWrapperBase<Long> socket, Processor<Long> processor) {
+            if (proto.isSSLEnabled()) {
+                AprSSLSupport sslSupport =
+                        new AprSSLSupport(socket, processor.getClientCertProvider());
+                processor.setSslSupport(sslSupport);
+            } else {
+                processor.setSslSupport(null);
+            }
         }
 
         @Override

==================================================
Http11NioProcessor.java
index 3ec7ddf51c..2e19fa2fc3 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -45,12 +45,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     }
 
 
-    /**
-     * SSL information.
-     */
-    protected SSLSupport sslSupport;
-
-
     // ----------------------------------------------------------- Constructors
 
     public Http11Nio2Processor(int maxHttpHeaderSize, AbstractEndpoint<Nio2Channel> endpoint,
@@ -62,15 +56,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Set the SSL information for this HTTP connection.
-     */
-    @Override
-    public void setSslSupport(SSLSupport sslSupport) {
-        this.sslSupport = sslSupport;
-    }
-
-
     @Override
     public SocketState asyncDispatch(SocketStatus status) {
         SocketState state = super.asyncDispatch(status);
@@ -97,36 +82,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     public void actionInternal(ActionCode actionCode, Object param) {
 
         switch (actionCode) {
-        case REQ_SSL_ATTRIBUTE: {
-            try {
-                if (sslSupport != null) {
-                    Object sslO = sslSupport.getCipherSuite();
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.CIPHER_SUITE_KEY, sslO);
-                    }
-                    sslO = sslSupport.getPeerCertificateChain(false);
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.CERTIFICATE_KEY, sslO);
-                    }
-                    sslO = sslSupport.getKeySize();
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.KEY_SIZE_KEY, sslO);
-                    }
-                    sslO = sslSupport.getSessionId();
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.SESSION_ID_KEY, sslO);
-                    }
-                    request.setAttribute(SSLSupport.SESSION_MGR, sslSupport);
-                }
-            } catch (Exception e) {
-                log.warn(sm.getString("http11processor.socket.ssl"), e);
-            }
-            break;
-        }
         case REQ_SSL_CERTIFICATE: {
             if (sslSupport != null && socketWrapper.getSocket() != null) {
                 /*

==================================================
UpgradeProcessor.java
index bead976081..30f8c767f7 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -45,12 +45,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
 
-    /**
-     * SSL information.
-     */
-    protected SSLSupport sslSupport;
-
-
     // ----------------------------------------------------------- Constructors
 
     public Http11NioProcessor(int maxHttpHeaderSize, AbstractEndpoint<NioChannel> endpoint,
@@ -60,17 +54,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
 
-    // --------------------------------------------------------- Public Methods
-
-    /**
-     * Set the SSL information for this HTTP connection.
-     */
-    @Override
-    public void setSslSupport(SSLSupport sslSupport) {
-        this.sslSupport = sslSupport;
-    }
-
-
     // ----------------------------------------------------- ActionHook Methods
 
     /**
@@ -84,36 +67,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     public void actionInternal(ActionCode actionCode, Object param) {
 
         switch (actionCode) {
-        case REQ_SSL_ATTRIBUTE: {
-            try {
-                if (sslSupport != null) {
-                    Object sslO = sslSupport.getCipherSuite();
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.CIPHER_SUITE_KEY, sslO);
-                    }
-                    sslO = sslSupport.getPeerCertificateChain(false);
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.CERTIFICATE_KEY, sslO);
-                    }
-                    sslO = sslSupport.getKeySize();
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.KEY_SIZE_KEY, sslO);
-                    }
-                    sslO = sslSupport.getSessionId();
-                    if (sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.SESSION_ID_KEY, sslO);
-                    }
-                    request.setAttribute(SSLSupport.SESSION_MGR, sslSupport);
-                }
-            } catch (Exception e) {
-                log.warn(sm.getString("http11processor.socket.ssl"), e);
-            }
-            break;
-        }
         case REQ_SSL_CERTIFICATE: {
             if (sslSupport != null) {
                 /*

==================================================
AprSSLSupport.java
index a4c4dd5dce..4ec63a31bd 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
@@ -175,6 +175,12 @@ public class UpgradeProcessor<S> implements Processor<S>, WebConnection {
     }
 
 
+    @Override
+    public String getClientCertProvider() {
+        return null;
+    }
+
+
     @Override
     public final void setSslSupport(SSLSupport sslSupport) {
         // NOOP

==================================================
