2fd5a9677f678ddb32a9242662272d3c6a9760df
==================================================
Update storeconfig with newly introduced elements: SessionIdGenerator, CookieProcessor, JarScanner and JarScanFilter.
==================================================
Remy Maucherat
==================================================
Thu Oct 23 16:46:07 2014 +0000
==================================================
JarScannerSF.java
Update storeconfig with newly introduced elements: SessionIdGenerator, CookieProcessor, JarScanner and JarScanFilter.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1633876 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerSF.java
new file mode 100644
index 0000000000..ef7ef3ab90
--- /dev/null
+++ b/java/org/apache/catalina/storeconfig/JarScannerSF.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.catalina.storeconfig;
+
+import java.io.PrintWriter;
+
+import org.apache.tomcat.JarScanFilter;
+import org.apache.tomcat.JarScanner;
+
+/**
+ * Store server.xml Element JarScanner
+ */
+public class JarScannerSF extends StoreFactoryBase {
+
+    /**
+     * Store the specified JarScanner properties and children
+     * (JarScannerFilter)
+     *
+     * @param aWriter
+     *            PrintWriter to which we are storing
+     * @param indent
+     *            Number of spaces to indent this element
+     * @param aJarScanner
+     *            JarScanner whose properties are being stored
+     *
+     * @exception Exception
+     *                if an exception occurs while storing
+     */
+    @Override
+    public void storeChildren(PrintWriter aWriter, int indent, Object aJarScanner,
+            StoreDescription parentDesc) throws Exception {
+        if (aJarScanner instanceof JarScanner) {
+            JarScanner jarScanner = (JarScanner) aJarScanner;
+            // Store nested <JarScanFilter> element
+            JarScanFilter jarScanFilter = jarScanner.getJarScanFilter();
+            if (jarScanFilter != null) {
+                storeElement(aWriter, indent, jarScanFilter);
+            }
+        }
+    }
+
+}
\ No newline at end of file

==================================================
PersistentManagerSF.java
index 18687bccbe..cf64548981 100644
--- a/java/org/apache/catalina/storeconfig/ManagerSF.java
+++ b/java/org/apache/catalina/storeconfig/ManagerSF.java
@@ -19,6 +19,8 @@ package org.apache.catalina.storeconfig;
 
 import java.io.PrintWriter;
 
+import org.apache.catalina.Manager;
+import org.apache.catalina.SessionIdGenerator;
 import org.apache.catalina.session.StandardManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -47,9 +49,7 @@ public class ManagerSF extends StoreFactoryBase {
                     if (log.isDebugEnabled())
                         log.debug(sm.getString("factory.storeTag", elementDesc
                                 .getTag(), aElement));
-                    getStoreAppender().printIndent(aWriter, indent + 2);
-                    getStoreAppender().printTag(aWriter, indent + 2, manager,
-                            elementDesc);
+                    super.store(aWriter, indent, aElement);
                 }
             } else {
                 super.store(aWriter, indent, aElement);
@@ -78,4 +78,18 @@ public class ManagerSF extends StoreFactoryBase {
 
     }
 
+    @Override
+    public void storeChildren(PrintWriter aWriter, int indent, Object aManager,
+            StoreDescription parentDesc) throws Exception {
+        if (aManager instanceof Manager) {
+            Manager manager = (Manager) aManager;
+            // Store nested <SessionIdGenerator> element
+            System.out.println("Checking SessionIdGenerator for store .....");
+            SessionIdGenerator sessionIdGenerator = manager.getSessionIdGenerator();
+            if (sessionIdGenerator != null) {
+                storeElement(aWriter, indent, sessionIdGenerator);
+            }
+        }
+    }
+
 }

==================================================
StandardContextSF.java
index b74faf93a5..03fff56d3d 100644
--- a/java/org/apache/catalina/storeconfig/PersistentManagerSF.java
+++ b/java/org/apache/catalina/storeconfig/PersistentManagerSF.java
@@ -19,6 +19,7 @@ package org.apache.catalina.storeconfig;
 
 import java.io.PrintWriter;
 
+import org.apache.catalina.SessionIdGenerator;
 import org.apache.catalina.Store;
 import org.apache.catalina.session.PersistentManager;
 
@@ -46,10 +47,16 @@ public class PersistentManagerSF extends StoreFactoryBase {
         if (aManager instanceof PersistentManager) {
             PersistentManager manager = (PersistentManager) aManager;
 
-            // Store nested <Manager> elements
+            // Store nested <Store> element
             Store store = manager.getStore();
             storeElement(aWriter, indent, store);
 
+            // Store nested <SessionIdGenerator> element
+            SessionIdGenerator sessionIdGenerator = manager.getSessionIdGenerator();
+            if (sessionIdGenerator != null) {
+                storeElement(aWriter, indent, sessionIdGenerator);
+            }
+
         }
     }
 

==================================================
