959bae9fe977b167473064dd484c5a81d17518a8
==================================================
kECDHE and ECDHE are now supported.
==================================================
Mark Thomas
==================================================
Wed Mar 2 21:38:38 2016 +0000
==================================================
OpenSSLCipherConfigurationParser.java
kECDHE and ECDHE are now supported.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1733373 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestOpenSSLCipherConfigurationParser.java
index f843e90a19..bc7550a9b0 100644
--- a/java/org/apache/tomcat/util/net/openssl/ciphers/OpenSSLCipherConfigurationParser.java
+++ b/java/org/apache/tomcat/util/net/openssl/ciphers/OpenSSLCipherConfigurationParser.java
@@ -426,8 +426,12 @@ public class OpenSSLCipherConfigurationParser {
         addListAlias(kECDHe, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHe)));
         addListAlias(kECDH, filterByKeyExchange(allCiphers, new HashSet<>(Arrays.asList(KeyExchange.ECDHe, KeyExchange.ECDHr))));
         addListAlias(ECDH, filterByKeyExchange(allCiphers, new HashSet<>(Arrays.asList(KeyExchange.ECDHe, KeyExchange.ECDHr, KeyExchange.EECDH))));
-        addListAlias(kECDHE, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHe)));
-        aliases.put(ECDHE, aliases.get(kECDHE));
+        addListAlias(kECDHE, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH)));
+
+        Set<Cipher> ecdhe = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));
+        remove(ecdhe, aNULL);
+        addListAlias(ECDHE, ecdhe);
+
         addListAlias(kEECDH, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH)));
         aliases.put(EECDHE, aliases.get(kEECDH));
         Set<Cipher> eecdh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));
@@ -526,7 +530,7 @@ public class OpenSSLCipherConfigurationParser {
         ciphers.addAll(aliases.get(alias));
     }
 
-    static void remove(final LinkedHashSet<Cipher> ciphers, final String alias) {
+    static void remove(final Set<Cipher> ciphers, final String alias) {
         ciphers.removeAll(aliases.get(alias));
     }
 
@@ -550,6 +554,10 @@ public class OpenSSLCipherConfigurationParser {
         return result;
     }
 
+    /*
+     * See
+     * https://github.com/openssl/openssl/blob/7c96dbcdab959fef74c4caae63cdebaa354ab252/ssl/ssl_ciph.c#L1371
+     */
     static LinkedHashSet<Cipher> defaultSort(final LinkedHashSet<Cipher> ciphers) {
         final LinkedHashSet<Cipher> result = new LinkedHashSet<>(ciphers.size());
         /* Now arrange all ciphers by preference: */
@@ -564,9 +572,6 @@ public class OpenSSLCipherConfigurationParser {
         /* Temporarily enable everything else for sorting */
         result.addAll(ciphers);
 
-        /* Low priority for SSLv2 */
-        moveToEnd(result, filterByProtocol(result, Collections.singleton(Protocol.SSLv2)));
-
         /* Low priority for MD5 */
         moveToEnd(result, filterByMessageDigest(result, Collections.singleton(MessageDigest.MD5)));
 
@@ -579,7 +584,7 @@ public class OpenSSLCipherConfigurationParser {
         moveToEnd(result, filterByAuthentication(result, Collections.singleton(Authentication.ECDH)));
         moveToEnd(result, filterByKeyExchange(result, Collections.singleton(KeyExchange.RSA)));
         moveToEnd(result, filterByKeyExchange(result, Collections.singleton(KeyExchange.PSK)));
-        moveToEnd(result, filterByKeyExchange(result, Collections.singleton(KeyExchange.KRB5)));
+
         /* RC4 is sort-of broken -- move the the end */
         moveToEnd(result, filterByEncryption(result, Collections.singleton(Encryption.RC4)));
         return strengthSort(result);

==================================================
