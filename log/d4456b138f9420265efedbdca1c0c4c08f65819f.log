d4456b138f9420265efedbdca1c0c4c08f65819f
==================================================
Use an int for the maximum object size to be cached in bytes since it is cached using a byte array and that is limited to Integer.MAX_VALUE.
==================================================
Mark Emlyn
==================================================
Mon Dec 9 23:34:25 2013 +0000
==================================================
WebResourceRoot.java
Use an int for the maximum object size to be cached in bytes since it is cached using a byte array and that is limited to Integer.MAX_VALUE.
Test objects to be cached against the maximum object size, not the maximum cache size.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1549706 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Cache.java
index 229f2f6916..94dd9f65a2 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -346,19 +346,21 @@ public interface WebResourceRoot extends Lifecycle {
     long getCacheMaxSize();
 
     /**
-     * Set the maximum permitted size for a single object in the cache.
+     * Set the maximum permitted size for a single object in the cache. Note
+     * that the maximum size in bytes may not exceed {@link Integer#MAX_VALUE}.
      *
      * @param cacheMaxObjectSize    Maximum size for a single cached object in
      *                              kilobytes
      */
-    void setCacheMaxObjectSize(long cacheMaxObjectSize);
+    void setCacheMaxObjectSize(int cacheMaxObjectSize);
 
     /**
-     * Get the maximum permitted size for a single object in the cache.
+     * Get the maximum permitted size for a single object in the cache. Note
+     * that the maximum size in bytes may not exceed {@link Integer#MAX_VALUE}.
      *
      * @return  Maximum size for a single cached object in kilobytes
      */
-    long getCacheMaxObjectSize();
+    int getCacheMaxObjectSize();
 
     /**
      * Controls whether the trace locked files feature is enabled. If enabled,

==================================================
StandardRoot.java
index 1cb8a5dbf5..3fe4b3d0ea 100644
--- a/java/org/apache/catalina/webresources/LocalStrings.properties
+++ b/java/org/apache/catalina/webresources/LocalStrings.properties
@@ -18,6 +18,7 @@ abstractResource.getContentTooLarge=Unable to return [{0}] as a byte array since
 
 cache.addFail=Unable to add the resource at [{0}] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache
 cache.backgroundEvictFail=The background cache eviction process was unable to free [{0}] percent of the cache for Context [{1}] - consider increasing the maximum size of the cache. After eviction approximately [{2}] KB of data remained in the cache.
+cache.maxObjectSizeTooBig=The value specified for the maximum object size to cache [{0}]kB is greater than Integer.MAX_VALUE bytes which is the maximum size that can be cached. The limit will be set to Integer.MAX_VALUE bytes.
 
 dirResourceSet.writeExists=The target of the write already exists
 dirResourceSet.writeNpe=The input stream may not be null

==================================================
TesterWebResourceRoot.java
index c2a1b84a71..63e5a2ab1a 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -455,12 +455,12 @@ public class StandardRoot extends LifecycleMBeanBase
     }
 
     @Override
-    public void setCacheMaxObjectSize(long cacheMaxObjectSize) {
+    public void setCacheMaxObjectSize(int cacheMaxObjectSize) {
         cache.setMaxObjectSize(cacheMaxObjectSize);
     }
 
     @Override
-    public long getCacheMaxObjectSize() {
+    public int getCacheMaxObjectSize() {
         return cache.getMaxObjectSize();
     }
 

==================================================
