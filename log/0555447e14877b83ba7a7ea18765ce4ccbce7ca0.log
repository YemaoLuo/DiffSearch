0555447e14877b83ba7a7ea18765ce4ccbce7ca0
==================================================
Use StringManager to provide i18n support in the org.apache.catalina.tribes.group.interceptors package.
==================================================
Keiichi Fujino
==================================================
Thu May 21 09:50:06 2015 +0000
==================================================
DomainFilterInterceptor.java
Use StringManager to provide i18n support in the org.apache.catalina.tribes.group.interceptors package.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1680789 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FragmentationInterceptor.java
index 7d26f8948c..34672e3bba 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
@@ -22,6 +22,7 @@ import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.membership.Membership;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -35,6 +36,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class DomainFilterInterceptor extends ChannelInterceptorBase {
     private static final Log log = LogFactory.getLog(DomainFilterInterceptor.class);
+    protected static final StringManager sm = StringManager.getManager(DomainFilterInterceptor.class);
     protected Membership membership = null;
 
     protected byte[] domain = new byte[0];
@@ -45,7 +47,7 @@ public class DomainFilterInterceptor extends ChannelInterceptorBase {
             super.messageReceived(msg);
         } else {
             if (log.isWarnEnabled())
-                log.warn("Received message from cluster["+msg.getAddress()+"] was refused.");
+                log.warn(sm.getString("domainFilterInterceptor.message.refused", msg.getAddress()));
         }
     }//messageReceived
 
@@ -61,7 +63,7 @@ public class DomainFilterInterceptor extends ChannelInterceptorBase {
         if ( notify ) {
             super.memberAdded(member);
         } else {
-            if(log.isInfoEnabled()) log.info("Member was refused to join cluster["+member+"]");
+            if(log.isInfoEnabled()) log.info(sm.getString("domainFilterInterceptor.member.refused", member));
         }
     }
 

==================================================
GzipInterceptor.java
index 92a17e058e..85d3564d15 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -27,6 +27,7 @@ import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
 import org.apache.catalina.tribes.io.XByteBuffer;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -44,6 +45,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class FragmentationInterceptor extends ChannelInterceptorBase {
     private static final Log log = LogFactory.getLog(FragmentationInterceptor.class);
+    protected static final StringManager sm = StringManager.getManager(FragmentationInterceptor.class);
 
     protected final HashMap<FragKey, FragCollection> fragpieces = new HashMap<>();
     private int maxSize = 1024*100;
@@ -149,7 +151,7 @@ public class FragmentationInterceptor extends ChannelInterceptorBase {
             }
         }catch ( Exception x ) {
             if ( log.isErrorEnabled() ) {
-                log.error("Unable to perform heartbeat clean up in the frag interceptor",x);
+                log.error(sm.getString("fragmentationInterceptor.heartbeat.failed"),x);
             }
         }
         super.heartbeat();
@@ -201,7 +203,7 @@ public class FragmentationInterceptor extends ChannelInterceptorBase {
         }
 
         public ChannelMessage assemble() {
-            if ( !complete() ) throw new IllegalStateException("Fragments are missing.");
+            if ( !complete() ) throw new IllegalStateException(sm.getString("fragmentationInterceptor.fragments.missing"));
             int buffersize = 0;
             for (int i=0; i<frags.length; i++ ) buffersize += frags[i].getLength();
             XByteBuffer buf = new XByteBuffer(buffersize,false);

==================================================
MessageDispatchInterceptor.java
new file mode 100644
index 0000000000..d7ff1ca8f9
--- /dev/null
+++ b/java/org/apache/catalina/tribes/group/interceptors/LocalStrings.properties
@@ -0,0 +1,58 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+domainFilterInterceptor.message.refused=Received message from cluster[{0}] was refused.
+domainFilterInterceptor.member.refused=Member was refused to join cluster[{0}]
+fragmentationInterceptor.heartbeat.failed=Unable to perform heartbeat clean up in the frag interceptor
+fragmentationInterceptor.fragments.missing=Fragments are missing.
+gzipInterceptor.compress.failed=Unable to compress byte contents
+gzipInterceptor.decompress.failed=Unable to decompress byte contents
+messageDispatchInterceptor.queue.full=Asynchronous queue is full, reached its limit of {0} bytes, current:{1} bytes.
+messageDispatchInterceptor.unableAdd.queue=Unable to add the message to the async queue, queue bug?
+messageDispatchInterceptor.warning.optionflag=Warning, you are overriding the asynchronous option flag, this will disable the Channel.SEND_OPTIONS_ASYNCHRONOUS that other apps might use.
+messageDispatchInterceptor.completeMessage.failed=Unable to report back completed message.
+messageDispatchInterceptor.AsyncMessage.failed=Error while processing async message.
+messageDispatchInterceptor.errorMessage.failed=Unable to report back error message.
+nonBlockingCoordinator.electionMessage.sendfailed=Unable to send election message to:{0}
+nonBlockingCoordinator.processCoordinationMessage.failed=Error processing coordination message. Could be fatal.
+nonBlockingCoordinator.memberAdded.failed=Unable to start election when member was added.
+nonBlockingCoordinator.memberDisappeared.failed=Unable to start election when member was removed.
+nonBlockingCoordinator.heartbeat.inconsistency=Heartbeat found inconsistency, restart election
+nonBlockingCoordinator.heartbeat.failed=Unable to perform heartbeat.
+orderInterceptor.messageAdded.sameCounter=Message added has the same counter, synchronization bug. Disable the order interceptor
+tcpFailureDetector.memberDisappeared.verify=Received memberDisappeared[{0}] message. Will verify.
+tcpFailureDetector.already.disappeared=Verification complete. Member already disappeared[{0}]
+tcpFailureDetector.member.disappeared=Verification complete. Member disappeared[{0}]
+tcpFailureDetector.still.alive=Verification complete. Member still alive[{0}]
+tcpFailureDetector.heartbeat.failed=Unable to perform heartbeat on the TcpFailureDetector.
+tcpFailureDetector.performBasicCheck.memberAdded=Member added, even though we werent notified:{0}
+tcpFailureDetector.suspectMember.dead=Suspect member, confirmed dead.[{0}]
+tcpFailureDetector.suspectMember.alive=Suspect member, confirmed alive.[{0}]
+tcpFailureDetector.failureDetection.failed=Unable to perform failure detection check, assuming member down.
+tcpPingInterceptor.ping.failed=Unable to send TCP ping.
+tcpPingInterceptor.pingFailed.pingThread=Unable to send ping from TCP ping thread.
+throughputInterceptor.report=ThroughputInterceptor Report[\
+  \n\tTx Msg:{0} messages\
+  \n\tSent:{1} MB (total)\
+  \n\tSent:{2} MB (application)\
+  \n\tTime:{3} seconds\
+  \n\tTx Speed:{4} MB/sec (total)\
+  \n\tTxSpeed:{5} MB/sec (application)\
+  \n\tError Msg:{6}\
+  \n\tRx Msg:{7} messages\
+  \n\tRx Speed:{8} MB/sec (since 1st msg)\
+  \n\tReceived:{9} MB]\n
+twoPhaseCommitInterceptor.originalMessage.missing=Received a confirmation, but original message is missing. Id:{0} 
+twoPhaseCommitInterceptor.heartbeat.failed=Unable to perform heartbeat on the TwoPhaseCommit interceptor.
\ No newline at end of file

==================================================
NonBlockingCoordinator.java
index ee15b2718d..5c1cf787e6 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -25,6 +25,7 @@ import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
 import org.apache.catalina.tribes.transport.bio.util.FastQueue;
 import org.apache.catalina.tribes.transport.bio.util.LinkObject;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -39,7 +40,8 @@ import org.apache.juli.logging.LogFactory;
  */
 public class MessageDispatchInterceptor extends ChannelInterceptorBase implements Runnable {
     private static final Log log = LogFactory.getLog(MessageDispatchInterceptor.class);
-
+    protected static final StringManager sm = StringManager.getManager(MessageDispatchInterceptor.class);
+    
     protected long maxQueueSize = 1024*1024*64; //64MB
     protected final FastQueue queue = new FastQueue();
     protected volatile boolean run = false;
@@ -63,15 +65,15 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
                     super.sendMessage(destination,msg,payload);
                     return;
                 } else {
-                    throw new ChannelException("Asynchronous queue is full, reached its limit of " +
-                            maxQueueSize +" bytes, current:" + getCurrentSize() + " bytes.");
+                    throw new ChannelException(sm.getString("messageDispatchInterceptor.queue.full",
+                            maxQueueSize, getCurrentSize()));
                 }//end if
             }//end if
             //add to queue
             if ( useDeepClone ) msg = (ChannelMessage)msg.deepclone();
             if (!addToQueue(msg, destination, payload) ) {
                 throw new ChannelException(
-                        "Unable to add the message to the async queue, queue bug?");
+                        sm.getString("messageDispatchInterceptor.unableAdd.queue"));
             }
             addAndGetCurrentSize(msg.getMessage().getLength());
         } else {
@@ -109,9 +111,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
     @Override
     public void setOptionFlag(int flag) {
         if ( flag != Channel.SEND_OPTIONS_ASYNCHRONOUS ) {
-            log.warn("Warning, you are overriding the asynchronous option " +
-                    "flag, this will disable the Channel.SEND_OPTIONS_ASYNCHRONOUS " +
-                    "that other apps might use.");
+            log.warn(sm.getString("messageDispatchInterceptor.warning.optionflag"));
         }
         super.setOptionFlag(flag);
     }
@@ -200,19 +200,19 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
                     link.getHandler().handleCompletion(new UniqueId(msg.getUniqueId()));
                 }
             } catch ( Exception ex ) {
-                log.error("Unable to report back completed message.",ex);
+                log.error(sm.getString("messageDispatchInterceptor.completeMessage.failed"),ex);
             }
         } catch ( Exception x ) {
             ChannelException cx = null;
             if ( x instanceof ChannelException ) cx = (ChannelException)x;
             else cx = new ChannelException(x);
-            if ( log.isDebugEnabled() ) log.debug("Error while processing async message.",x);
+            if ( log.isDebugEnabled() ) log.debug(sm.getString("messageDispatchInterceptor.AsyncMessage.failed"),x);
             try {
                 if (link.getHandler() != null) {
                     link.getHandler().handleError(cx, new UniqueId(msg.getUniqueId()));
                 }
             } catch ( Exception ex ) {
-                log.error("Unable to report back error message.",ex);
+                log.error(sm.getString("messageDispatchInterceptor.errorMessage.failed"),ex);
             }
         } finally {
             addAndGetCurrentSize(-msg.getMessage().getLength());

==================================================
OrderInterceptor.java
index 0d5460a48a..2425397dcb 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
@@ -32,6 +32,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
 import org.apache.catalina.tribes.membership.MemberImpl;
 import org.apache.catalina.tribes.membership.Membership;
 import org.apache.catalina.tribes.util.Arrays;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.catalina.tribes.util.UUIDGenerator;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -123,6 +124,7 @@ import org.apache.juli.logging.LogFactory;
 public class NonBlockingCoordinator extends ChannelInterceptorBase {
 
     private static final Log log = LogFactory.getLog(NonBlockingCoordinator.class);
+    protected static final StringManager sm = StringManager.getManager(NonBlockingCoordinator.class);
 
     /**
      * header for a coordination message
@@ -267,7 +269,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
                 sendElectionMsg(local, msg.getMembers()[current], msg);
                 sent = true;
             }catch ( ChannelException x  ) {
-                log.warn("Unable to send election message to:"+msg.getMembers()[current]);
+                log.warn(sm.getString("nonBlockingCoordinator.electionMessage.sendfailed", msg.getMembers()[current]));
                 current = Arrays.nextIndex(msg.getMembers()[current],msg.getMembers());
                 if ( current == next ) throw x;
             }
@@ -494,7 +496,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
                 fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_MSG_ARRIVE,this,"Coord Msg Arrived("+Arrays.toNameString(cmbr)+")"));
                 processCoordMessage(cmsg);
             }catch ( ChannelException x ) {
-                log.error("Error processing coordination message. Could be fatal.",x);
+                log.error(sm.getString("nonBlockingCoordinator.processCoordinationMessage.failed"),x);
             }
         } else {
             super.messageReceived(msg);
@@ -513,7 +515,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
             fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_MBR_ADD,this,"Member add("+member.getName()+")"));
             if (started && elect) startElection(false);
         } catch (ChannelException x) {
-            log.error("Unable to start election when member was added.",x);
+            log.error(sm.getString("nonBlockingCoordinator.memberAdded.failed"),x);
         }
     }
 
@@ -526,7 +528,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
             if (started && (isCoordinator() || isHighest()))
                 startElection(true); //to do, if a member disappears, only the coordinator can start
         } catch (ChannelException x) {
-            log.error("Unable to start election when member was removed.",x);
+            log.error(sm.getString("nonBlockingCoordinator.memberDisappeared.failed"),x);
         }
     }
 
@@ -548,12 +550,12 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
             if ( view != null && (Arrays.diff(view,membership,local).length != 0 ||  Arrays.diff(membership,view,local).length != 0) ) {
                 if ( isHighest() ) {
                     fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_START_ELECT, this,
-                                                               "Heartbeat found inconsistency, restart election"));
+                            sm.getString("nonBlockingCoordinator.heartbeat.inconsistency")));
                     startElection(true);
                 }
             }
         } catch ( Exception x  ){
-            log.error("Unable to perform heartbeat.",x);
+            log.error(sm.getString("nonBlockingCoordinator.heartbeat.failed"),x);
         } finally {
             super.heartbeat();
         }

==================================================
TcpFailureDetector.java
index ebeff6286d..46e2410d81 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
@@ -27,6 +27,7 @@ import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
 import org.apache.catalina.tribes.io.XByteBuffer;
+import org.apache.catalina.tribes.util.StringManager;
 
 
 /**
@@ -53,6 +54,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * @version 1.1
  */
 public class OrderInterceptor extends ChannelInterceptorBase {
+    protected static final StringManager sm = StringManager.getManager(OrderInterceptor.class);
     private final HashMap<Member, Counter> outcounter = new HashMap<>();
     private final HashMap<Member, Counter> incounter = new HashMap<>();
     private final HashMap<Member, MessageOrder> incoming = new HashMap<>();
@@ -292,7 +294,7 @@ public class OrderInterceptor extends ChannelInterceptorBase {
                 add.next = iter;
 
             } else {
-                throw new ArithmeticException("Message added has the same counter, synchronization bug. Disable the order interceptor");
+                throw new ArithmeticException(sm.getString("orderInterceptor.messageAdded.sameCounter"));
             }
 
             return head;

==================================================
TcpPingInterceptor.java
index 3556804959..415f74d545 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -36,6 +36,7 @@ import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.XByteBuffer;
 import org.apache.catalina.tribes.membership.Membership;
 import org.apache.catalina.tribes.membership.StaticMember;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -61,6 +62,7 @@ import org.apache.juli.logging.LogFactory;
 public class TcpFailureDetector extends ChannelInterceptorBase {
 
     private static final Log log = LogFactory.getLog(TcpFailureDetector.class);
+    protected static final StringManager sm = StringManager.getManager(TcpFailureDetector.class);
 
     protected static final byte[] TCP_FAIL_DETECT = new byte[] {
         79, -89, 115, 72, 121, -126, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,
@@ -145,11 +147,11 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
         boolean shutdown = Arrays.equals(member.getCommand(),Member.SHUTDOWN_PAYLOAD);
         if ( !shutdown )
             if(log.isInfoEnabled())
-                log.info("Received memberDisappeared["+member+"] message. Will verify.");
+                log.info(sm.getString("tcpFailureDetector.memberDisappeared.verify", member));
         synchronized (membership) {
             if (!membership.contains(member)) {
                 if(log.isInfoEnabled())
-                    log.info("Verification complete. Member already disappeared["+member+"]");
+                    log.info(sm.getString("tcpFailureDetector.already.disappeared", member));
                 return;
             }
             //check to see if the member really is gone
@@ -169,11 +171,11 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
         }
         if ( notify ) {
             if(log.isInfoEnabled())
-                log.info("Verification complete. Member disappeared["+member+"]");
+                log.info(sm.getString("tcpFailureDetector.member.disappeared", member));
             super.memberDisappeared(member);
         } else {
             if(log.isInfoEnabled())
-                log.info("Verification complete. Member still alive["+member+"]");
+                log.info(sm.getString("tcpFailureDetector.still.alive", member));
 
         }
     }
@@ -215,7 +217,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
                 else performForcedCheck();
             }
         } catch (Exception x) {
-            log.warn("Unable to perform heartbeat on the TcpFailureDetector.",x);
+            log.warn(sm.getString("tcpFailureDetector.heartbeat.failed"),x);
         }
     }
 
@@ -251,7 +253,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
             if (membership.memberAlive(members[i])) {
                 //we don't have this one in our membership, check to see if he/she is alive
                 if (memberAlive(members[i])) {
-                    log.warn("Member added, even though we werent notified:" + members[i]);
+                    log.warn(sm.getString("tcpFailureDetector.performBasicCheck.memberAdded", members[i]));
                     super.memberAdded(members[i]);
                 } else {
                     membership.removeMember(members[i]);
@@ -269,7 +271,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
                 super.memberDisappeared(m);
                 removeSuspects.remove(m);
                 if(log.isInfoEnabled())
-                    log.info("Suspect member, confirmed dead.["+m+"]");
+                    log.info(sm.getString("tcpFailureDetector.suspectMember.dead", m));
             } else {
                 if (removeSuspectsTimeout > 0) {
                     long timeNow = System.currentTimeMillis();
@@ -291,7 +293,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
                 super.memberAdded(m);
                 addSuspects.remove(m);
                 if(log.isInfoEnabled())
-                    log.info("Suspect member, confirmed alive.["+m+"]");
+                    log.info(sm.getString("tcpFailureDetector.suspectMember.alive", m));
             } //end if
         }
     }
@@ -341,7 +343,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
         } catch (ConnectException cx) {
             //do nothing, we couldn't connect
         } catch (Exception x) {
-            log.error("Unable to perform failure detection check, assuming member down.",x);
+            log.error(sm.getString("tcpFailureDetector.failureDetection.failed"),x);
         }
         return false;
     }

==================================================
ThroughputInterceptor.java
index 1643875d43..e047872d6c 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -28,6 +28,7 @@ import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.XByteBuffer;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -42,6 +43,7 @@ import org.apache.juli.logging.LogFactory;
 public class TcpPingInterceptor extends ChannelInterceptorBase {
 
     private static final Log log = LogFactory.getLog(TcpPingInterceptor.class);
+    protected static final StringManager sm = StringManager.getManager(TcpPingInterceptor.class);
 
     protected static final byte[] TCP_PING_DATA = new byte[] {
         79, -89, 115, 72, 121, -33, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,
@@ -151,7 +153,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
         try {
             super.sendMessage(members, data, null);
         }catch (ChannelException x) {
-            log.warn("Unable to send TCP ping.",x);
+            log.warn(sm.getString("tcpPingInterceptor.ping.failed"),x);
         }
     }
 
@@ -182,7 +184,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
                     // In the highly unlikely event it was a different trigger,
                     // simply ignore it and continue.
                 }catch ( Exception x )  {
-                    log.warn("Unable to send ping from TCP ping thread.",x);
+                    log.warn(sm.getString("tcpPingInterceptor.pingFailed.pingThread"),x);
                 }
             }
         }

==================================================
TwoPhaseCommitInterceptor.java
index 19f7ea5104..fcfe56705a 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -27,6 +27,7 @@ import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.XByteBuffer;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -39,6 +40,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class ThroughputInterceptor extends ChannelInterceptorBase {
     private static final Log log = LogFactory.getLog(ThroughputInterceptor.class);
+    protected static final StringManager sm = StringManager.getManager(ThroughputInterceptor.class);
 
     double mbTx = 0;
     double mbAppTx = 0;
@@ -91,25 +93,12 @@ public class ThroughputInterceptor extends ChannelInterceptorBase {
     }
 
     public void report(double timeTx) {
-        StringBuilder buf = new StringBuilder("ThroughputInterceptor Report[\n\tTx Msg:");
-        buf.append(msgTxCnt).append(" messages\n\tSent:");
-        buf.append(df.format(mbTx));
-        buf.append(" MB (total)\n\tSent:");
-        buf.append(df.format(mbAppTx));
-        buf.append(" MB (application)\n\tTime:");
-        buf.append(df.format(timeTx));
-        buf.append(" seconds\n\tTx Speed:");
-        buf.append(df.format(mbTx/timeTx));
-        buf.append(" MB/sec (total)\n\tTxSpeed:");
-        buf.append(df.format(mbAppTx/timeTx));
-        buf.append(" MB/sec (application)\n\tError Msg:");
-        buf.append(msgTxErr).append("\n\tRx Msg:");
-        buf.append(msgRxCnt);
-        buf.append(" messages\n\tRx Speed:");
-        buf.append(df.format(mbRx/((System.currentTimeMillis()-rxStart)/1000)));
-        buf.append(" MB/sec (since 1st msg)\n\tReceived:");
-        buf.append(df.format(mbRx)).append(" MB]\n");
-        if ( log.isInfoEnabled() ) log.info(buf);
+        
+        if ( log.isInfoEnabled() )
+            log.info(sm.getString("throughputInterceptor.report", 
+                    msgTxCnt, df.format(mbTx), df.format(mbAppTx), df.format(timeTx), df.format(mbTx/timeTx),
+                    df.format(mbAppTx/timeTx), msgTxErr, msgRxCnt, df.format(mbRx/((System.currentTimeMillis()-rxStart)/1000)),
+                    df.format(mbRx)));
     }
 
     public void setInterval(int interval) {

==================================================
