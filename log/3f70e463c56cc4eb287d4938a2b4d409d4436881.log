3f70e463c56cc4eb287d4938a2b4d409d4436881
==================================================
Refactor, name change in preparation to swap in Executor, and to make increase thread fairness when receiving data
==================================================
Filip Hanik
==================================================
Fri Dec 15 00:25:17 2006 +0000
==================================================
ReceiverBase.java
Refactor, name change in preparation to swap in Executor, and to make increase thread fairness when receiving data


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@487407 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RxTaskPool.java
index e01b6d9204..fdddf9ce5a 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -38,7 +38,7 @@ import org.apache.juli.logging.Log;
  * @author not attributable
  * @version 1.0
  */
-public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, ThreadPool.ThreadCreator {
+public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, RxTaskPool.TaskCreator {
 
     public static final int OPTION_DIRECT_BUFFER = 0x0004;
 
@@ -53,7 +53,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, T
     private int rxBufSize = 43800;
     private int txBufSize = 25188;
     private boolean listen = false;
-    private ThreadPool pool;
+    private RxTaskPool pool;
     private boolean direct = true;
     private long tcpSelectorTimeout = 5000;
     //how many times to search for an available socket
@@ -270,7 +270,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, T
         return listener;
     }
 
-    public ThreadPool getPool() {
+    public RxTaskPool getPool() {
         return pool;
     }
     
@@ -367,7 +367,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, T
         this.log = log;
     }
 
-    public void setPool(ThreadPool pool) {
+    public void setPool(RxTaskPool pool) {
         this.pool = pool;
     }
 

==================================================
WorkerThread.java
similarity index 95%
rename from java/org/apache/catalina/tribes/transport/ThreadPool.java
rename to java/org/apache/catalina/tribes/transport/RxTaskPool.java
index e15a0182d6..43ac09b5df 100644
--- a/java/org/apache/catalina/tribes/transport/ThreadPool.java
+++ b/java/org/apache/catalina/tribes/transport/RxTaskPool.java
@@ -25,7 +25,7 @@ import java.util.List;
  * @version 1.0
  */
 
-public class ThreadPool
+public class RxTaskPool
 {
     /**
      * A very simple thread pool class.  The pool size is set at
@@ -43,14 +43,14 @@ public class ThreadPool
     private int maxThreads;
     private int minThreads;
     
-    private ThreadCreator creator = null;
+    private TaskCreator creator = null;
 
     private static synchronized int inc() {
         return counter++;
     }
 
     
-    public ThreadPool (int maxThreads, int minThreads, ThreadCreator creator) throws Exception {
+    public RxTaskPool (int maxThreads, int minThreads, TaskCreator creator) throws Exception {
         // fill up the pool with worker threads
         this.maxThreads = maxThreads;
         this.minThreads = minThreads;
@@ -155,11 +155,11 @@ public class ThreadPool
         this.minThreads = minThreads;
     }
 
-    public ThreadCreator getThreadCreator() {
+    public TaskCreator getThreadCreator() {
         return this.creator;
     }
     
-    public static interface ThreadCreator {
+    public static interface TaskCreator {
         public WorkerThread getWorkerThread();
     }
 }

==================================================
BioReceiver.java
index 8c7df84085..88afd87a82 100644
--- a/java/org/apache/catalina/tribes/transport/WorkerThread.java
+++ b/java/org/apache/catalina/tribes/transport/WorkerThread.java
@@ -27,12 +27,12 @@ import org.apache.catalina.tribes.io.ListenCallback;
  * @version $Revision$ $Date$
  */
 public abstract class WorkerThread extends Thread 
-{
+{ 
     
     public static final int OPTION_DIRECT_BUFFER = ReceiverBase.OPTION_DIRECT_BUFFER;
     
     private ListenCallback callback;
-    private ThreadPool pool;
+    private RxTaskPool pool;
     private boolean doRun = true;
     private int options;
     protected boolean useBufferPool = true;
@@ -41,7 +41,7 @@ public abstract class WorkerThread extends Thread
         this.callback = callback;
     }
 
-    public void setPool(ThreadPool pool) {
+    public void setPool(RxTaskPool pool) {
         this.pool = pool;
     }
 
@@ -57,7 +57,7 @@ public abstract class WorkerThread extends Thread
         this.doRun = doRun;
     }
 
-    public ThreadPool getPool() {
+    public RxTaskPool getPool() {
         return pool;
     }
 

==================================================
NioReceiver.java
index ac083dd7c9..6fc75e61a5 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -23,7 +23,7 @@ import org.apache.catalina.tribes.ChannelReceiver;
 import org.apache.catalina.tribes.io.ListenCallback;
 import org.apache.catalina.tribes.io.ObjectReader;
 import org.apache.catalina.tribes.transport.ReceiverBase;
-import org.apache.catalina.tribes.transport.ThreadPool;
+import org.apache.catalina.tribes.transport.RxTaskPool;
 import org.apache.catalina.tribes.transport.WorkerThread;
 
 /**
@@ -54,7 +54,7 @@ public class BioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
      */
     public void start() throws IOException {
         try {
-            setPool(new ThreadPool(getMaxThreads(),getMinThreads(),this));
+            setPool(new RxTaskPool(getMaxThreads(),getMinThreads(),this));
         } catch (Exception x) {
             log.fatal("ThreadPool can initilzed. Listener not started", x);
             if ( x instanceof IOException ) throw (IOException)x;

==================================================
