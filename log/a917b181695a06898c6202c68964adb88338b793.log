a917b181695a06898c6202c68964adb88338b793
==================================================
Ensure that connections from unlockAccept() do not get passed to a
==================================================
Mark Emlyn
==================================================
Sun Jan 15 20:04:05 2012 +0000
==================================================
AprEndpoint.java
Ensure that connections from unlockAccept() do not get passed to a
processor.
Reduce differences between BIO, NIO and APR acceptor code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1231740 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JIoEndpoint.java
index e2f519473d..6594c642ea 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -941,21 +941,16 @@ public class AprEndpoint extends AbstractEndpoint {
         return log;
     }
 
-    // --------------------------------------------------- Acceptor Inner Class
-
 
+    // --------------------------------------------------- Acceptor Inner Class
     /**
-     * Server socket acceptor thread.
+     * The background thread that listens for incoming TCP/IP connections and
+     * hands them off to an appropriate processor.
      */
     protected class Acceptor extends AbstractEndpoint.Acceptor {
 
         private final Log log = LogFactory.getLog(AprEndpoint.Acceptor.class);
 
-
-        /**
-         * The background thread that listens for incoming TCP/IP connections and
-         * hands them off to an appropriate processor.
-         */
         @Override
         public void run() {
 
@@ -997,17 +992,13 @@ public class AprEndpoint extends AbstractEndpoint {
                     // Successful accept, reset the error delay
                     errorDelay = 0;
 
-                    /*
-                     * In the case of a deferred accept unlockAccept needs to
-                     * send data. This data will be rubbish, so destroy the
-                     * socket and don't process it.
-                     */
-                    if (deferAccept && (paused || !running)) {
-                        destroySocket(socket);
-                        continue;
-                    }
-                    // Hand this socket off to an appropriate processor
-                    if (!processSocketWithOptions(socket)) {
+                    if (running && !paused) {
+                        // Hand this socket off to an appropriate processor
+                        if (!processSocketWithOptions(socket)) {
+                            // Close socket and pool right away
+                            destroySocket(socket);
+                        }
+                    } else {
                         // Close socket and pool right away
                         destroySocket(socket);
                     }

==================================================
NioEndpoint.java
index dd19919102..705f44b1da 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -177,14 +177,11 @@ public class JIoEndpoint extends AbstractEndpoint {
 
     // --------------------------------------------------- Acceptor Inner Class
     /**
-     * Server socket acceptor thread.
+     * The background thread that listens for incoming TCP/IP connections and
+     * hands them off to an appropriate processor.
      */
     protected class Acceptor extends AbstractEndpoint.Acceptor {
 
-        /**
-         * The background thread that listens for incoming TCP/IP connections and
-         * hands them off to an appropriate processor.
-         */
         @Override
         public void run() {
 
@@ -227,23 +224,15 @@ public class JIoEndpoint extends AbstractEndpoint {
                     errorDelay = 0;
 
                     // Configure the socket
-                    if (setSocketOptions(socket)) {
+                    if (running && !paused && setSocketOptions(socket)) {
                         // Hand this socket off to an appropriate processor
                         if (!processSocket(socket)) {
                             // Close socket right away
-                            try {
-                                socket.close();
-                            } catch (IOException e) {
-                                // Ignore
-                            }
+                            closeSocket(socket);
                         }
                     } else {
                         // Close socket right away
-                        try {
-                            socket.close();
-                        } catch (IOException e) {
-                            // Ignore
-                        }
+                        closeSocket(socket);
                     }
                 } catch (IOException x) {
                     if (running) {
@@ -257,13 +246,21 @@ public class JIoEndpoint extends AbstractEndpoint {
                     ExceptionUtils.handleThrowable(t);
                     log.error(sm.getString("endpoint.accept.fail"), t);
                 }
-                // The processor will recycle itself when it finishes
             }
             state = AcceptorState.ENDED;
         }
     }
 
 
+    private void closeSocket(Socket socket) {
+        try {
+            socket.close();
+        } catch (IOException e) {
+            // Ignore
+        }
+    }
+
+
     // ------------------------------------------- SocketProcessor Inner Class
 
 

==================================================
