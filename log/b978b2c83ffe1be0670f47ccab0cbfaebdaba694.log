b978b2c83ffe1be0670f47ccab0cbfaebdaba694
==================================================
Allow more quoted tokens for RewriteValve config
==================================================
Felix Schumacher
==================================================
Fri Nov 1 16:52:52 2019 +0100
==================================================
QuotedStringTokenizer.java
Allow more quoted tokens for RewriteValve config

Along with quoted token parsing, RewriteMaps can have more than one
parameter now.

Bugzilla Id: 64067
Part of #221



==================================================
RewriteMap.java
new file mode 100644
index 0000000000..101dd9638e
--- /dev/null
+++ b/java/org/apache/catalina/valves/rewrite/QuotedStringTokenizer.java
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.valves.rewrite;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+public class QuotedStringTokenizer {
+
+    private Iterator<String> tokenIterator;
+    private int tokenCount;
+    private int returnedTokens = 0;
+
+    enum WordMode {
+        SPACES, QUOTED, ESCAPED, SIMPLE, COMMENT
+    }
+
+    public QuotedStringTokenizer(String text) {
+        List<String> tokens;
+        if (text != null) {
+            tokens = tokenizeText(text);
+        } else {
+            tokens = Collections.emptyList();
+        }
+        this.tokenCount = tokens.size();
+        this.tokenIterator = tokens.iterator();
+    }
+
+    private List<String> tokenizeText(String inputText) {
+        List<String> tokens = new ArrayList<>();
+        int pos = 0;
+        int length = inputText.length();
+        WordMode currentMode = WordMode.SPACES;
+        StringBuilder currentToken = new StringBuilder();
+        while (pos < length) {
+            char currentChar = inputText.charAt(pos);
+            switch (currentMode) {
+            case SPACES:
+                currentMode = handleSpaces(currentToken, currentChar);
+                break;
+            case QUOTED:
+                currentMode = handleQuoted(tokens, currentToken, currentChar);
+                break;
+            case ESCAPED:
+                currentToken.append(currentChar);
+                currentMode = WordMode.QUOTED;
+                break;
+            case SIMPLE:
+                currentMode = handleSimple(tokens, currentToken, currentChar);
+                break;
+            case COMMENT:
+                if (currentChar == '\r' || currentChar == '\n') {
+                    currentMode = WordMode.SPACES;
+                }
+                break;
+            default:
+                throw new IllegalStateException(
+                        "Couldn't tokenize text " + inputText + " after position " + pos + "from mode " + currentMode);
+            }
+            pos++;
+        }
+        String possibleLastToken = currentToken.toString();
+        if (!possibleLastToken.isEmpty()) {
+            tokens.add(possibleLastToken);
+        }
+        return tokens;
+    }
+
+    private WordMode handleSimple(List<String> tokens, StringBuilder currentToken, char currentChar) {
+        if (Character.isWhitespace(currentChar)) {
+            tokens.add(currentToken.toString());
+            currentToken.setLength(0);
+            return WordMode.SPACES;
+        } else {
+            currentToken.append(currentChar);
+        }
+        return WordMode.SIMPLE;
+    }
+
+    private WordMode handleQuoted(List<String> tokens, StringBuilder currentToken, char currentChar) {
+        if (currentChar == '"') {
+            tokens.add(currentToken.toString());
+            currentToken.setLength(0);
+            return WordMode.SPACES;
+        } else if (currentChar == '\\') {
+            return WordMode.ESCAPED;
+        } else {
+            currentToken.append(currentChar);
+        }
+        return WordMode.QUOTED;
+    }
+
+    private WordMode handleSpaces(StringBuilder currentToken, char currentChar) {
+        if (!Character.isWhitespace(currentChar)) {
+            if (currentChar == '"') {
+                return WordMode.QUOTED;
+            } else if (currentChar == '#') {
+                return WordMode.COMMENT;
+            } else {
+                currentToken.append(currentChar);
+                return WordMode.SIMPLE;
+            }
+        }
+        return WordMode.SPACES;
+    }
+
+    public boolean hasMoreTokens() {
+        return tokenIterator.hasNext();
+    }
+
+    public String nextToken() {
+        returnedTokens++;
+        return tokenIterator.next();
+    }
+
+    public int countTokens() {
+        return tokenCount - returnedTokens;
+    }
+}

==================================================
RewriteValve.java
index a18a5e7f22..43315e744d 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteMap.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteMap.java
@@ -43,6 +43,24 @@ public interface RewriteMap {
      */
     public String setParameters(String params);
 
+    /**
+     * Optional parameters that can be defined through the {@code RewriteMap}
+     * directive in the {@code rewrite.config} file.
+     * <p>
+     * This method will be called, if there are more than one parameters defined.
+     *
+     * @param params the optional parameters
+     */
+    default void setParameters(String... params) {
+        if (params == null) {
+            return;
+        }
+        if (params.length > 1) {
+            throw new IllegalArgumentException("Too many parameters for this map");
+        }
+        setParameters(params[0]);
+    }
+
     /**
      * Maps a key to a replacement value.<br>
      * The method is free to return {@code null} to indicate, that the default

==================================================
TestQuotedStringTokenizer.java
index 68f0bc5e00..a86d1fda8f 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -572,7 +572,7 @@ public class RewriteValve extends ValveBase {
      * @return The condition, rule or map resulting from parsing the line
      */
     public static Object parse(String line) {
-        StringTokenizer tokenizer = new StringTokenizer(line);
+        QuotedStringTokenizer tokenizer = new QuotedStringTokenizer(line);
         if (tokenizer.hasMoreTokens()) {
             String token = tokenizer.nextToken();
             if (token.equals("RewriteCond")) {

==================================================
