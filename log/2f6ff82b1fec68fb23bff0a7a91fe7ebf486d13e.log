2f6ff82b1fec68fb23bff0a7a91fe7ebf486d13e
==================================================
Switch to Base64 encoder/decoder from Commons Codec
==================================================
Mark Emlyn
==================================================
Thu Mar 21 13:10:08 2013 +0000
==================================================
AbstractCatalinaTask.java
Switch to Base64 encoder/decoder from Commons Codec

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1459289 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index d44dab6eee..cbefc13354 100644
--- a/java/org/apache/catalina/ant/AbstractCatalinaTask.java
+++ b/java/org/apache/catalina/ant/AbstractCatalinaTask.java
@@ -27,9 +27,8 @@ import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
 
-import javax.xml.bind.DatatypeConverter;
-
 import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 
@@ -202,7 +201,7 @@ public abstract class AbstractCatalinaTask extends BaseRedirectorHelperTask {
 
             // Set up an authorization header with our credentials
             String input = username + ":" + password;
-            String output = DatatypeConverter.printBase64Binary(
+            String output = Base64.encodeBase64String(
                     input.getBytes(B2CConverter.ISO_8859_1));
             hconn.setRequestProperty("Authorization",
                                      "Basic " + output);

==================================================
SpnegoAuthenticator.java
index 83b2db18af..3c939560ca 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -24,7 +24,6 @@ import java.security.Principal;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.bind.DatatypeConverter;
 
 import org.apache.catalina.connector.Request;
 import org.apache.juli.logging.Log;
@@ -32,6 +31,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.codec.binary.Base64;
 
 
 
@@ -111,10 +111,10 @@ public class BasicAuthenticator
             if (authorizationBC.startsWithIgnoreCase("basic ", 0)) {
                 authorizationBC.setOffset(authorizationBC.getOffset() + 6);
 
-                // Use the StringCache as these will be the same between
-                // requests
-                String encoded = authorizationBC.toStringInternal();
-                byte[] decoded = DatatypeConverter.parseBase64Binary(encoded);
+                byte[] decoded = Base64.decodeBase64(
+                        authorizationBC.getBuffer(),
+                        authorizationBC.getOffset(),
+                        authorizationBC.getLength());
 
                 // Get username and password
                 int colon = -1;

==================================================
JNDIRealm.java
index 817928c311..4ec85c24d9 100644
--- a/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
@@ -27,15 +27,14 @@ import javax.security.auth.Subject;
 import javax.security.auth.login.LoginContext;
 import javax.security.auth.login.LoginException;
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.bind.DatatypeConverter;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.connector.Request;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.codec.binary.Base64;
 import org.ietf.jgss.GSSContext;
 import org.ietf.jgss.GSSCredential;
 import org.ietf.jgss.GSSException;
@@ -188,13 +187,9 @@ public class SpnegoAuthenticator extends AuthenticatorBase {
 
         authorizationBC.setOffset(authorizationBC.getOffset() + 10);
 
-        // Create the String directly as this will change on each request and we
-        // don't want to use the StringCache
-        String encoded = new String(authorizationBC.getBuffer(),
+        byte[] decoded = Base64.decodeBase64(authorizationBC.getBuffer(),
                 authorizationBC.getOffset(),
-                authorizationBC.getLength(), B2CConverter.ISO_8859_1);
-
-        byte[] decoded = DatatypeConverter.parseBase64Binary(encoded);
+                authorizationBC.getLength());
 
         if (decoded.length == 0) {
             if (log.isDebugEnabled()) {
@@ -282,7 +277,7 @@ public class SpnegoAuthenticator extends AuthenticatorBase {
 
         // Send response token on success and failure
         response.setHeader("WWW-Authenticate", "Negotiate "
-                + DatatypeConverter.printBase64Binary(outToken));
+                + Base64.encodeBase64String(outToken));
 
         if (principal != null) {
             register(request, response, principal, Constants.SPNEGO_METHOD,

==================================================
MimeUtility.java
index 1c3c1d5786..cf96a0566f 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -50,10 +50,10 @@ import javax.naming.directory.DirContext;
 import javax.naming.directory.InitialDirContext;
 import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
-import javax.xml.bind.DatatypeConverter;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.codec.binary.Base64;
 import org.ietf.jgss.GSSCredential;
 
 /**
@@ -1553,8 +1553,9 @@ public class JNDIRealm extends RealmBase {
                     password = password.substring(5);
                     md.reset();
                     md.update(credentials.getBytes(B2CConverter.ISO_8859_1));
+                    byte[] decoded = Base64.decodeBase64(md.digest());
                     String digestedPassword =
-                            DatatypeConverter.printBase64Binary(md.digest());
+                            new String(decoded, B2CConverter.ISO_8859_1);
                     validated = password.equals(digestedPassword);
                 }
             } else if (password.startsWith("{SSHA}")) {
@@ -1567,17 +1568,15 @@ public class JNDIRealm extends RealmBase {
                     md.update(credentials.getBytes(B2CConverter.ISO_8859_1));
 
                     // Decode stored password.
-                    byte[] decoded =
-                            DatatypeConverter.parseBase64Binary(password);
+                    byte[] decoded = Base64.decodeBase64(password);
 
                     // Split decoded password into hash and salt.
                     final int saltpos = 20;
                     byte[] hash = new byte[saltpos];
                     System.arraycopy(decoded, 0, hash, 0, saltpos);
-                    byte[] salt = new byte[decoded.length - saltpos];
-                    System.arraycopy(decoded, saltpos, salt, 0, salt.length);
 
-                    md.update(salt);
+                    md.update(decoded, saltpos, decoded.length - saltpos);
+
                     byte[] dp = md.digest();
 
                     validated = Arrays.equals(dp, hash);

==================================================
WsWebSocketContainer.java
index c18adfe811..64492c1d35 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/mime/MimeUtility.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/mime/MimeUtility.java
@@ -23,7 +23,7 @@ import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 
-import javax.xml.bind.DatatypeConverter;
+import org.apache.tomcat.util.codec.binary.Base64;
 
 /**
  * Utility class to decode MIME texts.
@@ -244,7 +244,7 @@ public final class MimeUtility {
             byte[] decodedData;
             // Base64 encoded?
             if (encoding.equals(BASE64_ENCODING_MARKER)) {
-                decodedData = DatatypeConverter.parseBase64Binary(encodedText);
+                decodedData = Base64.decodeBase64(encodedText);
             } else if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) { // maybe quoted printable.
                 byte[] encodedData = encodedText.getBytes(US_ASCII_CHARSET);
                 QuotedPrintableDecoder.decode(encodedData, out);

==================================================
WsServlet.java
index b7ff5d6f5f..c1c8911988 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -46,10 +46,10 @@ import javax.websocket.Extension;
 import javax.websocket.HandshakeResponse;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
-import javax.xml.bind.DatatypeConverter;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.pojo.PojoEndpointClient;
 
@@ -345,7 +345,7 @@ public class WsWebSocketContainer
     private String generateWsKeyValue() {
         byte[] keyBytes = new byte[16];
         random.nextBytes(keyBytes);
-        return DatatypeConverter.printBase64Binary(keyBytes);
+        return Base64.encodeBase64String(keyBytes);
     }
 
 

==================================================
TestNonLoginAndBasicAuthenticator.java
index 68e622a358..f80e2b52ec 100644
--- a/java/org/apache/tomcat/websocket/server/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/server/WsServlet.java
@@ -37,8 +37,8 @@ import javax.servlet.http.HttpServletResponse;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
 import javax.websocket.server.ServerEndpointConfig;
-import javax.xml.bind.DatatypeConverter;
 
+import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tomcat.websocket.Constants;
 import org.apache.tomcat.websocket.WsHandshakeResponse;
 import org.apache.tomcat.websocket.pojo.PojoEndpointServer;
@@ -211,7 +211,7 @@ public class WsServlet extends HttpServlet {
         }
         sha1Helper.reset();
         sha1Helper.update(key.getBytes(ISO_8859_1));
-        String result = DatatypeConverter.printBase64Binary(sha1Helper.digest(WS_ACCEPT));
+        String result = Base64.encodeBase64String(sha1Helper.digest(WS_ACCEPT));
         sha1Helpers.add(sha1Helper);
         return result;
     }

==================================================
TestSSOnonLoginAndBasicAuthenticator.java
index 825cd72c04..ac9ebb72fe 100644
--- a/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
@@ -22,7 +22,6 @@ import java.util.List;
 import java.util.Map;
 
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.bind.DatatypeConverter;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -37,7 +36,9 @@ import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.codec.binary.Base64;
 
 /**
  * Test BasicAuthenticator and NonLoginAuthenticator when a
@@ -609,9 +610,9 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
             username = aUsername;
             password = aPassword;
             String userCredentials = username + ":" + password;
-            byte[] credentialsBytes = ByteChunk.convertToBytes(userCredentials);
-            String base64auth =
-                    DatatypeConverter.printBase64Binary(credentialsBytes);
+            byte[] credentialsBytes =
+                    userCredentials.getBytes(B2CConverter.ISO_8859_1);
+            String base64auth = Base64.encodeBase64String(credentialsBytes);
             credentials= method + " " + base64auth;
         }
 

==================================================
