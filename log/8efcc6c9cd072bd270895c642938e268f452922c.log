8efcc6c9cd072bd270895c642938e268f452922c
==================================================
Fix use of multiple parameters when defining RewriteMaps
==================================================
remm remm@apache.org
==================================================
Tue May 19 16:12:30 2020 +0200
==================================================
RewriteMap.java
index e67d4bad0d..c7541e7ce6 100644
--- a/java/org/apache/catalina/valves/rewrite/LocalStrings.properties
+++ b/java/org/apache/catalina/valves/rewrite/LocalStrings.properties
@@ -15,6 +15,8 @@
 
 quotedStringTokenizer.tokenizeError=Error tokenizing text [{0}] after position [{1}] from mode [{2}]
 
+rewriteMap.tooManyParameters=Too many parameters for this map
+
 rewriteValve.closeError=Error closing configuration
 rewriteValve.invalidFlags=Invalid flag in [{0}] flags [{1}]
 rewriteValve.invalidLine=Invalid line [{0}]

==================================================
RewriteValve.java
index 43315e744d..5ca73e7c1e 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteMap.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteMap.java
@@ -16,6 +16,8 @@
  */
 package org.apache.catalina.valves.rewrite;
 
+import org.apache.tomcat.util.res.StringManager;
+
 /**
  * Interface for user defined lookup/replacement logic that can be defined in
  * a {@code rewrite.config} file by a {@code RewriteMap} directive. Such a map
@@ -56,7 +58,8 @@ public interface RewriteMap {
             return;
         }
         if (params.length > 1) {
-            throw new IllegalArgumentException("Too many parameters for this map");
+            throw new IllegalArgumentException(
+                    StringManager.getManager(RewriteMap.class).getString("rewriteMap.tooManyParameters"));
         }
         setParameters(params[0]);
     }

==================================================
TestRewriteValve.java
index 20d8ba0f9b..d2c40a69e9 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -630,12 +630,17 @@ public class RewriteValve extends ValveBase {
                     throw new IllegalArgumentException(sm.getString("rewriteValve.invalidMapClassName", line));
                 }
                 if (tokenizer.hasMoreTokens()) {
-                    map.setParameters(tokenizer.nextToken());
+                    if (tokenizer.countTokens() == 1) {
+                        map.setParameters(tokenizer.nextToken());
+                    } else {
+                        List<String> params = new ArrayList<>();
+                        while (tokenizer.hasMoreTokens()) {
+                            params.add(tokenizer.nextToken());
+                        }
+                        map.setParameters(params.toArray(new String[0]));
+                    }
                 }
-                Object[] result = new Object[2];
-                result[0] = name;
-                result[1] = map;
-                return result;
+                return new Object[] { name, map };
             } else if (token.startsWith("#")) {
                 // it's a comment, ignore it
             } else {

==================================================
TesterRewriteMapA.java
index 134f45af3b..4c9a97c63c 100644
--- a/test/org/apache/catalina/valves/rewrite/TestRewriteValve.java
+++ b/test/org/apache/catalina/valves/rewrite/TestRewriteValve.java
@@ -106,6 +106,12 @@ public class TestRewriteValve extends TomcatBaseTest {
                 "RewriteRule /b/.* /c/${mapa:${mapa:a}}", "/b/a.html", "/c/aaaa");
     }
 
+    @Test
+    public void testRewriteMap07() throws Exception {
+        doTestRewrite("RewriteMap mapa org.apache.catalina.valves.rewrite.TesterRewriteMapA foo bar\n" +
+                "RewriteRule /b/.* /c/${mapa:${mapa:a}}", "/b/a.html", "/c/aaaa");
+    }
+
     @Test
     public void testRewriteServerVar() throws Exception {
         doTestRewrite("RewriteRule /b/(.*).html$ /c%{SERVLET_PATH}", "/b/x.html", "/c/b/x.html");

==================================================
