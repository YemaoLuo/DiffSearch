2f550b893fbbd40a353803eacfd88845abdf3d3c
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55176
==================================================
Mark Emlyn
==================================================
Mon Jul 1 21:18:57 2013 +0000
==================================================
ExpressionTokenizer.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55176
SSI expression parser failed to correctly handle the use of an '=' character inside a regular expression.
Includes a test case.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1498693 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestExpressionParseTree.java
index b568e0a34d..a2de60c1c8 100644
--- a/java/org/apache/catalina/ssi/ExpressionTokenizer.java
+++ b/java/org/apache/catalina/ssi/ExpressionTokenizer.java
@@ -135,8 +135,8 @@ public class ExpressionTokenizer {
                 break;
         }
         int end = index;
-        // If it's a quoted string then end is the next unescaped quote
         if (currentChar == '"' || currentChar == '\'') {
+            // It's a quoted string and the end is the next unescaped quote
             char endChar = currentChar;
             boolean escaped = false;
             start++;
@@ -150,6 +150,19 @@ public class ExpressionTokenizer {
             }
             end = index;
             index++; // Skip the end quote
+        } else if (currentChar == '/') {
+            // It's a regular expression and the end is the next unescaped /
+            char endChar = currentChar;
+            boolean escaped = false;
+            for (; index < length; index++) {
+                if (expr[index] == '\\' && !escaped) {
+                    escaped = true;
+                    continue;
+                }
+                if (expr[index] == endChar && !escaped) break;
+                escaped = false;
+            }
+            end = ++index;
         } else {
             // End is the next whitespace character
             for (; index < length; index++) {

==================================================
