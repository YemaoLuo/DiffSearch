72aab3047fe13d95628d54ea002fd8851f1f46cd
==================================================
https://issues.apache.org/bugzilla/show_bug.cgi?id=53173
==================================================
Filip Hanik
==================================================
Wed May 2 17:12:48 2012 +0000
==================================================
AbstractProtocol.java
https://issues.apache.org/bugzilla/show_bug.cgi?id=53173
Properly handle count down of maxConnections latch when entering edge cases.



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1333114 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractEndpoint.java
index eed370e4e9..4939c96d1c 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -541,6 +541,12 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                 SocketStatus status) {
             Processor<S> processor = connections.remove(socket.getSocket());
 
+            if (status == SocketStatus.DISCONNECT && processor == null) {
+                //nothing more to be done endpoint requested a close
+                //and there are no object associated with this connection
+                return SocketState.CLOSED;
+            }
+
             socket.setAsync(false);
 
             try {
@@ -555,7 +561,9 @@ public abstract class AbstractProtocol implements ProtocolHandler,
 
                 SocketState state = SocketState.CLOSED;
                 do {
-                    if (processor.isAsync() || state == SocketState.ASYNC_END) {
+                    if (status == SocketStatus.DISCONNECT) {
+                        //do nothing here, just wait for it to get recycled
+                    } else if (processor.isAsync() || state == SocketState.ASYNC_END) {
                         state = processor.asyncDispatch(status);
                     } else if (processor.isComet()) {
                         state = processor.event(status);

==================================================
AprEndpoint.java
index b94167c57c..ee6b4fc75f 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -163,7 +163,12 @@ public abstract class AbstractEndpoint {
         LimitLatch latch = this.connectionLimitLatch;
         if (latch != null) {
             // Update the latch that enforces this
+            if (maxCon == -1)
+                releaseConnectionLatch();
+            else
             latch.setLimit(maxCon);
+        } else if (maxCon > 0) {
+            initializeConnectionLatch();
         }
     }
 
@@ -655,6 +660,7 @@ public abstract class AbstractEndpoint {
     public abstract boolean getUsePolling();
 
     protected LimitLatch initializeConnectionLatch() {
+        if (maxConnections==-1) return null;
         if (connectionLimitLatch==null) {
             connectionLimitLatch = new LimitLatch(getMaxConnections());
         }
@@ -668,11 +674,13 @@ public abstract class AbstractEndpoint {
     }
 
     protected void countUpOrAwaitConnection() throws InterruptedException {
+        if (maxConnections==-1) return;
         LimitLatch latch = connectionLimitLatch;
         if (latch!=null) latch.countUpOrAwait();
     }
 
     protected long countDownConnection() {
+        if (maxConnections==-1) return -1;
         LimitLatch latch = connectionLimitLatch;
         if (latch!=null) {
             long result = latch.countDown();

==================================================
JIoEndpoint.java
index fe9efcc492..0c1d951d47 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -995,6 +995,8 @@ public class AprEndpoint extends AbstractEndpoint {
                         // socket
                         socket = Socket.accept(serverSock);
                     } catch (Exception e) {
+                        //we didn't get a socket
+                        countDownConnection();
                         // Introduce delay if necessary
                         errorDelay = handleExceptionWithDelay(errorDelay);
                         // re-throw
@@ -1006,10 +1008,12 @@ public class AprEndpoint extends AbstractEndpoint {
                     if (running && !paused) {
                         // Hand this socket off to an appropriate processor
                         if (!processSocketWithOptions(socket)) {
+                            countDownConnection();
                             // Close socket and pool right away
                             destroySocket(socket);
                         }
                     } else {
+                        countDownConnection();
                         // Close socket and pool right away
                         destroySocket(socket);
                     }

==================================================
NioEndpoint.java
index 77c9c8d47c..cb61fd352a 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -216,6 +216,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                         // socket
                         socket = serverSocketFactory.acceptSocket(serverSocket);
                     } catch (IOException ioe) {
+                        countDownConnection();
                         // Introduce delay if necessary
                         errorDelay = handleExceptionWithDelay(errorDelay);
                         // re-throw
@@ -228,10 +229,12 @@ public class JIoEndpoint extends AbstractEndpoint {
                     if (running && !paused && setSocketOptions(socket)) {
                         // Hand this socket off to an appropriate processor
                         if (!processSocket(socket)) {
+                            countDownConnection();
                             // Close socket right away
                             closeSocket(socket);
                         }
                     } else {
+                        countDownConnection();
                         // Close socket right away
                         closeSocket(socket);
                     }
@@ -335,6 +338,16 @@ public class JIoEndpoint extends AbstractEndpoint {
                     if (launch) {
                         try {
                             getExecutor().execute(new SocketProcessor(socket, SocketStatus.OPEN));
+                        } catch (RejectedExecutionException x) {
+                            log.warn("Socket reprocessing request was rejected for:"+socket,x);
+                            try {
+                                //unable to handle connection at this time
+                                handler.process(socket, SocketStatus.DISCONNECT);
+                            } finally {
+                                countDownConnection();
+                            }
+
+
                         } catch (NullPointerException npe) {
                             if (running) {
                                 log.error(sm.getString("endpoint.launch.fail"),
@@ -560,6 +573,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                             return false;
                         }
                         getExecutor().execute(proc);
+                        //TODO gotta catch RejectedExecutionException and properly handle it
                     } finally {
                         if (Constants.IS_SECURITY_ENABLED) {
                             PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader);

==================================================
LimitLatch.java
index acad47507a..0d699ae189 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -787,6 +787,8 @@ public class NioEndpoint extends AbstractEndpoint {
                         // socket
                         socket = serverSock.accept();
                     } catch (IOException ioe) {
+                        //we didn't get a socket
+                        countDownConnection();
                         // Introduce delay if necessary
                         errorDelay = handleExceptionWithDelay(errorDelay);
                         // re-throw
@@ -799,9 +801,11 @@ public class NioEndpoint extends AbstractEndpoint {
                     // if successful
                     if (running && !paused) {
                         if (!setSocketOptions(socket)) {
+                            countDownConnection();
                             closeSocket(socket);
                         }
                     } else {
+                        countDownConnection();
                         closeSocket(socket);
                     }
                 } catch (SocketTimeoutException sx) {

==================================================
