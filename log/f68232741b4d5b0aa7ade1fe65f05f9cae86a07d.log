f68232741b4d5b0aa7ade1fe65f05f9cae86a07d
==================================================
Pull up the Handler instance
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:51:33 2014 +0000
==================================================
AbstractProtocol.java
Pull up the Handler instance

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641290 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 03d922d007..01de1098ca 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -89,6 +89,8 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
      */
     private final AbstractEndpoint<S> endpoint;
 
+    private Handler<S> handler;
+
 
     public AbstractProtocol(AbstractEndpoint<S> endpoint) {
         this.endpoint = endpoint;
@@ -320,6 +322,15 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     }
 
 
+    protected Handler<S> getHandler() {
+        return handler;
+    }
+
+    protected void setHandler(Handler<S> handler) {
+        this.handler = handler;
+    }
+
+
     // -------------------------------------------------------- Abstract methods
 
     /**
@@ -342,12 +353,6 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     protected abstract String getProtocolName();
 
 
-    /**
-     * Obtain the handler associated with the underlying Endpoint
-     */
-    protected abstract Handler<S> getHandler();
-
-
     // ----------------------------------------------------- JMX related methods
 
     protected String domain;

==================================================
AjpNio2Protocol.java
index 884e3c1870..42233556c1 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -19,7 +19,6 @@ package org.apache.coyote.ajp;
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
@@ -35,12 +34,6 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
     protected Log getLog() { return log; }
 
 
-    @Override
-    protected AbstractEndpoint.Handler<Long> getHandler() {
-        return cHandler;
-    }
-
-
     @Override
     public boolean isAprRequired() {
         // Override since this protocol implementation requires the APR/native
@@ -53,19 +46,12 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
     public AjpAprProtocol() {
         super(new AprEndpoint());
-        cHandler = new AjpConnectionHandler(this);
+        AjpConnectionHandler cHandler = new AjpConnectionHandler(this);
+        setHandler(cHandler);
         ((AprEndpoint) getEndpoint()).setHandler(cHandler);
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * Connection handler for AJP.
-     */
-    private final AjpConnectionHandler cHandler;
-
-
     // --------------------------------------------------------- Public Methods
 
     public int getPollTime() { return ((AprEndpoint)getEndpoint()).getPollTime(); }

==================================================
AjpNioProtocol.java
index bea201fc94..1cfa632c9f 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -21,7 +21,6 @@ import javax.net.ssl.SSLEngine;
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
 import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
@@ -40,29 +39,16 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
     protected Log getLog() { return log; }
 
 
-    @Override
-    protected AbstractEndpoint.Handler<Nio2Channel> getHandler() {
-        return cHandler;
-    }
-
-
     // ------------------------------------------------------------ Constructor
 
     public AjpNio2Protocol() {
         super(new Nio2Endpoint());
-        cHandler = new AjpConnectionHandler(this);
+        AjpConnectionHandler cHandler = new AjpConnectionHandler(this);
+        setHandler(cHandler);
         ((Nio2Endpoint) getEndpoint()).setHandler(cHandler);
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * Connection handler for AJP.
-     */
-    private final AjpConnectionHandler cHandler;
-
-
     // ----------------------------------------------------- JMX related methods
 
     @Override

==================================================
Http11AprProtocol.java
index fd53308114..bc08613a92 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -24,7 +24,6 @@ import javax.net.ssl.SSLEngine;
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
@@ -42,29 +41,16 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
     protected Log getLog() { return log; }
 
 
-    @Override
-    protected AbstractEndpoint.Handler<NioChannel> getHandler() {
-        return cHandler;
-    }
-
-
     // ------------------------------------------------------------ Constructor
 
     public AjpNioProtocol() {
         super(new NioEndpoint());
-        cHandler = new AjpConnectionHandler(this);
+        AjpConnectionHandler cHandler = new AjpConnectionHandler(this);
+        setHandler(cHandler);
         ((NioEndpoint) getEndpoint()).setHandler(cHandler);
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * Connection handler for AJP.
-     */
-    private final AjpConnectionHandler cHandler;
-
-
     // ----------------------------------------------------- JMX related methods
 
     @Override

==================================================
Http11Nio2Protocol.java
index 1ab43699b4..04333de583 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -26,7 +26,6 @@ import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeProcessor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint.Poller;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -45,15 +44,16 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
 
     private static final Log log = LogFactory.getLog(Http11AprProtocol.class);
 
-    @Override
-    protected Log getLog() { return log; }
+    public Http11AprProtocol() {
+        super(new AprEndpoint());
+        Http11ConnectionHandler cHandler = new Http11ConnectionHandler(this);
+        setHandler(cHandler);
+        ((AprEndpoint) getEndpoint()).setHandler(cHandler);
+    }
 
 
     @Override
-    protected AbstractEndpoint.Handler<Long> getHandler() {
-        return cHandler;
-    }
-
+    protected Log getLog() { return log; }
 
     @Override
     public boolean isAprRequired() {
@@ -62,15 +62,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         return true;
     }
 
-
-    public Http11AprProtocol() {
-        super(new AprEndpoint());
-        cHandler = new Http11ConnectionHandler(this);
-        ((AprEndpoint) getEndpoint()).setHandler(cHandler);
-    }
-
-    private final Http11ConnectionHandler cHandler;
-
     public boolean getUseSendfile() { return getEndpoint().getUseSendfile(); }
     public void setUseSendfile(boolean useSendfile) { ((AprEndpoint)getEndpoint()).setUseSendfile(useSendfile); }
 

==================================================
Http11NioProtocol.java
index c5ef685692..f8e769ef48 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -28,7 +28,6 @@ import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeProcessor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
 import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
@@ -47,23 +46,18 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
     private static final Log log = LogFactory.getLog(Http11Nio2Protocol.class);
 
 
-    @Override
-    protected Log getLog() { return log; }
-
-
-    @Override
-    protected AbstractEndpoint.Handler<Nio2Channel> getHandler() {
-        return cHandler;
-    }
-
-
     public Http11Nio2Protocol() {
         super(new Nio2Endpoint());
-        cHandler = new Http11ConnectionHandler(this);
+        Http11ConnectionHandler cHandler = new Http11ConnectionHandler(this);
+        setHandler(cHandler);
         ((Nio2Endpoint) getEndpoint()).setHandler(cHandler);
     }
 
 
+    @Override
+    protected Log getLog() { return log; }
+
+
     @Override
     public void start() throws Exception {
         super.start();
@@ -72,9 +66,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         }
     }
 
-    // -------------------- Properties--------------------
-
-    private final Http11ConnectionHandler cHandler;
 
     // -------------------- Pool setup --------------------
 

==================================================
SpdyProxyProtocol.java
index 449283edbd..19d66d3df5 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -29,7 +29,6 @@ import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeProcessor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
@@ -52,23 +51,18 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
     private static final Log log = LogFactory.getLog(Http11NioProtocol.class);
 
 
-    @Override
-    protected Log getLog() { return log; }
-
-
-    @Override
-    protected AbstractEndpoint.Handler<NioChannel> getHandler() {
-        return cHandler;
-    }
-
-
     public Http11NioProtocol() {
         super(new NioEndpoint());
-        cHandler = new Http11ConnectionHandler(this);
+        Http11ConnectionHandler cHandler = new Http11ConnectionHandler(this);
+        setHandler(cHandler);
         ((NioEndpoint) getEndpoint()).setHandler(cHandler);
     }
 
 
+    @Override
+    protected Log getLog() { return log; }
+
+
     @Override
     public void start() throws Exception {
         super.start();
@@ -77,9 +71,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         }
     }
 
-    // -------------------- Properties--------------------
-
-    private final Http11ConnectionHandler cHandler;
 
     // -------------------- Pool setup --------------------
 

==================================================
