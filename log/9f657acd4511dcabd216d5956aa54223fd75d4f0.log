9f657acd4511dcabd216d5956aa54223fd75d4f0
==================================================
Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=54406.
==================================================
Tim Whittington
==================================================
Sun Jan 13 22:04:31 2013 +0000
==================================================
NioEndpoint.java
Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=54406.

Make NIO connector use the same logic as BIO connector to prune specified ciphers and sslEnableProtocols to supported options.
Fix option pruning to not silently use defaults when no specified options are supported by SSL implementation.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1432751 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLUtil.java
index ecc62b3327..19e717e398 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -261,7 +261,8 @@ public class NioEndpoint extends AbstractEndpoint {
     private SSLContext sslContext = null;
     public SSLContext getSSLContext() { return sslContext;}
     public void setSSLContext(SSLContext c) { sslContext = c;}
-
+    private String[] enabledCiphers;
+    private String[] enabledProtocols;
 
     /**
      * Port in use.
@@ -284,16 +285,7 @@ public class NioEndpoint extends AbstractEndpoint {
 
     @Override
     public String[] getCiphersUsed() {
-        SSLContext sslContext = getSSLContext();
-        if (sslContext != null) {
-            SSLEngine engine = getSSLContext().createSSLEngine();
-            if (getCiphersArray().length > 0) {
-                engine.setEnabledCipherSuites(getCiphersArray());
-            }
-            return engine.getEnabledCipherSuites();
-        } else {
-            return new String[0];
-        }
+        return enabledCiphers;
     }
 
 
@@ -384,6 +376,9 @@ public class NioEndpoint extends AbstractEndpoint {
             if (sessionContext != null) {
                 sslUtil.configureSessionContext(sessionContext);
             }
+            // Determine which cipher suites and protocols to enable
+            enabledCiphers = sslUtil.getEnableableCiphers(sslContext);
+            enabledProtocols = sslUtil.getEnableableProtocols(sslContext);
         }
 
         if (oomParachute>0) reclaimParachute(true);
@@ -589,8 +584,8 @@ public class NioEndpoint extends AbstractEndpoint {
             engine.setWantClientAuth(true);
         }
         engine.setUseClientMode(false);
-        if ( getCiphersArray().length > 0 ) engine.setEnabledCipherSuites(getCiphersArray());
-        if ( getSslEnabledProtocolsArray().length > 0 ) engine.setEnabledProtocols(getSslEnabledProtocolsArray());
+        engine.setEnabledCipherSuites(enabledCiphers);
+        engine.setEnabledProtocols(enabledProtocols);
 
         handler.onCreateSSLEngine(engine);
         return engine;

==================================================
JSSESocketFactory.java
index 064477956f..5fb9eeee33 100644
--- a/java/org/apache/tomcat/util/net/SSLUtil.java
+++ b/java/org/apache/tomcat/util/net/SSLUtil.java
@@ -30,4 +30,33 @@ public interface SSLUtil {
     public TrustManager[] getTrustManagers() throws Exception;
 
     public void configureSessionContext(SSLSessionContext sslSessionContext);
+
+    /**
+     * Determines the SSL cipher suites that can be enabled, based on the
+     * configuration of the endpoint and the ciphers supported by the SSL
+     * implementation.
+     *
+     * @param context An initialized context to obtain the supported ciphers from.
+     *
+     * @return Array of SSL cipher suites that may be enabled (which may be
+     *         empty if none of the specified ciphers are supported), or
+     *         the defaults for the underlying SSL implementation if 
+     *         the endpoint configuration does not specify any ciphers.
+     */
+    public String[] getEnableableCiphers(SSLContext context);
+	
+    /**
+     * Determines the SSL protocol variants that can be enabled, based on the
+     * configuration of the endpoint and the ciphers supported by the SSL
+     * implementation.
+     *
+     * @param context An initialized context to obtain the supported protocols from.
+     *
+     * @return Array of SSL protocol variants that may be enabled (which may be
+     *         empty if none of the specified protocols are supported), or
+     *         the defaults for the underlying SSL implementation if 
+     *         the endpoint configuration does not specify any protocols.
+     */
+    public String[] getEnableableProtocols(SSLContext context);
+
 }

==================================================
