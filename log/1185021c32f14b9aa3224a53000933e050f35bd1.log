1185021c32f14b9aa3224a53000933e050f35bd1
==================================================
getPeerCertificateChain(boolean) was always called with false so simplify.
==================================================
Mark Thomas
==================================================
Thu Jan 29 21:01:07 2015 +0000
==================================================
AbstractHttp11Processor.java
getPeerCertificateChain(boolean) was always called with false so simplify.
Remove other unused code (now BIO has been removed) from JSSESupport.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655859 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Nio2Processor.java
index 531d0736df..5e403b93e6 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -958,7 +958,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
                         request.setAttribute
                             (SSLSupport.CIPHER_SUITE_KEY, sslO);
                     }
-                    sslO = sslSupport.getPeerCertificateChain(false);
+                    sslO = sslSupport.getPeerCertificateChain();
                     if (sslO != null) {
                         request.setAttribute
                             (SSLSupport.CERTIFICATE_KEY, sslO);

==================================================
Http11NioProcessor.java
index fe4e749d61..2c7dcdc160 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -92,9 +92,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
                 }
 
                 try {
-                    // use force=false since re-negotiation is handled above
-                    // (and it is a NO-OP for NIO anyway)
-                    Object sslO = sslSupport.getPeerCertificateChain(false);
+                    Object sslO = sslSupport.getPeerCertificateChain();
                     if( sslO != null) {
                         request.setAttribute
                             (SSLSupport.CERTIFICATE_KEY, sslO);

==================================================
AprSSLSupport.java
index 30f8c767f7..d213aee66e 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -94,9 +94,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 }
 
                 try {
-                    // use force=false since re-negotiation is handled above
-                    // (and it is a NO-OP for NIO anyway)
-                    Object sslO = sslSupport.getPeerCertificateChain(false);
+                    Object sslO = sslSupport.getPeerCertificateChain();
                     if( sslO != null) {
                         request.setAttribute
                             (SSLSupport.CERTIFICATE_KEY, sslO);

==================================================
SSLSupport.java
index d38743a830..c3e11bf059 100644
--- a/java/org/apache/tomcat/util/net/AprSSLSupport.java
+++ b/java/org/apache/tomcat/util/net/AprSSLSupport.java
@@ -57,7 +57,7 @@ public class AprSSLSupport implements SSLSupport {
 
 
     @Override
-    public X509Certificate[] getPeerCertificateChain(boolean force) throws IOException {
+    public X509Certificate[] getPeerCertificateChain() throws IOException {
         long socketRef = socketWrapper.getSocket().longValue();
         if (socketRef == 0) {
             return null;

==================================================
JSSESupport.java
index 593faff310..4303c7a372 100644
--- a/java/org/apache/tomcat/util/net/SSLSupport.java
+++ b/java/org/apache/tomcat/util/net/SSLSupport.java
@@ -81,12 +81,8 @@ public interface SSLSupport {
 
     /**
      * The client certificate chain (if any).
-     *
-     * @param force If <code>true</code>, then re-negotiate the connection and
-     *              request a client certificate if a client certificate has not
-     *              already been requested.
      */
-    public X509Certificate[] getPeerCertificateChain(boolean force) throws IOException;
+    public X509Certificate[] getPeerCertificateChain() throws IOException;
 
     /**
      * Get the keysize.

==================================================
