a23c5788012712609c760a77f9cebfc45aaa29d9
==================================================
Complete fix for BZ 65262. Encoders and decoders now use InstanceManager
==================================================
Mark Thomas
==================================================
Wed May 5 15:14:30 2021 +0100
==================================================
WsRemoteEndpointImplBase.java
index 3ee86ae6b0..382cc04039 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -92,6 +92,7 @@ wsRemoteEndpoint.closed=Message will not be sent because the WebSocket session h
 wsRemoteEndpoint.closedDuringMessage=The remainder of the message will not be sent because the WebSocket session has been closed
 wsRemoteEndpoint.closedOutputStream=This method may not be called as the OutputStream has been closed
 wsRemoteEndpoint.closedWriter=This method may not be called as the Writer has been closed
+wsRemoteEndpoint.encoderDestoryFailed=Failed to destroy the encoder of type [{0}]
 wsRemoteEndpoint.flushOnCloseFailed=Batched messages still enabled after session has been closed. Unable to flush remaining batched message.
 wsRemoteEndpoint.invalidEncoder=The specified encoder of type [{0}] could not be instantiated
 wsRemoteEndpoint.noEncoder=No encoder specified for object of class [{0}]

==================================================
WsServerContainer.java
index aaeebd85a9..cbc1a72d24 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.websocket;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Writer;
+import java.lang.reflect.InvocationTargetException;
 import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
@@ -33,6 +34,8 @@ import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import javax.naming.NamingException;
+
 import jakarta.websocket.CloseReason;
 import jakarta.websocket.CloseReason.CloseCodes;
 import jakarta.websocket.DeploymentException;
@@ -45,6 +48,7 @@ import jakarta.websocket.SendResult;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.Utf8Encoder;
 import org.apache.tomcat.util.res.StringManager;
@@ -704,10 +708,15 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         for (Class<? extends Encoder> encoderClazz :
                 endpointConfig.getEncoders()) {
             Encoder instance;
+            InstanceManager instanceManager = wsSession.getInstanceManager();
             try {
-                instance = encoderClazz.getConstructor().newInstance();
+                if (instanceManager == null) {
+                    instance = encoderClazz.getConstructor().newInstance();
+                } else {
+                    instance = (Encoder) instanceManager.newInstance(encoderClazz);
+                }
                 instance.init(endpointConfig);
-            } catch (ReflectiveOperationException e) {
+            } catch (ReflectiveOperationException | NamingException e) {
                 throw new DeploymentException(
                         sm.getString("wsRemoteEndpoint.invalidEncoder",
                                 encoderClazz.getName()), e);
@@ -730,8 +739,16 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
 
 
     public final void close() {
+        InstanceManager instanceManager = wsSession.getInstanceManager();
         for (EncoderEntry entry : encoderEntries) {
             entry.getEncoder().destroy();
+            if (instanceManager != null) {
+                try {
+                    instanceManager.destroyInstance(entry);
+                } catch (IllegalAccessException | InvocationTargetException e) {
+                    log.warn(sm.getString("wsRemoteEndpoint.encoderDestoryFailed", encoder.getClass()), e);
+                }
+            }
         }
         // The transformation handles both input and output. It only needs to be
         // closed once so it is closed here on the output side.

==================================================
