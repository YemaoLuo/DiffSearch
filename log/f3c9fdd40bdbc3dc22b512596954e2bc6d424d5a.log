f3c9fdd40bdbc3dc22b512596954e2bc6d424d5a
==================================================
Additional clean-up after enhanced for loop changes
==================================================
Mark Thomas
==================================================
Fri May 1 23:13:26 2020 +0100
==================================================
Util.java
Additional clean-up after enhanced for loop changes


==================================================
ImplicitObjectELResolver.java
index 352b716b59..d29fb20ba5 100644
--- a/java/jakarta/el/Util.java
+++ b/java/jakarta/el/Util.java
@@ -548,11 +548,11 @@ class Util {
                         (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {
             return m;
         }
-        Class<?>[] inf = type.getInterfaces();
+        Class<?>[] interfaces = type.getInterfaces();
         Method mp = null;
-        for (Class<?> aClass : inf) {
+        for (Class<?> iface : interfaces) {
             try {
-                mp = aClass.getMethod(m.getName(), m.getParameterTypes());
+                mp = iface.getMethod(m.getName(), m.getParameterTypes());
                 mp = getMethod(mp.getDeclaringClass(), base, mp);
                 if (mp != null) {
                     return mp;

==================================================
SimpleTagSupport.java
index 46eb70348f..8ebd74db00 100644
--- a/java/jakarta/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/jakarta/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -254,12 +254,11 @@ public class ImplicitObjectELResolver extends ELResolver {
                 this.cookie = new ScopeMap<Cookie>() {
                     @Override
                     protected Enumeration<String> getAttributeNames() {
-                        Cookie[] c = ((HttpServletRequest) page.getRequest())
-                                .getCookies();
-                        if (c != null) {
+                        Cookie[] cookies = ((HttpServletRequest) page.getRequest()).getCookies();
+                        if (cookies != null) {
                             Vector<String> v = new Vector<>();
-                            for (Cookie value : c) {
-                                v.add(value.getName());
+                            for (Cookie cookie : cookies) {
+                                v.add(cookie.getName());
                             }
                             return v.elements();
                         }
@@ -268,12 +267,11 @@ public class ImplicitObjectELResolver extends ELResolver {
 
                     @Override
                     protected Cookie getAttribute(String name) {
-                        Cookie[] c = ((HttpServletRequest) page.getRequest())
-                                .getCookies();
-                        if (c != null) {
-                            for (Cookie value : c) {
-                                if (name.equals(value.getName())) {
-                                    return value;
+                        Cookie[] cookies = ((HttpServletRequest) page.getRequest()).getCookies();
+                        if (cookies != null) {
+                            for (Cookie cookie : cookies) {
+                                if (name.equals(cookie.getName())) {
+                                    return cookie;
                                 }
                             }
                         }

==================================================
TagAttributeInfo.java
index 8e5681d0d9..a9b6f3550d 100644
--- a/java/jakarta/servlet/jsp/tagext/SimpleTagSupport.java
+++ b/java/jakarta/servlet/jsp/tagext/SimpleTagSupport.java
@@ -193,8 +193,7 @@ public class SimpleTagSupport implements SimpleTag {
             JspTag parent = null;
             if( from instanceof SimpleTag ) {
                 parent = ((SimpleTag)from).getParent();
-            }
-            else if( from instanceof Tag ) {
+            } else if( from instanceof Tag ) {
                 parent = ((Tag)from).getParent();
             }
             if (parent == null) {

==================================================
Request.java
index fe8e24532f..bbd828079b 100644
--- a/java/jakarta/servlet/jsp/tagext/TagAttributeInfo.java
+++ b/java/jakarta/servlet/jsp/tagext/TagAttributeInfo.java
@@ -167,12 +167,12 @@ public class TagAttributeInfo {
      * Convenience static method that goes through an array of TagAttributeInfo
      * objects and looks for "id".
      *
-     * @param a
+     * @param tagAttributeInfos
      *            An array of TagAttributeInfo
      * @return The TagAttributeInfo reference with name "id"
      */
-    public static TagAttributeInfo getIdAttribute(TagAttributeInfo a[]) {
-        for (TagAttributeInfo tagAttributeInfo : a) {
+    public static TagAttributeInfo getIdAttribute(TagAttributeInfo[] tagAttributeInfos) {
+        for (TagAttributeInfo tagAttributeInfo : tagAttributeInfos) {
             if (tagAttributeInfo.getName().equals(ID)) {
                 return tagAttributeInfo;
             }

==================================================
ApplicationFilterFactory.java
index 58cc69c000..e4e31be571 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1563,8 +1563,7 @@ public class Request implements HttpServletRequest {
             if (!(o instanceof ServletRequestAttributeListener)) {
                 continue;
             }
-            ServletRequestAttributeListener listener =
-                    (ServletRequestAttributeListener) o;
+            ServletRequestAttributeListener listener = (ServletRequestAttributeListener) o;
             try {
                 if (replaced) {
                     listener.attributeReplaced(event);
@@ -1600,8 +1599,7 @@ public class Request implements HttpServletRequest {
             if (!(o instanceof ServletRequestAttributeListener)) {
                 continue;
             }
-            ServletRequestAttributeListener listener =
-                    (ServletRequestAttributeListener) o;
+            ServletRequestAttributeListener listener = (ServletRequestAttributeListener) o;
             try {
                 listener.attributeRemoved(event);
             } catch (Throwable t) {

==================================================
StandardContext.java
index da5bc09075..7883213b06 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -101,14 +101,14 @@ public final class ApplicationFilterFactory {
         String servletName = wrapper.getName();
 
         // Add the relevant path-mapped filters to this filter chain
-        for (FilterMap map : filterMaps) {
-            if (!matchDispatcher(map, dispatcher)) {
+        for (FilterMap filterMap : filterMaps) {
+            if (!matchDispatcher(filterMap, dispatcher)) {
                 continue;
             }
-            if (!matchFiltersURL(map, requestPath))
+            if (!matchFiltersURL(filterMap, requestPath))
                 continue;
             ApplicationFilterConfig filterConfig = (ApplicationFilterConfig)
-                    context.findFilterConfig(map.getFilterName());
+                    context.findFilterConfig(filterMap.getFilterName());
             if (filterConfig == null) {
                 // FIXME - log configuration problem
                 continue;

==================================================
ReplicatedContext.java
index 9539020206..8d49891d2d 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -4623,10 +4623,10 @@ public class StandardContext extends ContainerBase
             tldEvent = new ServletContextEvent(noPluggabilityServletContext);
         }
         for (Object instance : instances) {
-            if (!(instance instanceof ServletContextListener))
+            if (!(instance instanceof ServletContextListener)) {
                 continue;
-            ServletContextListener listener =
-                    (ServletContextListener) instance;
+            }
+            ServletContextListener listener = (ServletContextListener) instance;
             try {
                 fireContainerEvent("beforeContextInitialized", listener);
                 if (noPluggabilityListeners.contains(listener)) {
@@ -4638,9 +4638,8 @@ public class StandardContext extends ContainerBase
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 fireContainerEvent("afterContextInitialized", listener);
-                getLogger().error
-                        (sm.getString("standardContext.listenerStart",
-                                instance.getClass().getName()), t);
+                getLogger().error(sm.getString("standardContext.listenerStart",
+                        instance.getClass().getName()), t);
                 ok = false;
             }
         }
@@ -4803,8 +4802,9 @@ public class StandardContext extends ContainerBase
         for (Container child : children) {
             Wrapper wrapper = (Wrapper) child;
             int loadOnStartup = wrapper.getLoadOnStartup();
-            if (loadOnStartup < 0)
+            if (loadOnStartup < 0) {
                 continue;
+            }
             Integer key = Integer.valueOf(loadOnStartup);
             ArrayList<Wrapper> list = map.get(key);
             if (list == null) {
@@ -5842,12 +5842,13 @@ public class StandardContext extends ContainerBase
                     new ServletRequestEvent(getServletContext(), request);
 
             for (Object instance : instances) {
-                if (instance == null)
+                if (instance == null) {
                     continue;
-                if (!(instance instanceof ServletRequestListener))
+                }
+                if (!(instance instanceof ServletRequestListener)) {
                     continue;
-                ServletRequestListener listener =
-                        (ServletRequestListener) instance;
+                }
+                ServletRequestListener listener = (ServletRequestListener) instance;
 
                 try {
                     listener.requestInitialized(event);

==================================================
WebappClassLoaderBase.java
index 6030595bc7..c4bb7597aa 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -195,21 +195,25 @@ public class ReplicatedContext extends StandardContext implements MapOwner {
     }
 
     protected static class MultiEnumeration<T> implements Enumeration<T> {
-        private final Enumeration<T>[] e;
-        public MultiEnumeration(Enumeration<T>[] lists) {
-            e = lists;
+        private final Enumeration<T>[] enumerations;
+        public MultiEnumeration(Enumeration<T>[] enumerations) {
+            this.enumerations = enumerations;
         }
         @Override
         public boolean hasMoreElements() {
-            for (Enumeration<T> tEnumeration : e) {
-                if (tEnumeration.hasMoreElements()) return true;
+            for (Enumeration<T> enumeration : enumerations) {
+                if (enumeration.hasMoreElements()) {
+                    return true;
+                }
             }
             return false;
         }
         @Override
         public T nextElement() {
-            for (Enumeration<T> tEnumeration : e) {
-                if (tEnumeration.hasMoreElements()) return tEnumeration.nextElement();
+            for (Enumeration<T> enumeration : enumerations) {
+                if (enumeration.hasMoreElements()) {
+                    return enumeration.nextElement();
+                }
             }
             return null;
 
@@ -220,6 +224,4 @@ public class ReplicatedContext extends StandardContext implements MapOwner {
     public void objectMadePrimary(Object key, Object value) {
         //noop
     }
-
-
 }
\ No newline at end of file

==================================================
HTMLHostManagerServlet.java
index 42dad40699..ddb0f7076a 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -2047,8 +2047,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                                 log.error(sm.getString(
                                         "webappClassLoader.checkThreadLocalsForLeaks",
                                         args));
-                            }
-                            else if (value == null) {
+                            } else if (value == null) {
                                 if (log.isDebugEnabled()) {
                                     log.debug(sm.getString(
                                             "webappClassLoader.checkThreadLocalsForLeaksNull",

==================================================
RealmBase.java
index 1ff22e01d3..6df9516f04 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -23,8 +23,9 @@ import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.net.URLEncoder;
 import java.text.MessageFormat;
-import java.util.Map;
-import java.util.TreeMap;
+import java.util.Arrays;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
@@ -311,29 +312,22 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         writer.print(MessageFormat.format(HOSTS_HEADER_SECTION, args));
 
         // Hosts Row Section
-        // Create sorted map of host names.
+        // Create sorted set of host names.
         Container[] children = engine.findChildren();
         String hostNames[] = new String[children.length];
-        for (int i = 0; i < children.length; i++)
+        for (int i = 0; i < children.length; i++) {
             hostNames[i] = children[i].getName();
+        }
 
-        TreeMap<String,String> sortedHostNamesMap = new TreeMap<>();
+        SortedSet<String> sortedHostNames = new TreeSet<>();
+        sortedHostNames.addAll(Arrays.asList(hostNames));
 
-        for (String displayPath : hostNames) {
-            sortedHostNamesMap.put(displayPath, displayPath);
-        }
+        String hostsStart = smClient.getString("htmlHostManagerServlet.hostsStart");
+        String hostsStop = smClient.getString("htmlHostManagerServlet.hostsStop");
+        String hostsRemove = smClient.getString("htmlHostManagerServlet.hostsRemove");
+        String hostThis = smClient.getString("htmlHostManagerServlet.hostThis");
 
-        String hostsStart =
-            smClient.getString("htmlHostManagerServlet.hostsStart");
-        String hostsStop =
-            smClient.getString("htmlHostManagerServlet.hostsStop");
-        String hostsRemove =
-            smClient.getString("htmlHostManagerServlet.hostsRemove");
-        String hostThis =
-            smClient.getString("htmlHostManagerServlet.hostThis");
-
-        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {
-            String hostName = entry.getKey();
+        for (String hostName : sortedHostNames) {
             Host host = (Host) engine.findChild(hostName);
 
             if (host != null ) {

==================================================
StandardSession.java
index de02ceea4d..b09bb9027d 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -563,11 +563,11 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         int i;
         boolean found = false;
         for (i = 0; i < constraints.length; i++) {
-            SecurityCollection [] collection = constraints[i].findCollections();
+            SecurityCollection[] collections = constraints[i].findCollections();
 
             // If collection is null, continue to avoid an NPE
             // See Bugzilla 30624
-            if ( collection == null) {
+            if (collections == null) {
                 continue;
             }
 
@@ -577,7 +577,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                     constraints[i].included(uri, method));
             }
 
-            for (SecurityCollection securityCollection : collection) {
+            for (SecurityCollection securityCollection : collections) {
                 String[] patterns = securityCollection.findPatterns();
 
                 // If patterns is null, continue to avoid an NPE
@@ -640,12 +640,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                         if (pattern.length() == 2) {
                             matched = true;
                             length = pattern.length();
-                        }
-                        else if (pattern.regionMatches(0, uri, 0,
-                                pattern.length() - 1) ||
+                        } else if (pattern.regionMatches(0, uri, 0, pattern.length() - 1) ||
                                 (pattern.length() - 2 == uri.length() &&
-                                        pattern.regionMatches(0, uri, 0,
-                                                pattern.length() - 2))) {
+                                        pattern.regionMatches(0, uri, 0, pattern.length() - 2))) {
                             matched = true;
                             length = pattern.length();
                         }
@@ -843,29 +840,32 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             else if (roles.length == 0 && !constraint.getAllRoles() &&
                     !constraint.getAuthenticatedUsers()) {
                 if (constraint.getAuthConstraint()) {
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("No roles");
+                    }
                     status = false; // No listed roles means no access at all
                     denyfromall = true;
                     break;
                 }
 
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("Passing all access");
+                }
                 status = true;
-            }
-            else if (principal == null) {
-                if (log.isDebugEnabled())
+            } else if (principal == null) {
+                if (log.isDebugEnabled()) {
                     log.debug("  No user authenticated, cannot grant access");
+                }
             } else {
                 for (String role : roles) {
                     if (hasRole(request.getWrapper(), principal, role)) {
                         status = true;
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug("Role found:  " + role);
-                    }
-                    else if (log.isDebugEnabled())
+                        }
+                    } else if (log.isDebugEnabled()) {
                         log.debug("No role found:  " + role);
+                    }
                 }
             }
         }

==================================================
Catalina.java
index 088a20409d..ace01d9e5e 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -372,23 +372,19 @@ public class StandardSession implements HttpSession, Session, Serializable {
             for (Object o : listeners) {
                 if (!(o instanceof HttpSessionListener))
                     continue;
-                HttpSessionListener listener =
-                        (HttpSessionListener) o;
+                HttpSessionListener listener = (HttpSessionListener) o;
                 try {
-                    context.fireContainerEvent("beforeSessionCreated",
-                            listener);
+                    context.fireContainerEvent("beforeSessionCreated", listener);
                     listener.sessionCreated(event);
                     context.fireContainerEvent("afterSessionCreated", listener);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
                     try {
-                        context.fireContainerEvent("afterSessionCreated",
-                                listener);
+                        context.fireContainerEvent("afterSessionCreated", listener);
                     } catch (Exception e) {
                         // Ignore
                     }
-                    manager.getContext().getLogger().error
-                            (sm.getString("standardSession.sessionEvent"), t);
+                    manager.getContext().getLogger().error (sm.getString("standardSession.sessionEvent"), t);
                 }
             }
         }
@@ -873,12 +869,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 if (event == null)
                     event = new HttpSessionEvent(getSession());
                 try {
-                    ((HttpSessionActivationListener) attribute)
-                            .sessionWillPassivate(event);
+                    ((HttpSessionActivationListener) attribute).sessionWillPassivate(event);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
-                    manager.getContext().getLogger().error
-                            (sm.getString("standardSession.attributeEvent"), t);
+                    manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"), t);
                 }
             }
         }
@@ -909,16 +903,13 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 if (event == null)
                     event = new HttpSessionEvent(getSession());
                 try {
-                    ((HttpSessionActivationListener) attribute)
-                            .sessionDidActivate(event);
+                    ((HttpSessionActivationListener) attribute).sessionDidActivate(event);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
-                    manager.getContext().getLogger().error
-                            (sm.getString("standardSession.attributeEvent"), t);
+                    manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"), t);
                 }
             }
         }
-
     }
 
 
@@ -1685,8 +1676,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             Object value = attributes.get(key);
             if (value == null) {
                 continue;
-            }
-            else if (isAttributeDistributable(key, value) && !exclude(key, value)) {
+            } else if (isAttributeDistributable(key, value) && !exclude(key, value)) {
                 saveNames.add(key);
                 saveValues.add(value);
             } else {
@@ -1838,30 +1828,25 @@ public class StandardSession implements HttpSession, Session, Serializable {
         if (listeners == null)
             return;
         for (Object o : listeners) {
-            if (!(o instanceof HttpSessionAttributeListener))
+            if (!(o instanceof HttpSessionAttributeListener)) {
                 continue;
-            HttpSessionAttributeListener listener =
-                    (HttpSessionAttributeListener) o;
+            }
+            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;
             try {
-                context.fireContainerEvent("beforeSessionAttributeRemoved",
-                        listener);
+                context.fireContainerEvent("beforeSessionAttributeRemoved", listener);
                 if (event == null) {
-                    event = new HttpSessionBindingEvent
-                            (getSession(), name, value);
+                    event = new HttpSessionBindingEvent(getSession(), name, value);
                 }
                 listener.attributeRemoved(event);
-                context.fireContainerEvent("afterSessionAttributeRemoved",
-                        listener);
+                context.fireContainerEvent("afterSessionAttributeRemoved", listener);
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 try {
-                    context.fireContainerEvent("afterSessionAttributeRemoved",
-                            listener);
+                    context.fireContainerEvent("afterSessionAttributeRemoved", listener);
                 } catch (Exception e) {
                     // Ignore
                 }
-                manager.getContext().getLogger().error
-                        (sm.getString("standardSession.attributeEvent"), t);
+                manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"), t);
             }
         }
     }

==================================================
ClassLoaderFactory.java
index bc4f0f23ca..340641cc33 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -260,24 +260,18 @@ public class Catalina {
             if (isConfig) {
                 configFile = arg;
                 isConfig = false;
-            }
-            else if (arg.equals("-config")) {
+            } else if (arg.equals("-config")) {
                 isConfig = true;
-            }
-            else if (arg.equals("-nonaming")) {
+            } else if (arg.equals("-nonaming")) {
                 setUseNaming(false);
-            }
-            else if (arg.equals("-help")) {
+            } else if (arg.equals("-help")) {
                 usage();
                 return false;
-            }
-            else if (arg.equals("start")) {
+            } else if (arg.equals("start")) {
                 // NOOP
-            }
-            else if (arg.equals("configtest")) {
+            } else if (arg.equals("configtest")) {
                 // NOOP
-            }
-            else if (arg.equals("stop")) {
+            } else if (arg.equals("stop")) {
                 // NOOP
             } else {
                 usage();

==================================================
FragmentationInterceptor.java
index 7a35dd6099..2be56139b4 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -85,14 +85,15 @@ public final class ClassLoaderFactory {
 
         // Add unpacked directories
         if (unpacked != null) {
-            for (File value : unpacked) {
-                File file = value;
-                if (!file.canRead())
+            for (File file : unpacked) {
+                if (!file.canRead()) {
                     continue;
+                }
                 file = new File(file.getCanonicalPath() + File.separator);
                 URL url = file.toURI().toURL();
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  Including directory " + url);
+                }
                 set.add(url);
             }
         }
@@ -100,19 +101,22 @@ public final class ClassLoaderFactory {
         // Add packed directory JAR files
         if (packed != null) {
             for (File directory : packed) {
-                if (!directory.isDirectory() || !directory.canRead())
+                if (!directory.isDirectory() || !directory.canRead()) {
                     continue;
+                }
                 String filenames[] = directory.list();
                 if (filenames == null) {
                     continue;
                 }
                 for (String s : filenames) {
                     String filename = s.toLowerCase(Locale.ENGLISH);
-                    if (!filename.endsWith(".jar"))
+                    if (!filename.endsWith(".jar")) {
                         continue;
+                    }
                     File file = new File(directory, s);
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Including jar file " + file.getAbsolutePath());
+                    }
                     URL url = file.toURI().toURL();
                     set.add(url);
                 }
@@ -125,10 +129,11 @@ public final class ClassLoaderFactory {
                 new PrivilegedAction<URLClassLoader>() {
                     @Override
                     public URLClassLoader run() {
-                        if (parent == null)
+                        if (parent == null) {
                             return new URLClassLoader(array);
-                        else
+                        } else {
                             return new URLClassLoader(array, parent);
+                        }
                     }
                 });
     }

==================================================
AbstractStreamProvider.java
index f243514e0d..872f66a7e2 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -208,7 +208,9 @@ public class FragmentationInterceptor extends ChannelInterceptorBase implements
         public ChannelMessage assemble() {
             if ( !complete() ) throw new IllegalStateException(sm.getString("fragmentationInterceptor.fragments.missing"));
             int buffersize = 0;
-            for (XByteBuffer xByteBuffer : frags) buffersize += xByteBuffer.getLength();
+            for (XByteBuffer frag : frags) {
+                buffersize += frag.getLength();
+            }
             XByteBuffer buf = new XByteBuffer(buffersize,false);
             msg.setMessage(buf);
             for (XByteBuffer frag : frags) {

==================================================
NioReplicationTask.java
index 717346ae4a..42b0002b39 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
@@ -30,7 +30,6 @@ import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.Map;
 
 import javax.net.ssl.HttpsURLConnection;

==================================================
ExtensionValidator.java
index bdea6f265c..1b311299df 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -196,24 +196,15 @@ public class NioReplicationTask extends AbstractRxTask {
 
         registerForRead(key,reader);//register to read new data, before we send it off to avoid dead locks
 
-        /**
-         * Use send ack here if you want to ack the request to the remote
-         * server before completing the request
-         * This is considered an asynchronous request
-         */
-        /**
-         * Use send ack here if you want the request to complete on this
-         * server before sending the ack to the remote server
-         * This is considered a synchronized request
-         */
         for (ChannelMessage msg : msgs) {
             /**
              * Use send ack here if you want to ack the request to the remote
              * server before completing the request
              * This is considered an asynchronous request
              */
-            if (ChannelData.sendAckAsync(msg.getOptions()))
+            if (ChannelData.sendAckAsync(msg.getOptions())) {
                 sendAck(key, (WritableByteChannel) channel, Constants.ACK_COMMAND, saddr);
+            }
             try {
                 if (Logs.MESSAGES.isTraceEnabled()) {
                     try {

==================================================
AbstractAccessLogValve.java
index 45c6fd4111..2d0975d1b2 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -345,14 +345,11 @@ public final class ExtensionValidator {
                     continue;
                 }
                 for (File file : files) {
-                    if (file.getName().toLowerCase(Locale.ENGLISH).endsWith(".jar") &&
-                            file.isFile()) {
+                    if (file.getName().toLowerCase(Locale.ENGLISH).endsWith(".jar") && file.isFile()) {
                         try {
                             addSystemResource(file);
                         } catch (IOException e) {
-                            log.error
-                                    (sm.getString
-                                            ("extensionValidator.failload", file), e);
+                            log.error(sm.getString("extensionValidator.failload", file), e);
                         }
                     }
                 }
@@ -360,6 +357,4 @@ public final class ExtensionValidator {
         }
 
     }
-
-
 }

==================================================
ReflectionUtil.java
index d9c653a50f..e5896c24e7 100644
--- a/java/org/apache/catalina/valves/AbstractAccessLogValve.java
+++ b/java/org/apache/catalina/valves/AbstractAccessLogValve.java
@@ -1513,9 +1513,9 @@ public abstract class AbstractAccessLogValve extends ValveBase implements Access
         public void addElement(CharArrayWriter buf, Date date, Request request,
                 Response response, long time) {
             String value = "-";
-            Cookie[] c = request.getCookies();
-            if (c != null) {
-                for (Cookie cookie : c) {
+            Cookie[] cookies = request.getCookies();
+            if (cookies != null) {
+                for (Cookie cookie : cookies) {
                     if (header.equals(cookie.getName())) {
                         value = cookie.getValue();
                         break;

==================================================
JspC.java
index 8aa81fffa2..401adb416b 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -431,11 +431,11 @@ public class ReflectionUtil {
                         (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {
             return m;
         }
-        Class<?>[] inf = type.getInterfaces();
+        Class<?>[] interfaces = type.getInterfaces();
         Method mp = null;
-        for (Class<?> aClass : inf) {
+        for (Class<?> iface : interfaces) {
             try {
-                mp = aClass.getMethod(m.getName(), m.getParameterTypes());
+                mp = iface.getMethod(m.getName(), m.getParameterTypes());
                 mp = getMethod(mp.getDeclaringClass(), base, mp);
                 if (mp != null) {
                     return mp;

==================================================
Generator.java
index 1d97ce56cc..f5fce3f6cb 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -1722,13 +1722,13 @@ public class JspC extends Task implements Options {
                 // therefore we have permission to freak out
                 throw new RuntimeException(ioe.toString());
             }
-            File lib = new File(webappBase, "/WEB-INF/lib");
-            if (lib.exists() && lib.isDirectory()) {
-                String[] libs = lib.list();
+            File webinfLib = new File(webappBase, "/WEB-INF/lib");
+            if (webinfLib.exists() && webinfLib.isDirectory()) {
+                String[] libs = webinfLib.list();
                 if (libs != null) {
-                    for (String s : libs) {
-                        if (s.length() < 5) continue;
-                        String ext = s.substring(s.length() - 4);
+                    for (String lib : libs) {
+                        if (lib.length() < 5) continue;
+                        String ext = lib.substring(lib.length() - 4);
                         if (!".jar".equalsIgnoreCase(ext)) {
                             if (".tld".equalsIgnoreCase(ext)) {
                                 log.warn(Localizer.getMessage("jspc.warning.tldInWebInfLib"));
@@ -1736,9 +1736,8 @@ public class JspC extends Task implements Options {
                             continue;
                         }
                         try {
-                            File libFile = new File(lib, s);
-                            classPath = classPath + File.pathSeparator
-                                    + libFile.getAbsolutePath();
+                            File libFile = new File(webinfLib, lib);
+                            classPath = classPath + File.pathSeparator + libFile.getAbsolutePath();
                             urls.add(libFile.getAbsoluteFile().toURI().toURL());
                         } catch (IOException ioe) {
                             // failing a toCanonicalPath on a file that

==================================================
JspUtil.java
index 867f40462c..a70d5d5f8d 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -2726,8 +2726,7 @@ class Generator {
                             if (varName == null) {
                                 varName = n.getTagData().getAttributeString(
                                         tagVarInfo.getNameFromAttribute());
-                            }
-                            else if (tagVarInfo.getNameFromAttribute() != null) {
+                            } else if (tagVarInfo.getNameFromAttribute() != null) {
                                 // alias
                                 continue;
                             }
@@ -2799,8 +2798,7 @@ class Generator {
                     if (varName == null) {
                         varName = n.getTagData().getAttributeString(
                                 tagVarInfo.getNameFromAttribute());
-                    }
-                    else if (tagVarInfo.getNameFromAttribute() != null) {
+                    } else if (tagVarInfo.getNameFromAttribute() != null) {
                         // alias
                         continue;
                     }
@@ -2870,8 +2868,7 @@ class Generator {
                     if (varName == null) {
                         varName = n.getTagData().getAttributeString(
                                 tagVarInfo.getNameFromAttribute());
-                    }
-                    else if (tagVarInfo.getNameFromAttribute() != null) {
+                    } else if (tagVarInfo.getNameFromAttribute() != null) {
                         // alias
                         continue;
                     }
@@ -2924,8 +2921,7 @@ class Generator {
                         if (name == null) {
                             name = n.getTagData().getAttributeString(
                                     tagVarInfo.getNameFromAttribute());
-                        }
-                        else if (tagVarInfo.getNameFromAttribute() != null) {
+                        } else if (tagVarInfo.getNameFromAttribute() != null) {
                             // alias
                             continue;
                         }

==================================================
JspCServletContext.java
index 1ca9d4603b..6570983593 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -167,16 +167,16 @@ public class JspUtil {
          */
         String missingAttribute = null;
 
-        for (ValidAttribute value : validAttributes) {
+        for (ValidAttribute validAttribute : validAttributes) {
             int attrPos;
-            if (value.mandatory) {
-                attrPos = temp.indexOf(value.name);
+            if (validAttribute.mandatory) {
+                attrPos = temp.indexOf(validAttribute.name);
                 if (attrPos != -1) {
                     temp.remove(attrPos);
                     valid = true;
                 } else {
                     valid = false;
-                    missingAttribute = value.name;
+                    missingAttribute = validAttribute.name;
                     break;
                 }
             }

==================================================
ClassLoaderLogManager.java
index a4c50ebc00..9d6bf59cd2 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -449,8 +449,7 @@ public class JspCServletContext implements ServletContext {
                         File testFile = new File(basePath + File.separator + theFile);
                         if (testFile.isFile()) {
                             thePaths.add(path + theFile);
-                        }
-                        else if (testFile.isDirectory()) {
+                        } else if (testFile.isDirectory()) {
                             thePaths.add(path + theFile + "/");
                         }
                     }

==================================================
DelegatingConnection.java
index 26db2193bf..a04285c9f0 100644
--- a/java/org/apache/juli/ClassLoaderLogManager.java
+++ b/java/org/apache/juli/ClassLoaderLogManager.java
@@ -30,7 +30,6 @@ import java.security.PrivilegedAction;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Properties;
 import java.util.StringTokenizer;

==================================================
InstanceKeyDataSourceFactory.java
index dcffecc54f..c215d03c4d 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
@@ -36,7 +36,6 @@ import java.sql.Statement;
 import java.sql.Struct;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -627,8 +626,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace i
                     } catch (Exception e) {
                         thrownList.add(e);
                     }
-                }
-                else if (trace instanceof ResultSet) {
+                } else if (trace instanceof ResultSet) {
                     // DBCP-265: Need to close the result sets that are
                     // generated via DatabaseMetaData
                     try {

==================================================
KeyedObjectPool.java
index cf68e28a8c..0e2c1ebe5c 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSourceFactory.java
@@ -21,7 +21,6 @@ import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.util.ArrayList;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;

==================================================
PoolUtils.java
index 298e5c6347..7461d9030b 100644
--- a/java/org/apache/tomcat/dbcp/pool2/KeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/KeyedObjectPool.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.dbcp.pool2;
 
 import java.io.Closeable;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.NoSuchElementException;
 
 /**

==================================================
GenericObjectPool.java
index 7ea099e839..453444db5c 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
@@ -19,7 +19,6 @@ package org.apache.tomcat.dbcp.pool2;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Timer;

==================================================
IntrospectionUtils.java
index 13a4075266..a5f00345b3 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.dbcp.pool2.impl;
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;

==================================================
ByteChunk.java
index 49e8303d47..01f34f4fc1 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -92,8 +92,7 @@ public final class IntrospectionUtils {
                             ok = false;
                         }
                         // Try a setFoo ( long )
-                    }
-                    else if ("java.lang.Long".equals(paramType.getName())
+                    } else if ("java.lang.Long".equals(paramType.getName())
                             || "long".equals(paramType.getName())) {
                         try {
                             params[0] = Long.valueOf(value);
@@ -102,14 +101,12 @@ public final class IntrospectionUtils {
                         }
 
                         // Try a setFoo ( boolean )
-                    }
-                    else if ("java.lang.Boolean".equals(paramType.getName())
+                    } else if ("java.lang.Boolean".equals(paramType.getName())
                             || "boolean".equals(paramType.getName())) {
                         params[0] = Boolean.valueOf(value);
 
                         // Try a setFoo ( InetAddress )
-                    }
-                    else if ("java.net.InetAddress".equals(paramType
+                    } else if ("java.net.InetAddress".equals(paramType
                             .getName())) {
                         try {
                             params[0] = InetAddress.getByName(value);

==================================================
BaseModelMBean.java
index 6cc4d476b0..e0d3316f4d 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -803,7 +803,6 @@ public final class ByteChunk extends AbstractChunk {
      *         is not found.
      */
     public static int findBytes(byte bytes[], int start, int end, byte b[]) {
-        int blen = b.length;
         int offset = start;
         while (offset < end) {
             for (byte value : b) {

==================================================
MbeansDescriptorsIntrospectionSource.java
index ed3ef634cc..b0f5f0998f 100644
--- a/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
+++ b/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
@@ -21,7 +21,6 @@ package org.apache.tomcat.util.modeler;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.util.Iterator;
 
 import javax.management.Attribute;
 import javax.management.AttributeChangeNotification;

==================================================
OpenSSLConf.java
index ad00ff79ec..72809e7853 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -225,8 +225,7 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
                 getAttMap.put(name, method);
                 // just a marker, we don't use the value
                 attMap.put(name, method);
-            }
-            else if (name.startsWith("is") && params.length == 0) {
+            } else if (name.startsWith("is") && params.length == 0) {
                 Class<?> ret = method.getReturnType();
                 if (Boolean.TYPE != ret) {
                     if (log.isDebugEnabled()) {
@@ -240,8 +239,7 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
                 // just a marker, we don't use the value
                 attMap.put(name, method);
 
-            }
-            else if (name.startsWith("set") && params.length == 1) {
+            } else if (name.startsWith("set") && params.length == 1) {
                 if (!supportedType(params[0])) {
                     if (log.isDebugEnabled()) {
                         log.debug("Unsupported type " + method + " " + params[0]);

==================================================
AuthenticatorFactory.java
index 9f2d1ca77a..8ab720ccba 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLConf.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLConf.java
@@ -70,8 +70,7 @@ public class OpenSSLConf implements Serializable {
                 log.error(sm.getString("opensslconf.failedCommand", name, value,
                         Integer.toString(rc)));
                 result = false;
-            }
-            else if (log.isDebugEnabled()) {
+            } else if (log.isDebugEnabled()) {
                 log.debug(sm.getString("opensslconf.resultCommand", name, value,
                         Integer.toString(rc)));
             }
@@ -111,8 +110,7 @@ public class OpenSSLConf implements Serializable {
                 log.error(sm.getString("opensslconf.failedCommand", name, value,
                         Integer.toString(rc)));
                 result = false;
-            }
-            else if (log.isDebugEnabled()) {
+            } else if (log.isDebugEnabled()) {
                 log.debug(sm.getString("opensslconf.resultCommand", name, value,
                         Integer.toString(rc)));
             }

==================================================
ChannelCreator.java
index 116ab67f4f..0bc5e6b973 100644
--- a/java/org/apache/tomcat/websocket/AuthenticatorFactory.java
+++ b/java/org/apache/tomcat/websocket/AuthenticatorFactory.java
@@ -16,7 +16,6 @@
  */
 package org.apache.tomcat.websocket;
 
-import java.util.Iterator;
 import java.util.ServiceLoader;
 
 /**

==================================================
TestGroupChannelMemberArrival.java
index b27b18bdb9..5b318ba4ce 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -17,7 +17,6 @@
 package org.apache.catalina.tribes.demos;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.Properties;
 
 import org.apache.catalina.tribes.Channel;

==================================================
TestDomainFilterInterceptor.java
index fb7c96055d..8d8dba1073 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelMemberArrival.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelMemberArrival.java
@@ -64,8 +64,8 @@ public class TestGroupChannelMemberArrival {
             };
             threads[i] = t;
         }
-        for (Thread value : threads) {
-            value.start();
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();

==================================================
TestOrderInterceptor.java
index e03ddec771..bd2be3cd3e 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
@@ -73,7 +73,7 @@ public class TestDomainFilterInterceptor {
             };
             threads[i] = t;
         }
-        for (Thread value : threads) value.start();
+        for (Thread thread : threads) thread.start();
         for (Thread thread : threads) thread.join();
         System.out.println("All channels started.");
         for (int i=listeners.length-1; i>=0; i-- ) {

==================================================
TestDataIntegrity.java
index c2e76a1f05..bfd707b6df 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
@@ -118,8 +118,8 @@ public class TestOrderInterceptor {
         for (int i=0;i<threads.length;i++) {
             threads[i] = new Thread(run);
         }
-        for (Thread item : threads) {
-            item.start();
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();

==================================================
TestMulticastPackages.java
index 218eca231a..f5ee0d3647 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -77,8 +77,8 @@ public class TestDataIntegrity {
                 }
             };
         }
-        for (Thread value : threads) {
-            value.start();
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();
@@ -92,33 +92,33 @@ public class TestDataIntegrity {
 
     @Test
     public void testDataSendASYNCM() throws Exception {
-            System.err.println("Starting ASYNC MULTI THREAD");
-            Thread[] threads = new Thread[threadCount];
-            for (int x=0; x<threads.length; x++ ) {
-                threads[x] = new Thread() {
-                    @Override
-                    public void run() {
-                        try {
-                            long start = System.currentTimeMillis();
-                            for (int i = 0; i < msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
-                            System.out.println("Thread["+this.getName()+"] sent "+msgCount+" messages in "+(System.currentTimeMillis()-start)+" ms.");
-                        }catch ( Exception x ) {
-                            x.printStackTrace();
-                        }
+        System.err.println("Starting ASYNC MULTI THREAD");
+        Thread[] threads = new Thread[threadCount];
+        for (int x=0; x<threads.length; x++ ) {
+            threads[x] = new Thread() {
+                @Override
+                public void run() {
+                    try {
+                        long start = System.currentTimeMillis();
+                        for (int i = 0; i < msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
+                        System.out.println("Thread["+this.getName()+"] sent "+msgCount+" messages in "+(System.currentTimeMillis()-start)+" ms.");
+                    }catch ( Exception x ) {
+                        x.printStackTrace();
                     }
-                };
-            }
-        for (Thread value : threads) {
-            value.start();
+                }
+            };
+        }
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();
         }
-            //sleep for 50 sec, let the other messages in
-            long start = System.currentTimeMillis();
-            while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
-            System.err.println("Finished ASYNC MULTI THREAD ["+listener1.count+"]");
-            Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
+        //sleep for 50 sec, let the other messages in
+        long start = System.currentTimeMillis();
+        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
+        System.err.println("Finished ASYNC MULTI THREAD ["+listener1.count+"]");
+        Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
 
     @Test

==================================================
TestUdpPackages.java
index b4a1018d51..557ea52621 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -130,8 +130,8 @@ public class TestMulticastPackages {
                 }
             };
         }
-        for (Thread value : threads) {
-            value.start();
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();

==================================================
AsyncStockServlet.java
index 990232c4dd..70ba8515b9 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
@@ -122,8 +122,8 @@ public class TestUdpPackages {
                 }
             };
         }
-        for (Thread value : threads) {
-            value.start();
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();
@@ -174,8 +174,8 @@ public class TestUdpPackages {
                 }
             };
         }
-        for (Thread value : threads) {
-            value.start();
+        for (Thread thread : threads) {
+            thread.start();
         }
         for (Thread thread : threads) {
             thread.join();

==================================================
