9640fc401bc6112b22a24a4b8b0c1931d51f61c4
==================================================
Clean up type checking code. Patch provided by Konstantin Kolinko.
==================================================
Mark Emlyn
==================================================
Wed Apr 9 22:29:28 2008 +0000
==================================================
ELArithmetic.java
Clean up type checking code. Patch provided by Konstantin Kolinko.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@646571 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELSupport.java
index cac6283392..404a6c5d25 100644
--- a/java/org/apache/el/lang/ELArithmetic.java
+++ b/java/org/apache/el/lang/ELArithmetic.java
@@ -164,8 +164,6 @@ public abstract class ELArithmetic {
                     || obj1 instanceof Double
                     || obj0 instanceof Float
                     || obj1 instanceof Float
-                    || (obj0 != null && (Double.TYPE == obj0.getClass() || Float.TYPE == obj0.getClass()))
-                    || (obj1 != null && (Double.TYPE == obj1.getClass() || Float.TYPE == obj1.getClass()))
                     || (obj0 instanceof String && ELSupport
                             .isStringFloat((String) obj0)) || (obj1 instanceof String && ELSupport
                     .isStringFloat((String) obj1)));
@@ -362,13 +360,12 @@ public abstract class ELArithmetic {
             return coerce(ZERO);
         }
 
-        Class objType = obj.getClass();
-        if (Character.class.equals(objType) || Character.TYPE == objType) {
+        if (obj instanceof Character) {
             return coerce(new Short((short) ((Character) obj).charValue()));
         }
 
         throw new IllegalArgumentException(MessageFactory.get("error.convert",
-                obj, objType, "Number"));
+                obj, obj.getClass(), "Number"));
     }
 
     protected abstract Number coerce(final String str);

==================================================
AstNegative.java
index cebbd04ada..e076afbf84 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -164,7 +164,7 @@ public class ELSupport {
         if (obj == null || "".equals(obj)) {
             return Boolean.FALSE;
         }
-        if (obj instanceof Boolean || obj.getClass() == Boolean.TYPE) {
+        if (obj instanceof Boolean) {
             return (Boolean) obj;
         }
         if (obj instanceof String) {
@@ -187,7 +187,7 @@ public class ELSupport {
             return new Character((char) ((Number) obj).shortValue());
         }
         Class objType = obj.getClass();
-        if (obj instanceof Character || objType == Character.TYPE) {
+        if (obj instanceof Character) {
             return (Character) obj;
         }
 
@@ -259,14 +259,13 @@ public class ELSupport {
             return coerceToNumber((Number) obj, type);
         }
 
-        Class objType = obj.getClass();
-        if (Character.class.equals(objType) || Character.TYPE == objType) {
+        if (obj instanceof Character) {
             return coerceToNumber(new Short((short) ((Character) obj)
                     .charValue()), type);
         }
 
         throw new IllegalArgumentException(MessageFactory.get("error.convert",
-                obj, objType, type));
+                obj, obj.getClass(), type));
     }
 
     protected final static Number coerceToNumber(final String val,
@@ -402,10 +401,7 @@ public class ELSupport {
         return (obj0 instanceof Double
                 || obj1 instanceof Double
                 || obj0 instanceof Float
-                || obj1 instanceof Float
-                || (obj0 != null && (Double.TYPE == obj0.getClass() || Float.TYPE == obj0
-                        .getClass())) || (obj1 != null && (Double.TYPE == obj1
-                .getClass() || Float.TYPE == obj1.getClass())));
+                || obj1 instanceof Float);
     }
 
     public final static boolean isDoubleStringOp(final Object obj0,
@@ -424,17 +420,7 @@ public class ELSupport {
                 || obj0 instanceof Short
                 || obj1 instanceof Short
                 || obj0 instanceof Byte
-                || obj1 instanceof Byte
-                || (obj0 != null && (Long.TYPE == obj0.getClass()
-                        || Integer.TYPE == obj0.getClass()
-                        || Character.TYPE == obj0.getClass()
-                        || Short.TYPE == obj0.getClass() || Byte.TYPE == obj0
-                        .getClass())) || (obj0 != null && (Long.TYPE == obj0
-                .getClass()
-                || Integer.TYPE == obj0.getClass()
-                || Character.TYPE == obj0.getClass()
-                || Short.TYPE == obj0.getClass() || Byte.TYPE == obj0
-                .getClass())));
+                || obj1 instanceof Byte);
     }
 
     public final static boolean isStringFloat(final String str) {

==================================================
