a0675390023556cce983779025f90286ed0a99ef
==================================================
Implement maxHeaderCount attribute on Connector.
==================================================
Konstantin Kolinko
==================================================
Thu Jun 14 15:26:43 2012 +0000
==================================================
Connector.java
Implement maxHeaderCount attribute on Connector.
It is equivalent of LimitRequestFields directive of Apache HTTPD

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1350295 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index 89015651aa..88ba0f3a53 100644
--- a/java/org/apache/catalina/connector/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/connector/mbeans-descriptors.xml
@@ -77,6 +77,10 @@
           description="The port number on which this connector is listening to requests. If the special value for port of zero is used then this method will report the actual port bound."
                 type="int"/>
 
+    <attribute   name="maxHeaderCount"
+          description="The maximum number of headers that are allowed by the container. 100 by default. A value of less than 0 means no limit."
+                 type="int"/>
+
     <attribute   name="maxKeepAliveRequests"
           description="Maximum number of Keep-Alive requests to honor per connection"
                  type="int"/>

==================================================
AbstractAjpProcessor.java
index 4939c96d1c..e4c538a291 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -237,6 +237,12 @@ public abstract class AbstractProtocol implements ProtocolHandler,
         setConnectionTimeout(timeout);
     }
 
+    public int getMaxHeaderCount() {
+        return endpoint.getMaxHeaderCount();
+    }
+    public void setMaxHeaderCount(int maxHeaderCount) {
+        endpoint.setMaxHeaderCount(maxHeaderCount);
+    }
 
     // ---------------------------------------------------------- Public methods
 

==================================================
AbstractHttp11Processor.java
index 147714893d..fa36258e04 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -647,6 +647,9 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         // Decode headers
         MimeHeaders headers = request.getMimeHeaders();
 
+        // Set this every time in case limit has been changed via JMX
+        headers.setLimit(endpoint.getMaxHeaderCount());
+
         int hCount = requestHeaderMessage.getInt();
         for(int i = 0 ; i < hCount ; i++) {
             String hName = null;

==================================================
SpdyProcessor.java
index bcf99b1f73..481615bdd5 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -932,6 +932,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
                 } else {
                     request.setStartTime(System.currentTimeMillis());
                     keptAlive = true;
+                    // Set this every time in case limit has been changed via JMX
+                    request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());
                     // Currently only NIO will ever return false here
                     if (!getInputBuffer().parseHeaders()) {
                         // We've read part of the request, don't recycle it

==================================================
MimeHeaders.java
index 0da52080b6..38c0dc5b35 100644
--- a/java/org/apache/tomcat/util/http/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/http/LocalStrings.properties
@@ -28,3 +28,5 @@ parameters.fallToDebug=\n Note: further occurrences of Parameter errors will be
 cookies.invalidCookieToken=Cookies: Invalid cookie. Value not a token or quoted value
 cookies.invalidSpecial=Cookies: Unknown Special Cookie
 cookies.fallToDebug=\n Note: further occurrences of Cookie errors will be logged at DEBUG level.
+
+headers.maxCountFail=More than the maximum allowed number of headers ([{0}]) were detected.

==================================================
AbstractEndpoint.java
index c57fa6a123..074cd33a0e 100644
--- a/java/org/apache/tomcat/util/http/MimeHeaders.java
+++ b/java/org/apache/tomcat/util/http/MimeHeaders.java
@@ -21,6 +21,7 @@ import java.io.StringWriter;
 import java.util.Enumeration;
 
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.res.StringManager;
 
 /* XXX XXX XXX Need a major rewrite  !!!!
  */
@@ -95,6 +96,9 @@ public class MimeHeaders {
      */
     public static final int DEFAULT_HEADER_SIZE=8;
 
+    private static final StringManager sm =
+            StringManager.getManager("org.apache.tomcat.util.http");
+
     /**
      * The header fields.
      */
@@ -106,6 +110,11 @@ public class MimeHeaders {
      */
     private int count;
 
+    /**
+     * The limit on the number of header fields.
+     */
+    private int limit = -1;
+
     /**
      * Creates a new MimeHeaders object using a default buffer size.
      */
@@ -113,6 +122,19 @@ public class MimeHeaders {
         // NO-OP
     }
 
+    /**
+     * Set limit on the number of header fields.
+     */
+    public void setLimit(int limit) {
+        this.limit = limit;
+        if (limit > 0 && headers.length > limit && count < limit) {
+            // shrink header list array
+            MimeHeaderField tmp[] = new MimeHeaderField[limit];
+            System.arraycopy(headers, 0, tmp, 0, count);
+            headers = tmp;
+        }
+    }
+
     /**
      * Clears all header fields.
      */
@@ -218,11 +240,19 @@ public class MimeHeaders {
      * field has not had its name or value initialized.
      */
     private MimeHeaderField createHeader() {
+        if (limit > -1 && count >= limit) {
+            throw new IllegalStateException(sm.getString(
+                    "headers.maxCountFail", Integer.valueOf(limit)));
+        }
         MimeHeaderField mh;
         int len = headers.length;
         if (count >= len) {
             // expand header list array
-            MimeHeaderField tmp[] = new MimeHeaderField[count * 2];
+            int newLength = count * 2;
+            if (limit > 0 && newLength > limit) {
+                newLength = limit;
+            }
+            MimeHeaderField tmp[] = new MimeHeaderField[newLength];
             System.arraycopy(headers, 0, tmp, 0, len);
             headers = tmp;
         }

==================================================
