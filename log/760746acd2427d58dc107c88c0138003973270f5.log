760746acd2427d58dc107c88c0138003973270f5
==================================================
Refactoring in preparation for Java 9. Refactor to avoid using some methods that will be deprecated in Java 9 onwards.
==================================================
Mark Thomas
==================================================
Tue Apr 11 21:16:04 2017 +0000
==================================================
ELArithmetic.java
Refactoring in preparation for Java 9. Refactor to avoid using some methods that will be deprecated in Java 9 onwards.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791028 13f79535-47bb-0310-9956-ffa450edef68



==================================================
EncodingDetector.java
index 36a41b65f5..cff8d6992d 100644
--- a/java/org/apache/el/lang/ELArithmetic.java
+++ b/java/org/apache/el/lang/ELArithmetic.java
@@ -19,6 +19,7 @@ package org.apache.el.lang;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.math.RoundingMode;
 
 import org.apache.el.util.MessageFactory;
 
@@ -53,7 +54,7 @@ public abstract class ELArithmetic {
         @Override
         protected Number divide(Number num0, Number num1) {
             return ((BigDecimal) num0).divide((BigDecimal) num1,
-                    BigDecimal.ROUND_HALF_UP);
+                    RoundingMode.HALF_UP);
         }
 
         @Override
@@ -98,7 +99,7 @@ public abstract class ELArithmetic {
 
         @Override
         protected Number divide(Number num0, Number num1) {
-            return (new BigDecimal((BigInteger) num0)).divide(new BigDecimal((BigInteger) num1), BigDecimal.ROUND_HALF_UP);
+            return (new BigDecimal((BigInteger) num0)).divide(new BigDecimal((BigInteger) num1), RoundingMode.HALF_UP);
         }
 
         @Override

==================================================
Diagnostics.java
index 482dc55ba5..34e81c8932 100644
--- a/java/org/apache/jasper/compiler/EncodingDetector.java
+++ b/java/org/apache/jasper/compiler/EncodingDetector.java
@@ -35,7 +35,7 @@ class EncodingDetector {
 
     private static final XMLInputFactory XML_INPUT_FACTORY;
     static {
-        XML_INPUT_FACTORY = XMLInputFactory.newFactory();
+        XML_INPUT_FACTORY = XMLInputFactory.newFactory("javax.xml.stream.XMLInputFactory", null);
     }
 
     private final String encoding;

==================================================
TestELInJsp.java
index 74b3479a0a..31ce11f156 100644
--- a/java/org/apache/tomcat/util/Diagnostics.java
+++ b/java/org/apache/tomcat/util/Diagnostics.java
@@ -45,6 +45,7 @@ import java.lang.management.MemoryPoolMXBean;
 import java.lang.management.MemoryUsage;
 import java.lang.management.MonitorInfo;
 import java.lang.management.OperatingSystemMXBean;
+import java.lang.management.PlatformLoggingMXBean;
 import java.lang.management.RuntimeMXBean;
 import java.lang.management.ThreadInfo;
 import java.lang.management.ThreadMXBean;
@@ -57,8 +58,6 @@ import java.util.Enumeration;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.logging.LogManager;
-import java.util.logging.LoggingMXBean;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -95,8 +94,8 @@ public class Diagnostics {
     // XXX Not sure whether the following MBeans should better
     // be retrieved on demand, i.e. whether they can change
     // dynamically in the MBeanServer.
-    private static final LoggingMXBean loggingMXBean =
-        LogManager.getLoggingMXBean();
+    private static final PlatformLoggingMXBean loggingMXBean =
+        ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class);
     private static final MemoryMXBean memoryMXBean =
         ManagementFactory.getMemoryMXBean();
     private static final List<GarbageCollectorMXBean> garbageCollectorMXBeans =

==================================================
TestJspContextWrapper.java
index 3413e5f04e..ebc59c9015 100644
--- a/test/org/apache/el/TestELInJsp.java
+++ b/test/org/apache/el/TestELInJsp.java
@@ -17,7 +17,7 @@
 package org.apache.el;
 
 import java.io.File;
-import java.math.BigDecimal;
+import java.math.RoundingMode;
 import java.util.Collections;
 
 import javax.servlet.DispatcherType;
@@ -467,7 +467,7 @@ public class TestELInJsp extends TomcatBaseTest {
         // Could hack something with HttpUtils...
         // No obvious static fields for javax.servlet.jsp
         // Wild card (package) import
-        assertEcho(result, "01-" + BigDecimal.ROUND_UP);
+        assertEcho(result, "01-" + RoundingMode.HALF_UP);
         // Class import
         assertEcho(result, "02-" + Collections.EMPTY_LIST.size());
     }

==================================================
