f07426ff92ad75e5d5f8617f5b12b862d2c5b78b
==================================================
Make the disabling of chunked encoding on connection close optional and disable by default since automatically disabling it causes a regression (see this discussion http://tomcat.markmail.org/thread/zvrrtvwme6liefng for the details).
==================================================
Mark Emlyn
==================================================
Thu Oct 30 15:45:21 2014 +0000
==================================================
AbstractHttp11Processor.java
Make the disabling of chunked encoding on connection close optional and disable by default since automatically disabling it causes a regression (see this discussion http://tomcat.markmail.org/thread/zvrrtvwme6liefng for the details).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1635524 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 75efc923f1..1237a49261 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -1478,7 +1478,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             // HTTP 1.1 and we are using keep-alive then we chunk unless we have
             // a Connection: close header
             connectionClosePresent = isConnectionClose(headers);
-            if (entityBody && http11 && keepAlive && !connectionClosePresent) {
+            if (entityBody && http11 && (keepAlive || !endpoint.getDisableChunkingOnClose()) &&
+                    !connectionClosePresent) {
                 getOutputBuffer().addActiveFilter
                     (outputFilters[Constants.CHUNKED_FILTER]);
                 contentDelimitation = true;

==================================================
AbstractEndpoint.java
index 866472e536..ee89416ffa 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -207,6 +207,13 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         endpoint.setMaxKeepAliveRequests(mkar);
     }
 
+    public boolean getDisableChunkingOnClose() {
+        return endpoint.getDisableChunkingOnClose();
+    }
+    public void setDisableChunkingOnClose(boolean disableChunkingOnClose) {
+        endpoint.setDisableChunkingOnClose(disableChunkingOnClose);
+    }
+
     protected NpnHandler<S> npnHandler;
     @SuppressWarnings("unchecked")
     public void setNpnHandler(String impl) {

==================================================
TestAbstractHttp11Processor.java
index 31ce4f08d1..442fd09c92 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -45,6 +45,7 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
  *
  * @author Mladen Turk
  * @author Remy Maucherat
+ * @param <S> The type of socket the endpoint is associated with.
  */
 public abstract class AbstractEndpoint<S> {
 
@@ -422,6 +423,21 @@ public abstract class AbstractEndpoint<S> {
         this.maxKeepAliveRequests = maxKeepAliveRequests;
     }
 
+    /**
+     * Should the option of using chunked transfer encoding be disabled when it
+     * is known that the connection is going to be closed at the end of the
+     * response. Disabling chunking in this case is marginally more efficient
+     * but makes it impossible for the user agent to determine if the whole
+     * response was received or if it was truncated due to an error.
+     */
+    private boolean disableChunkingOnClose = false;
+    public boolean getDisableChunkingOnClose() {
+        return disableChunkingOnClose;
+    }
+    public void setDisableChunkingOnClose(boolean disableChunkingOnClose) {
+        this.disableChunkingOnClose = disableChunkingOnClose;
+    }
+
     /**
      * The maximum number of headers in a request that are allowed.
      * 100 by default. A value of less than 0 means no limit.

==================================================
