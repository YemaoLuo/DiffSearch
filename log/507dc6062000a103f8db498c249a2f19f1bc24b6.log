507dc6062000a103f8db498c249a2f19f1bc24b6
==================================================
Convert the STRICT_QUOTE_ESCAPING system property setting into a per web
==================================================
Mark Thomas
==================================================
Thu Nov 5 13:36:12 2015 +0000
==================================================
EmbeddedServletOptions.java
index 1eb1e8aac1..310561b5d4 100644
--- a/conf/web.xml
+++ b/conf/web.xml
@@ -241,6 +241,14 @@
   <!--                                                                      -->
   <!--   xpoweredBy          Determines whether X-Powered-By response       -->
   <!--                       header is added by generated servlet.  [false] -->
+  <!--                                                                      -->
+  <!--   strictQuoteEscaping When scriptlet expressions are used for        -->
+  <!--                       attribute values, should the rules in JSP.1.6  -->
+  <!--                       for the escaping of quote characters be        -->
+  <!--                       strictly applied? [true]                       -->
+  <!--                       The default can be changed with the            -->
+  <!--                       org.apache.jasper.compiler.Parser.             -->
+  <!--                       STRICT_QUOTE_ESCAPING system property.         -->
 
     <servlet>
         <servlet-name>jsp</servlet-name>

==================================================
JspC.java
index 138b154817..bb0e6dddd5 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -199,6 +199,20 @@ public final class EmbeddedServletOptions implements Options {
      */
     private int jspIdleTimeout = -1;
 
+    /**
+     * System property that controls if the strict quoting rules are applied
+     * when parsing attribute values that use scriptlet expressions (<%=...%>).
+     */
+    private static final boolean STRICT_QUOTE_ESCAPING_DEFAULT= Boolean.parseBoolean(
+            System.getProperty(
+                    "org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING",
+                    "true"));
+    /**
+     * Should JSP.1.6 be applied strictly to attributes defined using scriptlet
+     * expressions?
+     */
+    private boolean strictQuoteEscaping = STRICT_QUOTE_ESCAPING_DEFAULT;
+
     public String getProperty(String name ) {
         return settings.getProperty( name );
     }
@@ -442,6 +456,11 @@ public final class EmbeddedServletOptions implements Options {
         return jspIdleTimeout;
     }
 
+    @Override
+    public boolean getStrictQuoteEscaping() {
+        return strictQuoteEscaping;
+    }
+
     /**
      * Create an EmbeddedServletOptions object using data available from
      * ServletConfig and ServletContext.
@@ -741,6 +760,21 @@ public final class EmbeddedServletOptions implements Options {
             }
         }
 
+        String strictQuoteEscaping = config.getInitParameter("strictQuoteEscaping");
+        if (strictQuoteEscaping != null) {
+            if (strictQuoteEscaping.equalsIgnoreCase("true")) {
+                this.strictQuoteEscaping = true;
+            } else if (strictQuoteEscaping.equalsIgnoreCase("false")) {
+                this.strictQuoteEscaping = false;
+            } else {
+                if (log.isWarnEnabled()) {
+                    log.warn(Localizer.getMessage("jsp.warning.strictQuoteEscaping",
+                            Boolean.toString(STRICT_QUOTE_ESCAPING_DEFAULT)));
+                }
+            }
+        }
+
+
         // Setup the global Tag Libraries location cache for this
         // web-application.
         tldCache = TldCache.getInstance(context);

==================================================
Options.java
index f54e38d4f3..e2e3de777a 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -107,6 +107,15 @@ public class JspC extends Task implements Options {
     // Logger
     private static final Log log = LogFactory.getLog(JspC.class);
 
+    /**
+     * System property that controls if the strict quoting rules are applied
+     * when parsing attribute values that use scriptlet expressions (<%=...%>).
+     */
+    private static final boolean STRICT_QUOTE_ESCAPING_DEFAULT= Boolean.parseBoolean(
+            System.getProperty(
+                    "org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING",
+                    "true"));
+
     protected static final String SWITCH_VERBOSE = "-v";
     protected static final String SWITCH_HELP = "-help";
     protected static final String SWITCH_OUTPUT_DIR = "-d";
@@ -137,6 +146,8 @@ public class JspC extends Task implements Options {
     protected static final String SWITCH_VALIDATE_XML = "-validateXml";
     protected static final String SWITCH_BLOCK_EXTERNAL = "-blockExternal";
     protected static final String SWITCH_NO_BLOCK_EXTERNAL = "-no-blockExternal";
+    protected static final String SWITCH_STRICT_QUOTE_ESCAPING = "-strictQuoteEscaping";
+    protected static final String SWITCH_NO_STRICT_QUOTE_ESCAPING = "-no-strictQuoteEscaping";
     protected static final String SHOW_SUCCESS ="-s";
     protected static final String LIST_ERRORS = "-l";
     protected static final int INC_WEBXML = 10;
@@ -170,6 +181,7 @@ public class JspC extends Task implements Options {
     protected boolean validateTld;
     protected boolean validateXml;
     protected boolean blockExternal = true;
+    protected boolean strictQuoteEscaping = STRICT_QUOTE_ESCAPING_DEFAULT;
     protected boolean xpoweredBy;
     protected boolean mappedFile = false;
     protected boolean poolingEnabled = true;
@@ -893,6 +905,15 @@ public class JspC extends Task implements Options {
         return blockExternal;
     }
 
+    public void setStrictQuoteEscaping( boolean b ) {
+        this.strictQuoteEscaping = b;
+    }
+
+    @Override
+    public boolean getStrictQuoteEscaping() {
+        return strictQuoteEscaping;
+    }
+
     public void setListErrors( boolean b ) {
         listErrors = b;
     }

==================================================
AttributeParser.java
index 7f209c1e01..298fcaabd8 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -231,4 +231,10 @@ public interface Options {
      * If unset or less or equal than 0, no jsps are unloaded.
      */
     public int getJspIdleTimeout();
+
+    /**
+     * @return {@code true} if the quote escaping required by section JSP.1.6 of
+     *         the JSP specification should be applied to scriplet expression.
+     */
+    public boolean getStrictQuoteEscaping();
 }

==================================================
Parser.java
index 41277f1619..fbfa439ee9 100644
--- a/java/org/apache/jasper/compiler/AttributeParser.java
+++ b/java/org/apache/jasper/compiler/AttributeParser.java
@@ -28,12 +28,6 @@ package org.apache.jasper.compiler;
  */
 public class AttributeParser {
 
-    /* System property that controls if the strict quoting rules are applied. */
-    private static final boolean STRICT_QUOTE_ESCAPING = Boolean.parseBoolean(
-            System.getProperty(
-                    "org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING",
-                    "true"));
-
     /**
      * Parses the provided input String as a JSP attribute and returns an
      * unquoted value.
@@ -45,34 +39,13 @@ public class AttributeParser {
      *                      where the JSP attribute is defined.
      * @param isDeferredSyntaxAllowedAsLiteral
      *                      Are deferred expressions treated as literals?
+     * @param strict        Should the rules of JSP.1.6 for escpaing quotes be
+     *                      strictly applied?
      * @return              An unquoted JSP attribute that, if it contains
      *                      expression language can be safely passed to the EL
      *                      processor without fear of ambiguity.
      */
     public static String getUnquoted(String input, char quote,
-            boolean isELIgnored, boolean isDeferredSyntaxAllowedAsLiteral) {
-        return (new AttributeParser(input, quote, isELIgnored,
-                isDeferredSyntaxAllowedAsLiteral,
-                STRICT_QUOTE_ESCAPING)).getUnquoted();
-    }
-
-    /**
-     * Provided solely for unit test purposes and allows per call overriding of
-     * the STRICT_QUOTE_ESCAPING system property.
-     *
-     * @param input         The input.
-     * @param quote         The quote character for the attribute or 0 for
-     *                      scripting expressions.
-     * @param isELIgnored   Is expression language being ignored on the page
-     *                      where the JSP attribute is defined.
-     * @param isDeferredSyntaxAllowedAsLiteral
-     *                      Are deferred expressions treated as literals?
-     * @param strict        The value to use for STRICT_QUOTE_ESCAPING.
-     * @return              An unquoted JSP attribute that, if it contains
-     *                      expression language can be safely passed to the EL
-     *                      processor without fear of ambiguity.
-     */
-    protected static String getUnquoted(String input, char quote,
             boolean isELIgnored, boolean isDeferredSyntaxAllowedAsLiteral,
             boolean strict) {
         return (new AttributeParser(input, quote, isELIgnored,
@@ -92,7 +65,9 @@ public class AttributeParser {
     /* Are deferred expression treated as literals */
     private final boolean isDeferredSyntaxAllowedAsLiteral;
 
-    /* Overrides the STRICT_QUOTE_ESCAPING. Used for Unit tests only. */
+    /* If a quote appears that matches quote, must it always be escaped? See
+     * JSP.1.6.
+     */
     private final boolean strict;
 
     /* The type ($ or #) of expression. Literals have a type of null. */

==================================================
