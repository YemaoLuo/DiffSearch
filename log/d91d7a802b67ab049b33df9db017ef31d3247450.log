d91d7a802b67ab049b33df9db017ef31d3247450
==================================================
Removed more unnecessary parentheses in return statements
==================================================
Emmanuel Bourg
==================================================
Wed May 10 13:13:47 2017 +0000
==================================================
ArrayELResolver.java
Removed more unnecessary parentheses in return statements

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1794718 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ListELResolver.java
index 5bbb2a1f1a..0c3139d400 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -138,7 +138,7 @@ public class ArrayELResolver extends ELResolver {
             return ((Character) property).charValue();
         }
         if (property instanceof Boolean) {
-            return (((Boolean) property).booleanValue() ? 1 : 0);
+            return (Boolean) property ? 1 : 0;
         }
         if (property instanceof String) {
             return Integer.parseInt((String) property);

==================================================
ContainerEvent.java
index 749fdae0db..e59437c250 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -144,7 +144,7 @@ public class ListELResolver extends ELResolver {
             return ((Character) property).charValue();
         }
         if (property instanceof Boolean) {
-            return (((Boolean) property).booleanValue() ? 1 : 0);
+            return (Boolean) property ? 1 : 0;
         }
         if (property instanceof String) {
             return Integer.parseInt((String) property);

==================================================
SessionEvent.java
index f17d4226a8..b651356cc1 100644
--- a/java/org/apache/catalina/ContainerEvent.java
+++ b/java/org/apache/catalina/ContainerEvent.java
@@ -90,7 +90,7 @@ public final class ContainerEvent extends EventObject {
      */
     @Override
     public String toString() {
-        return ("ContainerEvent['" + getContainer() + "','" +
-                getType() + "','" + getData() + "']");
+        return "ContainerEvent['" + getContainer() + "','" +
+                getType() + "','" + getData() + "']";
     }
 }

==================================================
Request.java
index 0193df8e38..209121eb0e 100644
--- a/java/org/apache/catalina/SessionEvent.java
+++ b/java/org/apache/catalina/SessionEvent.java
@@ -93,10 +93,7 @@ public final class SessionEvent extends EventObject {
 
     @Override
     public String toString() {
-
-        return ("SessionEvent['" + getSession() + "','" +
-                getType() + "']");
-
+        return "SessionEvent['" + getSession() + "','" + getType() + "']";
     }
 
 

==================================================
ApplicationFilterFactory.java
index 10a03442e2..9aea7a86d5 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -865,7 +865,7 @@ public class Request implements HttpServletRequest {
         Object attr=attributes.get(name);
 
         if(attr!=null) {
-            return(attr);
+            return attr;
         }
 
         attr =  coyoteRequest.getAttribute(name);
@@ -2174,7 +2174,7 @@ public class Request implements HttpServletRequest {
 
         String value = getHeader(name);
         if (value == null) {
-            return (-1L);
+            return -1L;
         }
 
         // Attempt to convert the date header in a variety of formats
@@ -2237,7 +2237,7 @@ public class Request implements HttpServletRequest {
 
         String value = getHeader(name);
         if (value == null) {
-            return (-1);
+            return -1;
         }
 
         return Integer.parseInt(value);

==================================================
StandardContext.java
index 053b35048d..2b15ac2683 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -212,8 +212,8 @@ public final class ApplicationFilterFactory {
                 && (period != requestPath.length() - 1)
                 && ((requestPath.length() - period)
                     == (testPath.length() - 1))) {
-                return (testPath.regionMatches(2, requestPath, period + 1,
-                                               testPath.length() - 2));
+                return testPath.regionMatches(2, requestPath, period + 1,
+                                               testPath.length() - 2);
             }
         }
 

==================================================
StandardWrapper.java
index 6b0a0d1178..2988cec847 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -3551,13 +3551,10 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findServletMappings() {
-
         synchronized (servletMappingsLock) {
             String results[] = new String[servletMappings.size()];
-            return
-               (servletMappings.keySet().toArray(results));
+            return servletMappings.keySet().toArray(results);
         }
-
     }
 
 

==================================================
StatusTransformer.java
index 6e66aa57d6..43ad4345a2 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -1557,7 +1557,7 @@ public class StandardWrapper extends ContainerBase
         try {
             Class<?> clazz =
                 this.getClass().getClassLoader().loadClass(classname);
-            return (ContainerServlet.class.isAssignableFrom(clazz));
+            return ContainerServlet.class.isAssignableFrom(clazz);
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             return false;

==================================================
MapperListener.java
index 85b52cf77a..f8409126d1 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -918,7 +918,7 @@ public class StatusTransformer {
     public static String filter(Object obj) {
 
         if (obj == null)
-            return ("?");
+            return "?";
         String message = obj.toString();
 
         char content[] = new char[message.length()];

==================================================
RealmBase.java
index 51716ef62c..b2a97d6c43 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -141,7 +141,7 @@ public class MapperListener extends LifecycleMBeanBase
     @Override
     protected String getObjectNameKeyProperties() {
         // Same as connector but Mapper rather than Connector
-        return ("type=Mapper");
+        return "type=Mapper";
     }
 
     // --------------------------------------------- Container Listener methods

==================================================
FileStore.java
index e675504da6..7d67ec38fd 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1206,7 +1206,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if(log.isDebugEnabled())
             log.debug(sm.getString("realmBase.gotX509Username", username));
 
-        return(getPrincipal(username));
+        return getPrincipal(username);
     }
 
 
@@ -1285,7 +1285,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             }
 
             // Digest the credentials and return as hexadecimal
-            return (HexUtils.toHexString(md.digest()));
+            return HexUtils.toHexString(md.digest());
         } catch(Exception ex) {
             log.error(ex);
             return credentials;

==================================================
Http11AprProtocol.java
index 3c50022c9a..3faa54e915 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -129,7 +129,7 @@ public final class FileStore extends StoreBase {
         // Acquire the list of files in our storage directory
         File file = directory();
         if (file == null) {
-            return (0);
+            return 0;
         }
         String files[] = file.list();
 

==================================================
Http11Nio2Protocol.java
index fc45b17df0..0311fb48af 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -63,9 +63,9 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     @Override
     protected String getNamePrefix() {
         if (isSSLEnabled()) {
-            return ("https-openssl-apr");
+            return "https-openssl-apr";
         } else {
-            return ("http-apr");
+            return "http-apr";
         }
     }
 }

==================================================
Http11NioProtocol.java
index de520ef265..e30b41a552 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -44,9 +44,9 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
     @Override
     protected String getNamePrefix() {
         if (isSSLEnabled()) {
-            return ("https-" + getSslImplementationShortName()+ "-nio2");
+            return "https-" + getSslImplementationShortName()+ "-nio2";
         } else {
-            return ("http-nio2");
+            return "http-nio2";
         }
     }
 }

==================================================
TokenMgrError.java
index f872ffe07d..e79390b36f 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -76,9 +76,9 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
     @Override
     protected String getNamePrefix() {
         if (isSSLEnabled()) {
-            return ("https-" + getSslImplementationShortName()+ "-nio");
+            return "https-" + getSslImplementationShortName()+ "-nio";
         } else {
-            return ("http-nio");
+            return "http-nio";
         }
     }
 }

==================================================
JspCServletContext.java
index 7fee656e67..cf37fb9443 100644
--- a/java/org/apache/el/parser/TokenMgrError.java
+++ b/java/org/apache/el/parser/TokenMgrError.java
@@ -106,11 +106,11 @@ public class TokenMgrError extends Error
    * Note: You can customize the lexical error message by modifying this method.
    */
   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
-    return("Lexical error at line " +
+    return "Lexical error at line " +
           errorLine + ", column " +
           errorColumn + ".  Encountered: " +
           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
-          "after : \"" + addEscapes(errorAfter) + "\"");
+          "after : \"" + addEscapes(errorAfter) + "\"";
   }
 
   /**

==================================================
Util.java
index bbad8f7262..cc8e683572 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -406,7 +406,7 @@ public class JspCServletContext implements ServletContext {
      */
     @Override
     public String getServerInfo() {
-        return ("JspC/ApacheTomcat8");
+        return "JspC/ApacheTomcat8";
     }
 
 

==================================================
FastHttpDateFormat.java
index 8ff26fd4d1..72b02d719f 100644
--- a/java/org/apache/jasper/tagplugins/jstl/Util.java
+++ b/java/org/apache/jasper/tagplugins/jstl/Util.java
@@ -254,7 +254,7 @@ public class Util {
             (HttpServletRequest) pageContext.getRequest();
         if (context == null) {
             if (url.startsWith("/"))
-                return (request.getContextPath() + url);
+                return request.getContextPath() + url;
             else
                 return url;
         } else {
@@ -268,7 +268,7 @@ public class Util {
                 // path on same host.
                 return url;
             } else {
-                return (context + url);
+                return context + url;
             }
         }
     }

==================================================
SocketWrapperBase.java
index f30c04b11b..1de6eb5d19 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -160,7 +160,7 @@ public final class FastHttpDateFormat {
             throw new IllegalArgumentException();
         }
         if (date == null) {
-            return (-1L);
+            return -1L;
         }
 
         return date.longValue();

==================================================
PojoMethodMapping.java
index 3b490ffe2f..4052752d31 100644
--- a/java/org/apache/tomcat/util/net/SocketWrapperBase.java
+++ b/java/org/apache/tomcat/util/net/SocketWrapperBase.java
@@ -185,9 +185,13 @@ public abstract class SocketWrapperBase<E> {
         return this.writeTimeout;
     }
 
+    public void setKeepAliveLeft(int keepAliveLeft) {
+        this.keepAliveLeft = keepAliveLeft;
+    }
 
-    public void setKeepAliveLeft(int keepAliveLeft) { this.keepAliveLeft = keepAliveLeft;}
-    public int decrementKeepAlive() { return (--keepAliveLeft);}
+    public int decrementKeepAlive() {
+        return --keepAliveLeft;
+    }
 
     public String getRemoteHost() {
         if (remoteHost == null) {

==================================================
ProxyConnection.java
index d343a7f80c..595e7f9929 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java
@@ -197,9 +197,9 @@ public class PojoMethodMapping {
 
 
     private boolean isMethodOverride(Method method1, Method method2) {
-        return (method1.getName().equals(method2.getName())
+        return method1.getName().equals(method2.getName())
                 && method1.getReturnType().equals(method2.getReturnType())
-                && Arrays.equals(method1.getParameterTypes(), method2.getParameterTypes()));
+                && Arrays.equals(method1.getParameterTypes(), method2.getParameterTypes());
     }
 
 

==================================================
Benchmarks.java
index b6c0cc3ab6..a87444312c 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
@@ -71,7 +71,7 @@ public class ProxyConnection extends JdbcInterceptor {
         if (iface == XAConnection.class && connection.getXAConnection()!=null) {
             return true;
         } else {
-            return (iface.isInstance(connection.getConnection()));
+            return iface.isInstance(connection.getConnection());
         }
     }
 

==================================================
CompressionServletResponseWrapper.java
index be5a6ab9d0..52c9cd5a17 100644
--- a/test/org/apache/catalina/valves/Benchmarks.java
+++ b/test/org/apache/catalina/valves/Benchmarks.java
@@ -195,7 +195,7 @@ public class Benchmarks {
             } catch (Throwable t) {
                 index = 0; // cannot happen, in theory
             }
-            return (months[index]);
+            return months[index];
         }
     }
 

==================================================
HTMLFilter.java
index 60413c5441..dc35eddac0 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
@@ -229,8 +229,7 @@ public class CompressionServletResponseWrapper
             System.out.println("stream is set to "+stream+" in getOutputStream");
         }
 
-        return (stream);
-
+        return stream;
     }
 
     /**
@@ -244,7 +243,7 @@ public class CompressionServletResponseWrapper
     public PrintWriter getWriter() throws IOException {
 
         if (writer != null)
-            return (writer);
+            return writer;
 
         if (stream != null)
             throw new IllegalStateException("getOutputStream() has already been called for this response");
@@ -265,7 +264,7 @@ public class CompressionServletResponseWrapper
             writer = new PrintWriter(stream);
         }
 
-        return (writer);
+        return writer;
     }
 
     @Override

==================================================
DebugValidator.java
index 9bc8cfff3f..29463fb56e 100644
--- a/webapps/examples/WEB-INF/classes/util/HTMLFilter.java
+++ b/webapps/examples/WEB-INF/classes/util/HTMLFilter.java
@@ -37,7 +37,7 @@ public final class HTMLFilter {
     public static String filter(String message) {
 
         if (message == null)
-            return (null);
+            return null;
 
         char content[] = new char[message.length()];
         message.getChars(0, message.length(), content, 0);
@@ -60,8 +60,7 @@ public final class HTMLFilter {
                 result.append(content[i]);
             }
         }
-        return (result.toString());
-
+        return result.toString();
     }
 
 

==================================================
