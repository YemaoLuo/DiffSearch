5d1138d2a64852ed7993fb40f9d1e7552dbaaa7f
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57583
==================================================
Mark Thomas
==================================================
Mon Feb 16 15:02:32 2015 +0000
==================================================
ImportHandler.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57583
Cache NotFound results in ImportHandler to save repeated attempts to load classes that do not exost.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1660133 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TesterPageContext.java
index 4a7f90fea3..f0ddd80dcc 100644
--- a/java/javax/el/ImportHandler.java
+++ b/java/javax/el/ImportHandler.java
@@ -140,7 +140,11 @@ public class ImportHandler {
         Class<?> result = clazzes.get(name);
 
         if (result != null) {
-            return result;
+            if (NotFound.class.equals(result)) {
+                return null;
+            } else {
+                return result;
+            }
         }
 
         // Search the class imports
@@ -167,7 +171,11 @@ public class ImportHandler {
                 result = clazz;
             }
         }
-        if (result != null) {
+        if (result == null) {
+            // Cache NotFound results to save repeated calls to findClass()
+            // which is relatively slow
+            clazzes.put(name, NotFound.class);
+        } else {
             clazzes.put(name, result);
         }
 
@@ -199,4 +207,12 @@ public class ImportHandler {
 
         return clazz;
     }
+
+
+    /*
+     * Marker class used because null values are not permitted in a
+     * ConcurrentHashMap.
+     */
+    private static class NotFound {
+    }
 }

==================================================
TestScopedAttributeELResolverPerformance.java
new file mode 100644
index 0000000000..6898d4341c
--- /dev/null
+++ b/test/javax/servlet/jsp/TesterPageContext.java
@@ -0,0 +1,195 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.servlet.jsp;
+
+import java.io.IOException;
+import java.util.Enumeration;
+
+import javax.el.ELContext;
+import javax.servlet.Servlet;
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletContext;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpSession;
+
+public class TesterPageContext extends PageContext {
+
+    @Override
+    public void initialize(Servlet servlet, ServletRequest request,
+            ServletResponse response, String errorPageURL,
+            boolean needsSession, int bufferSize, boolean autoFlush)
+            throws IOException, IllegalStateException, IllegalArgumentException {
+        // NO-OP
+    }
+
+    @Override
+    public void release() {
+        // NO-OP
+    }
+
+    @Override
+    public HttpSession getSession() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public Object getPage() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public ServletRequest getRequest() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public ServletResponse getResponse() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public Exception getException() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public ServletConfig getServletConfig() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public ServletContext getServletContext() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public void forward(String relativeUrlPath) throws ServletException,
+            IOException {
+        // NO-OP
+
+    }
+
+    @Override
+    public void include(String relativeUrlPath) throws ServletException,
+            IOException {
+        // NO-OP
+    }
+
+    @Override
+    public void include(String relativeUrlPath, boolean flush)
+            throws ServletException, IOException {
+        // NO-OP
+    }
+
+    @Override
+    public void handlePageException(Exception e) throws ServletException,
+            IOException {
+        // NO-OP
+    }
+
+    @Override
+    public void handlePageException(Throwable t) throws ServletException,
+            IOException {
+        // NO-OP
+    }
+
+    @Override
+    public void setAttribute(String name, Object value) {
+        // NO-OP
+    }
+
+    @Override
+    public void setAttribute(String name, Object value, int scope) {
+        // NO-OP
+    }
+
+    @Override
+    public Object getAttribute(String name) {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public Object getAttribute(String name, int scope) {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public Object findAttribute(String name) {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public void removeAttribute(String name) {
+        // NO-OP
+    }
+
+    @Override
+    public void removeAttribute(String name, int scope) {
+        // NO-OP
+    }
+
+    @Override
+    public int getAttributesScope(String name) {
+        // NO-OP
+        return 0;
+    }
+
+    @Override
+    public Enumeration<String> getAttributeNamesInScope(int scope) {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public JspWriter getOut() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    @Deprecated
+    public javax.servlet.jsp.el.ExpressionEvaluator getExpressionEvaluator() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    public ELContext getELContext() {
+        // NO-OP
+        return null;
+    }
+
+    @Override
+    @Deprecated
+    public javax.servlet.jsp.el.VariableResolver getVariableResolver() {
+        // NO-OP
+        return null;
+    }
+
+}

==================================================
