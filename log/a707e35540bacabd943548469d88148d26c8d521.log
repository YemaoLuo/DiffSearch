a707e35540bacabd943548469d88148d26c8d521
==================================================
getDeclaredConstructor() -> getConstructor()
==================================================
Mark Thomas
==================================================
Thu Oct 5 18:19:57 2017 +0000
==================================================
CsrfPreventionFilterBase.java
getDeclaredConstructor() -> getConstructor()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811220 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterManagerBase.java
index f9c03f6990..53ac9d0cc8 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
@@ -78,7 +78,7 @@ public abstract class CsrfPreventionFilterBase extends FilterBase {
 
         try {
             Class<?> clazz = Class.forName(randomClass);
-            randomSource = (Random) clazz.getDeclaredConstructor().newInstance();
+            randomSource = (Random) clazz.getConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
             ServletException se = new ServletException(sm.getString(
                     "csrfPrevention.invalidRandomClass", randomClass), e);

==================================================
WebappClassLoaderBase.java
index 79368a605e..751e58bb6a 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -153,7 +153,7 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
         copy.setSecureRandomAlgorithm(getSecureRandomAlgorithm());
         if (getSessionIdGenerator() != null) {
             try {
-                SessionIdGenerator copyIdGenerator = sessionIdGeneratorClass.getDeclaredConstructor().newInstance();
+                SessionIdGenerator copyIdGenerator = sessionIdGeneratorClass.getConstructor().newInstance();
                 copyIdGenerator.setSessionIdLength(getSessionIdGenerator().getSessionIdLength());
                 copyIdGenerator.setJvmRoute(getSessionIdGenerator().getJvmRoute());
                 copy.setSessionIdGenerator(copyIdGenerator);

==================================================
BaseCatalinaMBean.java
index 17720d16ef..451b3762e0 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -1576,7 +1576,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             Class<?> lpClass =
                 defineClass("org.apache.catalina.loader.JdbcLeakPrevention",
                     classBytes, 0, offset, this.getClass().getProtectionDomain());
-            Object obj = lpClass.getDeclaredConstructor().newInstance();
+            Object obj = lpClass.getConstructor().newInstance();
             @SuppressWarnings("unchecked")
             List<String> driverNames = (List<String>) obj.getClass().getMethod(
                     "clearJdbcDriverRegistrations").invoke(obj);

==================================================
MBeanFactory.java
index adfb1945a2..b483991a78 100644
--- a/java/org/apache/catalina/mbeans/BaseCatalinaMBean.java
+++ b/java/org/apache/catalina/mbeans/BaseCatalinaMBean.java
@@ -39,7 +39,7 @@ public abstract class BaseCatalinaMBean<T> extends BaseModelMBean {
 
     protected static Object newInstance(String type) throws MBeanException {
         try {
-            return Class.forName(type).getDeclaredConstructor().newInstance();
+            return Class.forName(type).getConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
             throw new MBeanException(e);
         }

==================================================
JAASMemoryLoginModule.java
index 73fa010ebf..47d3858396 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -631,7 +631,7 @@ public class MBeanFactory {
             throw new IllegalArgumentException();
         }
 
-        Valve valve = (Valve) Class.forName(className).getDeclaredConstructor().newInstance();
+        Valve valve = (Valve) Class.forName(className).getConstructor().newInstance();
 
         container.getPipeline().addValve(valve);
 

==================================================
JDBCRealm.java
index 720c1e9f84..4429fe09f2 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -243,7 +243,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         if (option instanceof String) {
             try {
                 Class<?> clazz = Class.forName((String) option);
-                credentialHandler = (CredentialHandler) clazz.getDeclaredConstructor().newInstance();
+                credentialHandler = (CredentialHandler) clazz.getConstructor().newInstance();
             } catch (ReflectiveOperationException e) {
                 throw new IllegalArgumentException(e);
             }

==================================================
JNDIRealm.java
index e558dc0ba0..6a2d645b50 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -639,7 +639,7 @@ public class JDBCRealm
         if (driver == null) {
             try {
                 Class<?> clazz = Class.forName(driverName);
-                driver = (Driver) clazz.getDeclaredConstructor().newInstance();
+                driver = (Driver) clazz.getConstructor().newInstance();
             } catch (Throwable e) {
                 ExceptionUtils.handleThrowable(e);
                 throw new SQLException(e.getMessage(), e);

==================================================
RealmBase.java
index 51a6c860f1..e980bdfc54 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1247,7 +1247,7 @@ public class JNDIRealm extends RealmBase {
     private Object constructInstance(String className)
             throws ReflectiveOperationException {
         Class<?> clazz = Class.forName(className);
-        return clazz.getDeclaredConstructor().newInstance();
+        return clazz.getConstructor().newInstance();
     }
 
     // ---------------------------------------------------------- Realm Methods

==================================================
SecurityClassLoad.java
index d4b13b1102..2be8b466dd 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1402,7 +1402,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if (handlerClassName == null) {
             for (Class<? extends DigestCredentialHandlerBase> clazz : credentialHandlerClasses) {
                 try {
-                    handler = clazz.getDeclaredConstructor().newInstance();
+                    handler = clazz.getConstructor().newInstance();
                     if (IntrospectionUtils.setProperty(handler, "algorithm", algorithm)) {
                         break;
                     }
@@ -1414,7 +1414,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         } else {
             try {
                 Class<?> clazz = Class.forName(handlerClassName);
-                handler = (DigestCredentialHandlerBase) clazz.getDeclaredConstructor().newInstance();
+                handler = (DigestCredentialHandlerBase) clazz.getConstructor().newInstance();
                 IntrospectionUtils.setProperty(handler, "algorithm", algorithm);
             } catch (ReflectiveOperationException e) {
                 throw new RuntimeException(e);
@@ -1547,7 +1547,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         try {
             @SuppressWarnings("unchecked")
             Class<? extends X509UsernameRetriever> clazz = (Class<? extends X509UsernameRetriever>)Class.forName(className);
-            return clazz.getDeclaredConstructor().newInstance();
+            return clazz.getConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
             throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.newInstance", className), e);
         } catch (ClassCastException e) {

==================================================
JDBCStore.java
index cea2830e8a..0f18eb4a9a 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -115,7 +115,7 @@ public final class SecurityClassLoad {
         loader.loadClass(basePackage + "http11.Constants");
         // Make sure system property is read at this point
         Class<?> clazz = loader.loadClass(basePackage + "Constants");
-        clazz.getDeclaredConstructor().newInstance();
+        clazz.getConstructor().newInstance();
         loader.loadClass(basePackage + "http2.Stream$PrivilegedPush");
     }
 
@@ -178,7 +178,7 @@ public final class SecurityClassLoad {
         loader.loadClass(basePackage + "util.http.NamesEnumerator");
         // Make sure system property is read at this point
         Class<?> clazz = loader.loadClass(basePackage + "util.http.FastHttpDateFormat");
-        clazz.getDeclaredConstructor().newInstance();
+        clazz.getConstructor().newInstance();
         loader.loadClass(basePackage + "util.http.parser.HttpParser");
         loader.loadClass(basePackage + "util.http.parser.MediaType");
         loader.loadClass(basePackage + "util.http.parser.MediaTypeCache");

==================================================
ManagerBase.java
index 434b9ad06c..2649fc5ac8 100644
--- a/java/org/apache/catalina/session/JDBCStore.java
+++ b/java/org/apache/catalina/session/JDBCStore.java
@@ -920,7 +920,7 @@ public class JDBCStore extends StoreBase {
         if (driver == null) {
             try {
                 Class<?> clazz = Class.forName(driverName);
-                driver = (Driver) clazz.getDeclaredConstructor().newInstance();
+                driver = (Driver) clazz.getConstructor().newInstance();
             } catch (ReflectiveOperationException e) {
                 manager.getContext().getLogger().error(
                         sm.getString(getStoreName() + ".checkConnectionClassNotFoundException",

==================================================
Bootstrap.java
index 91da6eaec5..98c4231964 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -377,7 +377,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
             return sessionIdGenerator;
         } else if (sessionIdGeneratorClass != null) {
             try {
-                sessionIdGenerator = sessionIdGeneratorClass.getDeclaredConstructor().newInstance();
+                sessionIdGenerator = sessionIdGeneratorClass.getConstructor().newInstance();
                 return sessionIdGenerator;
             } catch(ReflectiveOperationException ex) {
                 // Ignore

==================================================
ContextConfig.java
index 0498afee72..53358d4344 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -263,10 +263,8 @@ public final class Bootstrap {
         // Load our startup class and call its process() method
         if (log.isDebugEnabled())
             log.debug("Loading startup class");
-        Class<?> startupClass =
-            catalinaLoader.loadClass
-            ("org.apache.catalina.startup.Catalina");
-        Object startupInstance = startupClass.getDeclaredConstructor().newInstance();
+        Class<?> startupClass = catalinaLoader.loadClass("org.apache.catalina.startup.Catalina");
+        Object startupInstance = startupClass.getConstructor().newInstance();
 
         // Set the shared extensions class loader
         if (log.isDebugEnabled())

==================================================
HostConfig.java
index b758998ac4..2d455c796e 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -399,7 +399,7 @@ public class ContextConfig implements LifecycleListener {
             // Instantiate and install an Authenticator of the requested class
             try {
                 Class<?> authenticatorClass = Class.forName(authenticatorName);
-                authenticator = (Valve) authenticatorClass.getDeclaredConstructor().newInstance();
+                authenticator = (Valve) authenticatorClass.getConstructor().newInstance();
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 log.error(sm.getString(

==================================================
LifecycleListenerRule.java
index 8346d9667a..ab9d63cbf1 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -583,8 +583,7 @@ public class HostConfig implements LifecycleListener {
             }
 
             Class<?> clazz = Class.forName(host.getConfigClass());
-            LifecycleListener listener =
-                (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+            LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();
             context.addLifecycleListener(listener);
 
             context.setConfigFile(contextXml.toURI().toURL());
@@ -891,8 +890,7 @@ public class HostConfig implements LifecycleListener {
                         cn.getPath(), Constants.ApplicationContextXml,
                         new File(host.getConfigBaseFile(), cn.getBaseName() + ".xml")));
             } else {
-                context = (Context) Class.forName(
-                        contextClass).getDeclaredConstructor().newInstance();
+                context = (Context) Class.forName(contextClass).getConstructor().newInstance();
             }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
@@ -968,8 +966,7 @@ public class HostConfig implements LifecycleListener {
             }
 
             Class<?> clazz = Class.forName(host.getConfigClass());
-            LifecycleListener listener =
-                (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+            LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();
             context.addLifecycleListener(listener);
 
             context.setName(cn.getName());
@@ -1120,13 +1117,11 @@ public class HostConfig implements LifecycleListener {
                         cn.getPath(), xml, xmlCopy));
                 context = new FailedContext();
             } else {
-                context = (Context) Class.forName(
-                        contextClass).getDeclaredConstructor().newInstance();
+                context = (Context) Class.forName(contextClass).getConstructor().newInstance();
             }
 
             Class<?> clazz = Class.forName(host.getConfigClass());
-            LifecycleListener listener =
-                    (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+            LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();
             context.addLifecycleListener(listener);
 
             context.setName(cn.getName());

==================================================
Tomcat.java
index b24af76875..f70a7b2382 100644
--- a/java/org/apache/catalina/startup/LifecycleListenerRule.java
+++ b/java/org/apache/catalina/startup/LifecycleListenerRule.java
@@ -124,8 +124,7 @@ public class LifecycleListenerRule extends Rule {
 
         // Instantiate a new LifecycleListener implementation object
         Class<?> clazz = Class.forName(className);
-        LifecycleListener listener =
-            (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+        LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();
 
         // Add this LifecycleListener to our associated component
         c.addLifecycleListener(listener);

==================================================
UserConfig.java
index 05c816c238..3afb8a6dae 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -598,7 +598,7 @@ public class Tomcat {
         LifecycleListener listener = null;
         try {
             Class<?> clazz = Class.forName(getHost().getConfigClass());
-            listener = (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+            listener = (LifecycleListener) clazz.getConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
             // Wrap in IAE since we can't easily change the method signature to
             // to throw the specific checked exceptions
@@ -1030,7 +1030,7 @@ public class Tomcat {
             if (singleThreadModel) {
                 Servlet instance;
                 try {
-                    instance = existing.getClass().getDeclaredConstructor().newInstance();
+                    instance = existing.getClass().getConstructor().newInstance();
                 } catch (ReflectiveOperationException e) {
                     throw new ServletException(e);
                 }

==================================================
WebappServiceLoader.java
index 506c457be8..8b7d32f98b 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -289,7 +289,7 @@ public final class UserConfig
         UserDatabase database = null;
         try {
             Class<?> clazz = Class.forName(userClass);
-            database = (UserDatabase) clazz.getDeclaredConstructor().newInstance();
+            database = (UserDatabase) clazz.getConstructor().newInstance();
             database.setUserConfig(this);
         } catch (Exception e) {
             host.getLogger().error(sm.getString("userConfig.database"), e);
@@ -340,12 +340,11 @@ public final class UserConfig
         // Deploy the web application for this user
         try {
             Class<?> clazz = Class.forName(contextClass);
-            Context context = (Context) clazz.getDeclaredConstructor().newInstance();
+            Context context = (Context) clazz.getConstructor().newInstance();
             context.setPath(contextPath);
             context.setDocBase(app.toString());
             clazz = Class.forName(configClass);
-            LifecycleListener listener =
-                (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+            LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();
             context.addLifecycleListener(listener);
             host.addChild(context);
         } catch (Exception e) {

==================================================
StoreAppender.java
index b96bae625b..a47a8f9c21 100644
--- a/java/org/apache/catalina/startup/WebappServiceLoader.java
+++ b/java/org/apache/catalina/startup/WebappServiceLoader.java
@@ -186,7 +186,7 @@ public class WebappServiceLoader<T> {
         for (String serviceClass : servicesFound) {
             try {
                 Class<?> clazz = Class.forName(serviceClass, true, loader);
-                services.add(serviceType.cast(clazz.getDeclaredConstructor().newInstance()));
+                services.add(serviceType.cast(clazz.getConstructor().newInstance()));
             } catch (ReflectiveOperationException | ClassCastException e) {
                 throw new IOException(e);
             }

==================================================
StoreConfigLifecycleListener.java
index 8e09fe4d40..ae97e9b141 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -321,7 +321,7 @@ public class StoreAppender {
      * @throws ReflectiveOperationException Error creating a new instance
      */
     public Object defaultInstance(Object bean) throws ReflectiveOperationException {
-        return bean.getClass().getDeclaredConstructor().newInstance();
+        return bean.getClass().getConstructor().newInstance();
     }
 
     /**

==================================================
StoreFactoryRule.java
index 8d4c83ec21..930fc4089d 100644
--- a/java/org/apache/catalina/storeconfig/StoreConfigLifecycleListener.java
+++ b/java/org/apache/catalina/storeconfig/StoreConfigLifecycleListener.java
@@ -84,7 +84,7 @@ public class StoreConfigLifecycleListener implements LifecycleListener {
         try {
             Class<?> clazz = Class.forName(getStoreConfigClass(), true, this
                     .getClass().getClassLoader());
-            storeConfig = (IStoreConfig) clazz.getDeclaredConstructor().newInstance();
+            storeConfig = (IStoreConfig) clazz.getConstructor().newInstance();
             if (null == getStoreRegistry())
                 // default Loading
                 loader.load();

==================================================
SessionIdGeneratorBase.java
index 178058b7b8..69d8d4db13 100644
--- a/java/org/apache/catalina/storeconfig/StoreFactoryRule.java
+++ b/java/org/apache/catalina/storeconfig/StoreFactoryRule.java
@@ -118,6 +118,6 @@ public class StoreFactoryRule extends Rule {
                 className = value;
         }
         Class<?> clazz = Class.forName(className);
-        return clazz.getDeclaredConstructor().newInstance();
+        return clazz.getConstructor().newInstance();
     }
 }
\ No newline at end of file

==================================================
JDBCAccessLogValve.java
index bba5c5b818..6ca75f885f 100644
--- a/java/org/apache/catalina/util/SessionIdGeneratorBase.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -220,7 +220,7 @@ public abstract class SessionIdGeneratorBase extends LifecycleBase
             try {
                 // Construct and seed a new random number generator
                 Class<?> clazz = Class.forName(secureRandomClass);
-                result = (SecureRandom) clazz.getDeclaredConstructor().newInstance();
+                result = (SecureRandom) clazz.getConstructor().newInstance();
             } catch (Exception e) {
                 log.error(sm.getString("sessionIdGeneratorBase.random",
                         secureRandomClass), e);

==================================================
RewriteValve.java
index 13ba876b7a..1fecd2962e 100644
--- a/java/org/apache/catalina/valves/JDBCAccessLogValve.java
+++ b/java/org/apache/catalina/valves/JDBCAccessLogValve.java
@@ -568,7 +568,7 @@ public final class JDBCAccessLogValve extends ValveBase implements AccessLog {
         if (driver == null) {
             try {
                 Class<?> clazz = Class.forName(driverName);
-                driver = (Driver) clazz.getDeclaredConstructor().newInstance();
+                driver = (Driver) clazz.getConstructor().newInstance();
             } catch (Throwable e) {
                 ExceptionUtils.handleThrowable(e);
                 throw new SQLException(e.getMessage(), e);

==================================================
JspCompilationContext.java
index 3bd1ec762b..618451c293 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -651,7 +651,7 @@ public class RewriteValve extends ValveBase {
                 RewriteMap map = null;
                 try {
                     map = (RewriteMap) (Class.forName(
-                            rewriteMapClassName).getDeclaredConstructor().newInstance());
+                            rewriteMapClassName).getConstructor().newInstance());
                 } catch (Exception e) {
                     throw new IllegalArgumentException("Invalid map className: " + line);
                 }

==================================================
ELInterpreterFactory.java
index 1b06ff74dc..9f602be320 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -242,7 +242,7 @@ public class JspCompilationContext {
     protected Compiler createCompiler(String className) {
         Compiler compiler = null;
         try {
-            compiler = (Compiler) Class.forName(className).getDeclaredConstructor().newInstance();
+            compiler = (Compiler) Class.forName(className).getConstructor().newInstance();
         } catch (NoClassDefFoundError | ClassNotFoundException e) {
             if (log.isDebugEnabled()) {
                 log.debug(Localizer.getMessage("jsp.error.compiler"), e);

==================================================
TagFileProcessor.java
index fd8e4a5102..fa598a4d84 100644
--- a/java/org/apache/jasper/compiler/ELInterpreterFactory.java
+++ b/java/org/apache/jasper/compiler/ELInterpreterFactory.java
@@ -85,7 +85,7 @@ public class ELInterpreterFactory {
     private static ELInterpreter createInstance(ServletContext context,
             String className) throws Exception {
         return (ELInterpreter) context.getClassLoader().loadClass(
-                    className).getDeclaredConstructor().newInstance();
+                    className).getConstructor().newInstance();
     }
 
 

==================================================
TagLibraryInfoImpl.java
index 1d91a4410f..b47e0db602 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -593,7 +593,7 @@ class TagFileProcessor {
                     // Dependent list. The only reliable dependency information
                     // can only be obtained from the tag instance.
                     try {
-                        Object tagIns = tagClazz.getDeclaredConstructor().newInstance();
+                        Object tagIns = tagClazz.getConstructor().newInstance();
                         if (tagIns instanceof JspSourceDependent) {
                             for (Entry<String, Long> entry : ((JspSourceDependent)
                                     tagIns).getDependants().entrySet()) {

==================================================
TagPluginManager.java
index 19b6f76051..d5f35bdbc9 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -290,7 +290,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
         if (teiClassName != null && !teiClassName.isEmpty()) {
             try {
                 Class<?> teiClass = ctxt.getClassLoader().loadClass(teiClassName);
-                tei = (TagExtraInfo) teiClass.getDeclaredConstructor().newInstance();
+                tei = (TagExtraInfo) teiClass.getConstructor().newInstance();
             } catch (Exception e) {
                 err.jspError(e, "jsp.error.teiclass.instantiation", teiClassName);
             }
@@ -346,8 +346,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
 
         try {
             Class<?> tlvClass = ctxt.getClassLoader().loadClass(validatorClass);
-            TagLibraryValidator tlv =
-                    (TagLibraryValidator) tlvClass.getDeclaredConstructor().newInstance();
+            TagLibraryValidator tlv = (TagLibraryValidator) tlvClass.getConstructor().newInstance();
             tlv.setInitParameters(initParams);
             return tlv;
         } catch (Exception e) {

==================================================
JspRuntimeLibrary.java
index 6445e96c6c..b1ae5dc23f 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -123,7 +123,7 @@ public class TagPluginManager {
                 String tagClass = entry.getKey();
                 String pluginName = entry.getValue();
                 Class<?> pluginClass = ctxt.getClassLoader().loadClass(pluginName);
-                TagPlugin plugin = (TagPlugin) pluginClass.getDeclaredConstructor().newInstance();
+                TagPlugin plugin = (TagPlugin) pluginClass.getConstructor().newInstance();
                 tagPlugins.put(tagClass, plugin);
             } catch (Exception e) {
                 err.jspError(e);

==================================================
TagHandlerPool.java
index a770ebe9fe..43654332fa 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -783,8 +783,7 @@ public class JspRuntimeLibrary {
         throws JasperException
     {
         try {
-            PropertyEditor pe =
-                (PropertyEditor)propertyEditorClass.getDeclaredConstructor().newInstance();
+            PropertyEditor pe = (PropertyEditor)propertyEditorClass.getConstructor().newInstance();
             pe.setAsText(attrValue);
             return pe.getValue();
         } catch (Exception ex) {

==================================================
ClassLoaderLogManager.java
index 484f0f54d3..6a753cc5ea 100644
--- a/java/org/apache/jasper/runtime/TagHandlerPool.java
+++ b/java/org/apache/jasper/runtime/TagHandlerPool.java
@@ -47,7 +47,7 @@ public class TagHandlerPool {
         if (tpClassName != null) {
             try {
                 Class<?> c = Class.forName(tpClassName);
-                result = (TagHandlerPool) c.getDeclaredConstructor().newInstance();
+                result = (TagHandlerPool) c.getConstructor().newInstance();
             } catch (Exception e) {
                 e.printStackTrace();
                 result = null;
@@ -112,7 +112,7 @@ public class TagHandlerPool {
                 return (Tag) instanceManager.newInstance(
                         handlerClass.getName(), handlerClass.getClassLoader());
             } else {
-                Tag instance = handlerClass.getDeclaredConstructor().newInstance();
+                Tag instance = handlerClass.getConstructor().newInstance();
                 instanceManager.newInstance(instance);
                 return instance;
             }

==================================================
FileHandler.java
index b90cad8b30..f3da9f9e27 100644
--- a/java/org/apache/juli/ClassLoaderLogManager.java
+++ b/java/org/apache/juli/ClassLoaderLogManager.java
@@ -579,7 +579,7 @@ public class ClassLoaderLogManager extends LogManager {
                 try {
                     this.prefix.set(prefix);
                     Handler handler = (Handler) classLoader.loadClass(
-                            handlerClassName).getDeclaredConstructor().newInstance();
+                            handlerClassName).getConstructor().newInstance();
                     // The specification strongly implies all configuration should be done
                     // during the creation of the handler object.
                     // This includes setting level, filter, formatter and encoding.

==================================================
DirectJDKLog.java
index bc73051ab8..91087356f5 100644
--- a/java/org/apache/juli/FileHandler.java
+++ b/java/org/apache/juli/FileHandler.java
@@ -424,7 +424,7 @@ public class FileHandler extends Handler {
         String filterName = getProperty(className + ".filter", null);
         if (filterName != null) {
             try {
-                setFilter((Filter) cl.loadClass(filterName).getDeclaredConstructor().newInstance());
+                setFilter((Filter) cl.loadClass(filterName).getConstructor().newInstance());
             } catch (Exception e) {
                 // Ignore
             }
@@ -435,7 +435,7 @@ public class FileHandler extends Handler {
         if (formatterName != null) {
             try {
                 setFormatter((Formatter) cl.loadClass(
-                        formatterName).getDeclaredConstructor().newInstance());
+                        formatterName).getConstructor().newInstance());
             } catch (Exception e) {
                 // Ignore and fallback to defaults
                 setFormatter(new OneLineFormatter());

==================================================
BeanFactory.java
index 9ba345fce3..2e385638ea 100644
--- a/java/org/apache/juli/logging/DirectJDKLog.java
+++ b/java/org/apache/juli/logging/DirectJDKLog.java
@@ -42,12 +42,12 @@ class DirectJDKLog implements Log {
             // default configuration - it sucks. Let's override at least the
             // formatter for the console
             try {
-                Class.forName(SIMPLE_CFG).getDeclaredConstructor().newInstance();
+                Class.forName(SIMPLE_CFG).getConstructor().newInstance();
             } catch( Throwable t ) {
             }
             try {
                 Formatter fmt= (Formatter) Class.forName(System.getProperty(
-                        FORMATTER, SIMPLE_FMT)).getDeclaredConstructor().newInstance();
+                        FORMATTER, SIMPLE_FMT)).getConstructor().newInstance();
                 // it is also possible that the user modified jre/lib/logging.properties -
                 // but that's really stupid in most cases
                 Logger root=Logger.getLogger("");

==================================================
EjbFactory.java
index c51db867eb..193d579123 100644
--- a/java/org/apache/naming/factory/BeanFactory.java
+++ b/java/org/apache/naming/factory/BeanFactory.java
@@ -145,7 +145,7 @@ public class BeanFactory
                 BeanInfo bi = Introspector.getBeanInfo(beanClass);
                 PropertyDescriptor[] pda = bi.getPropertyDescriptors();
 
-                Object bean = beanClass.getDeclaredConstructor().newInstance();
+                Object bean = beanClass.getConstructor().newInstance();
 
                 /* Look for properties with explicitly configured setter */
                 RefAddr ra = ref.get("forceString");

==================================================
FactoryBase.java
index 89780b3327..4f593a521d 100644
--- a/java/org/apache/naming/factory/EjbFactory.java
+++ b/java/org/apache/naming/factory/EjbFactory.java
@@ -44,7 +44,7 @@ public class EjbFactory extends FactoryBase {
                 "javax.ejb.Factory", Constants.OPENEJB_EJB_FACTORY);
         try {
             factory = (ObjectFactory)
-                Class.forName(javaxEjbFactoryClassName).getDeclaredConstructor().newInstance();
+                Class.forName(javaxEjbFactoryClassName).getConstructor().newInstance();
         } catch(Throwable t) {
             if (t instanceof NamingException) {
                 throw (NamingException) t;

==================================================
ResourceFactory.java
index 0086d7c215..ee5510e8b3 100644
--- a/java/org/apache/naming/factory/FactoryBase.java
+++ b/java/org/apache/naming/factory/FactoryBase.java
@@ -69,7 +69,7 @@ public abstract class FactoryBase implements ObjectFactory {
                     throw ex;
                 }
                 try {
-                    factory = (ObjectFactory) factoryClass.getDeclaredConstructor().newInstance();
+                    factory = (ObjectFactory) factoryClass.getConstructor().newInstance();
                 } catch(Throwable t) {
                     if (t instanceof NamingException) {
                         throw (NamingException) t;

==================================================
SimpleInstanceManager.java
index 1d450370a2..5bb85f9d98 100644
--- a/java/org/apache/naming/factory/ResourceFactory.java
+++ b/java/org/apache/naming/factory/ResourceFactory.java
@@ -45,7 +45,7 @@ public class ResourceFactory extends FactoryBase {
                         Constants.DBCP_DATASOURCE_FACTORY);
             try {
                 factory = (ObjectFactory) Class.forName(
-                        javaxSqlDataSourceFactoryClassName).getDeclaredConstructor().newInstance();
+                        javaxSqlDataSourceFactoryClassName).getConstructor().newInstance();
             } catch (Exception e) {
                 NamingException ex = new NamingException(
                         "Could not create resource factory instance");
@@ -58,7 +58,7 @@ public class ResourceFactory extends FactoryBase {
                         "org.apache.naming.factory.MailSessionFactory");
             try {
                 factory = (ObjectFactory) Class.forName(
-                        javaxMailSessionFactoryClassName).getDeclaredConstructor().newInstance();
+                        javaxMailSessionFactoryClassName).getConstructor().newInstance();
             } catch(Throwable t) {
                 if (t instanceof NamingException) {
                     throw (NamingException) t;

==================================================
BasicDataSource.java
index d56cb39c0d..d53bf578ed 100644
--- a/java/org/apache/tomcat/SimpleInstanceManager.java
+++ b/java/org/apache/tomcat/SimpleInstanceManager.java
@@ -33,7 +33,7 @@ public class SimpleInstanceManager implements InstanceManager {
     @Override
     public Object newInstance(Class<?> clazz) throws IllegalAccessException,
             InvocationTargetException, NamingException, InstantiationException, NoSuchMethodException {
-        return prepareInstance(clazz.getDeclaredConstructor().newInstance());
+        return prepareInstance(clazz.getConstructor().newInstance());
     }
 
     @Override
@@ -41,7 +41,7 @@ public class SimpleInstanceManager implements InstanceManager {
             InvocationTargetException, NamingException, InstantiationException,
             ClassNotFoundException, NoSuchMethodException  {
         Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
-        return prepareInstance(clazz.getDeclaredConstructor().newInstance());
+        return prepareInstance(clazz.getConstructor().newInstance());
     }
 
     @Override
@@ -49,7 +49,7 @@ public class SimpleInstanceManager implements InstanceManager {
             InvocationTargetException, NamingException, InstantiationException,
             ClassNotFoundException, NoSuchMethodException  {
         Class<?> clazz = classLoader.loadClass(fqcn);
-        return prepareInstance(clazz.getDeclaredConstructor().newInstance());
+        return prepareInstance(clazz.getConstructor().newInstance());
     }
 
     @Override

==================================================
BaseGenericObjectPool.java
index 94dbee9758..b71658fe32 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -2153,7 +2153,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                     // Usage of DriverManager is not possible, as it does not
                     // respect the ContextClassLoader
                     // N.B. This cast may cause ClassCastException which is handled below
-                    driverToUse = (Driver) driverFromCCL.getDeclaredConstructor().newInstance();
+                    driverToUse = (Driver) driverFromCCL.getConstructor().newInstance();
                     if (!driverToUse.acceptsURL(url)) {
                         throw new SQLException("No suitable driver", "08001");
                     }

==================================================
Digester.java
index 5d6dc7caed..9f43d9b17c 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
@@ -605,7 +605,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
             } catch (final ClassNotFoundException e) {
                 clazz = Class.forName(evictionPolicyClassName);
             }
-            final Object policy = clazz.getDeclaredConstructor().newInstance();
+            final Object policy = clazz.getConstructor().newInstance();
             if (policy instanceof EvictionPolicy<?>) {
                 @SuppressWarnings("unchecked") // safe, because we just checked the class
                 final

==================================================
ObjectCreateRule.java
index 33f9c716e5..7fc79eeb1c 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -95,7 +95,7 @@ public class Digester extends DefaultHandler2 {
                 try {
                     Class<?> clazz = Class.forName(className, true, cls[i]);
                     source = (IntrospectionUtils.PropertySource)
-                            clazz.getDeclaredConstructor().newInstance();
+                            clazz.getConstructor().newInstance();
                     break;
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);

==================================================
ManagedBean.java
index 96f0dbd133..c4d66e7b6c 100644
--- a/java/org/apache/tomcat/util/digester/ObjectCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/ObjectCreateRule.java
@@ -114,7 +114,7 @@ public class ObjectCreateRule extends Rule {
 
         // Instantiate the new object and push it on the context stack
         Class<?> clazz = digester.getClassLoader().loadClass(realClassName);
-        Object instance = clazz.getDeclaredConstructor().newInstance();
+        Object instance = clazz.getConstructor().newInstance();
         digester.push(instance);
     }
 

==================================================
Registry.java
index c203588d6c..42daedaee4 100644
--- a/java/org/apache/tomcat/util/modeler/ManagedBean.java
+++ b/java/org/apache/tomcat/util/modeler/ManagedBean.java
@@ -318,7 +318,7 @@ public class ManagedBean implements java.io.Serializable {
             }
             try {
                 // Stupid - this will set the default minfo first....
-                mbean = (BaseModelMBean) clazz.getDeclaredConstructor().newInstance();
+                mbean = (BaseModelMBean) clazz.getConstructor().newInstance();
             } catch (RuntimeOperationsException e) {
                 throw e;
             } catch (Exception e) {

==================================================
SSLImplementation.java
index 5c7adb617a..f24aaecf2c 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -711,7 +711,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         }
 
         Class<?> c = Class.forName(type);
-        ModelerSource ds=(ModelerSource)c.getDeclaredConstructor().newInstance();
+        ModelerSource ds=(ModelerSource)c.getConstructor().newInstance();
         return ds;
     }
 

==================================================
JSSEUtil.java
index d06549cf20..43ccbe5e4c 100644
--- a/java/org/apache/tomcat/util/net/SSLImplementation.java
+++ b/java/org/apache/tomcat/util/net/SSLImplementation.java
@@ -53,7 +53,7 @@ public abstract class SSLImplementation {
 
         try {
             Class<?> clazz = Class.forName(className);
-            return (SSLImplementation) clazz.getDeclaredConstructor().newInstance();
+            return (SSLImplementation) clazz.getConstructor().newInstance();
         } catch (Exception e) {
             String msg = sm.getString("sslImplementation.cnfe", className);
             if (logger.isDebugEnabled()) {

==================================================
StandardJarScanner.java
index 6a6dbc08c2..5d24e416a6 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
@@ -290,7 +290,7 @@ public class JSSEUtil extends SSLUtilBase {
                 throw new InstantiationException(sm.getString(
                         "jsse.invalidTrustManagerClassName", className));
              }
-             Object trustManagerObject = clazz.getDeclaredConstructor().newInstance();
+             Object trustManagerObject = clazz.getConstructor().newInstance();
              TrustManager trustManager = (TrustManager) trustManagerObject;
              return new TrustManager[]{ trustManager };
         }

==================================================
Util.java
index a75d1f0ee1..d8431aee9f 100644
--- a/java/org/apache/tomcat/util/scan/StandardJarScanner.java
+++ b/java/org/apache/tomcat/util/scan/StandardJarScanner.java
@@ -42,6 +42,7 @@ import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.UriUtil;
+import org.apache.tomcat.util.compat.JreCompat;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -225,78 +226,91 @@ public class StandardJarScanner implements JarScanner {
 
         // Scan the classpath
         if (isScanClassPath()) {
-            if (log.isTraceEnabled()) {
-                log.trace(sm.getString("jarScan.classloaderStart"));
-            }
+            doScanClassPath(scanType, context, callback, processedURLs);
+        }
+    }
 
-            ClassLoader stopLoader = null;
-            if (!isScanBootstrapClassPath()) {
-                // Stop when we reach the bootstrap class loader
-                stopLoader = ClassLoader.getSystemClassLoader().getParent();
-            }
 
-            ClassLoader classLoader = context.getClassLoader();
+    protected void doScanClassPath(JarScanType scanType, ServletContext context,
+            JarScannerCallback callback, Set<URL> processedURLs) {
+        if (log.isTraceEnabled()) {
+            log.trace(sm.getString("jarScan.classloaderStart"));
+        }
 
-            // JARs are treated as application provided until the common class
-            // loader is reached.
-            boolean isWebapp = true;
+        ClassLoader stopLoader = null;
+        if (!isScanBootstrapClassPath()) {
+            // Stop when we reach the bootstrap class loader
+            stopLoader = ClassLoader.getSystemClassLoader().getParent();
+        }
 
-            while (classLoader != null && classLoader != stopLoader) {
-                if (classLoader instanceof URLClassLoader) {
-                    if (isWebapp) {
-                        isWebapp = isWebappClassLoader(classLoader);
-                    }
+        ClassLoader classLoader = context.getClassLoader();
 
-                    // Use a Deque so URLs can be removed as they are processed
-                    // and new URLs can be added as they are discovered during
-                    // processing.
-                    Deque<URL> classPathUrlsToProcess = new LinkedList<>();
-                    classPathUrlsToProcess.addAll(
-                            Arrays.asList(((URLClassLoader) classLoader).getURLs()));
+        // JARs are treated as application provided until the common class
+        // loader is reached.
+        boolean isWebapp = true;
 
-                    while (!classPathUrlsToProcess.isEmpty()) {
-                        URL url = classPathUrlsToProcess.pop();
+        while (classLoader != null && classLoader != stopLoader) {
+            if (classLoader instanceof URLClassLoader) {
+                if (isWebapp) {
+                    isWebapp = isWebappClassLoader(classLoader);
+                }
 
-                        if (processedURLs.contains(url)) {
-                            // Skip this URL it has already been processed
-                            continue;
-                        }
+                // Use a Deque so URLs can be removed as they are processed
+                // and new URLs can be added as they are discovered during
+                // processing.
+                Deque<URL> classPathUrlsToProcess = new LinkedList<>();
+                classPathUrlsToProcess.addAll(
+                        Arrays.asList(((URLClassLoader) classLoader).getURLs()));
+
+                while (!classPathUrlsToProcess.isEmpty()) {
+                    URL url = classPathUrlsToProcess.pop();
 
-                        // TODO: Java 9 support. Details are TBD. It will depend
-                        //       on the extent to which Java 8 supports the
-                        //       Java 9 file formats since this code MUST run on
-                        //       Java 8.
-                        ClassPathEntry cpe = new ClassPathEntry(url);
-
-                        // JARs are scanned unless the filter says not to.
-                        // Directories are scanned for pluggability scans or
-                        // if scanAllDirectories is enabled unless the
-                        // filter says not to.
-                        if ((cpe.isJar() ||
-                                scanType == JarScanType.PLUGGABILITY ||
-                                isScanAllDirectories()) &&
-                                        getJarScanFilter().check(scanType,
-                                                cpe.getName())) {
-                            if (log.isDebugEnabled()) {
-                                log.debug(sm.getString("jarScan.classloaderJarScan", url));
-                            }
-                            try {
-                                processedURLs.add(url);
-                                process(scanType, callback, url, null, isWebapp, classPathUrlsToProcess);
-                            } catch (IOException ioe) {
-                                log.warn(sm.getString("jarScan.classloaderFail", url), ioe);
-                            }
-                        } else {
-                            // JAR / directory has been skipped
-                            if (log.isTraceEnabled()) {
-                                log.trace(sm.getString("jarScan.classloaderJarNoScan", url));
-                            }
+                    if (processedURLs.contains(url)) {
+                        // Skip this URL it has already been processed
+                        continue;
+                    }
+
+                    // TODO: Java 9 support. Details are TBD. It will depend
+                    //       on the extent to which Java 8 supports the
+                    //       Java 9 file formats since this code MUST run on
+                    //       Java 8.
+                    ClassPathEntry cpe = new ClassPathEntry(url);
+
+                    // JARs are scanned unless the filter says not to.
+                    // Directories are scanned for pluggability scans or
+                    // if scanAllDirectories is enabled unless the
+                    // filter says not to.
+                    if ((cpe.isJar() ||
+                            scanType == JarScanType.PLUGGABILITY ||
+                            isScanAllDirectories()) &&
+                                    getJarScanFilter().check(scanType,
+                                            cpe.getName())) {
+                        if (log.isDebugEnabled()) {
+                            log.debug(sm.getString("jarScan.classloaderJarScan", url));
+                        }
+                        try {
+                            processedURLs.add(url);
+                            process(scanType, callback, url, null, isWebapp, classPathUrlsToProcess);
+                        } catch (IOException ioe) {
+                            log.warn(sm.getString("jarScan.classloaderFail", url), ioe);
+                        }
+                    } else {
+                        // JAR / directory has been skipped
+                        if (log.isTraceEnabled()) {
+                            log.trace(sm.getString("jarScan.classloaderJarNoScan", url));
                         }
                     }
                 }
-                classLoader = classLoader.getParent();
             }
+            classLoader = classLoader.getParent();
         }
+
+        if (JreCompat.isJre9Available()) {
+            // The application and platform class loaders are not instances of
+            // URLClassLoader
+
+        }
+
     }
 
 

==================================================
WsRemoteEndpointImplBase.java
index 6eace387e7..63009a6259 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -342,7 +342,7 @@ public class Util {
                 @SuppressWarnings("unused")
                 Decoder instance;
                 try {
-                    instance = decoderClazz.getDeclaredConstructor().newInstance();
+                    instance = decoderClazz.getConstructor().newInstance();
                 } catch (ReflectiveOperationException e) {
                     throw new DeploymentException(
                             sm.getString("pojoMethodMapping.invalidDecoder",

==================================================
WsWebSocketContainer.java
index 136b39fee9..02d677d5b4 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -676,7 +676,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
                 endpointConfig.getEncoders()) {
             Encoder instance;
             try {
-                instance = encoderClazz.getDeclaredConstructor().newInstance();
+                instance = encoderClazz.getConstructor().newInstance();
                 instance.init(endpointConfig);
             } catch (ReflectiveOperationException e) {
                 throw new DeploymentException(

==================================================
PojoMessageHandlerWholeBinary.java
index 7f304ed5b2..b486fa7475 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -132,7 +132,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
         if (!ClientEndpointConfig.Configurator.class.equals(
                 configuratorClazz)) {
             try {
-                configurator = configuratorClazz.getDeclaredConstructor().newInstance();
+                configurator = configuratorClazz.getConstructor().newInstance();
             } catch (ReflectiveOperationException e) {
                 throw new DeploymentException(sm.getString(
                         "wsWebSocketContainer.defaultConfiguratorFail"), e);
@@ -159,7 +159,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
 
         Object pojo;
         try {
-            pojo = annotatedEndpointClass.getDeclaredConstructor().newInstance();
+            pojo = annotatedEndpointClass.getConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
             throw new DeploymentException(sm.getString(
                     "wsWebSocketContainer.endpointCreateFail",
@@ -177,7 +177,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
 
         Endpoint endpoint;
         try {
-            endpoint = clazz.getDeclaredConstructor().newInstance();
+            endpoint = clazz.getConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
             throw new DeploymentException(sm.getString(
                     "wsWebSocketContainer.endpointCreateFail", clazz.getName()),

==================================================
PojoMessageHandlerWholeText.java
index a01ced4b9f..e4756f6a4a 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
@@ -66,14 +66,13 @@ public class PojoMessageHandlerWholeBinary
             if (decoderClazzes != null) {
                 for (Class<? extends Decoder> decoderClazz : decoderClazzes) {
                     if (Binary.class.isAssignableFrom(decoderClazz)) {
-                        Binary<?> decoder =
-                                (Binary<?>) decoderClazz.getDeclaredConstructor().newInstance();
+                        Binary<?> decoder = (Binary<?>) decoderClazz.getConstructor().newInstance();
                         decoder.init(config);
                         decoders.add(decoder);
                     } else if (BinaryStream.class.isAssignableFrom(
                             decoderClazz)) {
                         BinaryStream<?> decoder = (BinaryStream<?>)
-                                decoderClazz.getDeclaredConstructor().newInstance();
+                                decoderClazz.getConstructor().newInstance();
                         decoder.init(config);
                         decoders.add(decoder);
                     } else {

==================================================
DefaultServerEndpointConfigurator.java
index b2a76bc4ba..3ec4bd77b1 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java
@@ -75,14 +75,13 @@ public class PojoMessageHandlerWholeText
             if (decoderClazzes != null) {
                 for (Class<? extends Decoder> decoderClazz : decoderClazzes) {
                     if (Text.class.isAssignableFrom(decoderClazz)) {
-                        Text<?> decoder =
-                                (Text<?>) decoderClazz.getDeclaredConstructor().newInstance();
+                        Text<?> decoder = (Text<?>) decoderClazz.getConstructor().newInstance();
                         decoder.init(config);
                         decoders.add(decoder);
                     } else if (TextStream.class.isAssignableFrom(
                             decoderClazz)) {
                         TextStream<?> decoder =
-                                (TextStream<?>) decoderClazz.getDeclaredConstructor().newInstance();
+                                (TextStream<?>) decoderClazz.getConstructor().newInstance();
                         decoder.init(config);
                         decoders.add(decoder);
                     } else {

==================================================
WsSci.java
index d5caa8959b..75b8d7059e 100644
--- a/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
+++ b/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
@@ -33,7 +33,7 @@ public class DefaultServerEndpointConfigurator
     public <T> T getEndpointInstance(Class<T> clazz)
             throws InstantiationException {
         try {
-            return clazz.getDeclaredConstructor().newInstance();
+            return clazz.getConstructor().newInstance();
         } catch (InstantiationException e) {
             throw e;
         } catch (ReflectiveOperationException e) {

==================================================
WsServerContainer.java
index 07fa978c91..73dabd7741 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -72,7 +72,7 @@ public class WsSci implements ServletContainerInitializer {
                 }
                 if (ServerApplicationConfig.class.isAssignableFrom(clazz)) {
                     serverApplicationConfigs.add(
-                            (ServerApplicationConfig) clazz.getDeclaredConstructor().newInstance());
+                            (ServerApplicationConfig) clazz.getConstructor().newInstance());
                 }
                 if (Endpoint.class.isAssignableFrom(clazz)) {
                     @SuppressWarnings("unchecked")

==================================================
GenericNamingResourcesFactory.java
index 3a99cef65c..ae178cba1a 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -214,7 +214,7 @@ public class WsServerContainer extends WsWebSocketContainer
         Configurator configurator = null;
         if (!configuratorClazz.equals(Configurator.class)) {
             try {
-                configurator = annotation.configurator().getDeclaredConstructor().newInstance();
+                configurator = annotation.configurator().getConstructor().newInstance();
             } catch (ReflectiveOperationException e) {
                 throw new DeploymentException(sm.getString(
                         "serverContainer.configuratorFail",
@@ -416,7 +416,7 @@ public class WsServerContainer extends WsWebSocketContainer
             @SuppressWarnings("unused")
             Encoder instance;
             try {
-                encoder.getDeclaredConstructor().newInstance();
+                encoder.getConstructor().newInstance();
             } catch(ReflectiveOperationException e) {
                 throw new DeploymentException(sm.getString(
                         "serverContainer.encoderFail", encoder.getName()), e);

==================================================
ConnectionPool.java
index d947b17895..7d0276ab97 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
@@ -63,7 +63,7 @@ public class GenericNamingResourcesFactory implements ObjectFactory {
             ClassLoaderUtil.loadClass(
                 type,
                 GenericNamingResourcesFactory.class.getClassLoader(),
-                Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();
+                Thread.currentThread().getContextClassLoader()).getConstructor().newInstance();
 
         while (refs.hasMoreElements()) {
             RefAddr addr = refs.nextElement();

==================================================
PoolProperties.java
index cee84b4db8..0ab1090b02 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -302,7 +302,7 @@ public class ConnectionPool {
             for (int i=proxies.length-1; i>=0; i--) {
                 try {
                     //create a new instance
-                    JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getDeclaredConstructor().newInstance();
+                    JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getConstructor().newInstance();
                     //configure properties
                     interceptor.setProperties(proxies[i].getProperties());
                     //setup the chain
@@ -415,7 +415,7 @@ public class ConnectionPool {
         PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
         for (int i=0; i<proxies.length; i++) {
             try {
-                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getDeclaredConstructor().newInstance();
+                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getConstructor().newInstance();
                 interceptor.setProperties(proxies[i].getProperties());
                 interceptor.poolClosed(this);
             }catch (Exception x) {
@@ -462,7 +462,7 @@ public class ConnectionPool {
                 if (log.isDebugEnabled()) {
                     log.debug("Creating interceptor instance of class:"+proxies[i].getInterceptorClass());
                 }
-                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getDeclaredConstructor().newInstance();
+                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getConstructor().newInstance();
                 interceptor.setProperties(proxies[i].getProperties());
                 interceptor.poolStarted(this);
             }catch (Exception x) {

==================================================
PooledConnection.java
index 6d826bfabf..3ec9569a51 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -773,7 +773,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
                 PoolProperties.class.getClassLoader(),
                 Thread.currentThread().getContextClassLoader()
             );
-            validator = validatorClass.getDeclaredConstructor().newInstance();
+            validator = validatorClass.getConstructor().newInstance();
         } catch (ClassNotFoundException e) {
             log.warn("The class "+className+" cannot be found.", e);
         } catch (ClassCastException e) {

==================================================
TestWebappClassLoaderThreadLocalMemoryLeak.java
index 15c197a05f..c6c8111bcd 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -273,7 +273,7 @@ public class PooledConnection {
                             poolProperties.getDriverClassName(),
                             PooledConnection.class.getClassLoader(),
                             Thread.currentThread().getContextClassLoader()
-                        ).getDeclaredConstructor().newInstance();
+                        ).getConstructor().newInstance();
                 }
             }
         } catch (java.lang.Exception cn) {

==================================================
TestWebappClassLoaderWeaving.java
index 419a8298f8..34e4d6edf2 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
@@ -196,7 +196,7 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
                     "org.apache.tomcat.unittest." + name, classBytes, 0,
                     offset, cl.getClass().getProtectionDomain());
             // Make sure we can create an instance
-            Object obj = lpClass.getDeclaredConstructor().newInstance();
+            Object obj = lpClass.getConstructor().newInstance();
             obj.toString();
         }
     }

==================================================
ChannelCreator.java
index fa62a7a76a..f5469802f9 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
@@ -307,7 +307,7 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
 
         Method m = c.getMethod("doMethod");
 
-        Object o = c.getDeclaredConstructor().newInstance();
+        Object o = c.getConstructor().newInstance();
         return (String) m.invoke(o);
 
     }

==================================================
TesterFactory.java
index aae04d2949..778726cee2 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -171,7 +171,7 @@ public class ChannelCreator {
         System.out.println("Creating receiver class="+receiver);
         Class<?> cl = Class.forName(receiver, true,
                 ChannelCreator.class.getClassLoader());
-        ReceiverBase rx = (ReceiverBase)cl.getDeclaredConstructor().newInstance();
+        ReceiverBase rx = (ReceiverBase)cl.getConstructor().newInstance();
         rx.setAddress(bind);
         rx.setPort(port);
         rx.setSelectorTimeout(tcpseltimeout);
@@ -186,7 +186,7 @@ public class ChannelCreator {
         ReplicationTransmitter ps = new ReplicationTransmitter();
         System.out.println("Creating transport class="+transport);
         MultiPointSender sender = (MultiPointSender)Class.forName(
-                transport,true,ChannelCreator.class.getClassLoader()).getDeclaredConstructor().newInstance();
+                transport,true,ChannelCreator.class.getClassLoader()).getConstructor().newInstance();
         sender.setTimeout(acktimeout);
         sender.setMaxRetryAttempts(2);
         sender.setRxBufSize(43800);

==================================================
