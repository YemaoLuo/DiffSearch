b1e9c0da8aec3466c288a4005db89ec53eb33a3a
==================================================
Extend support for permessage-deflate to the WebSocket client implementation.
==================================================
Mark Emlyn
==================================================
Wed Oct 8 10:38:33 2014 +0000
==================================================
Constants.java
Extend support for permessage-deflate to the WebSocket client implementation.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1630065 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PerMessageDeflate.java
index 2772fc80ad..d4e44ffb3c 100644
--- a/java/org/apache/tomcat/websocket/Constants.java
+++ b/java/org/apache/tomcat/websocket/Constants.java
@@ -61,6 +61,8 @@ public class Constants {
             WS_PROTOCOL_HEADER_NAME.toLowerCase(Locale.ENGLISH);
     public static final String WS_EXTENSIONS_HEADER_NAME =
             "Sec-WebSocket-Extensions";
+    public static final Object WS_EXTENSIONS_HEADER_NAME_LOWER =
+            WS_EXTENSIONS_HEADER_NAME.toLowerCase(Locale.ENGLISH);
 
     public static final boolean STRICT_SPEC_COMPLIANCE =
             Boolean.getBoolean(

==================================================
TransformationFactory.java
index 52595cfda4..f57082d5cf 100644
--- a/java/org/apache/tomcat/websocket/PerMessageDeflate.java
+++ b/java/org/apache/tomcat/websocket/PerMessageDeflate.java
@@ -48,6 +48,7 @@ public class PerMessageDeflate implements Transformation {
     private final int serverMaxWindowBits;
     private final boolean clientContextTakeover;
     private final int clientMaxWindowBits;
+    private final boolean isServer;
     private final Inflater inflater = new Inflater(true);
     private final ByteBuffer readBuffer = ByteBuffer.allocate(Constants.DEFAULT_BUFFER_SIZE);
     private final Deflater deflater = new Deflater(Deflater.DEFAULT_COMPRESSION, true);
@@ -58,8 +59,8 @@ public class PerMessageDeflate implements Transformation {
     private volatile ByteBuffer writeBuffer = ByteBuffer.allocate(Constants.DEFAULT_BUFFER_SIZE);
     private volatile boolean firstCompressedFrameWritten = false;
 
-    static PerMessageDeflate negotiate(List<List<Parameter>> preferences) {
-        // Accept the first preference that the server is able to support
+    static PerMessageDeflate negotiate(List<List<Parameter>> preferences, boolean isServer) {
+        // Accept the first preference that the endpoint is able to support
         for (List<Parameter> preference : preferences) {
             boolean ok = true;
             boolean serverContextTakeover = true;
@@ -142,7 +143,7 @@ public class PerMessageDeflate implements Transformation {
             }
             if (ok) {
                 return new PerMessageDeflate(serverContextTakeover, serverMaxWindowBits,
-                        clientContextTakeover, clientMaxWindowBits);
+                        clientContextTakeover, clientMaxWindowBits, isServer);
             }
         }
         // Failed to negotiate agreeable terms
@@ -151,11 +152,12 @@ public class PerMessageDeflate implements Transformation {
 
 
     private PerMessageDeflate(boolean serverContextTakeover, int serverMaxWindowBits,
-            boolean clientContextTakeover, int clientMaxWindowBits) {
+            boolean clientContextTakeover, int clientMaxWindowBits, boolean isServer) {
         this.serverContextTakeover = serverContextTakeover;
         this.serverMaxWindowBits = serverMaxWindowBits;
         this.clientContextTakeover = clientContextTakeover;
         this.clientMaxWindowBits = clientMaxWindowBits;
+        this.isServer = isServer;
     }
 
 
@@ -211,7 +213,8 @@ public class PerMessageDeflate implements Transformation {
                     }
                 }
             } else if (written == 0) {
-                if (fin && !serverContextTakeover) {
+                if (fin && (isServer && !serverContextTakeover ||
+                        !isServer && !clientContextTakeover)) {
                     inflater.reset();
                 }
                 return TransformationResult.END_OF_FRAME;
@@ -423,11 +426,12 @@ public class PerMessageDeflate implements Transformation {
 
     private void startNewMessage() {
         firstCompressedFrameWritten = false;
-        if (!clientContextTakeover) {
+        if (isServer && !clientContextTakeover || !isServer && !serverContextTakeover) {
             deflater.reset();
         }
     }
 
+
     private int getRsv(MessagePart uncompressedMessagePart) {
         int result = uncompressedMessagePart.getRsv();
         if (!firstCompressedFrameWritten) {

==================================================
WsFrameClient.java
index eb1b0c09e7..5d5dda8585 100644
--- a/java/org/apache/tomcat/websocket/TransformationFactory.java
+++ b/java/org/apache/tomcat/websocket/TransformationFactory.java
@@ -36,9 +36,10 @@ public class TransformationFactory {
         return factory;
     }
 
-    public Transformation create(String name, List<List<Extension.Parameter>> preferences) {
+    public Transformation create(String name, List<List<Extension.Parameter>> preferences,
+            boolean isServer) {
         if (PerMessageDeflate.NAME.equals(name)) {
-            return PerMessageDeflate.negotiate(preferences);
+            return PerMessageDeflate.negotiate(preferences, isServer);
         }
         throw new IllegalArgumentException(
                 sm.getString("transformerFactory.unsupportedExtension", name));

==================================================
WsWebSocketContainer.java
index 41cf71287f..81a5878b09 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -31,9 +31,8 @@ public class WsFrameClient extends WsFrameBase {
     private ByteBuffer response;
 
     public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel,
-            WsSession wsSession) {
-        // TODO Add support for extensions to the client side code
-        super(wsSession, null);
+            WsSession wsSession, Transformation transformation) {
+        super(wsSession, transformation);
         this.response = response;
         this.channel = channel;
         this.handler = new WsFrameClientCompletionHandler();

==================================================
UpgradeUtil.java
index 571a7129c3..8201ec923b 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -274,6 +274,9 @@ public class WsWebSocketContainer
         ByteBuffer response;
         String subProtocol;
         boolean success = false;
+        List<Extension> extensionsAgreed = new ArrayList<>();
+        Transformation transformation = null;
+
         try {
             fConnect.get(timeout, TimeUnit.MILLISECONDS);
 
@@ -301,16 +304,45 @@ public class WsWebSocketContainer
 
             // Sub-protocol
             // Header names are always stored in lower case
-            List<String> values = handshakeResponse.getHeaders().get(
+            List<String> protocolHeaders = handshakeResponse.getHeaders().get(
                     Constants.WS_PROTOCOL_HEADER_NAME_LOWER);
-            if (values == null || values.size() == 0) {
+            if (protocolHeaders == null || protocolHeaders.size() == 0) {
                 subProtocol = null;
-            } else if (values.size() == 1) {
-                subProtocol = values.get(0);
+            } else if (protocolHeaders.size() == 1) {
+                subProtocol = protocolHeaders.get(0);
             } else {
                 throw new DeploymentException(
                         sm.getString("Sec-WebSocket-Protocol"));
             }
+
+            // Extensions
+            // Should normally only be one header but handle the case of
+            // multiple headers
+            List<String> extHeaders = handshakeResponse.getHeaders().get(
+                    Constants.WS_EXTENSIONS_HEADER_NAME_LOWER);
+            if (extHeaders != null) {
+                for (String extHeader : extHeaders) {
+                    Util.parseExtensionHeader(extensionsAgreed, extHeader);
+                }
+            }
+
+            // Build the transformations
+            TransformationFactory factory = TransformationFactory.getInstance();
+            for (Extension extension : extensionsAgreed) {
+                List<List<Extension.Parameter>> wrapper = new ArrayList<>(1);
+                wrapper.add(extension.getParameters());
+                Transformation t = factory.create(extension.getName(), wrapper, false);
+                if (t == null) {
+                    // TODO i18n
+                    throw new DeploymentException("Client requested parameters it could not support");
+                }
+                if (transformation == null) {
+                    transformation = t;
+                } else {
+                    transformation.setNext(t);
+                }
+            }
+
             success = true;
         } catch (ExecutionException | InterruptedException | SSLException |
                 EOFException | TimeoutException e) {
@@ -326,12 +358,12 @@ public class WsWebSocketContainer
         WsRemoteEndpointImplClient wsRemoteEndpointClient = new WsRemoteEndpointImplClient(channel);
 
         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,
-                this, null, null, null, null, null, Collections.<Extension>emptyList(),
+                this, null, null, null, null, null, extensionsAgreed,
                 subProtocol, Collections.<String,String>emptyMap(), secure,
                 clientEndpointConfiguration);
 
         WsFrameClient wsFrameClient = new WsFrameClient(response, channel,
-                wsSession);
+                wsSession, transformation);
         // WsFrame adds the necessary final transformations. Copy the
         // completed transformation chain to the remote end point.
         wsRemoteEndpointClient.setTransformation(wsFrameClient.getTransformation());
@@ -463,6 +495,7 @@ public class WsWebSocketContainer
                     header.append(value);
                 }
             }
+            result.add(header.toString());
         }
         return result;
     }

==================================================
TestWsWebSocketContainer.java
index 569722849f..4dae360796 100644
--- a/java/org/apache/tomcat/websocket/server/UpgradeUtil.java
+++ b/java/org/apache/tomcat/websocket/server/UpgradeUtil.java
@@ -247,7 +247,7 @@ public class UpgradeUtil {
 
         for (Map.Entry<String,List<List<Extension.Parameter>>> entry :
             extensionPreferences.entrySet()) {
-            Transformation transformation = factory.create(entry.getKey(), entry.getValue());
+            Transformation transformation = factory.create(entry.getKey(), entry.getValue(), true);
             if (transformation != null) {
                 result.add(transformation);
             }

==================================================
