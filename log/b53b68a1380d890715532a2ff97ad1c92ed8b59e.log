b53b68a1380d890715532a2ff97ad1c92ed8b59e
==================================================
Find the new better API for ALPN.
==================================================
Remy Maucherat
==================================================
Fri Jul 17 14:03:15 2015 +0000
==================================================
OpenSSLContext.java
Find the new better API for ALPN.
Add back NPN for now since it looks easy.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1691565 13f79535-47bb-0310-9956-ffa450edef68



==================================================
OpenSSLEngine.java
index 8c5d8bb439..17b90a5a2b 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -17,7 +17,6 @@
 package org.apache.tomcat.util.net.openssl;
 
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.NoSuchAlgorithmException;
@@ -179,38 +178,6 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         }
     }
 
-    private byte[] buildAlpnConfig(List<String> protocols) {
-        /*
-         * The expected format is zero or more of the following:
-         * - Single byte for size
-         * - Sequence of size bytes for the identifier
-         */
-        byte[][] protocolsBytes = new byte[protocols.size()][];
-        int i = 0;
-        int size = 0;
-        for (String protocol : protocols) {
-            protocolsBytes[i] = protocol.getBytes(StandardCharsets.UTF_8);
-            size += protocolsBytes[i].length;
-            // And one byte to store the size
-            size++;
-            i++;
-        }
-
-        size += ALPN_DEFAULT.length;
-
-        byte[] result = new byte[size];
-        int pos = 0;
-        for (byte[] protocolBytes : protocolsBytes) {
-            result[pos++] = (byte) (0xff & protocolBytes.length);
-            System.arraycopy(protocolBytes, 0, result, pos, protocolBytes.length);
-            pos += protocolBytes.length;
-        }
-
-        System.arraycopy(ALPN_DEFAULT, 0, result, pos, ALPN_DEFAULT.length);
-
-        return result;
-    }
-
     private void destroyPools() {
         // Guard against multiple destroyPools() calls triggered by construction exception and finalize() later
         if (aprPool != 0 && DESTROY_UPDATER.compareAndSet(this, 0, 1)) {
@@ -398,10 +365,12 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
             }
 
             if (negotiableProtocols != null && negotiableProtocols.size() > 0) {
-                byte[] protocols = buildAlpnConfig(negotiableProtocols);
-                if (SSLContext.setALPN(ctx, protocols, protocols.length) != 0) {
-                    log.warn(netSm.getString("endpoint.alpn.fail", negotiableProtocols));
-                }
+                ArrayList<String> protocols = new ArrayList<>();
+                protocols.addAll(negotiableProtocols);
+                protocols.add("http/1.1");
+                String[] protocolsArray = protocols.toArray(new String[0]);
+                SSLContext.setAlpnProtos(ctx, protocolsArray, SSL.SSL_SELECTOR_FAILURE_NO_ADVERTISE);
+                SSLContext.setNpnProtos(ctx, protocolsArray, SSL.SSL_SELECTOR_FAILURE_NO_ADVERTISE);
             }
 
             sessionContext = new OpenSSLServerSessionContext(ctx);

==================================================
