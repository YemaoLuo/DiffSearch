f7a679e50ebda523632f5589f8e4880723fca87d
==================================================
Fix some issues with the new Resources implementation reported by Dan Mikusa:
==================================================
Mark Emlyn
==================================================
Fri Sep 6 14:18:59 2013 +0000
==================================================
AbstractFileResourceSet.java
Fix some issues with the new Resources implementation reported by Dan Mikusa:
- The zero-arg constructors for WebResourceSet implementations were either missing or always failed meaning that they could not be specified in a context.xml file as the digester was unable to create them
- The internalPath attribute was not configurable

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1520575 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractResourceSet.java
index 483a9888d8..7d6edb4022 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -26,13 +26,12 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
 
     protected static final String[] EMPTY_STRING_ARRAY = new String[0];
 
-    protected final String internalPath;
     protected File fileBase;
     protected String absoluteBase;
     protected String canonicalBase;
 
     protected AbstractFileResourceSet(String internalPath) {
-        this.internalPath = checkInternalPath(internalPath);
+        setInternalPath(internalPath);
     }
 
     protected File file(String name, boolean mustExist) {
@@ -104,7 +103,7 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
     //-------------------------------------------------------- Lifecycle methods
     @Override
     protected void initInternal() throws LifecycleException {
-        fileBase = new File(getBase(), internalPath);
+        fileBase = new File(getBase(), getInternalPath());
         checkType(fileBase);
 
         String absolutePath = fileBase.getAbsolutePath();

==================================================
DirResourceSet.java
index 14d49e8993..33cc6aafc5 100644
--- a/java/org/apache/catalina/webresources/AbstractResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractResourceSet.java
@@ -28,8 +28,10 @@ public abstract class AbstractResourceSet extends LifecycleBase
 
     private WebResourceRoot root;
     private String base;
+    private String internalPath;
     private String webAppMount;
 
+
     protected static final StringManager sm =
             StringManager.getManager(Constants.Package);
 
@@ -40,15 +42,6 @@ public abstract class AbstractResourceSet extends LifecycleBase
         }
     }
 
-    protected final String checkInternalPath(String internalPath) {
-        checkPath(internalPath);
-        // Optimise internal processing
-        if (internalPath.equals("/")) {
-            return "";
-        }
-        return internalPath;
-    }
-
     @Override
     public final void setRoot(WebResourceRoot root) {
         this.root = root;
@@ -58,6 +51,21 @@ public abstract class AbstractResourceSet extends LifecycleBase
         return root;
     }
 
+
+    public String getInternalPath() {
+        return internalPath;
+    }
+
+    public void setInternalPath(String internalPath) {
+        checkPath(internalPath);
+        // Optimise internal processing
+        if (internalPath.equals("/")) {
+            this.internalPath = "";
+        } else {
+            this.internalPath = internalPath;
+        }
+    }
+
     public final void setWebAppMount(String webAppMount) {
         checkPath(webAppMount);
         // Optimise internal processing

==================================================
FileResourceSet.java
index 54225bfb96..432862899e 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -38,7 +38,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
      * A no argument constructor is required for this to work with the digester.
      */
     public DirResourceSet() {
-        super("");
+        super("/");
     }
 
     /**

==================================================
JarResourceSet.java
index cb17e3ef5e..c090256585 100644
--- a/java/org/apache/catalina/webresources/FileResourceSet.java
+++ b/java/org/apache/catalina/webresources/FileResourceSet.java
@@ -35,7 +35,7 @@ public class FileResourceSet extends AbstractFileResourceSet {
      * A no argument constructor is required for this to work with the digester.
      */
     public FileResourceSet() {
-        super("");
+        super("/");
     }
 
     /**

==================================================
AbstractTestResourceSet.java
index d54f1b45bb..8b6d295cc3 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -40,7 +40,12 @@ public class JarResourceSet extends AbstractResourceSet {
 
     private HashMap<String,JarEntry> jarFileEntries = new HashMap<>();
     private String baseUrl;
-    private final String internalPath;
+
+    /**
+     * A no argument constructor is required for this to work with the digester.
+     */
+    public JarResourceSet() {
+    }
 
     /**
      * Creates a new {@link org.apache.catalina.WebResourceSet} based on a JAR
@@ -63,8 +68,8 @@ public class JarResourceSet extends AbstractResourceSet {
             String internalPath) throws IllegalArgumentException {
         setRoot(root);
         setBase(base);
+        setInternalPath(internalPath);
         setWebAppMount(webAppMount);
-        this.internalPath = checkInternalPath(internalPath);
 
         if (getRoot().getState().isAvailable()) {
             try {
@@ -100,7 +105,7 @@ public class JarResourceSet extends AbstractResourceSet {
         // an empty resource for requests outside of the mount point.
 
         if (path.startsWith(webAppMount)) {
-            String pathInJar = internalPath + path.substring(
+            String pathInJar = getInternalPath() + path.substring(
                     webAppMount.length(), path.length());
             // Always strip off the leading '/' to get the JAR path
             if (pathInJar.charAt(0) == '/') {
@@ -125,7 +130,7 @@ public class JarResourceSet extends AbstractResourceSet {
                     return new EmptyResource(root, path);
                 } else {
                     return new JarResource(root, getBase(), baseUrl, jarEntry,
-                            internalPath, path);
+                            getInternalPath(), path);
                 }
             }
         } else {
@@ -141,7 +146,7 @@ public class JarResourceSet extends AbstractResourceSet {
         ArrayList<String> result = new ArrayList<>();
         if (path.startsWith(webAppMount)) {
             String pathInJar =
-                    internalPath + path.substring(webAppMount.length());
+                    getInternalPath() + path.substring(webAppMount.length());
             // Always strip off the leading '/' to get the JAR path
             if (pathInJar.charAt(0) == '/') {
                 pathInJar = pathInJar.substring(1);
@@ -193,7 +198,7 @@ public class JarResourceSet extends AbstractResourceSet {
         ResourceSet<String> result = new ResourceSet<>();
         if (path.startsWith(webAppMount)) {
             String pathInJar =
-                    internalPath + path.substring(webAppMount.length());
+                    getInternalPath() + path.substring(webAppMount.length());
             // Always strip off the leading '/' to get the JAR path and make
             // sure it ends in '/'
             if (pathInJar.charAt(pathInJar.length() - 1) != '/') {
@@ -212,7 +217,7 @@ public class JarResourceSet extends AbstractResourceSet {
                     if (nextSlash == -1 || nextSlash == name.length() - 1) {
                         if (name.startsWith(pathInJar)) {
                             result.add(webAppMount + '/' +
-                                    name.substring(internalPath.length()));
+                                    name.substring(getInternalPath().length()));
                         }
                     }
                 }

==================================================
AbstractTestResourceSetMount.java
index 5e7925e893..bb357218e6 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
@@ -351,4 +351,8 @@ public abstract class AbstractTestResourceSet {
                     getMount() + "/new-test", is, false));
         }
     }
+
+    // ------------------------------------------------------------ constructors
+
+    public abstract void testNoArgConstructor();
 }

==================================================
TestDirResourceSet.java
index 1676ad9791..3b84d67004 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSetMount.java
@@ -67,4 +67,9 @@ public abstract class AbstractTestResourceSetMount
         InputStream is = new ByteArrayInputStream("test".getBytes());
         Assert.assertFalse(resourceRoot.write("/", is, false));
     }
+
+    @Override
+    public void testNoArgConstructor() {
+        // NO-OP
+    }
 }

==================================================
TestFileResourceSet.java
index 8305001870..3f5f862221 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSet.java
@@ -18,6 +18,8 @@ package org.apache.catalina.webresources;
 
 import java.io.File;
 
+import org.junit.Test;
+
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.WebResourceSet;
 
@@ -43,4 +45,11 @@ public class TestDirResourceSet extends AbstractTestResourceSet {
     public String getBaseDir() {
         return "test/webresources/dir1";
     }
+
+    @Override
+    @Test
+    public void testNoArgConstructor() {
+        @SuppressWarnings("unused")
+        Object obj = new DirResourceSet();
+    }
 }

==================================================
TestJarResourceSet.java
index 41446c97d7..f847b2389e 100644
--- a/test/org/apache/catalina/webresources/TestFileResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestFileResourceSet.java
@@ -18,6 +18,8 @@ package org.apache.catalina.webresources;
 
 import java.io.File;
 
+import org.junit.Test;
+
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.WebResourceSet;
 
@@ -60,4 +62,11 @@ public class TestFileResourceSet extends AbstractTestResourceSet {
     public String getBaseDir() {
         return "test/webresources/dir2";
     }
+
+    @Override
+    @Test
+    public void testNoArgConstructor() {
+        @SuppressWarnings("unused")
+        Object obj = new FileResourceSet();
+    }
 }

==================================================
TestJarResourceSetInternal.java
index e3e9c432f2..458684c19c 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSet.java
@@ -18,6 +18,8 @@ package org.apache.catalina.webresources;
 
 import java.io.File;
 
+import org.junit.Test;
+
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.WebResourceSet;
 
@@ -42,4 +44,11 @@ public class TestJarResourceSet extends AbstractTestResourceSet {
     public String getBaseDir() {
         return "test/webresources";
     }
+
+    @Override
+    @Test
+    public void testNoArgConstructor() {
+        @SuppressWarnings("unused")
+        Object obj = new JarResourceSet();
+    }
 }

==================================================
