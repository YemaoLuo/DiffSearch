fc074e46f3f9e7ff0f69534c112de8777b793c2f
==================================================
Pull up common code
==================================================
Mark Emlyn
==================================================
Mon Sep 16 13:15:31 2013 +0000
==================================================
AbstractArchiveResourceSet.java
Pull up common code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1523634 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JarResourceSet.java
index 3416002b85..9bcb11cf1a 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.webresources;
 
+import java.io.File;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -23,6 +24,8 @@ import java.util.Iterator;
 import java.util.Set;
 import java.util.jar.JarEntry;
 
+import org.apache.catalina.WebResource;
+import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.util.ResourceSet;
 
 public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
@@ -149,4 +152,64 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
 
         return false;
     }
+
+    @Override
+    public final WebResource getResource(String path) {
+        checkPath(path);
+        String webAppMount = getWebAppMount();
+        WebResourceRoot root = getRoot();
+
+        /*
+         * Implementation notes
+         *
+         * The path parameter passed into this method always starts with '/'.
+         *
+         * The path parameter passed into this method may or may not end with a
+         * '/'. JarFile.getEntry() will return a matching directory entry
+         * whether or not the name ends in a '/'. However, if the entry is
+         * requested without the '/' subsequent calls to JarEntry.isDirectory()
+         * will return false.
+         *
+         * Paths in JARs never start with '/'. Leading '/' need to be removed
+         * before any JarFile.getEntry() call.
+         */
+
+        // If the JAR has been mounted below the web application root, return
+        // an empty resource for requests outside of the mount point.
+
+        if (path.startsWith(webAppMount)) {
+            String pathInJar = getInternalPath() + path.substring(
+                    webAppMount.length(), path.length());
+            // Always strip off the leading '/' to get the JAR path
+            if (pathInJar.charAt(0) == '/') {
+                pathInJar = pathInJar.substring(1);
+            }
+            if (pathInJar.equals("")) {
+                // Special case
+                return new JarResourceRoot(root, new File(getBase()),
+                        pathInJar, path);
+            } else {
+                JarEntry jarEntry = null;
+                if (!(pathInJar.charAt(pathInJar.length() - 1) == '/')) {
+                    jarEntry = jarFileEntries.get(pathInJar + '/');
+                    if (jarEntry != null) {
+                        path = path + '/';
+                    }
+                }
+                if (jarEntry == null) {
+                    jarEntry = jarFileEntries.get(pathInJar);
+                }
+                if (jarEntry == null) {
+                    return new EmptyResource(root, path);
+                } else {
+                    return createArchiveResource(jarEntry, path);
+                }
+            }
+        } else {
+            return new EmptyResource(root, path);
+        }
+    }
+
+    protected abstract WebResource createArchiveResource(JarEntry jarEntry,
+            String webAppPath);
 }

==================================================
JarWarResourceSet.java
index 92cc1c2114..ab28d27c53 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -32,8 +32,6 @@ import org.apache.catalina.WebResourceRoot;
  */
 public class JarResourceSet extends AbstractArchiveResourceSet {
 
-    protected String baseUrl;
-
     /**
      * A no argument constructor is required for this to work with the digester.
      */
@@ -74,61 +72,10 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
     }
 
     @Override
-    public WebResource getResource(String path) {
-        checkPath(path);
-        String webAppMount = getWebAppMount();
-        WebResourceRoot root = getRoot();
-
-        /*
-         * Implementation notes
-         *
-         * The path parameter passed into this method always starts with '/'.
-         *
-         * The path parameter passed into this method may or may not end with a
-         * '/'. JarFile.getEntry() will return a matching directory entry
-         * whether or not the name ends in a '/'. However, if the entry is
-         * requested without the '/' subsequent calls to JarEntry.isDirectory()
-         * will return false.
-         *
-         * Paths in JARs never start with '/'. Leading '/' need to be removed
-         * before any JarFile.getEntry() call.
-         */
-
-        // If the JAR has been mounted below the web application root, return
-        // an empty resource for requests outside of the mount point.
-
-        if (path.startsWith(webAppMount)) {
-            String pathInJar = getInternalPath() + path.substring(
-                    webAppMount.length(), path.length());
-            // Always strip off the leading '/' to get the JAR path
-            if (pathInJar.charAt(0) == '/') {
-                pathInJar = pathInJar.substring(1);
-            }
-            if (pathInJar.equals("")) {
-                // Special case
-                return new JarResourceRoot(root, new File(getBase()),
-                        pathInJar, path);
-            } else {
-                JarEntry jarEntry = null;
-                if (!(pathInJar.charAt(pathInJar.length() - 1) == '/')) {
-                    jarEntry = jarFileEntries.get(pathInJar + '/');
-                    if (jarEntry != null) {
-                        path = path + '/';
-                    }
-                }
-                if (jarEntry == null) {
-                    jarEntry = jarFileEntries.get(pathInJar);
-                }
-                if (jarEntry == null) {
-                    return new EmptyResource(root, path);
-                } else {
-                    return new JarResource(root, getBase(), baseUrl, jarEntry,
-                            getInternalPath(), path);
-                }
-            }
-        } else {
-            return new EmptyResource(root, path);
-        }
+    protected WebResource createArchiveResource(JarEntry jarEntry,
+            String webAppPath) {
+        return new JarResource(getRoot(), getBase(), baseUrl, jarEntry,
+                getInternalPath(), webAppPath);
     }
 
     //-------------------------------------------------------- Lifecycle methods

==================================================
