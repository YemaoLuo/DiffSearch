4a5f595ea9257083a58b6290a99aa5a65c4bf81f
==================================================
Update implementation for API changes
==================================================
Mark Emlyn
==================================================
Wed Dec 5 22:52:21 2012 +0000
==================================================
ClientContainerImpl.java
Update implementation for API changes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1417683 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PojoServerEndpointConfiguration.java
index 006980af92..88e2bfad8f 100644
--- a/java/org/apache/tomcat/websocket/ClientContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ClientContainerImpl.java
@@ -20,20 +20,30 @@ import java.net.URI;
 import java.util.Set;
 
 import javax.websocket.ClientContainer;
+import javax.websocket.ClientEndpointConfiguration;
 import javax.websocket.DeploymentException;
+import javax.websocket.Endpoint;
 import javax.websocket.Session;
 
 public class ClientContainerImpl implements ClientContainer {
 
     @Override
-    public void connectToServer(Object endpoint, URI path)
+    public Session connectToServer(Object endpoint, URI path)
             throws DeploymentException {
         // TODO Auto-generated method stub
+        return null;
+    }
 
+    @Override
+    public Session connectToServer(Endpoint endpoint,
+            ClientEndpointConfiguration clientEndpointConfiguration, URI path)
+            throws DeploymentException {
+        // TODO Auto-generated method stub
+        return null;
     }
 
     @Override
-    public Set<Session> getActiveSessions() {
+    public Set<Session> getOpenSessions() {
         // TODO Auto-generated method stub
         return null;
     }

==================================================
ServerContainerImpl.java
new file mode 100644
index 0000000000..3b31105c82
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/PojoServerEndpointConfiguration.java
@@ -0,0 +1,78 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import javax.websocket.DefaultServerConfiguration;
+import javax.websocket.Endpoint;
+import javax.websocket.EndpointFactory;
+
+public class PojoServerEndpointConfiguration extends
+        DefaultServerConfiguration<Endpoint> {
+
+    @Override
+    public boolean checkOrigin(String originHeaderValue) {
+        // Allow all
+        return true;
+    }
+
+    private final EndpointFactory<Endpoint> endpointFactory;
+    private final String servletPath;
+
+    PojoServerEndpointConfiguration(Class<?> pojo,
+            PojoMethodMapping methodMapping, String servletPath, String pathInfo) {
+        this.endpointFactory =
+                new PojoEndpointFactory(pojo, methodMapping, pathInfo);
+        this.servletPath = servletPath;
+    }
+
+
+    @Override
+    public EndpointFactory<Endpoint> getEndpointFactory() {
+        return endpointFactory;
+    }
+
+    @Override
+    public String getPath() {
+        return servletPath;
+    }
+
+    private static class PojoEndpointFactory
+            implements EndpointFactory<Endpoint> {
+
+        private final Class<?> pojo;
+        private final PojoMethodMapping methodMapping;
+        private final String pathInfo;
+
+        public PojoEndpointFactory(Class<?> pojo,
+                PojoMethodMapping methodMapping, String pathInfo) {
+            this.pojo = pojo;
+            this.methodMapping = methodMapping;
+            this.pathInfo = pathInfo;
+        }
+
+        @Override
+        public Endpoint createEndpoint() {
+            Endpoint ep;
+            try {
+                ep = new WsEndpointPojo(pojo, methodMapping, pathInfo);
+            } catch (InstantiationException | IllegalAccessException e) {
+                throw new IllegalArgumentException(e);
+            }
+            return ep;
+        }
+    }
+}

==================================================
WsEndpointPojo.java
index 36e862f19a..cf47630253 100644
--- a/java/org/apache/tomcat/websocket/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ServerContainerImpl.java
@@ -23,7 +23,6 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
 import javax.websocket.DeploymentException;
-import javax.websocket.Endpoint;
 import javax.websocket.ServerContainer;
 import javax.websocket.ServerEndpointConfiguration;
 
@@ -73,7 +72,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
 
     private volatile ServletContext servletContext = null;
 
-    private Map<String, Class<? extends Endpoint>> endpointMap =
+    private Map<String, ServerEndpointConfiguration<?>> configMap =
             new ConcurrentHashMap<>();
 
     private Map<String, Class<?>> pojoMap = new ConcurrentHashMap<>();
@@ -93,7 +92,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
 
 
     @Override
-    public void publishServer(Class<? extends Endpoint> clazz)
+    public void publishServer(Class<? extends ServerEndpointConfiguration<?>> clazz)
             throws DeploymentException {
 
         if (servletContext == null) {
@@ -101,17 +100,15 @@ public class ServerContainerImpl extends ClientContainerImpl implements
                     sm.getString("serverContainer.servletContextMissing"));
         }
 
-        Endpoint ep = null;
+        ServerEndpointConfiguration<?> sec = null;
         try {
-            ep = clazz.newInstance();
+            sec = clazz.newInstance();
         } catch (InstantiationException | IllegalAccessException e) {
             throw new DeploymentException(
                     sm.getString("sci.newInstance.fail", clazz.getName()), e);
         }
 
-        ServerEndpointConfiguration config =
-                (ServerEndpointConfiguration) ep.getEndpointConfiguration();
-        String path = config.getPath();
+        String path = sec.getPath();
         String mappingPath = Util.getServletMappingPath(path);
 
         if (log.isDebugEnabled()) {
@@ -119,8 +116,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
                     clazz.getName(), path, servletContext.getContextPath()));
         }
 
-        endpointMap.put(
-                mappingPath.substring(0, mappingPath.length() - 2), clazz);
+        configMap.put(mappingPath.substring(0, mappingPath.length() - 2), sec);
         addWsServletMapping(mappingPath);
     }
 
@@ -175,22 +171,22 @@ public class ServerContainerImpl extends ClientContainerImpl implements
     }
 
 
-    public Endpoint getEndpoint(String servletPath, String pathInfo)
-            throws InstantiationException, IllegalAccessException {
-        Class<? extends Endpoint> clazzEndpoint = endpointMap.get(servletPath);
-        if (clazzEndpoint != null) {
-            Endpoint ep = clazzEndpoint.newInstance();
-            return ep;
+    public ServerEndpointConfiguration<?> getServerEndpointConfiguration(
+            String servletPath, String pathInfo) {
+
+        ServerEndpointConfiguration<?> sec = configMap.get(servletPath);
+        if (sec != null) {
+            return sec;
         }
 
-        // TODO Need to cache the pojoMethodMapping too
-        Class<?> clazzPojo = pojoMap.get(servletPath);
-        if (clazzPojo != null) {
-            PojoMethodMapping mapping = pojoMethodMap.get(clazzPojo);
+        Class<?> pojo = pojoMap.get(servletPath);
+        if (pojo != null) {
+            PojoMethodMapping mapping = pojoMethodMap.get(pojo);
             if (mapping != null) {
-                Endpoint ep = new WsEndpointPojo(clazzPojo,
-                        mapping, servletPath, pathInfo);
-                return ep;
+                PojoServerEndpointConfiguration pojoSec =
+                        new PojoServerEndpointConfiguration(pojo, mapping,
+                                servletPath, pathInfo);
+                return pojoSec;
             }
         }
 

==================================================
WsFrame.java
index aa8032b8d4..32249d9301 100644
--- a/java/org/apache/tomcat/websocket/WsEndpointPojo.java
+++ b/java/org/apache/tomcat/websocket/WsEndpointPojo.java
@@ -19,9 +19,7 @@ package org.apache.tomcat.websocket;
 import java.lang.reflect.InvocationTargetException;
 
 import javax.websocket.CloseReason;
-import javax.websocket.DefaultServerConfiguration;
 import javax.websocket.Endpoint;
-import javax.websocket.EndpointConfiguration;
 import javax.websocket.Session;
 
 /**
@@ -32,32 +30,19 @@ import javax.websocket.Session;
 public class WsEndpointPojo extends Endpoint {
 
     private final Object pojo;
-    private final EndpointConfiguration config;
     private final String pathInfo;
     private final PojoMethodMapping methodMapping;
     private Session session = null;
 
     public WsEndpointPojo(Class<?> clazzPojo, PojoMethodMapping methodMapping,
-            String ServletPath, String pathInfo)
+            String pathInfo)
             throws InstantiationException, IllegalAccessException {
+        // TODO Use factory from annotation if present
         this.pojo = clazzPojo.newInstance();
-        this.config = new DefaultServerConfiguration(ServletPath) {
-
-            @Override
-            public boolean checkOrigin(String originHeaderValue) {
-                return true;
-            }
-        };
-
         this.methodMapping = methodMapping;
         this.pathInfo = pathInfo;
     }
 
-    @Override
-    public EndpointConfiguration getEndpointConfiguration() {
-        return config;
-    }
-
     @Override
     public void onOpen(Session session) {
         this.session = session;

==================================================
WsServlet.java
index bb883a5f93..c0121ccfdd 100644
--- a/java/org/apache/tomcat/websocket/WsFrame.java
+++ b/java/org/apache/tomcat/websocket/WsFrame.java
@@ -105,7 +105,7 @@ public class WsFrame {
         b = inputBuffer[1];
         // Client data must be masked
         if ((b & 0x80) == 0) {
-            throw new IOException(sm.getString("wsFrame.notMasked.notMasked"));
+            throw new IOException(sm.getString("wsFrame.notMasked"));
         }
 
         payloadLength = b & 0x7F;

==================================================
WsSession.java
index bb9022a20d..95899cb339 100644
--- a/java/org/apache/tomcat/websocket/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/WsServlet.java
@@ -90,20 +90,12 @@ public class WsServlet extends HttpServlet {
 
         // Need an Endpoint instance to progress this further
         ServerContainerImpl cp = ServerContainerImpl.getServerContainer();
-        Endpoint ep = null;
-        try {
-             ep = cp.getEndpoint(req.getServletPath(), req.getPathInfo());
-        } catch (InstantiationException | IllegalAccessException e) {
-            // This will trigger an error response
-            throw new ServletException(e);
-        }
-
-        ServerEndpointConfiguration epConfig =
-                (ServerEndpointConfiguration) ep.getEndpointConfiguration();
+        ServerEndpointConfiguration<?> sec = cp.getServerEndpointConfiguration(
+                req.getServletPath(), req.getPathInfo());
 
         // Origin check
         String origin = req.getHeader("Origin");
-        if (!epConfig.checkOrigin(origin)) {
+        if (!sec.checkOrigin(origin)) {
             resp.sendError(HttpServletResponse.SC_FORBIDDEN);
             return;
         }
@@ -112,14 +104,14 @@ public class WsServlet extends HttpServlet {
         List<String> subProtocols =
                 getTokensFromHeader(req, "Sec-WebSocket-Protocol");
         if (!subProtocols.isEmpty()) {
-            subProtocol = epConfig.getNegotiatedSubprotocol(subProtocols);
+            subProtocol = sec.getNegotiatedSubprotocol(subProtocols);
         }
 
         // Extensions
         List<String> requestedExtensions =
                 getTokensFromHeader(req, "Sec-WebSocket-Extensions");
         if (!extensions.isEmpty()) {
-            extensions = epConfig.getNegotiatedExtensions(requestedExtensions);
+            extensions = sec.getNegotiatedExtensions(requestedExtensions);
         }
 
         // If we got this far, all is good. Accept the connection.
@@ -141,6 +133,7 @@ public class WsServlet extends HttpServlet {
             resp.setHeader("Sec-WebSocket-Extensions", sb.toString());
         }
 
+        Endpoint ep = (Endpoint) sec.getEndpointFactory().createEndpoint();
         ProtocolHandler wsHandler = new WsProtocolHandler(ep);
 
         req.upgrade(wsHandler);

==================================================
