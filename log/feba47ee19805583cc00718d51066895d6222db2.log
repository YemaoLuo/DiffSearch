feba47ee19805583cc00718d51066895d6222db2
==================================================
Remove unused code (FieldOrMethod)
==================================================
Mark Emlyn
==================================================
Thu Sep 11 09:13:47 2014 +0000
==================================================
ClassParser.java
Remove unused code (FieldOrMethod)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624233 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FieldOrMethod.java
index 6e51d3b6b3..872bf8a0c2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -48,8 +48,6 @@ public final class ClassParser {
     private int access_flags; // Access rights of parsed class
     private int[] interfaces; // Names of implemented interfaces
     private ConstantPool constant_pool; // collection of constants
-    private FieldOrMethod[] fields; // class fields, i.e., its variables
-    private FieldOrMethod[] methods; // methods defined in the class
     private Attribute[] attributes; // attributes defined in the class
     private static final int BUFSIZE = 8192;
 
@@ -177,9 +175,8 @@ public final class ClassParser {
     private void readFields() throws IOException, ClassFormatException {
         int fields_count;
         fields_count = file.readUnsignedShort();
-        fields = new FieldOrMethod[fields_count];
         for (int i = 0; i < fields_count; i++) {
-            fields[i] = new FieldOrMethod(file, constant_pool);
+            Utility.swallowFieldOrMethod(file, constant_pool);
         }
     }
 
@@ -221,9 +218,8 @@ public final class ClassParser {
     private void readMethods() throws IOException, ClassFormatException {
         int methods_count;
         methods_count = file.readUnsignedShort();
-        methods = new FieldOrMethod[methods_count];
         for (int i = 0; i < methods_count; i++) {
-            methods[i] = new FieldOrMethod(file, constant_pool);
+            Utility.swallowFieldOrMethod(file, constant_pool);
         }
     }
 

==================================================
Utility.java
deleted file mode 100644
index 74572b782d..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/FieldOrMethod.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-
-import org.apache.tomcat.util.bcel.Constants;
-import org.apache.tomcat.util.bcel.util.BCELComparator;
-
-/**
- * Class for fields and methods.
- *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public class FieldOrMethod extends AccessFlags {
-
-    private static final long serialVersionUID = -3383525930205542157L;
-    private static BCELComparator _cmp = new BCELComparator() {
-
-        @Override
-        public boolean equals( Object o1, Object o2 ) {
-            FieldOrMethod THIS = (FieldOrMethod) o1;
-            FieldOrMethod THAT = (FieldOrMethod) o2;
-            return THIS.getName().equals(THAT.getName())
-                    && THIS.getSignature().equals(THAT.getSignature());
-        }
-
-
-        @Override
-        public int hashCode( Object o ) {
-            FieldOrMethod THIS = (FieldOrMethod) o;
-            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();
-        }
-    };
-
-    protected int name_index; // Points to field name in constant pool
-    protected int signature_index; // Points to encoded signature
-    protected int attributes_count; // No. of attributes
-    protected Attribute[] attributes; // Collection of attributes
-
-    protected ConstantPool constant_pool;
-
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     * @throws IOException
-     * @throws ClassFormatException
-     */
-    protected FieldOrMethod(DataInputStream file, ConstantPool constant_pool) throws IOException,
-            ClassFormatException {
-        this.access_flags = file.readUnsignedShort();
-        this.name_index = file.readUnsignedShort();
-        this.signature_index = file.readUnsignedShort();
-        this.constant_pool = constant_pool;
-
-        attributes_count = file.readUnsignedShort();
-        attributes = new Attribute[attributes_count];
-        for (int i = 0; i < attributes_count; i++) {
-            attributes[i] = Attribute.readAttribute(file, constant_pool);
-        }
-    }
-
-
-    /**
-     * @param attributes Collection of object attributes.
-     */
-    public final void setAttributes( Attribute[] attributes ) {
-        this.attributes = attributes;
-        attributes_count = (attributes == null) ? 0 : attributes.length;
-    }
-
-
-    /**
-     * @return Name of object, i.e., method name or field name
-     */
-    public final String getName() {
-        ConstantUtf8 c;
-        c = (ConstantUtf8) constant_pool.getConstant(name_index, Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-
-    /**
-     * @return String representation of object's type signature (java style)
-     */
-    public final String getSignature() {
-        ConstantUtf8 c;
-        c = (ConstantUtf8) constant_pool.getConstant(signature_index, Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default two FieldOrMethod objects are said to be equal when
-     * their names and signatures are equal.
-     *
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals( Object obj ) {
-        return _cmp.equals(this, obj);
-    }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default return the hashcode of the FieldOrMethod's name XOR signature.
-     *
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        return _cmp.hashCode(this);
-    }
-}

==================================================
