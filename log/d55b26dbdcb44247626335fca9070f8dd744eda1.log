d55b26dbdcb44247626335fca9070f8dd744eda1
==================================================
Ensure everything still works if a non-default name is used for the default SSL virtual host
==================================================
Mark Thomas
==================================================
Thu May 7 13:53:48 2015 +0000
==================================================
AbstractHttp11Protocol.java
Ensure everything still works if a non-default name is used for the default SSL virtual host

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1678207 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractEndpoint.java
index 49a9940444..c43b29dc77 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -329,14 +329,16 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
 
 
     // ----------------------------------------------- HTTPS specific properties
-    // -------------------------------------------- Handled via an SSLHostConfig
+    // ------------------------------------------ passed through to the EndPoint
 
-    private String defaultSSLHostConfigName = SSLHostConfig.DEFAULT_SSL_HOST_NAME;
     public String getDefaultSSLHostConfigName() {
-        return defaultSSLHostConfigName;
+        return getEndpoint().getDefaultSSLHostConfigName();
     }
     public void setDefaultSSLHostConfigName(String defaultSSLHostConfigName) {
-        this.defaultSSLHostConfigName = defaultSSLHostConfigName;
+        getEndpoint().setDefaultSSLHostConfigName(defaultSSLHostConfigName);
+        if (defaultSSLHostConfig != null) {
+            defaultSSLHostConfig.setHostName(defaultSSLHostConfigName);
+        }
     }
 
 
@@ -346,6 +348,9 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    // ----------------------------------------------- HTTPS specific properties
+    // -------------------------------------------- Handled via an SSLHostConfig
+
     private SSLHostConfig defaultSSLHostConfig = null;
     private void registerDefaultSSLHostConfig() {
         if (defaultSSLHostConfig == null) {

==================================================
AprEndpoint.java
index 2688c228a0..62ee84b6c9 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -213,6 +213,15 @@ public abstract class AbstractEndpoint<S> {
 
     // ----------------------------------------------------------------- Properties
 
+    private String defaultSSLHostConfigName = SSLHostConfig.DEFAULT_SSL_HOST_NAME;
+    public String getDefaultSSLHostConfigName() {
+        return defaultSSLHostConfigName;
+    }
+    public void setDefaultSSLHostConfigName(String defaultSSLHostConfigName) {
+        this.defaultSSLHostConfigName = defaultSSLHostConfigName;
+    }
+
+
     protected Map<String,SSLHostConfig> sslHostConfigs = new ConcurrentHashMap<>();
     public void addSslHostConfig(SSLHostConfig sslHostConfig) {
         String key = sslHostConfig.getHostName();
@@ -245,7 +254,7 @@ public abstract class AbstractEndpoint<S> {
 
         // Fall-back. Use the default
         if (result == null) {
-            result = sslHostConfigs.get(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
+            result = sslHostConfigs.get(getDefaultSSLHostConfigName());
         }
         if (result == null) {
             // Should never happen.

==================================================
SSLHostConfig.java
index 9a0155e535..1e5891559e 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -535,7 +535,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                 }
                 sslHostConfig.setSslContext(Long.valueOf(ctx));
             }
-            SSLHostConfig defaultSSLHostConfig = sslHostConfigs.get(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
+            SSLHostConfig defaultSSLHostConfig = sslHostConfigs.get(getDefaultSSLHostConfigName());
             Long defaultSSLContext = (Long) defaultSSLHostConfig.getSslContext();
             sslContext = defaultSSLContext.longValue();
             SSLContext.registerDefault(defaultSSLContext, this);

==================================================
