c5daa0decb168a35aca55cb162b883608648e4ec
==================================================
Refactoring. Pull up readMessage()
==================================================
Mark Emlyn
==================================================
Mon Sep 2 14:35:31 2013 +0000
==================================================
AbstractAjpProcessor.java
Refactoring. Pull up readMessage()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519453 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index 01bebc5cf2..fd578fa5f7 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -800,13 +800,31 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
     protected abstract void setupSocket(SocketWrapper<S> socketWrapper)
             throws IOException;
 
+    protected abstract void setTimeout(SocketWrapper<S> socketWrapper,
+            int timeout) throws IOException;
+
     // Methods called by prepareResponse()
     protected abstract void output(byte[] src, int offset, int length)
             throws IOException;
 
-    // Methods used by process
-    protected abstract void setTimeout(SocketWrapper<S> socketWrapper,
-            int timeout) throws IOException;
+    // Methods used by readMessage
+    /**
+     * Read at least the specified amount of bytes, and place them
+     * in the input buffer. Note that if any data is available to read then this
+     * method will always block until at least the specified number of bytes
+     * have been read.
+     *
+     * @param buf   Buffer to read data into
+     * @param pos   Start position
+     * @param n     The minimum number of bytes to read
+     * @param block If there is no data available to read when this method is
+     *              called, should this call block until data becomes available?
+     * @return  <code>true</code> if the requested number of bytes were read
+     *          else <code>false</code>
+     * @throws IOException
+     */
+    protected abstract boolean read(byte[] buf, int pos, int n, boolean block)
+            throws IOException;
 
     // Methods used by SocketInputBuffer
     /** Receive a chunk of data. Called to implement the
@@ -848,8 +866,40 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
      *
      * @throws IOException any other failure, including incomplete reads
      */
-    protected abstract boolean readMessage(AjpMessage message,
-            boolean blockOnFirstRead) throws IOException;
+    protected boolean readMessage(AjpMessage message, boolean block)
+        throws IOException {
+
+        byte[] buf = message.getBuffer();
+        int headerLength = message.getHeaderLength();
+
+        if (!read(buf, 0, headerLength, block)) {
+            return false;
+        }
+
+        int messageLength = message.processHeader(true);
+        if (messageLength < 0) {
+            // Invalid AJP header signature
+            throw new IOException(sm.getString("ajpmessage.invalidLength",
+                    Integer.valueOf(messageLength)));
+        }
+        else if (messageLength == 0) {
+            // Zero length message.
+            return true;
+        }
+        else {
+            if (messageLength > message.getBuffer().length) {
+                // Message too long for the buffer
+                // Need to trigger a 400 response
+                throw new IllegalArgumentException(sm.getString(
+                        "ajpprocessor.header.tooLong",
+                        Integer.valueOf(messageLength),
+                        Integer.valueOf(buf.length)));
+            }
+            read(buf, headerLength, messageLength, true);
+            return true;
+        }
+    }
+
 
     @Override
     public final boolean isComet() {

==================================================
AjpNioProcessor.java
index 37c89c65cb..5a970bd707 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -182,18 +182,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     }
 
 
-    /**
-     * Read at least the specified amount of bytes, and place them
-     * in the input buffer. Note that if any data is available to read then this
-     * method will always block until at least the specified number of bytes
-     * have been read.
-     *
-     * @param n     The minimum number of bytes to read
-     * @param block If there is no data available to read when this method is
-     *              called, should this call block until data becomes available?
-     * @return
-     * @throws IOException
-     */
+    @Override
     protected boolean read(byte[] buf, int pos, int n, boolean block)
             throws IOException {
 
@@ -275,42 +264,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     }
 
 
-    @Override
-    protected boolean readMessage(AjpMessage message, boolean block)
-        throws IOException {
-
-        byte[] buf = message.getBuffer();
-        int headerLength = message.getHeaderLength();
-
-        if (!read(buf, 0, headerLength, block)) {
-            return false;
-        }
-
-        int messageLength = message.processHeader(true);
-        if (messageLength < 0) {
-            // Invalid AJP header signature
-            throw new IOException(sm.getString("ajpmessage.invalidLength",
-                    Integer.valueOf(messageLength)));
-        }
-        else if (messageLength == 0) {
-            // Zero length message.
-            return true;
-        }
-        else {
-            if (messageLength > message.getBuffer().length) {
-                // Message too long for the buffer
-                // Need to trigger a 400 response
-                throw new IllegalArgumentException(sm.getString(
-                        "ajpprocessor.header.tooLong",
-                        Integer.valueOf(messageLength),
-                        Integer.valueOf(buf.length)));
-            }
-            read(buf, headerLength, messageLength, true);
-            return true;
-        }
-    }
-
-
     /**
      * Recycle the processor.
      */

==================================================
AjpProcessor.java
index 89e671f0ea..ddaf84ba9a 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -138,9 +138,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
     }
 
 
-    /**
-     * Read the specified amount of bytes, and place them in the input buffer.
-     */
+    @Override
     protected boolean read(byte[] buf, int pos, int n, boolean blockFirstRead)
         throws IOException {
 
@@ -203,40 +201,4 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
             return 0;
         }
     }
-
-
-    @Override
-    protected boolean readMessage(AjpMessage message, boolean blockFirstRead)
-        throws IOException {
-
-        byte[] buf = message.getBuffer();
-        int headerLength = message.getHeaderLength();
-
-        if (!read(buf, 0, headerLength, blockFirstRead)) {
-            return false;
-        }
-
-        int messageLength = message.processHeader(true);
-        if (messageLength < 0) {
-            // Invalid AJP header signature
-            throw new IOException(sm.getString("ajpmessage.invalidLength",
-                    Integer.valueOf(messageLength)));
-        }
-        else if (messageLength == 0) {
-            // Zero length message.
-            return true;
-        }
-        else {
-            if (messageLength > buf.length) {
-                // Message too long for the buffer
-                // Need to trigger a 400 response
-                throw new IllegalArgumentException(sm.getString(
-                        "ajpprocessor.header.tooLong",
-                        Integer.valueOf(messageLength),
-                        Integer.valueOf(buf.length)));
-            }
-            read(buf, headerLength, messageLength, true);
-            return true;
-        }
-    }
 }

==================================================
