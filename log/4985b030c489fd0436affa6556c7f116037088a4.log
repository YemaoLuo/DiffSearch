4985b030c489fd0436affa6556c7f116037088a4
==================================================
Improve consistency within new resources implementation.
==================================================
Mark Emlyn
==================================================
Tue Jan 8 13:52:45 2013 +0000
==================================================
WebResourceRoot.java
Improve consistency within new resources implementation.
s/webAppPath/webAppMount/
Place same requirements on webAppMount as for path (although internal representation is different).
Add necessary plumbing to do the same for internalPath

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430285 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index 75693b2ddf..4de42bb2a1 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -181,12 +181,13 @@ public interface WebResourceRoot extends Lifecycle {
      * @param type          The type of {@link WebResourceSet} to create
      * @param url           The URL of the resource (must locate a JAR, file or
      *                          directory)
-     * @param webAppPath    The path within the web application that the
-     *                          resources should be published at
+     * @param webAppMount   The path within the web application that the
+     *                          resources should be published at. It must start
+     *                          with '/'.
      * @param internalPath  The path within the resource where the content is to
      *                          be found.
      */
-    void createWebResourceSet(ResourceSetType type, URL url, String webAppPath,
+    void createWebResourceSet(ResourceSetType type, URL url, String webAppMount,
             String internalPath);
 
     /**
@@ -196,7 +197,8 @@ public interface WebResourceRoot extends Lifecycle {
      * @param type          The type of {@link WebResourceSet} to create
      * @param base          The location of the resources
      * @param webAppMount   The path within the web application that the
-     *                          resources should be published at
+     *                          resources should be published at. It must start
+     *                          with '/'.
      * @param internalPath  The path within the resource where the content is to
      *                          be found.
      */

==================================================
ContextConfig.java
index 1137a0c94f..f0073174d2 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -4786,7 +4786,7 @@ public class StandardContext extends ContainerBase
             if (webinfClassesResource.isDirectory()) {
                 getResources().createWebResourceSet(
                         WebResourceRoot.ResourceSetType.RESOURCE_JAR,
-                        webinfClassesResource.getURL(), "", "");
+                        webinfClassesResource.getURL(), "/", "");
             }
         }
 

==================================================
AbstractFileResourceSet.java
index 7a6d5ac5b9..006f39ab84 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1560,7 +1560,7 @@ public class ContextConfig implements LifecycleListener {
                         if (entryName.startsWith("META-INF/resources/")) {
                             context.getResources().createWebResourceSet(
                                     WebResourceRoot.ResourceSetType.RESOURCE_JAR,
-                                    url, "", "META-INF/resources");
+                                    url, "/", "META-INF/resources");
                             break;
                         }
                         jar.nextEntry();
@@ -1572,7 +1572,7 @@ public class ContextConfig implements LifecycleListener {
                     if (resources.isDirectory()) {
                         context.getResources().createWebResourceSet(
                                 WebResourceRoot.ResourceSetType.RESOURCE_JAR,
-                                file.getAbsolutePath(), "", "");
+                                file.getAbsolutePath(), "/", "");
                     }
                 }
             } catch (IOException ioe) {

==================================================
AbstractResourceSet.java
index 28cb4bf7f9..d685116be4 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -32,7 +32,7 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
     protected String canonicalBase;
 
     protected AbstractFileResourceSet(String internalPath) {
-        this.internalPath = internalPath;
+        this.internalPath = checkInternalPath(internalPath);
     }
 
     protected File file(String name, boolean mustExist) {

==================================================
DirResourceSet.java
index 77e6e82d13..a7d9037db5 100644
--- a/java/org/apache/catalina/webresources/AbstractResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractResourceSet.java
@@ -40,6 +40,11 @@ public abstract class AbstractResourceSet extends LifecycleBase
         }
     }
 
+    protected final String checkInternalPath(String internalPath) {
+        //checkPath(internalPath);
+        return internalPath;
+    }
+
     @Override
     public final void setRoot(WebResourceRoot root) {
         this.root = root;
@@ -50,7 +55,13 @@ public abstract class AbstractResourceSet extends LifecycleBase
     }
 
     public final void setWebAppMount(String webAppMount) {
-        this.webAppMount = webAppMount;
+        checkPath(webAppMount);
+        // Optimise internal processing
+        if (webAppMount.equals("/")) {
+            this.webAppMount = "";
+        } else {
+            this.webAppMount = webAppMount;
+        }
     }
 
     public final String getWebAppMount() {

==================================================
JarResourceSet.java
index e790fef8fe..3d263a37ad 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -54,7 +54,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be mounted. For example, to add a directory of
      *                          JARs to a web application, the directory would
-     *                          be mounted at "WEB-INF/lib/"
+     *                          be mounted at "/WEB-INF/lib/"
      * @param internalPath  The path within this new {@link
      *                          org.apache.catalina.WebResourceSet} where
      *                          resources will be served from.
@@ -72,7 +72,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
 
             if (f.isDirectory()) {
                 root.createWebResourceSet(ResourceSetType.RESOURCE_JAR,
-                         f.getAbsolutePath(), "", "");
+                         f.getAbsolutePath(), "/", "");
             }
         }
 

==================================================
StandardRoot.java
index 07a6215d2d..97815af106 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -62,7 +62,7 @@ public class JarResourceSet extends AbstractResourceSet {
         setRoot(root);
         setBase(base);
         setWebAppMount(webAppMount);
-        this.internalPath = internalPath;
+        this.internalPath = checkInternalPath(internalPath);
 
         if (getRoot().getState().isAvailable()) {
             try {

==================================================
TestDirResourceSet.java
index 36276657e6..1233a55e4c 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -223,13 +223,13 @@ public class StandardRoot extends LifecycleMBeanBase
 
     @Override
     public void createWebResourceSet(ResourceSetType type, URL url,
-            String webAppPath, String internalPath) {
-        createWebResourceSet(type, toBase(url), webAppPath, internalPath);
+            String webAppMount, String internalPath) {
+        createWebResourceSet(type, toBase(url), webAppMount, internalPath);
     }
 
     @Override
     public void createWebResourceSet(ResourceSetType type, String base,
-            String webAppPath, String internalPath) {
+            String webAppMount, String internalPath) {
 
         ArrayList<WebResourceSet> resourceList;
         WebResourceSet resourceSet;
@@ -255,15 +255,15 @@ public class StandardRoot extends LifecycleMBeanBase
 
         if (file.isFile()) {
             if (file.getName().toLowerCase(Locale.ENGLISH).endsWith(".jar")) {
-                resourceSet = new JarResourceSet(this, base, webAppPath,
+                resourceSet = new JarResourceSet(this, base, webAppMount,
                         internalPath);
             } else {
-                resourceSet = new FileResourceSet(this, base, webAppPath,
+                resourceSet = new FileResourceSet(this, base, webAppMount,
                         internalPath);
             }
         } else if (file.isDirectory()) {
             resourceSet =
-                    new DirResourceSet(this, base, webAppPath, internalPath);
+                    new DirResourceSet(this, base, webAppMount, internalPath);
         } else {
             throw new IllegalArgumentException(
                     sm.getString("standardRoot.createInvalidFile", file));

==================================================
TestDirResourceSetInternal.java
index 227ca77670..b2509a5ec4 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSet.java
@@ -29,7 +29,7 @@ public class TestDirResourceSet extends AbstractTestResourceSet {
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "", "");
+                        f.getAbsolutePath(), "/", "");
         root.setWebResourceSet(webResourceSet);
         return root;
     }

==================================================
TestFileResourceSet.java
index b9e94dc019..797b8e51bc 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
@@ -29,7 +29,7 @@ public class TestDirResourceSetInternal extends TestDirResourceSet {
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "", "webresources/dir1");
+                        f.getAbsolutePath(), "/", "webresources/dir1");
         root.setWebResourceSet(webResourceSet);
         return root;
     }

==================================================
TestJarResourceSet.java
index 342799c2c2..db87a4882c 100644
--- a/test/org/apache/catalina/webresources/TestFileResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestFileResourceSet.java
@@ -29,7 +29,7 @@ public class TestFileResourceSet extends AbstractTestResourceSet {
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "", "");
+                        f.getAbsolutePath(), "/", "");
         root.setWebResourceSet(webResourceSet);
 
         WebResourceSet f1 = new FileResourceSet(root,

==================================================
TestJarResourceSetInternal.java
index 11bcc7e816..0412bf9774 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSet.java
@@ -28,7 +28,7 @@ public class TestJarResourceSet extends AbstractTestResourceSet {
         File f = new File("test/webresources/dir1.jar");
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new JarResourceSet(root, f.getAbsolutePath(), "", "");
+                new JarResourceSet(root, f.getAbsolutePath(), "/", "");
         root.setWebResourceSet(webResourceSet);
         return root;
     }

==================================================
