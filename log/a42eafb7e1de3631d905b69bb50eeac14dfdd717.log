a42eafb7e1de3631d905b69bb50eeac14dfdd717
==================================================
- Fix possible (very rare) corruption doing keepalive after a Comet request.
==================================================
Remy Maucherat
==================================================
Wed May 7 16:00:44 2014 +0000
==================================================
Http11Nio2Processor.java
- Fix possible (very rare) corruption doing keepalive after a Comet request.
- Stop ignoring read pending exceptions.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1593047 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNio2InputBuffer.java
index e332c8a932..39a600a08f 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -132,7 +132,9 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
             if (keepAlive) {
                 inputBuffer.nextRequest();
                 outputBuffer.nextRequest();
-                return SocketState.OPEN;
+                // Following Comet processing, a read is still pending, so
+                // keep the processor associated
+                return SocketState.LONG;
             } else {
                 return SocketState.CLOSED;
             }

==================================================
Nio2Endpoint.java
index 4ee7cb9a28..5dcef72014 100644
--- a/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
@@ -21,7 +21,6 @@ import java.io.IOException;
 import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
 import java.nio.channels.CompletionHandler;
-import java.nio.channels.ReadPendingException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -265,12 +264,8 @@ public class InternalNio2InputBuffer extends AbstractNioInputBuffer<Nio2Channel>
                         flipped = false;
                         readPending = true;
                         Nio2Endpoint.startInline();
-                        try {
-                            socket.getSocket().read(byteBuffer, socket.getTimeout(),
+                        socket.getSocket().read(byteBuffer, socket.getTimeout(),
                                     TimeUnit.MILLISECONDS, socket, completionHandler);
-                        } catch (ReadPendingException e) {
-                            // Ignore ?
-                        }
                         Nio2Endpoint.endInline();
                         // Return the number of bytes that have been placed into the buffer
                         if (!readPending) {

==================================================
