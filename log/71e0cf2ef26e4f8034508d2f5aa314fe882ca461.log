71e0cf2ef26e4f8034508d2f5aa314fe882ca461
==================================================
Address a few more SpotBugs warnings
==================================================
Mark Thomas
==================================================
Fri Dec 1 20:35:35 2017 +0000
==================================================
ExpandWar.java
Address a few more SpotBugs warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816905 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Tomcat.java
index 6983dd28f6..29075c18b6 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -81,9 +81,11 @@ engineConfig.start=EngineConfig: Processing START
 engineConfig.stop=EngineConfig: Processing STOP
 expandWar.copy=Error copying [{0}] to [{1}]
 expandWar.createFailed=Unable to create the directory [{0}]
+expandWar.createFileFailed=Unable to create the file [{0}]
 expandWar.deleteFailed=[{0}] could not be completely deleted. The presence of the remaining files may cause problems
 expandWar.deleteOld=An expanded directory [{0}] was found with a last modified time that did not match the associated WAR. It will be deleted.
 expandWar.illegalPath=The archive [{0}] is malformed and will be ignored: an entry contains an illegal path [{1}] which was not expanded to [{2}] since that is outside of the defined docBase [{3}]
+expandWar.lastModifiedFailed=Unable to set the last modified time for [{0}]
 expandWar.missingJarEntry=Cannot get input stream for JarEntry [{0}] - broken WAR file?
 failedContext.start=Failed to process either the global, per-host or context-specific context.xml file therefore the [{0}] Context cannot be started.
 hostConfig.appBase=Application base [{1}] for host [{0}] does not exist or is not a directory. deployOnStartUp and autoDeploy have been set to false to prevent deployment errors. Other errors may still occur.
@@ -126,6 +128,7 @@ hostConfig.undeployVersion=Undeploying old version of context [{0}] which has no
 passwdUserDatabase.readFail=Failed to obtain a complete set of users from /etc/passwd
 tomcat.baseDirNotDir=The location [{0}] specified for the base directory is not a directory
 tomcat.baseDirMakeFail=Unable to create the directory [{0}] to use as the base directory
+tomcat.homeDirMakeFail=Unable to create the directory [{0}] to use as the home directory
 userConfig.database=Exception loading user database
 userConfig.deploy=Deploying web application for user [{0}]
 userConfig.deploying=Deploying user web applications

==================================================
MemoryUserDatabase.java
index 17ff13ae8b..10b2894180 100644
--- a/java/org/apache/catalina/users/LocalStrings.properties
+++ b/java/org/apache/catalina/users/LocalStrings.properties
@@ -14,6 +14,7 @@
 # limitations under the License.
 
 memoryUserDatabase.fileNotFound=The specified user database [{0}] could not be found
+memoryUserDatabase.fileDelete=Failed to delete [{0}]
 memoryUserDatabase.notPersistable=User database is not persistable - no write permissions on directory
 memoryUserDatabase.nullGroup=Null or zero length group name specified. The group will be ignored.
 memoryUserDatabase.nullRole=Null or zero length role name specified. The role will be ignored.
@@ -21,5 +22,6 @@ memoryUserDatabase.nullUser=Null or zero length user name specified. The user wi
 memoryUserDatabase.readOnly=User database has been configured to be read only. Changes cannot be saved
 memoryUserDatabase.renameOld=Cannot rename original file to [{0}]
 memoryUserDatabase.renameNew=Cannot rename new file to [{0}]
+memoryUserDatabase.restoreOrig=Cannot restore [{0} to original file
 memoryUserDatabase.writeException=IOException writing to [{0}]
 memoryUserDatabase.xmlFeatureEncoding=Exception configuring digester to permit java encoding names in XML files. Only IANA encoding names will be supported.

==================================================
URLEncoder.java
index 4f3c2b5331..37aab0497a 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -504,16 +504,12 @@ public class MemoryUserDatabase implements UserDatabase {
         // Write out contents to a temporary file
         File fileNew = new File(pathnameNew);
         if (!fileNew.isAbsolute()) {
-            fileNew =
-                new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathnameNew);
+            fileNew = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathnameNew);
         }
-        PrintWriter writer = null;
-        try {
 
-            // Configure our PrintWriter
-            FileOutputStream fos = new FileOutputStream(fileNew);
-            OutputStreamWriter osw = new OutputStreamWriter(fos, "UTF8");
-            writer = new PrintWriter(osw);
+        try (FileOutputStream fos = new FileOutputStream(fileNew);
+                OutputStreamWriter osw = new OutputStreamWriter(fos, "UTF8");
+                PrintWriter writer = new PrintWriter(osw)) {
 
             // Print the file prolog
             writer.println("<?xml version='1.0' encoding='utf-8'?>");
@@ -545,51 +541,46 @@ public class MemoryUserDatabase implements UserDatabase {
 
             // Check for errors that occurred while printing
             if (writer.checkError()) {
-                writer.close();
-                fileNew.delete();
-                throw new IOException
-                    (sm.getString("memoryUserDatabase.writeException",
-                                  fileNew.getAbsolutePath()));
+                throw new IOException(sm.getString("memoryUserDatabase.writeException",
+                        fileNew.getAbsolutePath()));
             }
-            writer.close();
         } catch (IOException e) {
-            if (writer != null) {
-                writer.close();
+            if (fileNew.exists() && !fileNew.delete()) {
+                log.warn(sm.getString("memoryUserDatabase.fileDelete", fileNew));
             }
-            fileNew.delete();
             throw e;
         }
 
         // Perform the required renames to permanently save this file
         File fileOld = new File(pathnameOld);
         if (!fileOld.isAbsolute()) {
-            fileOld =
-                new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathnameOld);
+            fileOld = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathnameOld);
+        }
+        if (fileOld.exists() && !fileOld.delete()) {
+            throw new IOException(sm.getString("memoryUserDatabase.fileDelete", fileOld));
         }
-        fileOld.delete();
         File fileOrig = new File(pathname);
         if (!fileOrig.isAbsolute()) {
-            fileOrig =
-                new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
+            fileOrig = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
         }
         if (fileOrig.exists()) {
-            fileOld.delete();
             if (!fileOrig.renameTo(fileOld)) {
-                throw new IOException
-                    (sm.getString("memoryUserDatabase.renameOld",
-                                  fileOld.getAbsolutePath()));
+                throw new IOException(sm.getString("memoryUserDatabase.renameOld",
+                        fileOld.getAbsolutePath()));
             }
         }
         if (!fileNew.renameTo(fileOrig)) {
             if (fileOld.exists()) {
-                fileOld.renameTo(fileOrig);
+                if (!fileOld.renameTo(fileOrig)) {
+                    log.warn(sm.getString("memoryUserDatabase.restoreOrig", fileOld));
+                }
             }
-            throw new IOException
-                (sm.getString("memoryUserDatabase.renameNew",
-                              fileOrig.getAbsolutePath()));
+            throw new IOException(sm.getString("memoryUserDatabase.renameNew",
+                    fileOrig.getAbsolutePath()));
+        }
+        if (fileOld.exists() && !fileOld.delete()) {
+            throw new IOException(sm.getString("memoryUserDatabase.fileDelete", fileOld));
         }
-        fileOld.delete();
-
     }
 
 

==================================================
RewriteValve.java
index 83d2390d38..f23dc4009e 100644
--- a/java/org/apache/catalina/util/URLEncoder.java
+++ b/java/org/apache/catalina/util/URLEncoder.java
@@ -34,7 +34,7 @@ import java.util.BitSet;
  * @author Craig R. McClanahan
  * @author Remy Maucherat
  */
-public class URLEncoder implements Cloneable {
+public final class URLEncoder implements Cloneable {
 
     private static final char[] hexadecimal =
             {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

==================================================
StreamELResolverImpl.java
index 618451c293..ad74bd1d14 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -523,18 +523,18 @@ public class RewriteValve extends ValveBase {
                     }
                     request.getMappingData().recycle();
                     // Reinvoke the whole request recursively
+                    Connector connector = request.getConnector();
                     try {
-                        Connector connector = request.getConnector();
                         if (!connector.getProtocolHandler().getAdapter().prepare(
                                 request.getCoyoteRequest(), response.getCoyoteResponse())) {
                             return;
                         }
-                        Pipeline pipeline = connector.getService().getContainer().getPipeline();
-                        request.setAsyncSupported(pipeline.isAsyncSupported());
-                        pipeline.getFirst().invoke(request, response);
                     } catch (Exception e) {
                         // This doesn't actually happen in the Catalina adapter implementation
                     }
+                    Pipeline pipeline = connector.getService().getContainer().getPipeline();
+                    request.setAsyncSupported(pipeline.isAsyncSupported());
+                    pipeline.getFirst().invoke(request, response);
                 }
             } else {
                 getNext().invoke(request, response);

==================================================
