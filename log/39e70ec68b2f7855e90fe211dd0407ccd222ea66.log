39e70ec68b2f7855e90fe211dd0407ccd222ea66
==================================================
Fix indents. No functional change.
==================================================
Mark Thomas
==================================================
Fri Jun 17 19:21:35 2022 +0100
==================================================
JMXGetTask.java
Fix indents. No functional change.

o.a.catalina.[ant|authenticator]


==================================================
JMXQueryTask.java
index 833aebcb7c..fd0ba47ff4 100644
--- a/java/org/apache/catalina/ant/JMXGetTask.java
+++ b/java/org/apache/catalina/ant/JMXGetTask.java
@@ -86,8 +86,7 @@ public class JMXGetTask extends AbstractCatalinaTask {
     public void execute() throws BuildException {
         super.execute();
         if (bean == null || attribute == null) {
-            throw new BuildException
-                ("Must specify 'bean' and 'attribute' attributes");
+            throw new BuildException("Must specify 'bean' and 'attribute' attributes");
         }
         log("Getting attribute " + attribute +
                 " in bean " + bean );
@@ -95,8 +94,7 @@ public class JMXGetTask extends AbstractCatalinaTask {
             execute("/jmxproxy/?get=" + URLEncoder.encode(bean, getCharset())
                     + "&att=" + URLEncoder.encode(attribute, getCharset()));
         } catch (UnsupportedEncodingException e) {
-            throw new BuildException
-                ("Invalid 'charset' attribute: " + getCharset());
+            throw new BuildException("Invalid 'charset' attribute: " + getCharset());
         }
     }
 }

==================================================
JMXSetTask.java
index 8c5fe43d2a..d239efb98e 100644
--- a/java/org/apache/catalina/ant/JMXQueryTask.java
+++ b/java/org/apache/catalina/ant/JMXQueryTask.java
@@ -79,8 +79,7 @@ public class JMXQueryTask extends AbstractCatalinaTask {
             try {
                 queryString = "?qry=" + URLEncoder.encode(query, getCharset());
             } catch (UnsupportedEncodingException e) {
-                throw new BuildException
-                    ("Invalid 'charset' attribute: " + getCharset());
+                throw new BuildException("Invalid 'charset' attribute: " + getCharset());
             }
         }
         log("Query string is " + queryString);

==================================================
ResourcesTask.java
index 135ae5e083..547669aef7 100644
--- a/java/org/apache/catalina/ant/JMXSetTask.java
+++ b/java/org/apache/catalina/ant/JMXSetTask.java
@@ -107,8 +107,7 @@ public class JMXSetTask extends AbstractCatalinaTask {
     public void execute() throws BuildException {
         super.execute();
         if (bean == null || attribute == null || value == null) {
-            throw new BuildException
-                ("Must specify 'bean', 'attribute' and 'value' attributes");
+            throw new BuildException("Must specify 'bean', 'attribute' and 'value' attributes");
         }
         log("Setting attribute " + attribute +
                             " in bean " + bean +
@@ -118,8 +117,7 @@ public class JMXSetTask extends AbstractCatalinaTask {
                     + "&att=" + URLEncoder.encode(attribute, getCharset())
                     + "&val=" + URLEncoder.encode(value, getCharset()));
         } catch (UnsupportedEncodingException e) {
-            throw new BuildException
-                ("Invalid 'charset' attribute: " + getCharset());
+            throw new BuildException("Invalid 'charset' attribute: " + getCharset());
         }
     }
 }

==================================================
JMXAccessorCondition.java
index 1e9f9da584..b8b6c46be6 100644
--- a/java/org/apache/catalina/ant/ResourcesTask.java
+++ b/java/org/apache/catalina/ant/ResourcesTask.java
@@ -68,8 +68,7 @@ public class ResourcesTask extends AbstractCatalinaTask {
                 execute("/resources?type=" +
                         URLEncoder.encode(type, getCharset()));
             } catch (UnsupportedEncodingException e) {
-                throw new BuildException
-                    ("Invalid 'charset' attribute: " + getCharset());
+                throw new BuildException("Invalid 'charset' attribute: " + getCharset());
             }
         } else {
             execute("/resources");

==================================================
JMXAccessorCreateTask.java
index 4ac07c3a46..37e2e6a762 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorCondition.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorCondition.java
@@ -225,5 +225,5 @@ public class JMXAccessorCondition extends JMXAccessorConditionBase {
         }
         return true;
     }
- }
+}
 

==================================================
JMXAccessorGetTask.java
index bff4b42498..9c5fc961a5 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorCreateTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorCreateTask.java
@@ -126,7 +126,7 @@ public class JMXAccessorCreateTask extends JMXAccessorTask {
         }
         jmxCreate(jmxServerConnection, getName());
         return null;
-     }
+    }
 
     /**
      * Create new MBean from ClassLoader identified by an ObjectName.
@@ -140,19 +140,19 @@ public class JMXAccessorCreateTask extends JMXAccessorTask {
         Object argsA[] = null;
         String sigA[] = null;
         if (args != null) {
-           argsA = new Object[ args.size()];
-           sigA = new String[args.size()];
-           for( int i=0; i<args.size(); i++ ) {
-               Arg arg=args.get(i);
-               if (arg.getType() == null) {
-                   arg.setType("java.lang.String");
-                   sigA[i]=arg.getType();
-                   argsA[i]=arg.getValue();
-               } else {
-                   sigA[i]=arg.getType();
-                   argsA[i]=convertStringToType(arg.getValue(),arg.getType());
-               }
-           }
+            argsA = new Object[ args.size()];
+            sigA = new String[args.size()];
+            for( int i=0; i<args.size(); i++ ) {
+                Arg arg=args.get(i);
+                if (arg.getType() == null) {
+                    arg.setType("java.lang.String");
+                    sigA[i]=arg.getType();
+                    argsA[i]=arg.getValue();
+                } else {
+                    sigA[i]=arg.getType();
+                    argsA[i]=convertStringToType(arg.getValue(),arg.getType());
+                }
+            }
         }
         if (classLoader != null && !classLoader.isEmpty()) {
             if (isEcho()) {

==================================================
JMXAccessorInvokeTask.java
index 16fadedb11..541abf2b0b 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorGetTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorGetTask.java
@@ -90,7 +90,7 @@ public class JMXAccessorGetTask extends JMXAccessorTask {
                     "Must specify a 'attribute' for get");
         }
         return  jmxGet(jmxServerConnection, getName());
-     }
+    }
 
 
     /**

==================================================
JMXAccessorSetTask.java
index 8477be187f..daf5013743 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorInvokeTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorInvokeTask.java
@@ -141,7 +141,7 @@ public class JMXAccessorInvokeTask extends JMXAccessorTask {
                     "Must specify a 'operation' for call");
         }
         return  jmxInvoke(jmxServerConnection, getName());
-     }
+    }
 
     /**
      * Invoke specified operation.
@@ -154,8 +154,7 @@ public class JMXAccessorInvokeTask extends JMXAccessorTask {
     protected String jmxInvoke(MBeanServerConnection jmxServerConnection, String name) throws Exception {
         Object result ;
         if (args == null) {
-             result = jmxServerConnection.invoke(new ObjectName(name),
-                    operation, null, null);
+            result = jmxServerConnection.invoke(new ObjectName(name), operation, null, null);
         } else {
             Object argsA[]=new Object[ args.size()];
             String sigA[]=new String[args.size()];

==================================================
JMXAccessorUnregisterTask.java
index 9b160e646b..c870f92c24 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorSetTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorSetTask.java
@@ -138,7 +138,7 @@ public class JMXAccessorSetTask extends JMXAccessorTask {
                     "Must specify a 'attribute' and 'value' for set");
         }
         return  jmxSet(jmxServerConnection, getName());
-     }
+    }
 
     /**
      * Set property value.
@@ -192,4 +192,4 @@ public class JMXAccessorSetTask extends JMXAccessorTask {
         }
         return mattrType;
     }
- }
+}

==================================================
DigestAuthenticator.java
index ba1ac1ee3d..1226d5e9a9 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorUnregisterTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorUnregisterTask.java
@@ -61,7 +61,7 @@ public class JMXAccessorUnregisterTask extends JMXAccessorTask {
             throw new BuildException("Must specify a 'name'");
         }
         return  jmxUuregister(jmxServerConnection, getName());
-     }
+    }
 
 
     /**

==================================================
