25d6062fa042302ede76f9c1fdc8a6562a402723
==================================================
Servlet 4.0
==================================================
Mark Thomas
==================================================
Tue May 23 13:53:57 2017 +0000
==================================================
HttpServletMapping.java
Servlet 4.0
Rename ServletMapping -> HttpServletMapping

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1795915 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequest.java
similarity index 97%
rename from java/javax/servlet/http/ServletMapping.java
rename to java/javax/servlet/http/HttpServletMapping.java
index 36e4e6b6f3..5fd6604120 100644
--- a/java/javax/servlet/http/ServletMapping.java
+++ b/java/javax/servlet/http/HttpServletMapping.java
@@ -24,7 +24,7 @@ import javax.servlet.annotation.WebServlet;
  *
  * @since 4.0
  */
-public interface ServletMapping {
+public interface HttpServletMapping {
 
     /**
      * @return The value that was matched or the empty String if not known.

==================================================
HttpServletRequestWrapper.java
index 7ac03c0c60..5cea570239 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -172,8 +172,8 @@ public interface HttpServletRequest extends ServletRequest {
      */
     public int getIntHeader(String name);
 
-    public default ServletMapping getServletMapping() {
-        return new ServletMapping() {
+    public default HttpServletMapping getHttpServletMapping() {
+        return new HttpServletMapping() {
 
             @Override
             public String getMatchValue() {

==================================================
Request.java
index ecd84da54d..a37032b4c9 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -120,8 +120,8 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * wrapped request object.
      */
     @Override
-    public ServletMapping getServletMapping() {
-        return this._getHttpServletRequest().getServletMapping();
+    public HttpServletMapping getHttpServletMapping() {
+        return this._getHttpServletRequest().getHttpServletMapping();
     }
 
     /**

==================================================
RequestFacade.java
index 7e935a2834..3cd790cb1f 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -58,6 +58,7 @@ import javax.servlet.ServletRequestAttributeListener;
 import javax.servlet.ServletResponse;
 import javax.servlet.SessionTrackingMode;
 import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpServletResponse;
@@ -65,7 +66,6 @@ import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.Part;
 import javax.servlet.http.PushBuilder;
-import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
@@ -2243,8 +2243,8 @@ public class Request implements HttpServletRequest {
 
 
     @Override
-    public ServletMapping getServletMapping() {
-        return applicationMapping.getServletMapping();
+    public HttpServletMapping getHttpServletMapping() {
+        return applicationMapping.getHttpServletMapping();
     }
 
 

==================================================
ApplicationContext.java
index b9fdc16e03..34ec80c096 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -34,13 +34,13 @@ import javax.servlet.ServletInputStream;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.Part;
 import javax.servlet.http.PushBuilder;
-import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Globals;
 import org.apache.catalina.security.SecurityUtil;
@@ -738,14 +738,14 @@ public class RequestFacade implements HttpServletRequest {
 
 
     @Override
-    public ServletMapping getServletMapping() {
+    public HttpServletMapping getHttpServletMapping() {
 
         if (request == null) {
             throw new IllegalStateException(
                             sm.getString("requestFacade.nullRequest"));
         }
 
-        return request.getServletMapping();
+        return request.getHttpServletMapping();
     }
 
 

==================================================
ApplicationDispatcher.java
index 0186923aa4..c76a403479 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -52,10 +52,10 @@ import javax.servlet.ServletRequestListener;
 import javax.servlet.SessionCookieConfig;
 import javax.servlet.SessionTrackingMode;
 import javax.servlet.descriptor.JspConfigDescriptor;
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.HttpSessionAttributeListener;
 import javax.servlet.http.HttpSessionIdListener;
 import javax.servlet.http.HttpSessionListener;
-import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
@@ -482,7 +482,7 @@ public class ApplicationContext implements ServletContext {
         Wrapper wrapper = mappingData.wrapper;
         String wrapperPath = mappingData.wrapperPath.toString();
         String pathInfo = mappingData.pathInfo.toString();
-        ServletMapping mapping = new ApplicationMapping(mappingData).getServletMapping();
+        HttpServletMapping mapping = new ApplicationMapping(mappingData).getHttpServletMapping();
 
         mappingData.recycle();
 

==================================================
ApplicationHttpRequest.java
index 08dacc66e1..285d7b0429 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -33,9 +33,9 @@ import javax.servlet.ServletRequestWrapper;
 import javax.servlet.ServletResponse;
 import javax.servlet.ServletResponseWrapper;
 import javax.servlet.UnavailableException;
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.AsyncDispatcher;
 import org.apache.catalina.Context;
@@ -207,7 +207,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
      */
     public ApplicationDispatcher
         (Wrapper wrapper, String requestURI, String servletPath,
-         String pathInfo, String queryString, ServletMapping mapping, String name) {
+         String pathInfo, String queryString, HttpServletMapping mapping, String name) {
 
         super();
 
@@ -264,7 +264,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
     /**
      * The mapping for this RequestDispatcher.
      */
-    private final ServletMapping mapping;
+    private final HttpServletMapping mapping;
 
 
     /**
@@ -368,7 +368,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
                                       hrequest.getPathInfo());
                 wrequest.setAttribute(RequestDispatcher.FORWARD_QUERY_STRING,
                                       hrequest.getQueryString());
-                wrequest.setAttribute(RequestDispatcher.FORWARD_MAPPING, hrequest.getServletMapping());
+                wrequest.setAttribute(RequestDispatcher.FORWARD_MAPPING, hrequest.getHttpServletMapping());
             }
 
             wrequest.setContextPath(context.getPath());
@@ -616,7 +616,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
 
         wrequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR, DispatcherType.ASYNC);
         wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR, getCombinedPath());
-        wrequest.setAttribute(AsyncContext.ASYNC_MAPPING, hrequest.getServletMapping());
+        wrequest.setAttribute(AsyncContext.ASYNC_MAPPING, hrequest.getHttpServletMapping());
 
         wrequest.setContextPath(context.getPath());
         wrequest.setRequestURI(requestURI);

==================================================
ApplicationMapping.java
index 46f40918dd..0276e62d4f 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -33,11 +33,11 @@ import java.util.NoSuchElementException;
 import javax.servlet.DispatcherType;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletContext;
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpSession;
 import javax.servlet.http.PushBuilder;
-import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
@@ -193,7 +193,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     /**
      * The mapping for this request.
      */
-    private ServletMapping mapping = null;
+    private HttpServletMapping mapping = null;
 
 
     /**
@@ -492,7 +492,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
 
     @Override
-    public ServletMapping getServletMapping() {
+    public HttpServletMapping getHttpServletMapping() {
         return mapping;
     }
 
@@ -676,7 +676,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         queryString = request.getQueryString();
         requestURI = request.getRequestURI();
         servletPath = request.getServletPath();
-        mapping = request.getServletMapping();
+        mapping = request.getHttpServletMapping();
     }
 
 
@@ -735,7 +735,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     }
 
 
-    void setMapping(ServletMapping mapping) {
+    void setMapping(HttpServletMapping mapping) {
         this.mapping = mapping;
     }
 

==================================================
TestApplicationMapping.java
index 42a5865c99..11ea404f98 100644
--- a/java/org/apache/catalina/core/ApplicationMapping.java
+++ b/java/org/apache/catalina/core/ApplicationMapping.java
@@ -16,8 +16,8 @@
  */
 package org.apache.catalina.core;
 
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.MappingMatch;
-import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.mapper.MappingData;
 
@@ -25,13 +25,13 @@ public class ApplicationMapping {
 
     private final MappingData mappingData;
 
-    private volatile ServletMapping mapping = null;
+    private volatile HttpServletMapping mapping = null;
 
     public ApplicationMapping(MappingData mappingData) {
         this.mappingData = mappingData;
     }
 
-    public ServletMapping getServletMapping() {
+    public HttpServletMapping getHttpServletMapping() {
         if (mapping == null) {
             String servletName;
             if (mappingData.wrapper == null) {
@@ -79,7 +79,7 @@ public class ApplicationMapping {
         mapping = null;
     }
 
-    private static class MappingImpl implements ServletMapping {
+    private static class MappingImpl implements HttpServletMapping {
 
         private final String matchValue;
         private final String pattern;

==================================================
TesterHttpServletRequest.java
index b3a8382e91..a7deabf285 100644
--- a/test/org/apache/catalina/core/TestApplicationMapping.java
+++ b/test/org/apache/catalina/core/TestApplicationMapping.java
@@ -23,9 +23,9 @@ import javax.servlet.AsyncContext;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.ServletMapping;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -340,13 +340,13 @@ public class TestApplicationMapping extends TomcatBaseTest {
                 throws ServletException, IOException {
             resp.setContentType("text/plain;charset=UTF-8");
             PrintWriter pw = resp.getWriter();
-            ServletMapping mapping = req.getServletMapping();
+            HttpServletMapping mapping = req.getHttpServletMapping();
             pw.println("MatchValue=[" + mapping.getMatchValue() + "]");
             pw.println("Pattern=[" + mapping.getPattern() + "]");
             pw.println("MatchType=[" + mapping.getMappingMatch() + "]");
             pw.println("ServletName=[" + mapping.getServletName() + "]");
-            ServletMapping includeMapping =
-                    (ServletMapping) req.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
+            HttpServletMapping includeMapping =
+                    (HttpServletMapping) req.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
             if (includeMapping != null) {
                 pw.println("IncludeMatchValue=[" + includeMapping.getMatchValue() + "]");
                 pw.println("IncludePattern=[" + includeMapping.getPattern() + "]");
@@ -354,16 +354,16 @@ public class TestApplicationMapping extends TomcatBaseTest {
                 pw.println("IncludeServletName=[" + includeMapping.getServletName() + "]");
 
             }
-            ServletMapping forwardMapping =
-                    (ServletMapping) req.getAttribute(RequestDispatcher.FORWARD_MAPPING);
+            HttpServletMapping forwardMapping =
+                    (HttpServletMapping) req.getAttribute(RequestDispatcher.FORWARD_MAPPING);
             if (forwardMapping != null) {
                 pw.println("ForwardMatchValue=[" + forwardMapping.getMatchValue() + "]");
                 pw.println("ForwardPattern=[" + forwardMapping.getPattern() + "]");
                 pw.println("ForwardMatchType=[" + forwardMapping.getMappingMatch() + "]");
                 pw.println("ForwardServletName=[" + forwardMapping.getServletName() + "]");
             }
-            ServletMapping asyncMapping =
-                    (ServletMapping) req.getAttribute(AsyncContext.ASYNC_MAPPING);
+            HttpServletMapping asyncMapping =
+                    (HttpServletMapping) req.getAttribute(AsyncContext.ASYNC_MAPPING);
             if (asyncMapping != null) {
                 pw.println("AsyncMatchValue=[" + asyncMapping.getMatchValue() + "]");
                 pw.println("AsyncPattern=[" + asyncMapping.getPattern() + "]");

==================================================
