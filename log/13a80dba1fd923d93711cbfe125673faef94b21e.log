13a80dba1fd923d93711cbfe125673faef94b21e
==================================================
Remove the now unnecessary per implementation AjpProcessor classes.
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:50:44 2014 +0000
==================================================
AbstractAjpProtocol.java
Remove the now unnecessary per implementation AjpProcessor classes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641282 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index e331d593ef..aa8d3eb9b1 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -76,7 +76,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         }
     }
 
-    protected void configureProcessor(AbstractAjpProcessor<S> processor) {
+    protected void configureProcessor(AjpProcessor<S> processor) {
         processor.setAdapter(getAdapter());
         processor.setTomcatAuthentication(getTomcatAuthentication());
         processor.setRequiredSecret(requiredSecret);
@@ -84,8 +84,8 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         processor.setClientCertProvider(getClientCertProvider());
     }
 
-    protected abstract static class AbstractAjpConnectionHandler<S,P extends AbstractAjpProcessor<S>>
-            extends AbstractConnectionHandler<S, P> {
+    protected abstract static class AbstractAjpConnectionHandler<S>
+            extends AbstractConnectionHandler<S,AjpProcessor<S>> {
 
         @Override
         protected void initSsl(SocketWrapperBase<S> socket, Processor<S> processor) {
@@ -100,8 +100,8 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         }
 
         @Override
-        protected P createUpgradeProcessor(SocketWrapperBase<S> socket, ByteBuffer leftoverInput,
-                HttpUpgradeHandler httpUpgradeHandler) {
+        protected AjpProcessor<S> createUpgradeProcessor(SocketWrapperBase<S> socket,
+                ByteBuffer leftoverInput, HttpUpgradeHandler httpUpgradeHandler) {
             // TODO should fail - throw IOE
             return null;
         }

==================================================
AjpAprProtocol.java
deleted file mode 100644
index 5585eeeccf..0000000000
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.ajp;
-
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AprEndpoint;
-
-/**
- * Processes AJP requests.
- *
- * @author Remy Maucherat
- * @author Henri Gomez
- * @author Dan Milstein
- * @author Keith Wannamaker
- * @author Kevin Seguin
- * @author Costin Manolache
- */
-public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
-
-    private static final Log log = LogFactory.getLog(AjpAprProcessor.class);
-    @Override
-    protected Log getLog() {
-        return log;
-    }
-
-
-    public AjpAprProcessor(int packetSize, AprEndpoint endpoint) {
-        super(packetSize, endpoint);
-    }
-}

==================================================
AjpNio2Processor.java
index 3e1478e684..75835251ca 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -103,7 +103,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
 
     protected static class AjpConnectionHandler
-            extends AbstractAjpConnectionHandler<Long,AjpAprProcessor>
+            extends AbstractAjpConnectionHandler<Long>
             implements Handler {
 
         protected final AjpAprProtocol proto;
@@ -141,8 +141,8 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
 
         @Override
-        protected AjpAprProcessor createProcessor() {
-            AjpAprProcessor processor = new AjpAprProcessor(proto.packetSize, (AprEndpoint)proto.endpoint);
+        protected AjpProcessor<Long> createProcessor() {
+            AjpProcessor<Long> processor = new AjpProcessor<>(proto.packetSize, proto.endpoint);
             proto.configureProcessor(processor);
             register(processor);
             return processor;

==================================================
AjpNio2Protocol.java
deleted file mode 100644
index 1d34bde70f..0000000000
--- a/java/org/apache/coyote/ajp/AjpNio2Processor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.ajp;
-
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.Nio2Channel;
-import org.apache.tomcat.util.net.Nio2Endpoint;
-
-/**
- * Processes AJP requests using NIO2.
- */
-public class AjpNio2Processor extends AbstractAjpProcessor<Nio2Channel> {
-
-    private static final Log log = LogFactory.getLog(AjpNio2Processor.class);
-    @Override
-    protected Log getLog() {
-        return log;
-    }
-
-    public AjpNio2Processor(int packetSize, Nio2Endpoint endpoint0) {
-        super(packetSize, endpoint0);
-    }
-}

==================================================
AjpNioProcessor.java
index ed568525b1..d0ee967e57 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -86,7 +86,7 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
 
     protected static class AjpConnectionHandler
-            extends AbstractAjpConnectionHandler<Nio2Channel, AjpNio2Processor>
+            extends AbstractAjpConnectionHandler<Nio2Channel>
             implements Handler {
 
         protected final AjpNio2Protocol proto;
@@ -143,8 +143,8 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
         }
 
         @Override
-        protected AjpNio2Processor createProcessor() {
-            AjpNio2Processor processor = new AjpNio2Processor(proto.packetSize, (Nio2Endpoint) proto.endpoint);
+        protected AjpProcessor<Nio2Channel> createProcessor() {
+            AjpProcessor<Nio2Channel> processor = new AjpProcessor<>(proto.packetSize, proto.endpoint);
             proto.configureProcessor(processor);
             register(processor);
             return processor;

==================================================
AjpNioProtocol.java
deleted file mode 100644
index d341ba5201..0000000000
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.ajp;
-
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.NioChannel;
-import org.apache.tomcat.util.net.NioEndpoint;
-
-/**
- * Processes AJP requests using NIO.
- */
-public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
-
-    private static final Log log = LogFactory.getLog(AjpNioProcessor.class);
-    @Override
-    protected Log getLog() {
-        return log;
-    }
-
-
-    public AjpNioProcessor(int packetSize, NioEndpoint endpoint) {
-        super(packetSize, endpoint);
-    }
-}

==================================================
AjpProcessor.java
index a79013eb8d..5f052cb7b2 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -89,7 +89,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
 
 
     protected static class AjpConnectionHandler
-            extends AbstractAjpConnectionHandler<NioChannel, AjpNioProcessor>
+            extends AbstractAjpConnectionHandler<NioChannel>
             implements Handler {
 
         protected final AjpNioProtocol proto;
@@ -171,8 +171,8 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
 
 
         @Override
-        protected AjpNioProcessor createProcessor() {
-            AjpNioProcessor processor = new AjpNioProcessor(proto.packetSize, (NioEndpoint)proto.endpoint);
+        protected AjpProcessor<NioChannel> createProcessor() {
+            AjpProcessor<NioChannel> processor = new AjpProcessor<>(proto.packetSize, proto.endpoint);
             proto.configureProcessor(processor);
             register(processor);
             return processor;

==================================================
