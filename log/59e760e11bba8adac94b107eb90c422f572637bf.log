59e760e11bba8adac94b107eb90c422f572637bf
==================================================
Fix a theoretical problem where the connection count could exceed the limit during shutdown.
==================================================
Mark Thomas
==================================================
Thu Apr 13 13:50:22 2017 +0000
==================================================
AbstractEndpoint.java
Fix a theoretical problem where the connection count could exceed the limit during shutdown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791253 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Acceptor.java
index 279213614c..ed086f50aa 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -986,6 +986,7 @@ public abstract class AbstractEndpoint<S,U> {
     public void pause() {
         if (running && !paused) {
             paused = true;
+            releaseConnectionLatch();
             unlockAccept();
             getHandler().pause();
         }
@@ -1026,7 +1027,7 @@ public abstract class AbstractEndpoint<S,U> {
         return connectionLimitLatch;
     }
 
-    protected void releaseConnectionLatch() {
+    private void releaseConnectionLatch() {
         LimitLatch latch = connectionLimitLatch;
         if (latch!=null) latch.releaseAll();
         connectionLimitLatch = null;

==================================================
AprEndpoint.java
index e3c9463b33..72c1cf3e65 100644
--- a/java/org/apache/tomcat/util/net/Acceptor.java
+++ b/java/org/apache/tomcat/util/net/Acceptor.java
@@ -82,6 +82,12 @@ public class Acceptor<U> implements Runnable {
                 //if we have reached max connections, wait
                 endpoint.countUpOrAwaitConnection();
 
+                // Endpoint might have been paused while waiting for latch
+                // If that is the case, don't accept new connections
+                if (endpoint.isPaused()) {
+                    continue;
+                }
+
                 U socket = null;
                 try {
                     // Accept the next incoming connection from the server

==================================================
Nio2Endpoint.java
index 41234e7866..1723f32c27 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -625,7 +625,6 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
      */
     @Override
     public void stopInternal() {
-        releaseConnectionLatch();
         if (!paused) {
             pause();
         }

==================================================
NioEndpoint.java
index a80739fa27..41c8ae3eae 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -190,7 +190,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
      */
     @Override
     public void stopInternal() {
-        releaseConnectionLatch();
         if (!paused) {
             pause();
         }

==================================================
