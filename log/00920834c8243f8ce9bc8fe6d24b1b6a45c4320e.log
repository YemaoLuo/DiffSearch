00920834c8243f8ce9bc8fe6d24b1b6a45c4320e
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61229
==================================================
Mark Thomas
==================================================
Thu Jun 29 20:02:59 2017 +0000
==================================================
WebdavServlet.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61229
Correct a regression in 9.0.0.M21 that broke WebDAV handling for resources with names that included a '&' character.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800309 13f79535-47bb-0310-9956-ffa450edef68



==================================================
URLEncoder.java
index 653cdf3094..8445676d40 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -44,6 +44,7 @@ import org.apache.catalina.WebResource;
 import org.apache.catalina.connector.RequestFacade;
 import org.apache.catalina.util.ConcurrentDateFormat;
 import org.apache.catalina.util.DOMWriter;
+import org.apache.catalina.util.URLEncoder;
 import org.apache.catalina.util.XMLWriter;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
@@ -119,14 +120,22 @@ import org.xml.sax.SAXException;
  *
  * @author Remy Maucherat
  */
-public class WebdavServlet
-    extends DefaultServlet {
+public class WebdavServlet extends DefaultServlet {
 
     private static final long serialVersionUID = 1L;
 
 
     // -------------------------------------------------------------- Constants
 
+    private static final URLEncoder URL_ENCODER_XML;
+    static {
+        URL_ENCODER_XML = (URLEncoder) URLEncoder.DEFAULT.clone();
+        // Remove '&' from the safe character set since while it it permitted
+        // in a URI path, it is not permitted in XML and encoding it is a simple
+        // way to address this.
+        URL_ENCODER_XML.removeSafeCharacter('&');
+    }
+
     private static final String METHOD_PROPFIND = "PROPFIND";
     private static final String METHOD_PROPPATCH = "PROPPATCH";
     private static final String METHOD_MKCOL = "MKCOL";
@@ -379,6 +388,18 @@ public class WebdavServlet
     }
 
 
+    /**
+     * URL rewriter.
+     *
+     * @param path Path which has to be rewritten
+     * @return the rewritten path
+     */
+    @Override
+    protected String rewriteUrl(String path) {
+        return URL_ENCODER_XML.encode(path, StandardCharsets.UTF_8);
+    }
+
+
     /**
      * Override the DefaultServlet implementation and only use the PathInfo. If
      * the ServletPath is non-null, it will be because the WebDAV servlet has

==================================================
TestURLEncoder.java
index beec013cf6..83d2390d38 100644
--- a/java/org/apache/catalina/util/URLEncoder.java
+++ b/java/org/apache/catalina/util/URLEncoder.java
@@ -34,10 +34,10 @@ import java.util.BitSet;
  * @author Craig R. McClanahan
  * @author Remy Maucherat
  */
-public class URLEncoder {
+public class URLEncoder implements Cloneable {
+
     private static final char[] hexadecimal =
-    {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
-     'A', 'B', 'C', 'D', 'E', 'F'};
+            {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
 
     public static final URLEncoder DEFAULT = new URLEncoder();
     public static final URLEncoder QUERY = new URLEncoder();
@@ -99,12 +99,14 @@ public class URLEncoder {
     }
 
     //Array containing the safe characters set.
-    private final BitSet safeCharacters = new BitSet(256);
+    private final BitSet safeCharacters;
 
     private boolean encodeSpaceAsPlus = false;
 
 
     public URLEncoder() {
+        this(new BitSet(256));
+
         for (char i = 'a'; i <= 'z'; i++) {
             addSafeCharacter(i);
         }
@@ -117,8 +119,18 @@ public class URLEncoder {
     }
 
 
-    public void addSafeCharacter( char c ) {
-        safeCharacters.set( c );
+    private URLEncoder(BitSet safeCharacters) {
+        this.safeCharacters = safeCharacters;
+    }
+
+
+    public void addSafeCharacter(char c) {
+        safeCharacters.set(c);
+    }
+
+
+    public void removeSafeCharacter(char c) {
+        safeCharacters.clear(c);
     }
 
 
@@ -172,4 +184,12 @@ public class URLEncoder {
         }
         return rewrittenPath.toString();
     }
+
+
+    @Override
+    public Object clone() {
+        URLEncoder result = new URLEncoder((BitSet) safeCharacters.clone());
+        result.setEncodeSpaceAsPlus(encodeSpaceAsPlus);
+        return result;
+    }
 }

==================================================
