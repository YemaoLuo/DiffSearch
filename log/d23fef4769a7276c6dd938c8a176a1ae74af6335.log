d23fef4769a7276c6dd938c8a176a1ae74af6335
==================================================
Fix Eclipse warnings in unit tests
==================================================
Mark Emlyn
==================================================
Thu Oct 25 08:29:22 2012 +0000
==================================================
TestSendFile.java
Fix Eclipse warnings in unit tests

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1402018 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TesterResponse.java
index e2332b05ac..5af01ce2a0 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -131,20 +131,21 @@ public class TestSendFile extends TomcatBaseTest{
                 req.setAttribute(Globals.SENDFILE_FILE_END_ATTR, new Long(f.length()));
             } else {
                 byte[] c = new byte[8192];
-                BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));
-                int len = 0;
-                int written = 0;
-                long start = System.currentTimeMillis();
-                do {
-                    len = in.read(c);
-                    if (len>0) {
-                        resp.getOutputStream().write(c,0,len);
-                        written += len;
-                    }
-                } while (len > 0);
-                System.out.println("Server Wrote "+written + " bytes in "+(System.currentTimeMillis()-start)+" ms.");
+                try (BufferedInputStream in = new BufferedInputStream(
+                        new FileInputStream(f))) {
+                    int len = 0;
+                    int written = 0;
+                    long start = System.currentTimeMillis();
+                    do {
+                        len = in.read(c);
+                        if (len>0) {
+                            resp.getOutputStream().write(c,0,len);
+                            written += len;
+                        }
+                    } while (len > 0);
+                    System.out.println("Server Wrote "+written + " bytes in "+(System.currentTimeMillis()-start)+" ms.");
+                }
             }
-
         }
     }
 

==================================================
BytesStreamer.java
index 390f96bb81..034e4046e8 100644
--- a/test/org/apache/catalina/filters/TesterResponse.java
+++ b/test/org/apache/catalina/filters/TesterResponse.java
@@ -82,15 +82,12 @@ public class TesterResponse
     public void setError() {/* NOOP */}
     public boolean isError() { return false; }
     /**
-     *
-     * @return
      * @throws IOException
      */
     public ServletOutputStream createOutputStream() throws IOException {
         return null;
     }
     /**
-     *
      * @throws IOException
      */
     public void finishResponse() throws IOException {/* NOOP */}
@@ -100,7 +97,6 @@ public class TesterResponse
     public PrintWriter getReporter() { return null; }
     public void recycle() {/* NOOP */}
     /**
-     *
      * @param b
      * @throws IOException
      */
@@ -108,7 +104,6 @@ public class TesterResponse
         // NOOP
     }
     /**
-     *
      * @param b
      * @throws IOException
      */
@@ -116,7 +111,6 @@ public class TesterResponse
         // NOOP
     }
     /**
-     *
      * @param b
      * @param off
      * @param len

==================================================
TestListener.java
index 30e57a5697..05fac0d491 100644
--- a/test/org/apache/catalina/startup/BytesStreamer.java
+++ b/test/org/apache/catalina/startup/BytesStreamer.java
@@ -24,22 +24,20 @@ package org.apache.catalina.startup;
  */
 public interface BytesStreamer {
     /**
-     * Returns the length of the content about to be streamed.
-     * Return -1 if length is unknown and chunked encoding should be used
-     * @return the length if known - otherwise -1
+     * Get the length of the content about to be streamed.
+     *
+     * @return the length if known, else -1 and chucked encoding should be used
      */
     int getLength();
 
     /**
-     * return the number of bytes available in next chunk
-     * @return
+     * @return  the number of bytes available in next chunk
      */
     int available();
 
     /**
-     * returns the next byte to write.
-     * if {@link #available()} method returns >0
-     * @return
+     * @return  returns the next byte to write if {@link #available()} returns
+     *          > 0
      */
     byte[] next();
 }

==================================================
SocketReceive.java
index 91c48d970a..e5a40a0f6a 100644
--- a/test/org/apache/catalina/startup/TestListener.java
+++ b/test/org/apache/catalina/startup/TestListener.java
@@ -52,7 +52,7 @@ public class TestListener extends TomcatBaseTest {
 
     /**
      * Check that a {@link ServletContextListener} cannot install a
-     * {@link ServletContextInitializer}.
+     * {@link ServletContainerInitializer}.
      * @throws Exception
      */
     @Test

==================================================
SocketSend.java
index 6dc58d4d26..fc746c0e06 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketReceive.java
@@ -35,47 +35,54 @@ public class SocketReceive {
 
     public static void main(String[] args) throws Exception {
 
-        ServerSocket srvSocket = new ServerSocket(9999);
-        System.out.println("Listening on 9999");
-        Socket socket = srvSocket.accept();
-        socket.setReceiveBufferSize(43800);
-        InputStream in = socket.getInputStream();
-        Thread t = new Thread() {
-            @Override
-            public void run() {
-                while ( true ) {
-                    try {
-                        Thread.sleep(1000);
-                        printStats(start, mb, count, df, total);
-                    }catch ( Exception x ) {
-                        // Ignore
+        try (ServerSocket srvSocket = new ServerSocket(9999)) {
+            System.out.println("Listening on 9999");
+            Socket socket = srvSocket.accept();
+            socket.setReceiveBufferSize(43800);
+            InputStream in = socket.getInputStream();
+            Thread t = new Thread() {
+                @Override
+                public void run() {
+                    while ( true ) {
+                        try {
+                            Thread.sleep(1000);
+                            printStats(start, mb, count, df, total);
+                        }catch ( Exception x ) {
+                            // Ignore
+                        }
                     }
                 }
-            }
-        };
-        t.setDaemon(true);
-        t.start();
+            };
+            t.setDaemon(true);
+            t.start();
 
-        while ( true ) {
-            if ( first ) { first = false; start = System.currentTimeMillis();}
-            int len = in.read(buf);
-            if ( len == -1 ) {
-                printStats(start, mb, count, df, total);
-                System.exit(1);
-            }
-            if ( bytes.intValue() != len ) bytes = new BigDecimal((double)len);
-            total = total.add(bytes);
-            mb += ( (double) len) / 1024 / 1024;
-            if ( ((++count) % 10000) == 0 ) {
-                printStats(start, mb, count, df, total);
+            while ( true ) {
+                if ( first ) {
+                    first = false; start = System.currentTimeMillis();
+                }
+                int len = in.read(buf);
+                if ( len == -1 ) {
+                    printStats(start, mb, count, df, total);
+                    System.exit(1);
+                }
+                if ( bytes.intValue() != len ) {
+                    bytes = new BigDecimal((double)len);
+                }
+                total = total.add(bytes);
+                mb += ( (double) len) / 1024 / 1024;
+                if ( ((++count) % 10000) == 0 ) {
+                    printStats(start, mb, count, df, total);
+                }
             }
         }
-
     }
 
-    private static void printStats(long start, double mb, int count, DecimalFormat df, BigDecimal total) {
+    private static void printStats(long start, double mb, int count,
+            DecimalFormat df, BigDecimal total) {
         long time = System.currentTimeMillis();
         double seconds = ((double)(time-start))/1000;
-        System.out.println("Throughput "+df.format(mb/seconds)+" MB/seconds messages "+count+", total "+mb+" MB, total "+total+" bytes.");
+        System.out.println("Throughput " + df.format(mb/seconds) +
+                " MB/seconds messages " + count + ", total " + mb +
+                " MB, total " + total + " bytes.");
     }
 }
\ No newline at end of file

==================================================
SocketTribesReceive.java
index 3cf4caa339..1e072866f3 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketSend.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketSend.java
@@ -43,28 +43,32 @@ public class SocketSend {
         System.out.println("Message size:"+len+" bytes");
         BigDecimal total = new BigDecimal((double)0);
         BigDecimal bytes = new BigDecimal((double)len);
-        Socket socket = new Socket("localhost",9999);
-        System.out.println("Writing to 9999");
-        OutputStream out = socket.getOutputStream();
-        long start = 0;
-        double mb = 0;
-        boolean first = true;
-        int count = 0;
-        DecimalFormat df = new DecimalFormat("##.00");
-        while ( count<1000000 ) {
-            if ( first ) { first = false; start = System.currentTimeMillis();}
-            out.write(buf,0,buf.length);
-            mb += ( (double) buf.length) / 1024 / 1024;
-            total = total.add(bytes);
-            if ( ((++count) % 10000) == 0 ) {
-                long time = System.currentTimeMillis();
-                double seconds = ((double)(time-start))/1000;
-                System.out.println("Throughput "+df.format(mb/seconds)+" MB/seconds messages "+count+", total "+mb+" MB, total "+total+" bytes.");
+        try (Socket socket = new Socket("localhost",9999)) {
+            System.out.println("Writing to 9999");
+            OutputStream out = socket.getOutputStream();
+            long start = 0;
+            double mb = 0;
+            boolean first = true;
+            int count = 0;
+            DecimalFormat df = new DecimalFormat("##.00");
+            while ( count<1000000 ) {
+                if ( first ) {
+                    first = false; start = System.currentTimeMillis();
+                }
+                out.write(buf,0,buf.length);
+                mb += ( (double) buf.length) / 1024 / 1024;
+                total = total.add(bytes);
+                if ( ((++count) % 10000) == 0 ) {
+                    long time = System.currentTimeMillis();
+                    double seconds = ((double)(time-start))/1000;
+                    System.out.println("Throughput " + df.format(mb/seconds) +
+                            " MB/seconds messages " + count + ", total " + mb +
+                            " MB, total " + total + " bytes.");
+                }
             }
+            out.flush();
+            System.out.println("Complete, sleeping 5 seconds");
+            Thread.sleep(5000);
         }
-        out.flush();
-        System.out.println("Complete, sleeping 5 seconds");
-        Thread.sleep(5000);
-
     }
 }

==================================================
SocketValidateReceive.java
index 2034812b72..5534cc093b 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketTribesReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketTribesReceive.java
@@ -38,52 +38,65 @@ public class SocketTribesReceive {
 
     public static void main(String[] args) throws Exception {
         int size = 43800;
-        if (args.length > 0 ) try {size=Integer.parseInt(args[0]);}catch(Exception x){ /* Ignore */ }
+        if (args.length > 0 ) {
+            try {
+                size = Integer.parseInt(args[0]);
+            } catch (Exception e){
+                /* Ignore */
+            }
+        }
         XByteBuffer xbuf = new XByteBuffer(43800,true);
-        ServerSocket srvSocket = new ServerSocket(9999);
-        System.out.println("Listening on 9999");
-        Socket socket = srvSocket.accept();
-        socket.setReceiveBufferSize(size);
-        InputStream in = socket.getInputStream();
-        Thread t = new Thread() {
-            @Override
-            public void run() {
-                while ( true ) {
-                    try {
-                        Thread.sleep(1000);
-                        printStats(start, mb, count, df, total);
-                    }catch ( Exception x ) { /* Ignore */ }
+        try (ServerSocket srvSocket = new ServerSocket(9999)) {
+            System.out.println("Listening on 9999");
+            Socket socket = srvSocket.accept();
+            socket.setReceiveBufferSize(size);
+            InputStream in = socket.getInputStream();
+            Thread t = new Thread() {
+                @Override
+                public void run() {
+                    while ( true ) {
+                        try {
+                            Thread.sleep(1000);
+                            printStats(start, mb, count, df, total);
+                        }catch ( Exception x ) { /* Ignore */ }
+                    }
                 }
-            }
-        };
-        t.setDaemon(true);
-        t.start();
+            };
+            t.setDaemon(true);
+            t.start();
 
-        while ( true ) {
-            if ( first ) { first = false; start = System.currentTimeMillis();}
-            int len = in.read(buf);
-            if ( len == -1 ) {
-                printStats(start, mb, count, df, total);
-                System.exit(1);
-            }
-            xbuf.append(buf,0,len);
-            if ( bytes.intValue() != len ) bytes = new BigDecimal((double)len);
-            total = total.add(bytes);
-            while ( xbuf.countPackages(true) > 0 ) {
-                xbuf.extractPackage(true);
-                count++;
-            }
-            mb += ( (double) len) / 1024 / 1024;
-            if ( ((count) % 10000) == 0 ) {
-                printStats(start, mb, count, df, total);
+            while ( true ) {
+                if ( first ) {
+                    first = false; start = System.currentTimeMillis();
+                }
+                int len = in.read(buf);
+                if ( len == -1 ) {
+                    printStats(start, mb, count, df, total);
+                    System.exit(1);
+                }
+                xbuf.append(buf,0,len);
+                if ( bytes.intValue() != len ) {
+                    bytes = new BigDecimal((double)len);
+                }
+                total = total.add(bytes);
+                while ( xbuf.countPackages(true) > 0 ) {
+                    xbuf.extractPackage(true);
+                    count++;
+                }
+                mb += ( (double) len) / 1024 / 1024;
+                if ( ((count) % 10000) == 0 ) {
+                    printStats(start, mb, count, df, total);
+                }
             }
         }
-
     }
 
-    private static void printStats(long start, double mb, int count, DecimalFormat df, BigDecimal total) {
+    private static void printStats(long start, double mb, int count,
+            DecimalFormat df, BigDecimal total) {
         long time = System.currentTimeMillis();
         double seconds = ((double)(time-start))/1000;
-        System.out.println("Throughput "+df.format(mb/seconds)+" MB/seconds messages "+count+", total "+mb+" MB, total "+total+" bytes.");
+        System.out.println("Throughput " + df.format(mb/seconds) +
+                " MB/seconds messages " + count + ", total " + mb +
+                " MB, total " + total + " bytes.");
     }
 }
\ No newline at end of file

==================================================
