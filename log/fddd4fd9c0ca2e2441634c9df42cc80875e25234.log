fddd4fd9c0ca2e2441634c9df42cc80875e25234
==================================================
Rename javax.el.* to jakarta.el.*
==================================================
Mark Thomas
==================================================
Wed Nov 27 23:45:15 2019 +0000
==================================================
ArrayELResolver.java
index 133fb74dd1..821ba8c145 100644
--- a/build.xml
+++ b/build.xml
@@ -344,7 +344,7 @@
   </patternset>
 
   <patternset id="files.el-api">
-    <include name="javax/el/**" />
+    <include name="jakarta/el/**" />
   </patternset>
 
   <patternset id="files.websocket-api">
@@ -1493,6 +1493,7 @@
            includeantruntime="true">
       <classpath refid="tomcat.test.classpath" />
       <include name="org/apache/**" />
+      <include name="jakarta/**" />
       <include name="javax/**" />
       <include name="util/**" />
       <!-- Exclude these by default as Gump can't run them because the -->
@@ -1949,7 +1950,7 @@ Apache Tomcat ${version} native binaries for Win64 AMD64/EMT64 platform.
         <path location="${ant.core.lib}"/>
       </classpath>
     </javadoc>
-    <javadoc packagenames="javax.el.*"
+    <javadoc packagenames="jakarta.el.*"
       sourcepath="${tomcat.dist}/src/java"
       destdir="${tomcat.dist}/webapps/docs/elapi"
       version="true"

==================================================
BeanELResolver.java
similarity index 99%
rename from java/javax/el/ArrayELResolver.java
rename to java/jakarta/el/ArrayELResolver.java
index d500e85688..49839b538d 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/jakarta/el/ArrayELResolver.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.lang.reflect.Array;

==================================================
BeanNameELResolver.java
similarity index 99%
rename from java/javax/el/BeanELResolver.java
rename to java/jakarta/el/BeanELResolver.java
index 5e93032593..21a1af0abb 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.beans.BeanInfo;
 import java.beans.FeatureDescriptor;

==================================================
BeanNameResolver.java
similarity index 99%
rename from java/javax/el/BeanNameELResolver.java
rename to java/jakarta/el/BeanNameELResolver.java
index 0e7b48dee6..4dac0422a4 100644
--- a/java/javax/el/BeanNameELResolver.java
+++ b/java/jakarta/el/BeanNameELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;

==================================================
CompositeELResolver.java
similarity index 99%
rename from java/javax/el/BeanNameResolver.java
rename to java/jakarta/el/BeanNameResolver.java
index abe0356046..fbf60f31ef 100644
--- a/java/javax/el/BeanNameResolver.java
+++ b/java/jakarta/el/BeanNameResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 /**
  * Base implementation that provides a minimal default implementation that is

==================================================
ELClass.java
similarity index 99%
rename from java/javax/el/CompositeELResolver.java
rename to java/jakarta/el/CompositeELResolver.java
index f28f528cf2..afcdbcdf26 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/jakarta/el/CompositeELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;

==================================================
ELContext.java
similarity index 98%
rename from java/javax/el/ELClass.java
rename to java/jakarta/el/ELClass.java
index 8e2338de4b..0d003029ec 100644
--- a/java/javax/el/ELClass.java
+++ b/java/jakarta/el/ELClass.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 /**
  * @since EL 3.0

==================================================
ELContextEvent.java
similarity index 99%
rename from java/javax/el/ELContext.java
rename to java/jakarta/el/ELContext.java
index 46f0564057..aae67a487f 100644
--- a/java/javax/el/ELContext.java
+++ b/java/jakarta/el/ELContext.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.ArrayList;
 import java.util.Deque;

==================================================
ELContextListener.java
similarity index 98%
rename from java/javax/el/ELContextEvent.java
rename to java/jakarta/el/ELContextEvent.java
index 2ec19614ad..5eb3fc67a3 100644
--- a/java/javax/el/ELContextEvent.java
+++ b/java/jakarta/el/ELContextEvent.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.util.EventObject;
 

==================================================
ELException.java
similarity index 98%
rename from java/javax/el/ELContextListener.java
rename to java/jakarta/el/ELContextListener.java
index f8701f85c6..95cbca7403 100644
--- a/java/javax/el/ELContextListener.java
+++ b/java/jakarta/el/ELContextListener.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 /**
  * @author Jacob Hookom [jacob/hookom.net]

==================================================
ELManager.java
similarity index 98%
rename from java/javax/el/ELException.java
rename to java/jakarta/el/ELException.java
index 0c26acdef8..18fb61220d 100644
--- a/java/javax/el/ELException.java
+++ b/java/jakarta/el/ELException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 /**
  * Represents any of the exception conditions that can arise during expression

==================================================
ELProcessor.java
similarity index 95%
rename from java/javax/el/ELManager.java
rename to java/jakarta/el/ELManager.java
index c3d60eaed7..362368894c 100644
--- a/java/javax/el/ELManager.java
+++ b/java/jakarta/el/ELManager.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.Method;
 import java.util.Map;
@@ -62,11 +62,11 @@ public class ELManager {
     }
 
     public void importStatic(String staticMemberName)
-            throws javax.el.ELException {
+            throws jakarta.el.ELException {
         getELContext().getImportHandler().importStatic(staticMemberName);
     }
 
-    public void importClass(String className) throws javax.el.ELException {
+    public void importClass(String className) throws jakarta.el.ELException {
         getELContext().getImportHandler().importClass(className);
     }
 

==================================================
ELResolver.java
similarity index 99%
rename from java/javax/el/ELProcessor.java
rename to java/jakarta/el/ELProcessor.java
index 3827168970..6499f497d6 100644
--- a/java/javax/el/ELProcessor.java
+++ b/java/jakarta/el/ELProcessor.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;

==================================================
EvaluationListener.java
similarity index 99%
rename from java/javax/el/ELResolver.java
rename to java/jakarta/el/ELResolver.java
index 6a10cd1709..5c3a928eb0 100644
--- a/java/javax/el/ELResolver.java
+++ b/java/jakarta/el/ELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.Iterator;
 

==================================================
Expression.java
similarity index 98%
rename from java/javax/el/EvaluationListener.java
rename to java/jakarta/el/EvaluationListener.java
index 785ebdad60..a1bb3d0c91 100644
--- a/java/javax/el/EvaluationListener.java
+++ b/java/jakarta/el/EvaluationListener.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 /**
  * @since EL 3.0

==================================================
ExpressionFactory.java
similarity index 98%
rename from java/javax/el/Expression.java
rename to java/jakarta/el/Expression.java
index 56286b0ae8..55e05b9233 100644
--- a/java/javax/el/Expression.java
+++ b/java/jakarta/el/Expression.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.io.Serializable;
 

==================================================
FunctionMapper.java
similarity index 97%
rename from java/javax/el/ExpressionFactory.java
rename to java/jakarta/el/ExpressionFactory.java
index 7bd20d64dc..35253b9dc3 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/jakarta/el/ExpressionFactory.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -48,9 +48,9 @@ public abstract class ExpressionFactory {
         (System.getSecurityManager() != null);
 
     private static final String SERVICE_RESOURCE_NAME =
-        "META-INF/services/javax.el.ExpressionFactory";
+        "META-INF/services/jakarta.el.ExpressionFactory";
 
-    private static final String PROPERTY_NAME = "javax.el.ExpressionFactory";
+    private static final String PROPERTY_NAME = "jakarta.el.ExpressionFactory";
 
     private static final String PROPERTY_FILE;
 
@@ -79,9 +79,9 @@ public abstract class ExpressionFactory {
      * Create a new {@link ExpressionFactory}. The class to use is determined by
      * the following search order:
      * <ol>
-     * <li>services API (META-INF/services/javax.el.ExpressionFactory)</li>
-     * <li>$JRE_HOME/lib/el.properties - key javax.el.ExpressionFactory</li>
-     * <li>javax.el.ExpressionFactory</li>
+     * <li>services API (META-INF/services/jakarta.el.ExpressionFactory)</li>
+     * <li>$JRE_HOME/lib/el.properties - key jakarta.el.ExpressionFactory</li>
+     * <li>jakarta.el.ExpressionFactory</li>
      * <li>Platform default implementation -
      *     org.apache.el.ExpressionFactoryImpl</li>
      * </ol>

==================================================
ImportHandler.java
similarity index 98%
rename from java/javax/el/FunctionMapper.java
rename to java/jakarta/el/FunctionMapper.java
index a36df34bde..036f12b7d2 100644
--- a/java/javax/el/FunctionMapper.java
+++ b/java/jakarta/el/FunctionMapper.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.Method;
 

==================================================
Jre9Compat.java
similarity index 99%
rename from java/javax/el/ImportHandler.java
rename to java/jakarta/el/ImportHandler.java
index cfabd9dff4..cc18f6faa7 100644
--- a/java/javax/el/ImportHandler.java
+++ b/java/jakarta/el/ImportHandler.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -279,7 +279,7 @@ public class ImportHandler {
     }
 
 
-    public void importStatic(String name) throws javax.el.ELException {
+    public void importStatic(String name) throws jakarta.el.ELException {
         int lastPeriod = name.lastIndexOf('.');
 
         if (lastPeriod < 0) {
@@ -341,7 +341,7 @@ public class ImportHandler {
     }
 
 
-    public void importClass(String name) throws javax.el.ELException {
+    public void importClass(String name) throws jakarta.el.ELException {
         int lastPeriodIndex = name.lastIndexOf('.');
 
         if (lastPeriodIndex < 0) {

==================================================
JreCompat.java
similarity index 99%
rename from java/javax/el/Jre9Compat.java
rename to java/jakarta/el/Jre9Compat.java
index b95f93a999..d6ff069414 100644
--- a/java/javax/el/Jre9Compat.java
+++ b/java/jakarta/el/Jre9Compat.java
@@ -14,7 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Method;

==================================================
LambdaExpression.java
similarity index 99%
rename from java/javax/el/JreCompat.java
rename to java/jakarta/el/JreCompat.java
index 1b21af9359..9cd5816137 100644
--- a/java/javax/el/JreCompat.java
+++ b/java/jakarta/el/JreCompat.java
@@ -14,7 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.AccessibleObject;
 

==================================================
ListELResolver.java
similarity index 99%
rename from java/javax/el/LambdaExpression.java
rename to java/jakarta/el/LambdaExpression.java
index 7e9ca064ec..8863ab9228 100644
--- a/java/javax/el/LambdaExpression.java
+++ b/java/jakarta/el/LambdaExpression.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.HashMap;
 import java.util.List;

==================================================
MapELResolver.java
similarity index 100%
rename from java/javax/el/LocalStrings_zh_CN.properties
rename to java/jakarta/el/LocalStrings_zh_CN.properties

==================================================
MethodExpression.java
similarity index 99%
rename from java/javax/el/MapELResolver.java
rename to java/jakarta/el/MapELResolver.java
index abc0e06989..32fede8a6c 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/jakarta/el/MapELResolver.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.ArrayList;

==================================================
MethodInfo.java
similarity index 99%
rename from java/javax/el/MethodExpression.java
rename to java/jakarta/el/MethodExpression.java
index a0a7e697d3..5298495377 100644
--- a/java/javax/el/MethodExpression.java
+++ b/java/jakarta/el/MethodExpression.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public abstract class MethodExpression extends Expression {
 

==================================================
MethodNotFoundException.java
similarity index 98%
rename from java/javax/el/MethodInfo.java
rename to java/jakarta/el/MethodInfo.java
index 2ee7bec696..129a3e0ea0 100644
--- a/java/javax/el/MethodInfo.java
+++ b/java/jakarta/el/MethodInfo.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class MethodInfo {
 

==================================================
PropertyNotFoundException.java
similarity index 98%
rename from java/javax/el/MethodNotFoundException.java
rename to java/jakarta/el/MethodNotFoundException.java
index 8159331695..74446f8346 100644
--- a/java/javax/el/MethodNotFoundException.java
+++ b/java/jakarta/el/MethodNotFoundException.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class MethodNotFoundException extends ELException {
 

==================================================
PropertyNotWritableException.java
similarity index 98%
rename from java/javax/el/PropertyNotFoundException.java
rename to java/jakarta/el/PropertyNotFoundException.java
index 9ed8188cb1..5c4b484c23 100644
--- a/java/javax/el/PropertyNotFoundException.java
+++ b/java/jakarta/el/PropertyNotFoundException.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class PropertyNotFoundException extends ELException {
 

==================================================
ResourceBundleELResolver.java
similarity index 98%
rename from java/javax/el/PropertyNotWritableException.java
rename to java/jakarta/el/PropertyNotWritableException.java
index 30b785778a..63399845e2 100644
--- a/java/javax/el/PropertyNotWritableException.java
+++ b/java/jakarta/el/PropertyNotWritableException.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class PropertyNotWritableException extends ELException {
 

==================================================
StandardELContext.java
similarity index 99%
rename from java/javax/el/ResourceBundleELResolver.java
rename to java/jakarta/el/ResourceBundleELResolver.java
index f9b9723326..aec32d3765 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/jakarta/el/ResourceBundleELResolver.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.ArrayList;

==================================================
StaticFieldELResolver.java
similarity index 99%
rename from java/javax/el/StandardELContext.java
rename to java/jakarta/el/StandardELContext.java
index d313483e50..ae43a7305d 100644
--- a/java/javax/el/StandardELContext.java
+++ b/java/jakarta/el/StandardELContext.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.Method;
 import java.util.HashMap;

==================================================
TypeConverter.java
similarity index 99%
rename from java/javax/el/StaticFieldELResolver.java
rename to java/jakarta/el/StaticFieldELResolver.java
index d6a902770e..c31501d512 100644
--- a/java/javax/el/StaticFieldELResolver.java
+++ b/java/jakarta/el/StaticFieldELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.lang.reflect.Constructor;

==================================================
Util.java
similarity index 98%
rename from java/javax/el/TypeConverter.java
rename to java/jakarta/el/TypeConverter.java
index 6c4d8dc833..8acfddc9d7 100644
--- a/java/javax/el/TypeConverter.java
+++ b/java/jakarta/el/TypeConverter.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;

==================================================
ValueExpression.java
similarity index 99%
rename from java/javax/el/Util.java
rename to java/jakarta/el/Util.java
index 2e06837233..b265c50701 100644
--- a/java/javax/el/Util.java
+++ b/java/jakarta/el/Util.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Array;
@@ -70,7 +70,7 @@ class Util {
             }
         }
         ResourceBundle bundle = ResourceBundle.getBundle(
-                "javax.el.LocalStrings", locale);
+                "jakarta.el.LocalStrings", locale);
         try {
             String template = bundle.getString(name);
             if (props != null) {

==================================================
ValueReference.java
similarity index 99%
rename from java/javax/el/ValueExpression.java
rename to java/jakarta/el/ValueExpression.java
index ffdf8ccaab..528f7c2c5b 100644
--- a/java/javax/el/ValueExpression.java
+++ b/java/jakarta/el/ValueExpression.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public abstract class ValueExpression extends Expression {
 

==================================================
VariableMapper.java
similarity index 98%
rename from java/javax/el/ValueReference.java
rename to java/jakarta/el/ValueReference.java
index 0c7f3eba51..1333ca272d 100644
--- a/java/javax/el/ValueReference.java
+++ b/java/jakarta/el/ValueReference.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 import java.io.Serializable;
 

==================================================
JspApplicationContext.java
similarity index 98%
rename from java/javax/el/VariableMapper.java
rename to java/jakarta/el/VariableMapper.java
index 4577e3839d..3f9f5f1fe1 100644
--- a/java/javax/el/VariableMapper.java
+++ b/java/jakarta/el/VariableMapper.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package javax.el;
+package jakarta.el;
 
 /**
  *

==================================================
JspContext.java
index ff0154cd7c..a998f32c7b 100644
--- a/java/javax/servlet/jsp/JspApplicationContext.java
+++ b/java/javax/servlet/jsp/JspApplicationContext.java
@@ -16,9 +16,9 @@
  */
 package javax.servlet.jsp;
 
-import javax.el.ELContextListener;
-import javax.el.ELResolver;
-import javax.el.ExpressionFactory;
+import jakarta.el.ELContextListener;
+import jakarta.el.ELResolver;
+import jakarta.el.ExpressionFactory;
 
 /**
  * <p>

==================================================
ELException.java
index 0b8221b374..e9d4964f02 100644
--- a/java/javax/servlet/jsp/JspContext.java
+++ b/java/javax/servlet/jsp/JspContext.java
@@ -18,7 +18,7 @@ package javax.servlet.jsp;
 
 import java.util.Enumeration;
 
-import javax.el.ELContext;
+import jakarta.el.ELContext;
 
 /**
  * <p>
@@ -238,7 +238,7 @@ public abstract class JspContext {
      * @return A valid instance of a VariableResolver.
      * @since 2.0
      * @deprecated As of JSP 2.1,
-     *             replaced by javax.el.ELContext.getELResolver()
+     *             replaced by jakarta.el.ELContext.getELResolver()
      *             which can be obtained by
      *             jspContext.getELContext().getELResolver()
      */

==================================================
ELParseException.java
index 132cc7d847..2facb9b879 100644
--- a/java/javax/servlet/jsp/el/ELException.java
+++ b/java/javax/servlet/jsp/el/ELException.java
@@ -22,7 +22,7 @@ package javax.servlet.jsp.el;
  * evaluation of the evaluator.
  *
  * @since 2.0
- * @deprecated As of JSP 2.1, replaced by javax.el.ELException
+ * @deprecated As of JSP 2.1, replaced by jakarta.el.ELException
  */
 @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public class ELException extends Exception {

==================================================
Expression.java
index fdb0d1edbe..6eeaf34e7f 100644
--- a/java/javax/servlet/jsp/el/ELParseException.java
+++ b/java/javax/servlet/jsp/el/ELParseException.java
@@ -22,7 +22,7 @@ package javax.servlet.jsp.el;
  * Represents a parsing error encountered while parsing an EL expression.
  *
  * @since 2.0
- * @deprecated As of JSP 2.1, replaced by javax.el.ELException
+ * @deprecated As of JSP 2.1, replaced by jakarta.el.ELException
  */
 @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public class ELParseException extends ELException {

==================================================
ExpressionEvaluator.java
index 51635bc655..203f408f55 100644
--- a/java/javax/servlet/jsp/el/Expression.java
+++ b/java/javax/servlet/jsp/el/Expression.java
@@ -30,7 +30,7 @@ package javax.servlet.jsp.el;
  * where ELParseException exceptions are raised. </p>
  *
  * @since 2.0
- * @deprecated As of JSP 2.1, replaced by javax.el.ValueExpression
+ * @deprecated As of JSP 2.1, replaced by jakarta.el.ValueExpression
  */
 @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public abstract class Expression {

==================================================
FunctionMapper.java
index 82b8190b73..32d81bf10a 100644
--- a/java/javax/servlet/jsp/el/ExpressionEvaluator.java
+++ b/java/javax/servlet/jsp/el/ExpressionEvaluator.java
@@ -52,7 +52,7 @@ package javax.servlet.jsp.el;
  * </ul>
  *
  * @since 2.0
- * @deprecated As of JSP 2.1, replaced by javax.el.ExpressionFactory
+ * @deprecated As of JSP 2.1, replaced by jakarta.el.ExpressionFactory
  */
 @SuppressWarnings("dep-ann")
 // TCK signature test fails with annotation

==================================================
ImplicitObjectELResolver.java
index 900820f749..a7a983f890 100644
--- a/java/javax/servlet/jsp/el/FunctionMapper.java
+++ b/java/javax/servlet/jsp/el/FunctionMapper.java
@@ -24,7 +24,7 @@ package javax.servlet.jsp.el;
  * information to resolve the map. </p>
  *
  * @since 2.0
- * @deprecated As of JSP 2.1, replaced by javax.el.FunctionMapper
+ * @deprecated As of JSP 2.1, replaced by jakarta.el.FunctionMapper
  */
 @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public interface FunctionMapper {

==================================================
ScopedAttributeELResolver.java
index 43ecded105..6806a595fa 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -30,15 +30,16 @@ import java.util.Objects;
 import java.util.Set;
 import java.util.Vector;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
-import javax.el.PropertyNotWritableException;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 import javax.servlet.jsp.JspContext;
 import javax.servlet.jsp.PageContext;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
+import jakarta.el.PropertyNotWritableException;
+
 /**
  *
  * @since 2.1

==================================================
VariableResolver.java
index 53164752e4..4674937c71 100644
--- a/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
+++ b/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
@@ -23,13 +23,14 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
-import javax.el.ELClass;
-import javax.el.ELContext;
-import javax.el.ELResolver;
-import javax.el.ImportHandler;
 import javax.servlet.jsp.JspContext;
 import javax.servlet.jsp.PageContext;
 
+import jakarta.el.ELClass;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
+import jakarta.el.ImportHandler;
+
 /**
 *
 * @since 2.1

==================================================
WebappClassLoaderBase.java
index 011e27fa1f..b659d3c733 100644
--- a/java/javax/servlet/jsp/el/VariableResolver.java
+++ b/java/javax/servlet/jsp/el/VariableResolver.java
@@ -30,7 +30,7 @@ package javax.servlet.jsp.el;
  * </p>
  *
  * @since 2.0
- * @deprecated As of JSP 2.1, replaced by javax.el.ELResolver
+ * @deprecated As of JSP 2.1, replaced by jakarta.el.ELResolver
  */
 @SuppressWarnings("dep-ann")
 // TCK signature test fails with annotation

==================================================
ExpressionFactoryImpl.java
index a62d5d82d8..4815ad928d 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -2534,7 +2534,36 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             return false;
 
         char ch;
-        if (name.startsWith("javax")) {
+        if (name.startsWith("jakarta")) {
+            /* 7 == length("jakarta") */
+            if (name.length() == 7) {
+                return false;
+            }
+            ch = name.charAt(7);
+            if (isClassName && ch == '.') {
+                /* 8 == length("jakarta.") */
+                if (name.startsWith("servlet.jsp.jstl.", 8)) {
+                    return false;
+                }
+                if (name.startsWith("el.", 8) ||
+                    name.startsWith("servlet.", 8) ||
+                    name.startsWith("websocket.", 8) ||
+                    name.startsWith("security.auth.message.", 8)) {
+                    return true;
+                }
+            } else if (!isClassName && ch == '/') {
+                /* 8 == length("jakarta/") */
+                if (name.startsWith("servlet/jsp/jstl/", 6)) {
+                    return false;
+                }
+                if (name.startsWith("el/", 8) ||
+                    name.startsWith("servlet/", 8) ||
+                    name.startsWith("websocket/", 8) ||
+                    name.startsWith("security/auth/message/", 8)) {
+                    return true;
+                }
+            }
+        } else if (name.startsWith("javax")) {
             /* 5 == length("javax") */
             if (name.length() == 5) {
                 return false;

==================================================
MethodExpressionImpl.java
index e32ecedb0d..3ce47ad69d 100644
--- a/java/org/apache/el/ExpressionFactoryImpl.java
+++ b/java/org/apache/el/ExpressionFactoryImpl.java
@@ -16,11 +16,11 @@
  */
 package org.apache.el;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
-import javax.el.ExpressionFactory;
-import javax.el.MethodExpression;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.MethodExpression;
+import jakarta.el.ValueExpression;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.ExpressionBuilder;
@@ -29,7 +29,7 @@ import org.apache.el.util.MessageFactory;
 
 
 /**
- * @see javax.el.ExpressionFactory
+ * @see jakarta.el.ExpressionFactory
  *
  * @author Jacob Hookom [jacob@hookom.net]
  */

==================================================
MethodExpressionLiteral.java
index a3db932b1f..ff5f1d90d4 100644
--- a/java/org/apache/el/MethodExpressionImpl.java
+++ b/java/org/apache/el/MethodExpressionImpl.java
@@ -22,14 +22,14 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.FunctionMapper;
-import javax.el.MethodExpression;
-import javax.el.MethodInfo;
-import javax.el.MethodNotFoundException;
-import javax.el.PropertyNotFoundException;
-import javax.el.VariableMapper;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.FunctionMapper;
+import jakarta.el.MethodExpression;
+import jakarta.el.MethodInfo;
+import jakarta.el.MethodNotFoundException;
+import jakarta.el.PropertyNotFoundException;
+import jakarta.el.VariableMapper;
 
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.lang.ExpressionBuilder;
@@ -41,7 +41,7 @@ import org.apache.el.util.ReflectionUtil;
  * An <code>Expression</code> that refers to a method on an object.
  *
  * <p>
- * The {@link javax.el.ExpressionFactory#createMethodExpression} method
+ * The {@link jakarta.el.ExpressionFactory#createMethodExpression} method
  * can be used to parse an expression string and return a concrete instance
  * of <code>MethodExpression</code> that encapsulates the parsed expression.
  * The {@link FunctionMapper} is used at parse time, not evaluation time,
@@ -49,11 +49,11 @@ import org.apache.el.util.ReflectionUtil;
  * However, the {@link ELContext} is needed at evaluation time.</p>
  *
  * <p>The {@link #getMethodInfo} and {@link #invoke} methods will evaluate the
- * expression each time they are called. The {@link javax.el.ELResolver} in the
+ * expression each time they are called. The {@link jakarta.el.ELResolver} in the
  * <code>ELContext</code> is used to resolve the top-level variables and to
  * determine the behavior of the <code>.</code> and <code>[]</code>
  * operators. For any of the two methods, the
- * {@link javax.el.ELResolver#getValue} method is used to resolve all properties
+ * {@link jakarta.el.ELResolver#getValue} method is used to resolve all properties
  * up to but excluding the last one. This provides the <code>base</code> object
  * on which the method appears. If the <code>base</code> object is null, a
  * <code>NullPointerException</code> must be thrown. At the last resolution,
@@ -64,12 +64,12 @@ import org.apache.el.util.ReflectionUtil;
  * <code>MethodExpression</code>).</p>
  *
  * <p>See the notes about comparison, serialization and immutability in
- * the {@link javax.el.Expression} javadocs.
+ * the {@link jakarta.el.Expression} javadocs.
  *
- * @see javax.el.ELResolver
- * @see javax.el.Expression
- * @see javax.el.ExpressionFactory
- * @see javax.el.MethodExpression
+ * @see jakarta.el.ELResolver
+ * @see jakarta.el.Expression
+ * @see jakarta.el.ExpressionFactory
+ * @see jakarta.el.MethodExpression
  *
  * @author Jacob Hookom [jacob@hookom.net]
  */
@@ -156,7 +156,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      *
      * @return The original expression String.
      *
-     * @see javax.el.Expression#getExpressionString()
+     * @see jakarta.el.Expression#getExpressionString()
      */
     @Override
     public String getExpressionString() {
@@ -183,7 +183,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      *             if an exception was thrown while performing property or
      *             variable resolution. The thrown exception must be included as
      *             the cause property of this exception, if available.
-     * @see javax.el.MethodExpression#getMethodInfo(javax.el.ELContext)
+     * @see jakarta.el.MethodExpression#getMethodInfo(jakarta.el.ELContext)
      */
     @Override
     public MethodInfo getMethodInfo(ELContext context)
@@ -254,7 +254,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      *             exception thrown is an <code>InvocationTargetException</code>,
      *             extract its <code>cause</code> and pass it to the
      *             <code>ELException</code> constructor.
-     * @see javax.el.MethodExpression#invoke(javax.el.ELContext,
+     * @see jakarta.el.MethodExpression#invoke(jakarta.el.ELContext,
      *      java.lang.Object[])
      */
     @Override

==================================================
ValueExpressionImpl.java
index abdbfe7ba8..ada7ea4e85 100644
--- a/java/org/apache/el/MethodExpressionLiteral.java
+++ b/java/org/apache/el/MethodExpressionLiteral.java
@@ -22,10 +22,10 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.MethodExpression;
-import javax.el.MethodInfo;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.MethodExpression;
+import jakarta.el.MethodInfo;
 
 import org.apache.el.util.ReflectionUtil;
 

==================================================
ValueExpressionLiteral.java
index 2682bbd5cd..f1a7a6a779 100644
--- a/java/org/apache/el/ValueExpressionImpl.java
+++ b/java/org/apache/el/ValueExpressionImpl.java
@@ -22,14 +22,14 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.FunctionMapper;
-import javax.el.PropertyNotFoundException;
-import javax.el.PropertyNotWritableException;
-import javax.el.ValueExpression;
-import javax.el.ValueReference;
-import javax.el.VariableMapper;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.FunctionMapper;
+import jakarta.el.PropertyNotFoundException;
+import jakarta.el.PropertyNotWritableException;
+import jakarta.el.ValueExpression;
+import jakarta.el.ValueReference;
+import jakarta.el.VariableMapper;
 
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.lang.ExpressionBuilder;
@@ -54,7 +54,7 @@ import org.apache.el.util.ReflectionUtil;
  * </p>
  *
  * <p>
- * The {@link javax.el.ExpressionFactory#createValueExpression} method
+ * The {@link jakarta.el.ExpressionFactory#createValueExpression} method
  * can be used to parse an expression string and return a concrete instance
  * of <code>ValueExpression</code> that encapsulates the parsed expression.
  * The {@link FunctionMapper} is used at parse time, not evaluation time,
@@ -63,25 +63,25 @@ import org.apache.el.util.ReflectionUtil;
  *
  * <p>The {@link #getValue}, {@link #setValue}, {@link #isReadOnly} and
  * {@link #getType} methods will evaluate the expression each time they are
- * called. The {@link javax.el.ELResolver} in the <code>ELContext</code> is used
+ * called. The {@link jakarta.el.ELResolver} in the <code>ELContext</code> is used
  * to resolve the top-level variables and to determine the behavior of the
  * <code>.</code> and <code>[]</code> operators. For any of the four methods,
- * the {@link javax.el.ELResolver#getValue} method is used to resolve all
+ * the {@link jakarta.el.ELResolver#getValue} method is used to resolve all
  * properties up to but excluding the last one. This provides the
  * <code>base</code> object. At the last resolution, the
  * <code>ValueExpression</code> will call the corresponding
- * {@link javax.el.ELResolver#getValue}, {@link javax.el.ELResolver#setValue},
- * {@link javax.el.ELResolver#isReadOnly} or {@link javax.el.ELResolver#getType}
+ * {@link jakarta.el.ELResolver#getValue}, {@link jakarta.el.ELResolver#setValue},
+ * {@link jakarta.el.ELResolver#isReadOnly} or {@link jakarta.el.ELResolver#getType}
  * method, depending on which was called on the <code>ValueExpression</code>.
  * </p>
  *
  * <p>See the notes about comparison, serialization and immutability in
- * the {@link javax.el.Expression} javadocs.
+ * the {@link jakarta.el.Expression} javadocs.
  *
- * @see javax.el.ELResolver
- * @see javax.el.Expression
- * @see javax.el.ExpressionFactory
- * @see javax.el.ValueExpression
+ * @see jakarta.el.ELResolver
+ * @see jakarta.el.Expression
+ * @see jakarta.el.ExpressionFactory
+ * @see jakarta.el.ValueExpression
  *
  * @author Jacob Hookom [jacob@hookom.net]
  */
@@ -131,7 +131,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.ValueExpression#getExpectedType()
+     * @see jakarta.el.ValueExpression#getExpectedType()
      */
     @Override
     public Class<?> getExpectedType() {
@@ -146,7 +146,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      *         <code>ExpressionFactory.createValueExpression</code> method
      *         that created this <code>ValueExpression</code>.
      *
-     * @see javax.el.Expression#getExpressionString()
+     * @see jakarta.el.Expression#getExpressionString()
      */
     @Override
     public String getExpressionString() {
@@ -163,7 +163,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.ValueExpression#getType(javax.el.ELContext)
+     * @see jakarta.el.ValueExpression#getType(jakarta.el.ELContext)
      */
     @Override
     public Class<?> getType(ELContext context) throws PropertyNotFoundException,
@@ -179,7 +179,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.ValueExpression#getValue(javax.el.ELContext)
+     * @see jakarta.el.ValueExpression#getValue(jakarta.el.ELContext)
      */
     @Override
     public Object getValue(ELContext context) throws PropertyNotFoundException,
@@ -208,7 +208,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.ValueExpression#isLiteralText()
+     * @see jakarta.el.ValueExpression#isLiteralText()
      */
     @Override
     public boolean isLiteralText() {
@@ -222,7 +222,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.ValueExpression#isReadOnly(javax.el.ELContext)
+     * @see jakarta.el.ValueExpression#isReadOnly(jakarta.el.ELContext)
      */
     @Override
     public boolean isReadOnly(ELContext context)
@@ -250,7 +250,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.ValueExpression#setValue(javax.el.ELContext,
+     * @see jakarta.el.ValueExpression#setValue(jakarta.el.ELContext,
      *      java.lang.Object)
      */
     @Override

==================================================
ELSupport.java
index 413f914022..8ff72d0977 100644
--- a/java/org/apache/el/ValueExpressionLiteral.java
+++ b/java/org/apache/el/ValueExpressionLiteral.java
@@ -21,9 +21,9 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
-import javax.el.ELContext;
-import javax.el.PropertyNotWritableException;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.PropertyNotWritableException;
+import jakarta.el.ValueExpression;
 
 import org.apache.el.util.MessageFactory;
 import org.apache.el.util.ReflectionUtil;

==================================================
EvaluationContext.java
index e979052cab..6031d1d120 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -27,8 +27,8 @@ import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 
-import javax.el.ELContext;
-import javax.el.ELException;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
 
 import org.apache.el.util.MessageFactory;
 

==================================================
ExpressionBuilder.java
index f0a48a87c1..fad4c4f9eb 100644
--- a/java/org/apache/el/lang/EvaluationContext.java
+++ b/java/org/apache/el/lang/EvaluationContext.java
@@ -21,12 +21,12 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
-import javax.el.EvaluationListener;
-import javax.el.FunctionMapper;
-import javax.el.ImportHandler;
-import javax.el.VariableMapper;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
+import jakarta.el.EvaluationListener;
+import jakarta.el.FunctionMapper;
+import jakarta.el.ImportHandler;
+import jakarta.el.VariableMapper;
 
 public final class EvaluationContext extends ELContext {
 

==================================================
FunctionMapperFactory.java
index 6c3620bb80..5c11d2d61b 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -21,12 +21,12 @@ import java.lang.reflect.Method;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.FunctionMapper;
-import javax.el.MethodExpression;
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.FunctionMapper;
+import jakarta.el.MethodExpression;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 import org.apache.el.MethodExpressionImpl;
 import org.apache.el.MethodExpressionLiteral;

==================================================
FunctionMapperImpl.java
index 59b6cb6061..f7ded32f72 100644
--- a/java/org/apache/el/lang/FunctionMapperFactory.java
+++ b/java/org/apache/el/lang/FunctionMapperFactory.java
@@ -19,7 +19,7 @@ package org.apache.el.lang;
 
 import java.lang.reflect.Method;
 
-import javax.el.FunctionMapper;
+import jakarta.el.FunctionMapper;
 
 import org.apache.el.util.MessageFactory;
 
@@ -40,7 +40,7 @@ public class FunctionMapperFactory extends FunctionMapper {
 
 
     /* (non-Javadoc)
-     * @see javax.el.FunctionMapper#resolveFunction(java.lang.String, java.lang.String)
+     * @see jakarta.el.FunctionMapper#resolveFunction(java.lang.String, java.lang.String)
      */
     @Override
     public Method resolveFunction(String prefix, String localName) {

==================================================
VariableMapperFactory.java
index b58ab24855..81f296e351 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -24,7 +24,7 @@ import java.lang.reflect.Method;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import javax.el.FunctionMapper;
+import jakarta.el.FunctionMapper;
 
 import org.apache.el.util.MessageFactory;
 import org.apache.el.util.ReflectionUtil;
@@ -43,7 +43,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
     /*
      * (non-Javadoc)
      *
-     * @see javax.el.FunctionMapper#resolveFunction(java.lang.String,
+     * @see jakarta.el.FunctionMapper#resolveFunction(java.lang.String,
      *      java.lang.String)
      */
     @Override

==================================================
VariableMapperImpl.java
index 39862066c6..b4d3132264 100644
--- a/java/org/apache/el/lang/VariableMapperFactory.java
+++ b/java/org/apache/el/lang/VariableMapperFactory.java
@@ -17,8 +17,8 @@
 
 package org.apache.el.lang;
 
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 import org.apache.el.util.MessageFactory;
 

==================================================
ArithmeticNode.java
index 4fdcf7f376..bdbd7bf81a 100644
--- a/java/org/apache/el/lang/VariableMapperImpl.java
+++ b/java/org/apache/el/lang/VariableMapperImpl.java
@@ -24,8 +24,8 @@ import java.io.ObjectOutput;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 public class VariableMapperImpl extends VariableMapper implements Externalizable {
 

==================================================
AstAnd.java
index b39091529a..2a665d1d30 100644
--- a/java/org/apache/el/parser/ArithmeticNode.java
+++ b/java/org/apache/el/parser/ArithmeticNode.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstAssign.java
index b05af99159..a147b188b0 100644
--- a/java/org/apache/el/parser/AstAnd.java
+++ b/java/org/apache/el/parser/AstAnd.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstBracketSuffix.java
index f6cb7850cf..066625f3fa 100644
--- a/java/org/apache/el/parser/AstAssign.java
+++ b/java/org/apache/el/parser/AstAssign.java
@@ -17,7 +17,7 @@
 /* Generated By:JJTree: Do not edit this line. AstAssign.java Version 4.3 */
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstChoice.java
index 1288d4f642..4fe5f4b408 100644
--- a/java/org/apache/el/parser/AstBracketSuffix.java
+++ b/java/org/apache/el/parser/AstBracketSuffix.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstCompositeExpression.java
index 120106c685..c98ab88690 100644
--- a/java/org/apache/el/parser/AstChoice.java
+++ b/java/org/apache/el/parser/AstChoice.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstConcatenation.java
index 06ae01d161..82ed6a6b5f 100644
--- a/java/org/apache/el/parser/AstCompositeExpression.java
+++ b/java/org/apache/el/parser/AstCompositeExpression.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstDeferredExpression.java
index 860e99fb11..f26e0a36ed 100644
--- a/java/org/apache/el/parser/AstConcatenation.java
+++ b/java/org/apache/el/parser/AstConcatenation.java
@@ -17,7 +17,7 @@
 /* Generated By:JJTree: Do not edit this line. AstConcatenation.java Version 4.3 */
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstDiv.java
index 772760959d..033820cdeb 100644
--- a/java/org/apache/el/parser/AstDeferredExpression.java
+++ b/java/org/apache/el/parser/AstDeferredExpression.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstDotSuffix.java
index 406e230b46..c28b18fa5e 100644
--- a/java/org/apache/el/parser/AstDiv.java
+++ b/java/org/apache/el/parser/AstDiv.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstDynamicExpression.java
index 3c8d1b5d09..59c4427e5a 100644
--- a/java/org/apache/el/parser/AstDotSuffix.java
+++ b/java/org/apache/el/parser/AstDotSuffix.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.util.MessageFactory;

==================================================
AstEmpty.java
index b14d9ecd72..b2e1595a92 100644
--- a/java/org/apache/el/parser/AstDynamicExpression.java
+++ b/java/org/apache/el/parser/AstDynamicExpression.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstEqual.java
index 47c059036f..62c5a68e41 100644
--- a/java/org/apache/el/parser/AstEmpty.java
+++ b/java/org/apache/el/parser/AstEmpty.java
@@ -21,7 +21,7 @@ package org.apache.el.parser;
 import java.util.Collection;
 import java.util.Map;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstFalse.java
index d194272051..878958a852 100644
--- a/java/org/apache/el/parser/AstEqual.java
+++ b/java/org/apache/el/parser/AstEqual.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstFloatingPoint.java
index 27527aa47b..d047581004 100644
--- a/java/org/apache/el/parser/AstFalse.java
+++ b/java/org/apache/el/parser/AstFalse.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstFunction.java
index 9316ec3a03..c9129a37a7 100644
--- a/java/org/apache/el/parser/AstFloatingPoint.java
+++ b/java/org/apache/el/parser/AstFloatingPoint.java
@@ -20,7 +20,7 @@ package org.apache.el.parser;
 
 import java.math.BigDecimal;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstGreaterThan.java
index 09ac424165..a95f83c825 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -21,12 +21,12 @@ package org.apache.el.parser;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import javax.el.ELClass;
-import javax.el.ELException;
-import javax.el.FunctionMapper;
-import javax.el.LambdaExpression;
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ELClass;
+import jakarta.el.ELException;
+import jakarta.el.FunctionMapper;
+import jakarta.el.LambdaExpression;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.util.MessageFactory;

==================================================
AstGreaterThanEqual.java
index eadc4a2a3b..037d910aa6 100644
--- a/java/org/apache/el/parser/AstGreaterThan.java
+++ b/java/org/apache/el/parser/AstGreaterThan.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstIdentifier.java
index 8c74ceb5aa..fd1ab76249 100644
--- a/java/org/apache/el/parser/AstGreaterThanEqual.java
+++ b/java/org/apache/el/parser/AstGreaterThanEqual.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstInteger.java
index 74deb84f59..d21fe9b6a8 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -18,15 +18,15 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELClass;
-import javax.el.ELException;
-import javax.el.MethodExpression;
-import javax.el.MethodInfo;
-import javax.el.MethodNotFoundException;
-import javax.el.PropertyNotFoundException;
-import javax.el.ValueExpression;
-import javax.el.ValueReference;
-import javax.el.VariableMapper;
+import jakarta.el.ELClass;
+import jakarta.el.ELException;
+import jakarta.el.MethodExpression;
+import jakarta.el.MethodInfo;
+import jakarta.el.MethodNotFoundException;
+import jakarta.el.PropertyNotFoundException;
+import jakarta.el.ValueExpression;
+import jakarta.el.ValueReference;
+import jakarta.el.VariableMapper;
 
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.util.MessageFactory;

==================================================
AstLambdaExpression.java
index 5b0a3774f4..fc519d2473 100644
--- a/java/org/apache/el/parser/AstInteger.java
+++ b/java/org/apache/el/parser/AstInteger.java
@@ -20,7 +20,7 @@ package org.apache.el.parser;
 
 import java.math.BigInteger;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstLessThan.java
index f719c33553..580c5d9249 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -20,8 +20,8 @@ package org.apache.el.parser;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.el.ELException;
-import javax.el.LambdaExpression;
+import jakarta.el.ELException;
+import jakarta.el.LambdaExpression;
 
 import org.apache.el.ValueExpressionImpl;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstLessThanEqual.java
index cc7a3cc162..63c1b3c508 100644
--- a/java/org/apache/el/parser/AstLessThan.java
+++ b/java/org/apache/el/parser/AstLessThan.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstListData.java
index 2e84f5b79b..24104a52e6 100644
--- a/java/org/apache/el/parser/AstLessThanEqual.java
+++ b/java/org/apache/el/parser/AstLessThanEqual.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstLiteralExpression.java
index 0a0229d8bc..eb88917199 100644
--- a/java/org/apache/el/parser/AstListData.java
+++ b/java/org/apache/el/parser/AstListData.java
@@ -20,7 +20,7 @@ package org.apache.el.parser;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstMapData.java
index 7244df129a..856b760b4f 100644
--- a/java/org/apache/el/parser/AstLiteralExpression.java
+++ b/java/org/apache/el/parser/AstLiteralExpression.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstMinus.java
index bd711c4b3a..ce7245bdbf 100644
--- a/java/org/apache/el/parser/AstMapData.java
+++ b/java/org/apache/el/parser/AstMapData.java
@@ -20,7 +20,7 @@ package org.apache.el.parser;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstMod.java
index 0530f4fbf9..ace11fb2b6 100644
--- a/java/org/apache/el/parser/AstMinus.java
+++ b/java/org/apache/el/parser/AstMinus.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstMult.java
index 7c069307d8..5cd3484f46 100644
--- a/java/org/apache/el/parser/AstMod.java
+++ b/java/org/apache/el/parser/AstMod.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstNegative.java
index b2adc6899a..6d1f60e632 100644
--- a/java/org/apache/el/parser/AstMult.java
+++ b/java/org/apache/el/parser/AstMult.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstNot.java
index 28164a2d83..0359c23895 100644
--- a/java/org/apache/el/parser/AstNegative.java
+++ b/java/org/apache/el/parser/AstNegative.java
@@ -21,7 +21,7 @@ package org.apache.el.parser;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstNotEqual.java
index c7045d693a..3ac99d3746 100644
--- a/java/org/apache/el/parser/AstNot.java
+++ b/java/org/apache/el/parser/AstNot.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstNull.java
index 2223459239..f2c70e5b6c 100644
--- a/java/org/apache/el/parser/AstNotEqual.java
+++ b/java/org/apache/el/parser/AstNotEqual.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstOr.java
index d6f196b6c8..bc149f16e7 100644
--- a/java/org/apache/el/parser/AstNull.java
+++ b/java/org/apache/el/parser/AstNull.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstPlus.java
index d469dc358a..dfc0677f8b 100644
--- a/java/org/apache/el/parser/AstOr.java
+++ b/java/org/apache/el/parser/AstOr.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstSemicolon.java
index 99036af9c1..2728ee646e 100644
--- a/java/org/apache/el/parser/AstPlus.java
+++ b/java/org/apache/el/parser/AstPlus.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.EvaluationContext;

==================================================
AstSetData.java
index 56e5c9b340..fb72c77c66 100644
--- a/java/org/apache/el/parser/AstSemicolon.java
+++ b/java/org/apache/el/parser/AstSemicolon.java
@@ -17,7 +17,7 @@
 /* Generated By:JJTree: Do not edit this line. AstSemicolon.java Version 4.3 */
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstString.java
index d8e422fbac..e53e7eddbe 100644
--- a/java/org/apache/el/parser/AstSetData.java
+++ b/java/org/apache/el/parser/AstSetData.java
@@ -20,7 +20,7 @@ package org.apache.el.parser;
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstTrue.java
index 7ea9f82fcc..0f661134aa 100644
--- a/java/org/apache/el/parser/AstString.java
+++ b/java/org/apache/el/parser/AstString.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
AstValue.java
index 126eed857c..8d37f1f0cd 100644
--- a/java/org/apache/el/parser/AstTrue.java
+++ b/java/org/apache/el/parser/AstTrue.java
@@ -18,7 +18,7 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
BooleanNode.java
index caa264adcc..ebee1df75e 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -22,12 +22,12 @@ import java.lang.reflect.Array;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import javax.el.ELException;
-import javax.el.ELResolver;
-import javax.el.LambdaExpression;
-import javax.el.MethodInfo;
-import javax.el.PropertyNotFoundException;
-import javax.el.ValueReference;
+import jakarta.el.ELException;
+import jakarta.el.ELResolver;
+import jakarta.el.LambdaExpression;
+import jakarta.el.MethodInfo;
+import jakarta.el.PropertyNotFoundException;
+import jakarta.el.ValueReference;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;

==================================================
ELParser.java
index 2ef320c6bf..3cd042ada3 100644
--- a/java/org/apache/el/parser/BooleanNode.java
+++ b/java/org/apache/el/parser/BooleanNode.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
Node.java
index 5bca021fca..d519d2b1f2 100644
--- a/java/org/apache/el/parser/ELParser.jjt
+++ b/java/org/apache/el/parser/ELParser.jjt
@@ -25,7 +25,7 @@ options
 {
     STATIC=false;
     NODE_PREFIX="Ast";
-    VISITOR_EXCEPTION="javax.el.ELException";
+    VISITOR_EXCEPTION="jakarta.el.ELException";
     VISITOR=false;
     MULTI=true;
     NODE_DEFAULT_VOID=true;
@@ -38,7 +38,7 @@ options
 PARSER_BEGIN( ELParser )
 package org.apache.el.parser;
 import java.io.StringReader;
-import javax.el.ELException;
+import jakarta.el.ELException;
 public class ELParser {
 
     public static Node parse(String ref) throws ELException {

==================================================
SimpleNode.java
index 57fc54ae7b..3aced068ec 100644
--- a/java/org/apache/el/parser/Node.java
+++ b/java/org/apache/el/parser/Node.java
@@ -19,9 +19,9 @@
 
 package org.apache.el.parser;
 
-import javax.el.ELException;
-import javax.el.MethodInfo;
-import javax.el.ValueReference;
+import jakarta.el.ELException;
+import jakarta.el.MethodInfo;
+import jakarta.el.ValueReference;
 
 import org.apache.el.lang.EvaluationContext;
 

==================================================
Optional.java
index 2d3e6a6a5e..e2a2789dd8 100644
--- a/java/org/apache/el/parser/SimpleNode.java
+++ b/java/org/apache/el/parser/SimpleNode.java
@@ -20,10 +20,10 @@ package org.apache.el.parser;
 
 import java.util.Arrays;
 
-import javax.el.ELException;
-import javax.el.MethodInfo;
-import javax.el.PropertyNotWritableException;
-import javax.el.ValueReference;
+import jakarta.el.ELException;
+import jakarta.el.MethodInfo;
+import jakarta.el.PropertyNotWritableException;
+import jakarta.el.ValueReference;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;

==================================================
Stream.java
index da68b2d749..19478f94b1 100644
--- a/java/org/apache/el/stream/Optional.java
+++ b/java/org/apache/el/stream/Optional.java
@@ -16,8 +16,8 @@
  */
 package org.apache.el.stream;
 
-import javax.el.ELException;
-import javax.el.LambdaExpression;
+import jakarta.el.ELException;
+import jakarta.el.LambdaExpression;
 
 import org.apache.el.util.MessageFactory;
 

==================================================
StreamELResolverImpl.java
index 85fe57af2b..d3f0b304e7 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -25,8 +25,8 @@ import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Set;
 
-import javax.el.ELException;
-import javax.el.LambdaExpression;
+import jakarta.el.ELException;
+import jakarta.el.LambdaExpression;
 
 import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.ELSupport;

==================================================
Jre9Compat.java
index f5f6bcf26a..29c97e2639 100644
--- a/java/org/apache/el/stream/StreamELResolverImpl.java
+++ b/java/org/apache/el/stream/StreamELResolverImpl.java
@@ -22,8 +22,8 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 
 public class StreamELResolverImpl extends ELResolver {
 

==================================================
JreCompat.java
index b4d10d7b69..91cd7bc1be 100644
--- a/java/org/apache/el/util/Jre9Compat.java
+++ b/java/org/apache/el/util/Jre9Compat.java
@@ -23,7 +23,7 @@ import java.lang.reflect.Method;
  * This is a cut down version of org.apache.tomcat.util.Jre9Compat that provides
  * only the methods required by the EL implementation.
  *
- * This class is duplicated in javax.el
+ * This class is duplicated in jakarta.el
  * When making changes keep the two in sync.
  */
 class Jre9Compat extends JreCompat {

==================================================
ReflectionUtil.java
index 8f226f2537..ac013869c2 100644
--- a/java/org/apache/el/util/JreCompat.java
+++ b/java/org/apache/el/util/JreCompat.java
@@ -22,7 +22,7 @@ import java.lang.reflect.AccessibleObject;
  * This is a cut down version of org.apache.tomcat.util.JreCompat that provides
  * only the methods required by the EL implementation.
  *
- * This class is duplicated in javax.el
+ * This class is duplicated in jakarta.el
  * When making changes keep the two in sync.
  */
 public class JreCompat {

==================================================
Generator.java
index c9f1f2e285..f35f7c8c86 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -26,8 +26,8 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 
-import javax.el.ELException;
-import javax.el.MethodNotFoundException;
+import jakarta.el.ELException;
+import jakarta.el.MethodNotFoundException;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
@@ -124,7 +124,7 @@ public class ReflectionUtil {
      *         the given criteria
      */
     /*
-     * This class duplicates code in javax.el.Util. When making changes keep
+     * This class duplicates code in jakarta.el.Util. When making changes keep
      * the code in sync.
      */
     @SuppressWarnings("null")
@@ -297,7 +297,7 @@ public class ReflectionUtil {
     }
 
     /*
-     * This class duplicates code in javax.el.Util. When making changes keep
+     * This class duplicates code in jakarta.el.Util. When making changes keep
      * the code in sync.
      */
     private static Method resolveAmbiguousMethod(Set<Method> candidates,
@@ -365,7 +365,7 @@ public class ReflectionUtil {
 
 
     /*
-     * This class duplicates code in javax.el.Util. When making changes keep
+     * This class duplicates code in jakarta.el.Util. When making changes keep
      * the code in sync.
      */
     private static boolean isAssignableFrom(Class<?> src, Class<?> target) {
@@ -403,7 +403,7 @@ public class ReflectionUtil {
 
 
     /*
-     * This class duplicates code in javax.el.Util. When making changes keep
+     * This class duplicates code in jakarta.el.Util. When making changes keep
      * the code in sync.
      */
     private static boolean isCoercibleFrom(EvaluationContext ctx, Object src, Class<?> target) {
@@ -419,7 +419,7 @@ public class ReflectionUtil {
 
 
     /*
-     * This class duplicates code in javax.el.Util. When making changes keep
+     * This class duplicates code in jakarta.el.Util. When making changes keep
      * the code in sync.
      */
     private static Method getMethod(Class<?> type, Object base, Method m) {
@@ -501,7 +501,7 @@ public class ReflectionUtil {
 
 
     /*
-     * This class duplicates code in javax.el.Util. When making changes keep
+     * This class duplicates code in jakarta.el.Util. When making changes keep
      * the code in sync.
      */
     private static class MatchResult implements Comparable<MatchResult> {

==================================================
Node.java
index 02492ee654..f156d18ca0 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -41,13 +41,14 @@ import java.util.Set;
 import java.util.TimeZone;
 import java.util.Vector;
 
-import javax.el.MethodExpression;
-import javax.el.ValueExpression;
 import javax.servlet.jsp.tagext.TagAttributeInfo;
 import javax.servlet.jsp.tagext.TagInfo;
 import javax.servlet.jsp.tagext.TagVariableInfo;
 import javax.servlet.jsp.tagext.VariableInfo;
 
+import jakarta.el.MethodExpression;
+import jakarta.el.ValueExpression;
+
 import org.apache.el.util.JreCompat;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
@@ -431,7 +432,7 @@ class Generator {
      * ServletConfig is not readily available.
      */
     private void generateGetters() {
-        out.printil("public javax.el.ExpressionFactory _jsp_getExpressionFactory() {");
+        out.printil("public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {");
         out.pushIndent();
         if (!ctxt.isTagFile()) {
             out.printin("if (");
@@ -678,7 +679,7 @@ class Generator {
             }
             out.println();
         }
-        out.printin("private volatile javax.el.ExpressionFactory ");
+        out.printin("private volatile jakarta.el.ExpressionFactory ");
         out.print(VAR_EXPRESSIONFACTORY);
         out.println(";");
         out.printin("private volatile org.apache.tomcat.InstanceManager ");
@@ -4043,11 +4044,11 @@ class Generator {
 
                 // we need to scope the modified VariableMapper for consistency and performance
                 if (!variableMapperVar) {
-                    out.printil("javax.el.VariableMapper _el_variablemapper = jspContext.getELContext().getVariableMapper();");
+                    out.printil("jakarta.el.VariableMapper _el_variablemapper = jspContext.getELContext().getVariableMapper();");
                     variableMapperVar = true;
                 }
 
-                out.printin("javax.el.ValueExpression _el_ve");
+                out.printin("jakarta.el.ValueExpression _el_ve");
                 out.print(i);
                 out.print(" = _el_variablemapper.setVariable(");
                 out.print(quote(attrName));
@@ -4055,7 +4056,7 @@ class Generator {
                 if (attrInfos[i].isDeferredMethod()) {
                     out.print("_jsp_getExpressionFactory().createValueExpression(");
                     out.print(toGetterMethod(attrName));
-                    out.print(",javax.el.MethodExpression.class)");
+                    out.print(",jakarta.el.MethodExpression.class)");
                 } else {
                     out.print(toGetterMethod(attrName));
                 }

==================================================
PageInfo.java
index 687b19c663..14aeb6a7d9 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -20,9 +20,6 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Vector;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.ExpressionFactory;
 import javax.servlet.jsp.tagext.BodyTag;
 import javax.servlet.jsp.tagext.DynamicAttributes;
 import javax.servlet.jsp.tagext.IterationTag;
@@ -36,6 +33,10 @@ import javax.servlet.jsp.tagext.TagVariableInfo;
 import javax.servlet.jsp.tagext.TryCatchFinally;
 import javax.servlet.jsp.tagext.VariableInfo;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.ExpressionFactory;
+
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.tagplugin.TagPluginContext;

==================================================
TagFileProcessor.java
index 9aed5ba592..59c6038dfd 100644
--- a/java/org/apache/jasper/compiler/PageInfo.java
+++ b/java/org/apache/jasper/compiler/PageInfo.java
@@ -25,9 +25,10 @@ import java.util.Map;
 import java.util.Set;
 import java.util.Vector;
 
-import javax.el.ExpressionFactory;
 import javax.servlet.jsp.tagext.TagLibraryInfo;
 
+import jakarta.el.ExpressionFactory;
+
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 

==================================================
Validator.java
index 3b3300d366..01224c5b51 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -23,8 +23,6 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Vector;
 
-import javax.el.MethodExpression;
-import javax.el.ValueExpression;
 import javax.servlet.jsp.tagext.TagAttributeInfo;
 import javax.servlet.jsp.tagext.TagFileInfo;
 import javax.servlet.jsp.tagext.TagInfo;
@@ -32,6 +30,9 @@ import javax.servlet.jsp.tagext.TagLibraryInfo;
 import javax.servlet.jsp.tagext.TagVariableInfo;
 import javax.servlet.jsp.tagext.VariableInfo;
 
+import jakarta.el.MethodExpression;
+import jakarta.el.ValueExpression;
+
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.runtime.JspSourceDependent;

==================================================
ELContextImpl.java
index cb476a34bf..0208041310 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -28,9 +28,6 @@ import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.el.ELException;
-import javax.el.ExpressionFactory;
-import javax.el.FunctionMapper;
 import javax.servlet.jsp.JspFactory;
 import javax.servlet.jsp.tagext.FunctionInfo;
 import javax.servlet.jsp.tagext.PageData;
@@ -41,6 +38,10 @@ import javax.servlet.jsp.tagext.TagInfo;
 import javax.servlet.jsp.tagext.TagLibraryInfo;
 import javax.servlet.jsp.tagext.ValidationMessage;
 
+import jakarta.el.ELException;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.FunctionMapper;
+
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.ELNode.Text;
 import org.apache.jasper.el.ELContextImpl;

==================================================
ELContextWrapper.java
index f2e2267983..273c1f161b 100644
--- a/java/org/apache/jasper/el/ELContextImpl.java
+++ b/java/org/apache/jasper/el/ELContextImpl.java
@@ -20,20 +20,20 @@ import java.lang.reflect.Method;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.el.ArrayELResolver;
-import javax.el.BeanELResolver;
-import javax.el.CompositeELResolver;
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELResolver;
-import javax.el.ExpressionFactory;
-import javax.el.FunctionMapper;
-import javax.el.ListELResolver;
-import javax.el.MapELResolver;
-import javax.el.ResourceBundleELResolver;
-import javax.el.StaticFieldELResolver;
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ArrayELResolver;
+import jakarta.el.BeanELResolver;
+import jakarta.el.CompositeELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELResolver;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.FunctionMapper;
+import jakarta.el.ListELResolver;
+import jakarta.el.MapELResolver;
+import jakarta.el.ResourceBundleELResolver;
+import jakarta.el.StaticFieldELResolver;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 import org.apache.jasper.Constants;
 

==================================================
ELResolverImpl.java
index 8c18293469..7c5abcb411 100644
--- a/java/org/apache/jasper/el/ELContextWrapper.java
+++ b/java/org/apache/jasper/el/ELContextWrapper.java
@@ -18,10 +18,10 @@ package org.apache.jasper.el;
 
 import java.util.Locale;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
-import javax.el.FunctionMapper;
-import javax.el.VariableMapper;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
+import jakarta.el.FunctionMapper;
+import jakarta.el.VariableMapper;
 
 /**
  * Simple ELContextWrapper for runtime evaluation of EL w/ dynamic FunctionMappers

==================================================
ExpressionEvaluatorImpl.java
index 3a143a338a..00001ac514 100644
--- a/java/org/apache/jasper/el/ELResolverImpl.java
+++ b/java/org/apache/jasper/el/ELResolverImpl.java
@@ -20,13 +20,14 @@ package org.apache.jasper.el;
 import java.util.Iterator;
 import java.util.Objects;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.ELResolver;
-import javax.el.ExpressionFactory;
-import javax.el.PropertyNotWritableException;
 import javax.servlet.jsp.el.VariableResolver;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.ELResolver;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.PropertyNotWritableException;
+
 @Deprecated
 public final class ELResolverImpl extends ELResolver {
 

==================================================
ExpressionImpl.java
index 0a2a8a762f..3c48c4bf50 100644
--- a/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
+++ b/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
@@ -16,8 +16,6 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
 import javax.servlet.jsp.el.ELException;
 import javax.servlet.jsp.el.ELParseException;
 import javax.servlet.jsp.el.Expression;
@@ -25,6 +23,9 @@ import javax.servlet.jsp.el.ExpressionEvaluator;
 import javax.servlet.jsp.el.FunctionMapper;
 import javax.servlet.jsp.el.VariableResolver;
 
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
+
 @Deprecated
 public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
 
@@ -46,7 +47,7 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
             }
             ValueExpression ve = this.factory.createValueExpression(ctx, expression, expectedType);
             return new ExpressionImpl(ve, factory);
-        } catch (javax.el.ELException e) {
+        } catch (jakarta.el.ELException e) {
             throw new ELParseException(e.getMessage());
         }
     }

==================================================
FunctionMapperImpl.java
index 85e9ff394e..a607da0465 100644
--- a/java/org/apache/jasper/el/ExpressionImpl.java
+++ b/java/org/apache/jasper/el/ExpressionImpl.java
@@ -16,13 +16,14 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.ELContext;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
 import javax.servlet.jsp.el.ELException;
 import javax.servlet.jsp.el.Expression;
 import javax.servlet.jsp.el.VariableResolver;
 
+import jakarta.el.ELContext;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
+
 @Deprecated
 public final class ExpressionImpl extends Expression {
 

==================================================
JasperELResolver.java
index 93c9cd3067..c8d45d76b2 100644
--- a/java/org/apache/jasper/el/FunctionMapperImpl.java
+++ b/java/org/apache/jasper/el/FunctionMapperImpl.java
@@ -21,7 +21,7 @@ import java.lang.reflect.Method;
 import javax.servlet.jsp.el.FunctionMapper;
 
 @Deprecated
-public final class FunctionMapperImpl extends javax.el.FunctionMapper {
+public final class FunctionMapperImpl extends jakarta.el.FunctionMapper {
 
     private final FunctionMapper fnMapper;
 

==================================================
JspELException.java
index 99189807cc..2b04ffc56c 100644
--- a/java/org/apache/jasper/el/JasperELResolver.java
+++ b/java/org/apache/jasper/el/JasperELResolver.java
@@ -23,20 +23,21 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.el.ArrayELResolver;
-import javax.el.BeanELResolver;
-import javax.el.CompositeELResolver;
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.ELResolver;
-import javax.el.ListELResolver;
-import javax.el.MapELResolver;
-import javax.el.PropertyNotFoundException;
-import javax.el.ResourceBundleELResolver;
-import javax.el.StaticFieldELResolver;
 import javax.servlet.jsp.el.ImplicitObjectELResolver;
 import javax.servlet.jsp.el.ScopedAttributeELResolver;
 
+import jakarta.el.ArrayELResolver;
+import jakarta.el.BeanELResolver;
+import jakarta.el.CompositeELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.ELResolver;
+import jakarta.el.ListELResolver;
+import jakarta.el.MapELResolver;
+import jakarta.el.PropertyNotFoundException;
+import jakarta.el.ResourceBundleELResolver;
+import jakarta.el.StaticFieldELResolver;
+
 import org.apache.jasper.runtime.ExceptionUtils;
 import org.apache.jasper.runtime.JspRuntimeLibrary;
 

==================================================
JspMethodExpression.java
index a7651ffe93..a881dd33bb 100644
--- a/java/org/apache/jasper/el/JspELException.java
+++ b/java/org/apache/jasper/el/JspELException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.ELException;
+import jakarta.el.ELException;
 
 public class JspELException extends ELException {
 

==================================================
JspMethodNotFoundException.java
index ca6a3847ad..820f21c18c 100644
--- a/java/org/apache/jasper/el/JspMethodExpression.java
+++ b/java/org/apache/jasper/el/JspMethodExpression.java
@@ -21,12 +21,12 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.MethodExpression;
-import javax.el.MethodInfo;
-import javax.el.MethodNotFoundException;
-import javax.el.PropertyNotFoundException;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.MethodExpression;
+import jakarta.el.MethodInfo;
+import jakarta.el.MethodNotFoundException;
+import jakarta.el.PropertyNotFoundException;
 
 public final class JspMethodExpression extends MethodExpression implements
         Externalizable {

==================================================
JspPropertyNotFoundException.java
index 886d82c0af..2827b19807 100644
--- a/java/org/apache/jasper/el/JspMethodNotFoundException.java
+++ b/java/org/apache/jasper/el/JspMethodNotFoundException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.MethodNotFoundException;
+import jakarta.el.MethodNotFoundException;
 
 public class JspMethodNotFoundException extends MethodNotFoundException {
 

==================================================
JspPropertyNotWritableException.java
index 3482d990a1..4217449f80 100644
--- a/java/org/apache/jasper/el/JspPropertyNotFoundException.java
+++ b/java/org/apache/jasper/el/JspPropertyNotFoundException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.PropertyNotFoundException;
+import jakarta.el.PropertyNotFoundException;
 
 public final class JspPropertyNotFoundException extends
         PropertyNotFoundException {

==================================================
JspValueExpression.java
index 0e2c1699ab..38bde6398f 100644
--- a/java/org/apache/jasper/el/JspPropertyNotWritableException.java
+++ b/java/org/apache/jasper/el/JspPropertyNotWritableException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.PropertyNotWritableException;
+import jakarta.el.PropertyNotWritableException;
 
 public class JspPropertyNotWritableException extends
         PropertyNotWritableException {

==================================================
VariableResolverImpl.java
index 6030c18db0..9fbea5f475 100644
--- a/java/org/apache/jasper/el/JspValueExpression.java
+++ b/java/org/apache/jasper/el/JspValueExpression.java
@@ -21,11 +21,11 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.PropertyNotFoundException;
-import javax.el.PropertyNotWritableException;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.PropertyNotFoundException;
+import jakarta.el.PropertyNotWritableException;
+import jakarta.el.ValueExpression;
 
 /**
  * Wrapper for providing context to ValueExpressions

==================================================
JspApplicationContextImpl.java
index 57e0da95f3..b6eaa8220e 100644
--- a/java/org/apache/jasper/el/VariableResolverImpl.java
+++ b/java/org/apache/jasper/el/VariableResolverImpl.java
@@ -16,10 +16,11 @@
  */
 package org.apache.jasper.el;
 
-import javax.el.ELContext;
 import javax.servlet.jsp.el.ELException;
 import javax.servlet.jsp.el.VariableResolver;
 
+import jakarta.el.ELContext;
+
 @Deprecated
 public final class VariableResolverImpl implements VariableResolver {
 

==================================================
JspContextWrapper.java
index f779b1bbdb..c0b89d2dab 100644
--- a/java/org/apache/jasper/runtime/JspApplicationContextImpl.java
+++ b/java/org/apache/jasper/runtime/JspApplicationContextImpl.java
@@ -21,16 +21,17 @@ import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.el.CompositeELResolver;
-import javax.el.ELContext;
-import javax.el.ELContextEvent;
-import javax.el.ELContextListener;
-import javax.el.ELResolver;
-import javax.el.ExpressionFactory;
 import javax.servlet.ServletContext;
 import javax.servlet.jsp.JspApplicationContext;
 import javax.servlet.jsp.JspContext;
 
+import jakarta.el.CompositeELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELContextEvent;
+import jakarta.el.ELContextListener;
+import jakarta.el.ELResolver;
+import jakarta.el.ExpressionFactory;
+
 import org.apache.jasper.Constants;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.el.ELContextImpl;

==================================================
PageContextImpl.java
index 765edf378b..1bda259cf8 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -28,12 +28,6 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
-import javax.el.EvaluationListener;
-import javax.el.FunctionMapper;
-import javax.el.ImportHandler;
-import javax.el.VariableMapper;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
@@ -53,6 +47,13 @@ import javax.servlet.jsp.tagext.BodyContent;
 import javax.servlet.jsp.tagext.JspTag;
 import javax.servlet.jsp.tagext.VariableInfo;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
+import jakarta.el.EvaluationListener;
+import jakarta.el.FunctionMapper;
+import jakarta.el.ImportHandler;
+import jakarta.el.VariableMapper;
+
 import org.apache.jasper.compiler.Localizer;
 
 /**

==================================================
ProtectedFunctionMapper.java
index ddb3ef447a..0aa46f6f91 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -25,11 +25,6 @@ import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Set;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.ExpressionFactory;
-import javax.el.ImportHandler;
-import javax.el.ValueExpression;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
@@ -46,6 +41,12 @@ import javax.servlet.jsp.JspWriter;
 import javax.servlet.jsp.PageContext;
 import javax.servlet.jsp.tagext.BodyContent;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ImportHandler;
+import jakarta.el.ValueExpression;
+
 import org.apache.jasper.Constants;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.el.ELContextImpl;

==================================================
TldRuleSet.java
index 2f354b6e12..59a6d7a634 100644
--- a/java/org/apache/jasper/runtime/ProtectedFunctionMapper.java
+++ b/java/org/apache/jasper/runtime/ProtectedFunctionMapper.java
@@ -30,7 +30,7 @@ import javax.servlet.jsp.el.FunctionMapper;
  * @author Kin-man Chung
  */
 @SuppressWarnings("deprecation") // Have to support old JSP EL API
-public final class ProtectedFunctionMapper extends javax.el.FunctionMapper
+public final class ProtectedFunctionMapper extends jakarta.el.FunctionMapper
         implements FunctionMapper {
 
     /**

==================================================
TestArrayELResolver.java
index ad3b13e68f..3a1e030933 100644
--- a/res/tomcat-maven/tomcat-resource.json
+++ b/res/tomcat-maven/tomcat-resource.json
@@ -1,6 +1,6 @@
 {
   "bundles":[
-    {"name":"javax.el.LocalStrings"},
+    {"name":"jakarta.el.LocalStrings"},
     {"name":"javax.servlet.LocalStrings"},
     {"name":"javax.servlet.http.LocalStrings"},
     {"name":"org.apache.catalina.authenticator.LocalStrings"},

==================================================
TestBeanELResolver.java
similarity index 99%
rename from test/javax/el/TestArrayELResolver.java
rename to test/jakarta/el/TestArrayELResolver.java
index 1280fb1904..80aaf4372a 100644
--- a/test/javax/el/TestArrayELResolver.java
+++ b/test/jakarta/el/TestArrayELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestBeanELResolverVarargsInvocation.java
similarity index 99%
rename from test/javax/el/TestBeanELResolver.java
rename to test/jakarta/el/TestBeanELResolver.java
index 7bd9bce19f..a1bf5a3703 100644
--- a/test/javax/el/TestBeanELResolver.java
+++ b/test/jakarta/el/TestBeanELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.beans.PropertyDescriptor;

==================================================
TestBeanNameELResolver.java
similarity index 99%
rename from test/javax/el/TestBeanELResolverVarargsInvocation.java
rename to test/jakarta/el/TestBeanELResolverVarargsInvocation.java
index 7c1dec32aa..926b25191a 100644
--- a/test/javax/el/TestBeanELResolverVarargsInvocation.java
+++ b/test/jakarta/el/TestBeanELResolverVarargsInvocation.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.lang.reflect.Method;
 import java.util.HashMap;

==================================================
TestCompositeELResolver.java
similarity index 99%
rename from test/javax/el/TestBeanNameELResolver.java
rename to test/jakarta/el/TestBeanNameELResolver.java
index f5ea30f331..f80455ea99 100644
--- a/test/javax/el/TestBeanNameELResolver.java
+++ b/test/jakarta/el/TestBeanNameELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestELContext.java
similarity index 98%
rename from test/javax/el/TestCompositeELResolver.java
rename to test/jakarta/el/TestCompositeELResolver.java
index a4485ff589..d2bbc37fc9 100644
--- a/test/javax/el/TestCompositeELResolver.java
+++ b/test/jakarta/el/TestCompositeELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import javax.servlet.http.HttpServletResponse;
 

==================================================
TestELProcessor.java
similarity index 98%
rename from test/javax/el/TestELContext.java
rename to test/jakarta/el/TestELContext.java
index ce9f257c27..0abd30c7ae 100644
--- a/test/javax/el/TestELContext.java
+++ b/test/jakarta/el/TestELContext.java
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.List;
 
-import javax.el.TesterEvaluationListener.Pair;
+import jakarta.el.TesterEvaluationListener.Pair;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestELResolver.java
similarity index 86%
rename from test/javax/el/TestELProcessor.java
rename to test/jakarta/el/TestELProcessor.java
index 4d3a14611d..4bf6673bcf 100644
--- a/test/javax/el/TestELProcessor.java
+++ b/test/jakarta/el/TestELProcessor.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -85,7 +85,7 @@ public class TestELProcessor {
     public void testDefineFunctionName03() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "test", "javax.el.TesterFunctions", "void doIt()");
+        elp.defineFunction("fn", "test", "jakarta.el.TesterFunctions", "void doIt()");
         elp.eval("fn:test()");
         Assert.assertEquals("A", TesterFunctions.getCallList());
     }
@@ -95,7 +95,7 @@ public class TestELProcessor {
     public void testDefineFunctionName04() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "test", "javax.el.TesterFunctions", "void doIt(int)");
+        elp.defineFunction("fn", "test", "jakarta.el.TesterFunctions", "void doIt(int)");
         elp.eval("fn:test(5)");
         Assert.assertEquals("B", TesterFunctions.getCallList());
     }
@@ -105,7 +105,7 @@ public class TestELProcessor {
     public void testDefineFunctionName05() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "test", "javax.el.TesterFunctions", "void doIt(Integer)");
+        elp.defineFunction("fn", "test", "jakarta.el.TesterFunctions", "void doIt(Integer)");
         elp.eval("fn:test(null)");
         Assert.assertEquals("C", TesterFunctions.getCallList());
     }
@@ -115,7 +115,7 @@ public class TestELProcessor {
     public void testDefineFunctionName06() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("", "", "javax.el.TesterFunctions", "void doIt(int)");
+        elp.defineFunction("", "", "jakarta.el.TesterFunctions", "void doIt(int)");
         elp.eval("doIt(5)");
         Assert.assertEquals("B", TesterFunctions.getCallList());
     }
@@ -125,7 +125,7 @@ public class TestELProcessor {
     public void testDefineFunctionName07() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "", "javax.el.TesterFunctions", "void doIt(int)");
+        elp.defineFunction("fn", "", "jakarta.el.TesterFunctions", "void doIt(int)");
         elp.eval("fn:doIt(5)");
         Assert.assertEquals("B", TesterFunctions.getCallList());
     }
@@ -135,7 +135,7 @@ public class TestELProcessor {
     public void testDefineFunctionName08() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "", "javax.el.TesterFunctions", "void doIt(int[])");
+        elp.defineFunction("fn", "", "jakarta.el.TesterFunctions", "void doIt(int[])");
         elp.eval("fn:doIt([5].stream().toArray())");
         Assert.assertEquals("D", TesterFunctions.getCallList());
     }
@@ -145,7 +145,7 @@ public class TestELProcessor {
     public void testDefineFunctionName09() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "", "javax.el.TesterFunctions", "void doIt(int[][])");
+        elp.defineFunction("fn", "", "jakarta.el.TesterFunctions", "void doIt(int[][])");
         elp.eval("fn:doIt([[5].stream().toArray()].stream().toArray())");
         Assert.assertEquals("E", TesterFunctions.getCallList());
     }
@@ -156,7 +156,7 @@ public class TestELProcessor {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
         elp.defineFunction("fn", "test1", "java.lang.Integer", "Integer valueOf(int)");
-        elp.defineFunction("fn", "test2", "javax.el.TesterFunctions", "void doIt(Integer[])");
+        elp.defineFunction("fn", "test2", "jakarta.el.TesterFunctions", "void doIt(Integer[])");
         elp.eval("fn:test2([fn:test1(1), fn:test1(2)].stream().toArray())");
         Assert.assertEquals("F", TesterFunctions.getCallList());
     }
@@ -167,7 +167,7 @@ public class TestELProcessor {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
         elp.defineFunction("fn", "test1", "java.lang.Integer", "Integer valueOf(int)");
-        elp.defineFunction("fn", "test2", "javax.el.TesterFunctions", "void doIt(Integer[][])");
+        elp.defineFunction("fn", "test2", "jakarta.el.TesterFunctions", "void doIt(Integer[][])");
         elp.eval("fn:test2([[fn:test1(1), fn:test1(2)].stream().toArray()].stream().toArray())");
         Assert.assertEquals("G", TesterFunctions.getCallList());
     }
@@ -177,7 +177,7 @@ public class TestELProcessor {
     public void testDefineFunctionName12() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "test", "javax.el.TesterFunctions", "void doIt(long...)");
+        elp.defineFunction("fn", "test", "jakarta.el.TesterFunctions", "void doIt(long...)");
         elp.eval("fn:test(1,2)");
         Assert.assertEquals("H", TesterFunctions.getCallList());
     }
@@ -187,7 +187,7 @@ public class TestELProcessor {
     public void testDefineFunctionName13() throws Exception {
         TesterFunctions.resetCallList();
         ELProcessor elp = new ELProcessor();
-        elp.defineFunction("fn", "test", "javax.el.TesterFunctions", "void doIt(Object...)");
+        elp.defineFunction("fn", "test", "jakarta.el.TesterFunctions", "void doIt(Object...)");
         elp.eval("fn:test(null, null)");
         Assert.assertEquals("I", TesterFunctions.getCallList());
     }

==================================================
TestEvaluationListener.java
similarity index 99%
rename from test/javax/el/TestELResolver.java
rename to test/jakarta/el/TestELResolver.java
index 3caaa53eb3..b492ea1501 100644
--- a/test/javax/el/TestELResolver.java
+++ b/test/jakarta/el/TestELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestImportHandler.java
similarity index 98%
rename from test/javax/el/TestEvaluationListener.java
rename to test/jakarta/el/TestEvaluationListener.java
index 13d8356ffe..4a0cd70d25 100644
--- a/test/javax/el/TestEvaluationListener.java
+++ b/test/jakarta/el/TestEvaluationListener.java
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.List;
 
-import javax.el.TesterEvaluationListener.Pair;
+import jakarta.el.TesterEvaluationListener.Pair;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestImportHandlerStandardPackages.java
similarity index 99%
rename from test/javax/el/TestImportHandler.java
rename to test/jakarta/el/TestImportHandler.java
index 56c4a28205..7f157aae43 100644
--- a/test/javax/el/TestImportHandler.java
+++ b/test/jakarta/el/TestImportHandler.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.ArrayList;
 

==================================================
TestListELResolver.java
similarity index 99%
rename from test/javax/el/TestImportHandlerStandardPackages.java
rename to test/jakarta/el/TestImportHandlerStandardPackages.java
index 4d9c01ab8d..203b3e4002 100644
--- a/test/javax/el/TestImportHandlerStandardPackages.java
+++ b/test/jakarta/el/TestImportHandlerStandardPackages.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.io.File;
 import java.lang.reflect.Field;

==================================================
TestMapELResolver.java
similarity index 99%
rename from test/javax/el/TestListELResolver.java
rename to test/jakarta/el/TestListELResolver.java
index 60aea8cd3a..0bfad0db4b 100644
--- a/test/javax/el/TestListELResolver.java
+++ b/test/jakarta/el/TestListELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.ArrayList;
 import java.util.Collections;

==================================================
TestResourceBundleELResolver.java
similarity index 99%
rename from test/javax/el/TestMapELResolver.java
rename to test/jakarta/el/TestMapELResolver.java
index 1a87b7ff08..0889a042f4 100644
--- a/test/javax/el/TestMapELResolver.java
+++ b/test/jakarta/el/TestMapELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Collections;

==================================================
TestStaticFieldELResolver.java
similarity index 99%
rename from test/javax/el/TestResourceBundleELResolver.java
rename to test/jakarta/el/TestResourceBundleELResolver.java
index 5acf02903c..5c0adfa572 100644
--- a/test/javax/el/TestResourceBundleELResolver.java
+++ b/test/jakarta/el/TestResourceBundleELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Enumeration;

==================================================
TestUtil.java
similarity index 99%
rename from test/javax/el/TestStaticFieldELResolver.java
rename to test/jakarta/el/TestStaticFieldELResolver.java
index 3655865153..4e97a2473b 100644
--- a/test/javax/el/TestStaticFieldELResolver.java
+++ b/test/jakarta/el/TestStaticFieldELResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TesterBean.java
similarity index 98%
rename from test/javax/el/TestUtil.java
rename to test/jakarta/el/TestUtil.java
index 536771c7e2..dc2a5ed2f1 100644
--- a/test/javax/el/TestUtil.java
+++ b/test/jakarta/el/TestUtil.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.Date;
 

==================================================
TesterBeanNameResolver.java
similarity index 98%
rename from test/javax/el/TesterBean.java
rename to test/jakarta/el/TesterBean.java
index 0ee12fa749..e781476e5b 100644
--- a/test/javax/el/TesterBean.java
+++ b/test/jakarta/el/TesterBean.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class TesterBean {
 

==================================================
TesterClass.java
similarity index 99%
rename from test/javax/el/TesterBeanNameResolver.java
rename to test/jakarta/el/TesterBeanNameResolver.java
index 8da8638b55..3fb2b7644f 100644
--- a/test/javax/el/TesterBeanNameResolver.java
+++ b/test/jakarta/el/TesterBeanNameResolver.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.HashMap;
 import java.util.Map;

==================================================
TesterELContext.java
similarity index 98%
rename from test/javax/el/TesterClass.java
rename to test/jakarta/el/TesterClass.java
index 699b3eccc8..7057aee54e 100644
--- a/test/javax/el/TesterClass.java
+++ b/test/jakarta/el/TesterClass.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class TesterClass {
 

==================================================
TesterELResolverOne.java
similarity index 98%
rename from test/javax/el/TesterELContext.java
rename to test/jakarta/el/TesterELContext.java
index 34f3106f40..7478cfb7c3 100644
--- a/test/javax/el/TesterELContext.java
+++ b/test/jakarta/el/TesterELContext.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class TesterELContext extends ELContext {
 

==================================================
TesterELResolverTwo.java
similarity index 98%
rename from test/javax/el/TesterELResolverOne.java
rename to test/jakarta/el/TesterELResolverOne.java
index 62217eb303..07427f7827 100644
--- a/test/javax/el/TesterELResolverOne.java
+++ b/test/jakarta/el/TesterELResolverOne.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class TesterELResolverOne extends TypeConverter {
 

==================================================
TesterEvaluationListener.java
similarity index 98%
rename from test/javax/el/TesterELResolverTwo.java
rename to test/jakarta/el/TesterELResolverTwo.java
index 6ffac1fb67..1e4c977c51 100644
--- a/test/javax/el/TesterELResolverTwo.java
+++ b/test/jakarta/el/TesterELResolverTwo.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class TesterELResolverTwo extends TypeConverter {
 

==================================================
TesterFunctions.java
similarity index 99%
rename from test/javax/el/TesterEvaluationListener.java
rename to test/jakarta/el/TesterEvaluationListener.java
index 7431beeb5c..5ba0a07587 100644
--- a/test/javax/el/TesterEvaluationListener.java
+++ b/test/jakarta/el/TesterEvaluationListener.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import java.util.ArrayList;
 import java.util.List;

==================================================
TesterImportHandlerPerformance.java
similarity index 98%
rename from test/javax/el/TesterFunctions.java
rename to test/jakarta/el/TesterFunctions.java
index 565a49587d..c14ad2b934 100644
--- a/test/javax/el/TesterFunctions.java
+++ b/test/jakarta/el/TesterFunctions.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 public class TesterFunctions {
 

==================================================
TesterPageContext.java
similarity index 98%
rename from test/javax/el/TesterImportHandlerPerformance.java
rename to test/jakarta/el/TesterImportHandlerPerformance.java
index e15405abb7..afef1a2b81 100644
--- a/test/javax/el/TesterImportHandlerPerformance.java
+++ b/test/jakarta/el/TesterImportHandlerPerformance.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.el;
+package jakarta.el;
 
 import org.junit.Test;
 

==================================================
TestScopedAttributeELResolverPerformance.java
index 6898d4341c..8619fdca96 100644
--- a/test/javax/servlet/jsp/TesterPageContext.java
+++ b/test/javax/servlet/jsp/TesterPageContext.java
@@ -19,7 +19,6 @@ package javax.servlet.jsp;
 import java.io.IOException;
 import java.util.Enumeration;
 
-import javax.el.ELContext;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
@@ -28,6 +27,8 @@ import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpSession;
 
+import jakarta.el.ELContext;
+
 public class TesterPageContext extends PageContext {
 
     @Override

==================================================
TestWebappClassLoader.java
index 9295155bd4..8aa5c21c2b 100644
--- a/test/javax/servlet/jsp/el/TestScopedAttributeELResolverPerformance.java
+++ b/test/javax/servlet/jsp/el/TestScopedAttributeELResolverPerformance.java
@@ -16,13 +16,14 @@
  */
 package javax.servlet.jsp.el;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELResolver;
-import javax.el.StandardELContext;
 import javax.servlet.jsp.JspContext;
 import javax.servlet.jsp.TesterPageContext;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELResolver;
+import jakarta.el.StandardELContext;
+
 import org.junit.Test;
 
 public class TestScopedAttributeELResolverPerformance {

==================================================
TestELEvaluation.java
index 3bba4cc493..cda4df097f 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoader.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoader.java
@@ -100,7 +100,7 @@ public class TestWebappClassLoader extends TomcatBaseTest {
             "org.apache.juli",
             "org.apache.naming",
             "org.apache.tomcat",
-            "javax.el",
+            "jakarta.el",
             "javax.servlet",
             "javax.websocket",
             "javax.security.auth.message"

==================================================
TestMethodExpressionImpl.java
index 41e41e95db..b4110cde84 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -20,8 +20,8 @@ package org.apache.el;
 import java.io.File;
 import java.util.Date;
 
-import javax.el.ELException;
-import javax.el.ValueExpression;
+import jakarta.el.ELException;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestValueExpressionImpl.java
index 8edf1f1646..dfcc91f0cf 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -17,11 +17,11 @@
 
 package org.apache.el;
 
-import javax.el.ELContext;
-import javax.el.ExpressionFactory;
-import javax.el.MethodExpression;
-import javax.el.MethodNotFoundException;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.MethodExpression;
+import jakarta.el.MethodNotFoundException;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Before;

==================================================
TesterFunctions.java
index 0e816be1a7..899ef9ec98 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -23,10 +23,10 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.el.ELContext;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
-import javax.el.ValueReference;
+import jakarta.el.ELContext;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
+import jakarta.el.ValueReference;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestELArithmetic.java
index 0f655b71a7..5108e98082 100644
--- a/test/org/apache/el/TesterFunctions.java
+++ b/test/org/apache/el/TesterFunctions.java
@@ -19,7 +19,7 @@ package org.apache.el;
 
 import java.lang.reflect.Method;
 
-import javax.el.FunctionMapper;
+import jakarta.el.FunctionMapper;
 
 public class TesterFunctions {
     public static String trim(String input) {

==================================================
TestELSupport.java
index bd47393c1b..6c4e80c108 100644
--- a/test/org/apache/el/lang/TestELArithmetic.java
+++ b/test/org/apache/el/lang/TestELArithmetic.java
@@ -19,7 +19,7 @@ package org.apache.el.lang;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TesterVariableMapperImpl.java
index 3276aff10d..e3d8bf90d3 100644
--- a/test/org/apache/el/lang/TestELSupport.java
+++ b/test/org/apache/el/lang/TestELSupport.java
@@ -20,8 +20,8 @@ import java.beans.PropertyEditorManager;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import javax.el.ELException;
-import javax.el.ELManager;
+import jakarta.el.ELException;
+import jakarta.el.ELManager;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstAnd.java
index fa4c879986..31fd6cafee 100644
--- a/test/org/apache/el/lang/TesterVariableMapperImpl.java
+++ b/test/org/apache/el/lang/TesterVariableMapperImpl.java
@@ -16,12 +16,12 @@
  */
 package org.apache.el.lang;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ExpressionFactory;
-import javax.el.TesterELContext;
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.TesterELContext;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstAssign.java
index 0969d5d37c..040717f088 100644
--- a/test/org/apache/el/parser/TestAstAnd.java
+++ b/test/org/apache/el/parser/TestAstAnd.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstChoice.java
index 88a61ec5b4..3e0e0cd750 100644
--- a/test/org/apache/el/parser/TestAstAssign.java
+++ b/test/org/apache/el/parser/TestAstAssign.java
@@ -16,11 +16,11 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELProcessor;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELProcessor;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstConcatenation.java
index d85d28e603..0eaa9f4a2f 100644
--- a/test/org/apache/el/parser/TestAstChoice.java
+++ b/test/org/apache/el/parser/TestAstChoice.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstFunction.java
index 8a28d865a2..68c51a8782 100644
--- a/test/org/apache/el/parser/TestAstConcatenation.java
+++ b/test/org/apache/el/parser/TestAstConcatenation.java
@@ -16,11 +16,11 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELProcessor;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELProcessor;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstIdentifier.java
index 25e7e7fbc3..c4d72b8c43 100644
--- a/test/org/apache/el/parser/TestAstFunction.java
+++ b/test/org/apache/el/parser/TestAstFunction.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstLambdaExpression.java
index 25d4016385..7f8b925258 100644
--- a/test/org/apache/el/parser/TestAstIdentifier.java
+++ b/test/org/apache/el/parser/TestAstIdentifier.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstListData.java
index 41dbff0074..226ad64c53 100644
--- a/test/org/apache/el/parser/TestAstLambdaExpression.java
+++ b/test/org/apache/el/parser/TestAstLambdaExpression.java
@@ -16,8 +16,8 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELException;
-import javax.el.ELProcessor;
+import jakarta.el.ELException;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -225,7 +225,7 @@ public class TestAstLambdaExpression {
     }
 
 
-    @Test(expected=javax.el.ELException.class)
+    @Test(expected=jakarta.el.ELException.class)
     public void testLambdaAsFunction08() {
         // Using a name space for the function is not allowed
         ELProcessor processor = new ELProcessor();

==================================================
TestAstMapData.java
index 94ff7b9026..0309ff9882 100644
--- a/test/org/apache/el/parser/TestAstListData.java
+++ b/test/org/apache/el/parser/TestAstListData.java
@@ -20,11 +20,11 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELProcessor;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELProcessor;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstNot.java
index 32a8876243..06b5503f13 100644
--- a/test/org/apache/el/parser/TestAstMapData.java
+++ b/test/org/apache/el/parser/TestAstMapData.java
@@ -20,11 +20,11 @@ import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELProcessor;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELProcessor;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstOr.java
index 3dfe6559b2..f6b859d92c 100644
--- a/test/org/apache/el/parser/TestAstNot.java
+++ b/test/org/apache/el/parser/TestAstNot.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstSemicolon.java
index b055ce16b3..46a30d010c 100644
--- a/test/org/apache/el/parser/TestAstOr.java
+++ b/test/org/apache/el/parser/TestAstOr.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELProcessor;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAstSetData.java
index 0a57ceb122..0660850176 100644
--- a/test/org/apache/el/parser/TestAstSemicolon.java
+++ b/test/org/apache/el/parser/TestAstSemicolon.java
@@ -16,11 +16,11 @@
  */
 package org.apache.el.parser;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELProcessor;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELProcessor;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestELParser.java
index 0e2847e9d7..db7c357e28 100644
--- a/test/org/apache/el/parser/TestAstSetData.java
+++ b/test/org/apache/el/parser/TestAstSetData.java
@@ -20,11 +20,11 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.el.ELContext;
-import javax.el.ELManager;
-import javax.el.ELProcessor;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELManager;
+import jakarta.el.ELProcessor;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestCollectionOperations.java
index d2f22ed9af..97e812ad1e 100644
--- a/test/org/apache/el/parser/TestELParser.java
+++ b/test/org/apache/el/parser/TestELParser.java
@@ -19,10 +19,10 @@ package org.apache.el.parser;
 
 import java.io.StringReader;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Ignore;

==================================================
TestReflectionUtil.java
index a0a7de305b..bf800cad2f 100644
--- a/test/org/apache/el/stream/TestCollectionOperations.java
+++ b/test/org/apache/el/stream/TestCollectionOperations.java
@@ -20,8 +20,8 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import javax.el.ELException;
-import javax.el.ELProcessor;
+import jakarta.el.ELException;
+import jakarta.el.ELProcessor;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestAttributeParser.java
index f39ae85467..43b519fbc6 100644
--- a/test/org/apache/el/util/TestReflectionUtil.java
+++ b/test/org/apache/el/util/TestReflectionUtil.java
@@ -16,7 +16,7 @@
  */
 package org.apache.el.util;
 
-import javax.el.MethodNotFoundException;
+import jakarta.el.MethodNotFoundException;
 
 import org.junit.Test;
 

==================================================
TestELParser.java
index eab6a42b74..4aaae48fd7 100644
--- a/test/org/apache/jasper/compiler/TestAttributeParser.java
+++ b/test/org/apache/jasper/compiler/TestAttributeParser.java
@@ -17,7 +17,7 @@
 
 package org.apache.jasper.compiler;
 
-import javax.el.ValueExpression;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestJasperELResolver.java
index ec4a3cb941..6b47533b64 100644
--- a/test/org/apache/jasper/compiler/TestELParser.java
+++ b/test/org/apache/jasper/compiler/TestELParser.java
@@ -16,11 +16,11 @@
  */
 package org.apache.jasper.compiler;
 
-import javax.el.ELContext;
-import javax.el.ELException;
-import javax.el.ELManager;
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
+import jakarta.el.ELManager;
+import jakarta.el.ExpressionFactory;
+import jakarta.el.ValueExpression;
 
 import org.junit.Assert;
 import org.junit.Test;

==================================================
TestTldParser.java
index 948465ce3b..869618d02b 100644
--- a/test/org/apache/jasper/el/TestJasperELResolver.java
+++ b/test/org/apache/jasper/el/TestJasperELResolver.java
@@ -21,9 +21,10 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.el.ELResolver;
 import javax.servlet.jsp.el.ImplicitObjectELResolver;
 
+import jakarta.el.ELResolver;
+
 import org.junit.Assert;
 import org.junit.Test;
 

==================================================
Foo.java
index 2c64a59740..f1d4f5ea37 100644
--- a/test/org/apache/tomcat/util/descriptor/tld/TestTldParser.java
+++ b/test/org/apache/tomcat/util/descriptor/tld/TestTldParser.java
@@ -84,12 +84,12 @@ public class TestTldParser {
 
         attributeInfo = tag.getAttributes().get(2);
         Assert.assertEquals("deferredValue", attributeInfo.getName());
-        Assert.assertEquals("javax.el.ValueExpression", attributeInfo.getTypeName());
+        Assert.assertEquals("jakarta.el.ValueExpression", attributeInfo.getTypeName());
         Assert.assertEquals("java.util.Date", attributeInfo.getExpectedTypeName());
 
         attributeInfo = tag.getAttributes().get(3);
         Assert.assertEquals("deferredMethod", attributeInfo.getName());
-        Assert.assertEquals("javax.el.MethodExpression", attributeInfo.getTypeName());
+        Assert.assertEquals("jakarta.el.MethodExpression", attributeInfo.getTypeName());
         Assert.assertEquals("java.util.Date getDate()", attributeInfo.getMethodSignature());
 
         Assert.assertEquals(1, xml.getTagFiles().size());

==================================================
Foo.java
index 20f8409d0c..ce6b556740 100644
--- a/test/util/a/Foo.java
+++ b/test/util/a/Foo.java
@@ -17,7 +17,7 @@
 package util.a;
 
 /**
- * Tester class used for {@link javax.el.TestImportHandler}.
+ * Tester class used for {@link jakarta.el.TestImportHandler}.
  */
 class Foo {
 }

==================================================
