eaf6c6bdf176df92f914af8381779ec0cb08e2de
==================================================
Remove InstanceListener, InstanceEvent and InstanceSupport
==================================================
Mark Thomas
==================================================
Mon Jan 4 19:38:59 2016 +0000
==================================================
Context.java
Remove InstanceListener, InstanceEvent and InstanceSupport

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1722946 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InstanceEvent.java
index 301134b612..77a6bc90a4 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -811,17 +811,6 @@ public interface Context extends Container, ContextBind {
      */
     public void addFilterMapBefore(FilterMap filterMap);
 
-    /**
-     * Add the classname of an InstanceListener to be added to each
-     * Wrapper appended to this Context.
-     *
-     * @param listener Java class name of an InstanceListener class
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    public void addInstanceListener(String listener);
-
 
     /**
      * Add a Locale Encoding Mapping (see Sec 5.4 of Servlet spec 2.4)
@@ -1003,16 +992,6 @@ public interface Context extends Container, ContextBind {
     public FilterMap[] findFilterMaps();
 
 
-    /**
-     * Return the set of InstanceListener classes that will be added to
-     * newly created Wrappers automatically.
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    public String[] findInstanceListeners();
-
-
     /**
      * Return the MIME type to which the specified extension is mapped,
      * if any; otherwise return <code>null</code>.
@@ -1231,18 +1210,6 @@ public interface Context extends Container, ContextBind {
     public void removeFilterMap(FilterMap filterMap);
 
 
-    /**
-     * Remove a class name from the set of InstanceListener classes that
-     * will be added to newly created Wrappers.
-     *
-     * @param listener Class name of an InstanceListener class to be removed
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    public void removeInstanceListener(String listener);
-
-
     /**
      * Remove the MIME mapping for the specified extension, if it exists;
      * otherwise, no action is taken.

==================================================
InstanceListener.java
deleted file mode 100644
index 01fb15e900..0000000000
--- a/java/org/apache/catalina/InstanceEvent.java
+++ /dev/null
@@ -1,397 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.catalina;
-
-
-import java.util.EventObject;
-
-import javax.servlet.Filter;
-import javax.servlet.Servlet;
-import javax.servlet.ServletRequest;
-import javax.servlet.ServletResponse;
-
-
-/**
- * General event for notifying listeners of significant events related to
- * a specific instance of a Servlet, or a specific instance of a Filter,
- * as opposed to the Wrapper component that manages it.
- *
- * @author Craig R. McClanahan
- *
- * @deprecated Will be removed in 9.0.x onwards
- */
-@Deprecated
-public final class InstanceEvent extends EventObject {
-
-    private static final long serialVersionUID = 1L;
-
-
-    /**
-     * The event indicating that the <code>init()</code> method is about
-     * to be called for this instance.
-     */
-    public static final String BEFORE_INIT_EVENT = "beforeInit";
-
-
-    /**
-     * The event indicating that the <code>init()</code> method has returned.
-     */
-    public static final String AFTER_INIT_EVENT = "afterInit";
-
-
-    /**
-     * The event indicating that the <code>service()</code> method is about
-     * to be called on a servlet.  The <code>servlet</code> property contains
-     * the servlet being called, and the <code>request</code> and
-     * <code>response</code> properties contain the current request and
-     * response being processed.
-     */
-    public static final String BEFORE_SERVICE_EVENT = "beforeService";
-
-
-    /**
-     * The event indicating that the <code>service()</code> method has
-     * returned.  The <code>servlet</code> property contains the servlet
-     * that was called, and the <code>request</code> and
-     * <code>response</code> properties contain the current request and
-     * response being processed.
-     */
-    public static final String AFTER_SERVICE_EVENT = "afterService";
-
-
-    /**
-     * The event indicating that the <code>destroy</code> method is about
-     * to be called for this instance.
-     */
-    public static final String BEFORE_DESTROY_EVENT = "beforeDestroy";
-
-
-    /**
-     * The event indicating that the <code>destroy()</code> method has
-     * returned.
-     */
-    public static final String AFTER_DESTROY_EVENT = "afterDestroy";
-
-
-    /**
-     * The event indicating that the <code>service()</code> method of a
-     * servlet accessed via a request dispatcher is about to be called.
-     * The <code>servlet</code> property contains a reference to the
-     * dispatched-to servlet instance, and the <code>request</code> and
-     * <code>response</code> properties contain the current request and
-     * response being processed.  The <code>wrapper</code> property will
-     * contain a reference to the dispatched-to Wrapper.
-     */
-    public static final String BEFORE_DISPATCH_EVENT = "beforeDispatch";
-
-
-    /**
-     * The event indicating that the <code>service()</code> method of a
-     * servlet accessed via a request dispatcher has returned.  The
-     * <code>servlet</code> property contains a reference to the
-     * dispatched-to servlet instance, and the <code>request</code> and
-     * <code>response</code> properties contain the current request and
-     * response being processed.  The <code>wrapper</code> property will
-     * contain a reference to the dispatched-to Wrapper.
-     */
-    public static final String AFTER_DISPATCH_EVENT = "afterDispatch";
-
-
-    /**
-     * The event indicating that the <code>doFilter()</code> method of a
-     * Filter is about to be called.  The <code>filter</code> property
-     * contains a reference to the relevant filter instance, and the
-     * <code>request</code> and <code>response</code> properties contain
-     * the current request and response being processed.
-     */
-    public static final String BEFORE_FILTER_EVENT = "beforeFilter";
-
-
-    /**
-     * The event indicating that the <code>doFilter()</code> method of a
-     * Filter has returned.  The <code>filter</code> property contains
-     * a reference to the relevant filter instance, and the
-     * <code>request</code> and <code>response</code> properties contain
-     * the current request and response being processed.
-     */
-    public static final String AFTER_FILTER_EVENT = "afterFilter";
-
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for filter lifecycle events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param filter Filter instance for which this event occurred
-     * @param type Event type (required)
-     */
-    public InstanceEvent(Wrapper wrapper, Filter filter, String type) {
-        this(wrapper, filter, type, null, null, null);
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for filter lifecycle events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param filter Filter instance for which this event occurred
-     * @param type Event type (required)
-     * @param exception Exception that occurred
-     */
-    public InstanceEvent(Wrapper wrapper, Filter filter, String type,
-                         Throwable exception) {
-        this(wrapper, filter, type, null, null, exception);
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for filter processing events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param filter Filter instance for which this event occurred
-     * @param type Event type (required)
-     * @param request Servlet request we are processing
-     * @param response Servlet response we are processing
-     */
-    public InstanceEvent(Wrapper wrapper, Filter filter, String type,
-                         ServletRequest request, ServletResponse response) {
-        this(wrapper, filter, type, request, response, null);
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for filter processing events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param filter Filter instance for which this event occurred
-     * @param type Event type (required)
-     * @param request Servlet request we are processing
-     * @param response Servlet response we are processing
-     * @param exception Exception that occurred
-     */
-    public InstanceEvent(Wrapper wrapper, Filter filter, String type,
-                         ServletRequest request, ServletResponse response,
-                         Throwable exception) {
-
-      super(wrapper);
-      this.filter = filter;
-      this.servlet = null;
-      this.type = type;
-      this.request = request;
-      this.response = response;
-      this.exception = exception;
-
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for processing servlet lifecycle events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param servlet Servlet instance for which this event occurred
-     * @param type Event type (required)
-     */
-    public InstanceEvent(Wrapper wrapper, Servlet servlet, String type) {
-        this(wrapper, servlet, type, null, null, null);
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for processing servlet lifecycle events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param servlet Servlet instance for which this event occurred
-     * @param type Event type (required)
-     * @param exception Exception that occurred
-     */
-    public InstanceEvent(Wrapper wrapper, Servlet servlet, String type,
-                         Throwable exception) {
-        this(wrapper, servlet, type, null, null, exception);
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for processing servlet processing events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param servlet Servlet instance for which this event occurred
-     * @param type Event type (required)
-     * @param request Servlet request we are processing
-     * @param response Servlet response we are processing
-     */
-    public InstanceEvent(Wrapper wrapper, Servlet servlet, String type,
-                         ServletRequest request, ServletResponse response) {
-        this(wrapper, servlet, type, request, response, null);
-    }
-
-
-    /**
-     * Construct a new InstanceEvent with the specified parameters.  This
-     * constructor is used for processing servlet processing events.
-     *
-     * @param wrapper Wrapper managing this servlet instance
-     * @param servlet Servlet instance for which this event occurred
-     * @param type Event type (required)
-     * @param request Servlet request we are processing
-     * @param response Servlet response we are processing
-     * @param exception Exception that occurred
-     */
-    public InstanceEvent(Wrapper wrapper, Servlet servlet, String type,
-                         ServletRequest request, ServletResponse response,
-                         Throwable exception) {
-
-      super(wrapper);
-      this.filter = null;
-      this.servlet = servlet;
-      this.type = type;
-      this.request = request;
-      this.response = response;
-      this.exception = exception;
-
-    }
-
-
-    // ----------------------------------------------------- Instance Variables
-
-
-    /**
-     * The exception that was thrown during the processing being reported
-     * by this event (AFTER_INIT_EVENT, AFTER_SERVICE_EVENT,
-     * AFTER_DESTROY_EVENT, AFTER_DISPATCH_EVENT, and AFTER_FILTER_EVENT only).
-     */
-    private final Throwable exception;
-
-
-    /**
-     * The Filter instance for which this event occurred (BEFORE_FILTER_EVENT
-     * and AFTER_FILTER_EVENT only).
-     */
-    private final transient Filter filter;
-
-
-    /**
-     * The servlet request being processed (BEFORE_FILTER_EVENT,
-     * AFTER_FILTER_EVENT, BEFORE_SERVICE_EVENT, and AFTER_SERVICE_EVENT).
-     */
-    private final transient ServletRequest request;
-
-
-    /**
-     * The servlet response being processed (BEFORE_FILTER_EVENT,
-     * AFTER_FILTER_EVENT, BEFORE_SERVICE_EVENT, and AFTER_SERVICE_EVENT).
-     */
-    private final transient ServletResponse response;
-
-
-    /**
-     * The Servlet instance for which this event occurred (not present on
-     * BEFORE_FILTER_EVENT or AFTER_FILTER_EVENT events).
-     */
-    private final transient Servlet servlet;
-
-
-    /**
-     * The event type this instance represents.
-     */
-    private final String type;
-
-
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * Return the exception that occurred during the processing
-     * that was reported by this event.
-     */
-    public Throwable getException() {
-
-        return (this.exception);
-
-    }
-
-
-    /**
-     * Return the filter instance for which this event occurred.
-     */
-    public Filter getFilter() {
-
-        return (this.filter);
-
-    }
-
-
-    /**
-     * Return the servlet request for which this event occurred.
-     */
-    public ServletRequest getRequest() {
-
-        return (this.request);
-
-    }
-
-
-    /**
-     * Return the servlet response for which this event occurred.
-     */
-    public ServletResponse getResponse() {
-
-        return (this.response);
-
-    }
-
-
-    /**
-     * Return the servlet instance for which this event occurred.
-     */
-    public Servlet getServlet() {
-
-        return (this.servlet);
-
-    }
-
-
-    /**
-     * Return the event type of this event.
-     */
-    public String getType() {
-
-        return (this.type);
-
-    }
-
-
-    /**
-     * Return the Wrapper managing the servlet instance for which this
-     * event occurred.
-     */
-    public Wrapper getWrapper() {
-
-        return (Wrapper) getSource();
-
-    }
-}

==================================================
Wrapper.java
deleted file mode 100644
index d9e8bff6b8..0000000000
--- a/java/org/apache/catalina/InstanceListener.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.catalina;
-
-
-/**
- * Interface defining a listener for significant events related to a
- * specific servlet instance, rather than to the Wrapper component that
- * is managing that instance.
- *
- * @author Craig R. McClanahan
- *
- * @deprecated Will be removed in 9.0.x onwards
- */
-@Deprecated
-public interface InstanceListener {
-
-
-    /**
-     * Acknowledge the occurrence of the specified event.
-     *
-     * @param event InstanceEvent that has occurred
-     */
-    public void instanceEvent(InstanceEvent event);
-
-
-}

==================================================
ApplicationDispatcher.java
index f0d5134973..28295a91cf 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -170,17 +170,6 @@ public interface Wrapper extends Container {
     public void addInitParameter(String name, String value);
 
 
-    /**
-     * Add a new listener interested in InstanceEvents.
-     *
-     * @param listener The new listener
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    public void addInstanceListener(InstanceListener listener);
-
-
     /**
      * Add a mapping associated with the Wrapper.
      *
@@ -292,17 +281,6 @@ public interface Wrapper extends Container {
     public void removeInitParameter(String name);
 
 
-    /**
-     * Remove a listener no longer interested in InstanceEvents.
-     *
-     * @param listener The listener to remove
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    public void removeInstanceListener(InstanceListener listener);
-
-
     /**
      * Remove a mapping associated with the wrapper.
      *

==================================================
ApplicationFilterChain.java
index 791eb4ffe4..1f679e5fc0 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -38,14 +38,12 @@ import javax.servlet.http.HttpServletResponse;
 import org.apache.catalina.AsyncDispatcher;
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
-import org.apache.catalina.InstanceEvent;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.ClientAbortException;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.RequestFacade;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.connector.ResponseFacade;
-import org.apache.catalina.util.InstanceSupport;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -61,7 +59,6 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @author Craig R. McClanahan
  */
-@SuppressWarnings("deprecation")
 final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher {
 
     static final boolean STRICT_SERVLET_COMPLIANCE;
@@ -219,11 +216,6 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         this.pathInfo = pathInfo;
         this.queryString = queryString;
         this.name = name;
-        if (wrapper instanceof StandardWrapper)
-            this.support = ((StandardWrapper) wrapper).getInstanceSupport();
-        else
-            this.support = new InstanceSupport(wrapper);
-
     }
 
 
@@ -268,15 +260,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
     /**
      * The StringManager for this package.
      */
-    private static final StringManager sm =
-      StringManager.getManager(Constants.Package);
-
-
-    /**
-     * The InstanceSupport instance associated with our Wrapper (used to
-     * send "before dispatch" and "after dispatch" events.
-     */
-    private final InstanceSupport support;
+    private static final StringManager sm = StringManager.getManager(Constants.Package);
 
 
     /**
@@ -713,35 +697,23 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
 
         // Call the service() method for the allocated servlet instance
         try {
-            support.fireInstanceEvent(InstanceEvent.BEFORE_DISPATCH_EVENT,
-                                      servlet, request, response);
             // for includes/forwards
             if ((servlet != null) && (filterChain != null)) {
                filterChain.doFilter(request, response);
              }
             // Servlet Service Method is called by the FilterChain
-            support.fireInstanceEvent(InstanceEvent.AFTER_DISPATCH_EVENT,
-                                      servlet, request, response);
         } catch (ClientAbortException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_DISPATCH_EVENT,
-                                      servlet, request, response);
             ioException = e;
         } catch (IOException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_DISPATCH_EVENT,
-                                      servlet, request, response);
             wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",
                              wrapper.getName()), e);
             ioException = e;
         } catch (UnavailableException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_DISPATCH_EVENT,
-                                      servlet, request, response);
             wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",
                              wrapper.getName()), e);
             servletException = e;
             wrapper.unavailable(e);
         } catch (ServletException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_DISPATCH_EVENT,
-                                      servlet, request, response);
             Throwable rootCause = StandardWrapper.getRootCause(e);
             if (!(rootCause instanceof ClientAbortException)) {
                 wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",
@@ -749,8 +721,6 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
             }
             servletException = e;
         } catch (RuntimeException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_DISPATCH_EVENT,
-                                      servlet, request, response);
             wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",
                              wrapper.getName()), e);
             runtimeException = e;

==================================================
ApplicationFilterFactory.java
index c56173d1a6..e1a3f35e01 100644
--- a/java/org/apache/catalina/core/ApplicationFilterChain.java
+++ b/java/org/apache/catalina/core/ApplicationFilterChain.java
@@ -30,9 +30,7 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Globals;
-import org.apache.catalina.InstanceEvent;
 import org.apache.catalina.security.SecurityUtil;
-import org.apache.catalina.util.InstanceSupport;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -68,27 +66,12 @@ final class ApplicationFilterChain implements FilterChain {
     public static final int INCREMENT = 10;
 
 
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a new chain instance with no defined filters.
-     */
-    public ApplicationFilterChain() {
-
-        super();
-
-    }
-
-
     // ----------------------------------------------------- Instance Variables
 
-
     /**
      * Filters.
      */
-    private ApplicationFilterConfig[] filters =
-        new ApplicationFilterConfig[0];
+    private ApplicationFilterConfig[] filters = new ApplicationFilterConfig[0];
 
 
     /**
@@ -111,17 +94,15 @@ final class ApplicationFilterChain implements FilterChain {
 
 
     /**
-     * The string manager for our package.
+     * Does the associated servlet instance support async processing?
      */
-    private static final StringManager sm =
-      StringManager.getManager(Constants.Package);
-
+    private boolean servletSupportsAsync = false;
 
     /**
-     * The InstanceSupport instance associated with our Wrapper (used to
-     * send "before filter" and "after filter" events.
+     * The string manager for our package.
      */
-    private InstanceSupport support = null;
+    private static final StringManager sm =
+      StringManager.getManager(Constants.Package);
 
 
     /**
@@ -196,13 +177,10 @@ final class ApplicationFilterChain implements FilterChain {
             Filter filter = null;
             try {
                 filter = filterConfig.getFilter();
-                support.fireInstanceEvent(InstanceEvent.BEFORE_FILTER_EVENT,
-                                          filter, request, response);
 
                 if (request.isAsyncSupported() && "false".equalsIgnoreCase(
                         filterConfig.getFilterDef().getAsyncSupported())) {
-                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,
-                            Boolean.FALSE);
+                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);
                 }
                 if( Globals.IS_SECURITY_ENABLED ) {
                     final ServletRequest req = request;
@@ -211,28 +189,16 @@ final class ApplicationFilterChain implements FilterChain {
                         ((HttpServletRequest) req).getUserPrincipal();
 
                     Object[] args = new Object[]{req, res, this};
-                    SecurityUtil.doAsPrivilege
-                        ("doFilter", filter, classType, args, principal);
-
+                    SecurityUtil.doAsPrivilege ("doFilter", filter, classType, args, principal);
                 } else {
                     filter.doFilter(request, response, this);
                 }
-
-                support.fireInstanceEvent(InstanceEvent.AFTER_FILTER_EVENT,
-                                          filter, request, response);
             } catch (IOException | ServletException | RuntimeException e) {
-                if (filter != null)
-                    support.fireInstanceEvent(InstanceEvent.AFTER_FILTER_EVENT,
-                                              filter, request, response, e);
                 throw e;
             } catch (Throwable e) {
                 e = ExceptionUtils.unwrapInvocationTargetException(e);
                 ExceptionUtils.handleThrowable(e);
-                if (filter != null)
-                    support.fireInstanceEvent(InstanceEvent.AFTER_FILTER_EVENT,
-                                              filter, request, response, e);
-                throw new ServletException
-                  (sm.getString("filterChain.filter"), e);
+                throw new ServletException(sm.getString("filterChain.filter"), e);
             }
             return;
         }
@@ -244,10 +210,7 @@ final class ApplicationFilterChain implements FilterChain {
                 lastServicedResponse.set(response);
             }
 
-            support.fireInstanceEvent(InstanceEvent.BEFORE_SERVICE_EVENT,
-                                      servlet, request, response);
-            if (request.isAsyncSupported()
-                    && !support.getWrapper().isAsyncSupported()) {
+            if (request.isAsyncSupported() && !servletSupportsAsync) {
                 request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,
                         Boolean.FALSE);
             }
@@ -272,24 +235,14 @@ final class ApplicationFilterChain implements FilterChain {
             } else {
                 servlet.service(request, response);
             }
-            support.fireInstanceEvent(InstanceEvent.AFTER_SERVICE_EVENT,
-                                      servlet, request, response);
         } catch (IOException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_SERVICE_EVENT,
-                                      servlet, request, response, e);
             throw e;
         } catch (ServletException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_SERVICE_EVENT,
-                                      servlet, request, response, e);
             throw e;
         } catch (RuntimeException e) {
-            support.fireInstanceEvent(InstanceEvent.AFTER_SERVICE_EVENT,
-                                      servlet, request, response, e);
             throw e;
         } catch (Throwable e) {
             ExceptionUtils.handleThrowable(e);
-            support.fireInstanceEvent(InstanceEvent.AFTER_SERVICE_EVENT,
-                                      servlet, request, response, e);
             throw new ServletException
               (sm.getString("filterChain.servlet"), e);
         } finally {
@@ -353,15 +306,13 @@ final class ApplicationFilterChain implements FilterChain {
      * Release references to the filters and wrapper executed by this chain.
      */
     void release() {
-
         for (int i = 0; i < n; i++) {
             filters[i] = null;
         }
         n = 0;
         pos = 0;
         servlet = null;
-        support = null;
-
+        servletSupportsAsync = false;
     }
 
 
@@ -379,24 +330,11 @@ final class ApplicationFilterChain implements FilterChain {
      * @param servlet The Wrapper for the servlet to be executed
      */
     void setServlet(Servlet servlet) {
-
         this.servlet = servlet;
-
     }
 
 
-    /**
-     * Set the InstanceSupport object used for event notifications
-     * for this filter chain.
-     *
-     * @param support The InstanceSupport object for our Wrapper
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    void setSupport(InstanceSupport support) {
-
-        this.support = support;
-
+    void setServletSupportsAsync(boolean servletSupportsAsync) {
+        this.servletSupportsAsync = servletSupportsAsync;
     }
 }

==================================================
StandardContext.java
index c2977607dc..7f41a26453 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -50,7 +50,6 @@ public final class ApplicationFilterFactory {
      * @return The configured FilterChain instance or null if none is to be
      *         executed.
      */
-    @SuppressWarnings("deprecation")
     public static ApplicationFilterChain createFilterChain
         (ServletRequest request, Wrapper wrapper, Servlet servlet) {
 
@@ -92,9 +91,7 @@ public final class ApplicationFilterFactory {
         }
 
         filterChain.setServlet(servlet);
-
-        filterChain.setSupport
-            (((StandardWrapper)wrapper).getInstanceSupport());
+        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());
 
         // Acquire the filter mappings for this Context
         StandardContext context = (StandardContext) wrapper.getParent();

==================================================
StandardWrapper.java
index 69f486cbd8..a6eb1b06c8 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -88,7 +88,6 @@ import org.apache.catalina.ContainerListener;
 import org.apache.catalina.Context;
 import org.apache.catalina.CredentialHandler;
 import org.apache.catalina.Globals;
-import org.apache.catalina.InstanceListener;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
@@ -145,7 +144,6 @@ import org.apache.tomcat.util.security.PrivilegedSetTccl;
  * @author Craig R. McClanahan
  * @author Remy Maucherat
  */
-@SuppressWarnings("deprecation")
 public class StandardContext extends ContainerBase
         implements Context, NotificationEmitter {
 
@@ -406,15 +404,6 @@ public class StandardContext extends ContainerBase
     private boolean ignoreAnnotations = false;
 
 
-    /**
-     * The set of classnames of InstanceListeners that will be added
-     * to each newly created Wrapper by <code>createWrapper()</code>.
-     */
-    private String instanceListeners[] = new String[0];
-
-    private final Object instanceListenersLock = new Object();
-
-
     /**
      * The Loader implementation with which this Container is associated.
      */
@@ -2974,28 +2963,6 @@ public class StandardContext extends ContainerBase
         }
     }
 
-    /**
-     * Add the classname of an InstanceListener to be added to each
-     * Wrapper appended to this Context.
-     *
-     * @param listener Java class name of an InstanceListener class
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    @Override
-    public void addInstanceListener(String listener) {
-
-        synchronized (instanceListenersLock) {
-            String results[] =new String[instanceListeners.length + 1];
-            for (int i = 0; i < instanceListeners.length; i++)
-                results[i] = instanceListeners[i];
-            results[instanceListeners.length] = listener;
-            instanceListeners = results;
-        }
-        fireContainerEvent("addInstanceListener", listener);
-
-    }
 
     /**
      * Add a Locale Encoding Mapping (see Sec 5.4 of Servlet spec 2.4)
@@ -3290,21 +3257,6 @@ public class StandardContext extends ContainerBase
             wrapper = new StandardWrapper();
         }
 
-        synchronized (instanceListenersLock) {
-            for (int i = 0; i < instanceListeners.length; i++) {
-                try {
-                    Class<?> clazz = Class.forName(instanceListeners[i]);
-                    InstanceListener listener =
-                      (InstanceListener) clazz.newInstance();
-                    wrapper.addInstanceListener(listener);
-                } catch (Throwable t) {
-                    ExceptionUtils.handleThrowable(t);
-                    log.error("createWrapper", t);
-                    return (null);
-                }
-            }
-        }
-
         synchronized (wrapperLifecyclesLock) {
             for (int i = 0; i < wrapperLifecycles.length; i++) {
                 try {
@@ -3468,23 +3420,6 @@ public class StandardContext extends ContainerBase
     }
 
 
-    /**
-     * Return the set of InstanceListener classes that will be added to
-     * newly created Wrappers automatically.
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    @Override
-    public String[] findInstanceListeners() {
-
-        synchronized (instanceListenersLock) {
-            return (instanceListeners);
-        }
-
-    }
-
-
     /**
      * Return the message destination with the specified name, if any;
      * otherwise, return <code>null</code>.
@@ -4044,48 +3979,6 @@ public class StandardContext extends ContainerBase
     }
 
 
-    /**
-     * Remove a class name from the set of InstanceListener classes that
-     * will be added to newly created Wrappers.
-     *
-     * @param listener Class name of an InstanceListener class to be removed
-     *
-     * @deprecated Will be removed in 9.0.x onwards
-     */
-    @Deprecated
-    @Override
-    public void removeInstanceListener(String listener) {
-
-        synchronized (instanceListenersLock) {
-
-            // Make sure this listener is currently present
-            int n = -1;
-            for (int i = 0; i < instanceListeners.length; i++) {
-                if (instanceListeners[i].equals(listener)) {
-                    n = i;
-                    break;
-                }
-            }
-            if (n < 0)
-                return;
-
-            // Remove the specified listener
-            int j = 0;
-            String results[] = new String[instanceListeners.length - 1];
-            for (int i = 0; i < instanceListeners.length; i++) {
-                if (i != n)
-                    results[j++] = instanceListeners[i];
-            }
-            instanceListeners = results;
-
-        }
-
-        // Inform interested listeners
-        fireContainerEvent("removeInstanceListener", listener);
-
-    }
-
-
     /**
      * Remove any message destination with the specified name.
      *
@@ -5616,10 +5509,6 @@ public class StandardContext extends ContainerBase
             namingResources.destroy();
         }
 
-        synchronized (instanceListenersLock) {
-            instanceListeners = new String[0];
-        }
-
         Loader loader = getLoader();
         if (loader instanceof Lifecycle) {
             ((Lifecycle) loader).destroy();

==================================================
ContextRuleSet.java
index c4dac9d706..b5b3694b47 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -395,15 +395,6 @@
                  type="java.lang.String"/>
     </operation>
 
-    <operation name="addInstanceListener"
-               description="Add the classname of an InstanceListener to be added to each Wrapper appended to this Context."
-               impact="ACTION"
-               returnType="void">
-      <parameter name="listener"
-                 description="Java class name of an InstanceListener class"
-                 type="java.lang.String"/>
-    </operation>
-
     <operation name="addLifecycleListener"
                description="Add a lifecycle listener to this Context"
                impact="ACTION"
@@ -617,12 +608,6 @@
                returnType="[Ljava.lang.String;">
     </operation>
 
-    <operation name="findInstanceListeners"
-               description="Return the set of InstanceListener classes that will be added to newly created Wrappers automatically."
-               impact="INFO"
-               returnType="[Ljava.lang.String;">
-    </operation>
-
     <operation name="findLifecycleListenerNames"
                description="Return the set of lifecycle listener class names configured for this application."
                impact="INFO"
@@ -797,15 +782,6 @@
                  type="java.lang.String"/>
     </operation>
 
-    <operation name="removeInstanceListener"
-               description="Remove the application parameter with the specified name from the set for this application."
-               impact="ACTION"
-               returnType="void">
-      <parameter name="listener"
-                 description="Class name of an InstanceListener class to be removed"
-                 type="java.lang.String"/>
-    </operation>
-
     <operation name="removeLifecycleListeners"
                description="Removes lifecycle listeners of given class type from this Context"
                impact="ACTION"

==================================================
FailedContext.java
index 0ca1045673..92507be749 100644
--- a/java/org/apache/catalina/startup/ContextRuleSet.java
+++ b/java/org/apache/catalina/startup/ContextRuleSet.java
@@ -117,8 +117,6 @@ public class ContextRuleSet extends RuleSetBase {
                                 "addChild",
                                 "org.apache.catalina.Container");
         }
-        digester.addCallMethod(prefix + "Context/InstanceListener",
-                               "addInstanceListener", 0);
 
         digester.addObjectCreate(prefix + "Context/Listener",
                                  null, // MUST be specified in the element

==================================================
InstanceListenerSF.java
index f566ce0447..8f18b8edb3 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -529,13 +529,6 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public void removeFilterMap(FilterMap filterMap) { /* NO-OP */ }
 
-    @Override
-    public void addInstanceListener(String listener) { /* NO-OP */ }
-    @Override
-    public String[] findInstanceListeners() { return null; }
-    @Override
-    public void removeInstanceListener(String listener) { /* NO-OP */ }
-
     @Override
     public void addLocaleEncodingMappingParameter(String locale, String encoding) { /* NO-OP */ }
 

==================================================
StandardContextSF.java
deleted file mode 100644
index f4c0338ab5..0000000000
--- a/java/org/apache/catalina/storeconfig/InstanceListenerSF.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.storeconfig;
-
-import java.io.PrintWriter;
-
-import org.apache.catalina.core.StandardContext;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-
-/**
- * Store Context InstanceListener
- */
-public class InstanceListenerSF extends StoreFactoryBase {
-    private static Log log = LogFactory.getLog(InstanceListenerSF.class);
-
-    /*
-     * Store nested Element Value Arrays
-     *
-     * @see org.apache.catalina.config.IStoreFactory#store(java.io.PrintWriter,
-     *      int, java.lang.Object)
-     */
-    @Override
-    public void store(PrintWriter aWriter, int indent, Object aElement)
-            throws Exception {
-        if (aElement instanceof StandardContext) {
-            StoreDescription elementDesc = getRegistry().findDescription(
-                    aElement.getClass().getName() + ".[InstanceListener]");
-            @SuppressWarnings("deprecation")
-            String[] listeners = ((StandardContext) aElement)
-                    .findInstanceListeners();
-            if (elementDesc != null) {
-                if (log.isDebugEnabled())
-                    log.debug("store " + elementDesc.getTag() + "( " + aElement
-                            + " )");
-                getStoreAppender().printTagArray(aWriter, "InstanceListener",
-                        indent, listeners);
-            }
-        } else {
-            if (log.isWarnEnabled())
-                log.warn("Descriptor for element" + aElement.getClass()
-                        + ".[InstanceListener] not configured!");
-        }
-    }
-}
\ No newline at end of file

==================================================
InstanceSupport.java
index c4f5a5dbc7..0dab7ffea2 100644
--- a/java/org/apache/catalina/storeconfig/server-registry.xml
+++ b/java/org/apache/catalina/storeconfig/server-registry.xml
@@ -341,14 +341,6 @@
         tagClass="org.apache.tomcat.util.descriptor.web.ContextTransaction"
         storeFactoryClass="org.apache.catalina.storeconfig.StoreFactoryBase">
      </Description>
-     <Description
-        id="org.apache.catalina.core.StandardContext.[InstanceListener]"
-        tag="InstanceListener"
-        standard="true"
-        default="false"
-        attributes="false"
-        storeFactoryClass="org.apache.catalina.storeconfig.InstanceListenerSF">
-     </Description>
      <Description
         id="org.apache.catalina.core.StandardContext.[WrapperLifecycle]"
         tag="WrapperLifecycle"

==================================================
TesterContext.java
deleted file mode 100644
index 2abbe6db48..0000000000
--- a/java/org/apache/catalina/util/InstanceSupport.java
+++ /dev/null
@@ -1,342 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.catalina.util;
-
-
-import javax.servlet.Filter;
-import javax.servlet.Servlet;
-import javax.servlet.ServletRequest;
-import javax.servlet.ServletResponse;
-
-import org.apache.catalina.InstanceEvent;
-import org.apache.catalina.InstanceListener;
-import org.apache.catalina.Wrapper;
-
-
-/**
- * Support class to assist in firing InstanceEvent notifications to
- * registered InstanceListeners.
- *
- * @author Craig R. McClanahan
- *
- * @deprecated Will be removed in 9.0.x onwards
- */
-@Deprecated
-public final class InstanceSupport {
-
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a new InstanceSupport object associated with the specified
-     * Instance component.
-     *
-     * @param wrapper The component that will be the source
-     *  of events that we fire
-     */
-    public InstanceSupport(Wrapper wrapper) {
-
-        super();
-        this.wrapper = wrapper;
-
-    }
-
-
-    // ----------------------------------------------------- Instance Variables
-
-
-    /**
-     * The set of registered InstanceListeners for event notifications.
-     */
-    private InstanceListener listeners[] = new InstanceListener[0];
-
-    private final Object listenersLock = new Object(); // Lock object for changes to listeners
-
-
-    /**
-     * The source component for instance events that we will fire.
-     */
-    private final Wrapper wrapper;
-
-
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * Return the Wrapper with which we are associated.
-     */
-    public Wrapper getWrapper() {
-
-        return (this.wrapper);
-
-    }
-
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Add a lifecycle event listener to this component.
-     *
-     * @param listener The listener to add
-     */
-    public void addInstanceListener(InstanceListener listener) {
-
-      synchronized (listenersLock) {
-          InstanceListener results[] =
-            new InstanceListener[listeners.length + 1];
-          for (int i = 0; i < listeners.length; i++)
-              results[i] = listeners[i];
-          results[listeners.length] = listener;
-          listeners = results;
-      }
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param filter The relevant Filter for this event
-     */
-    public void fireInstanceEvent(String type, Filter filter) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, filter, type);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param filter The relevant Filter for this event
-     * @param exception Exception that occurred
-     */
-    public void fireInstanceEvent(String type, Filter filter,
-                                  Throwable exception) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, filter, type,
-                                                exception);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param filter The relevant Filter for this event
-     * @param request The servlet request we are processing
-     * @param response The servlet response we are processing
-     */
-    public void fireInstanceEvent(String type, Filter filter,
-                                  ServletRequest request,
-                                  ServletResponse response) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, filter, type,
-                                                request, response);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param filter The relevant Filter for this event
-     * @param request The servlet request we are processing
-     * @param response The servlet response we are processing
-     * @param exception Exception that occurred
-     */
-    public void fireInstanceEvent(String type, Filter filter,
-                                  ServletRequest request,
-                                  ServletResponse response,
-                                  Throwable exception) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, filter, type,
-                                                request, response, exception);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param servlet The relevant Servlet for this event
-     */
-    public void fireInstanceEvent(String type, Servlet servlet) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, servlet, type);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param servlet The relevant Servlet for this event
-     * @param exception Exception that occurred
-     */
-    public void fireInstanceEvent(String type, Servlet servlet,
-                                  Throwable exception) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, servlet, type,
-                                                exception);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param servlet The relevant Servlet for this event
-     * @param request The servlet request we are processing
-     * @param response The servlet response we are processing
-     */
-    public void fireInstanceEvent(String type, Servlet servlet,
-                                  ServletRequest request,
-                                  ServletResponse response) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, servlet, type,
-                                                request, response);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Notify all lifecycle event listeners that a particular event has
-     * occurred for this Container.  The default implementation performs
-     * this notification synchronously using the calling thread.
-     *
-     * @param type Event type
-     * @param servlet The relevant Servlet for this event
-     * @param request The servlet request we are processing
-     * @param response The servlet response we are processing
-     * @param exception Exception that occurred
-     */
-    public void fireInstanceEvent(String type, Servlet servlet,
-                                  ServletRequest request,
-                                  ServletResponse response,
-                                  Throwable exception) {
-
-        if (listeners.length == 0)
-            return;
-
-        InstanceEvent event = new InstanceEvent(wrapper, servlet, type,
-                                                request, response, exception);
-        InstanceListener interested[] = listeners;
-        for (int i = 0; i < interested.length; i++)
-            interested[i].instanceEvent(event);
-
-    }
-
-
-    /**
-     * Remove a lifecycle event listener from this component.
-     *
-     * @param listener The listener to remove
-     */
-    public void removeInstanceListener(InstanceListener listener) {
-
-        synchronized (listenersLock) {
-            int n = -1;
-            for (int i = 0; i < listeners.length; i++) {
-                if (listeners[i] == listener) {
-                    n = i;
-                    break;
-                }
-            }
-            if (n < 0)
-                return;
-            InstanceListener results[] =
-              new InstanceListener[listeners.length - 1];
-            int j = 0;
-            for (int i = 0; i < listeners.length; i++) {
-                if (i != n)
-                    results[j++] = listeners[i];
-            }
-            listeners = results;
-        }
-
-    }
-
-
-}

==================================================
