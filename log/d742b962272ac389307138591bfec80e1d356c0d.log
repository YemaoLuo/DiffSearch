d742b962272ac389307138591bfec80e1d356c0d
==================================================
Add test to confirm that the server ignores the reserved bit if set
==================================================
Mark Thomas
==================================================
Wed Jun 3 14:08:53 2015 +0000
==================================================
Http2TestBase.java
Add test to confirm that the server ignores the reserved bit if set

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1683339 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHttp2Section_4_1.java
index 604cc31f38..4af456c80f 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -107,25 +107,37 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
     protected void sendSimpleRequest(int streamId) throws IOException {
+        byte[] frameHeader = new byte[9];
+        ByteBuffer headersPayload = ByteBuffer.allocate(128);
+
+        buildSimpleRequest(frameHeader, headersPayload, streamId);
+        writeSimpleRequest(frameHeader, headersPayload);
+    }
+
+
+    protected void buildSimpleRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
         MimeHeaders headers = new MimeHeaders();
         headers.addValue(":method").setString("GET");
         headers.addValue(":path").setString("/any");
         headers.addValue(":authority").setString("localhost:" + getPort());
-        ByteBuffer buf = ByteBuffer.allocate(128);
-        hpackEncoder.encode(headers, buf);
+        hpackEncoder.encode(headers, headersPayload);
 
-        buf.flip();
-        byte[] frameHeader = new byte[9];
+        headersPayload.flip();
 
-        ByteUtil.setThreeBytes(frameHeader, 0, buf.limit());
+        ByteUtil.setThreeBytes(frameHeader, 0, headersPayload.limit());
         // Header frame is type 0x01
         frameHeader[3] = 0x01;
         // Flags. end of headers (0x04). end of stream (0x01)
         frameHeader[4] = 0x05;
         // Stream id
         ByteUtil.set31Bits(frameHeader, 5, streamId);
+    }
+
+
+    protected void writeSimpleRequest(byte[] frameHeader, ByteBuffer headersPayload)
+            throws IOException {
         os.write(frameHeader);
-        os.write(buf.array(), buf.arrayOffset(), buf.limit());
+        os.write(headersPayload.array(), headersPayload.arrayOffset(), headersPayload.limit());
         os.flush();
     }
 

==================================================
