c493cd44bd0be8d2089969da2fe9ca067bce2092
==================================================
Get Jasper to use same web.xml (including merging if appropriate) as Catalina by default. If no merged web.xml is found, fall back to previous behaviour.
==================================================
Mark Emlyn
==================================================
Wed Dec 30 16:04:23 2009 +0000
==================================================
TldLocationsCache.java
Get Jasper to use same web.xml (including merging if appropriate) as Catalina by default. If no merged web.xml is found, fall back to previous behaviour.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@894659 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ParserUtils.java
index 97c94d4f06..4a6488e721 100644
--- a/java/org/apache/jasper/compiler/TldLocationsCache.java
+++ b/java/org/apache/jasper/compiler/TldLocationsCache.java
@@ -17,6 +17,7 @@
 
 package org.apache.jasper.compiler;
 
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -237,50 +238,67 @@ public class TldLocationsCache {
      * This is not kept in sync with o.a.c.startup.TldConfig as the Jasper only
      * needs the URI to TLD mappings from scan web.xml whereas TldConfig needs
      * to scan the actual TLD files.
+     * 
+     * Search order is:
+     * - web.xml scanned by Tomcat and placed in context attribute
+     * - location specified by ALT_DD_ATTR
+     * - /WEB-INF/web.xml
      */    
     private void tldScanWebXml() throws Exception {
 
         InputStream is = null;
+        String systemId = null;
 
         try {
-            // Acquire input stream to web application deployment descriptor
-            String altDDName = (String)ctxt.getAttribute(
-                                                    Constants.ALT_DD_ATTR);
-            URL uri = null;
-            if (altDDName != null) {
-                try {
-                    uri = new URL(FILE_PROTOCOL+altDDName.replace('\\', '/'));
-                } catch (MalformedURLException e) {
-                    if (log.isWarnEnabled()) {
+            // Is a web.xml provided as context attribute?
+            String webXml = (String) ctxt.getAttribute(
+                    org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML);
+            if (webXml != null) {
+                is = new ByteArrayInputStream(webXml.getBytes());
+                systemId = org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML;
+            }
+            
+            // If not available as context attribute, look for an alternative
+            // location
+            if (is == null) {
+                // Acquire input stream to web application deployment descriptor
+                String altDDName = (String)ctxt.getAttribute(
+                                                        Constants.ALT_DD_ATTR);
+                if (altDDName != null) {
+                    try {
+                        URL uri =
+                            new URL(FILE_PROTOCOL+altDDName.replace('\\', '/'));
+                        is = uri.openStream();
+                        systemId = uri.toExternalForm();
+                    } catch (MalformedURLException e) {
                         log.warn(Localizer.getMessage(
-                                            "jsp.error.internal.filenotfound",
-                                            altDDName));
+                                "jsp.error.internal.filenotfound",
+                                altDDName));
                     }
                 }
-            } else {
-                uri = ctxt.getResource(WEB_XML);
-                if (uri == null && log.isWarnEnabled()) {
+            }
+            
+            // Finally, try the default /WEB-INF/web.xml
+            if (is == null) {
+                URL uri = ctxt.getResource(WEB_XML);
+                if (uri == null) {
                     log.warn(Localizer.getMessage(
-                                            "jsp.error.internal.filenotfound",
-                                            WEB_XML));
+                            "jsp.error.internal.filenotfound", WEB_XML));
+                } else {
+                    is = uri.openStream();
+                    systemId = uri.toExternalForm();
                 }
             }
 
-            if (uri == null) {
+            if (is == null) {
                 return;
             }
-            is = uri.openStream();
             InputSource ip = new InputSource(is);
-            ip.setSystemId(uri.toExternalForm()); 
+            ip.setSystemId(systemId); 
 
             // Parse the web application deployment descriptor
             TreeNode webtld = null;
-            // altDDName is the absolute path of the DD
-            if (altDDName != null) {
-                webtld = new ParserUtils().parseXMLDocument(altDDName, ip);
-            } else {
-                webtld = new ParserUtils().parseXMLDocument(WEB_XML, ip);
-            }
+            webtld = new ParserUtils().parseXMLDocument(systemId, ip);
 
             // Allow taglib to be an element of the root or jsp-config (JSP2.0)
             TreeNode jspConfig = webtld.findChild("jsp-config");

==================================================
