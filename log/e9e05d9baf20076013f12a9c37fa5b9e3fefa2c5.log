e9e05d9baf20076013f12a9c37fa5b9e3fefa2c5
==================================================
Code clean-up, no functional change.
==================================================
Mark Emlyn
==================================================
Wed Oct 19 15:06:17 2011 +0000
==================================================
JspCompilationContext.java
Code clean-up, no functional change.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1186254 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspUtil.java
index 506b90a97a..0a3d4adc4b 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -50,7 +50,7 @@ import org.apache.juli.logging.LogFactory;
  * the instance variables are set at different points.
  *
  * Most of the path-related stuff is here - mangling names, versions, dirs,
- * loading resources and dealing with uris. 
+ * loading resources and dealing with uris.
  *
  * @author Anil K. Vijendran
  * @author Harish Prabandham
@@ -126,7 +126,7 @@ public class JspCompilationContext {
     }
 
     public JspCompilationContext(String tagfile,
-                                 TagInfo tagInfo, 
+                                 TagInfo tagInfo,
                                  Options options,
                                  ServletContext context,
                                  JspServletWrapper jsw,
@@ -139,20 +139,21 @@ public class JspCompilationContext {
     }
 
     /* ==================== Methods to override ==================== */
-    
+
     /** ---------- Class path and loader ---------- */
 
     /**
-     * The classpath that is passed off to the Java compiler. 
+     * The classpath that is passed off to the Java compiler.
      */
     public String getClassPath() {
-        if( classPath != null )
+        if( classPath != null ) {
             return classPath;
+        }
         return rctxt.getClassPath();
     }
 
     /**
-     * The classpath that is passed off to the Java compiler. 
+     * The classpath that is passed off to the Java compiler.
      */
     public void setClassPath(String classPath) {
         this.classPath = classPath;
@@ -163,8 +164,9 @@ public class JspCompilationContext {
      * this JSP?
      */
     public ClassLoader getClassLoader() {
-        if( loader != null )
+        if( loader != null ) {
             return loader;
+        }
         return rctxt.getParentClassLoader();
     }
 
@@ -183,7 +185,7 @@ public class JspCompilationContext {
     }
 
     /** ---------- Input/Output  ---------- */
-    
+
     /**
      * The output directory to generate code into.  The output directory
      * is make up of the scratch directory, which is provide in Options,
@@ -200,7 +202,7 @@ public class JspCompilationContext {
     /**
      * Create a "Compiler" object based on some init param data. This
      * is not done yet. Right now we're just hardcoding the actual
-     * compilers that are created. 
+     * compilers that are created.
      */
     public Compiler createCompiler() {
         if (jspCompiler != null ) {
@@ -230,7 +232,7 @@ public class JspCompilationContext {
     }
 
     protected Compiler createCompiler(String className) {
-        Compiler compiler = null; 
+        Compiler compiler = null;
         try {
             compiler = (Compiler) Class.forName(className).newInstance();
         } catch (InstantiationException e) {
@@ -248,14 +250,14 @@ public class JspCompilationContext {
         }
         return compiler;
     }
-    
+
     public Compiler getCompiler() {
         return jspCompiler;
     }
 
     /** ---------- Access resources in the webapp ---------- */
 
-    /** 
+    /**
      * Get the full value of a URI relative to this compilations context
      * uses current file as the base.
      */
@@ -272,7 +274,7 @@ public class JspCompilationContext {
     /**
      * Gets a resource as a stream, relative to the meanings of this
      * context's implementation.
-     * @return a null if the resource cannot be found or represented 
+     * @return a null if the resource cannot be found or represented
      *         as an InputStream.
      */
     public java.io.InputStream getResourceAsStream(String res) {
@@ -311,7 +313,7 @@ public class JspCompilationContext {
         return context.getResourcePaths(canonicalURI(path));
     }
 
-    /** 
+    /**
      * Gets the actual path of a URI relative to the context of
      * the compilation.
      */
@@ -328,7 +330,7 @@ public class JspCompilationContext {
      * packaged.
      *
      * The map is populated when parsing the tag-file elements of the TLDs
-     * of any imported taglibs. 
+     * of any imported taglibs.
      */
     public JarResource getTagFileJarResource(String tagFile) {
         return this.tagFileJarUrls.get(tagFile);
@@ -352,7 +354,7 @@ public class JspCompilationContext {
 
     /**
      * Just the class name (does not include package name) of the
-     * generated class. 
+     * generated class.
      */
     public String getServletClassName() {
 
@@ -376,10 +378,10 @@ public class JspCompilationContext {
     public void setServletClassName(String className) {
         this.className = className;
     }
-    
+
     /**
      * Path of the JSP URI. Note that this is not a file name. This is
-     * the context rooted URI of the JSP file. 
+     * the context rooted URI of the JSP file.
      */
     public String getJspFile() {
         return jspUri;
@@ -478,7 +480,7 @@ public class JspCompilationContext {
         }
         return derivedPackageName;
     }
-            
+
     /**
      * The package name into which the servlet class is generated.
      */
@@ -488,7 +490,7 @@ public class JspCompilationContext {
 
     /**
      * Full path name of the Java file into which the servlet is being
-     * generated. 
+     * generated.
      */
     public String getServletJavaFileName() {
         if (servletJavaFileName == null) {
@@ -498,7 +500,7 @@ public class JspCompilationContext {
     }
 
     /**
-     * Get hold of the Options object for this context. 
+     * Get hold of the Options object for this context.
      */
     public Options getOptions() {
         return options;
@@ -551,7 +553,7 @@ public class JspCompilationContext {
 
     /**
      * Gets the 'location' of the TLD associated with the given taglib 'uri'.
-     * 
+     *
      * @return An array of two Strings: The first element denotes the real
      * path to the TLD. If the path to the TLD points to a jar file, then the
      * second element denotes the name of the TLD entry in the jar file.
@@ -559,7 +561,7 @@ public class JspCompilationContext {
      * 'exposed' in the web application.
      */
     public TldLocation getTldLocation(String uri) throws JasperException {
-        TldLocation location = 
+        TldLocation location =
             getOptions().getTldLocationsCache().getLocation(uri);
         return location;
     }
@@ -571,7 +573,7 @@ public class JspCompilationContext {
         return getOptions().getKeepGenerated();
     }
 
-    // ==================== Removal ==================== 
+    // ==================== Removal ====================
 
     public void incrementRemoved() {
         if (removed == 0 && rctxt != null) {
@@ -588,7 +590,7 @@ public class JspCompilationContext {
     }
 
     // ==================== Compile and reload ====================
-    
+
     public void compile() throws JasperException, FileNotFoundException {
         createCompiler();
         if (jspCompiler.isOutDated()) {
@@ -625,7 +627,7 @@ public class JspCompilationContext {
     public Class<?> load() throws JasperException {
         try {
             getJspLoader();
-            
+
             String name = getFQCN();
             servletClass = jspLoader.loadClass(name);
         } catch (ClassNotFoundException cex) {
@@ -649,7 +651,7 @@ public class JspCompilationContext {
         return name;
     }
 
-    // ==================== protected methods ==================== 
+    // ==================== protected methods ====================
 
     static Object outputDirLock = new Object();
 
@@ -662,7 +664,7 @@ public class JspCompilationContext {
             createOutputDir();
         }
     }
-        
+
     protected boolean makeOutputDir() {
         synchronized(outputDirLock) {
             File outDirFile = new File(outputDir);
@@ -684,7 +686,7 @@ public class JspCompilationContext {
             try {
                 File base = options.getScratchDir();
                 baseUrl = base.toURI().toURL();
-                outputDir = base.getAbsolutePath() + File.separator + path + 
+                outputDir = base.getAbsolutePath() + File.separator + path +
                     File.separator;
                 if (!makeOutputDir()) {
                     throw new IllegalStateException(Localizer.getMessage("jsp.error.outputfolder"));
@@ -693,13 +695,15 @@ public class JspCompilationContext {
                 throw new IllegalStateException(Localizer.getMessage("jsp.error.outputfolder"), e);
             }
     }
-    
+
     protected static final boolean isPathSeparator(char c) {
        return (c == '/' || c == '\\');
     }
 
     protected static final String canonicalURI(String s) {
-       if (s == null) return null;
+       if (s == null) {
+        return null;
+    }
        StringBuilder result = new StringBuilder();
        final int len = s.length();
        int pos = 0;
@@ -718,7 +722,9 @@ public class JspCompilationContext {
                    /*
                     * a single dot at the end of the path - we are done.
                     */
-                   if (pos+2 >= len) break;
+                   if (pos+2 >= len) {
+                    break;
+                }
 
                    switch (s.charAt(pos+2)) {
                        /*
@@ -739,13 +745,14 @@ public class JspCompilationContext {
                        if (pos+3 < len && isPathSeparator(s.charAt(pos+3))) {
                            pos += 3;
                            int separatorPos = result.length()-1;
-                           while (separatorPos >= 0 && 
+                           while (separatorPos >= 0 &&
                                   ! isPathSeparator(result
                                                     .charAt(separatorPos))) {
                                --separatorPos;
                            }
-                           if (separatorPos >= 0)
-                               result.setLength(separatorPos);
+                           if (separatorPos >= 0) {
+                            result.setLength(separatorPos);
+                        }
                            continue;
                        }
                    }

==================================================
