001178487367b25fd2ff34f2755c44c5d6c12f2c
==================================================
Refactor closing of open NIO2 sockets so endpoint specific handlers are
==================================================
Mark Thomas
==================================================
Sun Nov 8 16:52:47 2015 +0000
==================================================
AbstractProtocol.java
Refactor closing of open NIO2 sockets so endpoint specific handlers are
no longer required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713249 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNio2Protocol.java
index 9b2891ebb5..a604addd7b 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -882,6 +882,12 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
         }
 
 
+        @Override
+        public Set<S> getOpenSockets() {
+            return connections.keySet();
+        }
+
+
         /**
          * Expected to be used by the handler once the processor is no longer
          * required.

==================================================
Http11Nio2Protocol.java
index 4e63f52f8f..1961f6ac2d 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -67,13 +67,5 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
         protected Log getLog() {
             return log;
         }
-
-
-        @Override
-        public void closeAll() {
-            for (Nio2Channel channel : connections.keySet()) {
-                ((Nio2Endpoint) getProtocol().getEndpoint()).closeSocket(channel.getSocket());
-            }
-        }
     }
 }

==================================================
AbstractEndpoint.java
index 1c2a00602d..aa59a13f76 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -69,12 +69,5 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         protected Log getLog() {
             return log;
         }
-
-        @Override
-        public void closeAll() {
-            for (Nio2Channel channel : connections.keySet()) {
-                ((Nio2Endpoint) getProtocol().getEndpoint()).closeSocket(channel.getSocket());
-            }
-        }
     }
 }

==================================================
Nio2Endpoint.java
index 38ea051680..9c023480a4 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -23,6 +23,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
@@ -81,6 +82,14 @@ public abstract class AbstractEndpoint<S> {
         public Object getGlobal();
 
 
+        /**
+         * Obtain the currently open sockets.
+         *
+         * @return The sockets for which the handler is tracking a currently
+         *         open connection
+         */
+        public Set<S> getOpenSockets();
+
         /**
          * Release any resources associated with the given SocketWrapper.
          *

==================================================
