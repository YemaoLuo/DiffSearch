2aee2c9ca70cdf804b3dcdfb2bb9f92f52c509c6
==================================================
Obtain CATALINA_BASE in consistent way (though Container).
==================================================
Mark Emlyn
==================================================
Thu Feb 2 10:30:58 2012 +0000
==================================================
ContainerBase.java
Obtain CATALINA_BASE in consistent way (though Container).
Note: still some direct access to system property to review.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239520 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardHost.java
index 2849f63cbe..2872faecf7 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -1359,6 +1359,9 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         }
 
         if (base == null) {
+            // In theory this should never happen. In 'standard' usage the start
+            // scripts will set the system property. In embedded usage either
+            // the system property will be set or it will be set explicitly.
             return null;
         }
 

==================================================
FarmWarDeployer.java
index d460ba957c..db02147a59 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -16,7 +16,6 @@
  */
 package org.apache.catalina.core;
 
-
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -29,7 +28,6 @@ import java.util.regex.Pattern;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
@@ -41,7 +39,6 @@ import org.apache.catalina.mbeans.MBeanUtils;
 import org.apache.catalina.valves.ValveBase;
 import org.apache.tomcat.util.ExceptionUtils;
 
-
 /**
  * Standard implementation of the <b>Host</b> interface.  Each
  * child container must be a Context implementation to process the
@@ -208,9 +205,7 @@ public class StandardHost extends ContainerBase implements Host {
 
         // If not absolute, make it absolute
         if (!file.isAbsolute()) {
-            // This system property should always be set
-            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
-                    file.getPath());
+            file = new File(getCatalinaBase(), file.getPath());
         }
 
         // Make it canonical if possible

==================================================
ManagerServlet.java
index 4d489e93ec..b3266d04d9 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -27,7 +27,6 @@ import javax.management.ObjectName;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.ha.ClusterDeployer;
@@ -162,8 +161,7 @@ public class FarmWarDeployer extends ClusterListener
             }
         }
 
-        configBase = new File(
-                System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
+        configBase = new File(engine.getCatalinaBase(), "conf");
         configBase = new File(configBase, engine.getName());
         configBase = new File(configBase, hostname);
 

==================================================
HostManagerServlet.java
index 59f08f2dab..469b2a1b8e 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -14,11 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.manager;
 
-
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -44,7 +41,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Server;
@@ -474,7 +470,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         // Identify the appBase of the owning Host of this Context
         // (if any)
         deployed = ((Host) context.getParent()).getAppBaseFile();
-        configBase = new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
+        configBase = new File(context.getCatalinaBase(), "conf");
         Container container = context;
         Container host = null;
         Container engine = null;

==================================================
JAASMemoryLoginModule.java
index bd4092e7ac..e81acc2450 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -14,11 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.manager.host;
 
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -40,7 +37,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.core.ContainerBase;
@@ -375,7 +371,7 @@ public class HostManagerServlet
             file = new File(appBase);
         }
         if (!file.isAbsolute())
-            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), file.getPath());
+            file = new File(engine.getCatalinaBase(), file.getPath());
         try {
             appBaseFile = file.getCanonicalFile();
         } catch (IOException e) {
@@ -691,8 +687,7 @@ public class HostManagerServlet
      * Get config base.
      */
     protected File getConfigBase(String hostName) {
-        File configBase =
-            new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
+        File configBase = new File(context.getCatalinaBase(), "conf");
         if (!configBase.exists()) {
             return null;
         }

==================================================
MemoryRealm.java
index 5782bdb377..fefe8ad3e5 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -14,11 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.realm;
 
-
 import java.io.File;
 import java.io.IOException;
 import java.security.Principal;
@@ -36,7 +33,6 @@ import javax.security.auth.login.LoginException;
 import javax.security.auth.spi.LoginModule;
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.catalina.Globals;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
@@ -345,7 +341,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         // Validate the existence of our configuration file
         File file = new File(pathname);
         if (!file.isAbsolute())
-            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
+            file = new File(getContainer().getCatalinaBase(), pathname);
         if (!file.exists() || !file.canRead()) {
             log.warn("Cannot load configuration file " + file.getAbsolutePath());
             return;

==================================================
MemoryUserDatabase.java
index 4dab8e015e..475dc51035 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -14,18 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.realm;
 
-
 import java.io.File;
 import java.security.Principal;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -267,7 +263,7 @@ public class MemoryRealm  extends RealmBase {
         // Validate the existence of our database file
         File file = new File(pathname);
         if (!file.isAbsolute())
-            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
+            file = new File(getContainer().getCatalinaBase(), pathname);
         if (!file.exists() || !file.canRead())
             throw new LifecycleException
                 (sm.getString("memoryRealm.loadExist",

==================================================
AccessLogValve.java
index 4e2782d177..54ba57bb08 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -516,9 +516,8 @@ public class MemoryUserDatabase implements UserDatabase {
 
 
     /**
-     * Check for permissions to save this user database
-     * to persistent storage location
-     *
+     * Check for permissions to save this user database to persistent storage
+     * location.
      */
     public boolean isWriteable() {
 
@@ -529,7 +528,6 @@ public class MemoryUserDatabase implements UserDatabase {
         }
         File dir = file.getParentFile();
         return dir.exists() && dir.isDirectory() && dir.canWrite();
-
     }
 
 

==================================================
