177543b17c9d7f46afe385a594184e0f5b73a812
==================================================
Refactor key store creation to make it easier for users to insert certificate stores and trust stores programmatically.
==================================================
Mark Thomas
==================================================
Mon Jun 20 18:13:07 2016 +0000
==================================================
SSLHostConfig.java
index 505cdf6b7e..fa530ba11e 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings_es.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings_es.properties
@@ -34,3 +34,6 @@ endpoint.debug.channelCloseFail = No puede cerrar el canal
 endpoint.debug.socketCloseFail = No pude cerrar el enchufe (socket)
 endpoint.apr.noSslCertFile = El atribiuto del conector SSLCertificateFile debe de ser definido al usar SSL con APR
 endpoint.apr.invalidSslProtocol = Se ha proporcionado un valor inv\u00E1lido [{0}] para el atributo SSLProtocol
+
+jsse.invalid_truststore_password = La clave del almac\u00E9n de confianza suministrada no se pudo usar para desbloquear y/o validar el almac\u00E9n de confianza. Reintentando acceder el almac\u00E9n de confianza con una clave nula que se saltar\u00E1 la validaci\u00F3n.
+jsse.keystore_load_failed = No pude cargar almac\u00E9n de claves de tipo [{0}] con ruta [{1}] debido a [{2}]

==================================================
SSLHostConfigCertificate.java
index fea18ba3a8..2b80d64bba 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -17,6 +17,9 @@
 package org.apache.tomcat.util.net;
 
 import java.io.File;
+import java.io.IOException;
+import java.security.KeyStore;
+import java.security.UnrecoverableKeyException;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
@@ -96,6 +99,7 @@ public class SSLHostConfig {
     private String truststorePassword = System.getProperty("javax.net.ssl.trustStorePassword");
     private String truststoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider");
     private String truststoreType = System.getProperty("javax.net.ssl.trustStoreType");
+    private KeyStore truststore = null;
     // OpenSSL
     private String certificateRevocationListPath;
     private String caCertificateFile;
@@ -583,6 +587,38 @@ public class SSLHostConfig {
     }
 
 
+    public void setTrustStore(KeyStore truststore) {
+        this.truststore = truststore;
+    }
+
+
+    public KeyStore getTruststore() throws IOException {
+        KeyStore result = truststore;
+        if (result == null) {
+            if (truststoreFile != null){
+                try {
+                    result = SSLUtilBase.getStore(truststoreType, truststoreProvider,
+                            truststoreFile, truststorePassword);
+                } catch (IOException ioe) {
+                    Throwable cause = ioe.getCause();
+                    if (cause instanceof UnrecoverableKeyException) {
+                        // Log a warning we had a password issue
+                        log.warn(sm.getString("jsse.invalid_truststore_password"),
+                                cause);
+                        // Re-try
+                        result = SSLUtilBase.getStore(truststoreType, truststoreProvider,
+                                truststoreFile, null);
+                    } else {
+                        // Something else went wrong - re-throw
+                        throw ioe;
+                    }
+                }
+            }
+        }
+        return result;
+    }
+
+
     // ------------------------------- OpenSSL specific configuration properties
 
     // TODO: These certificate setters can be removed once it is no longer

==================================================
SSLUtilBase.java
index 66d66e67b3..e707fb9fe5 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
@@ -16,6 +16,8 @@
  */
 package org.apache.tomcat.util.net;
 
+import java.io.IOException;
+import java.security.KeyStore;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -53,6 +55,7 @@ public class SSLHostConfigCertificate {
     private String certificateKeystoreFile = System.getProperty("user.home")+"/.keystore";
     private String certificateKeystoreProvider = DEFAULT_KEYSTORE_PROVIDER;
     private String certificateKeystoreType = DEFAULT_KEYSTORE_TYPE;
+    private KeyStore certificateKeystore = null;
 
     // OpenSSL
     private String certificateChainFile;
@@ -170,6 +173,23 @@ public class SSLHostConfigCertificate {
     }
 
 
+    public void setCertificateKeystore(KeyStore certificateKeystore) {
+        this.certificateKeystore = certificateKeystore;
+    }
+
+
+    public KeyStore getCertificateKeystore() throws IOException {
+        KeyStore result = certificateKeystore;
+
+        if (result == null) {
+            result = SSLUtilBase.getStore(certificateKeystoreType, certificateKeystoreProvider,
+                    certificateKeystoreFile, certificateKeystorePassword);
+        }
+
+        return result;
+    }
+
+
     // OpenSSL
 
     public void setCertificateChainFile(String certificateChainFile) {

==================================================
JSSEUtil.java
index 7a3097f91a..d3115272c4 100644
--- a/java/org/apache/tomcat/util/net/SSLUtilBase.java
+++ b/java/org/apache/tomcat/util/net/SSLUtilBase.java
@@ -16,12 +16,18 @@
  */
 package org.apache.tomcat.util.net;
 
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.security.KeyStore;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 
 import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.file.ConfigFileLoader;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -29,6 +35,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public abstract class SSLUtilBase implements SSLUtil {
 
+    private static final Log log = LogFactory.getLog(SSLUtilBase.class);
     private static final StringManager sm = StringManager.getManager(SSLUtilBase.class);
 
     protected final SSLHostConfigCertificate certificate;
@@ -101,6 +108,59 @@ public abstract class SSLUtilBase implements SSLUtil {
         return enabled;
     }
 
+
+    /*
+     * Gets the key- or truststore with the specified type, path, and password.
+     */
+    static KeyStore getStore(String type, String provider, String path,
+            String pass) throws IOException {
+
+        KeyStore ks = null;
+        InputStream istream = null;
+        try {
+            if (provider == null) {
+                ks = KeyStore.getInstance(type);
+            } else {
+                ks = KeyStore.getInstance(type, provider);
+            }
+            if(!("PKCS11".equalsIgnoreCase(type) ||
+                    "".equalsIgnoreCase(path)) ||
+                    "NONE".equalsIgnoreCase(path)) {
+                istream = ConfigFileLoader.getInputStream(path);
+            }
+
+            char[] storePass = null;
+            if (pass != null && !"".equals(pass)) {
+                storePass = pass.toCharArray();
+            }
+            ks.load(istream, storePass);
+        } catch (FileNotFoundException fnfe) {
+            log.error(sm.getString("jsse.keystore_load_failed", type, path,
+                    fnfe.getMessage()), fnfe);
+            throw fnfe;
+        } catch (IOException ioe) {
+            // May be expected when working with a trust store
+            // Re-throw. Caller will catch and log as required
+            throw ioe;
+        } catch(Exception ex) {
+            String msg = sm.getString("jsse.keystore_load_failed", type, path,
+                    ex.getMessage());
+            log.error(msg, ex);
+            throw new IOException(msg);
+        } finally {
+            if (istream != null) {
+                try {
+                    istream.close();
+                } catch (IOException ioe) {
+                    // Do nothing
+                }
+            }
+        }
+
+        return ks;
+    }
+
+
     @Override
     public String[] getEnabledProtocols() {
         return enabledProtocols;

==================================================
