771ffdbe3de52db374ba63c04ebb2e7f19f102b0
==================================================
Add support for multipart config in web.xml (partially complete)
==================================================
Mark Emlyn
==================================================
Tue Nov 17 20:53:32 2009 +0000
==================================================
MultipartDef.java
Add support for multipart config in web.xml (partially complete)
Review and fix issues in WebXml merge code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@881503 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServletDef.java
new file mode 100644
index 0000000000..47930aaca3
--- /dev/null
+++ b/java/org/apache/catalina/deploy/MultipartDef.java
@@ -0,0 +1,134 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.catalina.deploy;
+
+
+/**
+ * Representation of a the multipart configuration for a servlet.
+ */
+public class MultipartDef {
+
+    // ------------------------------------------------------------- Properties
+    private String location;
+   
+    public String getLocation() {
+        return location;
+    }
+
+    public void setLocation(String location) {
+        this.location = location;
+    }
+    
+    
+    private Long maxFileSize;
+
+    public Long getMaxFileSize() {
+        return maxFileSize;
+    }
+
+    public void setMaxFileSize(Long maxFileSize) {
+        this.maxFileSize = maxFileSize;
+    }
+    
+    
+    private Long maxRequestSize;
+
+    public Long getMaxRequestSize() {
+        return maxRequestSize;
+    }
+
+    public void setMaxRequestSize(Long maxRequestSize) {
+        this.maxRequestSize = maxRequestSize;
+    }
+
+    
+    private Integer fileSizeThreshold;
+    
+    public Integer getFileSizeThreshold() {
+        return fileSizeThreshold;
+    }
+
+    public void setFileSizeThreshold(Integer fileSizeThreshold) {
+        this.fileSizeThreshold = fileSizeThreshold;
+    }
+
+    
+    // ---------------------------------------------------------- Object methods
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime
+                * result
+                + ((fileSizeThreshold == null) ? 0 : fileSizeThreshold
+                        .hashCode());
+        result = prime * result
+                + ((location == null) ? 0 : location.hashCode());
+        result = prime * result
+                + ((maxFileSize == null) ? 0 : maxFileSize.hashCode());
+        result = prime * result
+                + ((maxRequestSize == null) ? 0 : maxRequestSize.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (!(obj instanceof MultipartDef)) {
+            return false;
+        }
+        MultipartDef other = (MultipartDef) obj;
+        if (fileSizeThreshold == null) {
+            if (other.fileSizeThreshold != null) {
+                return false;
+            }
+        } else if (!fileSizeThreshold.equals(other.fileSizeThreshold)) {
+            return false;
+        }
+        if (location == null) {
+            if (other.location != null) {
+                return false;
+            }
+        } else if (!location.equals(other.location)) {
+            return false;
+        }
+        if (maxFileSize == null) {
+            if (other.maxFileSize != null) {
+                return false;
+            }
+        } else if (!maxFileSize.equals(other.maxFileSize)) {
+            return false;
+        }
+        if (maxRequestSize == null) {
+            if (other.maxRequestSize != null) {
+                return false;
+            }
+        } else if (!maxRequestSize.equals(other.maxRequestSize)) {
+            return false;
+        }
+        return true;
+    }
+
+}

==================================================
WebRuleSet.java
index cad08bba05..6fec5922a6 100644
--- a/java/org/apache/catalina/deploy/ServletDef.java
+++ b/java/org/apache/catalina/deploy/ServletDef.java
@@ -207,4 +207,17 @@ public class ServletDef implements Serializable {
         securityRoleRefs.add(securityRoleRef);
     }
 
+    
+    /**
+     * The multipart configuration, if any, for this servlet
+     */
+    private MultipartDef multipartDef = new MultipartDef();
+    
+    public MultipartDef getMultipartDef() {
+        return this.multipartDef;
+    }
+    
+    public void setMultipartDef(MultipartDef multipartDef) {
+        this.multipartDef = multipartDef;
+    }
 }

==================================================
WebXml.java
index 46e1d251b7..05f4aa4062 100644
--- a/java/org/apache/catalina/startup/WebRuleSet.java
+++ b/java/org/apache/catalina/startup/WebRuleSet.java
@@ -368,6 +368,19 @@ public class WebRuleSet extends RuleSetBase {
                               "setServletClass", 0);
         digester.addCallMethod(fullPrefix + "/servlet/servlet-name",
                               "setServletName", 0);
+        
+        digester.addObjectCreate(fullPrefix + "/servlet/multipart-config",
+                                 "org.apache.catalina.deploy.MultipartDef");
+        digester.addSetNext(fullPrefix + "/servlet/multipart-config",
+                            "setMultipartConfig");
+        digester.addCallMethod(fullPrefix + "/servlet/multipart-config/location",
+                               "setLocation", 0);
+        digester.addCallMethod(fullPrefix + "/servlet/multipart-config/max-file-size",
+                               "setMaxFileSize", 0);
+        digester.addCallMethod(fullPrefix + "/servlet/multipart-config/max-request-size",
+                               "setMaxRequestSize", 0);
+        digester.addCallMethod(fullPrefix + "/servlet/multipart-config/file-size-threshold",
+                               "setFileSizeThreshold", 0);
 
         digester.addRule(fullPrefix + "/servlet-mapping",
                                new CallMethodMultiRule("addServletMapping", 2, 0));

==================================================
