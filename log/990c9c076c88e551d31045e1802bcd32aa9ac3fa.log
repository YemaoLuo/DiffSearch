990c9c076c88e551d31045e1802bcd32aa9ac3fa
==================================================
Final refactoring to align the dispatch() method between Processors
==================================================
Mark Thomas
==================================================
Tue Sep 29 22:02:30 2015 +0000
==================================================
AbstractProcessor.java
Final refactoring to align the dispatch() method between Processors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705938 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index a1e0bc618b..f1d2a135bb 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -248,6 +248,15 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
         asyncStateMachine.asyncOperation();
     }
 
+    /**
+     * Perform any necessary clean-up processing if the dispatch resulted in the
+     * completion of processing for the current request.
+     *
+     * @return The state to return for the socket once the clean-up for the
+     *         current request has completed
+     */
+    protected abstract SocketState dispatchEndRequest();
+
     @Override
     public abstract HttpUpgradeHandler getHttpUpgradeHandler();
 

==================================================
Http11Processor.java
index f0881436dd..6071afeb59 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -659,15 +659,12 @@ public class AjpProcessor extends AbstractProcessor {
         } else if (isAsync()) {
             return SocketState.LONG;
         } else {
-            // Set keep alive timeout for next request if enabled
-            if (keepAliveTimeout > 0) {
-                socketWrapper.setReadTimeout(keepAliveTimeout);
-            }
             request.updateCounters();
-            return SocketState.OPEN;
+            return dispatchEndRequest();
         }
     }
 
+
     @Override
     protected boolean flushBufferedWrite() throws IOException {
         if (hasDataToWrite()) {
@@ -682,6 +679,7 @@ public class AjpProcessor extends AbstractProcessor {
         return false;
     }
 
+
     @Override
     protected void dispatchNonBlockingRead() {
         if (available()) {
@@ -689,6 +687,17 @@ public class AjpProcessor extends AbstractProcessor {
         }
     }
 
+
+    @Override
+    protected SocketState dispatchEndRequest() {
+        // Set keep alive timeout for next request if enabled
+        if (keepAliveTimeout > 0) {
+            socketWrapper.setReadTimeout(keepAliveTimeout);
+        }
+        return SocketState.OPEN;
+    }
+
+
     /**
      * Process pipelined HTTP requests using the specified input and output
      * streams.

==================================================
StreamProcessor.java
index 267d7b634c..7b7dc0b099 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1737,17 +1737,7 @@ public class Http11Processor extends AbstractProcessor {
             return SocketState.LONG;
         } else {
             request.updateCounters();
-            if (!keepAlive) {
-                return SocketState.CLOSED;
-            } else {
-                inputBuffer.nextRequest();
-                outputBuffer.nextRequest();
-                if (socketWrapper.isReadPending()) {
-                    return SocketState.LONG;
-                } else {
-                    return SocketState.OPEN;
-                }
-            }
+            return dispatchEndRequest();
         }
     }
 
@@ -1771,6 +1761,22 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    @Override
+    protected SocketState dispatchEndRequest() {
+        if (!keepAlive) {
+            return SocketState.CLOSED;
+        } else {
+            inputBuffer.nextRequest();
+            outputBuffer.nextRequest();
+            if (socketWrapper.isReadPending()) {
+                return SocketState.LONG;
+            } else {
+                return SocketState.OPEN;
+            }
+        }
+    }
+
+
     @Override
     public boolean isUpgrade() {
         return httpUpgradeHandler != null;

==================================================
