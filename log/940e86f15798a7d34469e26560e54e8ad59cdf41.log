940e86f15798a7d34469e26560e54e8ad59cdf41
==================================================
Lay some groundwork for processing priority frames
==================================================
Mark Thomas
==================================================
Wed May 13 17:44:47 2015 +0000
==================================================
AbstractStream.java
Lay some groundwork for processing priority frames

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1679251 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
new file mode 100644
index 0000000000..f67580c990
--- /dev/null
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -0,0 +1,113 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http2;
+
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+/**
+ * Used to managed prioritisation.
+ */
+abstract class AbstractStream {
+
+    private static final int DEFAULT_WEIGHT = 16;
+
+    private final Integer identifier;
+
+    private volatile AbstractStream parentStream = null;
+    private final Set<AbstractStream> childStreams = new HashSet<>();
+    private volatile int weight = DEFAULT_WEIGHT;
+
+    public Integer getIdentifier() {
+        return identifier;
+    }
+
+
+    public AbstractStream(Integer identifier) {
+        this.identifier = identifier;
+    }
+
+
+    public void rePrioritise(Stream parent, boolean exclusive, int weight) {
+        // Check if new parent is a descendant of this stream
+        if (isDescendant(parent)) {
+            parent.detachFromParent();
+            parentStream.addChild(parent);
+        }
+
+        if (exclusive) {
+            // Need to move children of the new parent to be children of this
+            // stream. Slightly convoluted to avoid concurrent modification.
+            Iterator<AbstractStream> parentsChildren = parent.getChildStreams().iterator();
+            while (parentsChildren.hasNext()) {
+                AbstractStream parentsChild = parentsChildren.next();
+                parentsChildren.remove();
+                this.addChild(parentsChild);
+            }
+        }
+        parent.addChild(this);
+        this.weight = weight;
+    }
+
+
+    void detachFromParent() {
+        if (parentStream != null) {
+            parentStream.getChildStreams().remove(this);
+            parentStream = null;
+        }
+    }
+
+
+    void addChild(AbstractStream child) {
+        child.setParent(this);
+        childStreams.add(child);
+    }
+
+
+    private void setParent(AbstractStream parent) {
+        this.parentStream = parent;
+    }
+
+
+    boolean isDescendant(AbstractStream stream) {
+        if (childStreams.contains(stream)) {
+            return true;
+        }
+        for (AbstractStream child : childStreams) {
+            if (child.isDescendant(stream)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+
+    AbstractStream getParentStream() {
+        return parentStream;
+    }
+
+
+    void setParentStream(AbstractStream parentStream) {
+        this.parentStream = parentStream;
+    }
+
+
+    Set<AbstractStream> getChildStreams() {
+        return childStreams;
+    }
+}

==================================================
Stream.java
index 98271ee27b..786ef2afce 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -45,11 +45,13 @@ import org.apache.tomcat.util.res.StringManager;
  * network.http.spdy.enforce-tls-profile=false in order for FireFox to be able
  * to connect.
  */
-public class Http2UpgradeHandler implements InternalHttpUpgradeHandler {
+public class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeHandler {
 
     private static final Log log = LogFactory.getLog(Http2UpgradeHandler.class);
     private static final StringManager sm = StringManager.getManager(Http2UpgradeHandler.class);
 
+    private static final Integer STREAM_ID_ZERO = Integer.valueOf(0);
+
     private static final int FRAME_TYPE_SETTINGS = 4;
     private static final int FRAME_TYPE_WINDOW_UPDATE = 8;
 
@@ -68,6 +70,12 @@ public class Http2UpgradeHandler implements InternalHttpUpgradeHandler {
 
     private final Map<Integer,Stream> streams = new HashMap<>();
 
+
+    public Http2UpgradeHandler() {
+        super (STREAM_ID_ZERO);
+    }
+
+
     @Override
     public void init(WebConnection unused) {
         initialized = true;
@@ -271,7 +279,7 @@ public class Http2UpgradeHandler implements InternalHttpUpgradeHandler {
             Integer key = Integer.valueOf(streamId);
             Stream stream = streams.get(key);
             if (stream == null) {
-                stream = new Stream(key, remoteSettings.getInitialWindowSize());
+                stream = new Stream(key, this);
             }
             stream.incrementWindowSize(windowSizeIncrement);
         }
@@ -362,6 +370,11 @@ public class Http2UpgradeHandler implements InternalHttpUpgradeHandler {
     }
 
 
+    ConnectionSettings getRemoteSettings() {
+        return remoteSettings;
+    }
+
+
     @Override
     public void destroy() {
         // NO-OP

==================================================
TestAbstractStream.java
index 89da813894..1c732a1089 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -16,20 +16,15 @@
  */
 package org.apache.coyote.http2;
 
-public class Stream {
-
-    private final Integer identifier;
+public class Stream extends AbstractStream {
 
     private volatile long flowControlWindowSize;
 
-    public Stream(Integer identifier, long intitalWindowSize) {
-        this.identifier = identifier;
-        flowControlWindowSize = intitalWindowSize;
-    }
-
 
-    public Integer getIdentifier() {
-        return identifier;
+    public Stream(Integer identifier, Http2UpgradeHandler handler) {
+        super(identifier);
+        setParentStream(handler);
+        flowControlWindowSize = handler.getRemoteSettings().getInitialWindowSize();
     }
 
 

==================================================
