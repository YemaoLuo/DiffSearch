3540847f0ecdcfb4b1bf6d7b44aa06d402bfa7b3
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Mon Jul 15 14:43:48 2013 +0000
==================================================
Stream.java
EL 3.0 collections operations.
Implement map

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503274 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCollectionOperations.java
index 840f6d3455..c80d44f57e 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -29,10 +29,12 @@ public class Stream {
 
     private final Iterator<?> iterator;
 
+
     public Stream(Iterator<?> iterator) {
         this.iterator = iterator;
     }
 
+
     public Stream filter(final LambdaExpression le) {
         Iterator<Object> filterIterator = new Iterator<Object>() {
 
@@ -83,6 +85,55 @@ public class Stream {
         return new Stream(filterIterator);
     }
 
+
+    public Stream map(final LambdaExpression le) {
+        Iterator<Object> filterIterator = new Iterator<Object>() {
+
+            private boolean foundNext = false;
+            private Object next;
+
+            @Override
+            public boolean hasNext() {
+                if (foundNext) {
+                    return true;
+                }
+                findNext();
+                return foundNext;
+            }
+
+            @Override
+            public Object next() {
+                if (foundNext) {
+                    foundNext = false;
+                    return next;
+                }
+                findNext();
+                if (foundNext) {
+                    foundNext = false;
+                    return next;
+                } else {
+                    throw new NoSuchElementException();
+                }
+            }
+
+            @Override
+            public void remove() {
+                throw new UnsupportedOperationException();
+            }
+
+            private void findNext() {
+                while (iterator.hasNext()) {
+                    Object obj = iterator.next();
+                    next = le.invoke(obj);
+                    foundNext = true;
+                    break;
+                }
+            }
+        };
+        return new Stream(filterIterator);
+    }
+
+
     public List<Object> toList() {
         List<Object> result = new ArrayList<>();
         while (iterator.hasNext()) {

==================================================
