fd53773871146d892729d19a60117e110a6b02d7
==================================================
Implement getServletMapping() for async requests as discussed in Servlet 4.0 EG
==================================================
Mark Thomas
==================================================
Mon Feb 27 21:01:07 2017 +0000
==================================================
AsyncContext.java
Implement getServletMapping() for async requests as discussed in Servlet 4.0 EG

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1784661 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationDispatcher.java
index 9f7a24f0eb..4e6bc0886d 100644
--- a/java/javax/servlet/AsyncContext.java
+++ b/java/javax/servlet/AsyncContext.java
@@ -25,6 +25,8 @@ public interface AsyncContext {
         "javax.servlet.async.request_uri";
     public static final String ASYNC_CONTEXT_PATH  =
         "javax.servlet.async.context_path";
+    public static final String ASYNC_MAPPING =
+            "javax.servlet.async.mapping";
     public static final String ASYNC_PATH_INFO =
         "javax.servlet.async.path_info";
     public static final String ASYNC_SERVLET_PATH =

==================================================
TestApplicationMapping.java
index 5b998406c9..e88ed383d7 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -22,6 +22,7 @@ import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 
+import javax.servlet.AsyncContext;
 import javax.servlet.DispatcherType;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
@@ -354,9 +355,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         // Handle an HTTP path-based forward
         else {
 
-            ApplicationHttpRequest wrequest =
-                (ApplicationHttpRequest) wrapRequest(state);
-            String contextPath = context.getPath();
+            ApplicationHttpRequest wrequest = (ApplicationHttpRequest) wrapRequest(state);
             HttpServletRequest hrequest = state.hrequest;
             if (hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) {
                 wrequest.setAttribute(RequestDispatcher.FORWARD_REQUEST_URI,
@@ -372,7 +371,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
                 wrequest.setAttribute(RequestDispatcher.FORWARD_MAPPING, hrequest.getServletMapping());
             }
 
-            wrequest.setContextPath(contextPath);
+            wrequest.setContextPath(context.getPath());
             wrequest.setRequestURI(requestURI);
             wrequest.setServletPath(servletPath);
             wrequest.setPathInfo(pathInfo);
@@ -612,13 +611,12 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         // Create a wrapped response to use for this request
         wrapResponse(state);
 
-        ApplicationHttpRequest wrequest =
-            (ApplicationHttpRequest) wrapRequest(state);
+        ApplicationHttpRequest wrequest = (ApplicationHttpRequest) wrapRequest(state);
+        HttpServletRequest hrequest = state.hrequest;
 
-        wrequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR,
-                DispatcherType.ASYNC);
-        wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,
-                getCombinedPath());
+        wrequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR, DispatcherType.ASYNC);
+        wrequest.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR, getCombinedPath());
+        wrequest.setAttribute(AsyncContext.ASYNC_MAPPING, hrequest.getServletMapping());
 
         wrequest.setContextPath(context.getPath());
         wrequest.setRequestURI(requestURI);
@@ -628,6 +626,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
             wrequest.setQueryString(queryString);
             wrequest.setQueryParams(queryString);
         }
+        wrequest.setMapping(mapping);
 
         invoke(state.outerRequest, state.outerResponse, state);
     }

==================================================
