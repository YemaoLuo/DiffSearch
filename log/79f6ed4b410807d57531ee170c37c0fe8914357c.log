79f6ed4b410807d57531ee170c37c0fe8914357c
==================================================
Remove case insensitivity option. It was a workaround for a change in Tomcat 3 and has security implications if used on case insensitive file systems.
==================================================
Mark Emlyn
==================================================
Sat Jun 13 19:19:18 2009 +0000
==================================================
StandardContext.java
Remove case insensitivity option. It was a workaround for a change in Tomcat 3 and has security implications if used on case insensitive file systems.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@784455 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileDirContext.java
index 6b81ae979c..ce19c0d52d 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -74,11 +74,6 @@
                is="true"
                type="boolean"/>
       
-    <attribute name="caseSensitive"
-               description="Should case sensitivity checks be performed"
-               is="true"
-               type="boolean"/>
-      
     <attribute name="children"
                description="Object names of all children"
                type="[Ljavax.management.ObjectName;"/>

==================================================
MessageBytes.java
index 4e840d1bda..677a6badd3 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -100,12 +100,6 @@ public class FileDirContext extends BaseDirContext {
     protected String absoluteBase = null;
 
 
-    /**
-     * Case sensitivity.
-     */
-    protected boolean caseSensitive = true;
-
-
     /**
      * Allow linking.
      */
@@ -150,22 +144,6 @@ public class FileDirContext extends BaseDirContext {
     }
 
 
-    /**
-     * Set case sensitivity.
-     */
-    public void setCaseSensitive(boolean caseSensitive) {
-        this.caseSensitive = caseSensitive;
-    }
-
-
-    /**
-     * Is case sensitive ?
-     */
-    public boolean isCaseSensitive() {
-        return caseSensitive;
-    }
-
-
     /**
      * Set allow linking.
      */
@@ -227,7 +205,6 @@ public class FileDirContext extends BaseDirContext {
             FileDirContext tempContext = new FileDirContext(env);
             tempContext.setDocBase(file.getPath());
             tempContext.setAllowLinking(getAllowLinking());
-            tempContext.setCaseSensitive(isCaseSensitive());
             result = tempContext;
         } else {
             result = new FileResource(file);
@@ -824,26 +801,24 @@ public class FileDirContext extends BaseDirContext {
                 return null;
             }
 
-            // Case sensitivity check
-            if (caseSensitive) {
-                String fileAbsPath = file.getAbsolutePath();
-                if (fileAbsPath.endsWith("."))
-                    fileAbsPath = fileAbsPath + "/";
-                String absPath = normalize(fileAbsPath);
-                canPath = normalize(canPath);
-                if ((absoluteBase.length() < absPath.length())
-                    && (absoluteBase.length() < canPath.length())) {
-                    absPath = absPath.substring(absoluteBase.length() + 1);
-                    if (absPath == null)
-                        return null;
-                    if (absPath.equals(""))
-                        absPath = "/";
-                    canPath = canPath.substring(absoluteBase.length() + 1);
-                    if (canPath.equals(""))
-                        canPath = "/";
-                    if (!canPath.equals(absPath))
-                        return null;
-                }
+            // Case sensitivity check - this is now always done
+            String fileAbsPath = file.getAbsolutePath();
+            if (fileAbsPath.endsWith("."))
+                fileAbsPath = fileAbsPath + "/";
+            String absPath = normalize(fileAbsPath);
+            canPath = normalize(canPath);
+            if ((absoluteBase.length() < absPath.length())
+                && (absoluteBase.length() < canPath.length())) {
+                absPath = absPath.substring(absoluteBase.length() + 1);
+                if (absPath == null)
+                    return null;
+                if (absPath.equals(""))
+                    absPath = "/";
+                canPath = canPath.substring(absoluteBase.length() + 1);
+                if (canPath.equals(""))
+                    canPath = "/";
+                if (!canPath.equals(absPath))
+                    return null;
             }
 
         } else {
@@ -887,7 +862,6 @@ public class FileDirContext extends BaseDirContext {
                 FileDirContext tempContext = new FileDirContext(env);
                 tempContext.setDocBase(file.getPath());
                 tempContext.setAllowLinking(getAllowLinking());
-                tempContext.setCaseSensitive(isCaseSensitive());
                 object = tempContext;
             } else {
                 object = new FileResource(currentFile);

==================================================
