28aad28a317d262115fcc8afdd4d85e82cab51aa
==================================================
Remove deprecated code from the Servlet API
==================================================
Mark Thomas
==================================================
Wed Sep 22 11:17:58 2021 +0100
==================================================
ServletContext.java
Remove deprecated code from the Servlet API



==================================================
ServletRequest.java
index 301a3e03f5..fcac8be93c 100644
--- a/java/jakarta/servlet/ServletContext.java
+++ b/java/jakarta/servlet/ServletContext.java
@@ -298,57 +298,6 @@ public interface ServletContext {
      */
     public RequestDispatcher getNamedDispatcher(String name);
 
-    /**
-     * Do not use. This method was originally defined to retrieve a servlet from
-     * a <code>ServletContext</code>. In this version, this method always
-     * returns <code>null</code> and remains only to preserve binary
-     * compatibility. This method will be permanently removed in a future
-     * version of the Java Servlet API.
-     * <p>
-     * In lieu of this method, servlets can share information using the
-     * <code>ServletContext</code> class and can perform shared business logic
-     * by invoking methods on common non-servlet classes.
-     *
-     * @param name Not used
-     *
-     * @return Always <code>null</code>
-     *
-     * @throws ServletException never
-     *
-     * @deprecated As of Java Servlet API 2.1, with no direct replacement.
-     */
-    @Deprecated
-    public Servlet getServlet(String name) throws ServletException;
-
-    /**
-     * Do not use. This method was originally defined to return an
-     * <code>Enumeration</code> of all the servlets known to this servlet
-     * context. In this version, this method always returns an empty enumeration
-     * and remains only to preserve binary compatibility. This method will be
-     * permanently removed in a future version of the Java Servlet API.
-     *
-     * @return Always and empty Enumeration
-     *
-     * @deprecated As of Java Servlet API 2.0, with no replacement.
-     */
-    @Deprecated
-    public Enumeration<Servlet> getServlets();
-
-    /**
-     * Do not use. This method was originally defined to return an
-     * <code>Enumeration</code> of all the servlet names known to this context.
-     * In this version, this method always returns an empty
-     * <code>Enumeration</code> and remains only to preserve binary
-     * compatibility. This method will be permanently removed in a future
-     * version of the Java Servlet API.
-     *
-     * @return Always and empty Enumeration
-     *
-     * @deprecated As of Java Servlet API 2.1, with no replacement.
-     */
-    @Deprecated
-    public Enumeration<String> getServletNames();
-
     /**
      * Writes the specified message to a servlet log file, usually an event log.
      * The name and type of the servlet log file is specific to the servlet
@@ -360,20 +309,6 @@ public interface ServletContext {
      */
     public void log(String msg);
 
-    /**
-     * Do not use.
-     * @param exception The exception to log
-     * @param msg       The message to log with the exception
-     * @deprecated As of Java Servlet API 2.1, use
-     *             {@link #log(String message, Throwable throwable)} instead.
-     *             <p>
-     *             This method was originally defined to write an exception's
-     *             stack trace and an explanatory error message to the servlet
-     *             log file.
-     */
-    @Deprecated
-    public void log(Exception exception, String msg);
-
     /**
      * Writes an explanatory message and a stack trace for a given
      * <code>Throwable</code> exception to the servlet log file. The name and

==================================================
ServletRequestWrapper.java
index 1d0bbdd1b4..4bb320636a 100644
--- a/java/jakarta/servlet/ServletRequest.java
+++ b/java/jakarta/servlet/ServletRequest.java
@@ -403,15 +403,6 @@ public interface ServletRequest {
      */
     public RequestDispatcher getRequestDispatcher(String path);
 
-    /**
-     * @param path The virtual path to be converted to a real path
-     * @return {@link ServletContext#getRealPath(String)}
-     * @deprecated As of Version 2.1 of the Java Servlet API, use
-     *             {@link ServletContext#getRealPath} instead.
-     */
-    @Deprecated
-    public String getRealPath(String path);
-
     /**
      * Returns the Internet Protocol (IP) source port of the client or last
      * proxy that sent the request.

==================================================
SingleThreadModel.java
index 67ec408347..fb5bcf7bea 100644
--- a/java/jakarta/servlet/ServletRequestWrapper.java
+++ b/java/jakarta/servlet/ServletRequestWrapper.java
@@ -302,18 +302,6 @@ public class ServletRequestWrapper implements ServletRequest {
         return this.request.getRequestDispatcher(path);
     }
 
-    /**
-     * The default behavior of this method is to return getRealPath(String path)
-     * on the wrapped request object.
-     *
-     * @deprecated As of Version 3.0 of the Java Servlet API
-     */
-    @Override
-    @Deprecated
-    public String getRealPath(String path) {
-        return this.request.getRealPath(path);
-    }
-
     /**
      * The default behavior of this method is to return getRemotePort() on the
      * wrapped request object.

==================================================
UnavailableException.java
deleted file mode 100644
index 26e8caa879..0000000000
--- a/java/jakarta/servlet/SingleThreadModel.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package jakarta.servlet;
-
-/**
- * Ensures that servlets handle only one request at a time. This interface has
- * no methods.
- * <p>
- * If a servlet implements this interface, you are <i>guaranteed</i> that no two
- * threads will execute concurrently in the servlet's <code>service</code>
- * method. The servlet container can make this guarantee by synchronizing access
- * to a single instance of the servlet, or by maintaining a pool of servlet
- * instances and dispatching each new request to a free servlet.
- * <p>
- * Note that SingleThreadModel does not solve all thread safety issues. For
- * example, session attributes and static variables can still be accessed by
- * multiple requests on multiple threads at the same time, even when
- * SingleThreadModel servlets are used. It is recommended that a developer take
- * other means to resolve those issues instead of implementing this interface,
- * such as avoiding the usage of an instance variable or synchronizing the block
- * of the code accessing those resources. This interface is deprecated in
- * Servlet API version 2.4.
- *
- * @deprecated As of Java Servlet API 2.4, with no direct replacement.
- */
-@Deprecated
-public interface SingleThreadModel {
-    // No methods
-}

==================================================
HttpServletRequest.java
index 73132ee924..2f9073bd0e 100644
--- a/java/jakarta/servlet/UnavailableException.java
+++ b/java/jakarta/servlet/UnavailableException.java
@@ -42,11 +42,6 @@ public class UnavailableException extends ServletException {
 
     private static final long serialVersionUID = 1L;
 
-    /**
-     * The Servlet that is unavailable.
-     */
-    private final Servlet servlet;
-
     /**
      * Is the issue permanent - i.e. is administrator action required?
      */
@@ -57,47 +52,6 @@ public class UnavailableException extends ServletException {
      */
     private final int seconds;
 
-    /**
-     * @param servlet
-     *            the <code>Servlet</code> instance that is unavailable
-     * @param msg
-     *            a <code>String</code> specifying the descriptive message
-     * @deprecated As of Java Servlet API 2.2, use
-     *             {@link #UnavailableException(String)} instead.
-     */
-    @Deprecated
-    public UnavailableException(Servlet servlet, String msg) {
-        super(msg);
-        this.servlet = servlet;
-        permanent = true;
-        this.seconds = 0;
-    }
-
-    /**
-     * @param seconds
-     *            an integer specifying the number of seconds the servlet
-     *            expects to be unavailable; if zero or negative, indicates that
-     *            the servlet can't make an estimate
-     * @param servlet
-     *            the <code>Servlet</code> that is unavailable
-     * @param msg
-     *            a <code>String</code> specifying the descriptive message,
-     *            which can be written to a log file or displayed for the user.
-     * @deprecated As of Java Servlet API 2.2, use
-     *             {@link #UnavailableException(String, int)} instead.
-     */
-    @Deprecated
-    public UnavailableException(int seconds, Servlet servlet, String msg) {
-        super(msg);
-        this.servlet = servlet;
-        if (seconds <= 0) {
-            this.seconds = -1;
-        } else {
-            this.seconds = seconds;
-        }
-        permanent = false;
-    }
-
     /**
      * Constructs a new exception with a descriptive message indicating that the
      * servlet is permanently unavailable.
@@ -108,7 +62,6 @@ public class UnavailableException extends ServletException {
     public UnavailableException(String msg) {
         super(msg);
         seconds = 0;
-        servlet = null;
         permanent = true;
     }
 
@@ -139,7 +92,6 @@ public class UnavailableException extends ServletException {
         } else {
             this.seconds = seconds;
         }
-        servlet = null;
         permanent = false;
     }
 
@@ -156,18 +108,6 @@ public class UnavailableException extends ServletException {
         return permanent;
     }
 
-    /**
-     * Returns the servlet that is reporting its unavailability.
-     *
-     * @return the <code>Servlet</code> object that is throwing the
-     *         <code>UnavailableException</code>
-     * @deprecated As of Java Servlet API 2.2, with no replacement.
-     */
-    @Deprecated
-    public Servlet getServlet() {
-        return servlet;
-    }
-
     /**
      * Returns the number of seconds the servlet expects to be temporarily
      * unavailable.

==================================================
HttpServletRequestWrapper.java
index 1984299d25..1bd2bcb894 100644
--- a/java/jakarta/servlet/http/HttpServletRequest.java
+++ b/java/jakarta/servlet/http/HttpServletRequest.java
@@ -472,14 +472,6 @@ public interface HttpServletRequest extends ServletRequest {
      */
     public boolean isRequestedSessionIdFromURL();
 
-    /**
-     * @return {@link #isRequestedSessionIdFromURL()}
-     * @deprecated As of Version 2.1 of the Java Servlet API, use
-     *             {@link #isRequestedSessionIdFromURL} instead.
-     */
-    @Deprecated
-    public boolean isRequestedSessionIdFromUrl();
-
     /**
      * Triggers the same authentication process as would be triggered if the
      * request is for a resource that is protected by a security constraint.

==================================================
HttpServletResponse.java
index 12f54c1cf8..1125561bc0 100644
--- a/java/jakarta/servlet/http/HttpServletRequestWrapper.java
+++ b/java/jakarta/servlet/http/HttpServletRequestWrapper.java
@@ -289,18 +289,6 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
         return this._getHttpServletRequest().isRequestedSessionIdFromURL();
     }
 
-    /**
-     * The default behavior of this method is to return
-     * isRequestedSessionIdFromUrl() on the wrapped request object.
-     *
-     * @deprecated As of Version 3.0 of the Java Servlet API
-     */
-    @Override
-    @Deprecated
-    public boolean isRequestedSessionIdFromUrl() {
-        return this._getHttpServletRequest().isRequestedSessionIdFromUrl();
-    }
-
     /**
      * {@inheritDoc}
      * <p>

==================================================
HttpServletResponseWrapper.java
index 4fb5538070..479e75a31e 100644
--- a/java/jakarta/servlet/http/HttpServletResponse.java
+++ b/java/jakarta/servlet/http/HttpServletResponse.java
@@ -91,30 +91,9 @@ public interface HttpServletResponse extends ServletResponse {
      * @return the encoded URL if encoding is needed; the unchanged URL
      *         otherwise.
      * @see #sendRedirect
-     * @see #encodeUrl
      */
     public String encodeRedirectURL(String url);
 
-    /**
-     * @param url
-     *            the url to be encoded.
-     * @return the encoded URL if encoding is needed; the unchanged URL
-     *         otherwise.
-     * @deprecated As of version 2.1, use encodeURL(String url) instead
-     */
-    @Deprecated
-    public String encodeUrl(String url);
-
-    /**
-     * @param url
-     *            the url to be encoded.
-     * @return the encoded URL if encoding is needed; the unchanged URL
-     *         otherwise.
-     * @deprecated As of version 2.1, use encodeRedirectURL(String url) instead
-     */
-    @Deprecated
-    public String encodeRedirectUrl(String url);
-
     /**
      * Sends an error response to the client using the specified status code and
      * clears the output buffer. The server defaults to creating the response to
@@ -279,21 +258,6 @@ public interface HttpServletResponse extends ServletResponse {
      */
     public void setStatus(int sc);
 
-    /**
-     * Sets the status code and message for this response.
-     *
-     * @param sc
-     *            the status code
-     * @param sm
-     *            the status message
-     * @deprecated As of version 2.1, due to ambiguous meaning of the message
-     *             parameter. To set a status code use
-     *             <code>setStatus(int)</code>, to send an error with a
-     *             description use <code>sendError(int, String)</code>.
-     */
-    @Deprecated
-    public void setStatus(int sc, String sm);
-
     /**
      * Get the HTTP status code for this Response.
      *

==================================================
HttpSession.java
index 582a6671cf..bc64609835 100644
--- a/java/jakarta/servlet/http/HttpServletResponseWrapper.java
+++ b/java/jakarta/servlet/http/HttpServletResponseWrapper.java
@@ -87,30 +87,6 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
         return this._getHttpServletResponse().encodeRedirectURL(url);
     }
 
-    /**
-     * The default behavior of this method is to call encodeUrl(String url) on
-     * the wrapped response object.
-     *
-     * @deprecated As of Version 3.0 of the Java Servlet API
-     */
-    @Override
-    @Deprecated
-    public String encodeUrl(String url) {
-        return this._getHttpServletResponse().encodeUrl(url);
-    }
-
-    /**
-     * The default behavior of this method is to return encodeRedirectUrl(String
-     * url) on the wrapped response object.
-     *
-     * @deprecated As of Version 3.0 of the Java Servlet API
-     */
-    @Override
-    @Deprecated
-    public String encodeRedirectUrl(String url) {
-        return this._getHttpServletResponse().encodeRedirectUrl(url);
-    }
-
     /**
      * The default behavior of this method is to call sendError(int sc, String
      * msg) on the wrapped response object.
@@ -201,18 +177,6 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
         this._getHttpServletResponse().setStatus(sc);
     }
 
-    /**
-     * The default behavior of this method is to call setStatus(int sc, String
-     * sm) on the wrapped response object.
-     *
-     * @deprecated As of Version 3.0 of the Java Servlet API
-     */
-    @Override
-    @Deprecated
-    public void setStatus(int sc, String sm) {
-        this._getHttpServletResponse().setStatus(sc, sm);
-    }
-
     /**
      * {@inheritDoc}
      * <p>

==================================================
HttpSessionContext.java
index 9b03f0dc53..e712347184 100644
--- a/java/jakarta/servlet/http/HttpSession.java
+++ b/java/jakarta/servlet/http/HttpSession.java
@@ -134,16 +134,6 @@ public interface HttpSession {
      */
     public int getMaxInactiveInterval();
 
-    /**
-     * Do not use.
-     * @return A dummy implementation of HttpSessionContext
-     * @deprecated As of Version 2.1, this method is deprecated and has no
-     *             replacement. It will be removed in a future version of the
-     *             Java Servlet API.
-     */
-    @Deprecated
-    public HttpSessionContext getSessionContext();
-
     /**
      * Returns the object bound with the specified name in this session, or
      * <code>null</code> if no object is bound under the name.
@@ -156,18 +146,6 @@ public interface HttpSession {
      */
     public Object getAttribute(String name);
 
-    /**
-     * @param name
-     *            a string specifying the name of the object
-     * @return the object with the specified name
-     * @exception IllegalStateException
-     *                if this method is called on an invalidated session
-     * @deprecated As of Version 2.2, this method is replaced by
-     *             {@link #getAttribute}.
-     */
-    @Deprecated
-    public Object getValue(String name);
-
     /**
      * Returns an <code>Enumeration</code> of <code>String</code> objects
      * containing the names of all the objects bound to this session.
@@ -179,17 +157,6 @@ public interface HttpSession {
      */
     public Enumeration<String> getAttributeNames();
 
-    /**
-     * @return an array of <code>String</code> objects specifying the names of
-     *         all the objects bound to this session
-     * @exception IllegalStateException
-     *                if this method is called on an invalidated session
-     * @deprecated As of Version 2.2, this method is replaced by
-     *             {@link #getAttributeNames}
-     */
-    @Deprecated
-    public String[] getValueNames();
-
     /**
      * Binds an object to this session, using the name specified. If an object
      * of the same name is already bound to the session, the object is replaced.
@@ -216,19 +183,6 @@ public interface HttpSession {
      */
     public void setAttribute(String name, Object value);
 
-    /**
-     * @param name
-     *            the name to which the object is bound; cannot be null
-     * @param value
-     *            the object to be bound; cannot be null
-     * @exception IllegalStateException
-     *                if this method is called on an invalidated session
-     * @deprecated As of Version 2.2, this method is replaced by
-     *             {@link #setAttribute}
-     */
-    @Deprecated
-    public void putValue(String name, Object value);
-
     /**
      * Removes the object bound with the specified name from this session. If
      * the session does not have an object bound with the specified name, this
@@ -247,17 +201,6 @@ public interface HttpSession {
      */
     public void removeAttribute(String name);
 
-    /**
-     * @param name
-     *            the name of the object to remove from this session
-     * @exception IllegalStateException
-     *                if this method is called on an invalidated session
-     * @deprecated As of Version 2.2, this method is replaced by
-     *             {@link #removeAttribute}
-     */
-    @Deprecated
-    public void removeValue(String name);
-
     /**
      * Invalidates this session then unbinds any objects bound to it.
      *

==================================================
HttpUtils.java
deleted file mode 100644
index e54aa59c86..0000000000
--- a/java/jakarta/servlet/http/HttpSessionContext.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package jakarta.servlet.http;
-
-import java.util.Enumeration;
-
-/**
- * Do not use.
- * @deprecated As of Java(tm) Servlet API 2.1 for security reasons, with no
- *             replacement. This interface will be removed in a future version
- *             of this API.
- * @see HttpSession
- * @see HttpSessionBindingEvent
- * @see HttpSessionBindingListener
- */
-@Deprecated
-public interface HttpSessionContext {
-
-    /**
-     * Do not use.
-     * @param sessionId Ignored
-     * @return Always <code>null</code>
-     * @deprecated As of Java Servlet API 2.1 with no replacement. This method
-     *             must return null and will be removed in a future version of
-     *             this API.
-     */
-    @Deprecated
-    public HttpSession getSession(String sessionId);
-
-    /**
-     * Do not use.
-     * @return Always an empty Enumeration
-     * @deprecated As of Java Servlet API 2.1 with no replacement. This method
-     *             must return an empty <code>Enumeration</code> and will be
-     *             removed in a future version of this API.
-     */
-    @Deprecated
-    public Enumeration<String> getIds();
-}

==================================================
