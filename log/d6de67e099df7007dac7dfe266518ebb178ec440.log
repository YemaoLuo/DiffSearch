d6de67e099df7007dac7dfe266518ebb178ec440
==================================================
Fix some more deprecation warnings when building with Java 9.
==================================================
Mark Thomas
==================================================
Thu Oct 5 12:44:21 2017 +0000
==================================================
CsrfPreventionFilterBase.java
Fix some more deprecation warnings when building with Java 9.
Use of Class.newInstance() in o.a.catalina

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811198 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterManagerBase.java
index ab642f44f9..f9c03f6990 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
@@ -78,8 +78,8 @@ public abstract class CsrfPreventionFilterBase extends FilterBase {
 
         try {
             Class<?> clazz = Class.forName(randomClass);
-            randomSource = (Random) clazz.newInstance();
-        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+            randomSource = (Random) clazz.getDeclaredConstructor().newInstance();
+        } catch (ReflectiveOperationException e) {
             ServletException se = new ServletException(sm.getString(
                     "csrfPrevention.invalidRandomClass", randomClass), e);
             throw se;

==================================================
WebappClassLoaderBase.java
index ede180a434..79368a605e 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -153,12 +153,12 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
         copy.setSecureRandomAlgorithm(getSecureRandomAlgorithm());
         if (getSessionIdGenerator() != null) {
             try {
-                SessionIdGenerator copyIdGenerator = sessionIdGeneratorClass.newInstance();
+                SessionIdGenerator copyIdGenerator = sessionIdGeneratorClass.getDeclaredConstructor().newInstance();
                 copyIdGenerator.setSessionIdLength(getSessionIdGenerator().getSessionIdLength());
                 copyIdGenerator.setJvmRoute(getSessionIdGenerator().getJvmRoute());
                 copy.setSessionIdGenerator(copyIdGenerator);
-            } catch (InstantiationException | IllegalAccessException e) {
-             // Ignore
+            } catch (ReflectiveOperationException e) {
+                // Ignore
             }
         }
         copy.setRecordAllActions(isRecordAllActions());

==================================================
BaseCatalinaMBean.java
index a4ce702c25..17720d16ef 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -1576,7 +1576,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             Class<?> lpClass =
                 defineClass("org.apache.catalina.loader.JdbcLeakPrevention",
                     classBytes, 0, offset, this.getClass().getProtectionDomain());
-            Object obj = lpClass.newInstance();
+            Object obj = lpClass.getDeclaredConstructor().newInstance();
             @SuppressWarnings("unchecked")
             List<String> driverNames = (List<String>) obj.getClass().getMethod(
                     "clearJdbcDriverRegistrations").invoke(obj);

==================================================
MBeanFactory.java
index 7211e7fe3f..adfb1945a2 100644
--- a/java/org/apache/catalina/mbeans/BaseCatalinaMBean.java
+++ b/java/org/apache/catalina/mbeans/BaseCatalinaMBean.java
@@ -39,8 +39,8 @@ public abstract class BaseCatalinaMBean<T> extends BaseModelMBean {
 
     protected static Object newInstance(String type) throws MBeanException {
         try {
-            return Class.forName(type).newInstance();
-        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
+            return Class.forName(type).getDeclaredConstructor().newInstance();
+        } catch (ReflectiveOperationException e) {
             throw new MBeanException(e);
         }
     }

==================================================
JAASMemoryLoginModule.java
index 6e7143f3f6..73fa010ebf 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -631,7 +631,7 @@ public class MBeanFactory {
             throw new IllegalArgumentException();
         }
 
-        Valve valve = (Valve) Class.forName(className).newInstance();
+        Valve valve = (Valve) Class.forName(className).getDeclaredConstructor().newInstance();
 
         container.getPipeline().addValve(valve);
 

==================================================
JDBCRealm.java
index 64b603a2f6..720c1e9f84 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -243,8 +243,8 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         if (option instanceof String) {
             try {
                 Class<?> clazz = Class.forName((String) option);
-                credentialHandler = (CredentialHandler) clazz.newInstance();
-            } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
+                credentialHandler = (CredentialHandler) clazz.getDeclaredConstructor().newInstance();
+            } catch (ReflectiveOperationException e) {
                 throw new IllegalArgumentException(e);
             }
         }

==================================================
JNDIRealm.java
index 6e2ee26b31..e558dc0ba0 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -639,7 +639,7 @@ public class JDBCRealm
         if (driver == null) {
             try {
                 Class<?> clazz = Class.forName(driverName);
-                driver = (Driver) clazz.newInstance();
+                driver = (Driver) clazz.getDeclaredConstructor().newInstance();
             } catch (Throwable e) {
                 ExceptionUtils.handleThrowable(e);
                 throw new SQLException(e.getMessage(), e);

==================================================
RealmBase.java
index 591fb571c0..1a96cc4fd7 100644
--- a/java/org/apache/catalina/realm/LocalStrings.properties
+++ b/java/org/apache/catalina/realm/LocalStrings.properties
@@ -68,9 +68,7 @@ realmBase.authenticateSuccess=Username [{0}] successfully authenticated
 realmBase.gssNameFail=Failed to extract name from established GSSContext
 realmBase.gotX509Username=Got user name from X509 certificate: [{0}]
 realmBase.createUsernameRetriever.ClassCastException=Class [{0}] is not an X509UsernameRetriever.
-realmBase.createUsernameRetriever.ClassNotFoundException=Cannot find class [{0}].
-realmBase.createUsernameRetriever.InstantiationException=Cannot create object of type [{0}].
-realmBase.createUsernameRetriever.IllegalAccessException=Cannot create object of type [{0}].
+realmBase.createUsernameRetriever.newInstance=Cannot create object of type [{0}].
 realmBase.credentialHandler.customCredentialHandler=Unable to set the property [{0}] to value [{1}] as a custom CredentialHandler has been configured
 realmBase.cannotGetRoles=Cannot get roles from principal [{0}]
 realmBase.gssContextNotEstablished=Authenticator implementation error: the passed security context is not fully established

==================================================
SecurityClassLoad.java
index 7d67ec38fd..d4b13b1102 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1402,11 +1402,11 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if (handlerClassName == null) {
             for (Class<? extends DigestCredentialHandlerBase> clazz : credentialHandlerClasses) {
                 try {
-                    handler = clazz.newInstance();
+                    handler = clazz.getDeclaredConstructor().newInstance();
                     if (IntrospectionUtils.setProperty(handler, "algorithm", algorithm)) {
                         break;
                     }
-                } catch (InstantiationException | IllegalAccessException e) {
+                } catch (ReflectiveOperationException e) {
                     // This isn't good.
                     throw new RuntimeException(e);
                 }
@@ -1414,10 +1414,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         } else {
             try {
                 Class<?> clazz = Class.forName(handlerClassName);
-                handler = (DigestCredentialHandlerBase) clazz.newInstance();
+                handler = (DigestCredentialHandlerBase) clazz.getDeclaredConstructor().newInstance();
                 IntrospectionUtils.setProperty(handler, "algorithm", algorithm);
-            } catch (InstantiationException | IllegalAccessException
-                    | ClassNotFoundException e) {
+            } catch (ReflectiveOperationException e) {
                 throw new RuntimeException(e);
             }
         }
@@ -1548,13 +1547,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         try {
             @SuppressWarnings("unchecked")
             Class<? extends X509UsernameRetriever> clazz = (Class<? extends X509UsernameRetriever>)Class.forName(className);
-            return clazz.newInstance();
-        } catch (ClassNotFoundException e) {
-            throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.ClassNotFoundException", className), e);
-        } catch (InstantiationException e) {
-            throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.InstantiationException", className), e);
-        } catch (IllegalAccessException e) {
-            throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.IllegalAccessException", className), e);
+            return clazz.getDeclaredConstructor().newInstance();
+        } catch (ReflectiveOperationException e) {
+            throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.newInstance", className), e);
         } catch (ClassCastException e) {
             throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.ClassCastException", className), e);
         }

==================================================
JDBCStore.java
index b9678ef20b..cea2830e8a 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -115,7 +115,7 @@ public final class SecurityClassLoad {
         loader.loadClass(basePackage + "http11.Constants");
         // Make sure system property is read at this point
         Class<?> clazz = loader.loadClass(basePackage + "Constants");
-        clazz.newInstance();
+        clazz.getDeclaredConstructor().newInstance();
         loader.loadClass(basePackage + "http2.Stream$PrivilegedPush");
     }
 
@@ -178,7 +178,7 @@ public final class SecurityClassLoad {
         loader.loadClass(basePackage + "util.http.NamesEnumerator");
         // Make sure system property is read at this point
         Class<?> clazz = loader.loadClass(basePackage + "util.http.FastHttpDateFormat");
-        clazz.newInstance();
+        clazz.getDeclaredConstructor().newInstance();
         loader.loadClass(basePackage + "util.http.parser.HttpParser");
         loader.loadClass(basePackage + "util.http.parser.MediaType");
         loader.loadClass(basePackage + "util.http.parser.MediaTypeCache");

==================================================
ManagerBase.java
index 6b8cec6164..434b9ad06c 100644
--- a/java/org/apache/catalina/session/JDBCStore.java
+++ b/java/org/apache/catalina/session/JDBCStore.java
@@ -920,8 +920,8 @@ public class JDBCStore extends StoreBase {
         if (driver == null) {
             try {
                 Class<?> clazz = Class.forName(driverName);
-                driver = (Driver) clazz.newInstance();
-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+                driver = (Driver) clazz.getDeclaredConstructor().newInstance();
+            } catch (ReflectiveOperationException e) {
                 manager.getContext().getLogger().error(
                         sm.getString(getStoreName() + ".checkConnectionClassNotFoundException",
                         e.toString()));

==================================================
Bootstrap.java
index e6d91f03d9..91da6eaec5 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -377,11 +377,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
             return sessionIdGenerator;
         } else if (sessionIdGeneratorClass != null) {
             try {
-                sessionIdGenerator = sessionIdGeneratorClass.newInstance();
+                sessionIdGenerator = sessionIdGeneratorClass.getDeclaredConstructor().newInstance();
                 return sessionIdGenerator;
-            } catch(IllegalAccessException ex) {
-                // Ignore
-            } catch(InstantiationException ex) {
+            } catch(ReflectiveOperationException ex) {
                 // Ignore
             }
         }

==================================================
ContextConfig.java
index fc18b5a04a..0498afee72 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -266,7 +266,7 @@ public final class Bootstrap {
         Class<?> startupClass =
             catalinaLoader.loadClass
             ("org.apache.catalina.startup.Catalina");
-        Object startupInstance = startupClass.newInstance();
+        Object startupInstance = startupClass.getDeclaredConstructor().newInstance();
 
         // Set the shared extensions class loader
         if (log.isDebugEnabled())

==================================================
HostConfig.java
index 80b81f37b8..b758998ac4 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -399,7 +399,7 @@ public class ContextConfig implements LifecycleListener {
             // Instantiate and install an Authenticator of the requested class
             try {
                 Class<?> authenticatorClass = Class.forName(authenticatorName);
-                authenticator = (Valve) authenticatorClass.newInstance();
+                authenticator = (Valve) authenticatorClass.getDeclaredConstructor().newInstance();
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 log.error(sm.getString(

==================================================
LifecycleListenerRule.java
index 301b99964a..8346d9667a 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -584,7 +584,7 @@ public class HostConfig implements LifecycleListener {
 
             Class<?> clazz = Class.forName(host.getConfigClass());
             LifecycleListener listener =
-                (LifecycleListener) clazz.newInstance();
+                (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
             context.addLifecycleListener(listener);
 
             context.setConfigFile(contextXml.toURI().toURL());
@@ -891,7 +891,8 @@ public class HostConfig implements LifecycleListener {
                         cn.getPath(), Constants.ApplicationContextXml,
                         new File(host.getConfigBaseFile(), cn.getBaseName() + ".xml")));
             } else {
-                context = (Context) Class.forName(contextClass).newInstance();
+                context = (Context) Class.forName(
+                        contextClass).getDeclaredConstructor().newInstance();
             }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
@@ -968,7 +969,7 @@ public class HostConfig implements LifecycleListener {
 
             Class<?> clazz = Class.forName(host.getConfigClass());
             LifecycleListener listener =
-                (LifecycleListener) clazz.newInstance();
+                (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
             context.addLifecycleListener(listener);
 
             context.setName(cn.getName());
@@ -1119,12 +1120,13 @@ public class HostConfig implements LifecycleListener {
                         cn.getPath(), xml, xmlCopy));
                 context = new FailedContext();
             } else {
-                context = (Context) Class.forName(contextClass).newInstance();
+                context = (Context) Class.forName(
+                        contextClass).getDeclaredConstructor().newInstance();
             }
 
             Class<?> clazz = Class.forName(host.getConfigClass());
             LifecycleListener listener =
-                (LifecycleListener) clazz.newInstance();
+                    (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
             context.addLifecycleListener(listener);
 
             context.setName(cn.getName());

==================================================
Tomcat.java
index 4cbbc89e78..b24af76875 100644
--- a/java/org/apache/catalina/startup/LifecycleListenerRule.java
+++ b/java/org/apache/catalina/startup/LifecycleListenerRule.java
@@ -125,7 +125,7 @@ public class LifecycleListenerRule extends Rule {
         // Instantiate a new LifecycleListener implementation object
         Class<?> clazz = Class.forName(className);
         LifecycleListener listener =
-            (LifecycleListener) clazz.newInstance();
+            (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
 
         // Add this LifecycleListener to our associated component
         c.addLifecycleListener(listener);

==================================================
UserConfig.java
index a993eb6bfe..05c816c238 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -598,8 +598,8 @@ public class Tomcat {
         LifecycleListener listener = null;
         try {
             Class<?> clazz = Class.forName(getHost().getConfigClass());
-            listener = (LifecycleListener) clazz.newInstance();
-        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+            listener = (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+        } catch (ReflectiveOperationException e) {
             // Wrap in IAE since we can't easily change the method signature to
             // to throw the specific checked exceptions
             throw new IllegalArgumentException(e);
@@ -1030,10 +1030,8 @@ public class Tomcat {
             if (singleThreadModel) {
                 Servlet instance;
                 try {
-                    instance = existing.getClass().newInstance();
-                } catch (InstantiationException e) {
-                    throw new ServletException(e);
-                } catch (IllegalAccessException e) {
+                    instance = existing.getClass().getDeclaredConstructor().newInstance();
+                } catch (ReflectiveOperationException e) {
                     throw new ServletException(e);
                 }
                 instance.init(facade);

==================================================
WebappServiceLoader.java
index 4d50c8f479..506c457be8 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -289,7 +289,7 @@ public final class UserConfig
         UserDatabase database = null;
         try {
             Class<?> clazz = Class.forName(userClass);
-            database = (UserDatabase) clazz.newInstance();
+            database = (UserDatabase) clazz.getDeclaredConstructor().newInstance();
             database.setUserConfig(this);
         } catch (Exception e) {
             host.getLogger().error(sm.getString("userConfig.database"), e);
@@ -340,13 +340,12 @@ public final class UserConfig
         // Deploy the web application for this user
         try {
             Class<?> clazz = Class.forName(contextClass);
-            Context context =
-              (Context) clazz.newInstance();
+            Context context = (Context) clazz.getDeclaredConstructor().newInstance();
             context.setPath(contextPath);
             context.setDocBase(app.toString());
             clazz = Class.forName(configClass);
             LifecycleListener listener =
-                (LifecycleListener) clazz.newInstance();
+                (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
             context.addLifecycleListener(listener);
             host.addChild(context);
         } catch (Exception e) {

==================================================
StoreAppender.java
index e7dfe5920e..b96bae625b 100644
--- a/java/org/apache/catalina/startup/WebappServiceLoader.java
+++ b/java/org/apache/catalina/startup/WebappServiceLoader.java
@@ -186,9 +186,8 @@ public class WebappServiceLoader<T> {
         for (String serviceClass : servicesFound) {
             try {
                 Class<?> clazz = Class.forName(serviceClass, true, loader);
-                services.add(serviceType.cast(clazz.newInstance()));
-            } catch (ClassNotFoundException | InstantiationException |
-                    IllegalAccessException | ClassCastException e) {
+                services.add(serviceType.cast(clazz.getDeclaredConstructor().newInstance()));
+            } catch (ReflectiveOperationException | ClassCastException e) {
                 throw new IOException(e);
             }
         }

==================================================
StoreConfigLifecycleListener.java
index e0ea861167..8e09fe4d40 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -318,12 +318,10 @@ public class StoreAppender {
      *
      * @param bean The bean
      * @return an object from same class as bean parameter
-     * @throws InstantiationException Error creating a new instance
-     * @throws IllegalAccessException Another error occurred
+     * @throws ReflectiveOperationException Error creating a new instance
      */
-    public Object defaultInstance(Object bean) throws InstantiationException,
-            IllegalAccessException {
-        return bean.getClass().newInstance();
+    public Object defaultInstance(Object bean) throws ReflectiveOperationException {
+        return bean.getClass().getDeclaredConstructor().newInstance();
     }
 
     /**

==================================================
StoreContextAppender.java
index 741608c4f4..8d4c83ec21 100644
--- a/java/org/apache/catalina/storeconfig/StoreConfigLifecycleListener.java
+++ b/java/org/apache/catalina/storeconfig/StoreConfigLifecycleListener.java
@@ -84,7 +84,7 @@ public class StoreConfigLifecycleListener implements LifecycleListener {
         try {
             Class<?> clazz = Class.forName(getStoreConfigClass(), true, this
                     .getClass().getClassLoader());
-            storeConfig = (IStoreConfig) clazz.newInstance();
+            storeConfig = (IStoreConfig) clazz.getDeclaredConstructor().newInstance();
             if (null == getStoreRegistry())
                 // default Loading
                 loader.load();

==================================================
StoreFactoryRule.java
index 48d18d720e..b8a1b03a5a 100644
--- a/java/org/apache/catalina/storeconfig/StoreContextAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreContextAppender.java
@@ -152,8 +152,7 @@ public class StoreContextAppender extends StoreAppender {
      * @see org.apache.catalina.storeconfig.StoreAppender#defaultInstance(java.lang.Object)
      */
     @Override
-    public Object defaultInstance(Object bean) throws InstantiationException,
-            IllegalAccessException {
+    public Object defaultInstance(Object bean) throws ReflectiveOperationException {
         if (bean instanceof StandardContext) {
             StandardContext defaultContext = new StandardContext();
             /*

==================================================
SessionIdGeneratorBase.java
index d0016b52b8..178058b7b8 100644
--- a/java/org/apache/catalina/storeconfig/StoreFactoryRule.java
+++ b/java/org/apache/catalina/storeconfig/StoreFactoryRule.java
@@ -107,13 +107,10 @@ public class StoreFactoryRule extends Rule {
      * @param defaultName Default Class
      * @param attributes current digester attribute elements
      * @return new configured object instance
-     * @throws ClassNotFoundException Class was not found
-     * @throws InstantiationException Error creating an instance
-     * @throws IllegalAccessException Security exception
+     * @throws ReflectiveOperationException Error creating an instance
      */
     protected Object newInstance(String attr, String defaultName,
-            Attributes attributes) throws ClassNotFoundException,
-            InstantiationException, IllegalAccessException {
+            Attributes attributes) throws ReflectiveOperationException {
         String className = defaultName;
         if (attr != null) {
             String value = attributes.getValue(attr);
@@ -121,6 +118,6 @@ public class StoreFactoryRule extends Rule {
                 className = value;
         }
         Class<?> clazz = Class.forName(className);
-        return clazz.newInstance();
+        return clazz.getDeclaredConstructor().newInstance();
     }
 }
\ No newline at end of file

==================================================
JDBCAccessLogValve.java
index 57c6453f4c..bba5c5b818 100644
--- a/java/org/apache/catalina/util/SessionIdGeneratorBase.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -220,7 +220,7 @@ public abstract class SessionIdGeneratorBase extends LifecycleBase
             try {
                 // Construct and seed a new random number generator
                 Class<?> clazz = Class.forName(secureRandomClass);
-                result = (SecureRandom) clazz.newInstance();
+                result = (SecureRandom) clazz.getDeclaredConstructor().newInstance();
             } catch (Exception e) {
                 log.error(sm.getString("sessionIdGeneratorBase.random",
                         secureRandomClass), e);

==================================================
RewriteValve.java
index 6656440696..13ba876b7a 100644
--- a/java/org/apache/catalina/valves/JDBCAccessLogValve.java
+++ b/java/org/apache/catalina/valves/JDBCAccessLogValve.java
@@ -568,7 +568,7 @@ public final class JDBCAccessLogValve extends ValveBase implements AccessLog {
         if (driver == null) {
             try {
                 Class<?> clazz = Class.forName(driverName);
-                driver = (Driver) clazz.newInstance();
+                driver = (Driver) clazz.getDeclaredConstructor().newInstance();
             } catch (Throwable e) {
                 ExceptionUtils.handleThrowable(e);
                 throw new SQLException(e.getMessage(), e);

==================================================
