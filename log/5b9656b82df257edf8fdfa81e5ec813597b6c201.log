5b9656b82df257edf8fdfa81e5ec813597b6c201
==================================================
UCdetector
==================================================
Mark Emlyn
==================================================
Wed Feb 13 22:02:49 2013 +0000
==================================================
ELFunctionMapper.java
UCdetector
Reduce visibility, make fields final, remove unused code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1445953 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELNode.java
index 93450379c8..395ff194b4 100644
--- a/java/org/apache/jasper/compiler/ELFunctionMapper.java
+++ b/java/org/apache/jasper/compiler/ELFunctionMapper.java
@@ -38,8 +38,8 @@ import org.apache.jasper.JasperException;
 
 public class ELFunctionMapper {
     private int currFunc = 0;
-    StringBuilder ds;  // Contains codes to initialize the functions mappers.
-    StringBuilder ss;  // Contains declarations of the functions mappers.
+    private StringBuilder ds;  // Contains codes to initialize the functions mappers.
+    private StringBuilder ss;  // Contains declarations of the functions mappers.
 
     /**
      * Creates the functions mappers for all EL expressions in the JSP page.
@@ -70,7 +70,7 @@ public class ELFunctionMapper {
      * A visitor for the page.  The places where EL is allowed are scanned
      * for functions, and if found functions mappers are created.
      */
-    class ELFunctionVisitor extends Node.Visitor {
+    private class ELFunctionVisitor extends Node.Visitor {
 
         /**
          * Use a global name map to facilitate reuse of function maps.
@@ -165,8 +165,9 @@ public class ELFunctionMapper {
 
             // Only care about functions in ELNode's
             class Fvisitor extends ELNode.Visitor {
-                final ArrayList<ELNode.Function> funcs = new ArrayList<>();
-                final HashMap<String, String> keyMap = new HashMap<>();
+                private final ArrayList<ELNode.Function> funcs =
+                        new ArrayList<>();
+                private final HashMap<String, String> keyMap = new HashMap<>();
                 @Override
                 public void visit(ELNode.Function n) throws JasperException {
                     String key = n.getPrefix() + ":" + n.getName();

==================================================
ErrorDispatcher.java
index 25d9187867..34e15ce538 100644
--- a/java/org/apache/jasper/compiler/ELNode.java
+++ b/java/org/apache/jasper/compiler/ELNode.java
@@ -186,7 +186,7 @@ abstract class ELNode {
         /* Name used for creating a map for the functions in this
            EL expression, for communication to Generator.
          */
-        String mapName = null;        // The function map associated this EL
+        private String mapName = null;    // The function map associated this EL
         private final List<ELNode> list;
 
         public Nodes() {

==================================================
Generator.java
index b638006fd5..7aac7b4729 100644
--- a/java/org/apache/jasper/compiler/ErrorDispatcher.java
+++ b/java/org/apache/jasper/compiler/ErrorDispatcher.java
@@ -44,10 +44,10 @@ import org.xml.sax.SAXException;
 public class ErrorDispatcher {
 
     // Custom error handler
-    private ErrorHandler errHandler;
+    private final ErrorHandler errHandler;
 
     // Indicates whether the compilation was initiated by JspServlet or JspC
-    private boolean jspcMode = false;
+    private final boolean jspcMode;
 
 
     /*
@@ -575,16 +575,16 @@ public class ErrorDispatcher {
      * Visitor responsible for mapping a line number in the generated servlet
      * source code to the corresponding JSP node.
      */
-    static class ErrorVisitor extends Node.Visitor {
+    private static class ErrorVisitor extends Node.Visitor {
 
         // Java source line number to be mapped
-        private int lineNum;
+        private final int lineNum;
 
         /*
          * JSP node whose Java source code range in the generated servlet
          * contains the Java source line number to be mapped
          */
-        Node found;
+        private Node found;
 
         /*
          * Constructor.

==================================================
ImplicitTagLibraryInfo.java
index a868cb7b57..5f7b3e855d 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -748,7 +748,7 @@ class Generator {
     /**
      * A visitor that generates codes for the elements in the page.
      */
-    class GenerateVisitor extends Node.Visitor {
+    private class GenerateVisitor extends Node.Visitor {
 
         /*
          * Hashtable containing introspection information on tag handlers:
@@ -862,7 +862,7 @@ class Generator {
                 throws JasperException {
 
             class ParamVisitor extends Node.Visitor {
-                String separator;
+                private String separator;
 
                 ParamVisitor(String separator) {
                     this.separator = separator;

==================================================
JarURLResource.java
index 6444827534..ddd003f07a 100644
--- a/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
+++ b/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
@@ -53,11 +53,11 @@ class ImplicitTagLibraryInfo extends TagLibraryInfo {
     private static final String IMPLICIT_TLD = "implicit.tld";
 
     // Maps tag names to tag file paths
-    private Hashtable<String,String> tagFileMap;
+    private final Hashtable<String,String> tagFileMap;
 
-    private ParserController pc;
-    private PageInfo pi;
-    private Vector<TagFileInfo> vec;
+    private final ParserController pc;
+    private final PageInfo pi;
+    private final Vector<TagFileInfo> vec;
 
     /**
      * Constructor.

==================================================
JasperTagInfo.java
index 3e073fbc41..c151b56b6c 100644
--- a/java/org/apache/jasper/compiler/JarURLResource.java
+++ b/java/org/apache/jasper/compiler/JarURLResource.java
@@ -25,11 +25,7 @@ import java.util.jar.JarFile;
 
 public class JarURLResource implements JarResource {
 
-    private String jarUrl;
-
-    public JarURLResource(URL jarURL) {
-        this(jarURL.toExternalForm());
-    }
+    private final String jarUrl;
 
     public JarURLResource(String jarUrl) {
         this.jarUrl = jarUrl;

==================================================
