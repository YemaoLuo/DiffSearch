787152d110bb48c54833a7b7bce07c45e2e3000d
==================================================
Chip away at the Javadoc warnings with Java 17
==================================================
Mark Thomas
==================================================
Mon Jul 26 15:33:29 2021 +0100
==================================================
AsyncEvent.java
Chip away at the Javadoc warnings with Java 17


==================================================
AsyncListener.java
index 5d2bdd142e..cd1eed093f 100644
--- a/java/jakarta/servlet/AsyncEvent.java
+++ b/java/jakarta/servlet/AsyncEvent.java
@@ -17,7 +17,8 @@
 package jakarta.servlet;
 
 /**
- * TODO SERVLET3 - Add comments
+ * Used to pass data to the methods of {@link AsyncListener}.
+ *
  * @since Servlet 3.0
  */
 public class AsyncEvent {
@@ -26,6 +27,11 @@ public class AsyncEvent {
     private final ServletResponse response;
     private final Throwable throwable;
 
+    /**
+     * Creates an instance using the provide parameters.
+     *
+     * @param context   The asynchronous context associated with the event
+     */
     public AsyncEvent(AsyncContext context) {
         this.context = context;
         this.request = null;
@@ -33,6 +39,13 @@ public class AsyncEvent {
         this.throwable = null;
     }
 
+    /**
+     * Creates an instance using the provide parameters.
+     *
+     * @param context   The asynchronous context associated with the event
+     * @param request   The request associated with the event
+     * @param response  The response associated with the event
+     */
     public AsyncEvent(AsyncContext context, ServletRequest request,
             ServletResponse response) {
         this.context = context;
@@ -41,6 +54,12 @@ public class AsyncEvent {
         this.throwable = null;
     }
 
+    /**
+     * Creates an instance using the provide parameters.
+     *
+     * @param context   The asynchronous context associated with the event
+     * @param throwable The throwable associated with the event
+     */
     public AsyncEvent(AsyncContext context, Throwable throwable) {
         this.context = context;
         this.throwable = throwable;
@@ -48,6 +67,14 @@ public class AsyncEvent {
         this.response = null;
     }
 
+    /**
+     * Creates an instance using the provide parameters.
+     *
+     * @param context   The asynchronous context associated with the event
+     * @param request   The request associated with the event
+     * @param response  The response associated with the event
+     * @param throwable The throwable associated with the event
+     */
     public AsyncEvent(AsyncContext context, ServletRequest request,
             ServletResponse response, Throwable throwable) {
         this.context = context;
@@ -56,18 +83,42 @@ public class AsyncEvent {
         this.throwable = throwable;
     }
 
+    /**
+     * Obtain the asynchronous context associated with the event.
+     *
+     * @return  The asynchronous context associated with the event or
+     *          {@code null} if one was not specified
+     */
     public AsyncContext getAsyncContext() {
         return context;
     }
 
+    /**
+     * Obtain the request associated with the event.
+     *
+     * @return  The request associated with the event or
+     *          {@code null} if one was not specified
+     */
     public ServletRequest getSuppliedRequest() {
         return request;
     }
 
+    /**
+     * Obtain the response associated with the event.
+     *
+     * @return  The response associated with the event or
+     *          {@code null} if one was not specified
+     */
     public ServletResponse getSuppliedResponse() {
         return response;
     }
 
+    /**
+     * Obtain the throwable associated with the event.
+     *
+     * @return  The throwable associated with the event or
+     *          {@code null} if one was not specified
+     */
     public Throwable getThrowable() {
         return throwable;
     }

==================================================
DispatcherType.java
index dc3e1a00e4..cd1dc0091a 100644
--- a/java/jakarta/servlet/AsyncListener.java
+++ b/java/jakarta/servlet/AsyncListener.java
@@ -20,12 +20,54 @@ import java.io.IOException;
 import java.util.EventListener;
 
 /**
- * TODO SERVLET3 - Add comments
+ * Listener for events associated with an {@link AsyncContext}.
+ *
  * @since Servlet 3.0
  */
 public interface AsyncListener extends EventListener {
+
+    /**
+     * This event is fired after the call to {@link AsyncContext#complete()}
+     * has been processed by the container.
+     *
+     * @param event Provides access to the objects associated with the event
+     *
+     * @throws IOException Should be thrown if an I/O error occurs during the
+     *                     processing of the event
+     */
     void onComplete(AsyncEvent event) throws IOException;
+
+    /**
+     * This event is fired if an asynchronous operation times out but before
+     * the container takes any action as a result of the timeout.
+     *
+     * @param event Provides access to the objects associated with the event
+     *
+     * @throws IOException Should be thrown if an I/O error occurs during the
+     *                     processing of the event
+     */
     void onTimeout(AsyncEvent event) throws IOException;
+
+    /**
+     * This event is fired if an error occurs during an asynchronous operation
+     * but before the container takes any action as a result of the error.
+     *
+     * @param event Provides access to the objects associated with the event
+     *
+     * @throws IOException Should be thrown if an I/O error occurs during the
+     *                     processing of the event
+     */
     void onError(AsyncEvent event) throws IOException;
+
+    /**
+     * This event is fired if new call is made to
+     * {@link ServletRequest#startAsync()} after the completion of the
+     * {@link AsyncContext} to which this listener was added.
+     *
+     * @param event Provides access to the objects associated with the event
+     *
+     * @throws IOException Should be thrown if an I/O error occurs during the
+     *                     processing of the event
+     */
     void onStartAsync(AsyncEvent event) throws IOException;
 }

==================================================
HttpMethodConstraintElement.java
index 6511ce0814..abd8b6173d 100644
--- a/java/jakarta/servlet/DispatcherType.java
+++ b/java/jakarta/servlet/DispatcherType.java
@@ -17,12 +17,38 @@
 package jakarta.servlet;
 
 /**
+ * Enumeration of dispatcher types. Used both to define filter mappings and by
+ * Servlets to determine why they were called.
+ *
  * @since Servlet 3.0
  */
 public enum DispatcherType {
+
+    /**
+     * {@link RequestDispatcher#forward(ServletRequest, ServletResponse)}
+     */
     FORWARD,
+
+    /**
+     * {@link RequestDispatcher#include(ServletRequest, ServletResponse)}
+     */
     INCLUDE,
+
+    /**
+     * Normal (non-dispatched) requests.
+     */
     REQUEST,
+
+    /**
+     * {@link AsyncContext#dispatch()}, {@link AsyncContext#dispatch(String)}
+     * and
+     * {@link AsyncContext#addListener(AsyncListener, ServletRequest, ServletResponse)}
+     */
     ASYNC,
+
+    /**
+     * When the container has passed processing to the error handler mechanism
+     * such as a defined error page.
+     */
     ERROR
 }

==================================================
