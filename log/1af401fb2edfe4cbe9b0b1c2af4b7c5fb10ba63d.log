1af401fb2edfe4cbe9b0b1c2af4b7c5fb10ba63d
==================================================
First cut of HTTP Upgrade for BIO with blocking
==================================================
Mark Emlyn
==================================================
Sat Nov 24 17:26:51 2012 +0000
==================================================
UpgradeBioProcessor.java
index aeaf1bbd28..30dbb9d348 100644
--- a/java/org/apache/coyote/http11/upgrade/LocalStrings.properties
+++ b/java/org/apache/coyote/http11/upgrade/LocalStrings.properties
@@ -13,6 +13,12 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+upgrade.sis.isFinished.ise=It is illegal to call isFinished() when the ServletInputStream is not in non-blocking mode (i.e. setReadListener() must be called first)
+upgrade.sis.isReady.ise=It is illegal to call isReady() when the ServletInputStream is not in non-blocking mode (i.e. setReadListener() must be called first)
+upgrade.sis.readListener.null=It is illegal to pass null to setReadListener()
+upgrade.sos.canWrite.ise=It is illegal to call canWrite() when the ServletOutputStream is not in non-blocking mode (i.e. setWriteListener() must be called first)
+upgrade.sos.writeListener.null=It is illegal to pass null to setWriteListener()
+
 apr.error=Unexpected error [{0}] reading data from the APR/native socket.
 
 nio.eof.error=Unexpected EOF read on the socket

==================================================
UpgradeInbound.java
index 7768ac604b..b11fb1e1a1 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
@@ -27,59 +27,63 @@ import org.apache.tomcat.util.net.SocketWrapper;
 
 public class UpgradeBioProcessor extends UpgradeProcessor<Socket> {
 
-    private final InputStream inputStream;
-    private final OutputStream outputStream;
+    private static final int INFINITE_TIMEOUT = 0;
 
     public UpgradeBioProcessor(SocketWrapper<Socket> wrapper,
             ProtocolHandler httpUpgradeProcessor) throws IOException {
-        super(upgradeInbound);
+        super(httpUpgradeProcessor, new BioUpgradeServletInputStream(wrapper),
+                new BioUpgradeServletOutputStream(wrapper));
 
-        int timeout = upgradeInbound.getReadTimeout();
-        if (timeout < 0) {
-            timeout = 0;
-        }
-        wrapper.getSocket().setSoTimeout(timeout);
-
-        this.inputStream = wrapper.getSocket().getInputStream();
-        this.outputStream = wrapper.getSocket().getOutputStream();
+        wrapper.getSocket().setSoTimeout(INFINITE_TIMEOUT);
     }
 
 
-    /*
-     * Output methods
-     */
-    @Override
-    public void flush() throws IOException {
-        outputStream.flush();
-    }
+    // ----------------------------------------------------------- Inner classes
 
+    private static class BioUpgradeServletInputStream
+            extends UpgradeServletInputStream {
 
-    @Override
-    public void write(int b) throws IOException {
-        outputStream.write(b);
-    }
+        private final InputStream is;
 
+        public BioUpgradeServletInputStream(SocketWrapper<Socket> wrapper)
+                throws IOException {
+            is = wrapper.getSocket().getInputStream();
+        }
+
+        @Override
+        protected int doRead() throws IOException {
+            return is.read();
+        }
 
-    @Override
-    public void write(byte[]b, int off, int len) throws IOException {
-        outputStream.write(b, off, len);
+        @Override
+        protected int doRead(byte[] b, int off, int len) throws IOException {
+            return is.read(b, off, len);
+        }
     }
 
+    private static class BioUpgradeServletOutputStream
+            extends UpgradeServletOutputStream {
 
-    /*
-     * Input methods
-     */
-    @Override
-    public int read() throws IOException {
-        return inputStream.read();
-    }
+        private final OutputStream os;
+
+        public BioUpgradeServletOutputStream(SocketWrapper<Socket> wrapper)
+                throws IOException {
+            os = wrapper.getSocket().getOutputStream();
+        }
 
+        @Override
+        protected void doWrite(int b) throws IOException {
+            os.write(b);
+        }
 
-    @Override
-    public int read(boolean block, byte[] bytes, int off, int len)
-            throws IOException {
-        // The BIO endpoint always uses blocking IO so the block parameter is
-        // ignored and a blocking read is performed.
-        return inputStream.read(bytes, off, len);
+        @Override
+        protected void doWrite(byte[] b, int off, int len) throws IOException {
+            os.write(b, off, len);
+        }
+
+        @Override
+        protected void doFlush() throws IOException {
+            os.flush();
+        }
     }
 }

==================================================
UpgradeOutbound.java
deleted file mode 100644
index 3e9e60b77a..0000000000
--- a/java/org/apache/coyote/http11/upgrade/UpgradeInbound.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-
-import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
-
-/**
- * Receives notification that there is data to be read on the upgraded
- * connection and processes it.
- */
-public interface UpgradeInbound {
-
-    void setUpgradeProcessor(UpgradeProcessor<?> processor);
-
-    void onUpgradeComplete();
-
-    SocketState onData() throws IOException;
-
-    void setUpgradeOutbound(UpgradeOutbound upgradeOutbound);
-
-    /**
-     * Allow the upgraded protocol to define the read timeout to be used with
-     * the upgraded connection.
-     *
-     * @return  The read timeout in milliseconds or -1 for infinite
-     */
-    int getReadTimeout();
-}

==================================================
UpgradeProcessor.java
deleted file mode 100644
index 813bea8de4..0000000000
--- a/java/org/apache/coyote/http11/upgrade/UpgradeOutbound.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.coyote.http11.upgrade;
-
-import java.io.IOException;
-import java.io.OutputStream;
-
-
-/**
- * Allows data to be written to the upgraded connection.
- */
-public class UpgradeOutbound extends OutputStream {
-
-    @Override
-    public void flush() throws IOException {
-        processor.flush();
-    }
-
-    private final UpgradeProcessor<?> processor;
-
-    public UpgradeOutbound(UpgradeProcessor<?> processor) {
-        this.processor = processor;
-    }
-
-    @Override
-    public void write(int b) throws IOException {
-        processor.write(b);
-    }
-
-    @Override
-    public void write(byte[] b, int off, int len) throws IOException {
-        processor.write(b, off, len);
-    }
-}

==================================================
