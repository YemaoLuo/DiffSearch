9446b3d3ff6ffb26caee17781b415bb92312e672
==================================================
WebSocket 1.0 implementation part 1 of many.
==================================================
Mark Emlyn
==================================================
Sat Nov 24 23:12:49 2012 +0000
==================================================
ContainerProvider.java
index 42c62d1544..285b34d71b 100644
--- a/conf/catalina.properties
+++ b/conf/catalina.properties
@@ -99,7 +99,7 @@ tomcat-api.jar,tomcat-util.jar,tomcat-coyote.jar,tomcat-dbcp.jar,\
 tomcat-jni.jar,tomcat-spdy.jar,\
 tomcat-i18n-en.jar,tomcat-i18n-es.jar,tomcat-i18n-fr.jar,tomcat-i18n-ja.jar,\
 tomcat-juli-adapters.jar,catalina-jmx-remote.jar,catalina-ws.jar,\
-tomcat-jdbc.jar,\
+tomcat-jdbc.jar,websocket-api.jar\
 commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,\
 commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,\
 commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,\

==================================================
WebSocketEndpoint.java
index 1bac4237d2..8f7ceff792 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -16,15 +16,31 @@
  */
 package javax.websocket;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
 public class ContainerProvider {
 
+    private static final String CONTAINER_PROVIDER_IMPL =
+            "org.apache.websocket.ServerContainerImpl";
+
     public static ServerContainer getServerContainer() {
-        // TODO
-        return null;
+        // TODO SecurityManager
+        ServerContainer result = null;
+        try {
+            Class<?> clazz = Class.forName(CONTAINER_PROVIDER_IMPL);
+            Method m = clazz.getMethod("getServerContainer", (Class<?>[]) null);
+            result = (ServerContainer) m.invoke(null, (Object[]) null);
+        } catch (ClassNotFoundException | NoSuchMethodException |
+                SecurityException | IllegalAccessException |
+                IllegalArgumentException | InvocationTargetException e) {
+            e.printStackTrace();
+        }
+
+        return result;
     }
 
     public static ClientContainer getClientContainer() {
-        // TODO
         return null;
     }
 }

==================================================
ClientContainerImpl.java
index 9469e0a8b9..7332b72efb 100644
--- a/java/javax/websocket/WebSocketEndpoint.java
+++ b/java/javax/websocket/WebSocketEndpoint.java
@@ -25,6 +25,9 @@ import java.lang.annotation.Target;
 @Target(ElementType.TYPE)
 public @interface WebSocketEndpoint {
 
+    /**
+     * URI or URI-template that the annotated class should be mapped to.
+     */
     public String value();
 
     public String[] subprotocols() default {};

==================================================
ServerContainerImpl.java
new file mode 100644
index 0000000000..f42836de20
--- /dev/null
+++ b/java/org/apache/websocket/ClientContainerImpl.java
@@ -0,0 +1,83 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.websocket;
+
+import java.net.URI;
+import java.util.Set;
+
+import javax.websocket.ClientContainer;
+import javax.websocket.DeploymentException;
+import javax.websocket.Session;
+
+public class ClientContainerImpl implements ClientContainer {
+
+    @Override
+    public void connectToServer(Object endpoint, URI path)
+            throws DeploymentException {
+        // TODO Auto-generated method stub
+
+    }
+
+    @Override
+    public Set<Session> getActiveSessions() {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    @Override
+    public long getMaxSessionIdleTimeout() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+    @Override
+    public void setMaxSessionIdleTimeout(long timeout) {
+        // TODO Auto-generated method stub
+
+    }
+
+    @Override
+    public long getMaxBinaryMessageBufferSize() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+    @Override
+    public void setMaxBinaryMessageBufferSize(long max) {
+        // TODO Auto-generated method stub
+
+    }
+
+    @Override
+    public long getMaxTextMessageBufferSize() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+    @Override
+    public void setMaxTextMessageBufferSize(long max) {
+        // TODO Auto-generated method stub
+
+    }
+
+    @Override
+    public Set<String> getInstalledExtensions() {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+}

==================================================
Util.java
new file mode 100644
index 0000000000..42e3bcdb2a
--- /dev/null
+++ b/java/org/apache/websocket/ServerContainerImpl.java
@@ -0,0 +1,99 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.websocket;
+
+import java.util.Map;
+import java.util.WeakHashMap;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import javax.websocket.DeploymentException;
+import javax.websocket.Endpoint;
+import javax.websocket.ServerContainer;
+import javax.websocket.ServerEndpointConfiguration;
+
+public class ServerContainerImpl extends ClientContainerImpl implements
+        ServerContainer {
+
+    // Needs to be a WekaHashMap to prevent memory leaks when a context is
+    // stopped
+    private static Map<ClassLoader, ServerContainerImpl>
+            classLoaderContainerMap = new WeakHashMap<>();
+    private static ReadWriteLock classLoaderContainerMapLock =
+            new  ReentrantReadWriteLock();
+
+    public static ServerContainerImpl getServerContainer() {
+        // TODO SecurityManager
+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+
+        ServerContainerImpl result = null;
+
+        Lock readlock = classLoaderContainerMapLock.readLock();
+        try {
+            readlock.lock();
+            result = classLoaderContainerMap.get(tccl);
+        } finally {
+            readlock.unlock();
+        }
+
+        if (result == null) {
+            Lock writeLock = classLoaderContainerMapLock.writeLock();
+            try {
+                writeLock.lock();
+                result = classLoaderContainerMap.get(tccl);
+                if (result == null) {
+                    result = new ServerContainerImpl();
+                    classLoaderContainerMap.put(tccl, result);
+                }
+            } finally {
+                writeLock.unlock();
+            }
+        }
+        return result;
+    }
+
+    private ServerContainerImpl() {
+        // Hide default constructor
+    }
+
+    @Override
+    public void publishServer(Class<? extends Endpoint> clazz)
+            throws DeploymentException {
+
+        try {
+            Endpoint ep = clazz.newInstance();
+            ServerEndpointConfiguration config =
+                    (ServerEndpointConfiguration) ep.getEndpointConfiguration();
+            String path = Util.getServletMappingPath(config.getPath());
+
+            // TODO Replace following debug code with something useful.
+            System.out.println("Class [" + clazz.getName() +
+                    "] deployed to path [" + path + "]");
+        } catch (InstantiationException | IllegalAccessException e) {
+            // TODO i18n
+            throw new DeploymentException(
+                    "Failed to instantiate specified Endpoint", e);
+        }
+    }
+
+    public void publishServer(Class<?> pojo, String path) {
+        // TODO Replace following debug code with something useful.
+        System.out.println("Class [" + pojo.getName() +
+                "] deployed to path [" + path + "]");
+    }
+}

==================================================
WsSci.java
new file mode 100644
index 0000000000..853a416d18
--- /dev/null
+++ b/java/org/apache/websocket/Util.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.websocket;
+
+class Util {
+
+    private Util() {
+        // Hide default constructor
+    }
+
+    static String getServletMappingPath(String wsPath) {
+        int templateStart = wsPath.indexOf('{');
+        if (templateStart == -1) {
+            if (wsPath.charAt(wsPath.length() - 1) == '/') {
+                return wsPath + '*';
+            } else {
+                return wsPath + "/*";
+            }
+        } else {
+            String temp = wsPath.substring(0, templateStart);
+            if (temp.charAt(temp.length() - 1) == '/') {
+                return temp + '*';
+            } else {
+                return temp.substring(0, temp.lastIndexOf('/') + 1) + '*';
+            }
+        }
+    }
+}

==================================================
WsServlet.java
new file mode 100644
index 0000000000..50b3d2d0c5
--- /dev/null
+++ b/java/org/apache/websocket/WsSci.java
@@ -0,0 +1,46 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.websocket;
+
+import java.util.Set;
+
+import javax.servlet.ServletContainerInitializer;
+import javax.servlet.ServletContext;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.HandlesTypes;
+import javax.websocket.WebSocketEndpoint;
+
+@HandlesTypes({WebSocketEndpoint.class})
+public class WsSci implements ServletContainerInitializer {
+
+    @Override
+    public void onStartup(Set<Class<?>> clazzes, ServletContext ctx)
+            throws ServletException {
+        if (clazzes == null || clazzes.size() == 0) {
+            return;
+        }
+        ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+
+        for (Class<?> clazz : clazzes) {
+            WebSocketEndpoint anotation =
+                    clazz.getAnnotation(WebSocketEndpoint.class);
+            String mappingPath = Util.getServletMappingPath(anotation.value());
+            sc.publishServer(clazz, mappingPath);
+        }
+    }
+
+}

==================================================
TestUtil.java
new file mode 100644
index 0000000000..ed5b019490
--- /dev/null
+++ b/res/META-INF/websocket-impl.jar/services/javax.servlet.ServletContainerInitializer
@@ -0,0 +1 @@
+org.apache.websocket.WsSci

==================================================
EchoAnnotation.java
new file mode 100644
index 0000000000..4d0d7b06ce
--- /dev/null
+++ b/test/org/apache/websocket/TestUtil.java
@@ -0,0 +1,44 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.websocket;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+
+public class TestUtil {
+
+    @Test
+    public void testGetServletMappingPath() throws Exception {
+        Assert.assertEquals("/foo/*",
+                Util.getServletMappingPath("/foo"));
+        Assert.assertEquals("/foo/*",
+                Util.getServletMappingPath("/foo/"));
+        Assert.assertEquals("/foo/bar/*",
+                Util.getServletMappingPath("/foo/bar"));
+        Assert.assertEquals("/foo/bar/*",
+                Util.getServletMappingPath("/foo/bar/"));
+        Assert.assertEquals("/foo/*",
+                Util.getServletMappingPath("/foo/{bar}"));
+        Assert.assertEquals("/foo/*",
+                Util.getServletMappingPath("/foo/{bar}/"));
+        Assert.assertEquals("/foo/*",
+                Util.getServletMappingPath("/foo/x{bar}"));
+        Assert.assertEquals("/foo/*",
+                Util.getServletMappingPath("/foo/x{bar}/"));
+    }
+}

==================================================
EchoEndpoint.java
new file mode 100644
index 0000000000..c11b70db4f
--- /dev/null
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoAnnotation.java
@@ -0,0 +1,24 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package websocket.echo;
+
+import javax.websocket.WebSocketEndpoint;
+
+@WebSocketEndpoint("/websocket/echoAnnotation")
+public class EchoAnnotation {
+
+}

==================================================
WsConfigListener.java
new file mode 100644
index 0000000000..afcf0abe38
--- /dev/null
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoEndpoint.java
@@ -0,0 +1,40 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package websocket.echo;
+
+import javax.websocket.DefaultServerConfiguration;
+import javax.websocket.Endpoint;
+import javax.websocket.EndpointConfiguration;
+import javax.websocket.ServerEndpointConfiguration;
+import javax.websocket.Session;
+
+public class EchoEndpoint extends Endpoint{
+
+    private static ServerEndpointConfiguration config =
+            new DefaultServerConfiguration("/websocket/echoProgrammatic");
+
+    @Override
+    public EndpointConfiguration getEndpointConfiguration() {
+        return config;
+    }
+
+    @Override
+    public void onOpen(Session session) {
+        // TODO Auto-generated method stub
+
+    }
+}

==================================================
