429ccaafdf36b0f06ce40880b94e0f9e6f1878e5
==================================================
Bind connectors to localhost for unit tests
==================================================
Mark Emlyn
==================================================
Sat Jan 7 20:52:08 2012 +0000
==================================================
Connector.java
Bind connectors to localhost for unit tests
Improve format of JMX names that include an address
Update unit tests so they pass with the above changes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1228724 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index 0c822be06c..b1a548383e 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.connector;
 
+import java.net.InetAddress;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -881,7 +882,10 @@ public class Connector extends LifecycleMBeanBase  {
             sb.append("auto-");
             sb.append(getProperty("nameIndex"));
         }
-        if (addressObj != null) {
+        if (addressObj instanceof InetAddress) {
+            sb.append(",address=");
+            sb.append(((InetAddress) addressObj).getHostAddress());
+        } else if(addressObj != null) {
             String address = addressObj.toString();
             if (address.length() > 0) {
                 sb.append(",address=");

==================================================
TestRegistration.java
index 898c0ab40a..56e60b2c8f 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -255,7 +255,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
         StringBuilder name = new StringBuilder(getNamePrefix());
         name.append('-');
         if (getAddress() != null) {
-            name.append(getAddress());
+            name.append(getAddress().getHostAddress());
             name.append('-');
         }
         int port = getPort();
@@ -356,7 +356,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
         InetAddress address = getAddress();
         if (address != null) {
             name.append(",address=");
-            name.append(ObjectName.quote(address.toString()));
+            name.append(ObjectName.quote(address.getHostAddress()));
         }
         return new ObjectName(name.toString());
     }

==================================================
TomcatBaseTest.java
index f5ddaa47ef..f181ee57fb 100644
--- a/test/org/apache/catalina/mbeans/TestRegistration.java
+++ b/test/org/apache/catalina/mbeans/TestRegistration.java
@@ -17,6 +17,8 @@
 package org.apache.catalina.mbeans;
 
 import java.io.File;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -45,6 +47,19 @@ public class TestRegistration extends TomcatBaseTest {
 
     private static final String contextName = "/foo";
 
+    private static final String ADDRESS;
+
+    static {
+        String address;
+        try {
+            address = InetAddress.getByName("localhost").getHostAddress();
+        } catch (UnknownHostException e) {
+            address = "INIT_FAILED";
+        }
+        ADDRESS = address;
+    }
+
+
     private static String[] basicMBeanNames() {
         return new String[] {
             "Tomcat:type=Engine",
@@ -95,11 +110,14 @@ public class TestRegistration extends TomcatBaseTest {
 
     private static String[] connectorMBeanNames(String port, String type) {
         return new String[] {
-        "Tomcat:type=Connector,port=" + port,
-        "Tomcat:type=GlobalRequestProcessor,name=\"http-" + type + "-" + port + "\"",
-        "Tomcat:type=Mapper,port=" + port,
-        "Tomcat:type=ProtocolHandler,port=" + port,
-        "Tomcat:type=ThreadPool,name=\"http-" + type + "-" + port + "\"",
+        "Tomcat:type=Connector,port=" + port + ",address=" + ADDRESS,
+        "Tomcat:type=GlobalRequestProcessor,name=\"http-" + type + "-" +
+                ADDRESS + "-" + port + "\"",
+        "Tomcat:type=Mapper,port=" + port + ",address=" + ADDRESS,
+        "Tomcat:type=ProtocolHandler,port=" + port + ",address=\"" + ADDRESS +
+                "\"",
+        "Tomcat:type=ThreadPool,name=\"http-" + type + "-" + ADDRESS + "-" +
+                port + "\"",
         };
     }
 

==================================================
TestXxxEndpoint.java
index e9d209f013..2824c76006 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -23,6 +23,7 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.PrintWriter;
 import java.net.HttpURLConnection;
+import java.net.InetAddress;
 import java.net.URL;
 import java.util.List;
 import java.util.Map;
@@ -97,6 +98,9 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
 
         String protocol = getProtocol();
         Connector connector = new Connector(protocol);
+        // Listen only on localhost
+        connector.setAttribute("address",
+                InetAddress.getByName("localhost").getHostAddress());
         // Use random free port
         connector.setPort(0);
         // Mainly set to reduce timeouts during async tests

==================================================
