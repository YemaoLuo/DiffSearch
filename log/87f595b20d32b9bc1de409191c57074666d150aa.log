87f595b20d32b9bc1de409191c57074666d150aa
==================================================
Make FWD_SLASH_IS_SEPARATOR configurable per context
==================================================
Mark Emlyn
==================================================
Tue Sep 30 07:41:57 2014 +0000
==================================================
CookieSupport.java
Make FWD_SLASH_IS_SEPARATOR configurable per context

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1628366 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LegacyCookieProcessor.java
index ec32e7b2f5..3c2009c9bc 100644
--- a/java/org/apache/tomcat/util/http/CookieSupport.java
+++ b/java/org/apache/tomcat/util/http/CookieSupport.java
@@ -53,7 +53,10 @@ public final class CookieSupport {
      * If set to true, the <code>/</code> character will be treated as a
      * separator. Default is usually false. If STRICT_SERVLET_COMPLIANCE==true
      * then default is true. Explicitly setting always takes priority.
+     *
+     * @deprecated  Will be removed in Tomcat 9.
      */
+    @Deprecated
     public static final boolean FWD_SLASH_IS_SEPARATOR;
 
     /**
@@ -174,7 +177,10 @@ public final class CookieSupport {
      * spec, RFC2109.
      * @throws IllegalArgumentException if a control character was supplied as
      *         input
+     *
+     * @deprecated  Will be removed in Tomcat 9.
      */
+    @Deprecated
     public static final boolean isHttpSeparator(final char c) {
         if (c < 0x20 || c >= 0x7f) {
             if (c != 0x09) {

==================================================
TestCookieParsing.java
index 59fa9beebe..3f5235423b 100644
--- a/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
@@ -44,6 +44,11 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     private static final StringManager sm =
             StringManager.getManager("org.apache.tomcat.util.http");
 
+    // Excludes '/' since configuration controls whether or not to treat '/' as
+    // a separator
+    private static final char[] HTTP_SEPARATORS = new char[] {
+            '\t', ' ', '\"', '(', ')', ',', ':', ';', '<', '=', '>', '?', '@',
+            '[', '\\', ']', '{', '}' };
 
     @SuppressWarnings("deprecation") // Default to false when deprecated code is removed
     private boolean allowEqualsInValue = CookieSupport.ALLOW_EQUALS_IN_VALUE;
@@ -58,6 +63,20 @@ public final class LegacyCookieProcessor implements CookieProcessor {
                                      // when deprecated code is removed
     private boolean presserveCookieHeader = CookieSupport.PRESERVE_COOKIE_HEADER;
 
+    private boolean[] httpSeparatorFlags = new boolean[128];
+
+
+    public LegacyCookieProcessor() {
+        // Array elements will default to false
+        for (char c : HTTP_SEPARATORS) {
+            httpSeparatorFlags[c] = true;
+        }
+        @SuppressWarnings("deprecation") // Default to STRICT_SERVLET_COMPLIANCE
+                                         // when deprecated code is removed
+        boolean b = CookieSupport.FWD_SLASH_IS_SEPARATOR;
+        httpSeparatorFlags['/'] = b;
+    }
+
 
     public boolean getAllowEqualsInValue() {
         return allowEqualsInValue;
@@ -99,6 +118,16 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     }
 
 
+    public boolean getForwardSlashIsSeparator() {
+        return httpSeparatorFlags['/'];
+    }
+
+
+    public void setForwardSlashIsSeparator(boolean forwardSlashIsSeparator) {
+        httpSeparatorFlags['/'] = forwardSlashIsSeparator;
+    }
+
+
     @Override
     public Charset getCharset() {
         return StandardCharsets.ISO_8859_1;
@@ -175,7 +204,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
 
             // Skip whitespace and non-token characters (separators)
             while (pos < end &&
-                   (CookieSupport.isHttpSeparator((char) bytes[pos]) &&
+                   (httpSeparatorFlags[(char) bytes[pos]] &&
                            !getAllowHttpSepsInV0() ||
                     CookieSupport.isV0Separator((char) bytes[pos]) ||
                     isWhiteSpace(bytes[pos])))
@@ -244,7 +273,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
                     if (version == 0 &&
                                 !CookieSupport.isV0Separator((char)bytes[pos]) &&
                                 getAllowHttpSepsInV0() ||
-                            !CookieSupport.isHttpSeparator((char)bytes[pos]) ||
+                            !httpSeparatorFlags[(char)bytes[pos]] ||
                             bytes[pos] == '=') {
                         // Token
                         valueStart = pos;
@@ -411,7 +440,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
             int version, boolean isName){
         int pos = off;
         while (pos < end &&
-                (!CookieSupport.isHttpSeparator((char)bytes[pos]) ||
+                (!httpSeparatorFlags[(char)bytes[pos]] ||
                  version == 0 && getAllowHttpSepsInV0() && bytes[pos] != '=' &&
                         !CookieSupport.isV0Separator((char)bytes[pos]) ||
                  !isName && bytes[pos] == '=' && getAllowEqualsInValue())) {

==================================================
