2e47b58fb3667f56a5d7332ffb6fd3c7ce13b8a0
==================================================
Minor NIO refactoring to align with NIO2
==================================================
remm remm@apache.org
==================================================
Wed Oct 2 17:53:25 2019 +0200
==================================================
NioChannel.java
Minor NIO refactoring to align with NIO2

NIO2 uses the reset() method instead of setter in a weird order, this
looks better to me.


==================================================
NioEndpoint.java
index 9f39afb363..75bc3f83ba 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -44,23 +44,21 @@ public class NioChannel implements ByteChannel, ScatteringByteChannel, Gathering
     protected SocketChannel sc = null;
     protected NioSocketWrapper socketWrapper = null;
 
-    public NioChannel(SocketChannel channel, SocketBufferHandler bufHandler) {
-        this.sc = channel;
+    public NioChannel(SocketBufferHandler bufHandler) {
         this.bufHandler = bufHandler;
     }
 
     /**
      * Reset the channel
      *
+     * @param channel the socket channel
+     * @param socketWrapper the socket wrapper
      * @throws IOException If a problem was encountered resetting the channel
      */
-    public void reset() throws IOException {
-        bufHandler.reset();
-    }
-
-
-    void setSocketWrapper(NioSocketWrapper socketWrapper) {
+    public void reset(SocketChannel channel, NioSocketWrapper socketWrapper) throws IOException {
+        this.sc = channel;
         this.socketWrapper = socketWrapper;
+        bufHandler.reset();
     }
 
     /**
@@ -205,10 +203,6 @@ public class NioChannel implements ByteChannel, ScatteringByteChannel, Gathering
         return 0;
     }
 
-    public void setIOChannel(SocketChannel sc) {
-        this.sc = sc;
-    }
-
     @Override
     public String toString() {
         return super.toString() + ":" + sc.toString();
@@ -257,7 +251,7 @@ public class NioChannel implements ByteChannel, ScatteringByteChannel, Gathering
     static final NioChannel CLOSED_NIO_CHANNEL = new ClosedNioChannel();
     public static class ClosedNioChannel extends NioChannel {
         public ClosedNioChannel() {
-            super(null, SocketBufferHandler.EMPTY);
+            super(SocketBufferHandler.EMPTY);
         }
         @Override
         public void close() throws IOException {
@@ -267,18 +261,12 @@ public class NioChannel implements ByteChannel, ScatteringByteChannel, Gathering
             return false;
         }
         @Override
-        public void reset() throws IOException {
+        public void reset(SocketChannel channel, NioSocketWrapper socketWrapper) throws IOException {
         }
         @Override
         public void free() {
         }
         @Override
-        void setSocketWrapper(NioSocketWrapper socketWrapper) {
-        }
-        @Override
-        public void setIOChannel(SocketChannel sc) {
-        }
-        @Override
         public void setAppReadBufHandler(ApplicationBufferHandler handler) {
         }
         @Override

==================================================
SecureNioChannel.java
index 78a74f002f..99d8896c77 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -412,14 +412,12 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
                 if (isSSLEnabled()) {
                     channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);
                 } else {
-                    channel = new NioChannel(socket, bufhandler);
+                    channel = new NioChannel(bufhandler);
                 }
             } else {
-                channel.setIOChannel(socket);
-                channel.reset();
             }
             NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);
-            channel.setSocketWrapper(socketWrapper);
+            channel.reset(socket, socketWrapper);
             socketWrapper.setReadTimeout(getConnectionTimeout());
             socketWrapper.setWriteTimeout(getConnectionTimeout());
             socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());

==================================================
