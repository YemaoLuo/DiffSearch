7fcc595299605846e8de391f0eb31ad13c9569ad
==================================================
Move trustMaxCertLength/SSLVerifyDepth to SSLHostConfig
==================================================
Mark Thomas
==================================================
Thu Apr 30 21:14:35 2015 +0000
==================================================
AbstractHttp11JsseProtocol.java
Move trustMaxCertLength/SSLVerifyDepth to SSLHostConfig

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1677075 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index aecd233441..a2f5d93066 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -73,13 +73,6 @@ public abstract class AbstractHttp11JsseProtocol<S>
         return getEndpoint().getTruststoreAlgorithm();
     }
 
-    public void setTrustMaxCertLength(String s){
-        getEndpoint().setTrustMaxCertLength(s);
-    }
-    public String getTrustMaxCertLength(){
-        return getEndpoint().getTrustMaxCertLength();
-    }
-
     public void setCrlFile(String s){getEndpoint().setCrlFile(s);}
     public String getCrlFile(){ return getEndpoint().getCrlFile();}
 

==================================================
Http11AprProtocol.java
index 43fdf5cbb4..1687d70664 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -397,6 +397,15 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         defaultSSLHostConfig.setCertificateVerification(certificateVerification);
     }
 
+    public void setTrustMaxCertLength(int certificateVerificationDepth){
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateVerificationDepth(certificateVerificationDepth);
+    }
+    public void setSSLVerifyDepth(int certificateVerificationDepth) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateVerificationDepth(certificateVerificationDepth);
+    }
+
 
     // ------------------------------------------------------------- Common code
 

==================================================
AbstractEndpoint.java
index fe740167c7..c21ea55a0d 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -132,12 +132,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     public void setSSLCARevocationFile(String SSLCARevocationFile) { ((AprEndpoint)getEndpoint()).setSSLCARevocationFile(SSLCARevocationFile); }
 
 
-    /**
-     * SSL verify depth.
-     */
-    public int getSSLVerifyDepth() { return ((AprEndpoint)getEndpoint()).getSSLVerifyDepth(); }
-    public void setSSLVerifyDepth(int SSLVerifyDepth) { ((AprEndpoint)getEndpoint()).setSSLVerifyDepth(SSLVerifyDepth); }
-
     /**
      * Disable SSL compression.
      */

==================================================
AprEndpoint.java
index b64c5b5f19..24a8911021 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -1063,12 +1063,6 @@ public abstract class AbstractEndpoint<S> {
         this.crlFile = crlFile;
     }
 
-    private String trustMaxCertLength = null;
-    public String getTrustMaxCertLength() {return trustMaxCertLength;}
-    public void setTrustMaxCertLength(String trustMaxCertLength) {
-        this.trustMaxCertLength = trustMaxCertLength;
-    }
-
     private String sessionCacheSize = null;
     public String getSessionCacheSize() { return sessionCacheSize;}
     public void setSessionCacheSize(String s) { sessionCacheSize = s;}

==================================================
SSLHostConfig.java
index e8628f9845..1a7fcbe6e0 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -271,14 +271,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
     public boolean getSSLDisableSessionTickets() { return SSLDisableSessionTickets; }
     public void setSSLDisableSessionTickets(boolean SSLDisableSessionTickets) { this.SSLDisableSessionTickets = SSLDisableSessionTickets; }
 
-    /**
-     * SSL verify depth.
-     */
-    protected int SSLVerifyDepth = 10;
-    public int getSSLVerifyDepth() { return SSLVerifyDepth; }
-    public void setSSLVerifyDepth(int SSLVerifyDepth) { this.SSLVerifyDepth = SSLVerifyDepth; }
-
-
     /**
      * SSL allow insecure renegotiation for the the client that does not
      * support the secure renegotiation.
@@ -617,7 +609,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                     value = SSL.SSL_CVERIFY_REQUIRE;
                     break;
                 }
-                SSLContext.setVerify(ctx, value, SSLVerifyDepth);
+                SSLContext.setVerify(ctx, value, sslHostConfig.getCertificateVerificationDepth());
                 // For now, sendfile is not supported with SSL
                 if (getUseSendfile()) {
                     setUseSendfileInternal(false);
@@ -2918,8 +2910,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
         public void doClientAuth(SSLSupport sslSupport) {
             long socket = getSocket().longValue();
             // Configure connection to require a certificate
-            SSLSocket.setVerify(socket, SSL.SSL_CVERIFY_REQUIRE,
-                    ((AprEndpoint)getEndpoint()).getSSLVerifyDepth());
+            SSLSocket.setVerify(socket, SSL.SSL_CVERIFY_REQUIRE, -1);
             SSLSocket.renegotiate(socket);
         }
 

==================================================
JSSESocketFactory.java
index 2c60f73197..1865ce62eb 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -45,6 +45,7 @@ public class SSLHostConfig {
 
     // Common
     private CertificateVerification certificateVerification = CertificateVerification.NONE;
+    private int certificateVerificationDepth = 10;
 
     private Set<String> protocols = new HashSet<>();
     // JSSE
@@ -111,6 +112,16 @@ public class SSLHostConfig {
     }
 
 
+    public void setCertificateVerificationDepth(int certificateVerificationDepth) {
+        this.certificateVerificationDepth = certificateVerificationDepth;
+    }
+
+
+    public int getCertificateVerificationDepth() {
+        return certificateVerificationDepth;
+    }
+
+
     public void setHostName(String hostName) {
         this.hostName = hostName;
     }

==================================================
