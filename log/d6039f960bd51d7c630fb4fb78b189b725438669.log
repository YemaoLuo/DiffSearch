d6039f960bd51d7c630fb4fb78b189b725438669
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51376
==================================================
Mark Emlyn
==================================================
Wed Jun 15 20:32:14 2011 +0000
==================================================
StandardWrapper.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51376
Complete fix. Ensure Servlet.destroy() is only called if Servlet.init() was called.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1136179 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestStandardContext.java
index 07b6c6078e..e30149fd5f 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -1375,53 +1375,55 @@ public class StandardWrapper extends ContainerBase
             }
         }
 
-        PrintStream out = System.out;
-        if (swallowOutput) {
-            SystemLogHandler.startCapture();
-        }
-
-        // Call the servlet destroy() method
-        try {
-            instanceSupport.fireInstanceEvent
-              (InstanceEvent.BEFORE_DESTROY_EVENT, instance);
-
-            if( Globals.IS_SECURITY_ENABLED) {
-                SecurityUtil.doAsPrivilege("destroy",
-                                           instance);
-                SecurityUtil.remove(instance);                           
-            } else {
-                instance.destroy();
-            }
-            
-            instanceSupport.fireInstanceEvent
-              (InstanceEvent.AFTER_DESTROY_EVENT, instance);
-
-            // Annotation processing
-            if (!((Context) getParent()).getIgnoreAnnotations()) {
-               ((StandardContext)getParent()).getInstanceManager().destroyInstance(instance);
-            }
-
-        } catch (Throwable t) {
-            ExceptionUtils.handleThrowable(t);
-            instanceSupport.fireInstanceEvent
-              (InstanceEvent.AFTER_DESTROY_EVENT, instance, t);
-            instance = null;
-            instancePool = null;
-            nInstances = 0;
-            fireContainerEvent("unload", this);
-            unloading = false;
-            throw new ServletException
-                (sm.getString("standardWrapper.destroyException", getName()),
-                 t);
-        } finally {
-            // Write captured output
+        if (instanceInitialized) {
+            PrintStream out = System.out;
             if (swallowOutput) {
-                String log = SystemLogHandler.stopCapture();
-                if (log != null && log.length() > 0) {
-                    if (getServletContext() != null) {
-                        getServletContext().log(log);
-                    } else {
-                        out.println(log);
+                SystemLogHandler.startCapture();
+            }
+    
+            // Call the servlet destroy() method
+            try {
+                instanceSupport.fireInstanceEvent
+                  (InstanceEvent.BEFORE_DESTROY_EVENT, instance);
+    
+                if( Globals.IS_SECURITY_ENABLED) {
+                    SecurityUtil.doAsPrivilege("destroy",
+                                               instance);
+                    SecurityUtil.remove(instance);                           
+                } else {
+                    instance.destroy();
+                }
+                
+                instanceSupport.fireInstanceEvent
+                  (InstanceEvent.AFTER_DESTROY_EVENT, instance);
+    
+                // Annotation processing
+                if (!((Context) getParent()).getIgnoreAnnotations()) {
+                   ((StandardContext)getParent()).getInstanceManager().destroyInstance(instance);
+                }
+    
+            } catch (Throwable t) {
+                ExceptionUtils.handleThrowable(t);
+                instanceSupport.fireInstanceEvent
+                  (InstanceEvent.AFTER_DESTROY_EVENT, instance, t);
+                instance = null;
+                instancePool = null;
+                nInstances = 0;
+                fireContainerEvent("unload", this);
+                unloading = false;
+                throw new ServletException
+                    (sm.getString("standardWrapper.destroyException", getName()),
+                     t);
+            } finally {
+                // Write captured output
+                if (swallowOutput) {
+                    String log = SystemLogHandler.stopCapture();
+                    if (log != null && log.length() > 0) {
+                        if (getServletContext() != null) {
+                            getServletContext().log(log);
+                        } else {
+                            out.println(log);
+                        }
                     }
                 }
             }

==================================================
