843711af6c794052ee17c6b5c9da365c3f53aa8f
==================================================
Fill in the gaps in the Javadoc
==================================================
Mark Thomas
==================================================
Tue Jun 19 10:12:19 2018 +0000
==================================================
BasicDataSource.java
Fill in the gaps in the Javadoc

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1833800 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PoolingConnection.java
index 165a1ca37f..82bd55ceec 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -2040,6 +2040,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * Creates (if necessary) and return the internal data source we are using to manage our connections.
      * </p>
      *
+     * @return The current internal DataSource or a newly created instance if it has not yet been created.
      * @throws SQLException
      *             if the object pool cannot be created.
      */
@@ -2134,6 +2135,11 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * <li>If a driver still isn't loaded one is loaded via the {@link DriverManager} using the specified {@link #url}.
      * </ol>
      * This method exists so subclasses can replace the implementation class.
+     *
+     * @return A new connection factory.
+     *
+     * @throws SQLException
+     *            If the connection factort cannot be created
      */
     protected ConnectionFactory createConnectionFactory() throws SQLException {
         // Load the JDBC driver class
@@ -2209,6 +2215,9 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * property is deferred to {@link #startPoolMaintenance()}, since setting timeBetweenEvictionRunsMillis to a
      * positive value causes {@link GenericObjectPool}'s eviction timer to be started.
      * </p>
+     *
+     * @param factory
+     *            The factory to use to create new connections for this pool.
      */
     protected void createConnectionPool(final PoolableConnectionFactory factory) {
         // Create an object pool to contain our active connections
@@ -2288,6 +2297,8 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @throws SQLException
      *             if unable to create a datasource instance
+     *
+     * @return A new DataSource instance
      */
     protected DataSource createDataSourceInstance() throws SQLException {
         final PoolingDataSource<PoolableConnection> pds = new PoolingDataSource<>(connectionPool);
@@ -2303,6 +2314,8 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *            JDBC connection factory
      * @throws SQLException
      *             if an error occurs creating the PoolableConnectionFactory
+     *
+     * @return A new PoolableConnectionFactory configured with the current configuration of this BasicDataSource
      */
     protected PoolableConnectionFactory createPoolableConnectionFactory(final ConnectionFactory driverConnectionFactory)
             throws SQLException {

==================================================
PoolingDriver.java
index 5f9620c83c..494835e1ee 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
@@ -121,6 +121,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *
      * @param sql
      *            the SQL string used to define the statement
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql) {
         String catalog = null;
@@ -149,6 +151,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            the SQL string used to define the statement
      * @param columnIndexes
      *            column indexes
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final int columnIndexes[]) {
         String catalog = null;
@@ -169,6 +173,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            result set type
      * @param resultSetConcurrency
      *            result set concurrency
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency) {
         String catalog = null;
@@ -191,6 +197,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            result set concurrency
      * @param resultSetHoldability
      *            result set holdability
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency,
             final int resultSetHoldability) {
@@ -216,6 +224,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            result set holdability
      * @param stmtType
      *            statement type
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency,
             final int resultSetHoldability, final StatementType stmtType) {
@@ -240,6 +250,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            result set concurrency
      * @param stmtType
      *            statement type
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency,
             final StatementType stmtType) {
@@ -259,6 +271,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            the SQL string used to define the statement
      * @param stmtType
      *            statement type
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final StatementType stmtType) {
         String catalog = null;
@@ -277,6 +291,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      *            the SQL string used to define the statement
      * @param columnNames
      *            column names
+     *
+     * @return the PStmtKey created for the given arguments.
      */
     protected PStmtKey createKey(final String sql, final String columnNames[]) {
         String catalog = null;
@@ -331,6 +347,10 @@ public class PoolingConnection extends DelegatingConnection<Connection>
 
     /**
      * Normalizes the given SQL statement, producing a canonical form that is semantically equivalent to the original.
+     *
+     * @param sql The statement to be normalized.
+     *
+     * @return The canonical form of the supplied SQL statement.
      */
     protected String normalizeSQL(final String sql) {
         return sql.trim();

==================================================
InstanceKeyDataSourceFactory.java
index 4c5b495628..9cbed71a33 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingDriver.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingDriver.java
@@ -61,6 +61,9 @@ public class PoolingDriver implements Driver {
 
     /**
      * For unit testing purposes.
+     *
+     * @param accessToUnderlyingConnectionAllowed
+     *            Do {@link DelegatingConnection}s created by this driver permit access to the delegate?
      */
     protected PoolingDriver(final boolean accessToUnderlyingConnectionAllowed) {
         this.accessToUnderlyingConnectionAllowed = accessToUnderlyingConnectionAllowed;

==================================================
