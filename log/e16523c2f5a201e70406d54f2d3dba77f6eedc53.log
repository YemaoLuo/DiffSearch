e16523c2f5a201e70406d54f2d3dba77f6eedc53
==================================================
Just like filters, valves will have to be async aware in order for it to work properly. 
==================================================
Filip Hanik
==================================================
Fri Oct 9 21:52:36 2009 +0000
==================================================
Pipeline.java
Just like filters, valves will have to be async aware in order for it to work properly. 


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@823710 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Valve.java
index beb8fed51e..d457115d5d 100644
--- a/java/org/apache/catalina/Pipeline.java
+++ b/java/org/apache/catalina/Pipeline.java
@@ -116,6 +116,12 @@ public interface Pipeline {
      * Valve for this Pipeline (if any).
      */
     public Valve getFirst();
+    
+    /**
+     * Returns true if all the valves in this pipeline support async, false otherwise
+     * @return true if all the valves in this pipeline support async, false otherwise
+     */
+    public boolean isAsyncSupported();
 
 
 }

==================================================
CoyoteAdapter.java
index 858812dbe9..414317032c 100644
--- a/java/org/apache/catalina/Valve.java
+++ b/java/org/apache/catalina/Valve.java
@@ -144,5 +144,8 @@ public interface Valve {
     public void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException;
 
+    
+    public boolean isAsyncSupported();
+    
 
 }

==================================================
ContainerBase.java
index 563aebb02f..07139f9df7 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -373,6 +373,8 @@ public class CoyoteAdapter
             // request parameters
             req.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());
             if (postParseRequest(req, request, res, response)) {
+                //check valves if we support async
+                request.setAsyncSupported(connector.getContainer().getPipeline().isAsyncSupported());
                 // Calling the container
                 connector.getContainer().getPipeline().getFirst().invoke(request, response);
 

==================================================
StandardContextValve.java
index 5389ed5612..4bdf41f681 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -1617,4 +1617,12 @@ public abstract class ContainerBase
     }
 
 
+    @Override
+    public boolean isAsyncSupported() {
+        return pipeline.isAsyncSupported();
+    }
+    
+    
+
+
 }

==================================================
StandardEngineValve.java
index 2d7eeced0d..e6be2d8de6 100644
--- a/java/org/apache/catalina/core/StandardContextValve.java
+++ b/java/org/apache/catalina/core/StandardContextValve.java
@@ -187,7 +187,9 @@ final class StandardContextValve
                 }
             }
         }
-
+        if (request.isAsyncSupported()) {
+            request.setAsyncSupported(wrapper.getPipeline().isAsyncSupported());
+        }
         wrapper.getPipeline().getFirst().invoke(request, response);
 
         if ((instances !=null ) &&

==================================================
StandardHostValve.java
index f621575364..b48d5f2158 100644
--- a/java/org/apache/catalina/core/StandardEngineValve.java
+++ b/java/org/apache/catalina/core/StandardEngineValve.java
@@ -104,6 +104,9 @@ final class StandardEngineValve
                               request.getServerName()));
             return;
         }
+        if (request.isAsyncSupported()) {
+            request.setAsyncSupported(host.getPipeline().isAsyncSupported());
+        }
 
         // Ask this Host to process this request
         host.getPipeline().getFirst().invoke(request, response);

==================================================
StandardPipeline.java
index b4ac6eda39..32354ad112 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -123,6 +123,10 @@ final class StandardHostValve
             Thread.currentThread().setContextClassLoader
                     (context.getLoader().getClassLoader());
         }
+        if (request.isAsyncSupported()) {
+            request.setAsyncSupported(context.getPipeline().isAsyncSupported());
+        }
+
 
         // Ask this Context to process this request
         context.getPipeline().getFirst().invoke(request, response);

==================================================
StandardWrapperValve.java
index 5fc3874fd3..bd48c87d4a 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -128,8 +128,7 @@ public class StandardPipeline
      * The first valve associated with this Pipeline.
      */
     protected Valve first = null;
-
-
+    
     // --------------------------------------------------------- Public Methods
 
 
@@ -141,6 +140,16 @@ public class StandardPipeline
         return (this.info);
 
     }
+    
+    public boolean isAsyncSupported() {
+        Valve valve = (first!=null)?first:basic;
+        boolean supported = true;
+        while (supported && valve!=null) {
+            supported = supported & valve.isAsyncSupported();
+            valve = valve.getNext();
+        }
+        return supported; 
+    }
 
 
     // ------------------------------------------------------ Contained Methods
@@ -559,6 +568,4 @@ public class StandardPipeline
             return basic;
         }
     }
-
-
 }

==================================================
ValveBase.java
index d9dbc1bcfd..3f8a2761f1 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -199,7 +199,7 @@ final class StandardWrapperValve
         // Reset comet flag value after creating the filter chain
         request.setComet(false);
         //check filters to see if we support async or not.
-        if (filterChain != null) {
+        if (filterChain != null && request.isAsyncSupported()) {
             request.setAsyncSupported(filterChain.isAsyncSupported());
         }
 

==================================================
