5f4d5b357f4388149845fa96d87930d6f664e252
==================================================
Better cleanup in setSocketOptions
==================================================
remm remm@apache.org
==================================================
Thu Nov 7 11:10:41 2019 +0100
==================================================
Nio2Endpoint.java
Better cleanup in setSocketOptions

Since the connections map is updated here, the socket must be removed
from it if things go wrong before the wrapper processing begins. Also
call free() on the channel (and then discard it) since this wouldn't be
done anywhere and could leak direct memory in some cases.


==================================================
NioEndpoint.java
index 6ecba6a6df..5879fa9c3d 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -302,9 +302,10 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
      */
     @Override
     protected boolean setSocketOptions(AsynchronousSocketChannel socket) {
+        Nio2Channel channel = null;
+        boolean success = false;
         try {
             socketProperties.setProperties(socket);
-            Nio2Channel channel = null;
             if (nioChannels != null) {
                 channel = nioChannels.pop();
             }
@@ -326,14 +327,19 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
             socketWrapper.setWriteTimeout(getConnectionTimeout());
             socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());
             socketWrapper.setSecure(isSSLEnabled());
-            // Continue processing on another thread
-            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);
+            // Continue processing on the same thread as the acceptor is async
+            success = processSocket(socketWrapper, SocketEvent.OPEN_READ, false);
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error(sm.getString("endpoint.socketOptionsError"),t);
+            log.error(sm.getString("endpoint.socketOptionsError"), t);
+        } finally {
+            if (!success && channel != null) {
+                connections.remove(channel);
+                channel.free();
+            }
         }
-        // Tell to close the socket
-        return false;
+        // Tell to close the socket if needed
+        return success;
     }
 
 

==================================================
