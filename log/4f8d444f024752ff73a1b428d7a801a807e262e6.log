4f8d444f024752ff73a1b428d7a801a807e262e6
==================================================
Code clean-up. Remove unnecessary ;'s id'd by Eclipse
==================================================
Mark Emlyn
==================================================
Thu Jan 15 13:31:05 2009 +0000
==================================================
Catalina.java
Code clean-up. Remove unnecessary ;'s id'd by Eclipse

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@734700 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ExpandWar.java
index df58ebad86..4c66f9b822 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -480,7 +480,7 @@ public class Catalina extends Embedded {
             inputStream = new FileInputStream(file);
             inputSource = new InputSource("file://" + file.getAbsolutePath());
         } catch (Exception e) {
-            ;
+            // Ignore
         }
         if (inputStream == null) {
             try {
@@ -490,7 +490,7 @@ public class Catalina extends Embedded {
                     (getClass().getClassLoader()
                      .getResource(getConfigFile()).toString());
             } catch (Exception e) {
-                ;
+                // Ignore
             }
         }
 
@@ -504,7 +504,7 @@ public class Catalina extends Embedded {
                 (getClass().getClassLoader()
                         .getResource("server-embed.xml").toString());
             } catch (Exception e) {
-                ;
+                // Ignore
             }
         }
         

==================================================
PasswdUserDatabase.java
index 9233970b17..068f72f1e6 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -174,7 +174,7 @@ public class ExpandWar {
                 try {
                     input.close();
                 } catch (Throwable t) {
-                    ;
+                    // Ignore
                 }
                 input = null;
             }
@@ -182,7 +182,7 @@ public class ExpandWar {
                 try {
                     jarFile.close();
                 } catch (Throwable t) {
-                    ;
+                    // Ignore
                 }
                 jarFile = null;
             }

==================================================
TldConfig.java
index a99227ed89..3c24b3374a 100644
--- a/java/org/apache/catalina/startup/PasswdUserDatabase.java
+++ b/java/org/apache/catalina/startup/PasswdUserDatabase.java
@@ -182,7 +182,7 @@ public final class PasswdUserDatabase
                 try {
                     reader.close();
                 } catch (IOException f) {
-                    ;
+                    // Ignore
                 }
                 reader = null;
             }

==================================================
ErrorReportValve.java
index 32ce34eea9..cb68589d0b 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -626,7 +626,7 @@ public final class TldConfig  implements LifecycleListener {
                 }
             }
         } catch (NamingException e) {
-            ; // Silent catch: it's valid that no /WEB-INF directory exists
+            // Silent catch: it's valid that no /WEB-INF directory exists
         }
     }
 

==================================================
Digester.java
index 4b140d7444..c4d762dd25 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -117,7 +117,7 @@ public class ErrorReportValve
             try {
                 response.reset();
             } catch (IllegalStateException e) {
-                ;
+                // Ignore
             }
 
             response.sendError
@@ -130,7 +130,7 @@ public class ErrorReportValve
         try {
             report(request, response, throwable);
         } catch (Throwable tt) {
-            ;
+            // Ignore
         }
 
     }
@@ -167,7 +167,7 @@ public class ErrorReportValve
         try {
             report = sm.getString("http." + statusCode, message);
         } catch (Throwable t) {
-            ;
+            // Ignore
         }
         if (report == null)
             return;
@@ -254,9 +254,9 @@ public class ErrorReportValve
                 writer.write(sb.toString());
             }
         } catch (IOException e) {
-            ;
+            // Ignore
         } catch (IllegalStateException e) {
-            ;
+            // Ignore
         }
         
     }

==================================================
Rule.java
index 6c7b4e4fd1..36d464af75 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -1153,7 +1153,7 @@ public class Digester extends DefaultHandler {
                     new String(buffer, start, len) + ")");
         }
 
-        ;   // No processing required
+        // No processing required
 
     }
 
@@ -1173,7 +1173,7 @@ public class Digester extends DefaultHandler {
             saxLog.debug("processingInstruction('" + target + "','" + data + "')");
         }
 
-        ;   // No processing is required
+        // No processing is required
 
     }
 
@@ -1218,7 +1218,7 @@ public class Digester extends DefaultHandler {
             saxLog.debug("skippedEntity(" + name + ")");
         }
 
-        ; // No processing required
+        // No processing required
 
     }
 
@@ -2590,7 +2590,7 @@ public class Digester extends DefaultHandler {
     protected void initialize() {
 
         // Perform lazy initialization as needed
-        ; // Nothing required by default
+        // Nothing required by default
 
     }    
 

==================================================
Cookies.java
index 8583e67acf..8070ea3465 100644
--- a/java/org/apache/tomcat/util/digester/Rule.java
+++ b/java/org/apache/tomcat/util/digester/Rule.java
@@ -113,9 +113,7 @@ public abstract class Rule {
      *   parameters instead.
      */
     public void begin(Attributes attributes) throws Exception {
-
-        ;	// The default implementation does nothing
-
+        // The default implementation does nothing
     }
 
 
@@ -153,9 +151,7 @@ public abstract class Rule {
      *   instead.
      */
     public void body(String text) throws Exception {
-
-        ;	// The default implementation does nothing
-
+        // The default implementation does nothing
     }
 
 
@@ -190,9 +186,7 @@ public abstract class Rule {
      *   <code>namespace</code> and <code>name</code> parameters instead.
      */
     public void end() throws Exception {
-
-        ;	// The default implementation does nothing
-
+        // The default implementation does nothing
     }
 
 
@@ -223,9 +217,7 @@ public abstract class Rule {
      * called, to allow Rules to remove temporary data.
      */
     public void finish() throws Exception {
-
-        ;	// The default implementation does nothing
-
+        // The default implementation does nothing
     }
 
 

==================================================
FastHttpDateFormat.java
index 2739d2de44..dba47c8242 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -370,7 +370,7 @@ public final class Cookies { // extends MultiMap {
             pos = nameEnd = getTokenEndPosition(bytes,pos,end);
 
             // Skip whitespace
-            while (pos < end && isWhiteSpace(bytes[pos])) {pos++; }; 
+            while (pos < end && isWhiteSpace(bytes[pos])) {pos++; } 
          
 
             // Check for an '=' -- This could also be a name-only
@@ -390,7 +390,7 @@ public final class Cookies { // extends MultiMap {
                 // Determine what type of value this is, quoted value,
                 // token, name-only with an '=', or other (bad)
                 switch (bytes[pos]) {
-                case '"':; // Quoted Value
+                case '"': // Quoted Value
                     isQuoted = true;
                     valueStart=pos + 1; // strip "
                     // getQuotedValue returns the position before 
@@ -413,7 +413,7 @@ public final class Cookies { // extends MultiMap {
                     valueStart = valueEnd = -1;
                     // The position is OK (On a delimiter)
                     break;
-                default:;
+                default:
                     if (!isSeparator(bytes[pos])) {
                         // Token
                         valueStart=pos;
@@ -429,7 +429,7 @@ public final class Cookies { // extends MultiMap {
                         log("Invalid cookie. Value not a token or quoted value");
                         while (pos < end && bytes[pos] != ';' && 
                                bytes[pos] != ',') 
-                            {pos++; };
+                            {pos++; }
                         pos++;
                         // Make sure no special avpairs can be attributed to 
                         // the previous cookie by setting the current cookie
@@ -450,7 +450,7 @@ public final class Cookies { // extends MultiMap {
             // in a good state.
   
             // Skip whitespace
-            while (pos < end && isWhiteSpace(bytes[pos])) {pos++; }; 
+            while (pos < end && isWhiteSpace(bytes[pos])) {pos++; }
 
 
             // Make sure that after the cookie we have a separator. This
@@ -557,7 +557,7 @@ public final class Cookies { // extends MultiMap {
      */
     public static final int getTokenEndPosition(byte bytes[], int off, int end){
         int pos = off;
-        while (pos < end && !isSeparator(bytes[pos])) {pos++; };
+        while (pos < end && !isSeparator(bytes[pos])) {pos++; }
         
         if (pos > end)
             return end;

==================================================
BaseModelMBean.java
index 8fd124c964..ccd38aed63 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -190,7 +190,7 @@ public final class FastHttpDateFormat {
             try {
                 date = formats[i].parse(value);
             } catch (ParseException e) {
-                ;
+                // Ignore
             }
         }
         if (date == null) {

==================================================
ManagedBean.java
index e4192a007d..d986edac15 100644
--- a/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
+++ b/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
@@ -231,8 +231,8 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
             try {
                 response.add(new Attribute(names[i],getAttribute(names[i])));
             } catch (Exception e) {
-                ; // Not having a particular attribute in the response
-                ; // is the indication of a getter problem
+                // Not having a particular attribute in the response
+                // is the indication of a getter problem
             }
         }
         return (response);
@@ -474,7 +474,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
             try {
                 setAttribute(item);
             } catch (Exception e) {
-                ; // Ignore all exceptions
+                // Ignore all exceptions
             }
         }
 

==================================================
DefaultServerSocketFactory.java
index 05d3090b6f..9ea285cde0 100644
--- a/java/org/apache/tomcat/util/modeler/ManagedBean.java
+++ b/java/org/apache/tomcat/util/modeler/ManagedBean.java
@@ -501,7 +501,7 @@ public class ManagedBean implements java.io.Serializable
                 object = mbean;
                 m = object.getClass().getMethod(getMethod, NO_ARGS_PARAM_SIG);
             } catch (NoSuchMethodException e) {
-                exception = e;;
+                exception = e;
             }
             if( m== null && resource != null ) {
                 try {
@@ -548,7 +548,7 @@ public class ManagedBean implements java.io.Serializable
                 object = bean;
                 m = object.getClass().getMethod(setMethod, signature);
             } catch (NoSuchMethodException e) {
-                exception = e;;
+                exception = e;
             }
             if( m== null && resource != null ) {
                 try {
@@ -608,7 +608,6 @@ public class ManagedBean implements java.io.Serializable
                 method = object.getClass().getMethod(aname, types);
             } catch (NoSuchMethodException e) {
                 exception = e;
-                ;
             }
             try {
                 if ((method == null) && (resource != null)) {

==================================================
NioBlockingSelector.java
index 38b606d1fa..c122990d36 100644
--- a/java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java
+++ b/java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java
@@ -63,7 +63,7 @@ class DefaultServerSocketFactory extends ServerSocketFactory {
  
     public void handshake(Socket sock)
  	throws IOException {
- 	; // NOOP
+        // NOOP
     }
  	    
         

==================================================
