b9fd6faad40d58043ac27a0182a0cd36a3e84b6d
==================================================
Add a unit test for a simple request with a body
==================================================
Mark Thomas
==================================================
Wed Jun 17 14:45:36 2015 +0000
==================================================
Http2TestBase.java
Add a unit test for a simple request with a body

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1686028 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHttp2Section_4_1.java
index 1f1694c10f..147fd48636 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -16,6 +16,8 @@
  */
 package org.apache.coyote.http2;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -37,6 +39,7 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.util.IOTools;
 import org.apache.coyote.http2.HpackDecoder.HeaderEmitter;
 import org.apache.coyote.http2.Http2Parser.Input;
 import org.apache.coyote.http2.Http2Parser.Output;
@@ -105,35 +108,35 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void sendSimpleRequest(int streamId) throws IOException {
+    protected void sendSimpleGetRequest(int streamId) throws IOException {
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
 
-        buildSimpleRequest(frameHeader, headersPayload, streamId);
+        buildSimpleGetRequest(frameHeader, headersPayload, streamId);
         writeFrame(frameHeader, headersPayload);
     }
 
 
-    protected void sendLargeRequest(int streamId) throws IOException {
+    protected void sendLargeGetRequest(int streamId) throws IOException {
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
 
-        buildLargeRequest(frameHeader, headersPayload, streamId);
+        buildLargeGetRequest(frameHeader, headersPayload, streamId);
         writeFrame(frameHeader, headersPayload);
     }
 
 
-    protected void buildSimpleRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
-        buildRequest(frameHeader, headersPayload, streamId, "/simple");
+    protected void buildSimpleGetRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
+        buildGetRequest(frameHeader, headersPayload, streamId, "/simple");
     }
 
 
-    protected void buildLargeRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
-        buildRequest(frameHeader, headersPayload, streamId, "/large");
+    protected void buildLargeGetRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
+        buildGetRequest(frameHeader, headersPayload, streamId, "/large");
     }
 
 
-    protected void buildRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId,
+    protected void buildGetRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId,
             String url) {
         MimeHeaders headers = new MimeHeaders();
         headers.addValue(":method").setString("GET");
@@ -153,7 +156,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void buildSimpleRequestPart1(byte[] frameHeader, ByteBuffer headersPayload,
+    protected void buildSimpleGetRequestPart1(byte[] frameHeader, ByteBuffer headersPayload,
             int streamId) {
         MimeHeaders headers = new MimeHeaders();
         headers.addValue(":method").setString("GET");
@@ -172,7 +175,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void buildSimpleRequestPart2(byte[] frameHeader, ByteBuffer headersPayload,
+    protected void buildSimpleGetRequestPart2(byte[] frameHeader, ByteBuffer headersPayload,
             int streamId) {
         MimeHeaders headers = new MimeHeaders();
         headers.addValue(":authority").setString("localhost:" + getPort());
@@ -190,6 +193,51 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    protected void sendSimplePostRequest(int streamId) throws IOException {
+        byte[] headersFrameHeader = new byte[9];
+        ByteBuffer headersPayload = ByteBuffer.allocate(128);
+        byte[] dataFrameHeader = new byte[9];
+        ByteBuffer dataPayload = ByteBuffer.allocate(128);
+
+        buildPostRequest(headersFrameHeader, headersPayload,
+                dataFrameHeader, dataPayload, streamId);
+        writeFrame(headersFrameHeader, headersPayload);
+        writeFrame(dataFrameHeader, dataPayload);
+    }
+
+
+    protected void buildPostRequest(byte[] headersFrameHeader, ByteBuffer headersPayload,
+            byte[] dataFrameHeader, ByteBuffer dataPayload, int streamId) {
+        MimeHeaders headers = new MimeHeaders();
+        headers.addValue(":method").setString("POST");
+        headers.addValue(":path").setString("/simple");
+        headers.addValue(":authority").setString("localhost:" + getPort());
+        hpackEncoder.encode(headers, headersPayload);
+
+        headersPayload.flip();
+
+        ByteUtil.setThreeBytes(headersFrameHeader, 0, headersPayload.limit());
+        // Header frame is type 0x01
+        headersFrameHeader[3] = 0x01;
+        // Flags. end of headers (0x04)
+        headersFrameHeader[4] = 0x04;
+        // Stream id
+        ByteUtil.set31Bits(headersFrameHeader, 5, streamId);
+
+        // Data
+        while (dataPayload.hasRemaining()) {
+            dataPayload.put((byte) 'x');
+        }
+        dataPayload.flip();
+
+        // Size
+        ByteUtil.setThreeBytes(dataFrameHeader, 0, dataPayload.limit());
+        // Data is type 0
+        // End of stream
+        dataFrameHeader[4] = 0x01;
+        ByteUtil.set31Bits(dataFrameHeader, 5, streamId);
+    }
+
     protected void writeFrame(byte[] header, ByteBuffer payload)
             throws IOException {
         os.write(header);
@@ -198,7 +246,19 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void readSimpleResponse() throws Http2Exception, IOException {
+    protected void readSimpleGetResponse() throws Http2Exception, IOException {
+        // Headers
+        parser.readFrame(true);
+        // Body
+        parser.readFrame(true);
+    }
+
+
+    protected void readSimplePostResponse() throws Http2Exception, IOException {
+        // Connection window update after reading request body
+        parser.readFrame(true);
+        // Stream window update after reading request body
+        parser.readFrame(true);
         // Headers
         parser.readFrame(true);
         // Body
@@ -660,6 +720,21 @@ public abstract class Http2TestBase extends TomcatBaseTest {
                 os.write(data);
             }
         }
+
+
+        @Override
+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)
+                throws ServletException, IOException {
+            // Do not do this at home. The unconstrained buffer is a DoS risk.
+
+            // Have to read into a buffer because clients typically do not start
+            // to read the response until the request is fully written.
+            ByteArrayOutputStream baos = new ByteArrayOutputStream();
+            IOTools.flow(req.getInputStream(), baos);
+
+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+            IOTools.flow(bais, resp.getOutputStream());
+        }
     }
 
 

==================================================
TestHttp2Section_4_3.java
index aad1ca4dfe..9c8dd4c5dd 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_1.java
@@ -41,8 +41,8 @@ public class TestHttp2Section_4_1 extends Http2TestBase {
         http2Connect();
         os.write(UNKNOWN_FRAME);
         os.flush();
-        sendSimpleRequest(3);
-        readSimpleResponse();
+        sendSimpleGetRequest(3);
+        readSimpleGetResponse();
         Assert.assertEquals(getSimpleResponseTrace(3), output.getTrace());
     }
 
@@ -58,7 +58,7 @@ public class TestHttp2Section_4_1 extends Http2TestBase {
         // Build the simple request
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, 3);
 
         // Tweak the header to set the reserved bit
         frameHeader[5] = (byte) (frameHeader[5] | 0x80);
@@ -66,7 +66,7 @@ public class TestHttp2Section_4_1 extends Http2TestBase {
         // Process the request
         writeFrame(frameHeader, headersPayload);
 
-        readSimpleResponse();
+        readSimpleGetResponse();
         Assert.assertEquals(getSimpleResponseTrace(3), output.getTrace());
     }
 }

==================================================
TestHttp2Section_5_1.java
index fb2cd4ae3f..f0a3901d0b 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
@@ -38,7 +38,7 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
         // Build the simple request
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, 3);
 
         // Try and corrupt the headerPayload
         headersPayload.put(0, (byte) (headersPayload.get(0) + 128));
@@ -62,12 +62,12 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
         // Part 1
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequestPart1(frameHeader, headersPayload, 3);
+        buildSimpleGetRequestPart1(frameHeader, headersPayload, 3);
         writeFrame(frameHeader, headersPayload);
 
         // Part 2
         headersPayload.clear();
-        buildSimpleRequestPart2(frameHeader, headersPayload, 3);
+        buildSimpleGetRequestPart2(frameHeader, headersPayload, 3);
         writeFrame(frameHeader, headersPayload);
 
         // headers, body
@@ -86,7 +86,7 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
         // Part 1
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequestPart1(frameHeader, headersPayload, 3);
+        buildSimpleGetRequestPart1(frameHeader, headersPayload, 3);
         writeFrame(frameHeader, headersPayload);
 
         sendPing();

==================================================
TestHttp2Section_5_2.java
index 2841c8e023..dbb9529a62 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java
@@ -65,8 +65,8 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         http2Connect();
 
         // This half-closes the stream since it includes the end of stream flag
-        sendSimpleRequest(3);
-        readSimpleResponse();
+        sendSimpleGetRequest(3);
+        readSimpleGetResponse();
         Assert.assertEquals(getSimpleResponseTrace(3), output.getTrace());
         output.clearTrace();
 
@@ -87,7 +87,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         // Build the simple request
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, 3);
 
         // Remove the end of stream and end of headers flags
         frameHeader[4] = 0;
@@ -132,7 +132,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         // Part 1
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequestPart1(frameHeader, headersPayload, 4);
+        buildSimpleGetRequestPart1(frameHeader, headersPayload, 4);
         writeFrame(frameHeader, headersPayload);
 
         // headers
@@ -146,8 +146,8 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
     @Test
     public void testClientSendOldStream() throws Exception {
         http2Connect();
-        sendSimpleRequest(5);
-        readSimpleResponse();
+        sendSimpleGetRequest(5);
+        readSimpleGetResponse();
         Assert.assertEquals(getSimpleResponseTrace(5), output.getTrace());
         output.clearTrace();
 
@@ -155,7 +155,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         // Build the simple request on an old stream
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, 3);
 
         os.write(frameHeader);
         os.flush();
@@ -175,14 +175,14 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         sendPriority(3, 0, 16);
         sendPriority(5, 0, 16);
 
-        sendSimpleRequest(5);
-        readSimpleResponse();
+        sendSimpleGetRequest(5);
+        readSimpleGetResponse();
         Assert.assertEquals(getSimpleResponseTrace(5), output.getTrace());
         output.clearTrace();
 
         // Should trigger an error since stream 3 should have been implicitly
         // closed.
-        sendSimpleRequest(3);
+        sendSimpleGetRequest(3);
 
         parser.readFrame(true);
 
@@ -201,9 +201,9 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         sendClientPreface();
         validateHttp2InitialResponse();
 
-        sendLargeRequest(3);
+        sendLargeGetRequest(3);
 
-        sendSimpleRequest(5);
+        sendSimpleGetRequest(5);
 
         // Default connection window size is 64k - 1. Initial request will have
         // used 8k (56k -1).

==================================================
TestHttp2Section_5_3.java
index fb8150e4f7..0a0fda7da0 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_2.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_2.java
@@ -47,7 +47,7 @@ public class TestHttp2Section_5_2 extends Http2TestBase {
         output.clearTrace();
 
         // Headers + 8k response
-        sendSimpleRequest(3);
+        sendSimpleGetRequest(3);
 
         // Headers
         parser.readFrame(true);

==================================================
TestHttp2Section_5_5.java
index 9c931f33d8..971a750c2d 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_3.java
@@ -57,8 +57,8 @@ public class TestHttp2Section_5_3 extends Http2TestBase {
 
         // Use up 56k of the connection window
         for (int i = 3; i < 17; i += 2) {
-            sendSimpleRequest(i);
-            readSimpleResponse();
+            sendSimpleGetRequest(i);
+            readSimpleGetResponse();
         }
 
         // Set the default window size to 1024 bytes
@@ -77,7 +77,7 @@ public class TestHttp2Section_5_3 extends Http2TestBase {
 
         // First, process a request on stream 17. This should consume both
         // stream 17's window and the connection window.
-        sendSimpleRequest(17);
+        sendSimpleGetRequest(17);
         // 17-headers, 17-1k-body
         parser.readFrame(true);
         parser.readFrame(true);
@@ -85,8 +85,8 @@ public class TestHttp2Section_5_3 extends Http2TestBase {
 
         // Send additional requests. Connection window is empty so only headers
         // will be returned.
-        sendSimpleRequest(19);
-        sendSimpleRequest(21);
+        sendSimpleGetRequest(19);
+        sendSimpleGetRequest(21);
 
         // Open up the flow control windows for stream 19 & 21 to more than the
         // size of a simple request (8k)

==================================================
TestHttp2Section_6_1.java
index 4765dc9abd..1231ce2a2d 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_5.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_5.java
@@ -85,7 +85,7 @@ public class TestHttp2Section_5_5 extends Http2TestBase {
         // Part 1
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleRequestPart1(frameHeader, headersPayload, 3);
+        buildSimpleGetRequestPart1(frameHeader, headersPayload, 3);
         writeFrame(frameHeader, headersPayload);
 
         os.write(UNKNOWN_FRAME);

==================================================
