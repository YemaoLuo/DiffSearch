b13e2212d83b8d1713fa61bc110cf794e9ff1fb3
==================================================
Need to handle case where message size limits are larger than the default buffer size. (Limits smaller than the buffer size were handled correctly.)
==================================================
Mark Emlyn
==================================================
Mon Dec 16 18:35:06 2013 +0000
==================================================
PojoMessageHandlerWholeBinary.java
Need to handle case where message size limits are larger than the default buffer size. (Limits smaller than the buffer size were handled correctly.)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1551300 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PojoMessageHandlerWholeText.java
index fb357c7705..2da4a0ab39 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
@@ -52,6 +52,15 @@ public class PojoMessageHandlerWholeBinary
             boolean isForInputStream, long maxMessageSize) {
         super(pojo, method, session, params, indexPayload, convert,
                 indexSession, maxMessageSize);
+
+        // Update binary text size handled by session
+        if (maxMessageSize > -1 && maxMessageSize > session.getMaxBinaryMessageBufferSize()) {
+            if (maxMessageSize > Integer.MAX_VALUE) {
+                // IAE
+            }
+            session.setMaxBinaryMessageBufferSize((int) maxMessageSize);
+        }
+
         try {
             if (decoderClazzes != null) {
                 for (Class<? extends Decoder> decoderClazz : decoderClazzes) {

==================================================
TestWsWebSocketContainer.java
index 557b5c99fa..5afa234e7f 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java
@@ -53,6 +53,14 @@ public class PojoMessageHandlerWholeText
         super(pojo, method, session, params, indexPayload, convert,
                 indexSession, maxMessageSize);
 
+        // Update max text size handled by session
+        if (maxMessageSize > -1 && maxMessageSize > session.getMaxTextMessageBufferSize()) {
+            if (maxMessageSize > Integer.MAX_VALUE) {
+                // IAE
+            }
+            session.setMaxTextMessageBufferSize((int) maxMessageSize);
+        }
+
         // Check for primitives
         Class<?> type = method.getParameterTypes()[indexPayload];
         if (Util.isPrimitive(type)) {

==================================================
TesterEchoServer.java
index 865cfe04f8..63fc4842b5 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -822,23 +822,47 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
     @Test
     public void testMaxMessageSize01() throws Exception {
-        doMaxMessageSize(TesterEchoServer.BasicLimit.MAX_SIZE - 1, true);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW,
+                TesterEchoServer.BasicLimitLow.MAX_SIZE - 1, true);
     }
 
 
     @Test
     public void testMaxMessageSize02() throws Exception {
-        doMaxMessageSize(TesterEchoServer.BasicLimit.MAX_SIZE, true);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW,
+                TesterEchoServer.BasicLimitLow.MAX_SIZE, true);
     }
 
 
     @Test
     public void testMaxMessageSize03() throws Exception {
-        doMaxMessageSize(TesterEchoServer.BasicLimit.MAX_SIZE + 1, false);
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_LOW,
+                TesterEchoServer.BasicLimitLow.MAX_SIZE + 1, false);
     }
 
 
-    private void doMaxMessageSize(long size, boolean expectOpen)
+    @Test
+    public void testMaxMessageSize04() throws Exception {
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH,
+                TesterEchoServer.BasicLimitHigh.MAX_SIZE - 1, true);
+    }
+
+
+    @Test
+    public void testMaxMessageSize05() throws Exception {
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH,
+                TesterEchoServer.BasicLimitHigh.MAX_SIZE, true);
+    }
+
+
+    @Test
+    public void testMaxMessageSize06() throws Exception {
+        doMaxMessageSize(TesterEchoServer.Config.PATH_BASIC_LIMIT_HIGH,
+                TesterEchoServer.BasicLimitHigh.MAX_SIZE + 1, false);
+    }
+
+
+    private void doMaxMessageSize(String path, long size, boolean expectOpen)
             throws Exception {
 
         Tomcat tomcat = getTomcatInstance();
@@ -855,8 +879,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
 
-        Session s = connectToEchoServer(wsContainer, EndpointA.class,
-                TesterEchoServer.Config.PATH_BASIC_LIMIT);
+        Session s = connectToEchoServer(wsContainer, EndpointA.class, path);
 
         StringBuilder msg = new StringBuilder();
         for (long i = 0; i < size; i++) {

==================================================
