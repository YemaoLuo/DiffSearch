43564a44a8565d7c3a8b3255000b8019a83eb43e
==================================================
Update JASPIC to Jakarta Authentication 3.0
==================================================
Mark Thomas
==================================================
Wed Mar 16 16:44:03 2022 +0000
==================================================
AuthException.java
Update JASPIC to Jakarta Authentication 3.0


==================================================
ClientAuth.java
index bc51ae6cda..1a2b652ec7 100644
--- a/java/jakarta/security/auth/message/AuthException.java
+++ b/java/jakarta/security/auth/message/AuthException.java
@@ -27,4 +27,28 @@ public class AuthException extends LoginException {
     public AuthException(String msg) {
         super(msg);
     }
+
+    /**
+     * Construct an instance of AuthException.
+     *
+     * @param msg   Exception message
+     * @param cause The cause of the exception
+     *
+     * @since Authentication 3.0
+     */
+    public AuthException(String msg, Throwable cause) {
+        super(msg);
+        initCause(cause);
+    }
+
+    /**
+     * Construct an instance of AuthException.
+     *
+     * @param cause The cause of the exception
+     *
+     * @since Authentication 3.0
+     */
+    public AuthException(Throwable cause) {
+        initCause(cause);
+    }
 }

==================================================
MessageInfo.java
index c1cf4716f3..f9aab007df 100644
--- a/java/jakarta/security/auth/message/ClientAuth.java
+++ b/java/jakarta/security/auth/message/ClientAuth.java
@@ -22,9 +22,13 @@ public interface ClientAuth {
 
     AuthStatus secureRequest(MessageInfo messageInfo, Subject clientSubject) throws AuthException;
 
-    AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject,
-            Subject serviceSubject) throws AuthException;
+    default AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject,
+            Subject serviceSubject) throws AuthException {
+        return AuthStatus.SUCCESS;
+    }
 
-    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
+    default void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException {
+        // NO-OP
+    }
 }
 

==================================================
ServerAuth.java
index 4d915b9908..eb2e10ee8d 100644
--- a/java/jakarta/security/auth/message/MessageInfo.java
+++ b/java/jakarta/security/auth/message/MessageInfo.java
@@ -28,6 +28,5 @@ public interface MessageInfo {
 
     void setResponseMessage(Object response);
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    Map getMap();
+    Map<String,Object> getMap();
 }

==================================================
AuthConfigFactory.java
index 0ecff10f10..a5b0a8a323 100644
--- a/java/jakarta/security/auth/message/ServerAuth.java
+++ b/java/jakarta/security/auth/message/ServerAuth.java
@@ -23,7 +23,11 @@ public interface ServerAuth {
     AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
             Subject serviceSubject) throws AuthException;
 
-    AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException;
+    default AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException {
+        return AuthStatus.SUCCESS;
+    }
 
-    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
+    default void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException {
+        // NO-OP
+    }
 }

==================================================
ClientAuthConfig.java
index f08c125fa0..68282d6c65 100644
--- a/java/jakarta/security/auth/message/config/AuthConfigFactory.java
+++ b/java/jakarta/security/auth/message/config/AuthConfigFactory.java
@@ -25,23 +25,33 @@ import java.security.Security;
 import java.security.SecurityPermission;
 import java.util.Map;
 
+import jakarta.security.auth.message.module.ServerAuthModule;
+
 public abstract class AuthConfigFactory {
 
-    public static final String DEFAULT_FACTORY_SECURITY_PROPERTY =
-            "authconfigprovider.factory";
-    public static final String GET_FACTORY_PERMISSION_NAME =
-            "getProperty.authconfigprovider.factory";
-    public static final String SET_FACTORY_PERMISSION_NAME =
-            "setProperty.authconfigprovider.factory";
-    public static final String PROVIDER_REGISTRATION_PERMISSION_NAME =
-            "setProperty.authconfigfactory.provider";
+    public static final String DEFAULT_FACTORY_SECURITY_PROPERTY = "authconfigprovider.factory";
+    public static final String GET_FACTORY_PERMISSION_NAME = "getProperty.authconfigprovider.factory";
+    public static final String SET_FACTORY_PERMISSION_NAME = "setProperty.authconfigprovider.factory";
+    public static final String PROVIDER_REGISTRATION_PERMISSION_NAME = "setProperty.authconfigfactory.provider";
 
+    /**
+     * @deprecated Following JEP 411
+     */
+    @Deprecated(forRemoval = true)
     public static final SecurityPermission getFactorySecurityPermission =
             new SecurityPermission(GET_FACTORY_PERMISSION_NAME);
 
+    /**
+     * @deprecated Following JEP 411
+     */
+    @Deprecated(forRemoval = true)
     public static final SecurityPermission setFactorySecurityPermission =
             new SecurityPermission(SET_FACTORY_PERMISSION_NAME);
 
+    /**
+     * @deprecated Following JEP 411
+     */
+    @Deprecated(forRemoval = true)
     public static final SecurityPermission providerRegistrationSecurityPermission =
             new SecurityPermission(PROVIDER_REGISTRATION_PERMISSION_NAME);
 
@@ -99,8 +109,7 @@ public abstract class AuthConfigFactory {
     public abstract AuthConfigProvider getConfigProvider(String layer, String appContext,
             RegistrationListener listener);
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    public abstract String registerConfigProvider(String className, Map properties, String layer,
+    public abstract String registerConfigProvider(String className, Map<String,String> properties, String layer,
             String appContext, String description);
 
     public abstract String registerConfigProvider(AuthConfigProvider provider, String layer,
@@ -117,6 +126,37 @@ public abstract class AuthConfigFactory {
 
     public abstract void refresh();
 
+    /**
+     * Convenience method for registering a {@link ServerAuthModule} that should
+     * have the same effect as calling {@link
+     * #registerConfigProvider(AuthConfigProvider, String, String, String)} with
+     * the implementation providing the appropriate {@link AuthConfigProvider}
+     * generated from the provided context.
+     *
+     * @param serverAuthModule  The {@link ServerAuthModule} to register
+     * @param context           The associated application context
+     *
+     * @return A string identifier for the created registration
+     *
+     * @since Authentication 3.0
+     */
+    public abstract String registerServerAuthModule(ServerAuthModule serverAuthModule, Object context);
+
+    /**
+     * Convenience method for deregistering a {@link ServerAuthModule} that
+     * should have the same effect as calling
+     * {@link AuthConfigFactory#removeRegistration(String)}.
+     *
+     * @param context           The associated application context
+     *
+     * @since Authentication 3.0
+     */
+    public abstract void removeServerAuthModule(Object context);
+
+    /**
+     * @deprecated Following JEP 411
+     */
+    @Deprecated(forRemoval = true)
     private static void checkPermission(Permission permission) {
         SecurityManager securityManager = System.getSecurityManager();
         if (securityManager != null) {

==================================================
ServerAuthConfig.java
index fbb2d22633..2421bca5cb 100644
--- a/java/jakarta/security/auth/message/config/ClientAuthConfig.java
+++ b/java/jakarta/security/auth/message/config/ClientAuthConfig.java
@@ -24,7 +24,6 @@ import jakarta.security.auth.message.AuthException;
 
 public interface ClientAuthConfig extends AuthConfig {
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    ClientAuthContext getAuthContext(String authContextID, Subject clientSubject, Map properties)
+    ClientAuthContext getAuthContext(String authContextID, Subject clientSubject, Map<String,Object> properties)
             throws AuthException;
 }

==================================================
ClientAuthModule.java
index d8aee8b278..9477d7aa16 100644
--- a/java/jakarta/security/auth/message/config/ServerAuthConfig.java
+++ b/java/jakarta/security/auth/message/config/ServerAuthConfig.java
@@ -24,7 +24,6 @@ import jakarta.security.auth.message.AuthException;
 
 public interface ServerAuthConfig extends AuthConfig {
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    ServerAuthContext getAuthContext(String authContextID, Subject serviceSubject, Map properties)
+    ServerAuthContext getAuthContext(String authContextID, Subject serviceSubject, Map<String,Object> properties)
             throws AuthException;
 }

==================================================
ServerAuthModule.java
index f52550062e..ab436510e1 100644
--- a/java/jakarta/security/auth/message/module/ClientAuthModule.java
+++ b/java/jakarta/security/auth/message/module/ClientAuthModule.java
@@ -26,10 +26,8 @@ import jakarta.security.auth.message.MessagePolicy;
 
 public interface ClientAuthModule extends ClientAuth {
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
-            CallbackHandler handler, Map options) throws AuthException;
+            CallbackHandler handler, Map<String,Object> options) throws AuthException;
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    Class[] getSupportedMessageTypes();
+    Class<?>[] getSupportedMessageTypes();
 }

==================================================
AuthConfigFactoryImpl.java
index e8337ae70e..d408e139c8 100644
--- a/java/jakarta/security/auth/message/module/ServerAuthModule.java
+++ b/java/jakarta/security/auth/message/module/ServerAuthModule.java
@@ -26,10 +26,8 @@ import jakarta.security.auth.message.ServerAuth;
 
 public interface ServerAuthModule extends ServerAuth {
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
-            CallbackHandler handler, Map options) throws AuthException;
+            CallbackHandler handler, Map<String,Object> options) throws AuthException;
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    Class[] getSupportedMessageTypes();
+    Class<?>[] getSupportedMessageTypes();
 }

==================================================
MessageInfoImpl.java
index 5d7e3765b7..1930492629 100644
--- a/java/org/apache/catalina/authenticator/jaspic/LocalStrings.properties
+++ b/java/org/apache/catalina/authenticator/jaspic/LocalStrings.properties
@@ -14,8 +14,10 @@
 # limitations under the License.
 
 authConfigFactoryImpl.load=Loading persistent provider registrations from [{0}]
+authConfigFactoryImpl.nullContext=The provided context object must not be null
 authConfigFactoryImpl.registerClass=Registering class [{0}] for layer [{1}] and application context [{2}]
 authConfigFactoryImpl.registerInstance=Registering instance of type[{0}] for layer [{1}] and application context [{2}]
+authConfigFactoryImpl.unsupportedContextType=This implementation only supports contexts of type jakarta.servlet.ServletContext but the provided context was of type [{0}]
 authConfigFactoryImpl.zeroLengthAppContext=A zero length application context name is not valid
 authConfigFactoryImpl.zeroLengthMessageLayer=A zero length message layer name is not valid
 

==================================================
SimpleAuthConfigProvider.java
index e2a465e0f6..cc7bf6eba4 100644
--- a/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java
@@ -44,9 +44,7 @@ public class MessageInfoImpl implements MessageInfo {
     }
 
     @Override
-    @SuppressWarnings("rawtypes")
-    // JASPIC uses raw types
-    public Map getMap() {
+    public Map<String,Object> getMap() {
         return map;
     }
 

==================================================
SimpleServerAuthConfig.java
index 5e39d6fe78..9fe70b8d33 100644
--- a/java/org/apache/catalina/authenticator/jaspic/SimpleAuthConfigProvider.java
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleAuthConfigProvider.java
@@ -33,11 +33,11 @@ import jakarta.security.auth.message.config.ServerAuthConfig;
  */
 public class SimpleAuthConfigProvider implements AuthConfigProvider {
 
-    private final Map<String,String> properties;
+    private final Map<String,Object> properties;
 
     private volatile ServerAuthConfig serverAuthConfig;
 
-    public SimpleAuthConfigProvider(Map<String,String> properties, AuthConfigFactory factory) {
+    public SimpleAuthConfigProvider(Map<String,Object> properties, AuthConfigFactory factory) {
         this.properties = properties;
         if (factory != null) {
             factory.registerConfigProvider(this, null, null, "Automatic registration");
@@ -75,7 +75,7 @@ public class SimpleAuthConfigProvider implements AuthConfigProvider {
 
 
     protected ServerAuthConfig createServerAuthConfig(String layer, String appContext,
-            CallbackHandler handler, Map<String,String> properties) {
+            CallbackHandler handler, Map<String,Object> properties) {
         return new SimpleServerAuthConfig(layer, appContext, handler, properties);
     }
 

==================================================
SimpleServerAuthContext.java
index 2f1db1162e..5ebc4b236f 100644
--- a/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
@@ -48,12 +48,12 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
     private final String layer;
     private final String appContext;
     private final CallbackHandler handler;
-    private final Map<String,String> properties;
+    private final Map<String,Object> properties;
 
     private volatile ServerAuthContext serverAuthContext;
 
     public SimpleServerAuthConfig(String layer, String appContext, CallbackHandler handler,
-            Map<String,String> properties) {
+            Map<String,Object> properties) {
         this.layer = layer;
         this.appContext = appContext;
         this.handler = handler;
@@ -91,15 +91,14 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
     }
 
 
-    @SuppressWarnings({"rawtypes", "unchecked"}) // JASPIC API uses raw types
     @Override
     public ServerAuthContext getAuthContext(String authContextID, Subject serviceSubject,
-            Map properties) throws AuthException {
+            Map<String,Object> properties) throws AuthException {
         ServerAuthContext serverAuthContext = this.serverAuthContext;
         if (serverAuthContext == null) {
             synchronized (this) {
                 if (this.serverAuthContext == null) {
-                    Map<String,String> mergedProperties = new HashMap<>();
+                    Map<String,Object> mergedProperties = new HashMap<>();
                     if (this.properties != null) {
                         mergedProperties.putAll(this.properties);
                     }
@@ -110,10 +109,10 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
                     List<ServerAuthModule> modules = new ArrayList<>();
                     int moduleIndex = 1;
                     String key = SERVER_AUTH_MODULE_KEY_PREFIX + moduleIndex;
-                    String moduleClassName = mergedProperties.get(key);
-                    while (moduleClassName != null) {
+                    Object moduleClassName = mergedProperties.get(key);
+                    while (moduleClassName instanceof String) {
                         try {
-                            Class<?> clazz = Class.forName(moduleClassName);
+                            Class<?> clazz = Class.forName((String) moduleClassName);
                             ServerAuthModule module =
                                     (ServerAuthModule) clazz.getConstructor().newInstance();
                             module.initialize(null, null, handler, mergedProperties);

==================================================
TestSimpleServerAuthConfig.java
index 8d0a9acf8c..d01dc267a0 100644
--- a/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthContext.java
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthContext.java
@@ -42,7 +42,6 @@ public class SimpleServerAuthContext implements ServerAuthContext {
     }
 
 
-    @SuppressWarnings("unchecked") // JASPIC API uses raw types
     @Override
     public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
             Subject serviceSubject) throws AuthException {

==================================================
TesterMessageInfo.java
index d2bf13db02..660002f39a 100644
--- a/test/org/apache/catalina/authenticator/jaspic/TestSimpleServerAuthConfig.java
+++ b/test/org/apache/catalina/authenticator/jaspic/TestSimpleServerAuthConfig.java
@@ -32,7 +32,7 @@ public class TestSimpleServerAuthConfig {
     private static final String SERVER_AUTH_MODULE_KEY_PREFIX =
             "org.apache.catalina.authenticator.jaspic.ServerAuthModule.";
 
-    private static final Map<String,String> CONFIG_PROPERTIES;
+    private static final Map<String,Object> CONFIG_PROPERTIES;
     static {
         CONFIG_PROPERTIES = new HashMap<>();
         CONFIG_PROPERTIES.put(SERVER_AUTH_MODULE_KEY_PREFIX + "1",

==================================================
TesterServerAuthModuleA.java
index acc02c6cb0..eab33834e8 100644
--- a/test/org/apache/catalina/authenticator/jaspic/TesterMessageInfo.java
+++ b/test/org/apache/catalina/authenticator/jaspic/TesterMessageInfo.java
@@ -25,7 +25,7 @@ public class TesterMessageInfo implements MessageInfo {
 
     private Object requestMessage;
     private Object responseMessage;
-    private final Map<String,String> map = new HashMap<>();
+    private final Map<String,Object> map = new HashMap<>();
 
     @Override
     public Object getRequestMessage() {
@@ -47,9 +47,8 @@ public class TesterMessageInfo implements MessageInfo {
         responseMessage = response;
     }
 
-    @SuppressWarnings("rawtypes")
     @Override
-    public Map getMap() {
+    public Map<String,Object> getMap() {
         return map;
     }
 }

==================================================
