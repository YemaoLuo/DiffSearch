0f425702b96ed985ed5961aaf1fc7c3fd04275b4
==================================================
Remove NO-OP method implementation and hooks that were calling it.
==================================================
Mark Thomas
==================================================
Fri Jan 30 14:23:14 2015 +0000
==================================================
AjpNio2Protocol.java
Remove NO-OP method implementation and hooks that were calling it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1656025 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProtocol.java
index 2ad1bea797..32d4cfb5c8 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -16,8 +16,6 @@
  */
 package org.apache.coyote.ajp;
 
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -95,10 +93,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
             recycledProcessors.push(processor);
         }
 
-        @Override
-        public void onCreateSSLEngine(SSLEngine engine) {
-        }
-
         @Override
         public void closeAll() {
             for (Nio2Channel channel : connections.keySet()) {

==================================================
Http11Nio2Protocol.java
index 392fd55a05..d9c7b55fe9 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -19,8 +19,6 @@ package org.apache.coyote.ajp;
 import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -123,10 +121,5 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
                 socket.registerReadInterest();
             }
         }
-
-
-        @Override
-        public void onCreateSSLEngine(SSLEngine engine) {
-        }
     }
 }

==================================================
Http11NioProtocol.java
index e638473576..d51d8ba4e5 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -18,8 +18,6 @@ package org.apache.coyote.http11;
 
 import java.nio.channels.ReadPendingException;
 
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -171,13 +169,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
             }
         }
 
-        @Override
-        public void onCreateSSLEngine(SSLEngine engine) {
-            if (getProtocol().npnHandler != null) {
-                getProtocol().npnHandler.onCreateEngine(engine);
-            }
-        }
-
         @Override
         public void closeAll() {
             for (Nio2Channel channel : connections.keySet()) {

==================================================
NpnHandler.java
index 7a9b362986..0a20fc06b6 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -19,8 +19,6 @@ package org.apache.coyote.http11;
 import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -207,12 +205,5 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
                 socket.registerReadInterest();
             }
         }
-
-        @Override
-        public void onCreateSSLEngine(SSLEngine engine) {
-            if (getProtocol().npnHandler != null) {
-                getProtocol().npnHandler.onCreateEngine(engine);
-            }
-        }
     }
 }

==================================================
SpdyAprNpnHandler.java
index 884be85813..5df46cc241 100644
--- a/java/org/apache/coyote/http11/NpnHandler.java
+++ b/java/org/apache/coyote/http11/NpnHandler.java
@@ -47,12 +47,4 @@ public interface NpnHandler<S> {
      * @param adapter
      */
     public void init(final AbstractEndpoint<S> ep, long sslContext, Adapter adapter);
-
-    /**
-     * Called when a SSLSocket or SSLEngine are first used, to initialize
-     * NPN extension.
-     *
-     * @param socket SSLEngine or SSLSocket
-     */
-    void onCreateEngine(Object socket);
 }
\ No newline at end of file

==================================================
SpdyProxyProtocol.java
index 8a63d38509..f1441489c2 100644
--- a/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
+++ b/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
@@ -104,9 +104,4 @@ public class SpdyAprNpnHandler implements NpnHandler<Long> {
         // No need to keep tomcat thread busy - but socket will be handled by apr socket context.
         return SocketState.LONG;
     }
-
-
-    @Override
-    public void onCreateEngine(Object socket) {
-    }
 }

==================================================
Nio2Endpoint.java
index 45ce5962b4..8586842bdc 100644
--- a/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
+++ b/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
@@ -19,8 +19,6 @@ package org.apache.coyote.spdy;
 import java.io.IOException;
 import java.nio.channels.SocketChannel;
 
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.ajp.Constants;
 import org.apache.juli.logging.Log;
@@ -137,10 +135,5 @@ public class SpdyProxyProtocol extends AbstractProtocol<NioChannel> {
         public void release(SocketChannel socket) {
             // TODO Auto-generated method stub
         }
-
-        @Override
-        public void onCreateSSLEngine(SSLEngine engine) {
-            // No SSL in proxy. Should be a NO-OP.
-        }
     }
 }

==================================================
NioEndpoint.java
index b2bfd716c5..d311332cb9 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -543,7 +543,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         engine.setEnabledCipherSuites(enabledCiphers);
         engine.setEnabledProtocols(enabledProtocols);
 
-        handler.onCreateSSLEngine(engine);
         return engine;
     }
 
@@ -1473,7 +1472,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
     public interface Handler extends AbstractEndpoint.Handler<Nio2Channel> {
         public void release(SocketWrapperBase<Nio2Channel> socket);
         public void closeAll();
-        public void onCreateSSLEngine(SSLEngine engine);
     }
 
     public void addTimeout(SocketWrapperBase<Nio2Channel> socket) {

==================================================
