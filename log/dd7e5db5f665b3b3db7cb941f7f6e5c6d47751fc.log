dd7e5db5f665b3b3db7cb941f7f6e5c6d47751fc
==================================================
Set a per connection timeout
==================================================
Filip Hanik
==================================================
Thu Jul 13 19:51:56 2006 +0000
==================================================
CometProcessor.java
Set a per connection timeout


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@421694 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProcessor.java
index aac7fb4a1e..b329fdf95c 100644
--- a/java/org/apache/catalina/CometProcessor.java
+++ b/java/org/apache/catalina/CometProcessor.java
@@ -117,7 +117,7 @@ public interface CometProcessor {
      * This method should not be called asynchronously, as that will have no effect.
      * @param request The HTTP servlet request instance
      * @param response The HTTP servlet response instance
-     * @param timeout The timeout in milliseconds for this connection
+     * @param timeout The timeout in milliseconds for this connection, must be a positive value, larger than 0
      * @throws IOException An IOException may be thrown to indicate an IO error, 
      *         or that the EOF has been reached on the connection
      * @throws ServletException An exception has occurred, as specified by the root

==================================================
NioEndpoint.java
index 51e3ea6ea8..4d44aa0332 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -743,7 +743,11 @@ public class Http11NioProcessor implements ActionHook {
             SelectionKey key = socket.keyFor(endpoint.getPoller().getSelector());
             if ( key != null ) {
                 NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment) key.attachment();
-                if ( attach!=null ) attach.setComet(comet);
+                if ( attach!=null ) {
+                    attach.setComet(comet);
+                    Integer comettimeout = (Integer)request.getAttribute("org.apache.tomcat.comet.timeout");
+                    if ( comettimeout != null ) attach.setTimeout(comettimeout.longValue());
+                }
             }
             
         } catch (InterruptedIOException e) {
@@ -884,7 +888,11 @@ public class Http11NioProcessor implements ActionHook {
                     SelectionKey key = socket.keyFor(endpoint.getPoller().getSelector());
                     if (key != null) {
                         NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment) key.attachment();
-                        if (attach != null) attach.setComet(comet);
+                        if (attach != null)  {
+                            attach.setComet(comet);
+                            Integer comettimeout = (Integer) request.getAttribute("org.apache.tomcat.comet.timeout");
+                            if (comettimeout != null) attach.setTimeout(comettimeout.longValue());
+                        }
                     }
                 } catch (InterruptedIOException e) {
                     error = true;
@@ -1397,6 +1405,8 @@ public class Http11NioProcessor implements ActionHook {
 
         // Advertise comet support through a request attribute
         request.setAttribute("org.apache.tomcat.comet.support", Boolean.TRUE);
+        // Advertise comet timeout support
+        request.setAttribute("org.apache.tomcat.comet.timeout.support", Boolean.TRUE);
 
     }
 

==================================================
