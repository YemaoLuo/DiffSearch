82b8c6b9f75f2d82d5c42786483f9ea85d7672ef
==================================================
Ensure APR socket is not added to multiple pollers.
==================================================
Mark Emlyn
==================================================
Thu Jul 28 18:16:39 2011 +0000
==================================================
AbstractProtocol.java
Ensure APR socket is not added to multiple pollers.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1151953 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 63142cf137..a573e88325 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -525,10 +525,15 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                     // socket associated with the processor. Exact requirements
                     // depend on type of long poll
                     longPoll(socket, processor);
-                } else if (state == SocketState.OPEN){
+                } else if (state == SocketState.OPEN) {
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
                     release(socket, processor, false, true);
+                } else if (state == SocketState.SENDFILE) {
+                    // Sendfile in progress. If it fails, the socket will be
+                    // closed. If it works, the socket will be re-added to the
+                    // poller
+                    release(socket, processor, false, false);
                 } else {
                     // Connection closed. OK to recycle the processor.
                     release(socket, processor, true, false);

==================================================
AbstractEndpoint.java
index 3b7e2e206e..f92bee138c 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -185,6 +185,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         
         boolean keptAlive = false;
         boolean openSocket = false;
+        boolean sendfileInProgress = false;
 
         while (!error && keepAlive && !comet && !isAsync() && !endpoint.isPaused()) {
 
@@ -305,17 +306,19 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                 sendfileData.socket = socketRef;
                 sendfileData.keepAlive = keepAlive;
                 if (!((AprEndpoint)endpoint).getSendfile().add(sendfileData)) {
+                    // Didn't send all of the data to sendfile.
                     if (sendfileData.socket == 0) {
-                        // Didn't send all the data but the socket is no longer
-                        // set. Something went wrong. Close the connection.
-                        // Too late to set status code.
+                        // The socket is no longer set. Something went wrong.
+                        // Close the connection. Too late to set status code.
                         if (log.isDebugEnabled()) {
                             log.debug(sm.getString(
                                     "http11processor.sendfile.error"));
                         }
                         error = true;
                     } else {
-                        openSocket = true;
+                        // The sendfile Poller will add the socket to the main
+                        // Poller once sendfile processing is complete
+                        sendfileInProgress = true;
                     }
                     break;
                 }
@@ -332,7 +335,11 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         } else if (comet  || isAsync()) {
             return SocketState.LONG;
         } else {
-            return (openSocket) ? SocketState.OPEN : SocketState.CLOSED;
+            if (sendfileInProgress) {
+                return SocketState.SENDFILE;
+            } else {
+                return (openSocket) ? SocketState.OPEN : SocketState.CLOSED;
+            }
         }
         
     }

==================================================
