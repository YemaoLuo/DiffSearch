2a96e2320bf1a6e4e3cf2c623dea80a335c1c5b8
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=56917
==================================================
Mark Thomas
==================================================
Mon Nov 30 14:02:12 2015 +0000
==================================================
Response.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=56917
All relative URIs to be used with sendRedirect()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1717252 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestDigestAuthenticator.java
index 92916070ec..37dc20d231 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -19,6 +19,7 @@ package org.apache.catalina.connector;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.net.MalformedURLException;
+import java.net.URI;
 import java.nio.charset.Charset;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -1266,6 +1267,7 @@ public class Response
         sendRedirect(location, SC_FOUND);
     }
 
+
     /**
      * Internal method that allows a redirect to be sent with a status other
      * than {@link HttpServletResponse#SC_FOUND} (302). No attempt is made to
@@ -1273,8 +1275,7 @@ public class Response
      */
     public void sendRedirect(String location, int status) throws IOException {
         if (isCommitted()) {
-            throw new IllegalStateException
-                (sm.getString("coyoteResponse.sendRedirect.ise"));
+            throw new IllegalStateException(sm.getString("coyoteResponse.sendRedirect.ise"));
         }
 
         // Ignore any call from an included servlet
@@ -1287,13 +1288,13 @@ public class Response
 
         // Generate a temporary redirect to the specified location
         try {
-            String absolute = toAbsolute(location);
+            String locationUri = URI.create(location).toASCIIString();
             setStatus(status);
-            setHeader("Location", absolute);
+            setHeader("Location", locationUri);
             if (getContext().getSendRedirectBody()) {
                 PrintWriter writer = getWriter();
                 writer.print(sm.getString("coyoteResponse.sendRedirect.note",
-                        RequestUtil.filter(absolute)));
+                        RequestUtil.filter(locationUri)));
                 flushBuffer();
             }
         } catch (IllegalArgumentException e) {

==================================================
TestJaspicDigestAuthenticator.java
index b260a99fa7..54d24c4487 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -32,11 +32,11 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.connector.Request;
-import org.apache.catalina.core.TesterContext;
 import org.apache.catalina.startup.TesterMapRealm;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.unittest.TesterContext;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityCollection;

==================================================
TestRequest.java
index 5d867b865a..6e82c8c58f 100644
--- a/test/org/apache/catalina/authenticator/TestJaspicDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestJaspicDigestAuthenticator.java
@@ -37,11 +37,11 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.authenticator.jaspic.JaspicAuthenticator;
 import org.apache.catalina.authenticator.jaspic.provider.TomcatAuthConfigProvider;
 import org.apache.catalina.connector.Request;
-import org.apache.catalina.core.TesterContext;
 import org.apache.catalina.startup.TesterMapRealm;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.unittest.TesterContext;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityCollection;

==================================================
TestResponse.java
index 1bcb70466c..4ce50fde38 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -52,6 +52,7 @@ import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.TesterMapRealm;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.unittest.TesterRequest;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
 import org.apache.tomcat.util.descriptor.web.FilterMap;

==================================================
TestResponsePerformance.java
index a6ebf0786b..3f5d795052 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -38,6 +38,7 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.unittest.TesterRequest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -360,7 +361,219 @@ public class TestResponse extends TomcatBaseTest {
     }
 
 
+    private void doTestEncodeURL(String location, String expected) {
+        Request req = new TesterRequest(true);
+        req.setRequestedSessionId("1234");
+        req.setRequestedSessionURL(true);
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        String result = resp.encodeURL(location);
+        Assert.assertEquals(expected, result);
+    }
+
+
+    @Test
+    public void testEncodeURL01() throws Exception {
+        doTestEncodeURL("./bar.html", "./bar.html;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeURL02() throws Exception {
+        doTestEncodeURL(".", ".;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeURL03() throws Exception {
+        doTestEncodeURL("..", "..;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeURL04() throws Exception {
+        doTestEncodeURL(".././..", ".././..;jsessionid=1234");
+    }
+
+
+    public void testEncodeURL05() throws Exception {
+        doTestEncodeURL("../../..", "../../..");
+    }
+
+
+    @Test
+    public void testEncodeURL06() throws Exception {
+        doTestEncodeURL("bar.html", "bar.html;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeURL07() throws Exception {
+        doTestEncodeURL("bar.html?x=/../", "bar.html;jsessionid=1234?x=/../");
+    }
+
+
+    @Test
+    public void testEncodeURL08() throws Exception {
+        doTestEncodeURL("bar.html?x=/../../", "bar.html;jsessionid=1234?x=/../../");
+    }
+
+
+    @Test
+    public void testEncodeURL09() throws Exception {
+        doTestEncodeURL("./.?x=/../../", "./.;jsessionid=1234?x=/../../");
+    }
+
+
+    @Test
+    public void testEncodeURL10() throws Exception {
+        doTestEncodeURL("./..?x=/../../", "./..;jsessionid=1234?x=/../../");
+    }
+
+
+    @Test
+    public void testEncodeURL11() throws Exception {
+        doTestEncodeURL("./..?x=/../..", "./..;jsessionid=1234?x=/../..");
+    }
+
+
+    @Test
+    public void testEncodeURL12() throws Exception {
+        doTestEncodeURL("bar.html#/../", "bar.html;jsessionid=1234#/../");
+    }
+
+
+    @Test
+    public void testEncodeURL13() throws Exception {
+        doTestEncodeURL("bar.html#/../../", "bar.html;jsessionid=1234#/../../");
+    }
+
+
+    @Test
+    public void testEncodeURL14() throws Exception {
+        doTestEncodeURL("./.#/../../", "./.;jsessionid=1234#/../../");
+    }
+
+
+    @Test
+    public void testEncodeURL15() throws Exception {
+        doTestEncodeURL("./..#/../../", "./..;jsessionid=1234#/../../");
+    }
+
+
+    @Test
+    public void testEncodeURL16() throws Exception {
+        doTestEncodeURL("./..#/../..", "./..;jsessionid=1234#/../..");
+    }
+
+
+    private void doTestEncodeRedirectURL(String location, String expected) {
+        Request req = new TesterRequest(true);
+        req.setRequestedSessionId("1234");
+        req.setRequestedSessionURL(true);
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        String result = resp.encodeRedirectURL(location);
+        Assert.assertEquals(expected, result);
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL01() throws Exception {
+        doTestEncodeRedirectURL("./bar.html", "./bar.html;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL02() throws Exception {
+        doTestEncodeRedirectURL(".", ".;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL03() throws Exception {
+        doTestEncodeRedirectURL("..", "..;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL04() throws Exception {
+        doTestEncodeRedirectURL(".././..", ".././..;jsessionid=1234");
+    }
+
+
+    @Test(expected=IllegalArgumentException.class)
+    public void testEncodeRedirectURL05() throws Exception {
+        doTestEncodeRedirectURL("../../..", "throws IAE");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL06() throws Exception {
+        doTestEncodeRedirectURL("bar.html", "bar.html;jsessionid=1234");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL07() throws Exception {
+        doTestEncodeRedirectURL("bar.html?x=/../", "bar.html;jsessionid=1234?x=/../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL08() throws Exception {
+        doTestEncodeRedirectURL("bar.html?x=/../../", "bar.html;jsessionid=1234?x=/../../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL09() throws Exception {
+        doTestEncodeRedirectURL("./.?x=/../../", "./.;jsessionid=1234?x=/../../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL10() throws Exception {
+        doTestEncodeRedirectURL("./..?x=/../../", "./..;jsessionid=1234?x=/../../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL11() throws Exception {
+        doTestEncodeRedirectURL("./..?x=/../..", "./..;jsessionid=1234?x=/../..");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL12() throws Exception {
+        doTestEncodeRedirectURL("bar.html#/../", "bar.html;jsessionid=1234#/../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL13() throws Exception {
+        doTestEncodeRedirectURL("bar.html#/../../", "bar.html;jsessionid=1234#/../../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL14() throws Exception {
+        doTestEncodeRedirectURL("./.#/../../", "./.;jsessionid=1234#/../../");
+    }
+
+
+    @Test
+    public void testEncodeRedirectURL15() throws Exception {
+        doTestEncodeRedirectURL("./..#/../../", "./..;jsessionid=1234#/../../");
+    }
+
+
     @Test
+    public void testEncodeRedirectURL16() throws Exception {
+        doTestEncodeURL("./..#/../..", "./..;jsessionid=1234#/../..");
+    }    @Test
     public void testBug53469a() throws Exception {
         Request req = new TesterRequest();
         Response resp = new Response();

==================================================
TestRemoteIpFilter.java
index 6d2618cbe7..131d3aae08 100644
--- a/test/org/apache/catalina/connector/TestResponsePerformance.java
+++ b/test/org/apache/catalina/connector/TestResponsePerformance.java
@@ -22,6 +22,7 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.startup.LoggingBaseTest;
+import org.apache.tomcat.unittest.TesterRequest;
 
 public class TestResponsePerformance extends LoggingBaseTest {
 

==================================================
TestJNDIRealm.java
index df9f833d56..bce2d9f036 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -49,10 +49,10 @@ import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.connector.Request;
-import org.apache.catalina.connector.TesterResponse;
-import org.apache.catalina.core.TesterContext;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.unittest.TesterContext;
+import org.apache.tomcat.unittest.TesterResponse;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
 import org.apache.tomcat.util.descriptor.web.FilterMap;
 

==================================================
TestRealmBase.java
index f7dadf8997..b2a82e4aae 100644
--- a/test/org/apache/catalina/realm/TestJNDIRealm.java
+++ b/test/org/apache/catalina/realm/TestJNDIRealm.java
@@ -35,8 +35,8 @@ import org.junit.Test;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.core.TesterContext;
 import org.apache.naming.NameParserImpl;
+import org.apache.tomcat.unittest.TesterContext;
 import org.apache.tomcat.util.security.MD5Encoder;
 import org.easymock.EasyMock;
 

==================================================
TestWebappServiceLoader.java
index 1f479cd91a..9c397e5a52 100644
--- a/test/org/apache/catalina/realm/TestRealmBase.java
+++ b/test/org/apache/catalina/realm/TestRealmBase.java
@@ -30,10 +30,10 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.connector.TesterRequest;
-import org.apache.catalina.connector.TesterResponse;
-import org.apache.catalina.core.TesterContext;
 import org.apache.catalina.startup.TesterMapRealm;
+import org.apache.tomcat.unittest.TesterContext;
+import org.apache.tomcat.unittest.TesterRequest;
+import org.apache.tomcat.unittest.TesterResponse;
 import org.apache.tomcat.util.descriptor.web.SecurityCollection;
 import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
 

==================================================
TesterWebResourceRoot.java
index bf3304efff..fed49641c4 100644
--- a/test/org/apache/catalina/startup/TestWebappServiceLoader.java
+++ b/test/org/apache/catalina/startup/TestWebappServiceLoader.java
@@ -32,7 +32,7 @@ import org.junit.Before;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
-import org.apache.catalina.core.TesterContext;
+import org.apache.tomcat.unittest.TesterContext;
 import org.easymock.EasyMock;
 import org.easymock.IMocksControl;
 

==================================================
TesterContext.java
index 185251a2af..6217f26f41 100644
--- a/test/org/apache/catalina/webresources/TesterWebResourceRoot.java
+++ b/test/org/apache/catalina/webresources/TesterWebResourceRoot.java
@@ -22,7 +22,7 @@ import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.LifecycleState;
-import org.apache.catalina.core.TesterContext;
+import org.apache.tomcat.unittest.TesterContext;
 
 /**
  * Minimal implementation for use in unit tests that supports main and pre

==================================================
TesterRequest.java
similarity index 99%
rename from test/org/apache/catalina/core/TesterContext.java
rename to test/org/apache/tomcat/unittest/TesterContext.java
index cdc5f78ce9..3edc94a6ac 100644
--- a/test/org/apache/catalina/core/TesterContext.java
+++ b/test/org/apache/tomcat/unittest/TesterContext.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.catalina.core;
+package org.apache.tomcat.unittest;
 
 import java.beans.PropertyChangeListener;
 import java.io.File;
@@ -588,9 +588,13 @@ public class TesterContext implements Context {
         // NO-OP
     }
 
+    private ServletContext servletContext;
     @Override
     public ServletContext getServletContext() {
-        return null;
+        return servletContext;
+    }
+    public void setServletContext(ServletContext servletContext) {
+        this.servletContext = servletContext;
     }
 
     @Override

==================================================
TesterResponse.java
similarity index 63%
rename from test/org/apache/catalina/connector/TesterRequest.java
rename to test/org/apache/tomcat/unittest/TesterRequest.java
index 3d0dc77f74..f5def30cda 100644
--- a/test/org/apache/catalina/connector/TesterRequest.java
+++ b/test/org/apache/tomcat/unittest/TesterRequest.java
@@ -14,16 +14,51 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.apache.catalina.connector;
+package org.apache.tomcat.unittest;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+
+import javax.servlet.ServletContext;
+import javax.servlet.SessionTrackingMode;
+
+import org.apache.catalina.Context;
+import org.apache.catalina.connector.Request;
+import org.apache.catalina.session.StandardSession;
 
 public class TesterRequest extends Request {
+
+    private final TesterContext context;
+    private final TesterServletContext servletContext;
+
+
+    public TesterRequest() {
+        this(false);
+    }
+
+
+    public TesterRequest(boolean withSession) {
+        context = new TesterContext();
+        servletContext = new TesterServletContext();
+        context.setServletContext(servletContext);
+        if (withSession) {
+            Set<SessionTrackingMode> modes = new HashSet<>();
+            modes.add(SessionTrackingMode.URL);
+            modes.add(SessionTrackingMode.COOKIE);
+            servletContext.setSessionTrackingModes(modes);
+            session = new StandardSession(null);
+            session.setId("1234", false);
+            session.setValid(true);
+        }
+    }
+
+
     @Override
     public String getScheme() {
         return "http";
@@ -39,11 +74,31 @@ public class TesterRequest extends Request {
         return 8080;
     }
 
+
     @Override
-    public String getDecodedRequestURI() {
+    public String getRequestURI() {
         return "/level1/level2/foo.html";
     }
 
+    @Override
+    public String getDecodedRequestURI() {
+        // Decoding not required
+        return getRequestURI();
+    }
+
+
+    @Override
+    public Context getContext() {
+        return context;
+    }
+
+
+    @Override
+    public ServletContext getServletContext() {
+        return servletContext;
+    }
+
+
     private String method;
     public void setMethod(String method) {
         this.method = method;
@@ -54,7 +109,7 @@ public class TesterRequest extends Request {
     }
 
     private final Map<String,List<String>> headers = new HashMap<>();
-    protected void addHeader(String name, String value) {
+    public void addHeader(String name, String value) {
         List<String> values = headers.get(name);
         if (values == null) {
             values = new ArrayList<>();

==================================================
TesterServletContext.java
similarity index 96%
rename from test/org/apache/catalina/connector/TesterResponse.java
rename to test/org/apache/tomcat/unittest/TesterResponse.java
index 8b6681f824..59f79ee315 100644
--- a/test/org/apache/catalina/connector/TesterResponse.java
+++ b/test/org/apache/tomcat/unittest/TesterResponse.java
@@ -14,10 +14,12 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.apache.catalina.connector;
+package org.apache.tomcat.unittest;
 
 import java.io.IOException;
 
+import org.apache.catalina.connector.Response;
+
 /**
  * Minimal changes to Response to enable tests that use this class to operate
  * correctly.

==================================================
TesterSessionCookieConfig.java
index b940d18a7f..917f954074 100644
--- a/test/org/apache/tomcat/unittest/TesterServletContext.java
+++ b/test/org/apache/tomcat/unittest/TesterServletContext.java
@@ -22,6 +22,7 @@ import java.net.URL;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.EventListener;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -38,7 +39,6 @@ import javax.servlet.SessionTrackingMode;
 import javax.servlet.descriptor.JspConfigDescriptor;
 
 import org.apache.catalina.core.ApplicationFilterRegistration;
-import org.apache.catalina.core.TesterContext;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
 
 public class TesterServletContext implements ServletContext {
@@ -278,15 +278,18 @@ public class TesterServletContext implements ServletContext {
         throw new RuntimeException("Not implemented");
     }
 
+    private SessionCookieConfig sessionCookieConfig = new TesterSessionCookieConfig();
     @Override
     public SessionCookieConfig getSessionCookieConfig() {
-        throw new RuntimeException("Not implemented");
+        return sessionCookieConfig;
     }
 
+    private final Set<SessionTrackingMode> sessionTrackingModes = new HashSet<>();
     @Override
     public void setSessionTrackingModes(
             Set<SessionTrackingMode> sessionTrackingModes) {
-        throw new RuntimeException("Not implemented");
+        this.sessionTrackingModes.clear();
+        this.sessionTrackingModes.addAll(sessionTrackingModes);
     }
 
     @Override
@@ -296,7 +299,7 @@ public class TesterServletContext implements ServletContext {
 
     @Override
     public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
-        throw new RuntimeException("Not implemented");
+        return sessionTrackingModes;
     }
 
     @Override

==================================================
