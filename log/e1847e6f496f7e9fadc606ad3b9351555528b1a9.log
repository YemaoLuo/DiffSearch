e1847e6f496f7e9fadc606ad3b9351555528b1a9
==================================================
Add dns-ping support to enumerate cluster members. This is much simpler
==================================================
Remy Maucherat
==================================================
Fri Dec 14 13:37:45 2018 +0000
==================================================
AbstractStreamProvider.java
Add dns-ping support to enumerate cluster members. This is much simpler
        than getting the pod list but it does not indicate pod status.
Submitted by by Maxime Beck.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848938 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CloudMembershipProvider.java
index 100611d0a5..a3da2d7814 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
@@ -42,7 +42,7 @@ import org.apache.juli.logging.LogFactory;
 
 public abstract class AbstractStreamProvider implements StreamProvider {
     private static final Log log = LogFactory.getLog(AbstractStreamProvider.class);
-    protected static final StringManager sm = StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(AbstractStreamProvider.class);
 
     protected static final TrustManager[] INSECURE_TRUST_MANAGERS = new TrustManager[] {
             new X509TrustManager() {

==================================================
CloudMembershipService.java
index d453902132..07061ce98f 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipProvider.java
@@ -39,8 +39,8 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public abstract class CloudMembershipProvider extends MembershipProviderBase implements Heartbeat, ChannelListener {
-    private static final Log log = LogFactory.getLog(KubernetesMembershipProvider.class);
-    protected static final StringManager sm = StringManager.getManager(Constants.Package);
+    private static final Log log = LogFactory.getLog(CloudMembershipProvider.class);
+    protected static final StringManager sm = StringManager.getManager(CloudMembershipProvider.class);
 
     protected String url;
     protected StreamProvider streamProvider;

==================================================
Constants.java
index 106481d45f..59a5effdc7 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipService.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipService.java
@@ -35,12 +35,12 @@ public class CloudMembershipService extends MembershipServiceBase
         implements CloudMembershipServiceMBean {
 
     private static final Log log = LogFactory.getLog(CloudMembershipService.class);
-    protected static final StringManager sm = StringManager.getManager(Constants.Package);
+    protected static final StringManager sm = StringManager.getManager(CloudMembershipService.class);
 
     public static final String MEMBERSHIP_PROVIDER_CLASS_NAME = "membershipProviderClassName";
     private static final String KUBE = "kubernetes";
     private static final String KUBE_PROVIDER_CLASS = "org.apache.catalina.tribes.membership.cloud.KubernetesMembershipProvider";
-    static final byte[] INITIAL_ID = new byte[16];
+    protected static final byte[] INITIAL_ID = new byte[16];
 
     private MembershipProvider membershipProvider;
     private MemberImpl localMember;

==================================================
DNSMembershipProvider.java
deleted file mode 100644
index 96bb3a700e..0000000000
--- a/java/org/apache/catalina/tribes/membership/cloud/Constants.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.tribes.membership.cloud;
-
-public class Constants {
-    public static final String Package = "org.apache.catalina.tribes.membership.cloud";
-}
\ No newline at end of file

==================================================
KubernetesMembershipProvider.java
new file mode 100644
index 0000000000..ad26423b07
--- /dev/null
+++ b/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.catalina.tribes.membership.cloud;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.URLEncoder;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.catalina.tribes.Member;
+import org.apache.catalina.tribes.MembershipService;
+import org.apache.catalina.tribes.membership.MemberImpl;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
+public class DNSMembershipProvider extends CloudMembershipProvider {
+    private static final Log log = LogFactory.getLog(DNSMembershipProvider.class);
+
+    private static final String CUSTOM_ENV_PREFIX = "OPENSHIFT_KUBE_PING_";
+    private String namespace;
+
+    @Override
+    public void start(int level) throws Exception {
+        if ((level & MembershipService.MBR_RX) == 0) {
+            return;
+        }
+
+        super.start(level);
+
+        // Set up Kubernetes API parameters
+        namespace = getEnv("KUBERNETES_NAMESPACE", CUSTOM_ENV_PREFIX + "NAMESPACE");
+        if (namespace == null || namespace.length() == 0) {
+            throw new IllegalArgumentException(sm.getString("kubernetesMembershipProvider.noNamespace"));
+        }
+
+        if (log.isDebugEnabled()) {
+            log.debug(String.format("Namespace [%s] set; clustering enabled", namespace));
+        }
+        namespace = URLEncoder.encode(namespace, "UTF-8");
+
+        // Fetch initial members
+        heartbeat();
+    }
+
+    @Override
+    public boolean stop(int level) throws Exception {
+        return super.stop(level);
+    }
+
+    @Override
+    protected Member[] fetchMembers() {
+        List<MemberImpl> members = new ArrayList<>();
+
+        InetAddress[] inetAddresses = null;
+        try {
+            inetAddresses = InetAddress.getAllByName(namespace);
+        } catch (UnknownHostException exception) {
+            log.warn(sm.getString("dnsMembershipProvider.dnsError", namespace), exception);
+        }
+
+        if (inetAddresses != null) {
+            for (InetAddress inetAddress : inetAddresses) {
+                String ip = inetAddress.getHostAddress();
+                byte[] id = md5.digest(ip.getBytes());
+                long aliveTime = -1;
+                MemberImpl member = null;
+                try {
+                    member = new MemberImpl(ip, port, aliveTime);
+                } catch (IOException e) {
+                    log.error(sm.getString("kubernetesMembershipProvider.memberError"), e);
+                    continue;
+                }
+                member.setUniqueId(id);
+                members.add(member);
+            }
+        }
+
+        return members.toArray(new Member[0]);
+    }
+}
\ No newline at end of file

==================================================
