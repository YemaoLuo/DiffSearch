89a6a8c7b11100a7fae5ec963dcb3784d32415ce
==================================================
UCDectector
==================================================
Mark Emlyn
==================================================
Thu Aug 16 19:28:42 2012 +0000
==================================================
BufferedInputFilter.java
UCDectector
 - Use of final


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1373999 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ChunkedInputFilter.java
index db428c26ab..46cb32f683 100644
--- a/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
@@ -40,7 +40,7 @@ public class BufferedInputFilter implements InputFilter {
     // ----------------------------------------------------- Instance Variables
 
     private ByteChunk buffered = null;
-    private ByteChunk tempRead = new ByteChunk(1024);
+    private final ByteChunk tempRead = new ByteChunk(1024);
     private InputBuffer buffer;
     private boolean hasRead = false;
 

==================================================
ChunkedOutputFilter.java
index 081e0f865e..122ec50b83 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -92,7 +92,7 @@ public class ChunkedInputFilter implements InputFilter {
     /**
      * Byte chunk used to read bytes.
      */
-    protected ByteChunk readChunk = new ByteChunk();
+    protected final ByteChunk readChunk = new ByteChunk();
 
 
     /**
@@ -104,7 +104,7 @@ public class ChunkedInputFilter implements InputFilter {
     /**
      * Byte chunk used to store trailing headers.
      */
-    protected ByteChunk trailingHeaders = new ByteChunk();
+    protected final ByteChunk trailingHeaders = new ByteChunk();
 
     /**
      * Flag set to true if the next call to doRead() must parse a CRLF pair

==================================================
FlushableGZIPOutputStream.java
index 6e2c7f983c..24fc4b1c95 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
@@ -57,7 +57,6 @@ public class ChunkedOutputFilter implements OutputFilter {
      * Default constructor.
      */
     public ChunkedOutputFilter() {
-        chunkLength = new byte[10];
         chunkLength[8] = (byte) '\r';
         chunkLength[9] = (byte) '\n';
     }
@@ -75,13 +74,13 @@ public class ChunkedOutputFilter implements OutputFilter {
     /**
      * Buffer used for chunk length conversion.
      */
-    protected byte[] chunkLength = new byte[10];
+    protected final byte[] chunkLength = new byte[10];
 
 
     /**
      * Chunk header.
      */
-    protected ByteChunk chunkHeader = new ByteChunk();
+    protected final ByteChunk chunkHeader = new ByteChunk();
 
 
     // ------------------------------------------------------------- Properties

==================================================
GzipOutputFilter.java
index 4a86894791..c70507943e 100644
--- a/java/org/apache/coyote/http11/filters/FlushableGZIPOutputStream.java
+++ b/java/org/apache/coyote/http11/filters/FlushableGZIPOutputStream.java
@@ -39,7 +39,7 @@ public class FlushableGZIPOutputStream extends GZIPOutputStream {
      * It is used to reserve one byte of real data so that it can be used when
      * flushing the stream.
      */
-    private byte[] lastByte = new byte[1];
+    private final byte[] lastByte = new byte[1];
     private boolean hasLastByte = false;
 
     @Override

==================================================
IdentityInputFilter.java
index 20ba495b7d..9ce9aa105c 100644
--- a/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
@@ -37,7 +37,7 @@ public class GzipOutputFilter implements OutputFilter {
     /**
      * Logger.
      */
-    protected static org.apache.juli.logging.Log log =
+    protected static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(GzipOutputFilter.class);
 
 
@@ -59,7 +59,7 @@ public class GzipOutputFilter implements OutputFilter {
     /**
      * Fake internal output stream.
      */
-    protected OutputStream fakeOutputStream = new FakeOutputStream();
+    protected final OutputStream fakeOutputStream = new FakeOutputStream();
 
 
     // --------------------------------------------------- OutputBuffer Methods
@@ -159,8 +159,8 @@ public class GzipOutputFilter implements OutputFilter {
 
     protected class FakeOutputStream
         extends OutputStream {
-        protected ByteChunk outputChunk = new ByteChunk();
-        protected byte[] singleByteBuffer = new byte[1];
+        protected final ByteChunk outputChunk = new ByteChunk();
+        protected final byte[] singleByteBuffer = new byte[1];
         @Override
         public void write(int b)
             throws IOException {

==================================================
