e422624a4716e3f67430df00eec5ca98b3335319
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57705
==================================================
Mark Thomas
==================================================
Thu Jun 16 12:48:16 2016 +0000
==================================================
RequestFilter.java
index 5462600fae..0c20c266ec 100644
--- a/java/org/apache/catalina/filters/LocalStrings.properties
+++ b/java/org/apache/catalina/filters/LocalStrings.properties
@@ -47,4 +47,6 @@ expiresFilter.invalidDurationUnit=Invalid duration unit (years|months|weeks|days
 httpHeaderSecurityFilter.committed=Unable to add HTTP headers since response is already committed on entry to the HTTP header security Filter
 httpHeaderSecurityFilter.clickjack.invalid=An invalid value [{0}] was specified for the anti click-jacking header
 
+requestFilter.deny=Denied request for [{0}] based on property [{1}]
+
 restCsrfPreventionFilter.invalidNonce=CSRF nonce validation failed
\ No newline at end of file

==================================================
RemoteAddrValve.java
index 00a1d8ab8f..75e35390e8 100644
--- a/java/org/apache/catalina/valves/LocalStrings.properties
+++ b/java/org/apache/catalina/valves/LocalStrings.properties
@@ -46,6 +46,7 @@ remoteIpValve.invalidPortHeader=Invalid value [{0}] found for port in HTTP heade
 
 # Request filter valve - RemoteAddrValve, RemoteHostValve
 requestFilterValve.configInvalid=One or more invalid configuration settings were provided for the Remote[Addr|Host]Valve which prevented the Valve and its parent containers from starting
+requestFilterValve.deny=Denied request for [{0}] based on property [{1}]
 
 sslValve.certError=Failed to process certificate string [{0}] to create a java.security.cert.X509Certificate object
 sslValve.invalidProvider=The SSL provider specified on the connector associated with this request of [{0}] is invalid. The certificate data could not be processed.

==================================================
RemoteHostValve.java
index 810d953396..69c716044d 100644
--- a/java/org/apache/catalina/valves/RemoteAddrValve.java
+++ b/java/org/apache/catalina/valves/RemoteAddrValve.java
@@ -23,6 +23,8 @@ import javax.servlet.ServletException;
 
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**
@@ -34,6 +36,9 @@ import org.apache.catalina.connector.Response;
  */
 public final class RemoteAddrValve extends RequestFilterValve {
 
+    private static final Log log = LogFactory.getLog(RemoteAddrValve.class);
+
+
     // ----------------------------------------------------- Instance Variables
 
     /**
@@ -72,22 +77,8 @@ public final class RemoteAddrValve extends RequestFilterValve {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Extract the desired request property, and pass it (along with the
-     * specified request and response objects) to the protected
-     * <code>process()</code> method to perform the actual filtering.
-     * This method must be implemented by a concrete subclass.
-     *
-     * @param request The servlet request to be processed
-     * @param response The servlet response to be created
-     *
-     * @exception IOException if an input/output error occurs
-     * @exception ServletException if a servlet error occurs
-     */
     @Override
-    public void invoke(Request request, Response response)
-        throws IOException, ServletException {
-
+    public void invoke(Request request, Response response) throws IOException, ServletException {
         String property;
         if (addConnectorPort) {
             property = request.getRequest().getRemoteAddr() + ";" + request.getConnector().getPort();
@@ -95,6 +86,12 @@ public final class RemoteAddrValve extends RequestFilterValve {
             property = request.getRequest().getRemoteAddr();
         }
         process(property, request, response);
+    }
+
 
+
+    @Override
+    protected Log getLog() {
+        return log;
     }
 }

==================================================
RequestFilterValve.java
index a20f0acdeb..90a9c71264 100644
--- a/java/org/apache/catalina/valves/RemoteHostValve.java
+++ b/java/org/apache/catalina/valves/RemoteHostValve.java
@@ -16,14 +16,14 @@
  */
 package org.apache.catalina.valves;
 
-
 import java.io.IOException;
 
 import javax.servlet.ServletException;
 
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Concrete implementation of <code>RequestFilterValve</code> that filters
@@ -34,6 +34,9 @@ import org.apache.catalina.connector.Response;
  */
 public final class RemoteHostValve extends RequestFilterValve {
 
+    private static final Log log = LogFactory.getLog(RemoteHostValve.class);
+
+
     // ----------------------------------------------------- Instance Variables
 
     /**
@@ -71,22 +74,8 @@ public final class RemoteHostValve extends RequestFilterValve {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Extract the desired request property, and pass it (along with the
-     * specified request and response objects) to the protected
-     * <code>process()</code> method to perform the actual filtering.
-     * This method must be implemented by a concrete subclass.
-     *
-     * @param request The servlet request to be processed
-     * @param response The servlet response to be created
-     *
-     * @exception IOException if an input/output error occurs
-     * @exception ServletException if a servlet error occurs
-     */
     @Override
-    public void invoke(Request request, Response response)
-        throws IOException, ServletException {
-
+    public void invoke(Request request, Response response) throws IOException, ServletException {
         String property;
         if (addConnectorPort) {
             property = request.getRequest().getRemoteHost() + ";" + request.getConnector().getPort();
@@ -94,6 +83,11 @@ public final class RemoteHostValve extends RequestFilterValve {
             property = request.getRequest().getRemoteHost();
         }
         process(property, request, response);
+    }
+
 
+    @Override
+    protected Log getLog() {
+        return log;
     }
 }

==================================================
