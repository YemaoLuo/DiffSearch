d947d8f65016979a812357ea98302982d96d0598
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60012
==================================================
Violeta Georgieva
==================================================
Fri Aug 19 07:45:06 2016 +0000
==================================================
AuthenticatorBase.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60012
Improvements in the log messages. Based on suggestions by Nemo Chen.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756878 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JNDIRealm.java
index 8006f53fba..d02ca02dd7 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -438,7 +438,7 @@ public abstract class AuthenticatorBase extends ValveBase
                     if (principal != null) {
                         if (log.isDebugEnabled()) {
                             log.debug("We have cached auth type " + session.getAuthType() +
-                                    " for principal " + session.getPrincipal());
+                                    " for principal " + principal);
                         }
                         request.setAuthType(session.getAuthType());
                         request.setUserPrincipal(principal);

==================================================
CatalinaProperties.java
index 23a9fdb4af..e24f74117c 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -29,7 +29,6 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -1115,7 +1114,7 @@ public class JNDIRealm extends RealmBase {
         } else {
             this.cipherSuitesArray = cipherSuites.trim().split("\\s*,\\s*");
             containerLog.debug(sm.getString("jndiRealm.cipherSuites",
-                    Arrays.asList(this.cipherSuitesArray)));
+                    Arrays.toString(this.cipherSuitesArray)));
         }
         return this.cipherSuitesArray;
     }
@@ -1354,15 +1353,9 @@ public class JNDIRealm extends RealmBase {
                             // Search for additional roles
                             List<String> roles = getRoles(context, user);
                             if (containerLog.isDebugEnabled()) {
-                                Iterator<String> it = roles.iterator();
-                                // TODO: Use a single log message
-                                while (it.hasNext()) {
-                                    containerLog.debug("Found role: " + it.next());
-                                }
+                                containerLog.debug("Found roles: " + roles.toString());
                             }
-                            return (new GenericPrincipal(username,
-                                                         credentials,
-                                                         roles));
+                            return (new GenericPrincipal(username, credentials, roles));
                         }
                     } catch (InvalidNameException ine) {
                         // Log the problem for posterity
@@ -1388,11 +1381,7 @@ public class JNDIRealm extends RealmBase {
             // Search for additional roles
             List<String> roles = getRoles(context, user);
             if (containerLog.isDebugEnabled()) {
-                Iterator<String> it = roles.iterator();
-                // TODO: Use a single log message
-                while (it.hasNext()) {
-                    containerLog.debug("Found role: " + it.next());
-                }
+                containerLog.debug("Found roles: " + roles.toString());
             }
 
             // Create and return a suitable Principal for this user
@@ -1915,8 +1904,7 @@ public class JNDIRealm extends RealmBase {
 
         if (containerLog.isTraceEnabled()) {
             containerLog.trace("  Found " + list.size() + " user internal roles");
-            for (int i=0; i<list.size(); i++)
-                containerLog.trace(  "  Found user internal role " + list.get(i));
+            containerLog.trace("  Found user internal roles " + list.toString());
         }
 
         // Are we configured to do role searches?
@@ -2703,44 +2691,42 @@ public class JNDIRealm extends RealmBase {
         // Get the entry's distinguished name.  For relative results, this means
         // we need to composite a name with the base name, the context name, and
         // the result name.  For non-relative names, use the returned name.
+        String resultName = result.getName();
         if (result.isRelative()) {
            if (containerLog.isTraceEnabled()) {
-               containerLog.trace("  search returned relative name: " +
-                       result.getName());
+               containerLog.trace("  search returned relative name: " + resultName);
            }
            NameParser parser = context.getNameParser("");
            Name contextName = parser.parse(context.getNameInNamespace());
            Name baseName = parser.parse(base);
 
            // Bugzilla 32269
-           Name entryName =
-               parser.parse(new CompositeName(result.getName()).get(0));
+           Name entryName = parser.parse(new CompositeName(resultName).get(0));
 
            Name name = contextName.addAll(baseName);
            name = name.addAll(entryName);
            return name.toString();
         } else {
-           String absoluteName = result.getName();
-           if (containerLog.isTraceEnabled())
-               containerLog.trace("  search returned absolute name: " +
-                       result.getName());
+           if (containerLog.isTraceEnabled()) {
+               containerLog.trace("  search returned absolute name: " + resultName);
+           }
            try {
                // Normalize the name by running it through the name parser.
                NameParser parser = context.getNameParser("");
-               URI userNameUri = new URI(absoluteName);
+               URI userNameUri = new URI(resultName);
                String pathComponent = userNameUri.getPath();
                // Should not ever have an empty path component, since that is /{DN}
                if (pathComponent.length() < 1 ) {
                    throw new InvalidNameException(
                            "Search returned unparseable absolute name: " +
-                           absoluteName );
+                           resultName );
                }
                Name name = parser.parse(pathComponent.substring(1));
                return name.toString();
            } catch ( URISyntaxException e ) {
                throw new InvalidNameException(
                        "Search returned unparseable absolute name: " +
-                       absoluteName );
+                       resultName );
            }
         }
     }

==================================================
StoreLoader.java
index fb2223a5ad..211406fca4 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -60,8 +60,6 @@ public class CatalinaProperties {
     private static void loadProperties() {
 
         InputStream is = null;
-        Throwable error = null;
-
         try {
             String configUrl = System.getProperty("catalina.config");
             if (configUrl != null) {
@@ -97,7 +95,7 @@ public class CatalinaProperties {
                 properties.load(is);
             } catch (Throwable t) {
                 handleThrowable(t);
-                error = t;
+                log.warn(t);
             } finally {
                 try {
                     is.close();
@@ -107,9 +105,9 @@ public class CatalinaProperties {
             }
         }
 
-        if ((is == null) || (error != null)) {
+        if ((is == null)) {
             // Do something
-            log.warn("Failed to load catalina.properties", error);
+            log.warn("Failed to load catalina.properties");
             // That's fine - we have reasonable defaults.
             properties = new Properties();
         }

==================================================
