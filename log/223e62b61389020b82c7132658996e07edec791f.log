223e62b61389020b82c7132658996e07edec791f
==================================================
Complete (hopefully) the security manager clean-up
==================================================
Mark Thomas
==================================================
Thu Jan 19 17:51:38 2023 +0000
==================================================
BeanELResolver.java
index 74ce5f0742..28680c7743 100644
--- a/RELEASE-NOTES
+++ b/RELEASE-NOTES
@@ -28,7 +28,6 @@ CONTENTS:
 * API Stability
 * Bundled APIs
 * Web application reloading and static fields in shared libraries
-* Security manager URLs
 * Symlinking static resources
 * Viewing the Tomcat Change Log
 * Cryptographic software notice
@@ -111,16 +110,6 @@ and putting them in the shared classloader instead (JARs should be put in the
 "lib" folder, and classes should be put in the "classes" folder).
 
 
-======================
-Security manager URLs:
-======================
-In order to grant security permissions to JARs located inside the
-web application repository, use URLs of the following format
-in your policy file:
-
-file:${catalina.base}/webapps/examples/WEB-INF/lib/driver.jar
-
-
 ============================
 Symlinking static resources:
 ============================

==================================================
WebResource.java
index 9b99ef50db..37f37d2769 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -198,10 +198,7 @@ public class BeanELResolver extends ELResolver {
                     this.properties.put(pd.getName(), new BeanProperty(type, pd));
                 }
                 /*
-                 * Populating from any interfaces solves two distinct problems:
-                 * 1. When running under a security manager, classes may be
-                 *    unaccessible but have accessible interfaces.
-                 * 2. It causes default methods to be included.
+                 * Populating from any interfaces causes default methods to be included.
                  */
                 populateFromInterfaces(type);
             } catch (IntrospectionException ie) {

==================================================
ApplicationFilterConfig.java
index 2c8b05da51..f8b85a2fc4 100644
--- a/java/org/apache/catalina/WebResource.java
+++ b/java/org/apache/catalina/WebResource.java
@@ -145,8 +145,13 @@ public interface WebResource {
      * @return the code base for this resource that will be used when looking up the
      * assigned permissions for the code base in the security policy file when
      * running under a security manager.
+     *
+     * @deprecated Unused. Will be removed in Tomcat 12 onwards.
      */
-    URL getCodeBase();
+    @Deprecated
+    default URL getCodeBase() {
+        return null;
+    }
 
     /**
      * @return a reference to the WebResourceRoot of which this WebResource is a

==================================================
JdbcLeakPrevention.java
index ac8626bb34..0fcac1fd9e 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -84,7 +84,6 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      *  instantiating the filter object
      * @exception ServletException if thrown by the filter's init() method
      * @throws NamingException If a JNDI lookup fails
-     * @throws SecurityException If a security manager prevents the creation
      * @throws IllegalArgumentException If the provided configuration is not
      *         valid
      */
@@ -233,7 +232,6 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      * @exception ServletException if thrown by the filter's init() method
      * @throws NamingException If a JNDI lookup fails
      * @throws ReflectiveOperationException If the creation of the filter fails
-     * @throws SecurityException If a security manager prevents the creation
      * @throws IllegalArgumentException If the provided configuration is not
      *         valid
      */

==================================================
WebappClassLoaderBase.java
index adbf8f2b03..1c89c5abac 100644
--- a/java/org/apache/catalina/loader/JdbcLeakPrevention.java
+++ b/java/org/apache/catalina/loader/JdbcLeakPrevention.java
@@ -32,10 +32,6 @@ import java.util.Set;
  * {@link WebappClassLoaderBase#clearReferences()} for details - but the short
  * version is do not just create a new instance of this class with the new
  * keyword.
- *
- * Since this class is loaded by {@link WebappClassLoaderBase}, it cannot refer
- * to any internal Tomcat classes as that will cause the security manager to
- * complain.
  */
 public class JdbcLeakPrevention {
 

==================================================
AbstractArchiveResource.java
index 1de7b7ac73..48c12ca716 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -103,9 +103,6 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
  * <strong>IMPLEMENTATION NOTE</strong> - Local repositories are searched in
  * the order they are added via the initial constructor.
  * <p>
- * <strong>IMPLEMENTATION NOTE</strong> - No check for sealing violations or
- * security is made unless a security manager is present.
- * <p>
  * <strong>IMPLEMENTATION NOTE</strong> - As of 8.0, this class
  * loader implements {@link InstrumentableClassLoader}, permitting web
  * application classes to instrument other classes in the same web
@@ -2254,7 +2251,6 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                 return null;
             }
             Manifest manifest = resource.getManifest();
-            URL codeBase = resource.getCodeBase();
             Certificate[] certificates = resource.getCertificates();
 
             if (transformers.size() > 0) {
@@ -2297,7 +2293,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                         if (manifest == null) {
                             definePackage(packageName, null, null, null, null, null, null, null);
                         } else {
-                            definePackage(packageName, manifest, codeBase);
+                            definePackage(packageName, manifest, null);
                         }
                     } catch (IllegalArgumentException e) {
                         // Ignore: normal error due to dual definition of package
@@ -2308,7 +2304,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
 
             try {
                 clazz = defineClass(name, binaryContent, 0,
-                        binaryContent.length, new CodeSource(codeBase, certificates));
+                        binaryContent.length, new CodeSource(null, certificates));
             } catch (UnsupportedClassVersionError ucve) {
                 throw new UnsupportedClassVersionError(
                         ucve.getLocalizedMessage() + " " +

==================================================
AbstractSingleArchiveResource.java
index 8e4daffddc..03009670f8 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -35,18 +35,23 @@ public abstract class AbstractArchiveResource extends AbstractResource {
     private final AbstractArchiveResourceSet archiveResourceSet;
     private final String baseUrl;
     private final JarEntry resource;
-    private final String codeBaseUrl;
     private final String name;
     private boolean readCerts = false;
     private Certificate[] certificates;
 
-    protected AbstractArchiveResource(AbstractArchiveResourceSet archiveResourceSet,
-            String webAppPath, String baseUrl, JarEntry jarEntry, String codeBaseUrl) {
+
+    @Deprecated
+    protected AbstractArchiveResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
+            String baseUrl, JarEntry jarEntry, @SuppressWarnings("unused") String codeBaseUrl) {
+        this(archiveResourceSet, webAppPath, baseUrl, jarEntry);
+    }
+
+    protected AbstractArchiveResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
+            String baseUrl, JarEntry jarEntry) {
         super(archiveResourceSet.getRoot(), webAppPath);
         this.archiveResourceSet = archiveResourceSet;
         this.baseUrl = baseUrl;
         this.resource = jarEntry;
-        this.codeBaseUrl = codeBaseUrl;
 
         String resourceName = resource.getName();
         if (resourceName.charAt(resourceName.length() - 1) == '/') {
@@ -153,18 +158,6 @@ public abstract class AbstractArchiveResource extends AbstractResource {
         }
     }
 
-    @Override
-    public URL getCodeBase() {
-        try {
-            return new URI(codeBaseUrl).toURL();
-        } catch (MalformedURLException | URISyntaxException e) {
-            if (getLog().isDebugEnabled()) {
-                getLog().debug(sm.getString("fileResource.getUrlFail", codeBaseUrl), e);
-            }
-            return null;
-        }
-    }
-
     @Override
     public final byte[] getContent() {
         long len = getContentLength();

==================================================
CachedResource.java
index ee9b686ee1..ebb2ae2c27 100644
--- a/java/org/apache/catalina/webresources/AbstractSingleArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractSingleArchiveResource.java
@@ -23,9 +23,16 @@ import java.util.jar.JarFile;
 
 public abstract class AbstractSingleArchiveResource extends AbstractArchiveResource {
 
+
+    @Deprecated
+    protected AbstractSingleArchiveResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
+            String baseUrl, JarEntry jarEntry, @SuppressWarnings("unused") String codeBaseUrl) {
+        this(archiveResourceSet, webAppPath, baseUrl, jarEntry);
+    }
+
     protected AbstractSingleArchiveResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
-            String baseUrl, JarEntry jarEntry, String codeBaseUrl) {
-        super(archiveResourceSet, webAppPath, baseUrl, jarEntry, codeBaseUrl);
+            String baseUrl, JarEntry jarEntry) {
+        super(archiveResourceSet, webAppPath, baseUrl, jarEntry);
     }
 
 

==================================================
EmptyResource.java
index 516effdeff..9f9a81d79c 100644
--- a/java/org/apache/catalina/webresources/CachedResource.java
+++ b/java/org/apache/catalina/webresources/CachedResource.java
@@ -361,11 +361,6 @@ public class CachedResource implements WebResource {
         }
     }
 
-    @Override
-    public URL getCodeBase() {
-        return webResource.getCodeBase();
-    }
-
     @Override
     public Certificate[] getCertificates() {
         return webResource.getCertificates();

==================================================
FileResource.java
index 7b35876bc1..99393fe1f5 100644
--- a/java/org/apache/catalina/webresources/EmptyResource.java
+++ b/java/org/apache/catalina/webresources/EmptyResource.java
@@ -150,11 +150,6 @@ public class EmptyResource implements WebResource {
         return null;
     }
 
-    @Override
-    public URL getCodeBase() {
-        return null;
-    }
-
     @Override
     public Certificate[] getCertificates() {
         return null;

==================================================
JarResource.java
index babe1905a7..8cfd49b39e 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -271,15 +271,6 @@ public class FileResource extends AbstractResource {
         }
     }
 
-    @Override
-    public URL getCodeBase() {
-        if (getWebappPath().startsWith("/WEB-INF/classes/") && name.endsWith(".class")) {
-            return getWebResourceRoot().getResource("/WEB-INF/classes/").getURL();
-        } else {
-            return getURL();
-        }
-    }
-
     @Override
     public Certificate[] getCertificates() {
         return null;

==================================================
JarResourceRoot.java
index 23eb6d8d52..265a2f79da 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -32,7 +32,7 @@ public class JarResource extends AbstractSingleArchiveResource {
 
     public JarResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
             String baseUrl, JarEntry jarEntry) {
-        super(archiveResourceSet, webAppPath, "jar:" + baseUrl + "!/", jarEntry, baseUrl);
+        super(archiveResourceSet, webAppPath, "jar:" + baseUrl + "!/", jarEntry);
     }
 
 

==================================================
JarWarResource.java
index fc11a47b05..78f09c7241 100644
--- a/java/org/apache/catalina/webresources/JarResourceRoot.java
+++ b/java/org/apache/catalina/webresources/JarResourceRoot.java
@@ -135,17 +135,6 @@ public class JarResourceRoot extends AbstractResource {
         }
     }
 
-    @Override
-    public URL getCodeBase() {
-        try {
-            return new URI(baseUrl).toURL();
-        } catch (MalformedURLException | URISyntaxException e) {
-            if (getLog().isDebugEnabled()) {
-                getLog().debug(sm.getString("fileResource.getUrlFail", baseUrl), e);
-            }
-            return null;
-        }
-    }
     @Override
     protected Log getLog() {
         return log;

==================================================
WarResource.java
index cce12338a8..8a42892c39 100644
--- a/java/org/apache/catalina/webresources/JarWarResource.java
+++ b/java/org/apache/catalina/webresources/JarWarResource.java
@@ -41,7 +41,7 @@ public class JarWarResource extends AbstractArchiveResource {
 
         super(archiveResourceSet, webAppPath,
                 "jar:war:" + baseUrl + UriUtil.getWarSeparator() + archivePath + "!/",
-                jarEntry, "war:" + baseUrl + UriUtil.getWarSeparator() + archivePath);
+                jarEntry);
         this.archivePath = archivePath;
     }
 

==================================================
