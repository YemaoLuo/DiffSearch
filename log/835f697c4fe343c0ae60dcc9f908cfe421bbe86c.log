835f697c4fe343c0ae60dcc9f908cfe421bbe86c
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56663
==================================================
Remy Maucherat
==================================================
Fri Jun 27 15:52:03 2014 +0000
==================================================
InputBuffer.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56663
BZ56663: Improve available to also include buffered bytes in the Servlet layer, handle a case (thanks telnet) where the amount of remaining bytes could become negative (the input is still finished then of course), filter an extra write event with non blocking write IO if async completes after the first read.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606136 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index ffbeb81baf..03fb73a74e 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -266,7 +266,17 @@ public class InputBuffer extends Reader
 
 
     public boolean isFinished() {
-        return coyoteRequest.isFinished();
+        int available = 0;
+        if (state == BYTE_STATE) {
+            available = bb.getLength();
+        } else if (state == CHAR_STATE) {
+            available = cb.getLength();
+        }
+        if (available > 0) {
+            return false;
+        } else {
+            return coyoteRequest.isFinished();
+        }
     }
 
 

==================================================
IdentityInputFilter.java
index ffd86c4d0c..ab912bb576 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -651,6 +651,9 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                         state = processor.event(status);
                     } else if (processor.isUpgrade()) {
                         state = processor.upgradeDispatch(status);
+                    } else if (status == SocketStatus.OPEN_WRITE) {
+                        // Extra write event likely after async, ignore
+                        state = SocketState.LONG;
                     } else {
                         state = processor.process(wrapper);
                     }

==================================================
