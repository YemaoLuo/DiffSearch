1d56c621dbf38f3f6ac9b6b35394eed59204fae0
==================================================
Refactoring towards v014 API (not yet complete)
==================================================
Mark Emlyn
==================================================
Tue Mar 5 15:50:03 2013 +0000
==================================================
ClientEndpoint.java
Refactoring towards v014 API (not yet complete)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1452863 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClientEndpointConfig.java
index 295704a9c9..be68ef9c9c 100644
--- a/java/javax/websocket/ClientEndpoint.java
+++ b/java/javax/websocket/ClientEndpoint.java
@@ -21,12 +21,14 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import javax.websocket.ClientEndpointConfig.Configurator;
+
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface ClientEndpoint {
     String[] subprotocols();
     Class<? extends Decoder>[] decoders();
     Class<? extends Encoder>[] encoders();
-    public Class<? extends ClientEndpointConfigurator> configurator()
-            default ClientEndpointConfigurator.class;
+    public Class<? extends Configurator> configurator()
+            default Configurator.class;
 }

==================================================
ClientEndpointConfigurationBuilder.java
index 46ebda4844..515e3771d7 100644
--- a/java/javax/websocket/ClientEndpointConfig.java
+++ b/java/javax/websocket/ClientEndpointConfig.java
@@ -16,7 +16,9 @@
  */
 package javax.websocket;
 
+import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 
 public interface ClientEndpointConfig extends EndpointConfig {
 
@@ -24,5 +26,111 @@ public interface ClientEndpointConfig extends EndpointConfig {
 
     List<Extension> getExtensions();
 
-    public ClientEndpointConfigurator getClientEndpointConfigurator();
+    public Configurator getConfigurator();
+
+    public final class Builder {
+
+        private static final Configurator DEFAULT_CONFIGURATOR =
+                new Configurator() {};
+
+
+        public static Builder create() {
+            return new Builder();
+        }
+
+
+        private Builder() {
+            // Hide default constructor
+        }
+
+        private Configurator configurator = DEFAULT_CONFIGURATOR;
+        private List<String> preferredSubprotocols = Collections.EMPTY_LIST;
+        private List<Extension> extensions = Collections.EMPTY_LIST;
+        private List<Encoder> encoders = Collections.EMPTY_LIST;
+        private List<Decoder> decoders = Collections.EMPTY_LIST;
+
+
+        public ClientEndpointConfig build() {
+            return new DefaultClientEndpointConfig(preferredSubprotocols,
+                    extensions, encoders, decoders, configurator);
+        }
+
+
+        public Builder configurator(Configurator configurator) {
+            if (configurator == null) {
+                this.configurator = DEFAULT_CONFIGURATOR;
+            } else {
+                this.configurator = configurator;
+            }
+            return this;
+        }
+
+
+        public Builder preferredSubprotocols(
+                List<String> preferredSubprotocols) {
+            if (preferredSubprotocols == null ||
+                    preferredSubprotocols.size() == 0) {
+                this.preferredSubprotocols = Collections.EMPTY_LIST;
+            } else {
+                this.preferredSubprotocols =
+                        Collections.unmodifiableList(preferredSubprotocols);
+            }
+            return this;
+        }
+
+
+        public Builder extensions(
+                List<Extension> extensions) {
+            if (extensions == null || extensions.size() == 0) {
+                this.extensions = Collections.EMPTY_LIST;
+            } else {
+                this.extensions = Collections.unmodifiableList(extensions);
+            }
+            return this;
+        }
+
+
+        public Builder encoders(List<Encoder> encoders) {
+            if (encoders == null || encoders.size() == 0) {
+                this.encoders = Collections.EMPTY_LIST;
+            } else {
+                this.encoders = Collections.unmodifiableList(encoders);
+            }
+            return this;
+        }
+
+
+        public Builder decoders(List<Decoder> decoders) {
+            if (decoders == null || decoders.size() == 0) {
+                this.decoders = Collections.EMPTY_LIST;
+            } else {
+                this.decoders = Collections.unmodifiableList(decoders);
+            }
+            return this;
+        }
+    }
+
+
+    public abstract class Configurator {
+
+        /**
+         * Provides the client with a mechanism to inspect and/or modify the headers
+         * that are sent to the server to start the WebSocket handshake.
+         *
+         * @param headers   The HTTP headers
+         */
+        public void beforeRequest(Map<String, List<String>> headers) {
+            // NO-OP
+        }
+
+        /**
+         * Provides the client with a mechanism to inspect the handshake response
+         * that is returned from the server.
+         *
+         * @param handshakeResponse The response
+         */
+        public void afterResponse(HandshakeResponse handshakeResponse) {
+            // NO-OP
+        }
+    }
 }

==================================================
ClientEndpointConfigurator.java
deleted file mode 100644
index 0dac6ecbef..0000000000
--- a/java/javax/websocket/ClientEndpointConfigurationBuilder.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket;
-
-import java.util.Collections;
-import java.util.List;
-
-public class ClientEndpointConfigurationBuilder {
-
-    private static final ClientEndpointConfigurator DEFAULT_CONFIGURATOR =
-            new ClientEndpointConfigurator() {};
-
-
-    public static ClientEndpointConfigurationBuilder create() {
-        return new ClientEndpointConfigurationBuilder();
-    }
-
-
-    private ClientEndpointConfigurator configurator = DEFAULT_CONFIGURATOR;
-    private List<String> preferredSubprotocols = Collections.EMPTY_LIST;
-    private List<Extension> extensions = Collections.EMPTY_LIST;
-    private List<Encoder> encoders = Collections.EMPTY_LIST;
-    private List<Decoder> decoders = Collections.EMPTY_LIST;
-
-
-    public ClientEndpointConfig build() {
-        return new DefaultClientEndpointConfig(preferredSubprotocols,
-                extensions, encoders, decoders, configurator);
-    }
-
-
-    public ClientEndpointConfigurationBuilder clientHandshakeConfigurator(
-            ClientEndpointConfigurator clientEndpointConfigurator) {
-        if (clientEndpointConfigurator == null) {
-            configurator = DEFAULT_CONFIGURATOR;
-        } else {
-            configurator = clientEndpointConfigurator;
-        }
-        return this;
-    }
-
-
-    public ClientEndpointConfigurationBuilder preferredSubprotocols(
-            List<String> preferredSubprotocols) {
-        if (preferredSubprotocols == null ||
-                preferredSubprotocols.size() == 0) {
-            this.preferredSubprotocols = Collections.EMPTY_LIST;
-        } else {
-            this.preferredSubprotocols =
-                    Collections.unmodifiableList(preferredSubprotocols);
-        }
-        return this;
-    }
-
-
-    public ClientEndpointConfigurationBuilder extensions(
-            List<Extension> extensions) {
-        if (extensions == null || extensions.size() == 0) {
-            this.extensions = Collections.EMPTY_LIST;
-        } else {
-            this.extensions = Collections.unmodifiableList(extensions);
-        }
-        return this;
-    }
-
-
-    public ClientEndpointConfigurationBuilder encoders(List<Encoder> encoders) {
-        if (encoders == null || encoders.size() == 0) {
-            this.encoders = Collections.EMPTY_LIST;
-        } else {
-            this.encoders = Collections.unmodifiableList(encoders);
-        }
-        return this;
-    }
-
-
-    public ClientEndpointConfigurationBuilder decoders(List<Decoder> decoders) {
-        if (decoders == null || decoders.size() == 0) {
-            this.decoders = Collections.EMPTY_LIST;
-        } else {
-            this.decoders = Collections.unmodifiableList(decoders);
-        }
-        return this;
-    }
-}

==================================================
DefaultClientEndpointConfig.java
deleted file mode 100644
index 0252c6266c..0000000000
--- a/java/javax/websocket/ClientEndpointConfigurator.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket;
-
-import java.util.List;
-import java.util.Map;
-
-public abstract class ClientEndpointConfigurator {
-
-    /**
-     * Provides the client with a mechanism to inspect and/or modify the headers
-     * that are sent to the server to start the WebSocket handshake.
-     *
-     * @param headers   The HTTP headers
-     */
-    public void beforeRequest(Map<String, List<String>> headers) {
-        // NO-OP
-    }
-
-    /**
-     * Provides the client with a mechanism to inspect the handshake response
-     * that is returned from the server.
-     *
-     * @param handshakeResponse The response
-     */
-    public void afterResponse(HandshakeResponse handshakeResponse) {
-        // NO-OP
-    }
-}

==================================================
WsWebSocketContainer.java
index 14881fdc31..8e75ae26f9 100644
--- a/java/javax/websocket/DefaultClientEndpointConfig.java
+++ b/java/javax/websocket/DefaultClientEndpointConfig.java
@@ -27,12 +27,12 @@ final class DefaultClientEndpointConfig implements ClientEndpointConfig {
     private final List<Encoder> encoders;
     private final List<Decoder> decoders;
     private final Map<String,Object> userProperties = new HashMap<>();
-    private final ClientEndpointConfigurator configurator;
+    private final Configurator configurator;
 
 
     DefaultClientEndpointConfig(List<String> preferredSubprotocols,
             List<Extension> extensions, List<Encoder> encoders,
-            List<Decoder> decoders, ClientEndpointConfigurator configurator) {
+            List<Decoder> decoders, Configurator configurator) {
         this.preferredSubprotocols = preferredSubprotocols;
         this.extensions = extensions;
         this.decoders = decoders;
@@ -72,7 +72,7 @@ final class DefaultClientEndpointConfig implements ClientEndpointConfig {
 
 
     @Override
-    public ClientEndpointConfigurator getClientEndpointConfigurator() {
+    public Configurator getConfigurator() {
         return configurator;
     }
 }

==================================================
TestWsRemoteEndpoint.java
index 2249809ec5..f418a78eb4 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -95,7 +95,7 @@ public class WsWebSocketContainer
         }
         int port = path.getPort();
         Map<String,List<String>> reqHeaders = createRequestHeaders(host, port);
-        clientEndpointConfiguration.getClientEndpointConfigurator().
+        clientEndpointConfiguration.getConfigurator().
                 beforeRequest(reqHeaders);
 
         ByteBuffer request = createRequest(path.getRawPath(), reqHeaders);
@@ -142,7 +142,7 @@ public class WsWebSocketContainer
 
             HandshakeResponse handshakeResponse =
                     processResponse(response, channel);
-            clientEndpointConfiguration.getClientEndpointConfigurator().
+            clientEndpointConfiguration.getConfigurator().
                     afterResponse(handshakeResponse);
 
             // Sub-protocol

==================================================
TestWsWebSocketContainer.java
index 530fd856c3..959343c6ea 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -22,7 +22,7 @@ import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import javax.websocket.ClientEndpointConfigurationBuilder;
+import javax.websocket.ClientEndpointConfig.Builder;
 import javax.websocket.ContainerProvider;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
@@ -65,7 +65,7 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                ClientEndpointConfigurationBuilder.create().build(),
+                Builder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_ASYNC));
 

==================================================
