93d471e95d83ba8c86fd2909e1ecefac1680c939
==================================================
Ensure URL patterns provided via web.xml are %nn decoded consistently
==================================================
Mark Thomas
==================================================
Mon Mar 16 14:46:50 2020 +0000
==================================================
ErrorPage.java
Ensure URL patterns provided via web.xml are %nn decoded consistently

Use the encoding of the web.xml file where specified and UTF-8 where no
explicit encoding is specified.


==================================================
FilterMap.java
index f55dc5aac4..bf0920da17 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ErrorPage.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ErrorPage.java
@@ -27,12 +27,12 @@ import org.apache.tomcat.util.buf.UDecoder;
  *
  * @author Craig R. McClanahan
  */
-public class ErrorPage implements Serializable {
+public class ErrorPage extends XmlEncodingBase implements Serializable {
 
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 2L;
 
-    // ----------------------------------------------------- Instance Variables
 
+    // ----------------------------------------------------- Instance Variables
 
     /**
      * The error (status) code for which this error page is active. Note that
@@ -125,7 +125,7 @@ public class ErrorPage implements Serializable {
         //        if ((location == null) || !location.startsWith("/"))
         //            throw new IllegalArgumentException
         //                ("Error Page Location must start with a '/'");
-        this.location = UDecoder.URLDecode(location);
+        this.location = UDecoder.URLDecode(location, getCharset());
 
     }
 

==================================================
LoginConfig.java
index 868ef66f9a..b78b9752c6 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
@@ -136,7 +136,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
         } else {
             String[] results = new String[urlPatterns.length + 1];
             System.arraycopy(urlPatterns, 0, results, 0, urlPatterns.length);
-            results[urlPatterns.length] = UDecoder.URLDecode(urlPattern);
+            results[urlPatterns.length] = UDecoder.URLDecode(urlPattern, getCharset());
             urlPatterns = results;
         }
     }

==================================================
SecurityCollection.java
index e1c69520c5..053eb80cb9 100644
--- a/java/org/apache/tomcat/util/descriptor/web/LoginConfig.java
+++ b/java/org/apache/tomcat/util/descriptor/web/LoginConfig.java
@@ -27,15 +27,14 @@ import org.apache.tomcat.util.buf.UDecoder;
  *
  * @author Craig R. McClanahan
  */
-public class LoginConfig implements Serializable {
+public class LoginConfig extends XmlEncodingBase implements Serializable {
 
 
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 2L;
 
 
     // ----------------------------------------------------------- Constructors
 
-
     /**
      * Construct a new LoginConfig with default properties.
      */
@@ -97,7 +96,7 @@ public class LoginConfig implements Serializable {
         //        if ((errorPage == null) || !errorPage.startsWith("/"))
         //            throw new IllegalArgumentException
         //                ("Error Page resource path must start with a '/'");
-        this.errorPage = UDecoder.URLDecode(errorPage);
+        this.errorPage = UDecoder.URLDecode(errorPage, getCharset());
     }
 
 
@@ -114,7 +113,7 @@ public class LoginConfig implements Serializable {
         //        if ((loginPage == null) || !loginPage.startsWith("/"))
         //            throw new IllegalArgumentException
         //                ("Login Page resource path must start with a '/'");
-        this.loginPage = UDecoder.URLDecode(loginPage);
+        this.loginPage = UDecoder.URLDecode(loginPage, getCharset());
     }
 
 

==================================================
SecurityConstraint.java
index 9130eb87fc..4a0dae5c4a 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
@@ -206,7 +206,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
         if (pattern == null)
             return;
 
-        String decodedPattern = UDecoder.URLDecode(pattern);
+        String decodedPattern = UDecoder.URLDecode(pattern, getCharset());
         String[] results = Arrays.copyOf(patterns, patterns.length + 1);
         results[patterns.length] = decodedPattern;
         patterns = results;

==================================================
WebXml.java
index 3cb06dac27..101a29f7a4 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
@@ -17,6 +17,7 @@
 package org.apache.tomcat.util.descriptor.web;
 
 import java.io.Serializable;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -265,6 +266,15 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
     }
 
 
+    @Override
+    public void setCharset(Charset charset) {
+        super.setCharset(charset);
+        for (SecurityCollection collection : collections) {
+            collection.setCharset(getCharset());
+        }
+    }
+
+
     /**
      * Add a new web resource collection to those protected by this
      * security constraint.

==================================================
TestWebXml.java
index 763ee889a9..814c1d3e1e 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -296,6 +296,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     private final Set<FilterMap> filterMaps = new LinkedHashSet<>();
     private final Set<String> filterMappingNames = new HashSet<>();
     public void addFilterMapping(FilterMap filterMap) {
+        filterMap.setCharset(getCharset());
         filterMaps.add(filterMap);
         filterMappingNames.add(filterMap.getFilterName());
     }
@@ -397,6 +398,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     // error-page
     private final Map<String,ErrorPage> errorPages = new HashMap<>();
     public void addErrorPage(ErrorPage errorPage) {
+        errorPage.setCharset(getCharset());
         errorPages.put(errorPage.getName(), errorPage);
     }
     public Map<String,ErrorPage> getErrorPages() { return errorPages; }
@@ -440,6 +442,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     // Digester will check there is only one of these
     private LoginConfig loginConfig = null;
     public void setLoginConfig(LoginConfig loginConfig) {
+        loginConfig.setCharset(getCharset());
         this.loginConfig = loginConfig;
     }
     public LoginConfig getLoginConfig() { return loginConfig; }

==================================================
