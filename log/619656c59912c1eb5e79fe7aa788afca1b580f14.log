619656c59912c1eb5e79fe7aa788afca1b580f14
==================================================
Correct various spelling errors throughout the source code and documentation.
==================================================
Mark Thomas
==================================================
Fri Aug 10 15:16:11 2018 +0000
==================================================
CoyoteInputStream.java
index 8b8ab2dd74..6ecd8ee890 100644
--- a/java/javax/servlet/resources/web-jsptaglibrary_2_0.xsd
+++ b/java/javax/servlet/resources/web-jsptaglibrary_2_0.xsd
@@ -682,7 +682,7 @@
         short-name      a simple default short name that could be
                         used by a JSP authoring tool to create
                         names with a mnemonic value; for example,
-                        the it may be used as the prefered prefix
+                        the it may be used as the preferred prefix
                         value in taglib directives
 
         uri             a uri uniquely identifying this taglib

==================================================
InputBuffer.java
index b0afed5c10..c7ee2e9228 100644
--- a/java/org/apache/catalina/connector/CoyoteInputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteInputStream.java
@@ -138,7 +138,7 @@ public class CoyoteInputStream extends ServletInputStream {
      * Transfers bytes from the buffer to the specified ByteBuffer. After the
      * operation the position of the ByteBuffer will be returned to the one
      * before the operation, the limit will be the position incremented by
-     * the number of the transfered bytes.
+     * the number of the transferred bytes.
      *
      * @param b the ByteBuffer into which bytes are to be written.
      * @return an integer specifying the actual number of bytes read, or -1 if

==================================================
ExpiresFilter.java
index a65a80d14d..61bacd5064 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -351,7 +351,7 @@ public class InputBuffer extends Reader
      * Transfers bytes from the buffer to the specified ByteBuffer. After the
      * operation the position of the ByteBuffer will be returned to the one
      * before the operation, the limit will be the position incremented by
-     * the number of the transfered bytes.
+     * the number of the transferred bytes.
      *
      * @param to the ByteBuffer into which bytes are to be written.
      * @return an integer specifying the actual number of bytes read, or -1 if

==================================================
DeltaManager.java
index 03d3ce76b5..4de09494ed 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -1170,7 +1170,7 @@ public class ExpiresFilter extends FilterBase {
 
     /**
      * @return the subset of the given {@code str} that is before the first
-     * occurence of the given {@code separator}. Return {@code null}
+     * occurrence of the given {@code separator}. Return {@code null}
      * if the given {@code str} or the given {@code separator} is
      * null. Return and empty string if the {@code separator} is empty.
      *

==================================================
SessionMessageImpl.java
index cc8db666e0..845fa978bc 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -296,7 +296,7 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * Set that state transfered is complete
+     * Set that state transferred is complete
      * @param stateTransfered Fag value
      */
     public void setStateTransfered(boolean stateTransfered) {
@@ -802,8 +802,8 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * Wait that cluster session state is transfered or timeout after 60 Sec
-     * With stateTransferTimeout == -1 wait that backup is transfered (forever mode)
+     * Wait that cluster session state is transferred or timeout after 60 Sec
+     * With stateTransferTimeout == -1 wait that backup is transferred (forever mode)
      * @param beforeSendTime Start instant of the operation
      */
     protected void waitForSendAllSessions(long beforeSendTime) {
@@ -811,7 +811,7 @@ public class DeltaManager extends ClusterManagerBase{
         long reqNow = reqStart ;
         boolean isTimeout = false;
         if(getStateTransferTimeout() > 0) {
-            // wait that state is transfered with timeout check
+            // wait that state is transferred with timeout check
             do {
                 try {
                     Thread.sleep(100);
@@ -823,7 +823,7 @@ public class DeltaManager extends ClusterManagerBase{
             } while ((!getStateTransfered()) && (!isTimeout) && (!isNoContextManagerReceived()));
         } else {
             if(getStateTransferTimeout() == -1) {
-                // wait that state is transfered
+                // wait that state is transferred
                 do {
                     try {
                         Thread.sleep(100);
@@ -1197,7 +1197,7 @@ public class DeltaManager extends ClusterManagerBase{
 
 
     /**
-     * handle receive session state is complete transfered
+     * handle receive session state is complete transferred
      * @param msg Session message
      * @param sender Member which sent the message
      */
@@ -1331,7 +1331,7 @@ public class DeltaManager extends ClusterManagerBase{
      * handle receive that other node want all sessions ( restart )
      * a) send all sessions with one message
      * b) send session at blocks
-     * After sending send state is complete transfered
+     * After sending send state is complete transferred
      * @param msg Session message
      * @param sender Member which sent the message
      * @throws IOException IO error sending messages
@@ -1369,8 +1369,8 @@ public class DeltaManager extends ClusterManagerBase{
         }//end if
 
         SessionMessage newmsg = new SessionMessageImpl(name,
-                SessionMessage.EVT_ALL_SESSION_TRANSFERCOMPLETE, null, "SESSION-STATE-TRANSFERED",
-                "SESSION-STATE-TRANSFERED" + getName());
+                SessionMessage.EVT_ALL_SESSION_TRANSFERCOMPLETE, null, "SESSION-STATE-TRANSFERRED",
+                "SESSION-STATE-TRANSFERRED" + getName());
         newmsg.setTimestamp(findSessionTimestamp);
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("deltaManager.createMessage.allSessionTransfered",getName()));

==================================================
SimpleTcpCluster.java
index 5ad0bcece8..dcfa7f9d8e 100644
--- a/java/org/apache/catalina/ha/session/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/ha/session/mbeans-descriptors.xml
@@ -259,7 +259,7 @@
       writeable="false"/>
     <attribute
       name="stateTransfered"
-      description="Is session state transfered complete? "
+      description="Is session state transferred complete? "
       type="boolean"/>
     <attribute
       name="stateTransferTimeout"

==================================================
CGIServlet.java
index 5a59f37f46..c3adb08f53 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -796,7 +796,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
                 if (log.isDebugEnabled()) {
                     log.debug("Message " + message.toString() + " from type "
                             + message.getClass().getName()
-                            + " transfered but no listener registered");
+                            + " transferred but no listener registered");
                 }
             }
         }

==================================================
StandardContextSF.java
index 2b2089f78a..c8672fffb0 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -1161,7 +1161,7 @@ public final class CGIServlet extends HttpServlet {
                 sb.append(System.lineSeparator());
                 sb.append("Check the HttpServletRequest pathInfo property to see if it is what ");
                 sb.append(System.lineSeparator());
-                sb.append("you meant it to be. You must specify an existant and executable file ");
+                sb.append("you meant it to be. You must specify an existent and executable file ");
                 sb.append(System.lineSeparator());
                 sb.append("as part of the path-info.");
                 sb.append(System.lineSeparator());
@@ -1425,7 +1425,7 @@ public final class CGIServlet extends HttpServlet {
          * directory, and input/output streams
          *
          * <p>
-         * This implements the following CGI specification recommedations:
+         * This implements the following CGI specification recommendations:
          * </p>
          * <UL>
          * <LI> Servers SHOULD provide the "<code>query</code>" component of

==================================================
StoreAppender.java
index fa64e6dbc2..4cb625bc81 100644
--- a/java/org/apache/catalina/storeconfig/StandardContextSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardContextSF.java
@@ -161,7 +161,7 @@ public class StandardContextSF extends StoreFactoryBase {
                             !mover.getConfigOld().canWrite())) {
                 log.error("Cannot move orignal context output file at "
                         + mover.getConfigOld());
-                throw new IOException("Context orginal file at "
+                throw new IOException("Context original file at "
                         + mover.getConfigOld()
                         + " is null, not a file or not writable.");
             }

==================================================
BioSender.java
index e4fdc8b996..12e2c1e23f 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -292,7 +292,7 @@ public class StoreAppender {
      * Determine if the attribute value needs to be stored.
      *
      * @param bean
-     *            orginal bean
+     *            original bean
      * @param bean2
      *            default bean
      * @param attrName

==================================================
StuckThreadDetectionValve.java
index 11c3af832b..550a807ce4 100644
--- a/java/org/apache/catalina/users/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/users/mbeans-descriptors.xml
@@ -43,7 +43,7 @@
             writeable="false"/>
 
     <attribute   name="readonly"
-          description="No persistant save of the user database"
+          description="No persistent save of the user database"
                  type="boolean"
             writeable="false"/>
 

==================================================
Response.java
index a4f7bd0301..ad980afae3 100644
--- a/java/org/apache/catalina/valves/StuckThreadDetectionValve.java
+++ b/java/org/apache/catalina/valves/StuckThreadDetectionValve.java
@@ -353,7 +353,7 @@ public class StuckThreadDetectionValve extends ValveBase {
                 // no need to release the semaphore, it will be GCed
             }
             //else the request went through before being marked as stuck, no need
-            //to sync agains the semaphore
+            //to sync against the semaphore
             return threadState;
         }
 

==================================================
DriverManagerConnectionFactory.java
index e877883d5c..1aa1937749 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -98,7 +98,7 @@ public final class Response {
     /**
      * Committed flag.
      */
-    volatile boolean commited = false;
+    volatile boolean committed = false;
 
 
     /**
@@ -252,15 +252,15 @@ public final class Response {
 
 
     public boolean isCommitted() {
-        return commited;
+        return committed;
     }
 
 
     public void setCommitted(boolean v) {
-        if (v && !this.commited) {
+        if (v && !this.committed) {
             this.commitTime = System.currentTimeMillis();
         }
-        this.commited = v;
+        this.committed = v;
     }
 
     /**
@@ -333,7 +333,7 @@ public final class Response {
 
     public void reset() throws IllegalStateException {
 
-        if (commited) {
+        if (committed) {
             throw new IllegalStateException();
         }
 
@@ -612,7 +612,7 @@ public final class Response {
         contentLength = -1;
         status = 200;
         message = null;
-        commited = false;
+        committed = false;
         commitTime = -1;
         errorException = null;
         errorState.set(0);

==================================================
ManagedConnection.java
index 1b5f916641..c8f462d755 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DriverManagerConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DriverManagerConnectionFactory.java
@@ -47,7 +47,7 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
      */
     public DriverManagerConnectionFactory(final String connectionUri) {
         this.connectionUri = connectionUri;
-        this.propeties = new Properties();
+        this.properties = new Properties();
     }
 
     /**
@@ -61,7 +61,7 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
      */
     public DriverManagerConnectionFactory(final String connectionUri, final Properties properties) {
         this.connectionUri = connectionUri;
-        this.propeties = properties;
+        this.properties = properties;
     }
 
     /**
@@ -83,17 +83,17 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
 
     @Override
     public Connection createConnection() throws SQLException {
-        if (null == propeties) {
+        if (null == properties) {
             if (userName == null && userPassword == null) {
                 return DriverManager.getConnection(connectionUri);
             }
             return DriverManager.getConnection(connectionUri, userName, userPassword);
         }
-        return DriverManager.getConnection(connectionUri, propeties);
+        return DriverManager.getConnection(connectionUri, properties);
     }
 
     private final String connectionUri;
     private String userName;
     private String userPassword;
-    private Properties propeties;
+    private Properties properties;
 }

==================================================
TransactionContext.java
index e47b16f59f..f22022cb13 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/managed/ManagedConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/managed/ManagedConnection.java
@@ -204,7 +204,7 @@ public class ManagedConnection<C extends Connection> extends DelegatingConnectio
      */
     protected class CompletionListener implements TransactionContextListener {
         @Override
-        public void afterCompletion(final TransactionContext completedContext, final boolean commited) {
+        public void afterCompletion(final TransactionContext completedContext, final boolean committed) {
             if (completedContext == transactionContext) {
                 transactionComplete();
             }

==================================================
TransactionContextListener.java
index 7aef25dd12..76d2eada9d 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/managed/TransactionContext.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/managed/TransactionContext.java
@@ -67,7 +67,7 @@ public class TransactionContext {
     }
 
     /**
-     * Provided for backwards compatability
+     * Provided for backwards compatibility
      *
      * @param transactionRegistry the TransactionRegistry used to obtain the XAResource for the
      * shared connection

==================================================
TransactionRegistry.java
index 567eb16b76..95eae21d94 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/managed/TransactionContextListener.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/managed/TransactionContextListener.java
@@ -28,8 +28,8 @@ public interface TransactionContextListener {
      *
      * @param transactionContext
      *            the transaction context that completed
-     * @param commited
+     * @param committed
      *            true if the transaction committed; false otherwise
      */
-    void afterCompletion(TransactionContext transactionContext, boolean commited);
+    void afterCompletion(TransactionContext transactionContext, boolean committed);
 }

==================================================
ClassParser.java
index 190c025f1a..6a01610bd1 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/managed/TransactionRegistry.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/managed/TransactionRegistry.java
@@ -61,7 +61,7 @@ public class TransactionRegistry {
     }
 
     /**
-     * Provided for backwards compatability
+     * Provided for backwards compatibility
      * @param transactionManager the transaction manager used to enlist connections
      */
     public TransactionRegistry(final TransactionManager transactionManager) {

==================================================
RulesBase.java
index dac8496ff0..a43080af61 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -29,7 +29,7 @@ import org.apache.tomcat.util.bcel.Const;
  * Wrapper class that parses a given Java .class file. The method <A
  * href ="#parse">parse</A> returns a <A href ="JavaClass.html">
  * JavaClass</A> object on success. When an I/O error or an
- * inconsistency occurs an appropiate exception is propagated back to
+ * inconsistency occurs an appropriate exception is propagated back to
  * the caller.
  *
  * The structure and the names comply, except for a few conveniences,
@@ -141,7 +141,7 @@ public final class ClassParser {
      */
     private void readClassInfo() throws IOException, ClassFormatException {
         access_flags = dataInputStream.readUnsignedShort();
-        /* Interfaces are implicitely abstract, the flag should be set
+        /* Interfaces are implicitly abstract, the flag should be set
          * according to the JVM specification.
          */
         if ((access_flags & Const.ACC_INTERFACE) != 0) {

==================================================
MultipartStream.java
index 40222be9c4..b163df6153 100644
--- a/java/org/apache/tomcat/util/digester/package.html
+++ b/java/org/apache/tomcat/util/digester/package.html
@@ -1028,7 +1028,7 @@ can be downloaded.
 URLs may be local or remote but if the URL is chosen to be local, it is likely only
 to function correctly on a small number of machines (which are configured precisely
 to allow the xml to be parsed). This is usually unsatisfactory and so a universally
-accessable URL is preferred. This usually means an internet URL.
+accessible URL is preferred. This usually means an internet URL.
 </p>
 <p>
 To recap, in practice the <code><em>system-identifier</em></code> will (most likely) be an

==================================================
ParameterParser.java
index 116201ed29..351fa025bd 100644
--- a/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
@@ -605,7 +605,7 @@ public class MultipartStream {
      * @throws IOException if an i/o error occurs.
      */
     public boolean skipPreamble() throws IOException {
-        // First delimiter may be not preceeded with a CRLF.
+        // First delimiter may be not preceded with a CRLF.
         System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);
         boundaryLength = boundary.length - 2;
         computeBoundaryTable();

==================================================
SecureNioChannel.java
index b01f7eb94a..e0ccd916f5 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
@@ -119,7 +119,7 @@ public class ParameterParser {
     /**
      * Tests if the given character is present in the array of characters.
      *
-     * @param ch the character to test for presense in the array of characters
+     * @param ch the character to test for presence in the array of characters
      * @param charray the array of characters to test against
      *
      * @return {@code true} if the character is present in the array of

==================================================
MapDemo.java
index 2ae111d02f..e5be35503d 100644
--- a/res/rat/rat-excludes.txt
+++ b/res/rat/rat-excludes.txt
@@ -51,7 +51,7 @@
     (*.gif, *.jpg are also binary, but are automatically detected by RAT as
     ones, so no explicit configuration is needed)
 
-  - Markdown files for display in ther GitHub UI
+  - Markdown files for display in their GitHub UI
 
   - Temporary cache files used by Checkstle
 
@@ -184,4 +184,4 @@ output/dist/temp/safeToDelete.tmp
 
 **/*.md
 
-output/res/checkstyle/*
\ No newline at end of file
+output/res/checkstyle/*

==================================================
TestWebXmlOrdering.java
index 6d0aefcb78..a45c84e0ea 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -136,7 +136,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
         long start = System.currentTimeMillis();
         //create a channel object
         ManagedChannel channel = (ManagedChannel) ChannelCreator.createChannel(args);
-        //define a map name, unless one is defined as a paramters
+        //define a map name, unless one is defined as a parameters
         String mapName = "MapDemo";
         if ( args.length > 0 && (!args[args.length-1].startsWith("-"))) {
             mapName = args[args.length-1];

==================================================
