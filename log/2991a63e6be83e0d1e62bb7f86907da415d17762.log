2991a63e6be83e0d1e62bb7f86907da415d17762
==================================================
Updated documentation and added wrappers for toString and added an example
==================================================
Filip Hanik
==================================================
Wed Nov 12 21:50:03 2008 +0000
==================================================
JdbcInterceptor.java
index cd68836a0f..9bc11debbf 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -338,6 +338,98 @@
   </subsection>
 </section>
 
+<section name="Code Example">
+  <p>Other examples of Tomcat configuration for JDBC usage can be found <a href="http://tomcat.apache.org/tomcat-6.0-doc/jndi-datasource-examples-howto.html">in the Tomcat documentation</a>. </p>
+  <subsection name="Plain Ol' Java">
+    <p>Here is a simple example of how to create and use a data source.</p> 
+    <source>
+        import java.sql.Connection;
+        import java.sql.ResultSet;
+        import java.sql.Statement;
+        
+        import org.apache.tomcat.jdbc.pool.DataSource;
+        import org.apache.tomcat.jdbc.pool.PoolProperties;
+        
+        public class SimplePOJOExample {
+        
+            public static void main(String[] args) throws Exception {
+                PoolProperties p = new PoolProperties();
+                p.setUrl("jdbc:mysql://localhost:3306/mysql?autoReconnect=true");
+                p.setDriverClassName("com.mysql.jdbc.Driver");
+                p.setUsername("root");
+                p.setPassword("password");
+                p.setJmxEnabled(true);
+                p.setTestWhileIdle(false);
+                p.setTestOnBorrow(true);
+                p.setValidationQuery("SELECT 1");
+                p.setTestOnReturn(false);
+                p.setValidationInterval(30000);
+                p.setTimeBetweenEvictionRunsMillis(30000);
+                p.setMaxActive(100);
+                p.setInitialSize(10);
+                p.setMaxWait(10000);
+                p.setRemoveAbandonedTimeout(60);
+                p.setMinEvictableIdleTimeMillis(30000);
+                p.setMinIdle(10);
+                p.setLogAbandoned(true);
+                p.setRemoveAbandoned(true);
+                DataSource datasource = new DataSource();
+                datasource.setPoolProperties(p); 
+                
+                Connection con = null;
+                try {            
+                  con = datasource.getConnection();
+                  Statement st = con.createStatement();
+                  ResultSet rs = st.executeQuery("select * from user");
+                  int cnt = 1;
+                  while (rs.next()) {
+                      System.out.println((cnt++)+". Host:" +rs.getString("Host")+" User:"+rs.getString("User")+" Password:"+rs.getString("Password"));
+                  }
+                  rs.close();
+                  st.close();
+                } finally {
+                  if (con!=null) try {con.close();}catch (Exception ignore) {}
+                }  
+            }
+        
+        }
+    </source>
+  </subsection>
+  <subsection name="As a Resource">
+    <p>And here is an example on how to configure a resource for JNDI lookups</p>
+    <source>
+    &lt;Resource name=&quot;jdbc/TestDB&quot; 
+              auth=&quot;Container&quot; 
+              type=&quot;javax.sql.DataSource&quot; 
+              factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;
+              testWhileIdle=&quot;true&quot;
+              testOnBorrow=&quot;true&quot;
+              testOnReturn=&quot;false&quot;
+              validationQuery=&quot;SELECT 1&quot;
+              validationInterval=&quot;30000&quot;
+              timeBetweenEvictionRunsMillis=&quot;30000&quot;
+              maxActive=&quot;100&quot; 
+              minIdle=&quot;10&quot; 
+              maxWait=&quot;10000&quot; 
+              initialSize=&quot;10&quot;
+              removeAbandonedTimeout=&quot;60&quot;
+              removeAbandoned=&quot;true&quot;
+              logAbandoned=&quot;true&quot;
+              minEvictableIdleTimeMillis=&quot;30000&quot; 
+              jmxEnabled=&quot;true&quot;
+              username=&quot;root&quot; 
+              password=&quot;password&quot; 
+              driverClassName=&quot;com.mysql.jdbc.Driver&quot;
+              url=&quot;jdbc:mysql://localhost:3306/mysql?autoReconnect=true&quot;/&gt;
+
+    
+    </source>
+  
+  </subsection>
+  
+</section>
+
+
 </body>
 
 </document>

==================================================
PooledConnection.java
index b48bf04c6d..21e26b859d 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -25,6 +25,7 @@ import java.lang.reflect.Method;
  */
 public abstract class JdbcInterceptor implements InvocationHandler {
     public  static final String CLOSE_VAL = "close";
+    public  static final String TOSTRING_VAL = "toString";
 
     private JdbcInterceptor next = null;
 

==================================================
ProxyConnection.java
index 27767dd918..364eeeeaff 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -300,5 +300,9 @@ public class PooledConnection {
             this.handler = new WeakReference<JdbcInterceptor>(handler);
         }
     }
+    
+    public String toString() {
+        return "PooledConnection["+(connection!=null?connection.toString():"null")+"]";
+    }
 
 }

==================================================
SimplePOJOExample.java
index feba58f5f9..5aa2cf2094 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
@@ -74,6 +74,8 @@ public class ProxyConnection extends JdbcInterceptor {
             this.connection = null;
             pool.returnConnection(poolc);
             return null;
+        } else if (TOSTRING_VAL==method.getName()) {
+            return this.toString();
         }
         return method.invoke(connection.getConnection(),args);
     }
@@ -89,5 +91,9 @@ public class ProxyConnection extends JdbcInterceptor {
     public ConnectionPool getParentPool() {
         return pool;
     }
+    
+    public String toString() {
+        return "ProxyConnection["+(connection!=null?connection.toString():"null")+"]";
+    }
 
 }

==================================================
