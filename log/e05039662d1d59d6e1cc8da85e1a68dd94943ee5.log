e05039662d1d59d6e1cc8da85e1a68dd94943ee5
==================================================
Update WebSocket API to latest EG version (between v011 and v012)
==================================================
Mark Emlyn
==================================================
Thu Jan 31 12:15:23 2013 +0000
==================================================
ClientEndpointConfiguration.java
Update WebSocket API to latest EG version (between v011 and v012)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1440926 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerProvider.java
index af0150dccf..f83e92b87b 100644
--- a/java/javax/websocket/ClientEndpointConfiguration.java
+++ b/java/javax/websocket/ClientEndpointConfiguration.java
@@ -23,7 +23,7 @@ public interface ClientEndpointConfiguration extends EndpointConfiguration {
 
     List<String> getPreferredSubprotocols();
 
-    List<String> getExtensions();
+    List<Extension> getExtensions();
 
     /**
      * Provides the client with a mechanism to inspect and/or modify the headers

==================================================
DefaultClientConfiguration.java
index 2e3ada5ba1..9210ea7995 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -16,21 +16,12 @@
  */
 package javax.websocket;
 
-import java.util.Map;
-import java.util.WeakHashMap;
-
 /**
  * Provides access to the implementation. This version of the API is hard-coded
  * to use the Apache Tomcat WebSocket implementation.
  */
 public class ContainerProvider {
 
-    // Needs to be a WeakHashMap to prevent memory leaks when a context is
-    // stopped
-    private static Map<ClassLoader,WebSocketContainer> classLoaderContainerMap =
-            new WeakHashMap<>();
-    private static Object classLoaderContainerMapLock = new Object();
-
     private static final String DEFAULT_PROVIDER_CLASS_NAME =
             "org.apache.tomcat.websocket.WsWebSocketContainer";
 
@@ -46,22 +37,15 @@ public class ContainerProvider {
     }
 
     /**
-     * Obtain a reference to the per class loader ClientContainer used to create
-     * outgoing WebSocket connections.
+     * Create a new ClientContainer used to create outgoing WebSocket
+     * connections.
      */
-    public static WebSocketContainer getClientContainer() {
-        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+    public static WebSocketContainer createClientContainer() {
         WebSocketContainer result = null;
-        synchronized (classLoaderContainerMapLock) {
-            result = classLoaderContainerMap.get(tccl);
-            if (result == null) {
-                try {
-                    result = clazz.newInstance();
-                } catch (InstantiationException | IllegalAccessException e) {
-                    throw new IllegalArgumentException(e);
-                }
-                classLoaderContainerMap.put(tccl, result);
-            }
+        try {
+            result = clazz.newInstance();
+        } catch (InstantiationException | IllegalAccessException e) {
+            throw new IllegalArgumentException(e);
         }
         return result;
     }

==================================================
Extension.java
index 813dbb83b0..528a89ec55 100644
--- a/java/javax/websocket/DefaultClientConfiguration.java
+++ b/java/javax/websocket/DefaultClientConfiguration.java
@@ -22,7 +22,7 @@ import java.util.Map;
 
 public class DefaultClientConfiguration implements ClientEndpointConfiguration {
     private List<String> preferredSubprotocols = new ArrayList<>();
-    private List<String> extensions = new ArrayList<>();
+    private List<Extension> extensions = new ArrayList<>();
     private List<Encoder> encoders = new ArrayList<>();
     private List<Decoder> decoders = new ArrayList<>();
 
@@ -38,12 +38,12 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
     }
 
     @Override
-    public List<String> getExtensions() {
+    public List<Extension> getExtensions() {
         return extensions;
     }
 
     public ClientEndpointConfiguration setExtensions(
-            List<String> extensions) {
+            List<Extension> extensions) {
         this.extensions = extensions;
         return this;
     }

==================================================
RemoteEndpoint.java
index ade2f9a055..b95b27b8bd 100644
--- a/java/javax/websocket/Extension.java
+++ b/java/javax/websocket/Extension.java
@@ -16,9 +16,14 @@
  */
 package javax.websocket;
 
-import java.util.Map;
+import java.util.List;
 
 public interface Extension {
     String getName();
-    Map<String,String> getParameters();
+    List<Parameter> getParameters();
+
+    interface Parameter {
+        String getName();
+        String getValue();
+    }
 }

==================================================
Session.java
index 862e80daa3..9165400608 100644
--- a/java/javax/websocket/RemoteEndpoint.java
+++ b/java/javax/websocket/RemoteEndpoint.java
@@ -80,8 +80,8 @@ public interface RemoteEndpoint {
 
     void sendObjectByCompletion(Object obj, SendHandler completion);
 
-    void sendPing(ByteBuffer applicationData) throws IOException;
+    void sendPing(ByteBuffer applicationData) throws IOException, IllegalArgumentException;
 
-    void sendPong(ByteBuffer applicationData) throws IOException;
+    void sendPong(ByteBuffer applicationData) throws IOException, IllegalArgumentException;
 }
 

==================================================
WsSession.java
index d77e8ecc1a..9cb38f3642 100644
--- a/java/javax/websocket/Session.java
+++ b/java/javax/websocket/Session.java
@@ -16,6 +16,7 @@
  */
 package javax.websocket;
 
+import java.io.Closeable;
 import java.io.IOException;
 import java.net.URI;
 import java.security.Principal;
@@ -23,7 +24,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-public interface Session {
+public interface Session extends Closeable {
 
     /**
      * Returns the container that created this session.
@@ -41,7 +42,7 @@ public interface Session {
 
     String getNegotiatedSubprotocol();
 
-    List<String> getNegotiatedExtensions();
+    List<Extension> getNegotiatedExtensions();
 
     boolean isSecure();
 
@@ -66,6 +67,7 @@ public interface Session {
      *
      * @throws IOException
      */
+    @Override
     void close() throws IOException;
 
 

==================================================
TestContainerProvider.java
index 01b329cb1c..e806364368 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -33,6 +33,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.Endpoint;
+import javax.websocket.Extension;
 import javax.websocket.MessageHandler;
 import javax.websocket.PongMessage;
 import javax.websocket.RemoteEndpoint;
@@ -174,7 +175,7 @@ public class WsSession implements Session {
 
 
     @Override
-    public List<String> getNegotiatedExtensions() {
+    public List<Extension> getNegotiatedExtensions() {
         // TODO Auto-generated method stub
         return null;
     }

==================================================
TestWsWebSocketContainer.java
deleted file mode 100644
index 98728b9228..0000000000
--- a/test/javax/websocket/TestContainerProvider.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket;
-
-import java.io.IOException;
-
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import org.apache.catalina.Host;
-import org.apache.catalina.core.StandardContext;
-import org.apache.catalina.core.StandardHost;
-import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.ByteChunk;
-
-public class TestContainerProvider extends TomcatBaseTest {
-
-    /*
-     * Obtain a reference to the client container from a web app.
-     * Stop the web app.
-     * Make sure that there is no memory leak.
-     */
-    @Test
-    public void testGetClientContainer() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
-
-        // Must have a real docBase - just use temp
-        StandardContext ctx = (StandardContext)
-            tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-
-        // Map the test Servlet
-        GetClientContainerServlet ccServlet = new GetClientContainerServlet();
-        Tomcat.addServlet(ctx, "ccServlet", ccServlet);
-        ctx.addServletMapping("/", "ccServlet");
-
-        tomcat.start();
-
-        ByteChunk body = getUrl("http://localhost:" + getPort() + "/");
-
-        Assert.assertEquals("PASS", body.toString());
-
-        Host host = tomcat.getHost();
-        host.removeChild(ctx);
-
-        String[] leaks = ((StandardHost) host).findReloadedContextMemoryLeaks();
-
-        Assert.assertEquals(0, leaks.length);
-    }
-
-    private static class GetClientContainerServlet extends HttpServlet {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
-                throws ServletException, IOException {
-
-            WebSocketContainer wsc = ContainerProvider.getClientContainer();
-
-            resp.setContentType("text/plain");
-
-            if (wsc == null) {
-                resp.getWriter().print("FAIL");
-            } else {
-                resp.getWriter().print("PASS");
-            }
-        }
-    }
-}

==================================================
