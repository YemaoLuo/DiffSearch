e59bc2894855aafe66f73f9e6b9452895a2834c5
==================================================
Refactor TagPluginManager to use Digester
==================================================
Jeremy Boynes
==================================================
Sun Nov 17 01:31:56 2013 +0000
==================================================
TagPluginManager.java
Refactor TagPluginManager to use Digester
The split in packages is due to import restrictions between o.a.tomcat and o.a.jasper

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1542630 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TagPluginParser.java
index d7e892938b..e931ceacb3 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -17,22 +17,22 @@
 package org.apache.jasper.compiler;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.net.URL;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Iterator;
+import java.util.Map;
 
 import javax.servlet.ServletContext;
 
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.tagplugin.TagPlugin;
 import org.apache.jasper.compiler.tagplugin.TagPluginContext;
-import org.apache.jasper.xmlparser.ParserUtils;
-import org.apache.jasper.xmlparser.TreeNode;
+import org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser;
+import org.xml.sax.SAXException;
 
 /**
  * Manages tag plugin optimizations.
+ *
  * @author Kin-man Chung
  */
 public class TagPluginManager {
@@ -40,11 +40,9 @@ public class TagPluginManager {
     private static final String META_INF_JASPER_TAG_PLUGINS_XML =
             "META-INF/org.apache.jasper/tagPlugins.xml";
     private static final String TAG_PLUGINS_XML = "/WEB-INF/tagPlugins.xml";
-    private static final String TAG_PLUGINS_ROOT_ELEM = "tag-plugins";
-
-    private boolean initialized = false;
-    private HashMap<String, TagPlugin> tagPlugins = null;
     private final ServletContext ctxt;
+    private HashMap<String, TagPlugin> tagPlugins;
+    private boolean initialized = false;
 
     public TagPluginManager(ServletContext ctxt) {
         this.ctxt = ctxt;
@@ -54,93 +52,47 @@ public class TagPluginManager {
             throws JasperException {
 
         init(err);
-        if (tagPlugins == null || tagPlugins.size() == 0) {
-            return;
+        if (!tagPlugins.isEmpty()) {
+            page.visit(new NodeVisitor(this, pageInfo));
         }
-
-        page.visit(new NodeVisitor(this, pageInfo));
     }
 
     private void init(ErrorDispatcher err) throws JasperException {
         if (initialized)
             return;
 
-        tagPlugins = new HashMap<>();
+        TagPluginParser parser = new TagPluginParser(ctxt);
 
-        Enumeration<URL> urls = null;
         try {
-            urls = ctxt.getClassLoader().getResources(
-                    META_INF_JASPER_TAG_PLUGINS_XML);
-        } catch (IOException ioe) {
-            throw new JasperException(ioe);
-        }
-
-        if (urls != null) {
-            while(urls.hasMoreElements()) {
-                URL url = urls.nextElement();
-                try (InputStream is = url.openStream()){
-                    loadTagPlugins(err, is);
-                } catch(IOException ioe) {
-                    throw new JasperException(ioe);
+            Enumeration<URL> urls =
+                    ctxt.getClassLoader().getResources(META_INF_JASPER_TAG_PLUGINS_XML);
+            if (urls != null) {
+                while (urls.hasMoreElements()) {
+                    URL url = urls.nextElement();
+                    parser.parse(url);
                 }
             }
-        }
 
-        try (InputStream is = ctxt.getResourceAsStream(TAG_PLUGINS_XML)) {
-            if (is != null) {
-                loadTagPlugins(err, is);
+            URL url = ctxt.getResource(TAG_PLUGINS_XML);
+            if (url != null) {
+                parser.parse(url);
             }
-        } catch (IOException ioe) {
-            throw new JasperException(ioe);
+        } catch (IOException | SAXException e) {
+            throw new JasperException(e);
         }
 
-        initialized = true;
-    }
-
-
-    private void loadTagPlugins(ErrorDispatcher err, InputStream is)
-            throws JasperException {
-
-        TreeNode root =
-                (new ParserUtils()).parseXMLDocument(TAG_PLUGINS_XML, is);
-        if (root == null) {
-            return;
-        }
-
-        if (!TAG_PLUGINS_ROOT_ELEM.equals(root.getName())) {
-            err.jspError("jsp.error.plugin.wrongRootElement", TAG_PLUGINS_XML,
-                         TAG_PLUGINS_ROOT_ELEM);
-        }
-
-        tagPlugins = new HashMap<>();
-        Iterator<TreeNode> pluginList = root.findChildren("tag-plugin");
-        while (pluginList.hasNext()) {
-            TreeNode pluginNode = pluginList.next();
-            TreeNode tagClassNode = pluginNode.findChild("tag-class");
-            if (tagClassNode == null) {
-                // Error
-                return;
-            }
-            String tagClass = tagClassNode.getBody().trim();
-            TreeNode pluginClassNode = pluginNode.findChild("plugin-class");
-            if (pluginClassNode == null) {
-                // Error
-                return;
-            }
-
-            String pluginClassStr = pluginClassNode.getBody();
-            TagPlugin tagPlugin = null;
+        Map<String, String> plugins = parser.getPlugins();
+        tagPlugins = new HashMap<>(plugins.size());
+        for (Map.Entry<String, String> entry : plugins.entrySet()) {
             try {
-                Class<?> pluginClass =
-                        ctxt.getClassLoader().loadClass(pluginClassStr);
-                tagPlugin = (TagPlugin) pluginClass.newInstance();
+                String tagClass = entry.getKey();
+                String pluginName = entry.getValue();
+                Class<?> pluginClass = ctxt.getClassLoader().loadClass(pluginName);
+                TagPlugin plugin = (TagPlugin) pluginClass.newInstance();
+                tagPlugins.put(tagClass, plugin);
             } catch (Exception e) {
-                throw new JasperException(e);
-            }
-            if (tagPlugin == null) {
-                return;
+                err.jspError(e);
             }
-            tagPlugins.put(tagClass, tagPlugin);
         }
         initialized = true;
     }
@@ -148,7 +100,7 @@ public class TagPluginManager {
     /**
      * Invoke tag plugin for the given custom tag, if a plugin exists for
      * the custom tag's tag handler.
-     *
+     * <p/>
      * The given custom tag node will be manipulated by the plugin.
      */
     private void invokePlugin(Node.CustomTag n, PageInfo pageInfo) {
@@ -180,9 +132,9 @@ public class TagPluginManager {
 
     private static class TagPluginContextImpl implements TagPluginContext {
         private final Node.CustomTag node;
-        private Node.Nodes curNodes;
         private final PageInfo pageInfo;
         private final HashMap<String, Object> pluginAttributes;
+        private Node.Nodes curNodes;
 
         TagPluginContextImpl(Node.CustomTag n, PageInfo pageInfo) {
             this.node = n;
@@ -198,7 +150,7 @@ public class TagPluginManager {
         @Override
         public TagPluginContext getParentContext() {
             Node parent = node.getParent();
-            if (! (parent instanceof Node.CustomTag)) {
+            if (!(parent instanceof Node.CustomTag)) {
                 return null;
             }
             return ((Node.CustomTag) parent).getTagPluginContext();
@@ -261,14 +213,14 @@ public class TagPluginManager {
         @Override
         public void generateJavaSource(String sourceCode) {
             curNodes.add(new Node.Scriptlet(sourceCode, node.getStart(),
-                                            null));
+                    null));
         }
 
         @Override
         public void generateAttribute(String attributeName) {
             curNodes.add(new Node.AttributeGenerator(node.getStart(),
-                                                     attributeName,
-                                                     node));
+                    attributeName,
+                    node));
         }
 
         @Override
@@ -291,7 +243,7 @@ public class TagPluginManager {
 
         private Node.JspAttribute getNodeAttribute(String attribute) {
             Node.JspAttribute[] attrs = node.getJspAttributes();
-            for (int i=0; attrs != null && i < attrs.length; i++) {
+            for (int i = 0; attrs != null && i < attrs.length; i++) {
                 if (attrs[i].getName().equals(attribute)) {
                     return attrs[i];
                 }
@@ -299,4 +251,6 @@ public class TagPluginManager {
             return null;
         }
     }
+
 }
+

==================================================
