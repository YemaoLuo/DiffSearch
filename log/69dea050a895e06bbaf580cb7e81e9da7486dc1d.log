69dea050a895e06bbaf580cb7e81e9da7486dc1d
==================================================
Format the code. No functional changes.
==================================================
Violeta Georgieva
==================================================
Wed Feb 8 08:06:38 2017 +0000
==================================================
WsFrameBase.java
Format the code. No functional changes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1782116 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrameClient.java
index 84e8132e7d..2495812e77 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -42,8 +42,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public abstract class WsFrameBase {
 
-    private static final StringManager sm =
-            StringManager.getManager(WsFrameBase.class);
+    private static final StringManager sm = StringManager.getManager(WsFrameBase.class);
 
     // Connection level attributes
     protected final WsSession wsSession;
@@ -88,10 +87,8 @@ public abstract class WsFrameBase {
     public WsFrameBase(WsSession wsSession, Transformation transformation) {
         inputBuffer = ByteBuffer.allocate(Constants.DEFAULT_BUFFER_SIZE);
         inputBuffer.position(0).limit(0);
-        messageBufferBinary =
-                ByteBuffer.allocate(wsSession.getMaxBinaryMessageBufferSize());
-        messageBufferText =
-                CharBuffer.allocate(wsSession.getMaxTextMessageBufferSize());
+        messageBufferBinary = ByteBuffer.allocate(wsSession.getMaxBinaryMessageBufferSize());
+        messageBufferText = CharBuffer.allocate(wsSession.getMaxTextMessageBufferSize());
         this.wsSession = wsSession;
         Transformation finalTransformation;
         if (isMasked()) {
@@ -151,8 +148,7 @@ public abstract class WsFrameBase {
         if (!transformation.validateRsv(rsv, opCode)) {
             throw new WsIOException(new CloseReason(
                     CloseCodes.PROTOCOL_ERROR,
-                    sm.getString("wsFrame.wrongRsv", Integer.valueOf(rsv),
-                            Integer.valueOf(opCode))));
+                    sm.getString("wsFrame.wrongRsv", Integer.valueOf(rsv), Integer.valueOf(opCode))));
         }
 
         if (Util.isControl(opCode)) {
@@ -166,8 +162,7 @@ public abstract class WsFrameBase {
                     opCode != Constants.OPCODE_CLOSE) {
                 throw new WsIOException(new CloseReason(
                         CloseCodes.PROTOCOL_ERROR,
-                        sm.getString("wsFrame.invalidOpCode",
-                                Integer.valueOf(opCode))));
+                        sm.getString("wsFrame.invalidOpCode", Integer.valueOf(opCode))));
             }
         } else {
             if (continuationExpected) {
@@ -199,8 +194,7 @@ public abstract class WsFrameBase {
                     } else {
                         throw new WsIOException(new CloseReason(
                                 CloseCodes.PROTOCOL_ERROR,
-                                sm.getString("wsFrame.invalidOpCode",
-                                        Integer.valueOf(opCode))));
+                                sm.getString("wsFrame.invalidOpCode", Integer.valueOf(opCode))));
                     }
                 } catch (IllegalStateException ise) {
                     // Thrown if the session is already closed
@@ -267,8 +261,7 @@ public abstract class WsFrameBase {
             if (payloadLength > 125) {
                 throw new WsIOException(new CloseReason(
                         CloseCodes.PROTOCOL_ERROR,
-                        sm.getString("wsFrame.controlPayloadTooBig",
-                                Long.valueOf(payloadLength))));
+                        sm.getString("wsFrame.controlPayloadTooBig", Long.valueOf(payloadLength))));
             }
             if (!fin) {
                 throw new WsIOException(new CloseReason(
@@ -329,8 +322,8 @@ public abstract class WsFrameBase {
             if (controlBufferBinary.remaining() > 1) {
                 code = controlBufferBinary.getShort();
                 if (controlBufferBinary.remaining() > 0) {
-                    CoderResult cr = utf8DecoderControl.decode(
-                            controlBufferBinary, controlBufferText, true);
+                    CoderResult cr = utf8DecoderControl.decode(controlBufferBinary,
+                            controlBufferText, true);
                     if (cr.isError()) {
                         controlBufferBinary.clear();
                         controlBufferText.clear();
@@ -351,8 +344,7 @@ public abstract class WsFrameBase {
                 wsSession.getBasicRemote().sendPong(controlBufferBinary);
             }
         } else if (opCode == Constants.OPCODE_PONG) {
-            MessageHandler.Whole<PongMessage> mhPong =
-                    wsSession.getPongMessageHandler();
+            MessageHandler.Whole<PongMessage> mhPong = wsSession.getPongMessageHandler();
             if (mhPong != null) {
                 try {
                     mhPong.onMessage(new WsPongMessage(controlBufferBinary));
@@ -367,8 +359,7 @@ public abstract class WsFrameBase {
             controlBufferBinary.clear();
             throw new WsIOException(new CloseReason(
                     CloseCodes.PROTOCOL_ERROR,
-                    sm.getString("wsFrame.invalidOpCode",
-                            Integer.valueOf(opCode))));
+                    sm.getString("wsFrame.invalidOpCode", Integer.valueOf(opCode))));
         }
         controlBufferBinary.clear();
         newFrame();
@@ -379,10 +370,8 @@ public abstract class WsFrameBase {
     @SuppressWarnings("unchecked")
     protected void sendMessageText(boolean last) throws WsIOException {
         if (textMsgHandler instanceof WrappedMessageHandler) {
-            long maxMessageSize =
-                    ((WrappedMessageHandler) textMsgHandler).getMaxMessageSize();
-            if (maxMessageSize > -1 &&
-                    messageBufferText.remaining() > maxMessageSize) {
+            long maxMessageSize = ((WrappedMessageHandler) textMsgHandler).getMaxMessageSize();
+            if (maxMessageSize > -1 && messageBufferText.remaining() > maxMessageSize) {
                 throw new WsIOException(new CloseReason(CloseCodes.TOO_BIG,
                         sm.getString("wsFrame.messageTooBig",
                                 Long.valueOf(messageBufferText.remaining()),
@@ -392,12 +381,12 @@ public abstract class WsFrameBase {
 
         try {
             if (textMsgHandler instanceof MessageHandler.Partial<?>) {
-                ((MessageHandler.Partial<String>) textMsgHandler).onMessage(
-                        messageBufferText.toString(), last);
+                ((MessageHandler.Partial<String>) textMsgHandler)
+                        .onMessage(messageBufferText.toString(), last);
             } else {
                 // Caller ensures last == true if this branch is used
-                ((MessageHandler.Whole<String>) textMsgHandler).onMessage(
-                        messageBufferText.toString());
+                ((MessageHandler.Whole<String>) textMsgHandler)
+                        .onMessage(messageBufferText.toString());
             }
         } catch (Throwable t) {
             handleThrowableOnSend(t);
@@ -415,8 +404,8 @@ public abstract class WsFrameBase {
             // Convert bytes to UTF-8
             messageBufferBinary.flip();
             while (true) {
-                CoderResult cr = utf8DecoderMessage.decode(
-                        messageBufferBinary, messageBufferText, false);
+                CoderResult cr = utf8DecoderMessage.decode(messageBufferBinary, messageBufferText,
+                        false);
                 if (cr.isError()) {
                     throw new WsIOException(new CloseReason(
                             CloseCodes.NOT_CONSISTENT,
@@ -458,8 +447,8 @@ public abstract class WsFrameBase {
         // Frame is fully received
         // Convert bytes to UTF-8
         while (true) {
-            CoderResult cr = utf8DecoderMessage.decode(messageBufferBinary,
-                    messageBufferText, last);
+            CoderResult cr = utf8DecoderMessage.decode(messageBufferBinary, messageBufferText,
+                    last);
             if (cr.isError()) {
                 throw new WsIOException(new CloseReason(
                         CloseCodes.NOT_CONSISTENT,
@@ -520,14 +509,12 @@ public abstract class WsFrameBase {
             if (!usePartial()) {
                 CloseReason cr = new CloseReason(CloseCodes.TOO_BIG,
                         sm.getString("wsFrame.bufferTooSmall",
-                                Integer.valueOf(
-                                        messageBufferBinary.capacity()),
+                                Integer.valueOf(messageBufferBinary.capacity()),
                                 Long.valueOf(payloadLength)));
                 throw new WsIOException(cr);
             }
             messageBufferBinary.flip();
-            ByteBuffer copy =
-                    ByteBuffer.allocate(messageBufferBinary.limit());
+            ByteBuffer copy = ByteBuffer.allocate(messageBufferBinary.limit());
             copy.put(messageBufferBinary);
             copy.flip();
             sendMessageBinary(copy, false);
@@ -542,8 +529,7 @@ public abstract class WsFrameBase {
         // - the message is complete
         if (usePartial() || !continuationExpected) {
             messageBufferBinary.flip();
-            ByteBuffer copy =
-                    ByteBuffer.allocate(messageBufferBinary.limit());
+            ByteBuffer copy = ByteBuffer.allocate(messageBufferBinary.limit());
             copy.put(messageBufferBinary);
             copy.flip();
             sendMessageBinary(copy, !continuationExpected);
@@ -572,11 +558,9 @@ public abstract class WsFrameBase {
 
 
     @SuppressWarnings("unchecked")
-    protected void sendMessageBinary(ByteBuffer msg, boolean last)
-            throws WsIOException {
+    protected void sendMessageBinary(ByteBuffer msg, boolean last) throws WsIOException {
         if (binaryMsgHandler instanceof WrappedMessageHandler) {
-            long maxMessageSize =
-                    ((WrappedMessageHandler) binaryMsgHandler).getMaxMessageSize();
+            long maxMessageSize = ((WrappedMessageHandler) binaryMsgHandler).getMaxMessageSize();
             if (maxMessageSize > -1 && msg.remaining() > maxMessageSize) {
                 throw new WsIOException(new CloseReason(CloseCodes.TOO_BIG,
                         sm.getString("wsFrame.messageTooBig",
@@ -591,7 +575,7 @@ public abstract class WsFrameBase {
                 // Caller ensures last == true if this branch is used
                 ((MessageHandler.Whole<ByteBuffer>) binaryMsgHandler).onMessage(msg);
             }
-        } catch(Throwable t) {
+        } catch (Throwable t) {
             handleThrowableOnSend(t);
         }
     }
@@ -674,11 +658,9 @@ public abstract class WsFrameBase {
     }
 
 
-    protected static long byteArrayToLong(byte[] b, int start, int len)
-            throws IOException {
+    protected static long byteArrayToLong(byte[] b, int start, int len) throws IOException {
         if (len > 8) {
-            throw new IOException(sm.getString("wsFrame.byteToLongFail",
-                    Long.valueOf(len)));
+            throw new IOException(sm.getString("wsFrame.byteToLongFail", Long.valueOf(len)));
         }
         int shift = 0;
         long result = 0;
@@ -754,8 +736,7 @@ public abstract class WsFrameBase {
             // opCode is ignored as the transformation is the same for all
             // opCodes
             // rsv is ignored as it known to be zero at this point
-            long toWrite = Math.min(
-                    payloadLength - payloadWritten, inputBuffer.remaining());
+            long toWrite = Math.min(payloadLength - payloadWritten, inputBuffer.remaining());
             toWrite = Math.min(toWrite, dest.remaining());
 
             int orgLimit = inputBuffer.limit();

==================================================
WsSession.java
index 109c32693a..61a4185d84 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -31,16 +31,15 @@ import org.apache.tomcat.util.res.StringManager;
 public class WsFrameClient extends WsFrameBase {
 
     private final Log log = LogFactory.getLog(WsFrameClient.class);
-    private static final StringManager sm =
-            StringManager.getManager(WsFrameClient.class);
+    private static final StringManager sm = StringManager.getManager(WsFrameClient.class);
 
     private final AsyncChannelWrapper channel;
-    private final CompletionHandler<Integer,Void> handler;
+    private final CompletionHandler<Integer, Void> handler;
     // Not final as it may need to be re-sized
     private volatile ByteBuffer response;
 
-    public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel,
-            WsSession wsSession, Transformation transformation) {
+    public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel, WsSession wsSession,
+            Transformation transformation) {
         super(wsSession, transformation);
         this.response = response;
         this.channel = channel;
@@ -92,8 +91,7 @@ public class WsFrameClient extends WsFrameBase {
         if (t instanceof WsIOException) {
             cr = ((WsIOException) t).getCloseReason();
         } else {
-            cr = new CloseReason(
-                CloseCodes.CLOSED_ABNORMALLY, t.getMessage());
+            cr = new CloseReason(CloseCodes.CLOSED_ABNORMALLY, t.getMessage());
         }
 
         try {
@@ -116,9 +114,7 @@ public class WsFrameClient extends WsFrameBase {
         return log;
     }
 
-
-    private class WsFrameClientCompletionHandler
-            implements CompletionHandler<Integer,Void> {
+    private class WsFrameClientCompletionHandler implements CompletionHandler<Integer, Void> {
 
         @Override
         public void completed(Integer result, Void attachment) {
@@ -152,8 +148,8 @@ public class WsFrameClient extends WsFrameBase {
         public void failed(Throwable exc, Void attachment) {
             if (exc instanceof ReadBufferOverflowException) {
                 // response will be empty if this exception is thrown
-                response = ByteBuffer.allocate(
-                        ((ReadBufferOverflowException) exc).getMinBufferSize());
+                response = ByteBuffer
+                        .allocate(((ReadBufferOverflowException) exc).getMinBufferSize());
                 response.flip();
                 try {
                     processSocketRead();

==================================================
