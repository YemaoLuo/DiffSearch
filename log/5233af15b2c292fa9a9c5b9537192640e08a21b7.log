5233af15b2c292fa9a9c5b9537192640e08a21b7
==================================================
Add a reference to the relevant specification.
==================================================
Mark Emlyn
==================================================
Mon Mar 4 00:50:02 2013 +0000
==================================================
Utf8Decoder.java
Add a reference to the relevant specification.
Add some more UTF-8 tests along with a few associated fixes to my tweaks to the Harmony UTF-8 decoder on replace.
Move a test from the old to the new test framework.
Still lots more tests required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1452159 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestUtf8.java
index 65e427c3b5..66708cc9c0 100644
--- a/java/org/apache/tomcat/util/buf/Utf8Decoder.java
+++ b/java/org/apache/tomcat/util/buf/Utf8Decoder.java
@@ -174,18 +174,20 @@ public class Utf8Decoder extends CharsetDecoder {
                         if ((bArr[inIndex + 1] & 0xFF) > 0x8F) {
                             // 11110100 1yyyxxxx xxxxxxxx xxxxxxxx
                             // Any non-zero y is > max code point
-                            return CoderResult.unmappableForLength(4);
+                            return CoderResult.unmappableForLength(1);
                         }
                     }
-                    if (jchar == 0x60 && inIndexLimit > inIndex +1) {
-                        if ((bArr[inIndex + 1] & 0x7F) == 0) {
-                            // 11100000 10000000 10xxxxxx
+                    if (jchar == 0x60 && inIndexLimit > inIndex + 1) {
+                        if ((bArr[inIndex + 1] & 0x60) == 0) {
+                            // 11100000 100yyyyy 10xxxxxx
                             // should have been
+                            // 11oyyyyy 1oxxxxxx
+                            // or possibly
                             // 00xxxxxx
-                            return CoderResult.malformedForLength(3);
+                            return CoderResult.malformedForLength(1);
                         }
                     }
-                    if (jchar == 0x70 && inIndexLimit > inIndex +1) {
+                    if (jchar == 0x70 && inIndexLimit > inIndex + 1) {
                         if ((bArr[inIndex + 1] & 0x7F) < 0x10) {
                             // 11110000 1000zzzz 1oyyyyyy 1oxxxxxx
                             // should have been

==================================================
TestUtf8Extended.java
index bd64eecfbb..0290c85f1a 100644
--- a/test/org/apache/tomcat/util/buf/TestUtf8.java
+++ b/test/org/apache/tomcat/util/buf/TestUtf8.java
@@ -32,10 +32,6 @@ public class TestUtf8 {
             new byte[] {-50, -70, -31,  -67, -71, -49, -125, -50, -68, -50,
                         -75, -19, -96, -128, 101, 100,  105, 116, 101, 100};
 
-    // Invalid code point (out of range)
-    private static final byte[] SRC_BYTES_2 =
-            new byte[] {-12, -112, -128, -128};
-
     // Various invalid UTF-8 sequences
     private static final byte[][] MALFORMED = {
             // One-byte sequences:
@@ -94,13 +90,6 @@ public class TestUtf8 {
     }
 
 
-    @Test
-    public void testJvmDecoder2() {
-        // Ideally should fail after 2 bytes (i==1)
-        doJvmDecoder(SRC_BYTES_2, false, true, 3);
-    }
-
-
     private void doJvmDecoder(byte[] src, boolean endOfinput,
             boolean errorExpected, int failPosExpected) {
         CharsetDecoder decoder = B2CConverter.UTF_8.newDecoder()
@@ -144,12 +133,6 @@ public class TestUtf8 {
     }
 
 
-    @Test
-    public void testHarmonyDecoder2() {
-        doHarmonyDecoder(SRC_BYTES_2, false, true, 1);
-    }
-
-
     private void doHarmonyDecoder(byte[] src, boolean endOfinput,
             boolean errorExpected, int failPosExpected) {
         CharsetDecoder decoder = new Utf8Decoder();

==================================================
