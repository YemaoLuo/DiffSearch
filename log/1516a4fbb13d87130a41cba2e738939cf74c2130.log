1516a4fbb13d87130a41cba2e738939cf74c2130
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60970
==================================================
Mark Thomas
==================================================
Wed Apr 12 15:00:09 2017 +0000
==================================================
Http2AsyncUpgradeHandler.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60970
Nio2 needs separate fix.
Optimise Nio/Apr fix a little

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791129 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index 95658d4a3d..ba3a3e09ce 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -155,25 +155,29 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
             ByteBuffer target = ByteBuffer.allocate(payloadSize);
             state = getHpackEncoder().encode(coyoteResponse.getMimeHeaders(), target);
             target.flip();
-            ByteUtil.setThreeBytes(header, 0, target.limit());
-            if (first) {
-                first = false;
-                header[3] = FrameType.HEADERS.getIdByte();
-                if (stream.getOutputBuffer().hasNoBody()) {
-                    header[4] = FLAG_END_OF_STREAM;
+            if (state == State.COMPLETE || target.limit() > 0) {
+                ByteUtil.setThreeBytes(header, 0, target.limit());
+                if (first) {
+                    first = false;
+                    header[3] = FrameType.HEADERS.getIdByte();
+                    if (stream.getOutputBuffer().hasNoBody()) {
+                        header[4] = FLAG_END_OF_STREAM;
+                    }
+                } else {
+                    header[3] = FrameType.CONTINUATION.getIdByte();
                 }
-            } else {
-                header[3] = FrameType.CONTINUATION.getIdByte();
-            }
-            if (state == State.COMPLETE) {
-                header[4] += FLAG_END_OF_HEADERS;
-            }
-            if (log.isDebugEnabled()) {
-                log.debug(target.limit() + " bytes");
+                if (state == State.COMPLETE) {
+                    header[4] += FLAG_END_OF_HEADERS;
+                }
+                if (log.isDebugEnabled()) {
+                    log.debug(target.limit() + " bytes");
+                }
+                ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
+                bufs.add(ByteBuffer.wrap(header));
+                bufs.add(target);
+            } else if (state == State.UNDERFLOW) {
+                payloadSize = payloadSize * 2;
             }
-            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
-            bufs.add(ByteBuffer.wrap(header));
-            bufs.add(target);
         }
         socketWrapper.write(BlockingMode.SEMI_BLOCK, getWriteTimeout(), TimeUnit.MILLISECONDS,
                 null, SocketWrapperBase.COMPLETE_WRITE, applicationErrorCompletion,

==================================================
