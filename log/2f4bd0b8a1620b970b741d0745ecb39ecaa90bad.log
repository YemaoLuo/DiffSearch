2f4bd0b8a1620b970b741d0745ecb39ecaa90bad
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Tue Jul 16 11:52:45 2013 +0000
==================================================
Optional.java
EL 3.0 collections operations.
Implement reduce.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503667 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index 9afb7ead76..511f19d3be 100644
--- a/java/org/apache/el/stream/Optional.java
+++ b/java/org/apache/el/stream/Optional.java
@@ -16,6 +16,50 @@
  */
 package org.apache.el.stream;
 
+import javax.el.ELException;
+import javax.el.LambdaExpression;
+
 public class Optional {
 
+    private final Object obj;
+
+    static final Optional EMPTY = new Optional(null);
+
+    Optional(Object obj) {
+        this.obj = obj;
+    }
+
+
+    public Object get() throws ELException {
+        if (obj == null) {
+            throw new ELException();
+        } else {
+            return obj;
+        }
+    }
+
+
+    public void ifPresent(LambdaExpression le) {
+        if (obj != null) {
+            le.invoke(obj);
+        }
+    }
+
+
+    public Object orElse(Object other) {
+        if (obj == null) {
+            return other;
+        } else {
+            return obj;
+        }
+    }
+
+
+    public Object orElseGet(LambdaExpression le) {
+        if (obj == null) {
+            return le.invoke((Object[]) null);
+        } else {
+            return obj;
+        }
+    }
 }

==================================================
TestCollectionOperations.java
index 6ab9e46ac4..8687073d40 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -261,6 +261,32 @@ public class Stream {
     }
 
 
+    public Optional reduce(LambdaExpression le) {
+        Object seed = null;
+
+        if (iterator.hasNext()) {
+            seed = iterator.next();
+        }
+
+        if (seed == null) {
+            return Optional.EMPTY;
+        } else {
+            return new Optional(reduce(seed, le));
+        }
+    }
+
+
+    public Object reduce(Object seed, LambdaExpression le) {
+        Object result = seed;
+
+        while (iterator.hasNext()) {
+            result = le.invoke(result, iterator.next());
+        }
+
+        return result;
+    }
+
+
     private static class LambdaExpressionComparator
             implements Comparator<Object>{
 

==================================================
