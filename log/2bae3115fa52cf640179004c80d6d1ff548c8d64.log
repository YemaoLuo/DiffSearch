2bae3115fa52cf640179004c80d6d1ff548c8d64
==================================================
Move towards using Charset rather than String internally to reduce the number of calls required to B2CConverter.getCharset() during a request.
==================================================
Mark Thomas
==================================================
Tue May 2 08:45:30 2017 +0000
==================================================
Request.java
Move towards using Charset rather than String internally to reduce the number of calls required to B2CConverter.getCharset() during a request.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793437 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationServletRegistration.java
index 9598f63aa0..27e7c776a8 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2027,7 +2027,7 @@ public class Request implements HttpServletRequest {
             candidate = uri.substring(0, pos);
         }
         candidate = removePathParameters(candidate);
-        candidate = UDecoder.URLDecode(candidate, connector.getURIEncoding());
+        candidate = UDecoder.URLDecode(candidate, connector.getURICharset());
         candidate = org.apache.tomcat.util.http.RequestUtil.normalize(candidate);
         boolean match = canonicalContextPath.equals(candidate);
         while (!match && pos != -1) {
@@ -2038,7 +2038,7 @@ public class Request implements HttpServletRequest {
                 candidate = uri.substring(0, pos);
             }
             candidate = removePathParameters(candidate);
-            candidate = UDecoder.URLDecode(candidate, connector.getURIEncoding());
+            candidate = UDecoder.URLDecode(candidate, connector.getURICharset());
             candidate = org.apache.tomcat.util.http.RequestUtil.normalize(candidate);
             match = canonicalContextPath.equals(candidate);
         }

==================================================
WebdavServlet.java
index bf67ffa209..6b98849bff 100644
--- a/java/org/apache/catalina/core/ApplicationServletRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationServletRegistration.java
@@ -17,6 +17,7 @@
 
 package org.apache.catalina.core;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
@@ -191,7 +192,7 @@ public class ApplicationServletRegistration
 
         for (String urlPattern : urlPatterns) {
             context.addServletMappingDecoded(
-                    UDecoder.URLDecode(urlPattern, "UTF-8"), wrapper.getName());
+                    UDecoder.URLDecode(urlPattern, StandardCharsets.UTF_8), wrapper.getName());
         }
         return Collections.emptySet();
     }

==================================================
UDecoder.java
index d96f9363a6..771e429cb0 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -1524,7 +1524,7 @@ public class WebdavServlet
         }
 
         // Remove url encoding from destination
-        destinationPath = UDecoder.URLDecode(destinationPath, "UTF8");
+        destinationPath = UDecoder.URLDecode(destinationPath, StandardCharsets.UTF_8);
 
         int protocolIndex = destinationPath.indexOf("://");
         if (protocolIndex >= 0) {

==================================================
FilterMap.java
index a8b27e1421..fe8573fd94 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.buf;
 import java.io.CharConversionException;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 
 import org.apache.juli.logging.Log;
@@ -294,7 +295,7 @@ public final class UDecoder {
 
     /**
      * Decode and return the specified URL-encoded String.
-     * When the byte array is converted to a string, the UTF-8 is used. This may
+     * When the byte array is converted to a string, UTF-8 is used. This may
      * be different than some other servers. It is assumed the string is not a
      * query string.
      *
@@ -304,7 +305,7 @@ public final class UDecoder {
      * by a valid 2-digit hexadecimal number
      */
     public static String URLDecode(String str) {
-        return URLDecode(str, null);
+        return URLDecode(str, StandardCharsets.UTF_8);
     }
 
 
@@ -318,12 +319,33 @@ public final class UDecoder {
      * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String URLDecode(String str, String enc) {
         return URLDecode(str, enc, false);
     }
 
 
+    /**
+     * Decode and return the specified URL-encoded String. It is assumed the
+     * string is not a query string.
+     *
+     * @param str The url-encoded string
+     * @param charset The character encoding to use; if null, UTF-8 is used.
+     * @return the decoded string
+     * @exception IllegalArgumentException if a '%' character is not followed
+     * by a valid 2-digit hexadecimal number
+     */
+    public static String URLDecode(String str, Charset charset) {
+        if (str == null) {
+            return null;
+        }
+        return URLDecode(str.getBytes(StandardCharsets.US_ASCII), charset, false);
+    }
+
+
     /**
      * Decode and return the specified URL-encoded String.
      *
@@ -334,7 +356,10 @@ public final class UDecoder {
      * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String URLDecode(String str, String enc, boolean isQuery) {
         if (str == null) {
             return null;
@@ -357,11 +382,36 @@ public final class UDecoder {
      * @return the decoded string
      * @exception IllegalArgumentException if a '%' character is not followed
      * by a valid 2-digit hexadecimal number
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String URLDecode(byte[] bytes, String enc, boolean isQuery) {
+        Charset charset = null;
+
+        if (enc != null) {
+            try {
+                charset = B2CConverter.getCharset(enc);
+            } catch (UnsupportedEncodingException uee) {
+                if (log.isDebugEnabled()) {
+                    log.debug(sm.getString("uDecoder.urlDecode.uee", enc), uee);
+                }
+            }
+        }
 
-        if (bytes == null)
+        return URLDecode(bytes, charset, isQuery);
+    }
+
+
+    private static String URLDecode(byte[] bytes, Charset charset, boolean isQuery) {
+
+        if (bytes == null) {
             return null;
+        }
+
+        if (charset == null) {
+            charset = StandardCharsets.UTF_8;
+        }
 
         int len = bytes.length;
         int ix = 0;
@@ -380,18 +430,8 @@ public final class UDecoder {
             }
             bytes[ox++] = b;
         }
-        if (enc != null) {
-            try {
-                return new String(bytes, 0, ox, B2CConverter.getCharset(enc));
-            } catch (UnsupportedEncodingException uee) {
-                if (log.isDebugEnabled()) {
-                    log.debug(sm.getString("uDecoder.urlDecode.uee", enc), uee);
-                }
-                return null;
-            }
-        }
-        return new String(bytes, 0, ox, StandardCharsets.UTF_8);
 
+        return new String(bytes, 0, ox, charset);
     }
 
 

==================================================
JspPropertyGroup.java
index 4e9b6177fd..44268b4cf8 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
@@ -127,7 +127,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
     }
 
     public void addURLPattern(String urlPattern) {
-        addURLPatternDecoded(UDecoder.URLDecode(urlPattern, getEncoding()));
+        addURLPatternDecoded(UDecoder.URLDecode(urlPattern, getCharset()));
     }
     public void addURLPatternDecoded(String urlPattern) {
         if ("*".equals(urlPattern)) {

==================================================
SecurityCollection.java
index 7d0e30edb9..49a6c784a7 100644
--- a/java/org/apache/tomcat/util/descriptor/web/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/descriptor/web/LocalStrings.properties
@@ -62,3 +62,5 @@ webXml.wrongFragmentName=Used a wrong fragment name [{0}] at web.xml absolute-or
 webXmlParser.applicationParse=Parse error in application web.xml file at [{0}]
 webXmlParser.applicationPosition=Occurred at line [{0}] column [{1}]
 webXmlParser.applicationStart=Parsing application web.xml file at [{0}]
+
+xmlEncodingBase.encodingInvalid=The encoding [{0}] is not recognised by this JRE. The existing value of [{1}] will be used
\ No newline at end of file

==================================================
SecurityConstraint.java
index 00f15e3a11..c857f4afcf 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
@@ -17,6 +17,7 @@
 package org.apache.tomcat.util.descriptor.web;
 
 import java.io.Serializable;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.tomcat.util.buf.UDecoder;
 
@@ -209,7 +210,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * @param pattern The pattern
      */
     public void addPattern(String pattern) {
-        addPatternDecoded(UDecoder.URLDecode(pattern, "UTF-8"));
+        addPatternDecoded(UDecoder.URLDecode(pattern, StandardCharsets.UTF_8));
     }
     public void addPatternDecoded(String pattern) {
 

==================================================
WebXml.java
index c7ded6db57..1b9319256a 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
@@ -281,7 +281,7 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
         if (collection == null)
             return;
 
-        collection.setEncoding(getEncoding());
+        collection.setCharset(getCharset());
 
         SecurityCollection results[] =
             new SecurityCollection[collections.length + 1];

==================================================
XmlEncodingBase.java
index e2d2ee5e42..f97bea92e3 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -55,7 +55,9 @@ import org.apache.tomcat.util.res.StringManager;
  * This class checks for invalid duplicates (eg filter/servlet names)
  * StandardContext will check validity of values (eg URL formats etc)
  */
-public class WebXml extends XmlEncodingBase implements DocumentProperties.Encoding {
+@SuppressWarnings("deprecation")
+public class WebXml extends XmlEncodingBase implements DocumentProperties.Encoding,
+        DocumentProperties.Charset {
 
     protected static final String ORDER_OTHERS =
         "org.apache.catalina.order.others";
@@ -318,7 +320,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
     private final Map<String,String> servletMappings = new HashMap<>();
     private final Set<String> servletMappingNames = new HashSet<>();
     public void addServletMapping(String urlPattern, String servletName) {
-        addServletMappingDecoded(UDecoder.URLDecode(urlPattern, getEncoding()), servletName);
+        addServletMappingDecoded(UDecoder.URLDecode(urlPattern, getCharset()), servletName);
     }
     public void addServletMappingDecoded(String urlPattern, String servletName) {
         String oldServletName = servletMappings.put(urlPattern, servletName);
@@ -403,7 +405,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
     // jsp-config/jsp-property-group
     private final Set<JspPropertyGroup> jspPropertyGroups = new LinkedHashSet<>();
     public void addJspPropertyGroup(JspPropertyGroup propertyGroup) {
-        propertyGroup.setEncoding(getEncoding());
+        propertyGroup.setCharset(getCharset());
         jspPropertyGroups.add(propertyGroup);
     }
     public Set<JspPropertyGroup> getJspPropertyGroups() {
@@ -415,7 +417,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
     // TODO: Should support multiple description elements with language
     private final Set<SecurityConstraint> securityConstraints = new HashSet<>();
     public void addSecurityConstraint(SecurityConstraint securityConstraint) {
-        securityConstraint.setEncoding(getEncoding());
+        securityConstraint.setCharset(getCharset());
         securityConstraints.add(securityConstraint);
     }
     public Set<SecurityConstraint> getSecurityConstraints() {

==================================================
Digester.java
index 04846ad4fe..a835e09257 100644
--- a/java/org/apache/tomcat/util/descriptor/web/XmlEncodingBase.java
+++ b/java/org/apache/tomcat/util/descriptor/web/XmlEncodingBase.java
@@ -16,17 +16,38 @@
  */
 package org.apache.tomcat.util.descriptor.web;
 
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.res.StringManager;
+
 /**
  * Base class for those elements that need to track the encoding used in the
  * source XML.
  */
 public abstract class XmlEncodingBase {
 
-    private String encoding = null;
+    private static final Log log = LogFactory.getLog(XmlEncodingBase.class);
+    private static final StringManager sm = StringManager.getManager(XmlEncodingBase.class);
+    private Charset charset = StandardCharsets.UTF_8;
 
 
+    /**
+     * @param encoding The encoding of the XML source that was used to
+     *                 populated this object.
+     * @deprecated This method will be removed in Tomcat 9
+     */
+    @Deprecated
     public void setEncoding(String encoding) {
-        this.encoding = encoding;
+        try {
+            charset = B2CConverter.getCharset(encoding);
+        } catch (UnsupportedEncodingException e) {
+            log.warn(sm.getString("xmlEncodingBase.encodingInvalid", encoding, charset.name()), e);
+        }
     }
 
 
@@ -36,11 +57,27 @@ public abstract class XmlEncodingBase {
      *
      * @return The encoding of the associated XML source or <code>UTF-8</code>
      *         if the encoding could not be determined
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public String getEncoding() {
-        if (encoding == null || encoding.length() == 0) {
-            return "UTF-8";
-        }
-        return encoding;
+        return charset.name();
+    }
+
+
+    public void setCharset(Charset charset) {
+        this.charset = charset;
+    }
+
+
+    /**
+     * Obtain the character encoding of the XML source that was used to
+     * populated this object.
+     *
+     * @return The character encoding of the associated XML source or
+     *         <code>UTF-8</code> if the encoding could not be determined
+     */
+    public Charset getCharset() {
+        return charset;
     }
 }

==================================================
DocumentProperties.java
index 34c9bdfa3b..5aa0a553a6 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -20,6 +20,7 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
 import java.lang.reflect.InvocationTargetException;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -39,6 +40,8 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.security.PermissionCheck;
 import org.xml.sax.Attributes;
 import org.xml.sax.EntityResolver;
@@ -76,7 +79,6 @@ import org.xml.sax.helpers.AttributesImpl;
  */
 public class Digester extends DefaultHandler2 {
 
-
     // ---------------------------------------------------------- Static Fields
 
     protected static IntrospectionUtils.PropertySource propertySource = null;
@@ -289,8 +291,8 @@ public class Digester extends DefaultHandler2 {
     /**
      * The Log to which most logging calls will be made.
      */
-    protected Log log = LogFactory.getLog("org.apache.tomcat.util.digester.Digester");
-
+    protected Log log = LogFactory.getLog(Digester.class);
+    protected StringManager sm = StringManager.getManager(Digester.class);
 
     /**
      * The Log to which all SAX event related logging calls will be made.
@@ -1112,6 +1114,7 @@ public class Digester extends DefaultHandler2 {
      *
      * @exception SAXException if a parsing error is to be reported
      */
+    @SuppressWarnings("deprecation")
     @Override
     public void startDocument() throws SAXException {
 
@@ -1119,8 +1122,17 @@ public class Digester extends DefaultHandler2 {
             saxLog.debug("startDocument()");
         }
 
-        if (locator instanceof Locator2 && root instanceof DocumentProperties.Encoding) {
-            ((DocumentProperties.Encoding) root).setEncoding(((Locator2) locator).getEncoding());
+        if (locator instanceof Locator2) {
+            if (root instanceof DocumentProperties.Charset) {
+                String enc = ((Locator2) locator).getEncoding();
+                try {
+                    ((DocumentProperties.Charset) root).setCharset(B2CConverter.getCharset(enc));
+                } catch (UnsupportedEncodingException e) {
+                    log.warn(sm.getString("disgester.encodingInvalid", enc), e);
+                }
+            } else if (root instanceof DocumentProperties.Encoding) {
+                ((DocumentProperties.Encoding) root).setEncoding(((Locator2) locator).getEncoding());
+            }
         }
 
         // ensure that the digester is properly configured, as

==================================================
TestApplicationContextGetRequestDispatcher.java
new file mode 100644
index 0000000000..e49057709a
--- /dev/null
+++ b/java/org/apache/tomcat/util/digester/LocalStrings.properties
@@ -0,0 +1,16 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+disgester.encodingInvalid=The encoding [{0}] is not recognised by the JRE and will be ignored
\ No newline at end of file

==================================================
TestUDecoder.java
index 6ea9c9b17b..e7d35645f0 100644
--- a/test/org/apache/catalina/core/TestApplicationContextGetRequestDispatcher.java
+++ b/test/org/apache/catalina/core/TestApplicationContextGetRequestDispatcher.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.core;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Collection;
 
@@ -369,7 +370,8 @@ public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
 
         // Add a target servlet to dispatch to
         Tomcat.addServlet(ctx, "target", new TargetServlet());
-        ctx.addServletMappingDecoded(UDecoder.URLDecode(targetPath, "UTF-8"), "target");
+        ctx.addServletMappingDecoded(
+                UDecoder.URLDecode(targetPath, StandardCharsets.UTF_8), "target");
 
         if (useAsync) {
             Wrapper w = Tomcat.addServlet(
@@ -378,7 +380,7 @@ public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
         } else {
             Tomcat.addServlet(ctx, "rd", new DispatcherServlet(dispatchPath));
         }
-        ctx.addServletMappingDecoded(UDecoder.URLDecode(startPath, "UTF-8"), "rd");
+        ctx.addServletMappingDecoded(UDecoder.URLDecode(startPath, StandardCharsets.UTF_8), "rd");
 
         tomcat.start();
 

==================================================
