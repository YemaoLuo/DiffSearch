6a7d770904f31f2df3841d00e436fb3bf53ff9c6
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58547
==================================================
Violeta Georgieva
==================================================
Tue Oct 27 09:43:40 2015 +0000
==================================================
JMXAccessorTask.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58547
Use static valueOf instead of inefficient Number constructor. Based on a patch provided by Anthony Whitford.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710753 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 24fa815d83..62d7a59992 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorTask.java
@@ -502,7 +502,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
         Object convertValue = value;
         if ("java.lang.Integer".equals(valueType) || "int".equals(valueType)) {
             try {
-                convertValue = new Integer(value);
+                convertValue = Integer.valueOf(value);
             } catch (NumberFormatException ex) {
                 if (isEcho())
                     handleErrorOutput("Unable to convert to integer:" + value);
@@ -510,7 +510,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
         } else if ("java.lang.Long".equals(valueType)
                 || "long".equals(valueType)) {
             try {
-                convertValue = new Long(value);
+                convertValue = Long.valueOf(value);
             } catch (NumberFormatException ex) {
                 if (isEcho())
                     handleErrorOutput("Unable to convert to long:" + value);
@@ -521,7 +521,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
         } else if ("java.lang.Float".equals(valueType)
                 || "float".equals(valueType)) {
             try {
-                convertValue = new Float(value);
+                convertValue = Float.valueOf(value);
             } catch (NumberFormatException ex) {
                 if (isEcho())
                     handleErrorOutput("Unable to convert to float:" + value);
@@ -529,7 +529,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
         } else if ("java.lang.Double".equals(valueType)
                 || "double".equals(valueType)) {
             try {
-                convertValue = new Double(value);
+                convertValue = Double.valueOf(value);
             } catch (NumberFormatException ex) {
                 if (isEcho())
                     handleErrorOutput("Unable to convert to double:" + value);

==================================================
StandardHostValve.java
index bbadda8e5c..b2c4e526fd 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -3184,7 +3184,7 @@ public class Request implements HttpServletRequest {
 
         for (AcceptLanguage acceptLanguage : acceptLanguages) {
             // Add a new Locale to the list of Locales for this quality level
-            Double key = new Double(-acceptLanguage.getQuality());  // Reverse the order
+            Double key = Double.valueOf(-acceptLanguage.getQuality());  // Reverse the order
             ArrayList<Locale> values = locales.get(key);
             if (values == null) {
                 values = new ArrayList<>();

==================================================
WebdavServlet.java
index 4d19f7ccb0..6e59e616d0 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -318,7 +318,7 @@ final class StandardHostValve extends ValveBase {
                 request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,
                         DispatcherType.ERROR);
                 request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,
-                        new Integer(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
+                        Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
                 request.setAttribute(RequestDispatcher.ERROR_MESSAGE,
                                   throwable.getMessage());
                 request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,

==================================================
StandardManager.java
index 0adf9c034d..9dd9dba9bf 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -882,14 +882,14 @@ public class WebdavServlet
             }
             if (lockDurationStr.startsWith("Second-")) {
                 lockDuration =
-                    (new Integer(lockDurationStr.substring(7))).intValue();
+                    (Integer.valueOf(lockDurationStr.substring(7))).intValue();
             } else {
                 if (lockDurationStr.equalsIgnoreCase("infinity")) {
                     lockDuration = MAX_TIMEOUT;
                 } else {
                     try {
                         lockDuration =
-                            (new Integer(lockDurationStr)).intValue();
+                            (Integer.valueOf(lockDurationStr)).intValue();
                     } catch (NumberFormatException e) {
                         lockDuration = MAX_TIMEOUT;
                     }
@@ -1640,7 +1640,7 @@ public class WebdavServlet
             if (!resources.mkdir(dest)) {
                 WebResource destResource = resources.getResource(dest);
                 if (!destResource.isDirectory()) {
-                    errorList.put(dest, new Integer(WebdavStatus.SC_CONFLICT));
+                    errorList.put(dest, Integer.valueOf(WebdavStatus.SC_CONFLICT));
                     return false;
                 }
             }
@@ -1667,7 +1667,7 @@ public class WebdavServlet
                     String parent = destResource.getWebappPath().substring(0, lastSlash);
                     WebResource parentResource = resources.getResource(parent);
                     if (!parentResource.isDirectory()) {
-                        errorList.put(source, new Integer(WebdavStatus.SC_CONFLICT));
+                        errorList.put(source, Integer.valueOf(WebdavStatus.SC_CONFLICT));
                         return false;
                     }
                 }
@@ -1675,12 +1675,12 @@ public class WebdavServlet
             if (!resources.write(dest, sourceResource.getInputStream(),
                     false)) {
                 errorList.put(source,
-                        new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));
+                        Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));
                 return false;
             }
         } else {
             errorList.put(source,
-                    new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));
+                    Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));
             return false;
         }
         return true;
@@ -1749,7 +1749,7 @@ public class WebdavServlet
 
             deleteCollection(req, path, errorList);
             if (!resource.delete()) {
-                errorList.put(path, new Integer
+                errorList.put(path, Integer.valueOf
                     (WebdavStatus.SC_INTERNAL_SERVER_ERROR));
             }
 
@@ -1780,7 +1780,7 @@ public class WebdavServlet
 
         // Prevent deletion of special subdirectories
         if (isSpecialPath(path)) {
-            errorList.put(path, new Integer(WebdavStatus.SC_FORBIDDEN));
+            errorList.put(path, Integer.valueOf(WebdavStatus.SC_FORBIDDEN));
             return;
         }
 
@@ -1802,7 +1802,7 @@ public class WebdavServlet
 
             if (isLocked(childName, ifHeader + lockTokenHeader)) {
 
-                errorList.put(childName, new Integer(WebdavStatus.SC_LOCKED));
+                errorList.put(childName, Integer.valueOf(WebdavStatus.SC_LOCKED));
 
             } else {
                 WebResource childResource = resources.getResource(childName);
@@ -1814,7 +1814,7 @@ public class WebdavServlet
                     if (!childResource.isDirectory()) {
                         // If it's not a collection, then it's an unknown
                         // error
-                        errorList.put(childName, new Integer(
+                        errorList.put(childName, Integer.valueOf(
                                 WebdavStatus.SC_INTERNAL_SERVER_ERROR));
                     }
                 }

==================================================
McastService.java
index b1eb80b0fb..489537e0c7 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -391,7 +391,7 @@ public class StandardManager extends ManagerBase {
                 log.debug("Unloading " + sessions.size() + " sessions");
             try {
                 // oos can't be null here
-                oos.writeObject(new Integer(sessions.size()));
+                oos.writeObject(Integer.valueOf(sessions.size()));
                 Iterator<Session> elements = sessions.values().iterator();
                 while (elements.hasNext()) {
                     StandardSession session =

==================================================
AbstractReplicatedMap.java
index a1b0e39bac..ce05584721 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -196,7 +196,7 @@ public class McastService implements MembershipService,MembershipListener,Messag
     public int getRecoveryCounter(){
         String p = properties.getProperty("recoveryCounter");
         if(p != null){
-            return new Integer(p).intValue();
+            return Integer.valueOf(p).intValue();
         }
         return -1;
     }
@@ -220,7 +220,7 @@ public class McastService implements MembershipService,MembershipListener,Messag
     public long getRecoverySleepTime(){
         String p = properties.getProperty("recoverySleepTime");
         if(p != null){
-            return new Long(p).longValue();
+            return Long.valueOf(p).longValue();
         }
         return -1;
     }
@@ -239,7 +239,7 @@ public class McastService implements MembershipService,MembershipListener,Messag
 
     public int getPort() {
         String p = properties.getProperty("mcastPort");
-        return new Integer(p).intValue();
+        return Integer.valueOf(p).intValue();
     }
 
     public void setFrequency(long time) {
@@ -248,7 +248,7 @@ public class McastService implements MembershipService,MembershipListener,Messag
 
     public long getFrequency() {
         String p = properties.getProperty("mcastFrequency");
-        return new Long(p).longValue();
+        return Long.valueOf(p).longValue();
     }
 
     public void setMcastDropTime(long time) {
@@ -260,7 +260,7 @@ public class McastService implements MembershipService,MembershipListener,Messag
 
     public long getDropTime() {
         String p = properties.getProperty("memberDropTime");
-        return new Long(p).longValue();
+        return Long.valueOf(p).longValue();
     }
 
     /**

==================================================
ReplicatedMap.java
index bf7634ac2a..7b1c83ddb4 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -299,7 +299,7 @@ public abstract class AbstractReplicatedMap<K,V>
     protected void memberAlive(Member member) {
         mapMemberAdded(member);
         synchronized (mapMembers) {
-            mapMembers.put(member, new Long(System.currentTimeMillis()));
+            mapMembers.put(member, Long.valueOf(System.currentTimeMillis()));
         }
     }
 
@@ -735,7 +735,7 @@ public abstract class AbstractReplicatedMap<K,V>
         //select a backup node if we don't have one
         synchronized (mapMembers) {
             if (!mapMembers.containsKey(member) ) {
-                mapMembers.put(member, new Long(System.currentTimeMillis()));
+                mapMembers.put(member, Long.valueOf(System.currentTimeMillis()));
                 memberAdded = true;
             }
         }

==================================================
BioSender.java
index db254c15ba..44580489cb 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -237,7 +237,7 @@ public class ReplicatedMap<K,V> extends AbstractReplicatedMap<K,V> {
         boolean memberAdded = false;
         synchronized (mapMembers) {
             if (!mapMembers.containsKey(member) ) {
-                mapMembers.put(member, new Long(System.currentTimeMillis()));
+                mapMembers.put(member, Long.valueOf(System.currentTimeMillis()));
                 memberAdded = true;
             }
         }

==================================================
ELArithmetic.java
index e803dda983..5639f919ea 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -92,7 +92,7 @@ public class BioSender extends AbstractSender {
         closeSocket();
         if (connect) {
             if (log.isDebugEnabled())
-                log.debug(sm.getString("bioSender.disconnect", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
+                log.debug(sm.getString("bioSender.disconnect", getAddress().getHostAddress(), Integer.valueOf(getPort()), Long.valueOf(0)));
         }
 
     }
@@ -109,7 +109,7 @@ public class BioSender extends AbstractSender {
         } catch (IOException x) {
             SenderState.getSenderState(getDestination()).setSuspect();
             exception = x;
-            if (log.isTraceEnabled()) log.trace(sm.getString("bioSender.send.again", getAddress().getHostAddress(),new Integer(getPort())),x);
+            if (log.isTraceEnabled()) log.trace(sm.getString("bioSender.send.again", getAddress().getHostAddress(),Integer.valueOf(getPort())),x);
             while ( getAttempt()<getMaxRetryAttempts() ) {
                 try {
                     setAttempt(getAttempt()+1);
@@ -167,11 +167,11 @@ public class BioSender extends AbstractSender {
            setRequestCount(0);
            setConnectTime(System.currentTimeMillis());
            if (log.isDebugEnabled())
-               log.debug(sm.getString("bioSender.openSocket", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
+               log.debug(sm.getString("bioSender.openSocket", getAddress().getHostAddress(), Integer.valueOf(getPort()), Long.valueOf(0)));
       } catch (IOException ex1) {
           SenderState.getSenderState(getDestination()).setSuspect();
           if (log.isDebugEnabled())
-              log.debug(sm.getString("bioSender.openSocket.failure",getAddress().getHostAddress(), new Integer(getPort()),new Long(0)), ex1);
+              log.debug(sm.getString("bioSender.openSocket.failure",getAddress().getHostAddress(), Integer.valueOf(getPort()), Long.valueOf(0)), ex1);
           throw (ex1);
         }
 
@@ -198,7 +198,7 @@ public class BioSender extends AbstractSender {
             setRequestCount(0);
             setConnected(false);
             if (log.isDebugEnabled())
-                log.debug(sm.getString("bioSender.closeSocket",getAddress().getHostAddress(), new Integer(getPort()),new Long(0)));
+                log.debug(sm.getString("bioSender.closeSocket",getAddress().getHostAddress(), Integer.valueOf(getPort()), Long.valueOf(0)));
        }
     }
 
@@ -258,13 +258,13 @@ public class BioSender extends AbstractSender {
                 i = soIn.read();
             }
             if (!ackReceived) {
-                if (i == -1) throw new IOException(sm.getString("bioSender.ack.eof",getAddress(), new Integer(socket.getLocalPort())));
-                else throw new IOException(sm.getString("bioSender.ack.wrong",getAddress(), new Integer(socket.getLocalPort())));
+                if (i == -1) throw new IOException(sm.getString("bioSender.ack.eof",getAddress(), Integer.valueOf(socket.getLocalPort())));
+                else throw new IOException(sm.getString("bioSender.ack.wrong",getAddress(), Integer.valueOf(socket.getLocalPort())));
             } else if ( failAckReceived && getThrowOnFailedAck()) {
                 throw new RemoteProcessException(sm.getString("bioSender.fail.AckReceived"));
             }
         } catch (IOException x) {
-            String errmsg = sm.getString("bioSender.ack.missing", getAddress(),new Integer(socket.getLocalPort()), new Long(getTimeout()));
+            String errmsg = sm.getString("bioSender.ack.missing", getAddress(), Integer.valueOf(socket.getLocalPort()), Long.valueOf(getTimeout()));
             if ( SenderState.getSenderState(getDestination()).isReady() ) {
                 SenderState.getSenderState(getDestination()).setSuspect();
                 if ( log.isWarnEnabled() ) log.warn(errmsg, x);

==================================================
ELSupport.java
index 2ad7bd0b0b..36a41b65f5 100644
--- a/java/org/apache/el/lang/ELArithmetic.java
+++ b/java/org/apache/el/lang/ELArithmetic.java
@@ -63,7 +63,7 @@ public abstract class ELArithmetic {
 
         @Override
         protected Number mod(Number num0, Number num1) {
-            return new Double(num0.doubleValue() % num1.doubleValue());
+            return Double.valueOf(num0.doubleValue() % num1.doubleValue());
         }
 
         @Override
@@ -132,7 +132,7 @@ public abstract class ELArithmetic {
             } else if (num1 instanceof BigDecimal) {
                 return ((new BigDecimal(num0.doubleValue()).add((BigDecimal) num1)));
             }
-            return new Double(num0.doubleValue() + num1.doubleValue());
+            return Double.valueOf(num0.doubleValue() + num1.doubleValue());
         }
 
         @Override
@@ -141,22 +141,22 @@ public abstract class ELArithmetic {
                 return num;
             if (num instanceof BigInteger)
                 return new BigDecimal((BigInteger) num);
-            return new Double(num.doubleValue());
+            return Double.valueOf(num.doubleValue());
         }
 
         @Override
         protected Number coerce(String str) {
-            return new Double(str);
+            return Double.valueOf(str);
         }
 
         @Override
         protected Number divide(Number num0, Number num1) {
-            return new Double(num0.doubleValue() / num1.doubleValue());
+            return Double.valueOf(num0.doubleValue() / num1.doubleValue());
         }
 
         @Override
         protected Number mod(Number num0, Number num1) {
-            return new Double(num0.doubleValue() % num1.doubleValue());
+            return Double.valueOf(num0.doubleValue() % num1.doubleValue());
         }
 
         @Override
@@ -167,7 +167,7 @@ public abstract class ELArithmetic {
             } else if (num1 instanceof BigDecimal) {
                 return ((new BigDecimal(num0.doubleValue()).subtract((BigDecimal) num1)));
             }
-            return new Double(num0.doubleValue() - num1.doubleValue());
+            return Double.valueOf(num0.doubleValue() - num1.doubleValue());
         }
 
         @Override
@@ -178,7 +178,7 @@ public abstract class ELArithmetic {
             } else if (num1 instanceof BigDecimal) {
                 return ((new BigDecimal(num0.doubleValue()).multiply((BigDecimal) num1)));
             }
-            return new Double(num0.doubleValue() * num1.doubleValue());
+            return Double.valueOf(num0.doubleValue() * num1.doubleValue());
         }
 
         @Override

==================================================
Node.java
index d0f8f04f7d..f962c51c15 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -315,7 +315,7 @@ public class ELSupport {
             return Long.valueOf(number.longValue());
         }
         if (Double.TYPE == type || Double.class.equals(type)) {
-            return new Double(number.doubleValue());
+            return Double.valueOf(number.doubleValue());
         }
         if (Integer.TYPE == type || Integer.class.equals(type)) {
             return Integer.valueOf(number.intValue());
@@ -345,7 +345,7 @@ public class ELSupport {
             return Short.valueOf(number.shortValue());
         }
         if (Float.TYPE == type || Float.class.equals(type)) {
-            return new Float(number.floatValue());
+            return Float.valueOf(number.floatValue());
         }
         if (Number.class.equals(type)) {
             return number;

==================================================
PageInfo.java
index 93e57b4706..9f7a6344cc 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -2079,7 +2079,7 @@ abstract class Node implements TagConstants {
             if (extraSmap == null) {
                 extraSmap = new ArrayList<>();
             }
-            extraSmap.add(new Integer(srcLine));
+            extraSmap.add(Integer.valueOf(srcLine));
         }
 
         public ArrayList<Integer> getExtraSmap() {

==================================================
ScriptingVariabler.java
index 1f337f1a6f..21159a9365 100644
--- a/java/org/apache/jasper/compiler/PageInfo.java
+++ b/java/org/apache/jasper/compiler/PageInfo.java
@@ -455,7 +455,7 @@ class PageInfo {
             }
             try {
                 @SuppressWarnings("null") // value can't be null here
-                Integer k = new Integer(value.substring(0, value.length()-2));
+                Integer k = Integer.valueOf(value.substring(0, value.length()-2));
                 buffer = k.intValue() * 1024;
             } catch (NumberFormatException e) {
                 if (n == null) {

==================================================
JspRuntimeLibrary.java
index 165ccc4a0b..a9628fabba 100644
--- a/java/org/apache/jasper/compiler/ScriptingVariabler.java
+++ b/java/org/apache/jasper/compiler/ScriptingVariabler.java
@@ -35,7 +35,7 @@ import org.apache.jasper.JasperException;
  */
 class ScriptingVariabler {
 
-    private static final Integer MAX_SCOPE = new Integer(Integer.MAX_VALUE);
+    private static final Integer MAX_SCOPE = Integer.valueOf(Integer.MAX_VALUE);
 
     /*
      * Assigns an identifier (of type integer) to every custom tag, in order
@@ -54,7 +54,7 @@ class ScriptingVariabler {
             parent = n;
             visitBody(n);
             parent = tmpParent;
-            n.setNumCount(new Integer(count++));
+            n.setNumCount(Integer.valueOf(count++));
         }
     }
 

==================================================
PageContextImpl.java
index 6c5f80daad..5847f3bcc2 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -444,12 +444,12 @@ public class JspRuntimeLibrary {
             } else if (t.equals(Integer.class)) {
                 Integer []tmpval = new Integer[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] =  new Integer (values[i]);
+                    tmpval[i] =  Integer.valueOf(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Byte.class)) {
                 Byte[] tmpval = new Byte[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = new Byte (values[i]);
+                    tmpval[i] = Byte.valueOf(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Boolean.class)) {
                 Boolean[] tmpval = new Boolean[values.length];
@@ -459,22 +459,22 @@ public class JspRuntimeLibrary {
             } else if (t.equals(Short.class)) {
                 Short[] tmpval = new Short[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = new Short (values[i]);
+                    tmpval[i] = Short.valueOf(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Long.class)) {
                 Long[] tmpval = new Long[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = new Long (values[i]);
+                    tmpval[i] = Long.valueOf(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Double.class)) {
                 Double[] tmpval = new Double[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = new Double (values[i]);
+                    tmpval[i] = Double.valueOf(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Float.class)) {
                 Float[] tmpval = new Float[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = new Float (values[i]);
+                    tmpval[i] = Float.valueOf(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Character.class)) {
                 Character[] tmpval = new Character[values.length];

==================================================
BeanFactory.java
index 98cc175423..7b15346930 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -857,7 +857,7 @@ public class PageContextImpl extends PageContext {
              */
             request.setAttribute(PageContext.EXCEPTION, t);
             request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,
-                    new Integer(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
+                    Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
             request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,
                     ((HttpServletRequest) request).getRequestURI());
             request.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,

==================================================
IntrospectionUtils.java
index 9a0b8a3441..a342f516fd 100644
--- a/java/org/apache/naming/factory/BeanFactory.java
+++ b/java/org/apache/naming/factory/BeanFactory.java
@@ -234,22 +234,22 @@ public class BeanFactory
                                     Character.valueOf(value.charAt(0));
                             } else if (propType.equals(Byte.class)
                                        || propType.equals(byte.class)) {
-                                valueArray[0] = new Byte(value);
+                                valueArray[0] = Byte.valueOf(value);
                             } else if (propType.equals(Short.class)
                                        || propType.equals(short.class)) {
-                                valueArray[0] = new Short(value);
+                                valueArray[0] = Short.valueOf(value);
                             } else if (propType.equals(Integer.class)
                                        || propType.equals(int.class)) {
-                                valueArray[0] = new Integer(value);
+                                valueArray[0] = Integer.valueOf(value);
                             } else if (propType.equals(Long.class)
                                        || propType.equals(long.class)) {
-                                valueArray[0] = new Long(value);
+                                valueArray[0] = Long.valueOf(value);
                             } else if (propType.equals(Float.class)
                                        || propType.equals(float.class)) {
-                                valueArray[0] = new Float(value);
+                                valueArray[0] = Float.valueOf(value);
                             } else if (propType.equals(Double.class)
                                        || propType.equals(double.class)) {
-                                valueArray[0] = new Double(value);
+                                valueArray[0] = Double.valueOf(value);
                             } else if (propType.equals(Boolean.class)
                                        || propType.equals(boolean.class)) {
                                 valueArray[0] = Boolean.valueOf(value);

==================================================
FastHttpDateFormat.java
index 073cf8ba78..800541af66 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -82,7 +82,7 @@ public final class IntrospectionUtils {
                     if ("java.lang.Integer".equals(paramType.getName())
                             || "int".equals(paramType.getName())) {
                         try {
-                            params[0] = new Integer(value);
+                            params[0] = Integer.valueOf(value);
                         } catch (NumberFormatException ex) {
                             ok = false;
                         }
@@ -90,7 +90,7 @@ public final class IntrospectionUtils {
                     }else if ("java.lang.Long".equals(paramType.getName())
                                 || "long".equals(paramType.getName())) {
                             try {
-                                params[0] = new Long(value);
+                                params[0] = Long.valueOf(value);
                             } catch (NumberFormatException ex) {
                                 ok = false;
                             }
@@ -407,7 +407,7 @@ public final class IntrospectionUtils {
         } else if ("java.lang.Integer".equals(paramType.getName())
                 || "int".equals(paramType.getName())) {
             try {
-                result = new Integer(object);
+                result = Integer.valueOf(object);
             } catch (NumberFormatException ex) {
             }
             // Try a setFoo ( boolean )

==================================================
Registry.java
index 483135f8aa..70bfec65aa 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -114,7 +114,7 @@ public final class FastHttpDateFormat {
     public static final String formatDate
         (long value, DateFormat threadLocalformat) {
 
-        Long longValue = new Long(value);
+        Long longValue = Long.valueOf(value);
         String cachedDate = formatCache.get(longValue);
         if (cachedDate != null) {
             return cachedDate;
@@ -177,7 +177,7 @@ public final class FastHttpDateFormat {
         if (date == null) {
             return null;
         }
-        return new Long(date.getTime());
+        return Long.valueOf(date.getTime());
     }
 
 

==================================================
AprEndpoint.java
index 228af203ca..54113905ab 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -310,7 +310,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
             ids.put( domain, id);
         }
         int code=id[0]++;
-        domainTable.put( name, new Integer( code ));
+        domainTable.put( name, Integer.valueOf( code ));
         return code;
     }
 
@@ -511,10 +511,10 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
             }
         } else if( "java.lang.Integer".equals( type ) ||
                 "int".equals( type )) {
-            objValue=new Integer( value );
+            objValue=Integer.valueOf( value );
         } else if( "java.lang.Long".equals( type ) ||
                 "long".equals( type )) {
-            objValue=new Long( value );
+            objValue=Long.valueOf( value );
         } else if( "java.lang.Boolean".equals( type ) ||
                 "boolean".equals( type )) {
             objValue=Boolean.valueOf( value );

==================================================
SocketProperties.java
index b40cf1cc3b..3c9c87782c 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2044,7 +2044,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             if (rv == Status.APR_SUCCESS) {
                 sendfileCount--;
             }
-            sendfileData.remove(new Long(data.socket));
+            sendfileData.remove(Long.valueOf(data.socket));
         }
 
         /**
@@ -2092,7 +2092,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                                 SendfileData data = addS.get(i);
                                 int rv = Poll.add(sendfilePollset, data.socket, Poll.APR_POLLOUT);
                                 if (rv == Status.APR_SUCCESS) {
-                                    sendfileData.put(new Long(data.socket), data);
+                                    sendfileData.put(Long.valueOf(data.socket), data);
                                     sendfileCount++;
                                 } else {
                                     getLog().warn(sm.getString(
@@ -2114,7 +2114,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                         for (int n = 0; n < rv; n++) {
                             // Get the sendfile state
                             SendfileData state =
-                                sendfileData.get(new Long(desc[n*2+1]));
+                                sendfileData.get(Long.valueOf(desc[n*2+1]));
                             // Problem events
                             if (((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP)
                                     || ((desc[n*2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)) {
@@ -2186,7 +2186,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                         if (rv > 0) {
                             for (int n = 0; n < rv; n++) {
                                 // Get the sendfile state
-                                SendfileData state = sendfileData.get(new Long(desc[n]));
+                                SendfileData state = sendfileData.get(Long.valueOf(desc[n]));
                                 // Close socket and clear pool
                                 remove(state);
                                 // Destroy file descriptor pool, which should close the file

==================================================
AsyncChannelWrapperSecure.java
index a800ebdbfd..279cf3abc5 100644
--- a/java/org/apache/tomcat/util/net/SocketProperties.java
+++ b/java/org/apache/tomcat/util/net/SocketProperties.java
@@ -136,7 +136,7 @@ public class SocketProperties {
     /**
      * SO_TIMEOUT option. default is 20000.
      */
-    protected Integer soTimeout = new Integer(20000);
+    protected Integer soTimeout = Integer.valueOf(20000);
 
     /**
      * Performance preferences according to

==================================================
