003e071140520ffc2d02b4b1cee75e647352b2b6
==================================================
Add default instance manager factory method
==================================================
remm remm@apache.org
==================================================
Mon May 27 18:55:02 2019 +0200
==================================================
Context.java
Add default instance manager factory method

This can be used for nicer looking framework integration, instead of
hacking and replacing the instance manager after the fact (if extending
the default instance manager was desired).


==================================================
StandardContext.java
index 5e3d28586c..49453f2edd 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -930,6 +930,14 @@ public interface Context extends Container, ContextBind {
     public void addWrapperListener(String listener);
 
 
+    /**
+     * Factory method to create and return a new InstanceManager
+     * instance. This can be used for framework integration or easier
+     * configuration with custom Context implementations.
+     * @return the instance manager
+     */
+    public InstanceManager createInstanceManager();
+
     /**
      * Factory method to create and return a new Wrapper instance, of
      * the Java implementation class appropriate for this Context

==================================================
FailedContext.java
index 2753ff84ca..975b81e0c9 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5109,14 +5109,7 @@ public class StandardContext extends ContainerBase
 
             if (ok ) {
                 if (getInstanceManager() == null) {
-                    javax.naming.Context context = null;
-                    if (isUseNaming() && getNamingContextListener() != null) {
-                        context = getNamingContextListener().getEnvContext();
-                    }
-                    Map<String, Map<String, String>> injectionMap = buildInjectionMap(
-                            getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());
-                    setInstanceManager(new DefaultInstanceManager(context,
-                            injectionMap, this, this.getClass().getClassLoader()));
+                    setInstanceManager(createInstanceManager());
                 }
                 getServletContext().setAttribute(
                         InstanceManager.class.getName(), getInstanceManager());
@@ -5248,6 +5241,18 @@ public class StandardContext extends ContainerBase
         }
     }
 
+    @Override
+    public InstanceManager createInstanceManager() {
+        javax.naming.Context context = null;
+        if (isUseNaming() && getNamingContextListener() != null) {
+            context = getNamingContextListener().getEnvContext();
+        }
+        Map<String, Map<String, String>> injectionMap = buildInjectionMap(
+                getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());
+       return new DefaultInstanceManager(context, injectionMap,
+               this, this.getClass().getClassLoader());
+    }
+
     private Map<String, Map<String, String>> buildInjectionMap(NamingResourcesImpl namingResources) {
         Map<String, Map<String, String>> injectionMap = new HashMap<>();
         for (Injectable resource: namingResources.findLocalEjbs()) {

==================================================
TesterContext.java
index 02f58472b6..39d7b8a32b 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -604,6 +604,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public void removeWrapperListener(String listener) { /* NO-OP */ }
 
+    @Override
+    public InstanceManager createInstanceManager() { return null; }
+
     @Override
     public Wrapper createWrapper() { return null; }
 

==================================================
