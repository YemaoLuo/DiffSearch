38ef1f624aaf045458b6fe055742fa680a96a9e1
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63223
==================================================
Mark Thomas
==================================================
Thu Mar 7 10:50:05 2019 +0000
==================================================
Http2UpgradeHandler.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63223

Include pushed streams in the count of currently open streams
Reject (ignore) a pushed stream if max streams has been reached
Correctly track the state of a pushed stream


==================================================
Stream.java
index 4189a3f4a6..349a4c8c35 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -551,6 +551,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         synchronized (socketWrapper) {
             doWriteHeaders(stream, pushedStreamId, mimeHeaders, endOfStream, payloadSize);
         }
+        stream.sentHeaders();
         if (endOfStream) {
             stream.sentEndOfStream();
         }
@@ -1177,6 +1178,13 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
 
 
     void push(Request request, Stream associatedStream) throws IOException {
+        if (localSettings.getMaxConcurrentStreams() < activeRemoteStreamCount.incrementAndGet()) {
+            // If there are too many open streams, simply ignore the push
+            // request.
+            activeRemoteStreamCount.decrementAndGet();
+            return;
+        }
+
         Stream pushStream;
 
         // Synchronized since PUSH_PROMISE frames have to be sent in order. Once

==================================================
StreamStateMachine.java
index 3b14bb6bdd..32c90b8e1a 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -620,6 +620,11 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    final void sentHeaders() {
+        state.sentHeaders();
+    }
+
+
     final void sentEndOfStream() {
         streamOutputBuffer.endOfStreamSent = true;
         state.sentEndOfStream();

==================================================
