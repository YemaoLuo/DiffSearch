8053cbfd45ba037228d1b24ef733210204a6dad9
==================================================
Add i18n for ssi package.
==================================================
Remy Maucherat
==================================================
Mon Dec 10 14:36:26 2018 +0000
==================================================
ExpressionParseTree.java
Add i18n for ssi package.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848582 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSIConfig.java
index 7a3a892903..370996cffb 100644
--- a/java/org/apache/catalina/ssi/LocalStrings.properties
+++ b/java/org/apache/catalina/ssi/LocalStrings.properties
@@ -13,4 +13,35 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+expressionParseTree.extraNodes=Extra nodes created
+expressionParseTree.invalidExpression=Invalid expression [{0}]
+expressionParseTree.noNodes=No nodes created
+expressionParseTree.unusedOpCodes=Unused nodes exist
 
+ssiCommand.invalidAttribute=Invalid attribute [{0}]
+
+ssiEcho.invalidEncoding=Invalid encoding [{0}]
+
+ssiExec.executeFailed=Cannot execute file [{0}]
+
+ssiFlastmod.noLastModified=Cannot get last modification date for file [{0}]
+
+ssiFsize.invalidAttribute=Invalid attribute [{0}]
+ssiFsize.invalidNumChars=The number of characters cannot be negative
+ssiFsize.noSize=Cannot get size for file [{0}]
+
+ssiInclude.includeFailed=Cannot include file [{0}]
+
+ssiMediator.unknownEncoding=Unknown encoding [{0}]
+
+ssiServletExternalResolver.absoluteNonVirtualPath=Non virtual [{0}] path cannot be absolute
+ssiServletExternalResolver.noContext=No context for path normalized to [{0}]
+ssiServletExternalResolver.noIncludeFile=Include file [{0}] not found
+ssiServletExternalResolver.noFile=File [{0}] not found
+ssiServletExternalResolver.noResource=Context did not contain resource [{0}]
+ssiServletExternalResolver.normalizationError=Normalization returned null for path [{0}]
+ssiServletExternalResolver.pathTraversalNonVirtualPath=Non virtual path [{0}] cannot contain path traversal sequences
+ssiServletExternalResolver.removeFilenameError=Cannot remove filename from path [{0}]
+ssiServletExternalResolver.requestDispatcherError=Cannot get request dispatcher for path [{0}]
+
+ssiSet.noVariable=No variable specified

==================================================
SSIEcho.java
index 4c638fa0a6..3e7fd8cda0 100644
--- a/java/org/apache/catalina/ssi/SSIConfig.java
+++ b/java/org/apache/catalina/ssi/SSIConfig.java
@@ -18,6 +18,8 @@ package org.apache.catalina.ssi;
 
 
 import java.io.PrintWriter;
+
+import org.apache.tomcat.util.res.StringManager;
 /**
  * Implements the Server-side #exec command
  *
@@ -27,6 +29,7 @@ import java.io.PrintWriter;
  * @author David Becker
  */
 public final class SSIConfig implements SSICommand {
+    private static final StringManager sm = StringManager.getManager(SSIConfig.class);
     /**
      * @see SSICommand
      */
@@ -45,7 +48,7 @@ public final class SSIConfig implements SSICommand {
             } else if (paramName.equalsIgnoreCase("timefmt")) {
                 ssiMediator.setConfigTimeFmt(substitutedValue);
             } else {
-                ssiMediator.log("#config--Invalid attribute: " + paramName);
+                ssiMediator.log(sm.getString("ssiCommand.invalidAttribute", paramName));
                 //We need to fetch this value each time, since it may change
                 // during the
                 // loop

==================================================
SSIExec.java
index 0c05df708a..6f4b933465 100644
--- a/java/org/apache/catalina/ssi/SSIEcho.java
+++ b/java/org/apache/catalina/ssi/SSIEcho.java
@@ -18,6 +18,8 @@ package org.apache.catalina.ssi;
 
 
 import java.io.PrintWriter;
+
+import org.apache.tomcat.util.res.StringManager;
 /**
  * Return the result associated with the supplied Server Variable.
  *
@@ -27,6 +29,7 @@ import java.io.PrintWriter;
  * @author David Becker
  */
 public class SSIEcho implements SSICommand {
+    private static final StringManager sm = StringManager.getManager(SSIEcho.class);
     protected static final String DEFAULT_ENCODING = "entity";
     protected static final String MISSING_VARIABLE_VALUE = "(none)";
 
@@ -49,11 +52,11 @@ public class SSIEcho implements SSICommand {
                 if (isValidEncoding(paramValue)) {
                     encoding = paramValue;
                 } else {
-                    ssiMediator.log("#echo--Invalid encoding: " + paramValue);
+                    ssiMediator.log(sm.getString("ssiEcho.invalidEncoding", paramValue));
                     writer.write(errorMessage);
                 }
             } else {
-                ssiMediator.log("#echo--Invalid attribute: " + paramName);
+                ssiMediator.log(sm.getString("ssiCommand.invalidAttribute", paramName));
                 writer.write(errorMessage);
             }
         }

==================================================
SSIFlastmod.java
index 2f7493c207..605f7fa6db 100644
--- a/java/org/apache/catalina/ssi/SSIExec.java
+++ b/java/org/apache/catalina/ssi/SSIExec.java
@@ -23,6 +23,7 @@ import java.io.InputStreamReader;
 import java.io.PrintWriter;
 
 import org.apache.catalina.util.IOTools;
+import org.apache.tomcat.util.res.StringManager;
 /**
  * Implements the Server-side #exec command
  *
@@ -33,6 +34,7 @@ import org.apache.catalina.util.IOTools;
  * @author David Becker
  */
 public class SSIExec implements SSICommand {
+    private static final StringManager sm = StringManager.getManager(SSIExec.class);
     protected final SSIInclude ssiInclude = new SSIInclude();
     protected static final int BUFFER_SIZE = 1024;
 
@@ -68,14 +70,14 @@ public class SSIExec implements SSICommand {
                 proc.waitFor();
                 lastModified = System.currentTimeMillis();
             } catch (InterruptedException e) {
-                ssiMediator.log("Couldn't exec file: " + substitutedValue, e);
+                ssiMediator.log(sm.getString("ssiExec.executeFailed", substitutedValue), e);
                 writer.write(configErrMsg);
             } catch (IOException e) {
                 if (!foundProgram) {
-                    //apache doesn't output an error message if it can't find
+                    // Apache doesn't output an error message if it can't find
                     // a program
                 }
-                ssiMediator.log("Couldn't exec file: " + substitutedValue, e);
+                ssiMediator.log(sm.getString("ssiExec.executeFailed", substitutedValue), e);
             }
         }
         return lastModified;

==================================================
SSIFsize.java
index 924b1d96ac..17afc5ef4d 100644
--- a/java/org/apache/catalina/ssi/SSIFlastmod.java
+++ b/java/org/apache/catalina/ssi/SSIFlastmod.java
@@ -22,6 +22,7 @@ import java.util.Date;
 import java.util.Locale;
 
 import org.apache.catalina.util.Strftime;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * Implements the Server-side #flastmod command
@@ -32,6 +33,7 @@ import org.apache.catalina.util.Strftime;
  * @author David Becker
  */
 public final class SSIFlastmod implements SSICommand {
+    private static final StringManager sm = StringManager.getManager(SSIFlastmod.class);
     /**
      * @see SSICommand
      */
@@ -55,14 +57,11 @@ public final class SSIFlastmod implements SSICommand {
                     String configTimeFmt = ssiMediator.getConfigTimeFmt();
                     writer.write(formatDate(date, configTimeFmt));
                 } else {
-                    ssiMediator.log("#flastmod--Invalid attribute: "
-                            + paramName);
+                    ssiMediator.log(sm.getString("ssiCommand.invalidAttribute", paramName));
                     writer.write(configErrMsg);
                 }
             } catch (IOException e) {
-                ssiMediator.log(
-                        "#flastmod--Couldn't get last modified for file: "
-                                + substitutedValue, e);
+                ssiMediator.log(sm.getString("ssiFlastmod.noLastModified", substitutedValue), e);
                 writer.write(configErrMsg);
             }
         }

==================================================
SSIInclude.java
index 5448f21015..17ea21ff19 100644
--- a/java/org/apache/catalina/ssi/SSIFsize.java
+++ b/java/org/apache/catalina/ssi/SSIFsize.java
@@ -20,6 +20,8 @@ package org.apache.catalina.ssi;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.text.DecimalFormat;
+
+import org.apache.tomcat.util.res.StringManager;
 /**
  * Implements the Server-side #fsize command
  *
@@ -29,6 +31,7 @@ import java.text.DecimalFormat;
  * @author David Becker
  */
 public final class SSIFsize implements SSICommand {
+    private static final StringManager sm = StringManager.getManager(SSIFsize.class);
     static final int ONE_KILOBYTE = 1024;
     static final int ONE_MEGABYTE = 1024 * 1024;
 
@@ -57,12 +60,11 @@ public final class SSIFsize implements SSICommand {
                     String configSizeFmt = ssiMediator.getConfigSizeFmt();
                     writer.write(formatSize(size, configSizeFmt));
                 } else {
-                    ssiMediator.log("#fsize--Invalid attribute: " + paramName);
+                    ssiMediator.log(sm.getString("ssiCommand.invalidAttribute", paramName));
                     writer.write(configErrMsg);
                 }
             } catch (IOException e) {
-                ssiMediator.log("#fsize--Couldn't get size for file: "
-                        + substitutedValue, e);
+                ssiMediator.log(sm.getString("ssiFsize.noSize", substitutedValue), e);
                 writer.write(configErrMsg);
             }
         }
@@ -72,7 +74,7 @@ public final class SSIFsize implements SSICommand {
 
     public String repeat(char aChar, int numChars) {
         if (numChars < 0) {
-            throw new IllegalArgumentException("Num chars can't be negative");
+            throw new IllegalArgumentException(sm.getString("ssiFsize.invalidNumChars"));
         }
         StringBuilder buf = new StringBuilder();
         for (int i = 0; i < numChars; i++) {

==================================================
SSIMediator.java
index 9200b8e0e4..b8e035bb45 100644
--- a/java/org/apache/catalina/ssi/SSIInclude.java
+++ b/java/org/apache/catalina/ssi/SSIInclude.java
@@ -19,6 +19,8 @@ package org.apache.catalina.ssi;
 
 import java.io.IOException;
 import java.io.PrintWriter;
+
+import org.apache.tomcat.util.res.StringManager;
 /**
  * Implements the Server-side #include command
  *
@@ -28,6 +30,7 @@ import java.io.PrintWriter;
  * @author David Becker
  */
 public final class SSIInclude implements SSICommand {
+    private static final StringManager sm = StringManager.getManager(SSIInclude.class);
     /**
      * @see SSICommand
      */
@@ -51,13 +54,11 @@ public final class SSIInclude implements SSICommand {
                             virtual);
                     writer.write(text);
                 } else {
-                    ssiMediator.log("#include--Invalid attribute: "
-                            + paramName);
+                    ssiMediator.log(sm.getString("ssiCommand.invalidAttribute", paramName));
                     writer.write(configErrMsg);
                 }
             } catch (IOException e) {
-                ssiMediator.log("#include--Couldn't include file: "
-                        + substitutedValue, e);
+                ssiMediator.log(sm.getString("ssiInclude.includeFailed", substitutedValue), e);
                 writer.write(configErrMsg);
             }
         }

==================================================
SSIServlet.java
index 3e65ee6457..ff4a0cf43e 100644
--- a/java/org/apache/catalina/ssi/SSIMediator.java
+++ b/java/org/apache/catalina/ssi/SSIMediator.java
@@ -29,6 +29,7 @@ import java.util.regex.Matcher;
 
 import org.apache.catalina.util.Strftime;
 import org.apache.catalina.util.URLEncoder;
+import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.security.Escape;
 
 /**
@@ -42,6 +43,7 @@ import org.apache.tomcat.util.security.Escape;
  * @author David Becker
  */
 public class SSIMediator {
+    private static final StringManager sm = StringManager.getManager(SSIMediator.class);
     protected static final String DEFAULT_CONFIG_ERR_MSG = "[an error occurred while processing this directive]";
     protected static final String DEFAULT_CONFIG_TIME_FMT = "%A, %d-%b-%Y %T %Z";
     protected static final String DEFAULT_CONFIG_SIZE_FMT = "abbrev";
@@ -289,7 +291,7 @@ public class SSIMediator {
             retVal = Escape.htmlElementContent(value);
         } else {
             //This shouldn't be possible
-            throw new IllegalArgumentException("Unknown encoding: " + encoding);
+            throw new IllegalArgumentException(sm.getString("ssiMediator.unknownEncoding", encoding));
         }
         return retVal;
     }

==================================================
SSIServletExternalResolver.java
index dd5ecdce16..a39ed90aea 100644
--- a/java/org/apache/catalina/ssi/SSIServlet.java
+++ b/java/org/apache/catalina/ssi/SSIServlet.java
@@ -158,13 +158,11 @@ public class SSIServlet extends HttpServlet {
         if (path == null || path.toUpperCase(Locale.ENGLISH).startsWith("/WEB-INF")
                 || path.toUpperCase(Locale.ENGLISH).startsWith("/META-INF")) {
             res.sendError(HttpServletResponse.SC_NOT_FOUND, path);
-            log("Can't serve file: " + path);
             return;
         }
         URL resource = servletContext.getResource(path);
         if (resource == null) {
             res.sendError(HttpServletResponse.SC_NOT_FOUND, path);
-            log("Can't find file: " + path);
             return;
         }
         String resourceMimeType = servletContext.getMimeType(path);

==================================================
SSISet.java
index 946e746793..6286ed88ba 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -39,6 +39,7 @@ import org.apache.coyote.Constants;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.http.RequestUtil;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * An implementation of SSIExternalResolver that is used with servlets.
@@ -47,6 +48,7 @@ import org.apache.tomcat.util.http.RequestUtil;
  * @author David Becker
  */
 public class SSIServletExternalResolver implements SSIExternalResolver {
+    private static final StringManager sm = StringManager.getManager(SSIServletExternalResolver.class);
     protected final String VARIABLE_NAMES[] = {"AUTH_TYPE", "CONTENT_LENGTH",
             "CONTENT_TYPE", "DOCUMENT_NAME", "DOCUMENT_URI",
             "GATEWAY_INTERFACE", "HTTP_ACCEPT", "HTTP_ACCEPT_ENCODING",
@@ -374,14 +376,12 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
         String pathWithoutContext = SSIServletRequestUtil.getRelativePath(req);
         String prefix = getPathWithoutFileName(pathWithoutContext);
         if (prefix == null) {
-            throw new IOException("Couldn't remove filename from path: "
-                    + pathWithoutContext);
+            throw new IOException(sm.getString("ssiServletExternalResolver.removeFilenameError", pathWithoutContext));
         }
         String fullPath = prefix + path;
         String retVal = RequestUtil.normalize(fullPath);
         if (retVal == null) {
-            throw new IOException("Normalization yielded null on path: "
-                    + fullPath);
+            throw new IOException(sm.getString("ssiServletExternalResolver.normalizationError", fullPath));
         }
         return retVal;
     }
@@ -390,12 +390,10 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     protected ServletContextAndPath getServletContextAndPathFromNonVirtualPath(
             String nonVirtualPath) throws IOException {
         if (nonVirtualPath.startsWith("/") || nonVirtualPath.startsWith("\\")) {
-            throw new IOException("A non-virtual path can't be absolute: "
-                    + nonVirtualPath);
+            throw new IOException(sm.getString("ssiServletExternalResolver.absoluteNonVirtualPath", nonVirtualPath));
         }
         if (nonVirtualPath.contains("../")) {
-            throw new IOException("A non-virtual path can't contain '../' : "
-                    + nonVirtualPath);
+            throw new IOException(sm.getString("ssiServletExternalResolver.pathTraversalNonVirtualPath", nonVirtualPath));
         }
         String path = getAbsolutePath(nonVirtualPath);
         ServletContextAndPath csAndP = new ServletContextAndPath(
@@ -419,8 +417,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
 
         ServletContext normContext = context.getContext(normalized);
         if (normContext == null) {
-            throw new IOException("Couldn't get context for path: "
-                    + normalized);
+            throw new IOException(sm.getString("ssiServletExternalResolver.noContext", normalized));
         }
         //If it's the root context, then there is no context element
         // to remove,
@@ -472,7 +469,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
         String path = csAndP.getPath();
         URL url = context.getResource(path);
         if (url == null) {
-            throw new IOException("Context did not contain resource: " + path);
+            throw new IOException(sm.getString("ssiServletExternalResolver.noResource", path));
         }
         URLConnection urlConnection = url.openConnection();
         return urlConnection;
@@ -519,8 +516,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
             String path = csAndP.getPath();
             RequestDispatcher rd = context.getRequestDispatcher(path);
             if (rd == null) {
-                throw new IOException(
-                        "Couldn't get request dispatcher for path: " + path);
+                throw new IOException(sm.getString("ssiServletExternalResolver.requestDispatcherError", path));
             }
             ByteArrayServletOutputStream basos = new ByteArrayServletOutputStream();
             ResponseIncludeWrapper responseIncludeWrapper = new ResponseIncludeWrapper(res, basos);
@@ -543,12 +539,11 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
             // if a truly empty file
             //were included, but not sure how else to tell.
             if (retVal.equals("") && !req.getMethod().equalsIgnoreCase("HEAD")) {
-                throw new IOException("Couldn't find file: " + path);
+                throw new IOException(sm.getString("ssiServletExternalResolver.noFile", path));
             }
             return retVal;
         } catch (ServletException e) {
-            throw new IOException("Couldn't include file: " + originalPath
-                    + " because of ServletException: " + e.getMessage());
+            throw new IOException(sm.getString("ssiServletExternalResolver.noIncludeFile", originalPath), e);
         }
     }
 

==================================================
