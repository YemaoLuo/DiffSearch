98f71f8023c41e73e0aa8cce1f57d211d152e56b
==================================================
Using abstract classes means impl isn't clear in the startup log. Modify name so it is clear.
==================================================
Mark Emlyn
==================================================
Mon Dec 13 12:47:04 2010 +0000
==================================================
AbstractAjpProtocol.java
Using abstract classes means impl isn't clear in the startup log. Modify name so it is clear.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1045099 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 9d09990148..3b1cba0b78 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -63,12 +63,4 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
             this.packetSize = packetSize;
         }
     }
-
-
-    // ----------------------------------------------------- JMX related methods
-
-    @Override
-    protected String getNamePrefix() {
-        return ("ajp");
-    }
 }

==================================================
AjpProtocol.java
index 25ba562f4a..ad78d8f759 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -97,6 +97,15 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
     public void setPollerSize(int pollerSize) { ((AprEndpoint)endpoint).setPollerSize(pollerSize); }
     public int getPollerSize() { return ((AprEndpoint)endpoint).getPollerSize(); }
 
+
+    // ----------------------------------------------------- JMX related methods
+
+    @Override
+    protected String getNamePrefix() {
+        return ("ajp-apr");
+    }
+
+
     // --------------------------------------  AjpConnectionHandler Inner Class
 
 

==================================================
AbstractHttp11Protocol.java
index 5eaf76501a..7bd7cd6385 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -84,6 +84,14 @@ public class AjpProtocol extends AbstractAjpProtocol {
     private AjpConnectionHandler cHandler;
 
 
+    // ----------------------------------------------------- JMX related methods
+
+    @Override
+    protected String getNamePrefix() {
+        return ("ajp-bio");
+    }
+
+
     // --------------------------------------  AjpConnectionHandler Inner Class
 
 

==================================================
Http11AprProtocol.java
index 648409b86d..cb77d821b1 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -179,12 +179,4 @@ public abstract class AbstractHttp11Protocol extends AbstractProtocolHandler {
     public void setMaxKeepAliveRequests(int mkar) {
         endpoint.setMaxKeepAliveRequests(mkar);
     }
-
-    
-    // ----------------------------------------------------- JMX related methods
-
-    @Override
-    protected String getNamePrefix() {
-        return ("http");
-    }
 }

==================================================
Http11NioProtocol.java
index b94dc7e776..916520b441 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -188,6 +188,14 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
     public int getSSLVerifyDepth() { return ((AprEndpoint)endpoint).getSSLVerifyDepth(); }
     public void setSSLVerifyDepth(int SSLVerifyDepth) { ((AprEndpoint)endpoint).setSSLVerifyDepth(SSLVerifyDepth); }
     
+    // ----------------------------------------------------- JMX related methods
+
+    @Override
+    protected String getNamePrefix() {
+        return ("http-apr");
+    }
+
+
     // --------------------  Connection handler --------------------
 
     static class Http11ConnectionHandler implements Handler {

==================================================
Http11Protocol.java
index 3f6a0f4749..15d8a869a0 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -147,9 +147,14 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
         ((NioEndpoint)endpoint).setOomParachute(oomParachute);
     }
 
-    // --------------------  SSL related properties --------------------
+    // ----------------------------------------------------- JMX related methods
+
+    @Override
+    protected String getNamePrefix() {
+        return ("http-nio");
+    }
+
 
-    
     // --------------------  Connection handler --------------------
 
     static class Http11ConnectionHandler implements Handler {

==================================================
