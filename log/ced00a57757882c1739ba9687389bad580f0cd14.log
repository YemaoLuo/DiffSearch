ced00a57757882c1739ba9687389bad580f0cd14
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57446
==================================================
Mark Thomas
==================================================
Mon Jan 19 09:08:08 2015 +0000
==================================================
StandardContext.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57446
Ensure that the ServletContext presented to a listener for contextInitialized() is the same as the one presented when contextDestroyed() is called for the same listener.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1652938 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestStandardContext.java
index 5404987b1d..32e0bd3df3 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -210,6 +210,12 @@ public class StandardContext extends ContainerBase
 
     private final Object applicationListenersLock = new Object();
 
+    /**
+     * The set of application listeners that are required to have limited access
+     * to ServletContext methods. See Servlet 3.1 section 4.4.
+     */
+
+    private final Set<Object> noPluggabilityListeners = new HashSet<>();
 
     /**
      * The set of instantiated application event listener objects. Note that
@@ -289,6 +295,13 @@ public class StandardContext extends ContainerBase
      */
     protected ApplicationContext context = null;
 
+    /**
+     * The wrapped version of the associated ServletContext that is presented
+     * to listeners that are required to have limited access to ServletContext
+     * methods. See Servlet 3.1 section 4.4.
+     */
+    private NoPluggabilityServletContext noPluggabilityServletContext = null;
+
 
     /**
      * Should we attempt to use cookies for session id communication?
@@ -4618,7 +4631,6 @@ public class StandardContext extends ContainerBase
         String listeners[] = findApplicationListeners();
         Object results[] = new Object[listeners.length];
         boolean ok = true;
-        Set<Object> noPluggabilityListeners = new HashSet<>();
         for (int i = 0; i < results.length; i++) {
             if (getLogger().isDebugEnabled())
                 getLogger().debug(" Configuring event listener class '" +
@@ -4687,12 +4699,11 @@ public class StandardContext extends ContainerBase
             return ok;
         }
 
-        ServletContextEvent event =
-                new ServletContextEvent(getServletContext());
+        ServletContextEvent event = new ServletContextEvent(getServletContext());
         ServletContextEvent tldEvent = null;
         if (noPluggabilityListeners.size() > 0) {
-            tldEvent = new ServletContextEvent(new NoPluggabilityServletContext(
-                    getServletContext()));
+            noPluggabilityServletContext = new NoPluggabilityServletContext(getServletContext());
+            tldEvent = new ServletContextEvent(noPluggabilityServletContext);
         }
         for (int i = 0; i < instances.length; i++) {
             if (!(instances[i] instanceof ServletContextListener))
@@ -4734,8 +4745,11 @@ public class StandardContext extends ContainerBase
         boolean ok = true;
         Object listeners[] = getApplicationLifecycleListeners();
         if (listeners != null && listeners.length > 0) {
-            ServletContextEvent event =
-                new ServletContextEvent(getServletContext());
+            ServletContextEvent event = new ServletContextEvent(getServletContext());
+            ServletContextEvent tldEvent = null;
+            if (noPluggabilityServletContext != null) {
+                tldEvent = new ServletContextEvent(noPluggabilityServletContext);
+            }
             for (int i = 0; i < listeners.length; i++) {
                 int j = (listeners.length - 1) - i;
                 if (listeners[j] == null)
@@ -4745,7 +4759,11 @@ public class StandardContext extends ContainerBase
                         (ServletContextListener) listeners[j];
                     try {
                         fireContainerEvent("beforeContextDestroyed", listener);
-                        listener.contextDestroyed(event);
+                        if (noPluggabilityListeners.contains(listener)) {
+                            listener.contextDestroyed(tldEvent);
+                        } else {
+                            listener.contextDestroyed(event);
+                        }
                         fireContainerEvent("afterContextDestroyed", listener);
                     } catch (Throwable t) {
                         ExceptionUtils.handleThrowable(t);
@@ -4792,8 +4810,10 @@ public class StandardContext extends ContainerBase
         setApplicationEventListeners(null);
         setApplicationLifecycleListeners(null);
 
-        return (ok);
+        noPluggabilityServletContext = null;
+        noPluggabilityListeners.clear();
 
+        return ok;
     }
 
 

==================================================
TesterTldListener.java
index 0b1e26bd35..64bedd1d69 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -871,7 +871,8 @@ public class TestStandardContext extends TomcatBaseTest {
         ctx.stop();
 
         String log = TesterTldListener.getLog();
-        Assert.assertTrue(log, log.contains("PASS"));
+        Assert.assertTrue(log, log.contains("PASS-01"));
+        Assert.assertTrue(log, log.contains("PASS-02"));
         Assert.assertFalse(log, log.contains("FAIL"));
     }
 

==================================================
