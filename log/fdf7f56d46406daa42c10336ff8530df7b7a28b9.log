fdf7f56d46406daa42c10336ff8530df7b7a28b9
==================================================
Simplify. Buffered data left over after a non-blcoking write is written in the processor
==================================================
Mark Emlyn
==================================================
Wed May 29 19:10:43 2013 +0000
==================================================
ActionCode.java
Simplify. Buffered data left over after a non-blcoking write is written in the processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1487598 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Response.java
index dc36ddcdff..891e142d0d 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -212,12 +212,6 @@ public enum ActionCode {
      */
     NB_WRITE_INTEREST,
 
-    /**
-     * Flush the lower level buffers and re-register the socket with the poller
-     * if the buffers cannot be completely flushed.
-     */
-    NB_WRITE_FLUSH,
-
     /**
      * Indicates if the request body has been fully read.
      */

==================================================
AbstractHttp11Processor.java
index 2f02d47b2c..20e7b95f59 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -595,16 +595,9 @@ public final class Response {
     }
 
     public void onWritePossible() throws IOException {
-        // Flush the lower level buffers
-        // If data left in buffers wait for next onWritePossible. Socket will
-        // have been placed in poller if buffers weren't emptied.
-        AtomicBoolean isDataLeftInBuffers = new AtomicBoolean(true);
-        action(ActionCode.NB_WRITE_FLUSH, isDataLeftInBuffers);
-        if (isDataLeftInBuffers.get()) {
-            return;
-        }
-
-        // No data in lower level buffers. Ready for app to write more data.
+        // Any buffered data left over from a previous non-blocking write is
+        // written in the Processor so if this point is reached the app is able
+        // to write data.
         boolean fire = false;
         synchronized (fireListenerLock) {
             if (fireListener) {

==================================================
InternalNioOutputBuffer.java
index 57576e0184..8f618b3c05 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -821,14 +821,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
                 // TODO
                 throw new IllegalStateException();
             }
-        } else if (actionCode == ActionCode.NB_WRITE_FLUSH) {
-            AtomicBoolean isDataLeftInBuffers = (AtomicBoolean)param;
-            try {
-                isDataLeftInBuffers.set(getOutputBuffer().flushBuffer(false));
-            } catch (IOException e) {
-                // TODO
-                throw new IllegalStateException();
-            }
         } else if (actionCode == ActionCode.NB_READ_INTEREST) {
             registerForEvent(true, false);
         } else if (actionCode == ActionCode.UPGRADE) {

==================================================
