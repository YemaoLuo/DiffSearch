ae32d1d60b77661547e53bdca723972b26f05c39
==================================================
Refactor some duplicate code into an new utility class with an eye to the proposed patch for BZ 53333
==================================================
Mark Emlyn
==================================================
Fri Jun 1 22:03:10 2012 +0000
==================================================
DefaultInstanceManager.java
Refactor some duplicate code into an new utility class with an eye to the proposed patch for BZ 53333

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1345367 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContextConfig.java
index ea4a66536e..462d7a9114 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -68,6 +68,7 @@ containerBase.backgroundProcess.loader=Exception processing loader {0} backgroun
 containerBase.backgroundProcess.manager=Exception processing manager {0} background process
 containerBase.backgroundProcess.realm=Exception processing realm {0} background process
 containerBase.backgroundProcess.valve=Exception processing valve {0} background process
+defaultInstanceManager.invalidInjection=Invalid method resource injection annotation
 filterChain.filter=Filter execution threw an exception
 filterChain.servlet=Servlet execution threw an exception
 jreLeakListener.gcDaemonFail=Failed to trigger creation of the GC Daemon thread during Tomcat start to prevent possible memory leaks. This is expected on non-Sun JVMs.

==================================================
WebAnnotationSet.java
index 2609a33e98..6edd835857 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -44,7 +44,6 @@ contextConfig.inputStreamFile=Unable to process file [{0}] for annotations
 contextConfig.inputStreamJar=Unable to process Jar entry [{0}] from Jar [{1}] for annotations
 contextConfig.inputStreamJndi=Unable to process resource element [{0}] for annotations
 contextConfig.invalidSci=The ServletContentInitializer [{0}] could not be created
-contextConfig.invalidSciHandlesTypes=Unable to load class [{0}] to check against the @HandlesTypes annotation of one or more ServletContentInitializers.
 contextConfig.jndiUrl=Unable to process JNDI URL [{0}] for annotations
 contextConfig.jndiUrlNotDirContextConn=The connection created for URL [{0}] was not a DirContextURLConnection
 contextConfig.jspFile.error=JSP file {0} must start with a ''/'
@@ -122,6 +121,7 @@ userConfig.error=Error deploying web application for user {0}
 userConfig.start=UserConfig: Processing START
 userConfig.stop=UserConfig: Processing STOP
 userConfig.deploy.threaded.error=Error waiting for multi-thread deployment of user directories to complete
+webAnnotationSet.invalidInjection=Invalid method resource injection annotation.
 webRuleSet.absoluteOrdering=<absolute-ordering> element not valid in web-fragment.xml and will be ignored
 webRuleSet.absoluteOrderingCount=<absolute-ordering> element is limited to 1 occurrence
 webRuleSet.nameCount=<name> element is limited to 1 occurrence

==================================================
Introspection.java
index 63af8d66fb..a41244072b 100644
--- a/java/org/apache/catalina/startup/WebAnnotationSet.java
+++ b/java/org/apache/catalina/startup/WebAnnotationSet.java
@@ -14,15 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.startup;
 
-
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 
 import javax.annotation.Resource;
 import javax.annotation.Resources;
@@ -31,15 +26,15 @@ import javax.annotation.security.RunAs;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Wrapper;
-import org.apache.catalina.core.DefaultInstanceManager;
 import org.apache.catalina.deploy.ContextEnvironment;
 import org.apache.catalina.deploy.ContextResource;
 import org.apache.catalina.deploy.ContextResourceEnvRef;
 import org.apache.catalina.deploy.ContextService;
 import org.apache.catalina.deploy.FilterDef;
 import org.apache.catalina.deploy.MessageDestinationRef;
+import org.apache.catalina.util.Introspection;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p><strong>AnnotationSet</strong> for processing the annotations of the web application
@@ -53,8 +48,14 @@ public class WebAnnotationSet {
 
     private static final String SEPARATOR = "/";
 
-    // --------------------------------------------------------- Public Methods
+    /**
+     * The string resources for this package.
+     */
+    protected static final StringManager sm =
+        StringManager.getManager(Constants.Package);
+
 
+    // --------------------------------------------------------- Public Methods
 
     /**
      * Process the annotations on a context.
@@ -79,7 +80,8 @@ public class WebAnnotationSet {
         Class<?> classClass = null;
         String[] applicationListeners = context.findApplicationListeners();
         for (int i = 0; i < applicationListeners.length; i++) {
-            classClass = loadClass(context, applicationListeners[i]);
+            classClass = Introspection.loadClass(context,
+                    applicationListeners[i]);
             if (classClass == null) {
                 continue;
             }
@@ -98,7 +100,8 @@ public class WebAnnotationSet {
         Class<?> classClass = null;
         FilterDef[] filterDefs = context.findFilterDefs();
         for (int i = 0; i < filterDefs.length; i++) {
-            classClass = loadClass(context, (filterDefs[i]).getFilterClass());
+            classClass = Introspection.loadClass(context,
+                    (filterDefs[i]).getFilterClass());
             if (classClass == null) {
                 continue;
             }
@@ -127,7 +130,8 @@ public class WebAnnotationSet {
                     continue;
                 }
 
-                classClass = loadClass(context, wrapper.getServletClass());
+                classClass = Introspection.loadClass(context,
+                        wrapper.getServletClass());
                 if (classClass == null) {
                     continue;
                 }
@@ -254,7 +258,7 @@ public class WebAnnotationSet {
     protected static void loadFieldsAnnotation(Context context,
             Class<?> classClass) {
         // Initialize the annotations
-        Field[] fields = getDeclaredFields(classClass);
+        Field[] fields = Introspection.getDeclaredFields(classClass);
         if (fields != null && fields.length > 0) {
             for (Field field : fields) {
                 if (field.isAnnotationPresent(Resource.class)) {
@@ -272,16 +276,19 @@ public class WebAnnotationSet {
     protected static void loadMethodsAnnotation(Context context,
             Class<?> classClass) {
         // Initialize the annotations
-        Method[] methods = getDeclaredMethods(classClass);
+        Method[] methods = Introspection.getDeclaredMethods(classClass);
         if (methods != null && methods.length > 0) {
             for (Method method : methods) {
                 if (method.isAnnotationPresent(Resource.class)) {
                     Resource annotation = method.getAnnotation(Resource.class);
 
-                    checkBeanNamingConventions(method);
+                    if (!Introspection.isValidSetter(method)) {
+                        throw new IllegalArgumentException(sm.getString(
+                                "webAnnotationSet.invalidInjection"));
+                    }
 
                     String defaultName = classClass.getName() + SEPARATOR +
-                            DefaultInstanceManager.getName(method);
+                            Introspection.getName(method);
 
                     String defaultType =
                             (method.getParameterTypes()[0]).getCanonicalName();
@@ -405,16 +412,6 @@ public class WebAnnotationSet {
     }
 
 
-    private static void checkBeanNamingConventions(Method method) {
-        if (!method.getName().startsWith("set")
-                || method.getName().length() < 4
-                || method.getParameterTypes().length != 1
-                || !method.getReturnType().getName().equals("void")) {
-            throw new IllegalArgumentException("Invalid method resource injection annotation.");
-        }
-    }
-
-
     private static String getType(Resource annotation, String defaultType) {
         String type = annotation.type().getCanonicalName();
         if (type == null || type.equals("java.lang.Object")) {
@@ -435,54 +432,4 @@ public class WebAnnotationSet {
         }
         return name;
     }
-
-
-    private static Field[] getDeclaredFields(Class<?> classClass) {
-        Field[] fields = null;
-        if (Globals.IS_SECURITY_ENABLED) {
-            final Class<?> clazz = classClass;
-            fields = AccessController.doPrivileged(
-                    new PrivilegedAction<Field[]>(){
-                @Override
-                public Field[] run(){
-                    return clazz.getDeclaredFields();
-                }
-            });
-        } else {
-            fields = classClass.getDeclaredFields();
-        }
-        return fields;
-    }
-
-
-    private static Method[] getDeclaredMethods(Class<?> classClass) {
-        Method[] methods = null;
-        if (Globals.IS_SECURITY_ENABLED) {
-            final Class<?> clazz = classClass;
-            methods = AccessController.doPrivileged(
-                    new PrivilegedAction<Method[]>(){
-                @Override
-                public Method[] run(){
-                    return clazz.getDeclaredMethods();
-                }
-            });
-        } else {
-            methods = classClass.getDeclaredMethods();
-        }
-        return methods;
-    }
-
-
-    private static Class<?> loadClass(Context context, String fileString) {
-        ClassLoader classLoader = context.getLoader().getClassLoader();
-        Class<?> classClass = null;
-        try {
-            classClass = classLoader.loadClass(fileString);
-        } catch (ClassNotFoundException e) {
-            // We do nothing
-        } catch (NoClassDefFoundError e) {
-            // We do nothing
-        }
-        return classClass;
-    }
 }

==================================================
