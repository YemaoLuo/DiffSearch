91a7237cf439e85f5ca8611956bf09c6c767ebee
==================================================
Use UCDetector to reduce visibility generally in the webresources
==================================================
Mark Emlyn
==================================================
Tue Nov 5 00:09:16 2013 +0000
==================================================
AbstractArchiveResource.java
Use UCDetector to reduce visibility generally in the webresources
package. It can always be increased on a case by case basis if
necessary.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538839 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractArchiveResourceSet.java
index 5e5e42344c..9d991b3ee4 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -63,15 +63,15 @@ public abstract class AbstractArchiveResource extends AbstractResource {
         }
     }
 
-    public String getBase() {
+    protected final String getBase() {
         return base;
     }
 
-    public String getBaseUrl() {
+    protected final String getBaseUrl() {
         return baseUrl;
     }
 
-    public JarEntry getResource() {
+    protected final JarEntry getResource() {
         return resource;
     }
 

==================================================
AbstractFileResourceSet.java
index f61683f3c5..27d75c2a84 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -36,19 +36,19 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
     private Manifest manifest;
 
 
-    protected void setManifest(Manifest manifest) {
+    protected final void setManifest(Manifest manifest) {
         this.manifest = manifest;
     }
 
-    public String getBaseUrl() {
+    protected final String getBaseUrl() {
         return baseUrl;
     }
 
-    public void setBaseUrl(String baseUrl) {
+    protected final void setBaseUrl(String baseUrl) {
         this.baseUrl = baseUrl;
     }
 
-    public HashMap<String,JarEntry> getJarFileEntries() {
+    protected final HashMap<String,JarEntry> getJarFileEntries() {
         return jarFileEntries;
     }
 

==================================================
AbstractResourceSet.java
index 7d6edb4022..e493cf959b 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -26,15 +26,19 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
 
     protected static final String[] EMPTY_STRING_ARRAY = new String[0];
 
-    protected File fileBase;
-    protected String absoluteBase;
-    protected String canonicalBase;
+    private File fileBase;
+    private String absoluteBase;
+    private String canonicalBase;
 
     protected AbstractFileResourceSet(String internalPath) {
         setInternalPath(internalPath);
     }
 
-    protected File file(String name, boolean mustExist) {
+    protected final File getFileBase() {
+        return fileBase;
+    }
+
+    protected final File file(String name, boolean mustExist) {
 
         if (name.equals("/")) {
             name = "";
@@ -96,7 +100,7 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
      *
      * @param path Path to be normalized
      */
-    protected String normalize(String path) {
+    private String normalize(String path) {
         return RequestUtil.normalize(path, File.separatorChar == '/');
     }
 

==================================================
Cache.java
index eab9d1383a..57e1f60659 100644
--- a/java/org/apache/catalina/webresources/AbstractResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractResourceSet.java
@@ -48,16 +48,16 @@ public abstract class AbstractResourceSet extends LifecycleBase
         this.root = root;
     }
 
-    public final WebResourceRoot getRoot() {
+    protected final WebResourceRoot getRoot() {
         return root;
     }
 
 
-    public String getInternalPath() {
+    protected final String getInternalPath() {
         return internalPath;
     }
 
-    public void setInternalPath(String internalPath) {
+    protected final void setInternalPath(String internalPath) {
         checkPath(internalPath);
         // Optimise internal processing
         if (internalPath.equals("/")) {
@@ -67,7 +67,7 @@ public abstract class AbstractResourceSet extends LifecycleBase
         }
     }
 
-    public final void setWebAppMount(String webAppMount) {
+    protected final void setWebAppMount(String webAppMount) {
         checkPath(webAppMount);
         // Optimise internal processing
         if (webAppMount.equals("/")) {
@@ -77,15 +77,15 @@ public abstract class AbstractResourceSet extends LifecycleBase
         }
     }
 
-    public final String getWebAppMount() {
+    protected final String getWebAppMount() {
         return webAppMount;
     }
 
-    public final void setBase(String base) {
+    protected final void setBase(String base) {
         this.base = base;
     }
 
-    public final String getBase() {
+    protected final String getBase() {
         return base;
     }
 

==================================================
FileResource.java
index 691f783c7c..8c6ec4d3ed 100644
--- a/java/org/apache/catalina/webresources/Cache.java
+++ b/java/org/apache/catalina/webresources/Cache.java
@@ -48,7 +48,7 @@ public class Cache {
     private long maxSize = 10 * 1024 * 1024;
     private long maxObjectSize = maxSize / 20;
 
-    private ConcurrentMap<String,CachedResource> resourceCache =
+    private final ConcurrentMap<String,CachedResource> resourceCache =
             new ConcurrentHashMap<>();
 
     public Cache(StandardRoot root) {

==================================================
FileResourceSet.java
index 99914c9bca..d5e2270a12 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -214,10 +214,6 @@ public class FileResource extends AbstractResource {
         return null;
     }
 
-    protected File getResourceInternal() {
-        return resource;
-    }
-
     @Override
     protected Log getLog() {
         return log;

==================================================
StandardRoot.java
index 54ad6a10d0..d32f1138d4 100644
--- a/java/org/apache/catalina/webresources/FileResourceSet.java
+++ b/java/org/apache/catalina/webresources/FileResourceSet.java
@@ -112,8 +112,8 @@ public class FileResourceSet extends AbstractFileResourceSet {
 
         if (webAppMount.startsWith(path)) {
             webAppMount = webAppMount.substring(path.length());
-            if (webAppMount.equals(fileBase.getName())) {
-                return new String[] {fileBase.getName()};
+            if (webAppMount.equals(getFileBase().getName())) {
+                return new String[] {getFileBase().getName()};
             } else {
                 // Virtual directory
                 int i = webAppMount.indexOf('/');
@@ -139,8 +139,8 @@ public class FileResourceSet extends AbstractFileResourceSet {
 
         if (webAppMount.startsWith(path)) {
             webAppMount = webAppMount.substring(path.length());
-            if (webAppMount.equals(fileBase.getName())) {
-                result.add(path + fileBase.getName());
+            if (webAppMount.equals(getFileBase().getName())) {
+                result.add(path + getFileBase().getName());
             } else {
                 // Virtual directory
                 int i = webAppMount.indexOf('/');

==================================================
TomcatURLStreamHandlerFactory.java
index 345375928f..fd2d21fd59 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -61,21 +61,21 @@ public class StandardRoot extends LifecycleMBeanBase
 
     private Context context;
     private boolean allowLinking = false;
-    private ArrayList<WebResourceSet> preResources = new ArrayList<>();
+    private final ArrayList<WebResourceSet> preResources = new ArrayList<>();
     private WebResourceSet main;
-    private ArrayList<WebResourceSet> classResources = new ArrayList<>();
-    private ArrayList<WebResourceSet> jarResources = new ArrayList<>();
-    private ArrayList<WebResourceSet> postResources = new ArrayList<>();
+    private final ArrayList<WebResourceSet> classResources = new ArrayList<>();
+    private final ArrayList<WebResourceSet> jarResources = new ArrayList<>();
+    private final ArrayList<WebResourceSet> postResources = new ArrayList<>();
 
-    private Cache cache = new Cache(this);
+    private final Cache cache = new Cache(this);
     private boolean cachingAllowed = true;
 
     private boolean traceLockedFiles = false;
-    private Set<WebResourceTraceWrapper> tracedResources = new HashSet<>();
+    private final Set<WebResourceTraceWrapper> tracedResources = new HashSet<>();
 
     // Constructs to make iteration over all WebResourceSets simpler
-    private ArrayList<WebResourceSet> mainResources = new ArrayList<>();
-    private ArrayList<ArrayList<WebResourceSet>> allResources =
+    private final ArrayList<WebResourceSet> mainResources = new ArrayList<>();
+    private final ArrayList<ArrayList<WebResourceSet>> allResources =
             new ArrayList<>();
     {
         allResources.add(preResources);
@@ -214,7 +214,7 @@ public class StandardRoot extends LifecycleMBeanBase
     }
 
 
-    protected WebResource getResourceInternal(String path,
+    protected final WebResource getResourceInternal(String path,
             boolean useClassLoaderResources) {
         WebResource result = null;
         WebResource virtual = null;
@@ -490,7 +490,7 @@ public class StandardRoot extends LifecycleMBeanBase
     /**
      * For unit testing
      */
-    protected void setMainResources(WebResourceSet main) {
+    protected final void setMainResources(WebResourceSet main) {
         this.main = main;
         mainResources.clear();
         mainResources.add(main);
@@ -674,12 +674,12 @@ public class StandardRoot extends LifecycleMBeanBase
         }
 
 
-        public String getBasePath() {
+        String getBasePath() {
             return basePath;
         }
 
 
-        public String getArchivePath() {
+        String getArchivePath() {
             return archivePath;
         }
     }

==================================================
