fb3d73bed2af82628df4d79fed2d2ecf3eba88b6
==================================================
Implement maxConnections for NIO connector
==================================================
Filip Hanik
==================================================
Mon Dec 20 21:01:37 2010 +0000
==================================================
AbstractEndpoint.java
Implement maxConnections for NIO connector


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1051291 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JIoEndpoint.java
index 6a4edf2ae9..c3dcda0617 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -32,6 +32,7 @@ import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.net.jsse.JSSESocketFactory;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.threads.CounterLatch;
 import org.apache.tomcat.util.threads.ResizableExecutor;
 import org.apache.tomcat.util.threads.TaskQueue;
 import org.apache.tomcat.util.threads.TaskThreadFactory;
@@ -122,6 +123,11 @@ public abstract class AbstractEndpoint {
      */
     protected volatile boolean internalExecutor = false;
 
+    /**
+     * counter for nr of connections handled by an endpoint
+     */
+    protected volatile CounterLatch connectionCounterLatch = null;
+
     /**
      * Socket properties
      */

==================================================
NioEndpoint.java
index ecfa472c68..1cacd90fc4 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -109,7 +109,7 @@ public class JIoEndpoint extends AbstractEndpoint {
         return false;
     }
     
-    protected CounterLatch connectionCounterLatch = null;
+    
 
 
     // ------------------------------------------------ Handler Inner Interface

==================================================
TestMaxConnections.java
index c48101ec7a..ac56e62f5b 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -57,6 +57,7 @@ import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;
 import org.apache.tomcat.util.net.jsse.JSSESocketFactory;
 import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
+import org.apache.tomcat.util.threads.CounterLatch;
 
 /**
  * NIO tailored thread pool, providing the following services:
@@ -567,6 +568,7 @@ public class NioEndpoint extends AbstractEndpoint {
             running = true;
             paused = false;
             
+            connectionCounterLatch = new CounterLatch(0, getMaxConnections()); 
             // Create worker collection
             if ( getExecutor() == null ) {
                 createExecutor();
@@ -598,6 +600,8 @@ public class NioEndpoint extends AbstractEndpoint {
      */
     @Override
     public void stopInternal() {
+        connectionCounterLatch.releaseAll();
+        connectionCounterLatch = null;
         if (!paused) {
             pause();
         }
@@ -808,6 +812,8 @@ public class NioEndpoint extends AbstractEndpoint {
                     break;
                 }
                 try {
+                    //if we have reached max connections, wait
+                    connectionCounterLatch.await();
                     // Accept the next incoming connection from the server socket
                     SocketChannel socket = serverSock.accept();
                     // Hand this socket off to an appropriate processor
@@ -824,7 +830,9 @@ public class NioEndpoint extends AbstractEndpoint {
                                 if (log.isDebugEnabled())
                                     log.debug("", ix);
                             }
-                        } 
+                        } else {
+                            connectionCounterLatch.countUp();
+                        }
                     }
                 } catch (SocketTimeoutException sx) {
                     //normal condition
@@ -1056,7 +1064,12 @@ public class NioEndpoint extends AbstractEndpoint {
                 if (key.channel().isOpen()) try {key.channel().close();}catch (Exception ignore){}
                 try {if (ka!=null) ka.getSocket().close(true);}catch (Exception ignore){}
                 try {if (ka!=null && ka.getSendfileData()!=null && ka.getSendfileData().fchannel!=null && ka.getSendfileData().fchannel.isOpen()) ka.getSendfileData().fchannel.close();}catch (Exception ignore){}
-                if (ka!=null) ka.reset();
+                if (ka!=null) {
+                    ka.reset();
+                    if (connectionCounterLatch.countDown()<0) {
+                        log.warn("Incorrect connection count, multiple cancel called on the same key?" );
+                    }
+                }
             } catch (Throwable e) {
                 ExceptionUtils.handleThrowable(e);
                 if ( log.isDebugEnabled() ) log.error("",e);

==================================================
