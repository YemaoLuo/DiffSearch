a9b31654851f7e0365631243bf195c678c3f0ff9
==================================================
Add configuration support for SSLHostConfigCertificate
==================================================
Mark Thomas
==================================================
Mon Jun 22 21:50:31 2015 +0000
==================================================
Catalina.java
Add configuration support for SSLHostConfigCertificate
Document the new configuration
Get multiple certificates working with NIO (tested with SSLLabs). Should also be working for NIO2 but untested.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1686949 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CertificateCreateRule.java
index 80177ea5f1..f4834c07da 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -340,8 +340,15 @@ public class Catalina {
                                  "org.apache.tomcat.util.net.SSLHostConfig");
         digester.addSetProperties("Server/Service/Connector/SSLHostConfig");
         digester.addSetNext("Server/Service/Connector/SSLHostConfig",
-                            "addSslHostConfig",
-                            "org.apache.tomcat.util.net.SSLHostConfig");
+                "addSslHostConfig",
+                "org.apache.tomcat.util.net.SSLHostConfig");
+
+        digester.addRule("Server/Service/Connector/SSLHostConfig/Certificate",
+                         new CertificateCreateRule());
+        digester.addSetProperties("Server/Service/Connector/SSLHostConfig/Certificate");
+        digester.addSetNext("Server/Service/Connector/SSLHostConfig/Certificate",
+                            "addCertificate",
+                            "org.apache.tomcat.util.net.SSLHostConfigCertificate");
 
         digester.addObjectCreate("Server/Service/Connector/Listener",
                                  null, // MUST be specified in the element

==================================================
SecureNio2Channel.java
new file mode 100644
index 0000000000..6e49e19395
--- /dev/null
+++ b/java/org/apache/catalina/startup/CertificateCreateRule.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.startup;
+
+import org.apache.tomcat.util.digester.Rule;
+import org.apache.tomcat.util.net.SSLHostConfig;
+import org.apache.tomcat.util.net.SSLHostConfigCertificate;
+import org.apache.tomcat.util.net.SSLHostConfigCertificate.Type;
+import org.xml.sax.Attributes;
+
+/**
+ * Rule implementation that creates a SSLHostConfigCertificate.
+ */
+public class CertificateCreateRule extends Rule {
+
+    @Override
+    public void begin(String namespace, String name, Attributes attributes) throws Exception {
+        SSLHostConfig sslHostConfig = (SSLHostConfig)digester.peek();
+
+        Type type;
+        String typeValue = attributes.getValue("type");
+        if (typeValue == null || typeValue.length() == 0) {
+            type = Type.UNDEFINED;
+        } else {
+            type = Type.valueOf(typeValue);
+        }
+
+        SSLHostConfigCertificate certificate = new SSLHostConfigCertificate(sslHostConfig, type);
+
+        digester.push(certificate);
+    }
+
+
+    /**
+     * Process the end of this element.
+     *
+     * @param namespace the namespace URI of the matching element, or an
+     *   empty string if the parser is not namespace aware or the element has
+     *   no namespace
+     * @param name the local name if the parser is namespace aware, or just
+     *   the element name otherwise
+     */
+    @Override
+    public void end(String namespace, String name) throws Exception {
+        digester.pop();
+    }
+}

==================================================
SecureNioChannel.java
index 0bd8cde6bb..c57d35b73f 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -22,6 +22,7 @@ import java.nio.ByteBuffer;
 import java.nio.channels.AsynchronousSocketChannel;
 import java.nio.channels.CompletionHandler;
 import java.nio.channels.WritePendingException;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -336,10 +337,9 @@ public class SecureNio2Channel extends Nio2Channel  {
         switch (extractor.getResult()) {
         case COMPLETE:
             hostName = extractor.getSNIValue();
-            clientRequestedCiphers = extractor.getClientRequestedCiphers();
-            break;
+            //$FALL-THROUGH$ to set the client requested ciphers
         case NOT_PRESENT:
-            // NO-OP
+            clientRequestedCiphers = extractor.getClientRequestedCiphers();
             break;
         case NEED_READ:
             sc.read(netInBuffer, socket, handshakeReadCompletionHandler);
@@ -350,6 +350,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                 log.debug(sm.getString("channel.nio.ssl.sniDefault"));
             }
             hostName = endpoint.getDefaultSSLHostConfigName();
+            clientRequestedCiphers = Collections.emptyList();
             break;
         }
 

==================================================
TLSClientHelloExtractor.java
index 65c9248e40..dffbf6e7e1 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -23,6 +23,7 @@ import java.nio.ByteBuffer;
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.SocketChannel;
+import java.util.Collections;
 import java.util.List;
 
 import javax.net.ssl.SSLEngine;
@@ -274,10 +275,9 @@ public class SecureNioChannel extends NioChannel  {
         switch (extractor.getResult()) {
         case COMPLETE:
             hostName = extractor.getSNIValue();
-            clientRequestedCiphers = extractor.getClientRequestedCiphers();
-            break;
+            //$FALL-THROUGH$ to set the client requested ciphers
         case NOT_PRESENT:
-            // NO-OP
+            clientRequestedCiphers = extractor.getClientRequestedCiphers();
             break;
         case NEED_READ:
             return SelectionKey.OP_READ;
@@ -287,6 +287,7 @@ public class SecureNioChannel extends NioChannel  {
                 log.debug(sm.getString("channel.nio.ssl.sniDefault"));
             }
             hostName = endpoint.getDefaultSSLHostConfigName();
+            clientRequestedCiphers = Collections.emptyList();
             break;
         }
 

==================================================
