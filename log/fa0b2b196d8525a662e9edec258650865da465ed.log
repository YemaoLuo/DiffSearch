fa0b2b196d8525a662e9edec258650865da465ed
==================================================
Polish
==================================================
lihan lihan@apache.org
==================================================
Fri Apr 28 10:57:48 2023 +0800
==================================================
ContainerBase.java
Polish



==================================================
StandardServer.java
index 9dc018be15..784c9032ef 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -377,7 +377,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
             this.cluster = cluster;
 
             // Stop the old component if necessary
-            if (getState().isAvailable() && (oldCluster != null) && (oldCluster instanceof Lifecycle)) {
+            if (getState().isAvailable() && (oldCluster instanceof Lifecycle)) {
                 try {
                     ((Lifecycle) oldCluster).stop();
                 } catch (LifecycleException e) {
@@ -390,7 +390,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
                 cluster.setContainer(this);
             }
 
-            if (getState().isAvailable() && (cluster != null) && (cluster instanceof Lifecycle)) {
+            if (getState().isAvailable() && (cluster instanceof Lifecycle)) {
                 try {
                     ((Lifecycle) cluster).start();
                 } catch (LifecycleException e) {
@@ -580,7 +580,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
             this.realm = realm;
 
             // Stop the old component if necessary
-            if (getState().isAvailable() && (oldRealm != null) && (oldRealm instanceof Lifecycle)) {
+            if (getState().isAvailable() && (oldRealm instanceof Lifecycle)) {
                 try {
                     ((Lifecycle) oldRealm).stop();
                 } catch (LifecycleException e) {
@@ -592,7 +592,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
             if (realm != null) {
                 realm.setContainer(this);
             }
-            if (getState().isAvailable() && (realm != null) && (realm instanceof Lifecycle)) {
+            if (getState().isAvailable() && (realm instanceof Lifecycle)) {
                 try {
                     ((Lifecycle) realm).start();
                 } catch (LifecycleException e) {
@@ -832,8 +832,8 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
         }
 
         // Start our child containers, if any
-        Container children[] = findChildren();
-        List<Future<Void>> results = new ArrayList<>();
+        Container[] children = findChildren();
+        List<Future<Void>> results = new ArrayList<>(children.length);
         for (Container child : children) {
             results.add(startStopExecutor.submit(new StartChild(child)));
         }
@@ -897,8 +897,8 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
         }
 
         // Stop our child containers, if any
-        Container children[] = findChildren();
-        List<Future<Void>> results = new ArrayList<>();
+        Container[] children = findChildren();
+        List<Future<Void>> results = new ArrayList<>(children.length);
         for (Container child : children) {
             results.add(startStopExecutor.submit(new StopChild(child)));
         }
@@ -992,7 +992,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
         }
 
         AccessLogAdapter adapter = null;
-        Valve valves[] = getPipeline().getValves();
+        Valve[] valves = getPipeline().getValves();
         for (Valve valve : valves) {
             if (valve instanceof AccessLog) {
                 if (adapter == null) {

==================================================
JsonAccessLogValve.java
index eb5e91e932..09a223fa80 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -135,7 +135,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     /**
      * The set of Services associated with this Server.
      */
-    private Service services[] = new Service[0];
+    private Service[] services = new Service[0];
     private final Object servicesLock = new Object();
 
 
@@ -175,12 +175,12 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     /**
      * The number of threads available to process utility tasks in this service.
      */
-    protected int utilityThreads = 2;
+    private int utilityThreads = 2;
 
     /**
      * The utility threads daemon flag.
      */
-    protected boolean utilityThreadsAsDaemon = false;
+    private boolean utilityThreadsAsDaemon = false;
 
     /**
      * Utility executor with scheduling capabilities.
@@ -204,7 +204,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     /**
      * The lifecycle event period in seconds.
      */
-    protected int periodicEventDelay = 10;
+    private int periodicEventDelay = 10;
 
 
     // ------------------------------------------------------------- Properties
@@ -696,7 +696,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
 
 
     /**
-     * @return the set of Services defined within this Server.
+     * @return The array of Services defined within this Server.
      */
     @Override
     public Service[] findServices() {
@@ -707,7 +707,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      * @return the JMX service names.
      */
     public ObjectName[] getServiceNames() {
-        ObjectName onames[] = new ObjectName[services.length];
+        ObjectName[] onames = new ObjectName[services.length];
         for (int i = 0; i < services.length; i++) {
             onames[i] = ((StandardService) services[i]).getObjectName();
         }
@@ -740,7 +740,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
                 // Ignore
             }
             int k = 0;
-            Service results[] = new Service[services.length - 1];
+            Service[] results = new Service[services.length - 1];
             for (int i = 0; i < services.length; i++) {
                 if (i != j) {
                     results[k++] = services[i];
@@ -815,10 +815,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("StandardServer[");
-        sb.append(getPort());
-        sb.append(']');
-        return sb.toString();
+        return "StandardServer[" + getPort() + ']';
     }
 
 
@@ -911,15 +908,14 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         }
 
         if (periodicEventDelay > 0) {
-            monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(() -> startPeriodicLifecycleEvent(), 0, 60,
+            monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(this::startPeriodicLifecycleEvent, 0, 60,
                     TimeUnit.SECONDS);
         }
     }
 
 
-    protected void startPeriodicLifecycleEvent() {
-        if (periodicLifecycleEventFuture == null ||
-                (periodicLifecycleEventFuture != null && periodicLifecycleEventFuture.isDone())) {
+    private void startPeriodicLifecycleEvent() {
+        if (periodicLifecycleEventFuture == null || periodicLifecycleEventFuture.isDone()) {
             if (periodicLifecycleEventFuture != null && periodicLifecycleEventFuture.isDone()) {
                 // There was an error executing the scheduled task, get it and log it
                 try {

==================================================
