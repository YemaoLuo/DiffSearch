7ee127581d4c605ff0f662daaa632fe7c1002ed7
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55735
==================================================
Mark Emlyn
==================================================
Tue Nov 5 22:46:35 2013 +0000
==================================================
Validator.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55735
This fixes a regression caused by the fix to https://issues.apache.org/bugzilla/show_bug.cgi?id=55198
When processing JSP documents, attributes in UninterpretedTag nodes that contain EL should have the the non-EL components XML escaped and the output of the EL components should not be escaped.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1539173 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PageContextImpl.java
index fbd3955b55..8400c24046 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -38,6 +38,7 @@ import javax.servlet.jsp.tagext.TagLibraryInfo;
 import javax.servlet.jsp.tagext.ValidationMessage;
 
 import org.apache.jasper.JasperException;
+import org.apache.jasper.compiler.ELNode.Text;
 import org.apache.jasper.el.ELContextImpl;
 import org.xml.sax.Attributes;
 
@@ -1375,8 +1376,16 @@ class Validator {
 
                         validateFunctions(el, n);
 
-                        result = new Node.JspAttribute(tai, qName, uri,
-                                localName, value, false, el, dynamic);
+                        if (n.getRoot().isXmlSyntax()) {
+                            // The non-EL elements need to be XML escaped
+                            XmlEscapeNonELVisitor v = new XmlEscapeNonELVisitor();
+                            el.visit(v);
+                            result = new Node.JspAttribute(tai, qName, uri,
+                                    localName, v.getText(), false, el, dynamic);
+                        } else {
+                            result = new Node.JspAttribute(tai, qName, uri,
+                                    localName, value, false, el, dynamic);
+                        }
 
                         ELContextImpl ctx =
                                 new ELContextImpl(expressionFactory);
@@ -1412,6 +1421,16 @@ class Validator {
             return result;
         }
 
+
+        private static class XmlEscapeNonELVisitor extends ELParser.TextBuilder {
+
+            @Override
+            public void visit(Text n) throws JasperException {
+                output.append(xmlEscape(n.getText()));
+            }
+        }
+
+
         /*
          * Return an empty StringBuilder [not thread-safe]
          */
@@ -1860,4 +1879,67 @@ class Validator {
             errDisp.jspError(errMsg.toString());
         }
     }
+
+    protected static String xmlEscape(String s) {
+        if (s == null) {
+            return null;
+        }
+        int len = s.length();
+
+        /*
+         * Look for any "bad" characters, Escape "bad" character was found
+         */
+        // ASCII " 34 & 38 ' 39 < 60 > 62
+        for (int i = 0; i < len; i++) {
+            char c = s.charAt(i);
+            if (c >= '\"' && c <= '>' &&
+                    (c == '<' || c == '>' || c == '\'' || c == '&' || c == '"')) {
+                // need to escape them and then quote the whole string
+                StringBuilder sb = new StringBuilder((int) (len * 1.2));
+                sb.append(s, 0, i);
+                int pos = i + 1;
+                for (int j = i; j < len; j++) {
+                    c = s.charAt(j);
+                    if (c >= '\"' && c <= '>') {
+                        if (c == '<') {
+                            if (j > pos) {
+                                sb.append(s, pos, j);
+                            }
+                            sb.append("&lt;");
+                            pos = j + 1;
+                        } else if (c == '>') {
+                            if (j > pos) {
+                                sb.append(s, pos, j);
+                            }
+                            sb.append("&gt;");
+                            pos = j + 1;
+                        } else if (c == '\'') {
+                            if (j > pos) {
+                                sb.append(s, pos, j);
+                            }
+                            sb.append("&#039;"); // &apos;
+                            pos = j + 1;
+                        } else if (c == '&') {
+                            if (j > pos) {
+                                sb.append(s, pos, j);
+                            }
+                            sb.append("&amp;");
+                            pos = j + 1;
+                        } else if (c == '"') {
+                            if (j > pos) {
+                                sb.append(s, pos, j);
+                            }
+                            sb.append("&#034;"); // &quot;
+                            pos = j + 1;
+                        }
+                    }
+                }
+                if (pos < len) {
+                    sb.append(s, pos, len);
+                }
+                return sb.toString();
+            }
+        }
+        return s;
+    }
 }

==================================================
TestParser.java
index a168866561..ea2120647d 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -902,69 +902,6 @@ public class PageContextImpl extends PageContext {
         }
     }
 
-    protected static String XmlEscape(String s) {
-        if (s == null) {
-            return null;
-        }
-        int len = s.length();
-
-        /*
-         * Look for any "bad" characters, Escape "bad" character was found
-         */
-        // ASCII " 34 & 38 ' 39 < 60 > 62
-        for (int i = 0; i < len; i++) {
-            char c = s.charAt(i);
-            if (c >= '\"' && c <= '>' &&
-                    (c == '<' || c == '>' || c == '\'' || c == '&' || c == '"')) {
-                // need to escape them and then quote the whole string
-                StringBuilder sb = new StringBuilder((int) (len * 1.2));
-                sb.append(s, 0, i);
-                int pos = i + 1;
-                for (int j = i; j < len; j++) {
-                    c = s.charAt(j);
-                    if (c >= '\"' && c <= '>') {
-                        if (c == '<') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&lt;");
-                            pos = j + 1;
-                        } else if (c == '>') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&gt;");
-                            pos = j + 1;
-                        } else if (c == '\'') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&#039;"); // &apos;
-                            pos = j + 1;
-                        } else if (c == '&') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&amp;");
-                            pos = j + 1;
-                        } else if (c == '"') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&#034;"); // &quot;
-                            pos = j + 1;
-                        }
-                    }
-                }
-                if (pos < len) {
-                    sb.append(s, pos, len);
-                }
-                return sb.toString();
-            }
-        }
-        return s;
-    }
-
     /**
      * Proprietary method to evaluate EL expressions. XXX - This method should
      * go away once the EL interpreter moves out of JSTL and into its own
@@ -1014,9 +951,6 @@ public class PageContextImpl extends PageContext {
             ValueExpression ve = exprFactory.createValueExpression(ctx, expression, expectedType);
             retValue = ve.getValue(ctx);
         }
-        if (escape && retValue != null) {
-            retValue = XmlEscape(retValue.toString());
-        }
 
         return retValue;
     }

==================================================
TesterValidator.java
index a82300e48c..ca273b006b 100644
--- a/test/org/apache/jasper/compiler/TestParser.java
+++ b/test/org/apache/jasper/compiler/TestParser.java
@@ -328,10 +328,16 @@ public class TestParser extends TomcatBaseTest {
 
         String result = res.toString();
 
-        Assert.assertTrue(result.contains("&quot;bar&quot;") ||
-                result.contains("&#034;bar&#034;"));
-        Assert.assertTrue(result.contains("&quot;foo&quot;") ||
-                result.contains("&#034;foo&#034;"));
+        Assert.assertTrue(result.contains("&quot;1foo1&quot;") ||
+                result.contains("&#034;1foo1&#034;"));
+        Assert.assertTrue(result.contains("&quot;2bar2&quot;") ||
+                result.contains("&#034;2bar2&#034;"));
+        Assert.assertTrue(result.contains("&quot;3a&amp;b3&quot;") ||
+                result.contains("&#034;3a&amp;b3&#034;"));
+        Assert.assertTrue(result.contains("&quot;4&4&quot;") ||
+                result.contains("&#034;4&4&#034;"));
+        Assert.assertTrue(result.contains("&quot;5&apos;5&quot;") ||
+                result.contains("&#034;5&apos;5&#034;"));
     }
 
     /** Assertion for text printed by tags:echo */

==================================================
