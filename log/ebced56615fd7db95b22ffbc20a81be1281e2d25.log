ebced56615fd7db95b22ffbc20a81be1281e2d25
==================================================
APR/native refactoring
==================================================
Mark Emlyn
==================================================
Wed Jan 16 15:14:44 2013 +0000
==================================================
AjpAprProtocol.java
APR/native refactoring
- Switch to Remy's updated Poller/Sendfile implementation that uses a single Poller and multiple Pollsets rather than multiple Pollers each with a single Pollset

The updated implementation is from JBoss's web container and is provided under Remy's (remm) iCLA.

This is untested (I don't have an OSX build of the native lib handy right now). I'll test later today.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1433976 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index cc391c7ce2..c181dc97d6 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -135,8 +135,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
             if (addToPoller) {
                 ((AprEndpoint)proto.endpoint).getPoller().add(
                         socket.getSocket().longValue(),
-                        proto.endpoint.getKeepAliveTimeout(),
-                        AprEndpoint.Poller.FLAGS_READ);
+                        proto.endpoint.getKeepAliveTimeout(), true, false);
             }
         }
 

==================================================
AprEndpoint.java
index 3725623c0d..14f8654068 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -252,8 +252,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             if (addToPoller && proto.endpoint.isRunning()) {
                 ((AprEndpoint)proto.endpoint).getPoller().add(
                         socket.getSocket().longValue(),
-                        proto.endpoint.getKeepAliveTimeout(),
-                        AprEndpoint.Poller.FLAGS_READ);
+                        proto.endpoint.getKeepAliveTimeout(), true, false);
             }
         }
 
@@ -297,8 +296,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
                 if (proto.endpoint.isRunning()) {
                     ((AprEndpoint) proto.endpoint).getCometPoller().add(
                             socket.getSocket().longValue(),
-                            proto.endpoint.getSoTimeout(),
-                            AprEndpoint.Poller.FLAGS_READ);
+                            proto.endpoint.getSoTimeout(), true, false);
                 } else {
                     // Process a STOP directly
                     ((AprEndpoint) proto.endpoint).processSocket(
@@ -308,8 +306,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             } else {
                 // Upgraded
                 ((AprEndpoint) proto.endpoint).getPoller().add(
-                        socket.getSocket().longValue(), -1,
-                        AprEndpoint.Poller.FLAGS_READ);
+                        socket.getSocket().longValue(), -1, true, false);
             }
         }
 

==================================================
