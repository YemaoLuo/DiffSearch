3a5392518b41a0b38424f2217ca5b9540d820cec
==================================================
Code clean-up for o.a.catalina.valves
==================================================
Mark Emlyn
==================================================
Thu Aug 9 20:05:31 2012 +0000
==================================================
AccessLogValve.java
Code clean-up for o.a.catalina.valves
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1371422 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CrawlerSessionManagerValve.java
index 656ad7cc2e..4d360b15c2 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -421,7 +421,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         private final Locale cacheDefaultLocale;
         private final DateFormatCache parent;
         private final Cache cLFCache;
-        private final HashMap<String, Cache> formatCache = new HashMap<String, Cache>();
+        private final HashMap<String, Cache> formatCache = new HashMap<>();
 
         private DateFormatCache(int size, Locale loc, DateFormatCache parent) {
             cacheSize = size;
@@ -498,7 +498,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
     /**
      * The list of our format types.
      */
-    private static enum formatType {
+    private static enum FormatType {
         CLF, SEC, MSEC, MSEC_FRAC, SDF
     }
 
@@ -1412,11 +1412,11 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             msecPattern + msecPattern + msecPattern;
 
         /* Our format description string, null if CLF */
-        private String format = null;
+        private final String format;
         /* Whether to use begin of request or end of response as the timestamp */
-        private boolean usesBegin = false;
+        private final boolean usesBegin;
         /* The format type */
-        private formatType type = formatType.CLF;
+        private final FormatType type;
         /* Whether we need to postprocess by adding milliseconds */
         private boolean usesMsecs = false;
 
@@ -1452,7 +1452,10 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         protected DateAndTimeElement(String header) {
-            format = header;
+            String format = header;
+            boolean usesBegin = false;
+            FormatType type = FormatType.CLF;
+
             if (format != null) {
                 if (format.equals(requestStartPrefix)) {
                     usesBegin = true;
@@ -1468,18 +1471,21 @@ public class AccessLogValve extends ValveBase implements AccessLog {
                     format = format.substring(4);
                 }
                 if (format.length() == 0) {
-                    type = formatType.CLF;
+                    type = FormatType.CLF;
                 } else if (format.equals(secFormat)) {
-                    type = formatType.SEC;
+                    type = FormatType.SEC;
                 } else if (format.equals(msecFormat)) {
-                    type = formatType.MSEC;
+                    type = FormatType.MSEC;
                 } else if (format.equals(msecFractionFormat)) {
-                    type = formatType.MSEC_FRAC;
+                    type = FormatType.MSEC_FRAC;
                 } else {
-                    type = formatType.SDF;
+                    type = FormatType.SDF;
                     format = tidyFormat(format);
                 }
             }
+            this.format = format;
+            this.usesBegin = usesBegin;
+            this.type = type;
         }
 
         @Override
@@ -1915,7 +1921,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * parse pattern string and create the array of AccessLogElement
      */
     protected AccessLogElement[] createLogElements() {
-        List<AccessLogElement> list = new ArrayList<AccessLogElement>();
+        List<AccessLogElement> list = new ArrayList<>();
         boolean replace = false;
         StringBuilder buf = new StringBuilder();
         for (int i = 0; i < pattern.length(); i++) {

==================================================
ExtendedAccessLogValve.java
index b3b9256d21..358313f799 100644
--- a/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java
+++ b/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java
@@ -47,9 +47,9 @@ public class CrawlerSessionManagerValve extends ValveBase
         LogFactory.getLog(CrawlerSessionManagerValve.class);
 
     private final Map<String,String> clientIpSessionId =
-        new ConcurrentHashMap<String, String>();
+            new ConcurrentHashMap<>();
     private final Map<String,String> sessionIdClientIp =
-        new ConcurrentHashMap<String, String>();
+            new ConcurrentHashMap<>();
 
     private String crawlerUserAgents =
         ".*[bB]ot.*|.*Yahoo! Slurp.*|.*Feedfetcher-Google.*";

==================================================
RemoteIpValve.java
index 57955cd3ea..05b2099b59 100644
--- a/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
+++ b/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
@@ -421,7 +421,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
     }
 
     protected static class PatternTokenizer {
-        private StringReader sr = null;
+        private final StringReader sr;
         private StringBuilder buf = new StringBuilder();
         private boolean ended = false;
         private boolean subToken;
@@ -543,7 +543,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
         if (log.isDebugEnabled()) {
             log.debug("decodePattern, pattern =" + pattern);
         }
-        List<AccessLogElement> list = new ArrayList<AccessLogElement>();
+        List<AccessLogElement> list = new ArrayList<>();
 
         PatternTokenizer tokenizer = new PatternTokenizer(pattern);
         try {

==================================================
StuckThreadDetectionValve.java
index 3228e58efa..5466f51546 100644
--- a/java/org/apache/catalina/valves/RemoteIpValve.java
+++ b/java/org/apache/catalina/valves/RemoteIpValve.java
@@ -567,7 +567,7 @@ public class RemoteIpValve extends ValveBase {
                 internalProxies.matcher(originalRemoteAddr).matches()) {
             String remoteIp = null;
             // In java 6, proxiesHeaderValue should be declared as a java.util.Deque
-            LinkedList<String> proxiesHeaderValue = new LinkedList<String>();
+            LinkedList<String> proxiesHeaderValue = new LinkedList<>();
             StringBuilder concatRemoteIpHeaderValue = new StringBuilder();
 
             for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {
@@ -595,7 +595,7 @@ public class RemoteIpValve extends ValveBase {
                 }
             }
             // continue to loop on remoteIpHeaderValue to build the new value of the remoteIpHeader
-            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<String>();
+            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();
             for (; idx >= 0; idx--) {
                 String currentRemoteIp = remoteIpHeaderValue[idx];
                 newRemoteIpHeaderValue.addFirst(currentRemoteIp);

==================================================
