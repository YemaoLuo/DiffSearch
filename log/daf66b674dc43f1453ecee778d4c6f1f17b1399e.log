daf66b674dc43f1453ecee778d4c6f1f17b1399e
==================================================
Add i18n for other packages
==================================================
Remy Maucherat
==================================================
Wed Dec 12 10:27:30 2018 +0000
==================================================
ExpressionBuilder.java
index 1b5a4817e4..6571b12fe9 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -14,9 +14,15 @@
 # limitations under the License.
 
 # General Errors
+error.cannotSetVariables=Cannot set variables on factory
 error.convert=Cannot convert [{0}] of type [{1}] to [{2}]
 error.compare=Cannot compare [{0}] to [{1}]
 error.function=Problems calling function [{0}]
+error.invalidMethodExpression=Not a valid method expression [{0}]
+error.noFunctionMapperTarget=FunctionMapper target cannot be null
+error.noVariableMapperTarget=FunctionMapper target cannot be null
+error.nullLocalName=Local name cannot be null
+error.nullMethod=Method cannot be null
 error.unreachable.base=Target Unreachable, identifier [{0}] resolved to null
 error.unreachable.property=Target Unreachable, [{0}] returned null
 error.resolver.unhandled=ELResolver did not handle type: [{0}] with property of [{1}]
@@ -54,8 +60,11 @@ error.context.null=ELContext was null
 
 # Parser
 error.funciton.tooManyMethodParameterSets=There are multiple sets of parameters specified for function [{0}]
+error.identifier.noMethod=Identity [{0}] was null and was unable to invoke
 error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
+error.identifier.notMethodExpression=Identity [{0}] does not reference a method expression instance, returned type [{1}]
 error.lambda.tooManyMethodParameterSets=There are more sets of method parameters specified than there are nested lambda expressions
+error.lambda.wrongNestedState=Nested state may only be set once
 
 # Stream
 stream.compare.notComparable=Stream elements must implement Comparable

==================================================
FunctionMapperFactory.java
index f784d8e1f7..6c3620bb80 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -258,8 +258,7 @@ public final class ExpressionBuilder implements NodeVisitor {
             return new MethodExpressionLiteral(expression, expectedReturnType,
                     expectedParamTypes);
         } else {
-            throw new ELException("Not a Valid Method Expression: "
-                    + expression);
+            throw new ELException(MessageFactory.get("error.invalidMethodExpression", expression));
         }
     }
 

==================================================
FunctionMapperImpl.java
index 835f46846d..59b6cb6061 100644
--- a/java/org/apache/el/lang/FunctionMapperFactory.java
+++ b/java/org/apache/el/lang/FunctionMapperFactory.java
@@ -21,6 +21,8 @@ import java.lang.reflect.Method;
 
 import javax.el.FunctionMapper;
 
+import org.apache.el.util.MessageFactory;
+
 /**
  * @author Jacob Hookom [jacob@hookom.net]
  */
@@ -31,7 +33,7 @@ public class FunctionMapperFactory extends FunctionMapper {
 
     public FunctionMapperFactory(FunctionMapper mapper) {
         if (mapper == null) {
-            throw new NullPointerException("FunctionMapper target cannot be null");
+            throw new NullPointerException(MessageFactory.get("error.noFunctionMapperTarget"));
         }
         this.target = mapper;
     }

==================================================
VariableMapperFactory.java
index eccb1c0ae4..b58ab24855 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -26,6 +26,7 @@ import java.util.concurrent.ConcurrentMap;
 
 import javax.el.FunctionMapper;
 
+import org.apache.el.util.MessageFactory;
 import org.apache.el.util.ReflectionUtil;
 
 
@@ -98,10 +99,10 @@ public class FunctionMapperImpl extends FunctionMapper implements
 
         public Function(String prefix, String localName, Method m) {
             if (localName == null) {
-                throw new NullPointerException("LocalName cannot be null");
+                throw new NullPointerException(MessageFactory.get("error.nullLocalName"));
             }
             if (m == null) {
-                throw new NullPointerException("Method cannot be null");
+                throw new NullPointerException(MessageFactory.get("error.nullMethod"));
             }
             this.prefix = prefix;
             this.localName = localName;

==================================================
AstIdentifier.java
index 4f6f4dc7b4..39862066c6 100644
--- a/java/org/apache/el/lang/VariableMapperFactory.java
+++ b/java/org/apache/el/lang/VariableMapperFactory.java
@@ -20,6 +20,8 @@ package org.apache.el.lang;
 import javax.el.ValueExpression;
 import javax.el.VariableMapper;
 
+import org.apache.el.util.MessageFactory;
+
 public class VariableMapperFactory extends VariableMapper {
 
     private final VariableMapper target;
@@ -27,7 +29,7 @@ public class VariableMapperFactory extends VariableMapper {
 
     public VariableMapperFactory(VariableMapper target) {
         if (target == null) {
-            throw new NullPointerException("Target VariableMapper cannot be null");
+            throw new NullPointerException(MessageFactory.get("error.noVariableMapperTarget"));
         }
         this.target = target;
     }
@@ -50,6 +52,6 @@ public class VariableMapperFactory extends VariableMapper {
 
     @Override
     public ValueExpression setVariable(String variable, ValueExpression expression) {
-        throw new UnsupportedOperationException("Cannot Set Variables on Factory");
+        throw new UnsupportedOperationException(MessageFactory.get("error.cannotSetVariables"));
     }
 }

==================================================
AstLambdaExpression.java
index b6787e292e..74deb84f59 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -225,14 +225,9 @@ public final class AstIdentifier extends SimpleNode {
         if (obj instanceof MethodExpression) {
             return (MethodExpression) obj;
         } else if (obj == null) {
-            throw new MethodNotFoundException("Identity '" + this.image
-                    + "' was null and was unable to invoke");
+            throw new MethodNotFoundException(MessageFactory.get("error.identifier.noMethod", this.image));
         } else {
-            throw new ELException(
-                    "Identity '"
-                            + this.image
-                            + "' does not reference a MethodExpression instance, returned type: "
-                            + obj.getClass().getName());
+            throw new ELException(MessageFactory.get("error.identifier.notMethodExpression", this.image, obj.getClass().getName()));
         }
     }
 }

==================================================
DataSourceLinkFactory.java
index 5526b044c8..f719c33553 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -120,7 +120,7 @@ public class AstLambdaExpression extends SimpleNode {
     private void setNestedState(NestedState nestedState) {
         if (this.nestedState != null) {
             // Should never happen
-            throw new IllegalStateException("nestedState may only be set once");
+            throw new IllegalStateException(MessageFactory.get("error.lambda.wrongNestedState"));
         }
         this.nestedState = nestedState;
 

==================================================
ResourceFactory.java
index 628a2ac16e..df6376bad9 100644
--- a/java/org/apache/naming/factory/LocalStrings.properties
+++ b/java/org/apache/naming/factory/LocalStrings.properties
@@ -13,11 +13,16 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+dataSourceLinkFactory.badWrapper=Not a wrapper for type [{0}]
+
 lookupFactory.circularReference=Found a circular reference involving [{0}]
 lookupFactory.createFailed=Could not create instance of JNDI lookup factory class
 lookupFactory.loadFailed=Could not load JNDI lookup factory class
 lookupFactory.typeMismatch=The JNDI reference [{0}] was expected to be of type [{1}] but the lookup [{2}] return an object of type [{3}]
 
+resourceFactory.factoryCreationError=Could not create resource factory instance
+
+resourceLinkFactory.invalidGlobalContext=Caller provided invalid global context
 resourceLinkFactory.nullType=The local resource link [{0}] that refers to global resource [{1}] does not specify the required attribute type
 resourceLinkFactory.unknownType=The local resource link [{0}] that refers to global resource [{1}] specified the unknown type [{2}]
 resourceLinkFactory.wrongType=The local resource link [{0}] that refers to global resource [{1}] was expected to return an instance of [{2}] but returned an instance of [{3}]

==================================================
ResourceLinkFactory.java
index 5bb85f9d98..44ca509854 100644
--- a/java/org/apache/naming/factory/ResourceFactory.java
+++ b/java/org/apache/naming/factory/ResourceFactory.java
@@ -21,6 +21,7 @@ import javax.naming.Reference;
 import javax.naming.spi.ObjectFactory;
 
 import org.apache.naming.ResourceRef;
+import org.apache.naming.StringManager;
 
 /**
  * Object factory for Resources.
@@ -29,6 +30,8 @@ import org.apache.naming.ResourceRef;
  */
 public class ResourceFactory extends FactoryBase {
 
+    private static final StringManager sm = StringManager.getManager(ResourceLinkFactory.class);
+
     @Override
     protected boolean isReferenceTypeSupported(Object obj) {
         return obj instanceof ResourceRef;
@@ -47,8 +50,7 @@ public class ResourceFactory extends FactoryBase {
                 factory = (ObjectFactory) Class.forName(
                         javaxSqlDataSourceFactoryClassName).getConstructor().newInstance();
             } catch (Exception e) {
-                NamingException ex = new NamingException(
-                        "Could not create resource factory instance");
+                NamingException ex = new NamingException(sm.getString("resourceFactory.factoryCreationError"));
                 ex.initCause(e);
                 throw ex;
             }
@@ -69,8 +71,7 @@ public class ResourceFactory extends FactoryBase {
                 if (t instanceof VirtualMachineError) {
                     throw (VirtualMachineError) t;
                 }
-                NamingException ex = new NamingException(
-                        "Could not create resource factory instance");
+                NamingException ex = new NamingException(sm.getString("resourceFactory.factoryCreationError"));
                 ex.initCause(t);
                 throw ex;
             }

==================================================
ServiceProxy.java
new file mode 100644
index 0000000000..0c5d17eda4
--- /dev/null
+++ b/java/org/apache/naming/factory/webservices/LocalStrings.properties
@@ -0,0 +1,16 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+serviceProxy.portNotFound=Port-component-ref [{0}] not found

==================================================
PerMessageDeflate.java
index 0a4041263e..2fbc26337e 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -38,6 +38,7 @@ futureToSendHandler.timeout=Operation timed out after waiting [{0}] [{1}] to com
 
 perMessageDeflate.deflateFailed=Failed to decompress a compressed WebSocket frame
 perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension parameter
+perMessageDeflate.invalidState=Invalid state
 perMessageDeflate.invalidWindowSize=An invalid windows of [{1}] size was specified for [{0}]. Valid values are whole numbers from 8 to 15 inclusive.
 perMessageDeflate.unknownParameter=An unknown extension parameter [{0}] was defined
 
@@ -93,6 +94,7 @@ wsRemoteEndpoint.nullData=Invalid null data argument
 wsRemoteEndpoint.nullHandler=Invalid null handler argument
 wsRemoteEndpoint.sendInterrupt=The current thread was interrupted while waiting for a blocking send to complete
 wsRemoteEndpoint.tooMuchData=Ping or pong may not send more than 125 bytes
+wsRemoteEndpoint.writeTimeout=Blocking write timeout
 wsRemoteEndpoint.wrongState=The remote endpoint was in state [{0}] which is an invalid state for called method
 
 # Note the following message is used as a close reason in a WebSocket control

==================================================
WsRemoteEndpointImplBase.java
index 339c6b31d1..90931c5b5b 100644
--- a/java/org/apache/tomcat/websocket/PerMessageDeflate.java
+++ b/java/org/apache/tomcat/websocket/PerMessageDeflate.java
@@ -421,7 +421,7 @@ public class PerMessageDeflate implements Transformation {
                                     blockingWriteTimeoutExpiry);
                         }
                     } else {
-                        throw new IllegalStateException("Should never happen");
+                        throw new IllegalStateException(sm.getString("perMessageDeflate.invalidState"));
                     }
 
                     // Add the newly created compressed part to the set of parts

==================================================
WsRemoteEndpointImplClient.java
index e3bee051bf..04ce96eeff 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -50,7 +50,7 @@ import org.apache.tomcat.util.res.StringManager;
 
 public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
 
-    private static final StringManager sm =
+    protected static final StringManager sm =
             StringManager.getManager(WsRemoteEndpointImplBase.class);
 
     protected static final SendResult SENDRESULT_OK = new SendResult();

==================================================
