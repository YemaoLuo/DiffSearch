d8f255c30fb60d4f43c9d0e324ded6a8b476aa94
==================================================
Align some of the code between the connection handlers.
==================================================
Mark Emlyn
==================================================
Sun Jun 5 12:33:29 2011 +0000
==================================================
Http11AprProtocol.java
Align some of the code between the connection handlers.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1132383 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index 90f487cfa0..66a8919520 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -205,7 +205,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
             protected AtomicInteger size = new AtomicInteger(0);
             @Override
             public boolean offer(Http11AprProcessor processor) {
-                boolean offer = (proto.getProcessorCache() == -1) ? true : (size.get() < proto.getProcessorCache());
+                boolean offer = proto.getProcessorCache() == -1 ? true : size.get() < proto.getProcessorCache();
                 //avoid over growing our cache or add after we have stopped
                 boolean result = false;
                 if ( offer ) {

==================================================
Http11Protocol.java
index 2d353bc124..92bc093a70 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -25,6 +25,7 @@ import java.util.Iterator;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 
 import javax.management.ObjectName;
 
@@ -160,18 +161,19 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
     protected static class Http11ConnectionHandler implements Handler {
 
         protected Http11NioProtocol proto;
-        protected static int count = 0;
+        protected AtomicLong registerCount = new AtomicLong(0);
         protected RequestGroupInfo global = new RequestGroupInfo();
 
         protected ConcurrentHashMap<NioChannel, Http11NioProcessor> connections =
             new ConcurrentHashMap<NioChannel, Http11NioProcessor>();
 
-        protected ConcurrentLinkedQueue<Http11NioProcessor> recycledProcessors = new ConcurrentLinkedQueue<Http11NioProcessor>() {
+        protected ConcurrentLinkedQueue<Http11NioProcessor> recycledProcessors =
+                new ConcurrentLinkedQueue<Http11NioProcessor>() {
             private static final long serialVersionUID = 1L;
             protected AtomicInteger size = new AtomicInteger(0);
             @Override
             public boolean offer(Http11NioProcessor processor) {
-                boolean offer = proto.getProcessorCache()==-1?true:size.get() < proto.getProcessorCache();
+                boolean offer = proto.getProcessorCache() == -1 ? true : size.get() < proto.getProcessorCache();
                 //avoid over growing our cache or add after we have stopped
                 boolean result = false;
                 if ( offer ) {
@@ -214,16 +216,16 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             return global;
         }
 
-        @Override
-        public void recycle() {
-            recycledProcessors.clear();
-        }
-        
         @Override
         public SSLImplementation getSslImplementation() {
             return proto.sslImplementation;
         }
 
+        @Override
+        public void recycle() {
+            recycledProcessors.clear();
+        }
+        
         @Override
         public void release(SocketChannel socket) {
             if (log.isDebugEnabled()) 
@@ -434,18 +436,20 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             register(processor);
             return processor;
         }
-        AtomicInteger registerCount = new AtomicInteger(0);
-        public void register(Http11NioProcessor processor) {
+
+        protected void register(Http11NioProcessor processor) {
             if (proto.getDomain() != null) {
                 synchronized (this) {
                     try {
-                        registerCount.addAndGet(1);
-                        if (log.isDebugEnabled()) log.debug("Register ["+processor+"] count="+registerCount.get());
+                        long count = registerCount.incrementAndGet();
                         final RequestInfo rp = processor.getRequest().getRequestProcessor();
                         rp.setGlobalProcessor(global);
                         final ObjectName rpName = new ObjectName
                             (proto.getDomain() + ":type=RequestProcessor,worker="
-                             + proto.getName() + ",name=HttpRequest" + count++);
+                             + proto.getName() + ",name=HttpRequest" + count);
+                        if (log.isDebugEnabled()) {
+                            log.debug("Register " + rpName);
+                        }
                         if (Constants.IS_SECURITY_ENABLED) {
                             AccessController.doPrivileged(new PrivilegedAction<Void>() {
                                 @Override
@@ -469,15 +473,16 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             }
         }
     
-        public void deregister(Http11NioProcessor processor) {
+        protected void deregister(Http11NioProcessor processor) {
             if (proto.getDomain() != null) {
                 synchronized (this) {
                     try {
-                        registerCount.addAndGet(-1);
-                        if (log.isDebugEnabled()) log.debug("Deregister ["+processor+"] count="+registerCount.get());
                         RequestInfo rp = processor.getRequest().getRequestProcessor();
                         rp.setGlobalProcessor(null);
                         ObjectName rpName = rp.getRpName();
+                        if (log.isDebugEnabled()) {
+                            log.debug("Unregister " + rpName);
+                        }
                         Registry.getRegistry(null, null).unregisterComponent(rpName);
                         rp.setRpName(null);
                     } catch (Exception e) {
@@ -486,8 +491,5 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                 }
             }
         }
-
     }
-
-
 }

==================================================
