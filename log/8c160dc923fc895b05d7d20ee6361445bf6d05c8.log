8c160dc923fc895b05d7d20ee6361445bf6d05c8
==================================================
Enable UEncoder instances to share safeChars BitSet while ensuring that the
==================================================
Felix Schumacher
==================================================
Thu Jan 22 19:16:33 2015 +0000
==================================================
Response.java
Enable UEncoder instances to share safeChars BitSet while ensuring that the
shared BitSet is immutable to be threadsafe.

Change Response to use UEncoder instances with shared safeChars.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1654013 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UEncoder.java
index c53ae5fe18..4d05cd0300 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -50,6 +50,7 @@ import org.apache.catalina.util.SessionConfig;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.UEncoder;
+import org.apache.tomcat.util.buf.UEncoder.SafeCharsSet;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.http.parser.MediaTypeCache;
@@ -89,7 +90,6 @@ public class Response
     }
 
     public Response() {
-        urlEncoder.addSafeCharacter('/');
     }
 
 
@@ -241,7 +241,7 @@ public class Response
     /**
      * URL encoder.
      */
-    protected final UEncoder urlEncoder = new UEncoder();
+    protected final UEncoder urlEncoder = new UEncoder(SafeCharsSet.WITH_SLASH);
 
 
     /**

==================================================
TestUEncoder.java
index 60c349436a..301c5d8d0c 100644
--- a/java/org/apache/tomcat/util/buf/UEncoder.java
+++ b/java/org/apache/tomcat/util/buf/UEncoder.java
@@ -32,6 +32,22 @@ import java.util.BitSet;
  */
 public final class UEncoder {
 
+    public enum SafeCharsSet {
+        WITH_SLASH("/"), DEFAULT("");
+        private final BitSet safeChars;
+
+        private BitSet getSafeChars() {
+            return this.safeChars;
+        }
+
+        private SafeCharsSet(String additionalSafeChars) {
+            safeChars = initialSafeChars();
+            for (char c : additionalSafeChars.toCharArray()) {
+                safeChars.set(c);
+            }
+        }
+    }
+
     // Not static - the set may differ ( it's better than adding
     // an extra check for "/", "+", etc
     private BitSet safeChars=null;
@@ -39,14 +55,34 @@ public final class UEncoder {
     private ByteChunk bb=null;
     private CharChunk cb=null;
     private CharChunk output=null;
+    private final boolean readOnlySafeChars;
 
     private final String ENCODING = "UTF8";
 
     public UEncoder() {
-        initSafeChars();
+        this.safeChars = initialSafeChars();
+        readOnlySafeChars = false;
     }
 
+    /**
+     * Create a UEncoder with an unmodifiable safe character set.
+     * <p>
+     * Calls to {@link UEncoder#addSafeCharacter(char) addSafeCharacter(char)}
+     * on instances created by this constructor will throw an
+     * {@link IllegalStateException}.
+     * 
+     * @param safeCharsSet
+     *            safe characters for this encoder
+     */
+    public UEncoder(SafeCharsSet safeCharsSet) {
+        this.safeChars = safeCharsSet.getSafeChars();
+        readOnlySafeChars = true;
+    }
+ 
     public void addSafeCharacter( char c ) {
+        if (readOnlySafeChars) {
+            throw new IllegalStateException("UEncoders safeChararacters are read only");
+        }
         safeChars.set( c );
     }
 
@@ -116,33 +152,34 @@ public final class UEncoder {
 
     // -------------------- Internal implementation --------------------
 
-    private void initSafeChars() {
-        safeChars=new BitSet(128);
+    private static BitSet initialSafeChars() {
+        BitSet initialSafeChars=new BitSet(128);
         int i;
         for (i = 'a'; i <= 'z'; i++) {
-            safeChars.set(i);
+            initialSafeChars.set(i);
         }
         for (i = 'A'; i <= 'Z'; i++) {
-            safeChars.set(i);
+            initialSafeChars.set(i);
         }
         for (i = '0'; i <= '9'; i++) {
-            safeChars.set(i);
+            initialSafeChars.set(i);
         }
         //safe
-        safeChars.set('$');
-        safeChars.set('-');
-        safeChars.set('_');
-        safeChars.set('.');
+        initialSafeChars.set('$');
+        initialSafeChars.set('-');
+        initialSafeChars.set('_');
+        initialSafeChars.set('.');
 
         // Dangerous: someone may treat this as " "
         // RFC1738 does allow it, it's not reserved
-        //    safeChars.set('+');
+        //    initialSafeChars.set('+');
         //extra
-        safeChars.set('!');
-        safeChars.set('*');
-        safeChars.set('\'');
-        safeChars.set('(');
-        safeChars.set(')');
-        safeChars.set(',');
+        initialSafeChars.set('!');
+        initialSafeChars.set('*');
+        initialSafeChars.set('\'');
+        initialSafeChars.set('(');
+        initialSafeChars.set(')');
+        initialSafeChars.set(',');
+        return initialSafeChars;
     }
 }

==================================================
