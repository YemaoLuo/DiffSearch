f1e0ddc39585d9872d91fab7636135f02ecfa870
==================================================
Fix a handful of Eclipse warnings
==================================================
Mark Emlyn
==================================================
Sat Mar 21 15:07:42 2009 +0000
==================================================
ExpressionTokenizer.java
Fix a handful of Eclipse warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@756954 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ResponseIncludeWrapper.java
index cdcc1d1ff2..4c77b52ccd 100644
--- a/java/org/apache/catalina/ssi/ExpressionTokenizer.java
+++ b/java/org/apache/catalina/ssi/ExpressionTokenizer.java
@@ -104,9 +104,8 @@ public class ExpressionTokenizer {
                 if (nextChar == '=') {
                     index++;
                     return TOKEN_NOT_EQ;
-                } else {
-                    return TOKEN_NOT;
                 }
+                return TOKEN_NOT;
             case '|' :
                 if (nextChar == '|') {
                     index++;
@@ -123,16 +122,14 @@ public class ExpressionTokenizer {
                 if (nextChar == '=') {
                     index++;
                     return TOKEN_GE; // Greater than or equal
-                } else {
-                    return TOKEN_GT; // Greater than
                 }
+                return TOKEN_GT; // Greater than
             case '<' :
                 if (nextChar == '=') {
                     index++;
                     return TOKEN_LE; // Less than or equal
-                } else {
-                    return TOKEN_LT; // Less than
                 }
+                return TOKEN_LT; // Less than
             default :
                 // Otherwise it's a string
                 break;

==================================================
SSIFilter.java
index 336e770890..eee984c77d 100644
--- a/java/org/apache/catalina/ssi/ResponseIncludeWrapper.java
+++ b/java/org/apache/catalina/ssi/ResponseIncludeWrapper.java
@@ -221,7 +221,9 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
                 synchronized(RFC1123_FORMAT) {
                     lastModified = RFC1123_FORMAT.parse(value).getTime();
                 }
-            } catch (Throwable ignore) { }
+            } catch (Throwable ignore) {
+                // Ignore
+            }
         } else if (lname.equals(CONTENT_TYPE)) {
             contentType = value;
         }
@@ -243,7 +245,9 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
                 synchronized(RFC1123_FORMAT) {
                     lastModified = RFC1123_FORMAT.parse(value).getTime();
                 }
-            } catch (Throwable ignore) { }
+            } catch (Throwable ignore) {
+                // Ignore
+            }
         }
         else if (lname.equals(CONTENT_TYPE))
         {

==================================================
SSIServlet.java
index e8c28c1738..a182796f41 100644
--- a/java/org/apache/catalina/ssi/SSIFilter.java
+++ b/java/org/apache/catalina/ssi/SSIFilter.java
@@ -177,5 +177,6 @@ public class SSIFilter implements Filter {
     }
 
     public void destroy() {
+        // NOOP
     }
 }

==================================================
SSIServletExternalResolver.java
index 9bba5e6146..ad211feccb 100644
--- a/java/org/apache/catalina/ssi/SSIServlet.java
+++ b/java/org/apache/catalina/ssi/SSIServlet.java
@@ -135,7 +135,7 @@ public class SSIServlet extends HttpServlet {
      *            a value of type 'HttpServletResponse'
      */
     protected void requestHandler(HttpServletRequest req,
-            HttpServletResponse res) throws IOException, ServletException {
+            HttpServletResponse res) throws IOException {
         ServletContext servletContext = getServletContext();
         String path = SSIServletRequestUtil.getRelativePath(req);
         if (debug > 0)

==================================================
SSIStopProcessingException.java
index 66f0163594..78a251d243 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -155,7 +155,6 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
         if (nameParts.length == 1) {
             if (nameParts[0].equals("PATH")) {
                 requiredParts = 1;
-                retVal = null; // Not implemented
             }
         }
         else if (nameParts[0].equals("AUTH")) {
@@ -278,7 +277,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
             } else if (nameParts[1].equals("HOST")) {
                 retVal = req.getRemoteHost();
             } else if (nameParts[1].equals("IDENT")) {
-                retVal = null; // Not implemented
+                // Not implemented
             } else if (nameParts[1].equals("PORT")) {
                 retVal = Integer.toString( req.getRemotePort());
             } else if (nameParts[1].equals("USER")) {
@@ -403,34 +402,34 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
         if (!virtualPath.startsWith("/") && !virtualPath.startsWith("\\")) {
             return new ServletContextAndPath(context,
                     getAbsolutePath(virtualPath));
-        } else {
-            String normalized = RequestUtil.normalize(virtualPath);
-            if (isVirtualWebappRelative) {
-                return new ServletContextAndPath(context, normalized);
-            } else {
-                ServletContext normContext = context.getContext(normalized);
-                if (normContext == null) {
-                    throw new IOException("Couldn't get context for path: "
-                            + normalized);
-                }
-                //If it's the root context, then there is no context element
-                // to remove,
-                // ie:
-                // '/file1.shtml' vs '/appName1/file1.shtml'
-                if (!isRootContext(normContext)) {
-                    String noContext = getPathWithoutContext(
-                            normContext.getContextPath(), normalized);
-                    if (noContext == null) {
-                        throw new IOException(
-                                "Couldn't remove context from path: "
-                                        + normalized);
-                    }
-                    return new ServletContextAndPath(normContext, noContext);
-                } else {
-                    return new ServletContextAndPath(normContext, normalized);
-                }
+        }
+
+        String normalized = RequestUtil.normalize(virtualPath);
+        if (isVirtualWebappRelative) {
+            return new ServletContextAndPath(context, normalized);
+        }
+
+        ServletContext normContext = context.getContext(normalized);
+        if (normContext == null) {
+            throw new IOException("Couldn't get context for path: "
+                    + normalized);
+        }
+        //If it's the root context, then there is no context element
+        // to remove,
+        // ie:
+        // '/file1.shtml' vs '/appName1/file1.shtml'
+        if (!isRootContext(normContext)) {
+            String noContext = getPathWithoutContext(
+                    normContext.getContextPath(), normalized);
+            if (noContext == null) {
+                throw new IOException(
+                        "Couldn't remove context from path: "
+                                + normalized);
             }
+            return new ServletContextAndPath(normContext, noContext);
         }
+
+        return new ServletContextAndPath(normContext, normalized);
     }
 
 

==================================================
