bb15c1b4b73949345eefcc7e58a9b3b886b41d6f
==================================================
New helper class to provide web.xml to those Jasper classes that need to parse it. JspConfig was not consistent with TldLocationsCache. These are now consistent. JspConfig now has access to the merged web.xml generated by Catalina from web-fragment.xml files and/or annotations.
==================================================
Mark Emlyn
==================================================
Wed Dec 30 16:51:52 2009 +0000
==================================================
JspConfig.java
New helper class to provide web.xml to those Jasper classes that need to parse it. JspConfig was not consistent with TldLocationsCache. These are now consistent. JspConfig now has access to the merged web.xml generated by Catalina from web-fragment.xml files and/or annotations.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@894672 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TldLocationsCache.java
index ac9fd6f917..0fa529d0ea 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -17,10 +17,8 @@
 
 package org.apache.jasper.compiler;
 
-import java.io.InputStream;
 import java.util.Iterator;
 import java.util.Vector;
-import java.net.URL;
 
 import javax.servlet.ServletContext;
 
@@ -29,7 +27,6 @@ import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.jasper.xmlparser.TreeNode;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.xml.sax.InputSource;
 
 /**
  * Handles the jsp-config element in WEB_INF/web.xml.  This is used
@@ -41,8 +38,6 @@ import org.xml.sax.InputSource;
 
 public class JspConfig {
 
-    private static final String WEB_XML = "/WEB-INF/web.xml";
-
     // Logger
     private final Log log = LogFactory.getLog(JspConfig.class);
 
@@ -75,23 +70,16 @@ public class JspConfig {
         return 2.3;
     }
 
-    private void processWebDotXml(ServletContext ctxt) throws JasperException {
+    private void processWebDotXml() throws JasperException {
 
-        InputStream is = null;
+        WebXml webXml = null;
 
         try {
-            URL uri = ctxt.getResource(WEB_XML);
-            if (uri == null) {
-                // no web.xml
-                return;
-            }
-
-            is = uri.openStream();
-            InputSource ip = new InputSource(is);
-            ip.setSystemId(uri.toExternalForm()); 
-
+            webXml = new WebXml(ctxt);
+            
             ParserUtils pu = new ParserUtils();
-            TreeNode webApp = pu.parseXMLDocument(WEB_XML, ip);
+            TreeNode webApp = pu.parseXMLDocument(webXml.getSystemId(),
+                    webXml.getInputSource());
 
             if (webApp == null
                     || getVersion(webApp) < 2.4) {
@@ -222,10 +210,8 @@ public class JspConfig {
         } catch (Exception ex) {
             throw new JasperException(ex);
         } finally {
-            if (is != null) {
-                try {
-                    is.close();
-                } catch (Throwable t) {}
+            if (webXml != null) {
+                webXml.close();
             }
         }
     }
@@ -235,7 +221,7 @@ public class JspConfig {
         if (!initialized) {
             synchronized (this) {
                 if (!initialized) {
-                    processWebDotXml(ctxt);
+                    processWebDotXml();
                     defaultJspProperty = new JspProperty(defaultIsXml,
                             defaultIsELIgnored,
                             defaultIsScriptingInvalid,

==================================================
WebXml.java
index 4a6488e721..04e20cc3fd 100644
--- a/java/org/apache/jasper/compiler/TldLocationsCache.java
+++ b/java/org/apache/jasper/compiler/TldLocationsCache.java
@@ -81,9 +81,6 @@ import org.apache.tomcat.JarScannerCallback;
 
 public class TldLocationsCache {
 
-    // Logger
-    private final Log log = LogFactory.getLog(TldLocationsCache.class);
-
     /**
      * The types of URI one may specify for a tag library
      */
@@ -93,8 +90,6 @@ public class TldLocationsCache {
 
     private static final String WEB_INF = "/WEB-INF/";
     private static final String WEB_INF_LIB = "/WEB-INF/lib/";
-    private static final String WEB_XML = "/WEB-INF/web.xml";
-    private static final String FILE_PROTOCOL = "file:";
     private static final String JAR_EXT = ".jar";
     private static final String TLD_EXT = ".tld";
 
@@ -238,67 +233,17 @@ public class TldLocationsCache {
      * This is not kept in sync with o.a.c.startup.TldConfig as the Jasper only
      * needs the URI to TLD mappings from scan web.xml whereas TldConfig needs
      * to scan the actual TLD files.
-     * 
-     * Search order is:
-     * - web.xml scanned by Tomcat and placed in context attribute
-     * - location specified by ALT_DD_ATTR
-     * - /WEB-INF/web.xml
      */    
     private void tldScanWebXml() throws Exception {
 
-        InputStream is = null;
-        String systemId = null;
-
+        WebXml webXml = null;
         try {
-            // Is a web.xml provided as context attribute?
-            String webXml = (String) ctxt.getAttribute(
-                    org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML);
-            if (webXml != null) {
-                is = new ByteArrayInputStream(webXml.getBytes());
-                systemId = org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML;
-            }
-            
-            // If not available as context attribute, look for an alternative
-            // location
-            if (is == null) {
-                // Acquire input stream to web application deployment descriptor
-                String altDDName = (String)ctxt.getAttribute(
-                                                        Constants.ALT_DD_ATTR);
-                if (altDDName != null) {
-                    try {
-                        URL uri =
-                            new URL(FILE_PROTOCOL+altDDName.replace('\\', '/'));
-                        is = uri.openStream();
-                        systemId = uri.toExternalForm();
-                    } catch (MalformedURLException e) {
-                        log.warn(Localizer.getMessage(
-                                "jsp.error.internal.filenotfound",
-                                altDDName));
-                    }
-                }
-            }
+            webXml = new WebXml(ctxt);
             
-            // Finally, try the default /WEB-INF/web.xml
-            if (is == null) {
-                URL uri = ctxt.getResource(WEB_XML);
-                if (uri == null) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.error.internal.filenotfound", WEB_XML));
-                } else {
-                    is = uri.openStream();
-                    systemId = uri.toExternalForm();
-                }
-            }
-
-            if (is == null) {
-                return;
-            }
-            InputSource ip = new InputSource(is);
-            ip.setSystemId(systemId); 
-
             // Parse the web application deployment descriptor
             TreeNode webtld = null;
-            webtld = new ParserUtils().parseXMLDocument(systemId, ip);
+            webtld = new ParserUtils().parseXMLDocument(webXml.getSystemId(),
+                    webXml.getInputSource());
 
             // Allow taglib to be an element of the root or jsp-config (JSP2.0)
             TreeNode jspConfig = webtld.findChild("jsp-config");
@@ -332,10 +277,8 @@ public class TldLocationsCache {
                 mappings.put(tagUri, new String[] { tagLoc, tagLoc2 });
             }
         } finally {
-            if (is != null) {
-                try {
-                    is.close();
-                } catch (Throwable t) {}
+            if (webXml != null) {
+                webXml.close();
             }
         }
     }

==================================================
