f3d0ffaa687182dfcbd0299880af543f9da96450
==================================================
TCK failures: EL TCK with security manager
==================================================
Mark Emlyn
==================================================
Sun Apr 11 22:43:09 2010 +0000
==================================================
ExpressionFactory.java
TCK failures: EL TCK with security manager

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@933007 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstValue.java
index c7b74a2d0e..27e8b793d4 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -27,6 +27,8 @@ import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Properties;
 
 /**
@@ -34,15 +36,46 @@ import java.util.Properties;
  * @since 2.1
  */
 public abstract class ExpressionFactory {
+    
+    private static final boolean IS_SECURITY_ENABLED =
+        (System.getSecurityManager() != null);
 
     private static final String SERVICE_RESOURCE_NAME =
         "META-INF/services/javax.el.ExpressionFactory";
 
-    private static final String SEP = System.getProperty("file.separator");
-    private static final String PROPERTY_FILE =
-        System.getProperty("java.home") + "lib" + SEP + "el.properties";
     private static final String PROPERTY_NAME = "javax.el.ExpressionFactory";
 
+    private static final String SEP;
+    private static final String PROPERTY_FILE;
+
+    static {
+        if (IS_SECURITY_ENABLED) {
+            SEP = AccessController.doPrivileged(
+                    new PrivilegedAction<String>(){
+                        @Override
+                        public String run() {
+                            return System.getProperty("file.separator");
+                        }
+
+                    }
+            );
+            PROPERTY_FILE = AccessController.doPrivileged(
+                    new PrivilegedAction<String>(){
+                        @Override
+                        public String run() {
+                            return System.getProperty("java.home") + "lib" +
+                                    SEP + "el.properties";
+                        }
+
+                    }
+            );
+        } else {
+            SEP = System.getProperty("file.separator");
+            PROPERTY_FILE = System.getProperty("java.home") + "lib" + SEP +
+                    "el.properties";
+        }
+    }
+
     public abstract Object coerceToType(Object obj, Class<?> expectedType)
             throws ELException;
 
@@ -90,12 +123,34 @@ public abstract class ExpressionFactory {
         // First services API
         className = getClassNameServices(tccl);
         if (className == null) {
-            // Second el.properties file
-            className = getClassNameJreDir();
+            if (IS_SECURITY_ENABLED) {
+                className = AccessController.doPrivileged(
+                        new PrivilegedAction<String>() {
+                            @Override
+                            public String run() {
+                                return getClassNameJreDir();
+                            }
+                        }
+                );
+            } else {
+                // Second el.properties file
+                className = getClassNameJreDir();
+            }
         }
         if (className == null) {
-            // Third system property 
-            className = getClassNameSysProp();
+            if (IS_SECURITY_ENABLED) {
+                className = AccessController.doPrivileged(
+                        new PrivilegedAction<String>() {
+                            @Override
+                            public String run() {
+                                return getClassNameSysProp();
+                            }
+                        }
+                );
+            } else {
+                // Third system property 
+                className = getClassNameSysProp();
+            }
         }
         if (className == null) {
             // Fourth - default
@@ -225,4 +280,5 @@ public abstract class ExpressionFactory {
         }
         return null;
     }
+
 }

==================================================
