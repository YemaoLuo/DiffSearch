822e67b0c77798d8ba18f603f70e111bd43ea87a
==================================================
Improve code coverage
==================================================
Mark Thomas
==================================================
Wed May 30 10:07:30 2018 +0000
==================================================
TestAuthorizationDigest.java
Improve code coverage

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832527 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHttpParser.java
index 20eafdfc71..a620aa47ec 100644
--- a/test/org/apache/tomcat/util/http/parser/TestAuthorizationDigest.java
+++ b/test/org/apache/tomcat/util/http/parser/TestAuthorizationDigest.java
@@ -218,6 +218,16 @@ public class TestAuthorizationDigest {
         Assert.assertEquals("auth", result.get("qop"));
     }
 
+    @Test
+    public void testEmptyQop() throws Exception {
+        String header = "Digest qop=";
+
+        StringReader input = new StringReader(header);
+
+        Map<String,String> result = Authorization.parseAuthorizationDigest(input);
+        Assert.assertNull(result);
+    }
+
     @Test
     public void testNonTokenQop() throws Exception {
         String header = "Digest qop=au{th";
@@ -332,6 +342,28 @@ public class TestAuthorizationDigest {
         Assert.assertEquals("b", result.get("a"));
     }
 
+    @Test
+    public void testParseAuthParamBEscaped() throws Exception {
+        // Test for HttpParser.readTokenOrQuotedString()
+        // auth-param = token "=" ( token | quoted-string )
+        String header = "Digest a=\"b\\\"b\"";
+
+        StringReader input = new StringReader(header);
+
+        Map<String,String> result = Authorization.parseAuthorizationDigest(input);
+        Assert.assertEquals("b\"b", result.get("a"));
+    }
+
+    @Test
+    public void testQuotedStringNoQuotes() throws Exception {
+        String header = "Digest username=a";
+
+        StringReader input = new StringReader(header);
+
+        Map<String,String> result = Authorization.parseAuthorizationDigest(input);
+        Assert.assertNull(result);
+    }
+
     @Test
     public void testNotDigest() throws Exception {
         String header = "SomethingElse a=b";
@@ -341,4 +373,6 @@ public class TestAuthorizationDigest {
         Map<String,String> result = Authorization.parseAuthorizationDigest(input);
         Assert.assertNull(result);
     }
+
+
 }

==================================================
TestMediaType.java
index 9227e7dcfc..6280ab6cab 100644
--- a/test/org/apache/tomcat/util/http/parser/TestHttpParser.java
+++ b/test/org/apache/tomcat/util/http/parser/TestHttpParser.java
@@ -25,4 +25,121 @@ public class TestHttpParser {
     public void testTokenDel() {
         Assert.assertFalse("DEL is not a token", HttpParser.isToken(127));
     }
+
+
+    @Test
+    public void testAbsolutePathRelaxedLargeInvalid() {
+        HttpParser httpParser = new HttpParser(null, null);
+        Assert.assertFalse(httpParser.isAbsolutePathRelaxed(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testAbsolutePathRelaxed01() {
+        HttpParser httpParser = new HttpParser(null, null);
+        Assert.assertFalse(httpParser.isAbsolutePathRelaxed('{'));
+    }
+
+
+    @Test
+    public void testAbsolutePathRelaxed02() {
+        HttpParser httpParser = new HttpParser("{", null);
+        Assert.assertTrue(httpParser.isAbsolutePathRelaxed('{'));
+    }
+
+
+    @Test
+    public void testAbsolutePathRelaxed03() {
+        HttpParser httpParser = new HttpParser(null, "{");
+        Assert.assertFalse(httpParser.isAbsolutePathRelaxed('{'));
+    }
+
+
+    @Test
+    public void testAbsolutePathRelaxed04() {
+        HttpParser httpParser = new HttpParser("\u1000", null);
+        Assert.assertFalse(httpParser.isAbsolutePathRelaxed('{'));
+    }
+
+
+    @Test
+    public void testAbsolutePathRelaxed05() {
+        HttpParser httpParser = new HttpParser("", null);
+        Assert.assertFalse(httpParser.isAbsolutePathRelaxed('{'));
+    }
+
+
+    @Test
+    public void testQueryRelaxedLargeInvalid() {
+        HttpParser httpParser = new HttpParser(null, null);
+        Assert.assertFalse(httpParser.isQueryRelaxed(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testRequestTargetLargeInvalid() {
+        Assert.assertTrue(HttpParser.isNotRequestTarget(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testHttpProtocolLargeInvalid() {
+        Assert.assertFalse(HttpParser.isHttpProtocol(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testUserInfoLargeInvalid() {
+        Assert.assertFalse(HttpParser.isUserInfo(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testAbsolutePathLargeInvalid() {
+        Assert.assertFalse(HttpParser.isAbsolutePath(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testQueryLargeInvalid() {
+        Assert.assertFalse(HttpParser.isQuery(Integer.MAX_VALUE));
+    }
+
+
+    @Test
+    public void testUnquoteNull() {
+        Assert.assertNull(HttpParser.unquote(null));
+    }
+
+
+    @Test
+    public void testUnquoteShort() {
+        String shortText = "a";
+        Assert.assertEquals(shortText, HttpParser.unquote(shortText));
+    }
+
+
+    @Test
+    public void testUnquoteUnquoted() {
+        String shortText = "abcde";
+        Assert.assertEquals(shortText, HttpParser.unquote(shortText));
+    }
+
+
+    @Test
+    public void testUnquoteEscaped() {
+        // Note: Test string is also Java escaped
+        String shortText = "\"ab\\\"ab\"";
+        String result = "ab\"ab";
+        Assert.assertEquals(result, HttpParser.unquote(shortText));
+    }
+
+
+    @Test
+    public void testUnquoteUnquotedEscaped() {
+        // Note: Test string is also Java escaped
+        String shortText = "ab\\\"ab";
+        String result = "ab\"ab";
+        Assert.assertEquals(result, HttpParser.unquote(shortText));
+    }
 }

==================================================
