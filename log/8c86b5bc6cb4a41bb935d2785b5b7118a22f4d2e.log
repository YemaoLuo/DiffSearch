8c86b5bc6cb4a41bb935d2785b5b7118a22f4d2e
==================================================
Optimize timeout handling, thanks to a suggestion from Jeanfrancois.Arcand@Sun.COM,
==================================================
Filip Hanik
==================================================
Fri Jul 14 03:27:06 2006 +0000
==================================================
InternalNioInputBuffer.java
Optimize timeout handling, thanks to a suggestion from Jeanfrancois.Arcand@Sun.COM,
although this does put a gap in the timeout check, even in those cases where there shouldn't be, ie, a socket can be closed immediately


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@421791 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index d8765c353e..76f26dd828 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -572,21 +572,7 @@ public class InternalNioInputBuffer implements InputBuffer {
                     boolean addToQueue = false;
                     try { addToQueue = ((key.interestOps()&SelectionKey.OP_READ) != SelectionKey.OP_READ); } catch ( CancelledKeyException ignore ){}
                     if ( addToQueue ) {
-                        att.setWakeUp(true);
-                        poller.addEvent(
-                            new Runnable() {
-                            public void run() {
-                                try {
-                                    if (key != null) key.interestOps(SelectionKey.OP_READ);
-                                } catch (CancelledKeyException ckx) {
-                                    try {
-                                        socket.socket().close();
-                                        socket.close();
-                                        att.setWakeUp(false);
-                                    } catch (Exception ignore) {}
-                                }
-                            }
-                        });
+                        addToReadQueue(key, att);
                     }//end if
                     synchronized (att.getMutex()) {
                         if ( att.getWakeUp() ) att.getMutex().wait(25);
@@ -598,6 +584,28 @@ public class InternalNioInputBuffer implements InputBuffer {
         throw new IOException("read timed out.");
     }
 
+    private void addToReadQueue(final SelectionKey key, final KeyAttachment att) {
+        att.setWakeUp(true);
+        poller.addEvent(
+            new Runnable() {
+            public void run() {
+                try {
+                    if (key != null) key.interestOps(SelectionKey.OP_READ);
+                } catch (CancelledKeyException ckx) {
+                    try {
+                        if ( key != null && key.attachment() != null ) {
+                            KeyAttachment ka = (KeyAttachment)key.attachment();
+                            ka.setError(true); //set to collect this socket immediately
+                        }
+                        socket.socket().close();
+                        socket.close();
+                        att.setWakeUp(false);
+                    } catch (Exception ignore) {}
+                }
+            }
+        });
+    }
+
 
     /**
      * Parse the HTTP headers.

==================================================
