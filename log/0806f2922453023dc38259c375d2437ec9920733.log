0806f2922453023dc38259c375d2437ec9920733
==================================================
Remove unused constant.
==================================================
Mark Thomas
==================================================
Sat Nov 7 22:38:55 2015 +0000
==================================================
ByteBufferHolder.java
Remove unused constant.
Reported by UC Detector

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713194 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ByteBufferUtils.java
index a4368522a5..d12419612c 100644
--- a/java/org/apache/tomcat/util/buf/ByteBufferHolder.java
+++ b/java/org/apache/tomcat/util/buf/ByteBufferHolder.java
@@ -52,13 +52,4 @@ public class ByteBufferHolder {
             return false;
         }
     }
-
-
-    public boolean hasData() {
-        if (flipped.get()) {
-            return buf.remaining()>0;
-        } else {
-            return buf.position()>0;
-        }
-    }
 }
\ No newline at end of file

==================================================
ByteChunk.java
index d26320b08f..9f15b0aaa5 100644
--- a/java/org/apache/tomcat/util/buf/ByteBufferUtils.java
+++ b/java/org/apache/tomcat/util/buf/ByteBufferUtils.java
@@ -44,20 +44,6 @@ public class ByteBufferUtils {
     }
 
 
-    /**
-     * Default byte buffer expansion. Doubles current size. Buffers are assumed
-     * to be in 'write to' mode since there would be no need to expand a buffer
-     * while it was in 'read from' mode.
-     *
-     * @param in Buffer to expand
-     * @return   The expanded buffer with any data from the input buffer copied
-     *           in to it
-     */
-    public static ByteBuffer expand(ByteBuffer in) {
-        return expand(in, in.capacity() * 2);
-    }
-
-
     /**
      * Expands buffer to the given size unless it is already as big or bigger.
      * Buffers are assumed to be in 'write to' mode since there would be no need

==================================================
UEncoder.java
index a411dc442b..5c5cad9d72 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -142,7 +142,6 @@ public final class ByteChunk implements Cloneable, Serializable {
      * Resets the message buff to an uninitialized state.
      */
     public void recycle() {
-        //        buff = null;
         charset=null;
         start=0;
         end=0;
@@ -150,10 +149,6 @@ public final class ByteChunk implements Cloneable, Serializable {
         hasHashCode = false;
     }
 
-    public void reset() {
-        buff=null;
-    }
-
     // -------------------- Setup --------------------
 
     public void allocate( int initial, int limit  ) {

==================================================
Constants.java
index 8bd87be3aa..0f73684223 100644
--- a/java/org/apache/tomcat/util/buf/UEncoder.java
+++ b/java/org/apache/tomcat/util/buf/UEncoder.java
@@ -56,36 +56,16 @@ public final class UEncoder {
     private ByteChunk bb=null;
     private CharChunk cb=null;
     private CharChunk output=null;
-    private final boolean readOnlySafeChars;
-
-    public UEncoder() {
-        this.safeChars = initialSafeChars();
-        readOnlySafeChars = false;
-    }
 
     /**
      * Create a UEncoder with an unmodifiable safe character set.
-     * <p>
-     * Calls to {@link UEncoder#addSafeCharacter(char) addSafeCharacter(char)}
-     * on instances created by this constructor will throw an
-     * {@link IllegalStateException}.
      *
-     * @param safeCharsSet
-     *            safe characters for this encoder
+     * @param safeCharsSet safe characters for this encoder
      */
     public UEncoder(SafeCharsSet safeCharsSet) {
         this.safeChars = safeCharsSet.getSafeChars();
-        readOnlySafeChars = true;
-    }
-
-    public void addSafeCharacter( char c ) {
-        if (readOnlySafeChars) {
-            throw new IllegalStateException("UEncoders safeChararacters are read only");
-        }
-        safeChars.set( c );
     }
 
-
    /**
     * URL Encode string, using a specified encoding.
     *

==================================================
TestDigestAuthenticator.java
index 63970c7543..5dcaccef21 100644
--- a/java/org/apache/tomcat/util/threads/Constants.java
+++ b/java/org/apache/tomcat/util/threads/Constants.java
@@ -21,8 +21,6 @@ package org.apache.tomcat.util.threads;
  */
 public final class Constants {
 
-    public static final String Package = "org.apache.tomcat.util.threads";
-
     public static final long DEFAULT_THREAD_RENEWAL_DELAY = 1000L;
 
     /**

==================================================
TestJaspicDigestAuthenticator.java
index c2d0bfbc29..b260a99fa7 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -245,7 +245,6 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         // Third request should succeed if we increment nc
         auth.clear();
         bc.recycle();
-        bc.reset();
         auth.add(buildDigestResponse(user, pwd, digestUri, realm,
                 getNonce(respHeaders), getOpaque(respHeaders), nc2, cnonce,
                 qop));

==================================================
TestUEncoder.java
index 8b08030c49..5d867b865a 100644
--- a/test/org/apache/catalina/authenticator/TestJaspicDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestJaspicDigestAuthenticator.java
@@ -251,7 +251,6 @@ public class TestJaspicDigestAuthenticator extends TomcatBaseTest {
         // Third request should succeed if we increment nc
         auth.clear();
         bc.recycle();
-        bc.reset();
         auth.add(buildDigestResponse(user, pwd, digestUri, realm,
                 getNonce(respHeaders), getOpaque(respHeaders), nc2, cnonce,
                 qop));

==================================================
