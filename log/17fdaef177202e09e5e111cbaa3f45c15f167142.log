17fdaef177202e09e5e111cbaa3f45c15f167142
==================================================
Refactor XML and HTML escaping to a single location
==================================================
Mark Thomas
==================================================
Wed Oct 18 10:39:54 2017 +0000
==================================================
Response.java
Refactor XML and HTML escaping to a single location

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1812489 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HTMLManagerServlet.java
index db21a01047..cf57aefa02 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -51,7 +51,6 @@ import org.apache.catalina.Globals;
 import org.apache.catalina.Session;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.security.SecurityUtil;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.SessionConfig;
 import org.apache.coyote.ActionCode;
 import org.apache.juli.logging.Log;
@@ -64,6 +63,7 @@ import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.http.parser.MediaTypeCache;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * Wrapper object for the Coyote response.
@@ -1374,7 +1374,7 @@ public class Response implements HttpServletResponse {
             if (getContext().getSendRedirectBody()) {
                 PrintWriter writer = getWriter();
                 writer.print(sm.getString("coyoteResponse.sendRedirect.note",
-                        RequestUtil.filter(locationUri)));
+                        Escape.htmlElementContent(locationUri)));
                 flushBuffer();
             }
         } catch (IllegalArgumentException e) {

==================================================
ManagerServlet.java
index 7bae2d0182..af7efb08cf 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -49,10 +49,10 @@ import org.apache.catalina.Session;
 import org.apache.catalina.manager.util.BaseSessionComparator;
 import org.apache.catalina.manager.util.SessionUtils;
 import org.apache.catalina.util.ContextName;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.URLEncoder;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 
 /**
 * Servlet that enables remote management of the web applications deployed
@@ -349,7 +349,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
         if (message == null || message.length() == 0) {
             args[1] = "OK";
         } else {
-            args[1] = RequestUtil.filter(message);
+            args[1] = Escape.htmlElementContent(message);
         }
         writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));
 
@@ -442,19 +442,19 @@ public final class HTMLManagerServlet extends ManagerServlet {
                 args = new Object[7];
                 args[0] = "<a href=\"" +
                         URLEncoder.DEFAULT.encode(contextPath + "/", StandardCharsets.UTF_8) +
-                        "\">" + RequestUtil.filter(displayPath) + "</a>";
+                        "\">" + Escape.htmlElementContent(displayPath) + "</a>";
                 if ("".equals(ctxt.getWebappVersion())) {
                     args[1] = noVersion;
                 } else {
-                    args[1] = RequestUtil.filter(ctxt.getWebappVersion());
+                    args[1] = Escape.htmlElementContent(ctxt.getWebappVersion());
                 }
                 if (ctxt.getDisplayName() == null) {
                     args[2] = "&nbsp;";
                 } else {
-                    args[2] = RequestUtil.filter(ctxt.getDisplayName());
+                    args[2] = Escape.htmlElementContent(ctxt.getDisplayName());
                 }
                 args[3] = Boolean.valueOf(ctxt.getState().isAvailable());
-                args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +
+                args[4] = Escape.htmlElementContent(response.encodeURL(request.getContextPath() +
                      "/html/sessions?" + pathVersion));
                 Manager manager = ctxt.getManager();
                 if (manager instanceof DistributedManager && showProxySessions) {
@@ -472,19 +472,19 @@ public final class HTMLManagerServlet extends ManagerServlet {
                     (MessageFormat.format(APPS_ROW_DETAILS_SECTION, args));
 
                 args = new Object[14];
-                args[0] = RequestUtil.filter(response.encodeURL(request
+                args[0] = Escape.htmlElementContent(response.encodeURL(request
                         .getContextPath() + "/html/start?" + pathVersion));
                 args[1] = appsStart;
-                args[2] = RequestUtil.filter(response.encodeURL(request
+                args[2] = Escape.htmlElementContent(response.encodeURL(request
                         .getContextPath() + "/html/stop?" + pathVersion));
                 args[3] = appsStop;
-                args[4] = RequestUtil.filter(response.encodeURL(request
+                args[4] = Escape.htmlElementContent(response.encodeURL(request
                         .getContextPath() + "/html/reload?" + pathVersion));
                 args[5] = appsReload;
-                args[6] = RequestUtil.filter(response.encodeURL(request
+                args[6] = Escape.htmlElementContent(response.encodeURL(request
                         .getContextPath() + "/html/undeploy?" + pathVersion));
                 args[7] = appsUndeploy;
-                args[8] = RequestUtil.filter(response.encodeURL(request
+                args[8] = Escape.htmlElementContent(response.encodeURL(request
                         .getContextPath() + "/html/expire?" + pathVersion));
                 args[9] = appsExpire;
                 args[10] = smClient.getString("htmlManagerServlet.expire.explain");
@@ -824,14 +824,14 @@ public final class HTMLManagerServlet extends ManagerServlet {
             }
             throw new IllegalArgumentException(smClient.getString(
                     "managerServlet.invalidPath",
-                    RequestUtil.filter(path)));
+                    Escape.htmlElementContent(path)));
         }
 
         Context ctxt = (Context) host.findChild(cn.getName());
         if (null == ctxt) {
             throw new IllegalArgumentException(smClient.getString(
                     "managerServlet.noContext",
-                    RequestUtil.filter(cn.getDisplayName())));
+                    Escape.htmlElementContent(cn.getDisplayName())));
         }
         Manager manager = ctxt.getManager();
         List<Session> sessions = new ArrayList<>();

==================================================
StatusTransformer.java
index e12609e902..3907bf69db 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -58,13 +58,13 @@ import org.apache.catalina.connector.Connector;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.startup.ExpandWar;
 import org.apache.catalina.util.ContextName;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.tomcat.util.Diagnostics;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 
 
 /**
@@ -993,7 +993,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(cn.getDisplayName())));
+                        Escape.htmlElementContent(cn.getDisplayName())));
                 return;
             }
             // It isn't possible for the manager to reload itself
@@ -1173,13 +1173,13 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        Escape.htmlElementContent(displayPath)));
                 return;
             }
             Manager manager = context.getManager() ;
             if(manager == null) {
                 writer.println(smClient.getString("managerServlet.noManager",
-                        RequestUtil.filter(displayPath)));
+                        Escape.htmlElementContent(displayPath)));
                 return;
             }
             int maxCount = 60;
@@ -1299,7 +1299,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        Escape.htmlElementContent(displayPath)));
                 return;
             }
             context.start();
@@ -1345,7 +1345,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        Escape.htmlElementContent(displayPath)));
                 return;
             }
             // It isn't possible for the manager to stop itself
@@ -1393,13 +1393,13 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) host.findChild(name);
             if (context == null) {
                 writer.println(smClient.getString("managerServlet.noContext",
-                        RequestUtil.filter(displayPath)));
+                        Escape.htmlElementContent(displayPath)));
                 return;
             }
 
             if (!isDeployed(name)) {
                 writer.println(smClient.getString("managerServlet.notDeployed",
-                        RequestUtil.filter(displayPath)));
+                        Escape.htmlElementContent(displayPath)));
                 return;
             }
 
@@ -1610,7 +1610,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         String path = null;
         if (cn != null) {
-            path = RequestUtil.filter(cn.getPath());
+            path = Escape.htmlElementContent(cn.getPath());
         }
         writer.println(sm.getString("managerServlet.invalidPath", path));
         return false;

==================================================
HTMLHostManagerServlet.java
index 76134fa8e9..d0ec7fd1f4 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -37,8 +37,8 @@ import javax.management.ObjectInstance;
 import javax.management.ObjectName;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.catalina.util.RequestUtil;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * This is a refactoring of the servlet to externalize
@@ -260,7 +260,7 @@ public class StatusTransformer {
             for (MemoryPoolMXBean memoryPoolMBean : memoryPoolMBeans.values()) {
                 MemoryUsage usage = memoryPoolMBean.getUsage();
                 writer.write("<memorypool");
-                writer.write(" name='" + filterXml(memoryPoolMBean.getName()) + "'");
+                writer.write(" name='" + Escape.xml("", memoryPoolMBean.getName()) + "'");
                 writer.write(" type='" + memoryPoolMBean.getType() + "'");
                 writer.write(" usageInit='" + usage.getInit() + "'");
                 writer.write(" usageCommitted='" + usage.getCommitted() + "'");
@@ -500,32 +500,32 @@ public class StatusTransformer {
                 }
                 writer.write("</td>");
                 writer.write("<td>");
-                writer.print(filter(mBeanServer.getAttribute
+                writer.print(Escape.htmlElementContext(mBeanServer.getAttribute
                                     (pName, "remoteAddrForwarded")));
                 writer.write("</td>");
                 writer.write("<td>");
-                writer.print(filter(mBeanServer.getAttribute
+                writer.print(Escape.htmlElementContext(mBeanServer.getAttribute
                                     (pName, "remoteAddr")));
                 writer.write("</td>");
                 writer.write("<td nowrap>");
-                writer.write(filter(mBeanServer.getAttribute
+                writer.write(Escape.htmlElementContext(mBeanServer.getAttribute
                                     (pName, "virtualHost")));
                 writer.write("</td>");
                 writer.write("<td nowrap class=\"row-left\">");
                 if (showRequest) {
-                    writer.write(filter(mBeanServer.getAttribute
+                    writer.write(Escape.htmlElementContext(mBeanServer.getAttribute
                                         (pName, "method")));
                     writer.write(" ");
-                    writer.write(filter(mBeanServer.getAttribute
+                    writer.write(Escape.htmlElementContext(mBeanServer.getAttribute
                                         (pName, "currentUri")));
                     String queryString = (String) mBeanServer.getAttribute
                         (pName, "currentQueryString");
                     if ((queryString != null) && (!queryString.equals(""))) {
                         writer.write("?");
-                        writer.print(RequestUtil.filter(queryString));
+                        writer.print(Escape.htmlElementContent(queryString));
                     }
                     writer.write(" ");
-                    writer.write(filter(mBeanServer.getAttribute
+                    writer.write(Escape.htmlElementContext(mBeanServer.getAttribute
                                         (pName, "protocol")));
                 } else {
                     writer.write("?");
@@ -559,30 +559,30 @@ public class StatusTransformer {
                 }
                 writer.write("\"");
                 writer.write(" remoteAddr=\""
-                             + filter(mBeanServer.getAttribute
+                             + Escape.htmlElementContext(mBeanServer.getAttribute
                                       (pName, "remoteAddr")) + "\"");
                 writer.write(" virtualHost=\""
-                             + filter(mBeanServer.getAttribute
+                             + Escape.htmlElementContext(mBeanServer.getAttribute
                                       (pName, "virtualHost")) + "\"");
 
                 if (showRequest) {
                     writer.write(" method=\""
-                                 + filter(mBeanServer.getAttribute
+                                 + Escape.htmlElementContext(mBeanServer.getAttribute
                                           (pName, "method")) + "\"");
                     writer.write(" currentUri=\""
-                                 + filter(mBeanServer.getAttribute
+                                 + Escape.htmlElementContext(mBeanServer.getAttribute
                                           (pName, "currentUri")) + "\"");
 
                     String queryString = (String) mBeanServer.getAttribute
                         (pName, "currentQueryString");
                     if ((queryString != null) && (!queryString.equals(""))) {
                         writer.write(" currentQueryString=\""
-                                     + RequestUtil.filter(queryString) + "\"");
+                                     + Escape.htmlElementContent(queryString) + "\"");
                     } else {
                         writer.write(" currentQueryString=\"&#63;\"");
                     }
                     writer.write(" protocol=\""
-                                 + filter(mBeanServer.getAttribute
+                                 + Escape.htmlElementContext(mBeanServer.getAttribute
                                           (pName, "protocol")) + "\"");
                 } else {
                     writer.write(" method=\"&#63;\"");
@@ -644,7 +644,7 @@ public class StatusTransformer {
                 }
 
                 writer.print("<a href=\"#" + (count++) + ".0\">");
-                writer.print(filter(webModuleName));
+                writer.print(Escape.htmlElementContext(webModuleName));
                 writer.print("</a>");
                 if (iterator.hasNext()) {
                     writer.print("<br>");
@@ -726,7 +726,7 @@ public class StatusTransformer {
             }
 
             writer.print("<h1>");
-            writer.print(filter(name));
+            writer.print(Escape.htmlElementContext(name));
             writer.print("</h1>");
             writer.print("</a>");
 
@@ -869,11 +869,11 @@ public class StatusTransformer {
                 mBeanServer.invoke(objectName, "findMappings", null, null);
 
             writer.print("<h2>");
-            writer.print(filter(servletName));
+            writer.print(Escape.htmlElementContext(servletName));
             if ((mappings != null) && (mappings.length > 0)) {
                 writer.print(" [ ");
                 for (int i = 0; i < mappings.length; i++) {
-                    writer.print(filter(mappings[i]));
+                    writer.print(Escape.htmlElementContext(mappings[i]));
                     if (i < mappings.length - 1) {
                         writer.print(" , ");
                     }
@@ -914,7 +914,10 @@ public class StatusTransformer {
      *
      * @param obj The message string to be filtered
      * @return filtered HTML content
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String filter(Object obj) {
 
         if (obj == null)
@@ -951,7 +954,10 @@ public class StatusTransformer {
      * Escape the 5 entities defined by XML.
      * @param s The message string to be filtered
      * @return filtered XML content
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String filterXml(String s) {
         if (s == null)
             return "";

==================================================
DefaultServlet.java
index c764cce8b0..9bb0d3bc30 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -32,9 +32,9 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Host;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 
 /**
 * Servlet that enables remote management of the virtual hosts deployed
@@ -282,7 +282,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         if (message == null || message.length() == 0) {
             args[1] = "OK";
         } else {
-            args[1] = RequestUtil.filter(message);
+            args[1] = Escape.htmlElementContent(message);
         }
         writer.print(MessageFormat.format(Constants.MESSAGE_SECTION, args));
 
@@ -337,7 +337,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
 
             if (host != null ) {
                 args = new Object[2];
-                args[0] = RequestUtil.filter(hostName);
+                args[0] = Escape.htmlElementContent(hostName);
                 String[] aliases = host.findAliases();
                 StringBuilder buf = new StringBuilder();
                 if (aliases.length > 0) {
@@ -351,7 +351,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
                     buf.append("&nbsp;");
                     args[1] = buf.toString();
                 } else {
-                    args[1] = RequestUtil.filter(buf.toString());
+                    args[1] = Escape.htmlElementContent(buf.toString());
                 }
 
                 writer.print

==================================================
WebdavServlet.java
index 116e963ed5..8b4524612e 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -72,11 +72,11 @@ import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.connector.RequestFacade;
 import org.apache.catalina.connector.ResponseFacade;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.URLEncoder;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 import org.apache.tomcat.util.security.PrivilegedGetTccl;
 import org.apache.tomcat.util.security.PrivilegedSetTccl;
 import org.w3c.dom.Document;
@@ -1616,7 +1616,7 @@ public class DefaultServlet extends HttpServlet {
               .append("'");
 
             sb.append(">");
-            sb.append(RequestUtil.filter(entry));
+            sb.append(Escape.htmlElementContent(entry));
             if (childResource.isDirectory())
                 sb.append("/");
             sb.append("</entry>");
@@ -1783,7 +1783,7 @@ public class DefaultServlet extends HttpServlet {
             if (childResource.isDirectory())
                 sb.append("/");
             sb.append("\"><tt>");
-            sb.append(RequestUtil.filter(entry));
+            sb.append(Escape.htmlElementContent(entry));
             if (childResource.isDirectory())
                 sb.append("/");
             sb.append("</tt></a></td>\r\n");

==================================================
SSIMediator.java
index 8445676d40..bf114257e8 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -1090,7 +1090,7 @@ public class WebdavServlet extends DefaultServlet {
                         break;
                     case Node.ELEMENT_NODE:
                         strWriter = new StringWriter();
-                        domWriter = new DOMWriter(strWriter, true);
+                        domWriter = new DOMWriter(strWriter);
                         domWriter.print(currentNode);
                         lock.owner += strWriter.toString();
                         break;

==================================================
StoreAppender.java
index 129ccbf8cd..7f5069739c 100644
--- a/java/org/apache/catalina/ssi/SSIMediator.java
+++ b/java/org/apache/catalina/ssi/SSIMediator.java
@@ -26,9 +26,9 @@ import java.util.Locale;
 import java.util.Set;
 import java.util.TimeZone;
 
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.Strftime;
 import org.apache.catalina.util.URLEncoder;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * Allows the different SSICommand implementations to share data/talk to each
@@ -284,7 +284,7 @@ public class SSIMediator {
         } else if (encoding.equalsIgnoreCase("none")) {
             retVal = value;
         } else if (encoding.equalsIgnoreCase("entity")) {
-            retVal = RequestUtil.filter(value);
+            retVal = Escape.htmlElementContent(value);
         } else {
             //This shouldn't be possible
             throw new IllegalArgumentException("Unknown encoding: " + encoding);

==================================================
MemoryUser.java
index ae97e9b141..452122e090 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -26,6 +26,7 @@ import java.util.Iterator;
 
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.descriptor.web.ResourceBase;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * StoreAppends generate really the xml tag elements
@@ -106,7 +107,7 @@ public class StoreAppender {
         aWriter.print("<");
         aWriter.print(tag);
         aWriter.print(">");
-        aWriter.print(convertStr(content));
+        aWriter.print(Escape.xml(content));
         aWriter.print("</");
         aWriter.print(tag);
         aWriter.println(">");
@@ -341,7 +342,7 @@ public class StoreAppender {
         if (!(value instanceof String)) {
             value = value.toString();
         }
-        String strValue = convertStr((String) value);
+        String strValue = Escape.xml((String) value);
         pos = pos + name.length() + strValue.length();
         if (pos > 60) {
             writer.println();
@@ -360,7 +361,9 @@ public class StoreAppender {
      * '&amp;', and '"'.
      * @param input The string to escape
      * @return the escaped string
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public String convertStr(String input) {
 
         StringBuffer filtered = new StringBuffer(input.length());

==================================================
DOMWriter.java
index fa00ef4ee7..7580e0a5ca 100644
--- a/java/org/apache/catalina/users/MemoryUser.java
+++ b/java/org/apache/catalina/users/MemoryUser.java
@@ -25,8 +25,8 @@ import java.util.Iterator;
 import org.apache.catalina.Group;
 import org.apache.catalina.Role;
 import org.apache.catalina.UserDatabase;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.tomcat.util.buf.StringUtils;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * <p>Concrete implementation of {@link org.apache.catalina.User} for the
@@ -250,26 +250,26 @@ public class MemoryUser extends AbstractUser {
     public String toXml() {
 
         StringBuilder sb = new StringBuilder("<user username=\"");
-        sb.append(RequestUtil.filter(username));
+        sb.append(Escape.xml(username));
         sb.append("\" password=\"");
-        sb.append(RequestUtil.filter(password));
+        sb.append(Escape.xml(password));
         sb.append("\"");
         if (fullName != null) {
             sb.append(" fullName=\"");
-            sb.append(RequestUtil.filter(fullName));
+            sb.append(Escape.xml(fullName));
             sb.append("\"");
         }
         synchronized (groups) {
             if (groups.size() > 0) {
                 sb.append(" groups=\"");
-                StringUtils.join(groups, ',', (x) -> RequestUtil.filter(x.getGroupname()), sb);
+                StringUtils.join(groups, ',', (x) -> Escape.xml(x.getGroupname()), sb);
                 sb.append("\"");
             }
         }
         synchronized (roles) {
             if (roles.size() > 0) {
                 sb.append(" roles=\"");
-                StringUtils.join(roles, ',', (x) -> RequestUtil.filter(x.getRolename()), sb);
+                StringUtils.join(roles, ',', (x) -> Escape.xml(x.getRolename()), sb);
                 sb.append("\"");
             }
         }
@@ -285,24 +285,24 @@ public class MemoryUser extends AbstractUser {
     public String toString() {
 
         StringBuilder sb = new StringBuilder("User username=\"");
-        sb.append(RequestUtil.filter(username));
+        sb.append(Escape.xml(username));
         sb.append("\"");
         if (fullName != null) {
             sb.append(", fullName=\"");
-            sb.append(RequestUtil.filter(fullName));
+            sb.append(Escape.xml(fullName));
             sb.append("\"");
         }
         synchronized (groups) {
             if (groups.size() > 0) {
                 sb.append(", groups=\"");
-                StringUtils.join(groups, ',', (x) -> RequestUtil.filter(x.getGroupname()), sb);
+                StringUtils.join(groups, ',', (x) -> Escape.xml(x.getGroupname()), sb);
                 sb.append("\"");
             }
         }
         synchronized (roles) {
             if (roles.size() > 0) {
                 sb.append(", roles=\"");
-                StringUtils.join(roles, ',', (x) -> RequestUtil.filter(x.getRolename()), sb);
+                StringUtils.join(roles, ',', (x) -> Escape.xml(x.getRolename()), sb);
                 sb.append("\"");
             }
         }

==================================================
RequestUtil.java
index b339ddc45f..4b19ac32be 100644
--- a/java/org/apache/catalina/util/DOMWriter.java
+++ b/java/org/apache/catalina/util/DOMWriter.java
@@ -19,6 +19,7 @@ package org.apache.catalina.util;
 import java.io.PrintWriter;
 import java.io.Writer;
 
+import org.apache.tomcat.util.security.Escape;
 import org.w3c.dom.Attr;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
@@ -35,6 +36,12 @@ public class DOMWriter {
     private final boolean canonical;
 
 
+    public DOMWriter(Writer writer) {
+        this (writer, true);
+    }
+
+
+    @Deprecated
     public DOMWriter(Writer writer, boolean canonical) {
         out = new PrintWriter(writer);
         this.canonical = canonical;
@@ -74,7 +81,7 @@ public class DOMWriter {
                     out.print(attr.getLocalName());
 
                     out.print("=\"");
-                    out.print(escape(attr.getNodeValue()));
+                    out.print(Escape.xml("", canonical, attr.getNodeValue()));
                     out.print('"');
                 }
                 out.print('>');
@@ -95,7 +102,7 @@ public class DOMWriter {
             // print cdata sections
             case Node.CDATA_SECTION_NODE:
                 if (canonical) {
-                    out.print(escape(node.getNodeValue()));
+                    out.print(Escape.xml("", canonical, node.getNodeValue()));
                 } else {
                     out.print("<![CDATA[");
                     out.print(node.getNodeValue());
@@ -105,7 +112,7 @@ public class DOMWriter {
 
             // print text
             case Node.TEXT_NODE:
-                out.print(escape(node.getNodeValue()));
+                out.print(Escape.xml("", canonical, node.getNodeValue()));
                 break;
 
             // print processing instruction
@@ -180,50 +187,4 @@ public class DOMWriter {
 
         return array;
     }
-
-    /**
-     * Normalizes the given string.
-     * @param s The string to escape
-     * @return the escaped string
-     */
-    private String escape(String s) {
-        if (s == null) {
-            return "";
-        }
-
-        StringBuilder str = new StringBuilder();
-
-        int len = s.length();
-        for (int i = 0; i < len; i++) {
-            char ch = s.charAt(i);
-            switch (ch) {
-                case '<':
-                    str.append("&lt;");
-                    break;
-                case '>':
-                    str.append("&gt;");
-                    break;
-                case '&':
-                    str.append("&amp;");
-                    break;
-                case '"':
-                    str.append("&quot;");
-                    break;
-                case '\r':
-                case '\n':
-                    if (canonical) {
-                        str.append("&#");
-                        str.append(Integer.toString(ch));
-                        str.append(';');
-                        break;
-                    }
-                    // else, default append char
-                //$FALL-THROUGH$
-                default:
-                    str.append(ch);
-            }
-        }
-
-        return str.toString();
-    }
 }

==================================================
ErrorReportValve.java
index 14d01fc890..bbb97f75e5 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -34,7 +34,10 @@ public final class RequestUtil {
      * @param message The message string to be filtered
      *
      * @return the filtered message
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String filter(String message) {
 
         if (message == null) {

==================================================
JspUtil.java
index d967517fb3..c22e5296dc 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -27,12 +27,12 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.TomcatCSS;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * <p>Implementation of a Valve that outputs HTML error pages.</p>
@@ -159,12 +159,12 @@ public class ErrorReportValve extends ValveBase {
             return;
         }
 
-        String message = RequestUtil.filter(response.getMessage());
+        String message = Escape.htmlElementContent(response.getMessage());
         if (message == null) {
             if (throwable != null) {
                 String exceptionMessage = throwable.getMessage();
                 if (exceptionMessage != null && exceptionMessage.length() > 0) {
-                    message = RequestUtil.filter((new Scanner(exceptionMessage)).nextLine());
+                    message = Escape.htmlElementContent((new Scanner(exceptionMessage)).nextLine());
                 }
             }
             if (message == null) {
@@ -237,7 +237,7 @@ public class ErrorReportValve extends ValveBase {
                 sb.append("<p><b>");
                 sb.append(smClient.getString("errorReportValve.exception"));
                 sb.append("</b></p><pre>");
-                sb.append(RequestUtil.filter(stackTrace));
+                sb.append(Escape.htmlElementContent(stackTrace));
                 sb.append("</pre>");
 
                 int loops = 0;
@@ -247,7 +247,7 @@ public class ErrorReportValve extends ValveBase {
                     sb.append("<p><b>");
                     sb.append(smClient.getString("errorReportValve.rootCause"));
                     sb.append("</b></p><pre>");
-                    sb.append(RequestUtil.filter(stackTrace));
+                    sb.append(Escape.htmlElementContent(stackTrace));
                     sb.append("</pre>");
                     // In case root cause is somehow heavily nested
                     rootCause = rootCause.getCause();

==================================================
PageDataImpl.java
index 2d8bfe31ed..ddab02e228 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -28,6 +28,7 @@ import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.tomcat.Jar;
+import org.apache.tomcat.util.security.Escape;
 import org.xml.sax.Attributes;
 import org.xml.sax.InputSource;
 
@@ -81,7 +82,7 @@ public class JspUtil {
             returnString = expression;
         }
 
-        return escapeXml(returnString);
+        return Escape.xml(returnString);
     }
 
     /**
@@ -218,7 +219,9 @@ public class JspUtil {
      * Escape the 5 entities defined by XML.
      * @param s String to escape
      * @return XML escaped string
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String escapeXml(String s) {
         if (s == null) {
             return null;

==================================================
Validator.java
index b6183b6bb0..50b5dd75a2 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -24,6 +24,7 @@ import java.nio.charset.StandardCharsets;
 import javax.servlet.jsp.tagext.PageData;
 
 import org.apache.jasper.JasperException;
+import org.apache.tomcat.util.security.Escape;
 import org.xml.sax.Attributes;
 import org.xml.sax.helpers.AttributesImpl;
 
@@ -330,7 +331,7 @@ class PageDataImpl extends PageData implements TagConstants {
                 buf.append(jspId++).append("\">");
             }
             buf.append("${");
-            buf.append(JspUtil.escapeXml(n.getText()));
+            buf.append(Escape.xml(n.getText()));
             buf.append("}");
             if (!n.getRoot().isXmlSyntax()) {
                 buf.append(JSP_TEXT_ACTION_END);

==================================================
SecurityUtil.java
index dbe29557c2..62b9babb34 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -42,6 +42,7 @@ import javax.servlet.jsp.tagext.ValidationMessage;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.ELNode.Text;
 import org.apache.jasper.el.ELContextImpl;
+import org.apache.tomcat.util.security.Escape;
 import org.xml.sax.Attributes;
 
 /**
@@ -1405,7 +1406,7 @@ class Validator {
                             el.visit(v);
                             value = v.getText();
                         } else {
-                            value = xmlEscape(value);
+                            value = Escape.xml(value);
                         }
                     }
 
@@ -1454,7 +1455,7 @@ class Validator {
             @Override
             public void visit(Text n) throws JasperException {
                 output.append(ELParser.escapeLiteralExpression(
-                        xmlEscape(n.getText()),
+                        Escape.xml(n.getText()),
                         isDeferredSyntaxAllowedAsLiteral));
             }
         }
@@ -1915,67 +1916,4 @@ class Validator {
             errDisp.jspError(errMsg.toString());
         }
     }
-
-    protected static String xmlEscape(String s) {
-        if (s == null) {
-            return null;
-        }
-        int len = s.length();
-
-        /*
-         * Look for any "bad" characters, Escape "bad" character was found
-         */
-        // ASCII " 34 & 38 ' 39 < 60 > 62
-        for (int i = 0; i < len; i++) {
-            char c = s.charAt(i);
-            if (c >= '\"' && c <= '>' &&
-                    (c == '<' || c == '>' || c == '\'' || c == '&' || c == '"')) {
-                // need to escape them and then quote the whole string
-                StringBuilder sb = new StringBuilder((int) (len * 1.2));
-                sb.append(s, 0, i);
-                int pos = i + 1;
-                for (int j = i; j < len; j++) {
-                    c = s.charAt(j);
-                    if (c >= '\"' && c <= '>') {
-                        if (c == '<') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&lt;");
-                            pos = j + 1;
-                        } else if (c == '>') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&gt;");
-                            pos = j + 1;
-                        } else if (c == '\'') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&#039;"); // &apos;
-                            pos = j + 1;
-                        } else if (c == '&') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&amp;");
-                            pos = j + 1;
-                        } else if (c == '"') {
-                            if (j > pos) {
-                                sb.append(s, pos, j);
-                            }
-                            sb.append("&#034;"); // &quot;
-                            pos = j + 1;
-                        }
-                    }
-                }
-                if (pos < len) {
-                    sb.append(s, pos, len);
-                }
-                return sb.toString();
-            }
-        }
-        return s;
-    }
 }

==================================================
JspServlet.java
index 01416830a1..724860e736 100644
--- a/java/org/apache/jasper/security/SecurityUtil.java
+++ b/java/org/apache/jasper/security/SecurityUtil.java
@@ -47,7 +47,10 @@ public final class SecurityUtil{
      *
      * @param message The message string to be filtered
      * @return the HTML filtered message
+     *
+     * @deprecated This method will be removed in Tomcat 9
      */
+    @Deprecated
     public static String filter(String message) {
 
         if (message == null)
@@ -77,5 +80,4 @@ public final class SecurityUtil{
         return result.toString();
 
     }
-
 }

==================================================
WebXml.java
index 772c69c8fc..a37dbac99d 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -43,6 +43,7 @@ import org.apache.jasper.security.SecurityUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.PeriodicEventListener;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * The JSP engine (a.k.a Jasper).
@@ -404,7 +405,7 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
                 Localizer.getMessage("jsp.error.file.not.found",jspUri);
             // Strictly, filtering this is an application
             // responsibility but just in case...
-            throw new ServletException(SecurityUtil.filter(msg));
+            throw new ServletException(Escape.htmlElementContent(msg));
         } else {
             try {
                 response.sendError(HttpServletResponse.SC_NOT_FOUND,

==================================================
Escape.java
index de16817459..636883cc4b 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -46,6 +46,7 @@ import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.descriptor.XmlIdentifiers;
 import org.apache.tomcat.util.digester.DocumentProperties;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.Escape;
 
 /**
  * Representation of common elements of web.xml and web-fragment.xml. Provides
@@ -1386,7 +1387,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
             sb.append('<');
             sb.append(elementName);
             sb.append('>');
-            sb.append(escapeXml(value));
+            sb.append(Escape.xml(value));
             sb.append("</");
             sb.append(elementName);
             sb.append(">\n");
@@ -1400,33 +1401,6 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     }
 
 
-    /**
-     * Escape the 5 entities defined by XML.
-     */
-    private static String escapeXml(String s) {
-        if (s == null)
-            return null;
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < s.length(); i++) {
-            char c = s.charAt(i);
-            if (c == '<') {
-                sb.append("&lt;");
-            } else if (c == '>') {
-                sb.append("&gt;");
-            } else if (c == '\'') {
-                sb.append("&apos;");
-            } else if (c == '&') {
-                sb.append("&amp;");
-            } else if (c == '"') {
-                sb.append("&quot;");
-            } else {
-                sb.append(c);
-            }
-        }
-        return sb.toString();
-    }
-
-
     /**
      * Merge the supplied web fragments into this main web.xml.
      *

==================================================
TesterValidator.java
new file mode 100644
index 0000000000..b8ae5bc925
--- /dev/null
+++ b/java/org/apache/tomcat/util/security/Escape.java
@@ -0,0 +1,160 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.security;
+
+/**
+ * Provides utility methods to escape content for different contexts. It is
+ * critical that the escaping used is correct for the context in which the data
+ * is to be used.
+ */
+public class Escape {
+
+    /**
+     * Escape content for use in HTML. This escaping is suitable for the
+     * following uses:
+     * <ul>
+     * <li>Element content when the escaped data will be placed directly inside
+     *     tags such as &lt;p&gt;, &lt;td&gt; etc.</li>
+     * <li>Attribute values when the attribute value is quoted with &quot; or
+     *     &#x27;.</li>
+     * </ul>
+     *
+     * @param content   The content to escape
+     *
+     * @return  The escaped content or {@code null} if the content was
+     *          {@code null}
+     */
+    public static String htmlElementContent(String content) {
+        if (content == null) {
+            return null;
+        }
+
+        StringBuilder sb = new StringBuilder();
+
+        for (int i = 0; i < content.length(); i++) {
+            char c = content.charAt(i);
+            if (c == '<') {
+                sb.append("&lt;");
+            } else if (c == '>') {
+                sb.append("&gt;");
+            } else if (c == '\'') {
+                sb.append("&#x27;");
+            } else if (c == '&') {
+                sb.append("&amp;");
+            } else if (c == '"') {
+                sb.append("&quot;");
+            } else if (c == '/') {
+                sb.append("&#x2F;");
+            } else {
+                sb.append(c);
+            }
+        }
+
+        return sb.toString();
+    }
+
+
+    /**
+     * Convert the object to a string via {@link Object#toString()} and HTML
+     * escape the resulting string for use in HTMl content.
+     *
+     * @param obj       The object to convert to String and then escape
+     *
+     * @return The escaped content or <code>&quot;?&quot;</code> if obj is
+     *         {@code null}
+     */
+    public static String htmlElementContext(Object obj) {
+        if (obj == null) {
+            return "?";
+        }
+
+        try {
+            return xml(obj.toString());
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+
+    /**
+     * Escape content for use in XML.
+     *
+     * @param content   The content to escape
+     *
+     * @return  The escaped content or {@code null} if the content was
+     *          {@code null}
+     */
+    public static String xml(String content) {
+        return xml(null, content);
+    }
+
+
+    /**
+     * Escape content for use in XML.
+     *
+     * @param ifNull    The value to return if content is {@code null}
+     * @param content   The content to escape
+     *
+     * @return  The escaped content or the value of ifNull if the content was
+     *          {@code null}
+     */
+    public static String xml(String ifNull, String content) {
+        return xml(ifNull, false, content);
+    }
+
+
+    /**
+     * Escape content for use in XML.
+     *
+     * @param ifNull        The value to return if content is {@code null}
+     * @param escapeCRLF    Should CR and LF also be escaped?
+     * @param content       The content to escape
+     *
+     * @return  The escaped content or the value of ifNull if the content was
+     *          {@code null}
+     */
+    public static String xml(String ifNull, boolean escapeCRLF, String content) {
+        if (content == null) {
+            return ifNull;
+        }
+
+        StringBuilder sb = new StringBuilder();
+
+        for (int i = 0; i < content.length(); i++) {
+            char c = content.charAt(i);
+            if (c == '<') {
+                sb.append("&lt;");
+            } else if (c == '>') {
+                sb.append("&gt;");
+            } else if (c == '\'') {
+                sb.append("&apos;");
+            } else if (c == '&') {
+                sb.append("&amp;");
+            } else if (c == '"') {
+                sb.append("&quot;");
+            } else if (escapeCRLF && c == '\r') {
+                sb.append("&#13;");
+            } else if (escapeCRLF && c == '\n') {
+                sb.append("&#10;");
+            } else {
+                sb.append(c);
+            }
+        }
+
+        return sb.toString();
+    }
+}

==================================================
