a71894243eb109d692d392ef6074ebd737070187
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Tue Jul 16 14:32:13 2013 +0000
==================================================
Stream.java
EL 3.0 collections operations.
Implement anyMatch, allMatch noneMatch and findFirst.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503734 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCollectionOperations.java
index 129fa5c3d4..324f00c399 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -349,6 +349,60 @@ public class Stream {
     }
 
 
+    public Optional anyMatch(LambdaExpression le) {
+        if (!iterator.hasNext()) {
+            return Optional.EMPTY;
+        }
+
+        Boolean match = Boolean.FALSE;
+
+        while (!match.booleanValue() && iterator.hasNext()) {
+            match = (Boolean) le.invoke(iterator.next());
+        }
+
+        return new Optional(match);
+    }
+
+
+    public Optional allMatch(LambdaExpression le) {
+        if (!iterator.hasNext()) {
+            return Optional.EMPTY;
+        }
+
+        Boolean match = Boolean.TRUE;
+
+        while (match.booleanValue() && iterator.hasNext()) {
+            match = (Boolean) le.invoke(iterator.next());
+        }
+
+        return new Optional(match);
+    }
+
+
+    public Optional noneMatch(LambdaExpression le) {
+        if (!iterator.hasNext()) {
+            return Optional.EMPTY;
+        }
+
+        Boolean match = Boolean.FALSE;
+
+        while (!match.booleanValue() && iterator.hasNext()) {
+            match = (Boolean) le.invoke(iterator.next());
+        }
+
+        return new Optional(new Boolean(!match.booleanValue()));
+    }
+
+
+    public Optional findFirst() {
+        if (iterator.hasNext()) {
+            return new Optional(iterator.next());
+        } else {
+            return Optional.EMPTY;
+        }
+    }
+
+
     @SuppressWarnings({ "rawtypes", "unchecked" })
     private Optional compare(boolean isMax) {
         Comparable result = null;

==================================================
