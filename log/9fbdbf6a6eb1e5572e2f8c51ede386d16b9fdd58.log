9fbdbf6a6eb1e5572e2f8c51ede386d16b9fdd58
==================================================
Generics for o.a.c.tribes.transport
==================================================
Mark Emlyn
==================================================
Wed Dec 24 16:03:53 2008 +0000
==================================================
PooledSender.java
Generics for o.a.c.tribes.transport
Fix various Eclipse warnings (unused code etc)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729325 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ReceiverBase.java
index 26afc7715f..01dd3bd184 100644
--- a/java/org/apache/catalina/tribes/transport/PooledSender.java
+++ b/java/org/apache/catalina/tribes/transport/PooledSender.java
@@ -101,17 +101,17 @@ public abstract class PooledSender extends AbstractSender implements MultiPointS
 
         PooledSender parent = null;
 
-        private List notinuse = null;
+        private List<DataSender> notinuse = null;
 
-        private List inuse = null;
+        private List<DataSender> inuse = null;
 
         private boolean isOpen = true;
 
         public SenderQueue(PooledSender parent, int limit) {
             this.limit = limit;
             this.parent = parent;
-            notinuse = new java.util.LinkedList();
-            inuse = new java.util.LinkedList();
+            notinuse = new java.util.LinkedList<DataSender>();
+            inuse = new java.util.LinkedList<DataSender>();
         }
 
         /**
@@ -158,7 +158,7 @@ public abstract class PooledSender extends AbstractSender implements MultiPointS
                 if (notinuse.size() == 0 && inuse.size() < limit) {
                     sender = parent.getNewDataSender();
                 } else if (notinuse.size() > 0) {
-                    sender = (DataSender) notinuse.remove(0);
+                    sender = notinuse.remove(0);
                 }
                 if (sender != null) {
                     inuse.add(sender);

==================================================
ReplicationTransmitter.java
index bf24f8e25d..da1c32f113 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -227,7 +227,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
                     throw x;
                 }
                 portstart++;
-                try {Thread.sleep(25);}catch( InterruptedException ti){Thread.currentThread().interrupted();}
+                try {Thread.sleep(25);}catch( InterruptedException ti){Thread.interrupted();}
                 retries = bind(socket,portstart,retries);
             }
         }
@@ -258,7 +258,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
                     throw x;
                 }
                 portstart++;
-                try {Thread.sleep(25);}catch( InterruptedException ti){Thread.currentThread().interrupted();}
+                try {Thread.sleep(25);}catch( InterruptedException ti){Thread.interrupted();}
                 retries = bindUdp(socket,portstart,retries);
             }
         }
@@ -444,7 +444,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
     }
 
     public void setLog(Log log) {
-        this.log = log;
+        ReceiverBase.log = log;
     }
 
     public void setPool(RxTaskPool pool) {

==================================================
RxTaskPool.java
index cb3e8543a2..b0acc51e39 100644
--- a/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
+++ b/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
@@ -33,7 +33,6 @@ import org.apache.catalina.tribes.transport.nio.PooledParallelSender;
  * @version $Revision$ $Date$
  */
 public class ReplicationTransmitter implements ChannelSender {
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicationTransmitter.class);
 
     /**
      * The descriptive information about this implementation.

==================================================
SenderState.java
index cf56d00a58..d3639cfcc7 100644
--- a/java/org/apache/catalina/tribes/transport/RxTaskPool.java
+++ b/java/org/apache/catalina/tribes/transport/RxTaskPool.java
@@ -19,7 +19,6 @@ package org.apache.catalina.tribes.transport;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.concurrent.ThreadFactory;
 
 /**
  * @author not attributable
@@ -34,22 +33,17 @@ public class RxTaskPool
      * through a FIFO idle queue.
      */
 
-    List idle = new LinkedList();
-    List used = new LinkedList();
+    List<AbstractRxTask> idle = new LinkedList<AbstractRxTask>();
+    List<AbstractRxTask> used = new LinkedList<AbstractRxTask>();
     
     Object mutex = new Object();
     boolean running = true;
     
-    private static int counter = 1;
     private int maxTasks;
     private int minTasks;
     
     private TaskCreator creator = null;
 
-    private static synchronized int inc() {
-        return counter++;
-    }
-
     
     public RxTaskPool (int maxTasks, int minTasks, TaskCreator creator) throws Exception {
         // fill up the pool with worker threads
@@ -78,7 +72,7 @@ public class RxTaskPool
             while ( worker == null && running ) {
                 if (idle.size() > 0) {
                     try {
-                        worker = (AbstractRxTask) idle.remove(0);
+                        worker = idle.remove(0);
                     } catch (java.util.NoSuchElementException x) {
                         //this means that there are no available workers
                         worker = null;
@@ -87,7 +81,7 @@ public class RxTaskPool
                     worker = creator.createRxTask();
                     configureTask(worker);
                 } else {
-                    try { mutex.wait(); } catch ( java.lang.InterruptedException x ) {Thread.currentThread().interrupted();}
+                    try { mutex.wait(); } catch ( java.lang.InterruptedException x ) {Thread.interrupted();}
                 }
             }//while
             if ( worker != null ) used.add(worker);
@@ -132,9 +126,9 @@ public class RxTaskPool
     public void stop() {
         running = false;
         synchronized (mutex) {
-            Iterator i = idle.iterator();
+            Iterator<AbstractRxTask> i = idle.iterator();
             while ( i.hasNext() ) {
-                AbstractRxTask worker = (AbstractRxTask)i.next();
+                AbstractRxTask worker = i.next();
                 returnWorker(worker);
                 i.remove();
             }

==================================================
