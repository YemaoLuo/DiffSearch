e3b6ed21b015382d6432c26a685e67af406f2036
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Mon Jul 15 20:51:27 2013 +0000
==================================================
Stream.java
EL 3.0 collections operations.
Implement substream and toArray.
Refactor limit to reuse code from substream.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503469 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCollectionOperations.java
index 55437e2b34..20138126c9 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -210,15 +210,29 @@ public class Stream {
 
 
     public Stream limit(final Number count) {
+        return substream(Integer.valueOf(0), count);
+    }
+
+
+    public Stream substream(final Number start) {
+        return substream(start, Integer.valueOf(Integer.MAX_VALUE));
+    }
+
+        public Stream substream(final Number start, final Number end) {
 
         Iterator<Object> downStream = new OpIterator() {
 
-            private final int limit = count.intValue();
+            private final int startPos = start.intValue();
+            private final int endPos = end.intValue();
             private int itemCount = 0;
 
             @Override
             protected void findNext() {
-                if (iterator.hasNext() && itemCount < limit) {
+                while (itemCount < startPos && iterator.hasNext()) {
+                    iterator.next();
+                    itemCount++;
+                }
+                if (iterator.hasNext() && itemCount < endPos) {
                     itemCount ++;
                     next = iterator.next();
                     foundNext = true;
@@ -238,6 +252,15 @@ public class Stream {
     }
 
 
+    public Object[] toArray() {
+        List<Object> result = new ArrayList<>();
+        while (iterator.hasNext()) {
+            result.add(iterator.next());
+        }
+        return result.toArray(new Object[result.size()]);
+    }
+
+
     private static class LambdaExpressionComparator
             implements Comparator<Object>{
 

==================================================
