cd5968e84c996b8eb998515a2eb4137b9ac65709
==================================================
web.xml and fragments overwrite annotation parameters (s. Servlet API Sepc Nov 2009 Section 8.2.3.3 pages 80-84)
==================================================
Peter Rossbach
==================================================
Wed Apr 28 22:16:49 2010 +0000
==================================================
ContextConfig.java
web.xml and fragments overwrite annotation parameters (s. Servlet API Sepc Nov 2009 Section 8.2.3.3 pages 80-84)
not yet complete -- filter support is missing!

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@939114 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DuplicateMappingParamServlet.java
index 16574e3122..6d69385285 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1890,17 +1890,31 @@ public class ContextConfig
 
     protected void processAnnotationWebServlet(String className,
             AnnotationEntry ae, WebXml fragment) {
-        if (fragment.getServlets().containsKey(className)) {
-            // Skip this annotation. Entry in web.xml takes priority
-            return;
+        String servletName = null;
+        // must search for name s. Spec Servlet API 3.0 - 8.2.3.3.n.ii page 81
+        ElementValuePair[] evps = ae.getElementValuePairs();
+        for (ElementValuePair evp : evps) {
+            String name = evp.getNameString();
+            if ("name".equals(name)) {
+                servletName = evp.getValue().stringifyValue();
+                break;
+            }
+        }
+        if(servletName == null) {
+        	// classname is default servletName as annotation has no name!
+            servletName = className;
+        }
+        ServletDef servletDef = fragment.getServlets().get(servletName);
+        boolean isWebXMLservletDef = servletDef != null;
+        if(!isWebXMLservletDef) {
+            servletDef = new ServletDef();
+            servletDef.setServletName(servletName);
+            servletDef.setServletClass(className);
         }
         boolean urlPatternsSet = false;
-        ServletDef servletDef = new ServletDef();
-        servletDef.setServletName(className);
-        servletDef.setServletClass(className);
         String[] urlPatterns = null;
 
-        ElementValuePair[] evps = ae.getElementValuePairs();
+        //ElementValuePair[] evps = ae.getElementValuePairs();
         for (ElementValuePair evp : evps) {
             String name = evp.getNameString();
             if ("value".equals(name) || "urlPatterns".equals(name)) {
@@ -1910,38 +1924,64 @@ public class ContextConfig
                 }
                 urlPatternsSet = true;
                 urlPatterns = processAnnotationsStringArray(evp.getValue());
-            } else if ("name".equals(name)) {
-                servletDef.setServletName(evp.getValue().stringifyValue());
             } else if ("description".equals(name)) {
-                servletDef.setDescription(evp.getValue().stringifyValue());
+            	if(servletDef.getDescription() == null) {
+            		servletDef.setDescription(evp.getValue().stringifyValue());
+            	}
             } else if ("displayName".equals(name)) {
-                servletDef.setDisplayName(evp.getValue().stringifyValue());
+            	if(servletDef.getDisplayName() == null) {
+            		servletDef.setDisplayName(evp.getValue().stringifyValue());
+            	}
             } else if ("largeIcon".equals(name)) {
-                servletDef.setLargeIcon(evp.getValue().stringifyValue());
+            	if(servletDef.getLargeIcon() == null) {
+            		servletDef.setLargeIcon(evp.getValue().stringifyValue());
+            	}
             } else if ("smallIcon".equals(name)) {
-                servletDef.setSmallIcon(evp.getValue().stringifyValue());
+            	if(servletDef.getSmallIcon() == null) {
+            		servletDef.setSmallIcon(evp.getValue().stringifyValue());
+            	}
             } else if ("asyncSupported".equals(name)) {
-                servletDef.setAsyncSupported(evp.getValue().stringifyValue());
-            } else if ("loadOnStartup".equals(name)) {
-                servletDef.setLoadOnStartup(evp.getValue().stringifyValue());
+            	if(servletDef.getAsyncSupported() == null) {
+            		servletDef.setAsyncSupported(evp.getValue().stringifyValue());
+            	}
+           } else if ("loadOnStartup".equals(name)) {
+            	if(servletDef.getLoadOnStartup() == null) {
+            		servletDef.setLoadOnStartup(evp.getValue().stringifyValue());
+            	}
             } else if ("initParams".equals(name)) {
                 Map<String,String> initParams =
                     processAnnotationWebInitParams(evp.getValue());
-                for (Map.Entry<String, String> entry : initParams.entrySet()) {
-                    servletDef.addInitParameter(entry.getKey(),
-                            entry.getValue());
+                if(isWebXMLservletDef) {
+	                Map<String,String> webXMLInitParams = servletDef.getParameterMap();
+	                for (Map.Entry<String, String> entry : initParams.entrySet()) {
+	                	if (webXMLInitParams.get(entry.getKey()) == null) {
+	                		servletDef.addInitParameter(entry.getKey(),
+	                            entry.getValue());
+	                	}
+	                }
+                } 
+                else {
+					for (Map.Entry<String, String> entry : initParams
+					        .entrySet()) {
+						servletDef.addInitParameter(entry.getKey(), entry
+						        .getValue());
+	                }
                 }
             } else {
                 // Ignore
             }
         }
-        if (urlPatterns != null) {
-            fragment.addServlet(servletDef);
-            for (String urlPattern : urlPatterns) {
-                fragment.addServletMapping(urlPattern,
-                        servletDef.getServletName());
-            }
-        }
+       	if(!isWebXMLservletDef && urlPatterns != null) {
+        	fragment.addServlet(servletDef);
+       	}
+       	if(urlPatternsSet) {
+       		if (!fragment.getServletMappings().containsValue(servletName)) {
+       			for (String urlPattern : urlPatterns) {
+       				fragment.addServletMapping(urlPattern, servletName);
+       			}
+       		}
+       	}
+
     }
 
     protected void processAnnotationWebFilter(String className,

==================================================
NoMappingParamServlet.java
new file mode 100644
index 0000000000..6ed1d33c12
--- /dev/null
+++ b/test/org/apache/catalina/startup/DuplicateMappingParamServlet.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.startup;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebInitParam;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+*
+* @author Peter Rossbach
+* @version $Revision$ $Date$
+*/
+@WebServlet(value = "/annotation/overwrite", urlPatterns = {"/param2"}, name= "param", initParams = {
+        @WebInitParam(name = "foo", value = "Hello"),
+        @WebInitParam(name = "bar", value = "World!") })
+public class DuplicateMappingParamServlet extends HttpServlet {
+
+	public void doGet(HttpServletRequest req, HttpServletResponse res)
+	    throws IOException, ServletException
+	  {
+	    PrintWriter out = res.getWriter();
+	    out.print("<p>" + getInitParameter("foo") + " " + getInitParameter("bar") + "</p>");
+	  }
+}

==================================================
ParamServlet.java
new file mode 100644
index 0000000000..19a4d22b23
--- /dev/null
+++ b/test/org/apache/catalina/startup/NoMappingParamServlet.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.startup;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebInitParam;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+*
+* @author Peter Rossbach
+* @version $Revision$ $Date$
+*/
+@WebServlet(name= "param1", initParams = {
+        @WebInitParam(name = "foo", value = "Hello"),
+        @WebInitParam(name = "bar", value = "World!") })
+public class NoMappingParamServlet extends HttpServlet {
+
+	public void doGet(HttpServletRequest req, HttpServletResponse res)
+	    throws IOException, ServletException
+	  {
+	    PrintWriter out = res.getWriter();
+	    out.print("<p>" + getInitParameter("foo") + " " + getInitParameter("bar") + "</p>");
+	  }
+}

==================================================
TestContextConfigAnnotation.java
new file mode 100644
index 0000000000..b9f168c79d
--- /dev/null
+++ b/test/org/apache/catalina/startup/ParamServlet.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.startup;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebInitParam;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ *
+ * @author Peter Rossbach
+ * @version $Revision$ $Date$
+ */
+@WebServlet(value = "/annotation/overwrite", name= "param", initParams = {
+        @WebInitParam(name = "foo", value = "Hello"),
+        @WebInitParam(name = "bar", value = "World!") },
+        displayName="param", description="param", 
+        largeIcon="paramLarge.png",smallIcon="paramSmall.png",
+        loadOnStartup= 0, asyncSupported= false)
+public class ParamServlet extends HttpServlet {
+
+	public void doGet(HttpServletRequest req, HttpServletResponse res)
+	    throws IOException, ServletException
+	  {
+	    PrintWriter out = res.getWriter();
+	    out.print("<p>" + getInitParameter("foo") + " " + getInitParameter("bar") + "</p>");
+	  }
+}

==================================================
