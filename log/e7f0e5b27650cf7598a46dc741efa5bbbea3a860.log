e7f0e5b27650cf7598a46dc741efa5bbbea3a860
==================================================
Add support for header padding to the tests.
==================================================
Mark Thomas
==================================================
Tue Jun 23 19:19:56 2015 +0000
==================================================
Http2Parser.java
Add support for header padding to the tests.
Add a simple test for a header frame with padding.
Fix a bug in the parser when parsing header frames with padding.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687117 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2TestBase.java
index bf68fe7064..3f3727cc9f 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -225,6 +225,7 @@ class Http2Parser {
             }
 
             payloadSize -= optionalLen;
+            payloadSize -= padLength;
         }
 
         boolean endOfHeaders = Flags.isEndOfHeaders(flags);

==================================================
TestHttp2Section_4_1.java
index 6490789122..4184713c2a 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -109,10 +109,15 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
     protected void sendSimpleGetRequest(int streamId) throws IOException {
+        sendSimpleGetRequest(streamId, null);
+    }
+
+
+    protected void sendSimpleGetRequest(int streamId, byte[] padding) throws IOException {
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
 
-        buildSimpleGetRequest(frameHeader, headersPayload, streamId);
+        buildSimpleGetRequest(frameHeader, headersPayload, padding, streamId);
         writeFrame(frameHeader, headersPayload);
     }
 
@@ -126,24 +131,30 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void buildSimpleGetRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
-        buildGetRequest(frameHeader, headersPayload, streamId, "/simple");
+    protected void buildSimpleGetRequest(byte[] frameHeader, ByteBuffer headersPayload,
+            byte[] padding, int streamId) {
+        buildGetRequest(frameHeader, headersPayload, padding, streamId, "/simple");
     }
 
 
     protected void buildLargeGetRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId) {
-        buildGetRequest(frameHeader, headersPayload, streamId, "/large");
+        buildGetRequest(frameHeader, headersPayload, null, streamId, "/large");
     }
 
 
-    protected void buildGetRequest(byte[] frameHeader, ByteBuffer headersPayload, int streamId,
-            String url) {
+    protected void buildGetRequest(byte[] frameHeader, ByteBuffer headersPayload, byte[] padding,
+            int streamId, String url) {
+        if (padding != null) {
+            headersPayload.put((byte) (0xFF & padding.length));
+        }
         MimeHeaders headers = new MimeHeaders();
         headers.addValue(":method").setString("GET");
         headers.addValue(":path").setString(url);
         headers.addValue(":authority").setString("localhost:" + getPort());
         hpackEncoder.encode(headers, headersPayload);
-
+        if (padding != null) {
+            headersPayload.put(padding);
+        }
         headersPayload.flip();
 
         ByteUtil.setThreeBytes(frameHeader, 0, headersPayload.limit());
@@ -151,6 +162,9 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         frameHeader[3] = 0x01;
         // Flags. end of headers (0x04). end of stream (0x01)
         frameHeader[4] = 0x05;
+        if (padding != null) {
+            frameHeader[4] += 0x08;
+        }
         // Stream id
         ByteUtil.set31Bits(frameHeader, 5, streamId);
     }

==================================================
TestHttp2Section_4_3.java
index 9c8dd4c5dd..73a31d57a4 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_1.java
@@ -58,7 +58,7 @@ public class TestHttp2Section_4_1 extends Http2TestBase {
         // Build the simple request
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleGetRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, null, 3);
 
         // Tweak the header to set the reserved bit
         frameHeader[5] = (byte) (frameHeader[5] | 0x80);

==================================================
TestHttp2Section_5_1.java
index f0a3901d0b..c581bb082e 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
@@ -38,7 +38,7 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
         // Build the simple request
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleGetRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, null, 3);
 
         // Try and corrupt the headerPayload
         headersPayload.put(0, (byte) (headersPayload.get(0) + 128));

==================================================
TestHttp2Section_6_2.java
index dbb9529a62..6c0d7cc842 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java
@@ -87,7 +87,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         // Build the simple request
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleGetRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, null, 3);
 
         // Remove the end of stream and end of headers flags
         frameHeader[4] = 0;
@@ -155,7 +155,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         // Build the simple request on an old stream
         byte[] frameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
-        buildSimpleGetRequest(frameHeader, headersPayload, 3);
+        buildSimpleGetRequest(frameHeader, headersPayload, null, 3);
 
         os.write(frameHeader);
         os.flush();

==================================================
