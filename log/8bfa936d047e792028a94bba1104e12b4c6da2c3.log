8bfa936d047e792028a94bba1104e12b4c6da2c3
==================================================
rename OPEN to OPEN_READ since we have two different types of operations
==================================================
Filip Hanik
==================================================
Wed Jul 4 01:59:47 2012 +0000
==================================================
CoyoteAdapter.java
rename OPEN to OPEN_READ since we have two different types of operations



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1357040 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index 9c17032c8d..dd25633778 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -155,7 +155,7 @@ public class CoyoteAdapter implements Adapter {
         boolean error = false;
         boolean read = false;
         try {
-            if (status == SocketStatus.OPEN) {
+            if (status == SocketStatus.OPEN_READ) {
                 if (response.isClosed()) {
                     // The event has been closed asynchronously, so call end instead of
                     // read to cleanup the pipeline
@@ -219,7 +219,7 @@ public class CoyoteAdapter implements Adapter {
                 connector.getService().getContainer().getPipeline().getFirst().event(request, response, request.getEvent());
             }
             if (response.isClosed() || !request.isComet()) {
-                if (status==SocketStatus.OPEN &&
+                if (status==SocketStatus.OPEN_READ &&
                         request.getEvent().getEventType() != EventType.END) {
                     //CometEvent.close was called during an event other than END
                     request.getEvent().setEventType(CometEvent.EventType.END);
@@ -302,7 +302,7 @@ public class CoyoteAdapter implements Adapter {
                 if (result.get()) {
                     if (status==SocketStatus.OPEN_WRITE) {
                         //TODO Notify write listener
-                    } else if (status==SocketStatus.OPEN) {
+                    } else if (status==SocketStatus.OPEN_READ) {
                         //TODO Notify read listener
                         asyncConImpl.canRead();
                     }
@@ -324,7 +324,7 @@ public class CoyoteAdapter implements Adapter {
                 if (!response.isClosed() && !response.isError()) {
                     if (request.getAvailable() || (request.getContentLength() > 0 && (!request.isParametersParsed()))) {
                         // Invoke a read event right away if there are available bytes
-                        if (event(req, res, SocketStatus.OPEN)) {
+                        if (event(req, res, SocketStatus.OPEN_READ)) {
                             comet = true;
                             res.action(ActionCode.COMET_BEGIN, null);
                         }
@@ -427,7 +427,7 @@ public class CoyoteAdapter implements Adapter {
                     if (!response.isClosed() && !response.isError()) {
                         if (request.getAvailable() || (request.getContentLength() > 0 && (!request.isParametersParsed()))) {
                             // Invoke a read event right away if there are available bytes
-                            if (event(req, res, SocketStatus.OPEN)) {
+                            if (event(req, res, SocketStatus.OPEN_READ)) {
                                 comet = true;
                                 res.action(ActionCode.COMET_BEGIN, null);
                             }

==================================================
AjpNioProcessor.java
index 43dd66b2da..b1c212f947 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -261,7 +261,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
             if (asyncStateMachine.asyncComplete()) {
                 ((AprEndpoint)endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param == null) return;
@@ -270,7 +270,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((AprEndpoint)endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         }
     }

==================================================
AjpProcessor.java
index 05a2b8c869..ae72ee85c4 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -253,7 +253,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
             if (asyncStateMachine.asyncComplete()) {
                 ((NioEndpoint)endpoint).processSocket(this.socket,
-                        SocketStatus.OPEN, false);
+                        SocketStatus.OPEN_READ, false);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param == null) return;
@@ -265,7 +265,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((NioEndpoint)endpoint).processSocket(this.socket,
-                        SocketStatus.OPEN, true);
+                        SocketStatus.OPEN_READ, true);
             }
         }
     }

==================================================
Http11AprProcessor.java
index ca8016d92e..5addcb19f9 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -271,7 +271,7 @@ public class AjpProcessor extends AbstractAjpProcessor<Socket> {
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
             if (asyncStateMachine.asyncComplete()) {
                 ((JIoEndpoint)endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param == null) return;
@@ -281,7 +281,7 @@ public class AjpProcessor extends AbstractAjpProcessor<Socket> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((JIoEndpoint)endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         }
     }

==================================================
Http11AprProtocol.java
index 22613aa763..1952b8d717 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -455,13 +455,13 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             comet = false;
         } else if (actionCode == ActionCode.COMET_CLOSE) {
             ((AprEndpoint)endpoint).processSocketAsync(this.socket,
-                    SocketStatus.OPEN);
+                    SocketStatus.OPEN_READ);
         } else if (actionCode == ActionCode.COMET_SETTIMEOUT) {
             //no op
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
             if (asyncStateMachine.asyncComplete()) {
                 ((AprEndpoint)endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param==null) {
@@ -472,7 +472,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((AprEndpoint)endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         }
 

==================================================
Http11NioProcessor.java
index c88ef0349e..277210a94a 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -249,7 +249,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                 SocketStatus status) {
             if (proto.npnHandler != null) {
                 Processor<Long> processor = null;
-                if (status == SocketStatus.OPEN) {
+                if (status == SocketStatus.OPEN_READ) {
                     processor = connections.get(socket.getSocket());
 
                 }

==================================================
Http11Processor.java
index 71e2533b1f..e73a245651 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -493,7 +493,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
             if (asyncStateMachine.asyncComplete()) {
                 ((NioEndpoint)endpoint).processSocket(this.socket.getSocket(),
-                        SocketStatus.OPEN, true);
+                        SocketStatus.OPEN_READ, true);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param==null) {
@@ -509,7 +509,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((NioEndpoint)endpoint).processSocket(this.socket.getSocket(),
-                        SocketStatus.OPEN, true);
+                        SocketStatus.OPEN_READ, true);
             }
         } else if (actionCode == ActionCode.ASYNC_DISPATCH_FOR_OPERATION) {
             asyncStateMachine.asyncOperation();

==================================================
AprEndpoint.java
index 1cd5edda68..3c82b576d8 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -353,7 +353,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
             if (asyncStateMachine.asyncComplete()) {
                 ((JIoEndpoint) endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param == null) return;
@@ -363,7 +363,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((JIoEndpoint) endpoint).processSocketAsync(this.socket,
-                        SocketStatus.OPEN);
+                        SocketStatus.OPEN_READ);
             }
         }
     }

==================================================
JIoEndpoint.java
index e3085c9a52..8888a916fa 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -1293,7 +1293,7 @@ public class AprEndpoint extends AbstractEndpoint {
                     // Check for failed sockets and hand this socket off to a worker
                     if (((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP)
                             || ((desc[n*2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)
-                            || (comet && (!processSocket(desc[n*2+1], SocketStatus.OPEN)))
+                            || (comet && (!processSocket(desc[n*2+1], SocketStatus.OPEN_READ)))
                             || (!comet && (!processSocket(desc[n*2+1])))) {
                         // Close socket and clear pool
                         if (comet) {
@@ -1733,7 +1733,7 @@ public class AprEndpoint extends AbstractEndpoint {
                     }
                     // Process the request from this socket
                     Handler.SocketState state = handler.process(socket,
-                            SocketStatus.OPEN);
+                            SocketStatus.OPEN_READ);
                     if (state == Handler.SocketState.CLOSED) {
                         // Close socket and pool
                         destroySocket(socket.getSocket().longValue());
@@ -1774,7 +1774,7 @@ public class AprEndpoint extends AbstractEndpoint {
                 // Process the request from this socket
                 SocketState state = SocketState.OPEN;
                 if (status == null) {
-                    state = handler.process(socket,SocketStatus.OPEN);
+                    state = handler.process(socket,SocketStatus.OPEN_READ);
                 } else {
                     state = handler.process(socket, status);
                 }
@@ -1789,7 +1789,7 @@ public class AprEndpoint extends AbstractEndpoint {
                     }
                 } else if (state == Handler.SocketState.ASYNC_END) {
                     socket.access();
-                    SocketProcessor proc = new SocketProcessor(socket, SocketStatus.OPEN);
+                    SocketProcessor proc = new SocketProcessor(socket, SocketStatus.OPEN_READ);
                     getExecutor().execute(proc);
                 }
             }

==================================================
NioEndpoint.java
index 6f1f1a0a48..08353b4700 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -308,7 +308,7 @@ public class JIoEndpoint extends AbstractEndpoint {
 
                     if ((state != SocketState.CLOSED)) {
                         if (status == null) {
-                            state = handler.process(socket, SocketStatus.OPEN);
+                            state = handler.process(socket, SocketStatus.OPEN_READ);
                         } else {
                             state = handler.process(socket,status);
                         }
@@ -337,7 +337,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                 } finally {
                     if (launch) {
                         try {
-                            getExecutor().execute(new SocketProcessor(socket, SocketStatus.OPEN));
+                            getExecutor().execute(new SocketProcessor(socket, SocketStatus.OPEN_READ));
                         } catch (RejectedExecutionException x) {
                             log.warn("Socket reprocessing request was rejected for:"+socket,x);
                             try {

==================================================
SocketStatus.java
index fd5fb29f6d..3bcb35a763 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1240,7 +1240,7 @@ public class NioEndpoint extends AbstractEndpoint {
                                 //read goes before write
                                 if (sk.isReadable()) {
                                     //read notification
-                                    if (!processSocket(channel, SocketStatus.OPEN, true))
+                                    if (!processSocket(channel, SocketStatus.OPEN_READ, true))
                                         processSocket(channel, SocketStatus.DISCONNECT, true);
                                 } else {
                                     //future placement of a WRITE notif
@@ -1263,7 +1263,7 @@ public class NioEndpoint extends AbstractEndpoint {
                                 //read goes before write
                                 if (sk.isReadable()) {
                                     //read notification
-                                    if (!processSocket(channel, SocketStatus.OPEN, true))
+                                    if (!processSocket(channel, SocketStatus.OPEN_READ, true))
                                         close = true;
                                 } else {
                                     //future placement of a WRITE notif
@@ -1425,7 +1425,7 @@ public class NioEndpoint extends AbstractEndpoint {
                         ka.setCometNotify(false);
                         reg(key,ka,0);//avoid multiple calls, this gets reregistered after invocation
                         //if (!processSocket(ka.getChannel(), SocketStatus.OPEN_CALLBACK)) processSocket(ka.getChannel(), SocketStatus.DISCONNECT);
-                        if (!processSocket(ka.getChannel(), SocketStatus.OPEN, true)) processSocket(ka.getChannel(), SocketStatus.DISCONNECT, true);
+                        if (!processSocket(ka.getChannel(), SocketStatus.OPEN_READ, true)) processSocket(ka.getChannel(), SocketStatus.DISCONNECT, true);
                     } else if ((ka.interestOps()&SelectionKey.OP_READ) == SelectionKey.OP_READ ||
                               (ka.interestOps()&SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE) {
                         //only timeout sockets that we are waiting for a read from
@@ -1661,7 +1661,7 @@ public class NioEndpoint extends AbstractEndpoint {
                         if (status == null) {
                             state = handler.process(
                                     (KeyAttachment) key.attachment(),
-                                    SocketStatus.OPEN);
+                                    SocketStatus.OPEN_READ);
                         } else {
                             state = handler.process(
                                     (KeyAttachment) key.attachment(),
@@ -1722,7 +1722,7 @@ public class NioEndpoint extends AbstractEndpoint {
                 } finally {
                     if (launch) {
                         try {
-                            getExecutor().execute(new SocketProcessor(socket, SocketStatus.OPEN));
+                            getExecutor().execute(new SocketProcessor(socket, SocketStatus.OPEN_READ));
                         } catch (NullPointerException npe) {
                             if (running) {
                                 log.error(sm.getString("endpoint.launch.fail"),

==================================================
