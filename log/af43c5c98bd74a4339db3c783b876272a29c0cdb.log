af43c5c98bd74a4339db3c783b876272a29c0cdb
==================================================
Align ActionCode.DISABLE_SWALLOW_INPUT
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:46:23 2016 +0000
==================================================
ErrorState.java
Align ActionCode.DISABLE_SWALLOW_INPUT

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756091 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index 67cb3ffa87..7781def3a4 100644
--- a/java/org/apache/coyote/ErrorState.java
+++ b/java/org/apache/coyote/ErrorState.java
@@ -27,7 +27,8 @@ public enum ErrorState {
      * The current request/response is in an error state and while it is safe to
      * complete the current response it is not safe to continue to use the
      * existing connection which must be closed once the response has been
-     * completed.
+     * completed. For multiplexed protocols, the channel must be closed when the
+     * current request/response completes but the connection may continue.
      */
     CLOSE_CLEAN(true, 1, true, true),
 

==================================================
Http11Processor.java
index 3e775335c5..b9ad487823 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -413,8 +413,10 @@ public class AjpProcessor extends AbstractProcessor {
             break;
         }
         case DISABLE_SWALLOW_INPUT: {
-            // TODO: Do not swallow request input but
-            // make sure we are closing the connection
+            // Aborted upload or similar.
+            // No point reading the remainder of the request.
+            disableSwallowRequest();
+            // This is an error state. Make sure it is marked as such.
             setErrorState(ErrorState.CLOSE_CLEAN, null);
             break;
         }
@@ -1473,6 +1475,15 @@ public class AjpProcessor extends AbstractProcessor {
     }
     
     
+    private void disableSwallowRequest() {
+        /* NO-OP
+         * With AJP, Tomcat controls when the client sends request body data. At
+         * most there will be a single packet to read and that will be handled
+         * in finishResponse().
+         */
+    }
+    
+    
     /**
      * Read at least the specified amount of bytes, and place them
      * in the input buffer. Note that if any data is available to read then this

==================================================
StreamProcessor.java
index 10ae136711..19ce5fd042 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -706,10 +706,11 @@ public class Http11Processor extends AbstractProcessor {
             break;
         }
         case DISABLE_SWALLOW_INPUT: {
-            // Do not swallow request input and make sure we are closing the
-            // connection
+            // Aborted upload or similar.
+            // No point reading the remainder of the request.
+            disableSwallowRequest();
+            // This is an error state. Make sure it is marked as such.
             setErrorState(ErrorState.CLOSE_CLEAN, null);
-            inputBuffer.setSwallowInput(false);
             break;
         }
 
@@ -1821,6 +1822,11 @@ public class Http11Processor extends AbstractProcessor {
     }
     
     
+    private void disableSwallowRequest() {
+        inputBuffer.setSwallowInput(false);
+    }
+    
+    
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
