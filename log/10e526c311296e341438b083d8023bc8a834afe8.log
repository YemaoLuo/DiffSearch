10e526c311296e341438b083d8023bc8a834afe8
==================================================
Use a regular processSocket to cleanup after an error, so that the connection is removed, etc.
==================================================
Remy Maucherat
==================================================
Wed Mar 12 15:39:13 2014 +0000
==================================================
Http11Nio2Protocol.java
Use a regular processSocket to cleanup after an error, so that the connection is removed, etc.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1576786 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Processor.java
index a5ef7f917a..477a76fa2e 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -240,7 +240,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         @Override
         public Http11Nio2Processor createProcessor() {
             Http11Nio2Processor processor = new Http11Nio2Processor(
-                    proto.getMaxHttpHeaderSize(), (Nio2Endpoint)proto.endpoint,
+                    proto.getMaxHttpHeaderSize(), (Nio2Endpoint) proto.endpoint,
                     proto.getMaxTrailerSize(), proto.getMaxExtensionSize());
             processor.setAdapter(proto.getAdapter());
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
@@ -265,7 +265,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
                 SocketWrapper<Nio2Channel> socket,
                 HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
-            return new Nio2Processor(socket, httpUpgradeProcessor);
+            return new Nio2Processor(proto.endpoint, socket, httpUpgradeProcessor);
         }
 
         @Override

==================================================
Nio2ServletInputStream.java
index 21e797919f..ceece5d02a 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
@@ -20,6 +20,7 @@ import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.SocketWrapper;
 
@@ -31,11 +32,12 @@ public class Nio2Processor extends AbstractProcessor<Nio2Channel> {
 
     private static final int INFINITE_TIMEOUT = -1;
 
-    public Nio2Processor(SocketWrapper<Nio2Channel> wrapper,
+    public Nio2Processor(AbstractEndpoint<Nio2Channel> endpoint,
+            SocketWrapper<Nio2Channel> wrapper,
             HttpUpgradeHandler httpUpgradeProcessor) {
         super(httpUpgradeProcessor,
-                new Nio2ServletInputStream(wrapper),
-                new Nio2ServletOutputStream(wrapper));
+                new Nio2ServletInputStream(endpoint, wrapper),
+                new Nio2ServletOutputStream(endpoint, wrapper));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
     }

==================================================
Nio2ServletOutputStream.java
index 71c030dd10..0edaeb2cec 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
@@ -26,19 +26,23 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
+import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class Nio2ServletInputStream extends AbstractServletInputStream {
 
+    private final AbstractEndpoint<Nio2Channel> endpoint;
     private final SocketWrapper<Nio2Channel> wrapper;
     private final Nio2Channel channel;
     private final CompletionHandler<Integer, SocketWrapper<Nio2Channel>> completionHandler;
     private boolean flipped = false;
     private volatile boolean readPending = false;
 
-    public Nio2ServletInputStream(SocketWrapper<Nio2Channel> wrapper) {
+    public Nio2ServletInputStream(AbstractEndpoint<Nio2Channel> endpoint0, SocketWrapper<Nio2Channel> wrapper) {
+        this.endpoint = endpoint0;
         this.wrapper = wrapper;
         this.channel = wrapper.getSocket();
         this.completionHandler = new CompletionHandler<Integer, SocketWrapper<Nio2Channel>>() {
@@ -76,11 +80,7 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
                     return;
                 }
                 onError(exc);
-                try {
-                    close();
-                } catch (IOException e) {
-                    // Ignore
-                }
+                endpoint.processSocket(attachment, SocketStatus.ERROR, true);
             }
         };
     }

==================================================
