5e8eb5533f551c3dbc3003e4c2f4f0d2958a8eb3
==================================================
Remove the rest of Jasper system property configuration
==================================================
remm remm@apache.org
==================================================
Tue Mar 31 23:28:43 2020 +0200
==================================================
Constants.java
Remove the rest of Jasper system property configuration

The default values and cache behaviors could be worth revisiting.


==================================================
BodyContentImpl.java
index fd7c1feb5c..16e2e96167 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -98,4 +98,13 @@ public class Constants {
      */
     public static final String XML_BLOCK_EXTERNAL_INIT_PARAM =
             "org.apache.jasper.XML_BLOCK_EXTERNAL";
+
+    /**
+     * Name of the ServletContext init-param that determines the JSP
+     * factory pool size. Set the value to a positive integer to enable it.
+     * The default value is <code>8</code> per thread.
+     */
+    public static final String JSP_FACTORY_POOL_SIZE_INIT_PARAM =
+            "org.apache.jasper.runtime.JspFactoryImpl.POOL_SIZE";
+
 }

==================================================
JspFactoryImpl.java
index 75756506dc..2164a83916 100644
--- a/java/org/apache/jasper/runtime/BodyContentImpl.java
+++ b/java/org/apache/jasper/runtime/BodyContentImpl.java
@@ -21,13 +21,10 @@ import java.io.CharArrayReader;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 
 import jakarta.servlet.jsp.JspWriter;
 import jakarta.servlet.jsp.tagext.BodyContent;
 
-import org.apache.jasper.Constants;
 import org.apache.jasper.compiler.Localizer;
 
 /**
@@ -42,40 +39,8 @@ import org.apache.jasper.compiler.Localizer;
  */
 public class BodyContentImpl extends BodyContent {
 
-    private static final boolean LIMIT_BUFFER;
-    private static final int TAG_BUFFER_SIZE;
-
-    static {
-        if (System.getSecurityManager() == null) {
-            LIMIT_BUFFER = Boolean.parseBoolean(System.getProperty(
-                    "org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "false"));
-            TAG_BUFFER_SIZE = Integer.getInteger(
-                    "org.apache.jasper.runtime.BodyContentImpl.BUFFER_SIZE",
-                    Constants.DEFAULT_TAG_BUFFER_SIZE).intValue();
-        } else {
-            LIMIT_BUFFER = AccessController.doPrivileged(
-                    new PrivilegedAction<Boolean>() {
-                        @Override
-                        public Boolean run() {
-                            return Boolean.valueOf(System.getProperty(
-                                    "org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER",
-                                    "false"));
-                        }
-                    }
-            ).booleanValue();
-            TAG_BUFFER_SIZE = AccessController.doPrivileged(
-                    new PrivilegedAction<Integer>() {
-                        @Override
-                        public Integer run() {
-                            return Integer.getInteger(
-                                    "org.apache.jasper.runtime.BodyContentImpl.BUFFER_SIZE",
-                                    Constants.DEFAULT_TAG_BUFFER_SIZE);
-                        }
-                    }
-            ).intValue();
-        }
-    }
-
+    private final boolean limitBuffer;
+    private final int tagBufferSize;
 
     private char[] cb;
     private int nextChar;
@@ -89,10 +54,14 @@ public class BodyContentImpl extends BodyContent {
     /**
      * Constructor.
      * @param enclosingWriter The wrapped writer
+     * @param limitBuffer <code>true</code> to discard large buffers
+     * @param tagBufferSize the buffer sise
      */
-    public BodyContentImpl(JspWriter enclosingWriter) {
+    public BodyContentImpl(JspWriter enclosingWriter, boolean limitBuffer, int tagBufferSize) {
         super(enclosingWriter);
-        cb = new char[TAG_BUFFER_SIZE];
+        this.limitBuffer = limitBuffer;
+        this.tagBufferSize = tagBufferSize;
+        cb = new char[tagBufferSize];
         bufferSize = cb.length;
         nextChar = 0;
         closed = false;
@@ -547,8 +516,8 @@ public class BodyContentImpl extends BodyContent {
             throw new IOException();
         } else {
             nextChar = 0;
-            if (LIMIT_BUFFER && (cb.length > TAG_BUFFER_SIZE)) {
-                cb = new char[TAG_BUFFER_SIZE];
+            if (limitBuffer && (cb.length > tagBufferSize)) {
+                cb = new char[tagBufferSize];
                 bufferSize = cb.length;
             }
         }

==================================================
PageContextImpl.java
index 44a53db764..25d6406aa2 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -38,12 +38,8 @@ import org.apache.jasper.Constants;
  */
 public class JspFactoryImpl extends JspFactory {
 
-    private static final boolean USE_POOL =
-        Boolean.parseBoolean(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.USE_POOL", "true"));
-    private static final int POOL_SIZE =
-        Integer.parseInt(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.POOL_SIZE", "8"));
-
     private final ThreadLocal<PageContextPool> localPool = new ThreadLocal<>();
+    private int poolSize = -1;
 
     @Override
     public PageContext getPageContext(Servlet servlet, ServletRequest request,
@@ -85,15 +81,19 @@ public class JspFactoryImpl extends JspFactory {
         };
     }
 
+    public void setPoolSize(int poolSize) {
+        this.poolSize = poolSize;
+    }
+
     private PageContext internalGetPageContext(Servlet servlet, ServletRequest request,
             ServletResponse response, String errorPageURL, boolean needsSession,
             int bufferSize, boolean autoflush) {
 
         PageContext pc;
-        if (USE_POOL) {
+        if (poolSize > 0) {
             PageContextPool pool = localPool.get();
             if (pool == null) {
-                pool = new PageContextPool();
+                pool = new PageContextPool(poolSize);
                 localPool.set(pool);
             }
             pc = pool.get();
@@ -117,7 +117,7 @@ public class JspFactoryImpl extends JspFactory {
 
     private void internalReleasePageContext(PageContext pc) {
         pc.release();
-        if (USE_POOL && (pc instanceof PageContextImpl)) {
+        if (poolSize > 0 && (pc instanceof PageContextImpl)) {
             localPool.get().put(pc);
         }
     }
@@ -179,12 +179,12 @@ public class JspFactoryImpl extends JspFactory {
 
         private int current = -1;
 
-        public PageContextPool() {
-            this.pool = new PageContext[POOL_SIZE];
+        public PageContextPool(int poolSize) {
+            this.pool = new PageContext[poolSize];
         }
 
         public void put(PageContext o) {
-            if (current < (POOL_SIZE - 1)) {
+            if (current < (pool.length - 1)) {
                 current++;
                 pool[current] = o;
             }

==================================================
JasperInitializer.java
index fcbbae8e34..f5510b248a 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -82,6 +82,10 @@ public class PageContextImpl extends PageContext {
 
     private String errorPageURL;
 
+    private boolean limitBodyContentBuffer;
+
+    private int bodyContentTagBufferSize = Constants.DEFAULT_TAG_BUFFER_SIZE;
+
     // page-scope attributes
     private final transient HashMap<String, Object> attributes;
 
@@ -125,6 +129,12 @@ public class PageContextImpl extends PageContext {
         this.request = request;
         this.response = response;
 
+        limitBodyContentBuffer = Boolean.parseBoolean(config.getInitParameter("limitBodyContentBuffer"));
+        String bodyContentTagBufferSize = config.getInitParameter("bodyContentTagBufferSize");
+        if (bodyContentTagBufferSize != null) {
+            this.bodyContentTagBufferSize = Integer.parseInt(bodyContentTagBufferSize);
+        }
+
         // initialize application context
         this.applicationContext = JspApplicationContextImpl.getInstance(context);
 
@@ -545,7 +555,7 @@ public class PageContextImpl extends PageContext {
         depth++;
         if (depth >= outs.length) {
             BodyContentImpl[] newOuts = Arrays.copyOf(outs, depth + 1);
-            newOuts[depth] = new BodyContentImpl(out);
+            newOuts[depth] = new BodyContentImpl(out, limitBodyContentBuffer, bodyContentTagBufferSize);
             outs = newOuts;
         }
 

==================================================
