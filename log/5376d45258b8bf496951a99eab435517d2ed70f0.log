5376d45258b8bf496951a99eab435517d2ed70f0
==================================================
Improve the reusability of UserDatabase code
==================================================
remm remm@apache.org
==================================================
Tue Aug 17 14:56:24 2021 +0200
==================================================
UserDatabase.java
Improve the reusability of UserDatabase code

Add intermediate concrete implementation classes. Add hooks to allow
partail database updates on save. Will likely make alternate
implementations more realistic.


==================================================
GenericGroup.java
index 8bac81032a..9242170929 100644
--- a/java/org/apache/catalina/UserDatabase.java
+++ b/java/org/apache/catalina/UserDatabase.java
@@ -155,6 +155,33 @@ public interface UserDatabase {
     public void removeUser(User user);
 
 
+    /**
+     * Signal the specified {@link Group} from this user database has been
+     * modified.
+     *
+     * @param group The group that has been modified
+     */
+    public default void modifiedGroup(Group group) {}
+
+
+    /**
+     * Signal the specified {@link Role} from this user database has been
+     * modified.
+     *
+     * @param role The role that has been modified
+     */
+    public default void modifiedRole(Role role) {}
+
+
+    /**
+     * Signal the specified {@link User} from this user database has been
+     * modified.
+     *
+     * @param user The user that has been modified
+     */
+    public default void modifiedUser(User user) {}
+
+
     /**
      * Save any updated information to the persistent storage location for this
      * user database.

==================================================
GenericRole.java
new file mode 100644
index 0000000000..d59e57d54a
--- /dev/null
+++ b/java/org/apache/catalina/users/GenericGroup.java
@@ -0,0 +1,170 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.users;
+
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+import org.apache.catalina.Role;
+import org.apache.catalina.User;
+import org.apache.catalina.UserDatabase;
+
+
+/**
+ * <p>Concrete implementation of {@link org.apache.catalina.Group} for a
+ * {@link UserDatabase}.</p>
+ *
+ * @author Craig R. McClanahan
+ */
+public class GenericGroup<UD extends UserDatabase> extends AbstractGroup {
+
+
+    // ----------------------------------------------------------- Constructors
+
+
+    /**
+     * Package-private constructor used by the factory method in
+     * {@link UserDatabase}.
+     *
+     * @param database The {@link UserDatabase} that owns this group
+     * @param groupname Group name of this group
+     * @param description Description of this group
+     * @param roles The roles of this group
+     */
+    GenericGroup(UD database,
+                String groupname, String description, List<Role> roles) {
+
+        super();
+        this.database = database;
+        this.groupname = groupname;
+        this.description = description;
+        if (roles != null) {
+            this.roles.addAll(roles);
+        }
+
+    }
+
+
+    // ----------------------------------------------------- Instance Variables
+
+
+    /**
+     * The {@link UserDatabase} that owns this group.
+     */
+    protected final UD database;
+
+
+    /**
+     * The set of {@link Role}s associated with this group.
+     */
+    protected final CopyOnWriteArrayList<Role> roles = new CopyOnWriteArrayList<>();
+
+
+    // ------------------------------------------------------------- Properties
+
+
+    /**
+     * Return the set of {@link Role}s assigned specifically to this group.
+     */
+    @Override
+    public Iterator<Role> getRoles() {
+        return roles.iterator();
+    }
+
+
+    /**
+     * Return the {@link UserDatabase} within which this Group is defined.
+     */
+    @Override
+    public UserDatabase getUserDatabase() {
+        return this.database;
+    }
+
+
+    /**
+     * Return the set of {@link org.apache.catalina.User}s that are members of this group.
+     */
+    @Override
+    public Iterator<User> getUsers() {
+        List<User> results = new ArrayList<>();
+        Iterator<User> users = database.getUsers();
+        while (users.hasNext()) {
+            User user = users.next();
+            if (user.isInGroup(this)) {
+                results.add(user);
+            }
+        }
+        return results.iterator();
+    }
+
+
+    // --------------------------------------------------------- Public Methods
+
+
+    /**
+     * Add a new {@link Role} to those assigned specifically to this group.
+     *
+     * @param role The new role
+     */
+    @Override
+    public void addRole(Role role) {
+        if (roles.addIfAbsent(role)) {
+            database.modifiedGroup(this);
+        }
+    }
+
+
+    /**
+     * Is this group specifically assigned the specified {@link Role}?
+     *
+     * @param role The role to check
+     */
+    @Override
+    public boolean isInRole(Role role) {
+        return roles.contains(role);
+    }
+
+
+    /**
+     * Remove a {@link Role} from those assigned to this group.
+     *
+     * @param role The old role
+     */
+    @Override
+    public void removeRole(Role role) {
+        if (roles.remove(role)) {
+            database.modifiedGroup(this);
+        }
+    }
+
+
+    /**
+     * Remove all {@link Role}s from those assigned to this group.
+     */
+    @Override
+    public void removeRoles() {
+        if (!roles.isEmpty()) {
+            roles.clear();
+            database.modifiedGroup(this);
+        }
+    }
+
+
+}

==================================================
GenericUser.java
new file mode 100644
index 0000000000..c6b0eba810
--- /dev/null
+++ b/java/org/apache/catalina/users/GenericRole.java
@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.users;
+
+
+import org.apache.catalina.UserDatabase;
+
+
+/**
+ * <p>Concrete implementation of {@link org.apache.catalina.Role} for a
+ * {@link UserDatabase}.</p>
+ *
+ * @author Craig R. McClanahan
+ */
+public class GenericRole<UD extends UserDatabase> extends AbstractRole {
+
+
+    // ----------------------------------------------------------- Constructors
+
+
+    /**
+     * Package-private constructor used by the factory method in
+     * {@link UserDatabase}.
+     *
+     * @param database The {@link UserDatabase} that owns this role
+     * @param rolename Role name of this role
+     * @param description Description of this role
+     */
+    GenericRole(UD database,
+               String rolename, String description) {
+
+        super();
+        this.database = database;
+        this.rolename = rolename;
+        this.description = description;
+
+    }
+
+
+    // ----------------------------------------------------- Instance Variables
+
+
+    /**
+     * The {@link UserDatabase} that owns this role.
+     */
+    protected final UserDatabase database;
+
+
+    // ------------------------------------------------------------- Properties
+
+
+    /**
+     * Return the {@link UserDatabase} within which this role is defined.
+     */
+    @Override
+    public UserDatabase getUserDatabase() {
+        return this.database;
+    }
+
+
+    @Override
+    public void setDescription(String description) {
+        database.modifiedRole(this);
+        super.setDescription(description);
+    }
+
+
+    @Override
+    public void setRolename(String rolename) {
+        database.modifiedRole(this);
+        super.setRolename(rolename);
+    }
+
+
+}

==================================================
MemoryGroup.java
new file mode 100644
index 0000000000..77b70b4f5d
--- /dev/null
+++ b/java/org/apache/catalina/users/GenericUser.java
@@ -0,0 +1,245 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.users;
+
+
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+import org.apache.catalina.Group;
+import org.apache.catalina.Role;
+import org.apache.catalina.UserDatabase;
+
+/**
+ * <p>Concrete implementation of {@link org.apache.catalina.User} for a
+ * {@link UserDatabase}.</p>
+ *
+ * @author Craig R. McClanahan
+ */
+public class GenericUser<UD extends UserDatabase> extends AbstractUser {
+
+
+    // ----------------------------------------------------------- Constructors
+
+
+    /**
+     * Package-private constructor used by the factory method in
+     * {@link UserDatabase}.
+     *
+     * @param database The {@link UserDatabase} that owns this user
+     * @param username Logon username of the new user
+     * @param password Logon password of the new user
+     * @param fullName Full name of the new user
+     * @param groups The groups of this user
+     * @param roles The roles of this user
+     */
+    GenericUser(UD database, String username,
+               String password, String fullName, List<Group> groups,
+               List<Role> roles) {
+
+        super();
+        this.database = database;
+        this.username = username;
+        this.password = password;
+        this.fullName = fullName;
+        if (groups != null) {
+            this.groups.addAll(groups);
+        }
+        if (roles != null) {
+            this.roles.addAll(roles);
+        }
+
+    }
+
+
+    // ----------------------------------------------------- Instance Variables
+
+
+    /**
+     * The {@link UserDatabase} that owns this user.
+     */
+    protected final UD database;
+
+
+    /**
+     * The set of {@link Group}s that this user is a member of.
+     */
+    protected final CopyOnWriteArrayList<Group> groups = new CopyOnWriteArrayList<>();
+
+
+    /**
+     * The set of {@link Role}s associated with this user.
+     */
+    protected final CopyOnWriteArrayList<Role> roles = new CopyOnWriteArrayList<>();
+
+
+    // ------------------------------------------------------------- Properties
+
+
+    /**
+     * Return the set of {@link Group}s to which this user belongs.
+     */
+    @Override
+    public Iterator<Group> getGroups() {
+        return groups.iterator();
+    }
+
+
+    /**
+     * Return the set of {@link Role}s assigned specifically to this user.
+     */
+    @Override
+    public Iterator<Role> getRoles() {
+        return roles.iterator();
+    }
+
+
+    /**
+     * Return the {@link UserDatabase} within which this User is defined.
+     */
+    @Override
+    public UserDatabase getUserDatabase() {
+        return this.database;
+    }
+
+
+    // --------------------------------------------------------- Public Methods
+
+
+    /**
+     * Add a new {@link Group} to those this user belongs to.
+     *
+     * @param group The new group
+     */
+    @Override
+    public void addGroup(Group group) {
+        if (groups.addIfAbsent(group)) {
+            database.modifiedUser(this);
+        }
+    }
+
+
+    /**
+     * Add a new {@link Role} to those assigned specifically to this user.
+     *
+     * @param role The new role
+     */
+    @Override
+    public void addRole(Role role) {
+        if (roles.addIfAbsent(role)) {
+            database.modifiedUser(this);
+        }
+    }
+
+
+    /**
+     * Is this user in the specified group?
+     *
+     * @param group The group to check
+     */
+    @Override
+    public boolean isInGroup(Group group) {
+        return groups.contains(group);
+    }
+
+
+    /**
+     * Is this user specifically assigned the specified {@link Role}?  This
+     * method does <strong>NOT</strong> check for roles inherited based on
+     * {@link Group} membership.
+     *
+     * @param role The role to check
+     */
+    @Override
+    public boolean isInRole(Role role) {
+        return roles.contains(role);
+    }
+
+
+    /**
+     * Remove a {@link Group} from those this user belongs to.
+     *
+     * @param group The old group
+     */
+    @Override
+    public void removeGroup(Group group) {
+        if (groups.remove(group)) {
+            database.modifiedUser(this);
+        }
+    }
+
+
+    /**
+     * Remove all {@link Group}s from those this user belongs to.
+     */
+    @Override
+    public void removeGroups() {
+        if (!groups.isEmpty()) {
+            groups.clear();
+            database.modifiedUser(this);
+        }
+    }
+
+
+    /**
+     * Remove a {@link Role} from those assigned to this user.
+     *
+     * @param role The old role
+     */
+    @Override
+    public void removeRole(Role role) {
+        if (roles.remove(role)) {
+            database.modifiedUser(this);
+        }
+    }
+
+
+    /**
+     * Remove all {@link Role}s from those assigned to this user.
+     */
+    @Override
+    public void removeRoles() {
+        if (!roles.isEmpty()) {
+            database.modifiedUser(this);
+        }
+        roles.clear();
+    }
+
+
+    @Override
+    public void setFullName(String fullName) {
+        database.modifiedUser(this);
+        super.setFullName(fullName);
+    }
+
+
+    @Override
+    public void setPassword(String password) {
+        database.modifiedUser(this);
+        super.setPassword(password);
+    }
+
+
+    @Override
+    public void setUsername(String username) {
+        database.modifiedUser(this);
+        // Note: changing the user name is a problem ...
+        super.setUsername(username);
+    }
+
+}

==================================================
MemoryRole.java
index aad41804ee..f1008ff80c 100644
--- a/java/org/apache/catalina/users/MemoryGroup.java
+++ b/java/org/apache/catalina/users/MemoryGroup.java
@@ -17,13 +17,7 @@
 package org.apache.catalina.users;
 
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.concurrent.CopyOnWriteArrayList;
-
 import org.apache.catalina.Role;
-import org.apache.catalina.User;
 import org.apache.catalina.UserDatabase;
 import org.apache.tomcat.util.buf.StringUtils;
 
@@ -35,10 +29,7 @@ import org.apache.tomcat.util.buf.StringUtils;
  * @author Craig R. McClanahan
  * @since 4.1
  */
-public class MemoryGroup extends AbstractGroup {
-
-
-    // ----------------------------------------------------------- Constructors
+public class MemoryGroup extends GenericGroup<MemoryUserDatabase> {
 
 
     /**
@@ -51,110 +42,7 @@ public class MemoryGroup extends AbstractGroup {
      */
     MemoryGroup(MemoryUserDatabase database,
                 String groupname, String description) {
-
-        super();
-        this.database = database;
-        setGroupname(groupname);
-        setDescription(description);
-
-    }
-
-
-    // ----------------------------------------------------- Instance Variables
-
-
-    /**
-     * The {@link MemoryUserDatabase} that owns this group.
-     */
-    protected final MemoryUserDatabase database;
-
-
-    /**
-     * The set of {@link Role}s associated with this group.
-     */
-    protected final CopyOnWriteArrayList<Role> roles = new CopyOnWriteArrayList<>();
-
-
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * Return the set of {@link Role}s assigned specifically to this group.
-     */
-    @Override
-    public Iterator<Role> getRoles() {
-        return roles.iterator();
-    }
-
-
-    /**
-     * Return the {@link UserDatabase} within which this Group is defined.
-     */
-    @Override
-    public UserDatabase getUserDatabase() {
-        return this.database;
-    }
-
-
-    /**
-     * Return the set of {@link org.apache.catalina.User}s that are members of this group.
-     */
-    @Override
-    public Iterator<User> getUsers() {
-        List<User> results = new ArrayList<>();
-        Iterator<User> users = database.getUsers();
-        while (users.hasNext()) {
-            User user = users.next();
-            if (user.isInGroup(this)) {
-                results.add(user);
-            }
-        }
-        return results.iterator();
-    }
-
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Add a new {@link Role} to those assigned specifically to this group.
-     *
-     * @param role The new role
-     */
-    @Override
-    public void addRole(Role role) {
-        roles.addIfAbsent(role);
-    }
-
-
-    /**
-     * Is this group specifically assigned the specified {@link Role}?
-     *
-     * @param role The role to check
-     */
-    @Override
-    public boolean isInRole(Role role) {
-        return roles.contains(role);
-    }
-
-
-    /**
-     * Remove a {@link Role} from those assigned to this group.
-     *
-     * @param role The old role
-     */
-    @Override
-    public void removeRole(Role role) {
-        roles.remove(role);
-    }
-
-
-    /**
-     * Remove all {@link Role}s from those assigned to this group.
-     */
-    @Override
-    public void removeRoles() {
-        roles.clear();
+        super(database, groupname, description, null);
     }
 
 

==================================================
MemoryUser.java
index b8f49702c2..10f6d22548 100644
--- a/java/org/apache/catalina/users/MemoryRole.java
+++ b/java/org/apache/catalina/users/MemoryRole.java
@@ -27,10 +27,7 @@ import org.apache.catalina.UserDatabase;
  * @author Craig R. McClanahan
  * @since 4.1
  */
-public class MemoryRole extends AbstractRole {
-
-
-    // ----------------------------------------------------------- Constructors
+public class MemoryRole extends GenericRole<MemoryUserDatabase> {
 
 
     /**
@@ -43,39 +40,10 @@ public class MemoryRole extends AbstractRole {
      */
     MemoryRole(MemoryUserDatabase database,
                String rolename, String description) {
-
-        super();
-        this.database = database;
-        setRolename(rolename);
-        setDescription(description);
-
-    }
-
-
-    // ----------------------------------------------------- Instance Variables
-
-
-    /**
-     * The {@link MemoryUserDatabase} that owns this role.
-     */
-    protected final MemoryUserDatabase database;
-
-
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * Return the {@link UserDatabase} within which this role is defined.
-     */
-    @Override
-    public UserDatabase getUserDatabase() {
-        return this.database;
+        super(database, rolename, description);
     }
 
 
-    // --------------------------------------------------------- Public Methods
-
-
     /**
      * <p>Return a String representation of this role in XML format.</p>
      */

==================================================
