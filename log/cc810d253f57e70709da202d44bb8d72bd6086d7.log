cc810d253f57e70709da202d44bb8d72bd6086d7
==================================================
Servlet 3.1. Implement the special role "**" and extend the unit tests to cover it.
==================================================
Mark Emlyn
==================================================
Tue Jun 18 15:24:38 2013 +0000
==================================================
AuthenticatorBase.java
Servlet 3.1. Implement the special role "**" and extend the unit tests to cover it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1494172 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecurityConstraint.java
index 6cdcb97f6e..82b1159d02 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -549,7 +549,8 @@ public abstract class AuthenticatorBase extends ValveBase
                 if(!constraints[i].getAuthConstraint()) {
                     authRequired = false;
                     break;
-                } else if(!constraints[i].getAllRoles()) {
+                } else if(!constraints[i].getAllRoles() &&
+                        !constraints[i].getAuthenticatedUsers()) {
                     String [] roles = constraints[i].findAuthRoles();
                     if(roles == null || roles.length == 0) {
                         authRequired = false;

==================================================
RealmBase.java
index c0c89fa464..4accebbed0 100644
--- a/java/org/apache/catalina/deploy/SecurityConstraint.java
+++ b/java/org/apache/catalina/deploy/SecurityConstraint.java
@@ -50,6 +50,9 @@ public class SecurityConstraint implements Serializable {
 
     private static final long serialVersionUID = 1L;
 
+    public static String ROLE_ALL_ROLES = "*";
+    public static String ROLE_ALL_AUTHENTICATED_USERS = "**";
+
     // ----------------------------------------------------------- Constructors
 
 
@@ -67,12 +70,20 @@ public class SecurityConstraint implements Serializable {
 
 
     /**
-     * Was the "all roles" wildcard included in the authorization constraints
-     * for this security constraint?
+     * Was the "all roles" wildcard - {@link #ROLE_ALL_ROLES} - included in the
+     * authorization constraints for this security constraint?
      */
     private boolean allRoles = false;
 
 
+    /**
+     * Was the "all authenticated users" wildcard -
+     * {@link #ROLE_ALL_AUTHENTICATED_USERS} - included in the authorization
+     * constraints for this security constraint?
+     */
+    private boolean authenticatedUsers = false;
+
+
     /**
      * Was an authorization constraint included in this security constraint?
      * This is necessary to distinguish the case where an auth-constraint with
@@ -118,18 +129,27 @@ public class SecurityConstraint implements Serializable {
      */
     public boolean getAllRoles() {
 
-        return (this.allRoles);
+        return this.allRoles;
 
     }
 
 
+    /**
+     * Was the "all authenticated users" wildcard included in this
+     * authentication constraint?
+     */
+    public boolean getAuthenticatedUsers() {
+        return this.authenticatedUsers;
+    }
+
+
     /**
      * Return the authorization constraint present flag for this security
      * constraint.
      */
     public boolean getAuthConstraint() {
 
-        return (this.authConstraint);
+        return this.authConstraint;
 
     }
 
@@ -150,7 +170,7 @@ public class SecurityConstraint implements Serializable {
      */
     public String getDisplayName() {
 
-        return (this.displayName);
+        return this.displayName;
 
     }
 
@@ -170,7 +190,7 @@ public class SecurityConstraint implements Serializable {
      */
     public String getUserConstraint() {
 
-        return (userConstraint);
+        return userConstraint;
 
     }
 
@@ -188,6 +208,24 @@ public class SecurityConstraint implements Serializable {
     }
 
 
+    /**
+     * Called in the unlikely event that an application defines a role named
+     * "**".
+     */
+    public void treatAllAuthenticatedUsersAsApplicationRole() {
+        if (authenticatedUsers) {
+            authenticatedUsers = false;
+
+            String results[] = new String[authRoles.length + 1];
+            for (int i = 0; i < authRoles.length; i++)
+                results[i] = authRoles[i];
+            results[authRoles.length] = ROLE_ALL_AUTHENTICATED_USERS;
+            authRoles = results;
+            authConstraint = true;
+        }
+    }
+
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -202,18 +240,22 @@ public class SecurityConstraint implements Serializable {
         if (authRole == null)
             return;
 
-        if ("*".equals(authRole)) {
+        if (ROLE_ALL_ROLES.equals(authRole)) {
             allRoles = true;
             return;
         }
 
+        if (ROLE_ALL_AUTHENTICATED_USERS.equals(authRole)) {
+            authenticatedUsers = true;
+            return;
+        }
+
         String results[] = new String[authRoles.length + 1];
         for (int i = 0; i < authRoles.length; i++)
             results[i] = authRoles[i];
         results[authRoles.length] = authRole;
         authRoles = results;
         authConstraint = true;
-
     }
 
 
@@ -341,11 +383,16 @@ public class SecurityConstraint implements Serializable {
         if (authRole == null)
             return;
 
-        if ("*".equals(authRole)) {
+        if (ROLE_ALL_ROLES.equals(authRole)) {
             allRoles = false;
             return;
         }
 
+        if (ROLE_ALL_AUTHENTICATED_USERS.equals(authRole)) {
+            authenticatedUsers = false;
+            return;
+        }
+
         int n = -1;
         for (int i = 0; i < authRoles.length; i++) {
             if (authRoles[i].equals(authRole)) {
@@ -362,7 +409,6 @@ public class SecurityConstraint implements Serializable {
             }
             authRoles = results;
         }
-
     }
 
 

==================================================
ContextConfig.java
index 8a0369a6f1..8e149993f6 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -814,7 +814,13 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             if (log.isDebugEnabled())
                 log.debug("  Checking roles " + principal);
 
-            if (roles.length == 0 && !constraint.getAllRoles()) {
+            if (constraint.getAuthenticatedUsers() && principal != null) {
+                if (log.isDebugEnabled()) {
+                    log.debug("Passing all authenticated users");
+                }
+                status = true;
+            } else if (roles.length == 0 && !constraint.getAllRoles() &&
+                    !constraint.getAuthenticatedUsers()) {
                 if(constraint.getAuthConstraint()) {
                     if( log.isDebugEnabled() )
                         log.debug("No roles");

==================================================
TesterResponse.java
index a37e3942a0..ded47092e5 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1342,7 +1342,13 @@ public class ContextConfig implements LifecycleListener {
         for (ContextResource resource : webxml.getResourceRefs().values()) {
             context.getNamingResources().addResource(resource);
         }
+        boolean allAuthenticatedUsersIsAppRole =
+                webxml.getSecurityRoles().contains(
+                        SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);
         for (SecurityConstraint constraint : webxml.getSecurityConstraints()) {
+            if (allAuthenticatedUsersIsAppRole) {
+                constraint.treatAllAuthenticatedUsersAsApplicationRole();
+            }
             context.addConstraint(constraint);
         }
         for (String role : webxml.getSecurityRoles()) {

==================================================
TestRealmBase.java
index 7477085183..4e3b8293c8 100644
--- a/test/org/apache/catalina/connector/TesterResponse.java
+++ b/test/org/apache/catalina/connector/TesterResponse.java
@@ -31,7 +31,10 @@ public class TesterResponse extends Response {
 
     @Override
     public void sendError(int status, String message) throws IOException {
+        // NO-OP by default.
+        /*
         System.out.println("TesterResponse.sendError(" + status + ", \"" +
                 message + "\")");
+         */
     }
 }

==================================================
