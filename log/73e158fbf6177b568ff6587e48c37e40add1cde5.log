73e158fbf6177b568ff6587e48c37e40add1cde5
==================================================
Complete a TODO
==================================================
Mark Thomas
==================================================
Mon Jan 12 08:59:53 2015 +0000
==================================================
AprEndpoint.java
Complete a TODO
- Ensure a blocking call to doWrite() always empties the buffer or
  times out
- Remove flip parameter from doWrite() as it is no longer required

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1651045 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 27fab2584b..05c63b69af 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2509,7 +2509,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
 
 
         @Override
-        protected int doWrite(boolean block, boolean flip) throws IOException {
+        protected int doWrite(boolean block) throws IOException {
             if (closed) {
                 throw new IOException(sm.getString("apr.closed", getSocket()));
             }
@@ -2520,7 +2520,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             readLock.lock();
             try {
                 if (getBlockingStatus() == block) {
-                    return doWriteInternal(flip);
+                    return doWriteInternal();
                 }
             } finally {
                 readLock.unlock();
@@ -2540,7 +2540,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                 readLock.lock();
                 try {
                     writeLock.unlock();
-                    return doWriteInternal(flip);
+                    return doWriteInternal();
                 } finally {
                     readLock.unlock();
                 }
@@ -2554,8 +2554,8 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
-        private int doWriteInternal(boolean flip) throws IOException {
-            if (flip) {
+        private int doWriteInternal() throws IOException {
+            if (!writeBufferFlipped) {
                 socketWriteBuffer.flip();
                 writeBufferFlipped = true;
             }
@@ -2601,7 +2601,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                 }
                 written += thisTime;
                 socketWriteBuffer.position(socketWriteBuffer.position() + thisTime);
-            } while (thisTime > 0 && socketWriteBuffer.hasRemaining());
+            } while ((thisTime > 0 || getBlockingStatus()) && socketWriteBuffer.hasRemaining());
 
             if (socketWriteBuffer.remaining() == 0) {
                 socketWriteBuffer.clear();

==================================================
NioEndpoint.java
index 95ea6f8305..f263217745 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1148,12 +1148,12 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
+        /**
+         * @param block Ignored since this method is only called in the
+         *              blocking case
+         */
         @Override
-        protected int doWrite(boolean block, boolean flip) throws IOException {
-            // Only called in the non-blocking case since
-            // writeNonBlocking(byte[], int, int) and flush(boolean, boolean)
-            // are over-ridden.
-
+        protected int doWrite(boolean block) throws IOException {
             int result = -1;
             try {
                 socketWriteBuffer.flip();

==================================================
SocketWrapperBase.java
index be0f981528..0c91af0507 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1512,9 +1512,9 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
 
 
         @Override
-        protected synchronized int doWrite(boolean block, boolean flip)
+        protected synchronized int doWrite(boolean block)
                 throws IOException {
-            if (flip) {
+            if (!writeBufferFlipped) {
                 socketWriteBuffer.flip();
                 writeBufferFlipped = true;
             }

==================================================
