3a32b24739924343cb132394364d0b2717d48ebe
==================================================
Servlet 4.0
==================================================
Mark Thomas
==================================================
Wed Mar 1 13:10:42 2017 +0000
==================================================
ServletContext.java
Servlet 4.0
New elements for the deployment descriptor and new methods on the ServletContext to enable the default request and response character encodings to be set per web application.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1784926 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServletRequest.java
index 03a7e98fa8..608356605d 100644
--- a/java/javax/servlet/ServletContext.java
+++ b/java/javax/servlet/ServletContext.java
@@ -1013,4 +1013,82 @@ public interface ServletContext {
      * @since Servlet 4.0
      */
     public void setSessionTimeout(int sessionTimeout);
+
+    /**
+     * Get the default character encoding for reading request bodies.
+     *
+     * @return The character encoding name or {@code null} if no default has
+     *         been specified
+     *
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
+     *
+     * @since Servlet 4.0
+     */
+    public String getRequestCharacterEncoding();
+
+    /**
+     * Set the default character encoding to use for reading request bodies.
+     * Calling this method will over-ride any value set in the deployment
+     * descriptor.
+     *
+     * @param encoding The name of the character encoding to use
+     *
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
+     * @throws IllegalStateException If the ServletContext has already been
+     *         initialised
+     *
+     * @since Servlet 4.0
+     */
+    public void setRequestCharacterEncoding(String encoding);
+
+    /**
+     * Get the default character encoding for writing response bodies.
+     *
+     * @return The character encoding name or {@code null} if no default has
+     *         been specified
+     *
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
+     *
+     * @since Servlet 4.0
+     */
+    public String getResponseCharacterEncoding();
+
+    /**
+     * Set the default character encoding to use for writing response bodies.
+     * Calling this method will over-ride any value set in the deployment
+     * descriptor.
+     *
+     * @param encoding The name of the character encoding to use
+     *
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
+     * @throws IllegalStateException If the ServletContext has already been
+     *         initialised
+     *
+     * @since Servlet 4.0
+     */
+    public void setResponseCharacterEncoding(String encoding);
 }

==================================================
ServletResponse.java
index 160a097a88..68e00d3652 100644
--- a/java/javax/servlet/ServletRequest.java
+++ b/java/javax/servlet/ServletRequest.java
@@ -76,8 +76,15 @@ public interface ServletRequest {
 
     /**
      * Returns the name of the character encoding used in the body of this
-     * request. This method returns <code>null</code> if the request does not
-     * specify a character encoding
+     * request. This method returns <code>null</code> if the no character
+     * encoding has been specified. The following priority order is used to
+     * determine the specified encoding:
+     * <ol>
+     * <li>per request</li>
+     * <li>web application default via the deployment descriptor or
+     *     {@link ServletContext#setRequestCharacterEncoding(String)}</li>
+     * <li>container default via container specific configuration</li>
+     * </ol>
      *
      * @return a <code>String</code> containing the name of the character
      *         encoding, or <code>null</code> if the request does not specify a

==================================================
Context.java
index 6b78b1e7df..ce26c8f21f 100644
--- a/java/javax/servlet/resources/web-app_4_0.xsd
+++ b/java/javax/servlet/resources/web-app_4_0.xsd
@@ -298,6 +298,26 @@
           </xsd:documentation>
         </xsd:annotation>
       </xsd:element>
+      <xsd:element name="request-encoding" type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            When specified, this element provides a default request
+            encoding of the web application.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="response-encoding" type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            When specified, this element provides a default response
+            encoding of the web application.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
       <xsd:element name="deny-uncovered-http-methods" type="javaee:emptyType">
         <xsd:annotation>
           <xsd:documentation>

==================================================
Request.java
index 6f2d44450e..349b0006a1 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1790,4 +1790,32 @@ public interface Context extends Container, ContextBind {
      *         {@code false}
      */
     public boolean getDispatchersUseEncodedPaths();
+
+    /**
+     * Set the default request body encoding for this web application.
+     *
+     * @param encoding The default encoding
+     */
+    public void setRequestCharacterEncoding(String encoding);
+
+    /**
+     * Get the default request body encoding for this web application.
+     *
+     * @return The default request body encoding
+     */
+    public String getRequestCharacterEncoding();
+
+    /**
+     * Set the default response body encoding for this web application.
+     *
+     * @param encoding The default encoding
+     */
+    public void setResponseCharacterEncoding(String encoding);
+
+    /**
+     * Get the default response body encoding for this web application.
+     *
+     * @return The default response body encoding
+     */
+    public String getResponseCharacterEncoding();
 }

==================================================
Response.java
index 42d845813f..691e8f916b 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -968,7 +968,14 @@ public class Request implements HttpServletRequest {
      */
     @Override
     public String getCharacterEncoding() {
-      return coyoteRequest.getCharacterEncoding();
+        String result = coyoteRequest.getCharacterEncoding();
+        if (result == null) {
+            Context context = getContext();
+            if (context != null) {
+                result =  context.getRequestCharacterEncoding();
+            }
+        }
+        return result;
     }
 
 

==================================================
ApplicationContext.java
index 84517bcfcc..5da3108956 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -549,7 +549,17 @@ public class Response implements HttpServletResponse {
      */
     @Override
     public String getCharacterEncoding() {
-        return (getCoyoteResponse().getCharacterEncoding());
+        String result = getCoyoteResponse().getCharacterEncoding();
+        if (result == null) {
+            Context context = getContext();
+            if (context != null) {
+                result =  context.getResponseCharacterEncoding();
+            }
+        }
+        if (result == null) {
+            result = org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING;
+        }
+        return result;
     }
 
 

==================================================
ApplicationContextFacade.java
index 11483289bd..bb74959a22 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -1288,6 +1288,42 @@ public class ApplicationContext implements ServletContext {
     }
 
 
+    @Override
+    public String getRequestCharacterEncoding() {
+        return context.getRequestCharacterEncoding();
+    }
+
+
+    @Override
+    public void setRequestCharacterEncoding(String encoding) {
+        if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
+            throw new IllegalStateException(
+                    sm.getString("applicationContext.setRequestEncoding.ise",
+                            getContextPath()));
+        }
+
+        context.setRequestCharacterEncoding(encoding);
+    }
+
+
+    @Override
+    public String getResponseCharacterEncoding() {
+        return context.getResponseCharacterEncoding();
+    }
+
+
+    @Override
+    public void setResponseCharacterEncoding(String encoding) {
+        if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
+            throw new IllegalStateException(
+                    sm.getString("applicationContext.setResponseEncoding.ise",
+                            getContextPath()));
+        }
+
+        context.setResponseCharacterEncoding(encoding);
+    }
+
+
     // -------------------------------------------------------- Package Methods
     protected StandardContext getContext() {
         return this.context;

==================================================
StandardContext.java
index 39cfb8ce27..09cc4f809b 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -33,6 +33,8 @@ applicationContext.role.iae=An individual role to declare for context [{0}] may
 applicationContext.roles.iae=Array of roles to declare for context [{0}] cannot be null
 applicationContext.setAttribute.namenull=Name cannot be null
 applicationContext.setInitParam.ise=Initialization parameters cannot be set after the context has been initialized
+applicationContext.setRequestEncoding.ise=The request encoding cannot be set for context {0} as the context has been initialised
+applicationContext.setResponseEncoding.ise=The response encoding cannot be set for context {0} as the context has been initialised
 applicationContext.setSessionTimeout.ise=The session timeout cannot be set for context {0} as the context has been initialised
 applicationContext.setSessionTracking.ise=The session tracking modes for context {0} cannot be set whilst the context is running
 applicationContext.setSessionTracking.iae.invalid=The session tracking mode {0} requested for context {1} is not supported by that context

==================================================
ContextConfig.java
index f87f3c6eaa..553a72f3ff 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -807,9 +807,36 @@ public class StandardContext extends ContainerBase
 
     private boolean dispatchersUseEncodedPaths = true;
 
+    private String requestEncoding = null;
+
+    private String responseEncoding = null;
 
     // ----------------------------------------------------- Context Properties
 
+    @Override
+    public String getRequestCharacterEncoding() {
+        return requestEncoding;
+    }
+
+
+    @Override
+    public void setRequestCharacterEncoding(String requestEncoding) {
+        this.requestEncoding = requestEncoding;
+    }
+
+
+    @Override
+    public String getResponseCharacterEncoding() {
+        return responseEncoding;
+    }
+
+
+    @Override
+    public void setResponseCharacterEncoding(String responseEncoding) {
+        this.responseEncoding = responseEncoding;
+    }
+
+
     @Override
     public void setDispatchersUseEncodedPaths(boolean dispatchersUseEncodedPaths) {
         this.dispatchersUseEncodedPaths = dispatchersUseEncodedPaths;
@@ -6715,5 +6742,29 @@ public class StandardContext extends ContainerBase
             throw new UnsupportedOperationException(
                     sm.getString("noPluggabilityServletContext.notAllowed"));
         }
+
+        @Override
+        public String getRequestCharacterEncoding() {
+            throw new UnsupportedOperationException(
+                    sm.getString("noPluggabilityServletContext.notAllowed"));
+        }
+
+        @Override
+        public void setRequestCharacterEncoding(String encoding) {
+            throw new UnsupportedOperationException(
+                    sm.getString("noPluggabilityServletContext.notAllowed"));
+        }
+
+        @Override
+        public String getResponseCharacterEncoding() {
+            throw new UnsupportedOperationException(
+                    sm.getString("noPluggabilityServletContext.notAllowed"));
+        }
+
+        @Override
+        public void setResponseCharacterEncoding(String encoding) {
+            throw new UnsupportedOperationException(
+                    sm.getString("noPluggabilityServletContext.notAllowed"));
+        }
     }
 }

==================================================
FailedContext.java
index 012a17fdc9..977709051e 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1299,6 +1299,7 @@ public class ContextConfig implements LifecycleListener {
                 webxml.getMimeMappings().entrySet()) {
             context.addMimeMapping(entry.getKey(), entry.getValue());
         }
+        context.setRequestCharacterEncoding(webxml.getRequestEncoding());
         // Name is just used for ordering
         for (ContextResourceEnvRef resource :
                 webxml.getResourceEnvRefs().values()) {
@@ -1307,6 +1308,7 @@ public class ContextConfig implements LifecycleListener {
         for (ContextResource resource : webxml.getResourceRefs().values()) {
             context.getNamingResources().addResource(resource);
         }
+        context.setResponseCharacterEncoding(webxml.getResponseEncoding());
         boolean allAuthenticatedUsersIsAppRole =
                 webxml.getSecurityRoles().contains(
                         SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);

==================================================
Request.java
index b3627e9c01..5df803fa4e 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -789,4 +789,14 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     public void setDispatchersUseEncodedPaths(boolean dispatchersUseEncodedPaths) { /* NO-OP */ }
     @Override
     public boolean getDispatchersUseEncodedPaths() { return true; }
+
+    @Override
+    public void setRequestCharacterEncoding(String encoding) { /* NO-OP */ }
+    @Override
+    public String getRequestCharacterEncoding() { return null; }
+
+    @Override
+    public void setResponseCharacterEncoding(String encoding) { /* NO-OP */ }
+    @Override
+    public String getResponseCharacterEncoding() { return null; }
 }
\ No newline at end of file

==================================================
Response.java
index 6d82ac91ce..fdc34e476c 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -292,8 +292,8 @@ public final class Request {
         }
 
         charEncoding = getCharsetFromContentType(getContentType());
-        return charEncoding;
 
+        return charEncoding;
     }
 
 

==================================================
JspCServletContext.java
index 20a9f67ffb..b321c08aba 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -101,7 +101,7 @@ public final class Response {
      */
     String contentType = null;
     String contentLanguage = null;
-    String characterEncoding = Constants.DEFAULT_CHARACTER_ENCODING;
+    String characterEncoding = null;
     long contentLength = -1;
     private Locale locale = DEFAULT_LOCALE;
 
@@ -508,7 +508,7 @@ public final class Response {
         contentType = null;
         contentLanguage = null;
         locale = DEFAULT_LOCALE;
-        characterEncoding = Constants.DEFAULT_CHARACTER_ENCODING;
+        characterEncoding = null;
         charsetSet = false;
         contentLength = -1;
         status = 200;

==================================================
WebRuleSet.java
index ab3d3fdeb5..04f99f3c75 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -706,4 +706,24 @@ public class JspCServletContext implements ServletContext {
     public void setSessionTimeout(int sessionTimeout) {
         // NO-OP
     }
+
+    @Override
+    public String getRequestCharacterEncoding() {
+        return null;
+    }
+
+    @Override
+    public void setRequestCharacterEncoding(String encoding) {
+        // NO-OP
+    }
+
+    @Override
+    public String getResponseCharacterEncoding() {
+        return null;
+    }
+
+    @Override
+    public void setResponseCharacterEncoding(String encoding) {
+        // NO-OP
+    }
 }

==================================================
WebXml.java
index 70ef763063..cba9f60f01 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
@@ -196,6 +196,8 @@ public class WebRuleSet extends RuleSetBase {
                                    "addAbsoluteOrderingOthers");
             digester.addRule(fullPrefix + "/deny-uncovered-http-methods",
                     new SetDenyUncoveredHttpMethodsRule());
+            digester.addCallMethod(fullPrefix + "/request-encoding", "setRequestEncoding", 0);
+            digester.addCallMethod(fullPrefix + "/response-encoding", "setResponseEncoding", 0);
         }
 
         digester.addCallMethod(fullPrefix + "/context-param",

==================================================
TesterContext.java
index 4f7f4f40d0..71adfd7468 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -41,6 +41,7 @@ import javax.servlet.descriptor.TaglibDescriptor;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.descriptor.XmlIdentifiers;
 import org.apache.tomcat.util.digester.DocumentProperties;
@@ -609,6 +610,36 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
         return new JspConfigDescriptorImpl(descriptors, tlds);
     }
 
+    private String requestEncoding;
+    public String getRequestEncoding() {
+        return requestEncoding;
+    }
+    public void setRequestEncoding(String requestEncoding) {
+        if (requestEncoding == null) {
+            try {
+                B2CConverter.getCharset(requestEncoding);
+            } catch (UnsupportedEncodingException e) {
+                throw new IllegalArgumentException(e);
+            }
+        }
+        this.requestEncoding = requestEncoding;
+    }
+
+    private String responseEncoding;
+    public String getResponseEncoding() {
+        return responseEncoding;
+    }
+    public void setResponseEncoding(String responseEncoding) {
+        if (responseEncoding == null) {
+            try {
+                B2CConverter.getCharset(responseEncoding);
+            } catch (UnsupportedEncodingException e) {
+                throw new IllegalArgumentException(e);
+            }
+        }
+        this.responseEncoding = responseEncoding;
+    }
+
     // Attributes not defined in web.xml or web-fragment.xml
 
     // URL of JAR / exploded JAR for this web-fragment
@@ -1307,6 +1338,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
                     sb.append("    </locale-encoding-mapping>\n");
                 }
                 sb.append("  </locale-encoding-mapping-list>\n");
+                sb.append("\n");
             }
         }
 
@@ -1314,11 +1346,16 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
         if (getMajorVersion() > 3 ||
                 (getMajorVersion() == 3 && getMinorVersion() > 0)) {
             if (denyUncoveredHttpMethods) {
-                sb.append("\n");
                 sb.append("  <deny-uncovered-http-methods/>");
+                sb.append("\n");
             }
         }
 
+        // request-encoding and response-encoding was introduced in Servlet 4.0
+        if (getMajorVersion() >= 4) {
+            appendElement(sb, INDENT2, "request-encoding", requestEncoding);
+            appendElement(sb, INDENT2, "response-encoding", responseEncoding);
+        }
         sb.append("</web-app>");
         return sb.toString();
     }
@@ -1432,7 +1469,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
         }
 
         // Note: Not permitted in fragments but we also use fragments for
-        //       per-Host and global defaults so it may appear there
+        //       per-Host and global defaults so they may appear there
         if (!denyUncoveredHttpMethods) {
             for (WebXml fragment : fragments) {
                 if (fragment.getDenyUncoveredHttpMethods()) {
@@ -1441,6 +1478,20 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Encodi
                 }
             }
         }
+        if (requestEncoding == null) {
+            for (WebXml fragment : fragments) {
+                if (fragment.getRequestEncoding() != null) {
+                    requestEncoding = fragment.getRequestEncoding();
+                }
+            }
+        }
+        if (responseEncoding == null) {
+            for (WebXml fragment : fragments) {
+                if (fragment.getResponseEncoding() != null) {
+                    responseEncoding = fragment.getResponseEncoding();
+                }
+            }
+        }
 
         if (distributable) {
             for (WebXml fragment : fragments) {

==================================================
TesterServletContext.java
index 4109c41cb8..0698e3fbe8 100644
--- a/test/org/apache/tomcat/unittest/TesterContext.java
+++ b/test/org/apache/tomcat/unittest/TesterContext.java
@@ -1251,4 +1251,14 @@ public class TesterContext implements Context {
     public void setDispatchersUseEncodedPaths(boolean dispatchersUseEncodedPaths) { /* NO-OP */ }
     @Override
     public boolean getDispatchersUseEncodedPaths() { return true; }
+
+    @Override
+    public void setRequestCharacterEncoding(String encoding) { /* NO-OP */ }
+    @Override
+    public String getRequestCharacterEncoding() { return null; }
+
+    @Override
+    public void setResponseCharacterEncoding(String encoding) { /* NO-OP */ }
+    @Override
+    public String getResponseCharacterEncoding() { return null; }
 }

==================================================
