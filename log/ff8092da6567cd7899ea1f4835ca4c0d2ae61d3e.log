ff8092da6567cd7899ea1f4835ca4c0d2ae61d3e
==================================================
Remove unused methods
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:50:27 2014 +0000
==================================================
AbstractAjpProcessor.java
Remove unused methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641279 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index 9ca0322c13..18240a9202 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -726,8 +726,6 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         // Setting up the socket
         this.socketWrapper = socket;
 
-        setupSocket(socket);
-
         int soTimeout = endpoint.getSoTimeout();
         boolean cping = false;
 
@@ -923,10 +921,6 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
 
     // ------------------------------------------------------ Protected Methods
 
-    // Methods called by process()
-    protected abstract void setupSocket(SocketWrapperBase<S> socketWrapper)
-            throws IOException;
-
     // Methods used by SocketInputBuffer
     /**
      * Read an AJP body message. Used to read both the 'special' packet in ajp13

==================================================
AjpNio2Processor.java
index a72ae55527..9142021577 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -19,7 +19,6 @@ package org.apache.coyote.ajp;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AprEndpoint;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 /**
  * Processes AJP requests.
@@ -50,10 +49,4 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
         ((AprEndpoint) endpoint).getPoller().add(
                 socketWrapper.getSocket().longValue(), -1, read, write);
     }
-
-
-    @Override
-    protected void setupSocket(SocketWrapperBase<Long> socketWrapper) {
-        // NO-OP
-    }
 }

==================================================
AjpNioProcessor.java
index 5c33bf492e..75f74965c4 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Processor.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Processor.java
@@ -16,13 +16,10 @@
  */
 package org.apache.coyote.ajp;
 
-import java.io.IOException;
-
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
-import org.apache.tomcat.util.net.SocketWrapperBase;
 
 /**
  * Processes AJP requests using NIO2.
@@ -44,11 +41,4 @@ public class AjpNio2Processor extends AbstractAjpProcessor<Nio2Channel> {
         // Nothing to do here, the appropriate operations should
         // already be pending
     }
-
-
-    @Override
-    protected void setupSocket(SocketWrapperBase<Nio2Channel> socketWrapper)
-            throws IOException {
-        // NO-OP
-    }
 }

==================================================
