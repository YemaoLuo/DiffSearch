e5eea177324f3c4cc510341c1ea3d47dc14fb41e
==================================================
Revert fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=56573
==================================================
Mark Emlyn
==================================================
Fri Jun 6 16:50:24 2014 +0000
==================================================
WsHandshakeRequest.java
index 384173ee72..04a89faa84 100644
--- a/java/org/apache/tomcat/websocket/server/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
@@ -29,8 +29,6 @@ uriTemplate.emptySegment=The path [{0}] contains one or more empty segments whic
 uriTemplate.invalidPath=The path [{0}] is not valid.
 uriTemplate.invalidSegment=The segment [{0}] is not valid in the provided path [{1}]
 
-wsHandshakeRequest.unknownScheme=The scheme [{0}] is not recognised. [http] or [https] is expected
-
 wsHttpUpgradeHandler.destroyFailed=Failed to close WebConnection while destroying the WebSocket HttpUpgradeHandler
 wsHttpUpgradeHandler.noPreInit=The preInit() method must be called to configure the WebSocket HttpUpgradeHandler before the container calls init(). Usually, this means the Servlet that created the WsHttpUpgradeHandler instance should also call preInit()
 

==================================================
TestWsHandshakeRequest.java
index 0025040c64..676f08eb45 100644
--- a/java/org/apache/tomcat/websocket/server/WsHandshakeRequest.java
+++ b/java/org/apache/tomcat/websocket/server/WsHandshakeRequest.java
@@ -30,15 +30,11 @@ import java.util.Map.Entry;
 import javax.servlet.http.HttpServletRequest;
 import javax.websocket.server.HandshakeRequest;
 
-import org.apache.tomcat.util.res.StringManager;
-
 /**
  * Represents the request that this session was opened under.
  */
 public class WsHandshakeRequest implements HandshakeRequest {
 
-    private static final StringManager sm = StringManager.getManager(Constants.PACKAGE_NAME);
-
     private final URI requestUri;
     private final Map<String,List<String>> parameterMap;
     private final String queryString;
@@ -58,34 +54,11 @@ public class WsHandshakeRequest implements HandshakeRequest {
         httpSession = request.getSession(false);
 
         // URI
-        // Based on request.getRequestURL() implementation
-        StringBuilder sb = new StringBuilder();
-        String scheme = request.getScheme();
-        int port = request.getServerPort();
-        if (port < 0)
-            port = 80; // Work around java.net.URL bug
-
-        if (scheme.equals("http")) {
-            sb.append("ws");
-        } else if (scheme.equals("https")) {
-            sb.append("wss");
-        } else {
-            throw new IllegalArgumentException(
-                    sm.getString("wsHandshakeRequest.unknownScheme", scheme));
-        }
-        sb.append("://");
-        sb.append(request.getServerName());
-        if ((scheme.equals("http") && (port != 80))
-            || (scheme.equals("https") && (port != 443))) {
-            sb.append(':');
-            sb.append(port);
-        }
-        sb.append(request.getRequestURI());
+        StringBuilder sb = new StringBuilder(request.getRequestURI());
         if (queryString != null) {
-            sb.append('?');
+            sb.append("?");
             sb.append(queryString);
         }
-
         try {
             requestUri = new URI(sb.toString());
         } catch (URISyntaxException e) {

==================================================
TesterUriServer.java
deleted file mode 100644
index 30d79a3c6e..0000000000
--- a/test/org/apache/tomcat/websocket/server/TestWsHandshakeRequest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tomcat.websocket.server;
-
-import java.net.URI;
-import java.util.Queue;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-import javax.websocket.ClientEndpointConfig;
-import javax.websocket.ContainerProvider;
-import javax.websocket.Session;
-import javax.websocket.WebSocketContainer;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import org.apache.catalina.Context;
-import org.apache.catalina.servlets.DefaultServlet;
-import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.websocket.TesterMessageCountClient.BasicText;
-import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEndpoint;
-
-public class TestWsHandshakeRequest extends TomcatBaseTest {
-
-    @Test
-    public void doTestgetRequestUriWithQueryString() throws Exception {
-        doTestgetRequestUri(true);
-    }
-
-    @Test
-    public void doTestgetRequestUriWithoutQueryString() throws Exception {
-        doTestgetRequestUri(false);
-    }
-
-    public void doTestgetRequestUri(boolean withQueryString) throws Exception {
-
-        Tomcat tomcat = getTomcatInstance();
-        // Must have a real docBase - just use temp
-        Context ctx = tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterUriServer.Config.class.getName());
-        Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
-
-        tomcat.start();
-
-        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
-        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();
-        String target = "ws://localhost:" + getPort() + TesterUriServer.PATH;
-        if (withQueryString) {
-            target += "?a=b";
-        }
-        URI uri = new URI(target);
-        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
-                clientEndpointConfig, uri);
-
-        CountDownLatch latch = new CountDownLatch(1);
-        BasicText handler = new BasicText(latch);
-        wsSession.addMessageHandler(handler);
-        wsSession.getBasicRemote().sendText("Hello");
-
-        System.out.println("Sent Hello message, waiting for data");
-
-        // Ignore the latch result as the message count test below will tell us
-        // if the right number of messages arrived
-        handler.getLatch().await(60, TimeUnit.SECONDS);
-
-        Queue<String> messages = handler.getMessages();
-        Assert.assertEquals(1, messages.size());
-        for (String message : messages) {
-            Assert.assertEquals(uri.toString(), message);
-        }
-    }
-}

==================================================
