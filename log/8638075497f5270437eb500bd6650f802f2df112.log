8638075497f5270437eb500bd6650f802f2df112
==================================================
ConcurrentLinkedQueue is currently the biggest contributor to garbage in the load test so this is intended as a replacement.
==================================================
Mark Emlyn
==================================================
Sun Sep 23 15:20:38 2012 +0000
==================================================
ConcurrentStack.java
ConcurrentLinkedQueue is currently the biggest contributor to garbage in the load test so this is intended as a replacement.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1389076 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestConcurrentStack.java
new file mode 100644
index 0000000000..9a56376b05
--- /dev/null
+++ b/java/org/apache/tomcat/util/collections/ConcurrentStack.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.collections;
+
+/**
+ * This is intended as a (mostly) GC-free alternative to
+ * {@link java.util.concurrent.LinkedBlockingDeque} where the requirement is to
+ * create a pool of re-usable objects with no requirement to shrink the pool.
+ * The aim is to provide the bare minimum of required functionality as quickly
+ * as possible with minimum garbage.
+ */
+public class ConcurrentStack<T> {
+
+    private int size = 128;
+    /*
+     * Points to the next available object in the stack
+     */
+    private int index = -1;
+
+    private Object[] stack = new Object[size];
+
+    public synchronized void push(T obj) {
+        index++;
+        if (index == size) {
+            expand();
+        }
+        stack[index] = obj;
+    }
+
+    @SuppressWarnings("unchecked")
+    public synchronized T pop() {
+        if (index == -1) {
+            return null;
+        }
+        return (T) stack[index--];
+    }
+
+    private void expand() {
+        int newSize = size * 2;
+        Object[] newStack = new Object[newSize];
+        System.arraycopy(stack, 0, newStack, 0, size);
+        // This is the only point where garbage is created by throwing away the
+        // old array. Note it is only the array, not the contents, that becomes
+        // garbage.
+        stack = newStack;
+        size = newSize;
+    }
+}

==================================================
TesterPerformanceConcurrentStack.java
new file mode 100644
index 0000000000..503123b4a0
--- /dev/null
+++ b/test/org/apache/tomcat/util/collections/TestConcurrentStack.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.collections;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestConcurrentStack {
+
+    @Test
+    public void testPopEmpty() {
+        ConcurrentStack<Object> stack = new ConcurrentStack<>();
+        Assert.assertNull(stack.pop());
+    }
+
+    @Test
+    public void testPushPopOrder() {
+        ConcurrentStack<Object> stack = new ConcurrentStack<>();
+
+        Object o1 = new Object();
+        Object o2 = new Object();
+        Object o3 = new Object();
+        Object o4 = new Object();
+
+        stack.push(o1);
+        stack.push(o2);
+        stack.push(o3);
+        stack.push(o4);
+
+        Assert.assertSame(stack.pop(), o4);
+        Assert.assertSame(stack.pop(), o3);
+        Assert.assertSame(stack.pop(), o2);
+        Assert.assertSame(stack.pop(), o1);
+
+        Assert.assertNull(stack.pop());
+    }
+
+    @Test
+    public void testExpandPushPopOrder() {
+        ConcurrentStack<Object> stack = new ConcurrentStack<>();
+
+        Object o1 = new Object();
+        Object o2 = new Object();
+        Object o3 = new Object();
+        Object o4 = new Object();
+
+        for (int i = 0; i < 300; i++) {
+            stack.push(o1);
+            stack.push(o2);
+            stack.push(o3);
+            stack.push(o4);
+        }
+
+        for (int i = 0; i < 300; i++) {
+            Assert.assertSame(stack.pop(), o4);
+            Assert.assertSame(stack.pop(), o3);
+            Assert.assertSame(stack.pop(), o2);
+            Assert.assertSame(stack.pop(), o1);
+        }
+
+        Assert.assertNull(stack.pop());
+    }
+
+}

==================================================
