39fbc5ed2de5375674f1ebaec463b0744b7f7a95
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58655
==================================================
Mark Thomas
==================================================
Mon Nov 30 16:25:19 2015 +0000
==================================================
RemoteIpFilter.java
index 8a15de31b1..5462600fae 100644
--- a/java/org/apache/catalina/filters/LocalStrings.properties
+++ b/java/org/apache/catalina/filters/LocalStrings.properties
@@ -47,5 +47,4 @@ expiresFilter.invalidDurationUnit=Invalid duration unit (years|months|weeks|days
 httpHeaderSecurityFilter.committed=Unable to add HTTP headers since response is already committed on entry to the HTTP header security Filter
 httpHeaderSecurityFilter.clickjack.invalid=An invalid value [{0}] was specified for the anti click-jacking header
 
-remoteIpFilter.invalidLocation=Failed to modify the rewrite location [{0}] to use scheme [{1}] and port [{2}]
 restCsrfPreventionFilter.invalidNonce=CSRF nonce validation failed
\ No newline at end of file

==================================================
TestRemoteIpFilter.java
index 4979ba3473..48d4b2159a 100644
--- a/java/org/apache/catalina/filters/RemoteIpFilter.java
+++ b/java/org/apache/catalina/filters/RemoteIpFilter.java
@@ -17,8 +17,6 @@
 package org.apache.catalina.filters;
 
 import java.io.IOException;
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
@@ -41,7 +39,6 @@ import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpServletResponseWrapper;
 import javax.servlet.http.PushBuilder;
 
 import org.apache.catalina.AccessLog;
@@ -49,7 +46,6 @@ import org.apache.catalina.Globals;
 import org.apache.catalina.core.ApplicationPushBuilder;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>
@@ -651,48 +647,6 @@ public class RemoteIpFilter extends GenericFilter {
         }
     }
 
-    public static class XForwardedResponse extends HttpServletResponseWrapper {
-
-        private final String scheme;
-        private final int port;
-
-        public XForwardedResponse(HttpServletResponse response, String scheme, int port) {
-            super(response);
-            this.scheme = scheme;
-            if ("http".equals(scheme) && port == 80 || "https".equals(scheme) && port == 443) {
-                this.port = -1;
-            } else {
-                this.port = port;
-            }
-        }
-
-        @Override
-        public void sendRedirect(String location) throws IOException {
-            /*
-             * This isn't particularly pretty but, given that:
-             * a) there is no setRequest() method on ServletResponse (even if
-             *    there were the response could still access this information
-             *    via some internal structure for speed); and
-             * b) that this is meant to work on any Servlet container;
-             * this was the cleanest way I could come up with for doing this.
-             */
-            super.sendRedirect(location);
-            String redirect = getHeader("location");
-            URI newRedirectURI;
-            try {
-                URI redirectURI = new URI(redirect);
-                newRedirectURI = new URI(scheme, redirectURI.getUserInfo(),
-                        redirectURI.getHost(), port, redirectURI.getPath(),
-                        redirectURI.getQuery(), redirectURI.getFragment());
-            } catch (URISyntaxException e) {
-                log.warn(sm.getString("remoteIpFilter.invalidLocation",
-                        location, scheme, Integer.toString(port)));
-                return;
-            }
-            reset();
-            super.sendRedirect(newRedirectURI.toString());
-        }
-    }
 
     /**
      * {@link Pattern} for a comma delimited string that support whitespace characters
@@ -709,7 +663,6 @@ public class RemoteIpFilter extends GenericFilter {
      * Logger
      */
     private static final Log log = LogFactory.getLog(RemoteIpFilter.class);
-    private static final StringManager sm = StringManager.getManager(RemoteIpFilter.class);
 
     protected static final String PROTOCOL_HEADER_PARAMETER = "protocolHeader";
 
@@ -883,15 +836,6 @@ public class RemoteIpFilter extends GenericFilter {
                 }
             }
 
-            HttpServletResponse xResponse;
-            if (xRequest.getScheme() != null &&
-                    (!xRequest.getScheme().equals(request.getScheme()) ||
-                    xRequest.getServerPort() != request.getServerPort())) {
-                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());
-            } else {
-                xResponse = response;
-            }
-
             if (log.isDebugEnabled()) {
                 log.debug("Incoming request " + request.getRequestURI() + " with originalRemoteAddr '" + request.getRemoteAddr()
                         + "', originalRemoteHost='" + request.getRemoteHost() + "', originalSecure='" + request.isSecure()
@@ -914,7 +858,7 @@ public class RemoteIpFilter extends GenericFilter {
                 request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,
                         Integer.valueOf(xRequest.getServerPort()));
             }
-            chain.doFilter(xRequest, xResponse);
+            chain.doFilter(xRequest, response);
         } else {
             if (log.isDebugEnabled()) {
                 log.debug("Skip RemoteIpFilter for request " + request.getRequestURI() + " with originalRemoteAddr '"

==================================================
