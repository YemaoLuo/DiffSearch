8c720fe30b6dcf98e53d1c53a67c7854ce3e016a
==================================================
Complete alignment of process() for finishing requests
==================================================
Mark Emlyn
==================================================
Mon Sep 5 15:21:22 2011 +0000
==================================================
AbstractHttp11Processor.java
Complete alignment of process() for finishing requests

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1165331 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index dd2e9d449b..48aaed42ef 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -93,6 +93,11 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     protected boolean sendfileInProgress = false;
 
 
+    /**
+     * Flag that indicates if the request headers have been completely read.
+     */
+    protected boolean readComplete = true;
+
     /**
      * HTTP/1.1 flag.
      */

==================================================
Http11NioProcessor.java
index ed8e21fb42..f413559899 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -183,6 +183,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         comet = false;
         openSocket = false;
         sendfileInProgress = false;
+        readComplete = true;
 
         int soTimeout = endpoint.getSoTimeout();
 
@@ -320,7 +321,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
 
             if (breakKeepAliveLoop(socketWrapper)) {
-            	break;
+                break;
             }
         }
 
@@ -334,10 +335,17 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             if (sendfileInProgress) {
                 return SocketState.SENDFILE;
             } else {
-                return (openSocket) ? SocketState.OPEN : SocketState.CLOSED;
+                if (openSocket) {
+                    if (readComplete) {
+                        return SocketState.OPEN;
+                    } else {
+                        return SocketState.LONG;
+                    }
+                } else {
+                    return SocketState.CLOSED;
+                }
             }
         }
-        
     }
 
 

==================================================
Http11Processor.java
index 503b1329c3..6345996dee 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -212,6 +212,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         comet = false;
         openSocket = false;
         sendfileInProgress = false;
+        readComplete = true;
         
         int soTimeout = endpoint.getSoTimeout();
 
@@ -220,7 +221,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         }
 
         boolean keptAlive = false;
-        boolean readComplete = true;
         
         while (!error && keepAlive && !comet && !isAsync() && !endpoint.isPaused()) {
             //always default to our soTimeout
@@ -382,24 +382,37 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
             rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
 
             if (breakKeepAliveLoop(socketWrapper)) {
-            	break;
+                break;
             }
         }
 
         rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
+
         if (error || endpoint.isPaused()) {
             return SocketState.CLOSED;
         } else if (comet || isAsync()) {
             return SocketState.LONG;
         } else {
-            return (openSocket) ? (readComplete?SocketState.OPEN:SocketState.LONG) : SocketState.CLOSED;
+            if (sendfileInProgress) {
+                return SocketState.SENDFILE;
+            } else {
+                if (openSocket) {
+                    if (readComplete) {
+                        return SocketState.OPEN;
+                    } else {
+                        return SocketState.LONG;
+                    }
+                } else {
+                    return SocketState.CLOSED;
+                }
+            }
         }
     }
 
 
     @Override
     protected boolean breakKeepAliveLoop(
-    		SocketWrapper<NioChannel> socketWrapper) {
+            SocketWrapper<NioChannel> socketWrapper) {
         // Do sendfile as needed: add socket to sendfile and end
         if (sendfileData != null && !error) {
             ((KeyAttachment) socketWrapper).setSendfileData(sendfileData);
@@ -411,7 +424,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                     (KeyAttachment) socketWrapper, true, true);
             return true;
         }
-    	return false;
+        return false;
     }
 
 

==================================================
