5c87bbbe4c74ef484fcb911524c4a3ff7669aa06
==================================================
JMX needs to be handled a bit differently. Random object names are not all that great.
==================================================
Filip Hanik
==================================================
Wed Apr 15 04:58:06 2009 +0000
==================================================
ConnectionPool.java
JMX needs to be handled a bit differently. Random object names are not all that great.
In this way, one can control the JMX registration completely from the outside.



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@765051 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DataSource.java
index 7efb077119..dbb7471401 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -779,17 +779,18 @@ public class ConnectionPool {
     protected void finalize(PooledConnection con) {
         
     }
+    
+    public org.apache.tomcat.jdbc.pool.jmx.ConnectionPool getJmxPool() {
+        return jmxPool;
+    }
 
     protected void startJmx() {
         try {
-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-            ObjectName name = new ObjectName(POOL_JMX_TYPE_PREFIX+"ConnectionPool,name="+getName());
             if ("1.5".equals(System.getProperty("java.specification.version"))) {
                 jmxPool = new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this);
             } else {
                 jmxPool = new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this,true);
             }
-            mbs.registerMBean(jmxPool, name);
         } catch (Exception x) {
             log.warn("Unable to start JMX integration for connection pool. Instance["+getName()+"] can't be monitored.",x);
         }
@@ -797,10 +798,6 @@ public class ConnectionPool {
 
     protected void stopJmx() {
         try {
-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-            ObjectName name = new ObjectName(POOL_JMX_TYPE_PREFIX+"ConnectionPool,name="+getName());
-            if (mbs.isRegistered(name))
-                mbs.unregisterMBean(name);
             jmxPool = null;
         }catch (Exception x) {
             log.warn("Unable to stop JMX integration for connection pool. Instance["+getName()+"].",x);

==================================================
DataSourceProxy.java
index 7176678178..94b84a68c8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSource.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSource.java
@@ -16,9 +16,19 @@
  */
 package org.apache.tomcat.jdbc.pool;
 
+import java.lang.management.ManagementFactory;
 import java.sql.SQLException;
+import java.util.Hashtable;
 import java.util.Properties;
 
+import javax.management.InstanceNotFoundException;
+import javax.management.MBeanRegistration;
+import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean;
+
 
 /**
  * A DataSource that can be instantiated through IoC and implements the DataSource interface
@@ -26,7 +36,7 @@ import java.util.Properties;
  * @author Filip Hanik
  * @version 1.0
  */
-public class DataSource extends DataSourceProxy implements javax.sql.DataSource, org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean {
+public class DataSource extends DataSourceProxy implements MBeanRegistration,javax.sql.DataSource, org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean {
 
     public DataSource() {
         super();
@@ -36,6 +46,63 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
         super(poolProperties);
     }
 
+//===============================================================================
+//  Register the actual pool itself under the tomcat.jdbc domain
+//===============================================================================
+    protected volatile ObjectName oname = null;
+    public void postDeregister() {
+        if (oname!=null) unregisterJmx();
+    }
+
+    public void postRegister(Boolean registrationDone) {
+    }
+
+
+    public void preDeregister() throws Exception {
+    }
+
+    public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {
+        try {
+            this.oname = createObjectName(name);
+            if (oname!=null) registerJmx();
+        }catch (MalformedObjectNameException x) {
+            log.error("Unable to create object name for JDBC pool.",x);
+        }
+        return name;   
+    }
+    
+    public ObjectName createObjectName(ObjectName original) throws MalformedObjectNameException {
+        String domain = "tomcat.jdbc";
+        Hashtable<String,String> properties = original.getKeyPropertyList();
+        String origDomain = original.getDomain();
+        properties.put("type", "ConnectionPool");
+        properties.put("class", this.getClass().getName());
+        if (original.getKeyProperty("path")!=null) {
+            properties.put("engine", origDomain);
+        }
+        ObjectName name = new ObjectName(domain,properties);
+        return name;
+    }
+    
+    protected void registerJmx() {
+        try {
+            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+            mbs.registerMBean(pool.getJmxPool(), oname);
+        } catch (Exception e) {
+            log.error("Unable to register JDBC pool with JMX",e);
+        }
+    }
+    
+    protected void unregisterJmx() {
+        try {
+            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+            mbs.unregisterMBean(oname);
+        } catch (InstanceNotFoundException ignore) {
+        } catch (Exception e) {
+            log.error("Unable to unregister JDBC pool with JMX",e);
+        }
+    }
+
 //===============================================================================
 //  Expose JMX attributes through Tomcat's dynamic reflection
 //===============================================================================
@@ -62,6 +129,10 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
             throw new RuntimeException(x);
         }
     }
+    
+    public int getNumActive() {
+        return getActive();
+    }
 
     public String getConnectionProperties() {
         try {
@@ -110,6 +181,10 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
             throw new RuntimeException(x);
         }
     }
+    
+    public int getNumIdle() {
+        return getIdle();
+    }
 
     public int getInitialSize() {
         try {

==================================================
SlowQueryReportJmx.java
index 78146bb45c..5c0a32f28c 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -176,7 +176,9 @@ public class DataSourceProxy  {
             if (pool != null) {
                 final ConnectionPool p = pool;
                 pool = null;
-                if (p!=null) p.close(all);
+                if (p!=null) {
+                    p.close(all);
+                }
             }
         }catch (Exception x) {
             log.warn("Error duing connection pool closure.", x);
@@ -197,7 +199,7 @@ public class DataSourceProxy  {
     public String toString() {
         return super.toString()+"{"+getPoolProperties()+"}";
     }
-
+    
 /*-----------------------------------------------------------------------*/
 //      PROPERTIES WHEN NOT USED WITH FACTORY
 /*------------------------------------------------------------------------*/

==================================================
ConnectionPool.java
index 8c0f06fb5c..a29590bbfc 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
@@ -50,8 +50,8 @@ import org.apache.tomcat.util.modeler.Registry;
  *
  */
 public class SlowQueryReportJmx extends SlowQueryReport {
-    public static final String SLOW_QUERY_NOTIFICATION = "Slow query";
-    public static final String FAILED_QUERY_NOTIFICATION = "Failed query";
+    public static final String SLOW_QUERY_NOTIFICATION = "SLOW QUERY";
+    public static final String FAILED_QUERY_NOTIFICATION = "FAILED QUERY";
 
     protected static CompositeType SLOW_QUERY_TYPE; 
         
@@ -65,6 +65,10 @@ public class SlowQueryReportJmx extends SlowQueryReport {
     
     protected static AtomicLong notifySequence = new AtomicLong(0);
     
+    protected boolean notifyPool = true;
+    
+    protected ConnectionPool pool = null;
+    
     protected static CompositeType getCompositeType() {
         if (SLOW_QUERY_TYPE==null) {
             try {
@@ -85,7 +89,10 @@ public class SlowQueryReportJmx extends SlowQueryReport {
     public void reset(ConnectionPool parent, PooledConnection con) {
         // TODO Auto-generated method stub
         super.reset(parent, con);
-        if (parent!=null) poolName = parent.getName(); 
+        if (parent!=null) {
+            poolName = parent.getName();
+            pool = parent;
+        }
     }
 
 
@@ -99,6 +106,7 @@ public class SlowQueryReportJmx extends SlowQueryReport {
 
     @Override
     public void poolStarted(ConnectionPool pool) {
+        this.pool = pool;
         super.poolStarted(pool);
         this.poolName = pool.getName();
         registerJmx();
@@ -114,16 +122,23 @@ public class SlowQueryReportJmx extends SlowQueryReport {
     protected void notifyJmx(String query, String type) {
         try {
             DynamicMBean mbean = mbeans.get(poolName);
-            if (mbean!=null && mbean instanceof BaseModelMBean) {
-                BaseModelMBean bmbean = (BaseModelMBean)mbean;
-                long sequence = notifySequence.incrementAndGet();
-                Notification notification = 
-                    new Notification(type, 
-                                     mbean, 
-                                     sequence, 
-                                     System.currentTimeMillis(),
-                                     query);
-                bmbean.sendNotification(notification);
+            long sequence = notifySequence.incrementAndGet();
+            
+            if (isNotifyPool()) {
+                if (this.pool!=null && this.pool.getJmxPool()!=null) {
+                    this.pool.getJmxPool().notify(type, query);
+                }
+            } else {
+                if (mbean!=null && mbean instanceof BaseModelMBean) {
+                    Notification notification = 
+                        new Notification(type, 
+                                         mbean, 
+                                         sequence, 
+                                         System.currentTimeMillis(),
+                                         query);
+                    BaseModelMBean bmbean = (BaseModelMBean)mbean;
+                    bmbean.sendNotification(notification);
+                }
             }
         } catch (RuntimeOperationsException e) {
             if (log.isDebugEnabled()) {
@@ -160,6 +175,16 @@ public class SlowQueryReportJmx extends SlowQueryReport {
         return poolName;
     }
     
+    
+    
+    public boolean isNotifyPool() {
+        return notifyPool;
+    }
+
+    public void setNotifyPool(boolean notifyPool) {
+        this.notifyPool = notifyPool;
+    }
+
     /**
      * JMX operation - remove all stats for this connection pool
      */
@@ -205,7 +230,6 @@ public class SlowQueryReportJmx extends SlowQueryReport {
                     registry.unregisterComponent(oname);
                     registry.removeManagedBean(managed);
                 }
-                
             }
         } catch (MalformedObjectNameException e) {
             log.warn("Jmx deregistration failed.",e);
@@ -217,7 +241,10 @@ public class SlowQueryReportJmx extends SlowQueryReport {
     
     protected void registerJmx() {
         try {
-            if (getCompositeType()!=null) {
+            //only if we notify the pool itself
+            if (isNotifyPool()) {
+                
+            } else if (getCompositeType()!=null) {
                 ObjectName oname = new ObjectName(ConnectionPool.POOL_JMX_TYPE_PREFIX+"SlowQueryReport"+",name=" + poolName);
                 Registry registry = Registry.getRegistry(null, null);
                 registry.loadDescriptors(getClass().getPackage().getName(),getClass().getClassLoader());

==================================================
ConnectionPoolMBean.java
index 7d4f7b776f..32e34c40ed 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
@@ -17,12 +17,15 @@ package org.apache.tomcat.jdbc.pool.jmx;
 /**
  * @author Filip Hanik
  */
+import java.util.Iterator;
 import java.util.Properties;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.management.MBeanNotificationInfo;
 import javax.management.Notification;
 import javax.management.NotificationBroadcasterSupport;
+import javax.management.NotificationListener;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -41,6 +44,11 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
      * sequence for JMX notifications
      */
     protected AtomicInteger sequence = new AtomicInteger(0);
+    
+    /**
+     * Listeners that are local and interested in our notifications, no need for JMX
+     */
+    protected ConcurrentLinkedQueue<NotificationListener> listeners = new ConcurrentLinkedQueue<NotificationListener>(); 
 
     public ConnectionPool(org.apache.tomcat.jdbc.pool.ConnectionPool pool) {
         super();
@@ -62,6 +70,8 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
     public static final String NOTIFY_INIT = "INIT FAILED";
     public static final String NOTIFY_CONNECT = "CONNECTION FAILED";
     public static final String NOTIFY_ABANDON = "CONNECTION ABANDONED";
+    public static final String SLOW_QUERY_NOTIFICATION = "SLOW QUERY";
+    public static final String FAILED_QUERY_NOTIFICATION = "FAILED QUERY";
     
     
     
@@ -76,7 +86,7 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
     } 
     
     public static MBeanNotificationInfo[] getDefaultNotificationInfo() {
-        String[] types = new String[] {NOTIFY_INIT, NOTIFY_CONNECT, NOTIFY_ABANDON}; 
+        String[] types = new String[] {NOTIFY_INIT, NOTIFY_CONNECT, NOTIFY_ABANDON, SLOW_QUERY_NOTIFICATION, FAILED_QUERY_NOTIFICATION}; 
         String name = Notification.class.getName(); 
         String description = "A connection pool error condition was met."; 
         MBeanNotificationInfo info = new MBeanNotificationInfo(types, name, description); 
@@ -96,8 +106,11 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
                     this,
                     sequence.incrementAndGet(),
                     System.currentTimeMillis(),
-                    message!=null?message:"");
+                    "["+type+"] "+message);
             sendNotification(n);
+            for (NotificationListener listener : listeners) {
+                listener.handleNotification(n,this);
+            }
             return true;
         }catch (Exception x) {
             if (log.isDebugEnabled()) {
@@ -108,6 +121,14 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
         
     }
     
+    public void addListener(NotificationListener list) {
+        listeners.add(list);
+    }
+    
+    public boolean removeListener(NotificationListener list) {
+        return listeners.remove(list);
+    }
+    
     //=================================================================
     //       POOL STATS
     //=================================================================
@@ -127,6 +148,14 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
     public boolean isPoolSweeperEnabled() {
         return pool.getPoolProperties().isPoolSweeperEnabled();
     }
+    
+    public int getNumIdle() {
+        return getIdle();
+    }
+    
+    public int getNumActive() {
+        return getNumActive();
+    }
 
     //=================================================================
     //       POOL OPERATIONS

==================================================
