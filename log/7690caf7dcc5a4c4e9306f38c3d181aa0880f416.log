7690caf7dcc5a4c4e9306f38c3d181aa0880f416
==================================================
Address CI failures for potentially ambiguous bean methods.
==================================================
Mark Thomas
==================================================
Fri Mar 31 00:36:06 2023 +0100
==================================================
BeanSupportStandalone.java
Address CI failures for potentially ambiguous bean methods.


==================================================
TestBeanSupport.java
index a2531451d2..0414261359 100644
--- a/java/jakarta/el/BeanSupportStandalone.java
+++ b/java/jakarta/el/BeanSupportStandalone.java
@@ -19,6 +19,7 @@ package jakarta.el;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -32,6 +33,15 @@ import jakarta.el.BeanELResolver.BeanProperty;
  */
 class BeanSupportStandalone extends BeanSupport {
 
+    /*
+     * The full JavaBeans implementation has a much more detailed definition of method order that applies to an entire
+     * class. When ordering write methods for a single property, a much simpler comparator can be used because it is
+     * known that the method names are the same, the return parameters are both void and the methods only have a single
+     * parameter.
+     */
+    private static final Comparator<Method> WRITE_METHOD_COMPARATOR =
+            Comparator.comparing(m -> m.getParameterTypes()[0].getName());
+
     @Override
     BeanProperties getBeanProperties(Class<?> type) {
         return new BeanPropertiesStandalone(type);
@@ -133,6 +143,9 @@ class BeanSupportStandalone extends BeanSupport {
                 if (readMethod != null) {
                     type = readMethod.getReturnType();
                 } else {
+                    if (writeMethods.size() > 1) {
+                        writeMethods.sort(WRITE_METHOD_COMPARATOR);
+                    }
                     type = writeMethods.get(0).getParameterTypes()[0];
                 }
                 for (Method candidate : writeMethods) {
@@ -214,4 +227,13 @@ class BeanSupportStandalone extends BeanSupport {
             return writeMethod;
         }
     }
+
+
+    static final class WriteMethodComparator implements Comparator<Method> {
+
+        @Override
+        public int compare(Method m1, Method m2) {
+            return 0;
+        }
+    }
 }

==================================================
