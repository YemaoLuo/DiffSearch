7a3bd0bf8d4b062598c140015864bceb526da20e
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62669
==================================================
Mark Thomas
==================================================
Mon Sep 3 19:08:53 2018 +0000
==================================================
ResponseIncludeWrapper.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62669

When using the SSIFilter and a resource does not specify a content type,
do not force the content type to application/x-octet-stream

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1839983 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSIFilter.java
index 89d491f59d..cd1c2b585f 100644
--- a/java/org/apache/catalina/ssi/ResponseIncludeWrapper.java
+++ b/java/org/apache/catalina/ssi/ResponseIncludeWrapper.java
@@ -22,9 +22,7 @@ import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.util.Locale;
 
-import javax.servlet.ServletContext;
 import javax.servlet.ServletOutputStream;
-import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpServletResponseWrapper;
 
@@ -41,11 +39,9 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
     /**
      * The names of some headers we want to capture.
      */
-    private static final String CONTENT_TYPE = "content-type";
     private static final String LAST_MODIFIED = "last-modified";
 
     protected long lastModified = -1;
-    private String contentType = null;
 
     /**
      * Our ServletOutputStream
@@ -54,24 +50,16 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
     protected ServletOutputStream servletOutputStream;
     protected PrintWriter printWriter;
 
-    private final ServletContext context;
-    private final HttpServletRequest request;
-
     /**
      * Initialize our wrapper with the current HttpServletResponse and
      * ServletOutputStream.
      *
-     * @param context The servlet context
-     * @param request The HttpServletResponse to use
      * @param response The response to use
      * @param captureServletOutputStream The ServletOutputStream to use
      */
-    public ResponseIncludeWrapper(ServletContext context,
-            HttpServletRequest request, HttpServletResponse response,
+    public ResponseIncludeWrapper(HttpServletResponse response,
             ServletOutputStream captureServletOutputStream) {
         super(response);
-        this.context = context;
-        this.request = request;
         this.captureServletOutputStream = captureServletOutputStream;
     }
 
@@ -152,41 +140,6 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
         return lastModified;
     }
 
-    /**
-     * Returns the value of the <code>content-type</code> header field.
-     *
-     * @return the content type of the resource referenced by this
-     *   <code>ResponseIncludeWrapper</code>, or <code>null</code> if not known.
-     */
-    @Override
-    public String getContentType() {
-        if (contentType == null) {
-            String url = request.getRequestURI();
-            String mime = context.getMimeType(url);
-            if (mime != null) {
-                setContentType(mime);
-            } else {
-                // return a safe value
-                setContentType("application/x-octet-stream");
-            }
-        }
-        return contentType;
-    }
-
-    /**
-     * Sets the value of the <code>content-type</code> header field.
-     *
-     * @param mime a mime type
-     */
-    @Override
-    public void setContentType(String mime) {
-        contentType = mime;
-        if (contentType != null) {
-            getResponse().setContentType(contentType);
-        }
-    }
-
-
     @Override
     public void addDateHeader(String name, long value) {
         super.addDateHeader(name, value);
@@ -205,8 +158,6 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
             if (lastModified != -1) {
                 this.lastModified = lastModified;
             }
-        } else if (lname.equals(CONTENT_TYPE)) {
-            contentType = value;
         }
     }
 
@@ -228,8 +179,6 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
             if (lastModified != -1) {
                 this.lastModified = lastModified;
             }
-        } else if (lname.equals(CONTENT_TYPE)) {
-            contentType = value;
         }
     }
 }

==================================================
SSIServletExternalResolver.java
index fd053d3346..6bad9f3c60 100644
--- a/java/org/apache/catalina/ssi/SSIFilter.java
+++ b/java/org/apache/catalina/ssi/SSIFilter.java
@@ -92,8 +92,7 @@ public class SSIFilter extends GenericFilter {
 
         // setup to capture output
         ByteArrayServletOutputStream basos = new ByteArrayServletOutputStream();
-        ResponseIncludeWrapper responseIncludeWrapper =
-                new ResponseIncludeWrapper(getServletContext(),req, res, basos);
+        ResponseIncludeWrapper responseIncludeWrapper = new ResponseIncludeWrapper(res, basos);
 
         // process remainder of filter chain
         chain.doFilter(req, responseIncludeWrapper);
@@ -106,7 +105,7 @@ public class SSIFilter extends GenericFilter {
         String contentType = responseIncludeWrapper.getContentType();
 
         // is this an allowed type for SSI processing?
-        if (contentTypeRegEx.matcher(contentType).matches()) {
+        if (contentType != null && contentTypeRegEx.matcher(contentType).matches()) {
             String encoding = res.getCharacterEncoding();
 
             // set up SSI processing

==================================================
