4ecdc51683d0a941105f22d50d9077ce9baefbbd
==================================================
Fix some FindBugs warnings in the test cases
==================================================
Mark Thomas
==================================================
Fri Oct 13 12:01:23 2017 +0000
==================================================
TestPersistentProviderRegistrations.java
Fix some FindBugs warnings in the test cases

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1812119 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestSendFile.java
index 5728e4b517..d7ec696a7c 100644
--- a/test/org/apache/catalina/authenticator/jaspic/TestPersistentProviderRegistrations.java
+++ b/test/org/apache/catalina/authenticator/jaspic/TestPersistentProviderRegistrations.java
@@ -81,7 +81,7 @@ public class TestPersistentProviderRegistrations {
         validateSimple(end);
 
         if (f.exists()) {
-            f.delete();
+            Assert.assertTrue("Failed to clean up [" + f + "]", f.delete());
         }
     }
 }

==================================================
TestAsyncContextImpl.java
index 8428c5c8f9..f15b6aec58 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -88,7 +88,7 @@ public class TestSendFile extends TomcatBaseTest {
             }
         } finally {
             for (File f : files) {
-                f.delete();
+                Assert.assertTrue("Failed to clean up [" + f + "]", f.delete());
             }
         }
     }
@@ -205,7 +205,9 @@ public class TestSendFile extends TomcatBaseTest {
                 req.setAttribute(Globals.SENDFILE_FILENAME_ATTR, file.getAbsolutePath());
                 req.setAttribute(Globals.SENDFILE_FILE_START_ATTR, Long.valueOf(0));
                 req.setAttribute(Globals.SENDFILE_FILE_END_ATTR, Long.valueOf(file.length()));
-                file.delete();
+                if (!file.delete()) {
+                    throw new ServletException("Failed to delete [" + file + "]");
+                }
             } else {
                 byte[] c = new byte[1024];
                 Random rd = new Random();

==================================================
TestVirtualContext.java
index a081cae224..c8cf5af0dd 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -2032,7 +2032,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         private static final long serialVersionUID = 1L;
 
-        private AsyncContext asyncContext;
+        private transient AsyncContext asyncContext;
 
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)

==================================================
TestWebappClassLoaderExecutorMemoryLeak.java
index e9938ed4ba..acdfe5de0c 100644
--- a/test/org/apache/catalina/loader/TestVirtualContext.java
+++ b/test/org/apache/catalina/loader/TestVirtualContext.java
@@ -308,7 +308,7 @@ public class TestVirtualContext extends TomcatBaseTest {
         assertPageContains("/test/annotatedServlet", MyAnnotatedServlet.MESSAGE);
         tomcat.stop();
         FileUtils.deleteDirectory(additionWebInfClasses);
-        tempFile.delete();
+        Assert.assertTrue("Failed to clean up [" + tempFile + "]", tempFile.delete());
     }
 
     private void assertPageContains(String pageUrl, String expectedBody)

==================================================
TestWebappClassLoaderWeaving.java
index fe32ceebda..2fc7b0ad93 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
@@ -83,7 +83,7 @@ public class TestWebappClassLoaderExecutorMemoryLeak extends TomcatBaseTest {
         long n = 1000L;
         int tpSize = 10;
 
-        public volatile ThreadPoolExecutor tpe;
+        public transient volatile ThreadPoolExecutor tpe;
 
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp)

==================================================
TestHostConfigAutomaticDeployment.java
index f5469802f9..ec18f3be0d 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
@@ -32,6 +32,7 @@ import static org.junit.Assert.fail;
 
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -54,7 +55,7 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
         File webappDocBaseFile = new File(webappDocBase);
         WEBAPP_DOC_BASE = webappDocBaseFile.getCanonicalPath();
         File classes = new File(webappDocBaseFile, "/WEB-INF/classes/" + PACKAGE_PREFIX);
-        classes.mkdirs();
+        Assert.assertTrue("Failed to create [" + classes + "]", classes.mkdirs());
 
         copyResource(PACKAGE_PREFIX + "/TesterNeverWeavedClass.class",
                 new File(classes, "TesterNeverWeavedClass.class"));

==================================================
TomcatBaseTest.java
index 2fb86dd8e5..d37b765c40 100644
--- a/test/org/apache/catalina/startup/TestHostConfigAutomaticDeployment.java
+++ b/test/org/apache/catalina/startup/TestHostConfigAutomaticDeployment.java
@@ -1123,32 +1123,32 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
                 if (xml == null) {
                     Assert.fail();
                 } else {
-                    xml.setLastModified(System.currentTimeMillis() -
-                            10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+                    Assert.assertTrue("Failed to set last modified for [" + xml + "]", xml.setLastModified(
+                            System.currentTimeMillis() - 10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
                 }
                 break;
             case EXT:
                 if (ext == null) {
                     Assert.fail();
                 } else {
-                    ext.setLastModified(System.currentTimeMillis() -
-                            10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+                    Assert.assertTrue("Failed to set last modified for [" + ext + "]", ext.setLastModified(
+                            System.currentTimeMillis() - 10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
                 }
                 break;
             case WAR:
                 if (war == null) {
                     Assert.fail();
                 } else {
-                    war.setLastModified(System.currentTimeMillis() -
-                            10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+                    Assert.assertTrue("Failed to set last modified for [" + war + "]", war.setLastModified(
+                            System.currentTimeMillis() - 10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
                 }
                 break;
             case DIR:
                 if (dir == null) {
                     Assert.fail();
                 } else {
-                    dir.setLastModified(System.currentTimeMillis() -
-                            10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+                    Assert.assertTrue("Failed to set last modified for [" + dir + "]", dir.setLastModified(
+                            System.currentTimeMillis() - 10 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
                 }
                 break;
             default:
@@ -1697,8 +1697,8 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
         }
         Files.copy(src.toPath(), dest.toPath());
         // Make sure that HostConfig thinks the WAR has been modified.
-        dest.setLastModified(
-                System.currentTimeMillis() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+        Assert.assertTrue("Failed to set last modified for [" + dest + "]", dest.setLastModified(
+                System.currentTimeMillis() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
         return dest;
     }
 
@@ -1710,8 +1710,8 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
         }
         Files.copy(XML_SOURCE.toPath(), xml.toPath());
         // Make sure that HostConfig thinks the xml has been modified.
-        xml.setLastModified(
-                System.currentTimeMillis() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+        Assert.assertTrue("Failed to set last modified for [" + xml + "]", xml.setLastModified(
+                System.currentTimeMillis() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
         return xml;
     }
 
@@ -1746,8 +1746,8 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
             fos.write(context.toString().getBytes(StandardCharsets.ISO_8859_1));
         }
         // Make sure that HostConfig thinks the xml has been modified.
-        xml.setLastModified(
-                System.currentTimeMillis() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+        Assert.assertTrue("Failed to set last modified for [" + xml + "]", xml.setLastModified(
+                System.currentTimeMillis() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
         return xml;
     }
 
@@ -1945,7 +1945,8 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
 
         File war = createWar(srcWar, true);
         // Make the WAR appear to have been created earlier
-        war.setLastModified(war.lastModified() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS);
+        Assert.assertTrue("Failed to set last modified for [" + war + "]", war.setLastModified(
+                war.lastModified() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS));
 
         tomcat.addWebapp(APP_NAME.getPath(), war.getAbsolutePath());
         tomcat.start();
@@ -1954,10 +1955,12 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
         File dir = new File(host.getAppBase(), APP_NAME.getBaseName());
         // Make the DIR appear to have been created earlier
         long lastModified = war.lastModified() - 2 * HostConfig.FILE_MODIFICATION_RESOLUTION_MS;
-        dir.setLastModified(lastModified);
+        Assert.assertTrue("Failed to set last modified for [" + dir + "]",
+                dir.setLastModified(lastModified));
 
         host.stop();
-        war.setLastModified(System.currentTimeMillis());
+        Assert.assertTrue("Failed to set last modified for [" + war + "]",
+                war.setLastModified(System.currentTimeMillis()));
         host.start();
         if (autoDeploy) {
             host.backgroundProcess();

==================================================
