ee4fffb4f24c45c7736fdcd8976135758cf0ba9c
==================================================
Fix the SSLSupport TODO.
==================================================
Mark Thomas
==================================================
Thu May 21 09:44:39 2015 +0000
==================================================
InternalHttpUpgradeHandler.java
Fix the SSLSupport TODO.
The StreamProcessor will need access to this to provide TLS information on the underlying connection to web applications via the Servlet API. Implementation for the relevant action codes *is not* included in this commit.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1680781 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UpgradeProcessorBase.java
index 3732f50b9c..5f814699cb 100644
--- a/java/org/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler.java
+++ b/java/org/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler.java
@@ -19,6 +19,7 @@ package org.apache.coyote.http11.upgrade;
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
@@ -32,4 +33,6 @@ public interface InternalHttpUpgradeHandler extends HttpUpgradeHandler {
     SocketState upgradeDispatch(SocketStatus status);
 
     void setSocketWrapper(SocketWrapperBase<?> wrapper);
+
+    void setSslSupport(SSLSupport sslSupport);
 }
\ No newline at end of file

==================================================
UpgradeProcessorExternal.java
index 9743013ab7..b995104310 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
@@ -26,7 +26,6 @@ import javax.servlet.http.WebConnection;
 import org.apache.coyote.Processor;
 import org.apache.coyote.Request;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
-import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public abstract class UpgradeProcessorBase implements Processor, WebConnection {
@@ -106,12 +105,6 @@ public abstract class UpgradeProcessorBase implements Processor, WebConnection {
     }
 
 
-    @Override
-    public final void setSslSupport(SSLSupport sslSupport) {
-        // NOOP
-    }
-
-
     @Override
     public ByteBuffer getLeftoverInput() {
         return null;

==================================================
UpgradeProcessorInternal.java
index f158625746..49c2ca053c 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
@@ -26,6 +26,7 @@ import javax.servlet.http.HttpUpgradeHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
@@ -117,4 +118,12 @@ public class UpgradeProcessorExternal extends UpgradeProcessorBase {
         }
         return SocketState.UPGRADED;
     }
+
+
+    // ----------------------------------------- Unimplemented Processor methods
+
+    @Override
+    public final void setSslSupport(SSLSupport sslSupport) {
+        // NO-OP
+    }
 }

==================================================
Http2UpgradeHandler.java
index 54b361c123..48f319382f 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java
@@ -23,6 +23,7 @@ import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
 
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
@@ -50,6 +51,12 @@ public class UpgradeProcessorInternal extends UpgradeProcessorBase {
     }
 
 
+    @Override
+    public final void setSslSupport(SSLSupport sslSupport) {
+        internalHttpUpgradeHandler.setSslSupport(sslSupport);
+    }
+
+
     // --------------------------------------------------- AutoCloseable methods
 
     @Override

==================================================
StreamProcessor.java
index ebc962c2dd..5d30122010 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -37,6 +37,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
@@ -80,8 +81,11 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     private static final byte[] GOAWAY = { 0x07, 0x00, 0x00, 0x00, 0x00 };
 
     private final int connectionId;
+
     private final Adapter adapter;
     private volatile SocketWrapperBase<?> socketWrapper;
+    private volatile SSLSupport sslSupport;
+
     private volatile boolean initialized = false;
     private volatile ConnectionPrefaceParser connectionPrefaceParser =
             new ConnectionPrefaceParser();
@@ -132,6 +136,12 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     }
 
 
+    @Override
+    public void setSslSupport(SSLSupport sslSupport) {
+        this.sslSupport = sslSupport;
+    }
+
+
     @Override
     public SocketState upgradeDispatch(SocketStatus status) {
         if (log.isDebugEnabled()) {
@@ -372,6 +382,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
 
         // Process this stream on a container thread
         StreamProcessor streamProcessor = new StreamProcessor(stream, adapter, socketWrapper);
+        streamProcessor.setSslSupport(sslSupport);
         socketWrapper.getEndpoint().getExecutor().execute(streamProcessor);
     }
 

==================================================
WsHttpUpgradeHandler.java
index a6c51c514c..d9d9603836 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -40,6 +40,8 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
 
     private final Stream stream;
 
+    private volatile SSLSupport sslSupport;
+
 
     public StreamProcessor(Stream stream, Adapter adapter, SocketWrapperBase<?> socketWrapper) {
         super(stream.getCoyoteRequest(), stream.getCoyoteResponse());
@@ -99,8 +101,7 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
 
     @Override
     public void setSslSupport(SSLSupport sslSupport) {
-        // TODO Auto-generated method stub
-
+        this.sslSupport = sslSupport;
     }
 
 

==================================================
TestUpgradeInternalHandler.java
index 23ed320660..771de40811 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -34,6 +34,7 @@ import org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
@@ -222,4 +223,11 @@ public class WsHttpUpgradeHandler implements InternalHttpUpgradeHandler {
          */
         wsSession.onClose(cr);
     }
+
+
+    @Override
+    public void setSslSupport(SSLSupport sslSupport) {
+        // NO-OP. WebSocket has no requirement to access the TLS information
+        // associated with the underlying connection.
+    }
 }

==================================================
