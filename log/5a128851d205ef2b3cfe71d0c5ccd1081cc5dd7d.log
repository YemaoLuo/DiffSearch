5a128851d205ef2b3cfe71d0c5ccd1081cc5dd7d
==================================================
Connection reset exceptions are not consistent. Roll out special handling for Windows + NIO2 more widely.
==================================================
Mark Thomas
==================================================
Mon Jul 17 22:12:53 2017 +0000
==================================================
Http2TestBase.java
Connection reset exceptions are not consistent. Roll out special handling for Windows + NIO2 more widely.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1802225 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHttp2Section_4_2.java
index c998ced7fb..4e4d9ff63e 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -22,6 +22,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.Socket;
+import java.net.SocketException;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -36,6 +37,7 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.junit.Assert;
+import org.junit.Assume;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleException;
@@ -805,6 +807,34 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    void handleGoAwayResponse(int lastStream) throws Http2Exception, IOException {
+        handleGoAwayResponse(lastStream, Http2Error.PROTOCOL_ERROR);
+    }
+
+
+    void handleGoAwayResponse(int lastStream, Http2Error expectedError)
+            throws Http2Exception, IOException {
+        try {
+            parser.readFrame(true);
+
+            Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
+                    "0-Goaway-[" + lastStream + "]-[" + expectedError.getCode() + "]-["));
+        } catch (SocketException se) {
+            // On some platform / Connector combinations (e.g. Windows / NIO2),
+            // the TCP connection close will be processed before the client gets
+            // a chance to read the connection close frame.
+            Tomcat tomcat = getTomcatInstance();
+            Connector connector = tomcat.getConnector();
+
+            Assume.assumeTrue("This test is only expected to trigger an exception with NIO2",
+                    connector.getProtocolHandlerClassName().contains("Nio2"));
+
+            Assume.assumeTrue("This test is only expected to trigger an exception on Windo9ws",
+                    System.getProperty("os.name").startsWith("Windows"));
+        }
+    }
+
+
     static void setOneBytes(byte[] output, int firstByte, int value) {
         output[firstByte] = (byte) (value & 0xFF);
     }

==================================================
TestHttp2Section_4_3.java
index 590f4cdb73..557e8f4a27 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_2.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_2.java
@@ -16,15 +16,9 @@
  */
 package org.apache.coyote.http2;
 
-import java.net.SocketException;
-
 import org.junit.Assert;
-import org.junit.Assume;
 import org.junit.Test;
 
-import org.apache.catalina.connector.Connector;
-import org.apache.catalina.startup.Tomcat;
-
 /**
  * Unit tests for Section 4.2 of
  * <a href="https://tools.ietf.org/html/rfc7540">RFC 7540</a>.
@@ -61,22 +55,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         os.write(settings);
 
-        try {
-            // Read GOAWAY frame
-            parser.readFrame(true);
-
-            Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                    "0-Goaway-[1]-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
-        } catch (SocketException se) {
-            // On some platform / Connector combinations (e.g. Windows / NIO2),
-            // the TCP connection close will be processed before the client gets
-            // a chance to read the connection close frame.
-            Tomcat tomcat = getTomcatInstance();
-            Connector connector = tomcat.getConnector();
-
-            Assume.assumeTrue("This test is only expected to trigger an exception with NIO2",
-                    connector.getProtocolHandlerClassName().contains("Nio2"));
-        }
+        handleGoAwayResponse(1, Http2Error.FRAME_SIZE_ERROR);
     }
 
     @Test
@@ -98,11 +77,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         os.write(ping);
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1,  Http2Error.FRAME_SIZE_ERROR);
     }
 
 
@@ -124,11 +99,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         os.write(ping);
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1,  Http2Error.FRAME_SIZE_ERROR);
     }
 
 
@@ -151,7 +122,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         os.write(priority);
 
-        // Read GOAWAY frame
+        // Read Stream reset frame
         parser.readFrame(true);
 
         Assert.assertTrue(output.getTrace(),

==================================================
TestHttp2Section_5_1.java
index c581bb082e..52ad968149 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
@@ -46,11 +46,7 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
         // Process the request
         writeFrame(frameHeader, headersPayload);
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.COMPRESSION_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1,  Http2Error.COMPRESSION_ERROR);
     }
 
 
@@ -91,10 +87,6 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
 
         sendPing();
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.COMPRESSION_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1,  Http2Error.COMPRESSION_ERROR);
     }
 }

==================================================
TestHttp2Section_5_5.java
index 2724f5938e..78fe1d6334 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java
@@ -16,16 +16,11 @@
  */
 package org.apache.coyote.http2;
 
-import java.net.SocketException;
 import java.nio.ByteBuffer;
 
 import org.junit.Assert;
-import org.junit.Assume;
 import org.junit.Test;
 
-import org.apache.catalina.connector.Connector;
-import org.apache.catalina.startup.Tomcat;
-
 /**
  * Unit tests for Section 5.ยง of
  * <a href="https://tools.ietf.org/html/rfc7540">RFC 7540</a>.
@@ -41,10 +36,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
 
         sendWindowUpdate(3, 200);
 
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -54,10 +46,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
 
         sendData(3, new byte[] {});
 
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -75,12 +64,10 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         Assert.assertEquals(getSimpleResponseTrace(3), output.getTrace());
         output.clearTrace();
 
-        // This should trigger a stream error
+        // This should trigger a connection error
         sendData(3, new byte[] {});
-        parser.readFrame(true);
 
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[3]-[" + Http2Error.STREAM_CLOSED.getCode() + "]-["));
+        handleGoAwayResponse(3,  Http2Error.STREAM_CLOSED);
     }
 
 
@@ -116,12 +103,10 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
     public void testClosedInvalidFrame02() throws Exception {
         http2Connect();
 
-        // Stream 1 is closed. This should trigger a stream error
+        // Stream 1 is closed. This should trigger a connection error
         sendData(1, new byte[] {});
-        parser.readFrame(true);
 
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.STREAM_CLOSED.getCode() + "]-["));
+        handleGoAwayResponse(1,  Http2Error.STREAM_CLOSED);
     }
 
 
@@ -140,22 +125,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         buildSimpleGetRequestPart1(frameHeader, headersPayload, 4);
         writeFrame(frameHeader, headersPayload);
 
-        try {
-            // headers
-            parser.readFrame(true);
-
-            Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                    "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
-        } catch (SocketException se) {
-            // On some platform / Connector combinations (e.g. Windows / NIO2),
-            // the TCP connection close will be processed before the client gets
-            // a chance to read the connection close frame.
-            Tomcat tomcat = getTomcatInstance();
-            Connector connector = tomcat.getConnector();
-
-            Assume.assumeTrue("This test is only expected to trigger an exception with NIO2",
-                    connector.getProtocolHandlerClassName().contains("Nio2"));
-        }
+        handleGoAwayResponse(1);
     }
 
 
@@ -176,11 +146,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         os.write(frameHeader);
         os.flush();
 
-        // headers
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[5]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(5);
     }
 
 
@@ -200,10 +166,7 @@ public class TestHttp2Section_5_1 extends Http2TestBase {
         // closed.
         sendSimpleGetRequest(3);
 
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[5]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(5);
     }
 
 

==================================================
TestHttp2Section_6_1.java
index ec212e1970..44ba7ec8db 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_5.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_5.java
@@ -91,11 +91,6 @@ public class TestHttp2Section_5_5 extends Http2TestBase {
         os.write(UNKNOWN_FRAME);
         os.flush();
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.COMPRESSION_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1, Http2Error.COMPRESSION_ERROR);
     }
-
 }

==================================================
TestHttp2Section_6_2.java
index 99fd9cea65..3e1d282c74 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_1.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_1.java
@@ -112,10 +112,7 @@ public class TestHttp2Section_6_1 extends Http2TestBase {
         os.write(dataFrame);
         os.flush();
 
-        parser.readFrame(true);
-
-        String trace = output.getTrace();
-        Assert.assertTrue(trace, trace.startsWith("0-Goaway-[1]-[1]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -139,10 +136,7 @@ public class TestHttp2Section_6_1 extends Http2TestBase {
         os.write(dataFrame);
         os.flush();
 
-        parser.readFrame(true);
-
-        String trace = output.getTrace();
-        Assert.assertTrue(trace, trace.startsWith("0-Goaway-[1]-[1]-["));
+        handleGoAwayResponse(1);
     }
 
 

==================================================
TestHttp2Section_6_3.java
index 60c7b1b8da..ae9665ca96 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_2.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_2.java
@@ -16,16 +16,11 @@
  */
 package org.apache.coyote.http2;
 
-import java.net.SocketException;
 import java.nio.ByteBuffer;
 
 import org.junit.Assert;
-import org.junit.Assume;
 import org.junit.Test;
 
-import org.apache.catalina.connector.Connector;
-import org.apache.catalina.startup.Tomcat;
-
 /**
  * Unit tests for Section 6.2 of
  * <a href="https://tools.ietf.org/html/rfc7540">RFC 7540</a>.
@@ -46,22 +41,7 @@ public class TestHttp2Section_6_2 extends Http2TestBase {
         buildSimpleGetRequestPart1(frameHeader, headersPayload, 0);
         writeFrame(frameHeader, headersPayload);
 
-        try {
-            // Go away
-            parser.readFrame(true);
-
-            Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                    "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
-        } catch (SocketException se) {
-            // On some platform / Connector combinations (e.g. Windows / NIO2),
-            // the TCP connection close will be processed before the client gets
-            // a chance to read the connection close frame.
-            Tomcat tomcat = getTomcatInstance();
-            Connector connector = tomcat.getConnector();
-
-            Assume.assumeTrue("This test is only expected to trigger an exception with NIO2",
-                    connector.getProtocolHandlerClassName().contains("Nio2"));
-        }
+        handleGoAwayResponse(1);
     }
 
 
@@ -86,11 +66,7 @@ public class TestHttp2Section_6_2 extends Http2TestBase {
 
         sendSimpleGetRequest(3, padding);
 
-        // Goaway
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -114,10 +90,7 @@ public class TestHttp2Section_6_2 extends Http2TestBase {
         os.write(headerFrame);
         os.flush();
 
-        parser.readFrame(true);
-
-        String trace = output.getTrace();
-        Assert.assertTrue(trace, trace.startsWith("0-Goaway-[1]-[1]-["));
+        handleGoAwayResponse(1);
     }
 
 

==================================================
TestHttp2Section_6_4.java
index 7b49d14802..3aa24a772e 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_3.java
@@ -37,11 +37,7 @@ public class TestHttp2Section_6_3 extends Http2TestBase {
 
         sendPriority(0, 1, 15);
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -58,11 +54,7 @@ public class TestHttp2Section_6_3 extends Http2TestBase {
 
         sendPriority(5, 3, 15);
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.COMPRESSION_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1, Http2Error.COMPRESSION_ERROR);
     }
 
 
@@ -85,7 +77,7 @@ public class TestHttp2Section_6_3 extends Http2TestBase {
         os.write(priorityFrame);
         os.flush();
 
-        // Read GOAWAY frame
+        // Read reset frame
         parser.readFrame(true);
 
         Assert.assertEquals("3-RST-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]\n",

==================================================
TestHttp2Section_6_5.java
index 5a0d54864a..eb8b0d99a9 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_4.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_4.java
@@ -35,11 +35,7 @@ public class TestHttp2Section_6_4 extends Http2TestBase {
 
         sendRst(0, Http2Error.NO_ERROR.getCode());
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -51,11 +47,7 @@ public class TestHttp2Section_6_4 extends Http2TestBase {
         sendPriority(3, 0, 15);
         sendRst(3, Http2Error.NO_ERROR.getCode());
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -78,7 +70,7 @@ public class TestHttp2Section_6_4 extends Http2TestBase {
         os.write(resetFrame);
         os.flush();
 
-        // Read GOAWAY frame
+        // Read reset frame
         parser.readFrame(true);
 
         Assert.assertEquals("3-RST-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]\n",

==================================================
TestHttp2Section_6_7.java
index c400325ba0..d31ce00e90 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_5.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_5.java
@@ -36,11 +36,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
 
         sendSettings(0, true, new SettingValue(1,1));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1, Http2Error.FRAME_SIZE_ERROR);
     }
 
 
@@ -52,11 +48,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
         sendPriority(3, 0, 15);
         sendSettings(3, true, new SettingValue(1,1));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -78,11 +70,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
         os.write(resetFrame);
         os.flush();
 
-        // Read GOAWAY frame
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1, Http2Error.FRAME_SIZE_ERROR);
     }
 
 
@@ -95,11 +83,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
 
         sendSettings(0, false, new SettingValue(0x2,0x2));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -110,11 +94,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
 
         sendSettings(0, false, new SettingValue(0x4,1 << 31));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.FLOW_CONTROL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1, Http2Error.FLOW_CONTROL_ERROR);
     }
 
 
@@ -125,11 +105,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
 
         sendSettings(0, false, new SettingValue(0x5,1 << 31));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 

==================================================
TestHttp2Section_6_8.java
index a7fe7d582b..7a50f2321e 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_7.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_7.java
@@ -67,11 +67,7 @@ public class TestHttp2Section_6_7 extends Http2TestBase {
 
         sendPing(1, false, "76543210".getBytes(StandardCharsets.ISO_8859_1));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 
@@ -82,11 +78,6 @@ public class TestHttp2Section_6_7 extends Http2TestBase {
 
         sendPing(0, false, "6543210".getBytes(StandardCharsets.ISO_8859_1));
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1, Http2Error.FRAME_SIZE_ERROR);
     }
-
 }

==================================================
TestHttp2Section_6_9.java
index 823d6962f7..5f03bd1ee7 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_8.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_8.java
@@ -91,11 +91,7 @@ public class TestHttp2Section_6_8 extends Http2TestBase {
 
         sendGoaway(1, 1, Http2Error.NO_ERROR.getCode(), null);
 
-        // Go away
-        parser.readFrame(true);
-
-        Assert.assertTrue(output.getTrace(), output.getTrace().startsWith(
-                "0-Goaway-[1]-[" + Http2Error.PROTOCOL_ERROR.getCode() + "]-["));
+        handleGoAwayResponse(1);
     }
 
 

==================================================
