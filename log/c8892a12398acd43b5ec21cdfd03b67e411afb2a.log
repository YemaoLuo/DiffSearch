c8892a12398acd43b5ec21cdfd03b67e411afb2a
==================================================
Fix SpotBugs issues in unit tests
==================================================
Mark Thomas
==================================================
Fri Mar 6 12:33:29 2020 +0000
==================================================
TestUpgradeInternalHandler.java
index 93b4473562..6d25bbddc3 100644
--- a/res/findbugs/filter-false-positives.xml
+++ b/res/findbugs/filter-false-positives.xml
@@ -1608,6 +1608,7 @@
     <Or>
       <Method name="testAuthMethodBadMethod"/>
       <Method name="testBadBase64Char"/>
+      <Method name="testBadBase64InlineEquals"/>
     </Or>
     <Bug pattern="DLS_DEAD_LOCAL_STORE"/>
   </Match>
@@ -1617,6 +1618,12 @@
     <Field name="t"/>
     <Bug pattern="MSF_MUTABLE_SERVLET_FIELD"/>
   </Match>
+  <Match>
+    <!-- Container handles close -->
+    <Class name="org.apache.catalina.connector.TestOutputBuffer$WritingServlet"/>
+    <Method name="doGet"/>
+    <Bug pattern="OS_OPEN_STREAM"/>
+  </Match>
   <Match>
     <!-- ByteChunk.toString() can return null -->
     <Class name="org.apache.catalina.connector.TestRequest"/>
@@ -1904,6 +1911,12 @@
     <Field name="bug55772IsSecondRequest"/>
     <Bug pattern="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"/>
   </Match>
+  <Match>
+    <!-- Latch isn't essential so no need to check return -->
+    <Class name="org.apache.coyote.http2.TestAsyncTimeout"/>
+    <Method name="testTimeout"/>
+    <Bug pattern="RV_RETURN_VALUE_IGNORED"/>
+  </Match>
   <Match>
     <!-- Result is negated to compare result when order is reversed -->
     <Class name="org.apache.el.TestELEvaluation" />

==================================================
TestAsyncTimeout.java
index eb826f8526..a2c3a940a3 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
@@ -224,7 +224,7 @@ public class TestUpgradeInternalHandler extends TomcatBaseTest {
             }, buffer);
             System.out.println("CompletionState: " + state);
             // Test zero length write used by websockets
-            state = wrapper.write(BlockingMode.BLOCK, 10, TimeUnit.SECONDS, null, SocketWrapperBase.COMPLETE_WRITE_WITH_COMPLETION, new CompletionHandler<Long, Void>() {
+            wrapper.write(BlockingMode.BLOCK, 10, TimeUnit.SECONDS, null, SocketWrapperBase.COMPLETE_WRITE_WITH_COMPLETION, new CompletionHandler<Long, Void>() {
                 @Override
                 public void completed(Long result, Void attachment) {
                     System.out.println("Write: " + result.longValue());

==================================================
