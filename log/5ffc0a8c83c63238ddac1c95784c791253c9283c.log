5ffc0a8c83c63238ddac1c95784c791253c9283c
==================================================
Misc code clean-up
==================================================
Mark Emlyn
==================================================
Sat Apr 23 21:53:00 2011 +0000
==================================================
CGIServlet.java
Misc code clean-up
 - Eclipse warnings
 - Remove unused code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1096243 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ChannelInterceptor.java
index 9931840245..df8f20e609 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -354,8 +354,7 @@ public final class CGIServlet extends HttpServlet {
      *
      */
     protected void printServletEnvironment(ServletOutputStream out,
-        HttpServletRequest req,
-        @SuppressWarnings("unused") HttpServletResponse res)
+        HttpServletRequest req, HttpServletResponse res)
     throws IOException {
 
         // Document the properties from ServletRequest

==================================================
ChannelListener.java
index 2f75734c85..6860775efa 100644
--- a/java/org/apache/catalina/tribes/ChannelInterceptor.java
+++ b/java/org/apache/catalina/tribes/ChannelInterceptor.java
@@ -108,6 +108,7 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * to allow interceptors to clean up resources, time out object and 
      * perform actions that are unrelated to sending/receiving data.
      */
+    @Override
     public void heartbeat();
     
     /**

==================================================
ChannelInterceptorBase.java
index ea81f2e197..6dd619ead9 100644
--- a/java/org/apache/catalina/tribes/ChannelListener.java
+++ b/java/org/apache/catalina/tribes/ChannelListener.java
@@ -56,6 +56,7 @@ public interface ChannelListener {
      * @return boolean
      * @see Object#equals(Object)
      */
+    @Override
     public boolean equals(Object listener);
 
     /**
@@ -63,6 +64,7 @@ public interface ChannelListener {
      * @return int
      * @see Object#hashCode()
      */
+    @Override
     public int hashCode();
 
 }

==================================================
BufferPool15Impl.java
index 0c96fcfa7e..1745a3940a 100644
--- a/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
+++ b/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
@@ -20,8 +20,6 @@ import org.apache.catalina.tribes.ChannelException;
 import org.apache.catalina.tribes.ChannelInterceptor;
 import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
 
 /**
  * Abstract class for the interceptor base class.
@@ -31,8 +29,6 @@ import org.apache.juli.logging.LogFactory;
 
 public abstract class ChannelInterceptorBase implements ChannelInterceptor {
 
-    private static final Log log = LogFactory.getLog(ChannelInterceptorBase.class);
-
     private ChannelInterceptor next;
     private ChannelInterceptor previous;
     //default value, always process
@@ -47,35 +43,43 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
         return ((optionFlag&messageFlags) == optionFlag);
     }
 
+    @Override
     public final void setNext(ChannelInterceptor next) {
         this.next = next;
     }
 
+    @Override
     public final ChannelInterceptor getNext() {
         return next;
     }
 
+    @Override
     public final void setPrevious(ChannelInterceptor previous) {
         this.previous = previous;
     }
 
+    @Override
     public void setOptionFlag(int optionFlag) {
         this.optionFlag = optionFlag;
     }
 
+    @Override
     public final ChannelInterceptor getPrevious() {
         return previous;
     }
 
+    @Override
     public int getOptionFlag() {
         return optionFlag;
     }
 
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws
         ChannelException {
         if (getNext() != null) getNext().sendMessage(destination, msg, payload);
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if (getPrevious() != null) getPrevious().messageReceived(msg);
     }
@@ -84,16 +88,19 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
         return true;
     }
 
+    @Override
     public void memberAdded(Member member) {
         //notify upwards
         if (getPrevious() != null) getPrevious().memberAdded(member);
     }
 
+    @Override
     public void memberDisappeared(Member member) {
         //notify upwards
         if (getPrevious() != null) getPrevious().memberDisappeared(member);
     }
 
+    @Override
     public void heartbeat() {
         if (getNext() != null) getNext().heartbeat();
     }
@@ -101,6 +108,7 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
     /**
      * has members
      */
+    @Override
     public boolean hasMembers() {
         if ( getNext()!=null )return getNext().hasMembers();
         else return false;
@@ -110,6 +118,7 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
      * Get all current cluster members
      * @return all members or empty array
      */
+    @Override
     public Member[] getMembers() {
         if ( getNext()!=null ) return getNext().getMembers();
         else return null;
@@ -120,6 +129,7 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
      * @param mbr Member
      * @return Member
      */
+    @Override
     public Member getMember(Member mbr) {
         if ( getNext()!=null) return getNext().getMember(mbr);
         else return null;
@@ -130,6 +140,7 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
      *
      * @return Member
      */
+    @Override
     public Member getLocalMember(boolean incAlive) {
         if ( getNext()!=null ) return getNext().getLocalMember(incAlive);
         else return null;
@@ -146,6 +157,7 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
      * SND_RX_SEQ - starts the replication receiver<BR>
      * @throws ChannelException if a startup error occurs or the service is already started.
      */
+    @Override
     public void start(int svc) throws ChannelException {
         if ( getNext()!=null ) getNext().start(svc);
     }
@@ -161,10 +173,12 @@ public abstract class ChannelInterceptorBase implements ChannelInterceptor {
      * SND_RX_SEQ - stops the replication receiver<BR>
      * @throws ChannelException if a startup error occurs or the service is already started.
      */
+    @Override
     public void stop(int svc) throws ChannelException {
         if (getNext() != null) getNext().stop(svc);
     }
     
+    @Override
     public void fireInterceptorEvent(InterceptorEvent event) {
         //empty operation
     }

==================================================
ChannelData.java
index 3cc2b1553d..54b4a0b5a0 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool15Impl.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool15Impl.java
@@ -29,11 +29,13 @@ class BufferPool15Impl implements BufferPool.BufferPoolAPI {
     protected AtomicInteger size = new AtomicInteger(0);
     protected ConcurrentLinkedQueue<XByteBuffer> queue = new ConcurrentLinkedQueue<XByteBuffer>();
 
+    @Override
     public void setMaxSize(int bytes) {
         this.maxSize = bytes;
     }
 
 
+    @Override
     public XByteBuffer getBuffer(int minSize, boolean discard) {
         XByteBuffer buffer = queue.poll();
         if ( buffer != null ) size.addAndGet(-buffer.getCapacity());
@@ -44,6 +46,7 @@ class BufferPool15Impl implements BufferPool.BufferPoolAPI {
         return buffer;
     }
 
+    @Override
     public void returnBuffer(XByteBuffer buffer) {
         if ( (size.get() + buffer.getCapacity()) <= maxSize ) {
             size.addAndGet(buffer.getCapacity());
@@ -51,6 +54,7 @@ class BufferPool15Impl implements BufferPool.BufferPoolAPI {
         }
     }
 
+    @Override
     public void clear() {
         queue.clear();
         size.set(0);

==================================================
AbstractSender.java
index 8ec8515a8c..f976e133fa 100644
--- a/java/org/apache/catalina/tribes/io/ChannelData.java
+++ b/java/org/apache/catalina/tribes/io/ChannelData.java
@@ -95,30 +95,35 @@ public class ChannelData implements ChannelMessage {
     /**
      * @return Returns the message byte buffer
      */
+    @Override
     public XByteBuffer getMessage() {
         return message;
     }
     /**
      * @param message The message to send.
      */
+    @Override
     public void setMessage(XByteBuffer message) {
         this.message = message;
     }
     /**
      * @return Returns the timestamp.
      */
+    @Override
     public long getTimestamp() {
         return timestamp;
     }
     /**
      * @param timestamp The timestamp to send
      */
+    @Override
     public void setTimestamp(long timestamp) {
         this.timestamp = timestamp;
     }
     /**
      * @return Returns the uniqueId.
      */
+    @Override
     public byte[] getUniqueId() {
         return uniqueId;
     }
@@ -133,6 +138,7 @@ public class ChannelData implements ChannelMessage {
      * see org.apache.catalina.tribes.Channel#sendMessage(org.apache.catalina.tribes.Member[], java.io.Serializable, int)
      *                                                 
      */
+    @Override
     public int getOptions() {
         return options;
     }
@@ -141,6 +147,7 @@ public class ChannelData implements ChannelMessage {
      * 
      * @param options the message options
      */
+    @Override
     public void setOptions(int options) {
         this.options = options;
     }
@@ -149,6 +156,7 @@ public class ChannelData implements ChannelMessage {
      * Returns the source or reply-to address
      * @return Member
      */
+    @Override
     public Member getAddress() {
         return address;
     }
@@ -157,6 +165,7 @@ public class ChannelData implements ChannelMessage {
      * Sets the source or reply-to address
      * @param address Member
      */
+    @Override
     public void setAddress(Member address) {
         this.address = address;
     }
@@ -312,6 +321,7 @@ public class ChannelData implements ChannelMessage {
      * Complete clone
      * @return ClusterData
      */
+    @Override
     public Object deepclone() {
         byte[] d = this.getDataPackage();
         return ChannelData.getDataFromPackage(d);

==================================================
Base64.java
index 5424550278..39c14a4f5d 100644
--- a/java/org/apache/catalina/tribes/transport/AbstractSender.java
+++ b/java/org/apache/catalina/tribes/transport/AbstractSender.java
@@ -101,6 +101,7 @@ public abstract class AbstractSender implements DataSender {
      * @throws IOException
      * TODO Implement this org.apache.catalina.tribes.transport.DataSender method
      */
+    @Override
     public abstract void connect() throws IOException;
 
     /**
@@ -108,6 +109,7 @@ public abstract class AbstractSender implements DataSender {
      *
      * TODO Implement this org.apache.catalina.tribes.transport.DataSender method
      */
+    @Override
     public abstract void disconnect();
 
     /**
@@ -116,6 +118,7 @@ public abstract class AbstractSender implements DataSender {
      * @return boolean
      * TODO Implement this org.apache.catalina.tribes.transport.DataSender method
      */
+    @Override
     public boolean keepalive() {
         boolean disconnect = false;
         if (isUdpBased()) disconnect = true; //always disconnect UDP, TODO optimize the keepalive handling
@@ -129,10 +132,12 @@ public abstract class AbstractSender implements DataSender {
         this.connected = connected;
     }
 
+    @Override
     public boolean isConnected() {
         return connected;
     }
 
+    @Override
     public long getConnectTime() {
         return connectTime;
     }
@@ -150,6 +155,7 @@ public abstract class AbstractSender implements DataSender {
         return keepAliveTime;
     }
 
+    @Override
     public int getRequestCount() {
         return requestCount;
     }
@@ -230,10 +236,12 @@ public abstract class AbstractSender implements DataSender {
         return throwOnFailedAck;
     }
 
+    @Override
     public void setKeepAliveCount(int keepAliveCount) {
         this.keepAliveCount = keepAliveCount;
     }
 
+    @Override
     public void setKeepAliveTime(long keepAliveTime) {
         this.keepAliveTime = keepAliveTime;
     }
@@ -242,14 +250,17 @@ public abstract class AbstractSender implements DataSender {
         this.requestCount = requestCount;
     }
 
+    @Override
     public void setRxBufSize(int rxBufSize) {
         this.rxBufSize = rxBufSize;
     }
 
+    @Override
     public void setTimeout(long timeout) {
         this.timeout = timeout;
     }
 
+    @Override
     public void setTxBufSize(int txBufSize) {
         this.txBufSize = txBufSize;
     }

==================================================
ActionCode.java
index 7681672afc..c5f037d8bd 100644
--- a/java/org/apache/catalina/util/Base64.java
+++ b/java/org/apache/catalina/util/Base64.java
@@ -80,34 +80,6 @@ public final class  Base64
         lookUpBase64Alphabet[63] = (byte) '/';
     }
 
-    public static boolean isBase64( String isValidString )
-    {
-        return isArrayByteBase64(isValidString.getBytes());
-    }
-
-    public static boolean isBase64( byte octect )
-    {
-        //shall we ignore white space? JEFF??
-        return (octect == PAD || base64Alphabet[octect] != -1);
-    }
-
-    public static boolean isArrayByteBase64( byte[] arrayOctect )
-    {
-        int length = arrayOctect.length;
-        if (length == 0)
-        {
-            // shouldn't a 0 length array be valid base64 data?
-            // return false;
-            return true;
-        }
-        for (int i=0; i < length; i++)
-        {
-            if ( !Base64.isBase64(arrayOctect[i]) )
-                return false;
-        }
-        return true;
-    }
-
     /**
      * Encodes hex octets into Base64.
      *

==================================================
ArrayStack.java
index c268658f19..9e23899358 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -40,7 +40,6 @@ public enum ActionCode {
 
     CUSTOM,
     RESET,
-    WEBAPP,
 
     /**
      * Hook called after request, but before recycling. Can be used for logging,
@@ -71,12 +70,6 @@ public enum ActionCode {
      */
     REQ_SSL_ATTRIBUTE,
 
-    /**
-     * Chain for request creation. Called each time a new request is created
-     * (requests are recycled).
-     */
-    NEW_REQUEST,
-
     /**
      * Callback for lazy evaluation - extract the SSL-certificate (including
      * forcing a re-handshake if necessary)

==================================================
BaseAttributeFilter.java
index 71817be552..221bae9219 100644
--- a/java/org/apache/tomcat/util/digester/ArrayStack.java
+++ b/java/org/apache/tomcat/util/digester/ArrayStack.java
@@ -136,33 +136,4 @@ public class ArrayStack<E> extends ArrayList<E> {
         add(item);
         return item;
     }
-
-
-    /**
-     * Returns the one-based position of the distance from the top that the
-     * specified object exists on this stack, where the top-most element is
-     * considered to be at distance <code>1</code>.  If the object is not
-     * present on the stack, return <code>-1</code> instead.  The
-     * <code>equals()</code> method is used to compare to the items
-     * in this stack.
-     *
-     * @param object  the object to be searched for
-     * @return the 1-based depth into the stack of the object, or -1 if not found
-     */
-    public int search(E object) {
-        int i = size() - 1;        // Current index
-        int n = 1;                 // Current distance
-        while (i >= 0) {
-            Object current = get(i);
-            if ((object == null && current == null) ||
-                (object != null && object.equals(current))) {
-                return n;
-            }
-            i--;
-            n++;
-        }
-        return -1;
-    }
-
-
 }

==================================================
BaseModelMBean.java
index 6ef7b5b2e8..2405638829 100644
--- a/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
+++ b/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
@@ -122,6 +122,7 @@ public class BaseAttributeFilter implements NotificationFilter {
      *     includes the name of the attribute in this notification</li>
      * </ul>
      */
+    @Override
     public boolean isNotificationEnabled(Notification notification) {
 
         if (notification == null)

==================================================
BaseNotificationBroadcaster.java
index c5438bebd6..251a42c1d8 100644
--- a/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
+++ b/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
@@ -163,6 +163,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
+    @Override
     public Object getAttribute(String name)
         throws AttributeNotFoundException, MBeanException,
             ReflectionException {
@@ -217,6 +218,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      *
      * @param names Names of the requested attributes
      */
+    @Override
     public AttributeList getAttributes(String names[]) {
 
         // Validate the input parameters
@@ -246,6 +248,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
     /**
      * Return the <code>MBeanInfo</code> object for this MBean.
      */
+    @Override
     public MBeanInfo getMBeanInfo() {
         return managedBean.getMBeanInfo();
     }
@@ -270,6 +273,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception ReflectioNException if a Java reflection exception
      *  occurs when invoking a method
      */
+    @Override
     public Object invoke(String name, Object params[], String signature[])
         throws MBeanException, ReflectionException 
     {
@@ -370,6 +374,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
+    @Override
     public void setAttribute(Attribute attribute)
         throws AttributeNotFoundException, MBeanException,
         ReflectionException
@@ -458,6 +463,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      *
      * @return The list of attributes that were set and their new values
      */
+    @Override
     public AttributeList setAttributes(AttributeList attributes) {
         AttributeList response = new AttributeList();
 
@@ -581,6 +587,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      *
      * @exception IllegalArgumentException if the listener parameter is null
      */
+    @Override
     public void addAttributeChangeNotificationListener
         (NotificationListener listener, String name, Object handback)
         throws IllegalArgumentException {
@@ -611,6 +618,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception ListenerNotFoundException if this listener is not
      *  registered in the MBean
      */
+    @Override
     public void removeAttributeChangeNotificationListener
         (NotificationListener listener, String name)
         throws ListenerNotFoundException {
@@ -660,6 +668,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception RuntimeOperationsException wraps IllegalArgumentException
      *  when the specified notification is <code>null</code> or invalid
      */
+    @Override
     public void sendAttributeChangeNotification
         (AttributeChangeNotification notification)
         throws MBeanException, RuntimeOperationsException {
@@ -689,6 +698,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception RuntimeOperationsException wraps IllegalArgumentException
      *  when the specified notification is <code>null</code> or invalid
      */
+    @Override
     public void sendAttributeChangeNotification
         (Attribute oldValue, Attribute newValue)
         throws MBeanException, RuntimeOperationsException {
@@ -724,6 +734,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception RuntimeOperationsException wraps IllegalArgumentException
      *  when the specified notification is <code>null</code> or invalid
      */
+    @Override
     public void sendNotification(Notification notification)
         throws MBeanException, RuntimeOperationsException {
 
@@ -749,6 +760,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception RuntimeOperationsException wraps IllegalArgumentException
      *  when the specified notification is <code>null</code> or invalid
      */
+    @Override
     public void sendNotification(String message)
         throws MBeanException, RuntimeOperationsException {
 
@@ -777,6 +789,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      *
      * @exception IllegalArgumentException if the listener parameter is null
      */
+    @Override
     public void addNotificationListener(NotificationListener listener,
                                         NotificationFilter filter,
                                         Object handback)
@@ -811,6 +824,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * Return an <code>MBeanNotificationInfo</code> object describing the
      * notifications sent by this MBean.
      */
+    @Override
     public MBeanNotificationInfo[] getNotificationInfo() {
 
         // Acquire the set of application notifications
@@ -863,6 +877,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
      * @exception ListenerNotFoundException if this listener is not
      *  registered in the MBean
      */
+    @Override
     public void removeNotificationListener(NotificationListener listener)
         throws ListenerNotFoundException {
 
@@ -1103,6 +1118,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
     // XXX We can add some method patterns here- like setName() and
     // setDomain() for code that doesn't implement the Registration
 
+    @Override
     public ObjectName preRegister(MBeanServer server,
                                   ObjectName name)
             throws Exception
@@ -1116,18 +1132,21 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
         return oname;
     }
 
+    @Override
     public void postRegister(Boolean registrationDone) {
         if( resource instanceof MBeanRegistration ) {
             ((MBeanRegistration)resource).postRegister(registrationDone);
         }
     }
 
+    @Override
     public void preDeregister() throws Exception {
         if( resource instanceof MBeanRegistration ) {
             ((MBeanRegistration)resource).preDeregister();
         }
     }
 
+    @Override
     public void postDeregister() {
         if( resource instanceof MBeanRegistration ) {
             ((MBeanRegistration)resource).postDeregister();

==================================================
