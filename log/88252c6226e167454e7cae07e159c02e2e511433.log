88252c6226e167454e7cae07e159c02e2e511433
==================================================
Create AbstractEndpoint.processSocketAsync() which will enable some further refactoring in the AJP processors.
==================================================
Mark Emlyn
==================================================
Tue Sep 3 09:51:57 2013 +0000
==================================================
AbstractEndpoint.java
Create AbstractEndpoint.processSocketAsync() which will enable some further refactoring in the AJP processors.
This requires adding generics to the endpoint so this patch also deals with the side effects of adding generics.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519623 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index b91fcc2d62..00b6d82be6 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -43,7 +43,7 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
  * @author Mladen Turk
  * @author Remy Maucherat
  */
-public abstract class AbstractEndpoint {
+public abstract class AbstractEndpoint<S> {
 
     // -------------------------------------------------------------- Constants
     protected static final StringManager sm = StringManager.getManager("org.apache.tomcat.util.net.res");
@@ -589,6 +589,12 @@ public abstract class AbstractEndpoint {
     }
 
 
+    // ---------------------------------------------- Request processing methods
+
+    protected abstract void processSocketAsync(SocketWrapper<S> socketWrapper,
+            SocketStatus socketStatus);
+
+
     // ------------------------------------------------------- Lifecycle methods
 
     /*

==================================================
DefaultServerSocketFactory.java
index 0fbe6537ce..e5d929bf1b 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -63,7 +63,7 @@ import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
  * @author Mladen Turk
  * @author Remy Maucherat
  */
-public class AprEndpoint extends AbstractEndpoint {
+public class AprEndpoint extends AbstractEndpoint<Long> {
 
 
     // -------------------------------------------------------------- Constants
@@ -850,7 +850,8 @@ public class AprEndpoint extends AbstractEndpoint {
     }
 
 
-    public boolean processSocketAsync(SocketWrapper<Long> socket,
+    @Override
+    public void processSocketAsync(SocketWrapper<Long> socket,
             SocketStatus status) {
         try {
             synchronized (socket) {
@@ -871,7 +872,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         if (executor == null) {
                             log.warn(sm.getString("endpoint.warn.noExector",
                                     socket, status));
-                            return false;
+                            return;
                         } else {
                             executor.execute(proc);
                         }
@@ -887,15 +888,12 @@ public class AprEndpoint extends AbstractEndpoint {
             }
         } catch (RejectedExecutionException x) {
             log.warn("Socket processing request was rejected for: "+socket, x);
-            return false;
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
-            return false;
         }
-        return true;
     }
 
     private void destroySocket(long socket) {

==================================================
JIoEndpoint.java
index 06856bd86b..497cfaa712 100644
--- a/java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java
+++ b/java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java
@@ -35,7 +35,7 @@ public class DefaultServerSocketFactory implements ServerSocketFactory {
      *
      * @param endpoint  Unused in this implementation.
      */
-    public DefaultServerSocketFactory(AbstractEndpoint endpoint) {
+    public DefaultServerSocketFactory(AbstractEndpoint<?> endpoint) {
     }
 
     @Override

==================================================
NioEndpoint.java
index ca05050f61..696a84b17e 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -51,7 +51,7 @@ import org.apache.tomcat.util.net.jsse.JSSESocketFactory;
  * @author Yoav Shapira
  * @author Remy Maucherat
  */
-public class JIoEndpoint extends AbstractEndpoint {
+public class JIoEndpoint extends AbstractEndpoint<Socket> {
 
 
     // -------------------------------------------------------------- Constants
@@ -557,12 +557,9 @@ public class JIoEndpoint extends AbstractEndpoint {
      * @param status    Only OPEN and TIMEOUT are used. The others are used for
      *                  Comet requests that are not supported by the BIO (JIO)
      *                  Connector.
-     * @return          <code>true</code> if the socket is passed to the
-     *                  executor, <code>false</code> if something went wrong.
-     *                  Returning <code>false</code> is an indication to close
-     *                  the socket immediately.
      */
-    public boolean processSocketAsync(SocketWrapper<Socket> socket,
+    @Override
+    public void processSocketAsync(SocketWrapper<Socket> socket,
             SocketStatus status) {
         try {
             synchronized (socket) {
@@ -581,7 +578,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                         }
                         // During shutdown, executor may be null - avoid NPE
                         if (!running) {
-                            return false;
+                            return;
                         }
                         getExecutor().execute(proc);
                         //TODO gotta catch RejectedExecutionException and properly handle it
@@ -600,9 +597,7 @@ public class JIoEndpoint extends AbstractEndpoint {
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
-            return false;
         }
-        return true;
     }
 
     protected ConcurrentLinkedQueue<SocketWrapper<Socket>> waitingRequests =

==================================================
SSLImplementation.java
index 7985624aa3..1cd6067458 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -71,7 +71,7 @@ import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
  * @author Remy Maucherat
  * @author Filip Hanik
  */
-public class NioEndpoint extends AbstractEndpoint {
+public class NioEndpoint extends AbstractEndpoint<NioChannel> {
 
 
     // -------------------------------------------------------------- Constants
@@ -600,6 +600,13 @@ public class NioEndpoint extends AbstractEndpoint {
         return true;
     }
 
+
+    @Override
+    protected void processSocketAsync(SocketWrapper<NioChannel> socketWrapper,
+            SocketStatus socketStatus) {
+        dispatchForEvent(socketWrapper.getSocket(), socketStatus, true);
+    }
+
     public boolean dispatchForEvent(NioChannel socket, SocketStatus status, boolean dispatch) {
         if (dispatch && status == SocketStatus.OPEN_READ) {
             socket.getPoller().add(socket, OP_CALLBACK);

==================================================
JSSEImplementation.java
index f79b39f8cf..fd9f9769ae 100644
--- a/java/org/apache/tomcat/util/net/SSLImplementation.java
+++ b/java/org/apache/tomcat/util/net/SSLImplementation.java
@@ -81,11 +81,11 @@ public abstract class SSLImplementation {
     public abstract String getImplementationName();
 
     public abstract ServerSocketFactory getServerSocketFactory(
-            AbstractEndpoint endpoint);
+            AbstractEndpoint<?> endpoint);
 
     public abstract SSLSupport getSSLSupport(Socket sock);
 
     public abstract SSLSupport getSSLSupport(SSLSession session);
 
-    public abstract SSLUtil getSSLUtil(AbstractEndpoint ep);
+    public abstract SSLUtil getSSLUtil(AbstractEndpoint<?> ep);
 }

==================================================
JSSESocketFactory.java
index 6b957c78bf..4b269e9e55 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
@@ -43,7 +43,7 @@ public class JSSEImplementation extends SSLImplementation {
     }
 
     @Override
-    public ServerSocketFactory getServerSocketFactory(AbstractEndpoint endpoint)  {
+    public ServerSocketFactory getServerSocketFactory(AbstractEndpoint<?> endpoint)  {
         return new JSSESocketFactory(endpoint);
     }
 
@@ -58,7 +58,7 @@ public class JSSEImplementation extends SSLImplementation {
     }
 
     @Override
-    public SSLUtil getSSLUtil(AbstractEndpoint endpoint) {
+    public SSLUtil getSSLUtil(AbstractEndpoint<?> endpoint) {
         return new JSSESocketFactory(endpoint);
     }
 }

==================================================
