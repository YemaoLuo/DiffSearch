04d80e264bdceb2daf706f7ec73a31cd13a357be
==================================================
Fix modifier order in org.apache.tomcat.*
==================================================
Mark Emlyn
==================================================
Tue Dec 7 15:40:06 2010 +0000
==================================================
Library.java
Fix modifier order in org.apache.tomcat.*

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1043103 13f79535-47bb-0310-9956-ffa450edef68



==================================================
IntrospectionUtils.java
index e26b53ca05..f887eefef2 100644
--- a/java/org/apache/tomcat/jni/Library.java
+++ b/java/org/apache/tomcat/jni/Library.java
@@ -32,7 +32,7 @@ public final class Library {
     /*
      * A handle to the unique Library singleton instance.
      */
-    static private Library _instance = null;
+    private static Library _instance = null;
 
     private Library()
         throws Exception
@@ -163,7 +163,7 @@ public final class Library {
      * called for any APR library.
      * @param libraryName the name of the library to load
      */
-    static public boolean initialize(String libraryName)
+    public static boolean initialize(String libraryName)
         throws Exception
     {
         if (_instance == null) {

==================================================
Constants.java
index cde2e8ccd3..1c4b313452 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -231,7 +231,7 @@ public final class IntrospectionUtils {
         }
     }
 
-    public final static String PATH_SEPARATOR = System.getProperty("path.separator");
+    public static final String PATH_SEPARATOR = System.getProperty("path.separator");
 
     /**
      * Adds classpath entries from a vector of URL's to the "tc_path_add" System

==================================================
AbstractObjectCreationFactory.java
index cac45f496d..ccd602e1a2 100644
--- a/java/org/apache/tomcat/util/bcel/Constants.java
+++ b/java/org/apache/tomcat/util/bcel/Constants.java
@@ -27,71 +27,71 @@ public interface Constants {
 
   /** One of the access flags for fields, methods, or classes.
    */
-  public final static short ACC_FINAL        = 0x0010;
+  public static final short ACC_FINAL        = 0x0010;
 
   /** One of the access flags for fields, methods, or classes.
    */
-  public final static short ACC_INTERFACE    = 0x0200;
+  public static final short ACC_INTERFACE    = 0x0200;
 
   /** One of the access flags for fields, methods, or classes.
    */
-  public final static short ACC_ABSTRACT     = 0x0400;
+  public static final short ACC_ABSTRACT     = 0x0400;
 
   /** One of the access flags for fields, methods, or classes.
    */
-  public final static short ACC_ENUM         = 0x4000;
+  public static final short ACC_ENUM         = 0x4000;
 
   // Applies to classes compiled by new compilers only
   /** One of the access flags for fields, methods, or classes.
    */
-  public final static short ACC_SUPER        = 0x0020;
+  public static final short ACC_SUPER        = 0x0020;
 
   /** One of the access flags for fields, methods, or classes.
    */
-  public final static short MAX_ACC_FLAG     = ACC_ENUM;
+  public static final short MAX_ACC_FLAG     = ACC_ENUM;
 
   /** The names of the access flags. */
-  public final static String[] ACCESS_NAMES = {
+  public static final String[] ACCESS_NAMES = {
     "public", "private", "protected", "static", "final", "synchronized",
     "volatile", "transient", "native", "interface", "abstract", "strictfp",
     "synthetic", "annotation", "enum"
   };
 
   /** Marks a constant pool entry as type UTF-8.  */
-  public final static byte CONSTANT_Utf8               = 1;
+  public static final byte CONSTANT_Utf8               = 1;
 
   /** Marks a constant pool entry as type Integer.  */
-  public final static byte CONSTANT_Integer            = 3;
+  public static final byte CONSTANT_Integer            = 3;
 
   /** Marks a constant pool entry as type Float.  */
-  public final static byte CONSTANT_Float              = 4;
+  public static final byte CONSTANT_Float              = 4;
 
   /** Marks a constant pool entry as type Long.  */
-  public final static byte CONSTANT_Long               = 5;
+  public static final byte CONSTANT_Long               = 5;
 
   /** Marks a constant pool entry as type Double.  */
-  public final static byte CONSTANT_Double             = 6;
+  public static final byte CONSTANT_Double             = 6;
 
   /** Marks a constant pool entry as a Class.  */
-  public final static byte CONSTANT_Class              = 7;
+  public static final byte CONSTANT_Class              = 7;
 
   /** Marks a constant pool entry as a Field Reference.  */
-  public final static byte CONSTANT_Fieldref           = 9;
+  public static final byte CONSTANT_Fieldref           = 9;
 
   /** Marks a constant pool entry as type String.  */
-  public final static byte CONSTANT_String             = 8;
+  public static final byte CONSTANT_String             = 8;
 
   /** Marks a constant pool entry as a Method Reference.  */
-  public final static byte CONSTANT_Methodref          = 10;
+  public static final byte CONSTANT_Methodref          = 10;
 
   /** Marks a constant pool entry as an Interface Method Reference.  */
-  public final static byte CONSTANT_InterfaceMethodref = 11;
+  public static final byte CONSTANT_InterfaceMethodref = 11;
 
   /** Marks a constant pool entry as a name and type.  */
-  public final static byte CONSTANT_NameAndType        = 12;
+  public static final byte CONSTANT_NameAndType        = 12;
 
   /** The names of the types of entries in a constant pool. */
-  public final static String[] CONSTANT_NAMES = {
+  public static final String[] CONSTANT_NAMES = {
     "", "CONSTANT_Utf8", "", "CONSTANT_Integer",
     "CONSTANT_Float", "CONSTANT_Long", "CONSTANT_Double",
     "CONSTANT_Class", "CONSTANT_String", "CONSTANT_Fieldref",

==================================================
AbstractRulesImpl.java
index 43eaf48cfd..3a88f39523 100644
--- a/java/org/apache/tomcat/util/digester/AbstractObjectCreationFactory.java
+++ b/java/org/apache/tomcat/util/digester/AbstractObjectCreationFactory.java
@@ -25,7 +25,7 @@ import org.xml.sax.Attributes;
  * <p>Abstract base class for <code>ObjectCreationFactory</code>
  * implementations.</p>
  */
-abstract public class AbstractObjectCreationFactory implements ObjectCreationFactory {
+public abstract class AbstractObjectCreationFactory implements ObjectCreationFactory {
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
Mapper.java
index 66e7c0cf8a..af61950f3d 100644
--- a/java/org/apache/tomcat/util/digester/AbstractRulesImpl.java
+++ b/java/org/apache/tomcat/util/digester/AbstractRulesImpl.java
@@ -37,7 +37,7 @@ import java.util.List;
  * @since 1.5
  */
 
-abstract public class AbstractRulesImpl implements Rules {
+public abstract class AbstractRulesImpl implements Rules {
 
     // ------------------------------------------------------------- Fields
     
@@ -117,12 +117,12 @@ abstract public class AbstractRulesImpl implements Rules {
      * @param pattern Nesting pattern to be matched for this Rule
      * @param rule Rule instance to be registered
      */ 
-    abstract protected void registerRule(String pattern, Rule rule);
+    protected abstract void registerRule(String pattern, Rule rule);
 
     /**
      * Clear all existing Rule instance registrations.
      */
-    abstract public void clear();
+    public abstract void clear();
 
 
     /**
@@ -136,7 +136,7 @@ abstract public class AbstractRulesImpl implements Rules {
      *  or <code>null</code> to match regardless of namespace URI
      * @param pattern Nesting pattern to be matched
      */
-    abstract public List<Rule> match(String namespaceURI, String pattern);
+    public abstract List<Rule> match(String namespaceURI, String pattern);
 
 
     /**
@@ -146,6 +146,6 @@ abstract public class AbstractRulesImpl implements Rules {
      * in the order originally registered through the <code>add()</code>
      * method.
      */
-    abstract public List<Rule> rules();
+    public abstract List<Rule> rules();
 
 }

==================================================
Registry.java
index 491d68d766..49f8d33e0d 100644
--- a/java/org/apache/tomcat/util/http/mapper/Mapper.java
+++ b/java/org/apache/tomcat/util/http/mapper/Mapper.java
@@ -1452,7 +1452,7 @@ public final class Mapper {
     // ------------------------------------------------- MapElement Inner Class
 
 
-    protected static abstract class MapElement {
+    protected abstract static class MapElement {
 
         public String name = null;
         public Object object = null;

==================================================
NioSelectorPool.java
index c4c11ec45e..b0d485670c 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -150,7 +150,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      *
      * @since 1.1
      */
-    public synchronized static Registry getRegistry(Object key, Object guard) {
+    public static synchronized Registry getRegistry(Object key, Object guard) {
         Registry localRegistry;
         if( perLoaderRegistries!=null ) {
             if( key==null ) 

==================================================
SSLImplementation.java
index cfaa9626ea..13c1a2eab6 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -45,7 +45,7 @@ public class NioSelectorPool {
     
     private static final Log log = LogFactory.getLog(NioSelectorPool.class);
 
-    protected final static boolean SHARED =
+    protected static final boolean SHARED =
         Boolean.valueOf(System.getProperty("org.apache.tomcat.util.net.NioSelectorShared", "true")).booleanValue();
     
     protected NioBlockingSelector blockingSelector;

==================================================
StringManager.java
index fed3078856..f9a6613314 100644
--- a/java/org/apache/tomcat/util/net/SSLImplementation.java
+++ b/java/org/apache/tomcat/util/net/SSLImplementation.java
@@ -27,7 +27,7 @@ import javax.net.ssl.SSLSession;
 
  @author EKR
  */
-abstract public class SSLImplementation {
+public abstract class SSLImplementation {
     private static final org.apache.juli.logging.Log logger = org.apache.juli.logging.LogFactory
             .getLog(SSLImplementation.class);
 
@@ -78,11 +78,11 @@ abstract public class SSLImplementation {
         }
     }
 
-    abstract public String getImplementationName();
+    public abstract String getImplementationName();
 
-    abstract public ServerSocketFactory getServerSocketFactory();
+    public abstract ServerSocketFactory getServerSocketFactory();
 
-    abstract public SSLSupport getSSLSupport(Socket sock);
+    public abstract SSLSupport getSSLSupport(Socket sock);
 
-    abstract public SSLSupport getSSLSupport(SSLSession session);
+    public abstract SSLSupport getSSLSupport(SSLSession session);
 }

==================================================
