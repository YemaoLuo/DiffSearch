f751bd29019d323377db350c23fc409f5278077e
==================================================
Align indexOf(String, int, int, int) implementations and pull up.
==================================================
Mark Thomas
==================================================
Tue Jan 16 14:39:28 2018 +0000
==================================================
AbstractChunk.java
Align indexOf(String, int, int, int) implementations and pull up.
Use ByteChunnks implementation as it is shorter.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1821251 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ByteChunk.java
index f49a9fc5f6..b1c6ee98b0 100644
--- a/java/org/apache/tomcat/util/buf/AbstractChunk.java
+++ b/java/org/apache/tomcat/util/buf/AbstractChunk.java
@@ -84,6 +84,29 @@ public abstract class AbstractChunk implements Cloneable, Serializable {
     }
 
 
+    public int indexOf(String src, int srcOff, int srcLen, int myOff) {
+        char first = src.charAt(srcOff);
+
+        // Look for first char
+        int srcEnd = srcOff + srcLen;
+
+        mainLoop: for (int i = myOff + start; i <= (end - srcLen); i++) {
+            if (getBufferElement(i) != first) {
+                continue;
+            }
+            // found first char, now look for a match
+            int myPos = i + 1;
+            for (int srcPos = srcOff + 1; srcPos < srcEnd;) {
+                if (getBufferElement(myPos++) != src.charAt(srcPos++)) {
+                    continue mainLoop;
+                }
+            }
+            return i - start; // found it
+        }
+        return -1;
+    }
+
+
     /**
      * Resets the chunk to an uninitialized state.
      */

==================================================
CharChunk.java
index 7a0b162cfe..5ba69fb432 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -731,29 +731,6 @@ public final class ByteChunk extends AbstractChunk {
     }
 
 
-    public int indexOf(String src, int srcOff, int srcLen, int myOff) {
-        char first = src.charAt(srcOff);
-
-        // Look for first char
-        int srcEnd = srcOff + srcLen;
-
-        mainLoop: for (int i = myOff + start; i <= (end - srcLen); i++) {
-            if (buff[i] != first) {
-                continue;
-            }
-            // found first char, now look for a match
-            int myPos = i + 1;
-            for (int srcPos = srcOff + 1; srcPos < srcEnd;) {
-                if (buff[myPos++] != src.charAt(srcPos++)) {
-                    continue mainLoop;
-                }
-            }
-            return i - start; // found it
-        }
-        return -1;
-    }
-
-
     @Override
     protected int getBufferElement(int index) {
         return buff[index];

==================================================
