a8ded9b46c1b8a1961a4247b38eae149f61da1ab
==================================================
Add unit tests for data frames with padding including support for simple POST requests.
==================================================
Mark Thomas
==================================================
Thu Jun 18 09:43:06 2015 +0000
==================================================
Http2Parser.java
Add unit tests for data frames with padding including support for simple POST requests.
Fix errors in parsing of padded data frames.
Make parser responsible for swallowing unwanted data rather than the code using the parser and rename output methods to make this clearer
More debug logging

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1686156 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index e87a8ddd24..92f8f94f94 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -86,7 +86,7 @@ class Http2Parser {
         try {
             validateFrame(expected, frameType, streamId, flags, payloadSize);
         } catch (StreamException se) {
-            swallow(payloadSize);
+            swallow(streamId, payloadSize);
             throw se;
         }
 
@@ -136,28 +136,47 @@ class Http2Parser {
 
         boolean endOfStream = Flags.isEndOfStream(flags);
 
+        int dataLength;
         if (Flags.hasPadding(flags)) {
             byte[] b = new byte[1];
             input.fill(true, b);
             padLength = b[0] & 0xFF;
+            // +1 is for the padding length byte we just read above
+            dataLength = payloadSize - (padLength + 1);
+        } else {
+            dataLength = payloadSize;
         }
 
-        ByteBuffer dest = output.getInputByteBuffer(streamId, payloadSize);
+        if (log.isDebugEnabled()) {
+            String padding;
+            if (Flags.hasPadding(flags)) {
+                padding = Integer.toString(padLength);
+            } else {
+                padding = "none";
+            }
+            log.debug(sm.getString("http2Parser.processFrameData.lengths", connectionId,
+                    Integer.toString(streamId), Integer.toString(dataLength), padding));
+        }
+
+        ByteBuffer dest = output.getInputByteBuffer(streamId, dataLength);
         if (dest == null) {
-            swallow(payloadSize);
+            swallow(streamId, dataLength);
             if (endOfStream) {
                 output.receiveEndOfStream(streamId);
             }
         } else {
             synchronized (dest) {
-                input.fill(true, dest, payloadSize);
+                input.fill(true, dest, dataLength);
                 if (endOfStream) {
                     output.receiveEndOfStream(streamId);
                 }
                 dest.notifyAll();
             }
         }
-        swallow(padLength);
+        if (padLength > 0) {
+            swallow(streamId, padLength);
+            output.swallowedPadding(streamId, padLength);
+        }
     }
 
 
@@ -170,7 +189,7 @@ class Http2Parser {
         try {
             hpackDecoder.setHeaderEmitter(output.headersStart(streamId));
         } catch (StreamException se) {
-            swallow(payloadSize);
+            swallow(streamId, payloadSize);
             throw se;
         }
 
@@ -205,7 +224,7 @@ class Http2Parser {
 
         readHeaderBlock(payloadSize, endOfHeaders);
 
-        swallow(padLength);
+        swallow(streamId, padLength);
 
         if (endOfHeaders) {
             output.headersEnd(streamId);
@@ -386,11 +405,16 @@ class Http2Parser {
 
     private void readUnknownFrame(int streamId, FrameType frameType, int flags, int payloadSize)
             throws IOException {
-        output.swallow(streamId, frameType, flags, payloadSize);
+        swallow(streamId, payloadSize);
+        output.swallowed(streamId, frameType, flags, payloadSize);
     }
 
 
-    private void swallow(int len) throws IOException {
+    private void swallow(int streamId, int len) throws IOException {
+        if (log.isDebugEnabled()) {
+            log.debug(sm.getString("http2Parser.swallow.debug", connectionId,
+                    Integer.toString(streamId), Integer.toString(len)));
+        }
         if (len == 0) {
             return;
         }
@@ -527,6 +551,7 @@ class Http2Parser {
         // Data frames
         ByteBuffer getInputByteBuffer(int streamId, int payloadSize) throws Http2Exception;
         void receiveEndOfStream(int streamId) throws ConnectionException;
+        void swallowedPadding(int streamId, int paddingLength) throws ConnectionException, IOException;
 
         // Header frames
         HeaderEmitter headersStart(int streamId) throws Http2Exception;
@@ -554,6 +579,6 @@ class Http2Parser {
         void incrementWindowSize(int streamId, int increment) throws Http2Exception;
 
         // Testing
-        void swallow(int streamId, FrameType frameType, int flags, int size) throws IOException;
+        void swallowed(int streamId, FrameType frameType, int flags, int size) throws IOException;
     }
 }

==================================================
Http2TestBase.java
index 78a2a272dd..ad4aefca2e 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -44,6 +44,7 @@ http2Parser.preface.io=Unable to read connection preface
 http2Parser.processFrame=Connection [{0}], Stream [{1}], Frame type [{2}], Flags [{3}], Payload size [{4}]
 http2Parser.processFrame.unexpectedType=Expected frame type [{0}] but received frame type [{1}]
 http2Parser.processFrameContinuation.notExpected=Connection [{0}], Continuation frame received for stream [{1}] when no headers were in progress
+http2Parser.processFrameData.lengths=Connection [{0}], Stream [{1}], Data length, [{2}], Padding length [{3}]
 http2Parser.processFrameGoaway.payloadTooSmall=Connection [{0}]: Goaway payload size was [{1}] which is less than the minimum 8
 http2Parser.processFrameHeaders.decodingFailed=There was an error during the HPACK decoding of HTTP headers
 http2Parser.processFrameHeaders.decodingDataLeft=Data left over after HPACK decoding - it should have been consumed
@@ -56,6 +57,7 @@ http2Parser.processFrameSettings.invalidPayloadSize=Settings frame received with
 http2Parser.processFrameWindowUpdate.debug=Connection [{0}], Stream [{1}], Window size increment [{2}]
 http2Parser.processFrameWindowUpdate.invalidIncrement=Window update frame received with an invalid increment size of [0]
 http2Parser.processFrameWindowUpdate.invalidPayloadSize=Window update frame received with an invalid payload size of [{0}]
+http2Parser.swallow.debug=Connection [{0}], Stream [{1}], Swallowed [{2}] bytes
 
 stream.header.debug=Connection [{0}], Stream [{1}], HTTP header [{2}], Value [{3}]
 stream.reprioritisation.debug=Connection [{0}], Stream [{1}], Exclusive [{2}], Parent [{3}], Weight [{4}]

==================================================
TestHttp2Section_6_1.java
index 147fd48636..6490789122 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -193,21 +193,21 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void sendSimplePostRequest(int streamId) throws IOException {
+    protected void sendSimplePostRequest(int streamId, byte[] padding) throws IOException {
         byte[] headersFrameHeader = new byte[9];
         ByteBuffer headersPayload = ByteBuffer.allocate(128);
         byte[] dataFrameHeader = new byte[9];
         ByteBuffer dataPayload = ByteBuffer.allocate(128);
 
         buildPostRequest(headersFrameHeader, headersPayload,
-                dataFrameHeader, dataPayload, streamId);
+                dataFrameHeader, dataPayload, padding, streamId);
         writeFrame(headersFrameHeader, headersPayload);
         writeFrame(dataFrameHeader, dataPayload);
     }
 
 
     protected void buildPostRequest(byte[] headersFrameHeader, ByteBuffer headersPayload,
-            byte[] dataFrameHeader, ByteBuffer dataPayload, int streamId) {
+            byte[] dataFrameHeader, ByteBuffer dataPayload, byte[] padding, int streamId) {
         MimeHeaders headers = new MimeHeaders();
         headers.addValue(":method").setString("POST");
         headers.addValue(":path").setString("/simple");
@@ -225,16 +225,30 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         ByteUtil.set31Bits(headersFrameHeader, 5, streamId);
 
         // Data
+        if (padding != null) {
+            dataPayload.put((byte) (padding.length & 0xFF));
+            dataPayload.limit(dataPayload.capacity() - padding.length);
+        }
+
         while (dataPayload.hasRemaining()) {
             dataPayload.put((byte) 'x');
         }
+        if (padding != null && padding.length > 0) {
+            dataPayload.limit(dataPayload.capacity());
+            dataPayload.put(padding);
+        }
+
         dataPayload.flip();
 
         // Size
         ByteUtil.setThreeBytes(dataFrameHeader, 0, dataPayload.limit());
         // Data is type 0
-        // End of stream
-        dataFrameHeader[4] = 0x01;
+        // Flags: End of stream 1, Padding 8
+        if (padding == null) {
+            dataFrameHeader[4] = 0x01;
+        } else {
+            dataFrameHeader[4] = 0x09;
+        }
         ByteUtil.set31Bits(dataFrameHeader, 5, streamId);
     }
 
@@ -254,7 +268,12 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    protected void readSimplePostResponse() throws Http2Exception, IOException {
+    protected void readSimplePostResponse(boolean padding) throws Http2Exception, IOException {
+        if (padding) {
+            // Window updates for padding
+            parser.readFrame(true);
+            parser.readFrame(true);
+        }
         // Connection window update after reading request body
         parser.readFrame(true);
         // Stream window update after reading request body
@@ -675,7 +694,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
         @Override
-        public void swallow(int streamId, FrameType frameType, int flags, int size) {
+        public void swallowed(int streamId, FrameType frameType, int flags, int size) {
             trace.append(streamId);
             trace.append(",");
             trace.append(frameType);
@@ -687,6 +706,15 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         }
 
 
+        @Override
+        public void swallowedPadding(int streamId, int paddingLength) {
+            trace.append(streamId);
+            trace.append("-SwallowedPadding-[");
+            trace.append(paddingLength);
+            trace.append("]\n");
+        }
+
+
         public void clearTrace() {
             trace = new StringBuffer();
         }

==================================================
