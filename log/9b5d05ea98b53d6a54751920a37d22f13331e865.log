9b5d05ea98b53d6a54751920a37d22f13331e865
==================================================
Start thinking about non-blocking reads
==================================================
Mark Thomas
==================================================
Fri Sep 25 21:05:53 2015 +0000
==================================================
Stream.java
Start thinking about non-blocking reads

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705353 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StreamProcessor.java
index dee44173cd..38c9cf6369 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -292,6 +292,11 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    StreamInputBuffer getInputBuffer() {
+        return inputBuffer;
+    }
+
+
     StreamOutputBuffer getOutputBuffer() {
         return outputBuffer;
     }
@@ -473,6 +478,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
         // This buffer is the destination for incoming data. It is normally is
         // 'write mode'.
         private volatile ByteBuffer inBuffer;
+        private volatile boolean readInterest;
 
         @Override
         public int doRead(ByteChunk chunk) throws IOException {
@@ -519,6 +525,28 @@ public class Stream extends AbstractStream implements HeaderEmitter {
         }
 
 
+        boolean isReady() {
+            synchronized (inBuffer) {
+                if (inBuffer.position() == 0) {
+                    readInterest = true;
+                    return false;
+                } else {
+                    return true;
+                }
+            }
+        }
+
+
+        synchronized boolean isRegisteredForRead() {
+            if (readInterest) {
+                readInterest = false;
+                return true;
+            } else {
+                return false;
+            }
+        }
+
+
         public ByteBuffer getInBuffer() {
             ensureBuffersExist();
             return inBuffer;
@@ -526,13 +554,12 @@ public class Stream extends AbstractStream implements HeaderEmitter {
 
 
         private void ensureBuffersExist() {
-            if (inBuffer != null) {
-                return;
-            }
-            synchronized (this) {
-                if (inBuffer == null) {
-                    inBuffer = ByteBuffer.allocate(16 * 1024);
-                    outBuffer = new byte[16 * 1024];
+            if (inBuffer == null) {
+                synchronized (this) {
+                    if (inBuffer == null) {
+                        inBuffer = ByteBuffer.allocate(16 * 1024);
+                        outBuffer = new byte[16 * 1024];
+                    }
                 }
             }
         }

==================================================
