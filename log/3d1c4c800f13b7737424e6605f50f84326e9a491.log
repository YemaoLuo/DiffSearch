3d1c4c800f13b7737424e6605f50f84326e9a491
==================================================
Pull up the buffer that holds non-blocking writes.
==================================================
Mark Emlyn
==================================================
Thu May 2 20:57:45 2013 +0000
==================================================
AbstractOutputBuffer.java
Pull up the buffer that holds non-blocking writes.
This allows setBlocking() to be pulled up and given a common
implementation.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478537 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprOutputBuffer.java
index e18e2bca4f..d9ccca13e5 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -17,8 +17,11 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.util.concurrent.LinkedBlockingDeque;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.OutputBuffer;
@@ -100,6 +103,20 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
      */
     protected int socketBuffer = -1;
 
+    /**
+     * For "non-blocking" writes use an external set of buffers. Although the
+     * API only allows one non-blocking write at a time, due to buffering and
+     * the possible need to write HTTP headers, there may be more than one write
+     * to the OutputBuffer.
+     */
+    protected volatile LinkedBlockingDeque<ByteBufferHolder> bufferedWrites =
+            null;
+
+    /**
+     * The max size of the buffered write buffer
+     */
+    protected int bufferedWriteSize = 64*1024; //64k default write buffer
+
 
     // -------------------------------------------------------------- Variables
 
@@ -184,6 +201,16 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     }
 
 
+    public void setBufferedWriteSize(int bufferedWriteSize) {
+        this.bufferedWriteSize = bufferedWriteSize;
+    }
+
+
+    public int getBufferedWriteSize() {
+        return bufferedWriteSize;
+    }
+
+
     // --------------------------------------------------- OutputBuffer Methods
 
     /**
@@ -577,7 +604,6 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     //------------------------------------------------------ Non-blocking writes
 
     protected abstract boolean hasDataToWrite();
-    protected abstract void setBlocking(boolean blocking);
 
     /**
      * Writes any remaining buffered data.
@@ -590,6 +616,17 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     protected abstract boolean flushBuffer(boolean block) throws IOException;
 
 
+    /**
+     * Configure the blocking behaviour of the OutputBuffer.
+     */
+    public final void setBlocking(boolean blocking) {
+        if (blocking)
+            bufferedWrites = null;
+        else
+            bufferedWrites = new LinkedBlockingDeque<>();
+    }
+
+
     /**
      * Is standard Servlet blocking IO being used for output?
      */
@@ -601,4 +638,48 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     protected final boolean isReady() {
         return !hasDataToWrite();
     }
+
+
+    protected static class ByteBufferHolder {
+        private final ByteBuffer buf;
+        private final AtomicBoolean flipped;
+        public ByteBufferHolder(ByteBuffer buf, boolean flipped) {
+           this.buf = buf;
+           this.flipped = new AtomicBoolean(flipped);
+        }
+        public ByteBuffer getBuf() {
+            return buf;
+        }
+        public boolean isFlipped() {
+            return flipped.get();
+        }
+
+        public boolean flip() {
+            if (flipped.compareAndSet(false, true)) {
+                buf.flip();
+                return true;
+            } else {
+                return false;
+            }
+        }
+
+        public boolean hasData() {
+            if (flipped.get()) {
+                return buf.remaining()>0;
+            } else {
+                return buf.position()>0;
+            }
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder builder = new StringBuilder(super.toString());
+            builder.append("[flipped=");
+            builder.append(isFlipped()?"true, remaining=" : "false, position=");
+            builder.append(isFlipped()? buf.remaining(): buf.position());
+            builder.append("]");
+            return builder.toString();
+        }
+
+    }
 }

==================================================
InternalNioOutputBuffer.java
index b6ad5c6da9..919ef8f417 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -174,12 +174,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     }
 
 
-    @Override
-    protected void setBlocking(boolean blocking) {
-        // TODO
-    }
-
-
     // ----------------------------------- OutputStreamOutputBuffer Inner Class
 
     /**

==================================================
InternalOutputBuffer.java
index 46009b3855..78ff9ac6ab 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -22,8 +22,6 @@ import java.nio.ByteBuffer;
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.util.Iterator;
-import java.util.concurrent.LinkedBlockingDeque;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Response;
@@ -84,59 +82,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
      */
     protected volatile boolean flipped = false;
 
-    /**
-     * For "non-blocking" writes use an external buffer.
-     */
-    protected volatile LinkedBlockingDeque<ByteBufferHolder> bufferedWrites = null;
-
-    /**
-     * The max size of the buffered write buffer
-     */
-    protected int bufferedWriteSize = 64*1024; //64k default write buffer
-
-    protected static class ByteBufferHolder {
-        private final ByteBuffer buf;
-        private final AtomicBoolean flipped;
-        public ByteBufferHolder(ByteBuffer buf, boolean flipped) {
-           this.buf = buf;
-           this.flipped = new AtomicBoolean(flipped);
-        }
-        public ByteBuffer getBuf() {
-            return buf;
-        }
-        public boolean isFlipped() {
-            return flipped.get();
-        }
-
-        public boolean flip() {
-            if (flipped.compareAndSet(false, true)) {
-                buf.flip();
-                return true;
-            } else {
-                return false;
-            }
-        }
-
-        public boolean hasData() {
-            if (flipped.get()) {
-                return buf.remaining()>0;
-            } else {
-                return buf.position()>0;
-            }
-        }
-
-        @Override
-        public String toString() {
-            StringBuilder builder = new StringBuilder(super.toString());
-            builder.append("[flipped=");
-            builder.append(isFlipped()?"true, remaining=" : "false, position=");
-            builder.append(isFlipped()? buf.remaining(): buf.position());
-            builder.append("]");
-            return builder.toString();
-        }
-
-    }
-
     // --------------------------------------------------------- Public Methods
 
     /**
@@ -347,18 +292,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 
     //-------------------------------------------------- Non-blocking IO methods
 
-    @Override
-    public void setBlocking(boolean blocking) {
-        if (blocking)
-            bufferedWrites = null;
-        else
-            bufferedWrites = new LinkedBlockingDeque<>();
-    }
-
-    public void setBufferedWriteSize(int bufferedWriteSize) {
-        this.bufferedWriteSize = bufferedWriteSize;
-    }
-
     private boolean hasBufferedData() {
         boolean result = false;
         if (bufferedWrites!=null) {
@@ -375,10 +308,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
         return hasMoreDataToFlush() || hasBufferedData();
     }
 
-    public int getBufferedWriteSize() {
-        return bufferedWriteSize;
-    }
-
 
     // ----------------------------------- OutputStreamOutputBuffer Inner Class
 

==================================================
