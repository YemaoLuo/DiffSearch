a975a4af76fe050cca9e2361fc457132e9ab81d7
==================================================
Refactor Manager to retain reference to Context rather than Container
==================================================
Mark Emlyn
==================================================
Wed Jul 4 21:23:00 2012 +0000
==================================================
Manager.java
Refactor Manager to retain reference to Context rather than Container

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1357414 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterManagerBase.java
index bec11ed518..ab54a829d7 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -51,7 +51,11 @@ public interface Manager {
 
     /**
      * Return the Container with which this Manager is associated.
+     *
+     * @deprecated Use {@link #getContext()}. This method will be removed in
+     *             Tomcat 9 onwards.
      */
+    @Deprecated
     public Container getContainer();
 
 
@@ -59,10 +63,28 @@ public interface Manager {
      * Set the Container with which this Manager is associated.
      *
      * @param container The newly associated Container
+     *
+     * @deprecated Use {@link #setContext()}. This method will be removed in
+     *             Tomcat 9 onwards.
      */
+    @Deprecated
     public void setContainer(Container container);
 
 
+    /**
+     * Return the Context with which this Manager is associated.
+     */
+    public Context getContext();
+
+
+    /**
+     * Set the Container with which this Manager is associated.
+     *
+     * @param container The newly associated Context
+     */
+    public void setContext(Context context);
+
+
     /**
      * Return the distributable flag for the sessions supported by
      * this Manager.

==================================================
DeltaManager.java
index 27181771c1..cad20e4271 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -144,7 +144,7 @@ public abstract class ClusterManagerBase extends ManagerBase
 
 
     public ClassLoader[] getClassLoaders() {
-        return getClassLoaders(container);
+        return getClassLoaders(getContext());
     }
 
     /**

==================================================
ManagerBase.java
index f538eb96e6..363585ebbc 100644
--- a/java/org/apache/catalina/session/LocalStrings.properties
+++ b/java/org/apache/catalina/session/LocalStrings.properties
@@ -30,6 +30,7 @@ JDBCStore.checkConnectionClassNotFoundException=JDBC driver class not found {0}
 JDBCStore.wrongDataSource=Cannot open JNDI DataSource [{0}]
 JDBCStore.missingDataSourceName=No valid JNDI name was given.
 JDBCStore.commitSQLException=SQLException committing connection before closing
+managerBase.container.noop=Managers added to containers other than Contexts will never be used
 managerBase.createSession.ise=createSession: Too many active sessions
 managerBase.sessionTimeout=Invalid session timeout setting {0}
 standardManager.loading=Loading persisted sessions from {0}

==================================================
StandardManager.java
index fd91a3caab..4b86b8e729 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -63,9 +63,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     // ----------------------------------------------------- Instance Variables
 
     /**
-     * The Container with which this Manager is associated.
+     * The Context with which this Manager is associated.
      */
-    protected Container container;
+    private Context context;
 
 
     /**
@@ -208,40 +208,49 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     // ------------------------------------------------------------- Properties
 
-    /**
-     * Return the Container with which this Manager is associated.
-     */
     @Override
+    @Deprecated
     public Container getContainer() {
-
-        return (this.container);
-
+        return getContext();
     }
 
 
-    /**
-     * Set the Container with which this Manager is associated.
-     *
-     * @param container The newly associated Container
-     */
     @Override
+    @Deprecated
     public void setContainer(Container container) {
 
-        // De-register from the old Container (if any)
-        if ((this.container != null) && (this.container instanceof Context))
-            ((Context) this.container).removePropertyChangeListener(this);
+        if (container instanceof Context || container == null) {
+            setContext((Context) container);
+        } else {
+            log.warn(sm.getString("managerBase.container.noop"));
+        }
+    }
 
-        Container oldContainer = this.container;
-        this.container = container;
-        support.firePropertyChange("container", oldContainer, this.container);
 
-        // Register with the new Container (if any)
-        if ((this.container != null) && (this.container instanceof Context)) {
-            setMaxInactiveInterval
-                ( ((Context) this.container).getSessionTimeout()*60 );
-            ((Context) this.container).addPropertyChangeListener(this);
+    @Override
+    public Context getContext() {
+        return context;
+    }
+
+
+    @Override
+    public void setContext(Context context) {
+        // De-register from the old Context (if any)
+        if (this.context != null) {
+            this.context.removePropertyChangeListener(this);
         }
 
+        Context oldContext = this.context;
+        this.context = context;
+        support.firePropertyChange("context", oldContext, this.context);
+        // TODO - delete the line below in Tomcat 9 onwards
+        support.firePropertyChange("container", oldContext, this.context);
+
+        // Register with the new Context (if any)
+        if (this.context != null) {
+            setMaxInactiveInterval(this.context.getSessionTimeout() * 60);
+            this.context.addPropertyChangeListener(this);
+        }
     }
 
 
@@ -751,7 +760,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         String oldId = session.getIdInternal();
         session.setId(generateSessionId(), false);
         String newId = session.getIdInternal();
-        container.fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
+        context.fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
                 new String[] {oldId, newId});
     }
 
@@ -1220,10 +1229,10 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     public String toString() {
         StringBuilder sb = new StringBuilder(this.getClass().getName());
         sb.append('[');
-        if (container == null) {
-            sb.append("Container is null");
+        if (context == null) {
+            sb.append("Context is null");
         } else {
-            sb.append(container.getName());
+            sb.append(context.getName());
         }
         sb.append(']');
         return sb.toString();
@@ -1236,29 +1245,22 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
         StringBuilder name = new StringBuilder("type=Manager");
 
-        if (container instanceof Context) {
-            name.append(",context=");
-            String contextName = container.getName();
-            if (!contextName.startsWith("/")) {
-                name.append('/');
-            }
-            name.append(contextName);
-
-            Context context = (Context) container;
-            name.append(",host=");
-            name.append(context.getParent().getName());
-        } else {
-            // Unlikely / impossible? Handle it to be safe
-            name.append(",container=");
-            name.append(container.getName());
+        name.append(",context=");
+        String contextName = context.getName();
+        if (!contextName.startsWith("/")) {
+            name.append('/');
         }
+        name.append(contextName);
+
+        name.append(",host=");
+        name.append(context.getParent().getName());
 
         return name.toString();
     }
 
     @Override
     public String getDomainInternal() {
-        return container.getDomain();
+        return context.getDomain();
     }
 
     // ----------------------------------------- PropertyChangeListener Methods

==================================================
