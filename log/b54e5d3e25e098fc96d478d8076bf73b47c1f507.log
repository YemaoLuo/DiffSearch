b54e5d3e25e098fc96d478d8076bf73b47c1f507
==================================================
Fix CI failure
==================================================
Mark Thomas
==================================================
Tue Jan 31 20:14:34 2017 +0000
==================================================
AbstractJniTest.java
Fix CI failure
Use abstract base class to configure the tc-native library and ensure tests only run when it is available.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1781163 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestFile.java
new file mode 100644
index 0000000000..84ed1ac29d
--- /dev/null
+++ b/test/org/apache/tomcat/jni/AbstractJniTest.java
@@ -0,0 +1,46 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.jni;
+
+import org.junit.After;
+import org.junit.Assume;
+import org.junit.Before;
+
+public abstract class AbstractJniTest {
+
+    private boolean nativeLibraryPresent = false;
+
+    @Before
+    public void initBase() throws Exception {
+        try {
+            Library.initialize(null);
+            nativeLibraryPresent = true;
+        } catch (LibraryNotFoundError lnfe) {
+            nativeLibraryPresent = false;
+        }
+        Assume.assumeTrue("APR Library not found", nativeLibraryPresent);
+    }
+
+
+    @After
+    public void destroyBase() {
+        if (nativeLibraryPresent) {
+            Library.terminate();
+        }
+    }
+
+}

==================================================
TestSocketServer.java
index d99fbd552c..433939f226 100644
--- a/test/org/apache/tomcat/jni/TestFile.java
+++ b/test/org/apache/tomcat/jni/TestFile.java
@@ -20,7 +20,7 @@ import org.junit.Assert;
 import org.junit.Test;
 
 
-public class TestFile {
+public class TestFile extends AbstractJniTest {
 
     @Test
     public void testInfoGet() throws Exception {

==================================================
TestSocketServerAnyLocalAddress.java
index 588289ec17..45c865eed7 100644
--- a/test/org/apache/tomcat/jni/TestSocketServer.java
+++ b/test/org/apache/tomcat/jni/TestSocketServer.java
@@ -21,18 +21,16 @@ import java.util.concurrent.CountDownLatch;
 
 import org.junit.After;
 import org.junit.Assert;
-import org.junit.Assume;
 import org.junit.Before;
 import org.junit.Test;
 
 /**
  * Tests for server-side sockets.
  */
-public class TestSocketServer {
+public class TestSocketServer extends AbstractJniTest {
 
     private static final String HOST = "localhost";
 
-    private boolean nativeLibraryPresent = false;
     private int port = 0;
     private long serverSocket = 0;
     private long clientSocket = 0;
@@ -40,14 +38,6 @@ public class TestSocketServer {
 
     @Before
     public void init() throws Exception {
-        try {
-            Library.initialize(null);
-            nativeLibraryPresent = true;
-        } catch (LibraryNotFoundError lnfe) {
-            nativeLibraryPresent = false;
-        }
-        Assume.assumeTrue("APR Library not found", nativeLibraryPresent);
-
         long serverPool = Pool.create(0);
         long inetAddress = Address.info(HOST, Socket.APR_INET,
                                         0, 0, serverPool);
@@ -78,9 +68,6 @@ public class TestSocketServer {
             Socket.close(serverSocket);
             Socket.destroy(serverSocket);
         }
-        if (nativeLibraryPresent) {
-            Library.terminate();
-        }
     }
 
 

==================================================
