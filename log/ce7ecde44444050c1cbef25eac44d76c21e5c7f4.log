ce7ecde44444050c1cbef25eac44d76c21e5c7f4
==================================================
Fix Checkstyle & IDE warnings. Mostly import use/order.
==================================================
Mark Emlyn
==================================================
Fri Aug 8 14:10:18 2014 +0000
==================================================
Bug54225.java
Fix Checkstyle & IDE warnings. Mostly import use/order.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1616764 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Bug54227.java
index 441bca7458..bdbfe52c6c 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug54225.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug54225.java
@@ -16,29 +16,20 @@
  */
 package org.apache.tomcat.jdbc.bugs;
 
-import java.sql.Connection;
-import java.sql.DriverManager;
 import java.sql.SQLException;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicInteger;
 
-import org.junit.Assert;
+import static org.junit.Assert.assertNull;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
-import org.apache.tomcat.jdbc.pool.ConnectionPool;
 import org.apache.tomcat.jdbc.pool.DataSource;
-import org.apache.tomcat.jdbc.pool.PoolExhaustedException;
 import org.apache.tomcat.jdbc.pool.PoolProperties;
 import org.apache.tomcat.jdbc.test.DefaultProperties;
 
-import static org.junit.Assert.assertNull;
 
 @RunWith(Parameterized.class)
 public class Bug54225 {
@@ -58,7 +49,7 @@ public class Bug54225 {
     }
 
     @Test
-    public void testPool() throws SQLException, InterruptedException {
+    public void testPool() throws SQLException {
         PoolProperties poolProperties = new DefaultProperties();
         poolProperties.setMinIdle(0);
         poolProperties.setInitialSize(0);

==================================================
Bug54978.java
index 3e0aaf40b1..67a159bf7a 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug54227.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug54227.java
@@ -16,18 +16,20 @@
  */
 package org.apache.tomcat.jdbc.bugs;
 
-import org.apache.tomcat.jdbc.pool.DataSource;
-import org.apache.tomcat.jdbc.pool.PoolProperties;
-import org.apache.tomcat.jdbc.test.DefaultProperties;
-import org.junit.Test;
-
-import javax.sql.PooledConnection;
 import java.sql.Connection;
 import java.sql.SQLException;
 
+import javax.sql.PooledConnection;
+
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertSame;
 
+import org.junit.Test;
+
+import org.apache.tomcat.jdbc.pool.DataSource;
+import org.apache.tomcat.jdbc.pool.PoolProperties;
+import org.apache.tomcat.jdbc.test.DefaultProperties;
+
 public class Bug54227 {
 
 

==================================================
ShouldForceReconnectTest.java
index 8e7ad4e26f..369ba79b70 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug54978.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug54978.java
@@ -16,19 +16,20 @@
  */
 package org.apache.tomcat.jdbc.bugs;
 
-import org.apache.tomcat.jdbc.pool.DataSource;
-import org.apache.tomcat.jdbc.pool.PoolProperties;
-import org.apache.tomcat.jdbc.test.DefaultProperties;
-import org.junit.Test;
-
 import java.sql.SQLException;
 
 import static org.junit.Assert.fail;
 
+import org.junit.Test;
+
+import org.apache.tomcat.jdbc.pool.DataSource;
+import org.apache.tomcat.jdbc.pool.PoolProperties;
+import org.apache.tomcat.jdbc.test.DefaultProperties;
+
 public class Bug54978 {
 
     @Test
-    public void testIllegalValidationQuery() throws SQLException, InterruptedException {
+    public void testIllegalValidationQuery() {
         PoolProperties poolProperties = new DefaultProperties();
         poolProperties.setMinIdle(0);
         poolProperties.setInitialSize(1);
@@ -48,7 +49,7 @@ public class Bug54978 {
     }
 
     @Test
-    public void testIllegalValidationQueryWithLegalInit() throws SQLException, InterruptedException {
+    public void testIllegalValidationQueryWithLegalInit() throws SQLException {
         PoolProperties poolProperties = new DefaultProperties();
         poolProperties.setMinIdle(0);
         poolProperties.setInitialSize(1);

==================================================
TestJdbcInterceptorConfigParsing.java
index 28eb94d1a7..63cf8cc999 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/ShouldForceReconnectTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/ShouldForceReconnectTest.java
@@ -16,23 +16,23 @@
  */
 package org.apache.tomcat.jdbc.pool;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 public class ShouldForceReconnectTest {
 
     private ConnectionPool pool;
     private PoolProperties properties;
-    
+
     private static final String DEFAULT_USER = "username_def";
     private static final String DEFAULT_PASSWD = "password_def";
     private static final String ALT_USER = "username_alt";
     private static final String ALT_PASSWD = "password_alt";
-    
+
     @Before
     public void setUp() throws Exception {
         properties = new PoolProperties();
@@ -47,10 +47,10 @@ public class ShouldForceReconnectTest {
 
     @After
     public void tearDown() throws Exception {
-        
-        
-        
-        
+
+
+
+
     }
 
     @Test
@@ -60,47 +60,47 @@ public class ShouldForceReconnectTest {
         //connection previously connect with default
         configureDefault(con);
         assertFalse(con.shouldForceReconnect(null, null));
-        
+
         configureDefault(con);
         assertFalse(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
-        
+
         configureDefault(con);
         assertFalse(con.shouldForceReconnect(null,DEFAULT_PASSWD));
-        
+
         configureDefault(con);
         assertFalse(con.shouldForceReconnect(DEFAULT_USER, null));
-        
+
         configureDefault(con);
         assertTrue(con.shouldForceReconnect(ALT_USER,ALT_PASSWD));
-        
+
         configureDefault(con);
         assertTrue(con.shouldForceReconnect(null,ALT_PASSWD));
-        
+
         configureDefault(con);
         assertTrue(con.shouldForceReconnect(ALT_USER,null));
 
         //connection previously connect with alternate
         configureAlt(con);
         assertFalse(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        
+
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(null, null));
-        
+
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
-        
+
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(null, DEFAULT_PASSWD));
-        
+
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(DEFAULT_USER, null));
-        
+
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(null,ALT_PASSWD));
-        
+
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(ALT_USER,null));
-        
+
         //test changes in username password
         configureDefault(con);
         assertFalse(con.shouldForceReconnect(null, null));
@@ -120,7 +120,7 @@ public class ShouldForceReconnectTest {
         assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));
         assertFalse(con.shouldForceReconnect(null, null));
         assertTrue(con.shouldForceReconnect(ALT_USER, ALT_PASSWD));
-        
+
 
         configureAlt(con);
         assertTrue(con.shouldForceReconnect(DEFAULT_USER, DEFAULT_PASSWD));

==================================================
TestValidationQueryTimeout.java
index 069c093da9..0572a57fd5 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestJdbcInterceptorConfigParsing.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestJdbcInterceptorConfigParsing.java
@@ -16,18 +16,19 @@
  */
 package org.apache.tomcat.jdbc.test;
 
-import org.apache.tomcat.jdbc.pool.PoolProperties;
-import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
-import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
-import org.apache.tomcat.jdbc.pool.TrapException;
-import org.junit.Test;
-
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 
+import org.junit.Test;
+
+import org.apache.tomcat.jdbc.pool.PoolProperties;
+import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
+import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
+import org.apache.tomcat.jdbc.pool.TrapException;
+
 /**
  * Test of JdbcInterceptor configuration parsing in the
  * {@link org.apache.tomcat.jdbc.pool.PoolProperties PoolProperties} class.
@@ -108,7 +109,7 @@ public class TestJdbcInterceptorConfigParsing {
      * Some of these should probably be handled more cleanly by the parser, but a few known
      * exception scenarios are presented here just to document current behavior.  In many cases
      * failure in parsing will just be propagated to a definition that will fail later
-     * when instantiated.  Should we be failing faster (and with more detail)? 
+     * when instantiated.  Should we be failing faster (and with more detail)?
      *
      * @throws Exception
      */

==================================================
