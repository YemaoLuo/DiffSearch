498216a7eb36ccb4b2bd225465e19897db230c48
==================================================
Enable custom context class when using embedded tomcat
==================================================
Felix Schumacher
==================================================
Mon Jan 12 15:22:16 2015 +0000
==================================================
Tomcat.java
Enable custom context class when using embedded tomcat


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1651116 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestTomcat.java
index 38ee428c7a..e870c5b513 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -18,6 +18,7 @@ package org.apache.catalina.startup;
 
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.security.Principal;
@@ -495,7 +496,7 @@ public class Tomcat {
     public Context addContext(Host host, String contextPath, String contextName,
             String dir) {
         silence(host, contextPath);
-        Context ctx = new StandardContext();
+        Context ctx = createContext(host, contextPath);
         ctx.setName(contextName);
         ctx.setPath(contextPath);
         ctx.setDocBase(dir);
@@ -522,7 +523,7 @@ public class Tomcat {
     public Context addWebapp(Host host, String url, String name, String path) {
         silence(host, url);
 
-        Context ctx = new StandardContext();
+        Context ctx = createContext(host, url);
         ctx.setName(name);
         ctx.setPath(url);
         ctx.setDocBase(path);
@@ -687,6 +688,40 @@ public class Tomcat {
         return loggerName;
     }
 
+    /**
+     * Create the configured {@link Context} for the given <code>host</code>.
+     * The default constructor of the class that was configured with
+     * {@link StandardHost#setContextClass(String)} will be used
+     *
+     * @param host
+     *            host for which the {@link Context} should be created, or
+     *            <code>null</code> if default host should be used
+     * @param url
+     *            path of the webapp which should get the {@link Context}
+     * @return newly created {@link Context}
+     */
+    private Context createContext(Host host, String url) {
+        String contextClass = StandardContext.class.getName();
+        if (host == null) {
+            host = this.getHost();
+        }
+        if (host instanceof StandardHost) {
+            contextClass = ((StandardHost) host).getContextClass();
+        }
+        try {
+            return (Context) Class.forName(contextClass).getConstructor()
+                    .newInstance();
+        } catch (InstantiationException | IllegalAccessException
+                | IllegalArgumentException | InvocationTargetException
+                | NoSuchMethodException | SecurityException
+                | ClassNotFoundException e) {
+            throw new IllegalArgumentException(
+                    "Can't instantiate context-class " + contextClass
+                            + " for host " + host + " and url "
+                            + url, e);
+        }
+    }
+
     /**
      * Enables JNDI naming which is disabled by default. Server must implement
      * {@link Lifecycle} in order for the {@link NamingContextListener} to be

==================================================
