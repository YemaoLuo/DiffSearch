451393fcabfcf9dce1b672155c5e0d94df21e4a3
==================================================
Add support for loading static resources from /META-INF/resources inside JARs bundled with a web application
==================================================
Mark Emlyn
==================================================
Thu Apr 22 08:13:08 2010 +0000
==================================================
Context.java
Add support for loading static resources from /META-INF/resources inside JARs bundled with a web application

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@936646 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index ddabbdff4f..2a774697b7 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -115,6 +115,7 @@ standardContext.loginConfig.loginPage=Form login page {0} must start with a ''/'
 standardContext.loginConfig.loginWarning=WARNING: Form login page {0} must start with a ''/'' in Servlet 2.4
 standardContext.loginConfig.required=LoginConfig cannot be null
 standardContext.mappingError=MAPPING configuration error for relative URI {0}
+standardContext.noResourceJar=Resource JARs are not supported. The JAR found at [{0}] will no be used to provide static content for context with path [{1}]
 standardContext.notFound=The requested resource ({0}) is not available.
 standardContext.notReloadable=Reloading is disabled on this Context
 standardContext.notStarted=Context has not yet been started

==================================================
ContextConfig.java
index eedc91c1f9..4c1c58bf42 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -961,6 +961,21 @@ public class StandardContext
     }
 
 
+    /**
+     * Add a URL for a JAR that contains static resources in a
+     * META-INF/resources directory that should be included in the static
+     * resources for this context.
+     */
+    public void addResourceJarUrl(URL url) {
+        if (webappResources instanceof BaseDirContext) {
+            ((BaseDirContext) webappResources).addResourcesJar(url);
+        } else {
+            log.error(sm.getString("standardContext.noResourceJar", url,
+                    getPath()));
+        }
+    }
+    
+    
     /**
      * Set the current alias configuration. The list of aliases should be of the
      * form "/aliasPath1=docBase1,/aliasPath2=docBase2" where aliasPathN must
@@ -2122,11 +2137,13 @@ public class StandardContext
             return;
 
         if (resources instanceof BaseDirContext) {
+            // Caching
             ((BaseDirContext) resources).setCached(isCachingAllowed());
             ((BaseDirContext) resources).setCacheTTL(getCacheTTL());
             ((BaseDirContext) resources).setCacheMaxSize(getCacheMaxSize());
             ((BaseDirContext) resources).setCacheObjectMaxSize(
                     getCacheObjectMaxSize());
+            // Alias support
             ((BaseDirContext) resources).setAliases(getAliases());
         }
         if (resources instanceof FileDirContext) {

==================================================
BaseDirContext.java
index 6f3fe5d478..5644b079f9 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -46,6 +46,7 @@ contextConfig.jar=Unable to process resource [{0}] for annotations
 contextConfig.jndiUrl=Unable to process JNDI URL [{0}] for annotations
 contextConfig.jndiUrlNotDirContextConn=The connection created for URL [{0}] was not a DirContextURLConnection
 contextConfig.missingRealm=No Realm has been configured to authenticate against
+contextConfig.resourceJarFail=Failed to processes JAR found at URL [{0}] for static resources to be included in context with path [{0}]
 contextConfig.role.auth=WARNING: Security role name {0} used in an <auth-constraint> without being defined in a <security-role>
 contextConfig.role.link=WARNING: Security role name {0} used in a <role-link> without being defined in a <security-role>
 contextConfig.role.runas=WARNING: Security role name {0} used in a <run-as> without being defined in a <security-role>

==================================================
FileDirContext.java
index f8b34e5ad0..89e50b3c5d 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -19,11 +19,18 @@
 package org.apache.naming.resources;
 
 import java.io.File;
+import java.io.IOException;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
 
 import javax.naming.Binding;
 import javax.naming.Context;
@@ -131,9 +138,38 @@ public abstract class BaseDirContext implements DirContext {
         new HashMap<String,BaseDirContext>();
 
 
+    /**
+     * Alternate / backup DirContexts for static resources. These will be
+     * searched in the order they are added if the requested resource cannot be
+     * found in the primary DirContext. 
+     */
+    protected List<DirContext> altDirContexts = new ArrayList<DirContext>();
+    
+    
     // ------------------------------------------------------------- Properties
 
 
+    /**
+     * Add a resources JAR. The contents of /META-INF/resources/ will be used if
+     * a requested resource can not be found in the main context.
+     */
+    public void addResourcesJar(URL url) {
+        try {
+            JarURLConnection conn = (JarURLConnection) url.openConnection();
+            JarFile jarFile = conn.getJarFile();   
+            ZipEntry entry = jarFile.getEntry("/");
+            WARDirContext warDirContext = new WARDirContext(jarFile,
+                    new WARDirContext.Entry("/", entry));
+            warDirContext.loadEntries();
+            altDirContexts.add(warDirContext);
+        } catch (IOException ioe) {
+            // TODO: Log failure
+        } finally {
+            // TODO: Clean up
+        }
+    }
+    
+    
     /**
      * Add an alias.
      */
@@ -350,7 +386,25 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.doGetRealPath(result.aliasName);
             }
         }
-        return doGetRealPath(name);
+        
+        // Next do a standard getRealPath()
+        String path = doGetRealPath(name);
+
+        if (path != null)
+            return path;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext){
+                path = ((BaseDirContext) altDirContext).getRealPath(
+                        "META-INF/resources/" + name);
+                if (path != null)
+                    return path;
+            }
+        }
+        
+        // Really not found
+        return null; 
     }
 
     // -------------------------------------------------------- Context Methods
@@ -380,13 +434,29 @@ public abstract class BaseDirContext implements DirContext {
      * @exception NamingException if a naming exception is encountered
      */
     public final Object lookup(String name) throws NamingException {
+        // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
             if (result.dirContext != null) {
                 return result.dirContext.lookup(result.aliasName);
             }
         }
-        return doLookup(name);
+        
+        // Next do a standard lookup
+        Object obj = doLookup(name);
+
+        if (obj != null)
+            return obj;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            obj = altDirContext.lookup("META-INF/resources/" + name);
+            if (obj != null)
+                return obj;
+        }
+        
+        // Really not found
+        throw new NamingException(sm.getString("resources.notFound", name));
     }
 
     /**
@@ -589,7 +659,31 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.listBindings(result.aliasName);
             }
         }
-        return doListBindings(name);
+        
+        // Next do a standard lookup
+        NamingEnumeration<Binding> bindings = doListBindings(name);
+
+        if (bindings != null)
+            return bindings;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext)
+                bindings = ((BaseDirContext) altDirContext).doListBindings(
+                        "META-INF/resources/" + name);
+            else {
+                try {
+                    bindings = altDirContext.listBindings(name);
+                } catch (NamingException ne) {
+                    // Ignore
+                }
+            }
+            if (bindings != null)
+                return bindings;
+        }
+
+        // Really not found
+        throw new NamingException(sm.getString("resources.notFound", name));
     }
 
 
@@ -912,6 +1006,8 @@ public abstract class BaseDirContext implements DirContext {
      */
     public final Attributes getAttributes(String name, String[] attrIds)
         throws NamingException {
+        
+        // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
             if (result.dirContext != null) {
@@ -919,7 +1015,31 @@ public abstract class BaseDirContext implements DirContext {
                         result.aliasName, attrIds);
             }
         }
-        return doGetAttributes(name, attrIds);
+        
+        // Next do a standard lookup
+        Attributes attrs = doGetAttributes(name, attrIds);
+
+        if (attrs != null)
+            return attrs;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext)
+                attrs = ((BaseDirContext) altDirContext).doGetAttributes(
+                        "META-INF/resources/" + name, attrIds);
+            else {
+                try {
+                    attrs = altDirContext.getAttributes(name, attrIds);
+                } catch (NamingException ne) {
+                    // Ignore
+                }
+            }
+            if (attrs != null)
+                return attrs;
+        }
+        
+        // Really not found
+        throw new NamingException(sm.getString("resources.notFound", name));
     }
 
     /**

==================================================
WARDirContext.java
index 1f2c872da0..ba02c11603 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -202,8 +202,7 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-            throw new NamingException
-                (sm.getString("resources.notFound", name));
+            return null;
 
         if (file.isDirectory()) {
             FileDirContext tempContext = new FileDirContext(env);
@@ -326,9 +325,8 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-            throw new NamingException
-                (sm.getString("resources.notFound", name));
-
+            return null;
+        
         return new NamingContextBindingsEnumeration(list(file).iterator(),
                 this);
 
@@ -432,8 +430,7 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-            throw new NamingException
-                (sm.getString("resources.notFound", name));
+            return null;
 
         return new FileResourceAttributes(file);
 

==================================================
