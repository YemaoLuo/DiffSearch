bb4322df7eff73c116be25929acca048ac61a892
==================================================
Remove $Id keyword from files in tomcat/util/http/fileupload/**
==================================================
Konstantin Kolinko
==================================================
Fri Jan 24 21:03:19 2014 +0000
==================================================
ByteArrayOutputStream.java
Remove $Id keyword from files in tomcat/util/http/fileupload/**

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1561173 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DeferredFileOutputStream.java
index 391c070f33..c2ac9a4df1 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java
@@ -42,8 +42,6 @@ import java.util.List;
  * the contents don't have to be copied to the new buffer. This class is
  * designed to behave exactly like the original. The only exception is the
  * deprecated toString(int) method that has been ignored.
- *
- * @version $Id$
  */
 public class ByteArrayOutputStream extends OutputStream {
 

==================================================
FileItem.java
index 3b7e2d2646..8a936e7896 100644
--- a/java/org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java
@@ -32,8 +32,6 @@ import java.io.OutputStream;
  * not know in advance the size of the file being uploaded. If the file is small
  * you want to store it in memory (for speed), but if the file is large you want
  * to store it to file (to avoid memory issues).
- *
- * @version $Id$
  */
 public class DeferredFileOutputStream
     extends ThresholdingOutputStream

==================================================
FileItemFactory.java
index e6956862dd..c024aa5355 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItem.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItem.java
@@ -42,7 +42,6 @@ import java.io.UnsupportedEncodingException;
  * implementation of this interface to also implement
  * <code>javax.activation.DataSource</code> with minimal additional work.
  *
- * @version $Id$
  * @since 1.3 additionally implements FileItemHeadersSupport
  */
 public interface FileItem extends FileItemHeadersSupport {

==================================================
FileItemHeaders.java
index 0106162bbe..9c7fd19f38 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemFactory.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemFactory.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.http.fileupload;
  * <p>A factory interface for creating {@link FileItem} instances. Factories
  * can provide their own custom configuration, over and above that provided
  * by the default file upload implementation.</p>
- *
- * @version $Id$
  */
 public interface FileItemFactory {
 

==================================================
FileItemHeadersSupport.java
index 4f2a50d09b..25441d38dc 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemHeaders.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemHeaders.java
@@ -24,8 +24,6 @@ import java.util.Iterator;
  * request.</p>
  *
  * @since 1.2.1
- *
- * @version $Id$
  */
 public interface FileItemHeaders {
 

==================================================
FileItemIterator.java
index c06b946879..3e98dbb2f0 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemHeadersSupport.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemHeadersSupport.java
@@ -24,8 +24,6 @@ package org.apache.tomcat.util.http.fileupload;
  *
  * @see FileItem
  * @see FileItemStream
- *
- * @version $Id$
  */
 public interface FileItemHeadersSupport {
 

==================================================
FileItemStream.java
index e3884a1fbe..4f331ad8d1 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemIterator.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemIterator.java
@@ -21,8 +21,6 @@ import java.io.IOException;
 /**
  * An iterator, as returned by
  * {@link FileUploadBase#getItemIterator(RequestContext)}.
- *
- * @version $Id$
  */
 public interface FileItemIterator {
 

==================================================
FileUpload.java
index cc7b4f431f..bb6949cd06 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemStream.java
@@ -30,8 +30,6 @@ import java.io.InputStream;
  * its associated instances of {@link FileItemStream}: By invoking
  * {@link java.util.Iterator#hasNext()} on the iterator, you discard all data,
  * which hasn't been read so far from the previous data.</p>
- *
- * @version $Id$
  */
 public interface FileItemStream extends FileItemHeadersSupport {
 

==================================================
FileUploadBase.java
index 2da6aa907f..dad41ff064 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUpload.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUpload.java
@@ -29,8 +29,6 @@ package org.apache.tomcat.util.http.fileupload;
  * <p>How the data for individual parts is stored is determined by the factory
  * used to create them; a given part may be in memory, on disk, or somewhere
  * else.</p>
- *
- * @version $Id$
  */
 public class FileUpload
     extends FileUploadBase {

==================================================
FileUtils.java
index 22e3306338..e13b0f9d73 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
@@ -46,8 +46,6 @@ import org.apache.tomcat.util.http.fileupload.util.Streams;
  * <p>How the data for individual parts is stored is determined by the factory
  * used to create them; a given part may be in memory, on disk, or somewhere
  * else.</p>
- *
- * @version $Id$
  */
 public abstract class FileUploadBase {
 

==================================================
IOUtils.java
index 76d808f5b4..c1102a5114 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUtils.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUtils.java
@@ -39,8 +39,6 @@ import java.io.IOException;
  * </ul>
  * <p>
  * Origin of code: Excalibur, Alexandria, Commons-Utils
- *
- * @version $Id$
  */
 public class FileUtils {
 

==================================================
InvalidFileNameException.java
index 99530b464e..382a34f1d7 100644
--- a/java/org/apache/tomcat/util/http/fileupload/IOUtils.java
+++ b/java/org/apache/tomcat/util/http/fileupload/IOUtils.java
@@ -50,8 +50,6 @@ import java.io.OutputStream;
  * closing streams after use.
  * <p>
  * Origin of code: Excalibur.
- *
- * @version $Id$
  */
 public class IOUtils {
     // NOTE: This class is focussed on InputStream, OutputStream, Reader and

==================================================
MultipartStream.java
index 7299432743..a81bee8595 100644
--- a/java/org/apache/tomcat/util/http/fileupload/InvalidFileNameException.java
+++ b/java/org/apache/tomcat/util/http/fileupload/InvalidFileNameException.java
@@ -25,8 +25,6 @@ package org.apache.tomcat.util.http.fileupload;
  * checks for the extension ".png"), while, depending on the underlying
  * C library, it might create a file named "foo.exe", as the NUL
  * character is the string terminator in C.
- *
- * @version $Id$
  */
 public class InvalidFileNameException extends RuntimeException {
 

==================================================
ParameterParser.java
index 2128af8cb2..ab8975384e 100644
--- a/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
@@ -79,8 +79,6 @@ import org.apache.tomcat.util.http.fileupload.util.Streams;
  *     // a read or write error occurred
  *   }
  * </pre>
- *
- * @version $Id$
  */
 public class MultipartStream {
 

==================================================
ProgressListener.java
index 684a15b6fc..d562abcb01 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
@@ -33,8 +33,6 @@ import org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility;
  * <p>
  *  <code>param1 = value; param2 = "anything goes; really"; param3</code>
  * </p>
- *
- * @version $Id$
  */
 public class ParameterParser {
 

==================================================
RequestContext.java
index 3c9827d24d..931c99d1d8 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ProgressListener.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ProgressListener.java
@@ -19,8 +19,6 @@ package org.apache.tomcat.util.http.fileupload;
 /**
  * The {@link ProgressListener} may be used to display a progress bar
  * or do stuff like that.
- *
- * @version $Id$
  */
 public interface ProgressListener {
 

==================================================
ThresholdingOutputStream.java
index 763d55e2da..8fb222ce2b 100644
--- a/java/org/apache/tomcat/util/http/fileupload/RequestContext.java
+++ b/java/org/apache/tomcat/util/http/fileupload/RequestContext.java
@@ -25,8 +25,6 @@ import java.io.InputStream;
  * handled by FileUpload, such as servlets and portlets.</p>
  *
  * @since FileUpload 1.1
- *
- * @version $Id$
  */
 public interface RequestContext {
 

==================================================
DiskFileItem.java
index 6f13c521d5..e8d8e8eb13 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ThresholdingOutputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ThresholdingOutputStream.java
@@ -33,8 +33,6 @@ import java.io.OutputStream;
  * NOTE: This implementation may trigger the event <em>before</em> the threshold
  * is actually reached, since it triggers when a pending write operation would
  * cause the threshold to be exceeded.
- *
- * @version $Id$
  */
 public abstract class ThresholdingOutputStream
     extends OutputStream

==================================================
DiskFileItemFactory.java
index b4653bbd06..ceb3ec7121 100644
--- a/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java
+++ b/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java
@@ -55,8 +55,6 @@ import org.apache.tomcat.util.http.fileupload.util.Streams;
  * deleted later on.</p>
  *
  * @since FileUpload 1.1
- *
- * @version $Id$
  */
 public class DiskFileItem
     implements FileItem {

==================================================
ServletFileUpload.java
index 14b3c7650b..4d2a3ce394 100644
--- a/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItemFactory.java
+++ b/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItemFactory.java
@@ -55,8 +55,6 @@ import org.apache.tomcat.util.http.fileupload.FileItemFactory;
  * deleted later on.</p>
  *
  * @since FileUpload 1.1
- *
- * @version $Id$
  */
 public class DiskFileItemFactory implements FileItemFactory {
 

==================================================
ServletRequestContext.java
index c7acb935a7..8c2cf16657 100644
--- a/java/org/apache/tomcat/util/http/fileupload/servlet/ServletFileUpload.java
+++ b/java/org/apache/tomcat/util/http/fileupload/servlet/ServletFileUpload.java
@@ -43,8 +43,6 @@ import org.apache.tomcat.util.http.fileupload.FileUploadException;
  * <p>How the data for individual parts is stored is determined by the factory
  * used to create them; a given part may be in memory, on disk, or somewhere
  * else.</p>
- *
- * @version $Id$
  */
 public class ServletFileUpload extends FileUpload {
 

==================================================
Closeable.java
index a36147dac9..372598e723 100644
--- a/java/org/apache/tomcat/util/http/fileupload/servlet/ServletRequestContext.java
+++ b/java/org/apache/tomcat/util/http/fileupload/servlet/ServletRequestContext.java
@@ -30,8 +30,6 @@ import org.apache.tomcat.util.http.fileupload.UploadContext;
  * an HTTP servlet.</p>
  *
  * @since FileUpload 1.1
- *
- * @version $Id$
  */
 public class ServletRequestContext implements UploadContext {
 

==================================================
FileItemHeadersImpl.java
index 729ce3dd21..41f9af43d2 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/Closeable.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/Closeable.java
@@ -20,8 +20,6 @@ import java.io.IOException;
 
 /**
  * Interface of an object, which may be closed.
- *
- * @version $Id$
  */
 public interface Closeable {
 

==================================================
LimitedInputStream.java
index 35a0df9813..f6037b6ba9 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/FileItemHeadersImpl.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/FileItemHeadersImpl.java
@@ -32,8 +32,6 @@ import org.apache.tomcat.util.http.fileupload.FileItemHeaders;
  * Default implementation of the {@link FileItemHeaders} interface.
  *
  * @since 1.2.1
- *
- * @version $Id$
  */
 public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
 

==================================================
Streams.java
index 7c0d00bc53..9de3df4f9e 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/LimitedInputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/LimitedInputStream.java
@@ -23,8 +23,6 @@ import java.io.InputStream;
 /**
  * An input stream, which limits its data size. This stream is
  * used, if the content length is unknown.
- *
- * @version $Id$
  */
 public abstract class LimitedInputStream extends FilterInputStream implements Closeable {
 

==================================================
