86ae787e341537a19306009ba6e3cca28d8d5701
==================================================
Ensure that ServletRequest and ServletResponse provided during AsyncListener registration are made available via AsyncEvent.getSuppliedRequest and AsyncEvent.getSuppliedResponse
==================================================
Violeta Georgieva
==================================================
Fri Mar 25 19:33:14 2016 +0000
==================================================
AsyncContextImpl.java
Ensure that ServletRequest and ServletResponse provided during AsyncListener registration are made available via AsyncEvent.getSuppliedRequest and AsyncEvent.getSuppliedResponse

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1736646 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncListenerWrapper.java
index 10bb223064..780965798b 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -272,6 +272,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         check();
         AsyncListenerWrapper wrapper = new AsyncListenerWrapper();
         wrapper.setListener(listener);
+        wrapper.setServletRequest(servletRequest);
+        wrapper.setServletResponse(servletResponse);
         listeners.add(wrapper);
     }
 

==================================================
TestAsyncContextImpl.java
index 0f7b0109f3..5cf2148b6f 100644
--- a/java/org/apache/catalina/core/AsyncListenerWrapper.java
+++ b/java/org/apache/catalina/core/AsyncListenerWrapper.java
@@ -20,29 +20,33 @@ import java.io.IOException;
 
 import javax.servlet.AsyncEvent;
 import javax.servlet.AsyncListener;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
 
 public class AsyncListenerWrapper {
 
     private AsyncListener listener = null;
+    private ServletRequest servletRequest = null;
+    private ServletResponse servletResponse = null;
 
 
     public void fireOnStartAsync(AsyncEvent event) throws IOException {
-        listener.onStartAsync(event);
+        listener.onStartAsync(customizeEvent(event));
     }
 
 
     public void fireOnComplete(AsyncEvent event) throws IOException {
-        listener.onComplete(event);
+        listener.onComplete(customizeEvent(event));
     }
 
 
     public void fireOnTimeout(AsyncEvent event) throws IOException {
-        listener.onTimeout(event);
+        listener.onTimeout(customizeEvent(event));
     }
 
 
     public void fireOnError(AsyncEvent event) throws IOException {
-        listener.onError(event);
+        listener.onError(customizeEvent(event));
     }
 
 
@@ -56,4 +60,22 @@ public class AsyncListenerWrapper {
     }
 
 
+    public void setServletRequest(ServletRequest servletRequest) {
+        this.servletRequest = servletRequest;
+    }
+
+
+    public void setServletResponse(ServletResponse servletResponse) {
+        this.servletResponse = servletResponse;
+    }
+
+
+    private AsyncEvent customizeEvent(AsyncEvent event) {
+        if (servletRequest != null && servletResponse != null) {
+            return new AsyncEvent(event.getAsyncContext(), servletRequest, servletResponse,
+                    event.getThrowable());
+        } else {
+            return event;
+        }
+    }
 }

==================================================
