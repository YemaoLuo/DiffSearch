a1259ab533152c9edf8e0316601ba43e31cd9b78
==================================================
Client side POJO support with a simple test case
==================================================
Mark Emlyn
==================================================
Thu Mar 7 22:09:15 2013 +0000
==================================================
WsWebSocketContainer.java
index 4dbeefc654..6ebf734294 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -55,11 +55,12 @@ wsSession.invalidHandlerTypePong=A pong message handler must implement MessageHa
 wsSession.removeHandlerFailed=Unable to remove the handler [{0}] as it was not registered with this session
 wsSession.unknownHandler=Unable to add the message handler [{0}] as it was for the unrecognised type [{1}]
 
+wsWebSocketContainer.defaultConfiguratorFaill=Failed to create the default configurator
+wsWebSocketContainer.endpointCreateFail=Failed to create a local endpoint of type [{0}]
 wsWebSocketContainer.httpRequestFailed=The HTTP request to initiate the WebSocket conenction failed
 wsWebSocketContainer.invalidHeader=Unable to parse HTTP header as no colon is present to delimit header name and header value in [{0}]. The header has been skipped.
 wsWebSocketContainer.invalidStatus=The HTTP response from the server [{0}] did not permit the HTTP upgrade to WebSocket
 wsWebSocketContainer.invalidSubProtocol=The WebSocket server returned multiple values for the Sec-WebSocket-Protocol header
 wsWebSocketContainer.maxBuffer=This implementation limits the maximum size of a buffer to Integer.MAX_VALUE
 wsWebSocketContainer.pathNoHost=No host was specified in URI
-wsWebSocketContainer.pathWrongScheme=The scheme [{0}] is not supported
-wsWebSocketContainer.endpointCreateFail=Failed to create a local endpoint of type [{0}]
\ No newline at end of file
+wsWebSocketContainer.pathWrongScheme=The scheme [{0}] is not supported
\ No newline at end of file

==================================================
Constants.java
index 61770abd4a..b75a944c2d 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -37,6 +37,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
+import javax.websocket.ClientEndpoint;
 import javax.websocket.ClientEndpointConfig;
 import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
@@ -49,6 +50,7 @@ import javax.xml.bind.DatatypeConverter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.websocket.pojo.PojoEndpointClient;
 
 public class WsWebSocketContainer
         implements WebSocketContainer, BackgroundProcess {
@@ -77,8 +79,28 @@ public class WsWebSocketContainer
     @Override
     public Session connectToServer(Object pojo, URI path)
             throws DeploymentException {
-        // TODO Auto-generated method stub
-        return null;
+
+        Endpoint ep = new PojoEndpointClient(pojo);
+
+        Class<? extends ClientEndpointConfig.Configurator> configuratorClazz =
+                pojo.getClass().getAnnotation(
+                        ClientEndpoint.class).configurator();
+
+        ClientEndpointConfig.Configurator configurator = null;
+        if (!ClientEndpointConfig.Configurator.class.equals(
+                configuratorClazz)) {
+            try {
+                configurator = configuratorClazz.newInstance();
+            } catch (InstantiationException | IllegalAccessException e) {
+                throw new DeploymentException(sm.getString(
+                        "wsWebSocketContainer.defaultConfiguratorFail"), e);
+            }
+        }
+
+        ClientEndpointConfig config =
+                ClientEndpointConfig.Builder.create().configurator(
+                        configurator).build();
+        return connectToServer(ep, config, path);
     }
 
 

==================================================
PojoEndpointBase.java
index 3999678212..e15124ba2b 100644
--- a/java/org/apache/tomcat/websocket/pojo/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/pojo/LocalStrings.properties
@@ -12,4 +12,8 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
-pojoUriTemplate.noMatch=The input template [{0}] generated the pattern [{1}] which did not match the supplied pathInfo [{2}]
+
+pojoEndpointBase.onCloseFail=Failed to call onClose method of POJO end point for POJO of type [{0}]
+pojoEndpointBase.onErrorFail=Failed to call onError method of POJO end point for POJO of type [{0}]
+pojoEndpointBase.onOpenFail=Failed to call onOpen method of POJO end point for POJO of type [{0}]
+pojoEndpointServer.getPojoInstanceFail=Failed to create instance of POJO of type [{0}]
\ No newline at end of file

==================================================
PojoEndpointClient.java
similarity index 57%
rename from java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
rename to java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
index fc75d5dc58..de45c3db9c 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
@@ -21,54 +21,37 @@ import java.util.Map;
 
 import javax.websocket.CloseReason;
 import javax.websocket.Endpoint;
-import javax.websocket.EndpointConfig;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
-import javax.websocket.server.ServerEndpointConfig;
 
-/**
- * Wrapper class for instances of POJOs annotated with
- * {@link javax.websocket.server.ServerEndpoint} so they appear as standard
- * {@link Endpoint} instances.
- */
-public class PojoEndpoint extends Endpoint {
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
+
+public abstract class PojoEndpointBase extends Endpoint {
 
-    public static final String POJO_PATH_PARAM_KEY =
-            "org.apache.tomcat.websocket.pojo.PojoEndpoint.pathParams";
-    public static final String POJO_METHOD_MAPPING_KEY =
-            "org.apache.tomcat.websocket.pojo.PojoEndpoint.methodMapping";
+    private static final Log log = LogFactory.getLog(PojoEndpointBase.class);
+    private static final StringManager sm =
+            StringManager.getManager(Constants.PACKAGE_NAME);
 
     private Object pojo;
     private Map<String,String> pathParameters;
     private PojoMethodMapping methodMapping;
 
 
-    @Override
-    public void onOpen(Session session, EndpointConfig endpointConfig) {
-
-        ServerEndpointConfig sec = (ServerEndpointConfig) endpointConfig;
-
-        try {
-            pojo = sec.getConfigurator().getEndpointInstance(
-                    sec.getEndpointClass());
-        } catch (InstantiationException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-
-        pathParameters = (Map<String, String>) sec.getUserProperties().get(
-                POJO_PATH_PARAM_KEY);
-        methodMapping = (PojoMethodMapping) sec.getUserProperties().get(
-                POJO_METHOD_MAPPING_KEY);
+    protected final void doOnOpen(Session session) {
+        PojoMethodMapping methodMapping = getMethodMapping();
+        Object pojo = getPojo();
+        Map<String,String> pathParameters = getPathParameters();
 
         if (methodMapping.getOnOpen() != null) {
             try {
                 methodMapping.getOnOpen().invoke(pojo,
                         methodMapping.getOnOpenArgs(pathParameters, session));
-            } catch (IllegalAccessException | IllegalArgumentException
-                    | InvocationTargetException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
+            } catch (IllegalAccessException | InvocationTargetException e) {
+                throw new IllegalArgumentException(sm.getString(
+                        "pojoEndpointBase.onOpenFail",
+                        pojo.getClass().getName()), e);
             }
         }
         for (MessageHandler mh : methodMapping.getMessageHandlers(pojo,
@@ -79,22 +62,24 @@ public class PojoEndpoint extends Endpoint {
 
 
     @Override
-    public void onClose(Session session, CloseReason closeReason) {
+    public final void onClose(Session session, CloseReason closeReason) {
+
         if (methodMapping.getOnClose() != null) {
             try {
                 methodMapping.getOnClose().invoke(pojo,
                         methodMapping.getOnCloseArgs(pathParameters, session));
             } catch (IllegalAccessException | IllegalArgumentException
                     | InvocationTargetException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
+                log.error(sm.getString("pojoEndpointBase.onCloseFail",
+                        pojo.getClass().getName()), e);
             }
         }
     }
 
 
     @Override
-    public void onError(Session session, Throwable throwable) {
+    public final void onError(Session session, Throwable throwable) {
+
         if (methodMapping.getOnError() != null) {
             try {
                 methodMapping.getOnError().invoke(
@@ -103,9 +88,24 @@ public class PojoEndpoint extends Endpoint {
                                 throwable));
             } catch (IllegalAccessException | IllegalArgumentException
                     | InvocationTargetException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
+                log.error(sm.getString("pojoEndpointBase.onErrorFail",
+                        pojo.getClass().getName()), e);
             }
         }
     }
+
+    protected Object getPojo() { return pojo; }
+    protected void setPojo(Object pojo) { this.pojo = pojo; }
+
+
+    protected Map<String,String> getPathParameters() { return pathParameters; }
+    protected void setPathParameters(Map<String,String> pathParameters) {
+        this.pathParameters = pathParameters;
+    }
+
+
+    protected PojoMethodMapping getMethodMapping() { return methodMapping; }
+    protected void setMethodMapping(PojoMethodMapping methodMapping) {
+        this.methodMapping = methodMapping;
+    }
 }

==================================================
PojoEndpointServer.java
new file mode 100644
index 0000000000..80735e8bad
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java
@@ -0,0 +1,37 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket.pojo;
+
+import java.util.Collections;
+
+import javax.websocket.EndpointConfig;
+import javax.websocket.Session;
+
+
+public class PojoEndpointClient extends PojoEndpointBase {
+
+    public PojoEndpointClient(Object pojo) {
+        setPojo(pojo);
+        setMethodMapping(new PojoMethodMapping(pojo.getClass(), null));
+        setPathParameters(Collections.EMPTY_MAP);
+    }
+
+    @Override
+    public void onOpen(Session session, EndpointConfig config) {
+        doOnOpen(session);
+    }
+}

==================================================
UriTemplate.java
index 2b677fc964..197e6106ef 100644
--- a/java/org/apache/tomcat/websocket/server/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
@@ -19,5 +19,6 @@ serverContainer.missingEndpoint=An Endpoint instance has been request for path [
 serverContainer.pojoDeploy=POJO class [{0}] deploying to path [{1}] in ServletContext [{2}]
 serverContainer.servletContextMismatch=Attempted to register a POJO annotated for WebSocket at path [{0}] in the ServletContext with context path [{1}] when the WebSocket ServerContainer is allocated to the ServletContext with context path [{2}]
 serverContainer.servletContextMissing=No ServletContext was specified
+uriTemplate.noMatch=The input template [{0}] generated the pattern [{1}] which did not match the supplied pathInfo [{2}]
 wsProtocolHandler.closeFailed=Failed to close the WebSocket connection cleanly
 wsRemoteEndpointServer.closeFailed=Failed to close the ServletOutputStream connection cleanly
\ No newline at end of file

==================================================
WsServerContainer.java
index 16517d7d67..aa9a5d89af 100644
--- a/java/org/apache/tomcat/websocket/server/UriTemplate.java
+++ b/java/org/apache/tomcat/websocket/server/UriTemplate.java
@@ -84,7 +84,7 @@ public class UriTemplate {
         Matcher m = pattern.matcher(pathInfo);
         if (!m.matches()) {
             throw new IllegalArgumentException(sm.getString(
-                    "pojoUriTemplate.noMatch", template, pattern, pathInfo));
+                    "uriTemplate.noMatch", template, pattern, pathInfo));
         }
         int group = 2;
         for (String name : names) {

==================================================
WsServlet.java
index cedafe42d6..1b10ea0cff 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -33,7 +33,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.WsSession;
 import org.apache.tomcat.websocket.WsWebSocketContainer;
-import org.apache.tomcat.websocket.pojo.PojoEndpoint;
+import org.apache.tomcat.websocket.pojo.PojoEndpointServer;
 import org.apache.tomcat.websocket.pojo.PojoMethodMapping;
 
 /**
@@ -210,9 +210,9 @@ public class WsServerContainer extends WsWebSocketContainer
                 sec = ServerEndpointConfig.Builder.create(
                         pojo, methodMapping.getWsPath()).build();
                 sec.getUserProperties().put(
-                        PojoEndpoint.POJO_PATH_PARAM_KEY, pathParameters);
+                        PojoEndpointServer.POJO_PATH_PARAM_KEY, pathParameters);
                 sec.getUserProperties().put(
-                        PojoEndpoint.POJO_METHOD_MAPPING_KEY, methodMapping);
+                        PojoEndpointServer.POJO_METHOD_MAPPING_KEY, methodMapping);
                 return sec;
             }
         }

==================================================
TestWsRemoteEndpoint.java
index eaae8150f3..6d96c657be 100644
--- a/java/org/apache/tomcat/websocket/server/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/server/WsServlet.java
@@ -46,7 +46,7 @@ import javax.xml.bind.DatatypeConverter;
 
 import org.apache.tomcat.websocket.Constants;
 import org.apache.tomcat.websocket.WsRequest;
-import org.apache.tomcat.websocket.pojo.PojoEndpoint;
+import org.apache.tomcat.websocket.pojo.PojoEndpointServer;
 
 /**
  * Handles the initial HTTP connection for WebSocket connections.
@@ -140,7 +140,7 @@ public class WsServlet extends HttpServlet {
             if (Endpoint.class.isAssignableFrom(clazz)) {
                 ep = (Endpoint) sec.getEndpointClass().newInstance();
             } else {
-                ep = new PojoEndpoint();
+                ep = new PojoEndpointServer();
             }
         } catch (InstantiationException | IllegalAccessException e) {
             throw new ServletException(e);

==================================================
TestWsWebSocketContainer.java
index 959343c6ea..1eec424a55 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -24,6 +24,7 @@ import java.util.concurrent.TimeUnit;
 
 import javax.websocket.ClientEndpointConfig.Builder;
 import javax.websocket.ContainerProvider;
+import javax.websocket.Endpoint;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
 
@@ -35,7 +36,8 @@ import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.AsyncHandler;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.AsyncText;
-import org.apache.tomcat.websocket.TesterSingleMessageClient.TesterEndpoint;
+import org.apache.tomcat.websocket.TesterSingleMessageClient.TesterAnnotatedEndpoint;
+import org.apache.tomcat.websocket.TesterSingleMessageClient.TesterProgrammaticEndpoint;
 
 public class TestWsRemoteEndpoint extends TomcatBaseTest {
 
@@ -52,7 +54,16 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
     }
 
     @Test
-    public void testWriter() throws Exception {
+    public void testWriterAnnotation() throws Exception {
+        doTestWriter(TesterAnnotatedEndpoint.class);
+    }
+
+    @Test
+    public void testWriterProgrammatic() throws Exception {
+        doTestWriter(TesterProgrammaticEndpoint.class);
+    }
+
+    private void doTestWriter(Class<?> clazz) throws Exception {
         Tomcat tomcat = getTomcatInstance();
         // Must have a real docBase - just use temp
         Context ctx =
@@ -64,10 +75,18 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                Builder.create().build(),
-                new URI("http://localhost:" + getPort() +
-                        TesterEchoServer.Config.PATH_ASYNC));
+        Session wsSession;
+        URI uri = new URI("http://localhost:" + getPort() +
+                TesterEchoServer.Config.PATH_ASYNC);
+        if (Endpoint.class.isAssignableFrom(clazz)) {
+            @SuppressWarnings("unchecked")
+            Class<? extends Endpoint> endpointClazz =
+                    (Class<? extends Endpoint>) clazz;
+            wsSession = wsContainer.connectToServer(endpointClazz,
+                    Builder.create().build(), uri);
+        } else {
+            wsSession = wsContainer.connectToServer(clazz, uri);
+        }
 
         CountDownLatch latch = new CountDownLatch(1);
         wsSession.getUserProperties().put("latch", latch);

==================================================
TesterSingleMessageClient.java
index ef5d8069e2..077d424ec6 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -49,7 +49,7 @@ import org.apache.coyote.http11.Http11Protocol;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.BasicBinary;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.BasicHandler;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.BasicText;
-import org.apache.tomcat.websocket.TesterSingleMessageClient.TesterEndpoint;
+import org.apache.tomcat.websocket.TesterSingleMessageClient.TesterProgrammaticEndpoint;
 import org.apache.tomcat.websocket.server.WsListener;
 import org.apache.tomcat.websocket.server.WsServerContainer;
 
@@ -83,7 +83,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
-        Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_ASYNC));
@@ -114,7 +114,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
-        wsContainer.connectToServer(TesterEndpoint.class,
+        wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                 new URI("ftp://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_ASYNC));
@@ -133,7 +133,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
-        wsContainer.connectToServer(TesterEndpoint.class,
+        wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                 new URI("http://" + TesterEchoServer.Config.PATH_ASYNC));
     }
@@ -221,7 +221,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                         new URI("http://localhost:" + getPort() +
                                 TesterEchoServer.Config.PATH_BASIC));
@@ -292,7 +292,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() + BlockingConfig.PATH));
 
@@ -373,7 +373,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         tomcat.start();
 
-        Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
+        Session wsSession = wsContainer.connectToServer(TesterProgrammaticEndpoint.class,
                 ClientEndpointConfig.Builder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         ConstantTxConfig.PATH));

==================================================
