8d743bd65877e997af7127f440524cba893658a6
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58178
==================================================
Mark Thomas
==================================================
Thu Aug 6 14:02:43 2015 +0000
==================================================
ELContextImpl.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58178
EL in a tag file should use the Tag file's page context rather than that of the containing page.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1694501 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspContextWrapper.java
index 6f028e17c3..f2e2267983 100644
--- a/java/org/apache/jasper/el/ELContextImpl.java
+++ b/java/org/apache/jasper/el/ELContextImpl.java
@@ -42,7 +42,7 @@ import org.apache.jasper.Constants;
  *
  * @author Jacob Hookom
  */
-public final class ELContextImpl extends ELContext {
+public class ELContextImpl extends ELContext {
 
     private static final FunctionMapper NullFunctionMapper = new FunctionMapper() {
         @Override

==================================================
PageContextImpl.java
index a35b3e434a..14ac9cdd6c 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -23,9 +23,16 @@ import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.el.ELContext;
+import javax.el.ELResolver;
+import javax.el.EvaluationListener;
+import javax.el.FunctionMapper;
+import javax.el.ImportHandler;
+import javax.el.VariableMapper;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
@@ -492,26 +499,135 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
         return alias;
     }
 
-    //private ELContextImpl elContext;
-
     @Override
     public ELContext getELContext() {
-        // instead decorate!!!
-
         if (elContext == null) {
-            elContext = rootJspCtxt.getELContext();
+            elContext = new ELContextWrapper(rootJspCtxt.getELContext(), this);
         }
         return elContext;
+    }
+
+
+    static class ELContextWrapper extends ELContext {
+
+        private final ELContext wrapped;
+        private final PageContext pageContext;
+
+        private ELContextWrapper(ELContext wrapped, PageContext pageContext) {
+            this.wrapped = wrapped;
+            this.pageContext = pageContext;
+        }
+
+        ELContext getWrappedELContext() {
+            return wrapped;
+        }
+
+        @Override
+        public void setPropertyResolved(boolean resolved) {
+            wrapped.setPropertyResolved(resolved);
+        }
+
+        @Override
+        public void setPropertyResolved(Object base, Object property) {
+            wrapped.setPropertyResolved(base, property);
+        }
+
+        @Override
+        public boolean isPropertyResolved() {
+            return wrapped.isPropertyResolved();
+        }
+
+        @Override
+        public void putContext(@SuppressWarnings("rawtypes") Class key, Object contextObject) {
+            wrapped.putContext(key, contextObject);
+        }
+
+        @Override
+        public Object getContext(@SuppressWarnings("rawtypes") Class key) {
+            if (key == JspContext.class) {
+                return pageContext;
+            }
+            return wrapped.getContext(key);
+        }
+
+        @Override
+        public ImportHandler getImportHandler() {
+            return wrapped.getImportHandler();
+        }
+
+        @Override
+        public Locale getLocale() {
+            return wrapped.getLocale();
+        }
+
+        @Override
+        public void setLocale(Locale locale) {
+            wrapped.setLocale(locale);
+        }
+
+        @Override
+        public void addEvaluationListener(EvaluationListener listener) {
+            wrapped.addEvaluationListener(listener);
+        }
+
+        @Override
+        public List<EvaluationListener> getEvaluationListeners() {
+            return wrapped.getEvaluationListeners();
+        }
+
+        @Override
+        public void notifyBeforeEvaluation(String expression) {
+            wrapped.notifyBeforeEvaluation(expression);
+        }
+
+        @Override
+        public void notifyAfterEvaluation(String expression) {
+            wrapped.notifyAfterEvaluation(expression);
+        }
+
+        @Override
+        public void notifyPropertyResolved(Object base, Object property) {
+            wrapped.notifyPropertyResolved(base, property);
+        }
+
+        @Override
+        public boolean isLambdaArgument(String name) {
+            return wrapped.isLambdaArgument(name);
+        }
+
+        @Override
+        public Object getLambdaArgument(String name) {
+            return wrapped.getLambdaArgument(name);
+        }
+
+        @Override
+        public void enterLambdaScope(Map<String, Object> arguments) {
+            wrapped.enterLambdaScope(arguments);
+        }
+
+        @Override
+        public void exitLambdaScope() {
+            wrapped.exitLambdaScope();
+        }
+
+        @Override
+        public Object convertToType(Object obj, Class<?> type) {
+            return wrapped.convertToType(obj, type);
+        }
+
+        @Override
+        public ELResolver getELResolver() {
+            return wrapped.getELResolver();
+        }
+
+        @Override
+        public FunctionMapper getFunctionMapper() {
+            return wrapped.getFunctionMapper();
+        }
 
-        /*
-        if (this.elContext != null) {
-            JspFactory jspFact = JspFactory.getDefaultFactory();
-            ServletContext servletContext = this.getServletContext();
-            JspApplicationContextImpl jspCtx = (JspApplicationContextImpl) jspFact
-                    .getJspApplicationContext(servletContext);
-            this.elContext = jspCtx.createELContext(this);
+        @Override
+        public VariableMapper getVariableMapper() {
+            return wrapped.getVariableMapper();
         }
-        return this.elContext;
-        */
     }
 }

==================================================
TestJspContextWrapper.java
index 49bd1f4dc1..98cc175423 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -52,6 +52,7 @@ import javax.servlet.jsp.tagext.BodyContent;
 import org.apache.jasper.Constants;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.el.ELContextImpl;
+import org.apache.jasper.runtime.JspContextWrapper.ELContextWrapper;
 import org.apache.jasper.security.SecurityUtil;
 
 /**
@@ -930,8 +931,14 @@ public class PageContextImpl extends PageContext {
             final ProtectedFunctionMapper functionMap)
             throws ELException {
         final ExpressionFactory exprFactory = jspf.getJspApplicationContext(pageContext.getServletContext()).getExpressionFactory();
-        ELContextImpl ctx = (ELContextImpl) pageContext.getELContext();
-        ctx.setFunctionMapper(functionMap);
+        ELContext ctx = pageContext.getELContext();
+        ELContextImpl ctxImpl;
+        if (ctx instanceof ELContextWrapper) {
+            ctxImpl = (ELContextImpl) ((ELContextWrapper) ctx).getWrappedELContext();
+        } else {
+            ctxImpl = (ELContextImpl) ctx;
+        }
+        ctxImpl.setFunctionMapper(functionMap);
         ValueExpression ve = exprFactory.createValueExpression(ctx, expression, expectedType);
         return ve.getValue(ctx);
     }

==================================================
