47a09321c0ae06f9fc21914d09ab524e32aeb04d
==================================================
Partial fix for BZ 47214.
==================================================
Mark Thomas
==================================================
Tue Feb 23 22:07:00 2016 +0000
==================================================
ApplicationContextFacade.java
Partial fix for BZ 47214.
Refactor anonymous inner classes into named inner classes when they are referenced by name from elsewhere.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1731974 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncContextImpl.java
index cc469ad659..f1ced89a86 100644
--- a/java/org/apache/catalina/core/ApplicationContextFacade.java
+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java
@@ -858,12 +858,8 @@ public class ApplicationContextFacade implements ServletContext {
                    InvocationTargetException {
 
         if (SecurityUtil.isPackageProtectionEnabled()){
-           return AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
-                @Override
-                public Object run() throws IllegalAccessException, InvocationTargetException{
-                    return method.invoke(context,  params);
-                }
-            });
+           return AccessController.doPrivileged(
+                   new PrivilegedExecuteMethod(method, context,  params));
         } else {
             return method.invoke(context, params);
         }
@@ -895,4 +891,23 @@ public class ApplicationContextFacade implements ServletContext {
 
         throw realException;
     }
+
+
+    private static class PrivilegedExecuteMethod implements PrivilegedExceptionAction<Object> {
+
+        private final Method method;
+        private final ApplicationContext context;
+        private final Object[] params;
+
+        public PrivilegedExecuteMethod(Method method, ApplicationContext context, Object[] params) {
+            this.method = method;
+            this.context = context;
+            this.params = params;
+        }
+
+        @Override
+        public Object run() throws Exception {
+            return method.invoke(context, params);
+        }
+    }
 }

==================================================
SecurityClassLoad.java
index 70b647fd47..d3959fa9ae 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -221,20 +221,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                     (AsyncDispatcher) requestDispatcher;
             final ServletRequest servletRequest = getRequest();
             final ServletResponse servletResponse = getResponse();
-            Runnable run = new Runnable() {
-                @Override
-                public void run() {
-                    request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCHED, null);
-                    try {
-                        applicationDispatcher.dispatch(servletRequest, servletResponse);
-                    }catch (Exception x) {
-                        //log.error("Async.dispatch",x);
-                        throw new RuntimeException(x);
-                    }
-                }
-            };
-
-            this.dispatch = run;
+            this.dispatch = new AsyncRunnable(
+                    request, applicationDispatcher, servletRequest, servletResponse);
             this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);
             clearServletRequestResponse();
         }
@@ -579,4 +567,33 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             coyoteRequest.action(ActionCode.DISPATCH_EXECUTE, null);
         }
     }
+
+
+    private static class AsyncRunnable implements Runnable {
+
+        private final AsyncDispatcher applicationDispatcher;
+        private final Request request;
+        private final ServletRequest servletRequest;
+        private final ServletResponse servletResponse;
+
+        public AsyncRunnable(Request request, AsyncDispatcher applicationDispatcher,
+                ServletRequest servletRequest, ServletResponse servletResponse) {
+            this.request = request;
+            this.applicationDispatcher = applicationDispatcher;
+            this.servletRequest = servletRequest;
+            this.servletResponse = servletResponse;
+        }
+
+        @Override
+        public void run() {
+            request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCHED, null);
+            try {
+                applicationDispatcher.dispatch(servletRequest, servletResponse);
+            }catch (Exception x) {
+                //log.error("Async.dispatch",x);
+                throw new RuntimeException(x);
+            }
+        }
+
+    }
 }

==================================================
