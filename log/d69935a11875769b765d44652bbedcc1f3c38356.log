d69935a11875769b765d44652bbedcc1f3c38356
==================================================
Fix BZ 66120
==================================================
Mark Thomas
==================================================
Mon Aug 22 15:12:46 2022 +0100
==================================================
DeltaRequest.java
Fix BZ 66120

Replicate the session note required by FORM authentication. This enables
session failover / persistence+restoration to work correctly if it
occurs during the FORM authentication process.


==================================================
DeltaSession.java
index 4a5c65792f..1d1dd23e44 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -53,6 +53,7 @@ public class DeltaRequest implements Externalizable {
     public static final int TYPE_MAXINTERVAL = 3;
     public static final int TYPE_AUTHTYPE = 4;
     public static final int TYPE_LISTENER = 5;
+    public static final int TYPE_NOTE = 6;
 
     public static final int ACTION_SET = 0;
     public static final int ACTION_REMOVE = 1;
@@ -90,6 +91,15 @@ public class DeltaRequest implements Externalizable {
         addAction(TYPE_ATTRIBUTE, ACTION_REMOVE, name, null);
     }
 
+    public void setNote(String name, Object value) {
+        int action = (value == null) ? ACTION_REMOVE : ACTION_SET;
+        addAction(TYPE_NOTE, action, name, value);
+    }
+
+    public void removeNote(String name) {
+        addAction(TYPE_NOTE, ACTION_REMOVE, name, null);
+    }
+
     public void setMaxInactiveInterval(int interval) {
         addAction(TYPE_MAXINTERVAL, ACTION_SET, NAME_MAXINTERVAL, Integer.valueOf(interval));
     }
@@ -216,6 +226,20 @@ public class DeltaRequest implements Externalizable {
                     } else {
                         session.removeSessionListener(listener, false);
                     }
+                    break;
+                case TYPE_NOTE:
+                    if (info.getAction() == ACTION_SET) {
+                        if (log.isTraceEnabled()) {
+                            log.trace("Session.setNote('" + info.getName() + "', '" + info.getValue() + "')");
+                        }
+                        session.setNote(info.getName(), info.getValue(), false);
+                    } else {
+                        if (log.isTraceEnabled()) {
+                            log.trace("Session.removeNote('" + info.getName() + "')");
+                        }
+                        session.removeNote(info.getName(), false);
+                    }
+
                     break;
                 default:
                     log.warn(sm.getString("deltaRequest.invalidAttributeInfoType", info));

==================================================
StandardSession.java
index 8e4e803f79..968f02272c 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -808,6 +808,48 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
     }
 
 
+    @Override
+    public void removeNote(String name) {
+        removeNote(name, true);
+    }
+
+    public void removeNote(String name, boolean addDeltaRequest) {
+        lockInternal();
+        try {
+            super.removeNote(name);
+            if (addDeltaRequest) {
+                deltaRequest.removeNote(name);
+            }
+        } finally {
+            unlockInternal();
+        }
+    }
+
+
+    @Override
+    public void setNote(String name, Object value) {
+        setNote(name, value, true);
+    }
+
+    public void setNote(String name, Object value, boolean addDeltaRequest) {
+
+        if (value == null) {
+            removeNote(name, addDeltaRequest);
+            return;
+        }
+
+        lockInternal();
+        try {
+            super.setNote(name, value);
+            if (addDeltaRequest) {
+                deltaRequest.setNote(name, value);
+            }
+        } finally {
+            unlockInternal();
+        }
+    }
+
+
     // -------------------------------------------- HttpSession Private Methods
 
     /**
@@ -852,11 +894,30 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
             log.debug(sm.getString("deltaSession.readSession", id));
         }
 
+        Object nextObject = stream.readObject();
+
+        // Compatibility with versions that do not persist the authentication
+        // notes
+        if (!(nextObject instanceof Integer)) {
+            // Not an Integer so the next two objects will be
+            // 'expected session ID' and 'saved request'
+            if (nextObject != null) {
+                notes.put(org.apache.catalina.authenticator.Constants.SESSION_ID_NOTE, nextObject);
+            }
+            nextObject = stream.readObject();
+            if (nextObject != null) {
+                notes.put(org.apache.catalina.authenticator.Constants.FORM_REQUEST_NOTE, nextObject);
+            }
+
+            // Next object will be the number of attributes
+            nextObject = stream.readObject();
+        }
+
         // Deserialize the attribute count and attribute values
         if (attributes == null) {
             attributes = new ConcurrentHashMap<>();
         }
-        int n = ( (Integer) stream.readObject()).intValue();
+        int n = ((Integer) nextObject).intValue();
         boolean isValidSave = isValid;
         isValid = true;
         for (int i = 0; i < n; i++) {
@@ -955,6 +1016,12 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
             log.debug(sm.getString("deltaSession.writeSession", id));
         }
 
+        // Write the notes associated with authentication. Without these,
+        // authentication can fail without sticky sessions or if there is a
+        // fail-over during authentication.
+        stream.writeObject(notes.get(org.apache.catalina.authenticator.Constants.SESSION_ID_NOTE));
+        stream.writeObject(notes.get(org.apache.catalina.authenticator.Constants.FORM_REQUEST_NOTE));
+
         // Accumulate the names of serializable and non-serializable attributes
         String keys[] = keys();
         List<String> saveNames = new ArrayList<>();

==================================================
