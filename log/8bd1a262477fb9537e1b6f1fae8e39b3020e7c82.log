8bd1a262477fb9537e1b6f1fae8e39b3020e7c82
==================================================
Update internal fork of Commons DBCP 2
==================================================
Mark Thomas
==================================================
Fri May 13 16:35:33 2016 +0000
==================================================
AbandonedTrace.java
Update internal fork of Commons DBCP 2

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1743697 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicDataSource.java
index ce152eab39..9345482e10 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/AbandonedTrace.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/AbandonedTrace.java
@@ -54,7 +54,7 @@ public class AbandonedTrace implements TrackedUse {
      *
      * @param parent AbandonedTrace parent object
      */
-    public AbandonedTrace(AbandonedTrace parent) {
+    public AbandonedTrace(final AbandonedTrace parent) {
         init(parent);
     }
 
@@ -63,7 +63,7 @@ public class AbandonedTrace implements TrackedUse {
      *
      * @param parent AbandonedTrace parent object
      */
-    private void init(AbandonedTrace parent) {
+    private void init(final AbandonedTrace parent) {
         if (parent != null) {
             parent.addTrace(this);
         }
@@ -92,7 +92,7 @@ public class AbandonedTrace implements TrackedUse {
      *
      * @param time time in ms
      */
-    protected void setLastUsed(long time) {
+    protected void setLastUsed(final long time) {
         lastUsed = time;
     }
 
@@ -102,7 +102,7 @@ public class AbandonedTrace implements TrackedUse {
      *
      * @param trace AbandonedTrace object to add
      */
-    protected void addTrace(AbandonedTrace trace) {
+    protected void addTrace(final AbandonedTrace trace) {
         synchronized (this.traceList) {
             this.traceList.add(new WeakReference<>(trace));
         }
@@ -125,15 +125,15 @@ public class AbandonedTrace implements TrackedUse {
      * @return List of objects
      */
     protected List<AbandonedTrace> getTrace() {
-        int size = traceList.size();
+        final int size = traceList.size();
         if (size == 0) {
             return Collections.emptyList();
         }
-        ArrayList<AbandonedTrace> result = new ArrayList<>(size);
+        final ArrayList<AbandonedTrace> result = new ArrayList<>(size);
         synchronized (this.traceList) {
-            Iterator<WeakReference<AbandonedTrace>> iter = traceList.iterator();
+            final Iterator<WeakReference<AbandonedTrace>> iter = traceList.iterator();
             while (iter.hasNext()) {
-                WeakReference<AbandonedTrace> ref = iter.next();
+                final WeakReference<AbandonedTrace> ref = iter.next();
                 if (ref.get() == null) {
                     // Clean-up since we are here anyway
                     iter.remove();
@@ -150,11 +150,11 @@ public class AbandonedTrace implements TrackedUse {
      *
      * @param trace AbandonedTrace object to remove
      */
-    protected void removeTrace(AbandonedTrace trace) {
+    protected void removeTrace(final AbandonedTrace trace) {
         synchronized(this.traceList) {
-            Iterator<WeakReference<AbandonedTrace>> iter = traceList.iterator();
+            final Iterator<WeakReference<AbandonedTrace>> iter = traceList.iterator();
             while (iter.hasNext()) {
-                WeakReference<AbandonedTrace> ref = iter.next();
+                final WeakReference<AbandonedTrace> ref = iter.next();
                 if (trace.equals(ref.get())) {
                     iter.remove();
                     break;

==================================================
BasicDataSourceFactory.java
index 9d58ec66f8..b061f33616 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -59,7 +59,7 @@ import org.apache.tomcat.dbcp.pool2.impl.GenericObjectPoolConfig;
 /**
  * <p>Basic implementation of <code>javax.sql.DataSource</code> that is
  * configured via JavaBeans properties.  This is not the only way to
- * combine the <em>commons-dbcp</em> and <em>commons-pool</em> packages,
+ * combine the <em>commons-dbcp2</em> and <em>commons-pool2</em> packages,
  * but provides a "one stop shopping" solution for basic requirements.</p>
  *
  * @author Glenn L. Nielsen
@@ -80,8 +80,8 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
             // but the following classes are not loaded and therefore require
             // explicit loading.
             if (Utils.IS_SECURITY_ENABLED) {
-                ClassLoader loader = BasicDataSource.class.getClassLoader();
-                String dbcpPackageName = BasicDataSource.class.getPackage().getName();
+                final ClassLoader loader = BasicDataSource.class.getClassLoader();
+                final String dbcpPackageName = BasicDataSource.class.getPackage().getName();
                 loader.loadClass(dbcpPackageName + ".BasicDataSource$PaGetConnection");
                 loader.loadClass(dbcpPackageName + ".DelegatingCallableStatement");
                 loader.loadClass(dbcpPackageName + ".DelegatingDatabaseMetaData");
@@ -92,11 +92,11 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                 loader.loadClass(dbcpPackageName + ".PoolingConnection$StatementType");
                 loader.loadClass(dbcpPackageName + ".PStmtKey");
 
-                String poolPackageName = PooledObject.class.getPackage().getName();
+                final String poolPackageName = PooledObject.class.getPackage().getName();
                 loader.loadClass(poolPackageName + ".impl.LinkedBlockingDeque$Node");
                 loader.loadClass(poolPackageName + ".impl.GenericKeyedObjectPool$ObjectDeque");
             }
-        } catch (ClassNotFoundException cnfe) {
+        } catch (final ClassNotFoundException cnfe) {
             throw new IllegalStateException("Unable to pre-load classes", cnfe);
         }
     }
@@ -129,7 +129,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param defaultAutoCommit default auto-commit value
      */
-    public void setDefaultAutoCommit(Boolean defaultAutoCommit) {
+    public void setDefaultAutoCommit(final Boolean defaultAutoCommit) {
         this.defaultAutoCommit = defaultAutoCommit;
     }
 
@@ -159,7 +159,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param defaultReadOnly default read-only value
      */
-    public void setDefaultReadOnly(Boolean defaultReadOnly) {
+    public void setDefaultReadOnly(final Boolean defaultReadOnly) {
         this.defaultReadOnly = defaultReadOnly;
     }
 
@@ -193,7 +193,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * state
      * @see Connection#getTransactionIsolation
      */
-    public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {
+    public void setDefaultTransactionIsolation(final int defaultTransactionIsolation) {
         this.defaultTransactionIsolation = defaultTransactionIsolation;
     }
 
@@ -217,7 +217,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * default will be used.
      * @param defaultQueryTimeout The new default timeout
      */
-    public void setDefaultQueryTimeout(Integer defaultQueryTimeout) {
+    public void setDefaultQueryTimeout(final Integer defaultQueryTimeout) {
         this.defaultQueryTimeout = defaultQueryTimeout;
     }
 
@@ -247,7 +247,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param defaultCatalog the default catalog
      */
-    public void setDefaultCatalog(String defaultCatalog) {
+    public void setDefaultCatalog(final String defaultCatalog) {
         if (defaultCatalog != null && defaultCatalog.trim().length() > 0) {
             this.defaultCatalog = defaultCatalog;
         }
@@ -277,7 +277,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param cacheState    The new value for the state caching flag
      */
-    public void setCacheState(boolean cacheState) {
+    public void setCacheState(final boolean cacheState) {
         this.cacheState = cacheState;
     }
 
@@ -310,7 +310,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param driver The driver to use
      */
-    public synchronized void setDriver(Driver driver) {
+    public synchronized void setDriver(final Driver driver) {
         this.driver = driver;
     }
 
@@ -320,13 +320,13 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     private String driverClassName = null;
 
     /**
-     * Returns the jdbc driver class name.
+     * Returns the JDBC driver class name.
      * <p>
      * Note: This getter only returns the last value set by a call to
      * {@link #setDriverClassName(String)}. It does not return the class name of
      * any driver that may have been set via {@link #setDriver(Driver)}.
      *
-     * @return the jdbc driver class name
+     * @return the JDBC driver class name
      */
     @Override
     public synchronized String getDriverClassName() {
@@ -334,16 +334,16 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     }
 
     /**
-     * <p>Sets the jdbc driver class name.</p>
+     * <p>Sets the JDBC driver class name.</p>
      * <p>
      * Note: this method currently has no effect once the pool has been
      * initialized.  The pool is initialized the first time one of the
      * following methods is invoked: <code>getConnection, setLogwriter,
      * setLoginTimeout, getLoginTimeout, getLogWriter.</code></p>
      *
-     * @param driverClassName the class name of the jdbc driver
+     * @param driverClassName the class name of the JDBC driver
      */
-    public synchronized void setDriverClassName(String driverClassName) {
+    public synchronized void setDriverClassName(final String driverClassName) {
         if (driverClassName != null && driverClassName.trim().length() > 0) {
             this.driverClassName = driverClassName;
         }
@@ -386,7 +386,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *                          driver
      */
     public synchronized void setDriverClassLoader(
-            ClassLoader driverClassLoader) {
+            final ClassLoader driverClassLoader) {
         this.driverClassLoader = driverClassLoader;
     }
 
@@ -414,7 +414,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param lifo the new value for the LIFO property
      */
-    public synchronized void setLifo(boolean lifo) {
+    public synchronized void setLifo(final boolean lifo) {
         this.lifo = lifo;
         if (connectionPool != null) {
             connectionPool.setLifo(lifo);
@@ -447,7 +447,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param maxTotal the new value for maxTotal
      * @see #getMaxTotal()
      */
-    public synchronized void setMaxTotal(int maxTotal) {
+    public synchronized void setMaxTotal(final int maxTotal) {
         this.maxTotal = maxTotal;
         if (connectionPool != null) {
             connectionPool.setMaxTotal(maxTotal);
@@ -486,7 +486,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @see #getMaxIdle()
      * @param maxIdle the new value for maxIdle
      */
-    public synchronized void setMaxIdle(int maxIdle) {
+    public synchronized void setMaxIdle(final int maxIdle) {
         this.maxIdle = maxIdle;
         if (connectionPool != null) {
             connectionPool.setMaxIdle(maxIdle);
@@ -525,7 +525,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param minIdle the new value for minIdle
      * @see GenericObjectPool#setMinIdle(int)
      */
-    public synchronized void setMinIdle(int minIdle) {
+    public synchronized void setMinIdle(final int minIdle) {
        this.minIdle = minIdle;
        if (connectionPool != null) {
            connectionPool.setMinIdle(minIdle);
@@ -559,7 +559,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param initialSize the number of connections created when the pool
      * is initialized
      */
-    public synchronized void setInitialSize(int initialSize) {
+    public synchronized void setInitialSize(final int initialSize) {
         this.initialSize = initialSize;
     }
 
@@ -590,7 +590,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param maxWaitMillis the new value for MaxWaitMillis
      * @see #getMaxWaitMillis()
      */
-    public synchronized void setMaxWaitMillis(long maxWaitMillis) {
+    public synchronized void setMaxWaitMillis(final long maxWaitMillis) {
         this.maxWaitMillis = maxWaitMillis;
         if (connectionPool != null) {
             connectionPool.setMaxWaitMillis(maxWaitMillis);
@@ -623,7 +623,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param poolingStatements pooling on or off
      */
-    public synchronized void setPoolPreparedStatements(boolean poolingStatements) {
+    public synchronized void setPoolPreparedStatements(final boolean poolingStatements) {
         this.poolPreparedStatements = poolingStatements;
     }
 
@@ -662,7 +662,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param maxOpenStatements the new maximum number of prepared statements
      */
-    public synchronized void setMaxOpenPreparedStatements(int maxOpenStatements) {
+    public synchronized void setMaxOpenPreparedStatements(final int maxOpenStatements) {
         this.maxOpenPreparedStatements = maxOpenStatements;
     }
 
@@ -693,7 +693,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param testOnCreate new value for testOnCreate property
      */
-    public synchronized void setTestOnCreate(boolean testOnCreate) {
+    public synchronized void setTestOnCreate(final boolean testOnCreate) {
         this.testOnCreate = testOnCreate;
         if (connectionPool != null) {
             connectionPool.setTestOnCreate(testOnCreate);
@@ -727,7 +727,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param testOnBorrow new value for testOnBorrow property
      */
-    public synchronized void setTestOnBorrow(boolean testOnBorrow) {
+    public synchronized void setTestOnBorrow(final boolean testOnBorrow) {
         this.testOnBorrow = testOnBorrow;
         if (connectionPool != null) {
             connectionPool.setTestOnBorrow(testOnBorrow);
@@ -758,7 +758,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param testOnReturn new value for testOnReturn property
      */
-    public synchronized void setTestOnReturn(boolean testOnReturn) {
+    public synchronized void setTestOnReturn(final boolean testOnReturn) {
         this.testOnReturn = testOnReturn;
         if (connectionPool != null) {
             connectionPool.setTestOnReturn(testOnReturn);
@@ -791,7 +791,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param timeBetweenEvictionRunsMillis the new time between evictor runs
      * @see #timeBetweenEvictionRunsMillis
      */
-    public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
+    public synchronized void setTimeBetweenEvictionRunsMillis(final long timeBetweenEvictionRunsMillis) {
         this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
         if (connectionPool != null) {
             connectionPool.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
@@ -824,7 +824,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * value
      * @see #numTestsPerEvictionRun
      */
-    public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
+    public synchronized void setNumTestsPerEvictionRun(final int numTestsPerEvictionRun) {
         this.numTestsPerEvictionRun = numTestsPerEvictionRun;
         if (connectionPool != null) {
             connectionPool.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
@@ -856,7 +856,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * may sit idle in the pool
      * @see #minEvictableIdleTimeMillis
      */
-    public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
+    public synchronized void setMinEvictableIdleTimeMillis(final long minEvictableIdleTimeMillis) {
         this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
         if (connectionPool != null) {
             connectionPool.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
@@ -883,7 +883,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * assuming there are minIdle idle connections in the pool.
      * @see #getSoftMinEvictableIdleTimeMillis
      */
-    public synchronized void setSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {
+    public synchronized void setSoftMinEvictableIdleTimeMillis(final long softMinEvictableIdleTimeMillis) {
         this.softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
         if (connectionPool != null) {
             connectionPool.setSoftMinEvictableIdleTimeMillis(softMinEvictableIdleTimeMillis);
@@ -896,8 +896,8 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * the extra condition that at least "minIdle" connections remain in the
      * pool.</p>
      *
-     * <p>When {@link #getMinEvictableIdleTimeMillis() miniEvictableIdleTimeMillis}
-     * is set to a positive value, miniEvictableIdleTimeMillis is examined
+     * <p>When {@link #getMinEvictableIdleTimeMillis() minEvictableIdleTimeMillis}
+     * is set to a positive value, minEvictableIdleTimeMillis is examined
      * first by the idle connection evictor - i.e. when idle connections are
      * visited by the evictor, idle time is first compared against
      * {@code minEvictableIdleTimeMillis} (without considering the number of idle
@@ -932,7 +932,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *                                  EvictionPolicy implementation
      */
     public synchronized void setEvictionPolicyClassName(
-            String evictionPolicyClassName) {
+            final String evictionPolicyClassName) {
         if (connectionPool != null) {
             connectionPool.setEvictionPolicyClassName(evictionPolicyClassName);
         }
@@ -964,7 +964,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param testWhileIdle new value for testWhileIdle property
      */
-    public synchronized void setTestWhileIdle(boolean testWhileIdle) {
+    public synchronized void setTestWhileIdle(final boolean testWhileIdle) {
         this.testWhileIdle = testWhileIdle;
         if (connectionPool != null) {
             connectionPool.setTestWhileIdle(testWhileIdle);
@@ -980,7 +980,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     @Override
     public int getNumActive() {
         // Copy reference to avoid NPE if close happens after null check
-        GenericObjectPool<PoolableConnection> pool = connectionPool;
+        final GenericObjectPool<PoolableConnection> pool = connectionPool;
         if (pool != null) {
             return pool.getNumActive();
         }
@@ -997,7 +997,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     @Override
     public int getNumIdle() {
         // Copy reference to avoid NPE if close happens after null check
-        GenericObjectPool<PoolableConnection> pool = connectionPool;
+        final GenericObjectPool<PoolableConnection> pool = connectionPool;
         if (pool != null) {
             return pool.getNumIdle();
         }
@@ -1030,7 +1030,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param password new value for the password
      */
-    public void setPassword(String password) {
+    public void setPassword(final String password) {
         this.password = password;
     }
 
@@ -1061,7 +1061,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param url the new value for the JDBC connection url
      */
-    public synchronized void setUrl(String url) {
+    public synchronized void setUrl(final String url) {
         this.url = url;
     }
 
@@ -1092,7 +1092,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param username the new value for the JDBC connection username
      */
-    public void setUsername(String username) {
+    public void setUsername(final String username) {
         this.username = username;
     }
 
@@ -1127,7 +1127,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param validationQuery the new value for the validation query
      */
-    public void setValidationQuery(String validationQuery) {
+    public void setValidationQuery(final String validationQuery) {
         if (validationQuery != null && validationQuery.trim().length() > 0) {
             this.validationQuery = validationQuery;
         } else {
@@ -1163,7 +1163,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param timeout new validation query timeout value in seconds
      */
-    public void setValidationQueryTimeout(int timeout) {
+    public void setValidationQueryTimeout(final int timeout) {
         this.validationQueryTimeout = timeout;
     }
 
@@ -1185,7 +1185,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @return initialization SQL statements
      */
     public List<String> getConnectionInitSqls() {
-        List<String> result = connectionInitSqls;
+        final List<String> result = connectionInitSqls;
         if (result == null) {
             return Collections.emptyList();
         }
@@ -1198,7 +1198,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      */
     @Override
     public String[] getConnectionInitSqlsAsArray() {
-        Collection<String> result = getConnectionInitSqls();
+        final Collection<String> result = getConnectionInitSqls();
         return result.toArray(new String[result.size()]);
     }
 
@@ -1214,10 +1214,10 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param connectionInitSqls Collection of SQL statements to execute
      * on connection creation
      */
-    public void setConnectionInitSqls(Collection<String> connectionInitSqls) {
+    public void setConnectionInitSqls(final Collection<String> connectionInitSqls) {
         if (connectionInitSqls != null && connectionInitSqls.size() > 0) {
             ArrayList<String> newVal = null;
-            for (String s : connectionInitSqls) {
+            for (final String s : connectionInitSqls) {
             if (s != null && s.trim().length() > 0) {
                     if (newVal == null) {
                         newVal = new ArrayList<>();
@@ -1260,7 +1260,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param allow Access to the underlying connection is granted when true.
      */
-    public synchronized void setAccessToUnderlyingConnectionAllowed(boolean allow) {
+    public synchronized void setAccessToUnderlyingConnectionAllowed(final boolean allow) {
         this.accessToUnderlyingConnectionAllowed = allow;
     }
 
@@ -1300,7 +1300,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * setLoginTimeout, getLoginTimeout, getLogWriter.</code></p>
      * @param maxConnLifetimeMillis The maximum connection lifetime
      */
-    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
+    public void setMaxConnLifetimeMillis(final long maxConnLifetimeMillis) {
         this.maxConnLifetimeMillis = maxConnLifetimeMillis;
     }
 
@@ -1311,7 +1311,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * to false to suppress log messages when connections expire.
      * @param logExpiredConnections <code>true</code> to log expired connections
      */
-    public void setLogExpiredConnections(boolean logExpiredConnections) {
+    public void setLogExpiredConnections(final boolean logExpiredConnections) {
         this.logExpiredConnections = logExpiredConnections;
     }
 
@@ -1333,7 +1333,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * name will be used in preference to any specified by the other component.
      * @param jmxName The JMX name
      */
-    public void setJmxName(String jmxName) {
+    public void setJmxName(final String jmxName) {
         this.jmxName = jmxName;
     }
 
@@ -1360,7 +1360,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * is returned. It is <code>true</code> by default.
      * @param enableAutoCommitOnReturn The new value
      */
-    public void setEnableAutoCommitOnReturn(boolean enableAutoCommitOnReturn) {
+    public void setEnableAutoCommitOnReturn(final boolean enableAutoCommitOnReturn) {
         this.enableAutoCommitOnReturn = enableAutoCommitOnReturn;
     }
 
@@ -1382,7 +1382,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * is not read only.
      * @param rollbackOnReturn The new value
      */
-    public void setRollbackOnReturn(boolean rollbackOnReturn) {
+    public void setRollbackOnReturn(final boolean rollbackOnReturn) {
         this.rollbackOnReturn = rollbackOnReturn;
     }
 
@@ -1395,7 +1395,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @since 2.1
      */
     public Set<String> getDisconnectionSqlCodes() {
-        Set<String> result = disconnectionSqlCodes;
+        final Set<String> result = disconnectionSqlCodes;
         if (result == null) {
             return Collections.emptySet();
         }
@@ -1410,7 +1410,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      */
     @Override
     public String[] getDisconnectionSqlCodesAsArray() {
-        Collection<String> result = getDisconnectionSqlCodes();
+        final Collection<String> result = getDisconnectionSqlCodes();
         return result.toArray(new String[result.size()]);
     }
 
@@ -1436,10 +1436,10 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param disconnectionSqlCodes SQL_STATE codes considered to signal fatal conditions
      * @since 2.1
      */
-    public void setDisconnectionSqlCodes(Collection<String> disconnectionSqlCodes) {
+    public void setDisconnectionSqlCodes(final Collection<String> disconnectionSqlCodes) {
         if (disconnectionSqlCodes != null && disconnectionSqlCodes.size() > 0) {
             HashSet<String> newVal = null;
-            for (String s : disconnectionSqlCodes) {
+            for (final String s : disconnectionSqlCodes) {
             if (s != null && s.trim().length() > 0) {
                     if (newVal == null) {
                         newVal = new HashSet<>();
@@ -1475,7 +1475,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * fast fail validation
      * @since 2.1
      */
-    public void setFastFailValidation(boolean fastFailValidation) {
+    public void setFastFailValidation(final boolean fastFailValidation) {
         this.fastFailValidation = fastFailValidation;
     }
 
@@ -1529,11 +1529,11 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     @Override
     public Connection getConnection() throws SQLException {
         if (Utils.IS_SECURITY_ENABLED) {
-            PrivilegedExceptionAction<Connection> action = new PaGetConnection();
+            final PrivilegedExceptionAction<Connection> action = new PaGetConnection();
             try {
                 return AccessController.doPrivileged(action);
-            } catch (PrivilegedActionException e) {
-                Throwable cause = e.getCause();
+            } catch (final PrivilegedActionException e) {
+                final Throwable cause = e.getCause();
                 if (cause instanceof SQLException) {
                     throw (SQLException) cause;
                 }
@@ -1556,7 +1556,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @return nothing - always throws UnsupportedOperationException
      */
     @Override
-    public Connection getConnection(String user, String pass) throws SQLException {
+    public Connection getConnection(final String user, final String pass) throws SQLException {
         // This method isn't supported by the PoolingDataSource returned by
         // the createDataSource
         throw new UnsupportedOperationException("Not supported by BasicDataSource");
@@ -1614,7 +1614,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @throws SQLException if a database access error occurs
      */
     @Override
-    public void setLoginTimeout(int loginTimeout) throws SQLException {
+    public void setLoginTimeout(final int loginTimeout) throws SQLException {
         // This method isn't supported by the PoolingDataSource returned by
         // the createDataSource
         throw new UnsupportedOperationException("Not supported by BasicDataSource");
@@ -1631,7 +1631,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @throws SQLException if a database access error occurs
      */
     @Override
-    public void setLogWriter(PrintWriter logWriter) throws SQLException {
+    public void setLogWriter(final PrintWriter logWriter) throws SQLException {
         createDataSource().setLogWriter(logWriter);
         this.logWriter = logWriter;
     }
@@ -1671,7 +1671,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @see #getRemoveAbandonedOnMaintenance()
      */
     public void setRemoveAbandonedOnMaintenance(
-            boolean removeAbandonedOnMaintenance) {
+            final boolean removeAbandonedOnMaintenance) {
         if (abandonedConfig == null) {
             abandonedConfig = new AbandonedConfig();
         }
@@ -1704,7 +1704,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *                                removed when connections are borrowed from the pool.
      * @see #getRemoveAbandonedOnBorrow()
      */
-    public void setRemoveAbandonedOnBorrow(boolean removeAbandonedOnBorrow) {
+    public void setRemoveAbandonedOnBorrow(final boolean removeAbandonedOnBorrow) {
         if (abandonedConfig == null) {
             abandonedConfig = new AbandonedConfig();
         }
@@ -1749,7 +1749,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @see #getRemoveAbandonedOnBorrow()
      * @see #getRemoveAbandonedOnMaintenance()
      */
-    public void setRemoveAbandonedTimeout(int removeAbandonedTimeout) {
+    public void setRemoveAbandonedTimeout(final int removeAbandonedTimeout) {
         if (abandonedConfig == null) {
             abandonedConfig = new AbandonedConfig();
         }
@@ -1777,7 +1777,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     /**
      * @param logAbandoned new logAbandoned property value
      */
-    public void setLogAbandoned(boolean logAbandoned) {
+    public void setLogAbandoned(final boolean logAbandoned) {
         if (abandonedConfig == null) {
             abandonedConfig = new AbandonedConfig();
         }
@@ -1802,7 +1802,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @param logWriter The new log writer
      */
-    public void setAbandonedLogWriter(PrintWriter logWriter) {
+    public void setAbandonedLogWriter(final PrintWriter logWriter) {
         if (abandonedConfig == null) {
             abandonedConfig = new AbandonedConfig();
         }
@@ -1835,7 +1835,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *                              the recording of a stack trace on every use
      *                              of a pooled connection
      */
-    public void setAbandonedUsageTracking(boolean usageTracking) {
+    public void setAbandonedUsageTracking(final boolean usageTracking) {
         if (abandonedConfig == null) {
             abandonedConfig = new AbandonedConfig();
         }
@@ -1854,7 +1854,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param name Name of the custom connection property
      * @param value Value of the custom connection property
      */
-    public void addConnectionProperty(String name, String value) {
+    public void addConnectionProperty(final String name, final String value) {
         connectionProperties.put(name, value);
     }
 
@@ -1864,7 +1864,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param name Name of the custom connection property to remove
      * @see #addConnectionProperty(String, String)
      */
-    public void removeConnectionProperty(String name) {
+    public void removeConnectionProperty(final String name) {
         connectionProperties.remove(name);
     }
 
@@ -1879,19 +1879,19 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @param connectionProperties the connection properties used to
      * create new connections
      */
-    public void setConnectionProperties(String connectionProperties) {
+    public void setConnectionProperties(final String connectionProperties) {
         if (connectionProperties == null) {
             throw new NullPointerException("connectionProperties is null");
         }
 
-        String[] entries = connectionProperties.split(";");
-        Properties properties = new Properties();
-        for (String entry : entries) {
+        final String[] entries = connectionProperties.split(";");
+        final Properties properties = new Properties();
+        for (final String entry : entries) {
             if (entry.length() > 0) {
-                int index = entry.indexOf('=');
+                final int index = entry.indexOf('=');
                 if (index > 0) {
-                    String name = entry.substring(0, index);
-                    String value = entry.substring(index + 1);
+                    final String name = entry.substring(0, index);
+                    final String value = entry.substring(index + 1);
                     properties.setProperty(name, value);
                 } else {
                     // no value is empty string which is how java.util.Properties works
@@ -1923,26 +1923,26 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     @Override
     public synchronized void close() throws SQLException {
         if (registeredJmxName != null) {
-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+            final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             try {
                 mbs.unregisterMBean(registeredJmxName);
-            } catch (JMException e) {
+            } catch (final JMException e) {
                 log.warn("Failed to unregister the JMX name: " + registeredJmxName, e);
             } finally {
                 registeredJmxName = null;
             }
         }
         closed = true;
-        GenericObjectPool<?> oldpool = connectionPool;
+        final GenericObjectPool<?> oldpool = connectionPool;
         connectionPool = null;
         dataSource = null;
         try {
             if (oldpool != null) {
                 oldpool.close();
             }
-        } catch(RuntimeException e) {
+        } catch(final RuntimeException e) {
             throw e;
-        } catch(Exception e) {
+        } catch(final Exception e) {
             throw new SQLException(Utils.getMessage("pool.close.fail"), e);
         }
     }
@@ -1957,12 +1957,12 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     }
 
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         return false;
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         throw new SQLException("BasicDataSource is not a wrapper.");
     }
 
@@ -1979,7 +1979,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *             if invalidating the connection failed.
      * @since 2.1
      */
-    public void invalidateConnection(Connection connection) throws IllegalStateException {
+    public void invalidateConnection(final Connection connection) throws IllegalStateException {
         if (connection == null) {
             return;
         }
@@ -1994,13 +1994,13 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                 throw new IllegalStateException(
                         "Cannot invalidate connection: Connection is not a poolable connection.");
             }
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             throw new IllegalStateException("Cannot invalidate connection: Unwrapping poolable connection failed.", e);
         }
 
         try {
             connectionPool.invalidateObject(poolableConnection);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new IllegalStateException("Invalidating connection threw unexpected exception", e);
         }
     }
@@ -2034,7 +2034,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
             jmxRegister();
 
             // create factory which returns raw physical connections
-            ConnectionFactory driverConnectionFactory = createConnectionFactory();
+            final ConnectionFactory driverConnectionFactory = createConnectionFactory();
 
             // Set up the poolable connection factory
             boolean success = false;
@@ -2047,11 +2047,11 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                 poolableConnectionFactory.setMaxOpenPrepatedStatements(
                         maxOpenPreparedStatements);
                 success = true;
-            } catch (SQLException se) {
+            } catch (final SQLException se) {
                 throw se;
-            } catch (RuntimeException rte) {
+            } catch (final RuntimeException rte) {
                 throw rte;
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new SQLException("Error creating connection factory", ex);
             }
 
@@ -2067,11 +2067,11 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                 newDataSource = createDataSourceInstance();
                 newDataSource.setLogWriter(logWriter);
                 success = true;
-            } catch (SQLException se) {
+            } catch (final SQLException se) {
                 throw se;
-            } catch (RuntimeException rte) {
+            } catch (final RuntimeException rte) {
                 throw rte;
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new SQLException("Error creating datasource", ex);
             } finally {
                 if (!success) {
@@ -2084,7 +2084,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                 for (int i = 0 ; i < initialSize ; i++) {
                     connectionPool.addObject();
                 }
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 closeConnectionPool();
                 throw new SQLException("Error preloading the connection pool", e);
             }
@@ -2132,13 +2132,13 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                             driverFromCCL = Class.forName(
                                     driverClassName, true, driverClassLoader);
                         }
-                    } catch (ClassNotFoundException cnfe) {
+                    } catch (final ClassNotFoundException cnfe) {
                         driverFromCCL = Thread.currentThread(
                                 ).getContextClassLoader().loadClass(
                                         driverClassName);
                     }
-                } catch (Exception t) {
-                    String message = "Cannot load JDBC driver class '" +
+                } catch (final Exception t) {
+                    final String message = "Cannot load JDBC driver class '" +
                         driverClassName + "'";
                     logWriter.println(message);
                     t.printStackTrace(logWriter);
@@ -2158,8 +2158,8 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
                         throw new SQLException("No suitable driver", "08001");
                     }
                 }
-            } catch (Exception t) {
-                String message = "Cannot create JDBC driver of class '" +
+            } catch (final Exception t) {
+                final String message = "Cannot create JDBC driver of class '" +
                     (driverClassName != null ? driverClassName : "") +
                     "' for connect URL '" + url + "'";
                 logWriter.println(message);
@@ -2169,21 +2169,21 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         }
 
         // Set up the driver connection factory we will use
-        String user = username;
+        final String user = username;
         if (user != null) {
             connectionProperties.put("user", user);
         } else {
             log("DBCP DataSource configured without a 'username'");
         }
 
-        String pwd = password;
+        final String pwd = password;
         if (pwd != null) {
             connectionProperties.put("password", pwd);
         } else {
             log("DBCP DataSource configured without a 'password'");
         }
 
-        ConnectionFactory driverConnectionFactory =
+        final ConnectionFactory driverConnectionFactory =
                 new DriverConnectionFactory(driverToUse, url, connectionProperties);
         return driverConnectionFactory;
     }
@@ -2199,9 +2199,9 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * to be started.
      * @param factory The connection factory
      */
-    protected void createConnectionPool(PoolableConnectionFactory factory) {
+    protected void createConnectionPool(final PoolableConnectionFactory factory) {
         // Create an object pool to contain our active connections
-        GenericObjectPoolConfig config = new GenericObjectPoolConfig();
+        final GenericObjectPoolConfig config = new GenericObjectPoolConfig();
         updateJmxName(config);
         config.setJmxEnabled(registeredJmxName != null);  // Disable JMX on the underlying pool if the DS is not registered.
         GenericObjectPool<PoolableConnection> gop;
@@ -2222,6 +2222,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         gop.setTestOnReturn(testOnReturn);
         gop.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
         gop.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
+        gop.setSoftMinEvictableIdleTimeMillis(softMinEvictableIdleTimeMillis);
         gop.setTestWhileIdle(testWhileIdle);
         gop.setLifo(lifo);
         gop.setSwallowedExceptionListener(new SwallowedExceptionLogger(log, logExpiredConnections));
@@ -2234,13 +2235,13 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * Closes the connection pool, silently swallowing any exception that occurs.
      */
     private void closeConnectionPool() {
-        GenericObjectPool<?> oldpool = connectionPool;
+        final GenericObjectPool<?> oldpool = connectionPool;
         connectionPool = null;
         try {
             if (oldpool != null) {
                 oldpool.close();
             }
-        } catch(Exception e) {
+        } catch(final Exception e) {
             /* Ignore */
         }
     }
@@ -2261,7 +2262,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @throws SQLException if unable to create a datasource instance
      */
     protected DataSource createDataSourceInstance() throws SQLException {
-        PoolingDataSource<PoolableConnection> pds = new PoolingDataSource<>(connectionPool);
+        final PoolingDataSource<PoolableConnection> pds = new PoolingDataSource<>(connectionPool);
         pds.setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());
         return pds;
     }
@@ -2275,7 +2276,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @throws SQLException if an error occurs creating the PoolableConnectionFactory
      */
     protected PoolableConnectionFactory createPoolableConnectionFactory(
-            ConnectionFactory driverConnectionFactory) throws SQLException {
+            final ConnectionFactory driverConnectionFactory) throws SQLException {
         PoolableConnectionFactory connectionFactory = null;
         try {
             connectionFactory = new PoolableConnectionFactory(driverConnectionFactory, registeredJmxName);
@@ -2296,16 +2297,16 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
             connectionFactory.setFastFailValidation(fastFailValidation);
             connectionFactory.setDisconnectionSqlCodes(disconnectionSqlCodes);
             validateConnectionFactory(connectionFactory);
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Cannot create PoolableConnectionFactory (" + e.getMessage() + ")", e);
         }
         return connectionFactory;
     }
 
     protected static void validateConnectionFactory(
-            PoolableConnectionFactory connectionFactory) throws Exception {
+            final PoolableConnectionFactory connectionFactory) throws Exception {
         PoolableConnection conn = null;
         PooledObject<PoolableConnection> p = null;
         try {
@@ -2322,7 +2323,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         }
     }
 
-    protected void log(String message) {
+    protected void log(final String message) {
         if (logWriter != null) {
             logWriter.println(message);
         }
@@ -2339,20 +2340,20 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
             return;
         }
         // Return immediately if no JMX name has been specified
-        String requestedName = getJmxName();
+        final String requestedName = getJmxName();
         if (requestedName == null) {
             return;
         }
         ObjectName oname;
         try {
              oname = new ObjectName(requestedName);
-        } catch (MalformedObjectNameException e) {
+        } catch (final MalformedObjectNameException e) {
             log.warn("The requested JMX name [" + requestedName +
                     "] was not valid and will be ignored.");
             return;
         }
 
-        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+        final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
         try {
             mbs.registerMBean(this, oname);
         } catch (InstanceAlreadyExistsException | MBeanRegistrationException
@@ -2362,12 +2363,12 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     }
 
     @Override
-    public ObjectName preRegister(MBeanServer server, ObjectName name) {
-        String requestedName = getJmxName();
+    public ObjectName preRegister(final MBeanServer server, final ObjectName name) {
+        final String requestedName = getJmxName();
         if (requestedName != null) {
             try {
                 registeredJmxName = new ObjectName(requestedName);
-            } catch (MalformedObjectNameException e) {
+            } catch (final MalformedObjectNameException e) {
                 log.warn("The requested JMX name [" + requestedName +
                         "] was not valid and will be ignored.");
             }
@@ -2379,7 +2380,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     }
 
     @Override
-    public void postRegister(Boolean registrationDone) {
+    public void postRegister(final Boolean registrationDone) {
         // NO-OP
     }
 
@@ -2393,11 +2394,11 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         // NO-OP
     }
 
-    private void updateJmxName(GenericObjectPoolConfig config) {
+    private void updateJmxName(final GenericObjectPoolConfig config) {
         if (registeredJmxName == null) {
             return;
         }
-        StringBuilder base = new StringBuilder(registeredJmxName.toString());
+        final StringBuilder base = new StringBuilder(registeredJmxName.toString());
         base.append(Constants.JMX_CONNECTION_POOL_BASE_EXT);
         config.setJmxNameBase(base.toString());
         config.setJmxNamePrefix(Constants.JMX_CONNECTION_POOL_PREFIX);

==================================================
DataSourceConnectionFactory.java
index c3b0f49d87..83b2e1157e 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
@@ -239,7 +239,7 @@ public class BasicDataSourceFactory implements ObjectFactory {
      * @exception Exception if an exception occurs creating the instance
      */
     @Override
-    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?,?> environment)
+    public Object getObjectInstance(final Object obj, final Name name, final Context nameCtx, final Hashtable<?,?> environment)
         throws Exception {
 
         // We only know how to deal with <code>javax.naming.Reference</code>s
@@ -247,7 +247,7 @@ public class BasicDataSourceFactory implements ObjectFactory {
         if (obj == null || !(obj instanceof Reference)) {
             return null;
         }
-        Reference ref = (Reference) obj;
+        final Reference ref = (Reference) obj;
         if (!"javax.sql.DataSource".equals(ref.getClassName())) {
             return null;
         }
@@ -256,18 +256,18 @@ public class BasicDataSourceFactory implements ObjectFactory {
         final List<String> warnings = new ArrayList<>();
         final List<String> infoMessages = new ArrayList<>();
         validatePropertyNames(ref, name, warnings, infoMessages);
-        for (String warning : warnings) {
+        for (final String warning : warnings) {
             log.warn(warning);
         }
-        for (String infoMessage : infoMessages) {
+        for (final String infoMessage : infoMessages) {
             log.info(infoMessage);
         }
 
-        Properties properties = new Properties();
-        for (String propertyName : ALL_PROPERTIES) {
-            RefAddr ra = ref.get(propertyName);
+        final Properties properties = new Properties();
+        for (final String propertyName : ALL_PROPERTIES) {
+            final RefAddr ra = ref.get(propertyName);
             if (ra != null) {
-                String propertyValue = ra.getContent().toString();
+                final String propertyValue = ra.getContent().toString();
                 properties.setProperty(propertyName, propertyValue);
             }
         }
@@ -284,12 +284,12 @@ public class BasicDataSourceFactory implements ObjectFactory {
      * @param warnings container for warning messages
      * @param infoMessages container for info messages
      */
-    private void validatePropertyNames(Reference ref, Name name, List<String> warnings,
-                                      List<String> infoMessages) {
+    private void validatePropertyNames(final Reference ref, final Name name, final List<String> warnings,
+                                      final List<String> infoMessages) {
         final List<String> allPropsAsList = Arrays.asList(ALL_PROPERTIES);
         final String nameString = name != null ? "Name = " + name.toString() + " " : "";
         if (NUPROP_WARNTEXT!=null && !NUPROP_WARNTEXT.keySet().isEmpty()) {
-            for (String propertyName : NUPROP_WARNTEXT.keySet()) {
+            for (final String propertyName : NUPROP_WARNTEXT.keySet()) {
                 final RefAddr ra = ref.get(propertyName);
                 if (ra != null && !allPropsAsList.contains(ra.getType())) {
                     final StringBuilder stringBuilder = new StringBuilder(nameString);
@@ -335,8 +335,8 @@ public class BasicDataSourceFactory implements ObjectFactory {
      * @return the data source instance
      * @throws Exception if an error occurs creating the data source
      */
-    public static BasicDataSource createDataSource(Properties properties) throws Exception {
-        BasicDataSource dataSource = new BasicDataSource();
+    public static BasicDataSource createDataSource(final Properties properties) throws Exception {
+        final BasicDataSource dataSource = new BasicDataSource();
         String value = null;
 
         value = properties.getProperty(PROP_DEFAULTAUTOCOMMIT);
@@ -370,7 +370,7 @@ public class BasicDataSourceFactory implements ObjectFactory {
             else {
                 try {
                     level = Integer.parseInt(value);
-                } catch (NumberFormatException e) {
+                } catch (final NumberFormatException e) {
                     System.err.println("Could not parse defaultTransactionIsolation: " + value);
                     System.err.println("WARNING: defaultTransactionIsolation not set");
                     System.err.println("using default value of database driver");
@@ -542,10 +542,10 @@ public class BasicDataSourceFactory implements ObjectFactory {
 
         value = properties.getProperty(PROP_CONNECTIONPROPERTIES);
         if (value != null) {
-          Properties p = getProperties(value);
-          Enumeration<?> e = p.propertyNames();
+          final Properties p = getProperties(value);
+          final Enumeration<?> e = p.propertyNames();
           while (e.hasMoreElements()) {
-            String propertyName = (String) e.nextElement();
+            final String propertyName = (String) e.nextElement();
             dataSource.addConnectionProperty(propertyName, p.getProperty(propertyName));
           }
         }
@@ -606,8 +606,8 @@ public class BasicDataSourceFactory implements ObjectFactory {
      * @return Properties
      * @throws Exception
      */
-    private static Properties getProperties(String propText) throws Exception {
-      Properties p = new Properties();
+    private static Properties getProperties(final String propText) throws Exception {
+      final Properties p = new Properties();
       if (propText != null) {
         p.load(new ByteArrayInputStream(
                 propText.replace(';', '\n').getBytes(StandardCharsets.ISO_8859_1)));
@@ -621,9 +621,9 @@ public class BasicDataSourceFactory implements ObjectFactory {
      * @param delimiter character used to separate values in the list
      * @return String Collection of values
      */
-    private static Collection<String> parseList(String value, char delimiter) {
-        StringTokenizer tokenizer = new StringTokenizer(value, Character.toString(delimiter));
-        Collection<String> tokens = new ArrayList<>(tokenizer.countTokens());
+    private static Collection<String> parseList(final String value, final char delimiter) {
+        final StringTokenizer tokenizer = new StringTokenizer(value, Character.toString(delimiter));
+        final Collection<String> tokens = new ArrayList<>(tokenizer.countTokens());
         while (tokenizer.hasMoreTokens()) {
             tokens.add(tokenizer.nextToken());
         }

==================================================
DelegatingCallableStatement.java
index 51a9273911..0a9e3a6d77 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DataSourceConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DataSourceConnectionFactory.java
@@ -28,11 +28,11 @@ import javax.sql.DataSource;
  * @since 2.0
  */
 public class DataSourceConnectionFactory implements ConnectionFactory {
-    public DataSourceConnectionFactory(DataSource source) {
+    public DataSourceConnectionFactory(final DataSource source) {
         this(source,null,null);
     }
 
-    public DataSourceConnectionFactory(DataSource source, String uname, String passwd) {
+    public DataSourceConnectionFactory(final DataSource source, final String uname, final String passwd) {
         _source = source;
         _uname = uname;
         _passwd = passwd;

==================================================
DelegatingConnection.java
index ea34a34191..b9797e0f35 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingCallableStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingCallableStatement.java
@@ -64,715 +64,715 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
      * @param c the {@link DelegatingConnection} that created this statement
      * @param s the {@link CallableStatement} to delegate all calls to
      */
-    public DelegatingCallableStatement(DelegatingConnection<?> c,
-                                       CallableStatement s) {
+    public DelegatingCallableStatement(final DelegatingConnection<?> c,
+                                       final CallableStatement s) {
         super(c, s);
     }
 
     @Override
-    public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( parameterIndex,  sqlType); } catch (SQLException e) { handleException(e); } }
+    public void registerOutParameter(final int parameterIndex, final int sqlType) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( parameterIndex,  sqlType); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( parameterIndex,  sqlType,  scale); } catch (SQLException e) { handleException(e); } }
+    public void registerOutParameter(final int parameterIndex, final int sqlType, final int scale) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( parameterIndex,  sqlType,  scale); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public boolean wasNull() throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).wasNull(); } catch (SQLException e) { handleException(e); return false; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).wasNull(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public String getString(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getString( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public String getString(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getString( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public boolean getBoolean(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBoolean( parameterIndex); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean getBoolean(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBoolean( parameterIndex); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public byte getByte(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getByte( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public byte getByte(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getByte( parameterIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public short getShort(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getShort( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public short getShort(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getShort( parameterIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public int getInt(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getInt( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public int getInt(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getInt( parameterIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public long getLong(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getLong( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public long getLong(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getLong( parameterIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public float getFloat(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getFloat( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public float getFloat(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getFloat( parameterIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public double getDouble(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public double getDouble(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble( parameterIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     /** @deprecated Use {@link #getBigDecimal(int)} or {@link #getBigDecimal(String)} */
     @Override
     @Deprecated
-    public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal( parameterIndex,  scale); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final int parameterIndex, final int scale) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal( parameterIndex,  scale); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public byte[] getBytes(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBytes( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public byte[] getBytes(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBytes( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public BigDecimal getBigDecimal(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal( parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(int i, Map<String,Class<?>> map) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject( i, map); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final int i, final Map<String,Class<?>> map) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject( i, map); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Ref getRef(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getRef( i); } catch (SQLException e) { handleException(e); return null; } }
+    public Ref getRef(final int i) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getRef( i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Blob getBlob(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBlob( i); } catch (SQLException e) { handleException(e); return null; } }
+    public Blob getBlob(final int i) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBlob( i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Clob getClob(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getClob( i); } catch (SQLException e) { handleException(e); return null; } }
+    public Clob getClob(final int i) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getClob( i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Array getArray(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getArray( i); } catch (SQLException e) { handleException(e); return null; } }
+    public Array getArray(final int i) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getArray( i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(int parameterIndex, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final int parameterIndex, final Calendar cal) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate( parameterIndex,  cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(int parameterIndex, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final int parameterIndex, final Calendar cal) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime( parameterIndex,  cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final int parameterIndex, final Calendar cal) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp( parameterIndex,  cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public void registerOutParameter(int paramIndex, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( paramIndex,  sqlType,  typeName); } catch (SQLException e) { handleException(e); } }
+    public void registerOutParameter(final int paramIndex, final int sqlType, final String typeName) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( paramIndex,  sqlType,  typeName); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void registerOutParameter(String parameterName, int sqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType); } catch (SQLException e) { handleException(e); } }
+    public void registerOutParameter(final String parameterName, final int sqlType) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType, scale); } catch (SQLException e) { handleException(e); } }
+    public void registerOutParameter(final String parameterName, final int sqlType, final int scale) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType, scale); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType, typeName); } catch (SQLException e) { handleException(e); } }
+    public void registerOutParameter(final String parameterName, final int sqlType, final String typeName) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType, typeName); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public URL getURL(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getURL(parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public URL getURL(final int parameterIndex) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getURL(parameterIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public void setURL(String parameterName, URL val) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setURL(parameterName, val); } catch (SQLException e) { handleException(e); } }
+    public void setURL(final String parameterName, final URL val) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setURL(parameterName, val); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setNull(String parameterName, int sqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setNull(parameterName, sqlType); } catch (SQLException e) { handleException(e); } }
+    public void setNull(final String parameterName, final int sqlType) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setNull(parameterName, sqlType); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBoolean(String parameterName, boolean x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setBoolean(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setBoolean(final String parameterName, final boolean x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBoolean(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setByte(String parameterName, byte x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setByte(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setByte(final String parameterName, final byte x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setByte(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setShort(String parameterName, short x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setShort(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setShort(final String parameterName, final short x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setShort(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setInt(String parameterName, int x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setInt(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setInt(final String parameterName, final int x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setInt(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setLong(String parameterName, long x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setLong(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setLong(final String parameterName, final long x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setLong(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setFloat(String parameterName, float x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setFloat(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setFloat(final String parameterName, final float x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setFloat(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setDouble(String parameterName, double x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setDouble(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setDouble(final String parameterName, final double x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setDouble(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setBigDecimal(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setBigDecimal(final String parameterName, final BigDecimal x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBigDecimal(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setString(String parameterName, String x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setString(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setString(final String parameterName, final String x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setString(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBytes(String parameterName, byte [] x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setBytes(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setBytes(final String parameterName, final byte [] x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBytes(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setDate(String parameterName, Date x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setDate(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setDate(final String parameterName, final Date x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setDate(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTime(String parameterName, Time x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setTime(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setTime(final String parameterName, final Time x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTime(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTimestamp(String parameterName, Timestamp x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setTimestamp(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setTimestamp(final String parameterName, final Timestamp x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTimestamp(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setAsciiStream(parameterName, x, length); } catch (SQLException e) { handleException(e); } }
+    public void setAsciiStream(final String parameterName, final InputStream x, final int length) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setAsciiStream(parameterName, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setBinaryStream(parameterName, x, length); } catch (SQLException e) { handleException(e); } }
+    public void setBinaryStream(final String parameterName, final InputStream x, final int length) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBinaryStream(parameterName, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x, targetSqlType, scale); } catch (SQLException e) { handleException(e); } }
+    public void setObject(final String parameterName, final Object x, final int targetSqlType, final int scale) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x, targetSqlType, scale); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x, targetSqlType); } catch (SQLException e) { handleException(e); } }
+    public void setObject(final String parameterName, final Object x, final int targetSqlType) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x, targetSqlType); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setObject(String parameterName, Object x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    public void setObject(final String parameterName, final Object x) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException
+    public void setCharacterStream(final String parameterName, final Reader reader, final int length) throws SQLException
     { checkOpen(); ((CallableStatement)getDelegate()).setCharacterStream(parameterName, reader, length); }
 
     @Override
-    public void setDate(String parameterName, Date x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setDate(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
+    public void setDate(final String parameterName, final Date x, final Calendar cal) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setDate(parameterName, x, cal); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTime(String parameterName, Time x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setTime(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
+    public void setTime(final String parameterName, final Time x, final Calendar cal) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTime(parameterName, x, cal); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setTimestamp(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
+    public void setTimestamp(final String parameterName, final Timestamp x, final Calendar cal) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTimestamp(parameterName, x, cal); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setNull(String parameterName, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((CallableStatement)getDelegate()).setNull(parameterName, sqlType, typeName); } catch (SQLException e) { handleException(e); } }
+    public void setNull(final String parameterName, final int sqlType, final String typeName) throws SQLException
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setNull(parameterName, sqlType, typeName); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public String getString(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getString(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public String getString(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getString(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public boolean getBoolean(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBoolean(parameterName); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean getBoolean(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBoolean(parameterName); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public byte getByte(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getByte(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    public byte getByte(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getByte(parameterName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public short getShort(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getShort(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    public short getShort(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getShort(parameterName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public int getInt(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getInt(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    public int getInt(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getInt(parameterName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public long getLong(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getLong(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    public long getLong(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getLong(parameterName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public float getFloat(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getFloat(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    public float getFloat(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getFloat(parameterName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public double getDouble(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    public double getDouble(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble(parameterName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public byte[] getBytes(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBytes(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public byte[] getBytes(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBytes(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public BigDecimal getBigDecimal(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(String parameterName, Map<String,Class<?>> map) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject(parameterName, map); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final String parameterName, final Map<String,Class<?>> map) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject(parameterName, map); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Ref getRef(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getRef(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Ref getRef(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getRef(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Blob getBlob(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBlob(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Blob getBlob(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBlob(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Clob getClob(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getClob(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Clob getClob(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getClob(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Array getArray(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getArray(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public Array getArray(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getArray(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(String parameterName, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final String parameterName, final Calendar cal) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate(parameterName, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(String parameterName, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final String parameterName, final Calendar cal) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime(parameterName, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final String parameterName, final Calendar cal) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp(parameterName, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public URL getURL(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)getDelegate()).getURL(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    public URL getURL(final String parameterName) throws SQLException
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getURL(parameterName); } catch (final SQLException e) { handleException(e); return null; } }
 
 
     @Override
-    public RowId getRowId(int parameterIndex) throws SQLException {
+    public RowId getRowId(final int parameterIndex) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getRowId(parameterIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public RowId getRowId(String parameterName) throws SQLException {
+    public RowId getRowId(final String parameterName) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getRowId(parameterName);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void setRowId(String parameterName, RowId value) throws SQLException {
+    public void setRowId(final String parameterName, final RowId value) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setRowId(parameterName, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNString(String parameterName, String value) throws SQLException {
+    public void setNString(final String parameterName, final String value) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setNString(parameterName, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
+    public void setNCharacterStream(final String parameterName, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setNCharacterStream(parameterName, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNClob(String parameterName, NClob value) throws SQLException {
+    public void setNClob(final String parameterName, final NClob value) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setNClob(parameterName, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setClob(String parameterName, Reader reader, long length) throws SQLException {
+    public void setClob(final String parameterName, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setClob(parameterName, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {
+    public void setBlob(final String parameterName, final InputStream inputStream, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setBlob(parameterName, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNClob(String parameterName, Reader reader, long length) throws SQLException {
+    public void setNClob(final String parameterName, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setNClob(parameterName, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public NClob getNClob(int parameterIndex) throws SQLException {
+    public NClob getNClob(final int parameterIndex) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getNClob(parameterIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public NClob getNClob(String parameterName) throws SQLException {
+    public NClob getNClob(final String parameterName) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getNClob(parameterName);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void setSQLXML(String parameterName, SQLXML value) throws SQLException {
+    public void setSQLXML(final String parameterName, final SQLXML value) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setSQLXML(parameterName, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public SQLXML getSQLXML(int parameterIndex) throws SQLException {
+    public SQLXML getSQLXML(final int parameterIndex) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getSQLXML(parameterIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public SQLXML getSQLXML(String parameterName) throws SQLException {
+    public SQLXML getSQLXML(final String parameterName) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getSQLXML(parameterName);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public String getNString(int parameterIndex) throws SQLException {
+    public String getNString(final int parameterIndex) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getNString(parameterIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public String getNString(String parameterName) throws SQLException {
+    public String getNString(final String parameterName) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getNString(parameterName);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Reader getNCharacterStream(int parameterIndex) throws SQLException {
+    public Reader getNCharacterStream(final int parameterIndex) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getNCharacterStream(parameterIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Reader getNCharacterStream(String parameterName) throws SQLException {
+    public Reader getNCharacterStream(final String parameterName) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getNCharacterStream(parameterName);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Reader getCharacterStream(int parameterIndex) throws SQLException {
+    public Reader getCharacterStream(final int parameterIndex) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getCharacterStream(parameterIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Reader getCharacterStream(String parameterName) throws SQLException {
+    public Reader getCharacterStream(final String parameterName) throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getCharacterStream(parameterName);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void setBlob(String parameterName, Blob blob) throws SQLException {
+    public void setBlob(final String parameterName, final Blob blob) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setBlob(parameterName, blob);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setClob(String parameterName, Clob clob) throws SQLException {
+    public void setClob(final String parameterName, final Clob clob) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setClob(parameterName, clob);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setAsciiStream(String parameterName, InputStream inputStream, long length) throws SQLException {
+    public void setAsciiStream(final String parameterName, final InputStream inputStream, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setAsciiStream(parameterName, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBinaryStream(String parameterName, InputStream inputStream, long length) throws SQLException {
+    public void setBinaryStream(final String parameterName, final InputStream inputStream, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setBinaryStream(parameterName, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
+    public void setCharacterStream(final String parameterName, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setCharacterStream(parameterName, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setAsciiStream(String parameterName, InputStream inputStream) throws SQLException {
+    public void setAsciiStream(final String parameterName, final InputStream inputStream) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setAsciiStream(parameterName, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBinaryStream(String parameterName, InputStream inputStream) throws SQLException {
+    public void setBinaryStream(final String parameterName, final InputStream inputStream) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setBinaryStream(parameterName, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setCharacterStream(String parameterName, Reader reader) throws SQLException {
+    public void setCharacterStream(final String parameterName, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setCharacterStream(parameterName, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNCharacterStream(String parameterName, Reader reader) throws SQLException {
+    public void setNCharacterStream(final String parameterName, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setNCharacterStream(parameterName, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setClob(String parameterName, Reader reader) throws SQLException {
+    public void setClob(final String parameterName, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setClob(parameterName, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBlob(String parameterName, InputStream inputStream) throws SQLException {
+    public void setBlob(final String parameterName, final InputStream inputStream) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setBlob(parameterName, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNClob(String parameterName, Reader reader) throws SQLException {
+    public void setNClob(final String parameterName, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((CallableStatement)getDelegate()).setNClob(parameterName, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public <T> T getObject(int parameterIndex, Class<T> type)
+    public <T> T getObject(final int parameterIndex, final Class<T> type)
             throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getObject(parameterIndex, type);
 }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public <T> T getObject(String parameterName, Class<T> type)
+    public <T> T getObject(final String parameterName, final Class<T> type)
             throws SQLException {
         checkOpen();
         try {
             return ((CallableStatement)getDelegate()).getObject(parameterName, type);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }

==================================================
DelegatingDatabaseMetaData.java
index e23605a655..a6108cb1f5 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
@@ -86,7 +86,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
      *
      * @param c the {@link Connection} to delegate all calls to.
      */
-    public DelegatingConnection(C c) {
+    public DelegatingConnection(final C c) {
         super();
         _conn = c;
     }
@@ -100,16 +100,16 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
     public String toString() {
         String s = null;
 
-        Connection c = this.getInnermostDelegateInternal();
+        final Connection c = this.getInnermostDelegateInternal();
         if (c != null) {
             try {
                 if (c.isClosed()) {
                     s = "connection is closed";
                 }
                 else {
-                    StringBuffer sb = new StringBuffer();
+                    final StringBuffer sb = new StringBuffer();
                     sb.append(hashCode());
-                    DatabaseMetaData meta = c.getMetaData();
+                    final DatabaseMetaData meta = c.getMetaData();
                     if (meta != null) {
                         sb.append(", URL=");
                         sb.append(meta.getURL());
@@ -121,7 +121,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
                     }
                 }
             }
-            catch (SQLException ex) {
+            catch (final SQLException ex) {
                 // Ignore
             }
         }
@@ -151,8 +151,8 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
      * @param c connection to compare innermost delegate with
      * @return true if innermost delegate equals <code>c</code>
      */
-    public boolean innermostDelegateEquals(Connection c) {
-        Connection innerCon = getInnermostDelegateInternal();
+    public boolean innermostDelegateEquals(final Connection c) {
+        final Connection innerCon = getInnermostDelegateInternal();
         if (innerCon == null) {
             return c == null;
         }
@@ -202,7 +202,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
      * Sets my delegate.
      * @param c The connection
      */
-    public void setDelegate(C c) {
+    public void setDelegate(final C c) {
         _conn = c;
     }
 
@@ -228,7 +228,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         return _closed;
     }
 
-    protected void setClosedInternal(boolean closed) {
+    protected void setClosedInternal(final boolean closed) {
         this._closed = closed;
     }
 
@@ -248,11 +248,11 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         }
     }
 
-    protected void handleException(SQLException e) throws SQLException {
+    protected void handleException(final SQLException e) throws SQLException {
         throw e;
     }
 
-    private void initializeStatement(DelegatingStatement ds) throws SQLException {
+    private void initializeStatement(final DelegatingStatement ds) throws SQLException {
         if (defaultQueryTimeout != null &&
                 defaultQueryTimeout.intValue() != ds.getQueryTimeout()) {
             ds.setQueryTimeout(defaultQueryTimeout.intValue());
@@ -263,92 +263,92 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
     public Statement createStatement() throws SQLException {
         checkOpen();
         try {
-            DelegatingStatement ds =
+            final DelegatingStatement ds =
                     new DelegatingStatement(this, _conn.createStatement());
             initializeStatement(ds);
             return ds;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Statement createStatement(int resultSetType,
-                                     int resultSetConcurrency) throws SQLException {
+    public Statement createStatement(final int resultSetType,
+                                     final int resultSetConcurrency) throws SQLException {
         checkOpen();
         try {
-            DelegatingStatement ds = new DelegatingStatement(
+            final DelegatingStatement ds = new DelegatingStatement(
                     this, _conn.createStatement(resultSetType,resultSetConcurrency));
             initializeStatement(ds);
             return ds;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql) throws SQLException {
         checkOpen();
         try {
-            DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
+            final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
                     this, _conn.prepareStatement(sql));
             initializeStatement(dps);
             return dps;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql,
-                                              int resultSetType,
-                                              int resultSetConcurrency) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql,
+                                              final int resultSetType,
+                                              final int resultSetConcurrency) throws SQLException {
         checkOpen();
         try {
-            DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
+            final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
                     this, _conn.prepareStatement(sql,resultSetType,resultSetConcurrency));
             initializeStatement(dps);
             return dps;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public CallableStatement prepareCall(String sql) throws SQLException {
+    public CallableStatement prepareCall(final String sql) throws SQLException {
         checkOpen();
         try {
-            DelegatingCallableStatement dcs =
+            final DelegatingCallableStatement dcs =
                     new DelegatingCallableStatement(this, _conn.prepareCall(sql));
             initializeStatement(dcs);
             return dcs;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public CallableStatement prepareCall(String sql,
-                                         int resultSetType,
-                                         int resultSetConcurrency) throws SQLException {
+    public CallableStatement prepareCall(final String sql,
+                                         final int resultSetType,
+                                         final int resultSetConcurrency) throws SQLException {
         checkOpen();
         try {
-            DelegatingCallableStatement dcs = new DelegatingCallableStatement(
+            final DelegatingCallableStatement dcs = new DelegatingCallableStatement(
                     this, _conn.prepareCall(sql, resultSetType,resultSetConcurrency));
             initializeStatement(dcs);
             return dcs;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -360,7 +360,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             _conn.clearWarnings();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -371,7 +371,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             _conn.commit();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -395,7 +395,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             _autoCommitCached = Boolean.valueOf(_conn.getAutoCommit());
             return _autoCommitCached.booleanValue();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
@@ -407,7 +407,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return _conn.getCatalog();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -419,7 +419,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return new DelegatingDatabaseMetaData(this, _conn.getMetaData());
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -431,7 +431,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return _conn.getTransactionIsolation();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return -1;
         }
@@ -443,7 +443,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return _conn.getTypeMap();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -455,7 +455,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return _conn.getWarnings();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -471,7 +471,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             _readOnlyCached = Boolean.valueOf(_conn.isReadOnly());
             return _readOnlyCached.booleanValue();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
@@ -479,11 +479,11 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
 
 
     @Override
-    public String nativeSQL(String sql) throws SQLException {
+    public String nativeSQL(final String sql) throws SQLException {
         checkOpen();
         try {
             return _conn.nativeSQL(sql);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -495,7 +495,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             _conn.rollback();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -518,7 +518,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
      * default will be used.
      * @param defaultQueryTimeout The timeout value
      */
-    public void setDefaultQueryTimeout(Integer defaultQueryTimeout) {
+    public void setDefaultQueryTimeout(final Integer defaultQueryTimeout) {
         this.defaultQueryTimeout = defaultQueryTimeout;
     }
 
@@ -528,7 +528,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
      *
      * @param cacheState    The new value for the state caching flag
      */
-    public void setCacheState(boolean cacheState) {
+    public void setCacheState(final boolean cacheState) {
         this._cacheState = cacheState;
     }
 
@@ -545,32 +545,32 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
     }
 
     @Override
-    public void setAutoCommit(boolean autoCommit) throws SQLException {
+    public void setAutoCommit(final boolean autoCommit) throws SQLException {
         checkOpen();
         try {
             _conn.setAutoCommit(autoCommit);
             if (_cacheState) {
                 _autoCommitCached = Boolean.valueOf(autoCommit);
             }
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             _autoCommitCached = null;
             handleException(e);
         }
     }
 
     @Override
-    public void setCatalog(String catalog) throws SQLException
-    { checkOpen(); try { _conn.setCatalog(catalog); } catch (SQLException e) { handleException(e); } }
+    public void setCatalog(final String catalog) throws SQLException
+    { checkOpen(); try { _conn.setCatalog(catalog); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setReadOnly(boolean readOnly) throws SQLException {
+    public void setReadOnly(final boolean readOnly) throws SQLException {
         checkOpen();
         try {
             _conn.setReadOnly(readOnly);
             if (_cacheState) {
                 _readOnlyCached = Boolean.valueOf(readOnly);
             }
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             _readOnlyCached = null;
             handleException(e);
         }
@@ -578,22 +578,22 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
 
 
     @Override
-    public void setTransactionIsolation(int level) throws SQLException {
+    public void setTransactionIsolation(final int level) throws SQLException {
         checkOpen();
         try {
             _conn.setTransactionIsolation(level);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
 
 
     @Override
-    public void setTypeMap(Map<String,Class<?>> map) throws SQLException {
+    public void setTypeMap(final Map<String,Class<?>> map) throws SQLException {
         checkOpen();
         try {
             _conn.setTypeMap(map);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -610,7 +610,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
                 String label = "";
                 try {
                     label = _conn.toString();
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                     // ignore, leave label empty
                 }
                 throw new SQLException
@@ -633,11 +633,11 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         // The JDBC spec requires that a Connection close any open
         // Statement's when it is closed.
         // DBCP-288. Not all the traced objects will be statements
-        List<AbandonedTrace> traces = getTrace();
+        final List<AbandonedTrace> traces = getTrace();
         if(traces != null && traces.size() > 0) {
-            Iterator<AbandonedTrace> traceIter = traces.iterator();
+            final Iterator<AbandonedTrace> traceIter = traces.iterator();
             while (traceIter.hasNext()) {
-                Object trace = traceIter.next();
+                final Object trace = traceIter.next();
                 if (trace instanceof Statement) {
                     ((Statement) trace).close();
                 } else if (trace instanceof ResultSet) {
@@ -657,7 +657,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return _conn.getHoldability();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return 0;
         }
@@ -665,11 +665,11 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
 
 
     @Override
-    public void setHoldability(int holdability) throws SQLException {
+    public void setHoldability(final int holdability) throws SQLException {
         checkOpen();
         try {
             _conn.setHoldability(holdability);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -680,7 +680,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         checkOpen();
         try {
             return _conn.setSavepoint();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -688,11 +688,11 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
 
 
     @Override
-    public Savepoint setSavepoint(String name) throws SQLException {
+    public Savepoint setSavepoint(final String name) throws SQLException {
         checkOpen();
         try {
             return _conn.setSavepoint(name);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -700,122 +700,122 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
 
 
     @Override
-    public void rollback(Savepoint savepoint) throws SQLException {
+    public void rollback(final Savepoint savepoint) throws SQLException {
         checkOpen();
         try {
             _conn.rollback(savepoint);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
 
 
     @Override
-    public void releaseSavepoint(Savepoint savepoint)
+    public void releaseSavepoint(final Savepoint savepoint)
             throws SQLException {
         checkOpen();
         try {
             _conn.releaseSavepoint(savepoint);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
 
 
     @Override
-    public Statement createStatement(int resultSetType,
-                                     int resultSetConcurrency,
-                                     int resultSetHoldability) throws SQLException {
+    public Statement createStatement(final int resultSetType,
+                                     final int resultSetConcurrency,
+                                     final int resultSetHoldability) throws SQLException {
         checkOpen();
         try {
-            DelegatingStatement ds = new DelegatingStatement(this,
+            final DelegatingStatement ds = new DelegatingStatement(this,
                     _conn.createStatement(resultSetType, resultSetConcurrency,
                             resultSetHoldability));
             initializeStatement(ds);
             return ds;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int resultSetType,
-                                              int resultSetConcurrency,
-                                              int resultSetHoldability) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql, final int resultSetType,
+                                              final int resultSetConcurrency,
+                                              final int resultSetHoldability) throws SQLException {
         checkOpen();
         try {
-            DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
+            final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
                     this, _conn.prepareStatement(sql, resultSetType,
                             resultSetConcurrency, resultSetHoldability));
             initializeStatement(dps);
             return dps;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public CallableStatement prepareCall(String sql, int resultSetType,
-                                         int resultSetConcurrency,
-                                         int resultSetHoldability) throws SQLException {
+    public CallableStatement prepareCall(final String sql, final int resultSetType,
+                                         final int resultSetConcurrency,
+                                         final int resultSetHoldability) throws SQLException {
         checkOpen();
         try {
-            DelegatingCallableStatement dcs = new DelegatingCallableStatement(
+            final DelegatingCallableStatement dcs = new DelegatingCallableStatement(
                     this, _conn.prepareCall(sql, resultSetType,
                             resultSetConcurrency, resultSetHoldability));
             initializeStatement(dcs);
             return dcs;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
         checkOpen();
         try {
-            DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
+            final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
                     this, _conn.prepareStatement(sql, autoGeneratedKeys));
             initializeStatement(dps);
             return dps;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int columnIndexes[]) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql, final int columnIndexes[]) throws SQLException {
         checkOpen();
         try {
-            DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
+            final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(
                     this, _conn.prepareStatement(sql, columnIndexes));
             initializeStatement(dps);
             return dps;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, String columnNames[]) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql, final String columnNames[]) throws SQLException {
         checkOpen();
         try {
-            DelegatingPreparedStatement dps =  new DelegatingPreparedStatement(
+            final DelegatingPreparedStatement dps =  new DelegatingPreparedStatement(
                     this, _conn.prepareStatement(sql, columnNames));
             initializeStatement(dps);
             return dps;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -823,7 +823,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
 
 
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return true;
         } else if (iface.isAssignableFrom(_conn.getClass())) {
@@ -834,7 +834,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return iface.cast(this);
         } else if (iface.isAssignableFrom(_conn.getClass())) {
@@ -845,12 +845,12 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
     }
 
     @Override
-    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
+    public Array createArrayOf(final String typeName, final Object[] elements) throws SQLException {
         checkOpen();
         try {
             return _conn.createArrayOf(typeName, elements);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -862,7 +862,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.createBlob();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -874,7 +874,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.createClob();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -886,7 +886,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.createNClob();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
@@ -898,62 +898,62 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.createSQLXML();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
+    public Struct createStruct(final String typeName, final Object[] attributes) throws SQLException {
         checkOpen();
         try {
             return _conn.createStruct(typeName, attributes);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public boolean isValid(int timeout) throws SQLException {
+    public boolean isValid(final int timeout) throws SQLException {
         if (isClosed()) {
             return false;
         }
         try {
             return _conn.isValid(timeout);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return false;
         }
     }
 
     @Override
-    public void setClientInfo(String name, String value) throws SQLClientInfoException {
+    public void setClientInfo(final String name, final String value) throws SQLClientInfoException {
         try {
             checkOpen();
             _conn.setClientInfo(name, value);
         }
-        catch (SQLClientInfoException e) {
+        catch (final SQLClientInfoException e) {
             throw e;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             throw new SQLClientInfoException("Connection is closed.", EMPTY_FAILED_PROPERTIES, e);
         }
     }
 
     @Override
-    public void setClientInfo(Properties properties) throws SQLClientInfoException {
+    public void setClientInfo(final Properties properties) throws SQLClientInfoException {
         try {
             checkOpen();
             _conn.setClientInfo(properties);
         }
-        catch (SQLClientInfoException e) {
+        catch (final SQLClientInfoException e) {
             throw e;
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             throw new SQLClientInfoException("Connection is closed.", EMPTY_FAILED_PROPERTIES, e);
         }
     }
@@ -964,31 +964,31 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.getClientInfo();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public String getClientInfo(String name) throws SQLException {
+    public String getClientInfo(final String name) throws SQLException {
         checkOpen();
         try {
             return _conn.getClientInfo(name);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void setSchema(String schema) throws SQLException {
+    public void setSchema(final String schema) throws SQLException {
         checkOpen();
         try {
             _conn.setSchema(schema);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -999,31 +999,31 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.getSchema();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void abort(Executor executor) throws SQLException {
+    public void abort(final Executor executor) throws SQLException {
         checkOpen();
         try {
             _conn.abort(executor);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNetworkTimeout(Executor executor, int milliseconds)
+    public void setNetworkTimeout(final Executor executor, final int milliseconds)
             throws SQLException {
         checkOpen();
         try {
             _conn.setNetworkTimeout(executor, milliseconds);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -1034,7 +1034,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             return _conn.getNetworkTimeout();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return 0;
         }

==================================================
DelegatingPreparedStatement.java
index 8134a8798b..7eff210b19 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingDatabaseMetaData.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingDatabaseMetaData.java
@@ -39,8 +39,8 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     /** The connection that created me. **/
     private final DelegatingConnection<?> _conn;
 
-    public DelegatingDatabaseMetaData(DelegatingConnection<?> c,
-            DatabaseMetaData m) {
+    public DelegatingDatabaseMetaData(final DelegatingConnection<?> c,
+            final DatabaseMetaData m) {
         super();
         _conn = c;
         _meta = m;
@@ -77,7 +77,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
         return m;
     }
 
-    protected void handleException(SQLException e) throws SQLException {
+    protected void handleException(final SQLException e) throws SQLException {
         if (_conn != null) {
             _conn.handleException(e);
         }
@@ -89,42 +89,42 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public boolean allProceduresAreCallable() throws SQLException {
         try { return _meta.allProceduresAreCallable(); }
-          catch (SQLException e) { handleException(e); return false; }
+          catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean allTablesAreSelectable() throws SQLException {
         try { return _meta.allTablesAreSelectable(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean dataDefinitionCausesTransactionCommit() throws SQLException {
         try { return _meta.dataDefinitionCausesTransactionCommit(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean dataDefinitionIgnoredInTransactions() throws SQLException {
         try { return _meta.dataDefinitionIgnoredInTransactions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean deletesAreDetected(int type) throws SQLException {
+    public boolean deletesAreDetected(final int type) throws SQLException {
         try { return _meta.deletesAreDetected(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean doesMaxRowSizeIncludeBlobs() throws SQLException {
         try { return _meta.doesMaxRowSizeIncludeBlobs(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public ResultSet getAttributes(String catalog, String schemaPattern,
-            String typeNamePattern, String attributeNamePattern)
+    public ResultSet getAttributes(final String catalog, final String schemaPattern,
+            final String typeNamePattern, final String attributeNamePattern)
             throws SQLException {
         _conn.checkOpen();
         try {
@@ -132,22 +132,22 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
                     catalog, schemaPattern, typeNamePattern,
                     attributeNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getBestRowIdentifier(String catalog, String schema,
-            String table, int scope, boolean nullable) throws SQLException {
+    public ResultSet getBestRowIdentifier(final String catalog, final String schema,
+            final String table, final int scope, final boolean nullable) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getBestRowIdentifier(catalog, schema, table, scope,
                             nullable));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -156,13 +156,13 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getCatalogSeparator() throws SQLException {
         try { return _meta.getCatalogSeparator(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public String getCatalogTerm() throws SQLException {
         try { return _meta.getCatalogTerm(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
@@ -172,30 +172,30 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getCatalogs());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getColumnPrivileges(String catalog, String schema,
-            String table, String columnNamePattern) throws SQLException {
+    public ResultSet getColumnPrivileges(final String catalog, final String schema,
+            final String table, final String columnNamePattern) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getColumnPrivileges(catalog, schema, table,
                             columnNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getColumns(String catalog, String schemaPattern,
-            String tableNamePattern, String columnNamePattern)
+    public ResultSet getColumns(final String catalog, final String schemaPattern,
+            final String tableNamePattern, final String columnNamePattern)
             throws SQLException {
         _conn.checkOpen();
         try {
@@ -203,7 +203,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
                     _meta.getColumns(catalog, schemaPattern, tableNamePattern,
                             columnNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -215,9 +215,9 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     }
 
     @Override
-    public ResultSet getCrossReference(String parentCatalog,
-            String parentSchema, String parentTable, String foreignCatalog,
-            String foreignSchema, String foreignTable) throws SQLException {
+    public ResultSet getCrossReference(final String parentCatalog,
+            final String parentSchema, final String parentTable, final String foreignCatalog,
+            final String foreignSchema, final String foreignTable) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
@@ -225,7 +225,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
                             parentTable, foreignCatalog, foreignSchema,
                             foreignTable));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -234,31 +234,31 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public int getDatabaseMajorVersion() throws SQLException {
         try { return _meta.getDatabaseMajorVersion(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getDatabaseMinorVersion() throws SQLException {
         try { return _meta.getDatabaseMinorVersion(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public String getDatabaseProductName() throws SQLException {
         try { return _meta.getDatabaseProductName(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public String getDatabaseProductVersion() throws SQLException {
         try { return _meta.getDatabaseProductVersion(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public int getDefaultTransactionIsolation() throws SQLException {
         try { return _meta.getDefaultTransactionIsolation(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
@@ -270,24 +270,24 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getDriverName() throws SQLException {
         try { return _meta.getDriverName(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public String getDriverVersion() throws SQLException {
         try { return _meta.getDriverVersion(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getExportedKeys(String catalog, String schema, String table)
+    public ResultSet getExportedKeys(final String catalog, final String schema, final String table)
             throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getExportedKeys(catalog, schema, table));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -296,39 +296,39 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getExtraNameCharacters() throws SQLException {
         try { return _meta.getExtraNameCharacters(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public String getIdentifierQuoteString() throws SQLException {
         try { return _meta.getIdentifierQuoteString(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getImportedKeys(String catalog, String schema, String table)
+    public ResultSet getImportedKeys(final String catalog, final String schema, final String table)
             throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getImportedKeys(catalog, schema, table));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getIndexInfo(String catalog, String schema, String table,
-            boolean unique, boolean approximate) throws SQLException {
+    public ResultSet getIndexInfo(final String catalog, final String schema, final String table,
+            final boolean unique, final boolean approximate) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getIndexInfo(catalog, schema, table, unique,
                             approximate));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -337,158 +337,158 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public int getJDBCMajorVersion() throws SQLException {
         try { return _meta.getJDBCMajorVersion(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getJDBCMinorVersion() throws SQLException {
         try { return _meta.getJDBCMinorVersion(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxBinaryLiteralLength() throws SQLException {
         try { return _meta.getMaxBinaryLiteralLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxCatalogNameLength() throws SQLException {
         try { return _meta.getMaxCatalogNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxCharLiteralLength() throws SQLException {
         try { return _meta.getMaxCharLiteralLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxColumnNameLength() throws SQLException {
         try { return _meta.getMaxColumnNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxColumnsInGroupBy() throws SQLException {
         try { return _meta.getMaxColumnsInGroupBy(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxColumnsInIndex() throws SQLException {
         try { return _meta.getMaxColumnsInIndex(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxColumnsInOrderBy() throws SQLException {
         try { return _meta.getMaxColumnsInOrderBy(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxColumnsInSelect() throws SQLException {
         try { return _meta.getMaxColumnsInSelect(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxColumnsInTable() throws SQLException {
         try { return _meta.getMaxColumnsInTable(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxConnections() throws SQLException {
         try { return _meta.getMaxConnections(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxCursorNameLength() throws SQLException {
         try { return _meta.getMaxCursorNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxIndexLength() throws SQLException {
         try { return _meta.getMaxIndexLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxProcedureNameLength() throws SQLException {
         try { return _meta.getMaxProcedureNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxRowSize() throws SQLException {
         try { return _meta.getMaxRowSize(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxSchemaNameLength() throws SQLException {
         try { return _meta.getMaxSchemaNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxStatementLength() throws SQLException {
         try { return _meta.getMaxStatementLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxStatements() throws SQLException {
         try { return _meta.getMaxStatements(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxTableNameLength() throws SQLException {
         try { return _meta.getMaxTableNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxTablesInSelect() throws SQLException {
         try { return _meta.getMaxTablesInSelect(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public int getMaxUserNameLength() throws SQLException {
         try { return _meta.getMaxUserNameLength(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public String getNumericFunctions() throws SQLException {
         try { return _meta.getNumericFunctions(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getPrimaryKeys(String catalog, String schema, String table)
+    public ResultSet getPrimaryKeys(final String catalog, final String schema, final String table)
             throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getPrimaryKeys(catalog, schema, table));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getProcedureColumns(String catalog, String schemaPattern,
-            String procedureNamePattern, String columnNamePattern)
+    public ResultSet getProcedureColumns(final String catalog, final String schemaPattern,
+            final String procedureNamePattern, final String columnNamePattern)
             throws SQLException {
         _conn.checkOpen();
         try {
@@ -496,7 +496,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
                     _meta.getProcedureColumns(catalog, schemaPattern,
                             procedureNamePattern, columnNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -505,19 +505,19 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getProcedureTerm() throws SQLException {
         try { return _meta.getProcedureTerm(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getProcedures(String catalog, String schemaPattern,
-            String procedureNamePattern) throws SQLException {
+    public ResultSet getProcedures(final String catalog, final String schemaPattern,
+            final String procedureNamePattern) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getProcedures(catalog, schemaPattern,
                             procedureNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -526,25 +526,25 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public int getResultSetHoldability() throws SQLException {
         try { return _meta.getResultSetHoldability(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public String getSQLKeywords() throws SQLException {
         try { return _meta.getSQLKeywords(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public int getSQLStateType() throws SQLException {
         try { return _meta.getSQLStateType(); }
-        catch (SQLException e) { handleException(e); return 0; }
+        catch (final SQLException e) { handleException(e); return 0; }
     }
 
     @Override
     public String getSchemaTerm() throws SQLException {
         try { return _meta.getSchemaTerm(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
@@ -554,7 +554,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getSchemas());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -563,40 +563,40 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getSearchStringEscape() throws SQLException {
         try { return _meta.getSearchStringEscape(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public String getStringFunctions() throws SQLException {
         try { return _meta.getStringFunctions(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getSuperTables(String catalog, String schemaPattern,
-            String tableNamePattern) throws SQLException {
+    public ResultSet getSuperTables(final String catalog, final String schemaPattern,
+            final String tableNamePattern) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getSuperTables(catalog, schemaPattern,
                             tableNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getSuperTypes(String catalog, String schemaPattern,
-            String typeNamePattern) throws SQLException {
+    public ResultSet getSuperTypes(final String catalog, final String schemaPattern,
+            final String typeNamePattern) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getSuperTypes(catalog, schemaPattern,
                             typeNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -605,19 +605,19 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getSystemFunctions() throws SQLException {
         try { return _meta.getSystemFunctions(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getTablePrivileges(String catalog, String schemaPattern,
-            String tableNamePattern) throws SQLException {
+    public ResultSet getTablePrivileges(final String catalog, final String schemaPattern,
+            final String tableNamePattern) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getTablePrivileges(catalog, schemaPattern,
                             tableNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -630,22 +630,22 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getTableTypes());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getTables(String catalog, String schemaPattern,
-            String tableNamePattern, String[] types) throws SQLException {
+    public ResultSet getTables(final String catalog, final String schemaPattern,
+            final String tableNamePattern, final String[] types) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getTables(catalog, schemaPattern, tableNamePattern,
                             types));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -654,7 +654,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getTimeDateFunctions() throws SQLException {
         try { return _meta.getTimeDateFunctions(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
@@ -664,22 +664,22 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getTypeInfo());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getUDTs(String catalog, String schemaPattern,
-            String typeNamePattern, int[] types) throws SQLException {
+    public ResultSet getUDTs(final String catalog, final String schemaPattern,
+            final String typeNamePattern, final int[] types) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getUDTs(catalog, schemaPattern, typeNamePattern,
                             types));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -688,579 +688,579 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public String getURL() throws SQLException {
         try { return _meta.getURL(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
     public String getUserName() throws SQLException {
         try { return _meta.getUserName(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getVersionColumns(String catalog, String schema,
-            String table) throws SQLException {
+    public ResultSet getVersionColumns(final String catalog, final String schema,
+            final String table) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getVersionColumns(catalog, schema, table));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public boolean insertsAreDetected(int type) throws SQLException {
+    public boolean insertsAreDetected(final int type) throws SQLException {
         try { return _meta.insertsAreDetected(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean isCatalogAtStart() throws SQLException {
         try { return _meta.isCatalogAtStart(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean isReadOnly() throws SQLException {
         try { return _meta.isReadOnly(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean locatorsUpdateCopy() throws SQLException {
         try { return _meta.locatorsUpdateCopy(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean nullPlusNonNullIsNull() throws SQLException {
         try { return _meta.nullPlusNonNullIsNull(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean nullsAreSortedAtEnd() throws SQLException {
         try { return _meta.nullsAreSortedAtEnd(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean nullsAreSortedAtStart() throws SQLException {
         try { return _meta.nullsAreSortedAtStart(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean nullsAreSortedHigh() throws SQLException {
         try { return _meta.nullsAreSortedHigh(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean nullsAreSortedLow() throws SQLException {
         try { return _meta.nullsAreSortedLow(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean othersDeletesAreVisible(int type) throws SQLException {
+    public boolean othersDeletesAreVisible(final int type) throws SQLException {
         try { return _meta.othersDeletesAreVisible(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean othersInsertsAreVisible(int type) throws SQLException {
+    public boolean othersInsertsAreVisible(final int type) throws SQLException {
         try { return _meta.othersInsertsAreVisible(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean othersUpdatesAreVisible(int type) throws SQLException {
+    public boolean othersUpdatesAreVisible(final int type) throws SQLException {
         try { return _meta.othersUpdatesAreVisible(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean ownDeletesAreVisible(int type) throws SQLException {
+    public boolean ownDeletesAreVisible(final int type) throws SQLException {
         try { return _meta.ownDeletesAreVisible(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean ownInsertsAreVisible(int type) throws SQLException {
+    public boolean ownInsertsAreVisible(final int type) throws SQLException {
         try { return _meta.ownInsertsAreVisible(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean ownUpdatesAreVisible(int type) throws SQLException {
+    public boolean ownUpdatesAreVisible(final int type) throws SQLException {
         try { return _meta.ownUpdatesAreVisible(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean storesLowerCaseIdentifiers() throws SQLException {
         try { return _meta.storesLowerCaseIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {
         try { return _meta.storesLowerCaseQuotedIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean storesMixedCaseIdentifiers() throws SQLException {
         try { return _meta.storesMixedCaseIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {
         try { return _meta.storesMixedCaseQuotedIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean storesUpperCaseIdentifiers() throws SQLException {
         try { return _meta.storesUpperCaseIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {
         try { return _meta.storesUpperCaseQuotedIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsANSI92EntryLevelSQL() throws SQLException {
         try { return _meta.supportsANSI92EntryLevelSQL(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsANSI92FullSQL() throws SQLException {
         try { return _meta.supportsANSI92FullSQL(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsANSI92IntermediateSQL() throws SQLException {
         try { return _meta.supportsANSI92IntermediateSQL(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsAlterTableWithAddColumn() throws SQLException {
         try { return _meta.supportsAlterTableWithAddColumn(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsAlterTableWithDropColumn() throws SQLException {
         try { return _meta.supportsAlterTableWithDropColumn(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsBatchUpdates() throws SQLException {
         try { return _meta.supportsBatchUpdates(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCatalogsInDataManipulation() throws SQLException {
         try { return _meta.supportsCatalogsInDataManipulation(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCatalogsInIndexDefinitions() throws SQLException {
         try { return _meta.supportsCatalogsInIndexDefinitions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException {
         try { return _meta.supportsCatalogsInPrivilegeDefinitions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCatalogsInProcedureCalls() throws SQLException {
         try { return _meta.supportsCatalogsInProcedureCalls(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCatalogsInTableDefinitions() throws SQLException {
         try { return _meta.supportsCatalogsInTableDefinitions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsColumnAliasing() throws SQLException {
         try { return _meta.supportsColumnAliasing(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsConvert() throws SQLException {
         try { return _meta.supportsConvert(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean supportsConvert(int fromType, int toType)
+    public boolean supportsConvert(final int fromType, final int toType)
             throws SQLException {
         try { return _meta.supportsConvert(fromType, toType); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCoreSQLGrammar() throws SQLException {
         try { return _meta.supportsCoreSQLGrammar(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsCorrelatedSubqueries() throws SQLException {
         try { return _meta.supportsCorrelatedSubqueries(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsDataDefinitionAndDataManipulationTransactions()
             throws SQLException {
         try { return _meta.supportsDataDefinitionAndDataManipulationTransactions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsDataManipulationTransactionsOnly()
             throws SQLException {
         try { return _meta.supportsDataManipulationTransactionsOnly(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsDifferentTableCorrelationNames() throws SQLException {
         try { return _meta.supportsDifferentTableCorrelationNames(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsExpressionsInOrderBy() throws SQLException {
         try { return _meta.supportsExpressionsInOrderBy(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsExtendedSQLGrammar() throws SQLException {
         try { return _meta.supportsExtendedSQLGrammar(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsFullOuterJoins() throws SQLException {
         try { return _meta.supportsFullOuterJoins(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsGetGeneratedKeys() throws SQLException {
         try { return _meta.supportsGetGeneratedKeys(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsGroupBy() throws SQLException {
         try { return _meta.supportsGroupBy(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsGroupByBeyondSelect() throws SQLException {
         try { return _meta.supportsGroupByBeyondSelect(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsGroupByUnrelated() throws SQLException {
         try { return _meta.supportsGroupByUnrelated(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsIntegrityEnhancementFacility() throws SQLException {
         try { return _meta.supportsIntegrityEnhancementFacility(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsLikeEscapeClause() throws SQLException {
         try { return _meta.supportsLikeEscapeClause(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsLimitedOuterJoins() throws SQLException {
         try { return _meta.supportsLimitedOuterJoins(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsMinimumSQLGrammar() throws SQLException {
         try { return _meta.supportsMinimumSQLGrammar(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsMixedCaseIdentifiers() throws SQLException {
         try { return _meta.supportsMixedCaseIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {
         try { return _meta.supportsMixedCaseQuotedIdentifiers(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsMultipleOpenResults() throws SQLException {
         try { return _meta.supportsMultipleOpenResults(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsMultipleResultSets() throws SQLException {
         try { return _meta.supportsMultipleResultSets(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsMultipleTransactions() throws SQLException {
         try { return _meta.supportsMultipleTransactions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsNamedParameters() throws SQLException {
         try { return _meta.supportsNamedParameters(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsNonNullableColumns() throws SQLException {
         try { return _meta.supportsNonNullableColumns(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsOpenCursorsAcrossCommit() throws SQLException {
         try { return _meta.supportsOpenCursorsAcrossCommit(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsOpenCursorsAcrossRollback() throws SQLException {
         try { return _meta.supportsOpenCursorsAcrossRollback(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsOpenStatementsAcrossCommit() throws SQLException {
         try { return _meta.supportsOpenStatementsAcrossCommit(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsOpenStatementsAcrossRollback() throws SQLException {
         try { return _meta.supportsOpenStatementsAcrossRollback(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsOrderByUnrelated() throws SQLException {
         try { return _meta.supportsOrderByUnrelated(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsOuterJoins() throws SQLException {
         try { return _meta.supportsOuterJoins(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsPositionedDelete() throws SQLException {
         try { return _meta.supportsPositionedDelete(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsPositionedUpdate() throws SQLException {
         try { return _meta.supportsPositionedUpdate(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean supportsResultSetConcurrency(int type, int concurrency)
+    public boolean supportsResultSetConcurrency(final int type, final int concurrency)
             throws SQLException {
         try { return _meta.supportsResultSetConcurrency(type, concurrency); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean supportsResultSetHoldability(int holdability)
+    public boolean supportsResultSetHoldability(final int holdability)
             throws SQLException {
         try { return _meta.supportsResultSetHoldability(holdability); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean supportsResultSetType(int type) throws SQLException {
+    public boolean supportsResultSetType(final int type) throws SQLException {
         try { return _meta.supportsResultSetType(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSavepoints() throws SQLException {
         try { return _meta.supportsSavepoints(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSchemasInDataManipulation() throws SQLException {
         try { return _meta.supportsSchemasInDataManipulation(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSchemasInIndexDefinitions() throws SQLException {
         try { return _meta.supportsSchemasInIndexDefinitions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {
         try { return _meta.supportsSchemasInPrivilegeDefinitions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSchemasInProcedureCalls() throws SQLException {
         try { return _meta.supportsSchemasInProcedureCalls(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSchemasInTableDefinitions() throws SQLException {
         try { return _meta.supportsSchemasInTableDefinitions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSelectForUpdate() throws SQLException {
         try { return _meta.supportsSelectForUpdate(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsStatementPooling() throws SQLException {
         try { return _meta.supportsStatementPooling(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsStoredProcedures() throws SQLException {
         try { return _meta.supportsStoredProcedures(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSubqueriesInComparisons() throws SQLException {
         try { return _meta.supportsSubqueriesInComparisons(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSubqueriesInExists() throws SQLException {
         try { return _meta.supportsSubqueriesInExists(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSubqueriesInIns() throws SQLException {
         try { return _meta.supportsSubqueriesInIns(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsSubqueriesInQuantifieds() throws SQLException {
         try { return _meta.supportsSubqueriesInQuantifieds(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsTableCorrelationNames() throws SQLException {
         try { return _meta.supportsTableCorrelationNames(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean supportsTransactionIsolationLevel(int level)
+    public boolean supportsTransactionIsolationLevel(final int level)
             throws SQLException {
         try { return _meta.supportsTransactionIsolationLevel(level); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsTransactions() throws SQLException {
         try { return _meta.supportsTransactions(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsUnion() throws SQLException {
         try { return _meta.supportsUnion(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsUnionAll() throws SQLException {
         try { return _meta.supportsUnionAll(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
-    public boolean updatesAreDetected(int type) throws SQLException {
+    public boolean updatesAreDetected(final int type) throws SQLException {
         try { return _meta.updatesAreDetected(type); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean usesLocalFilePerTable() throws SQLException {
         try { return _meta.usesLocalFilePerTable(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean usesLocalFiles() throws SQLException {
         try { return _meta.usesLocalFiles(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     /* JDBC_4_ANT_KEY_BEGIN */
 
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return true;
         } else if (iface.isAssignableFrom(_meta.getClass())) {
@@ -1271,7 +1271,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return iface.cast(this);
         } else if (iface.isAssignableFrom(_meta.getClass())) {
@@ -1284,18 +1284,18 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public RowIdLifetime getRowIdLifetime() throws SQLException {
         try { return _meta.getRowIdLifetime(); }
-        catch (SQLException e) { handleException(e); throw new AssertionError(); }
+        catch (final SQLException e) { handleException(e); throw new AssertionError(); }
     }
 
     @Override
-    public ResultSet getSchemas(String catalog, String schemaPattern)
+    public ResultSet getSchemas(final String catalog, final String schemaPattern)
     throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getSchemas(catalog, schemaPattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -1304,13 +1304,13 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     @Override
     public boolean autoCommitFailureClosesAllResultSets() throws SQLException {
         try { return _meta.autoCommitFailureClosesAllResultSets(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
     public boolean supportsStoredFunctionsUsingCallSyntax() throws SQLException {
         try { return _meta.supportsStoredFunctionsUsingCallSyntax(); }
-        catch (SQLException e) { handleException(e); return false; }
+        catch (final SQLException e) { handleException(e); return false; }
     }
 
     @Override
@@ -1320,30 +1320,30 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getClientInfoProperties());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getFunctions(String catalog, String schemaPattern,
-            String functionNamePattern) throws SQLException {
+    public ResultSet getFunctions(final String catalog, final String schemaPattern,
+            final String functionNamePattern) throws SQLException {
         _conn.checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(_conn,
                     _meta.getFunctions(catalog, schemaPattern,
                             functionNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,
-            String functionNamePattern, String columnNamePattern)
+    public ResultSet getFunctionColumns(final String catalog, final String schemaPattern,
+            final String functionNamePattern, final String columnNamePattern)
             throws SQLException {
         _conn.checkOpen();
         try {
@@ -1351,7 +1351,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
                     _meta.getFunctionColumns(catalog, schemaPattern,
                             functionNamePattern, columnNamePattern));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -1360,8 +1360,8 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
     /* JDBC_4_ANT_KEY_END */
 
     @Override
-    public ResultSet getPseudoColumns(String catalog, String schemaPattern,
-            String tableNamePattern, String columnNamePattern)
+    public ResultSet getPseudoColumns(final String catalog, final String schemaPattern,
+            final String tableNamePattern, final String columnNamePattern)
             throws SQLException {
         _conn.checkOpen();
         try {
@@ -1369,7 +1369,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
                     _meta.getPseudoColumns(catalog, schemaPattern,
                             tableNamePattern, columnNamePattern));
 }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -1381,7 +1381,7 @@ public class DelegatingDatabaseMetaData implements DatabaseMetaData {
         try {
             return _meta.generatedKeyAlwaysReturned();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return false;
         }

==================================================
DelegatingResultSet.java
index cb0b058077..ef6a806a75 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingPreparedStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingPreparedStatement.java
@@ -67,8 +67,8 @@ public class DelegatingPreparedStatement extends DelegatingStatement
      * @param s the {@link PreparedStatement} to delegate all calls to.
      * @param c the {@link DelegatingConnection} that created this statement.
      */
-    public DelegatingPreparedStatement(DelegatingConnection<?> c,
-                                       PreparedStatement s) {
+    public DelegatingPreparedStatement(final DelegatingConnection<?> c,
+                                       final PreparedStatement s) {
         super(c, s);
     }
 
@@ -81,7 +81,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
         try {
             return DelegatingResultSet.wrapResultSet(this,((PreparedStatement)getDelegate()).executeQuery());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -95,97 +95,97 @@ public class DelegatingPreparedStatement extends DelegatingStatement
         }
         try {
             return ((PreparedStatement) getDelegate()).executeUpdate();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return 0;
         }
     }
 
     @Override
-    public void setNull(int parameterIndex, int sqlType) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setNull(parameterIndex,sqlType); } catch (SQLException e) { handleException(e); } }
+    public void setNull(final int parameterIndex, final int sqlType) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setNull(parameterIndex,sqlType); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBoolean(int parameterIndex, boolean x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBoolean(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setBoolean(final int parameterIndex, final boolean x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBoolean(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setByte(int parameterIndex, byte x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setByte(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setByte(final int parameterIndex, final byte x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setByte(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setShort(int parameterIndex, short x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setShort(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setShort(final int parameterIndex, final short x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setShort(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setInt(int parameterIndex, int x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setInt(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setInt(final int parameterIndex, final int x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setInt(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setLong(int parameterIndex, long x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setLong(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setLong(final int parameterIndex, final long x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setLong(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setFloat(int parameterIndex, float x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setFloat(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setFloat(final int parameterIndex, final float x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setFloat(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setDouble(int parameterIndex, double x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDouble(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setDouble(final int parameterIndex, final double x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDouble(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBigDecimal(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setBigDecimal(final int parameterIndex, final BigDecimal x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBigDecimal(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setString(int parameterIndex, String x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setString(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setString(final int parameterIndex, final String x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setString(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBytes(int parameterIndex, byte[] x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBytes(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setBytes(final int parameterIndex, final byte[] x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBytes(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setDate(int parameterIndex, Date x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDate(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setDate(final int parameterIndex, final Date x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDate(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTime(int parameterIndex, Time x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTime(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setTime(final int parameterIndex, final Time x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTime(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTimestamp(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    public void setTimestamp(final int parameterIndex, final Timestamp x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTimestamp(parameterIndex,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
+    public void setAsciiStream(final int parameterIndex, final InputStream x, final int length) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex,x,length); } catch (final SQLException e) { handleException(e); } }
 
     /** @deprecated Use setAsciiStream(), setCharacterStream() or setNCharacterStream() */
     @Deprecated
     @Override
-    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setUnicodeStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
+    public void setUnicodeStream(final int parameterIndex, final InputStream x, final int length) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setUnicodeStream(parameterIndex,x,length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
+    public void setBinaryStream(final int parameterIndex, final InputStream x, final int length) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex,x,length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void clearParameters() throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).clearParameters(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).clearParameters(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x, targetSqlType, scale); } catch (SQLException e) { handleException(e); } }
+    public void setObject(final int parameterIndex, final Object x, final int targetSqlType, final int scale) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x, targetSqlType, scale); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x, targetSqlType); } catch (SQLException e) { handleException(e); } }
+    public void setObject(final int parameterIndex, final Object x, final int targetSqlType) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x, targetSqlType); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setObject(int parameterIndex, Object x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void setObject(final int parameterIndex, final Object x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public boolean execute() throws SQLException {
@@ -195,7 +195,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
         }
         try {
             return ((PreparedStatement) getDelegate()).execute();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
@@ -203,47 +203,47 @@ public class DelegatingPreparedStatement extends DelegatingStatement
 
     @Override
     public void addBatch() throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).addBatch(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).addBatch(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex,reader,length); } catch (SQLException e) { handleException(e); } }
+    public void setCharacterStream(final int parameterIndex, final Reader reader, final int length) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex,reader,length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setRef(int i, Ref x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setRef(i,x); } catch (SQLException e) { handleException(e); } }
+    public void setRef(final int i, final Ref x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setRef(i,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setBlob(int i, Blob x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBlob(i,x); } catch (SQLException e) { handleException(e); } }
+    public void setBlob(final int i, final Blob x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBlob(i,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setClob(int i, Clob x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setClob(i,x); } catch (SQLException e) { handleException(e); } }
+    public void setClob(final int i, final Clob x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setClob(i,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setArray(int i, Array x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setArray(i,x); } catch (SQLException e) { handleException(e); } }
+    public void setArray(final int i, final Array x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setArray(i,x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public ResultSetMetaData getMetaData() throws SQLException
-    { checkOpen(); try { return ((PreparedStatement)getDelegate()).getMetaData(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
+    { checkOpen(); try { return ((PreparedStatement)getDelegate()).getMetaData(); } catch (final SQLException e) { handleException(e); throw new AssertionError(); } }
 
     @Override
-    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDate(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
+    public void setDate(final int parameterIndex, final Date x, final Calendar cal) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDate(parameterIndex,x,cal); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTime(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
+    public void setTime(final int parameterIndex, final Time x, final Calendar cal) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTime(parameterIndex,x,cal); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTimestamp(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
+    public void setTimestamp(final int parameterIndex, final Timestamp x, final Calendar cal) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTimestamp(parameterIndex,x,cal); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setNull(paramIndex,sqlType,typeName); } catch (SQLException e) { handleException(e); } }
+    public void setNull(final int paramIndex, final int sqlType, final String typeName) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setNull(paramIndex,sqlType,typeName); } catch (final SQLException e) { handleException(e); } }
 
     /**
      * Returns a String representation of this object.
@@ -252,213 +252,213 @@ public class DelegatingPreparedStatement extends DelegatingStatement
      */
     @Override
     public String toString() {
-        Statement statement = getDelegate();
+        final Statement statement = getDelegate();
         return statement == null ? "NULL" : statement.toString();
     }
 
     @Override
-    public void setURL(int parameterIndex, java.net.URL x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)getDelegate()).setURL(parameterIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void setURL(final int parameterIndex, final java.net.URL x) throws SQLException
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setURL(parameterIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public java.sql.ParameterMetaData getParameterMetaData() throws SQLException
-    { checkOpen(); try { return ((PreparedStatement)getDelegate()).getParameterMetaData(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
+    { checkOpen(); try { return ((PreparedStatement)getDelegate()).getParameterMetaData(); } catch (final SQLException e) { handleException(e); throw new AssertionError(); } }
 
 
     @Override
-    public void setRowId(int parameterIndex, RowId value) throws SQLException {
+    public void setRowId(final int parameterIndex, final RowId value) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setRowId(parameterIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNString(int parameterIndex, String value) throws SQLException {
+    public void setNString(final int parameterIndex, final String value) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setNString(parameterIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
+    public void setNCharacterStream(final int parameterIndex, final Reader value, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setNCharacterStream(parameterIndex, value, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNClob(int parameterIndex, NClob value) throws SQLException {
+    public void setNClob(final int parameterIndex, final NClob value) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setNClob(parameterIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
+    public void setClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setClob(parameterIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
+    public void setBlob(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setBlob(parameterIndex, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
+    public void setNClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setNClob(parameterIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setSQLXML(int parameterIndex, SQLXML value) throws SQLException {
+    public void setSQLXML(final int parameterIndex, final SQLXML value) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setSQLXML(parameterIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setAsciiStream(int parameterIndex, InputStream inputStream, long length) throws SQLException {
+    public void setAsciiStream(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBinaryStream(int parameterIndex, InputStream inputStream, long length) throws SQLException {
+    public void setBinaryStream(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
+    public void setCharacterStream(final int parameterIndex, final Reader reader, final long length) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setAsciiStream(int parameterIndex, InputStream inputStream) throws SQLException {
+    public void setAsciiStream(final int parameterIndex, final InputStream inputStream) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBinaryStream(int parameterIndex, InputStream inputStream) throws SQLException {
+    public void setBinaryStream(final int parameterIndex, final InputStream inputStream) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
+    public void setCharacterStream(final int parameterIndex, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNCharacterStream(int parameterIndex, Reader reader) throws SQLException {
+    public void setNCharacterStream(final int parameterIndex, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setNCharacterStream(parameterIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setClob(int parameterIndex, Reader reader) throws SQLException {
+    public void setClob(final int parameterIndex, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setClob(parameterIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
+    public void setBlob(final int parameterIndex, final InputStream inputStream) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setBlob(parameterIndex, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void setNClob(int parameterIndex, Reader reader) throws SQLException {
+    public void setNClob(final int parameterIndex, final Reader reader) throws SQLException {
         checkOpen();
         try {
             ((PreparedStatement)getDelegate()).setNClob(parameterIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }

==================================================
DelegatingStatement.java
index 09ff9083ed..5b65d71237 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingResultSet.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingResultSet.java
@@ -78,7 +78,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
      * @param stmt Statement which created this ResultSet
      * @param res ResultSet to wrap
      */
-    private DelegatingResultSet(Statement stmt, ResultSet res) {
+    private DelegatingResultSet(final Statement stmt, final ResultSet res) {
         super((AbandonedTrace)stmt);
         this._stmt = stmt;
         this._res = res;
@@ -95,20 +95,20 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
      * @param conn Connection which created this ResultSet
      * @param res ResultSet to wrap
      */
-    private DelegatingResultSet(Connection conn, ResultSet res) {
+    private DelegatingResultSet(final Connection conn, final ResultSet res) {
         super((AbandonedTrace)conn);
         this._conn = conn;
         this._res = res;
     }
 
-    public static ResultSet wrapResultSet(Statement stmt, ResultSet rset) {
+    public static ResultSet wrapResultSet(final Statement stmt, final ResultSet rset) {
         if(null == rset) {
             return null;
         }
         return new DelegatingResultSet(stmt,rset);
     }
 
-    public static ResultSet wrapResultSet(Connection conn, ResultSet rset) {
+    public static ResultSet wrapResultSet(final Connection conn, final ResultSet rset) {
         if(null == rset) {
             return null;
         }
@@ -169,12 +169,12 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
             }
             _res.close();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
-    protected void handleException(SQLException e) throws SQLException {
+    protected void handleException(final SQLException e) throws SQLException {
         if (_stmt != null && _stmt instanceof DelegatingStatement) {
             ((DelegatingStatement)_stmt).handleException(e);
         }
@@ -188,564 +188,564 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
 
     @Override
     public boolean next() throws SQLException
-    { try { return _res.next(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.next(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean wasNull() throws SQLException
-    { try { return _res.wasNull(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.wasNull(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public String getString(int columnIndex) throws SQLException
-    { try { return _res.getString(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public String getString(final int columnIndex) throws SQLException
+    { try { return _res.getString(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public boolean getBoolean(int columnIndex) throws SQLException
-    { try { return _res.getBoolean(columnIndex); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean getBoolean(final int columnIndex) throws SQLException
+    { try { return _res.getBoolean(columnIndex); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public byte getByte(int columnIndex) throws SQLException
-    { try { return _res.getByte(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public byte getByte(final int columnIndex) throws SQLException
+    { try { return _res.getByte(columnIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public short getShort(int columnIndex) throws SQLException
-    { try { return _res.getShort(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public short getShort(final int columnIndex) throws SQLException
+    { try { return _res.getShort(columnIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public int getInt(int columnIndex) throws SQLException
-    { try { return _res.getInt(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public int getInt(final int columnIndex) throws SQLException
+    { try { return _res.getInt(columnIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public long getLong(int columnIndex) throws SQLException
-    { try { return _res.getLong(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public long getLong(final int columnIndex) throws SQLException
+    { try { return _res.getLong(columnIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public float getFloat(int columnIndex) throws SQLException
-    { try { return _res.getFloat(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public float getFloat(final int columnIndex) throws SQLException
+    { try { return _res.getFloat(columnIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public double getDouble(int columnIndex) throws SQLException
-    { try { return _res.getDouble(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    public double getDouble(final int columnIndex) throws SQLException
+    { try { return _res.getDouble(columnIndex); } catch (final SQLException e) { handleException(e); return 0; } }
 
     /** @deprecated Use {@link #getBigDecimal(int)} */
     @Deprecated
     @Override
-    public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException
-    { try { return _res.getBigDecimal(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final int columnIndex, final int scale) throws SQLException
+    { try { return _res.getBigDecimal(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public byte[] getBytes(int columnIndex) throws SQLException
-    { try { return _res.getBytes(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public byte[] getBytes(final int columnIndex) throws SQLException
+    { try { return _res.getBytes(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(int columnIndex) throws SQLException
-    { try { return _res.getDate(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final int columnIndex) throws SQLException
+    { try { return _res.getDate(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(int columnIndex) throws SQLException
-    { try { return _res.getTime(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final int columnIndex) throws SQLException
+    { try { return _res.getTime(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(int columnIndex) throws SQLException
-    { try { return _res.getTimestamp(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final int columnIndex) throws SQLException
+    { try { return _res.getTimestamp(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public InputStream getAsciiStream(int columnIndex) throws SQLException
-    { try { return _res.getAsciiStream(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public InputStream getAsciiStream(final int columnIndex) throws SQLException
+    { try { return _res.getAsciiStream(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     /** @deprecated Use {@link #getCharacterStream(int)} */
     @Deprecated
     @Override
-    public InputStream getUnicodeStream(int columnIndex) throws SQLException
-    { try { return _res.getUnicodeStream(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public InputStream getUnicodeStream(final int columnIndex) throws SQLException
+    { try { return _res.getUnicodeStream(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public InputStream getBinaryStream(int columnIndex) throws SQLException
-    { try { return _res.getBinaryStream(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public InputStream getBinaryStream(final int columnIndex) throws SQLException
+    { try { return _res.getBinaryStream(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public String getString(String columnName) throws SQLException
-    { try { return _res.getString(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public String getString(final String columnName) throws SQLException
+    { try { return _res.getString(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public boolean getBoolean(String columnName) throws SQLException
-    { try { return _res.getBoolean(columnName); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean getBoolean(final String columnName) throws SQLException
+    { try { return _res.getBoolean(columnName); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public byte getByte(String columnName) throws SQLException
-    { try { return _res.getByte(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public byte getByte(final String columnName) throws SQLException
+    { try { return _res.getByte(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public short getShort(String columnName) throws SQLException
-    { try { return _res.getShort(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public short getShort(final String columnName) throws SQLException
+    { try { return _res.getShort(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public int getInt(String columnName) throws SQLException
-    { try { return _res.getInt(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public int getInt(final String columnName) throws SQLException
+    { try { return _res.getInt(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public long getLong(String columnName) throws SQLException
-    { try { return _res.getLong(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public long getLong(final String columnName) throws SQLException
+    { try { return _res.getLong(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public float getFloat(String columnName) throws SQLException
-    { try { return _res.getFloat(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public float getFloat(final String columnName) throws SQLException
+    { try { return _res.getFloat(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public double getDouble(String columnName) throws SQLException
-    { try { return _res.getDouble(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public double getDouble(final String columnName) throws SQLException
+    { try { return _res.getDouble(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     /** @deprecated Use {@link #getBigDecimal(String)} */
     @Deprecated
     @Override
-    public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException
-    { try { return _res.getBigDecimal(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final String columnName, final int scale) throws SQLException
+    { try { return _res.getBigDecimal(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public byte[] getBytes(String columnName) throws SQLException
-    { try { return _res.getBytes(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public byte[] getBytes(final String columnName) throws SQLException
+    { try { return _res.getBytes(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(String columnName) throws SQLException
-    { try { return _res.getDate(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final String columnName) throws SQLException
+    { try { return _res.getDate(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(String columnName) throws SQLException
-    { try { return _res.getTime(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final String columnName) throws SQLException
+    { try { return _res.getTime(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(String columnName) throws SQLException
-    { try { return _res.getTimestamp(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final String columnName) throws SQLException
+    { try { return _res.getTimestamp(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public InputStream getAsciiStream(String columnName) throws SQLException
-    { try { return _res.getAsciiStream(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public InputStream getAsciiStream(final String columnName) throws SQLException
+    { try { return _res.getAsciiStream(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     /** @deprecated Use {@link #getCharacterStream(String)} */
     @Deprecated
     @Override
-    public InputStream getUnicodeStream(String columnName) throws SQLException
-    { try { return _res.getUnicodeStream(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public InputStream getUnicodeStream(final String columnName) throws SQLException
+    { try { return _res.getUnicodeStream(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public InputStream getBinaryStream(String columnName) throws SQLException
-    { try { return _res.getBinaryStream(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public InputStream getBinaryStream(final String columnName) throws SQLException
+    { try { return _res.getBinaryStream(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
     public SQLWarning getWarnings() throws SQLException
-    { try { return _res.getWarnings(); } catch (SQLException e) { handleException(e); return null; } }
+    { try { return _res.getWarnings(); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
     public void clearWarnings() throws SQLException
-    { try { _res.clearWarnings(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.clearWarnings(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public String getCursorName() throws SQLException
-    { try { return _res.getCursorName(); } catch (SQLException e) { handleException(e); return null; } }
+    { try { return _res.getCursorName(); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
     public ResultSetMetaData getMetaData() throws SQLException
-    { try { return _res.getMetaData(); } catch (SQLException e) { handleException(e); return null; } }
+    { try { return _res.getMetaData(); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(int columnIndex) throws SQLException
-    { try { return _res.getObject(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final int columnIndex) throws SQLException
+    { try { return _res.getObject(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(String columnName) throws SQLException
-    { try { return _res.getObject(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final String columnName) throws SQLException
+    { try { return _res.getObject(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public int findColumn(String columnName) throws SQLException
-    { try { return _res.findColumn(columnName); } catch (SQLException e) { handleException(e); return 0; } }
+    public int findColumn(final String columnName) throws SQLException
+    { try { return _res.findColumn(columnName); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public Reader getCharacterStream(int columnIndex) throws SQLException
-    { try { return _res.getCharacterStream(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public Reader getCharacterStream(final int columnIndex) throws SQLException
+    { try { return _res.getCharacterStream(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Reader getCharacterStream(String columnName) throws SQLException
-    { try { return _res.getCharacterStream(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public Reader getCharacterStream(final String columnName) throws SQLException
+    { try { return _res.getCharacterStream(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public BigDecimal getBigDecimal(int columnIndex) throws SQLException
-    { try { return _res.getBigDecimal(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final int columnIndex) throws SQLException
+    { try { return _res.getBigDecimal(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public BigDecimal getBigDecimal(String columnName) throws SQLException
-    { try { return _res.getBigDecimal(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public BigDecimal getBigDecimal(final String columnName) throws SQLException
+    { try { return _res.getBigDecimal(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
     public boolean isBeforeFirst() throws SQLException
-    { try { return _res.isBeforeFirst(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.isBeforeFirst(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean isAfterLast() throws SQLException
-    { try { return _res.isAfterLast(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.isAfterLast(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean isFirst() throws SQLException
-    { try { return _res.isFirst(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.isFirst(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean isLast() throws SQLException
-    { try { return _res.isLast(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.isLast(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public void beforeFirst() throws SQLException
-    { try { _res.beforeFirst(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.beforeFirst(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void afterLast() throws SQLException
-    { try { _res.afterLast(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.afterLast(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public boolean first() throws SQLException
-    { try { return _res.first(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.first(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean last() throws SQLException
-    { try { return _res.last(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.last(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public int getRow() throws SQLException
-    { try { return _res.getRow(); } catch (SQLException e) { handleException(e); return 0; } }
+    { try { return _res.getRow(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public boolean absolute(int row) throws SQLException
-    { try { return _res.absolute(row); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean absolute(final int row) throws SQLException
+    { try { return _res.absolute(row); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public boolean relative(int rows) throws SQLException
-    { try { return _res.relative(rows); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean relative(final int rows) throws SQLException
+    { try { return _res.relative(rows); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean previous() throws SQLException
-    { try { return _res.previous(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.previous(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public void setFetchDirection(int direction) throws SQLException
-    { try { _res.setFetchDirection(direction); } catch (SQLException e) { handleException(e); } }
+    public void setFetchDirection(final int direction) throws SQLException
+    { try { _res.setFetchDirection(direction); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int getFetchDirection() throws SQLException
-    { try { return _res.getFetchDirection(); } catch (SQLException e) { handleException(e); return 0; } }
+    { try { return _res.getFetchDirection(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public void setFetchSize(int rows) throws SQLException
-    { try { _res.setFetchSize(rows); } catch (SQLException e) { handleException(e); } }
+    public void setFetchSize(final int rows) throws SQLException
+    { try { _res.setFetchSize(rows); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int getFetchSize() throws SQLException
-    { try { return _res.getFetchSize(); } catch (SQLException e) { handleException(e); return 0; } }
+    { try { return _res.getFetchSize(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
     public int getType() throws SQLException
-    { try { return _res.getType(); } catch (SQLException e) { handleException(e); return 0; } }
+    { try { return _res.getType(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
     public int getConcurrency() throws SQLException
-    { try { return _res.getConcurrency(); } catch (SQLException e) { handleException(e); return 0; } }
+    { try { return _res.getConcurrency(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
     public boolean rowUpdated() throws SQLException
-    { try { return _res.rowUpdated(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.rowUpdated(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean rowInserted() throws SQLException
-    { try { return _res.rowInserted(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.rowInserted(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public boolean rowDeleted() throws SQLException
-    { try { return _res.rowDeleted(); } catch (SQLException e) { handleException(e); return false; } }
+    { try { return _res.rowDeleted(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public void updateNull(int columnIndex) throws SQLException
-    { try { _res.updateNull(columnIndex); } catch (SQLException e) { handleException(e); } }
+    public void updateNull(final int columnIndex) throws SQLException
+    { try { _res.updateNull(columnIndex); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBoolean(int columnIndex, boolean x) throws SQLException
-    { try { _res.updateBoolean(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBoolean(final int columnIndex, final boolean x) throws SQLException
+    { try { _res.updateBoolean(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateByte(int columnIndex, byte x) throws SQLException
-    { try { _res.updateByte(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateByte(final int columnIndex, final byte x) throws SQLException
+    { try { _res.updateByte(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateShort(int columnIndex, short x) throws SQLException
-    { try { _res.updateShort(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateShort(final int columnIndex, final short x) throws SQLException
+    { try { _res.updateShort(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateInt(int columnIndex, int x) throws SQLException
-    { try { _res.updateInt(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateInt(final int columnIndex, final int x) throws SQLException
+    { try { _res.updateInt(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateLong(int columnIndex, long x) throws SQLException
-    { try { _res.updateLong(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateLong(final int columnIndex, final long x) throws SQLException
+    { try { _res.updateLong(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateFloat(int columnIndex, float x) throws SQLException
-    { try { _res.updateFloat(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateFloat(final int columnIndex, final float x) throws SQLException
+    { try { _res.updateFloat(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateDouble(int columnIndex, double x) throws SQLException
-    { try { _res.updateDouble(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateDouble(final int columnIndex, final double x) throws SQLException
+    { try { _res.updateDouble(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException
-    { try { _res.updateBigDecimal(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBigDecimal(final int columnIndex, final BigDecimal x) throws SQLException
+    { try { _res.updateBigDecimal(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateString(int columnIndex, String x) throws SQLException
-    { try { _res.updateString(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateString(final int columnIndex, final String x) throws SQLException
+    { try { _res.updateString(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBytes(int columnIndex, byte[] x) throws SQLException
-    { try { _res.updateBytes(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBytes(final int columnIndex, final byte[] x) throws SQLException
+    { try { _res.updateBytes(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateDate(int columnIndex, Date x) throws SQLException
-    { try { _res.updateDate(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateDate(final int columnIndex, final Date x) throws SQLException
+    { try { _res.updateDate(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateTime(int columnIndex, Time x) throws SQLException
-    { try { _res.updateTime(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateTime(final int columnIndex, final Time x) throws SQLException
+    { try { _res.updateTime(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException
-    { try { _res.updateTimestamp(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateTimestamp(final int columnIndex, final Timestamp x) throws SQLException
+    { try { _res.updateTimestamp(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException
-    { try { _res.updateAsciiStream(columnIndex, x, length); } catch (SQLException e) { handleException(e); } }
+    public void updateAsciiStream(final int columnIndex, final InputStream x, final int length) throws SQLException
+    { try { _res.updateAsciiStream(columnIndex, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException
-    { try { _res.updateBinaryStream(columnIndex, x, length); } catch (SQLException e) { handleException(e); } }
+    public void updateBinaryStream(final int columnIndex, final InputStream x, final int length) throws SQLException
+    { try { _res.updateBinaryStream(columnIndex, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException
-    { try { _res.updateCharacterStream(columnIndex, x, length); } catch (SQLException e) { handleException(e); } }
+    public void updateCharacterStream(final int columnIndex, final Reader x, final int length) throws SQLException
+    { try { _res.updateCharacterStream(columnIndex, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateObject(int columnIndex, Object x, int scale) throws SQLException
-    { try { _res.updateObject(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateObject(final int columnIndex, final Object x, final int scale) throws SQLException
+    { try { _res.updateObject(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateObject(int columnIndex, Object x) throws SQLException
-    { try { _res.updateObject(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateObject(final int columnIndex, final Object x) throws SQLException
+    { try { _res.updateObject(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateNull(String columnName) throws SQLException
-    { try { _res.updateNull(columnName); } catch (SQLException e) { handleException(e); } }
+    public void updateNull(final String columnName) throws SQLException
+    { try { _res.updateNull(columnName); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBoolean(String columnName, boolean x) throws SQLException
-    { try { _res.updateBoolean(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBoolean(final String columnName, final boolean x) throws SQLException
+    { try { _res.updateBoolean(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateByte(String columnName, byte x) throws SQLException
-    { try { _res.updateByte(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateByte(final String columnName, final byte x) throws SQLException
+    { try { _res.updateByte(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateShort(String columnName, short x) throws SQLException
-    { try { _res.updateShort(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateShort(final String columnName, final short x) throws SQLException
+    { try { _res.updateShort(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateInt(String columnName, int x) throws SQLException
-    { try { _res.updateInt(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateInt(final String columnName, final int x) throws SQLException
+    { try { _res.updateInt(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateLong(String columnName, long x) throws SQLException
-    { try { _res.updateLong(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateLong(final String columnName, final long x) throws SQLException
+    { try { _res.updateLong(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateFloat(String columnName, float x) throws SQLException
-    { try { _res.updateFloat(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateFloat(final String columnName, final float x) throws SQLException
+    { try { _res.updateFloat(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateDouble(String columnName, double x) throws SQLException
-    { try { _res.updateDouble(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateDouble(final String columnName, final double x) throws SQLException
+    { try { _res.updateDouble(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException
-    { try { _res.updateBigDecimal(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBigDecimal(final String columnName, final BigDecimal x) throws SQLException
+    { try { _res.updateBigDecimal(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateString(String columnName, String x) throws SQLException
-    { try { _res.updateString(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateString(final String columnName, final String x) throws SQLException
+    { try { _res.updateString(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBytes(String columnName, byte[] x) throws SQLException
-    { try { _res.updateBytes(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBytes(final String columnName, final byte[] x) throws SQLException
+    { try { _res.updateBytes(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateDate(String columnName, Date x) throws SQLException
-    { try { _res.updateDate(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateDate(final String columnName, final Date x) throws SQLException
+    { try { _res.updateDate(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateTime(String columnName, Time x) throws SQLException
-    { try { _res.updateTime(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateTime(final String columnName, final Time x) throws SQLException
+    { try { _res.updateTime(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateTimestamp(String columnName, Timestamp x) throws SQLException
-    { try { _res.updateTimestamp(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateTimestamp(final String columnName, final Timestamp x) throws SQLException
+    { try { _res.updateTimestamp(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateAsciiStream(String columnName, InputStream x, int length) throws SQLException
-    { try { _res.updateAsciiStream(columnName, x, length); } catch (SQLException e) { handleException(e); } }
+    public void updateAsciiStream(final String columnName, final InputStream x, final int length) throws SQLException
+    { try { _res.updateAsciiStream(columnName, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBinaryStream(String columnName, InputStream x, int length) throws SQLException
-    { try { _res.updateBinaryStream(columnName, x, length); } catch (SQLException e) { handleException(e); } }
+    public void updateBinaryStream(final String columnName, final InputStream x, final int length) throws SQLException
+    { try { _res.updateBinaryStream(columnName, x, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateCharacterStream(String columnName, Reader reader, int length) throws SQLException
-    { try { _res.updateCharacterStream(columnName, reader, length); } catch (SQLException e) { handleException(e); } }
+    public void updateCharacterStream(final String columnName, final Reader reader, final int length) throws SQLException
+    { try { _res.updateCharacterStream(columnName, reader, length); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateObject(String columnName, Object x, int scale) throws SQLException
-    { try { _res.updateObject(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateObject(final String columnName, final Object x, final int scale) throws SQLException
+    { try { _res.updateObject(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateObject(String columnName, Object x) throws SQLException
-    { try { _res.updateObject(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateObject(final String columnName, final Object x) throws SQLException
+    { try { _res.updateObject(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void insertRow() throws SQLException
-    { try { _res.insertRow(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.insertRow(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void updateRow() throws SQLException
-    { try { _res.updateRow(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.updateRow(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void deleteRow() throws SQLException
-    { try { _res.deleteRow(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.deleteRow(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void refreshRow() throws SQLException
-    { try { _res.refreshRow(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.refreshRow(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void cancelRowUpdates() throws SQLException
-    { try { _res.cancelRowUpdates(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.cancelRowUpdates(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void moveToInsertRow() throws SQLException
-    { try { _res.moveToInsertRow(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.moveToInsertRow(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void moveToCurrentRow() throws SQLException
-    { try { _res.moveToCurrentRow(); } catch (SQLException e) { handleException(e); } }
+    { try { _res.moveToCurrentRow(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public Object getObject(int i, Map<String,Class<?>> map) throws SQLException
-    { try { return _res.getObject(i, map); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final int i, final Map<String,Class<?>> map) throws SQLException
+    { try { return _res.getObject(i, map); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Ref getRef(int i) throws SQLException
-    { try { return _res.getRef(i); } catch (SQLException e) { handleException(e); return null; } }
+    public Ref getRef(final int i) throws SQLException
+    { try { return _res.getRef(i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Blob getBlob(int i) throws SQLException
-    { try { return _res.getBlob(i); } catch (SQLException e) { handleException(e); return null; } }
+    public Blob getBlob(final int i) throws SQLException
+    { try { return _res.getBlob(i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Clob getClob(int i) throws SQLException
-    { try { return _res.getClob(i); } catch (SQLException e) { handleException(e); return null; } }
+    public Clob getClob(final int i) throws SQLException
+    { try { return _res.getClob(i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Array getArray(int i) throws SQLException
-    { try { return _res.getArray(i); } catch (SQLException e) { handleException(e); return null; } }
+    public Array getArray(final int i) throws SQLException
+    { try { return _res.getArray(i); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Object getObject(String colName, Map<String,Class<?>> map) throws SQLException
-    { try { return _res.getObject(colName, map); } catch (SQLException e) { handleException(e); return null; } }
+    public Object getObject(final String colName, final Map<String,Class<?>> map) throws SQLException
+    { try { return _res.getObject(colName, map); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Ref getRef(String colName) throws SQLException
-    { try { return _res.getRef(colName); } catch (SQLException e) { handleException(e); return null; } }
+    public Ref getRef(final String colName) throws SQLException
+    { try { return _res.getRef(colName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Blob getBlob(String colName) throws SQLException
-    { try { return _res.getBlob(colName); } catch (SQLException e) { handleException(e); return null; } }
+    public Blob getBlob(final String colName) throws SQLException
+    { try { return _res.getBlob(colName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Clob getClob(String colName) throws SQLException
-    { try { return _res.getClob(colName); } catch (SQLException e) { handleException(e); return null; } }
+    public Clob getClob(final String colName) throws SQLException
+    { try { return _res.getClob(colName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Array getArray(String colName) throws SQLException
-    { try { return _res.getArray(colName); } catch (SQLException e) { handleException(e); return null; } }
+    public Array getArray(final String colName) throws SQLException
+    { try { return _res.getArray(colName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(int columnIndex, Calendar cal) throws SQLException
-    { try { return _res.getDate(columnIndex, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final int columnIndex, final Calendar cal) throws SQLException
+    { try { return _res.getDate(columnIndex, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Date getDate(String columnName, Calendar cal) throws SQLException
-    { try { return _res.getDate(columnName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Date getDate(final String columnName, final Calendar cal) throws SQLException
+    { try { return _res.getDate(columnName, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(int columnIndex, Calendar cal) throws SQLException
-    { try { return _res.getTime(columnIndex, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final int columnIndex, final Calendar cal) throws SQLException
+    { try { return _res.getTime(columnIndex, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Time getTime(String columnName, Calendar cal) throws SQLException
-    { try { return _res.getTime(columnName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Time getTime(final String columnName, final Calendar cal) throws SQLException
+    { try { return _res.getTime(columnName, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException
-    { try { return _res.getTimestamp(columnIndex, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final int columnIndex, final Calendar cal) throws SQLException
+    { try { return _res.getTimestamp(columnIndex, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException
-    { try { return _res.getTimestamp(columnName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    public Timestamp getTimestamp(final String columnName, final Calendar cal) throws SQLException
+    { try { return _res.getTimestamp(columnName, cal); } catch (final SQLException e) { handleException(e); return null; } }
 
 
     @Override
-    public java.net.URL getURL(int columnIndex) throws SQLException
-    { try { return _res.getURL(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
+    public java.net.URL getURL(final int columnIndex) throws SQLException
+    { try { return _res.getURL(columnIndex); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public java.net.URL getURL(String columnName) throws SQLException
-    { try { return _res.getURL(columnName); } catch (SQLException e) { handleException(e); return null; } }
+    public java.net.URL getURL(final String columnName) throws SQLException
+    { try { return _res.getURL(columnName); } catch (final SQLException e) { handleException(e); return null; } }
 
     @Override
-    public void updateRef(int columnIndex, Ref x) throws SQLException
-    { try { _res.updateRef(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateRef(final int columnIndex, final Ref x) throws SQLException
+    { try { _res.updateRef(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateRef(String columnName, Ref x) throws SQLException
-    { try { _res.updateRef(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateRef(final String columnName, final Ref x) throws SQLException
+    { try { _res.updateRef(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBlob(int columnIndex, Blob x) throws SQLException
-    { try { _res.updateBlob(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBlob(final int columnIndex, final Blob x) throws SQLException
+    { try { _res.updateBlob(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateBlob(String columnName, Blob x) throws SQLException
-    { try { _res.updateBlob(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateBlob(final String columnName, final Blob x) throws SQLException
+    { try { _res.updateBlob(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateClob(int columnIndex, Clob x) throws SQLException
-    { try { _res.updateClob(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateClob(final int columnIndex, final Clob x) throws SQLException
+    { try { _res.updateClob(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateClob(String columnName, Clob x) throws SQLException
-    { try { _res.updateClob(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateClob(final String columnName, final Clob x) throws SQLException
+    { try { _res.updateClob(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateArray(int columnIndex, Array x) throws SQLException
-    { try { _res.updateArray(columnIndex, x); } catch (SQLException e) { handleException(e); } }
+    public void updateArray(final int columnIndex, final Array x) throws SQLException
+    { try { _res.updateArray(columnIndex, x); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void updateArray(String columnName, Array x) throws SQLException
-    { try { _res.updateArray(columnName, x); } catch (SQLException e) { handleException(e); } }
+    public void updateArray(final String columnName, final Array x) throws SQLException
+    { try { _res.updateArray(columnName, x); } catch (final SQLException e) { handleException(e); } }
 
 
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return true;
         } else if (iface.isAssignableFrom(_res.getClass())) {
@@ -756,7 +756,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return iface.cast(this);
         } else if (iface.isAssignableFrom(_res.getClass())) {
@@ -767,43 +767,43 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
     }
 
     @Override
-    public RowId getRowId(int columnIndex) throws SQLException {
+    public RowId getRowId(final int columnIndex) throws SQLException {
         try {
             return _res.getRowId(columnIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public RowId getRowId(String columnLabel) throws SQLException {
+    public RowId getRowId(final String columnLabel) throws SQLException {
         try {
             return _res.getRowId(columnLabel);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void updateRowId(int columnIndex, RowId value) throws SQLException {
+    public void updateRowId(final int columnIndex, final RowId value) throws SQLException {
         try {
             _res.updateRowId(columnIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateRowId(String columnLabel, RowId value) throws SQLException {
+    public void updateRowId(final String columnLabel, final RowId value) throws SQLException {
         try {
             _res.updateRowId(columnLabel, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -813,7 +813,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
         try {
             return _res.getHoldability();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return 0;
         }
@@ -824,458 +824,458 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
         try {
             return _res.isClosed();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return false;
         }
     }
 
     @Override
-    public void updateNString(int columnIndex, String value) throws SQLException {
+    public void updateNString(final int columnIndex, final String value) throws SQLException {
         try {
             _res.updateNString(columnIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNString(String columnLabel, String value) throws SQLException {
+    public void updateNString(final String columnLabel, final String value) throws SQLException {
         try {
             _res.updateNString(columnLabel, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNClob(int columnIndex, NClob value) throws SQLException {
+    public void updateNClob(final int columnIndex, final NClob value) throws SQLException {
         try {
             _res.updateNClob(columnIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNClob(String columnLabel, NClob value) throws SQLException {
+    public void updateNClob(final String columnLabel, final NClob value) throws SQLException {
         try {
             _res.updateNClob(columnLabel, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public NClob getNClob(int columnIndex) throws SQLException {
+    public NClob getNClob(final int columnIndex) throws SQLException {
         try {
             return _res.getNClob(columnIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public NClob getNClob(String columnLabel) throws SQLException {
+    public NClob getNClob(final String columnLabel) throws SQLException {
         try {
             return _res.getNClob(columnLabel);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public SQLXML getSQLXML(int columnIndex) throws SQLException {
+    public SQLXML getSQLXML(final int columnIndex) throws SQLException {
         try {
             return _res.getSQLXML(columnIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public SQLXML getSQLXML(String columnLabel) throws SQLException {
+    public SQLXML getSQLXML(final String columnLabel) throws SQLException {
         try {
             return _res.getSQLXML(columnLabel);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void updateSQLXML(int columnIndex, SQLXML value) throws SQLException {
+    public void updateSQLXML(final int columnIndex, final SQLXML value) throws SQLException {
         try {
             _res.updateSQLXML(columnIndex, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateSQLXML(String columnLabel, SQLXML value) throws SQLException {
+    public void updateSQLXML(final String columnLabel, final SQLXML value) throws SQLException {
         try {
             _res.updateSQLXML(columnLabel, value);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public String getNString(int columnIndex) throws SQLException {
+    public String getNString(final int columnIndex) throws SQLException {
         try {
             return _res.getNString(columnIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public String getNString(String columnLabel) throws SQLException {
+    public String getNString(final String columnLabel) throws SQLException {
         try {
             return _res.getNString(columnLabel);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Reader getNCharacterStream(int columnIndex) throws SQLException {
+    public Reader getNCharacterStream(final int columnIndex) throws SQLException {
         try {
             return _res.getNCharacterStream(columnIndex);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public Reader getNCharacterStream(String columnLabel) throws SQLException {
+    public Reader getNCharacterStream(final String columnLabel) throws SQLException {
         try {
             return _res.getNCharacterStream(columnLabel);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public void updateNCharacterStream(int columnIndex, Reader reader, long length) throws SQLException {
+    public void updateNCharacterStream(final int columnIndex, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateNCharacterStream(columnIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
+    public void updateNCharacterStream(final String columnLabel, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateNCharacterStream(columnLabel, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateAsciiStream(int columnIndex, InputStream inputStream, long length) throws SQLException {
+    public void updateAsciiStream(final int columnIndex, final InputStream inputStream, final long length) throws SQLException {
         try {
             _res.updateAsciiStream(columnIndex, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBinaryStream(int columnIndex, InputStream inputStream, long length) throws SQLException {
+    public void updateBinaryStream(final int columnIndex, final InputStream inputStream, final long length) throws SQLException {
         try {
             _res.updateBinaryStream(columnIndex, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateCharacterStream(int columnIndex, Reader reader, long length) throws SQLException {
+    public void updateCharacterStream(final int columnIndex, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateCharacterStream(columnIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateAsciiStream(String columnLabel, InputStream inputStream, long length) throws SQLException {
+    public void updateAsciiStream(final String columnLabel, final InputStream inputStream, final long length) throws SQLException {
         try {
             _res.updateAsciiStream(columnLabel, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBinaryStream(String columnLabel, InputStream inputStream, long length) throws SQLException {
+    public void updateBinaryStream(final String columnLabel, final InputStream inputStream, final long length) throws SQLException {
         try {
             _res.updateBinaryStream(columnLabel, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
+    public void updateCharacterStream(final String columnLabel, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateCharacterStream(columnLabel, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
+    public void updateBlob(final int columnIndex, final InputStream inputStream, final long length) throws SQLException {
         try {
             _res.updateBlob(columnIndex, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
+    public void updateBlob(final String columnLabel, final InputStream inputStream, final long length) throws SQLException {
         try {
             _res.updateBlob(columnLabel, inputStream, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
+    public void updateClob(final int columnIndex, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateClob(columnIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
+    public void updateClob(final String columnLabel, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateClob(columnLabel, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
+    public void updateNClob(final int columnIndex, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateNClob(columnIndex, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
+    public void updateNClob(final String columnLabel, final Reader reader, final long length) throws SQLException {
         try {
             _res.updateNClob(columnLabel, reader, length);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNCharacterStream(int columnIndex, Reader reader) throws SQLException {
+    public void updateNCharacterStream(final int columnIndex, final Reader reader) throws SQLException {
         try {
             _res.updateNCharacterStream(columnIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
+    public void updateNCharacterStream(final String columnLabel, final Reader reader) throws SQLException {
         try {
             _res.updateNCharacterStream(columnLabel, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateAsciiStream(int columnIndex, InputStream inputStream) throws SQLException {
+    public void updateAsciiStream(final int columnIndex, final InputStream inputStream) throws SQLException {
         try {
             _res.updateAsciiStream(columnIndex, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBinaryStream(int columnIndex, InputStream inputStream) throws SQLException {
+    public void updateBinaryStream(final int columnIndex, final InputStream inputStream) throws SQLException {
         try {
             _res.updateBinaryStream(columnIndex, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateCharacterStream(int columnIndex, Reader reader) throws SQLException {
+    public void updateCharacterStream(final int columnIndex, final Reader reader) throws SQLException {
         try {
             _res.updateCharacterStream(columnIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateAsciiStream(String columnLabel, InputStream inputStream) throws SQLException {
+    public void updateAsciiStream(final String columnLabel, final InputStream inputStream) throws SQLException {
         try {
             _res.updateAsciiStream(columnLabel, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBinaryStream(String columnLabel, InputStream inputStream) throws SQLException {
+    public void updateBinaryStream(final String columnLabel, final InputStream inputStream) throws SQLException {
         try {
             _res.updateBinaryStream(columnLabel, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
+    public void updateCharacterStream(final String columnLabel, final Reader reader) throws SQLException {
         try {
             _res.updateCharacterStream(columnLabel, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
+    public void updateBlob(final int columnIndex, final InputStream inputStream) throws SQLException {
         try {
             _res.updateBlob(columnIndex, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
+    public void updateBlob(final String columnLabel, final InputStream inputStream) throws SQLException {
         try {
             _res.updateBlob(columnLabel, inputStream);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateClob(int columnIndex, Reader reader) throws SQLException {
+    public void updateClob(final int columnIndex, final Reader reader) throws SQLException {
         try {
             _res.updateClob(columnIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateClob(String columnLabel, Reader reader) throws SQLException {
+    public void updateClob(final String columnLabel, final Reader reader) throws SQLException {
         try {
             _res.updateClob(columnLabel, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNClob(int columnIndex, Reader reader) throws SQLException {
+    public void updateNClob(final int columnIndex, final Reader reader) throws SQLException {
         try {
             _res.updateNClob(columnIndex, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public void updateNClob(String columnLabel, Reader reader) throws SQLException {
+    public void updateNClob(final String columnLabel, final Reader reader) throws SQLException {
         try {
             _res.updateNClob(columnLabel, reader);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
 
     @Override
-    public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
+    public <T> T getObject(final int columnIndex, final Class<T> type) throws SQLException {
         try {
             return _res.getObject(columnIndex, type);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public <T> T getObject(String columnLabel, Class<T> type)
+    public <T> T getObject(final String columnLabel, final Class<T> type)
             throws SQLException {
         try {
             return _res.getObject(columnLabel, type);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }

==================================================
DriverConnectionFactory.java
index b6969dd405..e470f39e10 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java
@@ -56,7 +56,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
      * @param s the {@link Statement} to delegate all calls to.
      * @param c the {@link DelegatingConnection} that created this statement.
      */
-    public DelegatingStatement(DelegatingConnection<?> c, Statement s) {
+    public DelegatingStatement(final DelegatingConnection<?> c, final Statement s) {
         super(c);
         _stmt = s;
         _conn = c;
@@ -104,7 +104,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
      * Sets my delegate.
      * @param s The statement
      */
-    public void setDelegate(Statement s) {
+    public void setDelegate(final Statement s) {
         _stmt = s;
     }
 
@@ -114,7 +114,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         return _closed;
     }
 
-    protected void setClosedInternal(boolean closed) {
+    protected void setClosedInternal(final boolean closed) {
         this._closed = closed;
     }
 
@@ -146,10 +146,10 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
                 // ResultSet's when it is closed.
                 // FIXME The PreparedStatement we're wrapping should handle this for us.
                 // See bug 17301 for what could happen when ResultSets are closed twice.
-                List<AbandonedTrace> resultSets = getTrace();
+                final List<AbandonedTrace> resultSets = getTrace();
                 if( resultSets != null) {
-                    ResultSet[] set = resultSets.toArray(new ResultSet[resultSets.size()]);
-                    for (ResultSet element : set) {
+                    final ResultSet[] set = resultSets.toArray(new ResultSet[resultSets.size()]);
+                    for (final ResultSet element : set) {
                         element.close();
                     }
                     clearTrace();
@@ -159,7 +159,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
                     _stmt.close();
                 }
             }
-            catch (SQLException e) {
+            catch (final SQLException e) {
                 handleException(e);
             }
         }
@@ -169,7 +169,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         }
     }
 
-    protected void handleException(SQLException e) throws SQLException {
+    protected void handleException(final SQLException e) throws SQLException {
         if (_conn != null) {
             _conn.handleException(e);
         }
@@ -201,7 +201,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
     }
 
     @Override
-    public ResultSet executeQuery(String sql) throws SQLException {
+    public ResultSet executeQuery(final String sql) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
@@ -209,7 +209,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         try {
             return DelegatingResultSet.wrapResultSet(this,_stmt.executeQuery(sql));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -221,78 +221,78 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         try {
             return DelegatingResultSet.wrapResultSet(this,_stmt.getResultSet());
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public int executeUpdate(String sql) throws SQLException {
+    public int executeUpdate(final String sql) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.executeUpdate(sql);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e); return 0;
         }
     }
 
     @Override
     public int getMaxFieldSize() throws SQLException
-    { checkOpen(); try { return _stmt.getMaxFieldSize(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getMaxFieldSize(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public void setMaxFieldSize(int max) throws SQLException
-    { checkOpen(); try { _stmt.setMaxFieldSize(max); } catch (SQLException e) { handleException(e); } }
+    public void setMaxFieldSize(final int max) throws SQLException
+    { checkOpen(); try { _stmt.setMaxFieldSize(max); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int getMaxRows() throws SQLException
-    { checkOpen(); try { return _stmt.getMaxRows(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getMaxRows(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public void setMaxRows(int max) throws SQLException
-    { checkOpen(); try { _stmt.setMaxRows(max); } catch (SQLException e) { handleException(e); } }
+    public void setMaxRows(final int max) throws SQLException
+    { checkOpen(); try { _stmt.setMaxRows(max); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setEscapeProcessing(boolean enable) throws SQLException
-    { checkOpen(); try { _stmt.setEscapeProcessing(enable); } catch (SQLException e) { handleException(e); } }
+    public void setEscapeProcessing(final boolean enable) throws SQLException
+    { checkOpen(); try { _stmt.setEscapeProcessing(enable); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int getQueryTimeout() throws SQLException
-    { checkOpen(); try { return _stmt.getQueryTimeout(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getQueryTimeout(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public void setQueryTimeout(int seconds) throws SQLException
-    { checkOpen(); try { _stmt.setQueryTimeout(seconds); } catch (SQLException e) { handleException(e); } }
+    public void setQueryTimeout(final int seconds) throws SQLException
+    { checkOpen(); try { _stmt.setQueryTimeout(seconds); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void cancel() throws SQLException
-    { checkOpen(); try { _stmt.cancel(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { _stmt.cancel(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public SQLWarning getWarnings() throws SQLException
-    { checkOpen(); try { return _stmt.getWarnings(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
+    { checkOpen(); try { return _stmt.getWarnings(); } catch (final SQLException e) { handleException(e); throw new AssertionError(); } }
 
     @Override
     public void clearWarnings() throws SQLException
-    { checkOpen(); try { _stmt.clearWarnings(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { _stmt.clearWarnings(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public void setCursorName(String name) throws SQLException
-    { checkOpen(); try { _stmt.setCursorName(name); } catch (SQLException e) { handleException(e); } }
+    public void setCursorName(final String name) throws SQLException
+    { checkOpen(); try { _stmt.setCursorName(name); } catch (final SQLException e) { handleException(e); } }
 
     @Override
-    public boolean execute(String sql) throws SQLException {
+    public boolean execute(final String sql) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.execute(sql);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
@@ -300,43 +300,43 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
 
     @Override
     public int getUpdateCount() throws SQLException
-    { checkOpen(); try { return _stmt.getUpdateCount(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getUpdateCount(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
     public boolean getMoreResults() throws SQLException
-    { checkOpen(); try { return _stmt.getMoreResults(); } catch (SQLException e) { handleException(e); return false; } }
+    { checkOpen(); try { return _stmt.getMoreResults(); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
-    public void setFetchDirection(int direction) throws SQLException
-    { checkOpen(); try { _stmt.setFetchDirection(direction); } catch (SQLException e) { handleException(e); } }
+    public void setFetchDirection(final int direction) throws SQLException
+    { checkOpen(); try { _stmt.setFetchDirection(direction); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int getFetchDirection() throws SQLException
-    { checkOpen(); try { return _stmt.getFetchDirection(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getFetchDirection(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public void setFetchSize(int rows) throws SQLException
-    { checkOpen(); try { _stmt.setFetchSize(rows); } catch (SQLException e) { handleException(e); } }
+    public void setFetchSize(final int rows) throws SQLException
+    { checkOpen(); try { _stmt.setFetchSize(rows); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int getFetchSize() throws SQLException
-    { checkOpen(); try { return _stmt.getFetchSize(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getFetchSize(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
     public int getResultSetConcurrency() throws SQLException
-    { checkOpen(); try { return _stmt.getResultSetConcurrency(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getResultSetConcurrency(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
     public int getResultSetType() throws SQLException
-    { checkOpen(); try { return _stmt.getResultSetType(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getResultSetType(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     @Override
-    public void addBatch(String sql) throws SQLException
-    { checkOpen(); try { _stmt.addBatch(sql); } catch (SQLException e) { handleException(e); } }
+    public void addBatch(final String sql) throws SQLException
+    { checkOpen(); try { _stmt.addBatch(sql); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public void clearBatch() throws SQLException
-    { checkOpen(); try { _stmt.clearBatch(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { _stmt.clearBatch(); } catch (final SQLException e) { handleException(e); } }
 
     @Override
     public int[] executeBatch() throws SQLException {
@@ -346,7 +346,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         }
         try {
             return _stmt.executeBatch();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
@@ -363,99 +363,99 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
     }
 
     @Override
-    public boolean getMoreResults(int current) throws SQLException
-    { checkOpen(); try { return _stmt.getMoreResults(current); } catch (SQLException e) { handleException(e); return false; } }
+    public boolean getMoreResults(final int current) throws SQLException
+    { checkOpen(); try { return _stmt.getMoreResults(current); } catch (final SQLException e) { handleException(e); return false; } }
 
     @Override
     public ResultSet getGeneratedKeys() throws SQLException {
         checkOpen();
         try {
             return DelegatingResultSet.wrapResultSet(this, _stmt.getGeneratedKeys());
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             throw new AssertionError();
         }
     }
 
     @Override
-    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
+    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.executeUpdate(sql, autoGeneratedKeys);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return 0;
         }
     }
 
     @Override
-    public int executeUpdate(String sql, int columnIndexes[]) throws SQLException {
+    public int executeUpdate(final String sql, final int columnIndexes[]) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.executeUpdate(sql, columnIndexes);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return 0;
         }
     }
 
     @Override
-    public int executeUpdate(String sql, String columnNames[]) throws SQLException {
+    public int executeUpdate(final String sql, final String columnNames[]) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.executeUpdate(sql, columnNames);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return 0;
         }
     }
 
     @Override
-    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
+    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.execute(sql, autoGeneratedKeys);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
     }
 
     @Override
-    public boolean execute(String sql, int columnIndexes[]) throws SQLException {
+    public boolean execute(final String sql, final int columnIndexes[]) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.execute(sql, columnIndexes);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
     }
 
     @Override
-    public boolean execute(String sql, String columnNames[]) throws SQLException {
+    public boolean execute(final String sql, final String columnNames[]) throws SQLException {
         checkOpen();
         if (_conn != null) {
             _conn.setLastUsed();
         }
         try {
             return _stmt.execute(sql, columnNames);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }
@@ -463,7 +463,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
 
     @Override
     public int getResultSetHoldability() throws SQLException
-    { checkOpen(); try { return _stmt.getResultSetHoldability(); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return _stmt.getResultSetHoldability(); } catch (final SQLException e) { handleException(e); return 0; } }
 
     /*
      * Note was protected prior to JDBC 4
@@ -475,7 +475,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
 
 
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return true;
         } else if (iface.isAssignableFrom(_stmt.getClass())) {
@@ -486,7 +486,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         if (iface.isAssignableFrom(getClass())) {
             return iface.cast(this);
         } else if (iface.isAssignableFrom(_stmt.getClass())) {
@@ -497,12 +497,12 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
     }
 
     @Override
-    public void setPoolable(boolean poolable) throws SQLException {
+    public void setPoolable(final boolean poolable) throws SQLException {
         checkOpen();
         try {
             _stmt.setPoolable(poolable);
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -513,7 +513,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         try {
             return _stmt.isPoolable();
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return false;
         }
@@ -524,7 +524,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         checkOpen();
         try {
             _stmt.closeOnCompletion();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
         }
     }
@@ -534,7 +534,7 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         checkOpen();
         try {
             return _stmt.isCloseOnCompletion();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             handleException(e);
             return false;
         }

==================================================
DriverManagerConnectionFactory.java
index a7bd5e1e86..6daf2bb109 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DriverConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DriverConnectionFactory.java
@@ -27,7 +27,7 @@ import java.util.Properties;
  * @since 2.0
  */
 public class DriverConnectionFactory implements ConnectionFactory {
-    public DriverConnectionFactory(Driver driver, String connectUri, Properties props) {
+    public DriverConnectionFactory(final Driver driver, final String connectUri, final Properties props) {
         _driver = driver;
         _connectUri = connectUri;
         _props = props;

==================================================
LifetimeExceededException.java
index b6a73b496c..cc40321526 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DriverManagerConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DriverManagerConnectionFactory.java
@@ -47,7 +47,7 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
      * <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
      * @since 2.2
      */
-    public DriverManagerConnectionFactory(String connectUri) {
+    public DriverManagerConnectionFactory(final String connectUri) {
         _connectUri = connectUri;
         _props = new Properties();
     }
@@ -60,7 +60,7 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
      * connection arguments; normally at least a "user" and "password"
      * property should be included.
      */
-    public DriverManagerConnectionFactory(String connectUri, Properties props) {
+    public DriverManagerConnectionFactory(final String connectUri, final Properties props) {
         _connectUri = connectUri;
         _props = props;
     }
@@ -72,7 +72,7 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
      * @param uname the database user
      * @param passwd the user's password
      */
-    public DriverManagerConnectionFactory(String connectUri, String uname, String passwd) {
+    public DriverManagerConnectionFactory(final String connectUri, final String uname, final String passwd) {
         _connectUri = connectUri;
         _uname = uname;
         _passwd = passwd;

==================================================
PStmtKey.java
index a170199179..53fd322378 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/LifetimeExceededException.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/LifetimeExceededException.java
@@ -37,7 +37,7 @@ package org.apache.tomcat.dbcp.dbcp2;
      *
      * @param message The message with which to create the exception
      */
-    public LifetimeExceededException(String message) {
+    public LifetimeExceededException(final String message) {
         super(message);
     }
 }

==================================================
PoolableCallableStatement.java
index 83aae957e1..8ca706d07d 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PStmtKey.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PStmtKey.java
@@ -43,19 +43,19 @@ public class PStmtKey {
     private final StatementType _stmtType;
 
 
-    public PStmtKey(String sql) {
+    public PStmtKey(final String sql) {
         this(sql, null, StatementType.PREPARED_STATEMENT, null);
     }
 
-    public PStmtKey(String sql, String catalog) {
+    public PStmtKey(final String sql, final String catalog) {
         this(sql, catalog, StatementType.PREPARED_STATEMENT, null);
     }
 
-    public PStmtKey(String sql, String catalog, int autoGeneratedKeys) {
+    public PStmtKey(final String sql, final String catalog, final int autoGeneratedKeys) {
         this(sql, catalog, StatementType.PREPARED_STATEMENT, Integer.valueOf(autoGeneratedKeys));
     }
 
-    public PStmtKey(String sql, String catalog, StatementType stmtType, Integer autoGeneratedKeys) {
+    public PStmtKey(final String sql, final String catalog, final StatementType stmtType, final Integer autoGeneratedKeys) {
         _sql = sql;
         _catalog = catalog;
         _stmtType = stmtType;
@@ -64,15 +64,15 @@ public class PStmtKey {
         _resultSetConcurrency = null;
     }
 
-    public  PStmtKey(String sql, int resultSetType, int resultSetConcurrency) {
+    public  PStmtKey(final String sql, final int resultSetType, final int resultSetConcurrency) {
         this(sql, null, resultSetType, resultSetConcurrency, StatementType.PREPARED_STATEMENT);
     }
 
-    public PStmtKey(String sql, String catalog, int resultSetType, int resultSetConcurrency) {
+    public PStmtKey(final String sql, final String catalog, final int resultSetType, final int resultSetConcurrency) {
         this(sql, catalog, resultSetType, resultSetConcurrency, StatementType.PREPARED_STATEMENT);
     }
 
-    public PStmtKey(String sql, String catalog, int resultSetType, int resultSetConcurrency, StatementType stmtType) {
+    public PStmtKey(final String sql, final String catalog, final int resultSetType, final int resultSetConcurrency, final StatementType stmtType) {
         _sql = sql;
         _catalog = catalog;
         _resultSetType = Integer.valueOf(resultSetType);
@@ -107,7 +107,7 @@ public class PStmtKey {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
@@ -117,7 +117,7 @@ public class PStmtKey {
         if (getClass() != obj.getClass()) {
             return false;
         }
-        PStmtKey other = (PStmtKey) obj;
+        final PStmtKey other = (PStmtKey) obj;
         if (_catalog == null) {
             if (other._catalog != null) {
                 return false;
@@ -174,7 +174,7 @@ public class PStmtKey {
 
     @Override
     public String toString() {
-        StringBuffer buf = new StringBuffer();
+        final StringBuffer buf = new StringBuffer();
         buf.append("PStmtKey: sql=");
         buf.append(_sql);
         buf.append(", catalog=");

==================================================
PoolableConnection.java
index 8e5ede29b0..9fb2bfd19c 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolableCallableStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolableCallableStatement.java
@@ -54,9 +54,9 @@ public class PoolableCallableStatement extends DelegatingCallableStatement {
      * @param pool the {@link KeyedObjectPool} from which this CallableStatement was obtained
      * @param conn the {@link DelegatingConnection} that created this CallableStatement
      */
-    public PoolableCallableStatement(CallableStatement stmt, PStmtKey key,
-            KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> pool,
-            DelegatingConnection<Connection> conn) {
+    public PoolableCallableStatement(final CallableStatement stmt, final PStmtKey key,
+            final KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> pool,
+            final DelegatingConnection<Connection> conn) {
         super(conn, stmt);
         _pool = pool;
         _key = key;
@@ -77,11 +77,11 @@ public class PoolableCallableStatement extends DelegatingCallableStatement {
         if (!isClosed()) {
             try {
                 _pool.returnObject(_key,this);
-            } catch(SQLException e) {
+            } catch(final SQLException e) {
                 throw e;
-            } catch(RuntimeException e) {
+            } catch(final RuntimeException e) {
                 throw e;
-            } catch(Exception e) {
+            } catch(final Exception e) {
                 throw new SQLException("Cannot close CallableStatement (return to pool failed)", e);
             }
         }
@@ -115,10 +115,10 @@ public class PoolableCallableStatement extends DelegatingCallableStatement {
         // ResultSet's when it is closed.
         // FIXME The PreparedStatement we're wrapping should handle this for us.
         // See DBCP-10 for what could happen when ResultSets are closed twice.
-        List<AbandonedTrace> resultSets = getTrace();
+        final List<AbandonedTrace> resultSets = getTrace();
         if(resultSets != null) {
-            ResultSet[] set = resultSets.toArray(new ResultSet[resultSets.size()]);
-            for (ResultSet element : set) {
+            final ResultSet[] set = resultSets.toArray(new ResultSet[resultSets.size()]);
+            for (final ResultSet element : set) {
                 element.close();
             }
             clearTrace();

==================================================
PoolableConnectionFactory.java
index b4ce65b219..f005d7373d 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnection.java
@@ -90,9 +90,9 @@ public class PoolableConnection extends DelegatingConnection<Connection>
      * @param fastFailValidation true means fatal disconnection errors cause subsequent
      *        validations to fail immediately (no attempt to run query or isValid)
      */
-    public PoolableConnection(Connection conn,
-            ObjectPool<PoolableConnection> pool, ObjectName jmxName, Collection<String> disconnectSqlCodes,
-            boolean fastFailValidation) {
+    public PoolableConnection(final Connection conn,
+            final ObjectPool<PoolableConnection> pool, final ObjectName jmxName, final Collection<String> disconnectSqlCodes,
+            final boolean fastFailValidation) {
         super(conn);
         _pool = pool;
         _jmxName = jmxName;
@@ -115,8 +115,8 @@ public class PoolableConnection extends DelegatingConnection<Connection>
     * @param pool the pool to which I should return when closed
     * @param jmxName JMX name
     */
-   public PoolableConnection(Connection conn,
-           ObjectPool<PoolableConnection> pool, ObjectName jmxName) {
+   public PoolableConnection(final Connection conn,
+           final ObjectPool<PoolableConnection> pool, final ObjectName jmxName) {
        this(conn, pool, jmxName, null, false);
    }
 
@@ -167,14 +167,14 @@ public class PoolableConnection extends DelegatingConnection<Connection>
         boolean isUnderlyingConectionClosed;
         try {
             isUnderlyingConectionClosed = getDelegateInternal().isClosed();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             try {
                 _pool.invalidateObject(this);
-            } catch(IllegalStateException ise) {
+            } catch(final IllegalStateException ise) {
                 // pool is closed, so close the connection
                 passivate();
                 getInnermostDelegate().close();
-            } catch (Exception ie) {
+            } catch (final Exception ie) {
                 // DO NOTHING the original exception will be rethrown
             }
             throw new SQLException("Cannot close connection (isClosed check failed)", e);
@@ -191,11 +191,11 @@ public class PoolableConnection extends DelegatingConnection<Connection>
             // must destroy this proxy
             try {
                 _pool.invalidateObject(this);
-            } catch(IllegalStateException e) {
+            } catch(final IllegalStateException e) {
                 // pool is closed, so close the connection
                 passivate();
                 getInnermostDelegate().close();
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 throw new SQLException("Cannot close connection (invalidating pooled object failed)", e);
             }
         } else {
@@ -203,15 +203,15 @@ public class PoolableConnection extends DelegatingConnection<Connection>
             // simply need to return this proxy to the pool
             try {
                 _pool.returnObject(this);
-            } catch(IllegalStateException e) {
+            } catch(final IllegalStateException e) {
                 // pool is closed, so close the connection
                 passivate();
                 getInnermostDelegate().close();
-            } catch(SQLException e) {
+            } catch(final SQLException e) {
                 throw e;
-            } catch(RuntimeException e) {
+            } catch(final RuntimeException e) {
                 throw e;
-            } catch(Exception e) {
+            } catch(final Exception e) {
                 throw new SQLException("Cannot close connection (return to pool failed)", e);
             }
         }
@@ -234,7 +234,7 @@ public class PoolableConnection extends DelegatingConnection<Connection>
         if (validationPreparedStatement != null) {
             try {
                 validationPreparedStatement.close();
-            } catch (SQLException sqle) {
+            } catch (final SQLException sqle) {
                 // Ignore
             }
         }
@@ -270,7 +270,7 @@ public class PoolableConnection extends DelegatingConnection<Connection>
      * @param timeout validation timeout
      * @throws SQLException if validation fails or an SQLException occurs during validation
      */
-    public void validate(String sql, int timeout) throws SQLException {
+    public void validate(final String sql, int timeout) throws SQLException {
         if (_fastFailValidation && _fatalSqlExceptionThrown) {
             throw new SQLException(Utils.getMessage("poolableConnection.validate.fastFail"));
         }
@@ -301,7 +301,7 @@ public class PoolableConnection extends DelegatingConnection<Connection>
             if(!rs.next()) {
                 throw new SQLException("validationQuery didn't return a row");
             }
-        } catch (SQLException sqle) {
+        } catch (final SQLException sqle) {
             throw sqle;
         }
     }
@@ -318,9 +318,9 @@ public class PoolableConnection extends DelegatingConnection<Connection>
      * @param e SQLException to be examined
      * @return true if the exception signals a disconnection
      */
-    private boolean isDisconnectionSqlException(SQLException e) {
+    private boolean isDisconnectionSqlException(final SQLException e) {
         boolean fatalException = false;
-        String sqlState = e.getSQLState();
+        final String sqlState = e.getSQLState();
         if (sqlState != null) {
             fatalException = _disconnectionSqlCodes == null ? sqlState.startsWith(Utils.DISCONNECTION_SQL_CODE_PREFIX)
                     || Utils.DISCONNECTION_SQL_CODES.contains(sqlState) : _disconnectionSqlCodes.contains(sqlState);
@@ -334,7 +334,7 @@ public class PoolableConnection extends DelegatingConnection<Connection>
     }
 
     @Override
-    protected void handleException(SQLException e) throws SQLException {
+    protected void handleException(final SQLException e) throws SQLException {
         _fatalSqlExceptionThrown |= isDisconnectionSqlException(e);
         super.handleException(e);
     }

==================================================
PoolablePreparedStatement.java
index 8d917e94c5..4bc0690321 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnectionFactory.java
@@ -57,8 +57,8 @@ public class PoolableConnectionFactory
      * @param dataSourceJmxName The JMX name
      * base {@link Connection}s
      */
-    public PoolableConnectionFactory(ConnectionFactory connFactory,
-            ObjectName dataSourceJmxName) {
+    public PoolableConnectionFactory(final ConnectionFactory connFactory,
+            final ObjectName dataSourceJmxName) {
         _connFactory = connFactory;
         this.dataSourceJmxName = dataSourceJmxName;
     }
@@ -70,7 +70,7 @@ public class PoolableConnectionFactory
      *
      * @param validationQuery a query to use to {@link #validateObject validate} {@link Connection}s.
      */
-    public void setValidationQuery(String validationQuery) {
+    public void setValidationQuery(final String validationQuery) {
         _validationQuery = validationQuery;
     }
 
@@ -82,7 +82,7 @@ public class PoolableConnectionFactory
      *
      * @param timeout new validation query timeout value in seconds
      */
-    public void setValidationQueryTimeout(int timeout) {
+    public void setValidationQueryTimeout(final int timeout) {
         _validationQueryTimeout = timeout;
     }
 
@@ -91,7 +91,7 @@ public class PoolableConnectionFactory
      * Using {@code null} turns off connection initialization.
      * @param connectionInitSqls SQL statement to initialize {@link Connection}s.
      */
-    public void setConnectionInitSql(Collection<String> connectionInitSqls) {
+    public void setConnectionInitSql(final Collection<String> connectionInitSqls) {
         _connectionInitSqls = connectionInitSqls;
     }
 
@@ -99,11 +99,11 @@ public class PoolableConnectionFactory
      * Sets the {@link ObjectPool} in which to pool {@link Connection}s.
      * @param pool the {@link ObjectPool} in which to pool those {@link Connection}s
      */
-    public synchronized void setPool(ObjectPool<PoolableConnection> pool) {
+    public synchronized void setPool(final ObjectPool<PoolableConnection> pool) {
         if(null != _pool && pool != _pool) {
             try {
                 _pool.close();
-            } catch(Exception e) {
+            } catch(final Exception e) {
                 // ignored !?!
             }
         }
@@ -122,7 +122,7 @@ public class PoolableConnectionFactory
      * Sets the default "read only" setting for borrowed {@link Connection}s
      * @param defaultReadOnly the default "read only" setting for borrowed {@link Connection}s
      */
-    public void setDefaultReadOnly(Boolean defaultReadOnly) {
+    public void setDefaultReadOnly(final Boolean defaultReadOnly) {
         _defaultReadOnly = defaultReadOnly;
     }
 
@@ -130,7 +130,7 @@ public class PoolableConnectionFactory
      * Sets the default "auto commit" setting for borrowed {@link Connection}s
      * @param defaultAutoCommit the default "auto commit" setting for borrowed {@link Connection}s
      */
-    public void setDefaultAutoCommit(Boolean defaultAutoCommit) {
+    public void setDefaultAutoCommit(final Boolean defaultAutoCommit) {
         _defaultAutoCommit = defaultAutoCommit;
     }
 
@@ -138,7 +138,7 @@ public class PoolableConnectionFactory
      * Sets the default "Transaction Isolation" setting for borrowed {@link Connection}s
      * @param defaultTransactionIsolation the default "Transaction Isolation" setting for returned {@link Connection}s
      */
-    public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {
+    public void setDefaultTransactionIsolation(final int defaultTransactionIsolation) {
         _defaultTransactionIsolation = defaultTransactionIsolation;
     }
 
@@ -146,19 +146,19 @@ public class PoolableConnectionFactory
      * Sets the default "catalog" setting for borrowed {@link Connection}s
      * @param defaultCatalog the default "catalog" setting for borrowed {@link Connection}s
      */
-    public void setDefaultCatalog(String defaultCatalog) {
+    public void setDefaultCatalog(final String defaultCatalog) {
         _defaultCatalog = defaultCatalog;
     }
 
-    public void setCacheState(boolean cacheState) {
+    public void setCacheState(final boolean cacheState) {
         this._cacheState = cacheState;
     }
 
-    public void setPoolStatements(boolean poolStatements) {
+    public void setPoolStatements(final boolean poolStatements) {
         this.poolStatements = poolStatements;
     }
 
-    public void setMaxOpenPrepatedStatements(int maxOpenPreparedStatements) {
+    public void setMaxOpenPrepatedStatements(final int maxOpenPreparedStatements) {
         this.maxOpenPreparedStatements = maxOpenPreparedStatements;
     }
 
@@ -169,7 +169,7 @@ public class PoolableConnectionFactory
      * is -1.
      * @param maxConnLifetimeMillis The maximum connection lifetime
      */
-    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
+    public void setMaxConnLifetimeMillis(final long maxConnLifetimeMillis) {
         this.maxConnLifetimeMillis = maxConnLifetimeMillis;
     }
 
@@ -178,7 +178,7 @@ public class PoolableConnectionFactory
         return enableAutoCommitOnReturn;
     }
 
-    public void setEnableAutoCommitOnReturn(boolean enableAutoCommitOnReturn) {
+    public void setEnableAutoCommitOnReturn(final boolean enableAutoCommitOnReturn) {
         this.enableAutoCommitOnReturn = enableAutoCommitOnReturn;
     }
 
@@ -187,7 +187,7 @@ public class PoolableConnectionFactory
         return rollbackOnReturn;
     }
 
-    public void setRollbackOnReturn(boolean rollbackOnReturn) {
+    public void setRollbackOnReturn(final boolean rollbackOnReturn) {
         this.rollbackOnReturn = rollbackOnReturn;
     }
 
@@ -195,7 +195,7 @@ public class PoolableConnectionFactory
         return defaultQueryTimeout;
     }
 
-    public void setDefaultQueryTimeout(Integer defaultQueryTimeout) {
+    public void setDefaultQueryTimeout(final Integer defaultQueryTimeout) {
         this.defaultQueryTimeout = defaultQueryTimeout;
     }
 
@@ -225,7 +225,7 @@ public class PoolableConnectionFactory
      * @param disconnectionSqlCodes The disconnection codes
      * @since 2.1
      */
-    public void setDisconnectionSqlCodes(Collection<String> disconnectionSqlCodes) {
+    public void setDisconnectionSqlCodes(final Collection<String> disconnectionSqlCodes) {
         _disconnectionSqlCodes = disconnectionSqlCodes;
     }
 
@@ -248,7 +248,7 @@ public class PoolableConnectionFactory
      * fast fail validation
      * @since 2.1
      */
-    public void setFastFailValidation(boolean fastFailValidation) {
+    public void setFastFailValidation(final boolean fastFailValidation) {
         _fastFailValidation = fastFailValidation;
     }
 
@@ -260,29 +260,29 @@ public class PoolableConnectionFactory
         }
         try {
             initializeConnection(conn);
-        } catch (SQLException sqle) {
+        } catch (final SQLException sqle) {
             // Make sure the connection is closed
             try {
                 conn.close();
-            } catch (SQLException ignore) {
+            } catch (final SQLException ignore) {
                 // ignore
             }
             // Rethrow original exception so it is visible to caller
             throw sqle;
         }
 
-        long connIndex = connectionIndex.getAndIncrement();
+        final long connIndex = connectionIndex.getAndIncrement();
 
         if(poolStatements) {
             conn = new PoolingConnection(conn);
-            GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
+            final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
             config.setMaxTotalPerKey(-1);
             config.setBlockWhenExhausted(false);
             config.setMaxWaitMillis(0);
             config.setMaxIdlePerKey(1);
             config.setMaxTotal(maxOpenPreparedStatements);
             if (dataSourceJmxName != null) {
-                StringBuilder base = new StringBuilder(dataSourceJmxName.toString());
+                final StringBuilder base = new StringBuilder(dataSourceJmxName.toString());
                 base.append(Constants.JMX_CONNECTION_BASE_EXT);
                 base.append(Long.toString(connIndex));
                 config.setJmxNameBase(base.toString());
@@ -290,7 +290,7 @@ public class PoolableConnectionFactory
             } else {
                 config.setJmxEnabled(false);
             }
-            KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> stmtPool =
+            final KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> stmtPool =
                     new GenericKeyedObjectPool<>((PoolingConnection)conn, config);
             ((PoolingConnection)conn).setStatementPool(stmtPool);
             ((PoolingConnection) conn).setCacheState(_cacheState);
@@ -305,20 +305,21 @@ public class PoolableConnectionFactory
                     Constants.JMX_CONNECTION_BASE_EXT + connIndex);
         }
 
-        PoolableConnection pc = new PoolableConnection(conn,_pool, connJmxName,
+        final PoolableConnection pc = new PoolableConnection(conn, _pool, connJmxName,
                                       _disconnectionSqlCodes, _fastFailValidation);
+        pc.setCacheState(_cacheState);
 
         return new DefaultPooledObject<>(pc);
     }
 
-    protected void initializeConnection(Connection conn) throws SQLException {
-        Collection<String> sqls = _connectionInitSqls;
+    protected void initializeConnection(final Connection conn) throws SQLException {
+        final Collection<String> sqls = _connectionInitSqls;
         if(conn.isClosed()) {
             throw new SQLException("initializeConnection: connection closed");
         }
         if(null != sqls) {
             try (Statement stmt = conn.createStatement();) {
-                for (String sql : sqls) {
+                for (final String sql : sqls) {
                     if (sql == null) {
                         throw new NullPointerException(
                                 "null connectionInitSqls element");
@@ -330,19 +331,19 @@ public class PoolableConnectionFactory
     }
 
     @Override
-    public void destroyObject(PooledObject<PoolableConnection> p)
+    public void destroyObject(final PooledObject<PoolableConnection> p)
             throws Exception {
         p.getObject().reallyClose();
     }
 
     @Override
-    public boolean validateObject(PooledObject<PoolableConnection> p) {
+    public boolean validateObject(final PooledObject<PoolableConnection> p) {
         try {
             validateLifetime(p);
 
             validateConnection(p.getObject());
             return true;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             if (log.isDebugEnabled()) {
                 log.debug(Utils.getMessage(
                         "poolableConnectionFactory.validateObject.fail"), e);
@@ -351,7 +352,7 @@ public class PoolableConnectionFactory
         }
     }
 
-    public void validateConnection(PoolableConnection conn) throws SQLException {
+    public void validateConnection(final PoolableConnection conn) throws SQLException {
         if(conn.isClosed()) {
             throw new SQLException("validateConnection: connection closed");
         }
@@ -359,12 +360,12 @@ public class PoolableConnectionFactory
     }
 
     @Override
-    public void passivateObject(PooledObject<PoolableConnection> p)
+    public void passivateObject(final PooledObject<PoolableConnection> p)
             throws Exception {
 
         validateLifetime(p);
 
-        PoolableConnection conn = p.getObject();
+        final PoolableConnection conn = p.getObject();
         Boolean connAutoCommit = null;
         if (rollbackOnReturn) {
             connAutoCommit = Boolean.valueOf(conn.getAutoCommit());
@@ -390,12 +391,12 @@ public class PoolableConnectionFactory
     }
 
     @Override
-    public void activateObject(PooledObject<PoolableConnection> p)
+    public void activateObject(final PooledObject<PoolableConnection> p)
             throws Exception {
 
         validateLifetime(p);
 
-        PoolableConnection conn = p.getObject();
+        final PoolableConnection conn = p.getObject();
         conn.activate();
 
         if (_defaultAutoCommit != null &&
@@ -417,10 +418,10 @@ public class PoolableConnectionFactory
         conn.setDefaultQueryTimeout(defaultQueryTimeout);
     }
 
-    private void validateLifetime(PooledObject<PoolableConnection> p)
+    private void validateLifetime(final PooledObject<PoolableConnection> p)
             throws Exception {
         if (maxConnLifetimeMillis > 0) {
-            long lifetime = System.currentTimeMillis() - p.getCreateTime();
+            final long lifetime = System.currentTimeMillis() - p.getCreateTime();
             if (lifetime > maxConnLifetimeMillis) {
                 throw new LifetimeExceededException(Utils.getMessage(
                         "connectionFactory.lifetimeExceeded",

==================================================
PoolingConnection.java
index 03012e064b..1b88f32593 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolablePreparedStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolablePreparedStatement.java
@@ -43,7 +43,7 @@ public class PoolablePreparedStatement<K> extends DelegatingPreparedStatement {
     /**
      * The {@link KeyedObjectPool} from which I was obtained.
      */
-    private final KeyedObjectPool<K,PoolablePreparedStatement<K>> _pool;
+    private final KeyedObjectPool<K, PoolablePreparedStatement<K>> _pool;
 
     /**
      * My "key" as used by {@link KeyedObjectPool}.
@@ -59,9 +59,9 @@ public class PoolablePreparedStatement<K> extends DelegatingPreparedStatement {
      * @param pool the {@link KeyedObjectPool} from which I was obtained.
      * @param conn the {@link java.sql.Connection Connection} from which I was created
      */
-    public PoolablePreparedStatement(PreparedStatement stmt, K key,
-            KeyedObjectPool<K, PoolablePreparedStatement<K>> pool,
-            DelegatingConnection<?> conn) {
+    public PoolablePreparedStatement(final PreparedStatement stmt, final K key,
+            final KeyedObjectPool<K, PoolablePreparedStatement<K>> pool,
+            final DelegatingConnection<?> conn) {
         super(conn, stmt);
         _pool = pool;
         _key = key;
@@ -100,11 +100,11 @@ public class PoolablePreparedStatement<K> extends DelegatingPreparedStatement {
         if (!isClosed()) {
             try {
                 _pool.returnObject(_key, this);
-            } catch(SQLException e) {
+            } catch(final SQLException e) {
                 throw e;
-            } catch(RuntimeException e) {
+            } catch(final RuntimeException e) {
                 throw e;
-            } catch(Exception e) {
+            } catch(final Exception e) {
                 throw new SQLException("Cannot close preparedstatement (return to pool failed)", e);
             }
         }
@@ -135,10 +135,10 @@ public class PoolablePreparedStatement<K> extends DelegatingPreparedStatement {
         // ResultSet's when it is closed.
         // FIXME The PreparedStatement we're wrapping should handle this for us.
         // See bug 17301 for what could happen when ResultSets are closed twice.
-        List<AbandonedTrace> resultSets = getTrace();
+        final List<AbandonedTrace> resultSets = getTrace();
         if( resultSets != null) {
-            ResultSet[] set = resultSets.toArray(new ResultSet[resultSets.size()]);
-            for (ResultSet element : set) {
+            final ResultSet[] set = resultSets.toArray(new ResultSet[resultSets.size()]);
+            for (final ResultSet element : set) {
                 element.close();
             }
             clearTrace();

==================================================
PoolingDataSource.java
index 5e93c9dcd6..d22de608c7 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
@@ -56,13 +56,13 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * Constructor.
      * @param c the underlying {@link Connection}.
      */
-    public PoolingConnection(Connection c) {
+    public PoolingConnection(final Connection c) {
         super(c);
     }
 
 
     public void setStatementPool(
-            KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> pool) {
+            final KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> pool) {
         _pstmtPool = pool;
     }
 
@@ -76,13 +76,13 @@ public class PoolingConnection extends DelegatingConnection<Connection>
     public synchronized void close() throws SQLException {
         try {
             if (null != _pstmtPool) {
-                KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> oldpool = _pstmtPool;
+                final KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> oldpool = _pstmtPool;
                 _pstmtPool = null;
                 try {
                     oldpool.close();
-                } catch(RuntimeException e) {
+                } catch(final RuntimeException e) {
                     throw e;
-                } catch(Exception e) {
+                } catch(final Exception e) {
                     throw new SQLException("Cannot close connection", e);
                 }
             }
@@ -101,24 +101,24 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @return a {@link PoolablePreparedStatement}
      */
     @Override
-    public PreparedStatement prepareStatement(String sql) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql) throws SQLException {
         if (null == _pstmtPool) {
             throw new SQLException(
                     "Statement pool is null - closed or invalid PoolingConnection.");
         }
         try {
             return _pstmtPool.borrowObject(createKey(sql));
-        } catch(NoSuchElementException e) {
+        } catch(final NoSuchElementException e) {
             throw new SQLException("MaxOpenPreparedStatements limit reached", e);
-        } catch(RuntimeException e) {
+        } catch(final RuntimeException e) {
             throw e;
-        } catch(Exception e) {
+        } catch(final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
         if (null == _pstmtPool) {
             throw new SQLException(
                     "Statement pool is null - closed or invalid PoolingConnection.");
@@ -126,13 +126,13 @@ public class PoolingConnection extends DelegatingConnection<Connection>
         try {
             return _pstmtPool.borrowObject(createKey(sql, autoGeneratedKeys));
         }
-        catch (NoSuchElementException e) {
+        catch (final NoSuchElementException e) {
             throw new SQLException("MaxOpenPreparedStatements limit reached", e);
         }
-        catch (RuntimeException e) {
+        catch (final RuntimeException e) {
             throw e;
         }
-        catch (Exception e) {
+        catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
@@ -146,18 +146,18 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @throws SQLException An error occurred
      */
     @Override
-    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
         if (null == _pstmtPool) {
             throw new SQLException(
                     "Statement pool is null - closed or invalid PoolingConnection.");
         }
         try {
             return _pstmtPool.borrowObject(createKey(sql,resultSetType,resultSetConcurrency));
-        } catch(NoSuchElementException e) {
+        } catch(final NoSuchElementException e) {
             throw new SQLException("MaxOpenPreparedStatements limit reached", e);
-        } catch(RuntimeException e) {
+        } catch(final RuntimeException e) {
             throw e;
-        } catch(Exception e) {
+        } catch(final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
@@ -169,14 +169,14 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @throws SQLException An error occurred
      */
     @Override
-    public CallableStatement prepareCall(String sql) throws SQLException {
+    public CallableStatement prepareCall(final String sql) throws SQLException {
         try {
             return (CallableStatement) _pstmtPool.borrowObject(createKey(sql, StatementType.CALLABLE_STATEMENT));
-        } catch (NoSuchElementException e) {
+        } catch (final NoSuchElementException e) {
             throw new SQLException("MaxOpenCallableStatements limit reached", e);
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow callableStatement from pool failed", e);
         }
     }
@@ -190,15 +190,15 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @throws SQLException An error occurred
      */
     @Override
-    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
+    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
         try {
             return (CallableStatement) _pstmtPool.borrowObject(createKey(sql, resultSetType,
                             resultSetConcurrency, StatementType.CALLABLE_STATEMENT));
-        } catch (NoSuchElementException e) {
+        } catch (final NoSuchElementException e) {
             throw new SQLException("MaxOpenCallableStatements limit reached", e);
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow callableStatement from pool failed", e);
         }
     }
@@ -224,11 +224,11 @@ public class PoolingConnection extends DelegatingConnection<Connection>
 //        return super.prepareStatement(sql, columnNames);
 //    }
 
-    protected PStmtKey createKey(String sql, int autoGeneratedKeys) {
+    protected PStmtKey createKey(final String sql, final int autoGeneratedKeys) {
         String catalog = null;
         try {
             catalog = getCatalog();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             // Ignored
         }
         return new PStmtKey(normalizeSQL(sql), catalog, autoGeneratedKeys);
@@ -241,11 +241,11 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @param resultSetConcurrency result set concurrency
      * @return the key
      */
-    protected PStmtKey createKey(String sql, int resultSetType, int resultSetConcurrency) {
+    protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency) {
         String catalog = null;
         try {
             catalog = getCatalog();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             // Ignored
         }
         return new PStmtKey(normalizeSQL(sql), catalog, resultSetType, resultSetConcurrency);
@@ -259,11 +259,11 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @param stmtType statement type
      * @return the key
      */
-    protected PStmtKey createKey(String sql, int resultSetType, int resultSetConcurrency, StatementType stmtType) {
+    protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency, final StatementType stmtType) {
         String catalog = null;
         try {
             catalog = getCatalog();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             // Ignored
         }
         return new PStmtKey(normalizeSQL(sql), catalog, resultSetType, resultSetConcurrency, stmtType);
@@ -274,11 +274,11 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @param sql the sql string used to define the statement
      * @return the key
      */
-    protected PStmtKey createKey(String sql) {
+    protected PStmtKey createKey(final String sql) {
         String catalog = null;
         try {
             catalog = getCatalog();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             // Ignored
         }
         return new PStmtKey(normalizeSQL(sql), catalog);
@@ -290,11 +290,11 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @param stmtType statement type
      * @return the key
      */
-    protected PStmtKey createKey(String sql, StatementType stmtType) {
+    protected PStmtKey createKey(final String sql, final StatementType stmtType) {
         String catalog = null;
         try {
             catalog = getCatalog();
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             // Ignored
         }
         return new PStmtKey(normalizeSQL(sql), catalog, stmtType, null);
@@ -306,7 +306,7 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @param sql The SQL statement
      * @return the trimmed SQL statement
      */
-    protected String normalizeSQL(String sql) {
+    protected String normalizeSQL(final String sql) {
         return sql.trim();
     }
 
@@ -322,7 +322,7 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @see #createKey(String, int, int, StatementType)
      */
     @Override
-    public PooledObject<DelegatingPreparedStatement> makeObject(PStmtKey key)
+    public PooledObject<DelegatingPreparedStatement> makeObject(final PStmtKey key)
             throws Exception {
         if(null == key) {
             throw new IllegalArgumentException("Prepared statement key is null or invalid.");
@@ -330,6 +330,7 @@ public class PoolingConnection extends DelegatingConnection<Connection>
         if (null == key.getResultSetType() && null == key.getResultSetConcurrency() && null == key.getAutoGeneratedKeys()) {
             if (key.getStmtType() == StatementType.PREPARED_STATEMENT ) {
                 @SuppressWarnings({"rawtypes", "unchecked"}) // Unable to find way to avoid this
+                final
                 PoolablePreparedStatement pps = new PoolablePreparedStatement(
                         getDelegate().prepareStatement(key.getSql()), key, _pstmtPool, this);
                 return new DefaultPooledObject<>(pps);
@@ -338,12 +339,14 @@ public class PoolingConnection extends DelegatingConnection<Connection>
                     new PoolableCallableStatement(getDelegate().prepareCall( key.getSql()), key, _pstmtPool, this));
         } else if (null == key.getResultSetType() && null == key.getResultSetConcurrency()){
             @SuppressWarnings({"rawtypes", "unchecked"}) // Unable to find way to avoid this
+            final
             PoolablePreparedStatement pps = new PoolablePreparedStatement(
                     getDelegate().prepareStatement(key.getSql(), key.getAutoGeneratedKeys().intValue()), key, _pstmtPool, this);
             return new DefaultPooledObject<>(pps);
         } else { // Both _resultSetType and _resultSetConcurrency are non-null here (both or neither are set by constructors)
             if(key.getStmtType() == StatementType.PREPARED_STATEMENT) {
                 @SuppressWarnings({"rawtypes", "unchecked"}) // Unable to find way to avoid this
+                final
                 PoolablePreparedStatement pps = new PoolablePreparedStatement(getDelegate().prepareStatement(
                         key.getSql(), key.getResultSetType().intValue(),key.getResultSetConcurrency().intValue()), key, _pstmtPool, this);
                 return new DefaultPooledObject<>(pps);
@@ -364,8 +367,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @throws Exception An error occurred
      */
     @Override
-    public void destroyObject(PStmtKey key,
-            PooledObject<DelegatingPreparedStatement> p)
+    public void destroyObject(final PStmtKey key,
+            final PooledObject<DelegatingPreparedStatement> p)
             throws Exception {
         p.getObject().getInnermostDelegate().close();
     }
@@ -379,8 +382,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @return {@code true}
      */
     @Override
-    public boolean validateObject(PStmtKey key,
-            PooledObject<DelegatingPreparedStatement> p) {
+    public boolean validateObject(final PStmtKey key,
+            final PooledObject<DelegatingPreparedStatement> p) {
         return true;
     }
 
@@ -393,8 +396,8 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @throws Exception An error occurred
      */
     @Override
-    public void activateObject(PStmtKey key,
-            PooledObject<DelegatingPreparedStatement> p) throws Exception {
+    public void activateObject(final PStmtKey key,
+            final PooledObject<DelegatingPreparedStatement> p) throws Exception {
         p.getObject().activate();
     }
 
@@ -408,9 +411,9 @@ public class PoolingConnection extends DelegatingConnection<Connection>
      * @throws Exception An error occurred
      */
     @Override
-    public void passivateObject(PStmtKey key,
-            PooledObject<DelegatingPreparedStatement> p) throws Exception {
-        DelegatingPreparedStatement dps = p.getObject();
+    public void passivateObject(final PStmtKey key,
+            final PooledObject<DelegatingPreparedStatement> p) throws Exception {
+        final DelegatingPreparedStatement dps = p.getObject();
         dps.clearParameters();
         dps.passivate();
     }

==================================================
PoolingDriver.java
index 76c472a556..32ddccd0a4 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingDataSource.java
@@ -49,20 +49,21 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
     /** Controls access to the underlying connection */
     private boolean accessToUnderlyingConnectionAllowed = false;
 
-    public PoolingDataSource(ObjectPool<C> pool) {
+    public PoolingDataSource(final ObjectPool<C> pool) {
         if (null == pool) {
             throw new NullPointerException("Pool must not be null.");
         }
         _pool = pool;
         // Verify that _pool's factory refers back to it.  If not, log a warning and try to fix.
         if (_pool instanceof GenericObjectPool<?>) {
-            PoolableConnectionFactory pcf = (PoolableConnectionFactory) ((GenericObjectPool<?>) _pool).getFactory();
+            final PoolableConnectionFactory pcf = (PoolableConnectionFactory) ((GenericObjectPool<?>) _pool).getFactory();
             if (pcf == null) {
                 throw new NullPointerException("PoolableConnectionFactory must not be null.");
             }
             if (pcf.getPool() != _pool) {
                 log.warn(Utils.getMessage("poolingDataSource.factoryConfig"));
                 @SuppressWarnings("unchecked") // PCF must have a pool of PCs
+                final
                 ObjectPool<PoolableConnection> p = (ObjectPool<PoolableConnection>) _pool;
                 pcf.setPool(p);
             }
@@ -77,9 +78,9 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
     public void close() throws Exception {
         try {
             _pool.close();
-        } catch(RuntimeException rte) {
+        } catch(final RuntimeException rte) {
             throw new RuntimeException(Utils.getMessage("pool.close.fail"), rte);
-        } catch(Exception e) {
+        } catch(final Exception e) {
             throw new SQLException(Utils.getMessage("pool.close.fail"), e);
         }
     }
@@ -100,18 +101,18 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
      *
      * @param allow Access to the underlying connection is granted when true.
      */
-    public void setAccessToUnderlyingConnectionAllowed(boolean allow) {
+    public void setAccessToUnderlyingConnectionAllowed(final boolean allow) {
         this.accessToUnderlyingConnectionAllowed = allow;
     }
 
     /* JDBC_4_ANT_KEY_BEGIN */
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         return false;
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         throw new SQLException("PoolingDataSource is not a wrapper.");
     }
     /* JDBC_4_ANT_KEY_END */
@@ -130,18 +131,18 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
     @Override
     public Connection getConnection() throws SQLException {
         try {
-            C conn = _pool.borrowObject();
+            final C conn = _pool.borrowObject();
             if (conn == null) {
                 return null;
             }
             return new PoolGuardConnectionWrapper<>(conn);
-        } catch(SQLException e) {
+        } catch(final SQLException e) {
             throw e;
-        } catch(NoSuchElementException e) {
+        } catch(final NoSuchElementException e) {
             throw new SQLException("Cannot get a connection, pool error " + e.getMessage(), e);
-        } catch(RuntimeException e) {
+        } catch(final RuntimeException e) {
             throw e;
-        } catch(Exception e) {
+        } catch(final Exception e) {
             throw new SQLException("Cannot get a connection, general error", e);
         }
     }
@@ -151,7 +152,7 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
      * @throws UnsupportedOperationException This is unsupported
      */
     @Override
-    public Connection getConnection(String uname, String passwd) throws SQLException {
+    public Connection getConnection(final String uname, final String passwd) throws SQLException {
         throw new UnsupportedOperationException();
     }
 
@@ -181,7 +182,7 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
      *   implementation does not support this feature.
      */
     @Override
-    public void setLoginTimeout(int seconds) {
+    public void setLoginTimeout(final int seconds) {
         throw new UnsupportedOperationException("Login timeout is not supported.");
     }
 
@@ -190,7 +191,7 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
      * @see DataSource#setLogWriter
      */
     @Override
-    public void setLogWriter(PrintWriter out) {
+    public void setLogWriter(final PrintWriter out) {
         _logWriter = out;
     }
 
@@ -211,7 +212,7 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
     private class PoolGuardConnectionWrapper<D extends Connection>
             extends DelegatingConnection<D> {
 
-        PoolGuardConnectionWrapper(D delegate) {
+        PoolGuardConnectionWrapper(final D delegate) {
             super(delegate);
         }
 

==================================================
SwallowedExceptionLogger.java
index da0138978a..5352ae1226 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingDriver.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingDriver.java
@@ -47,7 +47,7 @@ public class PoolingDriver implements Driver {
     static {
         try {
             DriverManager.registerDriver(new PoolingDriver());
-        } catch(Exception e) {
+        } catch(final Exception e) {
         }
     }
 
@@ -70,7 +70,7 @@ public class PoolingDriver implements Driver {
      * For unit testing purposes.
      * @param accessToUnderlyingConnectionAllowed The new flag
      */
-    protected PoolingDriver(boolean accessToUnderlyingConnectionAllowed) {
+    protected PoolingDriver(final boolean accessToUnderlyingConnectionAllowed) {
         this.accessToUnderlyingConnectionAllowed = accessToUnderlyingConnectionAllowed;
     }
 
@@ -85,66 +85,66 @@ public class PoolingDriver implements Driver {
         return accessToUnderlyingConnectionAllowed;
     }
 
-    public synchronized ObjectPool<? extends Connection> getConnectionPool(String name)
+    public synchronized ObjectPool<? extends Connection> getConnectionPool(final String name)
             throws SQLException {
-        ObjectPool<? extends Connection> pool = pools.get(name);
+        final ObjectPool<? extends Connection> pool = pools.get(name);
         if (null == pool) {
             throw new SQLException("Pool not registered.");
         }
         return pool;
     }
 
-    public synchronized void registerPool(String name,
-            ObjectPool<? extends Connection> pool) {
+    public synchronized void registerPool(final String name,
+            final ObjectPool<? extends Connection> pool) {
         pools.put(name,pool);
     }
 
-    public synchronized void closePool(String name) throws SQLException {
-        ObjectPool<? extends Connection> pool = pools.get(name);
+    public synchronized void closePool(final String name) throws SQLException {
+        final ObjectPool<? extends Connection> pool = pools.get(name);
         if (pool != null) {
             pools.remove(name);
             try {
                 pool.close();
             }
-            catch (Exception e) {
+            catch (final Exception e) {
                 throw new SQLException("Error closing pool " + name, e);
             }
         }
     }
 
     public synchronized String[] getPoolNames(){
-        Set<String> names = pools.keySet();
+        final Set<String> names = pools.keySet();
         return names.toArray(new String[names.size()]);
     }
 
     @Override
-    public boolean acceptsURL(String url) throws SQLException {
+    public boolean acceptsURL(final String url) throws SQLException {
         try {
             return url.startsWith(URL_PREFIX);
-        } catch(NullPointerException e) {
+        } catch(final NullPointerException e) {
             return false;
         }
     }
 
     @Override
-    public Connection connect(String url, Properties info) throws SQLException {
+    public Connection connect(final String url, final Properties info) throws SQLException {
         if(acceptsURL(url)) {
-            ObjectPool<? extends Connection> pool =
+            final ObjectPool<? extends Connection> pool =
                 getConnectionPool(url.substring(URL_PREFIX_LEN));
 
             try {
-                Connection conn = pool.borrowObject();
+                final Connection conn = pool.borrowObject();
                 if (conn == null) {
                     return null;
                 }
                 return new PoolGuardConnectionWrapper(pool, conn);
-            } catch(SQLException e) {
+            } catch(final SQLException e) {
                 throw e;
-            } catch(NoSuchElementException e) {
+            } catch(final NoSuchElementException e) {
                 throw new SQLException("Cannot get a connection, pool error: " + e.getMessage(), e);
-            } catch(RuntimeException e) {
+            } catch(final RuntimeException e) {
                 throw e;
-            } catch(Exception e) {
+            } catch(final Exception e) {
                 throw new SQLException("Cannot get a connection, general error: " + e.getMessage(), e);
             }
         }
@@ -164,15 +164,16 @@ public class PoolingDriver implements Driver {
      * <code>PoolGuardConnectionWrapper</code> or an error occurs invalidating
      * the connection
      */
-    public void invalidateConnection(Connection conn) throws SQLException {
+    public void invalidateConnection(final Connection conn) throws SQLException {
         if (conn instanceof PoolGuardConnectionWrapper) { // normal case
-            PoolGuardConnectionWrapper pgconn = (PoolGuardConnectionWrapper) conn;
+            final PoolGuardConnectionWrapper pgconn = (PoolGuardConnectionWrapper) conn;
             @SuppressWarnings("unchecked")
+            final
             ObjectPool<Connection> pool = (ObjectPool<Connection>) pgconn.pool;
             try {
                 pool.invalidateObject(pgconn.getDelegateInternal());
             }
-            catch (Exception e) {
+            catch (final Exception e) {
             }
         }
         else {
@@ -196,7 +197,7 @@ public class PoolingDriver implements Driver {
     }
 
     @Override
-    public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) {
+    public DriverPropertyInfo[] getPropertyInfo(final String url, final Properties info) {
         return new DriverPropertyInfo[0];
     }
 
@@ -217,8 +218,8 @@ public class PoolingDriver implements Driver {
 
         private final ObjectPool<? extends Connection> pool;
 
-        PoolGuardConnectionWrapper(ObjectPool<? extends Connection> pool,
-                Connection delegate) {
+        PoolGuardConnectionWrapper(final ObjectPool<? extends Connection> pool,
+                final Connection delegate) {
             super(delegate);
             this.pool = pool;
         }

==================================================
Utils.java
index 8928950758..99f3ba72ba 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/SwallowedExceptionLogger.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/SwallowedExceptionLogger.java
@@ -34,7 +34,7 @@ public class SwallowedExceptionLogger implements SwallowedExceptionListener{
      *
      * @param log logger
      */
-    public SwallowedExceptionLogger(Log log) {
+    public SwallowedExceptionLogger(final Log log) {
         this(log, true);
     }
 
@@ -45,13 +45,13 @@ public class SwallowedExceptionLogger implements SwallowedExceptionListener{
      * @param log logger
      * @param logExpiredConnections false suppresses logging of expired connection events
      */
-    public SwallowedExceptionLogger(Log log, boolean logExpiredConnections) {
+    public SwallowedExceptionLogger(final Log log, final boolean logExpiredConnections) {
         this.log = log;
         this.logExpiredConnections = logExpiredConnections;
     }
 
     @Override
-    public void onSwallowException(Exception e) {
+    public void onSwallowException(final Exception e) {
         if (logExpiredConnections || !(e instanceof LifetimeExceededException)) {
             log.warn(Utils.getMessage(
                     "swallowedExceptionLogger.onSwallowedException"), e);

==================================================
ConnectionImpl.java
index adc0df4071..90d7a0a4b3 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/Utils.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/Utils.java
@@ -73,11 +73,11 @@ public final class Utils {
      *
      * @param rset a ResultSet, may be {@code null}
      */
-    public static void closeQuietly(ResultSet rset) {
+    public static void closeQuietly(final ResultSet rset) {
         if (rset != null) {
             try {
                 rset.close();
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 // ignored
             }
         }
@@ -88,11 +88,11 @@ public final class Utils {
      *
      * @param conn a Connection, may be {@code null}
      */
-    public static void closeQuietly(Connection conn) {
+    public static void closeQuietly(final Connection conn) {
         if (conn != null) {
             try {
                 conn.close();
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 // ignored
             }
         }
@@ -103,11 +103,11 @@ public final class Utils {
      *
      * @param stmt a Statement, may be {@code null}
      */
-    public static void closeQuietly(Statement stmt) {
+    public static void closeQuietly(final Statement stmt) {
         if (stmt != null) {
             try {
                 stmt.close();
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 // ignored
             }
         }
@@ -119,7 +119,7 @@ public final class Utils {
      * @param key The message key
      * @return the message
      */
-    public static String getMessage(String key) {
+    public static String getMessage(final String key) {
         return getMessage(key, (Object[]) null);
     }
 
@@ -131,12 +131,12 @@ public final class Utils {
      * @param args The arguments
      * @return the message
      */
-    public static String getMessage(String key, Object... args) {
-        String msg =  messages.getString(key);
+    public static String getMessage(final String key, final Object... args) {
+        final String msg =  messages.getString(key);
         if (args == null || args.length == 0) {
             return msg;
         }
-        MessageFormat mf = new MessageFormat(msg);
+        final MessageFormat mf = new MessageFormat(msg);
         return mf.format(args, new StringBuffer(), null).toString();
     }
 }

==================================================
DriverAdapterCPDS.java
index 48f92f737b..ae05e419e6 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/ConnectionImpl.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/ConnectionImpl.java
@@ -27,9 +27,9 @@ import org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement;
 /**
  * This class is the <code>Connection</code> that will be returned
  * from <code>PooledConnectionImpl.getConnection()</code>.
- * Most methods are wrappers around the jdbc 1.x <code>Connection</code>.
+ * Most methods are wrappers around the JDBC 1.x <code>Connection</code>.
  * A few exceptions include preparedStatement and close.
- * In accordance with the jdbc specification this Connection cannot
+ * In accordance with the JDBC specification this Connection cannot
  * be used after closed() is called.  Any further usage will result in an
  * SQLException.
  *
@@ -53,9 +53,9 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
      * @param connection The JDBC 1.x Connection to wrap.
      * @param accessToUnderlyingConnectionAllowed if true, then access is allowed to the underlying connection
      */
-    ConnectionImpl(PooledConnectionImpl pooledConnection,
-            Connection connection,
-            boolean accessToUnderlyingConnectionAllowed) {
+    ConnectionImpl(final PooledConnectionImpl pooledConnection,
+            final Connection connection,
+            final boolean accessToUnderlyingConnectionAllowed) {
         super(connection);
         this.pooledConnection = pooledConnection;
         this.accessToUnderlyingConnectionAllowed =
@@ -65,7 +65,7 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
     /**
      * Marks the Connection as closed, and notifies the pool that the
      * pooled connection is available.
-     * In accordance with the jdbc specification this Connection cannot
+     * In accordance with the JDBC specification this Connection cannot
      * be used after closed() is called.  Any further usage will result in an
      * SQLException.
      *
@@ -86,7 +86,7 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
     /**
      * If pooling of <code>PreparedStatement</code>s is turned on in the
      * {@link DriverAdapterCPDS}, a pooled object may be returned, otherwise
-     * delegate to the wrapped jdbc 1.x {@link java.sql.Connection}.
+     * delegate to the wrapped JDBC 1.x {@link java.sql.Connection}.
      *
      * @param sql SQL statement to be prepared
      * @return the prepared statement
@@ -94,13 +94,13 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
      * in the wrapped connection.
      */
     @Override
-    public PreparedStatement prepareStatement(String sql) throws SQLException {
+    public PreparedStatement prepareStatement(final String sql) throws SQLException {
         checkOpen();
         try {
             return new DelegatingPreparedStatement
                 (this, pooledConnection.prepareStatement(sql));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e); // Does not return
             return null;
         }
@@ -109,14 +109,14 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
     /**
      * If pooling of <code>PreparedStatement</code>s is turned on in the
      * {@link DriverAdapterCPDS}, a pooled object may be returned, otherwise
-     * delegate to the wrapped jdbc 1.x {@link java.sql.Connection}.
+     * delegate to the wrapped JDBC 1.x {@link java.sql.Connection}.
      *
      * @exception SQLException if this connection is closed or an error occurs
      * in the wrapped connection.
      */
     @Override
-    public PreparedStatement prepareStatement(String sql, int resultSetType,
-                                              int resultSetConcurrency)
+    public PreparedStatement prepareStatement(final String sql, final int resultSetType,
+                                              final int resultSetConcurrency)
             throws SQLException {
         checkOpen();
         try {
@@ -124,16 +124,16 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
                 (this, pooledConnection.prepareStatement
                     (sql,resultSetType,resultSetConcurrency));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int resultSetType,
-                                              int resultSetConcurrency,
-                                              int resultSetHoldability)
+    public PreparedStatement prepareStatement(final String sql, final int resultSetType,
+                                              final int resultSetConcurrency,
+                                              final int resultSetHoldability)
             throws SQLException {
         checkOpen();
         try {
@@ -141,49 +141,49 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
                     pooledConnection.prepareStatement(sql, resultSetType,
                             resultSetConcurrency, resultSetHoldability));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
+    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys)
             throws SQLException {
         checkOpen();
         try {
             return new DelegatingPreparedStatement(this,
                     pooledConnection.prepareStatement(sql, autoGeneratedKeys));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, int columnIndexes[])
+    public PreparedStatement prepareStatement(final String sql, final int columnIndexes[])
             throws SQLException {
         checkOpen();
         try {
             return new DelegatingPreparedStatement(this,
                     pooledConnection.prepareStatement(sql, columnIndexes));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }
     }
 
     @Override
-    public PreparedStatement prepareStatement(String sql, String columnNames[])
+    public PreparedStatement prepareStatement(final String sql, final String columnNames[])
             throws SQLException {
         checkOpen();
         try {
             return new DelegatingPreparedStatement(this,
                     pooledConnection.prepareStatement(sql, columnNames));
         }
-        catch (SQLException e) {
+        catch (final SQLException e) {
             handleException(e);
             return null;
         }

==================================================
PStmtKeyCPDS.java
index 0acaec249a..4213010495 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/DriverAdapterCPDS.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/DriverAdapterCPDS.java
@@ -45,7 +45,7 @@ import org.apache.tomcat.dbcp.pool2.impl.GenericKeyedObjectPoolConfig;
 
 /**
  * <p>
- * An adapter for jdbc drivers that do not include an implementation
+ * An adapter for JDBC drivers that do not include an implementation
  * of {@link javax.sql.ConnectionPoolDataSource}, but still include a
  * {@link java.sql.DriverManager} implementation.
  * <code>ConnectionPoolDataSource</code>s are not used within general
@@ -163,7 +163,7 @@ public class DriverAdapterCPDS
      * @param pass password to be used fur the connection
      */
     @Override
-    public PooledConnection getPooledConnection(String username, String pass)
+    public PooledConnection getPooledConnection(final String username, final String pass)
             throws SQLException {
         getConnectionCalled = true;
         PooledConnectionImpl pci = null;
@@ -181,7 +181,7 @@ public class DriverAdapterCPDS
             }
             pci.setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());
         }
-        catch (ClassCircularityError e)
+        catch (final ClassCircularityError e)
         {
             if (connectionProperties != null) {
                 pci = new PooledConnectionImpl(DriverManager.getConnection(
@@ -194,7 +194,7 @@ public class DriverAdapterCPDS
         }
         KeyedObjectPool<PStmtKeyCPDS, PoolablePreparedStatement<PStmtKeyCPDS>> stmtPool = null;
         if (isPoolPreparedStatements()) {
-            GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
+            final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
             config.setMaxTotalPerKey(Integer.MAX_VALUE);
             config.setBlockWhenExhausted(false);
             config.setMaxWaitMillis(0);
@@ -237,9 +237,9 @@ public class DriverAdapterCPDS
     @Override
     public Reference getReference() throws NamingException {
         // this class implements its own factory
-        String factory = getClass().getName();
+        final String factory = getClass().getName();
 
-        Reference ref = new Reference(getClass().getName(), factory, null);
+        final Reference ref = new Reference(getClass().getName(), factory, null);
 
         ref.add(new StringRefAddr("description", getDescription()));
         ref.add(new StringRefAddr("driver", getDriver()));
@@ -273,14 +273,14 @@ public class DriverAdapterCPDS
      * implements ObjectFactory to create an instance of this class
      */
     @Override
-    public Object getObjectInstance(Object refObj, Name name,
-                                    Context context, Hashtable<?,?> env)
+    public Object getObjectInstance(final Object refObj, final Name name,
+                                    final Context context, final Hashtable<?,?> env)
             throws Exception {
         // The spec says to return null if we can't create an instance
         // of the reference
         DriverAdapterCPDS cpds = null;
         if (refObj instanceof Reference) {
-            Reference ref = (Reference)refObj;
+            final Reference ref = (Reference)refObj;
             if (ref.getClassName().equals(getClass().getName())) {
                 RefAddr ra = ref.get("description");
                 if (ra != null && ra.getContent() != null) {
@@ -363,7 +363,7 @@ public class DriverAdapterCPDS
     // Properties
 
     /**
-     * Get the connection properties passed to the JDBC driver.
+     * Gets the connection properties passed to the JDBC driver.
      *
      * @return the JDBC connection properties used when creating connections.
      */
@@ -372,7 +372,7 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * <p>Set the connection properties passed to the JDBC driver.</p>
+     * <p>Sets the connection properties passed to the JDBC driver.</p>
      *
      * <p>If <code>props</code> contains "user" and/or "password"
      * properties, the corresponding instance properties are set. If these
@@ -386,7 +386,7 @@ public class DriverAdapterCPDS
      * @param props Connection properties to use when creating new connections.
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setConnectionProperties(Properties props) {
+    public void setConnectionProperties(final Properties props) {
         assertInitializationAllowed();
         connectionProperties = props;
         if (connectionProperties.containsKey("user")) {
@@ -398,7 +398,7 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Get the value of description.  This property is here for use by
+     * Gets the value of description.  This property is here for use by
      * the code which will deploy this datasource.  It is not used
      * internally.
      *
@@ -410,18 +410,18 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Set the value of description.  This property is here for use by
+     * Sets the value of description.  This property is here for use by
      * the code which will deploy this datasource.  It is not used
      * internally.
      *
      * @param v  Value to assign to description.
      */
-    public void setDescription(String  v) {
+    public void setDescription(final String  v) {
         this.description = v;
     }
 
     /**
-     * Get the value of password for the default user.
+     * Gets the value of password for the default user.
      * @return value of password.
      */
     public String getPassword() {
@@ -429,11 +429,11 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Set the value of password for the default user.
+     * Sets the value of password for the default user.
      * @param v  Value to assign to password.
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setPassword(String v) {
+    public void setPassword(final String v) {
         assertInitializationAllowed();
         this.password = v;
         if (connectionProperties != null) {
@@ -442,7 +442,7 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Get the value of url used to locate the database for this datasource.
+     * Gets the value of url used to locate the database for this datasource.
      * @return value of url.
      */
     public String getUrl() {
@@ -450,17 +450,17 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Set the value of url used to locate the database for this datasource.
+     * Sets the value of URL string used to locate the database for this datasource.
      * @param v  Value to assign to url.
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
     */
-    public void setUrl(String v) {
+    public void setUrl(final String v) {
         assertInitializationAllowed();
         this.url = v;
     }
 
     /**
-     * Get the value of default user (login or username).
+     * Gets the value of default user (login or username).
      * @return value of user.
      */
     public String getUser() {
@@ -468,11 +468,11 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Set the value of default user (login or username).
+     * Sets the value of default user (login or username).
      * @param v  Value to assign to user.
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setUser(String v) {
+    public void setUser(final String v) {
         assertInitializationAllowed();
         this.user = v;
         if (connectionProperties != null) {
@@ -481,7 +481,7 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Get the driver classname.
+     * Gets the driver classname.
      * @return value of driver.
      */
     public String getDriver() {
@@ -489,13 +489,13 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Set the driver classname.  Setting the driver classname cause the
+     * Sets the driver classname.  Setting the driver classname cause the
      * driver to be registered with the DriverManager.
      * @param v  Value to assign to driver.
      * @throws ClassNotFoundException Driver class was not found
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setDriver(String v) throws ClassNotFoundException {
+    public void setDriver(final String v) throws ClassNotFoundException {
         assertInitializationAllowed();
         this.driver = v;
         // make sure driver is registered
@@ -512,7 +512,7 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * Get the log writer for this data source. NOT USED.
+     * Gets the log writer for this data source. NOT USED.
      */
     @Override
     public PrintWriter getLogWriter() {
@@ -524,15 +524,15 @@ public class DriverAdapterCPDS
      * while attempting to connect to a database. NOT USED.
      */
     @Override
-    public void setLoginTimeout(int seconds) {
+    public void setLoginTimeout(final int seconds) {
         loginTimeout = seconds;
     }
 
     /**
-     * Set the log writer for this data source. NOT USED.
+     * Sets the log writer for this data source. NOT USED.
      */
     @Override
-    public void setLogWriter(PrintWriter out) {
+    public void setLogWriter(final PrintWriter out) {
         logWriter = out;
     }
 
@@ -554,13 +554,13 @@ public class DriverAdapterCPDS
      * @param v  true to pool statements.
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setPoolPreparedStatements(boolean v) {
+    public void setPoolPreparedStatements(final boolean v) {
         assertInitializationAllowed();
         this.poolPreparedStatements = v;
     }
 
     /**
-     * The maximum number of statements that can remain idle in the
+     * Gets the maximum number of statements that can remain idle in the
      * pool, without extra ones being released, or negative for no limit.
      * @return the value of maxIdle
      */
@@ -569,19 +569,19 @@ public class DriverAdapterCPDS
     }
 
     /**
-     * The maximum number of statements that can remain idle in the
+     * Gets the maximum number of statements that can remain idle in the
      * pool, without extra ones being released, or negative for no limit.
      *
      * @param maxIdle The maximum number of statements that can remain idle
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setMaxIdle(int maxIdle) {
+    public void setMaxIdle(final int maxIdle) {
         assertInitializationAllowed();
         this.maxIdle = maxIdle;
     }
 
     /**
-     * Returns the number of milliseconds to sleep between runs of the
+     * Gets the number of milliseconds to sleep between runs of the
      * idle object evictor thread.
      * When non-positive, no idle object evictor thread will be
      * run.
@@ -602,13 +602,13 @@ public class DriverAdapterCPDS
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
     public void setTimeBetweenEvictionRunsMillis(
-            long timeBetweenEvictionRunsMillis) {
+            final long timeBetweenEvictionRunsMillis) {
         assertInitializationAllowed();
         _timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
     }
 
     /**
-     * Returns the number of statements to examine during each run of the
+     * Gets the number of statements to examine during each run of the
      * idle object evictor thread (if any).
      *
      * @see #setNumTestsPerEvictionRun(int)
@@ -632,13 +632,13 @@ public class DriverAdapterCPDS
      * @see #setTimeBetweenEvictionRunsMillis(long)
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
+    public void setNumTestsPerEvictionRun(final int numTestsPerEvictionRun) {
         assertInitializationAllowed();
         _numTestsPerEvictionRun = numTestsPerEvictionRun;
     }
 
     /**
-     * Returns the minimum amount of time a statement may sit idle in the pool
+     * Gets the minimum amount of time a statement may sit idle in the pool
      * before it is eligible for eviction by the idle object evictor
      * (if any).
      *
@@ -661,7 +661,7 @@ public class DriverAdapterCPDS
      * @see #setTimeBetweenEvictionRunsMillis(long)
      * @throws IllegalStateException if {@link #getPooledConnection()} has been called
      */
-    public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis) {
+    public void setMinEvictableIdleTimeMillis(final int minEvictableIdleTimeMillis) {
         assertInitializationAllowed();
         _minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
     }
@@ -683,12 +683,12 @@ public class DriverAdapterCPDS
      *
      * @param allow Access to the underlying connection is granted when true.
      */
-    public synchronized void setAccessToUnderlyingConnectionAllowed(boolean allow) {
+    public synchronized void setAccessToUnderlyingConnectionAllowed(final boolean allow) {
         this.accessToUnderlyingConnectionAllowed = allow;
     }
 
     /**
-     * Returns the maximum number of prepared statements.
+     * Gets the maximum number of prepared statements.
      *
      * @return maxPrepartedStatements value
      */
@@ -702,7 +702,7 @@ public class DriverAdapterCPDS
      * @param maxPreparedStatements the new maximum number of prepared
      * statements
      */
-    public void setMaxPreparedStatements(int maxPreparedStatements)
+    public void setMaxPreparedStatements(final int maxPreparedStatements)
     {
         _maxPreparedStatements = maxPreparedStatements;
     }

==================================================
PooledConnectionImpl.java
index 03d6c63337..a8c5534caf 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PStmtKeyCPDS.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PStmtKeyCPDS.java
@@ -29,43 +29,43 @@ public class PStmtKeyCPDS extends PStmtKey {
     private final int _columnIndexes[];
     private final String _columnNames[];
 
-    public PStmtKeyCPDS(String sql) {
+    public PStmtKeyCPDS(final String sql) {
         super(sql);
         _resultSetHoldability = null;
         _columnIndexes = null;
         _columnNames = null;
     }
 
-    public PStmtKeyCPDS(String sql, int autoGeneratedKeys) {
+    public PStmtKeyCPDS(final String sql, final int autoGeneratedKeys) {
         super(sql, null, autoGeneratedKeys);
         _resultSetHoldability = null;
         _columnIndexes = null;
         _columnNames = null;
     }
 
-    public PStmtKeyCPDS(String sql, int resultSetType, int resultSetConcurrency) {
+    public PStmtKeyCPDS(final String sql, final int resultSetType, final int resultSetConcurrency) {
         super(sql, resultSetType, resultSetConcurrency);
         _resultSetHoldability = null;
         _columnIndexes = null;
         _columnNames = null;
     }
 
-    public PStmtKeyCPDS(String sql, int resultSetType, int resultSetConcurrency,
-            int resultSetHoldability) {
+    public PStmtKeyCPDS(final String sql, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability) {
         super(sql, resultSetType, resultSetConcurrency);
         _resultSetHoldability = Integer.valueOf(resultSetHoldability);
         _columnIndexes = null;
         _columnNames = null;
     }
 
-    public PStmtKeyCPDS(String sql, int columnIndexes[]) {
+    public PStmtKeyCPDS(final String sql, final int columnIndexes[]) {
         super(sql);
         _columnIndexes = Arrays.copyOf(columnIndexes, columnIndexes.length);
         _resultSetHoldability = null;
         _columnNames = null;
     }
 
-    public PStmtKeyCPDS(String sql, String columnNames[]) {
+    public PStmtKeyCPDS(final String sql, final String columnNames[]) {
         super(sql);
         _columnNames = Arrays.copyOf(columnNames, columnNames.length);
         _resultSetHoldability = null;
@@ -74,7 +74,7 @@ public class PStmtKeyCPDS extends PStmtKey {
 
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
@@ -84,7 +84,7 @@ public class PStmtKeyCPDS extends PStmtKey {
         if (getClass() != obj.getClass()) {
             return false;
         }
-        PStmtKeyCPDS other = (PStmtKeyCPDS) obj;
+        final PStmtKeyCPDS other = (PStmtKeyCPDS) obj;
         if (!Arrays.equals(_columnIndexes, other._columnIndexes)) {
             return false;
         }
@@ -115,7 +115,7 @@ public class PStmtKeyCPDS extends PStmtKey {
 
     @Override
     public String toString() {
-        StringBuffer buf = new StringBuffer();
+        final StringBuffer buf = new StringBuffer();
         buf.append("PStmtKey: sql=");
         buf.append(getSql());
         buf.append(", catalog=");

==================================================
package-info.java
index 58d1faf6cd..7a87cc2bf2 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
@@ -41,8 +41,8 @@ import org.apache.tomcat.dbcp.pool2.impl.DefaultPooledObject;
  * @author John D. McNally
  * @since 2.0
  */
-class PooledConnectionImpl implements PooledConnection,
-        KeyedPooledObjectFactory<PStmtKeyCPDS,PoolablePreparedStatement<PStmtKeyCPDS>> {
+class PooledConnectionImpl
+        implements PooledConnection, KeyedPooledObjectFactory<PStmtKeyCPDS, PoolablePreparedStatement<PStmtKeyCPDS>> {
 
     private static final String CLOSED
             = "Attempted to use PooledConnection after closed() was called.";
@@ -90,7 +90,7 @@ class PooledConnectionImpl implements PooledConnection,
      * Wrap the real connection.
      * @param connection the connection to be wrapped
      */
-    PooledConnectionImpl(Connection connection) {
+    PooledConnectionImpl(final Connection connection) {
         this.connection = connection;
         if (connection instanceof DelegatingConnection) {
             this.delegatingConnection = (DelegatingConnection<?>) connection;
@@ -102,7 +102,7 @@ class PooledConnectionImpl implements PooledConnection,
     }
 
     public void setStatementPool(
-            KeyedObjectPool<PStmtKeyCPDS, PoolablePreparedStatement<PStmtKeyCPDS>> statementPool) {
+            final KeyedObjectPool<PStmtKeyCPDS, PoolablePreparedStatement<PStmtKeyCPDS>> statementPool) {
         pstmtPool = statementPool;
     }
 
@@ -110,7 +110,7 @@ class PooledConnectionImpl implements PooledConnection,
      * {@inheritDoc}
      */
     @Override
-    public void addConnectionEventListener(ConnectionEventListener listener) {
+    public void addConnectionEventListener(final ConnectionEventListener listener) {
         if (!eventListeners.contains(listener)) {
             eventListeners.add(listener);
         }
@@ -118,7 +118,7 @@ class PooledConnectionImpl implements PooledConnection,
 
     /* JDBC_4_ANT_KEY_BEGIN */
     @Override
-    public void addStatementEventListener(StatementEventListener listener) {
+    public void addStatementEventListener(final StatementEventListener listener) {
         if (!statementEventListeners.contains(listener)) {
             statementEventListeners.add(listener);
         }
@@ -144,9 +144,9 @@ class PooledConnectionImpl implements PooledConnection,
                     pstmtPool = null;
                 }
             }
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Cannot close connection (return to pool failed)", e);
         } finally {
             try {
@@ -194,13 +194,13 @@ class PooledConnectionImpl implements PooledConnection,
      */
     @Override
     public void removeConnectionEventListener(
-            ConnectionEventListener listener) {
+            final ConnectionEventListener listener) {
         eventListeners.remove(listener);
     }
 
     /* JDBC_4_ANT_KEY_BEGIN */
     @Override
-    public void removeStatementEventListener(StatementEventListener listener) {
+    public void removeStatementEventListener(final StatementEventListener listener) {
         statementEventListeners.remove(listener);
     }
     /* JDBC_4_ANT_KEY_END */
@@ -215,7 +215,7 @@ class PooledConnectionImpl implements PooledConnection,
         // an error will occur.
         try {
             connection.close();
-        } catch (Exception ignored) {
+        } catch (final Exception ignored) {
         }
 
         // make sure the last connection is marked as closed
@@ -229,9 +229,9 @@ class PooledConnectionImpl implements PooledConnection,
      * sends a connectionClosed event.
      */
     void notifyListeners() {
-        ConnectionEvent event = new ConnectionEvent(this);
-        Object[] listeners = eventListeners.toArray();
-        for (Object listener : listeners) {
+        final ConnectionEvent event = new ConnectionEvent(this);
+        final Object[] listeners = eventListeners.toArray();
+        for (final Object listener : listeners) {
             ((ConnectionEventListener) listener).connectionClosed(event);
         }
     }
@@ -244,15 +244,15 @@ class PooledConnectionImpl implements PooledConnection,
      * @param sql the SQL statement
      * @return a {@link PoolablePreparedStatement}
      */
-    PreparedStatement prepareStatement(String sql) throws SQLException {
+    PreparedStatement prepareStatement(final String sql) throws SQLException {
         if (pstmtPool == null) {
             return connection.prepareStatement(sql);
         }
         try {
             return pstmtPool.borrowObject(createKey(sql));
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
@@ -273,8 +273,8 @@ class PooledConnectionImpl implements PooledConnection,
      * @return a {@link PoolablePreparedStatement}
      * @see Connection#prepareStatement(String, int, int)
      */
-    PreparedStatement prepareStatement(String sql, int resultSetType,
-                                       int resultSetConcurrency)
+    PreparedStatement prepareStatement(final String sql, final int resultSetType,
+                                       final int resultSetConcurrency)
             throws SQLException {
         if (pstmtPool == null) {
             return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
@@ -282,9 +282,9 @@ class PooledConnectionImpl implements PooledConnection,
         try {
             return pstmtPool.borrowObject(
                     createKey(sql,resultSetType,resultSetConcurrency));
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
@@ -300,22 +300,22 @@ class PooledConnectionImpl implements PooledConnection,
      * @return a {@link PoolablePreparedStatement}
      * @see Connection#prepareStatement(String, int)
      */
-    PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
+    PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys)
             throws SQLException {
         if (pstmtPool == null) {
             return connection.prepareStatement(sql, autoGeneratedKeys);
         }
         try {
             return pstmtPool.borrowObject(createKey(sql,autoGeneratedKeys));
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
 
-    PreparedStatement prepareStatement(String sql, int resultSetType,
-            int resultSetConcurrency, int resultSetHoldability)
+    PreparedStatement prepareStatement(final String sql, final int resultSetType,
+            final int resultSetConcurrency, final int resultSetHoldability)
     throws SQLException {
         if (pstmtPool == null) {
             return connection.prepareStatement(sql, resultSetType,
@@ -324,37 +324,37 @@ class PooledConnectionImpl implements PooledConnection,
         try {
             return pstmtPool.borrowObject(createKey(sql, resultSetType,
                     resultSetConcurrency, resultSetHoldability));
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
 
-    PreparedStatement prepareStatement(String sql, int columnIndexes[])
+    PreparedStatement prepareStatement(final String sql, final int columnIndexes[])
     throws SQLException {
         if (pstmtPool == null) {
             return connection.prepareStatement(sql, columnIndexes);
         }
         try {
             return pstmtPool.borrowObject(createKey(sql, columnIndexes));
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
 
-    PreparedStatement prepareStatement(String sql, String columnNames[])
+    PreparedStatement prepareStatement(final String sql, final String columnNames[])
     throws SQLException {
         if (pstmtPool == null) {
             return connection.prepareStatement(sql, columnNames);
         }
         try {
             return pstmtPool.borrowObject(createKey(sql, columnNames));
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new SQLException("Borrow prepareStatement from pool failed", e);
         }
     }
@@ -362,15 +362,15 @@ class PooledConnectionImpl implements PooledConnection,
     /**
      * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
      */
-    protected PStmtKeyCPDS createKey(String sql, int autoGeneratedKeys) {
+    protected PStmtKeyCPDS createKey(final String sql, final int autoGeneratedKeys) {
         return new PStmtKeyCPDS(normalizeSQL(sql), autoGeneratedKeys);
     }
 
     /**
      * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
      */
-    protected PStmtKeyCPDS createKey(String sql, int resultSetType,
-            int resultSetConcurrency, int resultSetHoldability) {
+    protected PStmtKeyCPDS createKey(final String sql, final int resultSetType,
+            final int resultSetConcurrency, final int resultSetHoldability) {
         return new PStmtKeyCPDS(normalizeSQL(sql), resultSetType,
                 resultSetConcurrency, resultSetHoldability);
     }
@@ -378,22 +378,22 @@ class PooledConnectionImpl implements PooledConnection,
     /**
      * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
      */
-    protected PStmtKeyCPDS createKey(String sql, int columnIndexes[]) {
+    protected PStmtKeyCPDS createKey(final String sql, final int columnIndexes[]) {
         return new PStmtKeyCPDS(normalizeSQL(sql), columnIndexes);
     }
 
     /**
      * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
      */
-    protected PStmtKeyCPDS createKey(String sql, String columnNames[]) {
+    protected PStmtKeyCPDS createKey(final String sql, final String columnNames[]) {
         return new PStmtKeyCPDS(normalizeSQL(sql), columnNames);
     }
 
     /**
      * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
      */
-    protected PStmtKeyCPDS createKey(String sql, int resultSetType,
-                               int resultSetConcurrency) {
+    protected PStmtKeyCPDS createKey(final String sql, final int resultSetType,
+                               final int resultSetConcurrency) {
         return new PStmtKeyCPDS(normalizeSQL(sql), resultSetType,
                             resultSetConcurrency);
     }
@@ -401,7 +401,7 @@ class PooledConnectionImpl implements PooledConnection,
     /**
      * Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.
      */
-    protected PStmtKeyCPDS createKey(String sql) {
+    protected PStmtKeyCPDS createKey(final String sql) {
         return new PStmtKeyCPDS(normalizeSQL(sql));
     }
 
@@ -409,7 +409,7 @@ class PooledConnectionImpl implements PooledConnection,
      * Normalize the given SQL statement, producing a
      * canonical form that is semantically equivalent to the original.
      */
-    protected String normalizeSQL(String sql) {
+    protected String normalizeSQL(final String sql) {
         return sql.trim();
     }
 
@@ -419,7 +419,7 @@ class PooledConnectionImpl implements PooledConnection,
      * @param key the key for the {@link PreparedStatement} to be created
      */
     @Override
-    public PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> makeObject(PStmtKeyCPDS key) throws Exception {
+    public PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> makeObject(final PStmtKeyCPDS key) throws Exception {
         if (null == key) {
             throw new IllegalArgumentException();
         }
@@ -450,8 +450,8 @@ class PooledConnectionImpl implements PooledConnection,
      * @param p the wrapped {@link PreparedStatement} to be destroyed.
      */
     @Override
-    public void destroyObject(PStmtKeyCPDS key,
-            PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p)
+    public void destroyObject(final PStmtKeyCPDS key,
+            final PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p)
             throws Exception {
         p.getObject().getInnermostDelegate().close();
     }
@@ -464,8 +464,8 @@ class PooledConnectionImpl implements PooledConnection,
      * @return {@code true}
      */
     @Override
-    public boolean validateObject(PStmtKeyCPDS key,
-            PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p) {
+    public boolean validateObject(final PStmtKeyCPDS key,
+            final PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p) {
         return true;
     }
 
@@ -476,8 +476,8 @@ class PooledConnectionImpl implements PooledConnection,
      * @param p ignored
      */
     @Override
-    public void activateObject(PStmtKeyCPDS key,
-            PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p)
+    public void activateObject(final PStmtKeyCPDS key,
+            final PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p)
             throws Exception {
         p.getObject().activate();
     }
@@ -489,10 +489,10 @@ class PooledConnectionImpl implements PooledConnection,
      * @param p a wrapped {@link PreparedStatement}
      */
     @Override
-    public void passivateObject(PStmtKeyCPDS key,
-            PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p)
+    public void passivateObject(final PStmtKeyCPDS key,
+            final PooledObject<PoolablePreparedStatement<PStmtKeyCPDS>> p)
             throws Exception {
-        PoolablePreparedStatement<PStmtKeyCPDS> ppss = p.getObject();
+        final PoolablePreparedStatement<PStmtKeyCPDS> ppss = p.getObject();
         ppss.clearParameters();
         ppss.passivate();
     }
@@ -513,7 +513,7 @@ class PooledConnectionImpl implements PooledConnection,
      *
      * @param allow Access to the underlying connection is granted when true.
      */
-    public synchronized void setAccessToUnderlyingConnectionAllowed(boolean allow) {
+    public synchronized void setAccessToUnderlyingConnectionAllowed(final boolean allow) {
         this.accessToUnderlyingConnectionAllowed = allow;
     }
 }

==================================================
CPDSConnectionFactory.java
index 0866fff376..c36512bdca 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/package-info.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/package-info.java
@@ -19,7 +19,7 @@
  * <p>
  * This package contains one public class which is a
  * <code>ConnectionPoolDataSource</code> (CPDS) implementation that can be used to
- * adapt older <code>Driver</code> based jdbc implementations. Below is an
+ * adapt older <code>Driver</code> based JDBC implementations. Below is an
  * example of setting up the CPDS to be available via JNDI in the
  * catalina servlet container.
  * </p>

==================================================
InstanceKeyDataSource.java
index f3a6ad93cd..014db18804 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
@@ -89,12 +89,12 @@ class CPDSConnectionFactory
      * @param username The user name to use to create connections
      * @param password The password to use to create connections
      */
-    public CPDSConnectionFactory(ConnectionPoolDataSource cpds,
-                                 String validationQuery,
-                                 int validationQueryTimeout,
-                                 boolean rollbackAfterValidation,
-                                 String username,
-                                 String password) {
+    public CPDSConnectionFactory(final ConnectionPoolDataSource cpds,
+                                 final String validationQuery,
+                                 final int validationQueryTimeout,
+                                 final boolean rollbackAfterValidation,
+                                 final String username,
+                                 final String password) {
         _cpds = cpds;
         _validationQuery = validationQuery;
         _validationQueryTimeout = validationQueryTimeout;
@@ -117,7 +117,7 @@ class CPDSConnectionFactory
      * @param pool the {@link ObjectPool} in which to pool those {@link
      * Connection}s
      */
-    public void setPool(ObjectPool<PooledConnectionAndInfo> pool) {
+    public void setPool(final ObjectPool<PooledConnectionAndInfo> pool) {
         this._pool = pool;
     }
 
@@ -141,7 +141,7 @@ class CPDSConnectionFactory
             pc.addConnectionEventListener(this);
             pci = new PooledConnectionAndInfo(pc, _username, _password);
             pcMap.put(pc, pci);
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             throw new RuntimeException(e.getMessage());
         }
         return new DefaultPooledObject<>(pci);
@@ -151,26 +151,26 @@ class CPDSConnectionFactory
      * Closes the PooledConnection and stops listening for events from it.
      */
     @Override
-    public void destroyObject(PooledObject<PooledConnectionAndInfo> p) throws Exception {
+    public void destroyObject(final PooledObject<PooledConnectionAndInfo> p) throws Exception {
         doDestroyObject(p.getObject());
     }
 
-    private void doDestroyObject(PooledConnectionAndInfo pci) throws Exception{
-        PooledConnection pc = pci.getPooledConnection();
+    private void doDestroyObject(final PooledConnectionAndInfo pci) throws Exception{
+        final PooledConnection pc = pci.getPooledConnection();
         pc.removeConnectionEventListener(this);
         pcMap.remove(pc);
         pc.close();
     }
 
     @Override
-    public boolean validateObject(PooledObject<PooledConnectionAndInfo> p) {
+    public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
         try {
             validateLifetime(p);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             return false;
         }
         boolean valid = false;
-        PooledConnection pconn = p.getObject().getPooledConnection();
+        final PooledConnection pconn = p.getObject().getPooledConnection();
         Connection conn = null;
         validatingSet.add(pconn);
         if (null == _validationQuery) {
@@ -181,7 +181,7 @@ class CPDSConnectionFactory
             try {
                 conn = pconn.getConnection();
                 valid = conn.isValid(timeout);
-            } catch (SQLException e) {
+            } catch (final SQLException e) {
                 valid = false;
             } finally {
                 Utils.closeQuietly(conn);
@@ -207,7 +207,7 @@ class CPDSConnectionFactory
                 if (_rollbackAfterValidation) {
                     conn.rollback();
                 }
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 valid = false;
             } finally {
                 Utils.closeQuietly(rset);
@@ -220,13 +220,13 @@ class CPDSConnectionFactory
     }
 
     @Override
-    public void passivateObject(PooledObject<PooledConnectionAndInfo> p)
+    public void passivateObject(final PooledObject<PooledConnectionAndInfo> p)
             throws Exception {
         validateLifetime(p);
     }
 
     @Override
-    public void activateObject(PooledObject<PooledConnectionAndInfo> p)
+    public void activateObject(final PooledObject<PooledConnectionAndInfo> p)
             throws Exception {
         validateLifetime(p);
     }
@@ -242,25 +242,25 @@ class CPDSConnectionFactory
      * release this PooledConnection from our pool...
      */
     @Override
-    public void connectionClosed(ConnectionEvent event) {
-        PooledConnection pc = (PooledConnection) event.getSource();
+    public void connectionClosed(final ConnectionEvent event) {
+        final PooledConnection pc = (PooledConnection) event.getSource();
         // if this event occurred because we were validating, ignore it
         // otherwise return the connection to the pool.
         if (!validatingSet.contains(pc)) {
-            PooledConnectionAndInfo pci = pcMap.get(pc);
+            final PooledConnectionAndInfo pci = pcMap.get(pc);
             if (pci == null) {
                 throw new IllegalStateException(NO_KEY_MESSAGE);
             }
 
             try {
                 _pool.returnObject(pci);
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 System.err.println("CLOSING DOWN CONNECTION AS IT COULD "
                         + "NOT BE RETURNED TO THE POOL");
                 pc.removeConnectionEventListener(this);
                 try {
                     doDestroyObject(pci);
-                } catch (Exception e2) {
+                } catch (final Exception e2) {
                     System.err.println("EXCEPTION WHILE DESTROYING OBJECT "
                             + pci);
                     e2.printStackTrace();
@@ -274,8 +274,8 @@ class CPDSConnectionFactory
      * not to be returned in the future
      */
     @Override
-    public void connectionErrorOccurred(ConnectionEvent event) {
-        PooledConnection pc = (PooledConnection)event.getSource();
+    public void connectionErrorOccurred(final ConnectionEvent event) {
+        final PooledConnection pc = (PooledConnection)event.getSource();
         if (null != event.getSQLException()) {
             System.err.println(
                     "CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR ("
@@ -283,13 +283,13 @@ class CPDSConnectionFactory
         }
         pc.removeConnectionEventListener(this);
 
-        PooledConnectionAndInfo pci = pcMap.get(pc);
+        final PooledConnectionAndInfo pci = pcMap.get(pc);
         if (pci == null) {
             throw new IllegalStateException(NO_KEY_MESSAGE);
         }
         try {
             _pool.invalidateObject(pci);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             System.err.println("EXCEPTION WHILE DESTROYING OBJECT " + pci);
             e.printStackTrace();
         }
@@ -306,15 +306,15 @@ class CPDSConnectionFactory
      * and connections that are checked out are closed on return.
      */
     @Override
-    public void invalidate(PooledConnection pc) throws SQLException {
-        PooledConnectionAndInfo pci = pcMap.get(pc);
+    public void invalidate(final PooledConnection pc) throws SQLException {
+        final PooledConnectionAndInfo pci = pcMap.get(pc);
         if (pci == null) {
             throw new IllegalStateException(NO_KEY_MESSAGE);
         }
         try {
             _pool.invalidateObject(pci);  // Destroy instance and update pool counters
             _pool.close();  // Clear any other instances in this pool and kill others as they come back
-        } catch (Exception ex) {
+        } catch (final Exception ex) {
             throw new SQLException("Error invalidating connection", ex);
         }
     }
@@ -325,7 +325,7 @@ class CPDSConnectionFactory
      * @param password new password
      */
     @Override
-    public synchronized void setPassword(String password) {
+    public synchronized void setPassword(final String password) {
         _password = password;
     }
 
@@ -336,7 +336,7 @@ class CPDSConnectionFactory
      * @param maxConnLifetimeMillis A value of zero or less indicates an
      *        infinite lifetime. The default value is -1.
      */
-    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
+    public void setMaxConnLifetimeMillis(final long maxConnLifetimeMillis) {
         this.maxConnLifetimeMillis = maxConnLifetimeMillis;
     }
 
@@ -345,7 +345,7 @@ class CPDSConnectionFactory
      * factory and closes the pool if this is the case; otherwise does nothing.
      */
     @Override
-    public void closePool(String username) throws SQLException {
+    public void closePool(final String username) throws SQLException {
         synchronized (this) {
             if (username == null || !username.equals(_username)) {
                 return;
@@ -353,15 +353,15 @@ class CPDSConnectionFactory
         }
         try {
             _pool.close();
-        } catch (Exception ex) {
+        } catch (final Exception ex) {
             throw new SQLException("Error closing connection pool", ex);
         }
     }
 
-    private void validateLifetime(PooledObject<PooledConnectionAndInfo> p)
+    private void validateLifetime(final PooledObject<PooledConnectionAndInfo> p)
             throws Exception {
         if (maxConnLifetimeMillis > 0) {
-            long lifetime = System.currentTimeMillis() - p.getCreateTime();
+            final long lifetime = System.currentTimeMillis() - p.getCreateTime();
             if (lifetime > maxConnLifetimeMillis) {
                 throw new Exception(Utils.getMessage(
                         "connectionFactory.lifetimeExceeded",

==================================================
InstanceKeyDataSourceFactory.java
index 92fe4e7c52..da225b9b62 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSource.java
@@ -43,7 +43,7 @@ import org.apache.tomcat.dbcp.pool2.impl.GenericKeyedObjectPoolConfig;
  * <code>PerUserPoolDataSource</code>.  Many of the configuration properties
  * are shared and defined here.  This class is declared public in order
  * to allow particular usage with commons-beanutils; do not make direct
- * use of it outside of commons-dbcp.
+ * use of it outside of <em>commons-dbcp2</em>.
  * </p>
  *
  * <p>
@@ -70,7 +70,7 @@ import org.apache.tomcat.dbcp.pool2.impl.GenericKeyedObjectPoolConfig;
  * The dbcp package contains an adapter,
  * {@link org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS},
  * that can be used to allow the use of <code>DataSource</code>'s based on this
- * class with jdbc driver implementations that do not supply a
+ * class with JDBC driver implementations that do not supply a
  * <code>ConnectionPoolDataSource</code>, but still
  * provide a {@link java.sql.Driver} implementation.
  * </p>
@@ -193,12 +193,12 @@ public abstract class InstanceKeyDataSource
 
     /* JDBC_4_ANT_KEY_BEGIN */
     @Override
-    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
         return false;
     }
 
     @Override
-    public <T> T unwrap(Class<T> iface) throws SQLException {
+    public <T> T unwrap(final Class<T> iface) throws SQLException {
         throw new SQLException("InstanceKeyDataSource is not a wrapper.");
     }
     /* JDBC_4_ANT_KEY_END */
@@ -227,7 +227,7 @@ public abstract class InstanceKeyDataSource
      * user pool.
      * @param blockWhenExhausted The new value
      */
-    public void setDefaultBlockWhenExhausted(boolean blockWhenExhausted) {
+    public void setDefaultBlockWhenExhausted(final boolean blockWhenExhausted) {
         assertInitializationAllowed();
         this.defaultBlockWhenExhausted = blockWhenExhausted;
     }
@@ -248,7 +248,7 @@ public abstract class InstanceKeyDataSource
      * @param evictionPolicyClassName The new value
      */
     public void setDefaultEvictionPolicyClassName(
-            String evictionPolicyClassName) {
+            final String evictionPolicyClassName) {
         assertInitializationAllowed();
         this.defaultEvictionPolicyClassName = evictionPolicyClassName;
     }
@@ -266,7 +266,7 @@ public abstract class InstanceKeyDataSource
      * {@link GenericKeyedObjectPoolConfig#getLifo()} for each per user pool.
      * @param lifo The new value
      */
-    public void setDefaultLifo(boolean lifo) {
+    public void setDefaultLifo(final boolean lifo) {
         assertInitializationAllowed();
         this.defaultLifo = lifo;
     }
@@ -286,7 +286,7 @@ public abstract class InstanceKeyDataSource
      * pool.
      * @param maxIdle The new value
      */
-    public void setDefaultMaxIdle(int maxIdle) {
+    public void setDefaultMaxIdle(final int maxIdle) {
         assertInitializationAllowed();
         this.defaultMaxIdle = maxIdle;
     }
@@ -306,7 +306,7 @@ public abstract class InstanceKeyDataSource
      * user pool.
      * @param maxTotal The new value
      */
-    public void setDefaultMaxTotal(int maxTotal) {
+    public void setDefaultMaxTotal(final int maxTotal) {
         assertInitializationAllowed();
         this.defaultMaxTotal = maxTotal;
     }
@@ -326,7 +326,7 @@ public abstract class InstanceKeyDataSource
      * pool.
      * @param maxWaitMillis The new value
      */
-    public void setDefaultMaxWaitMillis(long maxWaitMillis) {
+    public void setDefaultMaxWaitMillis(final long maxWaitMillis) {
         assertInitializationAllowed();
         this.defaultMaxWaitMillis = maxWaitMillis;
     }
@@ -347,7 +347,7 @@ public abstract class InstanceKeyDataSource
      * @param minEvictableIdleTimeMillis The new value
      */
     public void setDefaultMinEvictableIdleTimeMillis(
-            long minEvictableIdleTimeMillis) {
+            final long minEvictableIdleTimeMillis) {
         assertInitializationAllowed();
         this.defaultMinEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
     }
@@ -367,7 +367,7 @@ public abstract class InstanceKeyDataSource
      * pool.
      * @param minIdle The new value
      */
-    public void setDefaultMinIdle(int minIdle) {
+    public void setDefaultMinIdle(final int minIdle) {
         assertInitializationAllowed();
         this.defaultMinIdle = minIdle;
     }
@@ -387,7 +387,7 @@ public abstract class InstanceKeyDataSource
      * per user pool.
      * @param numTestsPerEvictionRun The new value
      */
-    public void setDefaultNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
+    public void setDefaultNumTestsPerEvictionRun(final int numTestsPerEvictionRun) {
         assertInitializationAllowed();
         this.defaultNumTestsPerEvictionRun = numTestsPerEvictionRun;
     }
@@ -407,7 +407,7 @@ public abstract class InstanceKeyDataSource
      * @param softMinEvictableIdleTimeMillis The new value
      */
     public void setDefaultSoftMinEvictableIdleTimeMillis(
-            long softMinEvictableIdleTimeMillis) {
+            final long softMinEvictableIdleTimeMillis) {
         assertInitializationAllowed();
         this.defaultSoftMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
     }
@@ -425,7 +425,7 @@ public abstract class InstanceKeyDataSource
      * {@link org.apache.tomcat.dbcp.pool2.impl.GenericObjectPool GenericObjectPool#getTestOnCreate()} for each per user pool.
      * @param testOnCreate The new value
      */
-    public void setDefaultTestOnCreate(boolean testOnCreate) {
+    public void setDefaultTestOnCreate(final boolean testOnCreate) {
         assertInitializationAllowed();
         this.defaultTestOnCreate = testOnCreate;
     }
@@ -443,7 +443,7 @@ public abstract class InstanceKeyDataSource
      * {@link org.apache.tomcat.dbcp.pool2.impl.GenericObjectPool GenericObjectPool#getTestOnBorrow()} for each per user pool.
      * @param testOnBorrow The new value
      */
-    public void setDefaultTestOnBorrow(boolean testOnBorrow) {
+    public void setDefaultTestOnBorrow(final boolean testOnBorrow) {
         assertInitializationAllowed();
         this.defaultTestOnBorrow = testOnBorrow;
     }
@@ -461,7 +461,7 @@ public abstract class InstanceKeyDataSource
      * {@link org.apache.tomcat.dbcp.pool2.impl.GenericObjectPool GenericObjectPool#getTestOnReturn()} for each per user pool.
      * @param testOnReturn The new value
      */
-    public void setDefaultTestOnReturn(boolean testOnReturn) {
+    public void setDefaultTestOnReturn(final boolean testOnReturn) {
         assertInitializationAllowed();
         this.defaultTestOnReturn = testOnReturn;
     }
@@ -479,7 +479,7 @@ public abstract class InstanceKeyDataSource
      * {@link org.apache.tomcat.dbcp.pool2.impl.GenericObjectPool GenericObjectPool#getTestWhileIdle()} for each per user pool.
      * @param testWhileIdle The new value
      */
-    public void setDefaultTestWhileIdle(boolean testWhileIdle) {
+    public void setDefaultTestWhileIdle(final boolean testWhileIdle) {
         assertInitializationAllowed();
         this.defaultTestWhileIdle = testWhileIdle;
     }
@@ -500,7 +500,7 @@ public abstract class InstanceKeyDataSource
      * @param timeBetweenEvictionRunsMillis The new value
      */
     public void setDefaultTimeBetweenEvictionRunsMillis (
-            long timeBetweenEvictionRunsMillis ) {
+            final long timeBetweenEvictionRunsMillis ) {
         assertInitializationAllowed();
         this.defaultTimeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis ;
     }
@@ -521,7 +521,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param v  Value to assign to connectionPoolDataSource.
      */
-    public void setConnectionPoolDataSource(ConnectionPoolDataSource v) {
+    public void setConnectionPoolDataSource(final ConnectionPoolDataSource v) {
         assertInitializationAllowed();
         if (dataSourceName != null) {
             throw new IllegalStateException(
@@ -554,7 +554,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param v  Value to assign to dataSourceName.
      */
-    public void setDataSourceName(String v) {
+    public void setDataSourceName(final String v) {
         assertInitializationAllowed();
         if (dataSource != null) {
             throw new IllegalStateException(
@@ -593,7 +593,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param v  Value to assign to defaultAutoCommit.
      */
-    public void setDefaultAutoCommit(Boolean v) {
+    public void setDefaultAutoCommit(final Boolean v) {
         assertInitializationAllowed();
         this.defaultAutoCommit = v;
     }
@@ -620,7 +620,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param v  Value to assign to defaultReadOnly.
      */
-    public void setDefaultReadOnly(Boolean v) {
+    public void setDefaultReadOnly(final Boolean v) {
         assertInitializationAllowed();
         this.defaultReadOnly = v;
     }
@@ -645,7 +645,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param v  Value to assign to defaultTransactionIsolation
      */
-    public void setDefaultTransactionIsolation(int v) {
+    public void setDefaultTransactionIsolation(final int v) {
         assertInitializationAllowed();
         switch (v) {
         case Connection.TRANSACTION_NONE:
@@ -661,7 +661,7 @@ public abstract class InstanceKeyDataSource
     }
 
     /**
-     * Get the description.  This property is defined by jdbc as for use with
+     * Get the description.  This property is defined by JDBC as for use with
      * GUI (or other) tools that might deploy the datasource.  It serves no
      * internal purpose.
      *
@@ -672,13 +672,13 @@ public abstract class InstanceKeyDataSource
     }
 
     /**
-     * Set the description.  This property is defined by jdbc as for use with
+     * Set the description.  This property is defined by JDBC as for use with
      * GUI (or other) tools that might deploy the datasource.  It serves no
      * internal purpose.
      *
      * @param v  Value to assign to description.
      */
-    public void setDescription(String v) {
+    public void setDescription(final String v) {
         this.description = v;
     }
 
@@ -693,7 +693,7 @@ public abstract class InstanceKeyDataSource
      * @param key The environment property name
      * @return value of jndiEnvironment.
      */
-    public String getJndiEnvironment(String key) {
+    public String getJndiEnvironment(final String key) {
         String value = null;
         if (jndiEnvironment != null) {
             value = jndiEnvironment.getProperty(key);
@@ -709,7 +709,7 @@ public abstract class InstanceKeyDataSource
      * @param key the JNDI environment property to set.
      * @param value the value assigned to specified JNDI environment property.
      */
-    public void setJndiEnvironment(String key, String value) {
+    public void setJndiEnvironment(final String key, final String value) {
         if (jndiEnvironment == null) {
             jndiEnvironment = new Properties();
         }
@@ -724,7 +724,7 @@ public abstract class InstanceKeyDataSource
      * @param properties the JNDI environment property to set which will
      *                   overwrite any current settings
      */
-    void setJndiEnvironment(Properties properties) {
+    void setJndiEnvironment(final Properties properties) {
         if (jndiEnvironment == null) {
             jndiEnvironment = new Properties();
         } else {
@@ -747,7 +747,7 @@ public abstract class InstanceKeyDataSource
      * @param v  Value to assign to loginTimeout.
      */
     @Override
-    public void setLoginTimeout(int v) {
+    public void setLoginTimeout(final int v) {
         this.loginTimeout = v;
     }
 
@@ -769,7 +769,7 @@ public abstract class InstanceKeyDataSource
      * @param v  Value to assign to logWriter.
      */
     @Override
-    public void setLogWriter(PrintWriter v) {
+    public void setLogWriter(final PrintWriter v) {
         this.logWriter = v;
     }
 
@@ -793,7 +793,7 @@ public abstract class InstanceKeyDataSource
      * {@link Connection#isValid(int)}.
      * @param validationQuery The validation query
      */
-    public void setValidationQuery(String validationQuery) {
+    public void setValidationQuery(final String validationQuery) {
         assertInitializationAllowed();
         this.validationQuery = validationQuery;
     }
@@ -810,7 +810,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param validationQueryTimeout    The new timeout in seconds
      */
-    public void setValidationQueryTimeout(int validationQueryTimeout) {
+    public void setValidationQueryTimeout(final int validationQueryTimeout) {
         this.validationQueryTimeout = validationQueryTimeout;
     }
 
@@ -835,7 +835,7 @@ public abstract class InstanceKeyDataSource
      *
      * @param rollbackAfterValidation new property value
      */
-    public void setRollbackAfterValidation(boolean rollbackAfterValidation) {
+    public void setRollbackAfterValidation(final boolean rollbackAfterValidation) {
         assertInitializationAllowed();
         this.rollbackAfterValidation = rollbackAfterValidation;
     }
@@ -858,7 +858,7 @@ public abstract class InstanceKeyDataSource
      * setLoginTimeout, getLoginTimeout, getLogWriter.</code></p>
      * @param maxConnLifetimeMillis The maximum connection lifetime
      */
-    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
+    public void setMaxConnLifetimeMillis(final long maxConnLifetimeMillis) {
         this.maxConnLifetimeMillis = maxConnLifetimeMillis;
     }
 
@@ -894,7 +894,7 @@ public abstract class InstanceKeyDataSource
      * @throws SQLException Connection failed
      */
     @Override
-    public Connection getConnection(String username, String password)
+    public Connection getConnection(final String username, final String password)
             throws SQLException {
         if (instanceKey == null) {
             throw new SQLException("Must set the ConnectionPoolDataSource "
@@ -905,16 +905,16 @@ public abstract class InstanceKeyDataSource
         PooledConnectionAndInfo info = null;
         try {
             info = getPooledConnectionAndInfo(username, password);
-        } catch (NoSuchElementException e) {
+        } catch (final NoSuchElementException e) {
             closeDueToException(info);
             throw new SQLException("Cannot borrow connection from pool", e);
-        } catch (RuntimeException e) {
+        } catch (final RuntimeException e) {
             closeDueToException(info);
             throw e;
-        } catch (SQLException e) {
+        } catch (final SQLException e) {
             closeDueToException(info);
             throw e;
-        } catch (Exception e) {
+        } catch (final Exception e) {
             closeDueToException(info);
             throw new SQLException("Cannot borrow connection from pool", e);
         }
@@ -923,12 +923,12 @@ public abstract class InstanceKeyDataSource
                 : password.equals(info.getPassword()))) {  // Password on PooledConnectionAndInfo does not match
             try { // See if password has changed by attempting connection
                 testCPDS(username, password);
-            } catch (SQLException ex) {
+            } catch (final SQLException ex) {
                 // Password has not changed, so refuse client, but return connection to the pool
                 closeDueToException(info);
                 throw new SQLException("Given password did not match password used"
                                        + " to create the PooledConnection.", ex);
-            } catch (javax.naming.NamingException ne) {
+            } catch (final javax.naming.NamingException ne) {
                 throw new SQLException(
                         "NamingException encountered connecting to database", ne);
             }
@@ -944,16 +944,16 @@ public abstract class InstanceKeyDataSource
             for (int i = 0; i < 10; i++) { // Bound the number of retries - only needed if bad instances return
                 try {
                     info = getPooledConnectionAndInfo(username, password);
-                } catch (NoSuchElementException e) {
+                } catch (final NoSuchElementException e) {
                     closeDueToException(info);
                     throw new SQLException("Cannot borrow connection from pool", e);
-                } catch (RuntimeException e) {
+                } catch (final RuntimeException e) {
                     closeDueToException(info);
                     throw e;
-                } catch (SQLException e) {
+                } catch (final SQLException e) {
                     closeDueToException(info);
                     throw e;
-                } catch (Exception e) {
+                } catch (final Exception e) {
                     closeDueToException(info);
                     throw new SQLException("Cannot borrow connection from pool", e);
                 }
@@ -970,15 +970,15 @@ public abstract class InstanceKeyDataSource
             }
         }
 
-        Connection con = info.getPooledConnection().getConnection();
+        final Connection con = info.getPooledConnection().getConnection();
         try {
             setupDefaults(con, username);
             con.clearWarnings();
             return con;
-        } catch (SQLException ex) {
+        } catch (final SQLException ex) {
             try {
                 con.close();
-            } catch (Exception exc) {
+            } catch (final Exception exc) {
                 getLogWriter().println(
                      "ignoring exception during close: " + exc);
             }
@@ -994,11 +994,11 @@ public abstract class InstanceKeyDataSource
         throws SQLException;
 
 
-    private void closeDueToException(PooledConnectionAndInfo info) {
+    private void closeDueToException(final PooledConnectionAndInfo info) {
         if (info != null) {
             try {
                 info.getPooledConnection().getConnection().close();
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 // do not throw this exception because we are in the middle
                 // of handling another exception.  But record it because
                 // it potentially leaks connections from the pool.
@@ -1009,7 +1009,7 @@ public abstract class InstanceKeyDataSource
     }
 
     protected ConnectionPoolDataSource
-        testCPDS(String username, String password)
+        testCPDS(final String username, final String password)
         throws javax.naming.NamingException, SQLException {
         // The source of physical db connections
         ConnectionPoolDataSource cpds = this.dataSource;
@@ -1020,7 +1020,7 @@ public abstract class InstanceKeyDataSource
             } else {
                 ctx = new InitialContext(jndiEnvironment);
             }
-            Object ds = ctx.lookup(dataSourceName);
+            final Object ds = ctx.lookup(dataSourceName);
             if (ds instanceof ConnectionPoolDataSource) {
                 cpds = (ConnectionPoolDataSource) ds;
             } else {
@@ -1050,7 +1050,7 @@ public abstract class InstanceKeyDataSource
                 try {
                     conn.close();
                 }
-                catch (SQLException e) {
+                catch (final SQLException e) {
                     // at least we could connect
                 }
             }

==================================================
KeyedCPDSConnectionFactory.java
index 0d2158d141..56392a3a93 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSourceFactory.java
@@ -44,27 +44,27 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
     private static final Map<String, InstanceKeyDataSource> instanceMap =
             new ConcurrentHashMap<>();
 
-    static synchronized String registerNewInstance(InstanceKeyDataSource ds) {
+    static synchronized String registerNewInstance(final InstanceKeyDataSource ds) {
         int max = 0;
-        Iterator<String> i = instanceMap.keySet().iterator();
+        final Iterator<String> i = instanceMap.keySet().iterator();
         while (i.hasNext()) {
-            String s = i.next();
+            final String s = i.next();
             if (s != null) {
                 try {
                     max = Math.max(max, Integer.parseInt(s));
-                } catch (NumberFormatException e) {
+                } catch (final NumberFormatException e) {
                     // no sweat, ignore those keys
                 }
             }
         }
-        String instanceKey = String.valueOf(max + 1);
+        final String instanceKey = String.valueOf(max + 1);
         // put a placeholder here for now, so other instances will not
         // take our key.  we will replace with a pool when ready.
         instanceMap.put(instanceKey, ds);
         return instanceKey;
     }
 
-    static void removeInstance(String key) {
+    static void removeInstance(final String key) {
         if (key != null) {
             instanceMap.remove(key);
         }
@@ -76,7 +76,7 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
      */
     public static void closeAll() throws Exception {
         //Get iterator to loop over all instances of this datasource.
-        Iterator<Entry<String,InstanceKeyDataSource>> instanceIterator =
+        final Iterator<Entry<String,InstanceKeyDataSource>> instanceIterator =
             instanceMap.entrySet().iterator();
         while (instanceIterator.hasNext()) {
             instanceIterator.next().getValue().close();
@@ -90,16 +90,16 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
      * or PerUserPoolDataSource.
      */
     @Override
-    public Object getObjectInstance(Object refObj, Name name,
-                                    Context context, Hashtable<?,?> env)
+    public Object getObjectInstance(final Object refObj, final Name name,
+                                    final Context context, final Hashtable<?,?> env)
         throws IOException, ClassNotFoundException {
         // The spec says to return null if we can't create an instance
         // of the reference
         Object obj = null;
         if (refObj instanceof Reference) {
-            Reference ref = (Reference) refObj;
+            final Reference ref = (Reference) refObj;
             if (isCorrectClass(ref.getClassName())) {
-                RefAddr ra = ref.get("instanceKey");
+                final RefAddr ra = ref.get("instanceKey");
                 if (ra != null && ra.getContent() != null) {
                     // object was bound to jndi via Referenceable api.
                     obj = instanceMap.get(ra.getContent());
@@ -117,7 +117,7 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
                     }
                     if (obj == null)
                     {
-                        InstanceKeyDataSource ds = getNewInstance(ref);
+                        final InstanceKeyDataSource ds = getNewInstance(ref);
                         setCommonProperties(ref, ds);
                         obj = ds;
                         if (key != null)
@@ -131,8 +131,8 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
         return obj;
     }
 
-    private void setCommonProperties(Reference ref,
-                                     InstanceKeyDataSource ikds)
+    private void setCommonProperties(final Reference ref,
+                                     final InstanceKeyDataSource ikds)
         throws IOException, ClassNotFoundException {
 
         RefAddr ra = ref.get("dataSourceName");
@@ -147,7 +147,7 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
 
         ra = ref.get("jndiEnvironment");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             ikds.setJndiEnvironment((Properties) deserialize(serialized));
         }
 
@@ -320,7 +320,7 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
      * @throws IOException Stream error
      * @throws ClassNotFoundException Couldn't load object class
      */
-    protected static final Object deserialize(byte[] data)
+    protected static final Object deserialize(final byte[] data)
         throws IOException, ClassNotFoundException {
         ObjectInputStream in = null;
         try {
@@ -330,7 +330,7 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
             if (in != null) {
                 try {
                     in.close();
-                } catch (IOException ex) {
+                } catch (final IOException ex) {
                 }
             }
         }

==================================================
PerUserPoolDataSource.java
index f424ef48a7..23e5bc4ab7 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/KeyedCPDSConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/KeyedCPDSConnectionFactory.java
@@ -86,17 +86,17 @@ class KeyedCPDSConnectionFactory
      * @param rollbackAfterValidation whether a rollback should be issued after
      * {@link #validateObject validating} {@link Connection}s.
      */
-    public KeyedCPDSConnectionFactory(ConnectionPoolDataSource cpds,
-                                      String validationQuery,
-                                      int validationQueryTimeout,
-                                      boolean rollbackAfterValidation) {
+    public KeyedCPDSConnectionFactory(final ConnectionPoolDataSource cpds,
+                                      final String validationQuery,
+                                      final int validationQueryTimeout,
+                                      final boolean rollbackAfterValidation) {
         _cpds = cpds;
         _validationQuery = validationQuery;
         _validationQueryTimeout = validationQueryTimeout;
         _rollbackAfterValidation = rollbackAfterValidation;
     }
 
-    public void setPool(KeyedObjectPool<UserPassKey,PooledConnectionAndInfo> pool) {
+    public void setPool(final KeyedObjectPool<UserPassKey,PooledConnectionAndInfo> pool) {
         this._pool = pool;
     }
 
@@ -117,13 +117,13 @@ class KeyedCPDSConnectionFactory
      * @see org.apache.tomcat.dbcp.pool2.KeyedPooledObjectFactory#makeObject(java.lang.Object)
      */
     @Override
-    public synchronized PooledObject<PooledConnectionAndInfo> makeObject(UserPassKey upkey)
+    public synchronized PooledObject<PooledConnectionAndInfo> makeObject(final UserPassKey upkey)
             throws Exception {
         PooledConnectionAndInfo pci = null;
 
         PooledConnection pc = null;
-        String username = upkey.getUsername();
-        String password = upkey.getPassword();
+        final String username = upkey.getUsername();
+        final String password = upkey.getPassword();
         if (username == null) {
             pc = _cpds.getPooledConnection();
         } else {
@@ -147,9 +147,9 @@ class KeyedCPDSConnectionFactory
      * Closes the PooledConnection and stops listening for events from it.
      */
     @Override
-    public void destroyObject(UserPassKey key, PooledObject<PooledConnectionAndInfo> p)
+    public void destroyObject(final UserPassKey key, final PooledObject<PooledConnectionAndInfo> p)
             throws Exception {
-        PooledConnection pc = p.getObject().getPooledConnection();
+        final PooledConnection pc = p.getObject().getPooledConnection();
         pc.removeConnectionEventListener(this);
         pcMap.remove(pc);
         pc.close();
@@ -164,15 +164,15 @@ class KeyedCPDSConnectionFactory
      * @return true if validation succeeds
      */
     @Override
-    public boolean validateObject(UserPassKey key,
-            PooledObject<PooledConnectionAndInfo> p) {
+    public boolean validateObject(final UserPassKey key,
+            final PooledObject<PooledConnectionAndInfo> p) {
         try {
             validateLifetime(p);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             return false;
         }
         boolean valid = false;
-        PooledConnection pconn = p.getObject().getPooledConnection();
+        final PooledConnection pconn = p.getObject().getPooledConnection();
         Connection conn = null;
         validatingSet.add(pconn);
         if (null == _validationQuery) {
@@ -183,7 +183,7 @@ class KeyedCPDSConnectionFactory
             try {
                 conn = pconn.getConnection();
                 valid = conn.isValid(timeout);
-            } catch (SQLException e) {
+            } catch (final SQLException e) {
                 valid = false;
             } finally {
                 Utils.closeQuietly(conn);
@@ -209,7 +209,7 @@ class KeyedCPDSConnectionFactory
                 if (_rollbackAfterValidation) {
                     conn.rollback();
                 }
-            } catch(Exception e) {
+            } catch(final Exception e) {
                 valid = false;
             } finally {
                 Utils.closeQuietly(rset);
@@ -222,14 +222,14 @@ class KeyedCPDSConnectionFactory
     }
 
     @Override
-    public void passivateObject(UserPassKey key,
-            PooledObject<PooledConnectionAndInfo> p) throws Exception {
+    public void passivateObject(final UserPassKey key,
+            final PooledObject<PooledConnectionAndInfo> p) throws Exception {
         validateLifetime(p);
     }
 
     @Override
-    public void activateObject(UserPassKey key,
-            PooledObject<PooledConnectionAndInfo> p) throws Exception {
+    public void activateObject(final UserPassKey key,
+            final PooledObject<PooledConnectionAndInfo> p) throws Exception {
         validateLifetime(p);
     }
 
@@ -244,25 +244,25 @@ class KeyedCPDSConnectionFactory
      * release this PooledConnection from our pool...
      */
     @Override
-    public void connectionClosed(ConnectionEvent event) {
-        PooledConnection pc = (PooledConnection)event.getSource();
+    public void connectionClosed(final ConnectionEvent event) {
+        final PooledConnection pc = (PooledConnection)event.getSource();
         // if this event occurred because we were validating, or if this
         // connection has been marked for removal, ignore it
         // otherwise return the connection to the pool.
         if (!validatingSet.contains(pc)) {
-            PooledConnectionAndInfo pci = pcMap.get(pc);
+            final PooledConnectionAndInfo pci = pcMap.get(pc);
             if (pci == null) {
                 throw new IllegalStateException(NO_KEY_MESSAGE);
             }
             try {
                 _pool.returnObject(pci.getUserPassKey(), pci);
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 System.err.println("CLOSING DOWN CONNECTION AS IT COULD " +
                 "NOT BE RETURNED TO THE POOL");
                 pc.removeConnectionEventListener(this);
                 try {
                     _pool.invalidateObject(pci.getUserPassKey(), pci);
-                } catch (Exception e3) {
+                } catch (final Exception e3) {
                     System.err.println("EXCEPTION WHILE DESTROYING OBJECT " +
                             pci);
                     e3.printStackTrace();
@@ -276,8 +276,8 @@ class KeyedCPDSConnectionFactory
      * not to be returned in the future
      */
     @Override
-    public void connectionErrorOccurred(ConnectionEvent event) {
-        PooledConnection pc = (PooledConnection)event.getSource();
+    public void connectionErrorOccurred(final ConnectionEvent event) {
+        final PooledConnection pc = (PooledConnection)event.getSource();
         if (null != event.getSQLException()) {
             System.err
                 .println("CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR (" +
@@ -285,13 +285,13 @@ class KeyedCPDSConnectionFactory
         }
         pc.removeConnectionEventListener(this);
 
-        PooledConnectionAndInfo info = pcMap.get(pc);
+        final PooledConnectionAndInfo info = pcMap.get(pc);
         if (info == null) {
             throw new IllegalStateException(NO_KEY_MESSAGE);
         }
         try {
             _pool.invalidateObject(info.getUserPassKey(), info);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             System.err.println("EXCEPTION WHILE DESTROYING OBJECT " + info);
             e.printStackTrace();
         }
@@ -309,16 +309,16 @@ class KeyedCPDSConnectionFactory
      * are not affected and they will not be automatically closed on return to the pool.
      */
     @Override
-    public void invalidate(PooledConnection pc) throws SQLException {
-        PooledConnectionAndInfo info = pcMap.get(pc);
+    public void invalidate(final PooledConnection pc) throws SQLException {
+        final PooledConnectionAndInfo info = pcMap.get(pc);
         if (info == null) {
             throw new IllegalStateException(NO_KEY_MESSAGE);
         }
-        UserPassKey key = info.getUserPassKey();
+        final UserPassKey key = info.getUserPassKey();
         try {
             _pool.invalidateObject(key, info);  // Destroy and update pool counters
             _pool.clear(key); // Remove any idle instances with this key
-        } catch (Exception ex) {
+        } catch (final Exception ex) {
             throw new SQLException("Error invalidating connection", ex);
         }
     }
@@ -327,7 +327,7 @@ class KeyedCPDSConnectionFactory
      * Does nothing.  This factory does not cache user credentials.
      */
     @Override
-    public void setPassword(String password) {
+    public void setPassword(final String password) {
     }
 
     /**
@@ -337,7 +337,7 @@ class KeyedCPDSConnectionFactory
      * @param maxConnLifetimeMillis A value of zero or less indicates an
      *        infinite lifetime. The default value is -1.
      */
-    public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
+    public void setMaxConnLifetimeMillis(final long maxConnLifetimeMillis) {
         this.maxConnLifetimeMillis = maxConnLifetimeMillis;
     }
 
@@ -347,18 +347,18 @@ class KeyedCPDSConnectionFactory
      * with the given user.  This method is not currently used.
      */
     @Override
-    public void closePool(String username) throws SQLException {
+    public void closePool(final String username) throws SQLException {
         try {
             _pool.clear(new UserPassKey(username, null));
-        } catch (Exception ex) {
+        } catch (final Exception ex) {
             throw new SQLException("Error closing connection pool", ex);
         }
     }
 
-    private void validateLifetime(PooledObject<PooledConnectionAndInfo> p)
+    private void validateLifetime(final PooledObject<PooledConnectionAndInfo> p)
             throws Exception {
         if (maxConnLifetimeMillis > 0) {
-            long lifetime = System.currentTimeMillis() - p.getCreateTime();
+            final long lifetime = System.currentTimeMillis() - p.getCreateTime();
             if (lifetime > maxConnLifetimeMillis) {
                 throw new Exception(Utils.getMessage(
                         "connectionFactory.lifetimeExceeded",

==================================================
PerUserPoolDataSourceFactory.java
index e27f700563..b537320df3 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/PerUserPoolDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/PerUserPoolDataSource.java
@@ -102,10 +102,10 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      */
     @Override
     public void close() {
-        for (PooledConnectionManager manager : managers.values()) {
+        for (final PooledConnectionManager manager : managers.values()) {
             try {
               ((CPDSConnectionFactory) manager).getPool().close();
-            } catch (Exception closePoolException) {
+            } catch (final Exception closePoolException) {
                     //ignore and try to close others.
             }
         }
@@ -122,7 +122,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to block
      */
-    public boolean getPerUserBlockWhenExhausted(String key) {
+    public boolean getPerUserBlockWhenExhausted(final String key) {
         Boolean value = null;
         if (perUserBlockWhenExhausted != null) {
             value = perUserBlockWhenExhausted.get(key);
@@ -140,8 +140,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserBlockWhenExhausted(String username,
-            Boolean value) {
+    public void setPerUserBlockWhenExhausted(final String username,
+            final Boolean value) {
         assertInitializationAllowed();
         if (perUserBlockWhenExhausted == null) {
             perUserBlockWhenExhausted = new HashMap<>();
@@ -150,7 +150,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserBlockWhenExhausted(
-            Map<String,Boolean> userDefaultBlockWhenExhausted) {
+            final Map<String,Boolean> userDefaultBlockWhenExhausted) {
         assertInitializationAllowed();
         if (perUserBlockWhenExhausted == null) {
             perUserBlockWhenExhausted = new HashMap<>();
@@ -168,7 +168,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the policy class name
      */
-    public String getPerUserEvictionPolicyClassName(String key) {
+    public String getPerUserEvictionPolicyClassName(final String key) {
         String value = null;
         if (perUserEvictionPolicyClassName != null) {
             value = perUserEvictionPolicyClassName.get(key);
@@ -186,8 +186,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserEvictionPolicyClassName(String username,
-            String value) {
+    public void setPerUserEvictionPolicyClassName(final String username,
+            final String value) {
         assertInitializationAllowed();
         if (perUserEvictionPolicyClassName == null) {
             perUserEvictionPolicyClassName = new HashMap<>();
@@ -196,7 +196,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserEvictionPolicyClassName(
-            Map<String,String> userDefaultEvictionPolicyClassName) {
+            final Map<String,String> userDefaultEvictionPolicyClassName) {
         assertInitializationAllowed();
         if (perUserEvictionPolicyClassName == null) {
             perUserEvictionPolicyClassName = new HashMap<>();
@@ -214,7 +214,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to use LIFO
      */
-    public boolean getPerUserLifo(String key) {
+    public boolean getPerUserLifo(final String key) {
         Boolean value = null;
         if (perUserLifo != null) {
             value = perUserLifo.get(key);
@@ -232,7 +232,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserLifo(String username, Boolean value) {
+    public void setPerUserLifo(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserLifo == null) {
             perUserLifo = new HashMap<>();
@@ -240,7 +240,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserLifo.put(username, value);
     }
 
-    void setPerUserLifo(Map<String,Boolean> userDefaultLifo) {
+    void setPerUserLifo(final Map<String,Boolean> userDefaultLifo) {
         assertInitializationAllowed();
         if (perUserLifo == null) {
             perUserLifo = new HashMap<>();
@@ -258,7 +258,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the maximum idle
      */
-    public int getPerUserMaxIdle(String key) {
+    public int getPerUserMaxIdle(final String key) {
         Integer value = null;
         if (perUserMaxIdle != null) {
             value = perUserMaxIdle.get(key);
@@ -276,7 +276,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserMaxIdle(String username, Integer value) {
+    public void setPerUserMaxIdle(final String username, final Integer value) {
         assertInitializationAllowed();
         if (perUserMaxIdle == null) {
             perUserMaxIdle = new HashMap<>();
@@ -284,7 +284,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserMaxIdle.put(username, value);
     }
 
-    void setPerUserMaxIdle(Map<String,Integer> userDefaultMaxIdle) {
+    void setPerUserMaxIdle(final Map<String,Integer> userDefaultMaxIdle) {
         assertInitializationAllowed();
         if (perUserMaxIdle == null) {
             perUserMaxIdle = new HashMap<>();
@@ -302,7 +302,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the maximum total
      */
-    public int getPerUserMaxTotal(String key) {
+    public int getPerUserMaxTotal(final String key) {
         Integer value = null;
         if (perUserMaxTotal != null) {
             value = perUserMaxTotal.get(key);
@@ -320,7 +320,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserMaxTotal(String username, Integer value) {
+    public void setPerUserMaxTotal(final String username, final Integer value) {
         assertInitializationAllowed();
         if (perUserMaxTotal == null) {
             perUserMaxTotal = new HashMap<>();
@@ -328,7 +328,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserMaxTotal.put(username, value);
     }
 
-    void setPerUserMaxTotal(Map<String,Integer> userDefaultMaxTotal) {
+    void setPerUserMaxTotal(final Map<String,Integer> userDefaultMaxTotal) {
         assertInitializationAllowed();
         if (perUserMaxTotal == null) {
             perUserMaxTotal = new HashMap<>();
@@ -346,7 +346,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the maximum wait time
      */
-    public long getPerUserMaxWaitMillis(String key) {
+    public long getPerUserMaxWaitMillis(final String key) {
         Long value = null;
         if (perUserMaxWaitMillis != null) {
             value = perUserMaxWaitMillis.get(key);
@@ -364,7 +364,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserMaxWaitMillis(String username, Long value) {
+    public void setPerUserMaxWaitMillis(final String username, final Long value) {
         assertInitializationAllowed();
         if (perUserMaxWaitMillis == null) {
             perUserMaxWaitMillis = new HashMap<>();
@@ -373,7 +373,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserMaxWaitMillis(
-            Map<String,Long> userDefaultMaxWaitMillis) {
+            final Map<String,Long> userDefaultMaxWaitMillis) {
         assertInitializationAllowed();
         if (perUserMaxWaitMillis == null) {
             perUserMaxWaitMillis = new HashMap<>();
@@ -391,7 +391,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the minimum idle time for eviction
      */
-    public long getPerUserMinEvictableIdleTimeMillis(String key) {
+    public long getPerUserMinEvictableIdleTimeMillis(final String key) {
         Long value = null;
         if (perUserMinEvictableIdleTimeMillis != null) {
             value = perUserMinEvictableIdleTimeMillis.get(key);
@@ -409,8 +409,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserMinEvictableIdleTimeMillis(String username,
-            Long value) {
+    public void setPerUserMinEvictableIdleTimeMillis(final String username,
+            final Long value) {
         assertInitializationAllowed();
         if (perUserMinEvictableIdleTimeMillis == null) {
             perUserMinEvictableIdleTimeMillis = new HashMap<>();
@@ -419,7 +419,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserMinEvictableIdleTimeMillis(
-            Map<String,Long> userDefaultMinEvictableIdleTimeMillis) {
+            final Map<String,Long> userDefaultMinEvictableIdleTimeMillis) {
         assertInitializationAllowed();
         if (perUserMinEvictableIdleTimeMillis == null) {
             perUserMinEvictableIdleTimeMillis = new HashMap<>();
@@ -438,7 +438,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the minimum idle count
      */
-    public int getPerUserMinIdle(String key) {
+    public int getPerUserMinIdle(final String key) {
         Integer value = null;
         if (perUserMinIdle != null) {
             value = perUserMinIdle.get(key);
@@ -456,7 +456,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserMinIdle(String username, Integer value) {
+    public void setPerUserMinIdle(final String username, final Integer value) {
         assertInitializationAllowed();
         if (perUserMinIdle == null) {
             perUserMinIdle = new HashMap<>();
@@ -464,7 +464,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserMinIdle.put(username, value);
     }
 
-    void setPerUserMinIdle(Map<String,Integer> userDefaultMinIdle) {
+    void setPerUserMinIdle(final Map<String,Integer> userDefaultMinIdle) {
         assertInitializationAllowed();
         if (perUserMinIdle == null) {
             perUserMinIdle = new HashMap<>();
@@ -482,7 +482,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the tests count
      */
-    public int getPerUserNumTestsPerEvictionRun(String key) {
+    public int getPerUserNumTestsPerEvictionRun(final String key) {
         Integer value = null;
         if (perUserNumTestsPerEvictionRun != null) {
             value = perUserNumTestsPerEvictionRun.get(key);
@@ -500,8 +500,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserNumTestsPerEvictionRun(String username,
-            Integer value) {
+    public void setPerUserNumTestsPerEvictionRun(final String username,
+            final Integer value) {
         assertInitializationAllowed();
         if (perUserNumTestsPerEvictionRun == null) {
             perUserNumTestsPerEvictionRun = new HashMap<>();
@@ -510,7 +510,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserNumTestsPerEvictionRun(
-            Map<String,Integer> userDefaultNumTestsPerEvictionRun) {
+            final Map<String,Integer> userDefaultNumTestsPerEvictionRun) {
         assertInitializationAllowed();
         if (perUserNumTestsPerEvictionRun == null) {
             perUserNumTestsPerEvictionRun = new HashMap<>();
@@ -528,7 +528,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the soft minimum idle time for eviction
      */
-    public long getPerUserSoftMinEvictableIdleTimeMillis(String key) {
+    public long getPerUserSoftMinEvictableIdleTimeMillis(final String key) {
         Long value = null;
         if (perUserSoftMinEvictableIdleTimeMillis != null) {
             value = perUserSoftMinEvictableIdleTimeMillis.get(key);
@@ -546,8 +546,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserSoftMinEvictableIdleTimeMillis(String username,
-            Long value) {
+    public void setPerUserSoftMinEvictableIdleTimeMillis(final String username,
+            final Long value) {
         assertInitializationAllowed();
         if (perUserSoftMinEvictableIdleTimeMillis == null) {
             perUserSoftMinEvictableIdleTimeMillis = new HashMap<>();
@@ -556,7 +556,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserSoftMinEvictableIdleTimeMillis(
-            Map<String,Long> userDefaultSoftMinEvictableIdleTimeMillis) {
+            final Map<String,Long> userDefaultSoftMinEvictableIdleTimeMillis) {
         assertInitializationAllowed();
         if (perUserSoftMinEvictableIdleTimeMillis == null) {
             perUserSoftMinEvictableIdleTimeMillis = new HashMap<>();
@@ -574,7 +574,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to test on create
      */
-    public boolean getPerUserTestOnCreate(String key) {
+    public boolean getPerUserTestOnCreate(final String key) {
         Boolean value = null;
         if (perUserTestOnCreate != null) {
             value = perUserTestOnCreate.get(key);
@@ -592,7 +592,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserTestOnCreate(String username, Boolean value) {
+    public void setPerUserTestOnCreate(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserTestOnCreate == null) {
             perUserTestOnCreate = new HashMap<>();
@@ -600,7 +600,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserTestOnCreate.put(username, value);
     }
 
-    void setPerUserTestOnCreate(Map<String,Boolean> userDefaultTestOnCreate) {
+    void setPerUserTestOnCreate(final Map<String,Boolean> userDefaultTestOnCreate) {
         assertInitializationAllowed();
         if (perUserTestOnCreate == null) {
             perUserTestOnCreate = new HashMap<>();
@@ -618,7 +618,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to test on borrow
      */
-    public boolean getPerUserTestOnBorrow(String key) {
+    public boolean getPerUserTestOnBorrow(final String key) {
         Boolean value = null;
         if (perUserTestOnBorrow != null) {
             value = perUserTestOnBorrow.get(key);
@@ -636,7 +636,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserTestOnBorrow(String username, Boolean value) {
+    public void setPerUserTestOnBorrow(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserTestOnBorrow == null) {
             perUserTestOnBorrow = new HashMap<>();
@@ -644,7 +644,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserTestOnBorrow.put(username, value);
     }
 
-    void setPerUserTestOnBorrow(Map<String,Boolean> userDefaultTestOnBorrow) {
+    void setPerUserTestOnBorrow(final Map<String,Boolean> userDefaultTestOnBorrow) {
         assertInitializationAllowed();
         if (perUserTestOnBorrow == null) {
             perUserTestOnBorrow = new HashMap<>();
@@ -662,7 +662,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to test on return
      */
-    public boolean getPerUserTestOnReturn(String key) {
+    public boolean getPerUserTestOnReturn(final String key) {
         Boolean value = null;
         if (perUserTestOnReturn != null) {
             value = perUserTestOnReturn.get(key);
@@ -680,7 +680,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserTestOnReturn(String username, Boolean value) {
+    public void setPerUserTestOnReturn(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserTestOnReturn == null) {
             perUserTestOnReturn = new HashMap<>();
@@ -689,7 +689,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserTestOnReturn(
-            Map<String,Boolean> userDefaultTestOnReturn) {
+            final Map<String,Boolean> userDefaultTestOnReturn) {
         assertInitializationAllowed();
         if (perUserTestOnReturn == null) {
             perUserTestOnReturn = new HashMap<>();
@@ -707,7 +707,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to test while idle
      */
-    public boolean getPerUserTestWhileIdle(String key) {
+    public boolean getPerUserTestWhileIdle(final String key) {
         Boolean value = null;
         if (perUserTestWhileIdle != null) {
             value = perUserTestWhileIdle.get(key);
@@ -725,7 +725,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserTestWhileIdle(String username, Boolean value) {
+    public void setPerUserTestWhileIdle(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserTestWhileIdle == null) {
             perUserTestWhileIdle = new HashMap<>();
@@ -734,7 +734,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserTestWhileIdle(
-            Map<String,Boolean> userDefaultTestWhileIdle) {
+            final Map<String,Boolean> userDefaultTestWhileIdle) {
         assertInitializationAllowed();
         if (perUserTestWhileIdle == null) {
             perUserTestWhileIdle = new HashMap<>();
@@ -752,7 +752,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return time between eviction runs
      */
-    public long getPerUserTimeBetweenEvictionRunsMillis(String key) {
+    public long getPerUserTimeBetweenEvictionRunsMillis(final String key) {
         Long value = null;
         if (perUserTimeBetweenEvictionRunsMillis != null) {
             value = perUserTimeBetweenEvictionRunsMillis.get(key);
@@ -770,8 +770,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserTimeBetweenEvictionRunsMillis(String username,
-            Long value) {
+    public void setPerUserTimeBetweenEvictionRunsMillis(final String username,
+            final Long value) {
         assertInitializationAllowed();
         if (perUserTimeBetweenEvictionRunsMillis == null) {
             perUserTimeBetweenEvictionRunsMillis = new HashMap<>();
@@ -780,7 +780,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserTimeBetweenEvictionRunsMillis(
-            Map<String,Long> userDefaultTimeBetweenEvictionRunsMillis ) {
+            final Map<String,Long> userDefaultTimeBetweenEvictionRunsMillis ) {
         assertInitializationAllowed();
         if (perUserTimeBetweenEvictionRunsMillis == null) {
             perUserTimeBetweenEvictionRunsMillis = new HashMap<>();
@@ -798,7 +798,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> to commit automatically
      */
-    public Boolean getPerUserDefaultAutoCommit(String key) {
+    public Boolean getPerUserDefaultAutoCommit(final String key) {
         Boolean value = null;
         if (perUserDefaultAutoCommit != null) {
             value = perUserDefaultAutoCommit.get(key);
@@ -812,7 +812,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserDefaultAutoCommit(String username, Boolean value) {
+    public void setPerUserDefaultAutoCommit(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserDefaultAutoCommit == null) {
             perUserDefaultAutoCommit = new HashMap<>();
@@ -820,7 +820,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserDefaultAutoCommit.put(username, value);
     }
 
-    void setPerUserDefaultAutoCommit(Map<String,Boolean> userDefaultAutoCommit) {
+    void setPerUserDefaultAutoCommit(final Map<String,Boolean> userDefaultAutoCommit) {
         assertInitializationAllowed();
         if (perUserDefaultAutoCommit == null) {
             perUserDefaultAutoCommit = new HashMap<>();
@@ -837,7 +837,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return <code>true</code> is read only by default
      */
-    public Boolean getPerUserDefaultReadOnly(String key) {
+    public Boolean getPerUserDefaultReadOnly(final String key) {
         Boolean value = null;
         if (perUserDefaultReadOnly != null) {
             value = perUserDefaultReadOnly.get(key);
@@ -851,7 +851,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserDefaultReadOnly(String username, Boolean value) {
+    public void setPerUserDefaultReadOnly(final String username, final Boolean value) {
         assertInitializationAllowed();
         if (perUserDefaultReadOnly == null) {
             perUserDefaultReadOnly = new HashMap<>();
@@ -859,7 +859,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         perUserDefaultReadOnly.put(username, value);
     }
 
-    void setPerUserDefaultReadOnly(Map<String,Boolean> userDefaultReadOnly) {
+    void setPerUserDefaultReadOnly(final Map<String,Boolean> userDefaultReadOnly) {
         assertInitializationAllowed();
         if (perUserDefaultReadOnly == null) {
             perUserDefaultReadOnly = new HashMap<>();
@@ -876,7 +876,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param key The user
      * @return the default transaction isolation
      */
-    public Integer getPerUserDefaultTransactionIsolation(String key) {
+    public Integer getPerUserDefaultTransactionIsolation(final String key) {
         Integer value = null;
         if (perUserDefaultTransactionIsolation != null) {
             value = perUserDefaultTransactionIsolation.get(key);
@@ -890,8 +890,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @param value The value
      */
-    public void setPerUserDefaultTransactionIsolation(String username,
-            Integer value) {
+    public void setPerUserDefaultTransactionIsolation(final String username,
+            final Integer value) {
         assertInitializationAllowed();
         if (perUserDefaultTransactionIsolation == null) {
             perUserDefaultTransactionIsolation = new HashMap<>();
@@ -900,7 +900,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     void setPerUserDefaultTransactionIsolation(
-            Map<String,Integer> userDefaultTransactionIsolation) {
+            final Map<String,Integer> userDefaultTransactionIsolation) {
         assertInitializationAllowed();
         if (perUserDefaultTransactionIsolation == null) {
             perUserDefaultTransactionIsolation = new HashMap<>();
@@ -925,8 +925,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @return the number of active connections in the pool for a given user.
      */
-    public int getNumActive(String username) {
-        ObjectPool<PooledConnectionAndInfo> pool =
+    public int getNumActive(final String username) {
+        final ObjectPool<PooledConnectionAndInfo> pool =
             getPool(getPoolKey(username));
         return pool == null ? 0 : pool.getNumActive();
     }
@@ -942,8 +942,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username The user
      * @return the number of idle connections in the pool for a given user.
      */
-    public int getNumIdle(String username) {
-        ObjectPool<PooledConnectionAndInfo> pool =
+    public int getNumIdle(final String username) {
+        final ObjectPool<PooledConnectionAndInfo> pool =
             getPool(getPoolKey(username));
         return pool == null ? 0 : pool.getNumIdle();
     }
@@ -954,7 +954,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
 
     @Override
     protected PooledConnectionAndInfo
-        getPooledConnectionAndInfo(String username, String password)
+        getPooledConnectionAndInfo(final String username, final String password)
         throws SQLException {
 
         final PoolKey key = getPoolKey(username);
@@ -966,7 +966,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
                 try {
                     registerPool(username, password);
                     manager = managers.get(key);
-                } catch (NamingException e) {
+                } catch (final NamingException e) {
                     throw new SQLException("RegisterPool failed", e);
                 }
             }
@@ -977,15 +977,15 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
         try {
             info = pool.borrowObject();
         }
-        catch (NoSuchElementException ex) {
+        catch (final NoSuchElementException ex) {
             throw new SQLException(
                     "Could not retrieve connection info from pool", ex);
         }
-        catch (Exception e) {
+        catch (final Exception e) {
             // See if failure is due to CPDSConnectionFactory authentication failure
             try {
                 testCPDS(username, password);
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new SQLException(
                         "Could not retrieve connection info from pool", ex);
             }
@@ -997,12 +997,12 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
             try {
                 registerPool(username, password);
                 pool = getPool(key);
-            } catch (NamingException ne) {
+            } catch (final NamingException ne) {
                 throw new SQLException("RegisterPool failed", ne);
             }
             try {
                 info = pool.borrowObject();
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new SQLException(
                         "Could not retrieve connection info from pool", ex);
             }
@@ -1011,11 +1011,11 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     @Override
-    protected void setupDefaults(Connection con, String username)
+    protected void setupDefaults(final Connection con, final String username)
         throws SQLException {
         Boolean defaultAutoCommit = isDefaultAutoCommit();
         if (username != null) {
-            Boolean userMax = getPerUserDefaultAutoCommit(username);
+            final Boolean userMax = getPerUserDefaultAutoCommit(username);
             if (userMax != null) {
                 defaultAutoCommit = userMax;
             }
@@ -1023,7 +1023,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
 
         Boolean defaultReadOnly = isDefaultReadOnly();
         if (username != null) {
-            Boolean userMax = getPerUserDefaultReadOnly(username);
+            final Boolean userMax = getPerUserDefaultReadOnly(username);
             if (userMax != null) {
                 defaultReadOnly = userMax;
             }
@@ -1031,7 +1031,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
 
         int defaultTransactionIsolation = getDefaultTransactionIsolation();
         if (username != null) {
-            Integer userMax = getPerUserDefaultTransactionIsolation(username);
+            final Integer userMax = getPerUserDefaultTransactionIsolation(username);
             if (userMax != null) {
                 defaultTransactionIsolation = userMax.intValue();
             }
@@ -1053,7 +1053,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
     }
 
     @Override
-    protected PooledConnectionManager getConnectionManager(UserPassKey upkey) {
+    protected PooledConnectionManager getConnectionManager(final UserPassKey upkey) {
         return managers.get(getPoolKey(upkey.getUsername()));
     }
 
@@ -1063,7 +1063,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      */
     @Override
     public Reference getReference() throws NamingException {
-        Reference ref = new Reference(getClass().getName(),
+        final Reference ref = new Reference(getClass().getName(),
                 PerUserPoolDataSourceFactory.class.getName(), null);
         ref.add(new StringRefAddr("instanceKey", getInstanceKey()));
         return ref;
@@ -1075,25 +1075,25 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @param username  User name
      * @return the pool key
      */
-    private PoolKey getPoolKey(String username) {
+    private PoolKey getPoolKey(final String username) {
         return new PoolKey(getDataSourceName(), username);
     }
 
-    private synchronized void registerPool(String username, String password)
+    private synchronized void registerPool(final String username, final String password)
             throws NamingException, SQLException {
 
-        ConnectionPoolDataSource cpds = testCPDS(username, password);
+        final ConnectionPoolDataSource cpds = testCPDS(username, password);
 
         // Set up the factory we will use (passing the pool associates
         // the factory with the pool, so we do not have to do so
         // explicitly)
-        CPDSConnectionFactory factory = new CPDSConnectionFactory(cpds,
+        final CPDSConnectionFactory factory = new CPDSConnectionFactory(cpds,
                 getValidationQuery(), getValidationQueryTimeout(),
                 isRollbackAfterValidation(), username, password);
         factory.setMaxConnLifetimeMillis(getMaxConnLifetimeMillis());
 
         // Create an object pool to contain our PooledConnections
-        GenericObjectPool<PooledConnectionAndInfo> pool =
+        final GenericObjectPool<PooledConnectionAndInfo> pool =
                 new GenericObjectPool<>(factory);
         factory.setPool(pool);
         pool.setBlockWhenExhausted(getPerUserBlockWhenExhausted(username));
@@ -1119,7 +1119,7 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
 
         pool.setSwallowedExceptionListener(new SwallowedExceptionLogger(log));
 
-        Object old = managers.put(getPoolKey(username), factory);
+        final Object old = managers.put(getPoolKey(username), factory);
         if (old != null) {
             throw new IllegalStateException("Pool already contains an entry for this user/password: " + username);
         }
@@ -1132,17 +1132,17 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @exception IOException if an error occurs
      * @exception ClassNotFoundException if an error occurs
      */
-    private void readObject(ObjectInputStream in)
+    private void readObject(final ObjectInputStream in)
         throws IOException, ClassNotFoundException {
         try
         {
             in.defaultReadObject();
-            PerUserPoolDataSource oldDS = (PerUserPoolDataSource)
+            final PerUserPoolDataSource oldDS = (PerUserPoolDataSource)
                 new PerUserPoolDataSourceFactory()
                     .getObjectInstance(getReference(), null, null, null);
             this.managers = oldDS.managers;
         }
-        catch (NamingException e)
+        catch (final NamingException e)
         {
             throw new IOException("NamingException: " + e);
         }
@@ -1155,8 +1155,8 @@ public class PerUserPoolDataSource extends InstanceKeyDataSource {
      * @return the GenericObjectPool pooling connections for the username and datasource
      * specified by the PoolKey
      */
-    private ObjectPool<PooledConnectionAndInfo> getPool(PoolKey key) {
-        CPDSConnectionFactory mgr = (CPDSConnectionFactory) managers.get(key);
+    private ObjectPool<PooledConnectionAndInfo> getPool(final PoolKey key) {
+        final CPDSConnectionFactory mgr = (CPDSConnectionFactory) managers.get(key);
         return mgr == null ? null : mgr.getPool();
     }
 }

==================================================
PoolKey.java
index d249cedddc..d45396fa9d 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/PerUserPoolDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/PerUserPoolDataSourceFactory.java
@@ -35,15 +35,15 @@ public class PerUserPoolDataSourceFactory
         PerUserPoolDataSource.class.getName();
 
     @Override
-    protected boolean isCorrectClass(String className) {
+    protected boolean isCorrectClass(final String className) {
         return PER_USER_POOL_CLASSNAME.equals(className);
     }
 
     @SuppressWarnings("unchecked") // Avoid warnings on deserialization
     @Override
-    protected InstanceKeyDataSource getNewInstance(Reference ref)
+    protected InstanceKeyDataSource getNewInstance(final Reference ref)
         throws IOException, ClassNotFoundException {
-        PerUserPoolDataSource pupds =  new PerUserPoolDataSource();
+        final PerUserPoolDataSource pupds =  new PerUserPoolDataSource();
         RefAddr ra = ref.get("defaultMaxTotal");
         if (ra != null && ra.getContent() != null) {
             pupds.setDefaultMaxTotal(
@@ -64,42 +64,42 @@ public class PerUserPoolDataSourceFactory
 
         ra = ref.get("perUserDefaultAutoCommit");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             pupds.setPerUserDefaultAutoCommit(
                     (Map<String,Boolean>) deserialize(serialized));
         }
 
         ra = ref.get("perUserDefaultTransactionIsolation");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             pupds.setPerUserDefaultTransactionIsolation(
                     (Map<String,Integer>) deserialize(serialized));
         }
 
         ra = ref.get("perUserMaxTotal");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             pupds.setPerUserMaxTotal(
                     (Map<String,Integer>) deserialize(serialized));
         }
 
         ra = ref.get("perUserMaxIdle");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             pupds.setPerUserMaxIdle(
                     (Map<String,Integer>) deserialize(serialized));
         }
 
         ra = ref.get("perUserMaxWaitMillis");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             pupds.setPerUserMaxWaitMillis(
                     (Map<String,Long>) deserialize(serialized));
         }
 
         ra = ref.get("perUserDefaultReadOnly");
         if (ra != null  && ra.getContent() != null) {
-            byte[] serialized = (byte[]) ra.getContent();
+            final byte[] serialized = (byte[]) ra.getContent();
             pupds.setPerUserDefaultReadOnly(
                     (Map<String,Boolean>) deserialize(serialized));
         }

==================================================
PooledConnectionAndInfo.java
index 4a89155a04..8dcf148386 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/PoolKey.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/PoolKey.java
@@ -28,15 +28,15 @@ class PoolKey implements Serializable {
     private final String datasourceName;
     private final String username;
 
-    PoolKey(String datasourceName, String username) {
+    PoolKey(final String datasourceName, final String username) {
         this.datasourceName = datasourceName;
         this.username = username;
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj instanceof PoolKey) {
-            PoolKey pk = (PoolKey)obj;
+            final PoolKey pk = (PoolKey)obj;
             return (null == datasourceName ? null == pk.datasourceName : datasourceName.equals(pk.datasourceName)) &&
                 (null == username ? null == pk.username : username.equals(pk.username));
         }
@@ -57,7 +57,7 @@ class PoolKey implements Serializable {
 
     @Override
     public String toString() {
-        StringBuffer sb = new StringBuffer(50);
+        final StringBuffer sb = new StringBuffer(50);
         sb.append("PoolKey(");
         sb.append(username).append(", ").append(datasourceName);
         sb.append(')');

==================================================
SharedPoolDataSource.java
index db08d371b4..6475986ff3 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/PooledConnectionAndInfo.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/PooledConnectionAndInfo.java
@@ -31,7 +31,7 @@ final class PooledConnectionAndInfo {
     private final String username;
     private final UserPassKey upkey;
 
-    PooledConnectionAndInfo(PooledConnection pc, String username, String password) {
+    PooledConnectionAndInfo(final PooledConnection pc, final String username, final String password) {
         this.pooledConnection = pc;
         this.username = username;
         this.password = password;

==================================================
SharedPoolDataSourceFactory.java
index 74f9f85e8f..f8df12b53c 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/SharedPoolDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/SharedPoolDataSource.java
@@ -91,7 +91,7 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
      * Set {@link GenericKeyedObjectPool#getMaxTotal()} for this pool.
      * @param maxTotal The max total value
      */
-    public void setMaxTotal(int maxTotal) {
+    public void setMaxTotal(final int maxTotal) {
         assertInitializationAllowed();
         this.maxTotal = maxTotal;
     }
@@ -119,14 +119,14 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
 
     @Override
     protected PooledConnectionAndInfo
-        getPooledConnectionAndInfo(String username, String password)
+        getPooledConnectionAndInfo(final String username, final String password)
         throws SQLException {
 
         synchronized(this) {
             if (pool == null) {
                 try {
                     registerPool(username, password);
-                } catch (NamingException e) {
+                } catch (final NamingException e) {
                     throw new SQLException("RegisterPool failed", e);
                 }
             }
@@ -134,12 +134,12 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
 
         PooledConnectionAndInfo info = null;
 
-        UserPassKey key = new UserPassKey(username, password);
+        final UserPassKey key = new UserPassKey(username, password);
 
         try {
             info = pool.borrowObject(key);
         }
-        catch (Exception e) {
+        catch (final Exception e) {
             throw new SQLException(
                     "Could not retrieve connection info from pool", e);
         }
@@ -147,7 +147,7 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
     }
 
     @Override
-    protected PooledConnectionManager getConnectionManager(UserPassKey upkey)  {
+    protected PooledConnectionManager getConnectionManager(final UserPassKey upkey)  {
         return factory;
     }
 
@@ -157,23 +157,23 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
      */
     @Override
     public Reference getReference() throws NamingException {
-        Reference ref = new Reference(getClass().getName(),
+        final Reference ref = new Reference(getClass().getName(),
             SharedPoolDataSourceFactory.class.getName(), null);
         ref.add(new StringRefAddr("instanceKey", getInstanceKey()));
         return ref;
     }
 
-    private void registerPool(String username, String password)
+    private void registerPool(final String username, final String password)
             throws NamingException, SQLException {
 
-        ConnectionPoolDataSource cpds = testCPDS(username, password);
+        final ConnectionPoolDataSource cpds = testCPDS(username, password);
 
         // Create an object pool to contain our PooledConnections
         factory = new KeyedCPDSConnectionFactory(cpds, getValidationQuery(),
                 getValidationQueryTimeout(), isRollbackAfterValidation());
         factory.setMaxConnLifetimeMillis(getMaxConnLifetimeMillis());
 
-        GenericKeyedObjectPoolConfig config =
+        final GenericKeyedObjectPoolConfig config =
                 new GenericKeyedObjectPoolConfig();
         config.setBlockWhenExhausted(getDefaultBlockWhenExhausted());
         config.setEvictionPolicyClassName(getDefaultEvictionPolicyClassName());
@@ -195,26 +195,26 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
         config.setTimeBetweenEvictionRunsMillis(
                 getDefaultTimeBetweenEvictionRunsMillis());
 
-        KeyedObjectPool<UserPassKey,PooledConnectionAndInfo> tmpPool =
+        final KeyedObjectPool<UserPassKey,PooledConnectionAndInfo> tmpPool =
                 new GenericKeyedObjectPool<>(factory, config);
         factory.setPool(tmpPool);
         pool = tmpPool;
     }
 
     @Override
-    protected void setupDefaults(Connection con, String username) throws SQLException {
-        Boolean defaultAutoCommit = isDefaultAutoCommit();
+    protected void setupDefaults(final Connection con, final String username) throws SQLException {
+        final Boolean defaultAutoCommit = isDefaultAutoCommit();
         if (defaultAutoCommit != null &&
                 con.getAutoCommit() != defaultAutoCommit.booleanValue()) {
             con.setAutoCommit(defaultAutoCommit.booleanValue());
         }
 
-        int defaultTransactionIsolation = getDefaultTransactionIsolation();
+        final int defaultTransactionIsolation = getDefaultTransactionIsolation();
         if (defaultTransactionIsolation != UNKNOWN_TRANSACTIONISOLATION) {
             con.setTransactionIsolation(defaultTransactionIsolation);
         }
 
-        Boolean defaultReadOnly = isDefaultReadOnly();
+        final Boolean defaultReadOnly = isDefaultReadOnly();
         if (defaultReadOnly != null &&
                 con.isReadOnly() != defaultReadOnly.booleanValue()) {
             con.setReadOnly(defaultReadOnly.booleanValue());
@@ -228,17 +228,17 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
      * @exception IOException if an error occurs
      * @exception ClassNotFoundException if an error occurs
      */
-    private void readObject(ObjectInputStream in)
+    private void readObject(final ObjectInputStream in)
         throws IOException, ClassNotFoundException {
         try
         {
             in.defaultReadObject();
-            SharedPoolDataSource oldDS = (SharedPoolDataSource)
+            final SharedPoolDataSource oldDS = (SharedPoolDataSource)
                 new SharedPoolDataSourceFactory()
                     .getObjectInstance(getReference(), null, null, null);
             this.pool = oldDS.pool;
         }
-        catch (NamingException e)
+        catch (final NamingException e)
         {
             throw new IOException("NamingException: " + e);
         }

==================================================
UserPassKey.java
index 437e76ba28..4ab921fb15 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/SharedPoolDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/SharedPoolDataSourceFactory.java
@@ -31,14 +31,14 @@ public class SharedPoolDataSourceFactory
         SharedPoolDataSource.class.getName();
 
     @Override
-    protected boolean isCorrectClass(String className) {
+    protected boolean isCorrectClass(final String className) {
         return SHARED_POOL_CLASSNAME.equals(className);
     }
 
     @Override
-    protected InstanceKeyDataSource getNewInstance(Reference ref) {
-        SharedPoolDataSource spds = new SharedPoolDataSource();
-        RefAddr ra = ref.get("maxTotal");
+    protected InstanceKeyDataSource getNewInstance(final Reference ref) {
+        final SharedPoolDataSource spds = new SharedPoolDataSource();
+        final RefAddr ra = ref.get("maxTotal");
         if (ra != null && ra.getContent() != null) {
             spds.setMaxTotal(
                 Integer.parseInt(ra.getContent().toString()));

==================================================
