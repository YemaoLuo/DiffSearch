bf09aa74650461b433ae6b52418e0726e6a32417
==================================================
Code clean-up. Add braces for clarity. Enable check now all are fixed.
==================================================
Mark Thomas
==================================================
Wed May 26 23:41:15 2021 +0100
==================================================
ELParser.java
Code clean-up. Add braces for clarity. Enable check now all are fixed.

Hopefully final test of the CI.


==================================================
ELParserTokenManager.java
index 1d9783ff4a..f04518a736 100644
--- a/java/org/apache/el/parser/ELParser.java
+++ b/java/org/apache/el/parser/ELParser.java
@@ -56,7 +56,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
       jj_consume_token(0);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
-                                   {if (true) return jjtn000;}
+                                   {if (true) {
+                                    return jjtn000;
+                                  }}
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
@@ -65,12 +67,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -121,12 +129,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -155,12 +169,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -205,12 +225,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
-                                   {if (true) throw (RuntimeException)jjte001;}
+                                   {if (true) {
+                                    throw (RuntimeException)jjte001;
+                                  }}
                                  }
                                  if (jjte001 instanceof ParseException) {
-                                   {if (true) throw (ParseException)jjte001;}
+                                   {if (true) {
+                                    throw (ParseException)jjte001;
+                                  }}
                                  }
-                                 {if (true) throw (Error)jjte001;}
+                                 {if (true) {
+                                  throw (Error)jjte001;
+                                }}
       } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
@@ -263,12 +289,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
-                                         {if (true) throw (RuntimeException)jjte001;}
+                                         {if (true) {
+                                          throw (RuntimeException)jjte001;
+                                        }}
                                        }
                                        if (jjte001 instanceof ParseException) {
-                                         {if (true) throw (ParseException)jjte001;}
+                                         {if (true) {
+                                          throw (ParseException)jjte001;
+                                        }}
                                        }
-                                       {if (true) throw (Error)jjte001;}
+                                       {if (true) {
+                                        throw (Error)jjte001;
+                                      }}
           } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
@@ -329,12 +361,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -393,12 +431,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -466,12 +510,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -508,12 +558,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
-                                                           {if (true) throw (RuntimeException)jjte001;}
+                                                           {if (true) {
+                                                            throw (RuntimeException)jjte001;
+                                                          }}
                                                          }
                                                          if (jjte001 instanceof ParseException) {
-                                                           {if (true) throw (ParseException)jjte001;}
+                                                           {if (true) {
+                                                            throw (ParseException)jjte001;
+                                                          }}
                                                          }
-                                                         {if (true) throw (Error)jjte001;}
+                                                         {if (true) {
+                                                          throw (Error)jjte001;
+                                                        }}
       } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  3);
@@ -564,12 +620,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
-                             {if (true) throw (RuntimeException)jjte001;}
+                             {if (true) {
+                              throw (RuntimeException)jjte001;
+                            }}
                            }
                            if (jjte001 instanceof ParseException) {
-                             {if (true) throw (ParseException)jjte001;}
+                             {if (true) {
+                              throw (ParseException)jjte001;
+                            }}
                            }
-                           {if (true) throw (Error)jjte001;}
+                           {if (true) {
+                            throw (Error)jjte001;
+                          }}
       } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
@@ -620,12 +682,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
-                                    {if (true) throw (RuntimeException)jjte001;}
+                                    {if (true) {
+                                      throw (RuntimeException)jjte001;
+                                    }}
                                   }
                                   if (jjte001 instanceof ParseException) {
-                                    {if (true) throw (ParseException)jjte001;}
+                                    {if (true) {
+                                      throw (ParseException)jjte001;
+                                    }}
                                   }
-                                  {if (true) throw (Error)jjte001;}
+                                  {if (true) {
+                                    throw (Error)jjte001;
+                                  }}
       } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
@@ -681,12 +749,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
-                           {if (true) throw (RuntimeException)jjte001;}
+                           {if (true) {
+                            throw (RuntimeException)jjte001;
+                          }}
                          }
                          if (jjte001 instanceof ParseException) {
-                           {if (true) throw (ParseException)jjte001;}
+                           {if (true) {
+                            throw (ParseException)jjte001;
+                          }}
                          }
-                         {if (true) throw (Error)jjte001;}
+                         {if (true) {
+                          throw (Error)jjte001;
+                        }}
         } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
@@ -720,12 +794,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
-                           {if (true) throw (RuntimeException)jjte002;}
+                           {if (true) {
+                            throw (RuntimeException)jjte002;
+                          }}
                          }
                          if (jjte002 instanceof ParseException) {
-                           {if (true) throw (ParseException)jjte002;}
+                           {if (true) {
+                            throw (ParseException)jjte002;
+                          }}
                          }
-                         {if (true) throw (Error)jjte002;}
+                         {if (true) {
+                          throw (Error)jjte002;
+                        }}
         } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
@@ -791,12 +871,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
-                           {if (true) throw (RuntimeException)jjte001;}
+                           {if (true) {
+                            throw (RuntimeException)jjte001;
+                          }}
                          }
                          if (jjte001 instanceof ParseException) {
-                           {if (true) throw (ParseException)jjte001;}
+                           {if (true) {
+                            throw (ParseException)jjte001;
+                          }}
                          }
-                         {if (true) throw (Error)jjte001;}
+                         {if (true) {
+                          throw (Error)jjte001;
+                        }}
         } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
@@ -830,12 +916,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
-                           {if (true) throw (RuntimeException)jjte002;}
+                           {if (true) {
+                            throw (RuntimeException)jjte002;
+                          }}
                          }
                          if (jjte002 instanceof ParseException) {
-                           {if (true) throw (ParseException)jjte002;}
+                           {if (true) {
+                            throw (ParseException)jjte002;
+                          }}
                          }
-                         {if (true) throw (Error)jjte002;}
+                         {if (true) {
+                          throw (Error)jjte002;
+                        }}
         } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
@@ -869,12 +961,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
-                           {if (true) throw (RuntimeException)jjte003;}
+                           {if (true) {
+                            throw (RuntimeException)jjte003;
+                          }}
                          }
                          if (jjte003 instanceof ParseException) {
-                           {if (true) throw (ParseException)jjte003;}
+                           {if (true) {
+                            throw (ParseException)jjte003;
+                          }}
                          }
-                         {if (true) throw (Error)jjte003;}
+                         {if (true) {
+                          throw (Error)jjte003;
+                        }}
         } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
@@ -908,12 +1006,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
-                           {if (true) throw (RuntimeException)jjte004;}
+                           {if (true) {
+                            throw (RuntimeException)jjte004;
+                          }}
                          }
                          if (jjte004 instanceof ParseException) {
-                           {if (true) throw (ParseException)jjte004;}
+                           {if (true) {
+                            throw (ParseException)jjte004;
+                          }}
                          }
-                         {if (true) throw (Error)jjte004;}
+                         {if (true) {
+                          throw (Error)jjte004;
+                        }}
         } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
@@ -959,12 +1063,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
-                      {if (true) throw (RuntimeException)jjte001;}
+                      {if (true) {
+                        throw (RuntimeException)jjte001;
+                      }}
                     }
                     if (jjte001 instanceof ParseException) {
-                      {if (true) throw (ParseException)jjte001;}
+                      {if (true) {
+                        throw (ParseException)jjte001;
+                      }}
                     }
-                    {if (true) throw (Error)jjte001;}
+                    {if (true) {
+                      throw (Error)jjte001;
+                    }}
       } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
@@ -1006,12 +1116,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
-                    {if (true) throw (RuntimeException)jjte001;}
+                    {if (true) {
+                      throw (RuntimeException)jjte001;
+                    }}
                   }
                   if (jjte001 instanceof ParseException) {
-                    {if (true) throw (ParseException)jjte001;}
+                    {if (true) {
+                      throw (ParseException)jjte001;
+                    }}
                   }
-                  {if (true) throw (Error)jjte001;}
+                  {if (true) {
+                    throw (Error)jjte001;
+                  }}
         } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
@@ -1033,12 +1149,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
-                     {if (true) throw (RuntimeException)jjte002;}
+                     {if (true) {
+                      throw (RuntimeException)jjte002;
+                    }}
                    }
                    if (jjte002 instanceof ParseException) {
-                     {if (true) throw (ParseException)jjte002;}
+                     {if (true) {
+                      throw (ParseException)jjte002;
+                    }}
                    }
-                   {if (true) throw (Error)jjte002;}
+                   {if (true) {
+                    throw (Error)jjte002;
+                  }}
         } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
@@ -1089,12 +1211,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
-                    {if (true) throw (RuntimeException)jjte001;}
+                    {if (true) {
+                      throw (RuntimeException)jjte001;
+                    }}
                   }
                   if (jjte001 instanceof ParseException) {
-                    {if (true) throw (ParseException)jjte001;}
+                    {if (true) {
+                      throw (ParseException)jjte001;
+                    }}
                   }
-                  {if (true) throw (Error)jjte001;}
+                  {if (true) {
+                    throw (Error)jjte001;
+                  }}
         } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
@@ -1128,12 +1256,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                              jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
-                             {if (true) throw (RuntimeException)jjte002;}
+                             {if (true) {
+                              throw (RuntimeException)jjte002;
+                            }}
                            }
                            if (jjte002 instanceof ParseException) {
-                             {if (true) throw (ParseException)jjte002;}
+                             {if (true) {
+                              throw (ParseException)jjte002;
+                            }}
                            }
-                           {if (true) throw (Error)jjte002;}
+                           {if (true) {
+                            throw (Error)jjte002;
+                          }}
         } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  2);
@@ -1167,12 +1301,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                              jjtree.popNode();
                            }
                            if (jjte003 instanceof RuntimeException) {
-                             {if (true) throw (RuntimeException)jjte003;}
+                             {if (true) {
+                              throw (RuntimeException)jjte003;
+                            }}
                            }
                            if (jjte003 instanceof ParseException) {
-                             {if (true) throw (ParseException)jjte003;}
+                             {if (true) {
+                              throw (ParseException)jjte003;
+                            }}
                            }
-                           {if (true) throw (Error)jjte003;}
+                           {if (true) {
+                            throw (Error)jjte003;
+                          }}
         } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003,  2);
@@ -1208,12 +1348,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
-                    {if (true) throw (RuntimeException)jjte001;}
+                    {if (true) {
+                      throw (RuntimeException)jjte001;
+                    }}
                   }
                   if (jjte001 instanceof ParseException) {
-                    {if (true) throw (ParseException)jjte001;}
+                    {if (true) {
+                      throw (ParseException)jjte001;
+                    }}
                   }
-                  {if (true) throw (Error)jjte001;}
+                  {if (true) {
+                    throw (Error)jjte001;
+                  }}
       } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
@@ -1247,12 +1393,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
-                            {if (true) throw (RuntimeException)jjte002;}
+                            {if (true) {
+                              throw (RuntimeException)jjte002;
+                            }}
                           }
                           if (jjte002 instanceof ParseException) {
-                            {if (true) throw (ParseException)jjte002;}
+                            {if (true) {
+                              throw (ParseException)jjte002;
+                            }}
                           }
-                          {if (true) throw (Error)jjte002;}
+                          {if (true) {
+                            throw (Error)jjte002;
+                          }}
       } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
@@ -1274,12 +1426,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
-                    {if (true) throw (RuntimeException)jjte003;}
+                    {if (true) {
+                      throw (RuntimeException)jjte003;
+                    }}
                   }
                   if (jjte003 instanceof ParseException) {
-                    {if (true) throw (ParseException)jjte003;}
+                    {if (true) {
+                      throw (ParseException)jjte003;
+                    }}
                   }
-                  {if (true) throw (Error)jjte003;}
+                  {if (true) {
+                    throw (Error)jjte003;
+                  }}
       } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
@@ -1336,12 +1494,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte001;}
+        {if (true) {
+          throw (RuntimeException)jjte001;
+        }}
       }
       if (jjte001 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte001;}
+        {if (true) {
+          throw (ParseException)jjte001;
+        }}
       }
-      {if (true) throw (Error)jjte001;}
+      {if (true) {
+        throw (Error)jjte001;
+      }}
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
@@ -1446,12 +1610,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -1512,12 +1682,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -1627,12 +1803,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -1690,12 +1872,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -1758,12 +1946,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -1788,12 +1982,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -1869,12 +2069,18 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
-        {if (true) throw (RuntimeException)jjte000;}
+        {if (true) {
+          throw (RuntimeException)jjte000;
+        }}
       }
       if (jjte000 instanceof ParseException) {
-        {if (true) throw (ParseException)jjte000;}
+        {if (true) {
+          throw (ParseException)jjte000;
+        }}
       }
-      {if (true) throw (Error)jjte000;}
+      {if (true) {
+        throw (Error)jjte000;
+      }}
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
@@ -2090,18 +2296,24 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(39)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(40)) return true;
+    if (jj_scan_token(40)) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_30() {
-    if (jj_3R_22()) return true;
+    if (jj_3R_22()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_40() {
-    if (jj_3R_44()) return true;
+    if (jj_3R_44()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2111,23 +2323,33 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_107() {
-    if (jj_3R_36()) return true;
+    if (jj_3R_36()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_105() {
-    if (jj_3R_107()) return true;
+    if (jj_3R_107()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_43() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_38()) return true;
+    if (jj_scan_token(COMMA)) {
+      return true;
+    }
+    if (jj_3R_38()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_34() {
-    if (jj_3R_40()) return true;
+    if (jj_3R_40()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2137,7 +2359,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_37() {
-    if (jj_scan_token(COMMA)) return true;
+    if (jj_scan_token(COMMA)) {
+      return true;
+    }
     return false;
   }
 
@@ -2146,27 +2370,39 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(41)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(42)) return true;
+    if (jj_scan_token(42)) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_99() {
-    if (jj_scan_token(START_SET_OR_MAP)) return true;
+    if (jj_scan_token(START_SET_OR_MAP)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_105()) jj_scanpos = xsp;
-    if (jj_scan_token(RBRACE)) return true;
+    if (jj_3R_105()) {
+      jj_scanpos = xsp;
+    }
+    if (jj_scan_token(RBRACE)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_104() {
-    if (jj_3R_36()) return true;
+    if (jj_3R_36()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_29() {
-    if (jj_3R_34()) return true;
+    if (jj_3R_34()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2176,23 +2412,37 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3_5() {
-    if (jj_scan_token(QUESTIONMARK)) return true;
-    if (jj_3R_22()) return true;
-    if (jj_scan_token(COLON)) return true;
+    if (jj_scan_token(QUESTIONMARK)) {
+      return true;
+    }
+    if (jj_3R_22()) {
+      return true;
+    }
+    if (jj_scan_token(COLON)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_98() {
-    if (jj_scan_token(LBRACK)) return true;
+    if (jj_scan_token(LBRACK)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_104()) jj_scanpos = xsp;
-    if (jj_scan_token(RBRACK)) return true;
+    if (jj_3R_104()) {
+      jj_scanpos = xsp;
+    }
+    if (jj_scan_token(RBRACK)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_39() {
-    if (jj_3R_38()) return true;
+    if (jj_3R_38()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2202,7 +2452,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_31() {
-    if (jj_3R_36()) return true;
+    if (jj_3R_36()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2212,7 +2464,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_22() {
-    if (jj_3R_29()) return true;
+    if (jj_3R_29()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2222,95 +2476,147 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3_3() {
-    if (jj_3R_21()) return true;
+    if (jj_3R_21()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_25() {
-    if (jj_scan_token(START_SET_OR_MAP)) return true;
+    if (jj_scan_token(START_SET_OR_MAP)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_31()) jj_scanpos = xsp;
-    if (jj_scan_token(RBRACE)) return true;
+    if (jj_3R_31()) {
+      jj_scanpos = xsp;
+    }
+    if (jj_scan_token(RBRACE)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3_4() {
-    if (jj_3R_21()) return true;
+    if (jj_3R_21()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_24() {
-    if (jj_scan_token(IDENTIFIER)) return true;
-    if (jj_scan_token(COLON)) return true;
+    if (jj_scan_token(IDENTIFIER)) {
+      return true;
+    }
+    if (jj_scan_token(COLON)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3_7() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_24()) jj_scanpos = xsp;
-    if (jj_scan_token(IDENTIFIER)) return true;
-    if (jj_scan_token(LPAREN)) return true;
+    if (jj_3R_24()) {
+      jj_scanpos = xsp;
+    }
+    if (jj_scan_token(IDENTIFIER)) {
+      return true;
+    }
+    if (jj_scan_token(LPAREN)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_33() {
-    if (jj_scan_token(LPAREN)) return true;
+    if (jj_scan_token(LPAREN)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_39()) jj_scanpos = xsp;
-    if (jj_scan_token(RPAREN)) return true;
+    if (jj_3R_39()) {
+      jj_scanpos = xsp;
+    }
+    if (jj_scan_token(RPAREN)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_89() {
-    if (jj_3R_99()) return true;
+    if (jj_3R_99()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_88() {
-    if (jj_3R_98()) return true;
+    if (jj_3R_98()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_23() {
-    if (jj_scan_token(LPAREN)) return true;
-    if (jj_3R_27()) return true;
-    if (jj_scan_token(ARROW)) return true;
+    if (jj_scan_token(LPAREN)) {
+      return true;
+    }
+    if (jj_3R_27()) {
+      return true;
+    }
+    if (jj_scan_token(ARROW)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
     if (jj_3_4()) {
     jj_scanpos = xsp;
-    if (jj_3R_30()) return true;
+    if (jj_3R_30()) {
+      return true;
+    }
+    }
+    if (jj_scan_token(RPAREN)) {
+      return true;
     }
-    if (jj_scan_token(RPAREN)) return true;
     return false;
   }
 
   private boolean jj_3_8() {
-    if (jj_3R_25()) return true;
+    if (jj_3R_25()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_87() {
-    if (jj_3R_38()) return true;
+    if (jj_3R_38()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_86() {
-    if (jj_3R_97()) return true;
+    if (jj_3R_97()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_85() {
-    if (jj_scan_token(LPAREN)) return true;
-    if (jj_3R_36()) return true;
+    if (jj_scan_token(LPAREN)) {
+      return true;
+    }
+    if (jj_3R_36()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3_6() {
-    if (jj_3R_23()) return true;
+    if (jj_3R_23()) {
+      return true;
+    }
     return false;
   }
 
@@ -2329,7 +2635,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_scanpos = xsp;
     if (jj_3R_88()) {
     jj_scanpos = xsp;
-    if (jj_3R_89()) return true;
+    if (jj_3R_89()) {
+      return true;
+    }
     }
     }
     }
@@ -2340,7 +2648,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_32() {
-    if (jj_3R_38()) return true;
+    if (jj_3R_38()) {
+      return true;
+    }
     return false;
   }
 
@@ -2349,46 +2659,66 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3R_32()) {
     jj_scanpos = xsp;
-    if (jj_3R_33()) return true;
+    if (jj_3R_33()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3_1() {
-    if (jj_scan_token(ASSIGN)) return true;
-    if (jj_3R_20()) return true;
+    if (jj_scan_token(ASSIGN)) {
+      return true;
+    }
+    if (jj_3R_20()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_106() {
-    if (jj_scan_token(LPAREN)) return true;
+    if (jj_scan_token(LPAREN)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_21() {
-    if (jj_3R_27()) return true;
-    if (jj_scan_token(ARROW)) return true;
+    if (jj_3R_27()) {
+      return true;
+    }
+    if (jj_scan_token(ARROW)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
     if (jj_3_3()) {
     jj_scanpos = xsp;
-    if (jj_3R_28()) return true;
+    if (jj_3R_28()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_46() {
-    if (jj_scan_token(SEMICOLON)) return true;
+    if (jj_scan_token(SEMICOLON)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_91() {
-    if (jj_scan_token(LBRACK)) return true;
+    if (jj_scan_token(LBRACK)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_26() {
-    if (jj_3R_22()) return true;
+    if (jj_3R_22()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2398,12 +2728,16 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_79() {
-    if (jj_3R_91()) return true;
+    if (jj_3R_91()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3_2() {
-    if (jj_3R_21()) return true;
+    if (jj_3R_21()) {
+      return true;
+    }
     return false;
   }
 
@@ -2412,18 +2746,24 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3_2()) {
     jj_scanpos = xsp;
-    if (jj_3R_26()) return true;
+    if (jj_3R_26()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_90() {
-    if (jj_scan_token(DOT)) return true;
+    if (jj_scan_token(DOT)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_42() {
-    if (jj_3R_20()) return true;
+    if (jj_3R_20()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2433,7 +2773,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_78() {
-    if (jj_3R_90()) return true;
+    if (jj_3R_90()) {
+      return true;
+    }
     return false;
   }
 
@@ -2442,23 +2784,31 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3R_78()) {
     jj_scanpos = xsp;
-    if (jj_3R_79()) return true;
+    if (jj_3R_79()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_36() {
-    if (jj_3R_42()) return true;
+    if (jj_3R_42()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_72() {
-    if (jj_3R_75()) return true;
+    if (jj_3R_75()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_74() {
-    if (jj_3R_77()) return true;
+    if (jj_3R_77()) {
+      return true;
+    }
     return false;
   }
 
@@ -2467,18 +2817,24 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3R_73()) {
     jj_scanpos = xsp;
-    if (jj_3R_74()) return true;
+    if (jj_3R_74()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_73() {
-    if (jj_3R_76()) return true;
+    if (jj_3R_76()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_70() {
-    if (jj_3R_71()) return true;
+    if (jj_3R_71()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2488,18 +2844,26 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_96() {
-    if (jj_scan_token(NULL)) return true;
+    if (jj_scan_token(NULL)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_66() {
-    if (jj_3R_70()) return true;
+    if (jj_3R_70()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_65() {
-    if (jj_scan_token(EMPTY)) return true;
-    if (jj_3R_59()) return true;
+    if (jj_scan_token(EMPTY)) {
+      return true;
+    }
+    if (jj_3R_59()) {
+      return true;
+    }
     return false;
   }
 
@@ -2508,9 +2872,13 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(37)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(38)) return true;
+    if (jj_scan_token(38)) {
+      return true;
+    }
+    }
+    if (jj_3R_59()) {
+      return true;
     }
-    if (jj_3R_59()) return true;
     return false;
   }
 
@@ -2523,7 +2891,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_scanpos = xsp;
     if (jj_3R_65()) {
     jj_scanpos = xsp;
-    if (jj_3R_66()) return true;
+    if (jj_3R_66()) {
+      return true;
+    }
     }
     }
     }
@@ -2531,13 +2901,19 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_63() {
-    if (jj_scan_token(MINUS)) return true;
-    if (jj_3R_59()) return true;
+    if (jj_scan_token(MINUS)) {
+      return true;
+    }
+    if (jj_3R_59()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_95() {
-    if (jj_scan_token(STRING_LITERAL)) return true;
+    if (jj_scan_token(STRING_LITERAL)) {
+      return true;
+    }
     return false;
   }
 
@@ -2546,13 +2922,17 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(51)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(52)) return true;
+    if (jj_scan_token(52)) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_94() {
-    if (jj_scan_token(INTEGER_LITERAL)) return true;
+    if (jj_scan_token(INTEGER_LITERAL)) {
+      return true;
+    }
     return false;
   }
 
@@ -2561,7 +2941,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(49)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(50)) return true;
+    if (jj_scan_token(50)) {
+      return true;
+    }
     }
     return false;
   }
@@ -2573,19 +2955,25 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_scanpos = xsp;
     if (jj_3R_68()) {
     jj_scanpos = xsp;
-    if (jj_3R_69()) return true;
+    if (jj_3R_69()) {
+      return true;
+    }
     }
     }
     return false;
   }
 
   private boolean jj_3R_67() {
-    if (jj_scan_token(MULT)) return true;
+    if (jj_scan_token(MULT)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_57() {
-    if (jj_3R_59()) return true;
+    if (jj_3R_59()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2595,17 +2983,23 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_93() {
-    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
+    if (jj_scan_token(FLOATING_POINT_LITERAL)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_62() {
-    if (jj_scan_token(MINUS)) return true;
+    if (jj_scan_token(MINUS)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_101() {
-    if (jj_scan_token(FALSE)) return true;
+    if (jj_scan_token(FALSE)) {
+      return true;
+    }
     return false;
   }
 
@@ -2614,18 +3008,24 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3R_61()) {
     jj_scanpos = xsp;
-    if (jj_3R_62()) return true;
+    if (jj_3R_62()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_61() {
-    if (jj_scan_token(PLUS)) return true;
+    if (jj_scan_token(PLUS)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_100() {
-    if (jj_scan_token(TRUE)) return true;
+    if (jj_scan_token(TRUE)) {
+      return true;
+    }
     return false;
   }
 
@@ -2634,13 +3034,17 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3R_100()) {
     jj_scanpos = xsp;
-    if (jj_3R_101()) return true;
+    if (jj_3R_101()) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_51() {
-    if (jj_3R_57()) return true;
+    if (jj_3R_57()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2650,32 +3054,44 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_84() {
-    if (jj_3R_96()) return true;
+    if (jj_3R_96()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_83() {
-    if (jj_3R_95()) return true;
+    if (jj_3R_95()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_52() {
-    if (jj_scan_token(CONCAT)) return true;
+    if (jj_scan_token(CONCAT)) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_82() {
-    if (jj_3R_94()) return true;
+    if (jj_3R_94()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_81() {
-    if (jj_3R_93()) return true;
+    if (jj_3R_93()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_102() {
-    if (jj_scan_token(COLON)) return true;
+    if (jj_scan_token(COLON)) {
+      return true;
+    }
     return false;
   }
 
@@ -2690,7 +3106,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_scanpos = xsp;
     if (jj_3R_83()) {
     jj_scanpos = xsp;
-    if (jj_3R_84()) return true;
+    if (jj_3R_84()) {
+      return true;
+    }
     }
     }
     }
@@ -2699,12 +3117,16 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_80() {
-    if (jj_3R_92()) return true;
+    if (jj_3R_92()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_47() {
-    if (jj_3R_51()) return true;
+    if (jj_3R_51()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2714,7 +3136,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_103() {
-    if (jj_3R_106()) return true;
+    if (jj_3R_106()) {
+      return true;
+    }
     return false;
   }
 
@@ -2723,7 +3147,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(29)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(30)) return true;
+    if (jj_scan_token(30)) {
+      return true;
+    }
     }
     return false;
   }
@@ -2733,7 +3159,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(31)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(32)) return true;
+    if (jj_scan_token(32)) {
+      return true;
+    }
     }
     return false;
   }
@@ -2743,7 +3171,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(25)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(26)) return true;
+    if (jj_scan_token(26)) {
+      return true;
+    }
     }
     return false;
   }
@@ -2757,7 +3187,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_scanpos = xsp;
     if (jj_3R_55()) {
     jj_scanpos = xsp;
-    if (jj_3R_56()) return true;
+    if (jj_3R_56()) {
+      return true;
+    }
     }
     }
     }
@@ -2769,17 +3201,25 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(27)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(28)) return true;
+    if (jj_scan_token(28)) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_97() {
-    if (jj_scan_token(IDENTIFIER)) return true;
+    if (jj_scan_token(IDENTIFIER)) {
+      return true;
+    }
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_102()) jj_scanpos = xsp;
-    if (jj_3R_103()) return true;
+    if (jj_3R_102()) {
+      jj_scanpos = xsp;
+    }
+    if (jj_3R_103()) {
+      return true;
+    }
     while (true) {
       xsp = jj_scanpos;
       if (jj_3R_103()) { jj_scanpos = xsp; break; }
@@ -2788,7 +3228,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   }
 
   private boolean jj_3R_44() {
-    if (jj_3R_47()) return true;
+    if (jj_3R_47()) {
+      return true;
+    }
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
@@ -2802,7 +3244,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(35)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(36)) return true;
+    if (jj_scan_token(36)) {
+      return true;
+    }
     }
     return false;
   }
@@ -2812,7 +3256,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_3R_49()) {
     jj_scanpos = xsp;
-    if (jj_3R_50()) return true;
+    if (jj_3R_50()) {
+      return true;
+    }
     }
     return false;
   }
@@ -2822,18 +3268,24 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     xsp = jj_scanpos;
     if (jj_scan_token(33)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(34)) return true;
+    if (jj_scan_token(34)) {
+      return true;
+    }
     }
     return false;
   }
 
   private boolean jj_3R_28() {
-    if (jj_3R_22()) return true;
+    if (jj_3R_22()) {
+      return true;
+    }
     return false;
   }
 
   private boolean jj_3R_38() {
-    if (jj_scan_token(IDENTIFIER)) return true;
+    if (jj_scan_token(IDENTIFIER)) {
+      return true;
+    }
     return false;
   }
 
@@ -2876,8 +3328,12 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     token = new Token();
     jj_ntk = -1;
     jj_gen = 0;
-    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 52; i++) {
+      jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+      jj_2_rtns[i] = new JJCalls();
+    }
   }
 
   /** Reinitialise. */
@@ -2892,8 +3348,12 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_ntk = -1;
     jjtree.reset();
     jj_gen = 0;
-    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 52; i++) {
+      jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+      jj_2_rtns[i] = new JJCalls();
+    }
   }
 
   /** Constructor. */
@@ -2903,8 +3363,12 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     token = new Token();
     jj_ntk = -1;
     jj_gen = 0;
-    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 52; i++) {
+      jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+      jj_2_rtns[i] = new JJCalls();
+    }
   }
 
   /** Reinitialise. */
@@ -2915,8 +3379,12 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_ntk = -1;
     jjtree.reset();
     jj_gen = 0;
-    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 52; i++) {
+      jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+      jj_2_rtns[i] = new JJCalls();
+    }
   }
 
   /** Constructor with generated Token Manager. */
@@ -2925,8 +3393,12 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     token = new Token();
     jj_ntk = -1;
     jj_gen = 0;
-    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 52; i++) {
+      jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+      jj_2_rtns[i] = new JJCalls();
+    }
   }
 
   /** Reinitialise. */
@@ -2936,14 +3408,21 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     jj_ntk = -1;
     jjtree.reset();
     jj_gen = 0;
-    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 52; i++) {
+      jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+      jj_2_rtns[i] = new JJCalls();
+    }
   }
 
   private Token jj_consume_token(int kind) throws ParseException {
     Token oldToken;
-    if ((oldToken = token).next != null) token = token.next;
-    else token = token.next = token_source.getNextToken();
+    if ((oldToken = token).next != null) {
+      token = token.next;
+    } else {
+      token = token.next = token_source.getNextToken();
+    }
     jj_ntk = -1;
     if (token.kind == kind) {
       jj_gen++;
@@ -2952,7 +3431,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         for (int i = 0; i < jj_2_rtns.length; i++) {
           JJCalls c = jj_2_rtns[i];
           while (c != null) {
-            if (c.gen < jj_gen) c.first = null;
+            if (c.gen < jj_gen) {
+              c.first = null;
+            }
             c = c.next;
           }
         }
@@ -2989,18 +3470,27 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
     if (jj_rescan) {
       int i = 0; Token tok = token;
       while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
-      if (tok != null) jj_add_error_token(kind, i);
+      if (tok != null) {
+        jj_add_error_token(kind, i);
+      }
+    }
+    if (jj_scanpos.kind != kind) {
+      return true;
+    }
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
+      throw jj_ls;
     }
-    if (jj_scanpos.kind != kind) return true;
-    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
     return false;
   }
 
 
 /** Get the next Token. */
   final public Token getNextToken() {
-    if (token.next != null) token = token.next;
-    else token = token.next = token_source.getNextToken();
+    if (token.next != null) {
+      token = token.next;
+    } else {
+      token = token.next = token_source.getNextToken();
+    }
     jj_ntk = -1;
     jj_gen++;
     return token;
@@ -3010,17 +3500,21 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   final public Token getToken(int index) {
     Token t = token;
     for (int i = 0; i < index; i++) {
-      if (t.next != null) t = t.next;
-      else t = t.next = token_source.getNextToken();
+      if (t.next != null) {
+        t = t.next;
+      } else {
+        t = t.next = token_source.getNextToken();
+      }
     }
     return t;
   }
 
   private int jj_ntk() {
-    if ((jj_nt=token.next) == null)
+    if ((jj_nt=token.next) == null) {
       return (jj_ntk = (token.next=token_source.getNextToken()).kind);
-    else
+    } else {
       return (jj_ntk = jj_nt.kind);
+    }
   }
 
   private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
@@ -3030,7 +3524,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private int jj_endpos;
 
   private void jj_add_error_token(int kind, int pos) {
-    if (pos >= 100) return;
+    if (pos >= 100) {
+      return;
+    }
     if (pos == jj_endpos + 1) {
       jj_lasttokens[jj_endpos++] = kind;
     } else if (jj_endpos != 0) {
@@ -3050,7 +3546,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
           break jj_entries_loop;
         }
       }
-      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
+      if (pos != 0) {
+        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
+      }
     }
   }
 

==================================================
ParseException.java
index 1a7522a757..0aeded233a 100644
--- a/java/org/apache/el/parser/ELParserTokenManager.java
+++ b/java/org/apache/el/parser/ELParserTokenManager.java
@@ -58,10 +58,11 @@ private int jjMoveStringLiteralDfa1_0(long active0)
    switch(curChar)
    {
       case 123:
-         if ((active0 & 0x4L) != 0L)
-            return jjStopAtPos(1, 2);
-         else if ((active0 & 0x8L) != 0L)
-            return jjStopAtPos(1, 3);
+         if ((active0 & 0x4L) != 0L) {
+          return jjStopAtPos(1, 2);
+        } else if ((active0 & 0x8L) != 0L) {
+          return jjStopAtPos(1, 3);
+        }
          break;
       default :
          break;
@@ -83,8 +84,9 @@ private int jjMoveNfa_0(int startState, int curPos)
    int kind = 0x7fffffff;
    for (;;)
    {
-      if (++jjround == 0x7fffffff)
-         ReInitRounds();
+      if (++jjround == 0x7fffffff) {
+        ReInitRounds();
+      }
       if (curChar < 64)
       {
          long l = 1L << curChar;
@@ -95,50 +97,62 @@ private int jjMoveNfa_0(int startState, int curPos)
                case 7:
                   if ((0xffffffe7ffffffffL & l) != 0L)
                   {
-                     if (kind > 1)
-                        kind = 1;
+                     if (kind > 1) {
+                      kind = 1;
+                    }
                      jjCheckNAddStates(0, 4);
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 1)
-                        kind = 1;
+                     if (kind > 1) {
+                      kind = 1;
+                    }
                      jjCheckNAdd(5);
                   }
-                  if ((0xffffffe7ffffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(0, 1);
+                  if ((0xffffffe7ffffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(0, 1);
+                  }
                   break;
                case 0:
-                  if ((0xffffffe7ffffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(0, 1);
+                  if ((0xffffffe7ffffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(0, 1);
+                  }
                   break;
                case 2:
-                  if ((0xffffffe7ffffffffL & l) == 0L)
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if ((0xffffffe7ffffffffL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(0, 4);
                   break;
                case 3:
-                  if ((0xffffffe7ffffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(3, 4);
+                  if ((0xffffffe7ffffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(3, 4);
+                  }
                   break;
                case 4:
-                  if ((0x1800000000L & l) != 0L)
-                     jjCheckNAdd(5);
+                  if ((0x1800000000L & l) != 0L) {
+                    jjCheckNAdd(5);
+                  }
                   break;
                case 5:
-                  if ((0xffffffe7ffffffffL & l) == 0L)
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if ((0xffffffe7ffffffffL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(5, 8);
                   break;
                case 6:
-                  if ((0x1800000000L & l) == 0L)
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if ((0x1800000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(9, 13);
                   break;
                default : break;
@@ -153,42 +167,50 @@ private int jjMoveNfa_0(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 7:
-                  if (kind > 1)
-                     kind = 1;
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(0, 4);
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(0, 1);
-                  else if (curChar == 92)
+                  if ((0xffffffffefffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(0, 1);
+                  } else if (curChar == 92)
                   {
-                     if (kind > 1)
-                        kind = 1;
+                     if (kind > 1) {
+                      kind = 1;
+                    }
                      jjCheckNAddStates(14, 17);
                   }
                   break;
                case 0:
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(0, 1);
+                  if ((0xffffffffefffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(0, 1);
+                  }
                   break;
                case 1:
-                  if (curChar != 92)
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if (curChar != 92) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(14, 17);
                   break;
                case 2:
-                  if (kind > 1)
-                     kind = 1;
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(0, 4);
                   break;
                case 3:
                   jjCheckNAddTwoStates(3, 4);
                   break;
                case 5:
-                  if ((0xf7ffffffefffffffL & l) == 0L)
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if ((0xf7ffffffefffffffL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(5, 8);
                   break;
                default : break;
@@ -205,35 +227,43 @@ private int jjMoveNfa_0(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 7:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjCheckNAddTwoStates(0, 1);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjCheckNAddTwoStates(0, 1);
+                  }
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 1)
-                        kind = 1;
+                     if (kind > 1) {
+                      kind = 1;
+                    }
                      jjCheckNAddStates(0, 4);
                   }
                   break;
                case 0:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjCheckNAddTwoStates(0, 1);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjCheckNAddTwoStates(0, 1);
+                  }
                   break;
                case 2:
-                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(0, 4);
                   break;
                case 3:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjCheckNAddTwoStates(3, 4);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjCheckNAddTwoStates(3, 4);
+                  }
                   break;
                case 5:
-                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 1)
-                     kind = 1;
+                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 1) {
+                    kind = 1;
+                  }
                   jjCheckNAddStates(5, 8);
                   break;
                default : break;
@@ -247,8 +277,9 @@ private int jjMoveNfa_0(int startState, int curPos)
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
-         return curPos;
+      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt))) {
+        return curPos;
+      }
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
    }
@@ -258,8 +289,9 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
    switch (pos)
    {
       case 0:
-         if ((active0 & 0x20000L) != 0L)
-            return 1;
+         if ((active0 & 0x20000L) != 0L) {
+          return 1;
+        }
          if ((active0 & 0x141d555401c000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -267,8 +299,9 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
          }
          return -1;
       case 1:
-         if ((active0 & 0x41554000000L) != 0L)
-            return 30;
+         if ((active0 & 0x41554000000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x1419400001c000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -277,8 +310,9 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
          }
          return -1;
       case 2:
-         if ((active0 & 0x14014000000000L) != 0L)
-            return 30;
+         if ((active0 & 0x14014000000000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x18000001c000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -287,8 +321,9 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
          }
          return -1;
       case 3:
-         if ((active0 & 0x14000L) != 0L)
-            return 30;
+         if ((active0 & 0x14000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x180000008000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -297,8 +332,9 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
          }
          return -1;
       case 4:
-         if ((active0 & 0x80000008000L) != 0L)
-            return 30;
+         if ((active0 & 0x80000008000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x100000000000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -436,34 +472,38 @@ private int jjMoveStringLiteralDfa1_2(long active0)
    switch(curChar)
    {
       case 38:
-         if ((active0 & 0x8000000000L) != 0L)
-            return jjStopAtPos(1, 39);
+         if ((active0 & 0x8000000000L) != 0L) {
+          return jjStopAtPos(1, 39);
+        }
          break;
       case 61:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStopAtPos(1, 29);
-         else if ((active0 & 0x80000000L) != 0L)
-            return jjStopAtPos(1, 31);
-         else if ((active0 & 0x200000000L) != 0L)
-            return jjStopAtPos(1, 33);
-         else if ((active0 & 0x800000000L) != 0L)
-            return jjStopAtPos(1, 35);
-         else if ((active0 & 0x20000000000000L) != 0L)
-            return jjStopAtPos(1, 53);
+         if ((active0 & 0x20000000L) != 0L) {
+          return jjStopAtPos(1, 29);
+        } else if ((active0 & 0x80000000L) != 0L) {
+          return jjStopAtPos(1, 31);
+        } else if ((active0 & 0x200000000L) != 0L) {
+          return jjStopAtPos(1, 33);
+        } else if ((active0 & 0x800000000L) != 0L) {
+          return jjStopAtPos(1, 35);
+        } else if ((active0 & 0x20000000000000L) != 0L) {
+          return jjStopAtPos(1, 53);
+        }
          break;
       case 62:
-         if ((active0 & 0x80000000000000L) != 0L)
-            return jjStopAtPos(1, 55);
+         if ((active0 & 0x80000000000000L) != 0L) {
+          return jjStopAtPos(1, 55);
+        }
          break;
       case 97:
          return jjMoveStringLiteralDfa2_2(active0, 0x8000L);
       case 101:
-         if ((active0 & 0x40000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 30, 30);
-         else if ((active0 & 0x100000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 32, 30);
-         else if ((active0 & 0x1000000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 36, 30);
+         if ((active0 & 0x40000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 30, 30);
+        } else if ((active0 & 0x100000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 32, 30);
+        } else if ((active0 & 0x1000000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 36, 30);
+        }
          break;
       case 105:
          return jjMoveStringLiteralDfa2_2(active0, 0x4000000000000L);
@@ -474,24 +514,28 @@ private int jjMoveStringLiteralDfa1_2(long active0)
       case 111:
          return jjMoveStringLiteralDfa2_2(active0, 0x10004000000000L);
       case 113:
-         if ((active0 & 0x400000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 34, 30);
+         if ((active0 & 0x400000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 34, 30);
+        }
          break;
       case 114:
-         if ((active0 & 0x40000000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 42, 30);
+         if ((active0 & 0x40000000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 42, 30);
+        }
          return jjMoveStringLiteralDfa2_2(active0, 0x4000L);
       case 116:
-         if ((active0 & 0x4000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 26, 30);
-         else if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 28, 30);
+         if ((active0 & 0x4000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 26, 30);
+        } else if ((active0 & 0x10000000L) != 0L) {
+          return jjStartNfaWithStates_2(1, 28, 30);
+        }
          break;
       case 117:
          return jjMoveStringLiteralDfa2_2(active0, 0x10000L);
       case 124:
-         if ((active0 & 0x20000000000L) != 0L)
-            return jjStopAtPos(1, 41);
+         if ((active0 & 0x20000000000L) != 0L) {
+          return jjStopAtPos(1, 41);
+        }
          break;
       default :
          break;
@@ -500,8 +544,9 @@ private int jjMoveStringLiteralDfa1_2(long active0)
 }
 private int jjMoveStringLiteralDfa2_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(0, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(0, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(1, active0);
@@ -510,10 +555,11 @@ private int jjMoveStringLiteralDfa2_2(long old0, long active0)
    switch(curChar)
    {
       case 100:
-         if ((active0 & 0x10000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 40, 30);
-         else if ((active0 & 0x10000000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 52, 30);
+         if ((active0 & 0x10000000000L) != 0L) {
+          return jjStartNfaWithStates_2(2, 40, 30);
+        } else if ((active0 & 0x10000000000000L) != 0L) {
+          return jjStartNfaWithStates_2(2, 52, 30);
+        }
          break;
       case 108:
          return jjMoveStringLiteralDfa3_2(active0, 0x18000L);
@@ -522,14 +568,16 @@ private int jjMoveStringLiteralDfa2_2(long old0, long active0)
       case 115:
          return jjMoveStringLiteralDfa3_2(active0, 0x100000000000L);
       case 116:
-         if ((active0 & 0x4000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 38, 30);
+         if ((active0 & 0x4000000000L) != 0L) {
+          return jjStartNfaWithStates_2(2, 38, 30);
+        }
          break;
       case 117:
          return jjMoveStringLiteralDfa3_2(active0, 0x4000L);
       case 118:
-         if ((active0 & 0x4000000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 50, 30);
+         if ((active0 & 0x4000000000000L) != 0L) {
+          return jjStartNfaWithStates_2(2, 50, 30);
+        }
          break;
       default :
          break;
@@ -538,8 +586,9 @@ private int jjMoveStringLiteralDfa2_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa3_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(1, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(1, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(2, active0);
@@ -548,12 +597,14 @@ private int jjMoveStringLiteralDfa3_2(long old0, long active0)
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_2(3, 14, 30);
+         if ((active0 & 0x4000L) != 0L) {
+          return jjStartNfaWithStates_2(3, 14, 30);
+        }
          break;
       case 108:
-         if ((active0 & 0x10000L) != 0L)
-            return jjStartNfaWithStates_2(3, 16, 30);
+         if ((active0 & 0x10000L) != 0L) {
+          return jjStartNfaWithStates_2(3, 16, 30);
+        }
          break;
       case 115:
          return jjMoveStringLiteralDfa4_2(active0, 0x8000L);
@@ -566,8 +617,9 @@ private int jjMoveStringLiteralDfa3_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa4_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(2, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(2, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(3, active0);
@@ -578,12 +630,14 @@ private int jjMoveStringLiteralDfa4_2(long old0, long active0)
       case 97:
          return jjMoveStringLiteralDfa5_2(active0, 0x100000000000L);
       case 101:
-         if ((active0 & 0x8000L) != 0L)
-            return jjStartNfaWithStates_2(4, 15, 30);
+         if ((active0 & 0x8000L) != 0L) {
+          return jjStartNfaWithStates_2(4, 15, 30);
+        }
          break;
       case 121:
-         if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_2(4, 43, 30);
+         if ((active0 & 0x80000000000L) != 0L) {
+          return jjStartNfaWithStates_2(4, 43, 30);
+        }
          break;
       default :
          break;
@@ -592,8 +646,9 @@ private int jjMoveStringLiteralDfa4_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa5_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(3, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(3, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(4, active0);
@@ -610,8 +665,9 @@ private int jjMoveStringLiteralDfa5_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa6_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(4, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(4, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(5, active0);
@@ -628,8 +684,9 @@ private int jjMoveStringLiteralDfa6_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa7_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(5, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(5, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(6, active0);
@@ -646,8 +703,9 @@ private int jjMoveStringLiteralDfa7_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa8_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(6, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(6, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(7, active0);
@@ -664,8 +722,9 @@ private int jjMoveStringLiteralDfa8_2(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa9_2(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_2(7, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_2(7, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_2(8, active0);
@@ -674,8 +733,9 @@ private int jjMoveStringLiteralDfa9_2(long old0, long active0)
    switch(curChar)
    {
       case 102:
-         if ((active0 & 0x100000000000L) != 0L)
-            return jjStartNfaWithStates_2(9, 44, 30);
+         if ((active0 & 0x100000000000L) != 0L) {
+          return jjStartNfaWithStates_2(9, 44, 30);
+        }
          break;
       default :
          break;
@@ -717,8 +777,9 @@ private int jjMoveNfa_2(int startState, int curPos)
    int kind = 0x7fffffff;
    for (;;)
    {
-      if (++jjround == 0x7fffffff)
-         ReInitRounds();
+      if (++jjround == 0x7fffffff) {
+        ReInitRounds();
+      }
       if (curChar < 64)
       {
          long l = 1L << curChar;
@@ -729,164 +790,204 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 10)
-                        kind = 10;
+                     if (kind > 10) {
+                      kind = 10;
+                    }
                      jjCheckNAddStates(18, 22);
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAddTwoStates(28, 29);
                   }
-                  else if (curChar == 39)
-                     jjCheckNAddStates(23, 25);
-                  else if (curChar == 34)
-                     jjCheckNAddStates(26, 28);
-                  else if (curChar == 46)
-                     jjCheckNAdd(1);
+                  else if (curChar == 39) {
+                    jjCheckNAddStates(23, 25);
+                  } else if (curChar == 34) {
+                    jjCheckNAddStates(26, 28);
+                  } else if (curChar == 46) {
+                    jjCheckNAdd(1);
+                  }
                   break;
                case 30:
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 57) {
+                      kind = 57;
+                    }
                      jjCheckNAdd(29);
                   }
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAdd(28);
                   }
                   break;
                case 1:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAddTwoStates(1, 2);
                   break;
                case 3:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(4);
+                  if ((0x280000000000L & l) != 0L) {
+                    jjCheckNAdd(4);
+                  }
                   break;
                case 4:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAdd(4);
                   break;
                case 5:
-                  if (curChar == 34)
-                     jjCheckNAddStates(26, 28);
+                  if (curChar == 34) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 6:
-                  if ((0xfffffffbffffffffL & l) != 0L)
-                     jjCheckNAddStates(26, 28);
+                  if ((0xfffffffbffffffffL & l) != 0L) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 8:
-                  if ((0x8400000000L & l) != 0L)
-                     jjCheckNAddStates(26, 28);
+                  if ((0x8400000000L & l) != 0L) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 9:
-                  if (curChar == 34 && kind > 13)
-                     kind = 13;
+                  if (curChar == 34 && kind > 13) {
+                    kind = 13;
+                  }
                   break;
                case 10:
-                  if (curChar == 39)
-                     jjCheckNAddStates(23, 25);
+                  if (curChar == 39) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 11:
-                  if ((0xffffff7fffffffffL & l) != 0L)
-                     jjCheckNAddStates(23, 25);
+                  if ((0xffffff7fffffffffL & l) != 0L) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 13:
-                  if ((0x8400000000L & l) != 0L)
-                     jjCheckNAddStates(23, 25);
+                  if ((0x8400000000L & l) != 0L) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 14:
-                  if (curChar == 39 && kind > 13)
-                     kind = 13;
+                  if (curChar == 39 && kind > 13) {
+                    kind = 13;
+                  }
                   break;
                case 15:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 10)
-                     kind = 10;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 10) {
+                    kind = 10;
+                  }
                   jjCheckNAddStates(18, 22);
                   break;
                case 16:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 10)
-                     kind = 10;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 10) {
+                    kind = 10;
+                  }
                   jjCheckNAdd(16);
                   break;
                case 17:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(17, 18);
+                  if ((0x3ff000000000000L & l) != 0L) {
+                    jjCheckNAddTwoStates(17, 18);
+                  }
                   break;
                case 18:
-                  if (curChar != 46)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if (curChar != 46) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAddTwoStates(19, 20);
                   break;
                case 19:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAddTwoStates(19, 20);
                   break;
                case 21:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(22);
+                  if ((0x280000000000L & l) != 0L) {
+                    jjCheckNAdd(22);
+                  }
                   break;
                case 22:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAdd(22);
                   break;
                case 23:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(23, 24);
+                  if ((0x3ff000000000000L & l) != 0L) {
+                    jjCheckNAddTwoStates(23, 24);
+                  }
                   break;
                case 25:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(26);
+                  if ((0x280000000000L & l) != 0L) {
+                    jjCheckNAdd(26);
+                  }
                   break;
                case 26:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAdd(26);
                   break;
                case 27:
-                  if ((0x1800000000L & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x1800000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 28:
-                  if ((0x3ff001000000000L & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x3ff001000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAdd(28);
                   break;
                case 29:
-                  if ((0x3ff001000000000L & l) == 0L)
-                     break;
-                  if (kind > 57)
-                     kind = 57;
+                  if ((0x3ff001000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 57) {
+                    kind = 57;
+                  }
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -901,74 +1002,91 @@ private int jjMoveNfa_2(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 57) {
+                      kind = 57;
+                    }
                      jjCheckNAdd(29);
                   }
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAdd(28);
                   }
                   break;
                case 2:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(29, 30);
+                  if ((0x2000000020L & l) != 0L) {
+                    jjAddStates(29, 30);
+                  }
                   break;
                case 6:
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddStates(26, 28);
+                  if ((0xffffffffefffffffL & l) != 0L) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 7:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 8;
+                  if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 8;
+                  }
                   break;
                case 8:
-                  if (curChar == 92)
-                     jjCheckNAddStates(26, 28);
+                  if (curChar == 92) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 11:
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddStates(23, 25);
+                  if ((0xffffffffefffffffL & l) != 0L) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 12:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 13;
+                  if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 13;
+                  }
                   break;
                case 13:
-                  if (curChar == 92)
-                     jjCheckNAddStates(23, 25);
+                  if (curChar == 92) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 20:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(31, 32);
+                  if ((0x2000000020L & l) != 0L) {
+                    jjAddStates(31, 32);
+                  }
                   break;
                case 24:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(33, 34);
+                  if ((0x2000000020L & l) != 0L) {
+                    jjAddStates(33, 34);
+                  }
                   break;
                case 28:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAdd(28);
                   break;
                case 29:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 57)
-                     kind = 57;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 57) {
+                    kind = 57;
+                  }
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -985,46 +1103,56 @@ private int jjMoveNfa_2(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 0:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAdd(28);
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 57) {
+                      kind = 57;
+                    }
                      jjCheckNAdd(29);
                   }
                   break;
                case 6:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(26, 28);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjAddStates(26, 28);
+                  }
                   break;
                case 11:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(23, 25);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjAddStates(23, 25);
+                  }
                   break;
                case 28:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAdd(28);
                   break;
                case 29:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 57)
-                     kind = 57;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 57) {
+                    kind = 57;
+                  }
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1038,8 +1166,9 @@ private int jjMoveNfa_2(int startState, int curPos)
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
-         return curPos;
+      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt))) {
+        return curPos;
+      }
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
    }
@@ -1049,8 +1178,9 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
    switch (pos)
    {
       case 0:
-         if ((active0 & 0x20000L) != 0L)
-            return 1;
+         if ((active0 & 0x20000L) != 0L) {
+          return 1;
+        }
          if ((active0 & 0x141d555401c000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -1058,8 +1188,9 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
          }
          return -1;
       case 1:
-         if ((active0 & 0x41554000000L) != 0L)
-            return 30;
+         if ((active0 & 0x41554000000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x1419400001c000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -1068,8 +1199,9 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
          }
          return -1;
       case 2:
-         if ((active0 & 0x14014000000000L) != 0L)
-            return 30;
+         if ((active0 & 0x14014000000000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x18000001c000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -1078,8 +1210,9 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
          }
          return -1;
       case 3:
-         if ((active0 & 0x14000L) != 0L)
-            return 30;
+         if ((active0 & 0x14000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x180000008000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -1088,8 +1221,9 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
          }
          return -1;
       case 4:
-         if ((active0 & 0x80000008000L) != 0L)
-            return 30;
+         if ((active0 & 0x80000008000L) != 0L) {
+          return 30;
+        }
          if ((active0 & 0x100000000000L) != 0L)
          {
             jjmatchedKind = 56;
@@ -1227,34 +1361,38 @@ private int jjMoveStringLiteralDfa1_1(long active0)
    switch(curChar)
    {
       case 38:
-         if ((active0 & 0x8000000000L) != 0L)
-            return jjStopAtPos(1, 39);
+         if ((active0 & 0x8000000000L) != 0L) {
+          return jjStopAtPos(1, 39);
+        }
          break;
       case 61:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStopAtPos(1, 29);
-         else if ((active0 & 0x80000000L) != 0L)
-            return jjStopAtPos(1, 31);
-         else if ((active0 & 0x200000000L) != 0L)
-            return jjStopAtPos(1, 33);
-         else if ((active0 & 0x800000000L) != 0L)
-            return jjStopAtPos(1, 35);
-         else if ((active0 & 0x20000000000000L) != 0L)
-            return jjStopAtPos(1, 53);
+         if ((active0 & 0x20000000L) != 0L) {
+          return jjStopAtPos(1, 29);
+        } else if ((active0 & 0x80000000L) != 0L) {
+          return jjStopAtPos(1, 31);
+        } else if ((active0 & 0x200000000L) != 0L) {
+          return jjStopAtPos(1, 33);
+        } else if ((active0 & 0x800000000L) != 0L) {
+          return jjStopAtPos(1, 35);
+        } else if ((active0 & 0x20000000000000L) != 0L) {
+          return jjStopAtPos(1, 53);
+        }
          break;
       case 62:
-         if ((active0 & 0x80000000000000L) != 0L)
-            return jjStopAtPos(1, 55);
+         if ((active0 & 0x80000000000000L) != 0L) {
+          return jjStopAtPos(1, 55);
+        }
          break;
       case 97:
          return jjMoveStringLiteralDfa2_1(active0, 0x8000L);
       case 101:
-         if ((active0 & 0x40000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 30, 30);
-         else if ((active0 & 0x100000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 32, 30);
-         else if ((active0 & 0x1000000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 36, 30);
+         if ((active0 & 0x40000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 30, 30);
+        } else if ((active0 & 0x100000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 32, 30);
+        } else if ((active0 & 0x1000000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 36, 30);
+        }
          break;
       case 105:
          return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L);
@@ -1265,24 +1403,28 @@ private int jjMoveStringLiteralDfa1_1(long active0)
       case 111:
          return jjMoveStringLiteralDfa2_1(active0, 0x10004000000000L);
       case 113:
-         if ((active0 & 0x400000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 34, 30);
+         if ((active0 & 0x400000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 34, 30);
+        }
          break;
       case 114:
-         if ((active0 & 0x40000000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 42, 30);
+         if ((active0 & 0x40000000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 42, 30);
+        }
          return jjMoveStringLiteralDfa2_1(active0, 0x4000L);
       case 116:
-         if ((active0 & 0x4000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 26, 30);
-         else if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 28, 30);
+         if ((active0 & 0x4000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 26, 30);
+        } else if ((active0 & 0x10000000L) != 0L) {
+          return jjStartNfaWithStates_1(1, 28, 30);
+        }
          break;
       case 117:
          return jjMoveStringLiteralDfa2_1(active0, 0x10000L);
       case 124:
-         if ((active0 & 0x20000000000L) != 0L)
-            return jjStopAtPos(1, 41);
+         if ((active0 & 0x20000000000L) != 0L) {
+          return jjStopAtPos(1, 41);
+        }
          break;
       default :
          break;
@@ -1291,8 +1433,9 @@ private int jjMoveStringLiteralDfa1_1(long active0)
 }
 private int jjMoveStringLiteralDfa2_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(0, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(0, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(1, active0);
@@ -1301,10 +1444,11 @@ private int jjMoveStringLiteralDfa2_1(long old0, long active0)
    switch(curChar)
    {
       case 100:
-         if ((active0 & 0x10000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 40, 30);
-         else if ((active0 & 0x10000000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 52, 30);
+         if ((active0 & 0x10000000000L) != 0L) {
+          return jjStartNfaWithStates_1(2, 40, 30);
+        } else if ((active0 & 0x10000000000000L) != 0L) {
+          return jjStartNfaWithStates_1(2, 52, 30);
+        }
          break;
       case 108:
          return jjMoveStringLiteralDfa3_1(active0, 0x18000L);
@@ -1313,14 +1457,16 @@ private int jjMoveStringLiteralDfa2_1(long old0, long active0)
       case 115:
          return jjMoveStringLiteralDfa3_1(active0, 0x100000000000L);
       case 116:
-         if ((active0 & 0x4000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 38, 30);
+         if ((active0 & 0x4000000000L) != 0L) {
+          return jjStartNfaWithStates_1(2, 38, 30);
+        }
          break;
       case 117:
          return jjMoveStringLiteralDfa3_1(active0, 0x4000L);
       case 118:
-         if ((active0 & 0x4000000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 50, 30);
+         if ((active0 & 0x4000000000000L) != 0L) {
+          return jjStartNfaWithStates_1(2, 50, 30);
+        }
          break;
       default :
          break;
@@ -1329,8 +1475,9 @@ private int jjMoveStringLiteralDfa2_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa3_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(1, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(1, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(2, active0);
@@ -1339,12 +1486,14 @@ private int jjMoveStringLiteralDfa3_1(long old0, long active0)
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_1(3, 14, 30);
+         if ((active0 & 0x4000L) != 0L) {
+          return jjStartNfaWithStates_1(3, 14, 30);
+        }
          break;
       case 108:
-         if ((active0 & 0x10000L) != 0L)
-            return jjStartNfaWithStates_1(3, 16, 30);
+         if ((active0 & 0x10000L) != 0L) {
+          return jjStartNfaWithStates_1(3, 16, 30);
+        }
          break;
       case 115:
          return jjMoveStringLiteralDfa4_1(active0, 0x8000L);
@@ -1357,8 +1506,9 @@ private int jjMoveStringLiteralDfa3_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa4_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(2, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(2, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(3, active0);
@@ -1369,12 +1519,14 @@ private int jjMoveStringLiteralDfa4_1(long old0, long active0)
       case 97:
          return jjMoveStringLiteralDfa5_1(active0, 0x100000000000L);
       case 101:
-         if ((active0 & 0x8000L) != 0L)
-            return jjStartNfaWithStates_1(4, 15, 30);
+         if ((active0 & 0x8000L) != 0L) {
+          return jjStartNfaWithStates_1(4, 15, 30);
+        }
          break;
       case 121:
-         if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_1(4, 43, 30);
+         if ((active0 & 0x80000000000L) != 0L) {
+          return jjStartNfaWithStates_1(4, 43, 30);
+        }
          break;
       default :
          break;
@@ -1383,8 +1535,9 @@ private int jjMoveStringLiteralDfa4_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa5_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(3, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(3, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(4, active0);
@@ -1401,8 +1554,9 @@ private int jjMoveStringLiteralDfa5_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa6_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(4, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(4, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(5, active0);
@@ -1419,8 +1573,9 @@ private int jjMoveStringLiteralDfa6_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa7_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(5, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(5, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(6, active0);
@@ -1437,8 +1592,9 @@ private int jjMoveStringLiteralDfa7_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa8_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(6, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(6, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(7, active0);
@@ -1455,8 +1611,9 @@ private int jjMoveStringLiteralDfa8_1(long old0, long active0)
 }
 private int jjMoveStringLiteralDfa9_1(long old0, long active0)
 {
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(7, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_1(7, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(8, active0);
@@ -1465,8 +1622,9 @@ private int jjMoveStringLiteralDfa9_1(long old0, long active0)
    switch(curChar)
    {
       case 102:
-         if ((active0 & 0x100000000000L) != 0L)
-            return jjStartNfaWithStates_1(9, 44, 30);
+         if ((active0 & 0x100000000000L) != 0L) {
+          return jjStartNfaWithStates_1(9, 44, 30);
+        }
          break;
       default :
          break;
@@ -1490,8 +1648,9 @@ private int jjMoveNfa_1(int startState, int curPos)
    int kind = 0x7fffffff;
    for (;;)
    {
-      if (++jjround == 0x7fffffff)
-         ReInitRounds();
+      if (++jjround == 0x7fffffff) {
+        ReInitRounds();
+      }
       if (curChar < 64)
       {
          long l = 1L << curChar;
@@ -1502,164 +1661,204 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 10)
-                        kind = 10;
+                     if (kind > 10) {
+                      kind = 10;
+                    }
                      jjCheckNAddStates(18, 22);
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAddTwoStates(28, 29);
                   }
-                  else if (curChar == 39)
-                     jjCheckNAddStates(23, 25);
-                  else if (curChar == 34)
-                     jjCheckNAddStates(26, 28);
-                  else if (curChar == 46)
-                     jjCheckNAdd(1);
+                  else if (curChar == 39) {
+                    jjCheckNAddStates(23, 25);
+                  } else if (curChar == 34) {
+                    jjCheckNAddStates(26, 28);
+                  } else if (curChar == 46) {
+                    jjCheckNAdd(1);
+                  }
                   break;
                case 30:
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 57) {
+                      kind = 57;
+                    }
                      jjCheckNAdd(29);
                   }
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAdd(28);
                   }
                   break;
                case 1:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAddTwoStates(1, 2);
                   break;
                case 3:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(4);
+                  if ((0x280000000000L & l) != 0L) {
+                    jjCheckNAdd(4);
+                  }
                   break;
                case 4:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAdd(4);
                   break;
                case 5:
-                  if (curChar == 34)
-                     jjCheckNAddStates(26, 28);
+                  if (curChar == 34) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 6:
-                  if ((0xfffffffbffffffffL & l) != 0L)
-                     jjCheckNAddStates(26, 28);
+                  if ((0xfffffffbffffffffL & l) != 0L) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 8:
-                  if ((0x8400000000L & l) != 0L)
-                     jjCheckNAddStates(26, 28);
+                  if ((0x8400000000L & l) != 0L) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 9:
-                  if (curChar == 34 && kind > 13)
-                     kind = 13;
+                  if (curChar == 34 && kind > 13) {
+                    kind = 13;
+                  }
                   break;
                case 10:
-                  if (curChar == 39)
-                     jjCheckNAddStates(23, 25);
+                  if (curChar == 39) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 11:
-                  if ((0xffffff7fffffffffL & l) != 0L)
-                     jjCheckNAddStates(23, 25);
+                  if ((0xffffff7fffffffffL & l) != 0L) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 13:
-                  if ((0x8400000000L & l) != 0L)
-                     jjCheckNAddStates(23, 25);
+                  if ((0x8400000000L & l) != 0L) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 14:
-                  if (curChar == 39 && kind > 13)
-                     kind = 13;
+                  if (curChar == 39 && kind > 13) {
+                    kind = 13;
+                  }
                   break;
                case 15:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 10)
-                     kind = 10;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 10) {
+                    kind = 10;
+                  }
                   jjCheckNAddStates(18, 22);
                   break;
                case 16:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 10)
-                     kind = 10;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 10) {
+                    kind = 10;
+                  }
                   jjCheckNAdd(16);
                   break;
                case 17:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(17, 18);
+                  if ((0x3ff000000000000L & l) != 0L) {
+                    jjCheckNAddTwoStates(17, 18);
+                  }
                   break;
                case 18:
-                  if (curChar != 46)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if (curChar != 46) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAddTwoStates(19, 20);
                   break;
                case 19:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAddTwoStates(19, 20);
                   break;
                case 21:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(22);
+                  if ((0x280000000000L & l) != 0L) {
+                    jjCheckNAdd(22);
+                  }
                   break;
                case 22:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAdd(22);
                   break;
                case 23:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(23, 24);
+                  if ((0x3ff000000000000L & l) != 0L) {
+                    jjCheckNAddTwoStates(23, 24);
+                  }
                   break;
                case 25:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(26);
+                  if ((0x280000000000L & l) != 0L) {
+                    jjCheckNAdd(26);
+                  }
                   break;
                case 26:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 11)
-                     kind = 11;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 11) {
+                    kind = 11;
+                  }
                   jjCheckNAdd(26);
                   break;
                case 27:
-                  if ((0x1800000000L & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x1800000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 28:
-                  if ((0x3ff001000000000L & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x3ff001000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAdd(28);
                   break;
                case 29:
-                  if ((0x3ff001000000000L & l) == 0L)
-                     break;
-                  if (kind > 57)
-                     kind = 57;
+                  if ((0x3ff001000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 57) {
+                    kind = 57;
+                  }
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1674,74 +1873,91 @@ private int jjMoveNfa_1(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 57) {
+                      kind = 57;
+                    }
                      jjCheckNAdd(29);
                   }
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAdd(28);
                   }
                   break;
                case 2:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(29, 30);
+                  if ((0x2000000020L & l) != 0L) {
+                    jjAddStates(29, 30);
+                  }
                   break;
                case 6:
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddStates(26, 28);
+                  if ((0xffffffffefffffffL & l) != 0L) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 7:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 8;
+                  if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 8;
+                  }
                   break;
                case 8:
-                  if (curChar == 92)
-                     jjCheckNAddStates(26, 28);
+                  if (curChar == 92) {
+                    jjCheckNAddStates(26, 28);
+                  }
                   break;
                case 11:
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddStates(23, 25);
+                  if ((0xffffffffefffffffL & l) != 0L) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 12:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 13;
+                  if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 13;
+                  }
                   break;
                case 13:
-                  if (curChar == 92)
-                     jjCheckNAddStates(23, 25);
+                  if (curChar == 92) {
+                    jjCheckNAddStates(23, 25);
+                  }
                   break;
                case 20:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(31, 32);
+                  if ((0x2000000020L & l) != 0L) {
+                    jjAddStates(31, 32);
+                  }
                   break;
                case 24:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(33, 34);
+                  if ((0x2000000020L & l) != 0L) {
+                    jjAddStates(33, 34);
+                  }
                   break;
                case 28:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAdd(28);
                   break;
                case 29:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 57)
-                     kind = 57;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 57) {
+                    kind = 57;
+                  }
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1758,46 +1974,56 @@ private int jjMoveNfa_1(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 0:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 56)
-                        kind = 56;
+                     if (kind > 56) {
+                      kind = 56;
+                    }
                      jjCheckNAdd(28);
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 57) {
+                      kind = 57;
+                    }
                      jjCheckNAdd(29);
                   }
                   break;
                case 6:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(26, 28);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjAddStates(26, 28);
+                  }
                   break;
                case 11:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(23, 25);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjAddStates(23, 25);
+                  }
                   break;
                case 28:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 56)
-                     kind = 56;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 56) {
+                    kind = 56;
+                  }
                   jjCheckNAdd(28);
                   break;
                case 29:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 57)
-                     kind = 57;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                  }
+                  if (kind > 57) {
+                    kind = 57;
+                  }
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1811,8 +2037,9 @@ private int jjMoveNfa_1(int startState, int curPos)
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
-         return curPos;
+      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt))) {
+        return curPos;
+      }
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
    }
@@ -1829,8 +2056,9 @@ private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, lo
       case 0:
          return ((jjbitVec2[i2] & l2) != 0L);
       default :
-         if ((jjbitVec0[i1] & l1) != 0L)
-            return true;
+         if ((jjbitVec0[i1] & l1) != 0L) {
+          return true;
+        }
          return false;
    }
 }
@@ -1849,8 +2077,9 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
       case 61:
          return ((jjbitVec8[i2] & l2) != 0L);
       default :
-         if ((jjbitVec3[i1] & l1) != 0L)
-            return true;
+         if ((jjbitVec3[i1] & l1) != 0L) {
+          return true;
+        }
          return false;
    }
 }
@@ -1895,8 +2124,9 @@ private int lengthOfMatch;
 protected char curChar;
 /** Constructor. */
 public ELParserTokenManager(SimpleCharStream stream){
-   if (SimpleCharStream.staticFlag)
-      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+   if (SimpleCharStream.staticFlag) {
+    throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+  }
    input_stream = stream;
 }
 
@@ -1918,8 +2148,9 @@ private void ReInitRounds()
 {
    int i;
    jjround = 0x80000001;
-   for (i = 30; i-- > 0;)
-      jjrounds[i] = 0x80000000;
+   for (i = 30; i-- > 0;) {
+    jjrounds[i] = 0x80000000;
+  }
 }
 
 /** Reinitialise parser. */
@@ -1932,10 +2163,11 @@ public void ReInit(SimpleCharStream stream, int lexState)
 /** Switch to specified lex state. */
 public void SwitchTo(int lexState)
 {
-   if (lexState >= 3 || lexState < 0)
-      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
-   else
-      curLexState = lexState;
+   if (lexState >= 3 || lexState < 0) {
+    throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
+  } else {
+    curLexState = lexState;
+  }
 }
 
 protected Token jjFillToken()
@@ -2001,8 +2233,9 @@ public Token getNextToken()
        break;
      case 1:
        try { input_stream.backup(0);
-          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
-             curChar = input_stream.BeginToken();
+          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
+            curChar = input_stream.BeginToken();
+          }
        }
        catch (java.io.IOException e1) { continue EOFLoop; }
        jjmatchedKind = 0x7fffffff;
@@ -2015,8 +2248,9 @@ public Token getNextToken()
        break;
      case 2:
        try { input_stream.backup(0);
-          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
-             curChar = input_stream.BeginToken();
+          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
+            curChar = input_stream.BeginToken();
+          }
        }
        catch (java.io.IOException e1) { continue EOFLoop; }
        jjmatchedKind = 0x7fffffff;
@@ -2030,18 +2264,21 @@ public Token getNextToken()
    }
      if (jjmatchedKind != 0x7fffffff)
      {
-        if (jjmatchedPos + 1 < curPos)
-           input_stream.backup(curPos - jjmatchedPos - 1);
+        if (jjmatchedPos + 1 < curPos) {
+          input_stream.backup(curPos - jjmatchedPos - 1);
+        }
         if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            TokenLexicalActions(matchedToken);
-       if (jjnewLexState[jjmatchedKind] != -1)
-         curLexState = jjnewLexState[jjmatchedKind];
+       if (jjnewLexState[jjmatchedKind] != -1) {
+        curLexState = jjnewLexState[jjmatchedKind];
+      }
            return matchedToken;
         } else {
-         if (jjnewLexState[jjmatchedKind] != -1)
-           curLexState = jjnewLexState[jjmatchedKind];
+         if (jjnewLexState[jjmatchedKind] != -1) {
+          curLexState = jjnewLexState[jjmatchedKind];
+        }
            continue EOFLoop;
         }
      }
@@ -2056,9 +2293,9 @@ public Token getNextToken()
         if (curChar == '\n' || curChar == '\r') {
            error_line++;
            error_column = 0;
+        } else {
+          error_column++;
         }
-        else
-           error_column++;
      }
      if (!EOFSeen) {
         input_stream.backup(1);

==================================================
SimpleCharStream.java
index 44e4faf07b..02c413a5db 100644
--- a/java/org/apache/el/parser/ParseException.java
+++ b/java/org/apache/el/parser/ParseException.java
@@ -106,7 +106,9 @@ public class ParseException extends Exception {
     String retval = "Encountered \"";
     Token tok = currentToken.next;
     for (int i = 0; i < maxSize; i++) {
-      if (i != 0) retval += " ";
+      if (i != 0) {
+        retval += " ";
+      }
       if (tok.kind == 0) {
         retval += tokenImage[0];
         break;

==================================================
JSONParser.java
index 5f1f39e4e5..1b3b53477f 100644
--- a/java/org/apache/el/parser/SimpleCharStream.java
+++ b/java/org/apache/el/parser/SimpleCharStream.java
@@ -95,17 +95,19 @@ public class SimpleCharStream
           bufpos = maxNextCharInd = 0;
           available = tokenBegin;
         }
-        else if (tokenBegin < 0)
+        else if (tokenBegin < 0) {
           bufpos = maxNextCharInd = 0;
-        else
+        } else {
           ExpandBuff(false);
+        }
       }
-      else if (available > tokenBegin)
+      else if (available > tokenBegin) {
         available = bufsize;
-      else if ((tokenBegin - available) < 2048)
+      } else if ((tokenBegin - available) < 2048) {
         ExpandBuff(true);
-      else
+      } else {
         available = tokenBegin;
+      }
     }
 
     int i;
@@ -114,16 +116,17 @@ public class SimpleCharStream
       {
         inputStream.close();
         throw new java.io.IOException();
-      }
-      else
+      } else {
         maxNextCharInd += i;
+      }
       return;
     }
     catch(java.io.IOException e) {
       --bufpos;
       backup(0);
-      if (tokenBegin == -1)
+      if (tokenBegin == -1) {
         tokenBegin = bufpos;
+      }
       throw e;
     }
   }
@@ -153,9 +156,9 @@ public class SimpleCharStream
       if (c == '\n')
       {
         prevCharIsLF = true;
-      }
-      else
+      } else {
         line += (column = 1);
+      }
     }
 
     switch (c)
@@ -185,14 +188,16 @@ public class SimpleCharStream
     {
       --inBuf;
 
-      if (++bufpos == bufsize)
+      if (++bufpos == bufsize) {
         bufpos = 0;
+      }
 
       return buffer[bufpos];
     }
 
-    if (++bufpos >= maxNextCharInd)
+    if (++bufpos >= maxNextCharInd) {
       FillBuff();
+    }
 
     char c = buffer[bufpos];
 
@@ -244,8 +249,9 @@ public class SimpleCharStream
   public void backup(int amount) {
 
     inBuf += amount;
-    if ((bufpos -= amount) < 0)
+    if ((bufpos -= amount) < 0) {
       bufpos += bufsize;
+    }
   }
 
   /** Constructor. */
@@ -387,11 +393,12 @@ public class SimpleCharStream
   /** Get token literal value. */
   public String GetImage()
   {
-    if (bufpos >= tokenBegin)
+    if (bufpos >= tokenBegin) {
       return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
-    else
+    } else {
       return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                             new String(buffer, 0, bufpos + 1);
+    }
   }
 
   /** Get the suffix. */
@@ -399,9 +406,9 @@ public class SimpleCharStream
   {
     char[] ret = new char[len];
 
-    if ((bufpos + 1) >= len)
+    if ((bufpos + 1) >= len) {
       System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
-    else
+    } else
     {
       System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                         len - bufpos - 1);
@@ -453,10 +460,11 @@ public class SimpleCharStream
 
       while (i++ < len)
       {
-        if (bufline[j = start % bufsize] != bufline[++start % bufsize])
+        if (bufline[j = start % bufsize] != bufline[++start % bufsize]) {
           bufline[j] = newLine++;
-        else
+        } else {
           bufline[j] = newLine;
+        }
       }
     }
 

==================================================
JSONParserTokenManager.java
index 10e483fbd3..ecbb58dd3d 100644
--- a/java/org/apache/tomcat/util/json/JSONParser.java
+++ b/java/org/apache/tomcat/util/json/JSONParser.java
@@ -84,7 +84,9 @@ public class JSONParser implements JSONParserConstants {
 
   final public boolean ensureEOF() throws ParseException {
     jj_consume_token(0);
-{if ("" != null) return true;}
+{if ("" != null) {
+  return true;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -115,7 +117,9 @@ public class JSONParser implements JSONParserConstants {
       jj_consume_token(-1);
       throw new ParseException();
     }
-{if ("" != null) return x;}
+{if ("" != null) {
+  return x;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -166,7 +170,9 @@ key = o.toString();
       jj_consume_token(-1);
       throw new ParseException();
     }
-{if ("" != null) return key;}
+{if ("" != null) {
+  return key;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -215,7 +221,9 @@ key = null; value = null;
       ;
     }
     jj_consume_token(BRACE_CLOSE);
-{if ("" != null) return map;}
+{if ("" != null) {
+  return map;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -261,7 +269,9 @@ value = null;
     }
     jj_consume_token(BRACKET_CLOSE);
 list.trimToSize();
-        {if ("" != null) return list;}
+        {if ("" != null) {
+          return list;
+        }}
     throw new Error("Missing return statement in function");
 }
 
@@ -293,13 +303,17 @@ list.trimToSize();
       jj_consume_token(-1);
       throw new ParseException();
     }
-{if ("" != null) return x;}
+{if ("" != null) {
+  return x;
+}}
     throw new Error("Missing return statement in function");
 }
 
   final public Object nullValue() throws ParseException {
     jj_consume_token(NULL);
-{if ("" != null) return null;}
+{if ("" != null) {
+  return null;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -320,7 +334,9 @@ b = Boolean.FALSE;
       jj_consume_token(-1);
       throw new ParseException();
     }
-{if ("" != null) return b;}
+{if ("" != null) {
+  return b;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -329,18 +345,26 @@ b = Boolean.FALSE;
     case NUMBER_DECIMAL:{
       t = jj_consume_token(NUMBER_DECIMAL);
 if (nativeNumbers) {
-                {if ("" != null) return Long.valueOf(t.image);}
+                {if ("" != null) {
+                  return Long.valueOf(t.image);
+                }}
             } else {
-                {if ("" != null) return new java.math.BigDecimal(t.image);}
+                {if ("" != null) {
+                  return new java.math.BigDecimal(t.image);
+                }}
             }
       break;
       }
     case NUMBER_INTEGER:{
       t = jj_consume_token(NUMBER_INTEGER);
 if (nativeNumbers) {
-                {if ("" != null) return Double.valueOf(t.image);}
+                {if ("" != null) {
+                  return Double.valueOf(t.image);
+                }}
             } else {
-                {if ("" != null) return new java.math.BigInteger(substringBefore(t.image, '.'));}
+                {if ("" != null) {
+                  return new java.math.BigInteger(substringBefore(t.image, '.'));
+                }}
             }
       break;
       }
@@ -369,7 +393,9 @@ if (nativeNumbers) {
       jj_consume_token(-1);
       throw new ParseException();
     }
-{if ("" != null) return s;}
+{if ("" != null) {
+  return s;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -377,13 +403,17 @@ if (nativeNumbers) {
     switch (jj_nt.kind) {
     case STRING_DOUBLE_EMPTY:{
       jj_consume_token(STRING_DOUBLE_EMPTY);
-{if ("" != null) return "";}
+{if ("" != null) {
+  return "";
+}}
       break;
       }
     case STRING_DOUBLE_NONEMPTY:{
       jj_consume_token(STRING_DOUBLE_NONEMPTY);
 String image = token.image;
-            {if ("" != null) return image.substring(1, image.length() - 1);}
+            {if ("" != null) {
+              return image.substring(1, image.length() - 1);
+            }}
       break;
       }
     default:
@@ -398,13 +428,17 @@ String image = token.image;
     switch (jj_nt.kind) {
     case STRING_SINGLE_EMPTY:{
       jj_consume_token(STRING_SINGLE_EMPTY);
-{if ("" != null) return "";}
+{if ("" != null) {
+  return "";
+}}
       break;
       }
     case STRING_SINGLE_NONEMPTY:{
       jj_consume_token(STRING_SINGLE_NONEMPTY);
 String image = token.image;
-            {if ("" != null) return image.substring(1, image.length() - 1);}
+            {if ("" != null) {
+              return image.substring(1, image.length() - 1);
+            }}
       break;
       }
     default:
@@ -417,7 +451,9 @@ String image = token.image;
 
   final public String symbol() throws ParseException {
     jj_consume_token(SYMBOL);
-{if ("" != null) return token.image;}
+{if ("" != null) {
+  return token.image;
+}}
     throw new Error("Missing return statement in function");
 }
 
@@ -449,7 +485,9 @@ String image = token.image;
 	 token = new Token();
 	 token.next = jj_nt = token_source.getNextToken();
 	 jj_gen = 0;
-	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
+	 for (int i = 0; i < 13; i++) {
+    jj_la1[i] = -1;
+  }
   }
 
   /** Reinitialise. */
@@ -463,7 +501,9 @@ String image = token.image;
 	 token = new Token();
 	 token.next = jj_nt = token_source.getNextToken();
 	 jj_gen = 0;
-	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
+	 for (int i = 0; i < 13; i++) {
+    jj_la1[i] = -1;
+  }
   }
 
   /** Constructor. */
@@ -473,7 +513,9 @@ String image = token.image;
 	 token = new Token();
 	 token.next = jj_nt = token_source.getNextToken();
 	 jj_gen = 0;
-	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
+	 for (int i = 0; i < 13; i++) {
+    jj_la1[i] = -1;
+  }
   }
 
   /** Reinitialise. */
@@ -491,7 +533,9 @@ String image = token.image;
 	 token = new Token();
 	 token.next = jj_nt = token_source.getNextToken();
 	 jj_gen = 0;
-	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
+	 for (int i = 0; i < 13; i++) {
+    jj_la1[i] = -1;
+  }
   }
 
   /** Constructor with generated Token Manager. */
@@ -500,7 +544,9 @@ String image = token.image;
 	 token = new Token();
 	 token.next = jj_nt = token_source.getNextToken();
 	 jj_gen = 0;
-	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
+	 for (int i = 0; i < 13; i++) {
+    jj_la1[i] = -1;
+  }
   }
 
   /** Reinitialise. */
@@ -509,13 +555,18 @@ String image = token.image;
 	 token = new Token();
 	 token.next = jj_nt = token_source.getNextToken();
 	 jj_gen = 0;
-	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
+	 for (int i = 0; i < 13; i++) {
+    jj_la1[i] = -1;
+  }
   }
 
   private Token jj_consume_token(int kind) throws ParseException {
 	 Token oldToken = token;
-	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
-	 else jj_nt = jj_nt.next = token_source.getNextToken();
+	 if ((token = jj_nt).next != null) {
+    jj_nt = jj_nt.next;
+  } else {
+    jj_nt = jj_nt.next = token_source.getNextToken();
+  }
 	 if (token.kind == kind) {
 	   jj_gen++;
 	   return token;
@@ -529,8 +580,11 @@ String image = token.image;
 
 /** Get the next Token. */
   final public Token getNextToken() {
-	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
-	 else jj_nt = jj_nt.next = token_source.getNextToken();
+	 if ((token = jj_nt).next != null) {
+    jj_nt = jj_nt.next;
+  } else {
+    jj_nt = jj_nt.next = token_source.getNextToken();
+  }
 	 jj_gen++;
 	 return token;
   }
@@ -539,8 +593,11 @@ String image = token.image;
   final public Token getToken(int index) {
 	 Token t = token;
 	 for (int i = 0; i < index; i++) {
-	   if (t.next != null) t = t.next;
-	   else t = t.next = token_source.getNextToken();
+	   if (t.next != null) {
+      t = t.next;
+    } else {
+      t = t.next = token_source.getNextToken();
+    }
 	 }
 	 return t;
   }

==================================================
JavaCharStream.java
index 65b359f41f..28c0529bf4 100644
--- a/java/org/apache/tomcat/util/json/JSONParserTokenManager.java
+++ b/java/org/apache/tomcat/util/json/JSONParserTokenManager.java
@@ -36,10 +36,12 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0){
             jjmatchedKind = 28;
             return 15;
          }
-         if ((active0 & 0x400000L) != 0L)
-            return 38;
-         if ((active0 & 0x800000L) != 0L)
-            return 39;
+         if ((active0 & 0x400000L) != 0L) {
+          return 38;
+        }
+         if ((active0 & 0x800000L) != 0L) {
+          return 39;
+        }
          return -1;
       case 1:
          if ((active0 & 0xe0000L) != 0L)
@@ -58,8 +60,9 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0){
          }
          return -1;
       case 3:
-         if ((active0 & 0xa0000L) != 0L)
-            return 15;
+         if ((active0 & 0xa0000L) != 0L) {
+          return 15;
+        }
          if ((active0 & 0x40000L) != 0L)
          {
             jjmatchedKind = 28;
@@ -121,12 +124,14 @@ private int jjMoveStringLiteralDfa1_0(long active0){
    switch(curChar)
    {
       case 34:
-         if ((active0 & 0x800000L) != 0L)
-            return jjStopAtPos(1, 23);
+         if ((active0 & 0x800000L) != 0L) {
+          return jjStopAtPos(1, 23);
+        }
          break;
       case 39:
-         if ((active0 & 0x400000L) != 0L)
-            return jjStopAtPos(1, 22);
+         if ((active0 & 0x400000L) != 0L) {
+          return jjStopAtPos(1, 22);
+        }
          break;
       case 65:
       case 97:
@@ -143,8 +148,9 @@ private int jjMoveStringLiteralDfa1_0(long active0){
    return jjStartNfa_0(0, active0);
 }
 private int jjMoveStringLiteralDfa2_0(long old0, long active0){
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(0, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_0(0, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(1, active0);
@@ -164,8 +170,9 @@ private int jjMoveStringLiteralDfa2_0(long old0, long active0){
    return jjStartNfa_0(1, active0);
 }
 private int jjMoveStringLiteralDfa3_0(long old0, long active0){
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(1, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_0(1, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(2, active0);
@@ -175,13 +182,15 @@ private int jjMoveStringLiteralDfa3_0(long old0, long active0){
    {
       case 69:
       case 101:
-         if ((active0 & 0x20000L) != 0L)
-            return jjStartNfaWithStates_0(3, 17, 15);
+         if ((active0 & 0x20000L) != 0L) {
+          return jjStartNfaWithStates_0(3, 17, 15);
+        }
          break;
       case 76:
       case 108:
-         if ((active0 & 0x80000L) != 0L)
-            return jjStartNfaWithStates_0(3, 19, 15);
+         if ((active0 & 0x80000L) != 0L) {
+          return jjStartNfaWithStates_0(3, 19, 15);
+        }
          break;
       case 83:
       case 115:
@@ -192,8 +201,9 @@ private int jjMoveStringLiteralDfa3_0(long old0, long active0){
    return jjStartNfa_0(2, active0);
 }
 private int jjMoveStringLiteralDfa4_0(long old0, long active0){
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(2, old0);
+   if (((active0 &= old0)) == 0L) {
+    return jjStartNfa_0(2, old0);
+  }
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(3, active0);
@@ -203,8 +213,9 @@ private int jjMoveStringLiteralDfa4_0(long old0, long active0){
    {
       case 69:
       case 101:
-         if ((active0 & 0x40000L) != 0L)
-            return jjStartNfaWithStates_0(4, 18, 15);
+         if ((active0 & 0x40000L) != 0L) {
+          return jjStartNfaWithStates_0(4, 18, 15);
+        }
          break;
       default :
          break;
@@ -234,8 +245,9 @@ private int jjMoveNfa_0(int startState, int curPos)
    int kind = 0x7fffffff;
    for (;;)
    {
-      if (++jjround == 0x7fffffff)
-         ReInitRounds();
+      if (++jjround == 0x7fffffff) {
+        ReInitRounds();
+      }
       if (curChar < 64)
       {
          long l = 1L << curChar;
@@ -246,19 +258,22 @@ private int jjMoveNfa_0(int startState, int curPos)
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 28)
-                        kind = 28;
+                     if (kind > 28) {
+                      kind = 28;
+                    }
                      { jjCheckNAdd(15); }
                   }
                   else if ((0x3400L & l) != 0L)
                   {
-                     if (kind > 5)
-                        kind = 5;
+                     if (kind > 5) {
+                      kind = 5;
+                    }
                   }
                   else if ((0x100000200L & l) != 0L)
                   {
-                     if (kind > 4)
-                        kind = 4;
+                     if (kind > 4) {
+                      kind = 4;
+                    }
                   }
                   else if (curChar == 45)
                      { jjCheckNAddStates(0, 3); }
@@ -272,14 +287,16 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddTwoStates(1, 2); }
                   if ((0x3fe000000000000L & l) != 0L)
                   {
-                     if (kind > 15)
-                        kind = 15;
+                     if (kind > 15) {
+                      kind = 15;
+                    }
                      { jjCheckNAddStates(6, 8); }
                   }
                   else if (curChar == 48)
                   {
-                     if (kind > 15)
-                        kind = 15;
+                     if (kind > 15) {
+                      kind = 15;
+                    }
                      { jjCheckNAddStates(9, 11); }
                   }
                   break;
@@ -298,16 +315,19 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddTwoStates(1, 2); }
                   break;
                case 2:
-                  if ((0x3400L & l) != 0L && kind > 3)
-                     kind = 3;
+                  if ((0x3400L & l) != 0L && kind > 3) {
+                    kind = 3;
+                  }
                   break;
                case 3:
-                  if ((0x100000200L & l) != 0L && kind > 4)
-                     kind = 4;
+                  if ((0x100000200L & l) != 0L && kind > 4) {
+                    kind = 4;
+                  }
                   break;
                case 4:
-                  if ((0x3400L & l) != 0L && kind > 5)
-                     kind = 5;
+                  if ((0x3400L & l) != 0L && kind > 5) {
+                    kind = 5;
+                  }
                   break;
                case 5:
                   if (curChar == 39)
@@ -318,8 +338,9 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddStates(12, 14); }
                   break;
                case 9:
-                  if (curChar == 39 && kind > 26)
-                     kind = 26;
+                  if (curChar == 39 && kind > 26) {
+                    kind = 26;
+                  }
                   break;
                case 10:
                   if (curChar == 34)
@@ -330,14 +351,17 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddStates(15, 17); }
                   break;
                case 14:
-                  if (curChar == 34 && kind > 27)
-                     kind = 27;
+                  if (curChar == 34 && kind > 27) {
+                    kind = 27;
+                  }
                   break;
                case 15:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 28)
-                     kind = 28;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 28) {
+                    kind = 28;
+                  }
                   { jjCheckNAdd(15); }
                   break;
                case 16:
@@ -353,8 +377,9 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddTwoStates(18, 19); }
                   break;
                case 19:
-                  if ((0x3400L & l) != 0L && kind > 1)
-                     kind = 1;
+                  if ((0x3400L & l) != 0L && kind > 1) {
+                    kind = 1;
+                  }
                   break;
                case 20:
                   if (curChar == 42)
@@ -364,36 +389,44 @@ private int jjMoveNfa_0(int startState, int curPos)
                   { jjCheckNAddTwoStates(21, 23); }
                   break;
                case 22:
-                  if (curChar == 47 && kind > 2)
-                     kind = 2;
+                  if (curChar == 47 && kind > 2) {
+                    kind = 2;
+                  }
                   break;
                case 23:
-                  if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 22;
+                  if (curChar == 42) {
+                    jjstateSet[jjnewStateCnt++] = 22;
+                  }
                   break;
                case 24:
                   if (curChar == 45)
                      { jjCheckNAddStates(0, 3); }
                   break;
                case 25:
-                  if (curChar != 48)
-                     break;
-                  if (kind > 15)
-                     kind = 15;
+                  if (curChar != 48) {
+                    break;
+                  }
+                  if (kind > 15) {
+                    kind = 15;
+                  }
                   { jjCheckNAdd(25); }
                   break;
                case 26:
-                  if ((0x3fe000000000000L & l) == 0L)
-                     break;
-                  if (kind > 15)
-                     kind = 15;
+                  if ((0x3fe000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 15) {
+                    kind = 15;
+                  }
                   { jjCheckNAdd(27); }
                   break;
                case 27:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 15)
-                     kind = 15;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 15) {
+                    kind = 15;
+                  }
                   { jjCheckNAdd(27); }
                   break;
                case 28:
@@ -405,10 +438,12 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAdd(30); }
                   break;
                case 30:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 16)
-                     kind = 16;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 16) {
+                    kind = 16;
+                  }
                   { jjCheckNAddTwoStates(30, 31); }
                   break;
                case 32:
@@ -416,10 +451,12 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAdd(33); }
                   break;
                case 33:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 16)
-                     kind = 16;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 16) {
+                    kind = 16;
+                  }
                   { jjCheckNAdd(33); }
                   break;
                case 34:
@@ -431,17 +468,21 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddTwoStates(35, 29); }
                   break;
                case 36:
-                  if (curChar != 48)
-                     break;
-                  if (kind > 15)
-                     kind = 15;
+                  if (curChar != 48) {
+                    break;
+                  }
+                  if (kind > 15) {
+                    kind = 15;
+                  }
                   { jjCheckNAddStates(9, 11); }
                   break;
                case 37:
-                  if ((0x3fe000000000000L & l) == 0L)
-                     break;
-                  if (kind > 15)
-                     kind = 15;
+                  if ((0x3fe000000000000L & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 15) {
+                    kind = 15;
+                  }
                   { jjCheckNAddStates(6, 8); }
                   break;
                default : break;
@@ -457,23 +498,27 @@ private int jjMoveNfa_0(int startState, int curPos)
             {
                case 0:
                case 15:
-                  if ((0x7fffffe07fffffeL & l) == 0L)
-                     break;
-                  if (kind > 28)
-                     kind = 28;
+                  if ((0x7fffffe07fffffeL & l) == 0L) {
+                    break;
+                  }
+                  if (kind > 28) {
+                    kind = 28;
+                  }
                   { jjCheckNAdd(15); }
                   break;
                case 38:
                   if ((0xffffffffefffffffL & l) != 0L)
                      { jjCheckNAddStates(12, 14); }
-                  else if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 8;
+                  else if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 8;
+                  }
                   break;
                case 39:
                   if ((0xffffffffefffffffL & l) != 0L)
                      { jjCheckNAddStates(15, 17); }
-                  else if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 13;
+                  else if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 13;
+                  }
                   break;
                case 1:
                   { jjAddStates(18, 19); }
@@ -483,8 +528,9 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddStates(12, 14); }
                   break;
                case 7:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 8;
+                  if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 8;
+                  }
                   break;
                case 8:
                   if ((0x14404410144044L & l) != 0L)
@@ -495,8 +541,9 @@ private int jjMoveNfa_0(int startState, int curPos)
                      { jjCheckNAddStates(15, 17); }
                   break;
                case 12:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 13;
+                  if (curChar == 92) {
+                    jjstateSet[jjnewStateCnt++] = 13;
+                  }
                   break;
                case 13:
                   if ((0x14404410144044L & l) != 0L)
@@ -547,7 +594,11 @@ private int jjMoveNfa_0(int startState, int curPos)
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                      { jjAddStates(22, 23); }
                   break;
-               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
+               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) {
+                break;
+              } else {
+                break;
+              }
             }
          } while(i != startsAt);
       }
@@ -558,8 +609,9 @@ private int jjMoveNfa_0(int startState, int curPos)
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
-         return curPos;
+      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt))) {
+        return curPos;
+      }
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
    }
@@ -604,8 +656,9 @@ private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, lo
       case 0:
          return ((jjbitVec2[i2] & l2) != 0L);
       default :
-         if ((jjbitVec0[i1] & l1) != 0L)
-            return true;
+         if ((jjbitVec0[i1] & l1) != 0L) {
+          return true;
+        }
          return false;
    }
 }
@@ -643,8 +696,9 @@ public Token getNextToken()
    curPos = jjMoveStringLiteralDfa0_0();
    if (jjmatchedKind != 0x7fffffff)
    {
-      if (jjmatchedPos + 1 < curPos)
-         input_stream.backup(curPos - jjmatchedPos - 1);
+      if (jjmatchedPos + 1 < curPos) {
+        input_stream.backup(curPos - jjmatchedPos - 1);
+      }
       if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
       {
          matchedToken = jjFillToken();
@@ -664,9 +718,9 @@ public Token getNextToken()
       if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
+      } else {
+        error_column++;
       }
-      else
-         error_column++;
    }
    if (!EOFSeen) {
       input_stream.backup(1);
@@ -731,8 +785,9 @@ private void jjCheckNAddStates(int start, int end)
     /** Constructor. */
     public JSONParserTokenManager(JavaCharStream stream){
 
-      if (JavaCharStream.staticFlag)
-            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+      if (JavaCharStream.staticFlag) {
+        throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+      }
 
     input_stream = stream;
   }
@@ -758,8 +813,9 @@ private void jjCheckNAddStates(int start, int end)
   {
     int i;
     jjround = 0x80000001;
-    for (i = 38; i-- > 0;)
+    for (i = 38; i-- > 0;) {
       jjrounds[i] = 0x80000000;
+    }
   }
 
   /** Reinitialise parser. */
@@ -772,10 +828,11 @@ private void jjCheckNAddStates(int start, int end)
   /** Switch to specified lex state. */
   public void SwitchTo(int lexState)
   {
-    if (lexState >= 1 || lexState < 0)
+    if (lexState >= 1 || lexState < 0) {
       throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
-    else
+    } else {
       curLexState = lexState;
+    }
   }
 
 

==================================================
ParseException.java
index 1390f1d63b..b194e600f5 100644
--- a/java/org/apache/tomcat/util/json/JavaCharStream.java
+++ b/java/org/apache/tomcat/util/json/JavaCharStream.java
@@ -152,8 +152,9 @@ class JavaCharStream
   protected void FillBuff() throws java.io.IOException
   {
     int i;
-    if (maxNextCharInd == 4096)
+    if (maxNextCharInd == 4096) {
       maxNextCharInd = nextCharInd = 0;
+    }
 
     try {
       if ((i = inputStream.read(nextCharBuf, maxNextCharInd,
@@ -161,9 +162,9 @@ class JavaCharStream
       {
         inputStream.close();
         throw new java.io.IOException();
+      } else {
+        maxNextCharInd += i;
       }
-      else
-         maxNextCharInd += i;
       return;
     }
     catch(java.io.IOException e) {
@@ -181,8 +182,9 @@ class JavaCharStream
 
   protected char ReadByte() throws java.io.IOException
   {
-    if (++nextCharInd >= maxNextCharInd)
+    if (++nextCharInd >= maxNextCharInd) {
       FillBuff();
+    }
 
     return nextCharBuf[nextCharInd];
   }
@@ -194,8 +196,9 @@ class JavaCharStream
     {
       --inBuf;
 
-      if (++bufpos == bufsize)
+      if (++bufpos == bufsize) {
         bufpos = 0;
+      }
 
       tokenBegin = bufpos;
       return buffer[bufpos];
@@ -215,16 +218,17 @@ class JavaCharStream
       {
         bufpos = 0;
         available = tokenBegin;
-      }
-      else
+      } else {
         ExpandBuff(false);
+      }
     }
-    else if (available > tokenBegin)
+    else if (available > tokenBegin) {
       available = bufsize;
-    else if ((tokenBegin - available) < 2048)
+    } else if ((tokenBegin - available) < 2048) {
       ExpandBuff(true);
-    else
+    } else {
       available = tokenBegin;
+    }
   }
 
   protected void UpdateLineColumn(char c)
@@ -242,9 +246,9 @@ class JavaCharStream
       if (c == '\n')
       {
         prevCharIsLF = true;
-      }
-      else
+      } else {
         line += (column = 1);
+      }
     }
 
     switch (c)
@@ -274,16 +278,18 @@ class JavaCharStream
     {
       --inBuf;
 
-      if (++bufpos == bufsize)
+      if (++bufpos == bufsize) {
         bufpos = 0;
+      }
 
       return buffer[bufpos];
     }
 
     char c;
 
-    if (++bufpos == available)
+    if (++bufpos == available) {
       AdjustBuffSize();
+    }
 
     if ((buffer[bufpos] = c = ReadByte()) == '\\')
     {
@@ -293,8 +299,9 @@ class JavaCharStream
 
       for (;;) // Read all the backslashes
       {
-        if (++bufpos == available)
+        if (++bufpos == available) {
           AdjustBuffSize();
+        }
 
         try
         {
@@ -304,8 +311,9 @@ class JavaCharStream
             // found a non-backslash char.
             if ((c == 'u') && ((backSlashCnt & 1) == 1))
             {
-              if (--bufpos < 0)
+              if (--bufpos < 0) {
                 bufpos = bufsize - 1;
+              }
 
               break;
             }
@@ -317,8 +325,9 @@ class JavaCharStream
         catch(java.io.IOException e)
         {
 	  // We are returning one backslash so we should only backup (count-1)
-          if (backSlashCnt > 1)
+          if (backSlashCnt > 1) {
             backup(backSlashCnt-1);
+          }
 
           return '\\';
         }
@@ -330,8 +339,9 @@ class JavaCharStream
       // Here, we have seen an odd number of backslash's followed by a 'u'
       try
       {
-        while ((c = ReadByte()) == 'u')
+        while ((c = ReadByte()) == 'u') {
           ++column;
+        }
 
         buffer[bufpos] = c = (char)(hexval(c) << 12 |
                                     hexval(ReadByte()) << 8 |
@@ -346,9 +356,9 @@ class JavaCharStream
                                          " column " + column + ".");
       }
 
-      if (backSlashCnt == 1)
+      if (backSlashCnt == 1) {
         return c;
-      else
+      } else
       {
         backup(backSlashCnt - 1);
         return '\\';
@@ -401,8 +411,9 @@ class JavaCharStream
   public void backup(int amount) {
 
     inBuf += amount;
-    if ((bufpos -= amount) < 0)
+    if ((bufpos -= amount) < 0) {
       bufpos += bufsize;
+    }
   }
 
 /** Constructor. */
@@ -545,11 +556,12 @@ class JavaCharStream
   /** @return token image as String */
   public String GetImage()
   {
-    if (bufpos >= tokenBegin)
+    if (bufpos >= tokenBegin) {
       return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
-    else
+    } else {
       return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                               new String(buffer, 0, bufpos + 1);
+    }
   }
 
   /** @return suffix */
@@ -557,9 +569,9 @@ class JavaCharStream
   {
     char[] ret = new char[len];
 
-    if ((bufpos + 1) >= len)
+    if ((bufpos + 1) >= len) {
       System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
-    else
+    } else
     {
       System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                         len - bufpos - 1);
@@ -612,10 +624,11 @@ class JavaCharStream
 
       while (i++ < len)
       {
-        if (bufline[j = start % bufsize] != bufline[++start % bufsize])
+        if (bufline[j = start % bufsize] != bufline[++start % bufsize]) {
           bufline[j] = newLine++;
-        else
+        } else {
           bufline[j] = newLine;
+        }
       }
     }
 

==================================================
ConnectionPool.java
index 9d51f5f702..fa2ec53480 100644
--- a/java/org/apache/tomcat/util/json/ParseException.java
+++ b/java/org/apache/tomcat/util/json/ParseException.java
@@ -129,7 +129,9 @@ public class ParseException extends Exception {
     String retval = "Encountered \"";
     Token tok = currentToken.next;
     for (int i = 0; i < maxSize; i++) {
-      if (i != 0) retval += " ";
+      if (i != 0) {
+        retval += " ";
+      }
       if (tok.kind == 0) {
         retval += tokenImage[0];
         break;

==================================================
DataSource.java
index 99a9face82..37fb7a39a7 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -295,7 +295,9 @@ public class ConnectionPool {
         //fetch previously cached interceptor proxy - one per connection
         JdbcInterceptor handler = con.getHandler();
         if (handler==null) {
-            if (jmxPool != null) con.createMBean();
+            if (jmxPool != null) {
+              con.createMBean();
+            }
             //build the proxy handler
             handler = new ProxyConnection(this,con,getPoolProperties().isUseEquals());
             //set up the interceptor chain
@@ -378,7 +380,9 @@ public class ConnectionPool {
      */
     protected void close(boolean force) {
         //are we already closed
-        if (this.closed) return;
+        if (this.closed) {
+          return;
+        }
         //prevent other threads from entering
         this.closed = true;
         //stop background thread
@@ -395,10 +399,11 @@ public class ConnectionPool {
                 //close it and retrieve the next one, if one is available
                 while (con != null) {
                     //close the connection
-                    if (pool==idle)
-                        release(con);
-                    else
-                        abandon(con);
+                    if (pool==idle) {
+                      release(con);
+                    } else {
+                      abandon(con);
+                    }
                     if (!pool.isEmpty()) {
                         con = pool.poll(1000, TimeUnit.MILLISECONDS);
                     } else {
@@ -410,9 +415,13 @@ public class ConnectionPool {
                     Thread.currentThread().interrupt();
                 }
             }
-            if (pool.isEmpty() && force && pool!=busy) pool = busy;
+            if (pool.isEmpty() && force && pool!=busy) {
+              pool = busy;
+            }
+        }
+        if (this.getPoolProperties().isJmxEnabled()) {
+          this.jmxPool = null;
         }
-        if (this.getPoolProperties().isJmxEnabled()) this.jmxPool = null;
         PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
         for (int i=0; i<proxies.length; i++) {
             try {
@@ -453,7 +462,9 @@ public class ConnectionPool {
         initializePoolCleaner(properties);
 
         //create JMX MBean
-        if (this.getPoolProperties().isJmxEnabled()) createMBean();
+        if (this.getPoolProperties().isJmxEnabled()) {
+          createMBean();
+        }
 
         //Parse and create an initial set of interceptors. Letting them know the pool has started.
         //These interceptors will not get any connection.
@@ -468,7 +479,9 @@ public class ConnectionPool {
                 interceptor.poolStarted(this);
             }catch (Exception x) {
                 log.error("Unable to inform interceptor of pool start.",x);
-                if (jmxPool!=null) jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));
+                if (jmxPool!=null) {
+                  jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));
+                }
                 close(true);
                 SQLException ex = new SQLException();
                 ex.initCause(x);
@@ -486,7 +499,9 @@ public class ConnectionPool {
         } catch (SQLException x) {
             log.error("Unable to create initial connections of pool.", x);
             if (!poolProperties.isIgnoreExceptionOnPreLoad()) {
-                if (jmxPool!=null) jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));
+                if (jmxPool!=null) {
+                  jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));
+                }
                 close(true);
                 throw x;
             }
@@ -558,8 +573,9 @@ public class ConnectionPool {
      * @param con PooledConnection
      */
     protected void abandon(PooledConnection con) {
-        if (con == null)
-            return;
+        if (con == null) {
+          return;
+        }
         try {
             con.lock();
             String trace = con.getStackTrace();
@@ -586,10 +602,12 @@ public class ConnectionPool {
      * @param con PooledConnection
      */
     protected void suspect(PooledConnection con) {
-        if (con == null)
-            return;
-        if (con.isSuspect())
-            return;
+        if (con == null) {
+          return;
+        }
+        if (con.isSuspect()) {
+          return;
+        }
         try {
             con.lock();
             String trace = con.getStackTrace();
@@ -610,8 +628,9 @@ public class ConnectionPool {
      * @param con PooledConnection
      */
     protected void release(PooledConnection con) {
-        if (con == null)
-            return;
+        if (con == null) {
+          return;
+        }
         try {
             con.lock();
             if (con.release()) {
@@ -659,7 +678,9 @@ public class ConnectionPool {
                 //configure the connection and return it
                 PooledConnection result = borrowConnection(now, con, username, password);
                 borrowedCount.incrementAndGet();
-                if (result!=null) return result;
+                if (result!=null) {
+                  return result;
+                }
             }
 
             //if we get here, see if we need to create one
@@ -735,8 +756,12 @@ public class ConnectionPool {
     protected PooledConnection createConnection(long now, PooledConnection notUsed, String username, String password) throws SQLException {
         //no connections where available we'll create one
         PooledConnection con = create(false);
-        if (username!=null) con.getAttributes().put(PooledConnection.PROP_USER, username);
-        if (password!=null) con.getAttributes().put(PooledConnection.PROP_PASSWORD, password);
+        if (username!=null) {
+          con.getAttributes().put(PooledConnection.PROP_USER, username);
+        }
+        if (password!=null) {
+          con.getAttributes().put(PooledConnection.PROP_PASSWORD, password);
+        }
         boolean error = false;
         try {
             //connect and validate the connection
@@ -760,8 +785,9 @@ public class ConnectionPool {
             } //end if
         } catch (Exception e) {
             error = true;
-            if (log.isDebugEnabled())
-                log.debug("Unable to create a new JDBC connection.", e);
+            if (log.isDebugEnabled()) {
+              log.debug("Unable to create a new JDBC connection.", e);
+            }
             if (e instanceof SQLException) {
                 throw (SQLException)e;
             } else {
@@ -888,10 +914,14 @@ public class ConnectionPool {
             if (Boolean.FALSE.equals(con.getPoolProperties().getDefaultAutoCommit())) {
                 if (this.getPoolProperties().getRollbackOnReturn()) {
                     boolean autocommit = con.getConnection().getAutoCommit();
-                    if (!autocommit) con.getConnection().rollback();
+                    if (!autocommit) {
+                      con.getConnection().rollback();
+                    }
                 } else if (this.getPoolProperties().getCommitOnReturn()) {
                     boolean autocommit = con.getConnection().getAutoCommit();
-                    if (!autocommit) con.getConnection().commit();
+                    if (!autocommit) {
+                      con.getConnection().commit();
+                    }
                 }
             }
             return true;
@@ -909,11 +939,21 @@ public class ConnectionPool {
      * @return <code>true</code> if the connection should be closed
      */
     protected boolean shouldClose(PooledConnection con, int action) {
-        if (con.getConnectionVersion() < getPoolVersion()) return true;
-        if (con.isDiscarded()) return true;
-        if (isClosed()) return true;
-        if (!con.validate(action)) return true;
-        if (!terminateTransaction(con)) return true;
+        if (con.getConnectionVersion() < getPoolVersion()) {
+          return true;
+        }
+        if (con.isDiscarded()) {
+          return true;
+        }
+        if (isClosed()) {
+          return true;
+        }
+        if (!con.validate(action)) {
+          return true;
+        }
+        if (!terminateTransaction(con)) {
+          return true;
+        }
         return false;
     }
 
@@ -928,7 +968,9 @@ public class ConnectionPool {
     protected boolean reconnectIfExpired(PooledConnection con) {
         if (con.isMaxAgeExpired()) {
             try {
-                if (log.isDebugEnabled()) log.debug( "Connection ["+this+"] expired because of maxAge, trying to reconnect" );
+                if (log.isDebugEnabled()) {
+                  log.debug( "Connection ["+this+"] expired because of maxAge, trying to reconnect" );
+                }
                 con.reconnect();
                 reconnectedCount.incrementAndGet();
                 if ( isInitNewConnections() && !con.validate( PooledConnection.VALIDATE_INIT)) {
@@ -1007,8 +1049,12 @@ public class ConnectionPool {
      * @return <code>true</code> if the connection should be abandoned
      */
     protected boolean shouldAbandon() {
-        if (!poolProperties.isRemoveAbandoned()) return false;
-        if (poolProperties.getAbandonWhenPercentageFull()==0) return true;
+        if (!poolProperties.isRemoveAbandoned()) {
+          return false;
+        }
+        if (poolProperties.getAbandonWhenPercentageFull()==0) {
+          return true;
+        }
         float used = busy.size();
         float max  = poolProperties.getMaxActive();
         float perc = poolProperties.getAbandonWhenPercentageFull();
@@ -1020,7 +1066,9 @@ public class ConnectionPool {
      */
     public void checkAbandoned() {
         try {
-            if (busy.isEmpty()) return;
+            if (busy.isEmpty()) {
+              return;
+            }
             Iterator<PooledConnection> locked = busy.iterator();
             int sto = getPoolProperties().getSuspectTimeout();
             while (locked.hasNext()) {
@@ -1030,8 +1078,9 @@ public class ConnectionPool {
                     con.lock();
                     //the con has been returned to the pool or released
                     //ignore it
-                    if (idle.contains(con) || con.isReleased())
-                        continue;
+                    if (idle.contains(con) || con.isReleased()) {
+                      continue;
+                    }
                     long time = con.getTimestamp();
                     long now = System.currentTimeMillis();
                     if (shouldAbandon() && (now - time) > con.getAbandonTimeout()) {
@@ -1045,8 +1094,9 @@ public class ConnectionPool {
                     } //end if
                 } finally {
                     con.unlock();
-                    if (setToNull)
-                        con = null;
+                    if (setToNull) {
+                      con = null;
+                    }
                 }
             } //while
         } catch (ConcurrentModificationException e) {
@@ -1067,7 +1117,9 @@ public class ConnectionPool {
     public void checkIdle(boolean ignoreMinSize) {
 
         try {
-            if (idle.isEmpty()) return;
+            if (idle.isEmpty()) {
+              return;
+            }
             long now = System.currentTimeMillis();
             Iterator<PooledConnection> unlocked = idle.iterator();
             while ( (ignoreMinSize || (idle.size()>=getPoolProperties().getMinIdle())) && unlocked.hasNext()) {
@@ -1076,8 +1128,9 @@ public class ConnectionPool {
                 try {
                     con.lock();
                     //the con been taken out, we can't clean it up
-                    if (busy.contains(con))
-                        continue;
+                    if (busy.contains(con)) {
+                      continue;
+                    }
                     long time = con.getTimestamp();
                     if (shouldReleaseIdle(now, con, time)) {
                         releasedIdleCount.incrementAndGet();
@@ -1089,8 +1142,9 @@ public class ConnectionPool {
                     } //end if
                 } finally {
                     con.unlock();
-                    if (setToNull)
-                        con = null;
+                    if (setToNull) {
+                      con = null;
+                    }
                 }
             } //while
         } catch (ConcurrentModificationException e) {
@@ -1103,8 +1157,11 @@ public class ConnectionPool {
 
 
     protected boolean shouldReleaseIdle(long now, PooledConnection con, long time) {
-        if (con.getConnectionVersion() < getPoolVersion()) return true;
-        else return (con.getReleaseTime()>0) && ((now - time) > con.getReleaseTime()) && (getSize()>getPoolProperties().getMinIdle());
+        if (con.getConnectionVersion() < getPoolVersion()) {
+          return true;
+        } else {
+          return (con.getReleaseTime()>0) && ((now - time) > con.getReleaseTime()) && (getSize()>getPoolProperties().getMinIdle());
+        }
     }
 
     /**
@@ -1121,15 +1178,18 @@ public class ConnectionPool {
      */
     public void testAllIdle(boolean checkMaxAgeOnly) {
         try {
-            if (idle.isEmpty()) return;
+            if (idle.isEmpty()) {
+              return;
+            }
             Iterator<PooledConnection> unlocked = idle.iterator();
             while (unlocked.hasNext()) {
                 PooledConnection con = unlocked.next();
                 try {
                     con.lock();
                     //the con been taken out, we can't clean it up
-                    if (busy.contains(con))
-                        continue;
+                    if (busy.contains(con)) {
+                      continue;
+                    }
 
                     boolean release;
                     if (checkMaxAgeOnly) {
@@ -1188,7 +1248,9 @@ public class ConnectionPool {
      * @return a pooled connection object
      */
     protected PooledConnection create(boolean incrementCounter) {
-        if (incrementCounter) size.incrementAndGet();
+        if (incrementCounter) {
+          size.incrementAndGet();
+        }
         PooledConnection con = new PooledConnection(getPoolProperties(), this);
         return con;
     }
@@ -1385,7 +1447,9 @@ public class ConnectionPool {
         public Connection get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
             PooledConnection pc = this.pc!=null?this.pc:pcFuture.get(timeout,unit);
             if (pc!=null) {
-                if (result!=null) return result;
+                if (result!=null) {
+                  return result;
+                }
                 if (configured.compareAndSet(false, true)) {
                     try {
                         pc = borrowConnection(System.currentTimeMillis(),pc, null, null);
@@ -1399,7 +1463,9 @@ public class ConnectionPool {
                     //if we reach here, another thread is configuring the actual connection
                     latch.await(timeout,unit); //this shouldn't block for long
                 }
-                if (result==null) throw new ExecutionException(cause);
+                if (result==null) {
+                  throw new ExecutionException(cause);
+                }
                 return result;
             } else {
                 return null;
@@ -1520,11 +1586,13 @@ public class ConnectionPool {
             } else if (!pool.isClosed()) {
                 try {
                     if (pool.getPoolProperties().isRemoveAbandoned()
-                            || pool.getPoolProperties().getSuspectTimeout() > 0)
-                        pool.checkAbandoned();
+                            || pool.getPoolProperties().getSuspectTimeout() > 0) {
+                      pool.checkAbandoned();
+                    }
                     if (pool.getPoolProperties().getMinIdle() < pool.idle
-                            .size())
-                        pool.checkIdle();
+                            .size()) {
+                      pool.checkIdle();
+                    }
                     if (pool.getPoolProperties().isTestWhileIdle()) {
                         pool.testAllIdle(false);
                     } else if (pool.getPoolProperties().getMaxAge() > 0) {

==================================================
DataSourceProxy.java
index 74f781f1cc..73a1b5a07b 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
@@ -67,7 +67,9 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
      */
     @Override
     public void postDeregister() {
-        if (oname!=null) unregisterJmx();
+        if (oname!=null) {
+          unregisterJmx();
+        }
     }
 
     /**
@@ -98,7 +100,9 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
         try {
             if ( isJmxEnabled() ) {
                 this.oname = createObjectName(name);
-                if (oname!=null) registerJmx();
+                if (oname!=null) {
+                  registerJmx();
+                }
             }
         }catch (MalformedObjectNameException x) {
             log.error("Unable to create object name for JDBC pool.",x);

==================================================
FairBlockingQueue.java
index ef01b008fd..653a2ccfa7 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -55,7 +55,9 @@ public class DataSourceProxy implements PoolConfiguration {
     }
 
     public DataSourceProxy(PoolConfiguration poolProperties) {
-        if (poolProperties == null) throw new NullPointerException("PoolConfiguration cannot be null.");
+        if (poolProperties == null) {
+          throw new NullPointerException("PoolConfiguration cannot be null.");
+        }
         this.poolProperties = poolProperties;
     }
 
@@ -83,8 +85,9 @@ public class DataSourceProxy implements PoolConfiguration {
      */
     public Connection getConnection(String username, String password) throws SQLException {
         if (this.getPoolProperties().isAlternateUsernameAllowed()) {
-            if (pool == null)
-                return createPool().getConnection(username,password);
+            if (pool == null) {
+              return createPool().getConnection(username,password);
+            }
             return pool.getConnection(username,password);
         } else {
             return getConnection();
@@ -127,8 +130,9 @@ public class DataSourceProxy implements PoolConfiguration {
      * @throws SQLException Connection error
      */
     public Connection getConnection() throws SQLException {
-        if (pool == null)
-            return createPool().getConnection();
+        if (pool == null) {
+          return createPool().getConnection();
+        }
         return pool.getConnection();
     }
 
@@ -138,8 +142,9 @@ public class DataSourceProxy implements PoolConfiguration {
      * @throws SQLException Connection error
      */
     public Future<Connection> getConnectionAsync() throws SQLException {
-        if (pool == null)
-            return createPool().getConnectionAsync();
+        if (pool == null) {
+          return createPool().getConnectionAsync();
+        }
         return pool.getConnectionAsync();
     }
 
@@ -238,8 +243,11 @@ public class DataSourceProxy implements PoolConfiguration {
 
     public int getPoolSize() {
         final ConnectionPool p = pool;
-        if (p == null) return 0;
-        else return p.getSize();
+        if (p == null) {
+          return 0;
+        } else {
+          return p.getSize();
+        }
     }
 
 

==================================================
JdbcInterceptor.java
index d144065003..27dd8128ed 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -101,7 +101,9 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
                 c = waiters.poll();
                 //give the object to the thread instead of adding it to the pool
                 c.setItem(e);
-                if (isLinux) c.countDown();
+                if (isLinux) {
+                  c.countDown();
+                }
             } else {
                 //we always add first, so that the most recently used object will be given out
                 items.addFirst(e);
@@ -110,7 +112,9 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
             lock.unlock();
         }
         //if we exchanged an object with another thread, wake it up.
-        if (!isLinux && c!=null) c.countDown();
+        if (!isLinux && c!=null) {
+          c.countDown();
+        }
         //we have an unbounded queue, so always return true
         return true;
     }
@@ -473,8 +477,11 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
                 return item;
             } else if (latch!=null) {
                 boolean timedout = !latch.await(timeout, unit);
-                if (timedout) throw new TimeoutException();
-                else return latch.getItem();
+                if (timedout) {
+                  throw new TimeoutException();
+                } else {
+                  return latch.getItem();
+                }
             } else {
                 throw new ExecutionException("ItemFuture incorrectly instantiated. Bug in the code?", new Exception());
             }

==================================================
MultiLockFairBlockingQueue.java
index ff9f621ec1..74c1c0faa6 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -105,8 +105,11 @@ public abstract class JdbcInterceptor implements InvocationHandler {
 
     @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-        if (getNext()!=null) return getNext().invoke(proxy,method,args);
-        else throw new NullPointerException();
+        if (getNext()!=null) {
+          return getNext().invoke(proxy,method,args);
+        } else {
+          throw new NullPointerException();
+        }
     }
 
     /**

==================================================
PoolProperties.java
index a0435f4d24..addcd9dfe6 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
@@ -120,7 +120,9 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
             lock.unlock();
         }
         //if we exchanged an object with another thread, wake it up.
-        if (c!=null) c.countDown();
+        if (c!=null) {
+          c.countDown();
+        }
         //we have an unbounded queue, so always return true
         return true;
     }
@@ -217,7 +219,9 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
             lock.lock();
             try {
                 boolean result = items[idx].remove(e);
-                if (result) return result;
+                if (result) {
+                  return result;
+                }
             } finally {
                 lock.unlock();
             }
@@ -267,7 +271,9 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
     public boolean contains(Object e) {
         for (int idx=0; idx<LOCK_COUNT; idx++) {
             boolean result = items[idx].contains(e);
-            if (result) return result;
+            if (result) {
+              return result;
+            }
         }
         return false;
     }
@@ -470,8 +476,11 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
                 return item;
             } else if (latch!=null) {
                 boolean timedout = !latch.await(timeout, unit);
-                if (timedout) throw new TimeoutException();
-                else return latch.getItem();
+                if (timedout) {
+                  throw new TimeoutException();
+                } else {
+                  return latch.getItem();
+                }
             } else {
                 throw new ExecutionException("ItemFuture incorrectly instantiated. Bug in the code?", new Exception());
             }
@@ -552,7 +561,9 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
                 lock.lock();
                 try {
                     boolean result = MultiLockFairBlockingQueue.this.items[idx].remove(elements[index]);
-                    if (result) break;
+                    if (result) {
+                      break;
+                    }
                 } finally {
                     lock.unlock();
                 }

==================================================
PooledConnection.java
index 13dee2b6fc..f1f9612b20 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -96,9 +96,13 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
      */
     @Override
     public void setAbandonWhenPercentageFull(int percentage) {
-        if (percentage<0) abandonWhenPercentageFull = 0;
-        else if (percentage>100) abandonWhenPercentageFull = 100;
-        else abandonWhenPercentageFull = percentage;
+        if (percentage<0) {
+          abandonWhenPercentageFull = 0;
+        } else if (percentage>100) {
+          abandonWhenPercentageFull = 100;
+        } else {
+          abandonWhenPercentageFull = percentage;
+        }
     }
 
     /**
@@ -1000,14 +1004,22 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public boolean getValueAsBoolean(boolean def) {
-            if (value==null) return def;
-            if ("true".equals(value)) return true;
-            if ("false".equals(value)) return false;
+            if (value==null) {
+              return def;
+            }
+            if ("true".equals(value)) {
+              return true;
+            }
+            if ("false".equals(value)) {
+              return false;
+            }
             return def;
         }
 
         public int getValueAsInt(int def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 int v = Integer.parseInt(value);
                 return v;
@@ -1017,7 +1029,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public long getValueAsLong(long def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 return Long.parseLong(value);
             }catch (NumberFormatException nfe) {
@@ -1026,7 +1040,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public byte getValueAsByte(byte def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 return Byte.parseByte(value);
             }catch (NumberFormatException nfe) {
@@ -1035,7 +1051,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public short getValueAsShort(short def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 return Short.parseShort(value);
             }catch (NumberFormatException nfe) {
@@ -1044,7 +1062,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public float getValueAsFloat(float def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 return Float.parseFloat(value);
             }catch (NumberFormatException nfe) {
@@ -1053,7 +1073,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public double getValueAsDouble(double def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 return Double.parseDouble(value);
             }catch (NumberFormatException nfe) {
@@ -1062,7 +1084,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         public char getValueAschar(char def) {
-            if (value==null) return def;
+            if (value==null) {
+              return def;
+            }
             try {
                 return value.charAt(0);
             }catch (StringIndexOutOfBoundsException nfe) {
@@ -1077,7 +1101,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
 
         @Override
         public boolean equals(Object o) {
-            if (o==this) return true;
+            if (o==this) {
+              return true;
+            }
             if (o instanceof InterceptorProperty) {
                 InterceptorProperty other = (InterceptorProperty)o;
                 return other.name.equals(this.name);
@@ -1179,7 +1205,9 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
 
 
     public static Properties getProperties(String propText, Properties props) {
-        if (props==null) props = new Properties();
+        if (props==null) {
+          props = new Properties();
+        }
         if (propText != null) {
             try {
                 props.load(new ByteArrayInputStream(propText.replace(';', '\n').getBytes()));

==================================================
ProxyConnection.java
index 897881099f..6bc096d031 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -165,10 +165,16 @@ public class PooledConnection implements PooledConnectionMBean {
      */
     public boolean shouldForceReconnect(String username, String password) {
 
-        if (!getPoolProperties().isAlternateUsernameAllowed()) return false;
+        if (!getPoolProperties().isAlternateUsernameAllowed()) {
+          return false;
+        }
 
-        if (username==null) username = poolProperties.getUsername();
-        if (password==null) password = poolProperties.getPassword();
+        if (username==null) {
+          username = poolProperties.getUsername();
+        }
+        if (password==null) {
+          password = poolProperties.getPassword();
+        }
 
         String storedUsr = (String)getAttributes().get(PROP_USER);
         String storedPwd = (String)getAttributes().get(PROP_PASSWORD);
@@ -178,8 +184,16 @@ public class PooledConnection implements PooledConnectionMBean {
 
         noChangeInCredentials = noChangeInCredentials && ((password==null && storedPwd==null) || (password!=null && password.equals(storedPwd)));
 
-        if (username==null)  getAttributes().remove(PROP_USER); else getAttributes().put(PROP_USER, username);
-        if (password==null)  getAttributes().remove(PROP_PASSWORD); else getAttributes().put(PROP_PASSWORD, password);
+        if (username==null) {
+          getAttributes().remove(PROP_USER);
+        } else {
+          getAttributes().put(PROP_USER, username);
+        }
+        if (password==null) {
+          getAttributes().remove(PROP_PASSWORD);
+        } else {
+          getAttributes().put(PROP_PASSWORD, password);
+        }
 
         return !noChangeInCredentials;
     }
@@ -194,7 +208,9 @@ public class PooledConnection implements PooledConnectionMBean {
      * {@link java.sql.Connection#setTransactionIsolation(int)} or {@link java.sql.Connection#setReadOnly(boolean)} fails.
      */
     public void connect() throws SQLException {
-        if (released.get()) throw new SQLException("A connection once released, can't be reestablished.");
+        if (released.get()) {
+          throw new SQLException("A connection once released, can't be reestablished.");
+        }
         if (connection != null) {
             try {
                 this.disconnect(false);
@@ -215,10 +231,18 @@ public class PooledConnection implements PooledConnectionMBean {
         //set up the default state, unless we expect the interceptor to do it
         if (poolProperties.getJdbcInterceptors()==null || poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getName())<0 ||
                 poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getSimpleName())<0) {
-            if (poolProperties.getDefaultTransactionIsolation()!=DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION) connection.setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());
-            if (poolProperties.getDefaultReadOnly()!=null) connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());
-            if (poolProperties.getDefaultAutoCommit()!=null) connection.setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());
-            if (poolProperties.getDefaultCatalog()!=null) connection.setCatalog(poolProperties.getDefaultCatalog());
+            if (poolProperties.getDefaultTransactionIsolation()!=DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION) {
+              connection.setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());
+            }
+            if (poolProperties.getDefaultReadOnly()!=null) {
+              connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());
+            }
+            if (poolProperties.getDefaultAutoCommit()!=null) {
+              connection.setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());
+            }
+            if (poolProperties.getDefaultCatalog()!=null) {
+              connection.setCatalog(poolProperties.getDefaultCatalog());
+            }
         }
         this.discarded = false;
         this.lastConnected = System.currentTimeMillis();
@@ -309,8 +333,12 @@ public class PooledConnection implements PooledConnectionMBean {
             getAttributes().put(PROP_PASSWORD, pwd);
         }
         Properties properties = PoolUtilities.clone(poolProperties.getDbProperties());
-        if (usr != null) properties.setProperty(PROP_USER, usr);
-        if (pwd != null) properties.setProperty(PROP_PASSWORD, pwd);
+        if (usr != null) {
+          properties.setProperty(PROP_USER, usr);
+        }
+        if (pwd != null) {
+          properties.setProperty(PROP_PASSWORD, pwd);
+        }
 
         try {
             if (driver==null) {
@@ -398,7 +426,9 @@ public class PooledConnection implements PooledConnectionMBean {
         connection = null;
         xaConnection = null;
         lastConnected = -1;
-        if (finalize) parent.finalize(this);
+        if (finalize) {
+          parent.finalize(this);
+        }
     }
 
 
@@ -425,22 +455,23 @@ public class PooledConnection implements PooledConnectionMBean {
      */
     private boolean doValidate(int action) {
         if (action == PooledConnection.VALIDATE_BORROW &&
-            poolProperties.isTestOnBorrow())
-            return true;
-        else if (action == PooledConnection.VALIDATE_RETURN &&
-                 poolProperties.isTestOnReturn())
-            return true;
-        else if (action == PooledConnection.VALIDATE_IDLE &&
-                 poolProperties.isTestWhileIdle())
-            return true;
-        else if (action == PooledConnection.VALIDATE_INIT &&
-                 poolProperties.isTestOnConnect())
-            return true;
-        else if (action == PooledConnection.VALIDATE_INIT &&
-                 poolProperties.getInitSQL()!=null)
-           return true;
-        else
-            return false;
+            poolProperties.isTestOnBorrow()) {
+          return true;
+        } else if (action == PooledConnection.VALIDATE_RETURN &&
+                 poolProperties.isTestOnReturn()) {
+          return true;
+        } else if (action == PooledConnection.VALIDATE_IDLE &&
+                 poolProperties.isTestWhileIdle()) {
+          return true;
+        } else if (action == PooledConnection.VALIDATE_INIT &&
+                 poolProperties.isTestOnConnect()) {
+          return true;
+        } else if (action == PooledConnection.VALIDATE_INIT &&
+                 poolProperties.getInitSQL()!=null) {
+          return true;
+        } else {
+          return false;
+        }
     }
 
     /**
@@ -511,7 +542,9 @@ public class PooledConnection implements PooledConnectionMBean {
         if (query == null) {
             boolean transactionCommitted = false;
             int validationQueryTimeout = poolProperties.getValidationQueryTimeout();
-            if (validationQueryTimeout < 0) validationQueryTimeout = 0;
+            if (validationQueryTimeout < 0) {
+              validationQueryTimeout = 0;
+            }
             try {
                 if (connection.isValid(validationQueryTimeout)) {
                     this.lastValidated = now;
@@ -558,8 +591,9 @@ public class PooledConnection implements PooledConnectionMBean {
             } else if (log.isDebugEnabled()) {
                 log.debug("Unable to validate object:",ex);
             }
-            if (stmt!=null)
-                try { stmt.close();} catch (Exception ignore2){/*NOOP*/}
+            if (stmt!=null) {
+              try { stmt.close();} catch (Exception ignore2){/*NOOP*/}
+            }
 
         } finally {
             if (!transactionCommitted) {
@@ -672,7 +706,9 @@ public class PooledConnection implements PooledConnectionMBean {
      * @throws IllegalStateException if this method is called with the value false and the value true has already been set.
      */
     public void setDiscarded(boolean discarded) {
-        if (this.discarded && !discarded) throw new IllegalStateException("Unable to change the state once the connection has been discarded");
+        if (this.discarded && !discarded) {
+          throw new IllegalStateException("Unable to change the state once the connection has been discarded");
+        }
         this.discarded = discarded;
     }
 
@@ -822,7 +858,9 @@ public class PooledConnection implements PooledConnectionMBean {
     }
 
     public void createMBean() {
-        if (oname != null) return;
+        if (oname != null) {
+          return;
+        }
         String keyprop = ",connections=PooledConnection["+connectionIndex.getAndIncrement()+"]";
         oname = JmxUtil.registerJmx(parent.getJmxPool().getObjectName(), keyprop, this);
     }

==================================================
StatementFacade.java
index 98dd8b95b8..d91cc0861f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
@@ -94,7 +94,10 @@ public class ProxyConnection extends JdbcInterceptor {
             return Boolean.valueOf(isClosed());
         }
         if (compare(CLOSE_VAL,method)) {
-            if (connection==null) return null; //noop for already closed.
+            if (connection==null)
+             {
+              return null; //noop for already closed.
+            }
             PooledConnection poolc = this.connection;
             this.connection = null;
             pool.returnConnection(poolc);
@@ -114,7 +117,9 @@ public class ProxyConnection extends JdbcInterceptor {
                 }
             }
         }
-        if (isClosed()) throw new SQLException("Connection has already been closed.");
+        if (isClosed()) {
+          throw new SQLException("Connection has already been closed.");
+        }
         if (compare(UNWRAP_VAL,method)) {
             return unwrap((Class<?>)args[0]);
         } else if (compare(ISWRAPPERFOR_VAL,method)) {

==================================================
TrapException.java
index eac84838d4..2d5616b541 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java
@@ -102,12 +102,18 @@ public class StatementFacade extends AbstractCreateStatementInterceptor {
                 return Integer.valueOf(this.hashCode());
             }
             if (compare(CLOSE_VAL, method)) {
-                if (delegate == null) return null;
+                if (delegate == null) {
+                  return null;
+                }
             }
             if (compare(ISCLOSED_VAL, method)) {
-                if (delegate == null) return Boolean.TRUE;
+                if (delegate == null) {
+                  return Boolean.TRUE;
+                }
+            }
+            if (delegate == null) {
+              throw new SQLException("Statement closed.");
             }
-            if (delegate == null) throw new SQLException("Statement closed.");
             Object result =  null;
             try {
                 //invoke next

==================================================
AbstractQueryReport.java
index 2789e7246c..93c95fe75a 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/TrapException.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/TrapException.java
@@ -65,7 +65,9 @@ public class TrapException extends JdbcInterceptor {
 
     public boolean isDeclaredException(Method m, Class<?> clazz) {
         for (Class<?> cl : m.getExceptionTypes()) {
-            if (cl.equals(clazz) || cl.isAssignableFrom(clazz)) return true;
+            if (cl.equals(clazz) || cl.isAssignableFrom(clazz)) {
+              return true;
+            }
         }
         return false;
     }

==================================================
ConnectionState.java
index 4c5b28be4a..5eb1339bbf 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
@@ -194,11 +194,17 @@ public abstract class AbstractQueryReport extends AbstractCreateStatementInterce
             //was close invoked?
             boolean close = compare(JdbcInterceptor.CLOSE_VAL,name);
             //allow close to be called multiple times
-            if (close && closed) return null;
+            if (close && closed) {
+              return null;
+            }
             //are we calling isClosed?
-            if (compare(JdbcInterceptor.ISCLOSED_VAL,name)) return Boolean.valueOf(closed);
+            if (compare(JdbcInterceptor.ISCLOSED_VAL,name)) {
+              return Boolean.valueOf(closed);
+            }
             //if we are calling anything else, bail out
-            if (closed) throw new SQLException("Statement closed.");
+            if (closed) {
+              throw new SQLException("Statement closed.");
+            }
             boolean process = false;
             //check to see if we are about to execute a query
             process = isExecute( method, process);
@@ -225,7 +231,9 @@ public abstract class AbstractQueryReport extends AbstractCreateStatementInterce
                     //report the slow query
                     reportSlowQuery(query, args, name, start, delta);
                 }catch (Exception t) {
-                    if (log.isWarnEnabled()) log.warn("Unable to process slow query",t);
+                    if (log.isWarnEnabled()) {
+                      log.warn("Unable to process slow query",t);
+                    }
                 }
             } else if (process) {
                 reportQuery(query, args, name, start, delta);

==================================================
QueryTimeoutInterceptor.java
index fae1a8278f..dac5463c8f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
@@ -129,12 +129,16 @@ public class ConnectionState extends JdbcInterceptor  {
         int index = -1;
         for (int i=0; (!read) && i<readState.length; i++) {
             read = compare(name,readState[i]);
-            if (read) index = i;
+            if (read) {
+              index = i;
+            }
         }
         boolean write = false;
         for (int i=0; (!write) && (!read) && i<writeState.length; i++) {
             write = compare(name,writeState[i]);
-            if (write) index = i;
+            if (write) {
+              index = i;
+            }
         }
         Object result = null;
         if (read) {
@@ -146,7 +150,9 @@ public class ConnectionState extends JdbcInterceptor  {
                 default: // NOOP
             }
             //return cached result, if we have it
-            if (result!=null) return result;
+            if (result!=null) {
+              return result;
+            }
         }
 
         result = super.invoke(proxy, method, args);

==================================================
SlowQueryReport.java
index 3d35cb6eb3..eacb1e5a91 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java
@@ -34,7 +34,9 @@ public class QueryTimeoutInterceptor extends AbstractCreateStatementInterceptor
     public void setProperties(Map<String,InterceptorProperty> properties) {
         super.setProperties(properties);
         InterceptorProperty p = properties.get("queryTimeout");
-        if (p!=null) timeout = p.getValueAsInt(timeout);
+        if (p!=null) {
+          timeout = p.getValueAsInt(timeout);
+        }
     }
 
     @Override

==================================================
SlowQueryReportJmx.java
index b6c207d99e..1791f5d014 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -117,7 +117,9 @@ public class SlowQueryReport extends AbstractQueryReport  {
         String sql = super.reportQuery(query, args, name, start, delta);
         if (this.maxQueries > 0 ) {
             QueryStats qs = this.getQueryStats(sql);
-            if (qs != null) qs.add(delta, start);
+            if (qs != null) {
+              qs.add(delta, start);
+            }
         }
         return sql;
     }
@@ -150,7 +152,9 @@ public class SlowQueryReport extends AbstractQueryReport  {
     public void prepareStatement(String sql, long time) {
         if (this.maxQueries > 0 ) {
             QueryStats qs = getQueryStats(sql);
-            if (qs != null) qs.prepare(time);
+            if (qs != null) {
+              qs.prepare(time);
+            }
         }
     }
 
@@ -158,7 +162,9 @@ public class SlowQueryReport extends AbstractQueryReport  {
     public void prepareCall(String sql, long time) {
         if (this.maxQueries > 0 ) {
             QueryStats qs = getQueryStats(sql);
-            if (qs != null) qs.prepare(time);
+            if (qs != null) {
+              qs.prepare(time);
+            }
         }
     }
 
@@ -192,10 +198,14 @@ public class SlowQueryReport extends AbstractQueryReport  {
     }
 
     protected QueryStats getQueryStats(String sql) {
-        if (sql==null) sql = "";
+        if (sql==null) {
+          sql = "";
+        }
         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;
         if (queries==null) {
-            if (log.isWarnEnabled()) log.warn("Connection has already been closed or abandoned");
+            if (log.isWarnEnabled()) {
+              log.warn("Connection has already been closed or abandoned");
+            }
             return null;
         }
         QueryStats qs = queries.get(sql);
@@ -224,7 +234,9 @@ public class SlowQueryReport extends AbstractQueryReport  {
         while (queries.size() > maxQueries) {
             String sql = list.get(removeIndex).getQuery();
             queries.remove(sql);
-            if (log.isDebugEnabled()) log.debug("Removing slow query, capacity reached:"+sql);
+            if (log.isDebugEnabled()) {
+              log.debug("Removing slow query, capacity reached:"+sql);
+            }
             removeIndex++;
         }
     }
@@ -233,10 +245,11 @@ public class SlowQueryReport extends AbstractQueryReport  {
     @Override
     public void reset(ConnectionPool parent, PooledConnection con) {
         super.reset(parent, con);
-        if (parent!=null)
-            queries = SlowQueryReport.perPoolStats.get(parent.getName());
-        else
-            queries = null;
+        if (parent!=null) {
+          queries = SlowQueryReport.perPoolStats.get(parent.getName());
+        } else {
+          queries = null;
+        }
     }
 
 

==================================================
StatementCache.java
index 8c0aaf749c..c6d2a53617 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
@@ -144,7 +144,9 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
     @Override
     protected String reportFailedQuery(String query, Object[] args, String name, long start, Throwable t) {
         query = super.reportFailedQuery(query, args, name, start, t);
-        if (isLogFailed()) notifyJmx(query,FAILED_QUERY_NOTIFICATION);
+        if (isLogFailed()) {
+          notifyJmx(query,FAILED_QUERY_NOTIFICATION);
+        }
         return query;
     }
 
@@ -178,7 +180,9 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
     @Override
     protected String reportSlowQuery(String query, Object[] args, String name, long start, long delta) {
         query = super.reportSlowQuery(query, args, name, start, delta);
-        if (isLogSlow()) notifyJmx(query,SLOW_QUERY_NOTIFICATION);
+        if (isLogSlow()) {
+          notifyJmx(query,SLOW_QUERY_NOTIFICATION);
+        }
         return query;
     }
 
@@ -215,7 +219,9 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
         ConcurrentHashMap<String,QueryStats> queries = perPoolStats.get(poolName);
         if (queries!=null) {
             Iterator<String> it = queries.keySet().iterator();
-            while (it.hasNext()) it.remove();
+            while (it.hasNext()) {
+              it.remove();
+            }
         }
     }
 

==================================================
StatementDecoratorInterceptor.java
index 55baf23ad4..9ce39c089f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
@@ -85,11 +85,17 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
     public void setProperties(Map<String, InterceptorProperty> properties) {
         super.setProperties(properties);
         InterceptorProperty p = properties.get("prepared");
-        if (p!=null) cachePrepared = p.getValueAsBoolean(cachePrepared);
+        if (p!=null) {
+          cachePrepared = p.getValueAsBoolean(cachePrepared);
+        }
         p = properties.get("callable");
-        if (p!=null) cacheCallable = p.getValueAsBoolean(cacheCallable);
+        if (p!=null) {
+          cacheCallable = p.getValueAsBoolean(cacheCallable);
+        }
         p = properties.get("max");
-        if (p!=null) maxCacheSize = p.getValueAsInt(maxCacheSize);
+        if (p!=null) {
+          maxCacheSize = p.getValueAsInt(maxCacheSize);
+        }
         if (cachePrepared && cacheCallable) {
             this.types = ALL_TYPES;
         } else if (cachePrepared) {
@@ -165,7 +171,9 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
     }
 
     public void closeStatement(CachedStatement st) {
-        if (st==null) return;
+        if (st==null) {
+          return;
+        }
         st.forceClose();
     }
 
@@ -207,13 +215,17 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
 
     public CachedStatement isCached(Method method, Object[] args) {
         ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();
-        if (cache == null) return null;
+        if (cache == null) {
+          return null;
+        }
         return cache.get(createCacheKey(method, args));
     }
 
     public boolean cacheStatement(CachedStatement proxy) {
         ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();
-        if (cache == null) return false;
+        if (cache == null) {
+          return false;
+        }
         if (proxy.getCacheKey()==null) {
             return false;
         } else if (cache.containsKey(proxy.getCacheKey())) {
@@ -232,7 +244,9 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
 
     public boolean removeStatement(CachedStatement proxy) {
         ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();
-        if (cache == null) return false;
+        if (cache == null) {
+          return false;
+        }
         if (cache.remove(proxy.getCacheKey()) != null) {
             cacheSize.decrementAndGet();
             return true;
@@ -245,7 +259,9 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
     protected ConcurrentHashMap<CacheKey,CachedStatement> getCache() {
         PooledConnection pCon = this.pcon;
         if (pCon == null) {
-            if (log.isWarnEnabled()) log.warn("Connection has already been closed or abandoned");
+            if (log.isWarnEnabled()) {
+              log.warn("Connection has already been closed or abandoned");
+            }
             return null;
         }
         @SuppressWarnings("unchecked")
@@ -257,7 +273,9 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
     @Override
     public int getCacheSizePerConnection() {
         ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();
-        if (cache == null) return 0;
+        if (cache == null) {
+          return 0;
+        }
         return cache.size();
     }
 
@@ -354,20 +372,26 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
 
         @Override
         public boolean equals(Object obj) {
-            if (this == obj)
-                return true;
-            if (obj == null)
-                return false;
-            if (getClass() != obj.getClass())
-                return false;
+            if (this == obj) {
+              return true;
+            }
+            if (obj == null) {
+              return false;
+            }
+            if (getClass() != obj.getClass()) {
+              return false;
+            }
             CacheKey other = (CacheKey) obj;
-            if (!Arrays.deepEquals(args, other.args))
-                return false;
+            if (!Arrays.deepEquals(args, other.args)) {
+              return false;
+            }
             if (stmtType == null) {
-                if (other.stmtType != null)
-                    return false;
-            } else if (!stmtType.equals(other.stmtType))
-                return false;
+                if (other.stmtType != null) {
+                  return false;
+                }
+            } else if (!stmtType.equals(other.stmtType)) {
+              return false;
+            }
             return true;
         }
     }

==================================================
StatementFinalizer.java
index bc2b95dba7..4d6b26a1a1 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
@@ -212,14 +212,17 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
             // was close invoked?
             boolean close = compare(CLOSE_VAL, method);
             // allow close to be called multiple times
-            if (close && closed)
-                return null;
+            if (close && closed) {
+              return null;
+            }
             // are we calling isClosed?
-            if (compare(ISCLOSED_VAL, method))
-                return Boolean.valueOf(closed);
+            if (compare(ISCLOSED_VAL, method)) {
+              return Boolean.valueOf(closed);
+            }
             // if we are calling anything else, bail out
-            if (closed)
-                throw new SQLException("Statement closed.");
+            if (closed) {
+              throw new SQLException("Statement closed.");
+            }
             if (compare(GETCONNECTION_VAL,method)){
                 return connection;
             }

==================================================
ConnectionPool.java
index 08e1b8f6a7..588b1f2129 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
@@ -44,8 +44,9 @@ public class StatementFinalizer extends AbstractCreateStatementInterceptor {
     @Override
     public Object createStatement(Object proxy, Method method, Object[] args, Object statement, long time) {
         try {
-            if (statement instanceof Statement)
-                statements.add(new StatementEntry((Statement)statement));
+            if (statement instanceof Statement) {
+              statements.add(new StatementEntry((Statement)statement));
+            }
         }catch (ClassCastException x) {
             //ignore this one
         }

==================================================
JmxUtil.java
index 5ca7a38ced..bc924963bf 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
@@ -115,8 +115,12 @@ public class ConnectionPool extends NotificationBroadcasterSupport
         MBeanNotificationInfo[] pres = super.getNotificationInfo();
         MBeanNotificationInfo[] loc = getDefaultNotificationInfo();
         MBeanNotificationInfo[] aug = new MBeanNotificationInfo[pres.length + loc.length];
-        if (pres.length>0) System.arraycopy(pres, 0, aug, 0, pres.length);
-        if (loc.length >0) System.arraycopy(loc, 0, aug, pres.length, loc.length);
+        if (pres.length>0) {
+          System.arraycopy(pres, 0, aug, 0, pres.length);
+        }
+        if (loc.length >0) {
+          System.arraycopy(loc, 0, aug, pres.length, loc.length);
+        }
         return aug;
     }
 

==================================================
CheckOutThreadTest.java
index 6f393c1d30..c93a3c475b 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/JmxUtil.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/JmxUtil.java
@@ -32,7 +32,9 @@ public class JmxUtil {
         ObjectName oname = null;
         try {
             oname = getObjectName(base, keyprop);
-            if (oname != null) ManagementFactory.getPlatformMBeanServer().registerMBean(obj, oname);
+            if (oname != null) {
+              ManagementFactory.getPlatformMBeanServer().registerMBean(obj, oname);
+            }
         } catch (Exception e) {
             log.error("Jmx registration failed.",e);
         }
@@ -40,7 +42,9 @@ public class JmxUtil {
     }
 
     public static void unregisterJmx(ObjectName oname) {
-        if (oname ==null) return;
+        if (oname ==null) {
+          return;
+        }
         try {
             ManagementFactory.getPlatformMBeanServer().unregisterMBean(oname);
         } catch (Exception e) {
@@ -50,9 +54,13 @@ public class JmxUtil {
 
     private static ObjectName getObjectName(ObjectName base, String keyprop)
             throws MalformedObjectNameException {
-        if (base == null) return null;
+        if (base == null) {
+          return null;
+        }
         StringBuilder OnameStr = new StringBuilder(base.toString());
-        if (keyprop != null) OnameStr.append(keyprop);
+        if (keyprop != null) {
+          OnameStr.append(keyprop);
+        }
         ObjectName oname = new ObjectName(OnameStr.toString());
         return oname;
     }

==================================================
ConnectCountTest.java
index 7abf986a44..0350a5e0fd 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java
@@ -380,7 +380,9 @@ public class CheckOutThreadTest extends DefaultTestCase {
                         nroffetch++;
                     } finally {
                         long cstart = System.nanoTime();
-                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}
+                        if (con!=null) {
+                          try {con.close();}catch(Exception x) {x.printStackTrace();}
+                        }
                         long cdelta = System.nanoTime() - cstart;
                         totalcmax += cdelta;
                         cmax = Math.max(cdelta, cmax);

==================================================
CreateTestTable.java
index 8e240f91e2..48059aa54d 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java
@@ -73,8 +73,9 @@ public class ConnectCountTest extends DefaultTestCase {
             minwait = Math.min(minwait, t.minwait);
             minfetch = Math.min(minfetch, t.nroffetch);
             maxfetch = Math.max(maxfetch, t.nroffetch);
-            if (ConnectCountTest.this.printthread)
-                System.out.println(t.getName()+" : Nr-of-fetch:"+t.nroffetch+ " Max fetch Time:"+t.maxwait/1000000f+"ms. :Max close time:"+t.cmax/1000000f+"ms.");
+            if (ConnectCountTest.this.printthread) {
+              System.out.println(t.getName()+" : Nr-of-fetch:"+t.nroffetch+ " Max fetch Time:"+t.maxwait/1000000f+"ms. :Max close time:"+t.cmax/1000000f+"ms.");
+            }
         }
         System.out.println("["+name+"] Max fetch:"+(maxfetch)+" Min fetch:"+(minfetch)+" Average fetch:"+
                            (((float)totalfetch))/(float)threads.length);
@@ -231,7 +232,9 @@ public class ConnectCountTest extends DefaultTestCase {
             try {
                 long now = System.currentTimeMillis();
                 while (ConnectCountTest.this.run) {
-                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) break;
+                    if ((System.currentTimeMillis()-now)>=ConnectCountTest.this.complete) {
+                      break;
+                    }
                     long start = System.nanoTime();
                     Connection con = null;
                     try {
@@ -247,13 +250,17 @@ public class ConnectCountTest extends DefaultTestCase {
                         minwait = Math.min(delta, minwait);
                         nroffetch++;
                         try {
-                            if (ConnectCountTest.this.sleep>0) sleep(ConnectCountTest.this.sleep);
+                            if (ConnectCountTest.this.sleep>0) {
+                              sleep(ConnectCountTest.this.sleep);
+                            }
                         } catch (InterruptedException x) {
                             interrupted();
                         }
                     } finally {
                         long cstart = System.nanoTime();
-                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}
+                        if (con!=null) {
+                          try {con.close();}catch(Exception x) {x.printStackTrace();}
+                        }
                         long cdelta = System.nanoTime() - cstart;
                         totalcmax += cdelta;
                         cmax = Math.max(cdelta, cmax);

==================================================
FairnessTest.java
index e375bcdb45..48a4bed1df 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/CreateTestTable.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/CreateTestTable.java
@@ -51,8 +51,9 @@ public class CreateTestTable extends DefaultTestCase {
         try {
             ResultSet rs = st.executeQuery(check);
 
-            if (rs.next())
-                count = rs.getInt(1);
+            if (rs.next()) {
+              count = rs.getInt(1);
+            }
             rs.close();
             st.close();
             System.out.println("Count:"+count);

==================================================
PoolCleanerTest.java
index bb2cc8b860..e33310442b 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/FairnessTest.java
@@ -47,8 +47,9 @@ public class FairnessTest extends DefaultTestCase {
             minwait = Math.min(minwait, t.minwait);
             minfetch = Math.min(minfetch, t.nroffetch);
             maxfetch = Math.max(maxfetch, t.nroffetch);
-            if (FairnessTest.this.printthread)
-                System.out.println(t.getName()+" : Nr-of-fetch:"+t.nroffetch+ " Max fetch Time:"+t.maxwait/1000000f+"ms. :Max close time:"+t.cmax/1000000f+"ms.");
+            if (FairnessTest.this.printthread) {
+              System.out.println(t.getName()+" : Nr-of-fetch:"+t.nroffetch+ " Max fetch Time:"+t.maxwait/1000000f+"ms. :Max close time:"+t.cmax/1000000f+"ms.");
+            }
         }
         System.out.println("["+name+"] Max fetch:"+(maxfetch)+" Min fetch:"+(minfetch)+" Average fetch:"+
                            (((float)totalfetch))/(float)threads.length);
@@ -213,7 +214,9 @@ public class FairnessTest extends DefaultTestCase {
             try {
                 long now = System.currentTimeMillis();
                 while (FairnessTest.this.run) {
-                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) break;
+                    if ((System.currentTimeMillis()-now)>=FairnessTest.this.complete) {
+                      break;
+                    }
                     long start = System.nanoTime();
                     Connection con = null;
                     try {
@@ -229,13 +232,17 @@ public class FairnessTest extends DefaultTestCase {
                         minwait = Math.min(delta, minwait);
                         nroffetch++;
                         try {
-                            if (FairnessTest.this.sleep>0) sleep(FairnessTest.this.sleep);
+                            if (FairnessTest.this.sleep>0) {
+                              sleep(FairnessTest.this.sleep);
+                            }
                         } catch (InterruptedException x) {
                             interrupted();
                         }
                     } finally {
                         long cstart = System.nanoTime();
-                        if (con!=null) try {con.close();}catch(Exception x) {x.printStackTrace();}
+                        if (con!=null) {
+                          try {con.close();}catch(Exception x) {x.printStackTrace();}
+                        }
                         long cdelta = System.nanoTime() - cstart;
                         totalcmax += cdelta;
                         cmax = Math.max(cdelta, cmax);

==================================================
StarvationTest.java
index 452c81d70f..3ece41d207 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/PoolCleanerTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/PoolCleanerTest.java
@@ -31,7 +31,9 @@ public class PoolCleanerTest extends DefaultTestCase {
         Map<Thread, StackTraceElement[]> threadmap = Thread.getAllStackTraces();
         int result = 0;
         for (Thread t : threadmap.keySet()) {
-            if (t.getName().startsWith("Tomcat JDBC Pool Cleaner[")) result++;
+            if (t.getName().startsWith("Tomcat JDBC Pool Cleaner[")) {
+              result++;
+            }
         }
         return result;
     }

==================================================
TestJaspicCallbackHandlerInAuthenticator.java
index ebdfc4646e..88551f731d 100644
--- a/res/checkstyle/checkstyle.xml
+++ b/res/checkstyle/checkstyle.xml
@@ -53,9 +53,7 @@
     <module name="AvoidNestedBlocks">
       <property name="allowInSwitchCase" value="true"/>
     </module>
-    <!-- ~300 errors
     <module name="NeedBraces"/>
-    -->
 
     <!-- Coding -->
     <module name="IllegalInstantiation"/>

==================================================
TestKeepAliveCount.java
index b67320db32..807c49b212 100644
--- a/test/org/apache/catalina/authenticator/TestJaspicCallbackHandlerInAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestJaspicCallbackHandlerInAuthenticator.java
@@ -167,8 +167,9 @@ public class TestJaspicCallbackHandlerInAuthenticator {
 
         @Override
         public Principal authenticate(String username, String password) {
-            if (getPassword(username).equals(password))
-                return getPrincipal(username);
+            if (getPassword(username).equals(password)) {
+              return getPrincipal(username);
+            }
             return null;
         }
 

==================================================
TestRequest.java
index c27c5c1256..81f8a66a36 100644
--- a/test/org/apache/catalina/connector/TestKeepAliveCount.java
+++ b/test/org/apache/catalina/connector/TestKeepAliveCount.java
@@ -52,7 +52,9 @@ public class TestKeepAliveCount extends TomcatBaseTest {
         private boolean init;
 
         private synchronized void init() {
-            if (init) return;
+            if (init) {
+              return;
+            }
 
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);

==================================================
TestAsyncContextImpl.java
index be1a7f8112..15c7b76e60 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -167,7 +167,9 @@ public class TestRequest extends TomcatBaseTest {
         }
 
         private synchronized void init() throws Exception {
-            if (init) return;
+            if (init) {
+              return;
+            }
 
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
@@ -346,17 +348,21 @@ public class TestRequest extends TomcatBaseTest {
 
             req.login(USER, PWD);
 
-            if (!req.getRemoteUser().equals(USER))
-                throw new ServletException();
-            if (!req.getUserPrincipal().getName().equals(USER))
-                throw new ServletException();
+            if (!req.getRemoteUser().equals(USER)) {
+              throw new ServletException();
+            }
+            if (!req.getUserPrincipal().getName().equals(USER)) {
+              throw new ServletException();
+            }
 
             req.logout();
 
-            if (req.getRemoteUser() != null)
-                throw new ServletException();
-            if (req.getUserPrincipal() != null)
-                throw new ServletException();
+            if (req.getRemoteUser() != null) {
+              throw new ServletException();
+            }
+            if (req.getUserPrincipal() != null) {
+              throw new ServletException();
+            }
 
             resp.getWriter().write(OK);
         }
@@ -528,10 +534,11 @@ public class TestRequest extends TomcatBaseTest {
                 java.util.Arrays.sort(values);
 
                 for (String value : values) {
-                    if (first)
-                        first = false;
-                    else
-                        out.print(",");
+                    if (first) {
+                      first = false;
+                    } else {
+                      out.print(",");
+                    }
 
                     out.print(name + "=" + value);
                 }
@@ -547,7 +554,9 @@ public class TestRequest extends TomcatBaseTest {
         private boolean init;
 
         private synchronized void init() throws Exception {
-            if (init) return;
+            if (init) {
+              return;
+            }
 
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
@@ -569,17 +578,20 @@ public class TestRequest extends TomcatBaseTest {
 
             try {
                 init();
-                if(allowBody)
-                    tomcat.getConnector().setParseBodyMethods(method);
-                else
-                    tomcat.getConnector().setParseBodyMethods(""); // never parse
+                if(allowBody) {
+                  tomcat.getConnector().setParseBodyMethods(method);
+                }
+                else {
+                  tomcat.getConnector().setParseBodyMethods(""); // never parse
+                }
 
                 // Open connection
                 connect();
 
                 // Re-encode the request body so that bytes = characters
-                if(null != requestBody)
-                    requestBody = new String(requestBody.getBytes("UTF-8"), "ASCII");
+                if(null != requestBody) {
+                  requestBody = new String(requestBody.getBytes("UTF-8"), "ASCII");
+                }
 
                 // Send specified request body using method
                 String[] request = {

==================================================
TestStandardContext.java
index 23668f5981..14621803ed 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -1955,8 +1955,9 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
                 loops--;
                 req.setAttribute("loops", Integer.valueOf(loops));
                 ctx.dispatch();
-            } else
-                throw new ServletException();
+            } else {
+              throw new ServletException();
+            }
         }
     }
 

==================================================
TestNonBlockingAPI.java
index b28905a05f..c8daacce8d 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -722,7 +722,9 @@ public class TestStandardContext extends TomcatBaseTest {
         private Context context;
 
         private synchronized void init() throws Exception {
-            if (init) return;
+            if (init) {
+              return;
+            }
 
             Tomcat tomcat = getTomcatInstance();
             context = tomcat.addContext("", TEMP_DIR);

==================================================
TestMessageDigestCredentialHandler.java
index a4eaddc0eb..a9d631cde0 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -494,17 +494,20 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         @Override
         public byte[] next() {
             if (count < max) {
-                if (count > 0)
-                    try {
-                        if (delay > 0)
-                            Thread.sleep(delay);
-                    } catch (Exception x) {
-                    }
+                if (count > 0) {
+                  try {
+                      if (delay > 0) {
+                        Thread.sleep(delay);
+                      }
+                  } catch (Exception x) {
+                  }
+                }
                 count++;
-                if (count < max)
-                    return b;
-                else
-                    return f;
+                if (count < max) {
+                  return b;
+                } else {
+                  return f;
+                }
             } else {
                 return null;
             }

==================================================
TomcatBaseTest.java
index 3371b6bc92..2020da3e7d 100644
--- a/test/org/apache/catalina/realm/TestMessageDigestCredentialHandler.java
+++ b/test/org/apache/catalina/realm/TestMessageDigestCredentialHandler.java
@@ -41,8 +41,9 @@ public class TestMessageDigestCredentialHandler {
     public void testGeneral() throws Exception {
         for (String digest : DIGESTS) {
             for (int saltLength = 0; saltLength < 20; saltLength++) {
-                for (int iterations = 1; iterations < 100; iterations += 10)
-                doTest(digest, saltLength, iterations);
+                for (int iterations = 1; iterations < 100; iterations += 10) {
+                  doTest(digest, saltLength, iterations);
+                }
             }
         }
     }

==================================================
ChannelCreator.java
index e1b75ad07a..7181e7abc0 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -748,8 +748,11 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
 
             @Override
             public int available() {
-                if (done) return 0;
-                else return getLength();
+                if (done) {
+                  return 0;
+                } else {
+                  return getLength();
+                }
             }
         };
         return postUrl(false,s,path,out,reqHead,resHead);

==================================================
CoordinationDemo.java
index 5b318ba4ce..9a0c39e3cf 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -199,7 +199,9 @@ public class ChannelCreator {
 
         McastService service = new McastService();
         service.setAddress(mcastaddr);
-        if (mbind != null) service.setMcastBindAddress(mbind);
+        if (mbind != null) {
+          service.setMcastBindAddress(mbind);
+        }
         service.setFrequency(mcastfreq);
         service.setMcastDropTime(mcastdrop);
         service.setPort(mcastport);
@@ -209,8 +211,12 @@ public class ChannelCreator {
         channel.setChannelSender(ps);
         channel.setMembershipService(service);
 
-        if ( throughput ) channel.addInterceptor(new ThroughputInterceptor());
-        if (gzip) channel.addInterceptor(new GzipInterceptor());
+        if ( throughput ) {
+          channel.addInterceptor(new ThroughputInterceptor());
+        }
+        if (gzip) {
+          channel.addInterceptor(new GzipInterceptor());
+        }
         if ( frag ) {
             FragmentationInterceptor fi = new FragmentationInterceptor();
             fi.setMaxSize(fragsize);

==================================================
EchoRpcTest.java
index f70a5e4b66..dbb6ca8810 100644
--- a/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
+++ b/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
@@ -56,7 +56,9 @@ public class CoordinationDemo {
 
     public void clearScreen() {
         StringBuilder buf = new StringBuilder(700);
-        for (int i=0; i<CLEAR_SCREEN; i++ ) buf.append("\n");
+        for (int i=0; i<CLEAR_SCREEN; i++ ) {
+          buf.append("\n");
+        }
         System.out.println(buf);
     }
 
@@ -74,7 +76,9 @@ public class CoordinationDemo {
         System.out.println(" ###."+getHeader());
         for ( int i=0; i<status.length; i++ ) {
             System.out.print(leftfill(String.valueOf(i+1)+".",5," "));
-            if ( status[i] != null ) System.out.print(status[i].getStatusLine());
+            if ( status[i] != null ) {
+              System.out.print(status[i].getStatusLine());
+            }
         }
         System.out.println("\n\n");
         System.out.println("Overall status:"+statusLine);
@@ -105,12 +109,16 @@ public class CoordinationDemo {
     public String[] tokenize(String line) {
         StringTokenizer tz = new StringTokenizer(line," ");
         String[] result = new String[tz.countTokens()];
-        for (int i=0; i<result.length; i++ ) result[i] = tz.nextToken();
+        for (int i=0; i<result.length; i++ ) {
+          result[i] = tz.nextToken();
+        }
         return result;
     }
 
     public void waitForInput() throws IOException {
-        for ( int i=0; i<status.length; i++ ) status[i] = new Status(this);
+        for ( int i=0; i<status.length; i++ ) {
+          status[i] = new Status(this);
+        }
         printScreen();
         String l = reader.readLine();
         String[] args;
@@ -132,7 +140,9 @@ public class CoordinationDemo {
                 args = tokenize(l);
             }
         }
-        for (Status value : status) value.stop();
+        for (Status value : status) {
+          value.stop();
+        }
     }
 
     private void cmdStop(String[] args) {
@@ -148,7 +158,13 @@ public class CoordinationDemo {
                     }
                 };
             }
-            for (int i = 0; i < status.length; i++) if (MULTI_THREAD ) t[i].start(); else t[i].run();
+            for (int i = 0; i < status.length; i++) {
+              if (MULTI_THREAD ) {
+                t[i].start();
+              } else {
+                t[i].run();
+              }
+            }
             setSystemStatus("System stopped.");
         } else {
             int index = -1;
@@ -174,7 +190,13 @@ public class CoordinationDemo {
                     }
                 };
             }
-            for (int i = 0; i < status.length; i++) if (MULTI_THREAD ) t[i].start(); else t[i].run();
+            for (int i = 0; i < status.length; i++) {
+              if (MULTI_THREAD ) {
+                t[i].start();
+              } else {
+                t[i].run();
+              }
+            }
             setSystemStatus("System started.");
         } else {
             int index = -1;
@@ -207,17 +229,19 @@ public class CoordinationDemo {
         java.util.Arrays.fill(VIEW_EVENTS,true);
 
         for (int i=0; i<args.length; i++ ) {
-            if ( "-c".equals(args[i]) )
-                CHANNEL_COUNT = Integer.parseInt(args[++i]);
-            else if ( "-t".equals(args[i]) )
-                MULTI_THREAD = Boolean.parseBoolean(args[++i]);
-            else if ( "-s".equals(args[i]) )
-                SLEEP_TIME = Long.parseLong(args[++i]);
-            else if ( "-sc".equals(args[i]) )
-                CLEAR_SCREEN = Integer.parseInt(args[++i]);
-            else if ( "-p".equals(args[i]) )
-                setEvents(args[++i]);
-            else if ( "-h".equals(args[i]) ) System.exit(0);
+            if ( "-c".equals(args[i]) ) {
+              CHANNEL_COUNT = Integer.parseInt(args[++i]);
+            } else if ( "-t".equals(args[i]) ) {
+              MULTI_THREAD = Boolean.parseBoolean(args[++i]);
+            } else if ( "-s".equals(args[i]) ) {
+              SLEEP_TIME = Long.parseLong(args[++i]);
+            } else if ( "-sc".equals(args[i]) ) {
+              CLEAR_SCREEN = Integer.parseInt(args[++i]);
+            } else if ( "-p".equals(args[i]) ) {
+              setEvents(args[++i]);
+            } else if ( "-h".equals(args[i]) ) {
+              System.exit(0);
+            }
         }
         demo.init();
         demo.waitForInput();
@@ -248,9 +272,15 @@ public class CoordinationDemo {
 
     public static String fill(String value, int length, String ch, boolean left) {
         StringBuilder buf = new StringBuilder();
-        if ( !left ) buf.append(value.trim());
-        for (int i=value.trim().length(); i<length; i++ ) buf.append(ch);
-        if ( left ) buf.append(value.trim());
+        if ( !left ) {
+          buf.append(value.trim());
+        }
+        for (int i=value.trim().length(); i<length; i++ ) {
+          buf.append(ch);
+        }
+        if ( left ) {
+          buf.append(value.trim());
+        }
         return buf.toString();
     }
 
@@ -299,7 +329,9 @@ public class CoordinationDemo {
         }
 
         public String getByteString(byte[] b) {
-            if ( b == null ) return "{}";
+            if ( b == null ) {
+              return "{}";
+            }
             return Arrays.toString(b,0,Math.min(b.length,4));
         }
 
@@ -317,7 +349,9 @@ public class CoordinationDemo {
                 synchronized (System.err) {
                     System.err.println("Start failed:");
                     StackTraceElement[] els = x.getStackTrace();
-                    for (StackTraceElement el : els) System.err.println(el.toString());
+                    for (StackTraceElement el : els) {
+                      System.err.println(el.toString());
+                    }
                 }
                 status = "Start failed:"+x.getMessage();
                 error = x;
@@ -342,7 +376,9 @@ public class CoordinationDemo {
                 synchronized (System.err) {
                     System.err.println("Stop failed:");
                     StackTraceElement[] els = x.getStackTrace();
-                    for (StackTraceElement el : els) System.err.println(el.toString());
+                    for (StackTraceElement el : els) {
+                      System.err.println(el.toString());
+                    }
                 }
 
                 status = "Stop failed:"+x.getMessage();
@@ -363,7 +399,9 @@ public class CoordinationDemo {
                     status = event.getEventTypeDesc();
                     int type = event.getEventType();
                     boolean display = VIEW_EVENTS[type];
-                    if ( display ) parent.printScreen();
+                    if ( display ) {
+                      parent.printScreen();
+                    }
                     try { Thread.sleep(SLEEP_TIME); }catch ( Exception x){
                         // Ignore
                     }

==================================================
IntrospectionUtils.java
index cd0fee6e4d..658da95347 100644
--- a/test/org/apache/catalina/tribes/demos/EchoRpcTest.java
+++ b/test/org/apache/catalina/tribes/demos/EchoRpcTest.java
@@ -146,9 +146,13 @@ public class EchoRpcTest implements RpcCallback, Runnable {
                 } else if ("-name".equals(args[i])) {
                     name = args[++i];
                 } else if ("-mode".equals(args[i])) {
-                    if ( "all".equals(args[++i]) ) options = RpcChannel.ALL_REPLY;
-                    else if ( "first".equals(args[i]) ) options = RpcChannel.FIRST_REPLY;
-                    else if ( "majority".equals(args[i]) ) options = RpcChannel.MAJORITY_REPLY;
+                    if ( "all".equals(args[++i]) ) {
+                      options = RpcChannel.ALL_REPLY;
+                    } else if ( "first".equals(args[i]) ) {
+                      options = RpcChannel.FIRST_REPLY;
+                    } else if ( "majority".equals(args[i]) ) {
+                      options = RpcChannel.MAJORITY_REPLY;
+                    }
                 } else if ("-debug".equals(args[i])) {
                     // Not used
                 } else if ("-help".equals(args[i])) {

==================================================
LoadTest.java
index 0392218718..7c7c7569f8 100644
--- a/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
+++ b/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
@@ -41,9 +41,10 @@ public final class IntrospectionUtils {
      */
     @SuppressWarnings("null")
     public static boolean setProperty(Object o, String name, String value) {
-        if (log.isDebugEnabled())
-            log.debug("IntrospectionUtils: setProperty(" +
-                    o.getClass() + " " + name + "=" + value + ")");
+        if (log.isDebugEnabled()) {
+          log.debug("IntrospectionUtils: setProperty(" +
+                  o.getClass() + " " + name + "=" + value + ")");
+        }
 
         String setter = "set" + capitalize(name);
 
@@ -104,16 +105,18 @@ public final class IntrospectionUtils {
                         try {
                             params[0] = InetAddress.getByName(value);
                         } catch (UnknownHostException exc) {
-                            if (log.isDebugEnabled())
-                                log.debug("IntrospectionUtils: Unable to resolve host name:" + value);
+                            if (log.isDebugEnabled()) {
+                              log.debug("IntrospectionUtils: Unable to resolve host name:" + value);
+                            }
                             ok = false;
                         }
 
                         // Unknown type
                     } else {
-                        if (log.isDebugEnabled())
-                            log.debug("IntrospectionUtils: Unknown type " +
-                                    paramType.getName());
+                        if (log.isDebugEnabled()) {
+                          log.debug("IntrospectionUtils: Unknown type " +
+                                  paramType.getName());
+                        }
                     }
 
                     if (ok) {
@@ -161,13 +164,15 @@ public final class IntrospectionUtils {
         } catch (IllegalArgumentException ex2) {
             log.warn("IAE " + o + " " + name + " " + value, ex2);
         } catch (SecurityException ex1) {
-            if (log.isDebugEnabled())
-                log.debug("IntrospectionUtils: SecurityException for " +
-                        o.getClass() + " " + name + "=" + value + ")", ex1);
+            if (log.isDebugEnabled()) {
+              log.debug("IntrospectionUtils: SecurityException for " +
+                      o.getClass() + " " + name + "=" + value + ")", ex1);
+            }
         } catch (IllegalAccessException iae) {
-            if (log.isDebugEnabled())
-                log.debug("IntrospectionUtils: IllegalAccessException for " +
-                        o.getClass() + " " + name + "=" + value + ")", iae);
+            if (log.isDebugEnabled()) {
+              log.debug("IntrospectionUtils: IllegalAccessException for " +
+                      o.getClass() + " " + name + "=" + value + ")", iae);
+            }
         } catch (InvocationTargetException ie) {
             Throwable cause = ie.getCause();
             if (cause instanceof ThreadDeath) {
@@ -176,9 +181,10 @@ public final class IntrospectionUtils {
             if (cause instanceof VirtualMachineError) {
                 throw (VirtualMachineError) cause;
             }
-            if (log.isDebugEnabled())
-                log.debug("IntrospectionUtils: InvocationTargetException for " +
-                        o.getClass() + " " + name + "=" + value + ")", ie);
+            if (log.isDebugEnabled()) {
+              log.debug("IntrospectionUtils: InvocationTargetException for " +
+                      o.getClass() + " " + name + "=" + value + ")", ie);
+            }
         }
         return false;
     }
@@ -208,8 +214,9 @@ public final class IntrospectionUtils {
 
     public static Method[] findMethods(Class<?> c) {
         Method methods[] = objectMethods.get(c);
-        if (methods != null)
-            return methods;
+        if (methods != null) {
+          return methods;
+        }
 
         methods = c.getMethods();
         objectMethods.put(c, methods);

==================================================
MapDemo.java
index 337f7e40e7..0d27a1a440 100644
--- a/test/org/apache/catalina/tribes/demos/LoadTest.java
+++ b/test/org/apache/catalina/tribes/demos/LoadTest.java
@@ -58,12 +58,16 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
 
     public static synchronized void startTest() {
         threadCount++;
-        if ( messageStartSendTime == 0 ) messageStartSendTime = System.currentTimeMillis();
+        if ( messageStartSendTime == 0 ) {
+          messageStartSendTime = System.currentTimeMillis();
+        }
     }
 
     public static synchronized void endTest() {
         threadCount--;
-        if ( messageEndSendTime == 0 && threadCount==0 ) messageEndSendTime = System.currentTimeMillis();
+        if ( messageEndSendTime == 0 && threadCount==0 ) {
+          messageEndSendTime = System.currentTimeMillis();
+        }
     }
 
 
@@ -129,16 +133,24 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
                         }
                         channel.send(channel.getMembers(), msg, channelOptions);
                         if ( pause > 0 ) {
-                            if ( debug) System.out.println("Pausing sender for "+pause+" ms.");
+                            if ( debug) {
+                              System.out.println("Pausing sender for "+pause+" ms.");
+                            }
                             Thread.sleep(pause);
                         }
                     } catch (ChannelException x) {
-                        if ( debug ) log.error("Unable to send message:"+x.getMessage(),x);
+                        if ( debug ) {
+                          log.error("Unable to send message:"+x.getMessage(),x);
+                        }
                         log.error("Unable to send message:"+x.getMessage());
                         ChannelException.FaultyMember[] faulty = x.getFaultyMembers();
-                        for (ChannelException.FaultyMember faultyMember : faulty) log.error("Faulty: " + faultyMember);
+                        for (ChannelException.FaultyMember faultyMember : faulty) {
+                          log.error("Faulty: " + faultyMember);
+                        }
                         --counter;
-                        if ( this.breakonChannelException ) throw x;
+                        if ( this.breakonChannelException ) {
+                          throw x;
+                        }
                     }
                 }
                 if ( (counter % statsInterval) == 0 && (counter > 0)) {
@@ -153,7 +165,9 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             }
         }catch ( Exception x ) {
             log.error("Captured error while sending:"+x.getMessage());
-            if ( debug ) log.error("",x);
+            if ( debug ) {
+              log.error("",x);
+            }
             printSendStats(LoadTest.messagesSent, LoadTest.messageSize);
         }
         endTest();
@@ -194,7 +208,9 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
 
     @Override
     public void messageReceived(Serializable msg, Member mbr){
-        if ( receiveStart == 0 ) receiveStart = System.currentTimeMillis();
+        if ( receiveStart == 0 ) {
+          receiveStart = System.currentTimeMillis();
+        }
         if ( debug ) {
             if ( msg instanceof LoadMessage ) {
                 printArray(((LoadMessage)msg).getMessage());
@@ -333,7 +349,9 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
                 size = Integer.parseInt(args[++i])-4;
                 System.out.println("Message size will be:"+(size+4)+" bytes");
             } else if ("-mode".equals(args[i])) {
-                if ( "receive".equals(args[++i]) ) send = false;
+                if ( "receive".equals(args[++i]) ) {
+                  send = false;
+                }
             } else if ("-debug".equals(args[i])) {
                 debug = true;
             } else if ("-help".equals(args[i]))
@@ -363,7 +381,9 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
             test.channelOptions = channelOptions;
         }
         test.run();
-        if ( shutdown && send ) channel.stop(Channel.DEFAULT);
+        if ( shutdown && send ) {
+          channel.stop(Channel.DEFAULT);
+        }
         System.out.println("System test complete, sleeping to let threads finish.");
         Thread.sleep(60*1000*60);
     }

==================================================
MembersWithProperties.java
index 28638574c0..f6c657b8d3 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -245,7 +245,9 @@ public class MapDemo implements ChannelListener, MembershipListener{
                     update();
                     return "";
                 }
-                if ( row == 0 ) return columnNames[col];
+                if ( row == 0 ) {
+                  return columnNames[col];
+                }
                 Object[] keys = map.keySetFull().toArray();
                 String key = (String)keys [row-1];
                 LazyReplicatedMap.MapEntry<String,StringBuilder> entry =
@@ -537,10 +539,16 @@ public class MapDemo implements ChannelListener, MembershipListener{
                 boolean primary = ( (Boolean) table.getValueAt(row, 5)).booleanValue();
                 boolean proxy = ( (Boolean) table.getValueAt(row, 6)).booleanValue();
                 boolean backup = ( (Boolean) table.getValueAt(row, 7)).booleanValue();
-                if (primary) color = Color.GREEN;
-                else if (proxy) color = Color.RED;
-                else if (backup) color = Color.BLUE;
-                if ( color != null ) cell.setBackground(color);
+                if (primary) {
+                  color = Color.GREEN;
+                } else if (proxy) {
+                  color = Color.RED;
+                } else if (backup) {
+                  color = Color.BLUE;
+                }
+                if ( color != null ) {
+                  cell.setBackground(color);
+                }
             }
             return cell;
         }

==================================================
TestGroupChannelOptionFlag.java
index 3ecc5cc545..e2722fa904 100644
--- a/test/org/apache/catalina/tribes/demos/MembersWithProperties.java
+++ b/test/org/apache/catalina/tribes/demos/MembersWithProperties.java
@@ -86,7 +86,9 @@ public class MembersWithProperties implements MembershipListener{
 
     @SuppressWarnings("unused")
     public static void main(String[] args) throws Exception {
-        if (args.length==0) usage();
+        if (args.length==0) {
+          usage();
+        }
         main = Thread.currentThread();
         ManagedChannel channel = (ManagedChannel) ChannelCreator.createChannel(args);
         Properties props = new Properties();

==================================================
TestDomainFilterInterceptor.java
index 86d238266d..f90dd6e24e 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelOptionFlag.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelOptionFlag.java
@@ -58,7 +58,9 @@ public class TestGroupChannelOptionFlag {
         try {
             channel.start(Channel.DEFAULT);
         }catch ( ChannelException x ) {
-            if (x.getMessage().contains("option flag conflict")) error = true;
+            if (x.getMessage().contains("option flag conflict")) {
+              error = true;
+            }
         }
         Assert.assertTrue(error);
     }
@@ -79,7 +81,9 @@ public class TestGroupChannelOptionFlag {
         try {
             channel.start(Channel.DEFAULT);
         }catch ( ChannelException x ) {
-            if (x.getMessage().contains("option flag conflict")) error = true;
+            if (x.getMessage().contains("option flag conflict")) {
+              error = true;
+            }
         }
         Assert.assertFalse(error);
     }

==================================================
TestEncryptInterceptor.java
index bd2be3cd3e..075ce5452b 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
@@ -73,8 +73,12 @@ public class TestDomainFilterInterceptor {
             };
             threads[i] = t;
         }
-        for (Thread thread : threads) thread.start();
-        for (Thread thread : threads) thread.join();
+        for (Thread thread : threads) {
+          thread.start();
+        }
+        for (Thread thread : threads) {
+          thread.join();
+        }
         System.out.println("All channels started.");
         for (int i=listeners.length-1; i>=0; i-- ) {
             Assert.assertEquals("Checking member arrival length",0,listeners[i].members.size());

==================================================
TestOrderInterceptor.java
index 172ca2047e..753aaa52d4 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
@@ -426,8 +426,9 @@ public class TestEncryptInterceptor {
                     xbb.append(bytes, 0, bytes.length);
                     msg.setMessage(xbb);
 
-                    for(int i=0; i<messagesPerThread; ++i)
-                        src.sendMessage(null, msg, null);
+                    for(int i=0; i<messagesPerThread; ++i) {
+                      src.sendMessage(null, msg, null);
+                    }
                 } catch (ChannelException e) {
                     Assert.fail("Encountered exception sending messages: " + e.getMessage());
                 }
@@ -440,11 +441,13 @@ public class TestEncryptInterceptor {
             threads[i].setName("Message-Thread-" + i);
         }
 
-        for(int i=0; i<numThreads; ++i)
-            threads[i].start();
+        for(int i=0; i<numThreads; ++i) {
+          threads[i].start();
+        }
 
-        for(int i=0; i<numThreads; ++i)
-            threads[i].join();
+        for(int i=0; i<numThreads; ++i) {
+          threads[i].join();
+        }
 
         // Check all received messages to make sure they are not corrupted
         Collection<byte[]> messages = ((ValuesCaptureInterceptor)dest.getPrevious()).getValues();
@@ -452,8 +455,9 @@ public class TestEncryptInterceptor {
         Assert.assertEquals("Did not receive all expected messages",
                 numThreads * messagesPerThread, messages.size());
 
-        for(byte[] message : messages)
-            Assert.assertArrayEquals("Message is corrupted", message, bytes);
+        for(byte[] message : messages) {
+          Assert.assertArrayEquals("Message is corrupted", message, bytes);
+        }
     }
 
     @Test
@@ -482,8 +486,9 @@ public class TestEncryptInterceptor {
         private ChannelInterceptor dest;
 
         public PipedInterceptor(ChannelInterceptor dest) {
-            if(null == dest)
-                throw new IllegalArgumentException("Destination must not be null");
+            if(null == dest) {
+              throw new IllegalArgumentException("Destination must not be null");
+            }
 
             this.dest = dest;
         }

==================================================
TestDataIntegrity.java
index bfd707b6df..501ee6872c 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
@@ -77,8 +77,12 @@ public class TestOrderInterceptor {
             };
         }
         TesterUtil.addRandomDomain(channels);
-        for ( int i=0; i<channelCount; i++ ) threads[i].start();
-        for ( int i=0; i<channelCount; i++ ) threads[i].join();
+        for ( int i=0; i<channelCount; i++ ) {
+          threads[i].start();
+        }
+        for ( int i=0; i<channelCount; i++ ) {
+          threads[i].join();
+        }
         Thread.sleep(1500);
     }
 
@@ -158,8 +162,11 @@ public class TestOrderInterceptor {
         public synchronized void messageReceived(Serializable msg, Member sender) {
             total++;
             Integer i = (Integer)msg;
-            if ( i.intValue() != cnt ) fail = true;
-            else cnt++;
+            if ( i.intValue() != cnt ) {
+              fail = true;
+            } else {
+              cnt++;
+            }
             System.out.println("Listener["+id+"] Message received:"+i+" Count:"+total+" Fail:"+fail);
 
         }

==================================================
TestMulticastPackages.java
index f5ee0d3647..3da336f4f1 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -69,7 +69,9 @@ public class TestDataIntegrity {
                 public void run() {
                     try {
                         long start = System.currentTimeMillis();
-                        for (int i = 0; i < msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(),0);
+                        for (int i = 0; i < msgCount; i++) {
+                          channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(),0);
+                        }
                         System.out.println("Thread["+this.getName()+"] sent "+msgCount+" messages in "+(System.currentTimeMillis()-start)+" ms.");
                     }catch ( Exception x ) {
                         x.printStackTrace();
@@ -85,7 +87,9 @@ public class TestDataIntegrity {
         }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<15000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<15000 && msgCount*threadCount!=listener1.count) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished NO_ACK ["+listener1.count+"]");
         Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
@@ -100,7 +104,9 @@ public class TestDataIntegrity {
                 public void run() {
                     try {
                         long start = System.currentTimeMillis();
-                        for (int i = 0; i < msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
+                        for (int i = 0; i < msgCount; i++) {
+                          channel1.send(new Member[] {channel2.getLocalMember(false)}, Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
+                        }
                         System.out.println("Thread["+this.getName()+"] sent "+msgCount+" messages in "+(System.currentTimeMillis()-start)+" ms.");
                     }catch ( Exception x ) {
                         x.printStackTrace();
@@ -116,7 +122,9 @@ public class TestDataIntegrity {
         }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished ASYNC MULTI THREAD ["+listener1.count+"]");
         Assert.assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
@@ -124,10 +132,14 @@ public class TestDataIntegrity {
     @Test
     public void testDataSendASYNC() throws Exception {
         System.err.println("Starting ASYNC");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
+        }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished ASYNC");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count);
     }
@@ -135,7 +147,9 @@ public class TestDataIntegrity {
     @Test
     public void testDataSendACK() throws Exception {
         System.err.println("Starting ACK");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_USE_ACK);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_USE_ACK);
+        }
         Thread.sleep(250);
         System.err.println("Finished ACK");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count);
@@ -144,7 +158,9 @@ public class TestDataIntegrity {
     @Test
     public void testDataSendSYNCACK() throws Exception {
         System.err.println("Starting SYNC_ACK");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK);
+        }
         Thread.sleep(250);
         System.err.println("Finished SYNC_ACK");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count);
@@ -191,7 +207,9 @@ public class TestDataIntegrity {
 
         public static boolean verify(Data d) {
             boolean result = (d.length == d.data.length);
-            for ( int i=0; result && (i<d.data.length); i++ ) result = result && d.data[i] == d.key;
+            for ( int i=0; result && (i<d.data.length); i++ ) {
+              result = result && d.data[i] == d.key;
+            }
             return result;
         }
     }

==================================================
TestRemoteProcessException.java
index 557ea52621..0faee86a88 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -96,7 +96,9 @@ public class TestMulticastPackages {
 
     public static void printMissingMsgs(int[] msgs, int maxIdx) {
         for (int i=0; i<maxIdx && i<msgs.length; i++) {
-            if (msgs[i]==0) System.out.print(i+", ");
+            if (msgs[i]==0) {
+              System.out.print(i+", ");
+            }
         }
         System.out.println();
     }
@@ -138,7 +140,9 @@ public class TestMulticastPackages {
         }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count.get()) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count.get()) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished NO_ACK ["+listener1.count+"]");
         System.out.println("Sent "+counter.get()+ " messages. Received "+listener1.count+" Highest msg received:"+listener1.maxIdx);
         System.out.print("Missing messages:");
@@ -149,10 +153,14 @@ public class TestMulticastPackages {
     @Test
     public void testDataSendASYNC() throws Exception {
         System.err.println("Starting ASYNC");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_ASYNCHRONOUS|Channel.SEND_OPTIONS_MULTICAST);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_ASYNCHRONOUS|Channel.SEND_OPTIONS_MULTICAST);
+        }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count.get()) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count.get()) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished ASYNC");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
@@ -160,7 +168,9 @@ public class TestMulticastPackages {
     @Test
     public void testDataSendACK() throws Exception {
         System.err.println("Starting ACK");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
+        }
         Thread.sleep(250);
         System.err.println("Finished ACK");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
@@ -169,7 +179,9 @@ public class TestMulticastPackages {
     @Test
     public void testDataSendSYNCACK() throws Exception {
         System.err.println("Starting SYNC_ACK");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
+        }
         Thread.sleep(250);
         System.err.println("Finished SYNC_ACK");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
@@ -228,7 +240,9 @@ public class TestMulticastPackages {
             int i = r.nextInt();
             i = ( i % 127 );
             int length = Math.abs(r.nextInt() % size);
-            if (length<100) length += 100;
+            if (length<100) {
+              length += 100;
+            }
             Data d = new Data();
             d.length = length;
             d.key = (byte)i;
@@ -243,13 +257,17 @@ public class TestMulticastPackages {
         }
 
         public int getNumber() {
-            if (!hasNr) return -1;
+            if (!hasNr) {
+              return -1;
+            }
             return XByteBuffer.toInt(this.data, 0);
         }
 
         public static boolean verify(Data d) {
             boolean result = (d.length == d.data.length);
-            for ( int i=(d.hasNr?4:0); result && (i<d.data.length); i++ ) result = result && d.data[i] == d.key;
+            for ( int i=(d.hasNr?4:0); result && (i<d.data.length); i++ ) {
+              result = result && d.data[i] == d.key;
+            }
             return result;
         }
     }

==================================================
TestUdpPackages.java
index fa86fe30ad..587699e865 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
@@ -76,7 +76,11 @@ public class TestRemoteProcessException {
                     throw e;
                 }
             }
-            if ( error ) errC++; else nerrC++;
+            if ( error ) {
+              errC++;
+            } else {
+              nerrC++;
+            }
         }
         System.err.println("Finished SYNC_ACK");
 
@@ -150,7 +154,9 @@ public class TestRemoteProcessException {
 
         public static boolean verify(Data d) {
             boolean result = (d.length == d.data.length);
-            for ( int i=0; result && (i<d.data.length); i++ ) result = result && d.data[i] == d.key;
+            for ( int i=0; result && (i<d.data.length); i++ ) {
+              result = result && d.data[i] == d.key;
+            }
             return result;
         }
     }

==================================================
SocketValidateReceive.java
index 70ba8515b9..bdb7078f8c 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
@@ -130,7 +130,9 @@ public class TestUdpPackages {
         }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count.get()) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count.get()) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished NO_ACK ["+listener1.count+"]");
         System.out.println("Sent "+counter.get()+ " messages. Received "+listener1.count+" Highest msg received:"+listener1.maxIdx);
         System.out.print("Missing messages:");
@@ -140,7 +142,9 @@ public class TestUdpPackages {
 
     public static void printMissingMsgs(int[] msgs, int maxIdx) {
         for (int i=0; i<maxIdx && i<msgs.length; i++) {
-            if (msgs[i]==0) System.out.print(i+", ");
+            if (msgs[i]==0) {
+              System.out.print(i+", ");
+            }
         }
         System.out.println();
     }
@@ -182,7 +186,9 @@ public class TestUdpPackages {
         }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count.get()) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count.get()) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished NO_ACK ["+listener1.count+"]");
         System.out.println("Sent "+counter.get()+ " messages. Received "+listener1.count+" Highest msg received:"+listener1.maxIdx);
         System.out.print("Missing messages:");
@@ -193,10 +199,14 @@ public class TestUdpPackages {
     @Test
     public void testDataSendASYNC() throws Exception {
         System.err.println("Starting ASYNC");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_ASYNCHRONOUS|Channel.SEND_OPTIONS_UDP);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_ASYNCHRONOUS|Channel.SEND_OPTIONS_UDP);
+        }
         //sleep for 50 sec, let the other messages in
         long start = System.currentTimeMillis();
-        while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count.get()) Thread.sleep(500);
+        while ( (System.currentTimeMillis()-start)<5000 && msgCount!=listener1.count.get()) {
+          Thread.sleep(500);
+        }
         System.err.println("Finished ASYNC");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
@@ -204,7 +214,9 @@ public class TestUdpPackages {
     @Test
     public void testDataSendACK() throws Exception {
         System.err.println("Starting ACK");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_UDP);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_UDP);
+        }
         Thread.sleep(250);
         System.err.println("Finished ACK");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
@@ -213,7 +225,9 @@ public class TestUdpPackages {
     @Test
     public void testDataSendSYNCACK() throws Exception {
         System.err.println("Starting SYNC_ACK");
-        for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_UDP);
+        for (int i=0; i<msgCount; i++) {
+          channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_UDP);
+        }
         Thread.sleep(250);
         System.err.println("Finished SYNC_ACK");
         Assert.assertEquals("Checking success messages.",msgCount,listener1.count.get());
@@ -272,7 +286,9 @@ public class TestUdpPackages {
             int i = r.nextInt();
             i = ( i % 127 );
             int length = Math.abs(r.nextInt() % size);
-            if (length<100) length += 100;
+            if (length<100) {
+              length += 100;
+            }
             Data d = new Data();
             d.length = length;
             d.key = (byte)i;
@@ -287,13 +303,17 @@ public class TestUdpPackages {
         }
 
         public int getNumber() {
-            if (!hasNr) return -1;
+            if (!hasNr) {
+              return -1;
+            }
             return XByteBuffer.toInt(this.data, 0);
         }
 
         public static boolean verify(Data d) {
             boolean result = (d.length == d.data.length);
-            for ( int i=(d.hasNr?4:0); result && (i<d.data.length); i++ ) result = result && d.data[i] == d.key;
+            for ( int i=(d.hasNr?4:0); result && (i<d.data.length); i++ ) {
+              result = result && d.data[i] == d.key;
+            }
             return result;
         }
     }

==================================================
MemoryUserDatabaseTests.java
index a9264d4a3e..df02a83b70 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketValidateReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketValidateReceive.java
@@ -35,7 +35,9 @@ public class SocketValidateReceive {
 
     public static void main(String[] args) throws Exception {
         int size = 43800;
-        if (args.length > 0 ) try {size=Integer.parseInt(args[0]);}catch(Exception x){ /* Ignore */ }
+        if (args.length > 0 ) {
+          try {size=Integer.parseInt(args[0]);}catch(Exception x){ /* Ignore */ }
+        }
 
         try(ServerSocket srvSocket = new ServerSocket(9999)) {
             System.out.println("Listening on 9999");
@@ -105,7 +107,9 @@ public class SocketValidateReceive {
                     seq++;
                     packages++;
                 }
-                if ( b[i] != seq ) throw new Exception("mismatch on seq:"+seq+" and byte nr:"+cur+" count:"+count+" packages:"+packages);
+                if ( b[i] != seq ) {
+                  throw new Exception("mismatch on seq:"+seq+" and byte nr:"+cur+" count:"+count+" packages:"+packages);
+                }
                 cur++;
             }
             return packages;

==================================================
TestLoadBalancerDrainingValve.java
index 9786238fea..96a770d61a 100644
--- a/test/org/apache/catalina/users/MemoryUserDatabaseTests.java
+++ b/test/org/apache/catalina/users/MemoryUserDatabaseTests.java
@@ -125,15 +125,17 @@ public class MemoryUserDatabaseTests {
         Runnable job = new Runnable() {
             @Override
             public void run() {
-                for(int i=0; i<10; ++i)
-                    db.createUser("newUser-" + Thread.currentThread().getName() + "-" + i, "x", null);
+                for(int i=0; i<10; ++i) {
+                  db.createUser("newUser-" + Thread.currentThread().getName() + "-" + i, "x", null);
+                }
             }
         };
 
         int numThreads = 100;
         Thread[] threads = new Thread[numThreads + 1];
-        for(int i=0; i<numThreads; ++i)
-            threads[i] = new Thread(job);
+        for(int i=0; i<numThreads; ++i) {
+          threads[i] = new Thread(job);
+        }
 
         // Let's
         threads[numThreads] = new Thread(new Runnable() {
@@ -148,18 +150,21 @@ public class MemoryUserDatabaseTests {
 
         ++numThreads;
 
-        for(int i=0; i<numThreads; ++i)
-            threads[i].start();
+        for(int i=0; i<numThreads; ++i) {
+          threads[i].start();
+        }
 
-        for(int i=0; i<numThreads; ++i)
-            threads[i].join();
+        for(int i=0; i<numThreads; ++i) {
+          threads[i].join();
+        }
 
         // Remove all those extra users
         Iterator<User> users = db.getUsers();
         for(; users.hasNext();) {
             User user = users.next();
-            if(user.getUsername().startsWith("newUser"))
-                db.removeUser(user);
+            if(user.getUsername().startsWith("newUser")) {
+              db.removeUser(user);
+            }
         }
 
         users = db.getUsers();

==================================================
Dumper.java
index 7c670bcc3f..fc06ab705f 100644
--- a/test/org/apache/catalina/valves/TestLoadBalancerDrainingValve.java
+++ b/test/org/apache/catalina/valves/TestLoadBalancerDrainingValve.java
@@ -155,8 +155,9 @@ public class TestLoadBalancerDrainingValve {
                 response.addCookie(expectedCookie);
                 EasyMock.expect(ctx.getSessionCookieName()).andReturn(sessionCookieName); // Indirect call
                 String expectedRequestURI = requestURI;
-                if(null != queryString)
-                    expectedRequestURI = expectedRequestURI + '?' + queryString;
+                if(null != queryString) {
+                  expectedRequestURI = expectedRequestURI + '?' + queryString;
+                }
                 response.setHeader("Location", expectedRequestURI);
                 response.setStatus(307);
             }

==================================================
TesterValidator.java
index 46ac5e8757..7ecfba72a1 100644
--- a/test/org/apache/jasper/compiler/Dumper.java
+++ b/test/org/apache/jasper/compiler/Dumper.java
@@ -26,8 +26,9 @@ class Dumper {
         private int indent = 0;
 
         private String getAttributes(Attributes attrs) {
-            if (attrs == null)
-                return "";
+            if (attrs == null) {
+              return "";
+            }
 
             StringBuilder buf = new StringBuilder();
             for (int i=0; i < attrs.getLength(); i++) {

==================================================
TesterSupport.java
index 751e8d5179..f2d47f825d 100644
--- a/test/org/apache/jasper/compiler/TesterValidator.java
+++ b/test/org/apache/jasper/compiler/TesterValidator.java
@@ -78,8 +78,9 @@ public class TesterValidator {
     }
 
     private static String doTestBug53867OldVersion(String s) {
-        if (s == null)
-            return null;
+        if (s == null) {
+          return null;
+        }
         StringBuilder sb = new StringBuilder();
         for (int i = 0; i < s.length(); i++) {
             char c = s.charAt(i);

==================================================
TestOpenSSLConf.java
index 2be572871b..b1fca54ae2 100644
--- a/test/org/apache/tomcat/util/net/TesterSupport.java
+++ b/test/org/apache/tomcat/util/net/TesterSupport.java
@@ -341,8 +341,9 @@ public final class TesterSupport {
     }
 
     protected static boolean checkLastClientAuthRequestedIssuers() {
-        if (lastRequestedIssuers == null || lastRequestedIssuers.length != 1)
-            return false;
+        if (lastRequestedIssuers == null || lastRequestedIssuers.length != 1) {
+          return false;
+        }
         return (new X500Principal(clientAuthExpectedIssuer)).equals(
                     new X500Principal(lastRequestedIssuers[0].getName()));
     }
@@ -384,10 +385,11 @@ public final class TesterSupport {
 
             // Report the number of bytes read
             resp.setContentType("text/plain");
-            if (contentOK)
-                resp.getWriter().print("OK-" + read);
-            else
-                resp.getWriter().print("CONTENT-MISMATCH-" + read);
+            if (contentOK) {
+              resp.getWriter().print("OK-" + read);
+            } else {
+              resp.getWriter().print("CONTENT-MISMATCH-" + read);
+            }
         }
     }
 

==================================================
