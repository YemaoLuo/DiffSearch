68edeb892be110a578f09b689425a54618916667
==================================================
Pull up changes to process()
==================================================
Mark Emlyn
==================================================
Thu May 2 23:21:25 2013 +0000
==================================================
AbstractHttp11Processor.java
Pull up changes to process()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478604 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 6259b8acbd..82e2fc2934 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -1045,6 +1045,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
         rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
 
+        registerForWrite();
+
         if (error || endpoint.isPaused()) {
             return SocketState.CLOSED;
         } else if (isAsync() || comet) {
@@ -1069,6 +1071,32 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     }
 
 
+    /**
+     * Register the socket for write possible events of there is data in the
+     * output buffer still to write.
+     *
+     * @return <code>true</code> if the socket was registered for write possible
+     *         events, otherwise <code>false</code>
+     */
+    protected boolean registerForWrite() {
+        if (outputBuffer.hasDataToWrite()) {
+            registerForEvent(false, true);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+
+    /**
+     * Regsiter the socket for the specified events.
+     *
+     * @param read  Register the socket for read events
+     * @param write Regsiter the socket for write events
+     */
+    protected abstract void registerForEvent(boolean read, boolean write);
+
+
     /**
      * After reading the request headers, we have to setup the request filters.
      */

==================================================
Http11NioProcessor.java
index c04c15245f..ed456f5f68 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -238,9 +238,16 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
 
+    @Override
+    protected void registerForEvent(boolean read, boolean write) {
+        ((AprEndpoint) endpoint).getPoller().add(
+                socket.getSocket().longValue(), -1, read, write);
+    }
+
+
     @Override
     protected void resetTimeouts() {
-        // NOOP for APR
+        // NO-OP for APR
     }
 
 

==================================================
Http11Processor.java
index 2fc3a0aa4b..036e449d5a 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -216,27 +216,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
 
-
     @Override
-    public SocketState process(SocketWrapper<NioChannel> socketWrapper)
-            throws IOException {
-        SocketState state = super.process(socketWrapper);
-        registerForWrite();
-        return state;
-    }
-
-
-    protected boolean registerForWrite() {
-        // Register for write if we have more data to write
-        if (outputBuffer.hasDataToWrite()) {
-            registerForEvent(false, true);
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-
     protected void registerForEvent(boolean read, boolean write) {
         final NioEndpoint.KeyAttachment attach =
                 (NioEndpoint.KeyAttachment)socket.getSocket().getAttachment(

==================================================
