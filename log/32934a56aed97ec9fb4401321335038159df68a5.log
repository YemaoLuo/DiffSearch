32934a56aed97ec9fb4401321335038159df68a5
==================================================
Fix spellings in code forked from Commons
==================================================
Mark Thomas
==================================================
Wed Sep 16 17:50:07 2020 +0100
==================================================
BasicDataSource.java
Fix spellings in code forked from Commons

Based on a PR provided by John Bampton


==================================================
DefaultPooledObjectInfoMBean.java
index 31faa61c45..3845a17871 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -455,7 +455,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      *
      * @return A new connection factory.
      *
-     * @throws SQLException If the connection factort cannot be created
+     * @throws SQLException If the connection factory cannot be created
      */
     protected ConnectionFactory createConnectionFactory() throws SQLException {
         // Load the JDBC driver class

==================================================
ConstantPool.java
index eac4a5ca82..f4540b6bc9 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/DefaultPooledObjectInfoMBean.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/DefaultPooledObjectInfoMBean.java
@@ -57,7 +57,7 @@ public interface DefaultPooledObjectInfoMBean {
     /**
      * Obtain the time that pooled object was last borrowed.
      *
-     * @return The last borrowed time for the pooled object formated as
+     * @return The last borrowed time for the pooled object formatted as
      *         {@code yyyy-MM-dd HH:mm:ss Z}
      */
     String getLastBorrowTimeFormatted();
@@ -82,7 +82,7 @@ public interface DefaultPooledObjectInfoMBean {
     /**
      * Obtain the time that pooled object was last returned.
      *
-     * @return The last returned time for the pooled object formated as
+     * @return The last returned time for the pooled object formatted as
      *         {@code yyyy-MM-dd HH:mm:ss Z}
      */
     String getLastReturnTimeFormatted();

==================================================
JavaClass.java
index 0cc4ba76d2..f3ab072bc5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -27,7 +27,7 @@ import org.apache.tomcat.util.bcel.Const;
  * a parsed classfile. It may contain null references, due to the JVM
  * specification that skips an entry after an 8-byte constant (double,
  * long) entry.  Those interested in generating constant pools
- * programatically should see <a href="../generic/ConstantPoolGen.html">
+ * programmatically should see <a href="../generic/ConstantPoolGen.html">
  * ConstantPoolGen</a>.
 
  * @see     Constant

==================================================
FileItem.java
index df1cd2132b..46473adca2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -22,7 +22,7 @@ package org.apache.tomcat.util.bcel.classfile;
  * fields, methods and commands contained in a Java .class file.
  * See <a href="https://docs.oracle.com/javase/specs/">JVM specification</a> for details.
  * The intent of this class is to represent a parsed or otherwise existing
- * class file.  Those interested in programatically generating classes
+ * class file.  Those interested in programmatically generating classes
  * should see the <a href="../generic/ClassGen.html">ClassGen</a> class.
  */
 public class JavaClass {

==================================================
FileItemIterator.java
index b7bdb552b3..29aa496b30 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItem.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItem.java
@@ -195,7 +195,7 @@ public interface FileItem extends FileItemHeadersSupport {
      * be used for storing the contents of the file.
      *
      * @return An {@link java.io.OutputStream OutputStream} that can be used
-     *         for storing the contensts of the file.
+     *         for storing the contents of the file.
      *
      * @throws IOException if an error occurs.
      */

==================================================
