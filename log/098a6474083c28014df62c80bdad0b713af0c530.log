098a6474083c28014df62c80bdad0b713af0c530
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53074
==================================================
Mark Emlyn
==================================================
Fri May 25 16:39:46 2012 +0000
==================================================
StreamInbound.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53074
Make WebSocket connections use infinite read timeouts by default.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1342717 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index b9d9d62c4a..45281f558d 100644
--- a/java/org/apache/catalina/websocket/StreamInbound.java
+++ b/java/org/apache/catalina/websocket/StreamInbound.java
@@ -43,7 +43,6 @@ public abstract class StreamInbound implements UpgradeInbound {
     private int outboundCharBufferSize = WsOutbound.DEFAULT_BUFFER_SIZE;
 
 
-
     public int getOutboundByteBufferSize() {
         return outboundByteBufferSize;
     }
@@ -231,4 +230,17 @@ public abstract class StreamInbound implements UpgradeInbound {
      *                      connection.
      */
     protected abstract void onTextData(Reader r) throws IOException;
+
+    /**
+     * This default implementation sets the read timeout to infinite and expects
+     * the WebSocket application to close the connection when it is no longer
+     * required. Applications wishing to set an explicit timeout may override
+     * this method and return a value of their choice.
+     *
+     * @return  The read timeout in milliseconds or -1 for infinite
+     */
+    @Override
+    public int getReadTimeout() {
+        return -1;
+    }
 }

==================================================
Http11AprProtocol.java
index d81759fb27..7c35a50285 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -127,7 +127,8 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
             recycledProcessors.offer(processor);
             if (addToPoller) {
                 ((AprEndpoint)proto.endpoint).getPoller().add(
-                        socket.getSocket().longValue(), true);
+                        socket.getSocket().longValue(),
+                        proto.endpoint.getKeepAliveTimeout());
             }
         }
 

==================================================
UpgradeAprProcessor.java
index 3ce3dd02bf..82f7d5bf8b 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -231,7 +231,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
             recycledProcessors.offer(processor);
             if (addToPoller && proto.endpoint.isRunning()) {
                 ((AprEndpoint)proto.endpoint).getPoller().add(
-                        socket.getSocket().longValue(), true);
+                        socket.getSocket().longValue(),
+                        proto.endpoint.getKeepAliveTimeout());
             }
         }
 
@@ -273,11 +274,13 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                 socket.setAsync(true);
             } else if (processor.isComet() && proto.endpoint.isRunning()) {
                 ((AprEndpoint) proto.endpoint).getCometPoller().add(
-                        socket.getSocket().longValue(), false);
+                        socket.getSocket().longValue(),
+                        proto.endpoint.getSoTimeout());
             } else {
                 // Upgraded
                 ((AprEndpoint) proto.endpoint).getPoller().add(
-                        socket.getSocket().longValue(), false);
+                        socket.getSocket().longValue(),
+                        (processor.getUpgradeInbound().getReadTimeout()));
             }
         }
 

==================================================
UpgradeBioProcessor.java
index e092e70d46..2376a43390 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
@@ -31,6 +31,9 @@ public class UpgradeAprProcessor extends UpgradeProcessor<Long> {
             UpgradeInbound upgradeInbound) {
         super(upgradeInbound);
 
+        Socket.timeoutSet(wrapper.getSocket().longValue(),
+                upgradeInbound.getReadTimeout());
+
         this.socket = wrapper.getSocket().longValue();
     }
 

==================================================
UpgradeInbound.java
index 6611a9bc30..2a7a10beeb 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
@@ -32,6 +32,12 @@ public class UpgradeBioProcessor extends UpgradeProcessor<Socket> {
             UpgradeInbound upgradeInbound) throws IOException {
         super(upgradeInbound);
 
+        int timeout = upgradeInbound.getReadTimeout();
+        if (timeout < 0) {
+            timeout = 0;
+        }
+        wrapper.getSocket().setSoTimeout(timeout);
+
         this.inputStream = wrapper.getSocket().getInputStream();
         this.outputStream = wrapper.getSocket().getOutputStream();
     }

==================================================
UpgradeNioProcessor.java
index 70b9c99a56..3e9e60b77a 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeInbound.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeInbound.java
@@ -33,4 +33,12 @@ public interface UpgradeInbound {
     SocketState onData() throws IOException;
 
     void setUpgradeOutbound(UpgradeOutbound upgradeOutbound);
+
+    /**
+     * Allow the upgraded protocol to define the read timeout to be used with
+     * the upgraded connection.
+     *
+     * @return  The read timeout in milliseconds or -1 for infinite
+     */
+    int getReadTimeout();
 }

==================================================
AprEndpoint.java
index 18508e498b..dfce0a86a7 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java
@@ -36,6 +36,8 @@ public class UpgradeNioProcessor extends UpgradeProcessor<NioChannel> {
             UpgradeInbound upgradeInbound, NioSelectorPool pool) {
         super(upgradeInbound);
 
+        wrapper.setTimeout(upgradeInbound.getReadTimeout());
+
         this.nioChannel = wrapper.getSocket();
         this.pool = pool;
         this.maxRead = nioChannel.getBufHandler().getReadBuffer().capacity();

==================================================
