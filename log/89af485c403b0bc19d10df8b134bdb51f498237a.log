89af485c403b0bc19d10df8b134bdb51f498237a
==================================================
Introduce a new method CoyoteInputStream.read(ByteBuffer).
==================================================
Violeta Georgieva
==================================================
Thu Sep 8 11:43:32 2016 +0000
==================================================
CoyoteInputStream.java
Introduce a new method CoyoteInputStream.read(ByteBuffer).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1759785 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InputBuffer.java
index ce7a50dc09..8c31bea3c3 100644
--- a/java/org/apache/catalina/connector/CoyoteInputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteInputStream.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.connector;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
@@ -184,6 +185,47 @@ public class CoyoteInputStream extends ServletInputStream {
     }
 
 
+    /**
+     * Transfers bytes from the buffer to the specified ByteBuffer. After the
+     * operation the position of the ByteBuffer will be returned to the one
+     * before the operation, the limit will be the position incremented by
+     * the number of the transfered bytes.
+     *
+     * @param to the ByteBuffer into which bytes are to be written.
+     * @return an integer specifying the actual number of bytes read, or -1 if
+     *         the end of the stream is reached
+     * @throws IOException if an input or output exception has occurred
+     */
+    public int read(final ByteBuffer b) throws IOException {
+        checkNonBlockingRead();
+
+        if (SecurityUtil.isPackageProtectionEnabled()) {
+            try {
+                Integer result = AccessController
+                        .doPrivileged(new PrivilegedExceptionAction<Integer>() {
+
+                            @Override
+                            public Integer run() throws IOException {
+                                Integer integer = Integer.valueOf(ib.read(b));
+                                return integer;
+                            }
+
+                        });
+                return result.intValue();
+            } catch (PrivilegedActionException pae) {
+                Exception e = pae.getException();
+                if (e instanceof IOException) {
+                    throw (IOException) e;
+                } else {
+                    throw new RuntimeException(e.getMessage(), e);
+                }
+            }
+        } else {
+            return ib.read(b);
+        }
+    }
+
+
     @Override
     public int readLine(byte[] b, int off, int len) throws IOException {
         return super.readLine(b, off, len);

==================================================
ByteChunk.java
index 01ea58748b..e982ff6cc5 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -18,6 +18,7 @@ package org.apache.catalina.connector;
 
 import java.io.IOException;
 import java.io.Reader;
+import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
@@ -337,6 +338,26 @@ public class InputBuffer extends Reader
     }
 
 
+    /**
+     * Transfers bytes from the buffer to the specified ByteBuffer. After the
+     * operation the position of the ByteBuffer will be returned to the one
+     * before the operation, the limit will be the position incremented by
+     * the number of the transfered bytes.
+     *
+     * @param to the ByteBuffer into which bytes are to be written.
+     * @return an integer specifying the actual number of bytes read, or -1 if
+     *         the end of the stream is reached
+     * @throws IOException if an input or output exception has occurred
+     */
+    public int read(ByteBuffer b) throws IOException {
+        if (closed) {
+            throw new IOException(sm.getString("inputBuffer.streamClosed"));
+        }
+
+        return bb.substract(b);
+    }
+
+
     // ------------------------------------------------- Chars Handling Methods
 
 

==================================================
TestCoyoteInputStream.java
index 949b358fb3..480268ca13 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -466,6 +466,30 @@ public final class ByteChunk implements Cloneable, Serializable {
     }
 
 
+    /**
+     * Transfers bytes from the buffer to the specified ByteBuffer. After the
+     * operation the position of the ByteBuffer will be returned to the one
+     * before the operation, the limit will be the position incremented by
+     * the number of the transfered bytes.
+     *
+     * @param to the ByteBuffer into which bytes are to be written.
+     * @return an integer specifying the actual number of bytes read, or -1 if
+     *         the end of the stream is reached
+     * @throws IOException if an input or output exception has occurred
+     */
+    public int substract(ByteBuffer to) throws IOException {
+        if (checkEof()) {
+            return -1;
+        }
+        int n = Math.min(to.remaining(), getLength());
+        to.put(buff, start, n);
+        to.limit(to.position());
+        to.position(to.position() - n);
+        start += n;
+        return n;
+    }
+
+
     private boolean checkEof() throws IOException {
         if ((end - start) == 0) {
             if (in == null) {

==================================================
