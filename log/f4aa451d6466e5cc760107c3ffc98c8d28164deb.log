f4aa451d6466e5cc760107c3ffc98c8d28164deb
==================================================
Updated the generated code after r899450
==================================================
Mark Emlyn
==================================================
Thu Jan 14 22:45:02 2010 +0000
==================================================
ELParser.java
Updated the generated code after r899450

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@899451 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELParserTreeConstants.java
index a3aac6c315..e4e260de41 100644
--- a/java/org/apache/el/parser/ELParser.java
+++ b/java/org/apache/el/parser/ELParser.java
@@ -1109,40 +1109,64 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
  * MethodParameters
  */
   final public void MethodParameters() throws ParseException {
-    jj_consume_token(LPAREN);
-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
-    case INTEGER_LITERAL:
-    case FLOATING_POINT_LITERAL:
-    case STRING_LITERAL:
-    case TRUE:
-    case FALSE:
-    case NULL:
-    case LPAREN:
-    case NOT0:
-    case NOT1:
-    case EMPTY:
-    case MINUS:
-    case IDENTIFIER:
-      Expression();
-      label_10:
-      while (true) {
-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
-        case COMMA:
-          ;
-          break;
-        default:
-          jj_la1[28] = jj_gen;
-          break label_10;
-        }
-        jj_consume_token(COMMA);
+                                             /*@bgen(jjtree) MethodParameters */
+  AstMethodParameters jjtn000 = new AstMethodParameters(JJTMETHODPARAMETERS);
+  boolean jjtc000 = true;
+  jjtree.openNodeScope(jjtn000);
+    try {
+      jj_consume_token(LPAREN);
+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
+      case INTEGER_LITERAL:
+      case FLOATING_POINT_LITERAL:
+      case STRING_LITERAL:
+      case TRUE:
+      case FALSE:
+      case NULL:
+      case LPAREN:
+      case NOT0:
+      case NOT1:
+      case EMPTY:
+      case MINUS:
+      case IDENTIFIER:
         Expression();
+        label_10:
+        while (true) {
+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
+          case COMMA:
+            ;
+            break;
+          default:
+            jj_la1[28] = jj_gen;
+            break label_10;
+          }
+          jj_consume_token(COMMA);
+          Expression();
+        }
+        break;
+      default:
+        jj_la1[29] = jj_gen;
+        ;
+      }
+      jj_consume_token(RPAREN);
+    } catch (Throwable jjte000) {
+      if (jjtc000) {
+        jjtree.clearNodeScope(jjtn000);
+        jjtc000 = false;
+      } else {
+        jjtree.popNode();
+      }
+      if (jjte000 instanceof RuntimeException) {
+        {if (true) throw (RuntimeException)jjte000;}
+      }
+      if (jjte000 instanceof ParseException) {
+        {if (true) throw (ParseException)jjte000;}
+      }
+      {if (true) throw (Error)jjte000;}
+    } finally {
+      if (jjtc000) {
+        jjtree.closeNodeScope(jjtn000, true);
       }
-      break;
-    default:
-      jj_la1[29] = jj_gen;
-      ;
     }
-    jj_consume_token(RPAREN);
   }
 
 /*

==================================================
