6b1439a4ef9a3ad04099ec6ae62da11a72e50354
==================================================
Implement non-backwards compatible change to the coercion rules.
==================================================
Mark Emlyn
==================================================
Tue Jul 16 23:01:27 2013 +0000
==================================================
ELSupport.java
Implement non-backwards compatible change to the coercion rules.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503937 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstAnd.java
index 952fab3720..b76a66b21e 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -21,6 +21,8 @@ import java.beans.PropertyEditor;
 import java.beans.PropertyEditorManager;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
@@ -40,6 +42,32 @@ public class ELSupport {
 
     private static final Long ZERO = Long.valueOf(0L);
 
+    private static final boolean IS_SECURITY_ENABLED =
+            (System.getSecurityManager() != null);
+
+    protected static final boolean COERCE_TO_ZERO;
+
+    static {
+        if (IS_SECURITY_ENABLED) {
+            COERCE_TO_ZERO = AccessController.doPrivileged(
+                    new PrivilegedAction<Boolean>(){
+                        @Override
+                        public Boolean run() {
+                            return Boolean.valueOf(System.getProperty(
+                                    "org.apache.el.parser.COERCE_TO_ZERO",
+                                    "false"));
+                        }
+
+                    }
+            ).booleanValue();
+        } else {
+            COERCE_TO_ZERO = Boolean.valueOf(System.getProperty(
+                    "org.apache.el.parser.COERCE_TO_ZERO",
+                    "false")).booleanValue();
+        }
+    }
+
+
     /**
      * Compare two objects, after coercing to the same type if appropriate.
      *
@@ -147,7 +175,7 @@ public class ELSupport {
             Long l1 = (Long) coerceToNumber(obj1, Long.class);
             return l0.equals(l1);
         } else if (obj0 instanceof Boolean || obj1 instanceof Boolean) {
-            return coerceToBoolean(obj0).equals(coerceToBoolean(obj1));
+            return coerceToBoolean(obj0, false).equals(coerceToBoolean(obj1, false));
         } else if (obj0.getClass().isEnum()) {
             return obj0.equals(coerceToEnum(obj1, obj0.getClass()));
         } else if (obj1.getClass().isEnum()) {
@@ -195,8 +223,15 @@ public class ELSupport {
      * @return the Boolean value of the object
      * @throws ELException if object is not Boolean or String
      */
-    public static final Boolean coerceToBoolean(final Object obj)
-            throws ELException {
+    public static final Boolean coerceToBoolean(final Object obj,
+            boolean primitive) throws ELException {
+
+        if (!COERCE_TO_ZERO && !primitive) {
+            if (obj == null) {
+                return null;
+            }
+        }
+
         if (obj == null || "".equals(obj)) {
             return Boolean.FALSE;
         }
@@ -211,7 +246,7 @@ public class ELSupport {
                 obj, obj.getClass(), Boolean.class));
     }
 
-    public static final Character coerceToCharacter(final Object obj)
+    private static final Character coerceToCharacter(final Object obj)
             throws ELException {
         if (obj == null || "".equals(obj)) {
             return Character.valueOf((char) 0);
@@ -279,6 +314,13 @@ public class ELSupport {
 
     public static final Number coerceToNumber(final Object obj,
             final Class<?> type) throws ELException {
+
+        if (!COERCE_TO_ZERO) {
+            if (obj == null && !type.isPrimitive()) {
+                return null;
+            }
+        }
+
         if (obj == null || "".equals(obj)) {
             return coerceToNumber(ZERO, type);
         }
@@ -388,10 +430,19 @@ public class ELSupport {
 
     public static final Object coerceToType(final Object obj,
             final Class<?> type) throws ELException {
+
         if (type == null || Object.class.equals(type) ||
                 (obj != null && type.isAssignableFrom(obj.getClass()))) {
             return obj;
         }
+
+        if (!COERCE_TO_ZERO) {
+            if (obj == null && !type.isPrimitive() &&
+                    !String.class.isAssignableFrom(type)) {
+                return null;
+            }
+        }
+
         if (String.class.equals(type)) {
             return coerceToString(obj);
         }
@@ -402,7 +453,7 @@ public class ELSupport {
             return coerceToCharacter(obj);
         }
         if (Boolean.class.equals(type) || Boolean.TYPE == type) {
-            return coerceToBoolean(obj);
+            return coerceToBoolean(obj, Boolean.TYPE == type);
         }
         if (type.isEnum()) {
             return coerceToEnum(obj, type);

==================================================
AstChoice.java
index 1a8fc3e9d1..58e151ac0e 100644
--- a/java/org/apache/el/parser/AstAnd.java
+++ b/java/org/apache/el/parser/AstAnd.java
@@ -36,12 +36,12 @@ public final class AstAnd extends BooleanNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = children[0].getValue(ctx);
-        Boolean b = coerceToBoolean(obj);
+        Boolean b = coerceToBoolean(obj, true);
         if (!b.booleanValue()) {
             return b;
         }
         obj = children[1].getValue(ctx);
-        b = coerceToBoolean(obj);
+        b = coerceToBoolean(obj, true);
         return b;
     }
 }

==================================================
AstNot.java
index 4c1495d3be..91279845c4 100644
--- a/java/org/apache/el/parser/AstChoice.java
+++ b/java/org/apache/el/parser/AstChoice.java
@@ -43,7 +43,7 @@ public final class AstChoice extends SimpleNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);
-        Boolean b0 = coerceToBoolean(obj0);
+        Boolean b0 = coerceToBoolean(obj0, true);
         return this.children[((b0.booleanValue() ? 1 : 2))].getValue(ctx);
     }
 }

==================================================
AstOr.java
index 2dd393b17e..5d037f433b 100644
--- a/java/org/apache/el/parser/AstNot.java
+++ b/java/org/apache/el/parser/AstNot.java
@@ -42,7 +42,7 @@ public final class AstNot extends SimpleNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);
-        Boolean b = coerceToBoolean(obj);
+        Boolean b = coerceToBoolean(obj, true);
         return Boolean.valueOf(!b.booleanValue());
     }
 }

==================================================
AstValue.java
index bad6cad6bb..45f0355977 100644
--- a/java/org/apache/el/parser/AstOr.java
+++ b/java/org/apache/el/parser/AstOr.java
@@ -36,12 +36,12 @@ public final class AstOr extends BooleanNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);
-        Boolean b = coerceToBoolean(obj);
+        Boolean b = coerceToBoolean(obj, true);
         if (b.booleanValue()) {
             return b;
         }
         obj = this.children[1].getValue(ctx);
-        b = coerceToBoolean(obj);
+        b = coerceToBoolean(obj, true);
         return b;
     }
 }

==================================================
Stream.java
index 27aad80b31..edda89c2e5 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -21,8 +21,6 @@ package org.apache.el.parser;
 import java.lang.reflect.Array;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 
 import javax.el.ELException;
 import javax.el.ELResolver;
@@ -42,31 +40,6 @@ import org.apache.el.util.ReflectionUtil;
  */
 public final class AstValue extends SimpleNode {
 
-    private static final boolean IS_SECURITY_ENABLED =
-        (System.getSecurityManager() != null);
-
-    protected static final boolean COERCE_TO_ZERO;
-
-    static {
-        if (IS_SECURITY_ENABLED) {
-            COERCE_TO_ZERO = AccessController.doPrivileged(
-                    new PrivilegedAction<Boolean>(){
-                        @Override
-                        public Boolean run() {
-                            return Boolean.valueOf(System.getProperty(
-                                    "org.apache.el.parser.COERCE_TO_ZERO",
-                                    "true"));
-                        }
-
-                    }
-            ).booleanValue();
-        } else {
-            COERCE_TO_ZERO = Boolean.valueOf(System.getProperty(
-                    "org.apache.el.parser.COERCE_TO_ZERO",
-                    "true")).booleanValue();
-        }
-    }
-
     protected static class Target {
         protected Object base;
 
@@ -213,8 +186,7 @@ public final class AstValue extends SimpleNode {
 
         // coerce to the expected type
         Class<?> targetClass = resolver.getType(ctx, t.base, t.property);
-        if (COERCE_TO_ZERO == true
-                || !isAssignable(value, targetClass)) {
+        if (!isAssignable(value, targetClass)) {
             resolver.setValue(ctx, t.base, t.property,
                     ELSupport.coerceToType(value, targetClass));
         } else {

==================================================
TestELSupport.java
index 77afb348e1..bbcdc22e7e 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -47,8 +47,8 @@ public class Stream {
             protected void findNext() {
                 while (iterator.hasNext()) {
                     Object obj = iterator.next();
-                    Boolean filter = ELSupport.coerceToBoolean(le.invoke(obj));
-                    if (filter != null && filter.booleanValue()) {
+                    if (ELSupport.coerceToBoolean(le.invoke(obj),
+                            true).booleanValue()) {
                         next = obj;
                         foundNext = true;
                         break;

==================================================
