e3d0f0d051b5b9190671187377e0e0c756a73405
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60431
==================================================
Mark Thomas
==================================================
Thu Dec 1 15:29:28 2016 +0000
==================================================
AstFunction.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60431
Improve handling of varargs in UEL expressions.
Based on a patch by Ben.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1772229 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestELEvaluation.java
index 8f63999da5..09ac424165 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -163,13 +163,18 @@ public final class AstFunction extends SimpleNode {
         Object result = null;
         int inputParameterCount = parameters.jjtGetNumChildren();
         int methodParameterCount = paramTypes.length;
-        if (inputParameterCount > 0) {
+        if (inputParameterCount == 0 && methodParameterCount == 1 && m.isVarArgs()) {
+            params = new Object[] { null };
+        } else if (inputParameterCount > 0) {
             params = new Object[methodParameterCount];
             try {
                 for (int i = 0; i < methodParameterCount; i++) {
                     if (m.isVarArgs() && i == methodParameterCount - 1) {
                         if (inputParameterCount < methodParameterCount) {
-                            params[i] = null;
+                            params[i] = new Object[] { null };
+                        } else if (inputParameterCount == methodParameterCount &&
+                                paramTypes[i].isArray()) {
+                            params[i] = parameters.jjtGetChild(i).getValue(ctx);
                         } else {
                             Object[] varargs =
                                     new Object[inputParameterCount - methodParameterCount + 1];
@@ -179,12 +184,11 @@ public final class AstFunction extends SimpleNode {
                                 varargs[j-i] = coerceToType(ctx, varargs[j-i], target);
                             }
                             params[i] = varargs;
-                            params[i] = coerceToType(ctx, params[i], paramTypes[i]);
                         }
                     } else {
                         params[i] = parameters.jjtGetChild(i).getValue(ctx);
-                        params[i] = coerceToType(ctx, params[i], paramTypes[i]);
                     }
+                    params[i] = coerceToType(ctx, params[i], paramTypes[i]);
                 }
             } catch (ELException ele) {
                 throw new ELException(MessageFactory.get("error.function", this

==================================================
TestELInJsp.java
index 8219fc831f..0285338140 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -231,6 +231,30 @@ public class TestELEvaluation {
         Assert.assertEquals("$2", evaluateExpression("$#{1+1}"));
     }
 
+    @Test
+    public void testBug60431a() {
+        Assert.assertEquals("OK", evaluateExpression("${fn:concat('O','K')}"));
+    }
+
+    @Test
+    public void testBug60431b() {
+        Assert.assertEquals("OK", evaluateExpression("${fn:concat(fn:toArray('O','K'))}"));
+    }
+
+    @Test
+    public void testBug60431c() {
+        Assert.assertEquals("", evaluateExpression("${fn:concat()}"));
+    }
+
+    @Test
+    public void testBug60431d() {
+        Assert.assertEquals("OK", evaluateExpression("${fn:concat2('OK')}"));
+    }
+
+    @Test
+    public void testBug60431e() {
+        Assert.assertEquals("RUOK", evaluateExpression("${fn:concat2('RU', fn:toArray('O','K'))}"));
+    }
 
     // ************************************************************************
 

==================================================
TesterFunctions.java
index 3acf608db6..3413e5f04e 100644
--- a/test/org/apache/el/TestELInJsp.java
+++ b/test/org/apache/el/TestELInJsp.java
@@ -499,6 +499,17 @@ public class TestELInJsp extends TomcatBaseTest {
     }
 
 
+    @Test
+    public void testBug60431() throws Exception {
+        getTomcatInstanceTestWebapp(false, true);
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() + "/test/bug6nnnn/bug60431.jsp");
+        String result = res.toString();
+        assertEcho(result, "01-OK");
+        assertEcho(result, "02-OK");
+    }
+
+
     // Assertion for text contained with <p></p>, e.g. printed by tags:echo
     private static void assertEcho(String result, String expected) {
         Assert.assertTrue(result, result.indexOf("<p>" + expected + "</p>") > 0);

==================================================
