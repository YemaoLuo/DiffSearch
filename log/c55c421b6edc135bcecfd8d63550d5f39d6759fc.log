c55c421b6edc135bcecfd8d63550d5f39d6759fc
==================================================
Remove unused code
==================================================
Mark Emlyn
==================================================
Wed Aug 8 21:17:59 2012 +0000
==================================================
ManifestResource.java
Remove unused code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1370972 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RequestUtil.java
index 70d525693c..1f5657517e 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -99,19 +99,6 @@ public class ManifestResource {
         return (requiredExtensions != null) ? requiredExtensions.size() : 0;
     }
 
-    /**
-     * Convenience method to check if this <code>ManifestResource</code>
-     * has an requires extensions.
-     *
-     * @return true if required extensions are present
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public boolean requiresExtensions() {
-        return (requiredExtensions != null) ? true : false;
-    }
-
     /**
      * Returns <code>true</code> if all required extension dependencies
      * have been meet for this <code>ManifestResource</code> object.

==================================================
Strftime.java
index ae896aa535..ef84ed8062 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -188,22 +188,6 @@ public final class RequestUtil {
     }
 
 
-    /**
-     * Decode and return the specified URL-encoded byte array. It is assumed
-     * the string is not a query string.
-     *
-     * @param bytes The url-encoded byte array
-     * @exception IllegalArgumentException if a '%' character is not followed
-     * by a valid 2-digit hexadecimal number
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public static String URLDecode(byte[] bytes) {
-        return URLDecode(bytes, null);
-    }
-
-
     /**
      * Decode and return the specified URL-encoded byte array. It is assumed
      * the string is not a query string.

==================================================
StringParser.java
index 3cb731b20c..17c0bb1298 100644
--- a/java/org/apache/catalina/util/Strftime.java
+++ b/java/org/apache/catalina/util/Strftime.java
@@ -107,19 +107,6 @@ public class Strftime {
     }
 
 
-    /**
-     * Create an instance of this date formatting class
-     *
-     * @see #Strftime( String, Locale )
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public Strftime( String origFormat ) {
-        String convertedFormat = convertDateFormat( origFormat );
-        simpleDateFormat = new SimpleDateFormat( convertedFormat );
-    }
-
     /**
      * Create an instance of this date formatting class
      *

==================================================
XMLWriter.java
index a6e7d3e1dd..33e4926af9 100644
--- a/java/org/apache/catalina/util/StringParser.java
+++ b/java/org/apache/catalina/util/StringParser.java
@@ -114,22 +114,7 @@ public final class StringParser {
      * Return the length of the string we are parsing.
      */
     public int getLength() {
-
-        return (this.length);
-
-    }
-
-
-    /**
-     * Return the String we are currently parsing.
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public String getString() {
-
-        return (this.string);
-
+        return length;
     }
 
 
@@ -150,7 +135,6 @@ public final class StringParser {
             chars = new char[0];
         }
         reset();
-
     }
 
 
@@ -165,27 +149,6 @@ public final class StringParser {
 
         if (index < length)
             index++;
-
-    }
-
-
-    /**
-     * Extract and return a substring that starts at the specified position,
-     * and extends to the end of the string being parsed.  If this is not
-     * possible, a zero-length string is returned.
-     *
-     * @param start Starting index, zero relative, inclusive
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public String extract(int start) {
-
-        if ((start < 0) || (start >= length))
-            return ("");
-        else
-            return (string.substring(start));
-
     }
 
 
@@ -224,125 +187,11 @@ public final class StringParser {
     }
 
 
-    /**
-     * Return the index of the next occurrence of a non-whitespace character,
-     * or the index of the character after the last position of the string
-     * if no more non-whitespace characters are found.  The current
-     * parsing position is updated to the returned value.
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public int findText() {
-
-        while ((index < length) && isWhite(chars[index]))
-            index++;
-        return (index);
-
-    }
-
-
-    /**
-     * Return the index of the next occurrence of a whitespace character,
-     * or the index of the character after the last position of the string
-     * if no more whitespace characters are found.  The current parsing
-     * position is updated to the returned value.
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public int findWhite() {
-
-        while ((index < length) && !isWhite(chars[index]))
-            index++;
-        return (index);
-
-    }
-
-
     /**
      * Reset the current state of the parser to the beginning of the
      * current string being parsed.
      */
     public void reset() {
-
         index = 0;
-
-    }
-
-
-    /**
-     * Advance the current parsing position while it is pointing at the
-     * specified character, or until it moves past the end of the string.
-     * Return the final value.
-     *
-     * @param ch Character to be skipped
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public int skipChar(char ch) {
-
-        while ((index < length) && (ch == chars[index]))
-            index++;
-        return (index);
-
-    }
-
-
-    /**
-     * Advance the current parsing position while it is pointing at a
-     * non-whitespace character, or until it moves past the end of the string.
-     * Return the final value.
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public int skipText() {
-
-        while ((index < length) && !isWhite(chars[index]))
-            index++;
-        return (index);
-
     }
-
-
-    /**
-     * Advance the current parsing position while it is pointing at a
-     * whitespace character, or until it moves past the end of the string.
-     * Return the final value.
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    public int skipWhite() {
-
-        while ((index < length) && isWhite(chars[index]))
-            index++;
-        return (index);
-
-    }
-
-
-    // ------------------------------------------------------ Protected Methods
-
-
-    /**
-     * Is the specified character considered to be whitespace?
-     *
-     * @param ch Character to be checked
-     *
-     * @deprecated  Unused - will be removed in 8.0.x
-     */
-    @Deprecated
-    protected boolean isWhite(char ch) {
-
-        if ((ch == ' ') || (ch == '\t') || (ch == '\r') || (ch == '\n'))
-            return (true);
-        else
-            return (false);
-
-    }
-
-
 }

==================================================
