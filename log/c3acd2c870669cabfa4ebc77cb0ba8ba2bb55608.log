c3acd2c870669cabfa4ebc77cb0ba8ba2bb55608
==================================================
Code clean-up
==================================================
Mark Emlyn
==================================================
Thu Aug 16 19:51:27 2012 +0000
==================================================
AbstractHttp11Processor.java
Code clean-up
 - Remove unnecessary warnings
 - Java 7 <>
 - UCDetector use of final

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1374018 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 6bee079a30..2556897440 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -811,7 +811,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             InputFilter savedBody = new SavedRequestInputFilter(body);
             savedBody.setRequest(request);
 
-            @SuppressWarnings("unchecked")
             AbstractInputBuffer<S> internalBuffer = (AbstractInputBuffer<S>)
                 request.getInputBuffer();
             internalBuffer.addActiveFilter(savedBody);

==================================================
Http11AprProcessor.java
index 62cf74bc0d..5f4d7dc3c3 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -177,7 +177,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol {
     }
 
     protected NpnHandler<S> npnHandler;
-    @SuppressWarnings("unchecked")
     public void setNpnHandler(String impl) {
         try {
             Class<?> c = Class.forName(impl);

==================================================
Http11NioProcessor.java
index 1952b8d717..373287b8e5 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -78,13 +78,13 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     /**
      * Input.
      */
-    protected InternalAprInputBuffer inputBuffer = null;
+    protected final InternalAprInputBuffer inputBuffer;
 
 
     /**
      * Output.
      */
-    protected InternalAprOutputBuffer outputBuffer = null;
+    protected final InternalAprOutputBuffer outputBuffer;
 
 
     /**

==================================================
Http11Processor.java
index ed90604264..690f471cf4 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -85,13 +85,13 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     /**
      * Input.
      */
-    protected InternalNioInputBuffer inputBuffer = null;
+    protected final InternalNioInputBuffer inputBuffer;
 
 
     /**
      * Output.
      */
-    protected InternalNioOutputBuffer outputBuffer = null;
+    protected final InternalNioOutputBuffer outputBuffer;
 
 
     /**
@@ -105,11 +105,9 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
      */
     protected SocketWrapper<NioChannel> socket = null;
 
-    protected volatile boolean wantOnWritePossible = false;
 
     // --------------------------------------------------------- Public Methods
 
-
     /**
      * Process pipelined HTTP requests using the specified input and output
      * streams.
@@ -382,7 +380,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     public void recycleInternal() {
         socket = null;
         sendfileData = null;
-        wantOnWritePossible = false;
     }
 
 
@@ -611,7 +608,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                     canWrite.set(true);
                 } else {
                     canWrite.set(false);
-                    wantOnWritePossible = true;
     }
             } else {
                 throw new IllegalStateException("Calling canWrite asynchronously is illegal.");

==================================================
InternalAprInputBuffer.java
index 3c82b576d8..765620c3b8 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -70,13 +70,13 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
     /**
      * Input.
      */
-    protected InternalInputBuffer inputBuffer = null;
+    protected final InternalInputBuffer inputBuffer ;
 
 
     /**
      * Output.
      */
-    protected InternalOutputBuffer outputBuffer = null;
+    protected final InternalOutputBuffer outputBuffer;
 
 
     /**

==================================================
InternalAprOutputBuffer.java
index 1bc8e01955..7dc9d80e94 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -80,7 +80,7 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
     /**
      * Direct byte buffer used to perform actual reading.
      */
-    private ByteBuffer bbuf;
+    private final ByteBuffer bbuf;
 
 
     /**

==================================================
InternalNioInputBuffer.java
index 295fd5cca5..e27b38612c 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -80,7 +80,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     /**
      * Direct byte buffer used for writing.
      */
-    private ByteBuffer bbuf = null;
+    private final ByteBuffer bbuf;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
InternalNioOutputBuffer.java
index 640e177f18..5f6520550d 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -763,7 +763,7 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
         return HeaderParseStatus.HAVE_MORE_HEADERS;
     }
 
-    private HeaderParseData headerData = new HeaderParseData();
+    private final HeaderParseData headerData = new HeaderParseData();
     public static class HeaderParseData {
         /**
          * When parsing header name: first character of the header.<br />

==================================================
InternalOutputBuffer.java
index c09eb0a66a..81eb0fc807 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -103,11 +103,11 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
     /**
      * Number of bytes last written
      */
-    protected AtomicInteger lastWrite = new AtomicInteger(1);
+    protected final AtomicInteger lastWrite = new AtomicInteger(1);
 
     protected class ByteBufferHolder {
-        private ByteBuffer buf;
-        private AtomicBoolean flipped;
+        private final ByteBuffer buf;
+        private final AtomicBoolean flipped;
         public ByteBufferHolder(ByteBuffer buf, boolean flipped) {
            this.buf = buf;
            this.flipped = new AtomicBoolean(flipped);
@@ -428,7 +428,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
         if (blocking)
             bufferedWrite = null;
         else
-            bufferedWrite = new LinkedBlockingDeque<ByteBufferHolder>();
+            bufferedWrite = new LinkedBlockingDeque<>();
 }
 
     public void setBufferedWriteSize(int bufferedWriteSize) {

==================================================
