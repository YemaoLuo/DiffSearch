a946b729227a163e45d406b0fbc5395b94fd1a51
==================================================
Code clean-up.
==================================================
Mark Emlyn
==================================================
Fri Sep 17 14:40:05 2010 +0000
==================================================
Http11NioProtocol.java
Code clean-up.
Align BIO and NIO to make Async refactoring easier

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@998153 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Protocol.java
index 2f99de38ae..bf1f60e1b9 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -340,10 +340,8 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
 
         @Override
         public SocketState process(NioChannel socket) {
-            Http11NioProcessor processor = null;
+            Http11NioProcessor processor = connections.remove(socket);
             try {
-                processor = connections.remove(socket);
-                
                 if (processor == null) {
                     processor = recycledProcessors.poll();
                 }
@@ -351,16 +349,17 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                     processor = createProcessor();
                 }
 
-                if (proto.endpoint.isSSLEnabled() && (proto.sslImplementation != null)) {
-                    if (socket instanceof SecureNioChannel) {
-                        SecureNioChannel ch = (SecureNioChannel)socket;
-                        processor.setSslSupport(proto.sslImplementation.getSSLSupport(ch.getSslEngine().getSession()));
-                    }else processor.setSslSupport(null);
+                if (proto.isSSLEnabled() &&
+                        (proto.sslImplementation != null)
+                        && (socket instanceof SecureNioChannel)) {
+                    SecureNioChannel ch = (SecureNioChannel)socket;
+                    processor.setSslSupport(
+                            proto.sslImplementation.getSSLSupport(
+                                    ch.getSslEngine().getSession()));
                 } else {
                     processor.setSslSupport(null);
                 }
 
-
                 SocketState state = processor.process(socket);
                 if (state == SocketState.LONG) {
                     // In the middle of processing a request/response. Keep the
@@ -389,14 +388,12 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
 
             } catch (java.net.SocketException e) {
                 // SocketExceptions are normal
-                Http11NioProtocol.log.debug
-                    (sm.getString
-                     ("http11protocol.proto.socketexception.debug"), e);
+                log.debug(sm.getString(
+                        "http11protocol.proto.socketexception.debug"), e);
             } catch (java.io.IOException e) {
                 // IOExceptions are normal
-                Http11NioProtocol.log.debug
-                    (sm.getString
-                     ("http11protocol.proto.ioexception.debug"), e);
+                log.debug(sm.getString(
+                        "http11protocol.proto.ioexception.debug"), e);
             }
             // Future developers: if you discover any other
             // rare-but-nonfatal exceptions, catch them here, and log as
@@ -405,8 +402,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                 // any other exception or error is odd. Here we log it
                 // with "ERROR" level, so it will show up even on
                 // less-than-verbose logs.
-                Http11NioProtocol.log.error
-                    (sm.getString("http11protocol.proto.error"), e);
+                log.error(sm.getString("http11protocol.proto.error"), e);
             }
             recycledProcessors.offer(processor);
             return SocketState.CLOSED;

==================================================
