6e642a503a582e4fe18adcfc4309b15b3aa5e6ca
==================================================
Fix the Java 8 Javadoc warnings in the tests by removing pointless Javadoc and changing comments with problems to non-Javadoc format
==================================================
Mark Emlyn
==================================================
Wed Oct 29 10:20:09 2014 +0000
==================================================
TestRegistration.java
Fix the Java 8 Javadoc warnings in the tests by removing pointless Javadoc and changing comments with problems to non-Javadoc format

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1635091 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestRealmBase.java
index 409d1d251b..d4c76b6642 100644
--- a/test/org/apache/catalina/mbeans/TestRegistration.java
+++ b/test/org/apache/catalina/mbeans/TestRegistration.java
@@ -141,7 +141,7 @@ public class TestRegistration extends TomcatBaseTest {
         };
     }
 
-    /**
+    /*
      * Test verifying that Tomcat correctly de-registers the MBeans it has
      * registered.
      * @author Marc Guillemot
@@ -252,7 +252,7 @@ public class TestRegistration extends TomcatBaseTest {
         assertEquals("Remaining: " + onames, 0, onames.size());
     }
 
-    /**
+    /*
      * Confirm that, as far as ObjectName is concerned, the order of the key
      * properties is not significant.
      */

==================================================
TestDefaultServlet.java
index b328969cec..1f479cd91a 100644
--- a/test/org/apache/catalina/realm/TestRealmBase.java
+++ b/test/org/apache/catalina/realm/TestRealmBase.java
@@ -637,7 +637,7 @@ public class TestRealmBase {
     }
 
 
-    /**
+    /*
      * This test case covers the special case in section 13.4.1 of the Servlet
      * 3.1 specification for {@link javax.servlet.annotation.HttpConstraint}.
      */

==================================================
TestWebdavServlet.java
index 28b5f72c5a..fb70b56678 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -49,7 +49,7 @@ import org.apache.tomcat.websocket.server.WsContextListener;
 
 public class TestDefaultServlet extends TomcatBaseTest {
 
-    /**
+    /*
      * Test attempting to access special paths (WEB-INF/META-INF) using
      * DefaultServlet.
      */
@@ -89,7 +89,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
     }
 
-    /**
+    /*
      * Verify serving of gzipped resources from context root.
      */
     @Test
@@ -144,7 +144,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
         assertTrue(responseHeaders.contains("Content-Length: " + indexSize));
     }
 
-    /**
+    /*
      * Test https://issues.apache.org/bugzilla/show_bug.cgi?id=50026
      * Verify serving of resources from context root with subpath mapping.
      */
@@ -215,7 +215,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
     }
 
-    /**
+    /*
      * Test https://issues.apache.org/bugzilla/show_bug.cgi?id=50413 Serving a
      * custom error page
      */
@@ -297,7 +297,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
         assertEquals("It is 404.html", client.getResponseBody());
     }
 
-    /**
+    /*
      * Test what happens if a custom 404 page is configured,
      * but its file is actually missing.
      */

==================================================
TestStandardSession.java
index dbfa2a518c..c92efca597 100644
--- a/test/org/apache/catalina/servlets/TestWebdavServlet.java
+++ b/test/org/apache/catalina/servlets/TestWebdavServlet.java
@@ -34,7 +34,7 @@ import org.apache.tomcat.websocket.server.WsContextListener;
 
 public class TestWebdavServlet extends TomcatBaseTest {
 
-    /**
+    /*
      * Test attempting to access special paths (WEB-INF/META-INF) using WebdavServlet
      */
     @Test
@@ -77,7 +77,7 @@ public class TestWebdavServlet extends TomcatBaseTest {
 
     }
 
-    /**
+    /*
      * Test https://issues.apache.org/bugzilla/show_bug.cgi?id=50026
      * Verify protection of special paths with re-mount of web app resource root.
      */

==================================================
Threading.java
index 1d9e4483d8..5d05521d09 100644
--- a/test/org/apache/catalina/session/TestStandardSession.java
+++ b/test/org/apache/catalina/session/TestStandardSession.java
@@ -36,7 +36,7 @@ import org.apache.tomcat.util.buf.ByteChunk;
 
 public class TestStandardSession extends TomcatBaseTest {
 
-    /**
+    /*
      * Test session.invalidate() in a clustered environment.
      */
     @Test

==================================================
LoggingBaseTest.java
index 091f2d50e2..9fbeab8b85 100644
--- a/test/org/apache/catalina/session/Threading.java
+++ b/test/org/apache/catalina/session/Threading.java
@@ -35,7 +35,7 @@ import org.junit.Test;
  */
 public class Threading {
 
-    /**
+    /*
      * {@link FileInputStream#read(byte[])} and related methods are all native
      * methods so it isn't immediately obvious if they are thread-safe or not.
      *

==================================================
TestListener.java
index 423f1265ef..21aa44edc1 100644
--- a/test/org/apache/catalina/startup/LoggingBaseTest.java
+++ b/test/org/apache/catalina/startup/LoggingBaseTest.java
@@ -57,7 +57,7 @@ public abstract class LoggingBaseTest {
     @Rule
     public final TestName testName = new TestName();
 
-    /**
+    /*
      * Helper method that returns the directory where Tomcat build resides. It
      * is used to access resources that are part of default Tomcat deployment.
      * E.g. the examples webapp.
@@ -67,7 +67,7 @@ public abstract class LoggingBaseTest {
                 "output/build"));
     }
 
-    /**
+    /*
      * Helper method that returns the path of the temporary directory used by
      * the test runs. The directory is configured during {@link #setUp()}.
      *

==================================================
TestTomcat.java
index e5a40a0f6a..25edf815a3 100644
--- a/test/org/apache/catalina/startup/TestListener.java
+++ b/test/org/apache/catalina/startup/TestListener.java
@@ -33,7 +33,7 @@ import org.apache.catalina.Context;
 
 public class TestListener extends TomcatBaseTest {
 
-    /**
+    /*
      * Check that a ServletContainerInitializer can install a
      * {@link ServletContextListener} and that it gets initialized.
      * @throws Exception
@@ -50,7 +50,7 @@ public class TestListener extends TomcatBaseTest {
         assertTrue(SCL.initialized);
     }
 
-    /**
+    /*
      * Check that a {@link ServletContextListener} cannot install a
      * {@link ServletContainerInitializer}.
      * @throws Exception

==================================================
TomcatBaseTest.java
index b3d4d8b0b4..2a678ef028 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -170,7 +170,7 @@ public class TestTomcat extends TomcatBaseTest {
     }
 
 
-    /**
+    /*
      * Start tomcat with a single context and one
      * servlet - all programmatic, no server.xml or
      * web.xml used.
@@ -259,7 +259,7 @@ public class TestTomcat extends TomcatBaseTest {
      }
 
 
-    /**
+    /*
      * Test for enabling JNDI.
      */
     @Test
@@ -290,7 +290,7 @@ public class TestTomcat extends TomcatBaseTest {
         assertEquals("Hello, Tomcat User", res.toString());
     }
 
-    /**
+    /*
      * Test for enabling JNDI and using global resources.
      */
     @Test
@@ -327,7 +327,7 @@ public class TestTomcat extends TomcatBaseTest {
     }
 
 
-    /**
+    /*
      * Test for https://issues.apache.org/bugzilla/show_bug.cgi?id=47866
      */
     @Test

==================================================
TesterUtil.java
index 2808317abd..fda1fbd81b 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -64,21 +64,21 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
 
     public static final String TEMP_DIR = System.getProperty("java.io.tmpdir");
 
-    /**
+    /*
      * Make Tomcat instance accessible to sub-classes.
      */
     public Tomcat getTomcatInstance() {
         return tomcat;
     }
 
-    /**
+    /*
      * Sub-classes need to know port so they can connect
      */
     public int getPort() {
         return tomcat.getConnector().getLocalPort();
     }
 
-    /**
+    /*
      * Sub-classes may want to check, whether an AccessLogValve is active
      */
     public boolean isAccessLogEnabled() {
@@ -196,7 +196,7 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
     }
 
 
-    /**
+    /*
      *  Wrapper for getting the response.
      */
     public static ByteChunk getUrl(String path) throws IOException {

==================================================
IntrospectionUtils.java
index 1a9a409ef6..54a8db3957 100644
--- a/test/org/apache/catalina/tribes/TesterUtil.java
+++ b/test/org/apache/catalina/tribes/TesterUtil.java
@@ -29,7 +29,7 @@ public class TesterUtil {
     }
 
 
-    /**
+    /*
      * Configures a set of channels to use a random domain. Use to ensure that
      * multiple instance of the test suite do not interfere when running on the
      * same machine. This may happen in a CI system or when a developer is

==================================================
MapDemo.java
index 2d1bc599cc..62f5672aae 100644
--- a/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
+++ b/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
@@ -32,7 +32,7 @@ public final class IntrospectionUtils {
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( IntrospectionUtils.class );
 
-    /**
+    /*
      * Find a method with the right name If found, call the method ( if param is
      * int or boolean we'll convert value to the right type before) - that means
      * you can have setDebug(1).
@@ -178,7 +178,7 @@ public final class IntrospectionUtils {
         return false;
     }
 
-    /**
+    /*
      * Reverse of Introspector.decapitalize
      */
     public static String capitalize(String name) {

==================================================
TestErrorReportValve.java
index e7150e0fc3..3993954e99 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -131,11 +131,6 @@ public class MapDemo implements ChannelListener, MembershipListener{
                            ChannelCreator.usage());
     }
 
-    /**
-     * Main method
-     * @param args
-     * @throws Exception
-     */
     @SuppressWarnings("unused")
     public static void main(String[] args) throws Exception {
         long start = System.currentTimeMillis();
@@ -494,7 +489,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
             System.out.println("--------------------------");
         }
 
-        /**
+        /*
          * Create the GUI and show it.  For thread safety,
          * this method should be invoked from the
          * event-dispatching thread.

==================================================
SimpleAjpClient.java
index 025eccb508..ee049c01e3 100644
--- a/test/org/apache/catalina/valves/TestErrorReportValve.java
+++ b/test/org/apache/catalina/valves/TestErrorReportValve.java
@@ -134,7 +134,7 @@ public class TestErrorReportValve extends TomcatBaseTest {
     }
 
 
-    /**
+    /*
      * Custom error/status codes should not result in a blank response.
      */
     @Test

==================================================
TestGzipOutputFilter.java
index 99227cd1f5..ab6909900a 100644
--- a/test/org/apache/coyote/ajp/SimpleAjpClient.java
+++ b/test/org/apache/coyote/ajp/SimpleAjpClient.java
@@ -63,7 +63,7 @@ public class SimpleAjpClient {
         socket = null;
     }
 
-    /**
+    /*
      * Create a message to request the given URL.
      */
     public TesterAjpMessage createForwardMessage(String url) {
@@ -126,7 +126,7 @@ public class SimpleAjpClient {
     }
 
 
-    /**
+    /*
      * Sends an TesterAjpMessage to the server and returns the response message.
      */
     public TesterAjpMessage sendMessage(TesterAjpMessage headers)
@@ -148,7 +148,7 @@ public class SimpleAjpClient {
         return readMessage();
     }
 
-    /**
+    /*
      * Tests the connection to the server and returns the CPONG response.
      */
     public TesterAjpMessage cping() throws IOException {
@@ -158,7 +158,7 @@ public class SimpleAjpClient {
         return readMessage();
     }
 
-    /**
+    /*
      * Reads a message from the server.
      */
     public TesterAjpMessage readMessage() throws IOException {

==================================================
TestValueExpressionImpl.java
index 6f33c579d0..a57c297cff 100644
--- a/test/org/apache/coyote/http11/TestGzipOutputFilter.java
+++ b/test/org/apache/coyote/http11/TestGzipOutputFilter.java
@@ -34,7 +34,7 @@ import org.apache.tomcat.util.buf.ByteChunk;
  */
 public class TestGzipOutputFilter {
 
-    /**
+    /*
      * Test the interaction betwen gzip and flushing. The idea is to: 1. create
      * a internal output buffer, response, and attach an active gzipoutputfilter
      * to the output buffer 2. set the output stream of the internal buffer to

==================================================
TestWarDirContext.java
index f936d65759..0857091c16 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -198,7 +198,7 @@ public class TestValueExpressionImpl {
     }
 
 
-    /**
+    /*
      * Test returning an empty list as a bean property.
      */
     @Test
@@ -221,7 +221,7 @@ public class TestValueExpressionImpl {
     }
 
 
-    /**
+    /*
      * Test using list directly as variable.
      */
     @Test

==================================================
TestByteChunk.java
index 52a53c3fdb..922d423428 100644
--- a/test/org/apache/naming/resources/TestWarDirContext.java
+++ b/test/org/apache/naming/resources/TestWarDirContext.java
@@ -45,7 +45,7 @@ public class TestWarDirContext extends TomcatBaseTest {
                 new JreMemoryLeakPreventionListener());
     }
 
-    /**
+    /*
      * Check https://jira.springsource.org/browse/SPR-7350 isn't really an issue
      */
     @Test
@@ -65,7 +65,7 @@ public class TestWarDirContext extends TomcatBaseTest {
     }
 
 
-    /**
+    /*
      * Additional test following on from SPR-7350 above to check files that
      * contain JNDI reserved characters can be served when caching is enabled.
      */
@@ -97,7 +97,7 @@ public class TestWarDirContext extends TomcatBaseTest {
     }
 
 
-    /**
+    /*
      * Additional test following on from SPR-7350 above to check files that
      * contain JNDI reserved characters can be served when caching is disabled.
      */

==================================================
TesterConnectionLimit.java
index f3a5639222..d2f818ede0 100644
--- a/test/org/apache/tomcat/util/buf/TestByteChunk.java
+++ b/test/org/apache/tomcat/util/buf/TestByteChunk.java
@@ -38,7 +38,7 @@ public class TestByteChunk {
         assertTrue(Arrays.equals(bytes, expected));
     }
 
-    /**
+    /*
      * Test for {@code findByte} vs. {@code indexOf} methods difference.
      *
      * <p>

==================================================
