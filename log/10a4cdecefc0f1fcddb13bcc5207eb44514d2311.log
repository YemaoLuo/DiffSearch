10a4cdecefc0f1fcddb13bcc5207eb44514d2311
==================================================
More connector alignment - request header parsing
==================================================
Mark Emlyn
==================================================
Tue Sep 6 15:54:51 2011 +0000
==================================================
Http11AprProcessor.java
More connector alignment - request header parsing

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1165728 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProcessor.java
index e2637f2fad..74e0ff29b8 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -217,7 +217,14 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                 } else {
                     request.setStartTime(System.currentTimeMillis());
                     keptAlive = true;
-                    inputBuffer.parseHeaders();
+                    // Currently only NIO will ever return false here
+                    if (!inputBuffer.parseHeaders()) {
+                        // We've read part of the request, don't recycle it
+                        // instead associate it with the socket
+                        openSocket = true;
+                        readComplete = false;
+                        break;
+                    }
                     if (!disableUploadTimeout) {
                         Socket.timeoutSet(socketRef,
                                 connectionUploadTimeout * 1000);

==================================================
Http11Processor.java
index 11b30500e8..ab27485318 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -244,9 +244,10 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 } else {
                     request.setStartTime(System.currentTimeMillis());
                     keptAlive = true;
-                    if ( !inputBuffer.parseHeaders() ) {
-                        //we've read part of the request, don't recycle it
-                        //instead associate it with the socket
+                    // Currently only NIO will ever return false here
+                    if (!inputBuffer.parseHeaders()) {
+                        // We've read part of the request, don't recycle it
+                        // instead associate it with the socket
                         openSocket = true;
                         readComplete = false;
                         break;

==================================================
