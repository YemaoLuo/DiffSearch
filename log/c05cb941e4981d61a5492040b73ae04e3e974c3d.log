c05cb941e4981d61a5492040b73ae04e3e974c3d
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49758
==================================================
Mark Emlyn
==================================================
Sun Aug 22 23:11:18 2010 +0000
==================================================
Resource.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49758
Fix generics warnings exposed by a fix in Eclipse 3.6. Patch provided by sebb.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@987958 13f79535-47bb-0310-9956-ffa450edef68



==================================================
EJB.java
index bc3bd70c47..21a5d8b3fb 100644
--- a/java/javax/annotation/Resource.java
+++ b/java/javax/annotation/Resource.java
@@ -32,7 +32,7 @@ public @interface Resource {
         APPLICATION
     }
     public String name() default "";
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
+    @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
     public Class type() default Object.class;
     public AuthenticationType authenticationType() default AuthenticationType.CONTAINER;
     public boolean shareable() default true;

==================================================
BeanELResolver.java
index 8e31ad8f5f..85233ed13a 100644
--- a/java/javax/ejb/EJB.java
+++ b/java/javax/ejb/EJB.java
@@ -29,7 +29,7 @@ import java.lang.annotation.Target;
 public @interface EJB {
    String name() default "";
    String description() default "";
-   @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
+   @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
    Class beanInterface() default java.lang.Object.class;
    String beanName() default "";
    String mappedName() default "";

==================================================
ELContext.java
index e7c01b0928..dacb205355 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -231,7 +231,7 @@ public class BeanELResolver extends ELResolver {
         }
 
         // Can't use Class<?> because API needs to match specification
-        public @SuppressWarnings("unchecked") Class getPropertyType() {
+        public @SuppressWarnings("rawtypes") Class getPropertyType() {
             return this.type;
         }
 

==================================================
ResourceBundleELResolver.java
index f06b8745d8..1cdf5c7787 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -40,7 +40,7 @@ public abstract class ELContext {
     }
     
     // Can't use Class<?> because API needs to match specification
-    public Object getContext(@SuppressWarnings("unchecked") Class key) {
+    public Object getContext(@SuppressWarnings("rawtypes") Class key) {
         if (this.map == null) {
             return null;
         }
@@ -48,7 +48,7 @@ public abstract class ELContext {
     }
     
     // Can't use Class<?> because API needs to match specification
-    public void putContext(@SuppressWarnings("unchecked") Class key,
+    public void putContext(@SuppressWarnings("rawtypes") Class key,
             Object contextObject) throws NullPointerException {
         if (key == null || contextObject == null) {
             throw new NullPointerException();

==================================================
ServletRequestWrapper.java
index c75ac73401..6e41b59bc0 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -101,7 +101,7 @@ public class ResourceBundleELResolver extends ELResolver {
 
     @Override
     // Can't use Iterator<FeatureDescriptor> because API needs to match specification
-    public @SuppressWarnings("unchecked") Iterator getFeatureDescriptors(
+    public @SuppressWarnings({ "unchecked", "rawtypes" }) Iterator getFeatureDescriptors(
             ELContext context, Object base) {
         if (base instanceof ResourceBundle) {
             List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();

==================================================
ServletResponseWrapper.java
index a83b8c2601..88b799c6d2 100644
--- a/java/javax/servlet/ServletRequestWrapper.java
+++ b/java/javax/servlet/ServletRequestWrapper.java
@@ -432,7 +432,7 @@ public class ServletRequestWrapper implements ServletRequest {
      */
     @SuppressWarnings("unchecked")
     // Spec API does not use generics
-    public boolean isWrapperFor(Class wrappedType) {
+    public boolean isWrapperFor(@SuppressWarnings("rawtypes") Class wrappedType) {
         if (wrappedType.isAssignableFrom(request.getClass())) {
             return true;
         }

==================================================
HandlesTypes.java
index b0f0dd3f53..335d322b31 100644
--- a/java/javax/servlet/ServletResponseWrapper.java
+++ b/java/javax/servlet/ServletResponseWrapper.java
@@ -226,7 +226,7 @@ public class ServletResponseWrapper implements ServletResponse {
      */
     @SuppressWarnings("unchecked")
     // Spec API does not use generics
-    public boolean isWrapperFor(Class wrappedType) {
+    public boolean isWrapperFor(@SuppressWarnings("rawtypes") Class wrappedType) {
         if (wrappedType.isAssignableFrom(response.getClass())) {
             return true;
         }

==================================================
ExpressionEvaluator.java
index 4818f4f956..f1ff122996 100644
--- a/java/javax/servlet/annotation/HandlesTypes.java
+++ b/java/javax/servlet/annotation/HandlesTypes.java
@@ -29,7 +29,7 @@ import java.lang.annotation.Target;
  */
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
-@SuppressWarnings("unchecked") // Spec API does not use generics
+@SuppressWarnings("rawtypes") // Spec API does not use generics
 public @interface HandlesTypes {
 
     /**

==================================================
ImplicitObjectELResolver.java
index 6610fcb6bc..785c6f8c17 100644
--- a/java/javax/servlet/jsp/el/ExpressionEvaluator.java
+++ b/java/javax/servlet/jsp/el/ExpressionEvaluator.java
@@ -83,7 +83,7 @@ public abstract class ExpressionEvaluator {
      *                Thrown if parsing errors were found.
      */
     public abstract Expression parseExpression(String expression,
-            @SuppressWarnings("unchecked")// TCK signature fails with generics
+            @SuppressWarnings("rawtypes")// TCK signature fails with generics
             Class expectedType, FunctionMapper fMapper) throws ELException;
 
     /**
@@ -109,7 +109,7 @@ public abstract class ExpressionEvaluator {
      */
     public abstract Object evaluate(
             String expression,
-            @SuppressWarnings("unchecked")// TCK signature fails with generics
+            @SuppressWarnings("rawtypes")// TCK signature fails with generics
             Class expectedType, VariableResolver vResolver,
             FunctionMapper fMapper) throws ELException;
 }

==================================================
TagSupport.java
index 7eae3ed230..9dea1f683e 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -121,7 +121,7 @@ public class ImplicitObjectELResolver extends ELResolver {
     }
 
     @Override
-    @SuppressWarnings("unchecked") // TCK signature test fails with generics
+    @SuppressWarnings({ "unchecked", "rawtypes" }) // TCK signature test fails with generics
     public Class getType(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         if (context == null) {

==================================================
WebServiceRef.java
index 51d1c0a57e..709ecbd5fb 100644
--- a/java/javax/servlet/jsp/tagext/TagSupport.java
+++ b/java/javax/servlet/jsp/tagext/TagSupport.java
@@ -73,7 +73,7 @@ public class TagSupport implements IterationTag, Serializable {
      */
     public static final Tag findAncestorWithClass(Tag from,
             // TCK signature test fails with generics
-            @SuppressWarnings("unchecked")
+            @SuppressWarnings("rawtypes")
             Class klass) {
         boolean isInterface = false;
 

==================================================
EvaluationContext.java
index f9673353b0..6d0d3899eb 100644
--- a/java/javax/xml/ws/WebServiceRef.java
+++ b/java/javax/xml/ws/WebServiceRef.java
@@ -28,9 +28,9 @@ import java.lang.annotation.Target;
 
 public @interface WebServiceRef {
     public String name() default "";
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
+    @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
     public Class type() default java.lang.Object.class;
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
+    @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
     public Class value() default java.lang.Object.class;
     public String wsdlLocation() default "";
     public String mappedName() default "";

==================================================
AstValue.java
index cc5827d1ff..412f049ca8 100644
--- a/java/org/apache/el/lang/EvaluationContext.java
+++ b/java/org/apache/el/lang/EvaluationContext.java
@@ -55,7 +55,7 @@ public final class EvaluationContext extends ELContext {
 
     @Override
     // Can't use Class<?> because API needs to match specification in superclass
-    public Object getContext(@SuppressWarnings("unchecked") Class key) {
+    public Object getContext(@SuppressWarnings("rawtypes") Class key) {
         return this.elContext.getContext(key);
     }
 
@@ -71,7 +71,7 @@ public final class EvaluationContext extends ELContext {
 
     @Override
     // Can't use Class<?> because API needs to match specification in superclass
-    public void putContext(@SuppressWarnings("unchecked") Class key,
+    public void putContext(@SuppressWarnings("rawtypes") Class key,
             Object contextObject) {
         this.elContext.putContext(key, contextObject);
     }

==================================================
ELContextWrapper.java
index da39db133a..02ad92f7b5 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -227,7 +227,7 @@ public final class AstValue extends SimpleNode {
     @Override
     // Interface el.parser.Node uses raw types (and is auto-generated)
     public MethodInfo getMethodInfo(EvaluationContext ctx, 
-            @SuppressWarnings("unchecked") Class[] paramTypes)
+            @SuppressWarnings("rawtypes") Class[] paramTypes)
             throws ELException {
         Target t = getTarget(ctx);
         Method m = ReflectionUtil.getMethod(t.base, t.property, paramTypes);
@@ -238,7 +238,7 @@ public final class AstValue extends SimpleNode {
     @Override
     // Interface el.parser.Node uses a raw type (and is auto-generated)
     public Object invoke(EvaluationContext ctx, 
-            @SuppressWarnings("unchecked") Class[] paramTypes,
+            @SuppressWarnings("rawtypes") Class[] paramTypes,
             Object[] paramValues) throws ELException {
         
         Target t = getTarget(ctx);

==================================================
ExpressionEvaluatorImpl.java
index d342db0b9c..bf8fca374d 100644
--- a/java/org/apache/jasper/el/ELContextWrapper.java
+++ b/java/org/apache/jasper/el/ELContextWrapper.java
@@ -55,7 +55,7 @@ public final class ELContextWrapper extends ELContext {
     }
 
     @Override
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match super-class specification
+    @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match super-class specification
     public Object getContext(Class key) {
         return this.target.getContext(key);
     }
@@ -71,7 +71,7 @@ public final class ELContextWrapper extends ELContext {
     }
 
     @Override
-    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match super-class specification
+    @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match super-class specification
     public void putContext(Class key, Object contextObject) throws NullPointerException {
         this.target.putContext(key, contextObject);
     }

==================================================
DirContextURLConnection.java
index d3fbf8a7c7..b27dc7ee7b 100644
--- a/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
+++ b/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
@@ -36,7 +36,7 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
 
     @Override
     public Expression parseExpression(String expression,
-            @SuppressWarnings("unchecked") // API does not use generics
+            @SuppressWarnings("rawtypes") // API does not use generics
             Class expectedType,
             FunctionMapper fMapper) throws ELException {
         try {
@@ -54,7 +54,7 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
 
     @Override
     public Object evaluate(String expression,
-            @SuppressWarnings("unchecked") // API does not use generics
+            @SuppressWarnings("rawtypes") // API does not use generics
             Class expectedType,
             VariableResolver vResolver, FunctionMapper fMapper)
             throws ELException {

==================================================
