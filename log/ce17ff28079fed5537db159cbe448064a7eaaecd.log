ce17ff28079fed5537db159cbe448064a7eaaecd
==================================================
Add an option to control how to respond to requests with invalid HTTP header names
==================================================
Mark Thomas
==================================================
Mon Sep 18 12:57:38 2017 +0000
==================================================
AbstractHttp11Protocol.java
Add an option to control how to respond to requests with invalid HTTP header names

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1808695 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11InputBuffer.java
index 4bd83f2941..94845919df 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -91,6 +91,30 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     // ------------------------------------------------ HTTP specific properties
     // ------------------------------------------ managed in the ProtocolHandler
 
+    private boolean rejectIllegalHeaderName = true;
+    /**
+     * If an HTTP request is received that contains an illegal header name (i.e.
+     * the header name is not a token) will the request be rejected (with a 400
+     * response) or will the illegal header be ignored.
+     *
+     * @return {@code true} if the request will be rejected or {@code false} if
+     *         the header will be ignored
+     */
+    public boolean getRejectIllegalHeaderName() { return rejectIllegalHeaderName; }
+    /**
+     * If an HTTP request is received that contains an illegal header name (i.e.
+     * the header name is not a token) should the request be rejected (with a
+     * 400 response) or should the illegal header be ignored.
+     *
+     * @param rejectIllegalHeaderName   {@code true} to reject requests with
+     *                                  illegal header names, {@code false} to
+     *                                  ignore the header
+     */
+    public void setRejectIllegalHeaderName(boolean rejectIllegalHeaderName) {
+        this.rejectIllegalHeaderName = rejectIllegalHeaderName;
+    }
+
+
     private int maxSavePostSize = 4 * 1024;
     /**
      * Return the maximum size of the post which will be saved during FORM or

==================================================
Http11Processor.java
index d293663a36..95980d9261 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -64,6 +64,8 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
     private final MimeHeaders headers;
 
 
+    private final boolean rejectIllegalHeaderName;
+
     /**
      * State.
      */
@@ -146,12 +148,14 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
 
     // ----------------------------------------------------------- Constructors
 
-    public Http11InputBuffer(Request request, int headerBufferSize) {
+    public Http11InputBuffer(Request request, int headerBufferSize,
+            boolean rejectIllegalHeaderName) {
 
         this.request = request;
         headers = request.getMimeHeaders();
 
         this.headerBufferSize = headerBufferSize;
+        this.rejectIllegalHeaderName = rejectIllegalHeaderName;
 
         filterLibrary = new InputFilter[0];
         activeFilters = new InputFilter[0];
@@ -786,10 +790,11 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
                 headerData.lastSignificantChar = pos;
                 break;
             } else if (!HttpParser.isToken(chr)) {
-                // If a non-token header is detected, skip the line and
-                // ignore the header
+                // If a non-token characters are illegal in header names
+                // Parsing continues so the error can be reported in context
                 headerData.lastSignificantChar = pos;
                 byteBuffer.position(byteBuffer.position() - 1);
+                // skipLine() will handle the error
                 return skipLine();
             }
 
@@ -921,11 +926,15 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
                 headerData.lastSignificantChar = pos;
             }
         }
-        if (log.isDebugEnabled()) {
-            log.debug(sm.getString("iib.invalidheader",
+        if (rejectIllegalHeaderName || log.isDebugEnabled()) {
+            String message = sm.getString("iib.invalidheader",
                     new String(byteBuffer.array(), headerData.start,
                             headerData.lastSignificantChar - headerData.start + 1,
-                            StandardCharsets.ISO_8859_1)));
+                            StandardCharsets.ISO_8859_1));
+            if (rejectIllegalHeaderName) {
+                throw new IllegalArgumentException(message);
+            }
+            log.debug(message);
         }
 
         headerParsePos = HeaderParsePosition.HEADER_START;

==================================================
TestHttp11InputBuffer.java
index ae7c54dbef..7425cc5cf5 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -156,7 +156,8 @@ public class Http11Processor extends AbstractProcessor {
 
         userDataHelper = new UserDataHelper(log);
 
-        inputBuffer = new Http11InputBuffer(request, protocol.getMaxHttpHeaderSize());
+        inputBuffer = new Http11InputBuffer(request, protocol.getMaxHttpHeaderSize(),
+                protocol.getRejectIllegalHeaderName());
         request.setInputBuffer(inputBuffer);
 
         outputBuffer = new Http11OutputBuffer(response, protocol.getMaxHttpHeaderSize());

==================================================
