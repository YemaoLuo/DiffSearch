e6a3fd58f4b8c841eea43a884e7b5464c848185d
==================================================
Update Java 17 Panama module to OpenSSL 3.0
==================================================
remm remm@apache.org
==================================================
Thu Jun 16 16:24:22 2022 +0200
==================================================
OpenSSLContext.java
index 3f7368b94e..2290e0ff06 100644
--- a/modules/openssl-java17/openssl.h
+++ b/modules/openssl-java17/openssl.h
@@ -28,4 +28,5 @@
 #include <openssl/bn.h>
 #include <openssl/engine.h>
 #include <openssl/ocsp.h>
+#include <openssl/provider.h>
 

==================================================
OpenSSLEngine.java
index 516f4c68ef..d710cbc1be 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLContext.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLContext.java
@@ -757,7 +757,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
     // DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength)
     public static MemoryAddress openSSLCallbackTmpDH(MemoryAddress ssl, int isExport, int keylength) {
         var pkey = SSL_get_privatekey(ssl);
-        int type = (MemoryAddress.NULL.equals(pkey)) ? EVP_PKEY_NONE() : EVP_PKEY_base_id(pkey);
+        int type = (MemoryAddress.NULL.equals(pkey)) ? EVP_PKEY_NONE() : EVP_PKEY_get_base_id(pkey);
         /*
          * OpenSSL will call us with either keylen == 512 or keylen == 1024
          * (see the definition of SSL_EXPORT_PKEYLENGTH in ssl_locl.h).
@@ -772,7 +772,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
          */
         int keylen = 0;
         if ((type == EVP_PKEY_RSA()) || (type == EVP_PKEY_DSA())) {
-            keylen = EVP_PKEY_bits(pkey);
+            keylen = EVP_PKEY_get_bits(pkey);
         }
         for (int i = 0; i < OpenSSLLifecycleListener.dhParameters.length; i++) {
             if (keylen >= OpenSSLLifecycleListener.dhParameters[i].min) {

==================================================
OpenSSLLifecycleListener.java
index f3cc027298..3942e37a3c 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java
@@ -966,7 +966,7 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
 
     private byte[] getPeerCertificate() {
         var allocator = SegmentAllocator.ofScope(engineScope);
-        MemoryAddress/*(X509*)*/ x509 = SSL_get_peer_certificate(state.ssl);
+        MemoryAddress/*(X509*)*/ x509 = SSL_get1_peer_certificate(state.ssl);
         MemorySegment bufPointer = allocator.allocate(CLinker.C_POINTER, MemoryAddress.NULL);
         int length = i2d_X509(x509, bufPointer);
         if (length <= 0) {

==================================================
constants$0.java
index 03c4540c20..fdb28bfa77 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLLifecycleListener.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLLifecycleListener.java
@@ -23,6 +23,7 @@ import jdk.incubator.foreign.ResourceScope;
 import jdk.incubator.foreign.SegmentAllocator;
 
 import static org.apache.tomcat.util.openssl.openssl_h.*;
+import static org.apache.tomcat.util.openssl.openssl_compat_h.*;
 
 import java.security.SecureRandom;
 
@@ -283,41 +284,74 @@ public class OpenSSLLifecycleListener implements LifecycleListener {
 
             initDHParameters();
 
-            if (!(null == FIPSMode || "off".equalsIgnoreCase(FIPSMode))) {
+            // OpenSSL 3 onwards uses providers
+            boolean usingProviders = (OpenSSL_version_num() & 0xF0000000L) > 2;
 
+            if (usingProviders || !(null == FIPSMode || "off".equalsIgnoreCase(FIPSMode))) {
                 fipsModeActive = false;
-
                 final boolean enterFipsMode;
-                int fipsModeState = FIPS_mode();
+                int fipsModeState = FIPS_OFF;
+                if (usingProviders) {
+                    var md = EVP_MD_fetch(MemoryAddress.NULL, CLinker.toCString("SHA-512", scope), MemoryAddress.NULL);
+                    var provider = EVP_MD_get0_provider(md);
+                    String name = CLinker.toJavaString(OSSL_PROVIDER_get0_name(provider));
+                    EVP_MD_free(md);
+                    if ("fips".equals(name)) {
+                        fipsModeState = FIPS_ON;
+                    }
+                } else {
+                    fipsModeState = FIPS_mode();
+                }
 
                 if(log.isDebugEnabled()) {
-                    log.debug(sm.getString("listener.currentFIPSMode",
-                            Integer.valueOf(fipsModeState)));
+                    log.debug(sm.getString("listener.currentFIPSMode", Integer.valueOf(fipsModeState)));
                 }
 
-                if ("on".equalsIgnoreCase(FIPSMode)) {
+                if (null == FIPSMode || "off".equalsIgnoreCase(FIPSMode)) {
+                    if (fipsModeState == FIPS_ON) {
+                        fipsModeActive = true;
+                    }
+                    enterFipsMode = false;
+                } else if ("on".equalsIgnoreCase(FIPSMode)) {
                     if (fipsModeState == FIPS_ON) {
-                        log.info(sm.getString("listener.skipFIPSInitialization"));
+                        if (!usingProviders) {
+                            log.info(sm.getString("listener.skipFIPSInitialization"));
+                        }
                         fipsModeActive = true;
                         enterFipsMode = false;
                     } else {
-                        enterFipsMode = true;
+                        if (usingProviders) {
+                            throw new IllegalStateException(sm.getString("listener.FIPSProviderNotDefault", FIPSMode));
+                        } else {
+                            enterFipsMode = true;
+                        }
                     }
                 } else if ("require".equalsIgnoreCase(FIPSMode)) {
                     if (fipsModeState == FIPS_ON) {
                         fipsModeActive = true;
                         enterFipsMode = false;
                     } else {
-                        throw new IllegalStateException(
-                                sm.getString("listener.requireNotInFIPSMode"));
+                        if (usingProviders) {
+                            throw new IllegalStateException(sm.getString("listener.FIPSProviderNotDefault", FIPSMode));
+                        } else {
+                            throw new IllegalStateException(sm.getString("listener.requireNotInFIPSMode"));
+                        }
                     }
                 } else if ("enter".equalsIgnoreCase(FIPSMode)) {
                     if (fipsModeState == FIPS_OFF) {
-                        enterFipsMode = true;
+                        if (usingProviders) {
+                            throw new IllegalStateException(sm.getString("listener.FIPSProviderNotDefault", FIPSMode));
+                        } else {
+                            enterFipsMode = true;
+                        }
                     } else {
-                        throw new IllegalStateException(sm.getString(
-                                "listener.enterAlreadyInFIPSMode",
-                                Integer.valueOf(fipsModeState)));
+                        if (usingProviders) {
+                            fipsModeActive = true;
+                            enterFipsMode = false;
+                        } else {
+                            throw new IllegalStateException(sm.getString(
+                                    "listener.enterAlreadyInFIPSMode", Integer.valueOf(fipsModeState)));
+                        }
                     }
                 } else {
                     throw new IllegalArgumentException(sm.getString(
@@ -339,6 +373,10 @@ public class OpenSSLLifecycleListener implements LifecycleListener {
                     fipsModeActive = true;
                     log.info(sm.getString("listener.initializeFIPSSuccess"));
                 }
+
+                if (usingProviders && fipsModeActive) {
+                    log.info(sm.getString("aprListener.usingFIPSProvider"));
+                }
             }
 
             log.info(sm.getString("listener.initializedOpenSSL", CLinker.toJavaString(OpenSSL_version(0))));

==================================================
constants$1.java
index 7f39adddc9..829a941e12 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$0.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$0.java
@@ -67,11 +67,13 @@ class constants$0 {
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
         constants$0.CRYPTO_free$FUNC, false
     );
-    static final FunctionDescriptor FIPS_mode$FUNC = FunctionDescriptor.of(C_INT);
-    static final MethodHandle FIPS_mode$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "FIPS_mode",
-        "()I",
-        constants$0.FIPS_mode$FUNC, false
+    static final FunctionDescriptor BIO_ctrl_pending$FUNC = FunctionDescriptor.of(C_LONG,
+        C_POINTER
+    );
+    static final MethodHandle BIO_ctrl_pending$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BIO_ctrl_pending",
+        "(Ljdk/incubator/foreign/MemoryAddress;)J",
+        constants$0.BIO_ctrl_pending$FUNC, false
     );
 }
 

==================================================
constants$10.java
index 29f4dc5ac3..76ca2a364e 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$1.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$1.java
@@ -26,22 +26,6 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$1 {
 
-    static final FunctionDescriptor FIPS_mode_set$FUNC = FunctionDescriptor.of(C_INT,
-        C_INT
-    );
-    static final MethodHandle FIPS_mode_set$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "FIPS_mode_set",
-        "(I)I",
-        constants$1.FIPS_mode_set$FUNC, false
-    );
-    static final FunctionDescriptor BIO_ctrl_pending$FUNC = FunctionDescriptor.of(C_LONG,
-        C_POINTER
-    );
-    static final MethodHandle BIO_ctrl_pending$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BIO_ctrl_pending",
-        "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        constants$1.BIO_ctrl_pending$FUNC, false
-    );
     static final FunctionDescriptor BIO_s_file$FUNC = FunctionDescriptor.of(C_POINTER);
     static final MethodHandle BIO_s_file$MH = RuntimeHelper.downcallHandle(
         openssl_h.LIBRARIES, "BIO_s_file",
@@ -73,6 +57,26 @@ class constants$1 {
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
         constants$1.BIO_free$FUNC, false
     );
+    static final FunctionDescriptor BIO_read$FUNC = FunctionDescriptor.of(C_INT,
+        C_POINTER,
+        C_POINTER,
+        C_INT
+    );
+    static final MethodHandle BIO_read$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BIO_read",
+        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
+        constants$1.BIO_read$FUNC, false
+    );
+    static final FunctionDescriptor BIO_write$FUNC = FunctionDescriptor.of(C_INT,
+        C_POINTER,
+        C_POINTER,
+        C_INT
+    );
+    static final MethodHandle BIO_write$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BIO_write",
+        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
+        constants$1.BIO_write$FUNC, false
+    );
 }
 
 

==================================================
constants$11.java
index e7c2c7292d..d2ee73913b 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$10.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$10.java
@@ -26,6 +26,17 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$10 {
 
+    static final FunctionDescriptor PEM_read_bio_ECPKParameters$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER,
+        C_POINTER,
+        C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle PEM_read_bio_ECPKParameters$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "PEM_read_bio_ECPKParameters",
+        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$10.PEM_read_bio_ECPKParameters$FUNC, false
+    );
     static final FunctionDescriptor PEM_read_bio_DHparams$FUNC = FunctionDescriptor.of(C_POINTER,
         C_POINTER,
         C_POINTER,
@@ -73,15 +84,6 @@ class constants$10 {
         "(Ljdk/incubator/foreign/MemoryAddress;J)J",
         constants$10.SSL_CTX_clear_options$FUNC, false
     );
-    static final FunctionDescriptor SSL_CTX_set_options$FUNC = FunctionDescriptor.of(C_LONG,
-        C_POINTER,
-        C_LONG
-    );
-    static final MethodHandle SSL_CTX_set_options$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "SSL_CTX_set_options",
-        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
-        constants$10.SSL_CTX_set_options$FUNC, false
-    );
 }
 
 

==================================================
constants$15.java
index 92b679eff7..a7fd206844 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$11.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$11.java
@@ -26,6 +26,15 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$11 {
 
+    static final FunctionDescriptor SSL_CTX_set_options$FUNC = FunctionDescriptor.of(C_LONG,
+        C_POINTER,
+        C_LONG
+    );
+    static final MethodHandle SSL_CTX_set_options$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "SSL_CTX_set_options",
+        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
+        constants$11.SSL_CTX_set_options$FUNC, false
+    );
     static final FunctionDescriptor SSL_set_options$FUNC = FunctionDescriptor.of(C_LONG,
         C_POINTER,
         C_LONG

==================================================
constants$2.java
index 27a428b3c3..90713334fb 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$15.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$15.java
@@ -35,13 +35,13 @@ class constants$15 {
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
         constants$15.SSL_SESSION_get_id$FUNC, false
     );
-    static final FunctionDescriptor SSL_get_peer_certificate$FUNC = FunctionDescriptor.of(C_POINTER,
+    static final FunctionDescriptor SSL_get1_peer_certificate$FUNC = FunctionDescriptor.of(C_POINTER,
         C_POINTER
     );
-    static final MethodHandle SSL_get_peer_certificate$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "SSL_get_peer_certificate",
+    static final MethodHandle SSL_get1_peer_certificate$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "SSL_get1_peer_certificate",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        constants$15.SSL_get_peer_certificate$FUNC, false
+        constants$15.SSL_get1_peer_certificate$FUNC, false
     );
     static final FunctionDescriptor SSL_get_peer_cert_chain$FUNC = FunctionDescriptor.of(C_POINTER,
         C_POINTER

==================================================
constants$28.java
index c66f4c8480..af7b96002b 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$2.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$2.java
@@ -26,26 +26,6 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$2 {
 
-    static final FunctionDescriptor BIO_read$FUNC = FunctionDescriptor.of(C_INT,
-        C_POINTER,
-        C_POINTER,
-        C_INT
-    );
-    static final MethodHandle BIO_read$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BIO_read",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
-        constants$2.BIO_read$FUNC, false
-    );
-    static final FunctionDescriptor BIO_write$FUNC = FunctionDescriptor.of(C_INT,
-        C_POINTER,
-        C_POINTER,
-        C_INT
-    );
-    static final MethodHandle BIO_write$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BIO_write",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
-        constants$2.BIO_write$FUNC, false
-    );
     static final FunctionDescriptor BIO_ctrl$FUNC = FunctionDescriptor.of(C_LONG,
         C_POINTER,
         C_INT,
@@ -80,6 +60,21 @@ class constants$2 {
         "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
         constants$2.BIO_new_bio_pair$FUNC, false
     );
+    static final FunctionDescriptor BN_new$FUNC = FunctionDescriptor.of(C_POINTER);
+    static final MethodHandle BN_new$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BN_new",
+        "()Ljdk/incubator/foreign/MemoryAddress;",
+        constants$2.BN_new$FUNC, false
+    );
+    static final FunctionDescriptor BN_set_word$FUNC = FunctionDescriptor.of(C_INT,
+        C_POINTER,
+        C_LONG
+    );
+    static final MethodHandle BN_set_word$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BN_set_word",
+        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
+        constants$2.BN_set_word$FUNC, false
+    );
 }
 
 

==================================================
constants$29.java
index be6bc7e5af..892ead93d7 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$28.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$28.java
@@ -67,7 +67,14 @@ class constants$28 {
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
         constants$28.i2d_OCSP_REQUEST$FUNC, false
     );
-    static final MemorySegment OPENSSL_FILE$SEGMENT = CLinker.toCString("/tmp/jextract$18358922675719620067.h", ResourceScope.newImplicitScope());
+    static final FunctionDescriptor OSSL_PROVIDER_get0_name$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle OSSL_PROVIDER_get0_name$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "OSSL_PROVIDER_get0_name",
+        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$28.OSSL_PROVIDER_get0_name$FUNC, false
+    );
 }
 
 

==================================================
constants$3.java
new file mode 100644
index 0000000000..3ea20f81f0
--- /dev/null
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$29.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// Generated by jextract
+
+package org.apache.tomcat.util.openssl;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.VarHandle;
+import java.nio.ByteOrder;
+import jdk.incubator.foreign.*;
+import static jdk.incubator.foreign.CLinker.*;
+class constants$29 {
+
+    static final MemorySegment OPENSSL_FILE$SEGMENT = CLinker.toCString("/tmp/jextract$13767714217296276550.h", ResourceScope.newImplicitScope());
+}
+
+

==================================================
constants$4.java
index 4f187ecbd1..792fe28d73 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$3.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$3.java
@@ -26,21 +26,6 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$3 {
 
-    static final FunctionDescriptor BN_new$FUNC = FunctionDescriptor.of(C_POINTER);
-    static final MethodHandle BN_new$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BN_new",
-        "()Ljdk/incubator/foreign/MemoryAddress;",
-        constants$3.BN_new$FUNC, false
-    );
-    static final FunctionDescriptor BN_set_word$FUNC = FunctionDescriptor.of(C_INT,
-        C_POINTER,
-        C_LONG
-    );
-    static final MethodHandle BN_set_word$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BN_set_word",
-        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
-        constants$3.BN_set_word$FUNC, false
-    );
     static final FunctionDescriptor BN_get_rfc2409_prime_768$FUNC = FunctionDescriptor.of(C_POINTER,
         C_POINTER
     );
@@ -73,6 +58,22 @@ class constants$3 {
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
         constants$3.BN_get_rfc3526_prime_2048$FUNC, false
     );
+    static final FunctionDescriptor BN_get_rfc3526_prime_3072$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle BN_get_rfc3526_prime_3072$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BN_get_rfc3526_prime_3072",
+        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$3.BN_get_rfc3526_prime_3072$FUNC, false
+    );
+    static final FunctionDescriptor BN_get_rfc3526_prime_4096$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle BN_get_rfc3526_prime_4096$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "BN_get_rfc3526_prime_4096",
+        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$3.BN_get_rfc3526_prime_4096$FUNC, false
+    );
 }
 
 

==================================================
constants$5.java
index dcb0a46edb..16efd8784b 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$4.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$4.java
@@ -26,22 +26,6 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$4 {
 
-    static final FunctionDescriptor BN_get_rfc3526_prime_3072$FUNC = FunctionDescriptor.of(C_POINTER,
-        C_POINTER
-    );
-    static final MethodHandle BN_get_rfc3526_prime_3072$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BN_get_rfc3526_prime_3072",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        constants$4.BN_get_rfc3526_prime_3072$FUNC, false
-    );
-    static final FunctionDescriptor BN_get_rfc3526_prime_4096$FUNC = FunctionDescriptor.of(C_POINTER,
-        C_POINTER
-    );
-    static final MethodHandle BN_get_rfc3526_prime_4096$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "BN_get_rfc3526_prime_4096",
-        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        constants$4.BN_get_rfc3526_prime_4096$FUNC, false
-    );
     static final FunctionDescriptor BN_get_rfc3526_prime_6144$FUNC = FunctionDescriptor.of(C_POINTER,
         C_POINTER
     );
@@ -74,6 +58,24 @@ class constants$4 {
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
         constants$4.ASN1_STRING_get0_data$FUNC, false
     );
+    static final FunctionDescriptor EVP_MD_get0_provider$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle EVP_MD_get0_provider$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "EVP_MD_get0_provider",
+        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$4.EVP_MD_get0_provider$FUNC, false
+    );
+    static final FunctionDescriptor EVP_MD_fetch$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER,
+        C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle EVP_MD_fetch$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "EVP_MD_fetch",
+        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$4.EVP_MD_fetch$FUNC, false
+    );
 }
 
 

==================================================
constants$6.java
index d5e4f08d77..0dfa278af8 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$5.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$5.java
@@ -26,21 +26,29 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$5 {
 
-    static final FunctionDescriptor EVP_PKEY_base_id$FUNC = FunctionDescriptor.of(C_INT,
+    static final FunctionDescriptor EVP_MD_free$FUNC = FunctionDescriptor.ofVoid(
         C_POINTER
     );
-    static final MethodHandle EVP_PKEY_base_id$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "EVP_PKEY_base_id",
+    static final MethodHandle EVP_MD_free$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "EVP_MD_free",
+        "(Ljdk/incubator/foreign/MemoryAddress;)V",
+        constants$5.EVP_MD_free$FUNC, false
+    );
+    static final FunctionDescriptor EVP_PKEY_get_base_id$FUNC = FunctionDescriptor.of(C_INT,
+        C_POINTER
+    );
+    static final MethodHandle EVP_PKEY_get_base_id$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "EVP_PKEY_get_base_id",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        constants$5.EVP_PKEY_base_id$FUNC, false
+        constants$5.EVP_PKEY_get_base_id$FUNC, false
     );
-    static final FunctionDescriptor EVP_PKEY_bits$FUNC = FunctionDescriptor.of(C_INT,
+    static final FunctionDescriptor EVP_PKEY_get_bits$FUNC = FunctionDescriptor.of(C_INT,
         C_POINTER
     );
-    static final MethodHandle EVP_PKEY_bits$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "EVP_PKEY_bits",
+    static final MethodHandle EVP_PKEY_get_bits$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "EVP_PKEY_get_bits",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        constants$5.EVP_PKEY_bits$FUNC, false
+        constants$5.EVP_PKEY_get_bits$FUNC, false
     );
     static final FunctionDescriptor EC_GROUP_free$FUNC = FunctionDescriptor.ofVoid(
         C_POINTER
@@ -66,14 +74,6 @@ class constants$5 {
         "(I)Ljdk/incubator/foreign/MemoryAddress;",
         constants$5.EC_KEY_new_by_curve_name$FUNC, false
     );
-    static final FunctionDescriptor EC_KEY_free$FUNC = FunctionDescriptor.ofVoid(
-        C_POINTER
-    );
-    static final MethodHandle EC_KEY_free$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "EC_KEY_free",
-        "(Ljdk/incubator/foreign/MemoryAddress;)V",
-        constants$5.EC_KEY_free$FUNC, false
-    );
 }
 
 

==================================================
constants$7.java
index 1b006ca498..de6b8edd6d 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$6.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$6.java
@@ -26,6 +26,14 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$6 {
 
+    static final FunctionDescriptor EC_KEY_free$FUNC = FunctionDescriptor.ofVoid(
+        C_POINTER
+    );
+    static final MethodHandle EC_KEY_free$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "EC_KEY_free",
+        "(Ljdk/incubator/foreign/MemoryAddress;)V",
+        constants$6.EC_KEY_free$FUNC, false
+    );
     static final FunctionDescriptor DH_new$FUNC = FunctionDescriptor.of(C_POINTER);
     static final MethodHandle DH_new$MH = RuntimeHelper.downcallHandle(
         openssl_h.LIBRARIES, "DH_new",
@@ -68,15 +76,6 @@ class constants$6 {
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
         constants$6.X509_STORE_CTX_get0_untrusted$FUNC, false
     );
-    static final FunctionDescriptor X509_STORE_add_lookup$FUNC = FunctionDescriptor.of(C_POINTER,
-        C_POINTER,
-        C_POINTER
-    );
-    static final MethodHandle X509_STORE_add_lookup$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "X509_STORE_add_lookup",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        constants$6.X509_STORE_add_lookup$FUNC, false
-    );
 }
 
 

==================================================
constants$8.java
index 8abd155d18..fd5d5dba6a 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$7.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$7.java
@@ -26,6 +26,15 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$7 {
 
+    static final FunctionDescriptor X509_STORE_add_lookup$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER,
+        C_POINTER
+    );
+    static final MethodHandle X509_STORE_add_lookup$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "X509_STORE_add_lookup",
+        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$7.X509_STORE_add_lookup$FUNC, false
+    );
     static final FunctionDescriptor X509_LOOKUP_hash_dir$FUNC = FunctionDescriptor.of(C_POINTER);
     static final MethodHandle X509_LOOKUP_hash_dir$MH = RuntimeHelper.downcallHandle(
         openssl_h.LIBRARIES, "X509_LOOKUP_hash_dir",
@@ -67,15 +76,6 @@ class constants$7 {
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
         constants$7.X509_STORE_CTX_get_error$FUNC, false
     );
-    static final FunctionDescriptor X509_STORE_CTX_set_error$FUNC = FunctionDescriptor.ofVoid(
-        C_POINTER,
-        C_INT
-    );
-    static final MethodHandle X509_STORE_CTX_set_error$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "X509_STORE_CTX_set_error",
-        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
-        constants$7.X509_STORE_CTX_set_error$FUNC, false
-    );
 }
 
 

==================================================
constants$9.java
index dc83b9526b..3f49a98e65 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$8.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$8.java
@@ -26,6 +26,15 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$8 {
 
+    static final FunctionDescriptor X509_STORE_CTX_set_error$FUNC = FunctionDescriptor.ofVoid(
+        C_POINTER,
+        C_INT
+    );
+    static final MethodHandle X509_STORE_CTX_set_error$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "X509_STORE_CTX_set_error",
+        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
+        constants$8.X509_STORE_CTX_set_error$FUNC, false
+    );
     static final FunctionDescriptor X509_STORE_CTX_get_error_depth$FUNC = FunctionDescriptor.of(C_INT,
         C_POINTER
     );
@@ -67,16 +76,6 @@ class constants$8 {
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         constants$8.X509_free$FUNC, false
     );
-    static final FunctionDescriptor d2i_X509$FUNC = FunctionDescriptor.of(C_POINTER,
-        C_POINTER,
-        C_POINTER,
-        C_LONG
-    );
-    static final MethodHandle d2i_X509$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "d2i_X509",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
-        constants$8.d2i_X509$FUNC, false
-    );
 }
 
 

==================================================
openssl_compat_h.java
index 76c9cb4832..3304e514de 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$9.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/constants$9.java
@@ -26,6 +26,16 @@ import jdk.incubator.foreign.*;
 import static jdk.incubator.foreign.CLinker.*;
 class constants$9 {
 
+    static final FunctionDescriptor d2i_X509$FUNC = FunctionDescriptor.of(C_POINTER,
+        C_POINTER,
+        C_POINTER,
+        C_LONG
+    );
+    static final MethodHandle d2i_X509$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "d2i_X509",
+        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
+        constants$9.d2i_X509$FUNC, false
+    );
     static final FunctionDescriptor i2d_X509$FUNC = FunctionDescriptor.of(C_INT,
         C_POINTER,
         C_POINTER
@@ -73,17 +83,6 @@ class constants$9 {
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
         constants$9.PEM_read_bio_X509_AUX$FUNC, false
     );
-    static final FunctionDescriptor PEM_read_bio_ECPKParameters$FUNC = FunctionDescriptor.of(C_POINTER,
-        C_POINTER,
-        C_POINTER,
-        C_POINTER,
-        C_POINTER
-    );
-    static final MethodHandle PEM_read_bio_ECPKParameters$MH = RuntimeHelper.downcallHandle(
-        openssl_h.LIBRARIES, "PEM_read_bio_ECPKParameters",
-        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        constants$9.PEM_read_bio_ECPKParameters$FUNC, false
-    );
 }
 
 

==================================================
openssl_h.java
new file mode 100644
index 0000000000..b5ecb82a4c
--- /dev/null
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/openssl/openssl_compat_h.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tomcat.util.openssl;
+
+import java.lang.invoke.MethodHandle;
+import jdk.incubator.foreign.*;
+import static jdk.incubator.foreign.CLinker.*;
+
+/**
+ * Methods used present in older OpenSSL versions but not in the current major version.
+ */
+public class openssl_compat_h  {
+
+    // OpenSSL 1.1 FIPS_mode
+    static final FunctionDescriptor FIPS_mode$FUNC = FunctionDescriptor.of(C_INT);
+    static final MethodHandle FIPS_mode$MH = RuntimeHelper.downcallHandle(
+        openssl_h.LIBRARIES, "FIPS_mode",
+        "()I",
+        FIPS_mode$FUNC, false
+    );
+    public static MethodHandle FIPS_mode$MH() {
+        return RuntimeHelper.requireNonNull(FIPS_mode$MH,"FIPS_mode");
+    }
+    public static int FIPS_mode () {
+        var mh$ = RuntimeHelper.requireNonNull(FIPS_mode$MH, "FIPS_mode");
+        try {
+            return (int)mh$.invokeExact();
+        } catch (Throwable ex$) {
+            throw new AssertionError("should not reach here", ex$);
+        }
+    }
+
+    // OpenSSL 1.1 FIPS_mode_set
+    static final FunctionDescriptor FIPS_mode_set$FUNC = FunctionDescriptor.of(C_INT,
+            C_INT
+        );
+        static final MethodHandle FIPS_mode_set$MH = RuntimeHelper.downcallHandle(
+            openssl_h.LIBRARIES, "FIPS_mode_set",
+            "(I)I",
+            FIPS_mode_set$FUNC, false
+        );
+    public static MethodHandle FIPS_mode_set$MH() {
+        return RuntimeHelper.requireNonNull(FIPS_mode_set$MH,"FIPS_mode_set");
+    }
+    public static int FIPS_mode_set ( int r) {
+        var mh$ = RuntimeHelper.requireNonNull(FIPS_mode_set$MH, "FIPS_mode_set");
+        try {
+            return (int)mh$.invokeExact(r);
+        } catch (Throwable ex$) {
+            throw new AssertionError("should not reach here", ex$);
+        }
+    }
+
+}
+
+

==================================================
