6dffc54a0d99c1482cb8e28edf2bb2d811e0d426
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51436
==================================================
Mark Emlyn
==================================================
Tue Jun 28 17:49:25 2011 +0000
==================================================
StandardContextValve.java
index f49e83198e..5581523950 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -156,6 +156,7 @@ standardContext.urlValidate=Cannot validate URL decoded request path {0}
 standardContext.workPath=Exception obtaining work path for context [{0}]
 standardContext.workCreateException=Failed to determine absolute work directory from directory [{0}] and CATALINA_HOME [{1}] for context [{2}]
 standardContext.workCreateFail=Failed to create work directory [{0}] for context [{1}]
+standardContextValve.acknowledgeException=Failed to acknowledge request with a 100 (Continue) response
 standardEngine.alreadyStarted=Engine has already been started
 standardEngine.jvmRouteFail=Failed to set Engine's jvmRoute attribute from system property
 standardEngine.mappingError=MAPPING configuration error for server name {0}

==================================================
StandardWrapperValve.java
index 2b45997635..934bad05a3 100644
--- a/java/org/apache/catalina/core/StandardContextValve.java
+++ b/java/org/apache/catalina/core/StandardContextValve.java
@@ -115,7 +115,7 @@ final class StandardContextValve
             || (requestPathMB.equalsIgnoreCase("/META-INF"))
             || (requestPathMB.startsWithIgnoreCase("/WEB-INF/", 0))
             || (requestPathMB.equalsIgnoreCase("/WEB-INF"))) {
-            notFound(response);
+            error(response, HttpServletResponse.SC_NOT_FOUND);
             return;
         }
 
@@ -142,17 +142,28 @@ final class StandardContextValve
         // Select the Wrapper to be used for this Request
         Wrapper wrapper = request.getWrapper();
         if (wrapper == null) {
-            notFound(response);
+            error(response, HttpServletResponse.SC_NOT_FOUND);
             return;
         } else if (wrapper.isUnavailable()) {
             // May be as a result of a reload, try and find the new wrapper
             wrapper = (Wrapper) container.findChild(wrapper.getName());
             if (wrapper == null) {
-                notFound(response);
+                error(response, HttpServletResponse.SC_NOT_FOUND);
                 return;
             }
         }
 
+        // Acknowledge the request
+        try {
+            response.sendAcknowledgement();
+        } catch (IOException ioe) {
+            container.getLogger().error(sm.getString(
+                    "standardContextValve.acknowledgeException"), ioe);
+            request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
+            error(response, HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+            return;
+        }
+        
         // Don't fire listeners during async processing
         // If a request init listener throws an exception, the request is
         // aborted
@@ -209,17 +220,17 @@ final class StandardContextValve
 
 
     /**
-     * Report a "not found" error for the specified resource.  FIXME:  We
+     * Report an error for the specified resource.  FIXME:  We
      * should really be using the error reporting settings for this web
      * application, but currently that code runs at the wrapper level rather
      * than the context level.
      *
      * @param response The response we are creating
      */
-    private void notFound(HttpServletResponse response) {
+    private void error(HttpServletResponse response, int status) {
 
         try {
-            response.sendError(HttpServletResponse.SC_NOT_FOUND);
+            response.sendError(status);
         } catch (IllegalStateException e) {
             // Ignore
         } catch (IOException e) {

==================================================
