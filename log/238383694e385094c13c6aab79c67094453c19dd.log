238383694e385094c13c6aab79c67094453c19dd
==================================================
Whitespace removal from /java/org/apache/catalina/startup
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:11:34 2011 +0000
==================================================
Bootstrap.java
Whitespace removal from /java/org/apache/catalina/startup

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187791 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CatalinaProperties.java
index dfde85946d..6da67e8f17 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -169,7 +169,7 @@ public final class Bootstrap {
 
     /**
      * System property replacement in the given string.
-     * 
+     *
      * @param str The original string
      * @return the modified string
      */

==================================================
ClassLoaderFactory.java
index 213f1ad857..193b80d056 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -60,7 +60,7 @@ public class CatalinaProperties {
      * Return specified property value.
      */
     public static String getProperty(String name) {
-    
+
         return properties.getProperty(name);
 
     }
@@ -154,8 +154,8 @@ public class CatalinaProperties {
         return System.getProperty(Globals.CATALINA_HOME_PROP,
                                   System.getProperty("user.dir"));
     }
-    
-    
+
+
     /**
      * Get the value of the catalina.base environment variable.
      */

==================================================
ConnectorCreateRule.java
index 0544f7de14..88a269c49e 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -57,7 +57,7 @@ public final class ClassLoaderFactory {
 
 
     private static final Log log = LogFactory.getLog(ClassLoaderFactory.class);
-    
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -66,10 +66,10 @@ public final class ClassLoaderFactory {
      * defaults and the specified directory paths:
      *
      * @param unpacked Array of pathnames to unpacked directories that should
-     *  be added to the repositories of the class loader, or <code>null</code> 
+     *  be added to the repositories of the class loader, or <code>null</code>
      * for no unpacked directories to be considered
      * @param packed Array of pathnames to directories containing JAR files
-     *  that should be added to the repositories of the class loader, 
+     *  that should be added to the repositories of the class loader,
      * or <code>null</code> for no directories of JAR files to be considered
      * @param parent Parent class loader for the new class loader, or
      *  <code>null</code> for the system class loader.
@@ -278,20 +278,20 @@ public final class ClassLoaderFactory {
         JAR,
         URL
     }
-    
+
     public static class Repository {
         private String location;
         private RepositoryType type;
-        
+
         public Repository(String location, RepositoryType type) {
             this.location = location;
             this.type = type;
         }
-        
+
         public String getLocation() {
             return location;
         }
-        
+
         public RepositoryType getType() {
             return type;
         }

==================================================
Constants.java
index 2c8739739e..8f3390521a 100644
--- a/java/org/apache/catalina/startup/ConnectorCreateRule.java
+++ b/java/org/apache/catalina/startup/ConnectorCreateRule.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.catalina.startup;
@@ -44,10 +44,10 @@ public class ConnectorCreateRule extends Rule {
     /**
      * Process the beginning of this element.
      *
-     * @param namespace the namespace URI of the matching element, or an 
+     * @param namespace the namespace URI of the matching element, or an
      *   empty string if the parser is not namespace aware or the element has
      *   no namespace
-     * @param name the local name if the parser is namespace aware, or just 
+     * @param name the local name if the parser is namespace aware, or just
      *   the element name otherwise
      * @param attributes The attribute list for this element
      */
@@ -61,10 +61,10 @@ public class ConnectorCreateRule extends Rule {
         }
         Connector con = new Connector(attributes.getValue("protocol"));
         if ( ex != null )  _setExecutor(con,ex);
-        
+
         digester.push(con);
     }
-    
+
     public void _setExecutor(Connector con, Executor ex) throws Exception {
         Method m = IntrospectionUtils.findMethod(con.getProtocolHandler().getClass(),"setExecutor",new Class[] {java.util.concurrent.Executor.class});
         if (m!=null) {
@@ -77,11 +77,11 @@ public class ConnectorCreateRule extends Rule {
 
     /**
      * Process the end of this element.
-     * 
-     * @param namespace the namespace URI of the matching element, or an 
+     *
+     * @param namespace the namespace URI of the matching element, or an
      *   empty string if the parser is not namespace aware or the element has
      *   no namespace
-     * @param name the local name if the parser is namespace aware, or just 
+     * @param name the local name if the parser is namespace aware, or just
      *   the element name otherwise
      */
     @Override

==================================================
ContextRuleSet.java
index 14f91123a3..1150b29321 100644
--- a/java/org/apache/catalina/startup/Constants.java
+++ b/java/org/apache/catalina/startup/Constants.java
@@ -1,193 +1,193 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.catalina.startup;
-
-
-/**
- * String constants for the startup package.
- *
- * @author Craig R. McClanahan
- * @author Jean-Francois Arcand
- * @version $Id$
- */
-
-public final class Constants {
-
-    public static final String Package = "org.apache.catalina.startup";
-
-    public static final String ApplicationContextXml = "META-INF/context.xml";
-    public static final String ApplicationWebXml = "/WEB-INF/web.xml";
-    public static final String DefaultContextXml = "conf/context.xml";
-    public static final String DefaultWebXml = "conf/web.xml";
-    public static final String HostContextXml = "context.xml.default";
-    public static final String HostWebXml = "web.xml.default";
-
-    /**
-     * A dummy value used to suppress loading the default web.xml file.
-     *
-     * <p>
-     * It is useful when embedding Tomcat, when the default configuration is
-     * done programmatically, e.g. by calling
-     * <code>Tomcat.initWebappDefaults(context)</code>.
-     *
-     * @see Tomcat
-     */
-    public static final String NoDefaultWebXml = "org/apache/catalina/startup/NO_DEFAULT_XML";
-
-    // J2EE
-    public static final String J2eeSchemaPublicId_14 =
-        "j2ee_1_4.xsd";
-    public static final String J2eeSchemaResourcePath_14 =
-        "/javax/servlet/resources/j2ee_1_4.xsd";
-
-    public static final String JavaeeSchemaPublicId_5 =
-        "javaee_5.xsd";
-    public static final String JavaeeSchemaResourcePath_5 =
-        "/javax/servlet/resources/javaee_5.xsd";
-
-    public static final String JavaeeSchemaPublicId_6 =
-        "javaee_6.xsd";
-    public static final String JavaeeSchemaResourcePath_6 =
-        "/javax/servlet/resources/javaee_6.xsd";
-
-    
-    // W3C
-    public static final String W3cSchemaPublicId_10 =
-        "xml.xsd";
-    public static final String W3cSchemaResourcePath_10 =
-        "/javax/servlet/resources/xml.xsd";
-
-    public static final String W3cSchemaDTDPublicId_10 =
-        "XMLSchema.dtd";
-    public static final String W3cSchemaDTDResourcePath_10 =
-        "/javax/servlet/resources/XMLSchema.dtd";
-
-    public static final String W3cDatatypesDTDPublicId_10 =
-        "datatypes.dtd";
-    public static final String W3cDatatypesDTDResourcePath_10 =
-        "/javax/servlet/resources/datatypes.dtd";
-
-    
-    // JSP
-    public static final String JspSchemaPublicId_20 =
-        "jsp_2_0.xsd";
-    public static final String JspSchemaResourcePath_20 =
-        "/javax/servlet/jsp/resources/jsp_2_0.xsd";
-    
-    public static final String JspSchemaPublicId_21 =
-        "jsp_2_1.xsd";
-    public static final String JspSchemaResourcePath_21 =
-        "/javax/servlet/jsp/resources/jsp_2_1.xsd";
-
-    public static final String JspSchemaPublicId_22 =
-        "jsp_2_2.xsd";
-    public static final String JspSchemaResourcePath_22 =
-        "/javax/servlet/jsp/resources/jsp_2_2.xsd";
-
-
-    // TLD
-    public static final String TldDtdPublicId_11 =
-        "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN";
-    public static final String TldDtdResourcePath_11 =
-        "/javax/servlet/jsp/resources/web-jsptaglibrary_1_1.dtd";
-
-    public static final String TldDtdPublicId_12 =
-        "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN";
-    public static final String TldDtdResourcePath_12 =
-        "/javax/servlet/jsp/resources/web-jsptaglibrary_1_2.dtd";
-
-    public static final String TldSchemaPublicId_20 =
-        "web-jsptaglibrary_2_0.xsd";
-    public static final String TldSchemaResourcePath_20 =
-        "/javax/servlet/jsp/resources/web-jsptaglibrary_2_0.xsd";
-
-    public static final String TldSchemaPublicId_21 =
-        "web-jsptaglibrary_2_1.xsd";
-    public static final String TldSchemaResourcePath_21 =
-        "/javax/servlet/jsp/resources/web-jsptaglibrary_2_1.xsd";
-
-    
-    // web.xml
-    public static final String WebDtdPublicId_22 =
-        "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN";
-    public static final String WebDtdResourcePath_22 =
-        "/javax/servlet/resources/web-app_2_2.dtd";
-
-    public static final String WebDtdPublicId_23 =
-        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN";
-    public static final String WebDtdResourcePath_23 =
-        "/javax/servlet/resources/web-app_2_3.dtd";
-
-    public static final String WebSchemaPublicId_24 =
-        "web-app_2_4.xsd";
-    public static final String WebSchemaResourcePath_24 =
-        "/javax/servlet/resources/web-app_2_4.xsd";
-
-    public static final String WebSchemaPublicId_25 =
-        "web-app_2_5.xsd";
-    public static final String WebSchemaResourcePath_25 =
-        "/javax/servlet/resources/web-app_2_5.xsd";
-
-    public static final String WebSchemaPublicId_30 =
-        "web-app_3_0.xsd";
-    public static final String WebSchemaResourcePath_30 =
-        "/javax/servlet/resources/web-app_3_0.xsd";
-
-    public static final String WebCommonSchemaPublicId_30 =
-        "web-common_3_0.xsd";
-    public static final String WebCommonSchemaResourcePath_30 =
-        "/javax/servlet/resources/web-common_3_0.xsd";
-
-    public static final String WebFragmentSchemaPublicId_30 =
-        "web-fragment_3_0.xsd";
-    public static final String WebFragmentSchemaResourcePath_30 =
-        "/javax/servlet/resources/web-fragment_3_0.xsd";
-    
-    // Web service
-    public static final String J2eeWebServiceSchemaPublicId_11 =
-            "j2ee_web_services_1_1.xsd";
-    public static final String J2eeWebServiceSchemaResourcePath_11 =
-            "/javax/servlet/resources/j2ee_web_services_1_1.xsd";
-    
-    public static final String J2eeWebServiceClientSchemaPublicId_11 =
-            "j2ee_web_services_client_1_1.xsd";
-    public static final String J2eeWebServiceClientSchemaResourcePath_11 =
-            "/javax/servlet/resources/j2ee_web_services_client_1_1.xsd";
-
-    public static final String JavaeeWebServiceSchemaPublicId_12 =
-        "javaee_web_services_1_2.xsd";
-    public static final String JavaeeWebServiceSchemaResourcePath_12 =
-        "/javax/servlet/resources/javaee_web_services_1_2.xsd";
-
-    public static final String JavaeeWebServiceClientSchemaPublicId_12 =
-        "javaee_web_services_client_1_2.xsd";
-    public static final String JavaeeWebServiceClientSchemaResourcePath_12 =
-        "/javax/servlet/resources/javaee_web_services_client_1_2.xsd";
-
-    public static final String JavaeeWebServiceSchemaPublicId_13 =
-        "javaee_web_services_1_3.xsd";
-    public static final String JavaeeWebServiceSchemaResourcePath_13 =
-        "/javax/servlet/resources/javaee_web_services_1_3.xsd";
-
-    public static final String JavaeeWebServiceClientSchemaPublicId_13 =
-        "javaee_web_services_client_1_3.xsd";
-    public static final String JavaeeWebServiceClientSchemaResourcePath_13 =
-        "/javax/servlet/resources/javaee_web_services_client_1_3.xsd";
-
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.catalina.startup;
+
+
+/**
+ * String constants for the startup package.
+ *
+ * @author Craig R. McClanahan
+ * @author Jean-Francois Arcand
+ * @version $Id$
+ */
+
+public final class Constants {
+
+    public static final String Package = "org.apache.catalina.startup";
+
+    public static final String ApplicationContextXml = "META-INF/context.xml";
+    public static final String ApplicationWebXml = "/WEB-INF/web.xml";
+    public static final String DefaultContextXml = "conf/context.xml";
+    public static final String DefaultWebXml = "conf/web.xml";
+    public static final String HostContextXml = "context.xml.default";
+    public static final String HostWebXml = "web.xml.default";
+
+    /**
+     * A dummy value used to suppress loading the default web.xml file.
+     *
+     * <p>
+     * It is useful when embedding Tomcat, when the default configuration is
+     * done programmatically, e.g. by calling
+     * <code>Tomcat.initWebappDefaults(context)</code>.
+     *
+     * @see Tomcat
+     */
+    public static final String NoDefaultWebXml = "org/apache/catalina/startup/NO_DEFAULT_XML";
+
+    // J2EE
+    public static final String J2eeSchemaPublicId_14 =
+        "j2ee_1_4.xsd";
+    public static final String J2eeSchemaResourcePath_14 =
+        "/javax/servlet/resources/j2ee_1_4.xsd";
+
+    public static final String JavaeeSchemaPublicId_5 =
+        "javaee_5.xsd";
+    public static final String JavaeeSchemaResourcePath_5 =
+        "/javax/servlet/resources/javaee_5.xsd";
+
+    public static final String JavaeeSchemaPublicId_6 =
+        "javaee_6.xsd";
+    public static final String JavaeeSchemaResourcePath_6 =
+        "/javax/servlet/resources/javaee_6.xsd";
+
+
+    // W3C
+    public static final String W3cSchemaPublicId_10 =
+        "xml.xsd";
+    public static final String W3cSchemaResourcePath_10 =
+        "/javax/servlet/resources/xml.xsd";
+
+    public static final String W3cSchemaDTDPublicId_10 =
+        "XMLSchema.dtd";
+    public static final String W3cSchemaDTDResourcePath_10 =
+        "/javax/servlet/resources/XMLSchema.dtd";
+
+    public static final String W3cDatatypesDTDPublicId_10 =
+        "datatypes.dtd";
+    public static final String W3cDatatypesDTDResourcePath_10 =
+        "/javax/servlet/resources/datatypes.dtd";
+
+
+    // JSP
+    public static final String JspSchemaPublicId_20 =
+        "jsp_2_0.xsd";
+    public static final String JspSchemaResourcePath_20 =
+        "/javax/servlet/jsp/resources/jsp_2_0.xsd";
+
+    public static final String JspSchemaPublicId_21 =
+        "jsp_2_1.xsd";
+    public static final String JspSchemaResourcePath_21 =
+        "/javax/servlet/jsp/resources/jsp_2_1.xsd";
+
+    public static final String JspSchemaPublicId_22 =
+        "jsp_2_2.xsd";
+    public static final String JspSchemaResourcePath_22 =
+        "/javax/servlet/jsp/resources/jsp_2_2.xsd";
+
+
+    // TLD
+    public static final String TldDtdPublicId_11 =
+        "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN";
+    public static final String TldDtdResourcePath_11 =
+        "/javax/servlet/jsp/resources/web-jsptaglibrary_1_1.dtd";
+
+    public static final String TldDtdPublicId_12 =
+        "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN";
+    public static final String TldDtdResourcePath_12 =
+        "/javax/servlet/jsp/resources/web-jsptaglibrary_1_2.dtd";
+
+    public static final String TldSchemaPublicId_20 =
+        "web-jsptaglibrary_2_0.xsd";
+    public static final String TldSchemaResourcePath_20 =
+        "/javax/servlet/jsp/resources/web-jsptaglibrary_2_0.xsd";
+
+    public static final String TldSchemaPublicId_21 =
+        "web-jsptaglibrary_2_1.xsd";
+    public static final String TldSchemaResourcePath_21 =
+        "/javax/servlet/jsp/resources/web-jsptaglibrary_2_1.xsd";
+
+
+    // web.xml
+    public static final String WebDtdPublicId_22 =
+        "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN";
+    public static final String WebDtdResourcePath_22 =
+        "/javax/servlet/resources/web-app_2_2.dtd";
+
+    public static final String WebDtdPublicId_23 =
+        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN";
+    public static final String WebDtdResourcePath_23 =
+        "/javax/servlet/resources/web-app_2_3.dtd";
+
+    public static final String WebSchemaPublicId_24 =
+        "web-app_2_4.xsd";
+    public static final String WebSchemaResourcePath_24 =
+        "/javax/servlet/resources/web-app_2_4.xsd";
+
+    public static final String WebSchemaPublicId_25 =
+        "web-app_2_5.xsd";
+    public static final String WebSchemaResourcePath_25 =
+        "/javax/servlet/resources/web-app_2_5.xsd";
+
+    public static final String WebSchemaPublicId_30 =
+        "web-app_3_0.xsd";
+    public static final String WebSchemaResourcePath_30 =
+        "/javax/servlet/resources/web-app_3_0.xsd";
+
+    public static final String WebCommonSchemaPublicId_30 =
+        "web-common_3_0.xsd";
+    public static final String WebCommonSchemaResourcePath_30 =
+        "/javax/servlet/resources/web-common_3_0.xsd";
+
+    public static final String WebFragmentSchemaPublicId_30 =
+        "web-fragment_3_0.xsd";
+    public static final String WebFragmentSchemaResourcePath_30 =
+        "/javax/servlet/resources/web-fragment_3_0.xsd";
+
+    // Web service
+    public static final String J2eeWebServiceSchemaPublicId_11 =
+            "j2ee_web_services_1_1.xsd";
+    public static final String J2eeWebServiceSchemaResourcePath_11 =
+            "/javax/servlet/resources/j2ee_web_services_1_1.xsd";
+
+    public static final String J2eeWebServiceClientSchemaPublicId_11 =
+            "j2ee_web_services_client_1_1.xsd";
+    public static final String J2eeWebServiceClientSchemaResourcePath_11 =
+            "/javax/servlet/resources/j2ee_web_services_client_1_1.xsd";
+
+    public static final String JavaeeWebServiceSchemaPublicId_12 =
+        "javaee_web_services_1_2.xsd";
+    public static final String JavaeeWebServiceSchemaResourcePath_12 =
+        "/javax/servlet/resources/javaee_web_services_1_2.xsd";
+
+    public static final String JavaeeWebServiceClientSchemaPublicId_12 =
+        "javaee_web_services_client_1_2.xsd";
+    public static final String JavaeeWebServiceClientSchemaResourcePath_12 =
+        "/javax/servlet/resources/javaee_web_services_client_1_2.xsd";
+
+    public static final String JavaeeWebServiceSchemaPublicId_13 =
+        "javaee_web_services_1_3.xsd";
+    public static final String JavaeeWebServiceSchemaResourcePath_13 =
+        "/javax/servlet/resources/javaee_web_services_1_3.xsd";
+
+    public static final String JavaeeWebServiceClientSchemaPublicId_13 =
+        "javaee_web_services_client_1_3.xsd";
+    public static final String JavaeeWebServiceClientSchemaResourcePath_13 =
+        "/javax/servlet/resources/javaee_web_services_client_1_3.xsd";
+
+}

==================================================
CopyParentClassLoaderRule.java
index 1fbcb5a8d7..e5203f3a16 100644
--- a/java/org/apache/catalina/startup/ContextRuleSet.java
+++ b/java/org/apache/catalina/startup/ContextRuleSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
DigesterFactory.java
index 10e52e9bbb..cbc8b0e3d1 100644
--- a/java/org/apache/catalina/startup/CopyParentClassLoaderRule.java
+++ b/java/org/apache/catalina/startup/CopyParentClassLoaderRule.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
Embedded.java
index c8ae586232..32ca1b5a84 100644
--- a/java/org/apache/catalina/startup/DigesterFactory.java
+++ b/java/org/apache/catalina/startup/DigesterFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -45,7 +45,7 @@ public class DigesterFactory {
         return newDigester(false, false, null);
     }
 
-    
+
     /**
      * Create a <code>Digester</code> parser with XML validation turned off.
      * @param rule an instance of <code>RuleSet</code> used for parsing the xml.
@@ -54,7 +54,7 @@ public class DigesterFactory {
         return newDigester(false,false,rule);
     }
 
-    
+
     /**
      * Create a <code>Digester</code> parser.
      * @param xmlValidation turn on/off xml validation
@@ -71,7 +71,7 @@ public class DigesterFactory {
 
         SchemaResolver schemaResolver = new SchemaResolver(digester);
         registerLocalSchema(schemaResolver);
-        
+
         digester.setEntityResolver(schemaResolver);
         if ( rule != null ) {
             digester.addRuleSet(rule);
@@ -126,10 +126,10 @@ public class DigesterFactory {
                 schemaResolver);
 
         // TLD
-        register(Constants.TldDtdResourcePath_11,  
+        register(Constants.TldDtdResourcePath_11,
                  Constants.TldDtdPublicId_11,
                  schemaResolver);
-        
+
         register(Constants.TldDtdResourcePath_12,
                  Constants.TldDtdPublicId_12,
                  schemaResolver);
@@ -142,7 +142,7 @@ public class DigesterFactory {
                 Constants.TldSchemaPublicId_21,
                 schemaResolver);
 
-        // web.xml    
+        // web.xml
         register(Constants.WebDtdResourcePath_22,
                  Constants.WebDtdPublicId_22,
                  schemaResolver);
@@ -166,7 +166,7 @@ public class DigesterFactory {
         register(Constants.WebCommonSchemaResourcePath_30,
                 Constants.WebCommonSchemaPublicId_30,
                 schemaResolver);
-        
+
         register(Constants.WebFragmentSchemaResourcePath_30,
                 Constants.WebFragmentSchemaPublicId_30,
                 schemaResolver);
@@ -204,7 +204,7 @@ public class DigesterFactory {
     protected static void register(String resourceURL, String resourcePublicId,
             SchemaResolver schemaResolver){
         URL url = DigesterFactory.class.getResource(resourceURL);
-   
+
         if(url == null) {
             log.warn("Could not get url for " + resourceURL);
         } else {

==================================================
EngineConfig.java
index 4b288b8f36..34210d8673 100644
--- a/java/org/apache/catalina/startup/Embedded.java
+++ b/java/org/apache/catalina/startup/Embedded.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -99,7 +99,7 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @author Craig R. McClanahan
  * @version $Id$
- * 
+ *
  * @deprecated Use {@link Tomcat} instead.
  */
 
@@ -131,7 +131,7 @@ public class Embedded  extends StandardService {
         super();
         setRealm(realm);
         setSecurityProtection();
-        
+
     }
 
 
@@ -422,14 +422,14 @@ public class Embedded  extends StandardService {
             }
 
             if (address != null) {
-                IntrospectionUtils.setProperty(connector, "address", 
+                IntrospectionUtils.setProperty(connector, "address",
                                                "" + address);
             }
             IntrospectionUtils.setProperty(connector, "port", "" + port);
 
         } catch (Exception e) {
             log.error("Couldn't create connector.");
-        } 
+        }
 
         return (connector);
 
@@ -858,7 +858,7 @@ public class Embedded  extends StandardService {
                 }
             }
         }
-        // last resort - for minimal/embedded cases. 
+        // last resort - for minimal/embedded cases.
         if(catalinaHome==null) {
             catalinaHome=System.getProperty("user.dir");
         }
@@ -889,7 +889,7 @@ public class Embedded  extends StandardService {
             }
             System.setProperty(Globals.CATALINA_BASE_PROP, catalinaBase);
         }
-        
+
         String temp = System.getProperty("java.io.tmpdir");
         if (temp == null || (!(new File(temp)).exists())
                 || (!(new File(temp)).isDirectory())) {
@@ -898,7 +898,7 @@ public class Embedded  extends StandardService {
 
     }
 
-    
+
     protected void initStreams() {
         if (redirectStreams) {
             // Replace System.out and System.err with a custom PrintStream
@@ -906,7 +906,7 @@ public class Embedded  extends StandardService {
             System.setErr(new SystemLogHandler(System.err));
         }
     }
-    
+
 
     // -------------------------------------------------------- Private Methods
 

==================================================
EngineRuleSet.java
index 8da5af2077..e69a29add8 100644
--- a/java/org/apache/catalina/startup/EngineConfig.java
+++ b/java/org/apache/catalina/startup/EngineConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ExpandWar.java
index c73a6d6836..feff5ebc8e 100644
--- a/java/org/apache/catalina/startup/EngineRuleSet.java
+++ b/java/org/apache/catalina/startup/EngineRuleSet.java
@@ -89,7 +89,7 @@ public class EngineRuleSet extends RuleSetBase {
      */
     @Override
     public void addRuleInstances(Digester digester) {
-        
+
         digester.addObjectCreate(prefix + "Engine",
                                  "org.apache.catalina.core.StandardEngine",
                                  "className");

==================================================
HomesUserDatabase.java
index c75b7e4cb0..1bc6fa4485 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -144,7 +144,7 @@ public class ExpandWar {
             throw e;
         } finally {
             if (!success) {
-                // If something went wrong, delete expanded dir to keep things 
+                // If something went wrong, delete expanded dir to keep things
                 // clean
                 deleteDir(docBase);
             }
@@ -237,9 +237,9 @@ public class ExpandWar {
      * @param dest File object representing the destination
      */
     public static boolean copy(File src, File dest) {
-        
+
         boolean result = true;
-        
+
         String files[] = null;
         if (src.isDirectory()) {
             files = src.list();
@@ -284,10 +284,10 @@ public class ExpandWar {
             }
         }
         return result;
-        
+
     }
-    
-    
+
+
     /**
      * Delete the specified directory, including all of its contents and
      * sub-directories recursively. Any failure will be logged.
@@ -324,8 +324,8 @@ public class ExpandWar {
         }
         return result;
     }
-    
-    
+
+
     /**
      * Delete the specified directory, including all of its contents and
      * sub-directories recursively. Any failure will be logged.
@@ -365,12 +365,12 @@ public class ExpandWar {
         } else {
             result = true;
         }
-        
+
         if (logFailure && !result) {
             log.error(sm.getString(
                     "expandWar.deleteFailed", dir.getAbsolutePath()));
         }
-        
+
         return result;
 
     }
@@ -388,7 +388,7 @@ public class ExpandWar {
         throws IOException {
         BufferedOutputStream output = null;
         try {
-            output = 
+            output =
                 new BufferedOutputStream(new FileOutputStream(file));
             byte buffer[] = new byte[2048];
             while (true) {

==================================================
HostConfig.java
index ce0758b13f..0a7b47e0f8 100644
--- a/java/org/apache/catalina/startup/HomesUserDatabase.java
+++ b/java/org/apache/catalina/startup/HomesUserDatabase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
HostRuleSet.java
index faa033db67..3b70dc9e45 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -71,7 +71,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class HostConfig
     implements LifecycleListener {
-    
+
     private static final Log log = LogFactory.getLog( HostConfig.class );
 
     // ----------------------------------------------------- Instance Variables
@@ -100,12 +100,12 @@ public class HostConfig
      */
     protected Host host = null;
 
-    
+
     /**
      * The JMX ObjectName of this component.
      */
     protected ObjectName oname = null;
-    
+
 
     /**
      * The string resources for this package.
@@ -126,8 +126,8 @@ public class HostConfig
      * default when a web application is deployed?
      */
     protected boolean copyXML = false;
-    
-    
+
+
     /**
      * Should we unpack WAR files when auto-deploying applications in the
      * <code>appBase</code> directory?
@@ -141,13 +141,13 @@ public class HostConfig
     protected HashMap<String, DeployedApplication> deployed =
         new HashMap<String, DeployedApplication>();
 
-    
+
     /**
-     * List of applications which are being serviced, and shouldn't be 
+     * List of applications which are being serviced, and shouldn't be
      * deployed/undeployed/redeployed at the moment.
      */
     protected ArrayList<String> serviced = new ArrayList<String>();
-    
+
 
     /**
      * The <code>Digester</code> instance used to parse context descriptors.
@@ -271,8 +271,8 @@ public class HostConfig
         this.unpackWARs = unpackWARs;
 
     }
-    
-    
+
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -308,15 +308,15 @@ public class HostConfig
 
     }
 
-    
+
     /**
      * Add a serviced application to the list.
      */
     public synchronized void addServiced(String name) {
         serviced.add(name);
     }
-    
-    
+
+
     /**
      * Is application serviced ?
      * @return state of the application
@@ -324,7 +324,7 @@ public class HostConfig
     public synchronized boolean isServiced(String name) {
         return (serviced.contains(name));
     }
-    
+
 
     /**
      * Removed a serviced application from the list.
@@ -333,7 +333,7 @@ public class HostConfig
         serviced.remove(name);
     }
 
-    
+
     /**
      * Get the instant where an application was deployed.
      * @return 0L if no application with that name is deployed, or the instant
@@ -344,11 +344,11 @@ public class HostConfig
         if (app == null) {
             return 0L;
         }
-        
+
         return app.timestamp;
     }
-    
-    
+
+
     /**
      * Has the specified application been deployed? Note applications defined
      * in server.xml will not have been deployed.
@@ -361,14 +361,14 @@ public class HostConfig
         if (app == null) {
             return false;
         }
-        
+
         return true;
     }
-    
-    
+
+
     // ------------------------------------------------------ Protected Methods
 
-    
+
     /**
      * Create the digester which will be used to parse context config files.
      */
@@ -378,12 +378,12 @@ public class HostConfig
         // Add object creation rule
         digester.addObjectCreate("Context", "org.apache.catalina.core.StandardContext",
             "className");
-        // Set the properties on that object (it doesn't matter if extra 
+        // Set the properties on that object (it doesn't matter if extra
         // properties are set)
         digester.addSetProperties("Context");
         return (digester);
     }
-    
+
     protected File returnCanonicalPath(String path) {
         File file = new File(path);
         File base = new File(System.getProperty(Globals.CATALINA_BASE_PROP));
@@ -395,7 +395,7 @@ public class HostConfig
             return file;
         }
     }
-    
+
 
     /**
      * Return a File object representing the "configuration root" directory
@@ -406,7 +406,7 @@ public class HostConfig
         if (configBase != null) {
             return configBase;
         }
-        
+
         if (host.getXmlBase()!=null) {
             configBase = returnCanonicalPath(host.getXmlBase());
         } else {
@@ -448,16 +448,16 @@ public class HostConfig
         deployWARs(appBase, filteredAppPaths);
         // Deploy expanded folders
         deployDirectories(appBase, filteredAppPaths);
-        
+
     }
 
 
     /**
      * Filter the list of application file paths to remove those that match
      * the regular expression defined by {@link Host#getDeployIgnore()}.
-     *  
+     *
      * @param unfilteredAppPaths    The list of application paths to filtert
-     * 
+     *
      * @return  The filtered list of application paths
      */
     protected String[] filterAppPaths(String[] unfilteredAppPaths) {
@@ -496,7 +496,7 @@ public class HostConfig
         File configBase = configBase();
         ContextName cn = new ContextName(name);
         String baseName = cn.getBaseName();
-        
+
         // Deploy XML descriptors from configBase
         File xml = new File(configBase, baseName + ".xml");
         if (xml.exists())
@@ -519,7 +519,7 @@ public class HostConfig
 
         if (files == null)
             return;
-        
+
         for (int i = 0; i < files.length; i++) {
             File contextXml = new File(configBase, files[i]);
 
@@ -529,7 +529,7 @@ public class HostConfig
 
                 if (isServiced(name))
                     continue;
-                
+
                 deployDescriptor(cn, contextXml);
             }
         }
@@ -544,7 +544,7 @@ public class HostConfig
         if (deploymentExists(cn.getName())) {
             return;
         }
-        
+
         DeployedApplication deployedApp = new DeployedApplication(cn.getName());
 
         // Assume this is a configuration descriptor and deploy it
@@ -638,7 +638,7 @@ public class HostConfig
                 if (expandedDocBase.exists()) {
                     deployedApp.redeployResources.put(expandedDocBase.getAbsolutePath(),
                             Long.valueOf(expandedDocBase.lastModified()));
-                    addWatchedResources(deployedApp, 
+                    addWatchedResources(deployedApp,
                             expandedDocBase.getAbsolutePath(), context);
                 } else {
                     addWatchedResources(deployedApp, null, context);
@@ -666,12 +666,12 @@ public class HostConfig
      * Deploy WAR files.
      */
     protected void deployWARs(File appBase, String[] files) {
-        
+
         if (files == null)
             return;
-        
+
         for (int i = 0; i < files.length; i++) {
-            
+
             if (files[i].equalsIgnoreCase("META-INF"))
                 continue;
             if (files[i].equalsIgnoreCase("WEB-INF"))
@@ -679,9 +679,9 @@ public class HostConfig
             File war = new File(appBase, files[i]);
             if (files[i].toLowerCase(Locale.ENGLISH).endsWith(".war") && war.isFile()
                     && !invalidWars.contains(files[i]) ) {
-                
+
                 ContextName cn = new ContextName(files[i]);
-                
+
                 // Check for WARs with /../ /./ or similar sequences in the name
                 if (!validateContextPath(appBase, cn.getBaseName())) {
                     log.error(sm.getString(
@@ -692,7 +692,7 @@ public class HostConfig
 
                 if (isServiced(cn.getName()))
                     continue;
-                
+
                 deployWAR(cn, war);
             }
         }
@@ -702,10 +702,10 @@ public class HostConfig
     private boolean validateContextPath(File appBase, String contextPath) {
         // More complicated than the ideal as the canonical path may or may
         // not end with File.separator for a directory
-        
+
         StringBuilder docBase;
         String canonicalDocBase = null;
-        
+
         try {
             String canonicalAppBase = appBase.getCanonicalPath();
             docBase = new StringBuilder(canonicalAppBase);
@@ -717,10 +717,10 @@ public class HostConfig
             }
             // At this point docBase should be canonical but will not end
             // with File.separator
-            
+
             canonicalDocBase =
                 (new File(docBase.toString())).getCanonicalPath();
-    
+
             // If the canonicalDocBase ends with File.separator, add one to
             // docBase before they are compared
             if (canonicalDocBase.endsWith(File.separator)) {
@@ -729,9 +729,9 @@ public class HostConfig
         } catch (IOException ioe) {
             return false;
         }
-        
+
         // Compare the two. If they are not the same, the contextPath must
-        // have /../ like sequences in it 
+        // have /../ like sequences in it
         return canonicalDocBase.equals(docBase.toString());
     }
 
@@ -740,10 +740,10 @@ public class HostConfig
      * @param war
      */
     protected void deployWAR(ContextName cn, File war) {
-        
+
         if (deploymentExists(cn.getName()))
             return;
-        
+
         // Checking for a nested /META-INF/context.xml
         JarFile jar = null;
         JarEntry entry = null;
@@ -757,7 +757,7 @@ public class HostConfig
                     cn.getBaseName() + "/META-INF/context.xml");
         }
         boolean xmlInWar = false;
-        
+
         if (deployXML && !xml.exists()) {
             try {
                 jar = new JarFile(war);
@@ -767,7 +767,7 @@ public class HostConfig
                 }
                 if ((copyXML || unpackWARs) && xmlInWar) {
                     istream = jar.getInputStream(entry);
-                    
+
                     ostream =
                         new BufferedOutputStream
                         (new FileOutputStream(xml), 1024);
@@ -815,11 +815,11 @@ public class HostConfig
                 }
             }
         }
-        
+
         DeployedApplication deployedApp = new DeployedApplication(cn.getName());
-        
+
         // Deploy the application in this WAR file
-        if(log.isInfoEnabled()) 
+        if(log.isInfoEnabled())
             log.info(sm.getString("hostConfig.deployWar",
                     war.getAbsolutePath()));
 
@@ -922,7 +922,7 @@ public class HostConfig
             log.error(sm.getString("hostConfig.deployWar.error",
                     war.getAbsolutePath()), t);
         }
-        
+
         deployed.put(cn.getName(), deployedApp);
     }
 
@@ -934,7 +934,7 @@ public class HostConfig
 
         if (files == null)
             return;
-        
+
         for (int i = 0; i < files.length; i++) {
 
             if (files[i].equalsIgnoreCase("META-INF"))
@@ -953,20 +953,20 @@ public class HostConfig
         }
     }
 
-    
+
     /**
      * @param cn
      * @param dir
      */
     protected void deployDirectory(ContextName cn, File dir) {
-        
+
         if (deploymentExists(cn.getName()))
             return;
 
         DeployedApplication deployedApp = new DeployedApplication(cn.getName());
 
         // Deploy the application in this directory
-        if( log.isInfoEnabled() ) 
+        if( log.isInfoEnabled() )
             log.info(sm.getString("hostConfig.deployDir",
                     dir.getAbsolutePath()));
         try {
@@ -1042,24 +1042,24 @@ public class HostConfig
             addWatchedResources(deployedApp, dir.getAbsolutePath(), context);
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error(sm.getString("hostConfig.deployDir.error", 
+            log.error(sm.getString("hostConfig.deployDir.error",
                     dir.getAbsolutePath()), t);
         }
 
         deployed.put(cn.getName(), deployedApp);
     }
 
-    
+
     /**
      * Check if a webapp is already deployed in this host.
-     * 
+     *
      * @param contextName of the context which will be checked
      */
     protected boolean deploymentExists(String contextName) {
         return (deployed.containsKey(contextName) ||
                 (host.findChild(contextName) != null));
     }
-    
+
 
     /**
      * Add watched resources to the specified Context.
@@ -1095,11 +1095,11 @@ public class HostConfig
             if(log.isDebugEnabled())
                 log.debug("Watching WatchedResource '" +
                         resource.getAbsolutePath() + "'");
-            app.reloadResources.put(resource.getAbsolutePath(), 
+            app.reloadResources.put(resource.getAbsolutePath(),
                     Long.valueOf(resource.lastModified()));
         }
     }
-    
+
 
     /**
      * Check resources for redeployment and reloading.
@@ -1171,7 +1171,7 @@ public class HostConfig
                 // Undeploy application
                 if (log.isInfoEnabled())
                     log.info(sm.getString("hostConfig.undeploy", app.name));
-                ContainerBase context = 
+                ContainerBase context =
                     (ContainerBase) host.findChild(app.name);
                 try {
                     host.removeChild(context);
@@ -1232,7 +1232,7 @@ public class HostConfig
                         "] reload resource " + resource);
             long lastModified =
                 app.reloadResources.get(resources[i]).longValue();
-            if ((!resource.exists() && lastModified != 0L) 
+            if ((!resource.exists() && lastModified != 0L)
                 || (resource.lastModified() != lastModified)) {
                 // Reload application
                 if(log.isInfoEnabled())
@@ -1247,7 +1247,7 @@ public class HostConfig
                     log.warn(sm.getString
                              ("hostConfig.context.restart", app.name), e);
                 }
-                // If the context was not started (for example an error 
+                // If the context was not started (for example an error
                 // in web.xml) we'll still get to try to start
                 try {
                     context.start();
@@ -1263,8 +1263,8 @@ public class HostConfig
             }
         }
     }
-    
-    
+
+
     /**
      * Process a "start" event for this Host.
      */
@@ -1282,7 +1282,7 @@ public class HostConfig
         } catch (Exception e) {
             log.error(sm.getString("hostConfig.jmx.register", oname), e);
         }
-        
+
         if (host.getCreateDirs()) {
             File[] dirs = new File[] {host.getAppBaseFile(),configBase()};
             for (int i=0; i<dirs.length; i++) {
@@ -1301,7 +1301,7 @@ public class HostConfig
 
         if (host.getDeployOnStartup())
             deployApps();
-        
+
     }
 
 
@@ -1333,7 +1333,7 @@ public class HostConfig
 
         if (host.getAutoDeploy()) {
             // Check for resources modification to trigger redeployment
-            DeployedApplication[] apps = 
+            DeployedApplication[] apps =
                 deployed.values().toArray(new DeployedApplication[0]);
             for (int i = 0; i < apps.length; i++) {
                 if (!isServiced(apps[i].name))
@@ -1345,7 +1345,7 @@ public class HostConfig
 
     }
 
-    
+
     /**
      * Check status of a specific webapp, for use with stuff like management webapps.
      */
@@ -1362,15 +1362,15 @@ public class HostConfig
      * Add a new Context to be managed by us.
      * Entry point for the admin webapp, and other JMX Context controllers.
      */
-    public void manageApp(Context context)  {    
+    public void manageApp(Context context)  {
 
         String contextName = context.getName();
-        
+
         if (deployed.containsKey(contextName))
             return;
 
         DeployedApplication deployedApp = new DeployedApplication(contextName);
-        
+
         // Add the associated docBase to the redeployed list if it's a WAR
         boolean isWar = false;
         if (context.getDocBase() != null) {
@@ -1413,22 +1413,22 @@ public class HostConfig
 
 
     /**
-     * This class represents the state of a deployed application, as well as 
+     * This class represents the state of a deployed application, as well as
      * the monitored resources.
      */
     protected static class DeployedApplication {
         public DeployedApplication(String name) {
             this.name = name;
         }
-        
+
         /**
-         * Application context path. The assertion is that 
+         * Application context path. The assertion is that
          * (host.getChild(name) != null).
          */
         public String name;
-        
+
         /**
-         * Any modification of the specified (static) resources will cause a 
+         * Any modification of the specified (static) resources will cause a
          * redeployment of the application. If any of the specified resources is
          * removed, the application will be undeployed. Typically, this will
          * contain resources like the context.xml file, a compressed WAR path.
@@ -1438,7 +1438,7 @@ public class HostConfig
             new LinkedHashMap<String, Long>();
 
         /**
-         * Any modification of the specified (static) resources will cause a 
+         * Any modification of the specified (static) resources will cause a
          * reload of the application. This will typically contain resources
          * such as the web.xml of a webapp, but can be configured to contain
          * additional descriptors.

==================================================
LifecycleListenerRule.java
index 714193ee5a..da614c65bc 100644
--- a/java/org/apache/catalina/startup/HostRuleSet.java
+++ b/java/org/apache/catalina/startup/HostRuleSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
NamingRuleSet.java
index 2f52cb1339..8d4ceaee1f 100644
--- a/java/org/apache/catalina/startup/LocalStrings_es.properties
+++ b/java/org/apache/catalina/startup/LocalStrings_es.properties
@@ -42,7 +42,7 @@ contextConfig.inputStreamFile = No puedo procesar el fichero [{0}] para las anot
 contextConfig.inputStreamJar = No puedo procesar la entrada de Jar [{0}] desde el Jar [{1}] para las anotaciones
 contextConfig.inputStreamJndi = No puedo procesar el elemento de recurso [{0}] para las anotaciones
 contextConfig.invalidSci = No se pudo crear el ServletContentInitializer [{0}]
-contextConfig.invalidSciHandlesTypes = No puedo cargar la clase [{0}] para revisar contra la anotaci\u00F3n  @HandlesTypes de uno o m\u00E1s ServletContentInitializers. 
+contextConfig.invalidSciHandlesTypes = No puedo cargar la clase [{0}] para revisar contra la anotaci\u00F3n  @HandlesTypes de uno o m\u00E1s ServletContentInitializers.
 contextConfig.jarUrl = La conexi\u00F3n creada para la URL [{0}] no era una JarUrlConnection
 contextConfig.jar = No puedo crear el recurso [{0}] para las anotaciones
 contextConfig.jndiUrl = No puedo procesar la URL JNDI [{0}] para las anotaciones
@@ -121,5 +121,5 @@ userConfig.start = "UserConfig"\: Tratamiento del "START"
 userConfig.stop = "UserConfig"\: Tratamiento del "STOP"
 webRuleSet.absoluteOrdering = Elemento <absolute-ordering> no v\u00E1lido en web-fragment.xml y ser\u00E1 ignorado
 webRuleSet.relativeOrdering = elemento <ordering> no v\u00E1lido en web.xml y ser\u00E1 ignorado
-xmlErrorHandler.error = Error no fatal [{0}] reportado por el proceso [{1}]. 
-xmlErrorHandler.warning = Aviso [{0}] reportado por el proceso [{1}]. 
+xmlErrorHandler.error = Error no fatal [{0}] reportado por el proceso [{1}].
+xmlErrorHandler.warning = Aviso [{0}] reportado por el proceso [{1}].

==================================================
PasswdUserDatabase.java
index c1433c3e9f..41e0610fd8 100644
--- a/java/org/apache/catalina/startup/NamingRuleSet.java
+++ b/java/org/apache/catalina/startup/NamingRuleSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
RealmRuleSet.java
index 1fd2f606c8..1fe4d0c396 100644
--- a/java/org/apache/catalina/startup/PasswdUserDatabase.java
+++ b/java/org/apache/catalina/startup/PasswdUserDatabase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
SetAllPropertiesRule.java
index bb569d2167..9444442252 100644
--- a/java/org/apache/catalina/startup/RealmRuleSet.java
+++ b/java/org/apache/catalina/startup/RealmRuleSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
SetContextPropertiesRule.java
index 976765d588..fd4ecb08fa 100644
--- a/java/org/apache/catalina/startup/SetAllPropertiesRule.java
+++ b/java/org/apache/catalina/startup/SetAllPropertiesRule.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,16 +26,16 @@ import org.xml.sax.Attributes;
 
 /**
  * Rule that uses the introspection utils to set properties.
- * 
+ *
  * @author Remy Maucherat
  * @author Filip Hanik
  */
 public class SetAllPropertiesRule extends Rule {
 
-    
+
     // ----------------------------------------------------------- Constructors
     public SetAllPropertiesRule() {}
-    
+
     public SetAllPropertiesRule(String[] exclude) {
         for (int i=0; i<exclude.length; i++ ) if (exclude[i]!=null) this.excludes.put(exclude[i],exclude[i]);
     }
@@ -64,8 +64,8 @@ public class SetAllPropertiesRule extends Rule {
             }
             String value = attributes.getValue(i);
             if ( !excludes.containsKey(name)) {
-                if (!digester.isFakeAttribute(digester.peek(), name) 
-                        && !IntrospectionUtils.setProperty(digester.peek(), name, value) 
+                if (!digester.isFakeAttribute(digester.peek(), name)
+                        && !IntrospectionUtils.setProperty(digester.peek(), name, value)
                         && digester.getRulesValidation()) {
                     digester.getLogger().warn("[SetAllPropertiesRule]{" + digester.getMatch() +
                             "} Setting property '" + name + "' to '" +

==================================================
SetNextNamingRule.java
index 97d7df3617..c9e58a672c 100644
--- a/java/org/apache/catalina/startup/SetContextPropertiesRule.java
+++ b/java/org/apache/catalina/startup/SetContextPropertiesRule.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -23,9 +23,9 @@ import org.apache.tomcat.util.digester.Rule;
 import org.xml.sax.Attributes;
 
 /**
- * Rule that uses the introspection utils to set properties of a context 
+ * Rule that uses the introspection utils to set properties of a context
  * (everything except "path").
- * 
+ *
  * @author Remy Maucherat
  */
 public class SetContextPropertiesRule extends Rule {
@@ -60,8 +60,8 @@ public class SetContextPropertiesRule extends Rule {
                 continue;
             }
             String value = attributes.getValue(i);
-            if (!digester.isFakeAttribute(digester.peek(), name) 
-                    && !IntrospectionUtils.setProperty(digester.peek(), name, value) 
+            if (!digester.isFakeAttribute(digester.peek(), name)
+                    && !IntrospectionUtils.setProperty(digester.peek(), name, value)
                     && digester.getRulesValidation()) {
                 digester.getLogger().warn("[SetContextPropertiesRule]{" + digester.getMatch() +
                         "} Setting property '" + name + "' to '" +

==================================================
TldConfig.java
index 8c0fc65812..57e9e1019f 100644
--- a/java/org/apache/catalina/startup/SetNextNamingRule.java
+++ b/java/org/apache/catalina/startup/SetNextNamingRule.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.catalina.startup;
@@ -30,9 +30,9 @@ import org.apache.tomcat.util.digester.Rule;
  * commonly used to establish parent-child relationships.</p>
  *
  * <p>This rule now supports more flexible method matching by default.
- * It is possible that this may break (some) code 
+ * It is possible that this may break (some) code
  * written against release 1.1.1 or earlier.
- * </p> 
+ * </p>
  */
 
 public class SetNextNamingRule extends Rule {
@@ -40,7 +40,7 @@ public class SetNextNamingRule extends Rule {
 
     // ----------------------------------------------------------- Constructors
 
-    
+
     /**
      * Construct a "set next" rule with the specified method name.
      *
@@ -79,11 +79,11 @@ public class SetNextNamingRule extends Rule {
 
     /**
      * Process the end of this element.
-     * 
-     * @param namespace the namespace URI of the matching element, or an 
+     *
+     * @param namespace the namespace URI of the matching element, or an
      *   empty string if the parser is not namespace aware or the element has
      *   no namespace
-     * @param name the local name if the parser is namespace aware, or just 
+     * @param name the local name if the parser is namespace aware, or just
      *   the element name otherwise
      */
     @Override
@@ -99,7 +99,7 @@ public class SetNextNamingRule extends Rule {
         } else {
             namingResources = (NamingResources) parent;
         }
-        
+
         // Call the specified method
         IntrospectionUtils.callMethod1(namingResources, methodName,
                 child, paramType, digester.getClassLoader());

==================================================
TldRuleSet.java
index e7756f0fb6..744955446e 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -60,7 +60,7 @@ public final class TldConfig  implements LifecycleListener {
     private static final String TLD_EXT = ".tld";
     private static final String WEB_INF = "/WEB-INF/";
     private static final String WEB_INF_LIB = "/WEB-INF/lib/";
-    
+
     // Names of JARs that are known not to contain any TLDs
     private static volatile Set<String> noTldJars = null;
 
@@ -84,7 +84,7 @@ public final class TldConfig  implements LifecycleListener {
      */
     private static Digester createTldDigester(boolean namespaceAware,
             boolean validation) {
-        
+
         Digester digester = null;
         if (!namespaceAware && !validation) {
             if (tldDigesters[0] == null) {
@@ -171,7 +171,7 @@ public final class TldConfig  implements LifecycleListener {
     /**
      * Sets the list of JARs that are known not to contain any TLDs.
      *
-     * @param jarNames List of comma-separated names of JAR files that are 
+     * @param jarNames List of comma-separated names of JAR files that are
      * known not to contain any TLDs.
      */
     public static void setNoTldJars(String jarNames) {
@@ -214,10 +214,10 @@ public final class TldConfig  implements LifecycleListener {
     /**
      * Scan for and configure all tag library descriptors found in this
      * web application.
-     * 
+     *
      * This supports a Tomcat-specific extension to the TLD search
      * order defined in the JSP spec. It allows tag libraries packaged as JAR
-     * files to be shared by web applications by simply dropping them in a 
+     * files to be shared by web applications by simply dropping them in a
      * location that all web applications have access to (e.g.,
      * <CATALINA_HOME>/lib). It also supports some of the weird and
      * wonderful arrangements present when Tomcat gets embedded.
@@ -235,13 +235,13 @@ public final class TldConfig  implements LifecycleListener {
          * 2. web.xml entries
          * 3. JARS in WEB-INF/lib & TLDs under WEB-INF (equal priority)
          * 4. Additional entries from the container
-         * 
+         *
          * Keep processing order in sync with o.a.j.compiler.TldLocationsCache
          */
-        
+
         // Stage 2 - web.xml entries
         tldScanWebXml();
-        
+
         // Stage 3a - TLDs under WEB-INF (not lib or classes)
         tldScanResourcePaths(WEB_INF);
 
@@ -250,7 +250,7 @@ public final class TldConfig  implements LifecycleListener {
         jarScanner.scan(context.getServletContext(),
                 context.getLoader().getClassLoader(),
                 new TldJarScannerCallback(), noTldJars);
-        
+
         // Now add all the listeners we found to the listeners for this context
         String list[] = getTldListeners();
 
@@ -290,13 +290,13 @@ public final class TldConfig  implements LifecycleListener {
 
     /**
      * Get the taglib entries from web.xml and add them to the map.
-     * 
+     *
      * This is not kept in sync with o.a.j.compiler.TldLocationsCache as this
      * code needs to scan the TLDs listed in web.xml whereas Jasper only needs
      * the URI to TLD mappings.
      */
     private void tldScanWebXml() {
-        
+
         if (log.isTraceEnabled()) {
             log.trace(sm.getString("tldConfig.webxmlStart"));
         }
@@ -344,7 +344,7 @@ public final class TldConfig  implements LifecycleListener {
             }
         }
     }
-    
+
     /*
      * Scans the web application's sub-directory identified by startPath,
      * along with its sub-directories, for TLDs.
@@ -352,7 +352,7 @@ public final class TldConfig  implements LifecycleListener {
      * Initially, rootPath equals /WEB-INF/. The /WEB-INF/classes and
      * /WEB-INF/lib sub-directories are excluded from the search, as per the
      * JSP 2.0 spec.
-     * 
+     *
      * Keep in sync with o.a.j.comiler.TldLocationsCache
      */
     private void tldScanResourcePaths(String startPath) {
@@ -400,7 +400,7 @@ public final class TldConfig  implements LifecycleListener {
             }
         }
     }
-    
+
     /*
      * Scans the directory identified by startPath, along with its
      * sub-directories, for TLDs.
@@ -448,17 +448,17 @@ public final class TldConfig  implements LifecycleListener {
      * (or a sub-directory of it).
      *
      * @param jarConn The JarURLConnection to the JAR file to scan
-     * 
+     *
      * Keep in sync with o.a.j.comiler.TldLocationsCache
      */
     private void tldScanJar(JarURLConnection jarConn) {
 
         Jar jar = null;
         InputStream is;
-        
+
         try {
             jar = JarFactory.newInstance(jarConn.getURL());
-            
+
             jar.nextEntry();
             String entryName = jar.getEntryName();
             while (entryName != null) {
@@ -494,7 +494,7 @@ public final class TldConfig  implements LifecycleListener {
 
     /*
      * Scan the TLD contents in the specified input stream, and register
-     * any application event listeners found there.  <b>NOTE</b> - This 
+     * any application event listeners found there.  <b>NOTE</b> - This
      * method ensure that the InputStream is correctly closed.
      *
      * @param resourceStream InputStream containing a tag library descriptor
@@ -503,11 +503,11 @@ public final class TldConfig  implements LifecycleListener {
      */
     private XmlErrorHandler tldScanStream(InputStream resourceStream)
             throws IOException {
-        
+
         InputSource source = new InputSource(resourceStream);
-        
+
         XmlErrorHandler result = new XmlErrorHandler();
-        
+
         synchronized (tldDigester) {
             try {
                 tldDigester.setErrorHandler(result);
@@ -532,7 +532,7 @@ public final class TldConfig  implements LifecycleListener {
             log.error(sm.getString("tldConfig.cce", event.getLifecycle()), e);
             return;
         }
-        
+
         if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) {
             init();
         } else if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
@@ -548,7 +548,7 @@ public final class TldConfig  implements LifecycleListener {
             listeners.clear();
         }
     }
-    
+
     private void init() {
         if (tldDigester == null){
             tldDigester = createTldDigester(context.getTldNamespaceAware(),

==================================================
Tomcat.java
index 8aef41416e..7d50bff7ba 100644
--- a/java/org/apache/catalina/startup/TldRuleSet.java
+++ b/java/org/apache/catalina/startup/TldRuleSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -90,10 +90,10 @@ public class TldRuleSet extends RuleSetBase {
     public void addRuleInstances(Digester digester) {
 
         // Note the sharing of state between rules
-        TaglibUriRule taglibUriRule = new TaglibUriRule(); 
+        TaglibUriRule taglibUriRule = new TaglibUriRule();
 
         digester.addRule(prefix + "taglib", new TaglibRule(taglibUriRule));
-        
+
         digester.addRule(prefix + "taglib/uri", taglibUriRule);
 
         digester.addRule(prefix + "taglib/listener/listener-class",
@@ -109,11 +109,11 @@ public class TldRuleSet extends RuleSetBase {
  */
 final class TaglibRule extends Rule {
     private final TaglibUriRule taglibUriRule;
-    
+
     public TaglibRule(TaglibUriRule taglibUriRule) {
         this.taglibUriRule = taglibUriRule;
     }
-    
+
     @Override
     public void body(String namespace, String name, String text)
     throws Exception {
@@ -123,10 +123,10 @@ final class TaglibRule extends Rule {
 }
 
 final class TaglibUriRule extends Rule {
-    
+
     // This is set to false for each file processed by the TaglibRule
     private boolean duplicateUri;
-    
+
     public TaglibUriRule() {
     }
 
@@ -154,7 +154,7 @@ final class TaglibUriRule extends Rule {
             tldConfig.addTaglibUri(text);
         }
     }
-    
+
     public boolean isDuplicateUri() {
         return duplicateUri;
     }
@@ -166,9 +166,9 @@ final class TaglibUriRule extends Rule {
 }
 
 final class TaglibListenerRule extends Rule {
-    
+
     private final TaglibUriRule taglibUriRule;
-    
+
     public TaglibListenerRule(TaglibUriRule taglibUriRule) {
         this.taglibUriRule = taglibUriRule;
     }
@@ -178,11 +178,11 @@ final class TaglibListenerRule extends Rule {
             throws Exception {
         TldConfig tldConfig =
             (TldConfig) digester.peek(digester.getCount() - 1);
-        
+
         // Only process the listener if the URI is not a duplicate
         if (!taglibUriRule.isDuplicateUri()) {
             tldConfig.addApplicationListener(text);
         }
     }
-    
+
 }
\ No newline at end of file

==================================================
Tool.java
index d00521d729..07dfadaf11 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -56,66 +56,66 @@ import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.catalina.realm.RealmBase;
 
-// TODO: lazy init for the temp dir - only when a JSP is compiled or 
-// get temp dir is called we need to create it. This will avoid the 
+// TODO: lazy init for the temp dir - only when a JSP is compiled or
+// get temp dir is called we need to create it. This will avoid the
 // need for the baseDir
 
-// TODO: allow contexts without a base dir - i.e. 
+// TODO: allow contexts without a base dir - i.e.
 // only programmatic. This would disable the default servlet.
 
 /**
  * Minimal tomcat starter for embedding/unit tests.
- * 
- * Tomcat supports multiple styles of configuration and 
+ *
+ * Tomcat supports multiple styles of configuration and
  * startup - the most common and stable is server.xml-based,
  * implemented in org.apache.catalina.startup.Bootstrap.
  *
- * This class is for use in apps that embed tomcat. 
+ * This class is for use in apps that embed tomcat.
  * Requirements:
- * 
+ *
  * - all tomcat classes and possibly servlets are in the classpath.
  * ( for example all is in one big jar, or in eclipse CP, or in any other
  * combination )
- * 
+ *
  * - we need one temporary directory for work files
- * 
- * - no config file is required. This class provides methods to 
- * use if you have a webapp with a web.xml file, but it is 
+ *
+ * - no config file is required. This class provides methods to
+ * use if you have a webapp with a web.xml file, but it is
  * optional - you can use your own servlets.
- * 
+ *
  * There are a variety of 'add' methods to configure servlets and webapps. These
  * methods, by default, create a simple in-memory security realm and apply it.
  * If you need more complex security processing, you can define a subclass of
  * this class.
- * 
+ *
  * This class provides a set of convenience methods for configuring webapp
  * contexts, all overloads of the method <pre>addWebapp</pre>. These methods
  * create a webapp context, configure it, and then add it to a {@link Host}.
  * They do not use a global default web.xml; rather, they add a lifecycle
  * listener that adds the standard DefaultServlet, JSP processing, and welcome
  * files.
- * 
+ *
  * In complex cases, you may prefer to use the ordinary Tomcat API to create
  * webapp contexts; for example, you might need to install a custom Loader
  * before the call to {@link Host#addChild(Container)}. To replicate the basic
  * behavior of the <pre>addWebapp</pre> methods, you may want to call three
- * methods of this class: {@link #getDefaultRealm()}, 
- * {@link #noDefaultWebXmlPath()}, and {@link #getDefaultWebXmlListener()}. 
- * 
+ * methods of this class: {@link #getDefaultRealm()},
+ * {@link #noDefaultWebXmlPath()}, and {@link #getDefaultWebXmlListener()}.
+ *
  * {@link #getDefaultRealm()} returns the simple security realm.
- * 
+ *
  * {@link #getDefaultWebXmlListener()} returns a {@link LifecycleListener} that
  * adds the standard DefaultServlet, JSP processing, and welcome files. If you
  * add this listener, you must prevent Tomcat from applying any standard global
  * web.xml with ...
- * 
+ *
  * {@link #noDefaultWebXmlPath()} returns a dummy pathname to configure to
- * prevent {@link ContextConfig} from trying to apply a global web.xml file. 
- * 
+ * prevent {@link ContextConfig} from trying to apply a global web.xml file.
+ *
  * This class provides a main() and few simple CLI arguments,
  * see setters for doc. It can be used for simple tests and
  * demo.
- * 
+ *
  * @see <a href="http://svn.apache.org/repos/asf/tomcat/trunk/test/org/apache/catalina/startup/TestTomcat.java">TestTomcat</a>
  * @author Costin Manolache
  */
@@ -126,22 +126,22 @@ public class Tomcat {
     protected Service service;
     protected Engine engine;
     protected Connector connector; // for more - customize the classes
-    
+
     // To make it a bit easier to config for the common case
-    // ( one host, one context ). 
+    // ( one host, one context ).
     protected Host host;
 
-    // TODO: it's easy to add support for more hosts - but is it 
+    // TODO: it's easy to add support for more hosts - but is it
     // really needed ?
 
     // TODO: allow use of in-memory connector
-    
+
     protected int port = 8080;
     protected String hostname = "localhost";
     protected String basedir;
-    
-    // Default in-memory realm, will be set by default on 
-    // created contexts. Can be replaced with setRealm() on 
+
+    // Default in-memory realm, will be set by default on
+    // created contexts. Can be replaced with setRealm() on
     // the context.
     protected Realm defaultRealm;
     private Map<String, String> userPass = new HashMap<String, String>();
@@ -149,111 +149,111 @@ public class Tomcat {
         new HashMap<String, List<String>>();
     private Map<String, Principal> userPrincipals =
         new HashMap<String, Principal>();
-    
+
     public Tomcat() {
         // NOOP
     }
-    
+
     /**
-     * Tomcat needs a directory for temp files. This should be the 
-     * first method called. 
-     * 
+     * Tomcat needs a directory for temp files. This should be the
+     * first method called.
+     *
      * By default, if this method is not called, we use:
-     *  - system properties - catalina.base, catalina.home 
+     *  - system properties - catalina.base, catalina.home
      *  - $HOME/tomcat.$PORT
      * ( /tmp doesn't seem a good choice for security ).
-     *   
      *
-     * TODO: better default ? Maybe current dir ? 
+     *
+     * TODO: better default ? Maybe current dir ?
      * TODO: disable work dir if not needed ( no jsp, etc ).
      */
     public void setBaseDir(String basedir) {
         this.basedir = basedir;
     }
 
-    /** 
-     * Set the port for the default connector. Must 
+    /**
+     * Set the port for the default connector. Must
      * be called before start().
      */
     public void setPort(int port) {
         this.port = port;
     }
-    
-    /** 
-     * The the hostname of the default host, default is 
+
+    /**
+     * The the hostname of the default host, default is
      * 'localhost'.
      */
     public void setHostname(String s) {
         hostname = s;
     }
 
-    /** 
+    /**
      * Add a webapp using normal WEB-INF/web.xml if found.
-     * 
+     *
      * @param contextPath
      * @param baseDir
      * @return new Context
-     * @throws ServletException 
+     * @throws ServletException
      */
-    public Context addWebapp(String contextPath, 
+    public Context addWebapp(String contextPath,
                                      String baseDir) throws ServletException {
-        
-        return addWebapp(getHost(), contextPath, baseDir);    
+
+        return addWebapp(getHost(), contextPath, baseDir);
     }
-    
-    
-    /** 
+
+
+    /**
      * Add a context - programmatic mode, no web.xml used.
      *
      * API calls equivalent with web.xml:
-     * 
+     *
      * context-param
      *  ctx.addParameter("name", "value");
-     *     
+     *
      *
      * error-page
      *    ErrorPage ep = new ErrorPage();
      *    ep.setErrorCode(500);
      *    ep.setLocation("/error.html");
      *    ctx.addErrorPage(ep);
-     *   
+     *
      * ctx.addMimeMapping("ext", "type");
-     * 
+     *
      * Note: If you reload the Context, all your configuration will be lost. If
      * you need reload support, consider using a LifecycleListener to provide
      * your configuration.
-     *  
+     *
      * TODO: add the rest
      *
      *  @param contextPath "" for root context.
-     *  @param baseDir base dir for the context, for static files. Must exist, 
+     *  @param baseDir base dir for the context, for static files. Must exist,
      *  relative to the server home
      */
-    public Context addContext(String contextPath, 
+    public Context addContext(String contextPath,
                                       String baseDir) {
         return addContext(getHost(), contextPath, baseDir);
     }
 
     /**
-     * Equivalent with 
+     * Equivalent with
      *  <servlet><servlet-name><servlet-class>.
-     *  
-     * In general it is better/faster to use the method that takes a 
-     * Servlet as param - this one can be used if the servlet is not 
+     *
+     * In general it is better/faster to use the method that takes a
+     * Servlet as param - this one can be used if the servlet is not
      * commonly used, and want to avoid loading all deps.
      * ( for example: jsp servlet )
-     * 
+     *
      * You can customize the returned servlet, ex:
-     * 
+     *
      *    wrapper.addInitParameter("name", "value");
-     *    
+     *
      * @param contextPath   Context to add Servlet to
      * @param servletName   Servlet name (used in mappings)
      * @param servletClass  The class to be used for the Servlet
      * @return The wrapper for the servlet
      */
-    public Wrapper addServlet(String contextPath, 
-            String servletName, 
+    public Wrapper addServlet(String contextPath,
+            String servletName,
             String servletClass) {
         Container ctx = getHost().findChild(contextPath);
         return addServlet((Context) ctx, servletName, servletClass);
@@ -266,15 +266,15 @@ public class Tomcat {
      * @param servletClass  The class to be used for the Servlet
      * @return The wrapper for the servlet
      */
-    public static Wrapper addServlet(Context ctx, 
-                                      String servletName, 
+    public static Wrapper addServlet(Context ctx,
+                                      String servletName,
                                       String servletClass) {
         // will do class for name and set init params
         Wrapper sw = ctx.createWrapper();
         sw.setServletClass(servletClass);
         sw.setName(servletName);
         ctx.addChild(sw);
-        
+
         return sw;
     }
 
@@ -286,8 +286,8 @@ public class Tomcat {
      * @param servlet       The Servlet to add
      * @return The wrapper for the servlet
      */
-    public Wrapper addServlet(String contextPath, 
-            String servletName, 
+    public Wrapper addServlet(String contextPath,
+            String servletName,
             Servlet servlet) {
         Container ctx = getHost().findChild(contextPath);
         return addServlet((Context) ctx, servletName, servlet);
@@ -301,20 +301,20 @@ public class Tomcat {
      * @return The wrapper for the servlet
      */
     public static Wrapper addServlet(Context ctx,
-                                      String servletName, 
+                                      String servletName,
                                       Servlet servlet) {
         // will do class for name and set init params
         Wrapper sw = new ExistingStandardWrapper(servlet);
         sw.setName(servletName);
         ctx.addChild(sw);
-        
+
         return sw;
     }
-    
+
 
     /**
      * Initialise the server.
-     * 
+     *
      * @throws LifecycleException
      */
     public void init() throws LifecycleException {
@@ -322,12 +322,12 @@ public class Tomcat {
         getConnector();
         server.init();
     }
-    
-    
+
+
     /**
      * Start the server.
-     * 
-     * @throws LifecycleException 
+     *
+     * @throws LifecycleException
      */
     public void start() throws LifecycleException {
         getServer();
@@ -335,10 +335,10 @@ public class Tomcat {
         server.start();
     }
 
-    /** 
+    /**
      * Stop the server.
-     * 
-     * @throws LifecycleException 
+     *
+     * @throws LifecycleException
      */
     public void stop() throws LifecycleException {
         getServer();
@@ -355,18 +355,18 @@ public class Tomcat {
         server.destroy();
         // Could null out objects here
     }
-    
-    /** 
-     * Add a user for the in-memory realm. All created apps use this 
+
+    /**
+     * Add a user for the in-memory realm. All created apps use this
      * by default, can be replaced using setRealm().
-     *  
+     *
      */
     public void addUser(String user, String pass) {
         userPass.put(user, pass);
     }
-    
+
     /**
-     * @see #addUser(String, String) 
+     * @see #addUser(String, String)
      */
     public void addRole(String user, String role) {
         List<String> roles = userRoles.get(user);
@@ -379,14 +379,14 @@ public class Tomcat {
 
     // ------- Extra customization -------
     // You can tune individual tomcat objects, using internal APIs
-    
-    /** 
-     * Get the default http connector. You can set more 
+
+    /**
+     * Get the default http connector. You can set more
      * parameters - the port is already initialized.
-     * 
+     *
      * Alternatively, you can construct a Connector and set any params,
      * then call addConnector(Connector)
-     * 
+     *
      * @return A connector object that can be customized
      */
     public Connector getConnector() {
@@ -398,20 +398,20 @@ public class Tomcat {
         // default to nio. I'm having strange problems with apr
         // XXX: jfclere weird... Don't add the AprLifecycleListener then.
         // and for the use case the speed benefit wouldn't matter.
-        
+
         connector = new Connector("HTTP/1.1");
-        // connector = new Connector("org.apache.coyote.http11.Http11Protocol"); 
+        // connector = new Connector("org.apache.coyote.http11.Http11Protocol");
         connector.setPort(port);
         service.addConnector( connector );
         return connector;
     }
-    
+
     public void setConnector(Connector connector) {
         this.connector = connector;
     }
-    
-    /** 
-     * Get the service object. Can be used to add more 
+
+    /**
+     * Get the service object. Can be used to add more
      * connectors and few other global settings.
      */
     public Service getService() {
@@ -419,17 +419,17 @@ public class Tomcat {
         return service;
     }
 
-    /** 
+    /**
      * Sets the current host - all future webapps will
-     * be added to this host. When tomcat starts, the 
+     * be added to this host. When tomcat starts, the
      * host will be the default host.
-     * 
+     *
      * @param host
      */
     public void setHost(Host host) {
         this.host = host;
     }
-    
+
     public Host getHost() {
         if (host == null) {
             host = new StandardHost();
@@ -439,19 +439,19 @@ public class Tomcat {
         }
         return host;
     }
-    
-    /** 
+
+    /**
      * Set a custom realm for auth. If not called, a simple
      * default will be used, using an internal map.
-     * 
+     *
      * Must be called before adding a context.
      */
     public void setDefaultRealm(Realm realm) {
         defaultRealm = realm;
     }
-    
 
-    /** 
+
+    /**
      * Access to the engine, for further customization.
      */
     public Engine getEngine() {
@@ -467,21 +467,21 @@ public class Tomcat {
 
     /**
      * Get the server object. You can add listeners and few more
-     * customizations. JNDI is disabled by default.  
+     * customizations. JNDI is disabled by default.
      */
     public Server getServer() {
-        
+
         if (server != null) {
             return server;
         }
-        
-        initBaseDir(); 
-        
+
+        initBaseDir();
+
         System.setProperty("catalina.useNaming", "false");
-        
+
         server = new StandardServer();
         server.setPort( -1 );
-        
+
         service = new StandardService();
         service.setName("Tomcat");
         server.addService( service );
@@ -500,7 +500,7 @@ public class Tomcat {
         ctx.setPath(contextPath);
         ctx.setDocBase(dir);
         ctx.addLifecycleListener(new FixContextListener());
-        
+
         if (host == null) {
             getHost().addChild(ctx);
         } else {
@@ -508,7 +508,7 @@ public class Tomcat {
         }
         return ctx;
     }
-    
+
     public Context addWebapp(Host host, String url, String path) {
         return addWebapp(host, url, url, path);
     }
@@ -526,10 +526,10 @@ public class Tomcat {
         ctx.setRealm(defaultRealm);
 
         ctx.addLifecycleListener(new DefaultWebXmlListener());
-        
+
         ContextConfig ctxCfg = new ContextConfig();
         ctx.addLifecycleListener(ctxCfg);
-        
+
         // prevent it from looking ( if it finds one - it'll have dup error )
         ctxCfg.setDefaultWebXml(noDefaultWebXmlPath());
 
@@ -541,19 +541,19 @@ public class Tomcat {
 
         return ctx;
     }
-    
+
     /**
      * Return a listener that provides the required configuration items for JSP
      * processing. From the standard Tomcat global web.xml. Pass this to
      * {@link Context#addLifecycleListener(LifecycleListener)} and then pass the
-     * result of {@link #noDefaultWebXmlPath()} to 
-     * {@link ContextConfig#setDefaultWebXml(String)}. 
+     * result of {@link #noDefaultWebXmlPath()} to
+     * {@link ContextConfig#setDefaultWebXml(String)}.
      * @return a listener object that configures default JSP processing.
      */
     public LifecycleListener getDefaultWebXmlListener() {
         return new DefaultWebXmlListener();
     }
-    
+
     /**
      * @return a pathname to pass to
      * {@link ContextConfig#setDefaultWebXml(String)} when using
@@ -562,7 +562,7 @@ public class Tomcat {
     public String noDefaultWebXmlPath() {
         return Constants.NoDefaultWebXml;
     }
-    
+
     /**
      * For complex configurations, this accessor allows callers of this class
      * to obtain the simple realm created by default.
@@ -577,10 +577,10 @@ public class Tomcat {
 
 
     // ---------- Helper methods and classes -------------------
-    
-    /** 
-     * Initialize an in-memory realm. You can replace it 
-     * for contexts with a real one. 
+
+    /**
+     * Initialize an in-memory realm. You can replace it
+     * for contexts with a real one.
      */
     protected void initSimpleAuth() {
         defaultRealm = new RealmBase() {
@@ -607,10 +607,10 @@ public class Tomcat {
                 }
                 return p;
             }
-            
-        };        
+
+        };
     }
-    
+
     protected void initBaseDir() {
         String catalinaHome = System.getProperty(Globals.CATALINA_HOME_PROP);
         if (basedir == null) {
@@ -621,7 +621,7 @@ public class Tomcat {
         }
         if (basedir == null) {
             // Create a temp dir.
-            basedir = System.getProperty("user.dir") + 
+            basedir = System.getProperty("user.dir") +
                 "/tomcat." + port;
             File home = new File(basedir);
             home.mkdir();
@@ -647,7 +647,7 @@ public class Tomcat {
         "org.apache.catalina.core.ApplicationContext",
         "org.apache.catalina.core.AprLifecycleListener"
     };
-    
+
     /**
      * Controls if the loggers will be silenced or not.
      * @param silent    <code>true</code> sets the log level to WARN for the
@@ -665,28 +665,28 @@ public class Tomcat {
             }
         }
     }
-    
+
     private void silence(String ctx) {
         String base = "org.apache.catalina.core.ContainerBase.[default].[";
         base += getHost().getName();
         base += "].[";
-        base += ctx; 
+        base += ctx;
         base += "]";
         Logger.getLogger(base).setLevel(Level.WARNING);
     }
-    
+
     /**
      * Enables JNDI naming which is disabled by default. Server must implement
      * {@link Lifecycle} in order for the {@link NamingContextListener} to be
      * used.
-     * 
+     *
      */
     public void enableNaming() {
         // Make sure getServer() has been called as that is where naming is
         // disabled
         getServer();
         server.addLifecycleListener(new NamingContextListener());
-        
+
         System.setProperty("catalina.useNaming", "true");
 
         String value = "org.apache.naming";
@@ -712,24 +712,24 @@ public class Tomcat {
 
     /**
      * Provide default configuration for a context. This is the programmatic
-     * equivalent of the default web.xml. 
-     * 
-     *  TODO: in normal Tomcat, if default-web.xml is not found, use this 
+     * equivalent of the default web.xml.
+     *
+     *  TODO: in normal Tomcat, if default-web.xml is not found, use this
      *  method
-     *  
+     *
      * @param contextPath   The context to set the defaults for
      */
     public void initWebappDefaults(String contextPath) {
         Container ctx = getHost().findChild(contextPath);
         initWebappDefaults((Context) ctx);
     }
-    
+
     /**
      * Static version of {@link #initWebappDefaults(String)}
      * @param ctx   The context to set the defaults for
      */
     public static void initWebappDefaults(Context ctx) {
-        // Default servlet 
+        // Default servlet
         Wrapper servlet = addServlet(
                 ctx, "default", "org.apache.catalina.servlets.DefaultServlet");
         servlet.setLoadOnStartup(1);
@@ -739,31 +739,31 @@ public class Tomcat {
                 ctx, "jsp", "org.apache.jasper.servlet.JspServlet");
         servlet.addInitParameter("fork", "false");
         servlet.setLoadOnStartup(3);
-        
-        // Servlet mappings 
+
+        // Servlet mappings
         ctx.addServletMapping("/", "default");
         ctx.addServletMapping("*.jsp", "jsp");
         ctx.addServletMapping("*.jspx", "jsp");
 
         // Sessions
         ctx.setSessionTimeout(30);
-        
+
         // MIME mappings
         for (int i = 0; i < DEFAULT_MIME_MAPPINGS.length;) {
             ctx.addMimeMapping(DEFAULT_MIME_MAPPINGS[i++],
                     DEFAULT_MIME_MAPPINGS[i++]);
         }
-        
+
         // Welcome files
         ctx.addWelcomeFile("index.html");
         ctx.addWelcomeFile("index.htm");
         ctx.addWelcomeFile("index.jsp");
     }
 
-    
+
     /**
      * Fix startup sequence - required if you don't use web.xml.
-     * 
+     *
      * The start() method in context will set 'configured' to false - and
      * expects a listener to set it back to true.
      */
@@ -787,7 +787,7 @@ public class Tomcat {
                 return;
             }
         }
-        
+
     }
 
 
@@ -807,9 +807,9 @@ public class Tomcat {
 
 
     /**
-     * Helper class for wrapping existing servlets. This disables servlet 
+     * Helper class for wrapping existing servlets. This disables servlet
      * lifecycle and normal reloading, but also reduces overhead and provide
-     * more direct control over the servlet.  
+     * more direct control over the servlet.
      */
     public static class ExistingStandardWrapper extends StandardWrapper {
         private Servlet existing;
@@ -850,7 +850,7 @@ public class Tomcat {
         }
         @Override
         public boolean isUnavailable() {
-            return false;       
+            return false;
         }
         @Override
         public Servlet getServlet() {
@@ -861,102 +861,102 @@ public class Tomcat {
             return existing.getClass().getName();
         }
     }
-    
+
     /**
      * TODO: would a properties resource be better ? Or just parsing
      * /etc/mime.types ?
-     * This is needed because we don't use the default web.xml, where this 
+     * This is needed because we don't use the default web.xml, where this
      * is encoded.
      */
     private static final String[] DEFAULT_MIME_MAPPINGS = {
-        "abs", "audio/x-mpeg", 
-        "ai", "application/postscript", 
-        "aif", "audio/x-aiff", 
-        "aifc", "audio/x-aiff", 
-        "aiff", "audio/x-aiff", 
-        "aim", "application/x-aim", 
-        "art", "image/x-jg", 
-        "asf", "video/x-ms-asf", 
-        "asx", "video/x-ms-asf", 
-        "au", "audio/basic", 
-        "avi", "video/x-msvideo", 
-        "avx", "video/x-rad-screenplay", 
-        "bcpio", "application/x-bcpio", 
-        "bin", "application/octet-stream", 
-        "bmp", "image/bmp", 
-        "body", "text/html", 
-        "cdf", "application/x-cdf", 
-        "cer", "application/x-x509-ca-cert", 
-        "class", "application/java", 
-        "cpio", "application/x-cpio", 
-        "csh", "application/x-csh", 
-        "css", "text/css", 
-        "dib", "image/bmp", 
-        "doc", "application/msword", 
-        "dtd", "application/xml-dtd", 
-        "dv", "video/x-dv", 
-        "dvi", "application/x-dvi", 
-        "eps", "application/postscript", 
-        "etx", "text/x-setext", 
-        "exe", "application/octet-stream", 
-        "gif", "image/gif", 
-        "gtar", "application/x-gtar", 
-        "gz", "application/x-gzip", 
-        "hdf", "application/x-hdf", 
-        "hqx", "application/mac-binhex40", 
-        "htc", "text/x-component", 
-        "htm", "text/html", 
-        "html", "text/html", 
-        "hqx", "application/mac-binhex40", 
-        "ief", "image/ief", 
-        "jad", "text/vnd.sun.j2me.app-descriptor", 
-        "jar", "application/java-archive", 
-        "java", "text/plain", 
-        "jnlp", "application/x-java-jnlp-file", 
-        "jpe", "image/jpeg", 
-        "jpeg", "image/jpeg", 
-        "jpg", "image/jpeg", 
-        "js", "text/javascript", 
-        "jsf", "text/plain", 
-        "jspf", "text/plain", 
-        "kar", "audio/x-midi", 
-        "latex", "application/x-latex", 
-        "m3u", "audio/x-mpegurl", 
-        "mac", "image/x-macpaint", 
-        "man", "application/x-troff-man", 
-        "mathml", "application/mathml+xml", 
-        "me", "application/x-troff-me", 
-        "mid", "audio/x-midi", 
-        "midi", "audio/x-midi", 
-        "mif", "application/x-mif", 
-        "mov", "video/quicktime", 
-        "movie", "video/x-sgi-movie", 
-        "mp1", "audio/x-mpeg", 
-        "mp2", "audio/x-mpeg", 
-        "mp3", "audio/x-mpeg", 
-        "mp4", "video/mp4", 
-        "mpa", "audio/x-mpeg", 
-        "mpe", "video/mpeg", 
-        "mpeg", "video/mpeg", 
-        "mpega", "audio/x-mpeg", 
-        "mpg", "video/mpeg", 
-        "mpv2", "video/mpeg2", 
-        "ms", "application/x-wais-source", 
-        "nc", "application/x-netcdf", 
-        "oda", "application/oda", 
-        "odb", "application/vnd.oasis.opendocument.database", 
-        "odc", "application/vnd.oasis.opendocument.chart", 
-        "odf", "application/vnd.oasis.opendocument.formula", 
-        "odg", "application/vnd.oasis.opendocument.graphics", 
-        "odi", "application/vnd.oasis.opendocument.image", 
-        "odm", "application/vnd.oasis.opendocument.text-master", 
-        "odp", "application/vnd.oasis.opendocument.presentation", 
-        "ods", "application/vnd.oasis.opendocument.spreadsheet", 
-        "odt", "application/vnd.oasis.opendocument.text", 
-        "otg", "application/vnd.oasis.opendocument.graphics-template", 
-        "oth", "application/vnd.oasis.opendocument.text-web", 
-        "otp", "application/vnd.oasis.opendocument.presentation-template", 
-        "ots", "application/vnd.oasis.opendocument.spreadsheet-template ", 
+        "abs", "audio/x-mpeg",
+        "ai", "application/postscript",
+        "aif", "audio/x-aiff",
+        "aifc", "audio/x-aiff",
+        "aiff", "audio/x-aiff",
+        "aim", "application/x-aim",
+        "art", "image/x-jg",
+        "asf", "video/x-ms-asf",
+        "asx", "video/x-ms-asf",
+        "au", "audio/basic",
+        "avi", "video/x-msvideo",
+        "avx", "video/x-rad-screenplay",
+        "bcpio", "application/x-bcpio",
+        "bin", "application/octet-stream",
+        "bmp", "image/bmp",
+        "body", "text/html",
+        "cdf", "application/x-cdf",
+        "cer", "application/x-x509-ca-cert",
+        "class", "application/java",
+        "cpio", "application/x-cpio",
+        "csh", "application/x-csh",
+        "css", "text/css",
+        "dib", "image/bmp",
+        "doc", "application/msword",
+        "dtd", "application/xml-dtd",
+        "dv", "video/x-dv",
+        "dvi", "application/x-dvi",
+        "eps", "application/postscript",
+        "etx", "text/x-setext",
+        "exe", "application/octet-stream",
+        "gif", "image/gif",
+        "gtar", "application/x-gtar",
+        "gz", "application/x-gzip",
+        "hdf", "application/x-hdf",
+        "hqx", "application/mac-binhex40",
+        "htc", "text/x-component",
+        "htm", "text/html",
+        "html", "text/html",
+        "hqx", "application/mac-binhex40",
+        "ief", "image/ief",
+        "jad", "text/vnd.sun.j2me.app-descriptor",
+        "jar", "application/java-archive",
+        "java", "text/plain",
+        "jnlp", "application/x-java-jnlp-file",
+        "jpe", "image/jpeg",
+        "jpeg", "image/jpeg",
+        "jpg", "image/jpeg",
+        "js", "text/javascript",
+        "jsf", "text/plain",
+        "jspf", "text/plain",
+        "kar", "audio/x-midi",
+        "latex", "application/x-latex",
+        "m3u", "audio/x-mpegurl",
+        "mac", "image/x-macpaint",
+        "man", "application/x-troff-man",
+        "mathml", "application/mathml+xml",
+        "me", "application/x-troff-me",
+        "mid", "audio/x-midi",
+        "midi", "audio/x-midi",
+        "mif", "application/x-mif",
+        "mov", "video/quicktime",
+        "movie", "video/x-sgi-movie",
+        "mp1", "audio/x-mpeg",
+        "mp2", "audio/x-mpeg",
+        "mp3", "audio/x-mpeg",
+        "mp4", "video/mp4",
+        "mpa", "audio/x-mpeg",
+        "mpe", "video/mpeg",
+        "mpeg", "video/mpeg",
+        "mpega", "audio/x-mpeg",
+        "mpg", "video/mpeg",
+        "mpv2", "video/mpeg2",
+        "ms", "application/x-wais-source",
+        "nc", "application/x-netcdf",
+        "oda", "application/oda",
+        "odb", "application/vnd.oasis.opendocument.database",
+        "odc", "application/vnd.oasis.opendocument.chart",
+        "odf", "application/vnd.oasis.opendocument.formula",
+        "odg", "application/vnd.oasis.opendocument.graphics",
+        "odi", "application/vnd.oasis.opendocument.image",
+        "odm", "application/vnd.oasis.opendocument.text-master",
+        "odp", "application/vnd.oasis.opendocument.presentation",
+        "ods", "application/vnd.oasis.opendocument.spreadsheet",
+        "odt", "application/vnd.oasis.opendocument.text",
+        "otg", "application/vnd.oasis.opendocument.graphics-template",
+        "oth", "application/vnd.oasis.opendocument.text-web",
+        "otp", "application/vnd.oasis.opendocument.presentation-template",
+        "ots", "application/vnd.oasis.opendocument.spreadsheet-template ",
         "ott", "application/vnd.oasis.opendocument.text-template",
         "ogx", "application/ogg",
         "ogv", "video/ogg",
@@ -968,79 +968,79 @@ public class Tomcat {
         "axa", "audio/annodex",
         "axv", "video/annodex",
         "xspf", "application/xspf+xml",
-        "pbm", "image/x-portable-bitmap", 
-        "pct", "image/pict", 
-        "pdf", "application/pdf", 
-        "pgm", "image/x-portable-graymap", 
-        "pic", "image/pict", 
-        "pict", "image/pict", 
-        "pls", "audio/x-scpls", 
-        "png", "image/png", 
-        "pnm", "image/x-portable-anymap", 
-        "pnt", "image/x-macpaint", 
-        "ppm", "image/x-portable-pixmap", 
+        "pbm", "image/x-portable-bitmap",
+        "pct", "image/pict",
+        "pdf", "application/pdf",
+        "pgm", "image/x-portable-graymap",
+        "pic", "image/pict",
+        "pict", "image/pict",
+        "pls", "audio/x-scpls",
+        "png", "image/png",
+        "pnm", "image/x-portable-anymap",
+        "pnt", "image/x-macpaint",
+        "ppm", "image/x-portable-pixmap",
         "ppt", "application/vnd.ms-powerpoint",
         "pps", "application/vnd.ms-powerpoint",
-        "ps", "application/postscript", 
-        "psd", "image/x-photoshop", 
-        "qt", "video/quicktime", 
-        "qti", "image/x-quicktime", 
-        "qtif", "image/x-quicktime", 
-        "ras", "image/x-cmu-raster", 
-        "rdf", "application/rdf+xml", 
-        "rgb", "image/x-rgb", 
-        "rm", "application/vnd.rn-realmedia", 
-        "roff", "application/x-troff", 
-        "rtf", "application/rtf", 
-        "rtx", "text/richtext", 
-        "sh", "application/x-sh", 
-        "shar", "application/x-shar", 
+        "ps", "application/postscript",
+        "psd", "image/x-photoshop",
+        "qt", "video/quicktime",
+        "qti", "image/x-quicktime",
+        "qtif", "image/x-quicktime",
+        "ras", "image/x-cmu-raster",
+        "rdf", "application/rdf+xml",
+        "rgb", "image/x-rgb",
+        "rm", "application/vnd.rn-realmedia",
+        "roff", "application/x-troff",
+        "rtf", "application/rtf",
+        "rtx", "text/richtext",
+        "sh", "application/x-sh",
+        "shar", "application/x-shar",
         /*"shtml", "text/x-server-parsed-html",*/
-        "smf", "audio/x-midi", 
-        "sit", "application/x-stuffit", 
-        "snd", "audio/basic", 
-        "src", "application/x-wais-source", 
-        "sv4cpio", "application/x-sv4cpio", 
-        "sv4crc", "application/x-sv4crc", 
-        "svg", "image/svg+xml", 
-        "svgz", "image/svg+xml", 
-        "swf", "application/x-shockwave-flash", 
-        "t", "application/x-troff", 
-        "tar", "application/x-tar", 
-        "tcl", "application/x-tcl", 
-        "tex", "application/x-tex", 
-        "texi", "application/x-texinfo", 
-        "texinfo", "application/x-texinfo", 
-        "tif", "image/tiff", 
-        "tiff", "image/tiff", 
-        "tr", "application/x-troff", 
-        "tsv", "text/tab-separated-values", 
-        "txt", "text/plain", 
-        "ulw", "audio/basic", 
-        "ustar", "application/x-ustar", 
-        "vxml", "application/voicexml+xml", 
-        "xbm", "image/x-xbitmap", 
-        "xht", "application/xhtml+xml", 
-        "xhtml", "application/xhtml+xml", 
-        "xls", "application/vnd.ms-excel", 
-        "xml", "application/xml", 
-        "xpm", "image/x-xpixmap", 
-        "xsl", "application/xml", 
-        "xslt", "application/xslt+xml", 
-        "xul", "application/vnd.mozilla.xul+xml", 
-        "xwd", "image/x-xwindowdump", 
-        "vsd", "application/x-visio", 
-        "wav", "audio/x-wav", 
-        "wbmp", "image/vnd.wap.wbmp", 
-        "wml", "text/vnd.wap.wml", 
-        "wmlc", "application/vnd.wap.wmlc", 
-        "wmls", "text/vnd.wap.wmlscript", 
-        "wmlscriptc", "application/vnd.wap.wmlscriptc", 
-        "wmv", "video/x-ms-wmv", 
-        "wrl", "x-world/x-vrml", 
-        "wspolicy", "application/wspolicy+xml", 
-        "Z", "application/x-compress", 
-        "z", "application/x-compress", 
-        "zip", "application/zip" 
+        "smf", "audio/x-midi",
+        "sit", "application/x-stuffit",
+        "snd", "audio/basic",
+        "src", "application/x-wais-source",
+        "sv4cpio", "application/x-sv4cpio",
+        "sv4crc", "application/x-sv4crc",
+        "svg", "image/svg+xml",
+        "svgz", "image/svg+xml",
+        "swf", "application/x-shockwave-flash",
+        "t", "application/x-troff",
+        "tar", "application/x-tar",
+        "tcl", "application/x-tcl",
+        "tex", "application/x-tex",
+        "texi", "application/x-texinfo",
+        "texinfo", "application/x-texinfo",
+        "tif", "image/tiff",
+        "tiff", "image/tiff",
+        "tr", "application/x-troff",
+        "tsv", "text/tab-separated-values",
+        "txt", "text/plain",
+        "ulw", "audio/basic",
+        "ustar", "application/x-ustar",
+        "vxml", "application/voicexml+xml",
+        "xbm", "image/x-xbitmap",
+        "xht", "application/xhtml+xml",
+        "xhtml", "application/xhtml+xml",
+        "xls", "application/vnd.ms-excel",
+        "xml", "application/xml",
+        "xpm", "image/x-xpixmap",
+        "xsl", "application/xml",
+        "xslt", "application/xslt+xml",
+        "xul", "application/vnd.mozilla.xul+xml",
+        "xwd", "image/x-xwindowdump",
+        "vsd", "application/x-visio",
+        "wav", "audio/x-wav",
+        "wbmp", "image/vnd.wap.wbmp",
+        "wml", "text/vnd.wap.wml",
+        "wmlc", "application/vnd.wap.wmlc",
+        "wmls", "text/vnd.wap.wmlscript",
+        "wmlscriptc", "application/vnd.wap.wmlscriptc",
+        "wmv", "video/x-ms-wmv",
+        "wrl", "x-world/x-vrml",
+        "wspolicy", "application/wspolicy+xml",
+        "Z", "application/x-compress",
+        "z", "application/x-compress",
+        "zip", "application/zip"
     };
 }

==================================================
UserConfig.java
index ae7cce9a58..2dd414ff05 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -76,7 +76,7 @@ public final class Tool {
 
 
     private static final Log log = LogFactory.getLog(Tool.class);
-    
+
     // ------------------------------------------------------- Static Variables
 
 

==================================================
UserDatabase.java
index cebf795580..2d05399a09 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -48,7 +48,7 @@ public final class UserConfig
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( UserConfig.class );
 
-    
+
     // ----------------------------------------------------- Instance Variables
 
 

==================================================
WebAnnotationSet.java
index e680da1f18..0b82927e8a 100644
--- a/java/org/apache/catalina/startup/UserDatabase.java
+++ b/java/org/apache/catalina/startup/UserDatabase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
WebRuleSet.java
index 6c917d00ad..635ff82ec1 100644
--- a/java/org/apache/catalina/startup/WebAnnotationSet.java
+++ b/java/org/apache/catalina/startup/WebAnnotationSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -43,27 +43,27 @@ import org.apache.catalina.deploy.MessageDestinationRef;
  */
 
 public class WebAnnotationSet {
-    
-    
+
+
     // --------------------------------------------------------- Public Methods
-    
-    
+
+
     /**
      * Process the annotations on a context.
      */
     public static void loadApplicationAnnotations(Context context) {
-        
+
         loadApplicationListenerAnnotations(context);
         loadApplicationFilterAnnotations(context);
         loadApplicationServletAnnotations(context);
-        
-        
+
+
     }
-    
-    
+
+
     // -------------------------------------------------------- protected Methods
-    
-    
+
+
     /**
      * Process the annotations for the listeners.
      */
@@ -73,8 +73,8 @@ public class WebAnnotationSet {
             loadClassAnnotation(context, applicationListeners[i]);
         }
     }
-    
-    
+
+
     /**
      * Process the annotations for the filters.
      */
@@ -84,26 +84,26 @@ public class WebAnnotationSet {
             loadClassAnnotation(context, (filterDefs[i]).getFilterClass());
         }
     }
-    
-    
+
+
     /**
      * Process the annotations for the servlets.
      */
     protected static void loadApplicationServletAnnotations(Context context) {
-        
+
         ClassLoader classLoader = context.getLoader().getClassLoader();
         StandardWrapper wrapper = null;
         Class<?> classClass = null;
-        
+
         Container[] children = context.findChildren();
         for (int i = 0; i < children.length; i++) {
             if (children[i] instanceof StandardWrapper) {
-                
+
                 wrapper = (StandardWrapper) children[i];
                 if (wrapper.getServletClass() == null) {
                     continue;
                 }
-                
+
                 try {
                     classClass = classLoader.loadClass(wrapper.getServletClass());
                 } catch (ClassNotFoundException e) {
@@ -111,11 +111,11 @@ public class WebAnnotationSet {
                 } catch (NoClassDefFoundError e) {
                     // We do nothing
                 }
-                
+
                 if (classClass == null) {
                     continue;
                 }
-                
+
                 loadClassAnnotation(context, wrapper.getServletClass());
                 /* Process RunAs annotation which can be only on servlets.
                  * Ref JSR 250, equivalent to the run-as element in
@@ -127,19 +127,19 @@ public class WebAnnotationSet {
                 }
             }
         }
-        
-        
+
+
     }
-    
-    
+
+
     /**
      * Process the annotations on a context for a given className.
      */
     protected static void loadClassAnnotation(Context context, String fileString) {
-        
+
         ClassLoader classLoader = context.getLoader().getClassLoader();
         Class<?> classClass = null;
-        
+
         try {
             classClass = classLoader.loadClass(fileString);
         } catch (ClassNotFoundException e) {
@@ -147,13 +147,13 @@ public class WebAnnotationSet {
         } catch (NoClassDefFoundError e) {
             // We do nothing
         }
-        
+
         if (classClass == null) {
             return;
         }
-        
+
         // Initialize the annotations
-        
+
         if (classClass.isAnnotationPresent(Resource.class)) {
             Resource annotation = classClass.getAnnotation(Resource.class);
             addResource(context, annotation);
@@ -171,67 +171,67 @@ public class WebAnnotationSet {
          * Ref JSR 224, equivalent to the ejb-ref or ejb-local-ref
          * element in the deployment descriptor.
         if (classClass.isAnnotationPresent(EJB.class)) {
-            EJB annotation = (EJB) 
+            EJB annotation = (EJB)
             classClass.getAnnotation(EJB.class);
-            
+
             if ((annotation.mappedName().length() == 0) ||
                     annotation.mappedName().equals("Local")) {
-                
+
                 ContextLocalEjb ejb = new ContextLocalEjb();
-                
+
                 ejb.setName(annotation.name());
                 ejb.setType(annotation.beanInterface().getCanonicalName());
                 ejb.setDescription(annotation.description());
-                
+
                 ejb.setHome(annotation.beanName());
-                
+
                 context.getNamingResources().addLocalEjb(ejb);
-                
+
             } else if (annotation.mappedName().equals("Remote")) {
-                
+
                 ContextEjb ejb = new ContextEjb();
-                
+
                 ejb.setName(annotation.name());
                 ejb.setType(annotation.beanInterface().getCanonicalName());
                 ejb.setDescription(annotation.description());
-                
+
                 ejb.setHome(annotation.beanName());
-                
+
                 context.getNamingResources().addEjb(ejb);
-                
+
             }
-            
+
         }
          */
         /* Process WebServiceRef annotation.
-         * Ref JSR 224, equivalent to the service-ref element in 
+         * Ref JSR 224, equivalent to the service-ref element in
          * the deployment descriptor.
          * The service-ref registration is not implemented
         if (classClass.isAnnotationPresent(WebServiceRef.class)) {
-            WebServiceRef annotation = (WebServiceRef) 
+            WebServiceRef annotation = (WebServiceRef)
             classClass.getAnnotation(WebServiceRef.class);
-            
+
             ContextService service = new ContextService();
-            
+
             service.setName(annotation.name());
             service.setWsdlfile(annotation.wsdlLocation());
-            
+
             service.setType(annotation.type().getCanonicalName());
-            
+
             if (annotation.value() == null)
                 service.setServiceinterface(annotation.type().getCanonicalName());
-            
+
             if (annotation.type().getCanonicalName().equals("Service"))
                 service.setServiceinterface(annotation.type().getCanonicalName());
-            
+
             if (annotation.value().getCanonicalName().equals("Endpoint"))
                 service.setServiceendpoint(annotation.type().getCanonicalName());
-            
+
             service.setPortlink(annotation.type().getCanonicalName());
-            
+
             context.getNamingResources().addService(service);
-            
-            
+
+
         }
          */
         /* Process DeclareRoles annotation.
@@ -245,11 +245,11 @@ public class WebAnnotationSet {
                 context.addSecurityRole(annotation.value()[i]);
             }
         }
-        
-        
+
+
     }
-    
-    
+
+
     /**
      * Process a Resource annotation to set up a Resource.
      * Ref JSR 250, equivalent to the resource-ref,
@@ -257,7 +257,7 @@ public class WebAnnotationSet {
      * or service-ref element in the deployment descriptor.
      */
     protected static void addResource(Context context, Resource annotation) {
-        
+
         if (annotation.type().getCanonicalName().equals("java.lang.String") ||
                 annotation.type().getCanonicalName().equals("java.lang.Character") ||
                 annotation.type().getCanonicalName().equals("java.lang.Integer") ||
@@ -267,32 +267,32 @@ public class WebAnnotationSet {
                 annotation.type().getCanonicalName().equals("java.lang.Short") ||
                 annotation.type().getCanonicalName().equals("java.lang.Long") ||
                 annotation.type().getCanonicalName().equals("java.lang.Float")) {
-            
+
             // env-ref element
             ContextEnvironment resource = new ContextEnvironment();
-            
+
             resource.setName(annotation.name());
             resource.setType(annotation.type().getCanonicalName());
-            
+
             resource.setDescription(annotation.description());
-            
+
             resource.setValue(annotation.mappedName());
-            
+
             context.getNamingResources().addEnvironment(resource);
-            
+
         } else if (annotation.type().getCanonicalName().equals("javax.xml.rpc.Service")) {
-            
+
             // service-ref element
             ContextService service = new ContextService();
-            
+
             service.setName(annotation.name());
             service.setWsdlfile(annotation.mappedName());
-            
+
             service.setType(annotation.type().getCanonicalName());
             service.setDescription(annotation.description());
-            
+
             context.getNamingResources().addService(service);
-            
+
         } else if (annotation.type().getCanonicalName().equals("javax.sql.DataSource") ||
                 annotation.type().getCanonicalName().equals("javax.jms.ConnectionFactory") ||
                 annotation.type().getCanonicalName()
@@ -305,13 +305,13 @@ public class WebAnnotationSet {
                 .equals("javax.resource.cci.ConnectionFactory") ||
                 annotation.type().getCanonicalName().equals("org.omg.CORBA_2_3.ORB") ||
                 annotation.type().getCanonicalName().endsWith("ConnectionFactory")) {
-            
+
             // resource-ref element
             ContextResource resource = new ContextResource();
-            
+
             resource.setName(annotation.name());
             resource.setType(annotation.type().getCanonicalName());
-            
+
             if (annotation.authenticationType()
                     == Resource.AuthenticationType.CONTAINER) {
                 resource.setAuth("Container");
@@ -320,48 +320,48 @@ public class WebAnnotationSet {
                     == Resource.AuthenticationType.APPLICATION) {
                 resource.setAuth("Application");
             }
-            
+
             resource.setScope(annotation.shareable() ? "Shareable" : "Unshareable");
             resource.setProperty("mappedName", annotation.mappedName());
             resource.setDescription(annotation.description());
-            
+
             context.getNamingResources().addResource(resource);
-            
+
         } else if (annotation.type().getCanonicalName().equals("javax.jms.Queue") ||
                 annotation.type().getCanonicalName().equals("javax.jms.Topic")) {
-            
+
             // message-destination-ref
             MessageDestinationRef resource = new MessageDestinationRef();
-            
+
             resource.setName(annotation.name());
             resource.setType(annotation.type().getCanonicalName());
-            
+
             resource.setUsage(annotation.mappedName());
             resource.setDescription(annotation.description());
-            
+
             context.getNamingResources().addMessageDestinationRef(resource);
-            
+
         } else if (annotation.type().getCanonicalName()
                 .equals("javax.resource.cci.InteractionSpec") ||
                 annotation.type().getCanonicalName()
                 .equals("javax.transaction.UserTransaction") ||
                 true) {
-            
+
             // resource-env-ref
             ContextResourceEnvRef resource = new ContextResourceEnvRef();
-            
+
             resource.setName(annotation.name());
             resource.setType(annotation.type().getCanonicalName());
-            
+
             resource.setProperty("mappedName", annotation.mappedName());
             resource.setDescription(annotation.description());
-            
+
             context.getNamingResources().addResourceEnvRef(resource);
-            
+
         }
-        
-        
+
+
     }
-    
-    
+
+
 }

==================================================
XmlErrorHandler.java
index 7521002236..24e9fda45d 100644
--- a/java/org/apache/catalina/startup/WebRuleSet.java
+++ b/java/org/apache/catalina/startup/WebRuleSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -78,17 +78,17 @@ public class WebRuleSet extends RuleSetBase {
      * The <code>SetSessionConfig</code> rule used to parse the web.xml
      */
     protected SetSessionConfig sessionConfig = new SetSessionConfig();
-    
-    
+
+
     /**
      * The <code>SetLoginConfig</code> rule used to parse the web.xml
      */
     protected SetLoginConfig loginConfig = new SetLoginConfig();
 
-    
+
     /**
      * The <code>SetJspConfig</code> rule used to parse the web.xml
-     */    
+     */
     protected SetJspConfig jspConfig = new SetJspConfig();
 
 
@@ -256,7 +256,7 @@ public class WebRuleSet extends RuleSetBase {
 
          digester.addCallMethod(fullPrefix + "/listener/listener-class",
                                 "addListener", 0);
-         
+
         digester.addRule(fullPrefix + "/jsp-config",
                          jspConfig);
 
@@ -375,7 +375,7 @@ public class WebRuleSet extends RuleSetBase {
                               "setServletClass", 0);
         digester.addCallMethod(fullPrefix + "/servlet/servlet-name",
                               "setServletName", 0);
-        
+
         digester.addObjectCreate(fullPrefix + "/servlet/multipart-config",
                                  "org.apache.catalina.deploy.MultipartDef");
         digester.addSetNext(fullPrefix + "/servlet/multipart-config",
@@ -395,7 +395,7 @@ public class WebRuleSet extends RuleSetBase {
         digester.addCallMethod(fullPrefix + "/servlet/enabled",
                                "setEnabled", 0);
 
-        
+
         digester.addRule(fullPrefix + "/servlet-mapping",
                                new CallMethodMultiRule("addServletMapping", 2, 0));
         digester.addCallParam(fullPrefix + "/servlet-mapping/servlet-name", 1);
@@ -473,7 +473,7 @@ public class WebRuleSet extends RuleSetBase {
         //ejb-ref
         digester.addObjectCreate(fullPrefix + "/ejb-ref",
                                  "org.apache.catalina.deploy.ContextEjb");
-        digester.addSetNext(fullPrefix + "/ejb-ref", 
+        digester.addSetNext(fullPrefix + "/ejb-ref",
                             "addEjbRef",
                             "org.apache.catalina.deploy.ContextEjb");
         digester.addCallMethod(fullPrefix + "/ejb-ref/description",
@@ -656,7 +656,7 @@ public class WebRuleSet extends RuleSetBase {
 
 
 /**
- * Rule to check that the <code>login-config</code> is occurring 
+ * Rule to check that the <code>login-config</code> is occurring
  * only 1 time within the web.xml
  */
 final class SetLoginConfig extends Rule {
@@ -679,7 +679,7 @@ final class SetLoginConfig extends Rule {
 
 
 /**
- * Rule to check that the <code>jsp-config</code> is occurring 
+ * Rule to check that the <code>jsp-config</code> is occurring
  * only 1 time within the web.xml
  */
 final class SetJspConfig extends Rule {
@@ -702,7 +702,7 @@ final class SetJspConfig extends Rule {
 
 
 /**
- * Rule to check that the <code>session-config</code> is occurring 
+ * Rule to check that the <code>session-config</code> is occurring
  * only 1 time within the web.xml
  */
 final class SetSessionConfig extends Rule {
@@ -809,7 +809,7 @@ final class SetPublicIdRule extends Rule {
 
         m.invoke(top, (Object [])paramValues);
         if (digester.getLogger().isDebugEnabled())
-            digester.getLogger().debug("" + top.getClass().getName() + "." 
+            digester.getLogger().debug("" + top.getClass().getName() + "."
                                        + method + "(" + paramValues[0] + ")");
 
     }
@@ -883,7 +883,7 @@ final class CallParamMultiRule extends CallParamRule {
 final class CallMethodMultiRule extends CallMethodRule {
 
     protected int multiParamIndex = 0;
-    
+
     public CallMethodMultiRule(String methodName, int paramCount, int multiParamIndex) {
         super(methodName, paramCount);
         this.multiParamIndex = multiParamIndex;
@@ -891,11 +891,11 @@ final class CallMethodMultiRule extends CallMethodRule {
 
     /**
      * Process the end of this element.
-     * 
-     * @param namespace the namespace URI of the matching element, or an 
+     *
+     * @param namespace the namespace URI of the matching element, or an
      *   empty string if the parser is not namespace aware or the element has
      *   no namespace
-     * @param name the local name if the parser is namespace aware, or just 
+     * @param name the local name if the parser is namespace aware, or just
      *   the element name otherwise
      */
     @Override
@@ -909,18 +909,18 @@ final class CallMethodMultiRule extends CallMethodRule {
             parameters = new Object[0];
             super.end(namespace, name);
         }
-        
+
         ArrayList<?> multiParams = (ArrayList<?>) parameters[multiParamIndex];
-        
+
         // Construct the parameter values array we will need
         // We only do the conversion if the param value is a String and
-        // the specified paramType is not String. 
+        // the specified paramType is not String.
         Object paramValues[] = new Object[paramTypes.length];
         for (int i = 0; i < paramTypes.length; i++) {
             if (i != multiParamIndex) {
-                // convert nulls and convert stringy parameters 
+                // convert nulls and convert stringy parameters
                 // for non-stringy param types
-                if(parameters[i] == null || (parameters[i] instanceof String 
+                if(parameters[i] == null || (parameters[i] instanceof String
                         && !String.class.isAssignableFrom(paramTypes[i]))) {
                     paramValues[i] =
                         IntrospectionUtils.convert((String) parameters[i], paramTypes[i]);
@@ -950,17 +950,17 @@ final class CallMethodMultiRule extends CallMethodRule {
             sb.append(")");
             throw new org.xml.sax.SAXException(sb.toString());
         }
-        
+
         if (multiParams == null) {
             paramValues[multiParamIndex] = null;
             IntrospectionUtils.callMethodN(target, methodName, paramValues,
-                    paramTypes);   
+                    paramTypes);
             return;
         }
-        
+
         for (int j = 0; j < multiParams.size(); j++) {
             Object param = multiParams.get(j);
-            if(param == null || (param instanceof String 
+            if(param == null || (param instanceof String
                     && !String.class.isAssignableFrom(paramTypes[multiParamIndex]))) {
                 paramValues[multiParamIndex] =
                     IntrospectionUtils.convert((String) param, paramTypes[multiParamIndex]);
@@ -968,9 +968,9 @@ final class CallMethodMultiRule extends CallMethodRule {
                 paramValues[multiParamIndex] = param;
             }
             IntrospectionUtils.callMethodN(target, methodName, paramValues,
-                    paramTypes);   
+                    paramTypes);
         }
-        
+
     }
 
 }
@@ -979,7 +979,7 @@ final class CallMethodMultiRule extends CallMethodRule {
 
 /**
  * A Rule that check if the annotations have to be loaded.
- * 
+ *
  */
 
 final class IgnoreAnnotationsRule extends Rule {
@@ -1009,7 +1009,7 @@ final class IgnoreAnnotationsRule extends Rule {
 
 /**
  * A Rule that records the spec version of the web.xml being parsed
- * 
+ *
  */
 
 final class VersionRule extends Rule {
@@ -1023,7 +1023,7 @@ final class VersionRule extends Rule {
         throws Exception {
         WebXml webxml = (WebXml) digester.peek(digester.getCount() - 1);
         webxml.setVersion(attributes.getValue("version"));
-        
+
         if (digester.getLogger().isDebugEnabled()) {
             digester.getLogger().debug
                 (webxml.getClass().getName() + ".setVersion( " +
@@ -1038,39 +1038,39 @@ final class VersionRule extends Rule {
  * A rule that logs a warning if absolute ordering is configured.
  */
 final class AbsoluteOrderingRule extends Rule {
-    
+
     public AbsoluteOrderingRule() {
         // NO-OP
     }
-    
+
     @Override
     public void begin(String namespace, String name, Attributes attributes)
             throws Exception {
         digester.getLogger().warn(
                 WebRuleSet.sm.getString("webRuleSet.absoluteOrdering"));
-    } 
+    }
 }
 
 /**
  * A rule that logs a warning if relative ordering is configured.
  */
 final class RelativeOrderingRule extends Rule {
-    
+
     public RelativeOrderingRule() {
         // NO-OP
     }
-    
+
     @Override
     public void begin(String namespace, String name, Attributes attributes)
             throws Exception {
         digester.getLogger().warn(
                 WebRuleSet.sm.getString("webRuleSet.relativeOrdering"));
-    } 
+    }
 }
 
 /**
  * A Rule that sets soap headers on the ContextHandler.
- * 
+ *
  */
 final class SoapHeaderRule extends Rule {
 
@@ -1081,10 +1081,10 @@ final class SoapHeaderRule extends Rule {
     /**
      * Process the body text of this element.
      *
-     * @param namespace the namespace URI of the matching element, or an 
+     * @param namespace the namespace URI of the matching element, or an
      *   empty string if the parser is not namespace aware or the element has
      *   no namespace
-     * @param name the local name if the parser is namespace aware, or just 
+     * @param name the local name if the parser is namespace aware, or just
      *   the element name otherwise
      * @param text The body text of this element
      */
@@ -1106,7 +1106,7 @@ final class SoapHeaderRule extends Rule {
 
 /**
  * A Rule that sets service qname on the ContextService.
- * 
+ *
  */
 final class ServiceQnameRule extends Rule {
 
@@ -1117,10 +1117,10 @@ final class ServiceQnameRule extends Rule {
     /**
      * Process the body text of this element.
      *
-     * @param namespace the namespace URI of the matching element, or an 
+     * @param namespace the namespace URI of the matching element, or an
      *   empty string if the parser is not namespace aware or the element has
      *   no namespace
-     * @param name the local name if the parser is namespace aware, or just 
+     * @param name the local name if the parser is namespace aware, or just
      *   the element name otherwise
      * @param text The body text of this element
      */
@@ -1139,20 +1139,20 @@ final class ServiceQnameRule extends Rule {
         contextService.setServiceqnameLocalpart(localpart);
         contextService.setServiceqnameNamespaceURI(namespaceuri);
     }
-    
+
 }
 
 /**
- * A rule that checks if the taglib element is in the right place. 
+ * A rule that checks if the taglib element is in the right place.
  */
 final class TaglibLocationRule extends Rule {
 
     final boolean isServlet24OrLater;
-    
+
     public TaglibLocationRule(boolean isServlet24OrLater) {
         this.isServlet24OrLater = isServlet24OrLater;
     }
-    
+
     @Override
     public void begin(String namespace, String name, Attributes attributes)
             throws Exception {
@@ -1166,5 +1166,5 @@ final class TaglibLocationRule extends Rule {
         }
     }
 
-    
+
 }
\ No newline at end of file

==================================================
