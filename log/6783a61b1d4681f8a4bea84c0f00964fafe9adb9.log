6783a61b1d4681f8a4bea84c0f00964fafe9adb9
==================================================
Java 5 clean up. No functional change.
==================================================
Mark Emlyn
==================================================
Thu Apr 10 21:51:57 2008 +0000
==================================================
ExpressionParseTree.java
Java 5 clean up. No functional change.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@646980 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSIExternalResolver.java
index 304180e160..52fbc6906e 100644
--- a/java/org/apache/catalina/ssi/ExpressionParseTree.java
+++ b/java/org/apache/catalina/ssi/ExpressionParseTree.java
@@ -31,12 +31,12 @@ public class ExpressionParseTree {
      * Contains the current set of completed nodes. This is a workspace for the
      * parser.
      */
-    private LinkedList nodeStack = new LinkedList();
+    private LinkedList<Node> nodeStack = new LinkedList<Node>();
     /**
      * Contains operator nodes that don't yet have values. This is a workspace
      * for the parser.
      */
-    private LinkedList oppStack = new LinkedList();
+    private LinkedList<OppNode> oppStack = new LinkedList<OppNode>();
     /**
      * The root node after the expression has been parsed.
      */
@@ -78,7 +78,7 @@ public class ExpressionParseTree {
         }
         while (true) {
             if (oppStack.size() == 0) break;
-            OppNode top = (OppNode)oppStack.get(0);
+            OppNode top = oppStack.get(0);
             // If the top is a spacer then don't pop
             // anything
             if (top == null) break;
@@ -103,7 +103,7 @@ public class ExpressionParseTree {
      */
     private void resolveGroup() {
         OppNode top = null;
-        while ((top = (OppNode)oppStack.remove(0)) != null) {
+        while ((top = oppStack.remove(0)) != null) {
             // Let it fill its branches
             top.popValues(nodeStack);
             // Stick it on the resolved node stack
@@ -195,7 +195,7 @@ public class ExpressionParseTree {
         if (oppStack.size() != 0) {
             throw new ParseException("Unused opp nodes exist.", et.getIndex());
         }
-        root = (Node)nodeStack.get(0);
+        root = nodeStack.get(0);
     }
 
     /**
@@ -272,9 +272,9 @@ public class ExpressionParseTree {
          * Lets the node pop its own branch nodes off the front of the
          * specified list. The default pulls two.
          */
-        public void popValues(List values) {
-            right = (Node)values.remove(0);
-            left = (Node)values.remove(0);
+        public void popValues(List<Node> values) {
+            right = values.remove(0);
+            left = values.remove(0);
         }
     }
     private final class NotNode extends OppNode {
@@ -291,8 +291,8 @@ public class ExpressionParseTree {
         /**
          * Overridden to pop only one value.
          */
-        public void popValues(List values) {
-            left = (Node)values.remove(0);
+        public void popValues(List<Node> values) {
+            left = values.remove(0);
         }
 
 

==================================================
SSIMediator.java
index 7175f0e1de..10872792ec 100644
--- a/java/org/apache/catalina/ssi/SSIExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIExternalResolver.java
@@ -34,7 +34,7 @@ public interface SSIExternalResolver {
      * @param variableNames
      *            the collection to add to
      */
-    public void addVariableNames(Collection variableNames);
+    public void addVariableNames(Collection<String> variableNames);
 
 
     public String getVariableValue(String name);

==================================================
SSIPrintenv.java
index 748800a470..bd12643aae 100644
--- a/java/org/apache/catalina/ssi/SSIMediator.java
+++ b/java/org/apache/catalina/ssi/SSIMediator.java
@@ -125,8 +125,8 @@ public class SSIMediator {
     }
 
 
-    public Collection getVariableNames() {
-        Set variableNames = new HashSet();
+    public Collection<String> getVariableNames() {
+        Set<String> variableNames = new HashSet<String>();
         //These built-in variables are supplied by the mediator ( if not
         // over-written by
         // the user ) and always exist
@@ -135,9 +135,9 @@ public class SSIMediator {
         variableNames.add("LAST_MODIFIED");
         ssiExternalResolver.addVariableNames(variableNames);
         //Remove any variables that are reserved by this class
-        Iterator iter = variableNames.iterator();
+        Iterator<String> iter = variableNames.iterator();
         while (iter.hasNext()) {
-            String name = (String)iter.next();
+            String name = iter.next();
             if (isNameReserved(name)) {
                 iter.remove();
             }

==================================================
SSIProcessor.java
index 4e24362f9d..69084af02e 100644
--- a/java/org/apache/catalina/ssi/SSIPrintenv.java
+++ b/java/org/apache/catalina/ssi/SSIPrintenv.java
@@ -39,10 +39,10 @@ public class SSIPrintenv implements SSICommand {
             String errorMessage = ssiMediator.getConfigErrMsg();
             writer.write(errorMessage);
         } else {
-            Collection variableNames = ssiMediator.getVariableNames();
-            Iterator iter = variableNames.iterator();
+            Collection<String> variableNames = ssiMediator.getVariableNames();
+            Iterator<String> iter = variableNames.iterator();
             while (iter.hasNext()) {
-                String variableName = (String)iter.next();
+                String variableName = iter.next();
                 String variableValue = ssiMediator
                         .getVariableValue(variableName);
                 //This shouldn't happen, since all the variable names must

==================================================
SSIServletExternalResolver.java
index 7245efc78a..78a7e6e617 100644
--- a/java/org/apache/catalina/ssi/SSIProcessor.java
+++ b/java/org/apache/catalina/ssi/SSIProcessor.java
@@ -40,7 +40,8 @@ public class SSIProcessor {
     protected final static String COMMAND_END = "-->";
     protected final static int BUFFER_SIZE = 4096;
     protected SSIExternalResolver ssiExternalResolver;
-    protected HashMap commands = new HashMap();
+    protected HashMap<String,SSICommand> commands =
+        new HashMap<String,SSICommand>();
     protected int debug;
 
 
@@ -132,8 +133,8 @@ public class SSIProcessor {
                         // change
                         // during the loop
                         String configErrMsg = ssiMediator.getConfigErrMsg();
-                        SSICommand ssiCommand = (SSICommand)commands
-                                .get(strCmd.toLowerCase());
+                        SSICommand ssiCommand =
+                            commands.get(strCmd.toLowerCase());
                         String errorMessage = null;
                         if (ssiCommand == null) {
                             errorMessage = "Unknown command: " + strCmd;

==================================================
