762f206100c16bcee8295d09469c76cbddc185bf
==================================================
Generics changes for o.a.c.ha
==================================================
Mark Emlyn
==================================================
Sat Dec 27 15:17:52 2008 +0000
==================================================
ApplicationContext.java
Generics changes for o.a.c.ha
Fix various Eclipse warnings (static methods, unused code, etc)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729637 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CatalinaCluster.java
index 19214e5d93..f6c759bb33 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -90,13 +90,15 @@ public class ApplicationContext
     /**
      * The context attributes for this context.
      */
-    protected Map attributes = new ConcurrentHashMap();
+    protected Map<String,Object> attributes =
+        new ConcurrentHashMap<String,Object>();
 
 
     /**
      * List of read only attributes for this context.
      */
-    private Map readOnlyAttributes = new ConcurrentHashMap();
+    private Map<String,String> readOnlyAttributes =
+        new ConcurrentHashMap<String,String>();
 
 
     /**

==================================================
ClusterSingleSignOn.java
index 4c927b1335..884b882c47 100644
--- a/java/org/apache/catalina/ha/CatalinaCluster.java
+++ b/java/org/apache/catalina/ha/CatalinaCluster.java
@@ -117,7 +117,7 @@ public interface CatalinaCluster extends Cluster {
     /**
      * @return The map of managers
      */
-    public Map getManagers();
+    public Map<String,ClusterManager> getManagers();
 
     public Manager getManager(String name);
     public String getManagerName(String name, Manager manager);

==================================================
ClusterSingleSignOnListener.java
index 809ab25083..0e4807d420 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
@@ -169,7 +169,7 @@ public class ClusterSingleSignOn
 
 	super.stop();
 
-	if (getCluster() != null && getCluster() instanceof CatalinaCluster) {
+	if (getCluster() != null) {
 	    getCluster().removeClusterListener(clusterSSOListener);
 	}
 

==================================================
ReplicatedContext.java
index f556213358..91044975a3 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
@@ -138,14 +138,14 @@ public class ClusterSingleSignOnListener extends ClusterListener {
 
     private Session getSession(String sessionId, String ctxname) {
 	
-	Map managers = clusterSSO.getCluster().getManagers() ;
+	Map<String,ClusterManager> managers = clusterSSO.getCluster().getManagers();
 	Session session = null;
 
 	if (ctxname == null) {
-	    java.util.Iterator i = managers.keySet().iterator();
+	    java.util.Iterator<String> i = managers.keySet().iterator();
 	    while (i.hasNext()) {
-		String key = (String) i.next();
-		ClusterManager mgr = (ClusterManager) managers.get(key);
+		String key = i.next();
+		ClusterManager mgr = managers.get(key);
 		if (mgr != null) {
 		    try {
 			session = mgr.findSession(sessionId);
@@ -162,7 +162,7 @@ public class ClusterSingleSignOnListener extends ClusterListener {
 		}
 	    }
 	} else {
-	    ClusterManager mgr = (ClusterManager) managers.get(ctxname);
+	    ClusterManager mgr = managers.get(ctxname);
 	    if (mgr != null) {
 		try {
 		    session = mgr.findSession(sessionId);

==================================================
ClusterJmxHelper.java
index 50d4edc5f3..a446e68c1f 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -26,18 +26,12 @@ import org.apache.catalina.core.ApplicationContext;
 import org.apache.catalina.Globals;
 import javax.servlet.ServletContext;
 import java.util.AbstractMap;
-import org.apache.catalina.tribes.tipis.AbstractReplicatedMap;
-import java.util.ArrayList;
-import java.util.Iterator;
-import javax.servlet.ServletContextAttributeListener;
-import javax.servlet.ServletContextAttributeEvent;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
 import java.util.Enumeration;
 import java.util.concurrent.ConcurrentHashMap;
 import org.apache.catalina.util.Enumerator;
 import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
-import org.apache.catalina.ha.session.DeltaSession;
 
 /**
  * @author Filip Hanik
@@ -79,7 +73,8 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
     public synchronized void stop() throws LifecycleException
     {
         if ( !this.started ) return;
-        AbstractMap map = (AbstractMap)((ReplApplContext)this.context).getAttributeMap();
+        AbstractMap<String,Object> map =
+            ((ReplApplContext)this.context).getAttributeMap();
         if ( map!=null && map instanceof ReplicatedMap) {
             ((ReplicatedMap)map).breakdown();
         }
@@ -131,7 +126,8 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
 
     
     protected static class ReplApplContext extends ApplicationContext {
-        protected ConcurrentHashMap tomcatAttributes = new ConcurrentHashMap();
+        protected ConcurrentHashMap<String, Object> tomcatAttributes =
+            new ConcurrentHashMap<String, Object>();
         
         public ReplApplContext(String basePath, ReplicatedContext context) {
             super(basePath,context);
@@ -145,10 +141,10 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
              return super.getFacade();
         }
         
-        public AbstractMap getAttributeMap() {
-            return (AbstractMap)this.attributes;
+        public AbstractMap<String,Object> getAttributeMap() {
+            return (AbstractMap<String,Object>)this.attributes;
         }
-        public void setAttributeMap(AbstractMap map) {
+        public void setAttributeMap(AbstractMap<String,Object> map) {
             this.attributes = map;
         }
         
@@ -172,15 +168,15 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
                 return super.getAttribute(name);
         }
         
-        public Enumeration getAttributeNames() {
-            return new MultiEnumeration(new Enumeration[] {super.getAttributeNames(),new Enumerator(tomcatAttributes.keySet(), true)});
+        public Enumeration<String> getAttributeNames() {
+            return new MultiEnumeration<String>(new Enumeration[] {super.getAttributeNames(),new Enumerator<String>(tomcatAttributes.keySet(), true)});
         }
         
     }
 
-    protected static class MultiEnumeration implements Enumeration {
-        Enumeration[] e=null;
-        public MultiEnumeration(Enumeration[] lists) {
+    protected static class MultiEnumeration<T> implements Enumeration<T> {
+        Enumeration<T>[] e=null;
+        public MultiEnumeration(Enumeration<T>[] lists) {
             e = lists;
         }
         public boolean hasMoreElements() {
@@ -189,7 +185,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
             }
             return false;
         }
-        public Object nextElement() {
+        public T nextElement() {
             for ( int i=0; i<e.length; i++ ) {
                 if ( e[i].hasMoreElements() ) return e[i].nextElement();
             }

==================================================
BackupManager.java
index 9995d5abff..ab4ed73f84 100644
--- a/java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
+++ b/java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
@@ -60,7 +60,7 @@ public class ClusterJmxHelper {
         return mbeanServer;
     }
     
-    protected static boolean initMetaData(Class clazz) {
+    protected static boolean initMetaData(Class<?> clazz) {
         try {
             if (clazz==null) return false;
             getRegistry().loadMetadata(clazz.getResourceAsStream("mbeans-descriptors.xml"));

==================================================
ClusterSessionListener.java
index 1655c29726..edc99f0992 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -30,7 +30,6 @@ import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.io.ReplicationStream;
 import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
 import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
-import org.apache.catalina.tribes.tipis.AbstractReplicatedMap;
 
 /**
  *@author Filip Hanik
@@ -193,7 +192,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
         
         try {
             cluster.registerManager(this);
-            CatalinaCluster catclust = (CatalinaCluster)cluster;
+            CatalinaCluster catclust = cluster;
             LazyReplicatedMap map = new LazyReplicatedMap(this,
                                                           catclust.getChannel(),
                                                           DEFAULT_REPL_TIMEOUT,
@@ -210,7 +209,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
     }
     
     public String getMapName() {
-        CatalinaCluster catclust = (CatalinaCluster)cluster;
+        CatalinaCluster catclust = cluster;
         String name = catclust.getManagerName(getName(),this)+"-"+"map";
         if ( log.isDebugEnabled() ) log.debug("Backup manager, Setting map name to:"+name);
         return name;
@@ -299,7 +298,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
     public String listSessionIdsFull() {
         StringBuffer sb=new StringBuffer();
         LazyReplicatedMap map = (LazyReplicatedMap)sessions;
-        Iterator keys = map.keySetFull().iterator();
+        Iterator<String> keys = map.keySetFull().iterator();
         while (keys.hasNext()) {
             sb.append(keys.next()).append(" ");
         }

==================================================
DeltaManager.java
index 14a911447f..4f41da0db6 100644
--- a/java/org/apache/catalina/ha/session/ClusterSessionListener.java
+++ b/java/org/apache/catalina/ha/session/ClusterSessionListener.java
@@ -17,10 +17,9 @@
 
 package org.apache.catalina.ha.session;
 
+import java.util.Iterator;
 import java.util.Map;
 
-import org.apache.catalina.ha.ClusterManager;
-import org.apache.catalina.ha.ClusterMessage;
 import org.apache.catalina.ha.*;
 
 /**
@@ -65,12 +64,12 @@ public class ClusterSessionListener extends ClusterListener {
             String ctxname = msg.getContextName();
             //check if the message is a EVT_GET_ALL_SESSIONS,
             //if so, wait until we are fully started up
-            Map managers = cluster.getManagers() ;
+            Map<String,ClusterManager> managers = cluster.getManagers() ;
             if (ctxname == null) {
-                java.util.Iterator i = managers.keySet().iterator();
+                Iterator<String> i = managers.keySet().iterator();
                 while (i.hasNext()) {
-                    String key = (String) i.next();
-                    ClusterManager mgr = (ClusterManager) managers.get(key);
+                    String key = i.next();
+                    ClusterManager mgr = managers.get(key);
                     if (mgr != null)
                         mgr.messageDataReceived(msg);
                     else {
@@ -82,7 +81,7 @@ public class ClusterSessionListener extends ClusterListener {
                     }
                 }
             } else {
-                ClusterManager mgr = (ClusterManager) managers.get(ctxname);
+                ClusterManager mgr = managers.get(ctxname);
                 if (mgr != null)
                     mgr.messageDataReceived(msg);
                 else if (log.isWarnEnabled())

==================================================
DeltaRequest.java
index c6f3aec2ba..51c9c16647 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -122,7 +122,8 @@ public class DeltaManager extends ClusterManagerBase{
      * wait time between send session block (default 2 sec) 
      */
     private int sendAllSessionsWaitTime = 2 * 1000 ; 
-    private ArrayList receivedMessageQueue = new ArrayList() ;
+    private ArrayList<SessionMessage> receivedMessageQueue =
+        new ArrayList<SessionMessage>() ;
     private boolean receiverQueue = false ;
     private boolean stateTimestampDrop = true ;
     private long stateTransferCreateSendTime; 
@@ -742,7 +743,7 @@ public class DeltaManager extends ClusterManagerBase{
                 try {
                     oos.close();
                 } catch (IOException f) {
-                    ;
+                    // Ignore
                 }
                 oos = null;
             }
@@ -880,13 +881,14 @@ public class DeltaManager extends ClusterManagerBase{
                      receiverQueue = true ;
                 }
                 cluster.send(msg, mbr);
-                if (log.isWarnEnabled()) log.warn(sm.getString("deltaManager.waitForSessionState",getName(), mbr,getStateTransferTimeout()));
+                if (log.isWarnEnabled())
+                    log.warn(sm.getString("deltaManager.waitForSessionState",getName(), mbr, Integer.valueOf(getStateTransferTimeout())));
                 // FIXME At sender ack mode this method check only the state transfer and resend is a problem!
                 waitForSendAllSessions(beforeSendTime);
             } finally {
                 synchronized(receivedMessageQueue) {
-                    for (Iterator iter = receivedMessageQueue.iterator(); iter.hasNext();) {
-                        SessionMessage smsg = (SessionMessage) iter.next();
+                    for (Iterator<SessionMessage> iter = receivedMessageQueue.iterator(); iter.hasNext();) {
+                        SessionMessage smsg = iter.next();
                         if (!stateTimestampDrop) {
                             messageReceived(smsg, smsg.getAddress() != null ? (Member) smsg.getAddress() : null);
                         } else {
@@ -1020,7 +1022,7 @@ public class DeltaManager extends ClusterManagerBase{
             try {
                 session.expire(true, isExpireSessionsOnShutdown());
             } catch (Throwable ignore) {
-                ;
+                // Ignore
             } 
         }
 

==================================================
DeltaSession.java
index 0683479733..8f3f68c239 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -62,8 +62,9 @@ public class DeltaRequest implements Externalizable {
     public static final String NAME_ISNEW = "__SET__ISNEW__";
 
     private String sessionId;
-    private LinkedList actions = new LinkedList();
-    private LinkedList actionPool = new LinkedList();
+    private LinkedList<AttributeInfo> actions = new LinkedList<AttributeInfo>();
+    private LinkedList<AttributeInfo> actionPool =
+        new LinkedList<AttributeInfo>();
     
     private boolean recordAllActions = false;
 
@@ -125,7 +126,7 @@ public class DeltaRequest implements Externalizable {
         AttributeInfo info = null;
         if ( this.actionPool.size() > 0 ) {
             try {
-                info = (AttributeInfo) actionPool.removeFirst();
+                info = actionPool.removeFirst();
             }catch ( Exception x ) {
                 log.error("Unable to remove element:",x);
                 info = new AttributeInfo(type, action, name, value);
@@ -156,7 +157,7 @@ public class DeltaRequest implements Externalizable {
             throw new java.lang.IllegalArgumentException("Session id mismatch, not executing the delta request");
         session.access();
         for ( int i=0; i<actions.size(); i++ ) {
-            AttributeInfo info = (AttributeInfo)actions.get(i);
+            AttributeInfo info = actions.get(i);
             switch ( info.getType() ) {
                 case TYPE_ATTRIBUTE: {
                     if ( info.getAction() == ACTION_SET ) {
@@ -183,7 +184,7 @@ public class DeltaRequest implements Externalizable {
                     Principal p = null;
                     if ( info.getAction() == ACTION_SET ) {
                         SerializablePrincipal sp = (SerializablePrincipal)info.getValue();
-                        p = (Principal)sp.getPrincipal(session.getManager().getContainer().getRealm());
+                        p = sp.getPrincipal(session.getManager().getContainer().getRealm());
                     }
                     session.setPrincipal(p,false);
                     break;
@@ -198,7 +199,7 @@ public class DeltaRequest implements Externalizable {
     public void reset() {
         while ( actions.size() > 0 ) {
             try {
-                AttributeInfo info = (AttributeInfo) actions.removeFirst();
+                AttributeInfo info = actions.removeFirst();
                 info.recycle();
                 actionPool.addLast(info);
             }catch  ( Exception x ) {
@@ -236,14 +237,14 @@ public class DeltaRequest implements Externalizable {
         recordAllActions = in.readBoolean();
         int cnt = in.readInt();
         if (actions == null)
-            actions = new LinkedList();
+            actions = new LinkedList<AttributeInfo>();
         else
             actions.clear();
         for (int i = 0; i < cnt; i++) {
             AttributeInfo info = null;
             if (this.actionPool.size() > 0) {
                 try {
-                    info = (AttributeInfo) actionPool.removeFirst();
+                    info = actionPool.removeFirst();
                 } catch ( Exception x )  {
                     log.error("Unable to remove element",x);
                     info = new AttributeInfo(-1,-1,null,null);
@@ -268,7 +269,7 @@ public class DeltaRequest implements Externalizable {
         out.writeBoolean(recordAllActions);
         out.writeInt(getSize());
         for ( int i=0; i<getSize(); i++ ) {
-            AttributeInfo info = (AttributeInfo)actions.get(i);
+            AttributeInfo info = actions.get(i);
             info.writeExternal(out);
         }
     }

==================================================
ReplicatedSession.java
index c92ab3ab92..63437874e4 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -36,6 +36,7 @@ import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpSessionContext;
 
 import org.apache.catalina.Manager;
+import org.apache.catalina.SessionListener;
 import org.apache.catalina.ha.ClusterManager;
 import org.apache.catalina.ha.ClusterSession;
 import org.apache.catalina.realm.GenericPrincipal;
@@ -605,13 +606,13 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         if (log.isDebugEnabled()) log.debug(sm.getString("deltaSession.readSession", id));
 
         // Deserialize the attribute count and attribute values
-        if (attributes == null) attributes = new Hashtable();
+        if (attributes == null) attributes = new Hashtable<String, Object>();
         int n = ( (Integer) stream.readObject()).intValue();
         boolean isValidSave = isValid;
         isValid = true;
         for (int i = 0; i < n; i++) {
             String name = (String) stream.readObject();
-            Object value = (Object) stream.readObject();
+            Object value = stream.readObject();
             if ( (value instanceof String) && (value.equals(NOT_SERIALIZED)))
                 continue;
             attributes.put(name, value);
@@ -619,11 +620,13 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         isValid = isValidSave;
 
         if (listeners == null) {
-            listeners = new ArrayList();
+            ArrayList<SessionListener> arrayList =
+                new ArrayList<SessionListener>();
+            listeners = arrayList;
         }
 
         if (notes == null) {
-            notes = new Hashtable();
+            notes = new Hashtable<String,Object>();
         }
         activate();
     }
@@ -682,8 +685,8 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
         // Accumulate the names of serializable and non-serializable attributes
         String keys[] = keys();
-        ArrayList saveNames = new ArrayList();
-        ArrayList saveValues = new ArrayList();
+        ArrayList<String> saveNames = new ArrayList<String>();
+        ArrayList<Object> saveValues = new ArrayList<Object>();
         for (int i = 0; i < keys.length; i++) {
             Object value = null;
             value = attributes.get(keys[i]);
@@ -699,7 +702,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         int n = saveNames.size();
         stream.writeObject(new Integer(n));
         for (int i = 0; i < n; i++) {
-            stream.writeObject( (String) saveNames.get(i));
+            stream.writeObject( saveNames.get(i));
             try {
                 stream.writeObject(saveValues.get(i));
             } catch (NotSerializableException e) {

==================================================
SimpleTcpReplicationManager.java
index 2fe1d708f2..3c8fcb0286 100644
--- a/java/org/apache/catalina/ha/session/ReplicatedSession.java
+++ b/java/org/apache/catalina/ha/session/ReplicatedSession.java
@@ -234,7 +234,7 @@ implements org.apache.catalina.ha.ClusterSession{
     protected void log(String message) {
 
         if ((mManager != null) && (mManager instanceof SimpleTcpReplicationManager)) {
-            ((SimpleTcpReplicationManager) mManager).log.debug("ReplicatedSession: " + message);
+            SimpleTcpReplicationManager.log.debug("ReplicatedSession: " + message);
         } else {
             System.out.println("ReplicatedSession: " + message);
         }
@@ -244,7 +244,7 @@ implements org.apache.catalina.ha.ClusterSession{
     protected void log(String message, Throwable x) {
 
         if ((mManager != null) && (mManager instanceof SimpleTcpReplicationManager)) {
-            ((SimpleTcpReplicationManager) mManager).log.error("ReplicatedSession: " + message,x);
+            SimpleTcpReplicationManager.log.error("ReplicatedSession: " + message,x);
         } else {
             System.out.println("ReplicatedSession: " + message);
             x.printStackTrace();
@@ -255,9 +255,9 @@ implements org.apache.catalina.ha.ClusterSession{
     public String toString() {
         StringBuffer buf = new StringBuffer("ReplicatedSession id=");
         buf.append(getIdInternal()).append(" ref=").append(super.toString()).append("\n");
-        java.util.Enumeration e = getAttributeNames();
+        java.util.Enumeration<String> e = getAttributeNames();
         while ( e.hasMoreElements() ) {
-            String name = (String)e.nextElement();
+            String name = e.nextElement();
             Object value = getAttribute(name);
             buf.append("\tname=").append(name).append("; value=").append(value).append("\n");
         }

==================================================
ReplicationValve.java
index 2360d66e03..07cc3fcbe6 100644
--- a/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
+++ b/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
@@ -94,7 +94,8 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
 
     protected CatalinaCluster cluster;
 
-    protected java.util.HashMap invalidatedSessions = new java.util.HashMap();
+    protected java.util.HashMap<String, String> invalidatedSessions =
+        new java.util.HashMap<String, String>();
 
     /**
      * Flag to keep track if the state has been transferred or not

==================================================
SimpleTcpCluster.java
index 0c17f36f0e..b80014a0b4 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -96,7 +96,8 @@ public class ReplicationValve
     /**
      * crossContext session container 
      */
-    protected ThreadLocal crossContextSessions = new ThreadLocal() ;
+    protected ThreadLocal<ArrayList<DeltaSession>> crossContextSessions =
+        new ThreadLocal<ArrayList<DeltaSession>>() ;
     
     /**
      * doProcessingStats (default = off)
@@ -299,7 +300,7 @@ public class ReplicationValve
      * @param session cross context session
      */
     public void registerReplicationSession(DeltaSession session) {
-        List sessions = (List)crossContextSessions.get();
+        List<DeltaSession> sessions = crossContextSessions.get();
         if(sessions != null) {
             if(!sessions.contains(session)) {
                 if(log.isDebugEnabled())
@@ -342,7 +343,7 @@ public class ReplicationValve
                 if(log.isDebugEnabled())
                     log.debug(sm.getString("ReplicationValve.crossContext.add"));
                 //FIXME add Pool of Arraylists
-                crossContextSessions.set(new ArrayList());
+                crossContextSessions.set(new ArrayList<DeltaSession>());
             }
             getNext().invoke(request, response);
             if(context != null) {
@@ -448,9 +449,9 @@ public class ReplicationValve
     protected void sendCrossContextSession(CatalinaCluster containerCluster) {
         Object sessions = crossContextSessions.get();
         if(sessions != null && sessions instanceof List
-                && ((List)sessions).size() >0) {
-            for(Iterator iter = ((List)sessions).iterator(); iter.hasNext() ;) {          
-                Session session = (Session)iter.next();
+                && ((List<Session>)sessions).size() >0) {
+            for(Iterator<Session> iter = ((List<Session>)sessions).iterator(); iter.hasNext() ;) {          
+                Session session = iter.next();
                 if(log.isDebugEnabled())
                     log.debug(sm.getString("ReplicationValve.crossContext.sendDelta",  
                             session.getManager().getContainer().getName() ));
@@ -469,17 +470,17 @@ public class ReplicationValve
      */
     protected void resetReplicationRequest(Request request, boolean isCrossContext) {
         Session contextSession = request.getSessionInternal(false);
-        if(contextSession != null & contextSession instanceof DeltaSession){
+        if(contextSession instanceof DeltaSession){
             resetDeltaRequest(contextSession);
             ((DeltaSession)contextSession).setPrimarySession(true);
         }
         if(isCrossContext) {
             Object sessions = crossContextSessions.get();
             if(sessions != null && sessions instanceof List
-               && ((List)sessions).size() >0) {
-                Iterator iter = ((List)sessions).iterator();
+               && ((List<Session>)sessions).size() >0) {
+                Iterator<Session> iter = ((List<Session>)sessions).iterator();
                 for(; iter.hasNext() ;) {          
-                    Session session = (Session)iter.next();
+                    Session session = iter.next();
                     resetDeltaRequest(session);
                     if(session instanceof DeltaSession)
                         ((DeltaSession)contextSession).setPrimarySession(true);
@@ -636,13 +637,12 @@ public class ReplicationValve
             Session session = manager.findSession(id);
             if (session instanceof ClusterSession) {
                 ClusterSession cses = (ClusterSession) session;
-                if (cses != null) {
-                    if (log.isDebugEnabled())
-                        log.debug(sm.getString(
-                                "ReplicationValve.session.indicator", request.getContext().getName(),id,
-                                primaryIndicatorName, cses.isPrimarySession()));
-                    request.setAttribute(primaryIndicatorName, cses.isPrimarySession()?Boolean.TRUE:Boolean.FALSE);
-                }
+                if (log.isDebugEnabled())
+                    log.debug(sm.getString(
+                            "ReplicationValve.session.indicator", request.getContext().getName(),id,
+                            primaryIndicatorName,
+                            Boolean.valueOf(cses.isPrimarySession())));
+                request.setAttribute(primaryIndicatorName, cses.isPrimarySession()?Boolean.TRUE:Boolean.FALSE);
             } else {
                 if (log.isDebugEnabled()) {
                     if (session != null) {

==================================================
IDynamicProperty.java
index edaa1e332a..3f00ad8d07 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -155,18 +155,19 @@ public class SimpleTcpCluster
     /**
      * The context name <->manager association for distributed contexts.
      */
-    protected Map managers = new HashMap();
+    protected Map<String, ClusterManager> managers =
+        new HashMap<String, ClusterManager>();
 
     protected ClusterManager managerTemplate = new DeltaManager();
 
-    private List valves = new ArrayList();
+    private List<Valve> valves = new ArrayList<Valve>();
 
     private org.apache.catalina.ha.ClusterDeployer clusterDeployer;
 
     /**
      * Listeners of messages
      */
-    protected List clusterListeners = new ArrayList();
+    protected List<ClusterListener> clusterListeners = new ArrayList<ClusterListener>();
 
     /**
      * Comment for <code>notifyLifecycleListenerOnFailure</code>
@@ -176,7 +177,7 @@ public class SimpleTcpCluster
     /**
      * dynamic sender <code>properties</code>
      */
-    private Map properties = new HashMap();
+    private Map<String, Object> properties = new HashMap<String, Object>();
     
     private int channelSendOptions = Channel.SEND_OPTIONS_ASYNCHRONOUS;
     
@@ -307,7 +308,7 @@ public class SimpleTcpCluster
      * @return current cluster valves
      */
     public Valve[] getValves() {
-        return (Valve[]) valves.toArray(new Valve[valves.size()]);
+        return valves.toArray(new Valve[valves.size()]);
     }
 
     /**
@@ -447,7 +448,7 @@ public class SimpleTcpCluster
      * 
      * @return An iterator over the property names.
      */
-    public Iterator getPropertyNames() {
+    public Iterator<String> getPropertyNames() {
         return properties.keySet().iterator();
     }
 
@@ -467,8 +468,8 @@ public class SimpleTcpCluster
      */
     protected void transferProperty(String prefix, Object bean) {
         if (prefix != null) {
-            for (Iterator iter = getPropertyNames(); iter.hasNext();) {
-                String pkey = (String) iter.next();
+            for (Iterator<String> iter = getPropertyNames(); iter.hasNext();) {
+                String pkey = iter.next();
                 if (pkey.startsWith(prefix)) {
                     String key = pkey.substring(prefix.length() + 1);
                     Object value = getProperty(pkey);
@@ -483,7 +484,7 @@ public class SimpleTcpCluster
     /**
      * @return Returns the managers.
      */
-    public Map getManagers() {
+    public Map<String, ClusterManager> getManagers() {
         return managers;
     }
 
@@ -538,7 +539,7 @@ public class SimpleTcpCluster
         cmanager.setCluster(this);
         cmanager.setDefaultMode(false);
     
-        managers.put(clusterName, manager);
+        managers.put(clusterName, cmanager);
         // Notify our interested LifecycleListeners
         lifecycle.fireLifecycleEvent(AFTER_MANAGERREGISTER_EVENT, manager);    
     }
@@ -585,7 +586,7 @@ public class SimpleTcpCluster
      * @see org.apache.catalina.ha.CatalinaCluster#getManager(java.lang.String)
      */
     public Manager getManager(String name) {
-        return (Manager) managers.get(name);
+        return managers.get(name);
     }
     
     // ------------------------------------------------------ Lifecycle Methods
@@ -712,7 +713,7 @@ public class SimpleTcpCluster
      */
     protected void registerClusterValve() throws Exception {
         if(container != null ) {
-            for (Iterator iter = valves.iterator(); iter.hasNext();) {
+            for (Iterator<Valve> iter = valves.iterator(); iter.hasNext();) {
                 ClusterValve valve = (ClusterValve) iter.next();
                 if (log.isDebugEnabled())
                     log.debug("Invoking addValve on " + getContainer()
@@ -734,7 +735,7 @@ public class SimpleTcpCluster
      * @throws ClassNotFoundException
      */
     protected void unregisterClusterValve() throws Exception {
-        for (Iterator iter = valves.iterator(); iter.hasNext();) {
+        for (Iterator<Valve> iter = valves.iterator(); iter.hasNext();) {
             ClusterValve valve = (ClusterValve) iter.next();
             if (log.isDebugEnabled())
                 log.debug("Invoking removeValve on " + getContainer()
@@ -897,7 +898,6 @@ public class SimpleTcpCluster
 
     public void messageReceived(ClusterMessage message) {
 
-        long start = 0;
         if (log.isDebugEnabled() && message != null)
             log.debug("Assuming clocks are synched: Replication for "
                     + message.getUniqueId() + " took="
@@ -907,8 +907,8 @@ public class SimpleTcpCluster
         //invoke all the listeners
         boolean accepted = false;
         if (message != null) {
-            for (Iterator iter = clusterListeners.iterator(); iter.hasNext();) {
-                ClusterListener listener = (ClusterListener) iter.next();
+            for (Iterator<ClusterListener> iter = clusterListeners.iterator(); iter.hasNext();) {
+                ClusterListener listener = iter.next();
                 if (listener.accept(message)) {
                     accepted = true;
                     listener.messageReceived(message);

==================================================
