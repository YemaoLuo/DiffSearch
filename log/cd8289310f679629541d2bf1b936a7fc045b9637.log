cd8289310f679629541d2bf1b936a7fc045b9637
==================================================
Clarify behaviour of Manager.context
==================================================
asf-sync-process asf-sync-process@unknown
==================================================
Tue Jan 19 22:59:38 2016 +0000
==================================================
Manager.java
Clarify behaviour of Manager.context

Note: This does not impact Context.manager

A Manager can only be used with a single Context and must then be destroyed when no longer required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725646 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SingleSignOnListener.java
index 05cb02060c..be55bab7f4 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -50,7 +50,11 @@ public interface Manager {
 
 
     /**
-     * Set the Container with which this Manager is associated.
+     * Set the Context with which this Manager is associated. The Context must
+     * be set to a non-null value before the Manager is first used. Multiple
+     * calls to this method before first use are permitted. Once the Manager has
+     * been used, this method may not be used to change the Context (including
+     * setting a {@code null} value) that the Manager is associated with.
      *
      * @param context The newly associated Context
      */

==================================================
StandardContext.java
index 4f6c9b62bc..15e88e0d79 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOnListener.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOnListener.java
@@ -48,9 +48,6 @@ public class SingleSignOnListener implements SessionListener, Serializable {
             return;
         }
         Context context = manager.getContext();
-        if (context == null) {
-            return;
-        }
         Authenticator authenticator = context.getAuthenticator();
         if (!(authenticator instanceof AuthenticatorBase)) {
             return;

==================================================
SimpleTcpCluster.java
index 7819fb3364..0dbaaa2b42 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -1700,16 +1700,6 @@ public class StandardContext extends ContainerBase
         support.firePropertyChange("distributable",
                                    oldDistributable,
                                    this.distributable);
-
-        // Bugzilla 32866
-        Manager manager = getManager();
-        if(manager != null) {
-            if(log.isDebugEnabled()) {
-                log.debug("Propagating distributable=" + distributable
-                          + " to manager");
-            }
-            manager.setDistributable(distributable);
-        }
     }
 
 
@@ -1835,20 +1825,20 @@ public class StandardContext extends ContainerBase
             this.manager = manager;
 
             // Stop the old component if necessary
-            if (getState().isAvailable() && (oldManager != null) &&
-                (oldManager instanceof Lifecycle)) {
+            if (oldManager instanceof Lifecycle) {
                 try {
                     ((Lifecycle) oldManager).stop();
+                    ((Lifecycle) oldManager).destroy();
                 } catch (LifecycleException e) {
-                    log.error("StandardContext.setManager: stop: ", e);
+                    log.error("StandardContext.setManager: stop-destroy: ", e);
                 }
             }
 
             // Start the new component if necessary
-            if (manager != null)
+            if (manager != null) {
                 manager.setContext(this);
-            if (getState().isAvailable() && (manager != null) &&
-                (manager instanceof Lifecycle)) {
+            }
+            if (getState().isAvailable() && manager instanceof Lifecycle) {
                 try {
                     ((Lifecycle) manager).start();
                 } catch (LifecycleException e) {

==================================================
FileStore.java
index 7243d9c956..d38a7561c5 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -463,13 +463,11 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
         String clusterName = name ;
         if (clusterName == null) clusterName = manager.getContext().getName();
         if (getContainer() instanceof Engine) {
-            Context context = manager.getContext() ;
-            if(context != null) {
-                Container host = context.getParent();
-                if(host instanceof Host && clusterName!=null &&
-                        !(clusterName.startsWith(host.getName() +"#"))) {
-                    clusterName = host.getName() +"#" + clusterName ;
-                }
+            Context context = manager.getContext();
+            Container host = context.getParent();
+            if (host instanceof Host && clusterName != null &&
+                    !(clusterName.startsWith(host.getName() +"#"))) {
+                clusterName = host.getName() +"#" + clusterName ;
             }
         }
         return clusterName;

==================================================
ManagerBase.java
index 2dd8625ec8..e6f046d045 100644
--- a/java/org/apache/catalina/session/LocalStrings.properties
+++ b/java/org/apache/catalina/session/LocalStrings.properties
@@ -31,10 +31,12 @@ JDBCStore.wrongDataSource=Cannot open JNDI DataSource [{0}]
 JDBCStore.missingDataSourceName=No valid JNDI name was given.
 JDBCStore.commitSQLException=SQLException committing connection before closing
 managerBase.container.noop=Managers added to containers other than Contexts will never be used
+managerBase.contextNull=The Context must be set to a non-null value before the Manager is used
 managerBase.createSession.ise=createSession: Too many active sessions
 managerBase.sessionAttributeNameFilter=Skipped session attribute named [{0}] because it did not match the name filter [{1}]
 managerBase.sessionAttributeValueClassNameFilter=Skipped session attribute named [{0}] because the value type [{1}] did not match the filter [{2}]
 managerBase.sessionTimeout=Invalid session timeout setting {0}
+managerBase.setContextNotNew=It is illegal to call setContext() to change the Context associated with a Manager if the Manager is not in the NEW state
 standardManager.loading=Loading persisted sessions from {0}
 standardManager.loading.exception=Exception while loading persisted sessions
 standardManager.unloading=Saving persisted sessions to {0}

==================================================
StandardManager.java
index dcb03310af..3ddae36c47 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -40,6 +40,7 @@ import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
+import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Session;
 import org.apache.catalina.SessionIdGenerator;
@@ -349,20 +350,16 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     @Override
     public void setContext(Context context) {
-        // De-register from the old Context (if any)
-        if (this.context != null) {
-            this.context.removePropertyChangeListener(this);
+        if (this.context == context) {
+            // NO-OP
+            return;
+        }
+        if (!getState().equals(LifecycleState.NEW)) {
+            throw new IllegalStateException(sm.getString("managerBase.setContextNotNew"));
         }
-
         Context oldContext = this.context;
         this.context = context;
         support.firePropertyChange("context", oldContext, this.context);
-
-        // Register with the new Context (if any)
-        if (this.context != null) {
-            setMaxInactiveInterval(this.context.getSessionTimeout() * 60);
-            this.context.addPropertyChangeListener(this);
-        }
     }
 
 
@@ -608,7 +605,16 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
         super.initInternal();
 
+        if (context == null) {
+            throw new LifecycleException(sm.getString("managerBase.contextNull"));
+        }
+
+        // Copy current values from Context
+        setMaxInactiveInterval(this.context.getSessionTimeout() * 60);
         setDistributable(getContext().getDistributable());
+
+        // Track any further changes in those values
+        this.context.addPropertyChangeListener(this);
     }
 
     @Override
@@ -658,6 +664,17 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
+    @Override
+    protected void destroyInternal() throws LifecycleException {
+        // De-register from the old Context (if any)
+        if (this.context != null) {
+            this.context.removePropertyChangeListener(this);
+        }
+
+        super.destroyInternal();
+    }
+
+
     @Override
     public void add(Session session) {
         sessions.put(session.getIdInternal(), session);
@@ -1326,6 +1343,8 @@ public abstract class ManagerBase extends LifecycleMBeanBase
                 log.error(sm.getString("managerBase.sessionTimeout",
                         event.getNewValue()));
             }
+        } else if (event.getPropertyName().equals("distributable")) {
+            setDistributable(((Boolean) event.getNewValue()).booleanValue());
         }
     }
 

==================================================
StandardSession.java
index 82a0217d7e..1decb5a852 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -194,9 +194,7 @@ public class StandardManager extends ManagerBase {
         try (FileInputStream fis = new FileInputStream(file.getAbsolutePath());
                 BufferedInputStream bis = new BufferedInputStream(fis);) {
             Context c = getContext();
-            if (c != null) {
-                loader = c.getLoader();
-            }
+            loader = c.getLoader();
             if (loader != null) {
                 classLoader = loader.getClassLoader();
             }
@@ -415,17 +413,16 @@ public class StandardManager extends ManagerBase {
      * @return the file
      */
     protected File file() {
-        if ((pathname == null) || (pathname.length() == 0))
-            return (null);
+        if (pathname == null || pathname.length() == 0) {
+            return null;
+        }
         File file = new File(pathname);
         if (!file.isAbsolute()) {
             Context context = getContext();
-            if (context != null) {
-                ServletContext servletContext = context.getServletContext();
-                File tempdir = (File)
-                    servletContext.getAttribute(ServletContext.TEMPDIR);
-                if (tempdir != null)
-                    file = new File(tempdir, pathname);
+            ServletContext servletContext = context.getServletContext();
+            File tempdir = (File) servletContext.getAttribute(ServletContext.TEMPDIR);
+            if (tempdir != null) {
+                file = new File(tempdir, pathname);
             }
         }
         return file;

==================================================
