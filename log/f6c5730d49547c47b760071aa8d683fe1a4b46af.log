f6c5730d49547c47b760071aa8d683fe1a4b46af
==================================================
Align remaining ActionCodes
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:47:25 2016 +0000
==================================================
AjpProcessor.java
Align remaining ActionCodes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756104 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 96aa1d5842..c4a7b41615 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -35,6 +35,7 @@ import org.apache.coyote.AsyncContextCallback;
 import org.apache.coyote.ErrorState;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
+import org.apache.coyote.PushToken;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.UpgradeToken;
 import org.apache.juli.logging.Log;
@@ -574,22 +575,19 @@ public class AjpProcessor extends AbstractProcessor {
 
         // Servlet 3.1 HTTP Upgrade
         case UPGRADE: {
-            // HTTP connections only. Unsupported for AJP.
-            throw new UnsupportedOperationException(
-                    sm.getString("ajpprocessor.httpupgrade.notsupported"));
+            doHttpUpgrade((UpgradeToken) param);
+            break;
         }
 
         // Servlet 4.0 Push requests
         case IS_PUSH_SUPPORTED: {
-            // HTTP2 connections only. Unsupported for AJP.
             AtomicBoolean result = (AtomicBoolean) param;
-            result.set(false);
+            result.set(isPushSupported());
             break;
         }
         case PUSH_REQUEST: {
-            // HTTP2 connections only. Unsupported for AJP.
-            throw new UnsupportedOperationException(
-                    sm.getString("ajpprocessor.pushrequest.notsupported"));
+            doPush((PushToken) param);
+            break;
         }
         }
     }
@@ -1529,6 +1527,32 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
+    /**
+     * @param upgradeToken Unused.
+     */
+    private void doHttpUpgrade(UpgradeToken upgradeToken) {
+        // HTTP connections only. Unsupported for AJP.
+        throw new UnsupportedOperationException(
+                sm.getString("ajpprocessor.httpupgrade.notsupported"));
+    }
+
+
+    private boolean isPushSupported() {
+        // HTTP2 connections only. Unsupported for AJP.
+        return false;
+    }
+
+
+    /**
+     * @param pushToken Unused
+     */
+    private void doPush(PushToken pushToken) {
+        // HTTP2 connections only. Unsupported for AJP.
+        throw new UnsupportedOperationException(
+                sm.getString("ajpprocessor.pushrequest.notsupported"));
+    }
+
+
     /**
      * Read at least the specified amount of bytes, and place them
      * in the input buffer. Note that if any data is available to read then this

==================================================
StreamProcessor.java
index ef46d64b0c..8f93811a25 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -32,6 +32,7 @@ import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.AsyncContextCallback;
 import org.apache.coyote.ErrorState;
+import org.apache.coyote.PushToken;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.UpgradeProtocol;
@@ -867,23 +868,19 @@ public class Http11Processor extends AbstractProcessor {
 
         // Servlet 3.1 HTTP Upgrade
         case UPGRADE: {
-            upgradeToken = (UpgradeToken) param;
-            // Stop further HTTP output
-            outputBuffer.responseFinished = true;
+            doHttpUpgrade((UpgradeToken) param);
             break;
         }
 
         // Servlet 4.0 Push requests
         case IS_PUSH_SUPPORTED: {
-            // HTTP2 connections only. Unsupported for HTTP/1.x
             AtomicBoolean result = (AtomicBoolean) param;
-            result.set(false);
+            result.set(isPushSupported());
             break;
         }
         case PUSH_REQUEST: {
-            // HTTP2 connections only. Unsupported for AJP.
-            throw new UnsupportedOperationException(
-                    sm.getString("http11processor.pushrequest.notsupported"));
+            doPush((PushToken) param);
+            break;
         }
         }
     }
@@ -1852,6 +1849,29 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    private void doHttpUpgrade(UpgradeToken upgradeToken) {
+        this.upgradeToken = upgradeToken;
+        // Stop further HTTP output
+        outputBuffer.responseFinished = true;
+    }
+
+
+    private boolean isPushSupported() {
+        // HTTP2 connections only. Unsupported for HTTP/1.x
+        return false;
+    }
+
+
+    /**
+     * @param pushToken Unused
+     */
+    private void doPush(PushToken pushToken) {
+        // HTTP2 connections only. Unsupported for AJP.
+        throw new UnsupportedOperationException(
+                sm.getString("http11processor.pushrequest.notsupported"));
+    }
+
+
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
