c8e01fb2e2a83190fa8df459f047bf09a19d93e3
==================================================
More typos reported by Kazuhiro Sera.
==================================================
Mark Thomas
==================================================
Fri Aug 10 15:26:16 2018 +0000
==================================================
SavedRequestInputFilter.java
More typos reported by Kazuhiro Sera.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1837812 13f79535-47bb-0310-9956-ffa450edef68



==================================================
B2CConverter.java
index d27c8da63c..5229bcbb57 100644
--- a/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
@@ -52,7 +52,7 @@ public class SavedRequestInputFilter implements InputFilter {
 
         ByteBuffer byteBuffer = handler.getByteBuffer();
         byteBuffer.position(byteBuffer.limit()).limit(byteBuffer.capacity());
-        input.substract(byteBuffer);
+        input.subtract(byteBuffer);
 
         return byteBuffer.remaining();
     }

==================================================
ByteChunk.java
index f046ad7094..b2e2a7a723 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -158,7 +158,7 @@ public class B2CConverter {
             int pos = cb.position();
             // Loop until one char is decoded or there is a decoder error
             do {
-                leftovers.put(bc.substractB());
+                leftovers.put(bc.subtractB());
                 leftovers.flip();
                 result = decoder.decode(leftovers, cb, endOfInput);
                 leftovers.position(leftovers.limit());
@@ -188,7 +188,7 @@ public class B2CConverter {
             if (bc.getLength() > 0) {
                 leftovers.limit(leftovers.array().length);
                 leftovers.position(bc.getLength());
-                bc.substract(leftovers.array(), 0, bc.getLength());
+                bc.subtract(leftovers.array(), 0, bc.getLength());
             }
         }
     }

==================================================
C2BConverter.java
index da2169ebf5..85c75a75a7 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -389,15 +389,32 @@ public final class ByteChunk extends AbstractChunk {
 
     // -------------------- Removing data from the buffer --------------------
 
+    /*
+     * @deprecated Use {@link #subtract()}.
+     *             This method will be removed in Tomcat 10
+     */
+    @Deprecated
     public int substract() throws IOException {
+        return subtract();
+    }
+
+    public int subtract() throws IOException {
         if (checkEof()) {
             return -1;
         }
         return buff[start++] & 0xFF;
     }
 
-
+    /*
+     * @deprecated Use {@link #subtractB()}.
+     *             This method will be removed in Tomcat 10
+     */
+    @Deprecated
     public byte substractB() throws IOException {
+        return subtractB();
+    }
+
+    public byte subtractB() throws IOException {
         if (checkEof()) {
             return -1;
         }
@@ -405,7 +422,16 @@ public final class ByteChunk extends AbstractChunk {
     }
 
 
+    /*
+     * @deprecated Use {@link #subtract(byte[],int,int)}.
+     *             This method will be removed in Tomcat 10
+     */
+    @Deprecated
     public int substract(byte dest[], int off, int len) throws IOException {
+        return subtract(dest, off, len);
+    }
+
+    public int subtract(byte dest[], int off, int len) throws IOException {
         if (checkEof()) {
             return -1;
         }
@@ -429,8 +455,28 @@ public final class ByteChunk extends AbstractChunk {
      * @return an integer specifying the actual number of bytes read, or -1 if
      *         the end of the stream is reached
      * @throws IOException if an input or output exception has occurred
+     *
+     * @deprecated Use {@link #subtract(ByteBuffer)}.
+     *             This method will be removed in Tomcat 10
      */
+    @Deprecated
     public int substract(ByteBuffer to) throws IOException {
+        return subtract(to);
+    }
+
+
+    /**
+     * Transfers bytes from the buffer to the specified ByteBuffer. After the
+     * operation the position of the ByteBuffer will be returned to the one
+     * before the operation, the limit will be the position incremented by the
+     * number of the transfered bytes.
+     *
+     * @param to the ByteBuffer into which bytes are to be written.
+     * @return an integer specifying the actual number of bytes read, or -1 if
+     *         the end of the stream is reached
+     * @throws IOException if an input or output exception has occurred
+     */
+    public int subtract(ByteBuffer to) throws IOException {
         if (checkEof()) {
             return -1;
         }

==================================================
CharChunk.java
index e5062defb7..4b27f6c980 100644
--- a/java/org/apache/tomcat/util/buf/C2BConverter.java
+++ b/java/org/apache/tomcat/util/buf/C2BConverter.java
@@ -88,7 +88,7 @@ public final class C2BConverter {
             int pos = bb.position();
             // Loop until one char is encoded or there is a encoder error
             do {
-                leftovers.put((char) cc.substract());
+                leftovers.put((char) cc.subtract());
                 leftovers.flip();
                 result = encoder.encode(leftovers, bb, false);
                 leftovers.position(leftovers.limit());
@@ -117,7 +117,7 @@ public final class C2BConverter {
             if (cc.getLength() > 0) {
                 leftovers.limit(leftovers.array().length);
                 leftovers.position(cc.getLength());
-                cc.substract(leftovers.array(), 0, cc.getLength());
+                cc.subtract(leftovers.array(), 0, cc.getLength());
             }
         }
     }

==================================================
