9e473bad4348997bc270c123b506cf73dc3d92e0
==================================================
Added in documentation
==================================================
Filip Hanik
==================================================
Tue Oct 10 16:03:36 2006 +0000
==================================================
Channel.java
Added in documentation


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@454797 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractReplicatedMap.java
index 1212ba145b..fb8bc0af13 100644
--- a/java/org/apache/catalina/tribes/Channel.java
+++ b/java/org/apache/catalina/tribes/Channel.java
@@ -123,7 +123,7 @@ public interface Channel {
      * Send options, when a message is sent, it can have an option flag
      * to trigger certain behavior. Most flags are used to trigger channel interceptors
      * as the message passes through the channel stack. <br>
-     * However, there are four default flags that every channel implementation must implement<br>
+     * However, there are five default flags that every channel implementation must implement<br>
      * SEND_OPTIONS_BYTE_MESSAGE - The message is a pure byte message and no marshalling or unmarshalling will
      * be performed.<br>
      * 
@@ -136,7 +136,7 @@ public interface Channel {
      * Send options, when a message is sent, it can have an option flag
      * to trigger certain behavior. Most flags are used to trigger channel interceptors
      * as the message passes through the channel stack. <br>
-     * However, there are four default flags that every channel implementation must implement<br>
+     * However, there are five default flags that every channel implementation must implement<br>
      * SEND_OPTIONS_USE_ACK - Message is sent and an ACK is received when the message has been received by the recipient<br>
      * If no ack is received, the message is not considered successful<br>
      * @see #send(Member[], Serializable , int)
@@ -148,7 +148,7 @@ public interface Channel {
      * Send options, when a message is sent, it can have an option flag
      * to trigger certain behavior. Most flags are used to trigger channel interceptors
      * as the message passes through the channel stack. <br>
-     * However, there are four default flags that every channel implementation must implement<br>
+     * However, there are five default flags that every channel implementation must implement<br>
      * SEND_OPTIONS_SYNCHRONIZED_ACK - Message is sent and an ACK is received when the message has been received and 
      * processed by the recipient<br>
      * If no ack is received, the message is not considered successful<br>
@@ -161,7 +161,7 @@ public interface Channel {
      * Send options, when a message is sent, it can have an option flag
      * to trigger certain behavior. Most flags are used to trigger channel interceptors
      * as the message passes through the channel stack. <br>
-     * However, there are four default flags that every channel implementation must implement<br>
+     * However, there are five default flags that every channel implementation must implement<br>
      * SEND_OPTIONS_ASYNCHRONOUS - Message is sent and an ACK is received when the message has been received and 
      * processed by the recipient<br>
      * If no ack is received, the message is not considered successful<br>
@@ -170,12 +170,23 @@ public interface Channel {
      */
     public static final int SEND_OPTIONS_ASYNCHRONOUS = 0x0008;
     
+    /**
+     * Send options, when a message is sent, it can have an option flag
+     * to trigger certain behavior. Most flags are used to trigger channel interceptors
+     * as the message passes through the channel stack. <br>
+     * However, there are five default flags that every channel implementation must implement<br>
+     * SEND_OPTIONS_SECURE - Message is sent over an encrypted channel<br>
+     * @see #send(Member[], Serializable , int)
+     * @see #send(Member[], Serializable, int, ErrorHandler)
+     */
+    public static final int SEND_OPTIONS_SECURE = 0x0010;
+    
 
     /**
      * Send options, when a message is sent, it can have an option flag
      * to trigger certain behavior. Most flags are used to trigger channel interceptors
      * as the message passes through the channel stack. <br>
-     * However, there are four default flags that every channel implementation must implement<br>
+     * However, there are five default flags that every channel implementation must implement<br>
      * SEND_OPTIONS_DEFAULT - the default sending options, just a helper variable. <br>
      * The default is <code>int SEND_OPTIONS_DEFAULT = SEND_OPTIONS_USE_ACK;</code><br>
      * @see #SEND_OPTIONS_USE_ACK

==================================================
