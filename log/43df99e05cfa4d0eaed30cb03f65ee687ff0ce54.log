43df99e05cfa4d0eaed30cb03f65ee687ff0ce54
==================================================
Log a warning for CLIENT-CERT + JSSE TLS 1.3 as PHA is not supported
==================================================
Mark Thomas
==================================================
Thu Mar 24 16:19:09 2022 +0000
==================================================
SSLAuthenticator.java
index 0030ce332c..81acc29369 100644
--- a/java/org/apache/catalina/authenticator/LocalStrings.properties
+++ b/java/org/apache/catalina/authenticator/LocalStrings.properties
@@ -70,3 +70,6 @@ spnegoAuthenticator.authHeaderNoToken=The Negotiate authorization header sent by
 spnegoAuthenticator.authHeaderNotNego=The authorization header sent by the client did not start with Negotiate
 spnegoAuthenticator.serviceLoginFail=Unable to login as the service principal
 spnegoAuthenticator.ticketValidateFail=Failed to validate client supplied ticket
+
+sslAuthenticatorValve.http2=The context [{0}] in virtual host [{1}] is configured to use CLIENT-CERT authentication and [{2}] is configured to support HTTP/2. Use of CLIENT-CERT authentication is not compatible with the use of HTTP/2.
+sslAuthenticatorValve.tls13=The context [{0}] in virtual host [{1}] is configured to use CLIENT-CERT authentication and [{2}] is configured to support TLS 1.3 using JSSE. Use of CLIENT-CERT authentication is not compatible with the use of TLS 1.3 and JSSE.

==================================================
SSLHostConfig.java
index 9844b225be..30344b9bdd 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -23,9 +23,20 @@ import java.security.cert.X509Certificate;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 
+import org.apache.catalina.Container;
+import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
 import org.apache.catalina.Globals;
+import org.apache.catalina.Host;
+import org.apache.catalina.LifecycleException;
+import org.apache.catalina.connector.Connector;
 import org.apache.catalina.connector.Request;
 import org.apache.coyote.ActionCode;
+import org.apache.coyote.UpgradeProtocol;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.net.Constants;
+import org.apache.tomcat.util.net.SSLHostConfig;
 
 /**
  * An <b>Authenticator</b> and <b>Valve</b> implementation of authentication
@@ -35,6 +46,8 @@ import org.apache.coyote.ActionCode;
  */
 public class SSLAuthenticator extends AuthenticatorBase {
 
+    private final Log log = LogFactory.getLog(SSLAuthenticator.class); // must not be static
+
     /**
      * Authenticate the user by checking for the existence of a certificate
      * chain, validating it against the trust manager for the connector and then
@@ -137,4 +150,61 @@ public class SSLAuthenticator extends AuthenticatorBase {
 
         return certs;
     }
+
+
+    @Override
+    protected synchronized void startInternal() throws LifecycleException {
+
+        super.startInternal();
+
+        /*
+         * This Valve should only ever be added to a Context and if the Context
+         * is started there should always be a Host and an Engine but test at
+         * each stage to be safe.
+         */
+        Container container = getContainer();
+        if (!(container instanceof Context)) {
+            return;
+        }
+        Context context = (Context) container;
+
+        container = context.getParent();
+        if (!(container instanceof Host)) {
+            return;
+        }
+        Host host = (Host) container;
+
+        container = host.getParent();
+        if (!(container instanceof Engine)) {
+            return;
+        }
+        Engine engine = (Engine) container;
+
+
+        Connector[] connectors = engine.getService().findConnectors();
+
+        for (Connector connector : connectors) {
+            // First check for upgrade
+            UpgradeProtocol[] upgradeProtocols = connector.findUpgradeProtocols();
+            for (UpgradeProtocol upgradeProtocol : upgradeProtocols) {
+                if ("h2".equals(upgradeProtocol.getAlpnName())) {
+                    log.warn(sm.getString("sslAuthenticatorValve.http2", context.getName(), host.getName(), connector));
+                    break;
+                }
+            }
+
+            // Then check for TLS 1.3
+            SSLHostConfig[] sslHostConfigs = connector.findSslHostConfigs();
+            for (SSLHostConfig sslHostConfig : sslHostConfigs) {
+                if (!sslHostConfig.isTls13RenegotiationAvailable()) {
+                    String[] enabledProtocols = sslHostConfig.getEnabledProtocols();
+                    for (String enbabledProtocol : enabledProtocols) {
+                        if (Constants.SSL_PROTO_TLSv1_3.equals(enbabledProtocol)) {
+                            log.warn(sm.getString("sslAuthenticatorValve.tls13", context.getName(), host.getName(), connector));
+                        }
+                    }
+                }
+            }
+        }
+    }
 }

==================================================
SSLUtilBase.java
index 81552f47e8..9a06c52fff 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -77,6 +77,8 @@ public class SSLHostConfig implements Serializable {
     // reference is held on the certificate.
     private transient Long openSslContext = Long.valueOf(0);
 
+    private boolean tls13RenegotiationAvailable = false;
+
     // Configuration properties
 
     // Internal
@@ -130,6 +132,16 @@ public class SSLHostConfig implements Serializable {
     }
 
 
+    public boolean isTls13RenegotiationAvailable() {
+        return tls13RenegotiationAvailable;
+    }
+
+
+    public void setTls13RenegotiationAvailable(boolean tls13RenegotiationAvailable) {
+        this.tls13RenegotiationAvailable = tls13RenegotiationAvailable;
+    }
+
+
     public Long getOpenSslConfContext() {
         return openSslConfContext;
     }

==================================================
