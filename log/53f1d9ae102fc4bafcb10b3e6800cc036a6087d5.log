53f1d9ae102fc4bafcb10b3e6800cc036a6087d5
==================================================
Move Manager from Container to Context
==================================================
Mark Emlyn
==================================================
Wed Jul 4 21:22:03 2012 +0000
==================================================
Container.java
Move Manager from Container to Context

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1357413 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Context.java
index aa68e9395a..64182315a7 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -121,22 +121,6 @@ public interface Container extends Lifecycle {
     public Log getLogger();
 
 
-    /**
-     * Return the Manager with which this Container is associated.  If there is
-     * no associated Manager, return the Manager associated with our parent
-     * Container (if any); otherwise return <code>null</code>.
-     */
-    public Manager getManager();
-
-
-    /**
-     * Set the Manager with which this Container is associated.
-     *
-     * @param manager The newly associated Manager
-     */
-    public void setManager(Manager manager);
-
-
     /**
      * Return the JMX name associated with this container.
      */

==================================================
ContainerBase.java
index ffa2d42121..89db3aef68 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1412,5 +1412,19 @@ public interface Context extends Container {
      * @param resources The newly associated Resources
      */
     public void setResources(DirContext resources);
+
+    /**
+     * Return the Manager with which this Context is associated.  If there is
+     * no associated Manager, return <code>null</code>.
+     */
+    public Manager getManager();
+
+
+    /**
+     * Set the Manager with which this Context is associated.
+     *
+     * @param manager The newly associated Manager
+     */
+    public void setManager(Manager manager);
 }
 

==================================================
StandardContext.java
index 4ecbdaa4d3..3c36f6e15f 100644
--- a/java/org/apache/catalina/core/LocalStrings_es.properties
+++ b/java/org/apache/catalina/core/LocalStrings_es.properties
@@ -54,8 +54,6 @@ aprListener.flags = Capacidades APR\: IPv6 [{0}], enviar fichero [{1}], aceptar
 aprListener.initializedOpenSSL=OpenSSL inicializado correctamente ({0})
 asyncContextImpl.requestEnded = El requerimiento asociado con AsyncContext ya ha completado su procesamiento.
 containerBase.backgroundProcess.cluster = Excepci\u00F3n al procesar cl\u00FAster {0} de proceso en segundo plano
-containerBase.backgroundProcess.loader = Excepci\u00F3n al procesar cargador {0} de proceso en segundo plano
-containerBase.backgroundProcess.manager = Excepci\u00F3n al procesar gestor {0} de proceso en segundo plano
 containerBase.backgroundProcess.realm = Excepci\u00F3n al procesar reino {0} de proceso en segundo plano
 containerBase.backgroundProcess.valve = Excepci\u00F3n al procesar v\u00E1lvula {0} de proceso en segundo plano
 filterChain.filter = La ejecuci\u00F3n del Filtro lanz\u00F3 una excepci\u00F3n
@@ -75,6 +73,8 @@ naming.namingContextCreationFailed = Fall\u00F3 la creaci\u00F3n del contexto de
 standardContext.invalidWrapperClass = {0} no es una subclase de StandardWrapper
 standardContext.applicationListener = Error configurando escuchador de aplicaci\u00F3n de clase {0}
 standardContext.applicationSkipped = Se ha saltado la instalaci\u00F3n de escuchadores de aplicaci\u00F3n debido a error(es) previo(s)
+standardContext.backgroundProcess.loader = Excepci\u00F3n al procesar cargador {0} de proceso en segundo plano
+standardContext.backgroundProcess.manager = Excepci\u00F3n al procesar gestor {0} de proceso en segundo plano
 standardContext.cluster.noManager = No se ha hallado el gestor. Revisando si hay que usar el gestor de cl\u00FAster. Cl\u00FAster configurado\: [{0}], Aplicaci\u00F3n distribu\u00EDble\: [{1}]
 standardContext.duplicateListener = El escuchador "{0}" ya est\u00E1 configurado para este contexto. La definici\u00F3n duplicada ha sido ignorada.
 standardContext.errorPage.error = La localizaci\u00F3n de la p\u00E1gina de error 0} debe de comenzar con ''/''

==================================================
MBeanFactory.java
index 26ed927bf4..736c5ec27e 100644
--- a/java/org/apache/catalina/mbeans/LocalStrings.properties
+++ b/java/org/apache/catalina/mbeans/LocalStrings.properties
@@ -18,3 +18,5 @@ jmxRemoteLifecycleListener.createServerFailed=The JMX connector server could not
 jmxRemoteLifecycleListener.destroyServerFailed=The JMX connector server could not be stopped for the {0} server
 jmxRemoteLifecycleListener.invalidURL=The JMX Service URL requested for the {0} server, "{1}", was invalid
 jmxRemoteLifecycleListener.start=The JMX Remote Listener has configured the registry on port {0} and the server on port {1} for the {2} server
+
+mBeanFactory.managerContext=Manager components may only be added to Contexts.

==================================================
TomcatBaseTest.java
index d602f5e0ae..321fb62fec 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -44,6 +44,7 @@ import org.apache.catalina.realm.UserDatabaseRealm;
 import org.apache.catalina.session.StandardManager;
 import org.apache.catalina.startup.ContextConfig;
 import org.apache.catalina.startup.HostConfig;
+import org.apache.tomcat.util.res.StringManager;
 
 
 /**
@@ -59,6 +60,9 @@ public class MBeanFactory {
     private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(MBeanFactory.class);
 
+    protected static final StringManager sm =
+            StringManager.getManager(Constants.Package);
+
     /**
      * The <code>MBeanServer</code> for this application.
      */
@@ -615,8 +619,10 @@ public class MBeanFactory {
         // Add the new instance to its parent component
         ObjectName pname = new ObjectName(parent);
         Container container = getParentContainerFromParent(pname);
-        if (container != null) {
-            container.setManager(manager);
+        if (container instanceof Context) {
+            ((Context) container).setManager(manager);
+        } else {
+            throw new Exception(sm.getString("mBeanFactory.managerContext"));
         }
         ObjectName oname = manager.getObjectName();
         if (oname != null) {
@@ -870,8 +876,9 @@ public class MBeanFactory {
         ObjectName oname = new ObjectName(name);
         // Acquire a reference to the component to be removed
         Container container = getParentContainerFromChild(oname);
-        container.setManager(null);
-
+        if (container instanceof Context) {
+            ((Context) container).setManager(null);
+        }
     }
 
 

==================================================
