6b86d51f536ef908cb2b2991bd39647eee399256
==================================================
Refactor handling of JAR resources so that JAR files containing resources (including WARs) are not permanently locked.
==================================================
Mark Emlyn
==================================================
Tue May 14 20:57:17 2013 +0000
==================================================
AbstractFileResourceSet.java
Refactor handling of JAR resources so that JAR files containing resources (including WARs) are not permanently locked.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1482590 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractResourceSet.java
index 4faf1914a5..483a9888d8 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -121,10 +121,5 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
     }
 
 
-    @Override
-    protected void destroyInternal() throws LifecycleException {
-        // NO-OP
-    }
-
     protected abstract void checkType(File file);
 }

==================================================
JarResource.java
index 2c399afda3..14d49e8993 100644
--- a/java/org/apache/catalina/webresources/AbstractResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractResourceSet.java
@@ -91,4 +91,9 @@ public abstract class AbstractResourceSet extends LifecycleBase
     protected final void stopInternal() throws LifecycleException {
         setState(LifecycleState.STOPPING);
     }
+
+    @Override
+    protected final void destroyInternal() throws LifecycleException {
+        // NO-OP
+    }
 }

==================================================
JarResourceSet.java
index 2edb881fcd..eaf10bab36 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -35,12 +35,12 @@ public class JarResource extends AbstractResource {
 
     private static final Log log = LogFactory.getLog(JarResource.class);
 
-    private final JarFile base;
+    private final String base;
     private final String baseUrl;
     private final JarEntry resource;
     private final String name;
 
-    public JarResource(WebResourceRoot root, JarFile base, String baseUrl,
+    public JarResource(WebResourceRoot root, String base, String baseUrl,
             JarEntry jarEntry, String internalPath, String webAppPath) {
         super(root, webAppPath);
         this.base = base;
@@ -117,7 +117,9 @@ public class JarResource extends AbstractResource {
     @Override
     public InputStream getInputStream() {
         try {
-            return base.getInputStream(resource);
+            JarFile jarFile = new JarFile(base);
+            InputStream is = jarFile.getInputStream(resource);
+            return new JarInputStreamWrapper(jarFile, is);
         } catch (IOException e) {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("fileResource.getInputStreamFail",
@@ -149,4 +151,72 @@ public class JarResource extends AbstractResource {
     protected Log getLog() {
         return log;
     }
+
+    private static class JarInputStreamWrapper extends InputStream {
+
+        private final JarFile jarFile;
+        private final InputStream is;
+
+
+        public JarInputStreamWrapper(JarFile jarFile, InputStream is) {
+            this.jarFile = jarFile;
+            this.is = is;
+        }
+
+
+        @Override
+        public int read() throws IOException {
+            return is.read();
+        }
+
+
+        @Override
+        public int read(byte[] b) throws IOException {
+            return is.read(b);
+        }
+
+
+        @Override
+        public int read(byte[] b, int off, int len) throws IOException {
+            return is.read(b, off, len);
+        }
+
+
+        @Override
+        public long skip(long n) throws IOException {
+            return is.skip(n);
+        }
+
+
+        @Override
+        public int available() throws IOException {
+            return is.available();
+        }
+
+
+        @Override
+        public void close() throws IOException {
+            // Closing the JarFile releases the file lock on the JAR and also
+            // closes all input streams created from the JarFile.
+            jarFile.close();
+        }
+
+
+        @Override
+        public synchronized void mark(int readlimit) {
+            is.mark(readlimit);
+        }
+
+
+        @Override
+        public synchronized void reset() throws IOException {
+            is.reset();
+        }
+
+
+        @Override
+        public boolean markSupported() {
+            return is.markSupported();
+        }
+    }
 }

==================================================
