035eef91372bac71becf6dde6fcd8ba2ad178d64
==================================================
Fix JSP API Javadoc warnings for Java 16
==================================================
Mark Thomas
==================================================
Tue Aug 31 17:55:09 2021 +0100
==================================================
ELResolver.java
Fix JSP API Javadoc warnings for Java 16


==================================================
JspContext.java
index 14625f7e42..a031c4aa88 100644
--- a/java/jakarta/el/ELResolver.java
+++ b/java/jakarta/el/ELResolver.java
@@ -118,8 +118,27 @@ public abstract class ELResolver {
     public abstract boolean isReadOnly(ELContext context, Object base,
             Object property);
 
+    /**
+     * Obtain the feature descriptors for the resolvable properties of the given
+     * object.
+     *
+     * @param context The context in which the examination takes place
+     * @param base The object to examine
+     *
+     * @return An iterator, possibly empty, of feature descriptors of the given
+     *         object
+     */
     public abstract Iterator<java.beans.FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base);
 
+    /**
+     * Obtain the most common type that is acceptable for the given base object.
+     *
+     * @param context The context in which the examination takes place
+     * @param base The object to examine
+     *
+     * @return {code null} if the most common type cannot be determine,
+     *         otherwise the most common type
+     */
     public abstract Class<?> getCommonPropertyType(ELContext context,
             Object base);
 

==================================================
ImplicitObjectELResolver.java
index 774ba9c4f7..8c1ebc41b2 100644
--- a/java/jakarta/servlet/jsp/JspContext.java
+++ b/java/jakarta/servlet/jsp/JspContext.java
@@ -227,7 +227,12 @@ public abstract class JspContext {
     @Deprecated
     public abstract jakarta.servlet.jsp.el.ExpressionEvaluator getExpressionEvaluator();
 
-
+    /**
+     * Obtain the ELContext for this JSPContext. Each JSPContext has a dedicated
+     * ELCOntext.
+     *
+     * @return the ELContext for this JSPContext
+     */
     public abstract ELContext getELContext();
 
     /**

==================================================
JspIdConsumer.java
index 3d00c8766d..3ed47eb459 100644
--- a/java/jakarta/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/jakarta/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -39,6 +39,7 @@ import jakarta.servlet.jsp.JspContext;
 import jakarta.servlet.jsp.PageContext;
 
 /**
+ * Provides resolution in EL for the implicit variables of a JSP page.
  *
  * @since 2.1
  */
@@ -71,6 +72,9 @@ public class ImplicitObjectELResolver extends ELResolver {
 
     private static final int SESSION_SCOPE = 10;
 
+    /**
+     * Creates an instance of the implicit object resolver for EL.
+     */
     public ImplicitObjectELResolver() {
         super();
     }

==================================================
TagAttributeInfo.java
index 43a9f53043..a6950d0d75 100644
--- a/java/jakarta/servlet/jsp/tagext/JspIdConsumer.java
+++ b/java/jakarta/servlet/jsp/tagext/JspIdConsumer.java
@@ -16,6 +16,16 @@
  */
 package jakarta.servlet.jsp.tagext;
 
+/**
+ * Interface that allows tag handlers to be provided with a unique (within the
+ * scope of the web application) ID.
+ */
 public interface JspIdConsumer {
+
+    /**
+     * Set the unique ID for the tag handler.
+     *
+     * @param jspId The unique Id
+     */
     public void setJspId(String jspId);
 }

==================================================
TagSupport.java
index 507f8dcab0..e901736d63 100644
--- a/java/jakarta/servlet/jsp/tagext/TagAttributeInfo.java
+++ b/java/jakarta/servlet/jsp/tagext/TagAttributeInfo.java
@@ -26,11 +26,11 @@ package jakarta.servlet.jsp.tagext;
  */
 
 public class TagAttributeInfo {
+
     /**
      * "id" is wired in to be ID. There is no real benefit in having it be
      * something else IDREFs are not handled any differently.
      */
-
     public static final String ID = "id";
 
     /**
@@ -128,7 +128,6 @@ public class TagAttributeInfo {
      *
      * @return the name of the attribute
      */
-
     public String getName() {
         return name;
     }
@@ -138,7 +137,6 @@ public class TagAttributeInfo {
      *
      * @return the type of the attribute
      */
-
     public String getTypeName() {
         return type;
     }
@@ -148,7 +146,6 @@ public class TagAttributeInfo {
      *
      * @return if the attribute can hold a request-time value.
      */
-
     public boolean canBeRequestTime() {
         return reqTime;
     }
@@ -240,22 +237,51 @@ public class TagAttributeInfo {
 
     private final String methodSignature;
 
+    /**
+     * Does the attribute expect to be passed a deferred method?
+     *
+     * @return {@code true} if a deferred method expression is expected,
+     *         otherwise {@code false}
+     */
     public boolean isDeferredMethod() {
         return deferredMethod;
     }
 
+    /**
+     * Does the attribute expect to be passed a deferred value?
+     *
+     * @return {@code true} if a deferred value expression is expected,
+     *         otherwise {@code false}
+     */
     public boolean isDeferredValue() {
         return deferredValue;
     }
 
+    /**
+     * Obtain the description for the attribute,
+     *
+     * @return the description
+     */
     public String getDescription() {
         return description;
     }
 
+    /**
+     * Obtain the type name, as a string, expected by this attribute.
+     *
+     * @return the type name, as a string
+     */
     public String getExpectedTypeName() {
         return expectedTypeName;
     }
 
+    /**
+     * If this is a deferred method attribute, obtain the expected method
+     * signature.
+     *
+     * @return The expected method signature or {@code null} if this attribute
+     *         is not a deferred method attribute
+     */
     public String getMethodSignature() {
         return methodSignature;
     }

==================================================
