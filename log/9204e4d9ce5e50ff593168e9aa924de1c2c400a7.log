9204e4d9ce5e50ff593168e9aa924de1c2c400a7
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48133
==================================================
Mark Emlyn
==================================================
Thu Nov 5 18:18:53 2009 +0000
==================================================
ApplicationDispatcher.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48133
Spelling errors in javadoc
Patch provided by qingyang.xu

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@833111 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationFilterFactory.java
index 2346f8c188..037ba8c3fc 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -285,7 +285,7 @@ final class ApplicationDispatcher
     /**
      * Forward this request and response to another resource for processing.
      * Any runtime exception, IOException, or ServletException thrown by the
-     * called servlet will be propogated to the caller.
+     * called servlet will be propagated to the caller.
      *
      * @param request The servlet request to be forwarded
      * @param response The servlet response to be forwarded
@@ -389,7 +389,7 @@ final class ApplicationDispatcher
         if  (response instanceof ResponseFacade) {
             ((ResponseFacade) response).finish();
         } else {
-            // Servlet SRV.6.2.2. The Resquest/Response may have been wrapped
+            // Servlet SRV.6.2.2. The Request/Response may have been wrapped
             // and may no longer be instance of RequestFacade 
             if (wrapper.getLogger().isDebugEnabled()){
                 wrapper.getLogger().debug( " The Response is vehiculed using a wrapper: " 
@@ -469,7 +469,7 @@ final class ApplicationDispatcher
     /**
      * Include the response from another resource in the current response.
      * Any runtime exception, IOException, or ServletException thrown by the
-     * called servlet will be propogated to the caller.
+     * called servlet will be propagated to the caller.
      *
      * @param request The servlet request that is including this one
      * @param response The servlet response to be appended to

==================================================
ApplicationHttpRequest.java
index 05c588eab2..b8b981cb6d 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -30,7 +30,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.deploy.FilterMap;
 
 /**
- * Factory for the creation and caching of Filters and creationg 
+ * Factory for the creation and caching of Filters and creation 
  * of Filter Chains.
  *
  * @author Greg Murray
@@ -56,7 +56,7 @@ public final class ApplicationFilterFactory {
 
 
     /*
-     * Prevent instanciation outside of the getInstanceMethod().
+     * Prevent instantiation outside of the getInstanceMethod().
      */
     private ApplicationFilterFactory() {
     }
@@ -66,7 +66,7 @@ public final class ApplicationFilterFactory {
 
 
     /**
-     * Return the fqctory instance.
+     * Return the factory instance.
      */
     public static ApplicationFilterFactory getInstance() {
         if (factory == null) {
@@ -328,7 +328,7 @@ public final class ApplicationFilterFactory {
 
 
     /**
-     * Convienience method which returns true if  the dispatcher type
+     * Convenience method which returns true if  the dispatcher type
      * matches the dispatcher types specified in the FilterMap
      */
     private boolean matchDispatcher(FilterMap filterMap, DispatcherType type) {

==================================================
ContainerBase.java
index 4828ff2fe8..7bccc50969 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -118,7 +118,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
 
     /**
-     * If this request is cross context, since this changes session accesss
+     * If this request is cross context, since this changes session access
      * behavior.
      */
     protected boolean crossContext = false;

==================================================
StandardContext.java
index 55e8cf2627..67beb7f080 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -1209,7 +1209,7 @@ public abstract class ContainerBase
      *
      * @exception IllegalArgumentException if this Container refused to
      *  accept the specified Valve
-     * @exception IllegalArgumentException if the specifie Valve refuses to be
+     * @exception IllegalArgumentException if the specified Valve refuses to be
      *  associated with this Container
      * @exception IllegalStateException if the specified Valve is already
      *  associated with a different Container
@@ -1272,7 +1272,7 @@ public abstract class ContainerBase
 
     /**
      * <p>Set the Valve instance that has been distinguished as the basic
-     * Valve for this Pipeline (if any).  Prioer to setting the basic Valve,
+     * Valve for this Pipeline (if any).  Prior to setting the basic Valve,
      * the Valve's <code>setContainer()</code> will be called, if it
      * implements <code>Contained</code>, with the owning Container as an
      * argument.  The method may throw an <code>IllegalArgumentException</code>
@@ -1367,7 +1367,7 @@ public abstract class ContainerBase
 
 
     /**
-     * Return the abbreviated name of this container for logging messsages
+     * Return the abbreviated name of this container for logging messages
      */
     protected String logName() {
 

==================================================
StandardEngine.java
index 55661019b8..da9569f1ed 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -378,7 +378,7 @@ public class StandardContext
 
     /**
      * Filter mappings added via {@link ServletContext} may have to be inserted
-     * before the mappings in the deploymenmt descriptor but must be inserted in
+     * before the mappings in the deployment descriptor but must be inserted in
      * the order the {@link ServletContext} methods are called. This isn't an
      * issue for the mappings added after the deployment descriptor - they are
      * just added to the end - but correctly the adding mappings before the
@@ -1642,7 +1642,7 @@ public class StandardContext
      * Set the original document root for this Context.  This can be an absolute
      * pathname, a relative pathname, or a URL.
      *
-     * @param docBase The orginal document root
+     * @param docBase The original document root
      */
     public void setOriginalDocBase(String docBase) {
 

==================================================
StandardHost.java
index 1c3d78e3b8..07d9e0b865 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -98,7 +98,7 @@ public class StandardEngine
      */
     private Service service = null;
 
-    /** Allow the base dir to be specified explicitely for
+    /** Allow the base dir to be specified explicitly for
      * each engine. In time we should stop using catalina.base property -
      * otherwise we loose some flexibility.
      */
@@ -135,7 +135,7 @@ public class StandardEngine
     public Realm getRealm() {
         Realm configured=super.getRealm();
         // If no set realm has been called - default to JAAS
-        // This can be overriden at engine, context and host level  
+        // This can be overridden at engine, context and host level  
         if( configured==null ) {
             configured=new JAASRealm();
             this.setRealm( configured );
@@ -355,7 +355,7 @@ public class StandardEngine
         //}
         
         if( service==null ) {
-            // for consistency...: we are probably in embeded mode
+            // for consistency...: we are probably in embedded mode
             try {
                 service=new StandardService();
                 service.setContainer( this );

==================================================
StandardPipeline.java
index d9bd8b7691..6093f7e5a3 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -158,7 +158,7 @@ public class StandardHost
 
 
     /**
-     * Attribute value used to turn on/off XML namespace awarenes.
+     * Attribute value used to turn on/off XML namespace awareness.
      */
      private boolean xmlNamespaceAware = false;
      
@@ -319,7 +319,7 @@ public class StandardHost
 
     /**
      * Return the value of the deploy on startup flag.  If true, it indicates 
-     * that this host's child webapps should be discovred and automatically 
+     * that this host's child webapps should be discovered and automatically 
      * deployed at startup time.
      */
     public boolean getDeployOnStartup() {
@@ -491,7 +491,7 @@ public class StandardHost
 
     /**
      * Get the server.xml &lt;host&gt; attribute's xmlNamespaceAware.
-     * @return true if namespace awarenes is enabled.
+     * @return true if namespace awareness is enabled.
      *
      */
     public boolean getXmlNamespaceAware(){
@@ -774,7 +774,7 @@ public class StandardHost
 
     // -------------------- JMX  --------------------
     /**
-      * Return the MBean Names of the Valves assoicated with this Host
+      * Return the MBean Names of the Valves associated with this Host
       *
       * @exception Exception if an MBean cannot be created or registered
       */

==================================================
StandardService.java
index bd48c87d4a..a6ab6ddf8f 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -354,7 +354,7 @@ public class StandardPipeline
 
     /**
      * <p>Set the Valve instance that has been distinguished as the basic
-     * Valve for this Pipeline (if any).  Prioer to setting the basic Valve,
+     * Valve for this Pipeline (if any).  Prior to setting the basic Valve,
      * the Valve's <code>setContainer()</code> will be called, if it
      * implements <code>Contained</code>, with the owning Container as an
      * argument.  The method may throw an <code>IllegalArgumentException</code>
@@ -433,7 +433,7 @@ public class StandardPipeline
      *
      * @exception IllegalArgumentException if this Container refused to
      *  accept the specified Valve
-     * @exception IllegalArgumentException if the specifie Valve refuses to be
+     * @exception IllegalArgumentException if the specified Valve refuses to be
      *  associated with this Container
      * @exception IllegalStateException if the specified Valve is already
      *  associated with a different Container
@@ -554,7 +554,7 @@ public class StandardPipeline
                     log.error("StandardPipeline.removeValve: stop: ", e);
                 }
             }
-            // Unregister the removed valave
+            // Unregister the removed valve
             unregisterValve(valve);
         }
     

==================================================
StandardWrapperFacade.java
index 268f8832c2..cf64364695 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -584,7 +584,7 @@ public class StandardService
                 }
             }
         }
-        // FIXME pero -- Why container stop first? KeepAlive connetions can send request! 
+        // FIXME pero -- Why container stop first? KeepAlive connections can send request! 
         // Stop our defined Connectors first
         synchronized (connectors) {
             for (int i = 0; i < connectors.length; i++) {
@@ -601,7 +601,7 @@ public class StandardService
         if( oname==controller ) {
             // we registered ourself on init().
             // That should be the typical case - this object is just for
-            // backward compat, nobody should bother to load it explicitely
+            // backward compat, nobody should bother to load it explicitly
             Registry.getRegistry(null, null).unregisterComponent(oname);
             Executor[] executors = findExecutors();
             for (int i = 0; i < executors.length; i++) {
@@ -629,7 +629,7 @@ public class StandardService
     public void initialize()
             throws LifecycleException
     {
-        // Service shouldn't be used with embeded, so it doesn't matter
+        // Service shouldn't be used with embedded, so it doesn't matter
         if (initialized) {
             if(log.isInfoEnabled())
                 log.info(sm.getString("standardService.initialize.initialized"));

==================================================
StandardWrapperValve.java
index 26282b2a3d..fe58e50b29 100644
--- a/java/org/apache/catalina/core/StandardWrapperFacade.java
+++ b/java/org/apache/catalina/core/StandardWrapperFacade.java
@@ -40,7 +40,7 @@ public final class StandardWrapperFacade
 
 
     /**
-     * Create a new facede around a StandardWrapper.
+     * Create a new facade around a StandardWrapper.
      */
     public StandardWrapperFacade(StandardWrapper config) {
 

==================================================
