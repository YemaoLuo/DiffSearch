a0159a34201e21ebc60ed6acffe7343fe26a7b65
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49476
==================================================
Mark Emlyn
==================================================
Thu Jun 24 09:57:02 2010 +0000
==================================================
CsrfPreventionFilter.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49476
CSRF protection was preventing access to session expiration features
Also:
- Switch Manager app to generic CSRF protection
- Add support for multiple nonces to CSRF filter
- Improve 403 page
- Don't open JSP pages in session expiration in a new window - makes CSRF prevention a real pain


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@957478 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HTMLManagerServlet.java
index f72a6c617c..73dffe5c16 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -19,6 +19,8 @@ package org.apache.catalina.filters;
 
 import java.io.IOException;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 
@@ -51,6 +53,8 @@ public class CsrfPreventionFilter extends FilterBase {
     private final Random randomSource = new Random();
 
     private final Set<String> entryPoints = new HashSet<String>();
+    
+    private final int nonceCacheSize = 5;
 
     @Override
     protected Log getLogger() {
@@ -98,24 +102,30 @@ public class CsrfPreventionFilter extends FilterBase {
                 }
             }
 
+            @SuppressWarnings("unchecked")
+            LruCache<String> nonceCache =
+                (LruCache<String>) req.getSession(true).getAttribute(
+                    Constants.CSRF_NONCE_SESSION_ATTR_NAME);
+            
             if (!skipNonceCheck) {
                 String previousNonce =
                     req.getParameter(Constants.CSRF_NONCE_REQUEST_PARAM);
-                String expectedNonce =
-                    (String) req.getSession(true).getAttribute(
-                        Constants.CSRF_NONCE_SESSION_ATTR_NAME);
-                
-                if (expectedNonce != null &&
-                        !expectedNonce.equals(previousNonce)) {
+
+                if (nonceCache != null && !nonceCache.contains(previousNonce)) {
                     res.sendError(HttpServletResponse.SC_FORBIDDEN);
                     return;
                 }
             }
             
+            if (nonceCache == null) {
+                nonceCache = new LruCache<String>(nonceCacheSize);
+                req.getSession().setAttribute(
+                        Constants.CSRF_NONCE_SESSION_ATTR_NAME, nonceCache);
+            }
+            
             String newNonce = generateNonce();
             
-            req.getSession(true).setAttribute(
-                    Constants.CSRF_NONCE_SESSION_ATTR_NAME, newNonce);
+            nonceCache.add(newNonce);
             
             wResponse = new CsrfResponseWrapper(res, newNonce);
         } else {
@@ -225,4 +235,32 @@ public class CsrfPreventionFilter extends FilterBase {
             return (sb.toString());
         }
     }
+    
+    private static class LruCache<T> {
+
+        // Although the internal implementation uses a Map, this cache
+        // implementation is only concerned with the keys.
+        private final Map<T,T> cache;
+        
+        public LruCache(final int cacheSize) {
+            cache = new LinkedHashMap<T,T>() {
+                private static final long serialVersionUID = 1L;
+                @Override
+                protected boolean removeEldestEntry(Map.Entry<T,T> eldest) {
+                    if (size() > cacheSize) {
+                        return true;
+                    }
+                    return false;
+                }
+            };
+        }
+        
+        public void add(T key) {
+            cache.put(key, null);
+        }
+        
+        public boolean contains(T key) {
+            return cache.containsKey(key);
+        }
+    }
 }

==================================================
