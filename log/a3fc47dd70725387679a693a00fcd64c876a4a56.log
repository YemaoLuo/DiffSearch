a3fc47dd70725387679a693a00fcd64c876a4a56
==================================================
Return correct response code for HTTP/2 when method is not implemented
==================================================
Mark Thomas
==================================================
Tue Jun 16 14:26:49 2020 +0100
==================================================
HttpServlet.java
Return correct response code for HTTP/2 when method is not implemented


==================================================
TestHttpServlet.java
index fde9847596..ba98853f37 100644
--- a/java/jakarta/servlet/http/HttpServlet.java
+++ b/java/jakarta/servlet/http/HttpServlet.java
@@ -171,13 +171,8 @@ public abstract class HttpServlet extends GenericServlet {
     protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException
     {
-        String protocol = req.getProtocol();
         String msg = lStrings.getString("http.method_get_not_supported");
-        if (protocol.endsWith("1.1")) {
-            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);
-        } else {
-            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);
-        }
+        sendMethodNotAllowed(req, resp, msg);
     }
 
 
@@ -311,13 +306,8 @@ public abstract class HttpServlet extends GenericServlet {
     protected void doPost(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
-        String protocol = req.getProtocol();
         String msg = lStrings.getString("http.method_post_not_supported");
-        if (protocol.endsWith("1.1")) {
-            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);
-        } else {
-            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);
-        }
+        sendMethodNotAllowed(req, resp, msg);
     }
 
 
@@ -366,13 +356,8 @@ public abstract class HttpServlet extends GenericServlet {
     protected void doPut(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
-        String protocol = req.getProtocol();
         String msg = lStrings.getString("http.method_put_not_supported");
-        if (protocol.endsWith("1.1")) {
-            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);
-        } else {
-            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);
-        }
+        sendMethodNotAllowed(req, resp, msg);
     }
 
 
@@ -414,12 +399,19 @@ public abstract class HttpServlet extends GenericServlet {
                             HttpServletResponse resp)
         throws ServletException, IOException {
 
-        String protocol = req.getProtocol();
         String msg = lStrings.getString("http.method_delete_not_supported");
-        if (protocol.endsWith("1.1")) {
-            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);
-        } else {
+        sendMethodNotAllowed(req, resp, msg);
+    }
+
+
+    private void sendMethodNotAllowed(HttpServletRequest req, HttpServletResponse resp, String msg) throws IOException {
+        String protocol = req.getProtocol();
+        // Note: Tomcat reports "" for HTTP/0.9 although some implementations
+        //       may report HTTP/0.9
+        if (protocol.length() == 0 || protocol.endsWith("0.9") || protocol.endsWith("1.0")) {
             resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);
+        } else {
+            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);
         }
     }
 

==================================================
TestHttp11InputBufferCRLF.java
index 2473799f3c..f1ae25b343 100644
--- a/test/jakarta/servlet/http/TestHttpServlet.java
+++ b/test/jakarta/servlet/http/TestHttpServlet.java
@@ -28,7 +28,10 @@ import jakarta.servlet.ServletException;
 import org.junit.Assert;
 import org.junit.Test;
 
+import org.apache.catalina.Context;
 import org.apache.catalina.core.StandardContext;
+import org.apache.catalina.startup.SimpleHttpClient;
+import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -191,6 +194,105 @@ public class TestHttpServlet extends TomcatBaseTest {
     }
 
 
+    @Test
+    public void testUnimplementedMethodHttp09() throws Exception {
+        doTestUnimplementedMethod("0.9");
+    }
+
+
+    @Test
+    public void testUnimplementedMethodHttp10() throws Exception {
+        doTestUnimplementedMethod("1.0");
+    }
+
+
+    @Test
+    public void testUnimplementedMethodHttp11() throws Exception {
+        doTestUnimplementedMethod("1.1");
+    }
+
+
+    /*
+     * See org.aoache.coyote.http2.TestHttpServlet for the HTTP/2 version of
+     * this test. It was placed in that package because it needed access to
+     * package private classes.
+     */
+
+
+    private void doTestUnimplementedMethod(String httpVersion) {
+        StringBuilder request = new StringBuilder("PUT /test");
+        boolean isHttp09 = "0.9".equals(httpVersion);
+        boolean isHttp10 = "1.0".equals(httpVersion);
+
+        if (!isHttp09) {
+            request.append(" HTTP/");
+            request.append(httpVersion);
+        }
+        request.append(SimpleHttpClient.CRLF);
+
+        request.append("Host: localhost:8080");
+        request.append(SimpleHttpClient.CRLF);
+
+        request.append("Connection: close");
+        request.append(SimpleHttpClient.CRLF);
+
+        request.append(SimpleHttpClient.CRLF);
+
+        Client client = new Client(request.toString(), "0.9".equals(httpVersion));
+
+        client.doRequest();
+
+        if (isHttp09) {
+            Assert.assertTrue( client.getResponseBody(), client.getResponseBody().contains(" 400 "));
+        } else if (isHttp10) {
+            Assert.assertTrue(client.getResponseLine(), client.isResponse400());
+        } else {
+            Assert.assertTrue(client.getResponseLine(), client.isResponse405());
+        }
+    }
+
+
+    private class Client extends SimpleHttpClient {
+
+        public Client(String request, boolean isHttp09) {
+            setRequest(new String[] {request});
+            setUseHttp09(isHttp09);
+        }
+
+        private Exception doRequest() {
+
+            Tomcat tomcat = getTomcatInstance();
+
+            Context root = tomcat.addContext("", TEMP_DIR);
+            Tomcat.addServlet(root, "TesterServlet", new TesterServlet());
+            root.addServletMappingDecoded("/test", "TesterServlet");
+
+            try {
+                tomcat.start();
+                setPort(tomcat.getConnector().getLocalPort());
+                setRequestPause(20);
+
+                // Open connection
+                connect();
+
+                processRequest(); // blocks until response has been read
+
+                // Close the connection
+                disconnect();
+            } catch (Exception e) {
+                e.printStackTrace();
+                return e;
+            }
+            return null;
+        }
+
+        @Override
+        public boolean isResponseBodyOK() {
+            return false;
+        }
+    }
+
+
     private static class Bug57602ServletOuter extends HttpServlet {
 
         private static final long serialVersionUID = 1L;

==================================================
TestHttpServlet.java
index ee033a1526..786a95a047 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBufferCRLF.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBufferCRLF.java
@@ -186,7 +186,6 @@ public class TestHttp11InputBufferCRLF extends TomcatBaseTest {
                 // Open connection
                 connect();
 
-                setRequest(request);
                 processRequest(); // blocks until response has been read
 
                 // Close the connection

==================================================
