b9db37ac9bbec1d397875e5f81f678ef1654cc9f
==================================================
Pull up common code
==================================================
Mark Emlyn
==================================================
Mon Sep 16 13:18:00 2013 +0000
==================================================
AbstractArchiveResource.java
Pull up common code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1523637 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JarResource.java
index efffa99afc..f9fb2dc39b 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -18,6 +18,8 @@ package org.apache.catalina.webresources;
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
@@ -25,13 +27,46 @@ import org.apache.catalina.WebResourceRoot;
 
 public abstract class AbstractArchiveResource extends AbstractResource {
 
-    protected final JarEntry resource;
-    protected String name;
+    private final String base;
+    private final String baseUrl;
+    private final JarEntry resource;
+    private final String name;
 
     protected AbstractArchiveResource(WebResourceRoot root, String webAppPath,
-            JarEntry jarEntry) {
+            String base, String baseUrl, JarEntry jarEntry,
+            String internalPath) {
         super(root, webAppPath);
+        this.base = base;
+        this.baseUrl = baseUrl;
         this.resource = jarEntry;
+
+        String resourceName = resource.getName();
+        if (resourceName.charAt(resourceName.length() - 1) == '/') {
+            resourceName = resourceName.substring(0, resourceName.length() - 1);
+        }
+        if (internalPath.length() > 0 && resourceName.equals(
+                internalPath.subSequence(1, internalPath.length()))) {
+            name = "";
+        } else {
+            int index = resourceName.lastIndexOf('/');
+            if (index == -1) {
+                name = resourceName;
+            } else {
+                name = resourceName.substring(index + 1);
+            }
+        }
+    }
+
+    public String getBase() {
+        return base;
+    }
+
+    public String getBaseUrl() {
+        return baseUrl;
+    }
+
+    public JarEntry getResource() {
+        return resource;
     }
 
     @Override
@@ -89,6 +124,19 @@ public abstract class AbstractArchiveResource extends AbstractResource {
         return resource.getTime();
     }
 
+    @Override
+    public URL getURL() {
+        try {
+            return new URL(baseUrl + "!/" + resource.getName());
+        } catch (MalformedURLException e) {
+            if (getLog().isDebugEnabled()) {
+                getLog().debug(sm.getString("fileResource.getUrlFail",
+                        resource.getName(), baseUrl), e);
+            }
+            return null;
+        }
+    }
+
 
     protected static class JarInputStreamWrapper extends InputStream {
 

==================================================
JarWarResource.java
index fc007bb2f8..e9f9a0b6ea 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -18,8 +18,6 @@ package org.apache.catalina.webresources;
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
@@ -35,55 +33,21 @@ public class JarResource extends AbstractArchiveResource {
 
     private static final Log log = LogFactory.getLog(JarResource.class);
 
-    private final String base;
-    private final String baseUrl;
-
     public JarResource(WebResourceRoot root, String webAppPath, String base,
             String baseUrl, JarEntry jarEntry, String internalPath) {
-        super(root, webAppPath, jarEntry);
-        this.base = base;
-        this.baseUrl = "jar:" + baseUrl;
-
-        String resourceName = resource.getName();
-        if (resourceName.charAt(resourceName.length() - 1) == '/') {
-            resourceName = resourceName.substring(0, resourceName.length() - 1);
-        }
-        if (internalPath.length() > 0 && resourceName.equals(
-                internalPath.subSequence(1, internalPath.length()))) {
-            name = "";
-        } else {
-            int index = resourceName.lastIndexOf('/');
-            if (index == -1) {
-                name = resourceName;
-            } else {
-                name = resourceName.substring(index + 1);
-            }
-        }
+        super(root, webAppPath, base, "jar:" + baseUrl, jarEntry, internalPath);
     }
 
     @Override
     public InputStream getInputStream() {
         try {
-            JarFile jarFile = new JarFile(base);
-            InputStream is = jarFile.getInputStream(resource);
+            JarFile jarFile = new JarFile(getBase());
+            InputStream is = jarFile.getInputStream(getResource());
             return new JarInputStreamWrapper(jarFile, is);
         } catch (IOException e) {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("fileResource.getInputStreamFail",
-                        resource.getName(), baseUrl), e);
-            }
-            return null;
-        }
-    }
-
-    @Override
-    public URL getURL() {
-        try {
-            return new URL(baseUrl + "!/" + resource.getName());
-        } catch (MalformedURLException e) {
-            if (log.isDebugEnabled()) {
-                log.debug(sm.getString("fileResource.getUrlFail",
-                        resource.getName(), baseUrl), e);
+                        getResource().getName(), getBaseUrl()), e);
             }
             return null;
         }

==================================================
