dbd4a44aa8004f075698a0100d78c3eb1cf59246
==================================================
javax.el.ArrayELResolver:
==================================================
Violeta Georgieva
==================================================
Wed Jul 10 18:53:50 2013 +0000
==================================================
ArrayELResolver.java
javax.el.ArrayELResolver:
According to javadoc:
1. getFeatureDescriptors - always returns null
2. isReadOnly - when property cannot be coerced into an integer it is ignored by the resolver.
3. getType - when property cannot be coerced into an integer it is ignored by the resolver.
Unit tests are added

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1501910 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestArrayELResolver.java
index 722b5659e0..98fc588be3 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -19,7 +19,6 @@ package javax.el;
 
 import java.beans.FeatureDescriptor;
 import java.lang.reflect.Array;
-import java.util.Arrays;
 import java.util.Iterator;
 
 public class ArrayELResolver extends ELResolver {
@@ -42,8 +41,12 @@ public class ArrayELResolver extends ELResolver {
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);
-            int idx = coerce(property);
-            checkBounds(base, idx);
+            try {
+                int idx = coerce(property);
+                checkBounds(base, idx);
+            } catch (IllegalArgumentException e) {
+                // ignore
+            }
             return base.getClass().getComponentType();
         }
 
@@ -104,8 +107,12 @@ public class ArrayELResolver extends ELResolver {
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);
-            int idx = coerce(property);
-            checkBounds(base, idx);
+            try {
+                int idx = coerce(property);
+                checkBounds(base, idx);
+            } catch (IllegalArgumentException e) {
+                // ignore
+            }
         }
 
         return this.readOnly;
@@ -113,20 +120,6 @@ public class ArrayELResolver extends ELResolver {
 
     @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        if (base != null && base.getClass().isArray()) {
-            FeatureDescriptor[] descs = new FeatureDescriptor[Array.getLength(base)];
-            for (int i = 0; i < descs.length; i++) {
-                descs[i] = new FeatureDescriptor();
-                descs[i].setDisplayName("["+i+"]");
-                descs[i].setExpert(false);
-                descs[i].setHidden(false);
-                descs[i].setName(""+i);
-                descs[i].setPreferred(true);
-                descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
-                descs[i].setValue(TYPE, Integer.class);
-            }
-            return Arrays.asList(descs).iterator();
-        }
         return null;
     }
 

==================================================
