b5e36b22421a10d0d5ba39468a67bbbe6cbd4281
==================================================
Fix some Javadoc warnings
==================================================
Mark Thomas
==================================================
Thu Oct 14 17:08:29 2021 +0100
==================================================
ApplicationFilterConfig.java
Fix some Javadoc warnings


==================================================
CorsFilter.java
index aede3504a6..3b81f7303e 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -85,9 +85,10 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      * @exception InstantiationException if an exception occurs while
      *  instantiating the filter object
      * @exception ServletException if thrown by the filter's init() method
-     * @throws NamingException
-     * @throws SecurityException
-     * @throws IllegalArgumentException
+     * @throws NamingException If a JNDI lookup fails
+     * @throws SecurityException If a security manager prevents the creation
+     * @throws IllegalArgumentException If the provided configuration is not
+     *         valid
      */
     ApplicationFilterConfig(Context context, FilterDef filterDef)
             throws ClassCastException, ReflectiveOperationException, ServletException,
@@ -232,10 +233,11 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      * @exception InstantiationException if an exception occurs while
      *  instantiating the filter object
      * @exception ServletException if thrown by the filter's init() method
-     * @throws NamingException
-     * @throws ReflectiveOperationException
-     * @throws SecurityException
-     * @throws IllegalArgumentException
+     * @throws NamingException If a JNDI lookup fails
+     * @throws ReflectiveOperationException If the creation of the filter fails
+     * @throws SecurityException If a security manager prevents the creation
+     * @throws IllegalArgumentException If the provided configuration is not
+     *         valid
      */
     Filter getFilter() throws ClassCastException, ReflectiveOperationException, ServletException,
             NamingException, IllegalArgumentException, SecurityException {

==================================================
Mapper.java
index f64d7ad771..b3d187e59b 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -706,7 +706,7 @@ public class CorsFilter extends GenericFilter {
      * @param preflightMaxAge
      *            The amount of seconds the user agent is allowed to cache the
      *            result of the pre-flight request.
-     * @throws ServletException
+     * @throws ServletException If the configuration is invalid
      */
     private void parseAndStore(final String allowedOrigins,
             final String allowedHttpMethods, final String allowedHttpHeaders,

==================================================
MapperListener.java
index a5f9dc2c3f..f51a69cd97 100644
--- a/java/org/apache/catalina/mapper/Mapper.java
+++ b/java/org/apache/catalina/mapper/Mapper.java
@@ -730,7 +730,8 @@ public final class Mapper {
 
     /**
      * Map the specified URI.
-     * @throws IOException
+     * @throws IOException If an error occurs while manipulating the URI during
+     *         the mapping
      */
     private final void internalMap(CharChunk host, CharChunk uri,
             String version, MappingData mappingData) throws IOException {

==================================================
StandardRoot.java
index 6b024f281e..fa303c47fc 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -508,7 +508,8 @@ public class MapperListener extends LifecycleMBeanBase
     /**
      * Add this mapper to the container and all child containers
      *
-     * @param container
+     * @param container the container (and any associated childern) to which
+     *        the mapper is to be added
      */
     private void addListeners(Container container) {
         container.addContainerListener(this);
@@ -522,7 +523,8 @@ public class MapperListener extends LifecycleMBeanBase
     /**
      * Remove this mapper from the container and all child containers
      *
-     * @param container
+     * @param container the container (and any associated childern) from which
+     *        the mapper is to be removed
      */
     private void removeListeners(Container container) {
         container.removeContainerListener(this);

==================================================
AjpProcessor.java
index 0aad50e327..1e0347ed58 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -237,7 +237,7 @@ public class StandardRoot extends LifecycleMBeanBase implements WebResourceRoot
      * that the path is a String that starts with '/' and checks that the path
      * can be normalized without stepping outside of the root.
      *
-     * @param path
+     * @param path The path to validate
      * @return  the normalized path
      */
     private String validate(String path) {

==================================================
HpackDecoder.java
index 9736723381..a7911e75f8 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1230,7 +1230,7 @@ public class AjpProcessor extends AbstractProcessor {
      *              called, should this call block until data becomes available?
      * @return  <code>true</code> if the requested number of bytes were read
      *          else <code>false</code>
-     * @throws IOException
+     * @throws IOException If an I/O error occurs during the read
      */
     private boolean read(byte[] buf, int pos, int n, boolean block) throws IOException {
         int read = socketWrapper.read(block, buf, pos, n);

==================================================
Http2Parser.java
index badebaddab..7cd5a13f0b 100644
--- a/java/org/apache/coyote/http2/HpackDecoder.java
+++ b/java/org/apache/coyote/http2/HpackDecoder.java
@@ -259,7 +259,7 @@ public class HpackDecoder {
      * Handle an indexed header representation
      *
      * @param index The index
-     * @throws HpackException
+     * @throws HpackException If an error occurs processing the given index
      */
     private void handleIndex(int index) throws HpackException {
         if (index <= Hpack.STATIC_TABLE_LENGTH) {

==================================================
AttributeParser.java
index 0e489e89fe..30d21181bb 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -352,7 +352,7 @@ class Http2Parser {
      * @param streamId The pushed stream
      * @param buffer   The payload, if available
      *
-     * @throws Http2Exception
+     * @throws Http2Exception Always
      */
     protected void readPushPromiseFrame(int streamId, ByteBuffer buffer) throws Http2Exception {
         throw new ConnectionException(sm.getString("http2Parser.processFramePushPromise",

==================================================
ELParser.java
index 557523758f..bcb8bc3272 100644
--- a/java/org/apache/jasper/compiler/AttributeParser.java
+++ b/java/org/apache/jasper/compiler/AttributeParser.java
@@ -89,12 +89,6 @@ public class AttributeParser {
     private final StringBuilder result;
 
 
-    /**
-     * For test purposes.
-     * @param input
-     * @param quote
-     * @param strict
-     */
     private AttributeParser(String input, char quote,
             boolean isELIgnored, boolean isDeferredSyntaxAllowedAsLiteral,
             boolean strict, boolean quoteAttributeEL) {

==================================================
BasicDataSourceFactory.java
index c06a2b6a7d..8f7ad93b8a 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -236,7 +236,8 @@ public class ELParser {
      * for $ and # is optional.
      *
      * @param input Non-EL input to be escaped
-     * @param isDeferredSyntaxAllowedAsLiteral
+     * @param isDeferredSyntaxAllowedAsLiteral Flag that indicates if deferred
+     *          syntax (#{) is allowed as a literal.\
      *
      * @return The escaped version of the input
      */

==================================================
ClassParser.java
index a71f8ff6ea..7a77f40cfb 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
@@ -319,9 +319,9 @@ public class BasicDataSourceFactory implements ObjectFactory {
     /**
      * Parse properties from the string. Format of the string must be [propertyName=property;]*
      *
-     * @param propText
+     * @param propText The string containing the properties
      * @return Properties
-     * @throws IOException
+     * @throws IOException If the properties string is not correctly formatted
      */
     private static Properties getProperties(final String propText) throws IOException {
         final Properties p = new Properties();

==================================================
ConstantDouble.java
index 3e1899349a..90fb145428 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -106,8 +106,8 @@ public final class ClassParser {
     /**
      * Reads information about the attributes of the class.
      * @param fieldOrMethod false if processing a class
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readAttributes(boolean fieldOrMethod) throws IOException, ClassFormatException {
         final int attributes_count = dataInputStream.readUnsignedShort();
@@ -147,8 +147,8 @@ public final class ClassParser {
 
     /**
      * Reads information about the class and its super class.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readClassInfo() throws IOException, ClassFormatException {
         accessFlags = dataInputStream.readUnsignedShort();
@@ -178,8 +178,8 @@ public final class ClassParser {
 
     /**
      * Reads constant pool entries.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readConstantPool() throws IOException, ClassFormatException {
         constantPool = new ConstantPool(dataInputStream);
@@ -188,8 +188,8 @@ public final class ClassParser {
 
     /**
      * Reads information about the fields of the class, i.e., its variables.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readFields() throws IOException, ClassFormatException {
         final int fields_count = dataInputStream.readUnsignedShort();
@@ -208,8 +208,8 @@ public final class ClassParser {
     /**
      * Checks whether the header of the file is ok.
      * Of course, this has to be the first action on successive file reads.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readID() throws IOException, ClassFormatException {
         if (dataInputStream.readInt() != MAGIC) {
@@ -220,8 +220,8 @@ public final class ClassParser {
 
     /**
      * Reads information about the interfaces implemented by this class.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readInterfaces() throws IOException, ClassFormatException {
         final int interfaces_count = dataInputStream.readUnsignedShort();
@@ -239,8 +239,8 @@ public final class ClassParser {
 
     /**
      * Reads information about the methods of the class.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readMethods() throws IOException, ClassFormatException {
         final int methods_count = dataInputStream.readUnsignedShort();
@@ -257,8 +257,8 @@ public final class ClassParser {
 
     /**
      * Reads major and minor version of compiler which created the file.
-     * @throws  IOException
-     * @throws  ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the .class file
+     * @throws  ClassFormatException If the .class file is not valid
      */
     private void readVersion() throws IOException, ClassFormatException {
         // file.readUnsignedShort(); // Unused minor

==================================================
ConstantFloat.java
index 1152dbd914..1c69a764e3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -37,7 +37,8 @@ public final class ConstantDouble extends Constant {
      * Initialize instance from file data.
      *
      * @param file Input stream
-     * @throws IOException
+     * @throws IOException If an I/O occurs reading from the provided
+     *         InoutStream
      */
     ConstantDouble(final DataInput file) throws IOException {
         super(Const.CONSTANT_Double);

==================================================
ConstantInteger.java
index 1fd245038f..4a699b6837 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -37,7 +37,8 @@ public final class ConstantFloat extends Constant {
      * Initialize instance from file data.
      *
      * @param file Input stream
-     * @throws IOException
+     * @throws IOException If an I/O occurs reading from the provided
+     *         InoutStream
      */
     ConstantFloat(final DataInput file) throws IOException {
         super(Const.CONSTANT_Float);

==================================================
ConstantLong.java
index 0d9598398c..c2960ac078 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -37,7 +37,8 @@ public final class ConstantInteger extends Constant {
      * Initialize instance from file data.
      *
      * @param file Input stream
-     * @throws IOException
+     * @throws IOException If an I/O occurs reading from the provided
+     *         InoutStream
      */
     ConstantInteger(final DataInput file) throws IOException {
         super(Const.CONSTANT_Integer);

==================================================
ConstantPool.java
index d7affef952..b6dc2c0f0d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -37,7 +37,8 @@ public final class ConstantLong extends Constant {
      * Initialize instance from file data.
      *
      * @param input Input stream
-     * @throws IOException
+     * @throws IOException If an I/O occurs reading from the provided
+     *         InoutStream
      */
     ConstantLong(final DataInput input) throws IOException {
         super(Const.CONSTANT_Long);

==================================================
UriUtil.java
index 81280c31cf..ac36aa15b6 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -40,8 +40,8 @@ public class ConstantPool {
      * Reads constants from given input stream.
      *
      * @param input Input stream
-     * @throws IOException
-     * @throws ClassFormatException
+     * @throws  IOException if an I/O occurs reading the the InputStream
+     * @throws  ClassFormatException If the .class file is not valid
      */
     ConstantPool(final DataInput input) throws IOException, ClassFormatException {
         final int constant_pool_count = input.readUnsignedShort();

==================================================
TokenList.java
index 374814be81..a1c56e51c7 100644
--- a/java/org/apache/tomcat/util/buf/UriUtil.java
+++ b/java/org/apache/tomcat/util/buf/UriUtil.java
@@ -201,8 +201,8 @@ public final class UriUtil {
      *
      * @param path The path to test
      *
-     * @return {@code} if the supplied path starts with once of the recognised
-     *         sequences.
+     * @return {@code true} if the supplied path starts with once of the
+     *         recognised sequences.
      */
     public static boolean isAbsoluteURI(String path) {
         // Special case as only a single /

==================================================
WsWebSocketContainer.java
index ec69d3c4a3..d805c61841 100644
--- a/java/org/apache/tomcat/util/http/parser/TokenList.java
+++ b/java/org/apache/tomcat/util/http/parser/TokenList.java
@@ -38,7 +38,7 @@ public class TokenList {
      * @param collection The Collection (usually a list or a set) to which the
      *                       parsed tokens should be added
      *
-     * @return {@code} true if the header values were parsed cleanly and at
+     * @return {@code true} if the header values were parsed cleanly and at
      *         least one token was found, otherwise {@code false} (e.g. if a
      *         non-token value was encountered)
      *
@@ -66,7 +66,7 @@ public class TokenList {
      * @param collection The Collection (usually a list or a set) to which the
      *                       parsed tokens should be added
      *
-     * @return {@code} true if the header values were parsed cleanly and at
+     * @return {@code true} if the header values were parsed cleanly and at
      *         least one token was found, otherwise {@code false} (e.g. if a
      *         non-token value was encountered)
      *

==================================================
TestContextConfigAnnotation.java
index 52d78375f7..7792122008 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -781,10 +781,13 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
 
     /**
      * Process response, blocking until HTTP response has been fully received.
-     * @throws ExecutionException
-     * @throws InterruptedException
-     * @throws DeploymentException
-     * @throws TimeoutException
+     * @throws ExecutionException if there is an exception reading the response
+     * @throws InterruptedException if the thread is interrupted while reading
+     *         the response
+     * @throws DeploymentException if the response status line is not correctly
+     *         formatted
+     * @throws TimeoutException if the response was not read within the expected
+     *         timeout
      */
     private HttpResponse processResponse(ByteBuffer response,
             AsyncChannelWrapper channel, long timeout) throws InterruptedException,

==================================================
Client.java
index bf82b93642..f395e7dad4 100644
--- a/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
+++ b/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
@@ -349,12 +349,8 @@ public class TestContextConfigAnnotation {
         public void removePropertyChangeListener(PropertyChangeListener l) {}
     }
 
-    /**
+    /*
      * Find compiled test class
-     *
-     * @param className
-     * @return File Resource
-     * @throws URISyntaxException
      */
     private File paramClassResource(String className) throws URISyntaxException {
         URL url = getClass().getClassLoader().getResource(className + ".class");

==================================================
Room.java
index 0123c08157..b4c8da77ec 100644
--- a/webapps/examples/WEB-INF/classes/websocket/drawboard/Client.java
+++ b/webapps/examples/WEB-INF/classes/websocket/drawboard/Client.java
@@ -165,7 +165,8 @@ public class Client {
 
     /**
      * Internally sends the messages asynchronously.
-     * @param msg
+     *
+     * @param msg Message to send
      */
     private void internalSendMessageAsync(AbstractWebsocketMessage msg) {
         try {

==================================================
