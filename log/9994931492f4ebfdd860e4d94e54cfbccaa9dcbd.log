9994931492f4ebfdd860e4d94e54cfbccaa9dcbd
==================================================
Implemented JMX notifications when connections fail
==================================================
Filip Hanik
==================================================
Tue Dec 16 21:00:36 2008 +0000
==================================================
ConnectionPool.java
Implemented JMX notifications when connections fail


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@727148 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PooledConnection.java
index f4b14f7f1f..7c32103dd8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -106,7 +106,11 @@ public class ConnectionPool {
      * Executor service used to cancel Futures
      */
     protected ThreadPoolExecutor cancellator = new ThreadPoolExecutor(0,1,1000,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
-
+    
+    /**
+     * reference to mbean
+     */
+    protected org.apache.tomcat.jdbc.pool.jmx.ConnectionPool jmxPool = null;
 
     //===============================================================================
     //         PUBLIC METHODS
@@ -393,8 +397,12 @@ public class ConnectionPool {
             return;
         try {
             con.lock();
+            String trace = con.getStackTrace();
             if (getPoolProperties().isLogAbandoned()) {
-                log.warn("Connection has been abandoned " + con + ":" +con.getStackTrace());
+                log.warn("Connection has been abandoned " + con + ":" + trace);
+            }
+            if (jmxPool!=null) {
+                jmxPool.notify(jmxPool.NOTIFY_ABANDON, trace);
             }
             con.abandon();
         } finally {
@@ -740,7 +748,7 @@ public class ConnectionPool {
             java.io.PrintStream writer = new java.io.PrintStream(bout);
             x.printStackTrace(writer);
             String result = bout.toString();
-            return result;
+            return (x.getMessage()!=null && x.getMessage().length()>0)? x.getMessage()+";"+result:result;
         } //end if
     }
 
@@ -758,7 +766,8 @@ public class ConnectionPool {
         try {
             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             ObjectName name = new ObjectName("org.apache.tomcat.jdbc.pool.jmx:type=ConnectionPool,name="+getName());
-            mbs.registerMBean(new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this), name);
+            jmxPool = new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this);
+            mbs.registerMBean(jmxPool, name);
         } catch (Exception x) {
             log.warn("Unable to start JMX integration for connection pool. Instance["+getName()+"] can't be monitored.",x);
         }
@@ -769,6 +778,7 @@ public class ConnectionPool {
             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             ObjectName name = new ObjectName("org.apache.tomcat.jdbc.pool.jmx:type=ConnectionPool,name="+getName());
             mbs.unregisterMBean(name);
+            jmxPool = null;
         }catch (Exception x) {
             log.warn("Unable to stop JMX integration for connection pool. Instance["+getName()+"].",x);
         }

==================================================
ConnectionPool.java
index ef05fb6603..c6b26474a0 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -85,7 +85,23 @@ public class PooledConnection {
         String pwd = poolProperties.getPassword();
         poolProperties.getDbProperties().setProperty("user", usr);
         poolProperties.getDbProperties().setProperty("password", pwd);
-        connection = driver.connect(driverURL, poolProperties.getDbProperties());
+        try {
+            connection = driver.connect(driverURL, poolProperties.getDbProperties());
+        } catch (Exception x) {
+            if (log.isDebugEnabled()) {
+                log.debug("Unable to connect to database.", x);
+            }
+            if (parent.jmxPool!=null) {
+                parent.jmxPool.notify(parent.jmxPool.NOTIFY_CONNECT, parent.getStackTrace(x));
+            }
+            if (x instanceof SQLException) {
+                throw (SQLException)x;
+            } else {
+                SQLException ex = new SQLException(x.getMessage());
+                ex.initCause(x);
+                throw ex;
+            }
+        }
         //set up the default state, unless we expect the interceptor to do it
         if (poolProperties.getJdbcInterceptors()==null || poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getName())<0) {
             if (poolProperties.getDefaultReadOnly()!=null) connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());

==================================================
