ad022402dbcdc10e985aca4307c039defba35c99
==================================================
Fix BZ 66325 - Correct concurrency issue in lambda expression evaluation
==================================================
Mark Thomas
==================================================
Fri Oct 28 09:23:01 2022 +0100
==================================================
EvaluationContext.java
Fix BZ 66325 - Correct concurrency issue in lambda expression evaluation

https://bz.apache.org/bugzilla/show_bug.cgi?id=66325


==================================================
LambdaExpressionNestedState.java
index eac0e0588b..1c354b2965 100644
--- a/java/org/apache/el/lang/EvaluationContext.java
+++ b/java/org/apache/el/lang/EvaluationContext.java
@@ -27,6 +27,8 @@ import jakarta.el.FunctionMapper;
 import jakarta.el.ImportHandler;
 import jakarta.el.VariableMapper;
 
+import org.apache.el.util.MessageFactory;
+
 public final class EvaluationContext extends ELContext {
 
     private final ELContext elContext;
@@ -35,6 +37,8 @@ public final class EvaluationContext extends ELContext {
 
     private final VariableMapper varMapper;
 
+    private LambdaExpressionNestedState lambdaExpressionNestedState;
+
     public EvaluationContext(ELContext elContext, FunctionMapper fnMapper,
             VariableMapper varMapper) {
         this.elContext = elContext;
@@ -150,4 +154,35 @@ public final class EvaluationContext extends ELContext {
     public <T> T convertToType(Object obj, Class<T> type) {
         return elContext.convertToType(obj, type);
     }
+
+
+    public LambdaExpressionNestedState getLambdaExpressionNestedState() {
+        // State is stored in the EvaluationContext instance associated with the
+        // outermost lambda expression of a set of nested expressions.
+
+        if (lambdaExpressionNestedState != null) {
+            // This instance is storing state so it must be associated with the
+            // outermost lambda expression.
+            return lambdaExpressionNestedState;
+        }
+
+        // Check to see if the associated lambda expression is nested as state
+        // will be stored in the EvaluationContext associated with the outermost
+        // lambda expression.
+        if (elContext instanceof EvaluationContext) {
+            return ((EvaluationContext) elContext).getLambdaExpressionNestedState();
+        }
+
+        return null;
+    }
+
+
+    public void setLambdaExpressionNestedState(LambdaExpressionNestedState lambdaExpressionNestedState) {
+      if (this.lambdaExpressionNestedState != null) {
+          // Should never happen
+          throw new IllegalStateException(MessageFactory.get("error.lambda.wrongNestedState"));
+      }
+
+        this.lambdaExpressionNestedState = lambdaExpressionNestedState;
+    }
 }

==================================================
AstLambdaExpression.java
new file mode 100644
index 0000000000..f4a4d47c70
--- /dev/null
+++ b/java/org/apache/el/lang/LambdaExpressionNestedState.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.el.lang;
+
+/**
+ * Stores the state required for correct evaluation of lambda expressions.
+ * Lambda expressions may be nested. Correct evaluation requires knowledge not
+ * just of the current lambda expression, but also of any nested and nesting
+ * expressions.
+ * <p>
+ * The sets of nodes for parsed expressions are cached and, as a result, a set
+ * of nodes may be being used by multiple concurrent threads. This means any
+ * state relating to evaluation cannot be stored in the nodes. State is
+ * therefore stored in the {@link EvaluationContext} which is created, used for
+ * a single evaluation and then discarded.
+ */
+public final class LambdaExpressionNestedState {
+
+    private int nestingCount = 0;
+    private boolean hasFormalParameters = false;
+
+    public void incrementNestingCount() {
+        nestingCount++;
+    }
+
+    public int getNestingCount() {
+        return nestingCount;
+    }
+
+    public void setHasFormalParameters() {
+        hasFormalParameters = true;
+    }
+
+    public boolean getHasFormalParameters() {
+        return hasFormalParameters;
+    }
+}

==================================================
