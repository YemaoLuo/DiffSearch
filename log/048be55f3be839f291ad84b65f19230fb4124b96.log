048be55f3be839f291ad84b65f19230fb4124b96
==================================================
Refactor to remove the circular dependency between o.a.catalina and
==================================================
Mark Emlyn
==================================================
Wed Feb 1 10:47:17 2012 +0000
==================================================
ApplicationContext.java
Refactor to remove the circular dependency between o.a.catalina and
o.a.naming

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239048 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebdavServlet.java
index 0f0143dfd2..b6c01f0975 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -67,7 +67,6 @@ import org.apache.catalina.Service;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.deploy.FilterDef;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.ResourceSet;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.naming.resources.DirContextURLStreamHandler;
@@ -75,6 +74,7 @@ import org.apache.naming.resources.Resource;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.http.RequestUtil;
 import org.apache.tomcat.util.http.mapper.MappingData;
 import org.apache.tomcat.util.res.StringManager;
 

==================================================
SSIServletExternalResolver.java
index 692fef6aaa..3690103ce0 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -51,13 +51,13 @@ import javax.xml.parsers.ParserConfigurationException;
 
 import org.apache.catalina.util.DOMWriter;
 import org.apache.catalina.util.MD5Encoder;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.XMLWriter;
 import org.apache.naming.resources.CacheEntry;
 import org.apache.naming.resources.Resource;
 import org.apache.naming.resources.ResourceAttributes;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
+import org.apache.tomcat.util.http.RequestUtil;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -1581,7 +1581,8 @@ public class WebdavServlet
         }
 
         // Remove url encoding from destination
-        destinationPath = RequestUtil.URLDecode(destinationPath, "UTF8");
+        destinationPath = org.apache.catalina.util.RequestUtil.URLDecode(
+                destinationPath, "UTF8");
 
         int protocolIndex = destinationPath.indexOf("://");
         if (protocolIndex >= 0) {

==================================================
SSIServletRequestUtil.java
index 7558f8c2c3..808f83e058 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -34,9 +34,9 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.connector.Request;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.coyote.Constants;
 import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.http.RequestUtil;
 
 /**
  * An implementation of SSIExternalResolver that is used with servlets.

==================================================
RequestUtil.java
index 3a2f9f2615..1ecd0217bb 100644
--- a/java/org/apache/catalina/ssi/SSIServletRequestUtil.java
+++ b/java/org/apache/catalina/ssi/SSIServletRequestUtil.java
@@ -16,11 +16,11 @@
  */
 package org.apache.catalina.ssi;
 
-
 import javax.servlet.RequestDispatcher;
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.catalina.util.RequestUtil;
+import org.apache.tomcat.util.http.RequestUtil;
+
 public class SSIServletRequestUtil {
     /**
      * Return the relative path associated with this servlet. Taken from

==================================================
FileDirContext.java
index 50b518630b..c055d9dbb7 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.util;
 
 import java.io.UnsupportedEncodingException;
@@ -35,7 +33,6 @@ import org.apache.tomcat.util.res.StringManager;
  * @author Tim Tye
  * @version $Id$
  */
-
 public final class RequestUtil {
 
 
@@ -93,11 +90,18 @@ public final class RequestUtil {
      * try to perform security checks for malicious input.
      *
      * @param path Relative path to be normalized
+     *
+     * @deprecated Deprecated to resolve a circular package dependency and will
+     *             be removed in Tomcat 8.0.x. Use {@link
+     *             org.apache.tomcat.util.http.RequestUtil#normalize(String)} as
+     *             a replacement.
      */
+    @Deprecated
     public static String normalize(String path) {
-        return normalize(path, true);
+        return org.apache.tomcat.util.http.RequestUtil.normalize(path);
     }
 
+
     /**
      * Normalize a relative URI path that may have relative values ("/./",
      * "/../", and so on ) it it.  <strong>WARNING</strong> - This method is
@@ -106,58 +110,16 @@ public final class RequestUtil {
      *
      * @param path Relative path to be normalized
      * @param replaceBackSlash Should '\\' be replaced with '/'
+     *
+     * @deprecated Deprecated to resolve a circular package dependency and will
+     *             be removed in Tomcat 8.0.x. Use {@link
+     *             org.apache.tomcat.util.http.RequestUtil#normalize(String,
+     *             boolean)} as a replacement.
      */
+    @Deprecated
     public static String normalize(String path, boolean replaceBackSlash) {
-
-        if (path == null)
-            return null;
-
-        // Create a place for the normalized path
-        String normalized = path;
-
-        if (replaceBackSlash && normalized.indexOf('\\') >= 0)
-            normalized = normalized.replace('\\', '/');
-
-        if (normalized.equals("/."))
-            return "/";
-
-        // Add a leading "/" if necessary
-        if (!normalized.startsWith("/"))
-            normalized = "/" + normalized;
-
-        // Resolve occurrences of "//" in the normalized path
-        while (true) {
-            int index = normalized.indexOf("//");
-            if (index < 0)
-                break;
-            normalized = normalized.substring(0, index) +
-                normalized.substring(index + 1);
-        }
-
-        // Resolve occurrences of "/./" in the normalized path
-        while (true) {
-            int index = normalized.indexOf("/./");
-            if (index < 0)
-                break;
-            normalized = normalized.substring(0, index) +
-                normalized.substring(index + 2);
-        }
-
-        // Resolve occurrences of "/../" in the normalized path
-        while (true) {
-            int index = normalized.indexOf("/../");
-            if (index < 0)
-                break;
-            if (index == 0)
-                return (null);  // Trying to go outside our context
-            int index2 = normalized.lastIndexOf('/', index - 1);
-            normalized = normalized.substring(0, index2) +
-                normalized.substring(index + 3);
-        }
-
-        // Return the normalized path that we have completed
-        return (normalized);
-
+        return org.apache.tomcat.util.http.RequestUtil.normalize(path,
+                replaceBackSlash);
     }
 
 

==================================================
RequestUtil.java
index e34335c176..7163530013 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -41,9 +41,9 @@ import javax.naming.directory.ModificationItem;
 import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
 
-import org.apache.catalina.util.RequestUtil;
 import org.apache.naming.NamingContextEnumeration;
 import org.apache.naming.NamingEntry;
+import org.apache.tomcat.util.http.RequestUtil;
 
 /**
  * Filesystem Directory Context implementation helper class.

==================================================
TestRequestUtil.java
index d18bfa9c5d..5f54753ae3 100644
--- a/res/checkstyle/org-import-control.xml
+++ b/res/checkstyle/org-import-control.xml
@@ -105,8 +105,8 @@
     <allow pkg="javax.mail"/>
     <allow pkg="javax.wsdl"/>
     <allow pkg="org.apache.naming"/>
-    <allow class="org.apache.catalina.util.RequestUtil"/>
     <allow class="org.apache.tomcat.util.http.FastHttpDateFormat"/>
+    <allow class="org.apache.tomcat.util.http.RequestUtil"/>
     <subpackage name="factory.webservices">
     </subpackage>
   </subpackage>

==================================================
TestRequestUtil.java
index 86dc96c671..40fab61865 100644
--- a/test/org/apache/catalina/util/TestRequestUtil.java
+++ b/test/org/apache/catalina/util/TestRequestUtil.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.util;
 
 import static org.junit.Assert.assertEquals;
@@ -24,14 +23,6 @@ import org.junit.Test;
 
 public class TestRequestUtil {
 
-    @Test
-    public void testNormalizeString() {
-        assertEquals("/something",RequestUtil.normalize("//something"));
-        assertEquals("/some/thing",RequestUtil.normalize("some//thing"));
-        assertEquals("/something/",RequestUtil.normalize("something//"));
-        assertEquals("/",RequestUtil.normalize("//"));
-    }
-
     @Test
     public void testURLDecodeStringInvalid() {
         // %n rather than %nn should throw an IAE according to the Javadoc

==================================================
