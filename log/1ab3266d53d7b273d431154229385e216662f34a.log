1ab3266d53d7b273d431154229385e216662f34a
==================================================

==================================================
Mark Thomas
==================================================
Tue Aug 30 16:41:12 2016 +0000
==================================================
Context.java


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1758423 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationFilterRegistration.java
index 5ba44801e2..f9c93e7dea 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -32,6 +32,7 @@ import org.apache.catalina.deploy.NamingResourcesImpl;
 import org.apache.tomcat.ContextBind;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.JarScanner;
+import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
@@ -872,14 +873,52 @@ public interface Context extends Container, ContextBind {
      * Add a new servlet mapping, replacing any existing mapping for
      * the specified pattern.
      *
-     * @param pattern URL pattern to be mapped
-     * @param name Name of the corresponding servlet to execute
+     * @param pattern URL pattern to be mapped. The pattern will be % decoded
+     *                using UTF-8
+     * @param name    Name of the corresponding servlet to execute
+     *
+     * @deprecated Will be removed in Tomcat 9. Use
+     *             {@link #addServletMappingDecoded(String, String)}
      */
+    @Deprecated
     public default void addServletMapping(String pattern, String name) {
         addServletMapping(pattern, name, false);
     }
 
 
+    /**
+     * Add a new servlet mapping, replacing any existing mapping for
+     * the specified pattern.
+     *
+     * @param pattern     URL pattern to be mapped. The pattern will be %
+     *                    decoded using UTF-8
+     * @param name        Name of the corresponding servlet to execute
+     * @param jspWildcard true if name identifies the JspServlet and pattern
+     *                    contains a wildcard; false otherwise
+     *
+     * @deprecated Will be removed in Tomcat 9. Use
+     *             {@link #addServletMappingDecoded(String, String, boolean)}
+     */
+    @Deprecated
+    public default void addServletMapping(String pattern, String name,
+            boolean jspWildcard) {
+        addServletMappingDecoded(
+                UDecoder.URLDecode(pattern, "UTF-8"), name, jspWildcard);
+    }
+
+
+    /**
+     * Add a new servlet mapping, replacing any existing mapping for
+     * the specified pattern.
+     *
+     * @param pattern URL pattern to be mapped
+     * @param name Name of the corresponding servlet to execute
+     */
+    public default void addServletMappingDecoded(String pattern, String name) {
+        addServletMappingDecoded(pattern, name, false);
+    }
+
+
     /**
      * Add a new servlet mapping, replacing any existing mapping for
      * the specified pattern.
@@ -889,7 +928,7 @@ public interface Context extends Container, ContextBind {
      * @param jspWildcard true if name identifies the JspServlet
      * and pattern contains a wildcard; false otherwise
      */
-    public void addServletMapping(String pattern, String name,
+    public void addServletMappingDecoded(String pattern, String name,
             boolean jspWildcard);
 
 

==================================================
ApplicationServletRegistration.java
index c568159b10..518f130756 100644
--- a/java/org/apache/catalina/core/ApplicationFilterRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationFilterRegistration.java
@@ -96,6 +96,7 @@ public class ApplicationFilterRegistration
         }
 
         if (urlPatterns != null) {
+            // % decoded (if necessary) using UTF-8
             for (String urlPattern : urlPatterns) {
                 filterMap.addURLPattern(urlPattern);
             }

==================================================
StandardContext.java
index 4c1251f1a5..bf67ffa209 100644
--- a/java/org/apache/catalina/core/ApplicationServletRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationServletRegistration.java
@@ -31,6 +31,7 @@ import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.util.ParameterMap;
+import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.res.StringManager;
 
 public class ApplicationServletRegistration
@@ -189,7 +190,8 @@ public class ApplicationServletRegistration
         }
 
         for (String urlPattern : urlPatterns) {
-            context.addServletMapping(urlPattern, wrapper.getName());
+            context.addServletMappingDecoded(
+                    UDecoder.URLDecode(urlPattern, "UTF-8"), wrapper.getName());
         }
         return Collections.emptySet();
     }

==================================================
ContextConfig.java
index 9d13a70da0..b51577ebdd 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -114,7 +114,6 @@ import org.apache.tomcat.InstanceManagerBindings;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
-import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.descriptor.XmlIdentifiers;
 import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
@@ -2802,7 +2801,7 @@ public class StandardContext extends ContainerBase
              */
             String[] jspMappings = oldJspServlet.findMappings();
             for (int i=0; jspMappings!=null && i<jspMappings.length; i++) {
-                addServletMapping(jspMappings[i], child.getName());
+                addServletMappingDecoded(jspMappings[i], child.getName());
             }
         }
     }
@@ -3119,31 +3118,31 @@ public class StandardContext extends ContainerBase
      *  is not known to this Context
      */
     @Override
-    public void addServletMapping(String pattern, String name,
+    public void addServletMappingDecoded(String pattern, String name,
                                   boolean jspWildCard) {
         // Validate the proposed mapping
         if (findChild(name) == null)
             throw new IllegalArgumentException
                 (sm.getString("standardContext.servletMap.name", name));
-        String decodedPattern = adjustURLPattern(UDecoder.URLDecode(pattern));
-        if (!validateURLPattern(decodedPattern))
+        String adjustedPattern = adjustURLPattern(pattern);
+        if (!validateURLPattern(adjustedPattern))
             throw new IllegalArgumentException
-                (sm.getString("standardContext.servletMap.pattern", decodedPattern));
+                (sm.getString("standardContext.servletMap.pattern", adjustedPattern));
 
         // Add this mapping to our registered set
         synchronized (servletMappingsLock) {
-            String name2 = servletMappings.get(decodedPattern);
+            String name2 = servletMappings.get(adjustedPattern);
             if (name2 != null) {
                 // Don't allow more than one servlet on the same pattern
                 Wrapper wrapper = (Wrapper) findChild(name2);
-                wrapper.removeMapping(decodedPattern);
+                wrapper.removeMapping(adjustedPattern);
             }
-            servletMappings.put(decodedPattern, name);
+            servletMappings.put(adjustedPattern, name);
         }
         Wrapper wrapper = (Wrapper) findChild(name);
-        wrapper.addMapping(decodedPattern);
+        wrapper.addMapping(adjustedPattern);
 
-        fireContainerEvent("addServletMapping", decodedPattern);
+        fireContainerEvent("addServletMapping", adjustedPattern);
     }
 
 

==================================================
FailedContext.java
index 0b0ab9209a..17b25c8e44 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1373,7 +1373,7 @@ public class ContextConfig implements LifecycleListener {
         }
         for (Entry<String, String> entry :
                 webxml.getServletMappings().entrySet()) {
-            context.addServletMapping(entry.getKey(), entry.getValue());
+            context.addServletMappingDecoded(entry.getKey(), entry.getValue());
         }
         SessionConfig sessionConfig = webxml.getSessionConfig();
         if (sessionConfig != null) {
@@ -1426,7 +1426,7 @@ public class ContextConfig implements LifecycleListener {
             }
             if (context.findChild(jspServletName) != null) {
                 for (String urlPattern : jspPropertyGroup.getUrlPatterns()) {
-                    context.addServletMapping(urlPattern, jspServletName, true);
+                    context.addServletMappingDecoded(urlPattern, jspServletName, true);
                 }
             } else {
                 if(log.isDebugEnabled()) {
@@ -2445,6 +2445,7 @@ public class ContextConfig implements LifecycleListener {
                 urlPatterns = processAnnotationsStringArray(evp.getValue());
                 urlPatternsSet = urlPatterns.length > 0;
                 for (String urlPattern : urlPatterns) {
+                    // % decoded (if required) using UTF-8
                     filterMap.addURLPattern(urlPattern);
                 }
             } else if ("servletNames".equals(name)) {
@@ -2526,6 +2527,7 @@ public class ContextConfig implements LifecycleListener {
                 if (urlPatternsSet
                         && (urlsPatterns == null || urlsPatterns.length == 0)) {
                     for (String urlPattern : filterMap.getURLPatterns()) {
+                        // % decoded (if required) using UTF-8
                         descMap.addURLPattern(urlPattern);
                     }
                 }

==================================================
Tomcat.java
index ac3525e876..fcb66dc536 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -567,7 +567,7 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     public void removeSecurityRole(String role) { /* NO-OP */ }
 
     @Override
-    public void addServletMapping(String pattern, String name,
+    public void addServletMappingDecoded(String pattern, String name,
             boolean jspWildcard) { /* NO-OP */ }
     @Override
     public String findServletMapping(String pattern) { return null; }

==================================================
FilterMap.java
index bc105863f2..7804787a68 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -865,9 +865,9 @@ public class Tomcat {
         servlet.setOverridable(true);
 
         // Servlet mappings
-        ctx.addServletMapping("/", "default");
-        ctx.addServletMapping("*.jsp", "jsp");
-        ctx.addServletMapping("*.jspx", "jsp");
+        ctx.addServletMappingDecoded("/", "default");
+        ctx.addServletMappingDecoded("*.jsp", "jsp");
+        ctx.addServletMappingDecoded("*.jspx", "jsp");
 
         // Sessions
         ctx.setSessionTimeout(30);

==================================================
JspPropertyGroup.java
index 8e58f8340d..104c48ddec 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
@@ -57,6 +57,24 @@ public class FilterMap implements Serializable {
 
     private int dispatcherMapping = NOT_SET;
 
+    private String encoding = null;
+    public void setEncoding(String encoding) {
+        this.encoding = encoding;
+    }
+    /**
+     * Obtain the encoding of the XML source that was used to populated this
+     * object.
+     *
+     * @return The encoding of the associated XML source or <code>UTF-8</code>
+     *         if the encoding could not be determined
+     */
+    public String getEncoding() {
+        if (encoding == null || encoding.length() == 0) {
+            return "UTF-8";
+        }
+        return encoding;
+    }
+
     private String filterName = null;
 
     public String getFilterName() {
@@ -127,6 +145,9 @@ public class FilterMap implements Serializable {
     }
 
     public void addURLPattern(String urlPattern) {
+        addURLPatternDecoded(UDecoder.URLDecode(urlPattern, getEncoding()));
+    }
+    public void addURLPatternDecoded(String urlPattern) {
         if ("*".equals(urlPattern)) {
             this.matchAllUrlPatterns = true;
         } else {

==================================================
SecurityCollection.java
index 479af9f308..913a136909 100644
--- a/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java
+++ b/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java
@@ -21,10 +21,31 @@ import java.util.Collection;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
+import org.apache.tomcat.util.buf.UDecoder;
+
 /**
  * Representation of a jsp-property-group element in web.xml.
  */
 public class JspPropertyGroup {
+
+    private String encoding = null;
+    public void setEncoding(String encoding) {
+        this.encoding = encoding;
+    }
+    /**
+     * Obtain the encoding of the XML source that was used to populated this
+     * object.
+     *
+     * @return The encoding of the associated XML source or <code>UTF-8</code>
+     *         if the encoding could not be determined
+     */
+    public String getEncoding() {
+        if (encoding == null || encoding.length() == 0) {
+            return "UTF-8";
+        }
+        return encoding;
+    }
+
     private Boolean deferredSyntax = null;
     public void setDeferredSyntax(String deferredSyntax) {
         this.deferredSyntax = Boolean.valueOf(deferredSyntax);
@@ -75,6 +96,9 @@ public class JspPropertyGroup {
 
     private LinkedHashSet<String> urlPattern = new LinkedHashSet<>();
     public void addUrlPattern(String urlPattern) {
+        addUrlPatternDecoded(UDecoder.URLDecode(urlPattern, getEncoding()));
+    }
+    public void addUrlPatternDecoded(String urlPattern) {
         this.urlPattern.add(urlPattern);
     }
     public Set<String> getUrlPatterns() { return this.urlPattern; }

==================================================
SecurityConstraint.java
index bb1a6a3e00..01175431af 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
@@ -38,6 +38,25 @@ public class SecurityCollection implements Serializable {
 
     private static final long serialVersionUID = 1L;
 
+    private String encoding = null;
+    public void setEncoding(String encoding) {
+        this.encoding = encoding;
+    }
+    /**
+     * Obtain the encoding of the XML source that was used to populated this
+     * object.
+     *
+     * @return The encoding of the associated XML source or <code>UTF-8</code>
+     *         if the encoding could not be determined
+     */
+    public String getEncoding() {
+        if (encoding == null || encoding.length() == 0) {
+            return "UTF-8";
+        }
+        return encoding;
+    }
+
+
     // ----------------------------------------------------------- Constructors
 
 
@@ -209,6 +228,9 @@ public class SecurityCollection implements Serializable {
      * @param pattern The pattern
      */
     public void addPattern(String pattern) {
+        addPatternDecoded(UDecoder.URLDecode(pattern, "UTF-8"));
+    }
+    public void addPatternDecoded(String pattern) {
 
         if (pattern == null)
             return;
@@ -220,7 +242,6 @@ public class SecurityCollection implements Serializable {
         }
         results[patterns.length] = decodedPattern;
         patterns = results;
-
     }
 
 

==================================================
WebXml.java
index 34aee2cae1..384f78f16d 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
@@ -61,6 +61,25 @@ public class SecurityConstraint implements Serializable {
             StringManager.getManager(Constants.PACKAGE_NAME);
 
 
+    private String encoding = null;
+    public void setEncoding(String encoding) {
+        this.encoding = encoding;
+    }
+    /**
+     * Obtain the encoding of the XML source that was used to populated this
+     * object.
+     *
+     * @return The encoding of the associated XML source or <code>UTF-8</code>
+     *         if the encoding could not be determined
+     */
+    public String getEncoding() {
+        if (encoding == null || encoding.length() == 0) {
+            return "UTF-8";
+        }
+        return encoding;
+    }
+
+
     // ----------------------------------------------------------- Constructors
 
     /**
@@ -280,6 +299,9 @@ public class SecurityConstraint implements Serializable {
 
         if (collection == null)
             return;
+
+        collection.setEncoding(getEncoding());
+
         SecurityCollection results[] =
             new SecurityCollection[collections.length + 1];
         for (int i = 0; i < collections.length; i++)
@@ -706,7 +728,7 @@ public class SecurityConstraint implements Serializable {
                     for (String method : methods) {
                         collection.addOmittedMethod(method);
                     }
-                    collection.addPattern(pattern);
+                    collection.addPatternDecoded(pattern);
                     collection.setName("deny-uncovered-http-methods");
                     SecurityConstraint constraint = new SecurityConstraint();
                     constraint.setAuthConstraint(true);
@@ -759,7 +781,7 @@ public class SecurityConstraint implements Serializable {
                 for (String method : omittedMethods) {
                     collection.addMethod(method);
                 }
-                collection.addPattern(pattern);
+                collection.addPatternDecoded(pattern);
                 collection.setName("deny-uncovered-http-methods");
                 SecurityConstraint constraint = new SecurityConstraint();
                 constraint.setAuthConstraint(true);

==================================================
TestHttpServlet.java
index d93ccb720d..d22de179df 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -16,7 +16,9 @@
  */
 package org.apache.tomcat.util.descriptor.web;
 
+import java.io.UnsupportedEncodingException;
 import java.net.URL;
+import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.EnumSet;
@@ -39,7 +41,9 @@ import javax.servlet.descriptor.TaglibDescriptor;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.descriptor.XmlIdentifiers;
+import org.apache.tomcat.util.digester.DocumentProperties;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -50,7 +54,7 @@ import org.apache.tomcat.util.res.StringManager;
  * This class checks for invalid duplicates (eg filter/servlet names)
  * StandardContext will check validity of values (eg URL formats etc)
  */
-public class WebXml {
+public class WebXml implements DocumentProperties.Encoding {
 
     protected static final String ORDER_OTHERS =
         "org.apache.catalina.order.others";
@@ -126,6 +130,24 @@ public class WebXml {
     public Set<String> getBeforeOrdering() { return before; }
 
     // Common elements and attributes
+    private String encoding = null;
+    @Override
+    public void setEncoding(String encoding) {
+        this.encoding = encoding;
+    }
+    /**
+     * Obtain the encoding of the XML source that was used to populated this
+     * object.
+     *
+     * @return The encoding of the associated XML source or <code>UTF-8</code>
+     *         if the encoding could not be determined
+     */
+    public String getEncoding() {
+        if (encoding == null || encoding.length() == 0) {
+            return "UTF-8";
+        }
+        return encoding;
+    }
 
     // Required attribute of web-app element
     public String getVersion() {
@@ -309,9 +331,14 @@ public class WebXml {
     public Map<String,ServletDef> getServlets() { return servlets; }
 
     // servlet-mapping
+    // Note: URLPatterns from web.xml may be URL encoded
+    //       (http://svn.apache.org/r285186)
     private final Map<String,String> servletMappings = new HashMap<>();
     private final Set<String> servletMappingNames = new HashSet<>();
     public void addServletMapping(String urlPattern, String servletName) {
+        addServletMappingDecoded(UDecoder.URLDecode(urlPattern, getEncoding()), servletName);
+    }
+    public void addServletMappingDecoded(String urlPattern, String servletName) {
         String oldServletName = servletMappings.put(urlPattern, servletName);
         if (oldServletName != null) {
             // Duplicate mapping. As per clarification from the Servlet EG,
@@ -394,6 +421,7 @@ public class WebXml {
     // jsp-config/jsp-property-group
     private final Set<JspPropertyGroup> jspPropertyGroups = new LinkedHashSet<>();
     public void addJspPropertyGroup(JspPropertyGroup propertyGroup) {
+        propertyGroup.setEncoding(getEncoding());
         jspPropertyGroups.add(propertyGroup);
     }
     public Set<JspPropertyGroup> getJspPropertyGroups() {
@@ -405,6 +433,7 @@ public class WebXml {
     // TODO: Should support multiple description elements with language
     private final Set<SecurityConstraint> securityConstraints = new HashSet<>();
     public void addSecurityConstraint(SecurityConstraint securityConstraint) {
+        securityConstraint.setEncoding(getEncoding());
         securityConstraints.add(securityConstraint);
     }
     public Set<SecurityConstraint> getSecurityConstraints() {
@@ -644,7 +673,6 @@ public class WebXml {
      */
     public String toXml() {
         StringBuilder sb = new StringBuilder(2048);
-
         // TODO - Various, icon, description etc elements are skipped - mainly
         //        because they are ignored when web.xml is parsed - see above
 
@@ -771,7 +799,7 @@ public class WebXml {
                     sb.append("    <url-pattern>*</url-pattern>\n");
                 } else {
                     for (String urlPattern : filterMap.getURLPatterns()) {
-                        appendElement(sb, INDENT4, "url-pattern", urlPattern);
+                        appendElement(sb, INDENT4, "url-pattern", encodeUrl(urlPattern));
                     }
                 }
                 // dispatcher was added in Servlet 2.4
@@ -862,7 +890,7 @@ public class WebXml {
         for (Map.Entry<String, String> entry : servletMappings.entrySet()) {
             sb.append("  <servlet-mapping>\n");
             appendElement(sb, INDENT4, "servlet-name", entry.getValue());
-            appendElement(sb, INDENT4, "url-pattern", entry.getKey());
+            appendElement(sb, INDENT4, "url-pattern", encodeUrl(entry.getKey()));
             sb.append("  </servlet-mapping>\n");
         }
         sb.append('\n');
@@ -946,7 +974,7 @@ public class WebXml {
                 for (JspPropertyGroup jpg : jspPropertyGroups) {
                     sb.append("    <jsp-property-group>\n");
                     for (String urlPattern : jpg.getUrlPatterns()) {
-                        appendElement(sb, INDENT6, "url-pattern", urlPattern);
+                        appendElement(sb, INDENT6, "url-pattern", encodeUrl(urlPattern));
                     }
                     appendElement(sb, INDENT6, "el-ignored", jpg.getElIgnored());
                     appendElement(sb, INDENT6, "page-encoding",
@@ -1041,7 +1069,7 @@ public class WebXml {
                 appendElement(sb, INDENT6, "description",
                         collection.getDescription());
                 for (String urlPattern : collection.findPatterns()) {
-                    appendElement(sb, INDENT6, "url-pattern", urlPattern);
+                    appendElement(sb, INDENT6, "url-pattern", encodeUrl(urlPattern));
                 }
                 for (String method : collection.findMethods()) {
                     appendElement(sb, INDENT6, "http-method", method);
@@ -1314,6 +1342,17 @@ public class WebXml {
         return sb.toString();
     }
 
+
+    private String encodeUrl(String input) {
+        try {
+            return URLEncoder.encode(input, "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            // Impossible. UTF-8 is a required character set
+            return null;
+        }
+    }
+
+
     private static void appendElement(StringBuilder sb, String indent,
             String elementName, String value) {
         if (value == null) {
@@ -1628,7 +1667,7 @@ public class WebXml {
 
         // Add fragment mappings
         for (Map.Entry<String,String> mapping : servletMappingsToAdd) {
-            addServletMapping(mapping.getKey(), mapping.getValue());
+            addServletMappingDecoded(mapping.getKey(), mapping.getValue());
         }
 
         for (WebXml fragment : fragments) {

==================================================
TestDigestAuthenticator.java
index 8e373a5182..feca2c9a80 100644
--- a/test/javax/servlet/http/TestHttpServlet.java
+++ b/test/javax/servlet/http/TestHttpServlet.java
@@ -44,7 +44,7 @@ public class TestHttpServlet extends TomcatBaseTest {
         // Map the test Servlet
         LargeBodyServlet largeBodyServlet = new LargeBodyServlet();
         Tomcat.addServlet(ctx, "largeBodyServlet", largeBodyServlet);
-        ctx.addServletMapping("/", "largeBodyServlet");
+        ctx.addServletMappingDecoded("/", "largeBodyServlet");
 
         tomcat.start();
 
@@ -84,11 +84,11 @@ public class TestHttpServlet extends TomcatBaseTest {
 
         Bug57602ServletOuter outer = new Bug57602ServletOuter();
         Tomcat.addServlet(ctx, "Bug57602ServletOuter", outer);
-        ctx.addServletMapping("/outer", "Bug57602ServletOuter");
+        ctx.addServletMappingDecoded("/outer", "Bug57602ServletOuter");
 
         Bug57602ServletInner inner = new Bug57602ServletInner();
         Tomcat.addServlet(ctx, "Bug57602ServletInner", inner);
-        ctx.addServletMapping("/inner", "Bug57602ServletInner");
+        ctx.addServletMappingDecoded("/inner", "Bug57602ServletInner");
 
         tomcat.start();
 

==================================================
TestFormAuthenticator.java
index 88a961e219..bea39b4b83 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -275,9 +275,9 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
 
         // Add protected servlet
         Tomcat.addServlet(ctxt, "TesterServlet", new TesterServlet());
-        ctxt.addServletMapping(URI, "TesterServlet");
+        ctxt.addServletMappingDecoded(URI, "TesterServlet");
         SecurityCollection collection = new SecurityCollection();
-        collection.addPattern(URI);
+        collection.addPatternDecoded(URI);
         SecurityConstraint sc = new SecurityConstraint();
         sc.addAuthRole(ROLE);
         sc.addCollection(collection);

==================================================
TestNonLoginAndBasicAuthenticator.java
index 8c6061dec0..bf2df0113e 100644
--- a/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
@@ -700,19 +700,19 @@ public class TestFormAuthenticator extends TomcatBaseTest {
                     "", System.getProperty("java.io.tmpdir"));
             Tomcat.addServlet(ctx, "SelectedMethods",
                     new SelectedMethodsServlet());
-            ctx.addServletMapping("/test", "SelectedMethods");
+            ctx.addServletMappingDecoded("/test", "SelectedMethods");
             // Login servlet just needs to respond "OK". Client will handle
             // creating a valid response. No need for a form.
             Tomcat.addServlet(ctx, "Login",
                     new TesterServlet());
-            ctx.addServletMapping("/login", "Login");
+            ctx.addServletMappingDecoded("/login", "Login");
 
             // Configure the security constraints
             SecurityConstraint constraint = new SecurityConstraint();
             SecurityCollection collection = new SecurityCollection();
             collection.setName("Protect PUT");
             collection.addMethod("PUT");
-            collection.addPattern("/test");
+            collection.addPatternDecoded("/test");
             constraint.addCollection(collection);
             constraint.addAuthRole("tomcat");
             ctx.addConstraint(constraint);

==================================================
TestSSOnonLoginAndBasicAuthenticator.java
index d6066f3b6c..bb23f37532 100644
--- a/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
@@ -458,10 +458,10 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
 
         // Add protected servlet to the context
         Tomcat.addServlet(nonloginContext, "TesterServlet1", new TesterServlet());
-        nonloginContext.addServletMapping(URI_PROTECTED, "TesterServlet1");
+        nonloginContext.addServletMappingDecoded(URI_PROTECTED, "TesterServlet1");
 
         SecurityCollection collection1 = new SecurityCollection();
-        collection1.addPattern(URI_PROTECTED);
+        collection1.addPatternDecoded(URI_PROTECTED);
         SecurityConstraint sc1 = new SecurityConstraint();
         sc1.addAuthRole(ROLE);
         sc1.addCollection(collection1);
@@ -469,10 +469,10 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
 
         // Add unprotected servlet to the context
         Tomcat.addServlet(nonloginContext, "TesterServlet2", new TesterServlet());
-        nonloginContext.addServletMapping(URI_PUBLIC, "TesterServlet2");
+        nonloginContext.addServletMappingDecoded(URI_PUBLIC, "TesterServlet2");
 
         SecurityCollection collection2 = new SecurityCollection();
-        collection2.addPattern(URI_PUBLIC);
+        collection2.addPatternDecoded(URI_PUBLIC);
         SecurityConstraint sc2 = new SecurityConstraint();
         // do not add a role - which signals access permitted without one
         sc2.addCollection(collection2);
@@ -494,9 +494,9 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
 
         // Add protected servlet to the context
         Tomcat.addServlet(basicContext, "TesterServlet3", new TesterServlet());
-        basicContext.addServletMapping(URI_PROTECTED, "TesterServlet3");
+        basicContext.addServletMappingDecoded(URI_PROTECTED, "TesterServlet3");
         SecurityCollection collection = new SecurityCollection();
-        collection.addPattern(URI_PROTECTED);
+        collection.addPatternDecoded(URI_PROTECTED);
         SecurityConstraint sc = new SecurityConstraint();
         sc.addAuthRole(ROLE);
         sc.addCollection(collection);
@@ -504,10 +504,10 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
 
         // Add unprotected servlet to the context
         Tomcat.addServlet(basicContext, "TesterServlet4", new TesterServlet());
-        basicContext.addServletMapping(URI_PUBLIC, "TesterServlet4");
+        basicContext.addServletMappingDecoded(URI_PUBLIC, "TesterServlet4");
 
         SecurityCollection collection2 = new SecurityCollection();
-        collection2.addPattern(URI_PUBLIC);
+        collection2.addPatternDecoded(URI_PUBLIC);
         SecurityConstraint sc2 = new SecurityConstraint();
         // do not add a role - which signals access permitted without one
         sc2.addCollection(collection2);

==================================================
TestSSOnonLoginAndDigestAuthenticator.java
index 84434bc256..8adb21328a 100644
--- a/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
@@ -484,10 +484,10 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         // Add protected servlet to the context
         Tomcat.addServlet(nonloginContext, "TesterServlet1",
                 new TesterServletEncodeUrl());
-        nonloginContext.addServletMapping(URI_PROTECTED, "TesterServlet1");
+        nonloginContext.addServletMappingDecoded(URI_PROTECTED, "TesterServlet1");
 
         SecurityCollection collection1 = new SecurityCollection();
-        collection1.addPattern(URI_PROTECTED);
+        collection1.addPatternDecoded(URI_PROTECTED);
         SecurityConstraint sc1 = new SecurityConstraint();
         sc1.addAuthRole(ROLE);
         sc1.addCollection(collection1);
@@ -496,10 +496,10 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         // Add unprotected servlet to the context
         Tomcat.addServlet(nonloginContext, "TesterServlet2",
                 new TesterServletEncodeUrl());
-        nonloginContext.addServletMapping(URI_PUBLIC, "TesterServlet2");
+        nonloginContext.addServletMappingDecoded(URI_PUBLIC, "TesterServlet2");
 
         SecurityCollection collection2 = new SecurityCollection();
-        collection2.addPattern(URI_PUBLIC);
+        collection2.addPatternDecoded(URI_PUBLIC);
         SecurityConstraint sc2 = new SecurityConstraint();
         // do not add a role - which signals access permitted without one
         sc2.addCollection(collection2);
@@ -523,9 +523,9 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         // Add protected servlet to the context
         Tomcat.addServlet(basicContext, "TesterServlet3",
                 new TesterServletEncodeUrl());
-        basicContext.addServletMapping(URI_PROTECTED, "TesterServlet3");
+        basicContext.addServletMappingDecoded(URI_PROTECTED, "TesterServlet3");
         SecurityCollection collection = new SecurityCollection();
-        collection.addPattern(URI_PROTECTED);
+        collection.addPatternDecoded(URI_PROTECTED);
         SecurityConstraint sc = new SecurityConstraint();
         sc.addAuthRole(ROLE);
         sc.addCollection(collection);
@@ -534,9 +534,9 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         // Add unprotected servlet to the context
         Tomcat.addServlet(basicContext, "TesterServlet4",
                 new TesterServletEncodeUrl());
-        basicContext.addServletMapping(URI_PUBLIC, "TesterServlet4");
+        basicContext.addServletMappingDecoded(URI_PUBLIC, "TesterServlet4");
         SecurityCollection collection2 = new SecurityCollection();
-        collection2.addPattern(URI_PUBLIC);
+        collection2.addPatternDecoded(URI_PUBLIC);
         SecurityConstraint sc2 = new SecurityConstraint();
         // do not add a role - which signals access permitted without one
         sc2.addCollection(collection2);

==================================================
TestConnector.java
index 19eae711b3..775321c10f 100644
--- a/test/org/apache/catalina/authenticator/TestSSOnonLoginAndDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestSSOnonLoginAndDigestAuthenticator.java
@@ -330,9 +330,9 @@ public class TestSSOnonLoginAndDigestAuthenticator extends TomcatBaseTest {
 
         // Add protected servlet
         Tomcat.addServlet(ctxt, "TesterServlet1", new TesterServlet());
-        ctxt.addServletMapping(URI_PROTECTED, "TesterServlet1");
+        ctxt.addServletMappingDecoded(URI_PROTECTED, "TesterServlet1");
         SecurityCollection collection1 = new SecurityCollection();
-        collection1.addPattern(URI_PROTECTED);
+        collection1.addPatternDecoded(URI_PROTECTED);
         SecurityConstraint sc1 = new SecurityConstraint();
         sc1.addAuthRole(ROLE);
         sc1.addCollection(collection1);
@@ -340,9 +340,9 @@ public class TestSSOnonLoginAndDigestAuthenticator extends TomcatBaseTest {
 
         // Add unprotected servlet
         Tomcat.addServlet(ctxt, "TesterServlet2", new TesterServlet());
-        ctxt.addServletMapping(URI_PUBLIC, "TesterServlet2");
+        ctxt.addServletMappingDecoded(URI_PUBLIC, "TesterServlet2");
         SecurityCollection collection2 = new SecurityCollection();
-        collection2.addPattern(URI_PUBLIC);
+        collection2.addPatternDecoded(URI_PUBLIC);
         SecurityConstraint sc2 = new SecurityConstraint();
         // do not add a role - which signals access permitted without one
         sc2.addCollection(collection2);
@@ -364,9 +364,9 @@ public class TestSSOnonLoginAndDigestAuthenticator extends TomcatBaseTest {
 
         // Add protected servlet
         Tomcat.addServlet(ctxt, "TesterServlet3", new TesterServlet());
-        ctxt.addServletMapping(URI_PROTECTED, "TesterServlet3");
+        ctxt.addServletMappingDecoded(URI_PROTECTED, "TesterServlet3");
         SecurityCollection collection = new SecurityCollection();
-        collection.addPattern(URI_PROTECTED);
+        collection.addPatternDecoded(URI_PROTECTED);
         SecurityConstraint sc = new SecurityConstraint();
         sc.addAuthRole(ROLE);
         sc.addCollection(collection);

==================================================
TestCoyoteAdapter.java
index 0006ce3224..41e7a040fa 100644
--- a/test/org/apache/catalina/connector/TestConnector.java
+++ b/test/org/apache/catalina/connector/TestConnector.java
@@ -43,7 +43,7 @@ public class TestConnector extends TomcatBaseTest {
         Wrapper w =
             Tomcat.addServlet(root, "tester", new TesterServlet());
         w.setAsyncSupported(true);
-        root.addServletMapping("/", "tester");
+        root.addServletMappingDecoded("/", "tester");
 
         Connector connector = tomcat.getConnector();
 

==================================================
TestCoyoteOutputStream.java
index 0b4e070ee5..930d9648b4 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapter.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapter.java
@@ -115,7 +115,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", docBase.getAbsolutePath());
 
         Tomcat.addServlet(ctx, "servlet", new PathParamServlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -136,7 +136,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new PathParamServlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -189,7 +189,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("/testapp", null);
 
         Tomcat.addServlet(ctx, "servlet", new PathParamServlet());
-        ctx.addServletMapping("*.txt", "servlet");
+        ctx.addServletMappingDecoded("*.txt", "servlet");
 
         tomcat.start();
 
@@ -240,7 +240,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
 
         PathInfoServlet servlet = new PathInfoServlet();
         Tomcat.addServlet(ctx, "servlet", servlet);
-        ctx.addServletMapping("/*", "servlet");
+        ctx.addServletMappingDecoded("/*", "servlet");
 
         tomcat.start();
 
@@ -283,7 +283,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         AsyncServlet servlet = new AsyncServlet();
         Wrapper w = Tomcat.addServlet(ctx, "async", servlet);
         w.setAsyncSupported(true);
-        ctx.addServletMapping("/async", "async");
+        ctx.addServletMappingDecoded("/async", "async");
 
         tomcat.start();
 

==================================================
TestInputBuffer.java
index 190f878b08..ff04e4791c 100644
--- a/test/org/apache/catalina/connector/TestCoyoteOutputStream.java
+++ b/test/org/apache/catalina/connector/TestCoyoteOutputStream.java
@@ -108,7 +108,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
 
         Context root = tomcat.addContext("", TEMP_DIR);
         Tomcat.addServlet(root, "testServlet", new TestServlet());
-        root.addServletMapping("/", "testServlet");
+        root.addServletMappingDecoded("/", "testServlet");
 
         tomcat.start();
 
@@ -132,11 +132,11 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
         Wrapper w = Tomcat.addServlet(root, "nbWrite",
                 new NonBlockingWriteServlet(asyncWriteTarget, useContainerThreadToSetListener));
         w.setAsyncSupported(true);
-        root.addServletMapping("/nbWrite", "nbWrite");
+        root.addServletMappingDecoded("/nbWrite", "nbWrite");
         Tomcat.addServlet(root, "write",
                 new BlockingWriteServlet(asyncWriteTarget, syncWriteTarget));
         w.setAsyncSupported(true);
-        root.addServletMapping("/write", "write");
+        root.addServletMappingDecoded("/write", "write");
 
         tomcat.start();
 

==================================================
TestKeepAliveCount.java
index 4ef9819dee..a971a29b46 100644
--- a/test/org/apache/catalina/connector/TestInputBuffer.java
+++ b/test/org/apache/catalina/connector/TestInputBuffer.java
@@ -44,7 +44,7 @@ public class TestInputBuffer extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
         Context root = tomcat.addContext("", TEMP_DIR);
         Tomcat.addServlet(root, "Echo", new Utf8Echo());
-        root.addServletMapping("/test", "Echo");
+        root.addServletMappingDecoded("/test", "Echo");
 
         tomcat.getConnector().setProperty("soTimeout", "300000");
         tomcat.start();

==================================================
TestMaxConnections.java
index af9b58415f..07c37f645c 100644
--- a/test/org/apache/catalina/connector/TestKeepAliveCount.java
+++ b/test/org/apache/catalina/connector/TestKeepAliveCount.java
@@ -58,7 +58,7 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
-            root.addServletMapping("/test", "Simple");
+            root.addServletMappingDecoded("/test", "Simple");
             tomcat.getConnector().setProperty("maxKeepAliveRequests", "5");
             tomcat.getConnector().setProperty("soTimeout", "20000");
             tomcat.getConnector().setProperty("keepAliveTimeout", "50000");

==================================================
TestOutputBuffer.java
index 449256022b..16904da345 100644
--- a/test/org/apache/catalina/connector/TestMaxConnections.java
+++ b/test/org/apache/catalina/connector/TestMaxConnections.java
@@ -76,7 +76,7 @@ public class TestMaxConnections extends TomcatBaseTest {
         StandardContext root = (StandardContext) tomcat.addContext("", SimpleHttpClient.TEMP_DIR);
         root.setUnloadDelay(soTimeout);
         Tomcat.addServlet(root, "Simple", new SimpleServlet());
-        root.addServletMapping("/test", "Simple");
+        root.addServletMappingDecoded("/test", "Simple");
         tomcat.getConnector().setProperty("maxKeepAliveRequests", "1");
         tomcat.getConnector().setProperty("maxThreads", "10");
         tomcat.getConnector().setProperty("soTimeout", "20000");

==================================================
TestRequest.java
index 4f8c527113..611ffc75b4 100644
--- a/test/org/apache/catalina/connector/TestOutputBuffer.java
+++ b/test/org/apache/catalina/connector/TestOutputBuffer.java
@@ -50,7 +50,7 @@ public class TestOutputBuffer extends TomcatBaseTest{
         for (int i = 1; i <= WritingServlet.EXPECTED_CONTENT_LENGTH; i*=10) {
             WritingServlet servlet = new WritingServlet(i);
             Tomcat.addServlet(root, "servlet" + i, servlet);
-            root.addServletMapping("/servlet" + i, "servlet" + i);
+            root.addServletMappingDecoded("/servlet" + i, "servlet" + i);
         }
 
         tomcat.start();
@@ -84,7 +84,7 @@ public class TestOutputBuffer extends TomcatBaseTest{
 
         Bug52577Servlet bug52577 = new Bug52577Servlet();
         Tomcat.addServlet(root, "bug52577", bug52577);
-        root.addServletMapping("/", "bug52577");
+        root.addServletMappingDecoded("/", "bug52577");
 
         tomcat.start();
 

==================================================
TestResponse.java
index de5bd189a3..13b2d2dc80 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -177,7 +177,7 @@ public class TestRequest extends TomcatBaseTest {
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug37794", new Bug37794Servlet());
-            root.addServletMapping("/test", "Bug37794");
+            root.addServletMappingDecoded("/test", "Bug37794");
 
             if (createFilter) {
                 FilterDef failedRequestFilter = new FilterDef();
@@ -186,7 +186,7 @@ public class TestRequest extends TomcatBaseTest {
                         FailedRequestFilter.class.getName());
                 FilterMap failedRequestFilterMap = new FilterMap();
                 failedRequestFilterMap.setFilterName("failedRequestFilter");
-                failedRequestFilterMap.addURLPattern("/*");
+                failedRequestFilterMap.addURLPatternDecoded("/*");
                 root.addFilterDef(failedRequestFilter);
                 root.addFilterMap(failedRequestFilterMap);
             }
@@ -277,7 +277,7 @@ public class TestRequest extends TomcatBaseTest {
 
         // Add the Servlet
         Tomcat.addServlet(ctx, "servlet", new EchoQueryStringServlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -325,7 +325,7 @@ public class TestRequest extends TomcatBaseTest {
         ctx.getPipeline().addValve(new BasicAuthenticator());
 
         Tomcat.addServlet(ctx, "servlet", new LoginLogoutServlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterMapRealm realm = new TesterMapRealm();
         realm.addUser(LoginLogoutServlet.USER, LoginLogoutServlet.PWD);
@@ -372,7 +372,7 @@ public class TestRequest extends TomcatBaseTest {
         Context root = tomcat.addContext("",
                 System.getProperty("java.io.tmpdir"));
         Tomcat.addServlet(root, "Bug37794", new Bug37794Servlet());
-        root.addServletMapping("/", "Bug37794");
+        root.addServletMappingDecoded("/", "Bug37794");
         tomcat.start();
 
         HttpURLConnection conn = getConnection("http://localhost:" + getPort() + "/");
@@ -386,7 +386,7 @@ public class TestRequest extends TomcatBaseTest {
         Context root = tomcat.addContext("",
                 System.getProperty("java.io.tmpdir"));
         Tomcat.addServlet(root, "Bug37794", new Bug37794Servlet());
-        root.addServletMapping("/", "Bug37794");
+        root.addServletMappingDecoded("/", "Bug37794");
         tomcat.start();
 
         HttpURLConnection conn = getConnection("http://localhost:" + getPort() + "/");
@@ -479,7 +479,7 @@ public class TestRequest extends TomcatBaseTest {
                 System.getProperty("java.io.tmpdir"));
         root.setAllowCasualMultipartParsing(true);
         Tomcat.addServlet(root, "Bug54984", new Bug54984Servlet());
-        root.addServletMapping("/", "Bug54984");
+        root.addServletMappingDecoded("/", "Bug54984");
         tomcat.start();
 
         HttpURLConnection conn = getConnection("http://localhost:" + getPort()
@@ -556,7 +556,7 @@ public class TestRequest extends TomcatBaseTest {
             Tomcat tomcat = getTomcatInstance();
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "EchoParameters", new EchoParametersServlet());
-            root.addServletMapping("/echo", "EchoParameters");
+            root.addServletMappingDecoded("/echo", "EchoParameters");
             tomcat.start();
 
             setPort(tomcat.getConnector().getLocalPort());
@@ -829,7 +829,7 @@ public class TestRequest extends TomcatBaseTest {
         Context ctx = tomcat.addContext(deployPath, null);
 
         Tomcat.addServlet(ctx, "servlet", new Bug56501Servelet());
-        ctx.addServletMapping("/*", "servlet");
+        ctx.addServletMappingDecoded("/*", "servlet");
 
         tomcat.start();
 

==================================================
TestSendFile.java
index d21548752c..204b54ddf1 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -56,7 +56,7 @@ public class TestResponse extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new Bug49598Servlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -112,7 +112,7 @@ public class TestResponse extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new CharsetServlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -151,7 +151,7 @@ public class TestResponse extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new Bug52811Servlet());
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 

==================================================
TestApplicationContext.java
index ec7e7bf9ac..1acb0891c8 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -62,7 +62,7 @@ public class TestSendFile extends TomcatBaseTest{
             for (int i=0; i<ITERATIONS; i++) {
                 WritingServlet servlet = new WritingServlet(files[i]);
                 Tomcat.addServlet(root, "servlet" + i, servlet);
-                root.addServletMapping("/servlet" + i, "servlet" + i);
+                root.addServletMappingDecoded("/servlet" + i, "servlet" + i);
             }
 
             tomcat.start();

==================================================
TestApplicationContextGetRequestDispatcher.java
index 0189564149..8df7da622e 100644
--- a/test/org/apache/catalina/core/TestApplicationContext.java
+++ b/test/org/apache/catalina/core/TestApplicationContext.java
@@ -189,7 +189,7 @@ public class TestApplicationContext extends TomcatBaseTest {
         ctx.setCrossContext(true);
 
         Tomcat.addServlet(ctx, "Bug57190Servlet", new Bug57190Servlet());
-        ctx.addServletMapping("/", "Bug57190Servlet");
+        ctx.addServletMappingDecoded("/", "Bug57190Servlet");
 
         tomcat.start();
 
@@ -262,14 +262,14 @@ public class TestApplicationContext extends TomcatBaseTest {
         Context ctx2 = tomcat.addContext("/second", null);
         GetAttributeServlet getAttributeServlet = new GetAttributeServlet();
         Tomcat.addServlet(ctx2, "getAttributeServlet", getAttributeServlet);
-        ctx2.addServletMapping("/test", "getAttributeServlet");
+        ctx2.addServletMappingDecoded("/test", "getAttributeServlet");
 
         // No file system docBase required
         Context ctx1 = tomcat.addContext("/first", null);
         ctx1.setCrossContext(true);
         SetAttributeServlet setAttributeServlet = new SetAttributeServlet("/test", "/second");
         Tomcat.addServlet(ctx1, "setAttributeServlet", setAttributeServlet);
-        ctx1.addServletMapping("/test", "setAttributeServlet");
+        ctx1.addServletMappingDecoded("/test", "setAttributeServlet");
 
         tomcat.start();
 

==================================================
TestApplicationFilterConfig.java
index 197278d31b..6ea9c9b17b 100644
--- a/test/org/apache/catalina/core/TestApplicationContextGetRequestDispatcher.java
+++ b/test/org/apache/catalina/core/TestApplicationContextGetRequestDispatcher.java
@@ -39,6 +39,7 @@ import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.catalina.util.URLEncoder;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.buf.UDecoder;
 
 @RunWith(value = Parameterized.class)
 public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
@@ -364,12 +365,11 @@ public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
 
         // Add a default servlet to return 404 for not found resources
         Tomcat.addServlet(ctx, "Default", new Default404Servlet());
-        ctx.addServletMapping("/*", "Default");
+        ctx.addServletMappingDecoded("/*", "Default");
 
         // Add a target servlet to dispatch to
         Tomcat.addServlet(ctx, "target", new TargetServlet());
-        // Note: This will decode the provided path
-        ctx.addServletMapping(targetPath, "target");
+        ctx.addServletMappingDecoded(UDecoder.URLDecode(targetPath, "UTF-8"), "target");
 
         if (useAsync) {
             Wrapper w = Tomcat.addServlet(
@@ -378,8 +378,7 @@ public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
         } else {
             Tomcat.addServlet(ctx, "rd", new DispatcherServlet(dispatchPath));
         }
-        // Note: This will decode the provided path
-        ctx.addServletMapping(startPath, "rd");
+        ctx.addServletMappingDecoded(UDecoder.URLDecode(startPath, "UTF-8"), "rd");
 
         tomcat.start();
 

==================================================
TestApplicationHttpRequest.java
index 5a3f9ccdaf..1d5be4d28f 100644
--- a/test/org/apache/catalina/core/TestApplicationFilterConfig.java
+++ b/test/org/apache/catalina/core/TestApplicationFilterConfig.java
@@ -41,7 +41,7 @@ public class TestApplicationFilterConfig extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "HelloWorld", new HelloWorldServlet());
-        ctx.addServletMapping("/", "HelloWorld");
+        ctx.addServletMappingDecoded("/", "HelloWorld");
 
         // Add a filter with a name that should be escaped if used in a JMX
         // object name

==================================================
TestApplicationMapping.java
index ccc88bd088..7bf4ede49b 100644
--- a/test/org/apache/catalina/core/TestApplicationHttpRequest.java
+++ b/test/org/apache/catalina/core/TestApplicationHttpRequest.java
@@ -189,10 +189,10 @@ public class TestApplicationHttpRequest extends TomcatBaseTest {
         } else {
             Tomcat.addServlet(ctx, "forward", new ForwardServlet("/display?" + forwardQueryString));
         }
-        ctx.addServletMapping("/forward", "forward");
+        ctx.addServletMappingDecoded("/forward", "forward");
 
         Tomcat.addServlet(ctx, "display", new DisplayParameterServlet(expected));
-        ctx.addServletMapping("/display", "display");
+        ctx.addServletMappingDecoded("/display", "display");
 
         tomcat.start();
 
@@ -219,10 +219,10 @@ public class TestApplicationHttpRequest extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "forward", new ForwardServlet("/modify"));
-        ctx.addServletMapping("/forward", "forward");
+        ctx.addServletMappingDecoded("/forward", "forward");
 
         Tomcat.addServlet(ctx, "modify", new ModifyParameterServlet());
-        ctx.addServletMapping("/modify", "modify");
+        ctx.addServletMappingDecoded("/modify", "modify");
 
         tomcat.start();
 

==================================================
TestAsyncContextImpl.java
index 9d0abfface..06ed5a6c84 100644
--- a/test/org/apache/catalina/core/TestApplicationMapping.java
+++ b/test/org/apache/catalina/core/TestApplicationMapping.java
@@ -111,7 +111,7 @@ public class TestApplicationMapping extends TomcatBaseTest {
         Context ctx = tomcat.addContext(contextPath, null);
 
         Tomcat.addServlet(ctx, "Mapping", new MappingServlet());
-        ctx.addServletMapping(mapping, "Mapping");
+        ctx.addServletMappingDecoded(mapping, "Mapping");
 
         tomcat.start();
 
@@ -132,9 +132,9 @@ public class TestApplicationMapping extends TomcatBaseTest {
         Context ctx = tomcat.addContext(contextPath, null);
 
         Tomcat.addServlet(ctx, "Include", new IncludeServlet());
-        ctx.addServletMapping(mapping, "Include");
+        ctx.addServletMappingDecoded(mapping, "Include");
         Tomcat.addServlet(ctx, "Mapping", new MappingServlet());
-        ctx.addServletMapping("/mapping", "Mapping");
+        ctx.addServletMappingDecoded("/mapping", "Mapping");
 
         tomcat.start();
 
@@ -160,9 +160,9 @@ public class TestApplicationMapping extends TomcatBaseTest {
         Context ctx = tomcat.addContext(contextPath, null);
 
         Tomcat.addServlet(ctx, "Include", new NamedIncludeServlet());
-        ctx.addServletMapping(mapping, "Include");
+        ctx.addServletMappingDecoded(mapping, "Include");
         Tomcat.addServlet(ctx, "Mapping", new MappingServlet());
-        ctx.addServletMapping("/mapping", "Mapping");
+        ctx.addServletMappingDecoded("/mapping", "Mapping");
 
         tomcat.start();
 
@@ -183,9 +183,9 @@ public class TestApplicationMapping extends TomcatBaseTest {
         Context ctx = tomcat.addContext(contextPath, null);
 
         Tomcat.addServlet(ctx, "Forward", new ForwardServlet());
-        ctx.addServletMapping(mapping, "Forward");
+        ctx.addServletMappingDecoded(mapping, "Forward");
         Tomcat.addServlet(ctx, "Mapping", new MappingServlet());
-        ctx.addServletMapping("/mapping", "Mapping");
+        ctx.addServletMappingDecoded("/mapping", "Mapping");
 
         tomcat.start();
 
@@ -211,9 +211,9 @@ public class TestApplicationMapping extends TomcatBaseTest {
         Context ctx = tomcat.addContext(contextPath, null);
 
         Tomcat.addServlet(ctx, "Forward", new NamedForwardServlet());
-        ctx.addServletMapping(mapping, "Forward");
+        ctx.addServletMappingDecoded(mapping, "Forward");
         Tomcat.addServlet(ctx, "Mapping", new MappingServlet());
-        ctx.addServletMapping("/mapping", "Mapping");
+        ctx.addServletMappingDecoded("/mapping", "Mapping");
 
         tomcat.start();
 

==================================================
TestStandardContext.java
index c28adb9d71..3bd4606452 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -100,7 +100,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -137,7 +137,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -180,7 +180,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -219,7 +219,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -475,7 +475,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "time", timeout);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/start", "time");
+        ctx.addServletMappingDecoded("/start", "time");
 
         if (asyncDispatch != null) {
             if (asyncDispatch.booleanValue()) {
@@ -484,11 +484,11 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
                 Wrapper async =
                         Tomcat.addServlet(ctx, "async", asyncStartRunnable);
                 async.setAsyncSupported(true);
-                ctx.addServletMapping(dispatchUrl, "async");
+                ctx.addServletMappingDecoded(dispatchUrl, "async");
             } else {
                 NonAsyncServlet nonAsync = new NonAsyncServlet();
                 Tomcat.addServlet(ctx, "nonasync", nonAsync);
-                ctx.addServletMapping(dispatchUrl, "nonasync");
+                ctx.addServletMappingDecoded(dispatchUrl, "nonasync");
             }
          }
 
@@ -630,12 +630,12 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         DispatchingServlet dispatch = new DispatchingServlet(false, false);
         Wrapper wrapper = Tomcat.addServlet(ctx, "dispatch", dispatch);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/stage1", "dispatch");
+        ctx.addServletMappingDecoded("/stage1", "dispatch");
 
         NonAsyncServlet nonasync = new NonAsyncServlet();
         Wrapper wrapper2 = Tomcat.addServlet(ctx, "nonasync", nonasync);
         wrapper2.setAsyncSupported(true);
-        ctx.addServletMapping("/stage2", "nonasync");
+        ctx.addServletMappingDecoded("/stage2", "nonasync");
 
         ctx.addApplicationListener(TrackingRequestListener.class.getName());
 
@@ -749,12 +749,12 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         TrackingServlet tracking = new TrackingServlet();
         Wrapper wrapper = Tomcat.addServlet(ctx, "tracking", tracking);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/stage1", "tracking");
+        ctx.addServletMappingDecoded("/stage1", "tracking");
 
         TimeoutServlet timeout = new TimeoutServlet(Boolean.TRUE, null);
         Wrapper wrapper2 = Tomcat.addServlet(ctx, "timeout", timeout);
         wrapper2.setAsyncSupported(true);
-        ctx.addServletMapping("/stage2", "timeout");
+        ctx.addServletMappingDecoded("/stage2", "timeout");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -972,11 +972,11 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             new DispatchingServlet(true, completeOnError);
         Wrapper wrapper = Tomcat.addServlet(ctx, "dispatch", dispatch);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/stage1", "dispatch");
+        ctx.addServletMappingDecoded("/stage1", "dispatch");
 
         ErrorServlet error = new ErrorServlet();
         Tomcat.addServlet(ctx, "error", error);
-        ctx.addServletMapping("/stage2", "error");
+        ctx.addServletMappingDecoded("/stage2", "error");
 
         ctx.addApplicationListener(TrackingRequestListener.class.getName());
 
@@ -1050,7 +1050,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         AsyncStartRunnable servlet = new AsyncStartRunnable();
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -1118,7 +1118,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -1181,7 +1181,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         ErrorServlet error = new ErrorServlet();
         Tomcat.addServlet(ctx, "error", error);
-        ctx.addServletMapping("/error", "error");
+        ctx.addServletMappingDecoded("/error", "error");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -1218,7 +1218,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Wrapper wrapper =
             Tomcat.addServlet(ctx, "asyncStatusServlet", asyncStatusServlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/asyncStatusServlet", "asyncStatusServlet");
+        ctx.addServletMappingDecoded("/asyncStatusServlet", "asyncStatusServlet");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -1296,12 +1296,12 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Wrapper wrapper =
             Tomcat.addServlet(ctx, "asyncErrorServlet", asyncErrorServlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/asyncErrorServlet", "asyncErrorServlet");
+        ctx.addServletMappingDecoded("/asyncErrorServlet", "asyncErrorServlet");
 
         if (customError) {
             CustomErrorServlet customErrorServlet = new CustomErrorServlet();
             Tomcat.addServlet(ctx, "customErrorServlet", customErrorServlet);
-            ctx.addServletMapping("/customErrorServlet", "customErrorServlet");
+            ctx.addServletMappingDecoded("/customErrorServlet", "customErrorServlet");
 
             ErrorPage ep = new ErrorPage();
             ep.setLocation("/customErrorServlet");
@@ -1413,9 +1413,9 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Wrapper b = Tomcat.addServlet(ctx, "ServletB", new Bug53337ServletB());
         b.setAsyncSupported(true);
         Tomcat.addServlet(ctx, "ServletC", new Bug53337ServletC());
-        ctx.addServletMapping("/ServletA", "ServletA");
-        ctx.addServletMapping("/ServletB", "ServletB");
-        ctx.addServletMapping("/ServletC", "ServletC");
+        ctx.addServletMappingDecoded("/ServletA", "ServletA");
+        ctx.addServletMappingDecoded("/ServletB", "ServletB");
+        ctx.addServletMappingDecoded("/ServletC", "ServletC");
 
         tomcat.start();
 
@@ -1493,8 +1493,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         a.setAsyncSupported(true);
         Tomcat.addServlet(ctx, "ServletB", new Bug53843ServletB());
 
-        ctx.addServletMapping("/ServletA", "ServletA");
-        ctx.addServletMapping("/ServletB", "ServletB");
+        ctx.addServletMappingDecoded("/ServletA", "ServletA");
+        ctx.addServletMappingDecoded("/ServletB", "ServletB");
 
         tomcat.start();
 
@@ -1604,17 +1604,17 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         TimeoutServlet timeout = new TimeoutServlet(null, null);
         Wrapper w1 = Tomcat.addServlet(ctx, "time", timeout);
         w1.setAsyncSupported(true);
-        ctx.addServletMapping("/async", "time");
+        ctx.addServletMappingDecoded("/async", "time");
 
         NonAsyncServlet nonAsync = new NonAsyncServlet();
         Wrapper w2 = Tomcat.addServlet(ctx, "nonAsync", nonAsync);
         w2.setAsyncSupported(true);
-        ctx.addServletMapping("/error/nonasync", "nonAsync");
+        ctx.addServletMappingDecoded("/error/nonasync", "nonAsync");
 
         AsyncErrorPage asyncErrorPage = new AsyncErrorPage(mode);
         Wrapper w3 = Tomcat.addServlet(ctx, "asyncErrorPage", asyncErrorPage);
         w3.setAsyncSupported(true);
-        ctx.addServletMapping("/error/async", "asyncErrorPage");
+        ctx.addServletMappingDecoded("/error/async", "asyncErrorPage");
 
         if (asyncError != null) {
             ErrorPage ep = new ErrorPage();
@@ -1734,11 +1734,11 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Wrapper wrapper =
             Tomcat.addServlet(ctx, "bug54178ServletA", bug54178ServletA);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/bug54178ServletA", "bug54178ServletA");
+        ctx.addServletMappingDecoded("/bug54178ServletA", "bug54178ServletA");
 
         Bug54178ServletB bug54178ServletB = new Bug54178ServletB();
         Tomcat.addServlet(ctx, "bug54178ServletB", bug54178ServletB);
-        ctx.addServletMapping("/bug54178ServletB", "bug54178ServletB");
+        ctx.addServletMappingDecoded("/bug54178ServletB", "bug54178ServletB");
 
         tomcat.start();
 
@@ -1844,7 +1844,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         Wrapper w = tomcat.addServlet("", "async", new Bug59219Servlet());
         w.setAsyncSupported(true);
-        ctx.addServletMapping("/async", "async");
+        ctx.addServletMappingDecoded("/async", "async");
 
         tomcat.start();
 
@@ -1907,13 +1907,13 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Wrapper wrapper = Tomcat.addServlet(ctx, "nonAsyncServlet",
                 nonAsyncServlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/target", "nonAsyncServlet");
+        ctx.addServletMappingDecoded("/target", "nonAsyncServlet");
 
         DispatchingGenericServlet forbiddenDispatchingServlet = new DispatchingGenericServlet();
         Wrapper wrapper1 = Tomcat.addServlet(ctx,
                 "forbiddenDispatchingServlet", forbiddenDispatchingServlet);
         wrapper1.setAsyncSupported(true);
-        ctx.addServletMapping("/forbiddenDispatchingServlet",
+        ctx.addServletMappingDecoded("/forbiddenDispatchingServlet",
                 "forbiddenDispatchingServlet");
 
         tomcat.start();
@@ -1997,7 +1997,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         Wrapper w = Tomcat.addServlet(ctx, "AsyncISEServlet", servlet);
         w.setAsyncSupported(true);
-        ctx.addServletMapping("/test", "AsyncISEServlet");
+        ctx.addServletMappingDecoded("/test", "AsyncISEServlet");
 
         tomcat.start();
 
@@ -2133,13 +2133,13 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         DispatchingGenericServlet dispatch = new DispatchingGenericServlet();
         Wrapper wrapper = Tomcat.addServlet(ctx, "dispatch", dispatch);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/dispatch", "dispatch");
+        ctx.addServletMappingDecoded("/dispatch", "dispatch");
 
         CustomGenericServlet customGeneric = new CustomGenericServlet();
         Wrapper wrapper2 = Tomcat.addServlet(ctx, "customGeneric",
                 customGeneric);
         wrapper2.setAsyncSupported(true);
-        ctx.addServletMapping("/target", "customGeneric");
+        ctx.addServletMappingDecoded("/target", "customGeneric");
 
         tomcat.start();
     }
@@ -2175,16 +2175,16 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Servlet stage1 = new DispatchingServletTracking("/stage2", true);
         Wrapper wrapper1 = Tomcat.addServlet(ctx, "stage1", stage1);
         wrapper1.setAsyncSupported(true);
-        ctx.addServletMapping("/stage1", "stage1");
+        ctx.addServletMappingDecoded("/stage1", "stage1");
 
         Servlet stage2 = new DispatchingServletTracking("/stage3", false);
         Wrapper wrapper2 = Tomcat.addServlet(ctx, "stage2", stage2);
         wrapper2.setAsyncSupported(true);
-        ctx.addServletMapping("/stage2", "stage2");
+        ctx.addServletMappingDecoded("/stage2", "stage2");
 
         Servlet stage3 = new NonAsyncServlet();
         Tomcat.addServlet(ctx, "stage3", stage3);
-        ctx.addServletMapping("/stage3", "stage3");
+        ctx.addServletMappingDecoded("/stage3", "stage3");
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -2235,7 +2235,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Servlet servlet = new AsyncRequestUriServlet();
         Wrapper wrapper1 = Tomcat.addServlet(ctx, "bug57559", servlet);
         wrapper1.setAsyncSupported(true);
-        ctx.addServletMapping("/", "bug57559");
+        ctx.addServletMappingDecoded("/", "bug57559");
 
         tomcat.start();
 
@@ -2275,17 +2275,17 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         NonAsyncServlet nonAsyncServlet = new NonAsyncServlet();
         Tomcat.addServlet(ctx, "nonAsyncServlet", nonAsyncServlet);
-        ctx.addServletMapping("/target", "nonAsyncServlet");
+        ctx.addServletMappingDecoded("/target", "nonAsyncServlet");
 
         AsyncStashServlet asyncStashServlet = new AsyncStashServlet();
         Wrapper w1 = Tomcat.addServlet(ctx, "asyncStashServlet", asyncStashServlet);
         w1.setAsyncSupported(true);
-        ctx.addServletMapping("/asyncStashServlet", "asyncStashServlet");
+        ctx.addServletMappingDecoded("/asyncStashServlet", "asyncStashServlet");
 
         AsyncRetrieveServlet asyncRetrieveServlet = new AsyncRetrieveServlet();
         Wrapper w2 = Tomcat.addServlet(ctx, "asyncRetrieveServlet", asyncRetrieveServlet);
         w2.setAsyncSupported(true);
-        ctx.addServletMapping("/asyncRetrieveServlet", "asyncRetrieveServlet");
+        ctx.addServletMappingDecoded("/asyncRetrieveServlet", "asyncRetrieveServlet");
 
         tomcat.start();
 
@@ -2378,8 +2378,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
                 .setAsyncSupported(true);
         CustomErrorServlet customErrorServlet = new CustomErrorServlet();
         Tomcat.addServlet(context, "customErrorServlet", customErrorServlet);
-        context.addServletMapping("/timeout", "timeout");
-        context.addServletMapping("/error", "customErrorServlet");
+        context.addServletMappingDecoded("/timeout", "timeout");
+        context.addServletMappingDecoded("/error", "customErrorServlet");
         ErrorPage errorPage = new ErrorPage();
         errorPage.setLocation("/error");
         context.addErrorPage(errorPage);
@@ -2507,7 +2507,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         } else {
             Tomcat.addServlet(context, "space", new ForwardDispatchUrlWithSpacesServlet());
         }
-        context.addServletMapping("/space/*", "space");
+        context.addServletMappingDecoded("/space/*", "space");
         tomcat.start();
 
         ByteChunk responseBody = new ByteChunk();

==================================================
TestStandardContextAliases.java
index 5dce60a136..2ccc2b5e4f 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -138,13 +138,13 @@ public class TestStandardContext extends TomcatBaseTest {
         context.addFilterDef(filterDef);
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName("Bug46243");
-        filterMap.addURLPattern("*");
+        filterMap.addURLPatternDecoded("*");
         context.addFilterMap(filterMap);
 
         // Add a test servlet so there is something to generate a response if
         // it works (although it shouldn't)
         Tomcat.addServlet(context, "Bug46243", new HelloWorldServlet());
-        context.addServletMapping("/", "Bug46243");
+        context.addServletMappingDecoded("/", "Bug46243");
     }
 
     private static final class Bug46243Client extends SimpleHttpClient {
@@ -735,8 +735,8 @@ public class TestStandardContext extends TomcatBaseTest {
             // to set our own MultipartConfigElement.
             w.setMultipartConfigElement(new MultipartConfigElement(""));
 
-            context.addServletMapping("/regular", "regular");
-            context.addServletMapping("/multipart", "multipart");
+            context.addServletMappingDecoded("/regular", "regular");
+            context.addServletMappingDecoded("/multipart", "multipart");
             tomcat.start();
 
             setPort(tomcat.getConnector().getLocalPort());

==================================================
TestStandardContextResources.java
index 0454500851..15bb020339 100644
--- a/test/org/apache/catalina/core/TestStandardContextAliases.java
+++ b/test/org/apache/catalina/core/TestStandardContextAliases.java
@@ -56,7 +56,7 @@ public class TestStandardContextAliases extends TomcatBaseTest {
 
 
         Tomcat.addServlet(ctx, "test", new TestServlet());
-        ctx.addServletMapping("/", "test");
+        ctx.addServletMappingDecoded("/", "test");
 
         tomcat.start();
 

==================================================
TestStandardContextValve.java
index bd003d3d78..e8ad7c9bf3 100644
--- a/test/org/apache/catalina/core/TestStandardContextResources.java
+++ b/test/org/apache/catalina/core/TestStandardContextResources.java
@@ -138,7 +138,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
                 appDir.getAbsolutePath(), absoluteOrderConfig);
 
         Tomcat.addServlet(ctx, "getresource", new GetResourceServlet());
-        ctx.addServletMapping("/getresource", "getresource");
+        ctx.addServletMappingDecoded("/getresource", "getresource");
 
         tomcat.start();
         assertPageContains("/test/getresource?path=/resourceF.jsp",
@@ -159,7 +159,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         ctx = (StandardContext) tomcat.addWebapp(null, "/test",
                 appDir.getAbsolutePath(), absoluteOrderConfig);
         Tomcat.addServlet(ctx, "getresource", new GetResourceServlet());
-        ctx.addServletMapping("/getresource", "getresource");
+        ctx.addServletMappingDecoded("/getresource", "getresource");
 
         tomcat.getHost().start();
 
@@ -214,7 +214,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
         skipTldsForResourceJars(ctx);
 
         Tomcat.addServlet(ctx, "getresource", new GetResourceServlet());
-        ctx.addServletMapping("/getresource", "getresource");
+        ctx.addServletMappingDecoded("/getresource", "getresource");
 
         tomcat.start();
 

==================================================
TestStandardHostValve.java
index c0445a4283..02b2b77864 100644
--- a/test/org/apache/catalina/core/TestStandardContextValve.java
+++ b/test/org/apache/catalina/core/TestStandardContextValve.java
@@ -50,7 +50,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
 
         //Add the error page
         Tomcat.addServlet(ctx, "errorPage", new Bug51653ErrorPage(trace));
-        ctx.addServletMapping("/error", "errorPage");
+        ctx.addServletMappingDecoded("/error", "errorPage");
         // And the handling for 404 responses
         ErrorPage errorPage = new ErrorPage();
         errorPage.setErrorCode(Response.SC_NOT_FOUND);
@@ -96,11 +96,11 @@ public class TestStandardContextValve extends TomcatBaseTest {
 
         // Add the page that generates the error
         Tomcat.addServlet(ctx, "test", new Bug51653ErrorTrigger());
-        ctx.addServletMapping("/test", "test");
+        ctx.addServletMappingDecoded("/test", "test");
 
         // Add the error page
         Tomcat.addServlet(ctx, "errorPage", new Bug51653ErrorPage(trace));
-        ctx.addServletMapping("/error", "errorPage");
+        ctx.addServletMappingDecoded("/error", "errorPage");
         // And the handling for 404 responses
         ErrorPage errorPage = new ErrorPage();
         errorPage.setErrorCode(Response.SC_NOT_FOUND);

==================================================
TestStandardWrapper.java
index 6d2f70e303..b660879453 100644
--- a/test/org/apache/catalina/core/TestStandardHostValve.java
+++ b/test/org/apache/catalina/core/TestStandardHostValve.java
@@ -49,11 +49,11 @@ public class TestStandardHostValve extends TomcatBaseTest {
 
         // Add the error page
         Tomcat.addServlet(ctx, "error", new ErrorServlet());
-        ctx.addServletMapping("/error", "error");
+        ctx.addServletMappingDecoded("/error", "error");
 
         // Add the error handling page
         Tomcat.addServlet(ctx, "report", new ReportServlet());
-        ctx.addServletMapping("/report/*", "report");
+        ctx.addServletMappingDecoded("/report/*", "report");
 
         // And the handling for 500 responses
         ErrorPage errorPage500 = new ErrorPage();
@@ -99,7 +99,7 @@ public class TestStandardHostValve extends TomcatBaseTest {
 
         // Add the error page
         Tomcat.addServlet(ctx, "error", new ErrorServlet());
-        ctx.addServletMapping("/error", "error");
+        ctx.addServletMappingDecoded("/error", "error");
 
         final List<String> result = new ArrayList<>();
 

==================================================
TestSwallowAbortedUploads.java
index af88885341..c8356b4dea 100644
--- a/test/org/apache/catalina/core/TestStandardWrapper.java
+++ b/test/org/apache/catalina/core/TestStandardWrapper.java
@@ -280,7 +280,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
 
         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servletClassName);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         if (useRole) {
             TesterMapRealm realm = new TesterMapRealm();
@@ -428,7 +428,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "Bug51445", new Bug51445Servlet());
-        ctx.addServletMapping("/", "Bug51445");
+        ctx.addServletMappingDecoded("/", "Bug51445");
 
         tomcat.start();
 
@@ -474,7 +474,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
         wrapper.setServletName("Bug51445");
         wrapper.setServletClass(Bug51445Servlet.class.getName());
         ctx.addChild(wrapper);
-        ctx.addServletMapping("/", "Bug51445");
+        ctx.addServletMappingDecoded("/", "Bug51445");
 
         tomcat.start();
 

==================================================
TestAddCharSetFilter.java
index 9fb83a8b97..5082942655 100644
--- a/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
+++ b/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
@@ -252,7 +252,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
             } else {
                 w.setMultipartConfigElement(new MultipartConfigElement(""));
             }
-            context.addServletMapping(URI, servletName);
+            context.addServletMappingDecoded(URI, servletName);
             context.setSwallowAbortedUploads(swallow);
 
             tomcat.start();
@@ -360,7 +360,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
             servlet.setStatus(status);
             Tomcat.addServlet(context, servletName,
                               servlet);
-            context.addServletMapping(URI, servletName);
+            context.addServletMappingDecoded(URI, servletName);
             context.setSwallowAbortedUploads(swallow);
 
             tomcat.start();

==================================================
TestExpiresFilter.java
index 3c6e6d2ee9..90a9cd1046 100644
--- a/test/org/apache/catalina/filters/TestAddCharSetFilter.java
+++ b/test/org/apache/catalina/filters/TestAddCharSetFilter.java
@@ -97,7 +97,7 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         // Add the Servlet
         CharsetServlet servlet = new CharsetServlet(mode);
         Tomcat.addServlet(ctx, "servlet", servlet);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         // Add the Filter
         FilterDef filterDef = new FilterDef();

==================================================
TestRemoteIpFilter.java
index 73d2d1db5a..dddd902f1f 100644
--- a/test/org/apache/catalina/filters/TestExpiresFilter.java
+++ b/test/org/apache/catalina/filters/TestExpiresFilter.java
@@ -75,7 +75,7 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName(ExpiresFilter.class.getName());
-        filterMap.addURLPattern("*");
+        filterMap.addURLPatternDecoded("*");
 
         tomcat.start();
         try {
@@ -396,11 +396,11 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName(ExpiresFilter.class.getName());
-        filterMap.addURLPattern("*");
+        filterMap.addURLPatternDecoded("*");
         root.addFilterMap(filterMap);
 
         Tomcat.addServlet(root, servlet.getClass().getName(), servlet);
-        root.addServletMapping("/test", servlet.getClass().getName());
+        root.addServletMappingDecoded("/test", servlet.getClass().getName());
 
         tomcat.start();
 

==================================================
TestRestCsrfPreventionFilter2.java
index a36136b56d..36eb7867d5 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -516,7 +516,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName(RemoteIpFilter.class.getName());
-        filterMap.addURLPattern("*");
+        filterMap.addURLPatternDecoded("*");
         root.addFilterMap(filterMap);
 
         getTomcatInstance().start();
@@ -583,13 +583,13 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName(RemoteIpFilter.class.getName());
-        filterMap.addURLPattern("*");
+        filterMap.addURLPatternDecoded("*");
         root.addFilterMap(filterMap);
 
         MockHttpServlet mockServlet = new MockHttpServlet();
 
         Tomcat.addServlet(root, mockServlet.getClass().getName(), mockServlet);
-        root.addServletMapping("/test", mockServlet.getClass().getName());
+        root.addServletMappingDecoded("/test", mockServlet.getClass().getName());
 
         getTomcatInstance().start();
 

==================================================
TestReplicatedContext.java
index 8792202624..5b311802a7 100644
--- a/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter2.java
@@ -291,7 +291,7 @@ public class TestRestCsrfPreventionFilter2 extends TomcatBaseTest {
         context.setSessionTimeout(SHORT_SESSION_TIMEOUT_MINS);
 
         Tomcat.addServlet(context, SERVLET_NAME, new TesterServlet());
-        context.addServletMapping(URI_PROTECTED, SERVLET_NAME);
+        context.addServletMappingDecoded(URI_PROTECTED, SERVLET_NAME);
 
         FilterDef filterDef = new FilterDef();
         filterDef.setFilterName(FILTER_NAME);
@@ -301,11 +301,11 @@ public class TestRestCsrfPreventionFilter2 extends TomcatBaseTest {
 
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName(FILTER_NAME);
-        filterMap.addURLPattern(URI_CSRF_PROTECTED);
+        filterMap.addURLPatternDecoded(URI_CSRF_PROTECTED);
         context.addFilterMap(filterMap);
 
         SecurityCollection collection = new SecurityCollection();
-        collection.addPattern(URI_PROTECTED);
+        collection.addPatternDecoded(URI_PROTECTED);
 
         SecurityConstraint sc = new SecurityConstraint();
         sc.addAuthRole(ROLE);

==================================================
TestWebappClassLoaderExecutorMemoryLeak.java
index 9c1a858341..6113563d20 100644
--- a/test/org/apache/catalina/ha/context/TestReplicatedContext.java
+++ b/test/org/apache/catalina/ha/context/TestReplicatedContext.java
@@ -49,7 +49,7 @@ public class TestReplicatedContext extends TomcatBaseTest {
         Context context = tomcat.addWebapp(host, "", root.getAbsolutePath());
 
         Tomcat.addServlet(context, "test", new AccessContextServlet());
-        context.addServletMapping("/access", "test");
+        context.addServletMappingDecoded("/access", "test");
 
         tomcat.start();
 

==================================================
TestWebappClassLoaderMemoryLeak.java
index a67813a2e8..cc04aaae47 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
@@ -50,7 +50,7 @@ public class TestWebappClassLoaderExecutorMemoryLeak extends TomcatBaseTest {
 
         ExecutorServlet executorServlet = new ExecutorServlet();
         Tomcat.addServlet(ctx, "taskServlet", executorServlet);
-        ctx.addServletMapping("/", "taskServlet");
+        ctx.addServletMappingDecoded("/", "taskServlet");
 
         tomcat.start();
 

==================================================
TestWebappClassLoaderThreadLocalMemoryLeak.java
index b2a88a6e19..8af95f0a0b 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java
@@ -48,7 +48,7 @@ public class TestWebappClassLoaderMemoryLeak extends TomcatBaseTest {
         }
 
         Tomcat.addServlet(ctx, "taskServlet", new TaskServlet());
-        ctx.addServletMapping("/", "taskServlet");
+        ctx.addServletMappingDecoded("/", "taskServlet");
 
         tomcat.start();
 

==================================================
TestMapperWebapps.java
index ad2a57cbbe..0c573e9c8d 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
@@ -68,7 +68,7 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "leakServlet1",
                 "org.apache.tomcat.unittest.TesterLeakingServlet1");
-        ctx.addServletMapping("/leak1", "leakServlet1");
+        ctx.addServletMappingDecoded("/leak1", "leakServlet1");
 
         tomcat.start();
 
@@ -124,7 +124,7 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "leakServlet2",
                 "org.apache.tomcat.unittest.TesterLeakingServlet2");
-        ctx.addServletMapping("/leak2", "leakServlet2");
+        ctx.addServletMappingDecoded("/leak2", "leakServlet2");
 
         tomcat.start();
 

==================================================
TestNonBlockingAPI.java
index eefce522ff..c128aaf334 100644
--- a/test/org/apache/catalina/mapper/TestMapperWebapps.java
+++ b/test/org/apache/catalina/mapper/TestMapperWebapps.java
@@ -54,7 +54,7 @@ public class TestMapperWebapps extends TomcatBaseTest{
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "Bug53356", new Bug53356Servlet());
-        ctx.addServletMapping("", "Bug53356");
+        ctx.addServletMappingDecoded("", "Bug53356");
 
         tomcat.start();
 
@@ -245,8 +245,8 @@ public class TestMapperWebapps extends TomcatBaseTest{
             // Add a security constraint
             SecurityConstraint constraint = new SecurityConstraint();
             SecurityCollection collection = new SecurityCollection();
-            collection.addPattern("/welcome-files/*");
-            collection.addPattern("/welcome-files");
+            collection.addPatternDecoded("/welcome-files/*");
+            collection.addPatternDecoded("/welcome-files");
             constraint.addCollection(collection);
             constraint.addAuthRole("foo");
             root.addConstraint(constraint);

==================================================
TestRealmBase.java
index 35a7af4c1a..af33a9e914 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -100,7 +100,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         NBReadServlet servlet = new NBReadServlet(ignoreIsReady);
         String servletName = NBReadServlet.class.getName();
         Tomcat.addServlet(ctx, servletName, servlet);
-        ctx.addServletMapping("/", servletName);
+        ctx.addServletMappingDecoded("/", servletName);
 
         tomcat.start();
 
@@ -130,7 +130,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         NBWriteServlet servlet = new NBWriteServlet();
         String servletName = NBWriteServlet.class.getName();
         Tomcat.addServlet(ctx, servletName, servlet);
-        ctx.addServletMapping("/", servletName);
+        ctx.addServletMappingDecoded("/", servletName);
         tomcat.getConnector().setProperty("socket.txBufSize", "1024");
         tomcat.start();
 
@@ -286,7 +286,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         NBWriteServlet servlet = new NBWriteServlet();
         String servletName = NBWriteServlet.class.getName();
         Tomcat.addServlet(ctx, servletName, servlet);
-        ctx.addServletMapping("/", servletName);
+        ctx.addServletMappingDecoded("/", servletName);
         tomcat.getConnector().setProperty("socket.txBufSize", "1024");
         tomcat.start();
 
@@ -369,7 +369,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         NBReadWriteServlet servlet = new NBReadWriteServlet();
         String servletName = NBReadWriteServlet.class.getName();
         Tomcat.addServlet(ctx, servletName, servlet);
-        ctx.addServletMapping("/", servletName);
+        ctx.addServletMappingDecoded("/", servletName);
 
         tomcat.start();
 

==================================================
TestDefaultServlet.java
index f7ed830be8..43b5d7714b 100644
--- a/test/org/apache/catalina/realm/TestRealmBase.java
+++ b/test/org/apache/catalina/realm/TestRealmBase.java
@@ -660,7 +660,7 @@ public class TestRealmBase {
         deleteConstraint.addAuthRole(ROLE1);
         SecurityCollection deleteCollection = new SecurityCollection();
         deleteCollection.addMethod("DELETE");
-        deleteCollection.addPattern("/*");
+        deleteCollection.addPatternDecoded("/*");
         deleteConstraint.addCollection(deleteCollection);
 
         TesterMapRealm mapRealm = new TesterMapRealm();

==================================================
TestWebdavServlet.java
index aec7c452bc..f05831e65c 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -112,7 +112,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
         Wrapper defaultServlet = Tomcat.addServlet(ctxt, "default",
                 "org.apache.catalina.servlets.DefaultServlet");
         defaultServlet.addInitParameter("gzip", "true");
-        ctxt.addServletMapping("/", "default");
+        ctxt.addServletMappingDecoded("/", "default");
 
         ctxt.addMimeMapping("html", "text/html");
 
@@ -168,7 +168,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 "org.apache.catalina.servlets.DefaultServlet");
         defaultServlet.addInitParameter("precompressed", "true");
 
-        ctxt.addServletMapping("/", "default");
+        ctxt.addServletMappingDecoded("/", "default");
         ctxt.addMimeMapping("html", "text/html");
 
         tomcat.start();
@@ -223,7 +223,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 DefaultServlet.class.getName());
         defaultServlet.addInitParameter("precompressed", "gzip=.gz,custom=.br");
 
-        ctxt.addServletMapping("/", "default");
+        ctxt.addServletMappingDecoded("/", "default");
         ctxt.addMimeMapping("html", "text/html");
 
         tomcat.start();
@@ -278,7 +278,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 DefaultServlet.class.getName());
         defaultServlet.addInitParameter("precompressed", "br=.br,gzip=.gz");
 
-        ctxt.addServletMapping("/", "default");
+        ctxt.addServletMappingDecoded("/", "default");
         ctxt.addMimeMapping("html", "text/html");
 
         tomcat.start();
@@ -332,7 +332,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
                 DefaultServlet.class.getName());
         defaultServlet.addInitParameter("precompressed", "true");
 
-        ctxt.addServletMapping("/", "default");
+        ctxt.addServletMappingDecoded("/", "default");
         ctxt.addMimeMapping("html", "text/html");
 
         tomcat.start();
@@ -388,9 +388,9 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
         // Override the default servlet with our own mappings
         Tomcat.addServlet(ctx, "default2", new DefaultServlet());
-        ctx.addServletMapping("/", "default2");
-        ctx.addServletMapping("/servlets/*", "default2");
-        ctx.addServletMapping("/static/*", "default2");
+        ctx.addServletMappingDecoded("/", "default2");
+        ctx.addServletMappingDecoded("/servlets/*", "default2");
+        ctx.addServletMappingDecoded("/static/*", "default2");
 
         tomcat.start();
 

==================================================
TestPersistentManagerIntegration.java
index 746252333d..775e84a477 100644
--- a/test/org/apache/catalina/servlets/TestWebdavServlet.java
+++ b/test/org/apache/catalina/servlets/TestWebdavServlet.java
@@ -49,7 +49,7 @@ public class TestWebdavServlet extends TomcatBaseTest {
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
 
         Tomcat.addServlet(ctx, "webdav", new WebdavServlet());
-        ctx.addServletMapping("/*", "webdav");
+        ctx.addServletMappingDecoded("/*", "webdav");
 
         tomcat.start();
 
@@ -93,7 +93,7 @@ public class TestWebdavServlet extends TomcatBaseTest {
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
 
         Tomcat.addServlet(ctx, "webdav", new WebdavServlet());
-        ctx.addServletMapping("/webdav/*", "webdav");
+        ctx.addServletMappingDecoded("/webdav/*", "webdav");
         ctx.addApplicationListener(WsContextListener.class.getName());
 
         tomcat.start();

==================================================
TestStandardSessionIntegration.java
index f7473496e0..3efd7497d1 100644
--- a/test/org/apache/catalina/session/TestPersistentManagerIntegration.java
+++ b/test/org/apache/catalina/session/TestPersistentManagerIntegration.java
@@ -102,7 +102,7 @@ public class TestPersistentManagerIntegration extends TomcatBaseTest {
         ctx.setDistributable(true);
 
         Tomcat.addServlet(ctx, "DummyServlet", new DummyServlet());
-        ctx.addServletMapping("/dummy", "DummyServlet");
+        ctx.addServletMappingDecoded("/dummy", "DummyServlet");
 
         PersistentManager manager = new PersistentManager();
         TesterStore store = new TesterStore();
@@ -134,7 +134,7 @@ public class TestPersistentManagerIntegration extends TomcatBaseTest {
         ctx.setDistributable(true);
 
         Tomcat.addServlet(ctx, "DummyServlet", new DummyServlet());
-        ctx.addServletMapping("/dummy", "DummyServlet");
+        ctx.addServletMappingDecoded("/dummy", "DummyServlet");
 
         PersistentManager manager = new PersistentManager();
         TesterStore store = new TesterStore();
@@ -166,7 +166,7 @@ public class TestPersistentManagerIntegration extends TomcatBaseTest {
         ctx.setDistributable(true);
 
         Tomcat.addServlet(ctx, "DummyServlet", new DummyServlet());
-        ctx.addServletMapping("/dummy", "DummyServlet");
+        ctx.addServletMappingDecoded("/dummy", "DummyServlet");
 
         PersistentManager manager = new PersistentManager();
         TesterStore store = new TesterStore();

==================================================
TestContextConfig.java
index 2fef47cd36..553cc48b14 100644
--- a/test/org/apache/catalina/session/TestStandardSessionIntegration.java
+++ b/test/org/apache/catalina/session/TestStandardSessionIntegration.java
@@ -57,7 +57,7 @@ public class TestStandardSessionIntegration extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "bug56578", new Bug56578Servlet());
-        ctx.addServletMapping("/bug56578", "bug56578");
+        ctx.addServletMappingDecoded("/bug56578", "bug56578");
 
         if (useClustering) {
             tomcat.getEngine().setCluster(new SimpleTcpCluster());

==================================================
TestContextConfigAnnotation.java
index 0e460040e3..e3dae05b24 100644
--- a/test/org/apache/catalina/startup/TestContextConfig.java
+++ b/test/org/apache/catalina/startup/TestContextConfig.java
@@ -112,7 +112,7 @@ public class TestContextConfig extends TomcatBaseTest {
 
         Tomcat.addServlet(context, "TestServlet",
                 "org.apache.catalina.startup.TesterServletWithLifeCycleMethods");
-        context.addServletMapping("/testServlet", "TestServlet");
+        context.addServletMappingDecoded("/testServlet", "TestServlet");
 
         tomcat.enableNaming();
 
@@ -131,7 +131,7 @@ public class TestContextConfig extends TomcatBaseTest {
 
         Tomcat.addServlet(context, "TestServlet",
                 "org.apache.catalina.startup.TesterServletWithAnnotations");
-        context.addServletMapping("/testServlet", "TestServlet");
+        context.addServletMappingDecoded("/testServlet", "TestServlet");
 
         tomcat.enableNaming();
 

==================================================
TestTomcat.java
index bc89ff8236..a88f383966 100644
--- a/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
+++ b/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
@@ -218,7 +218,7 @@ public class TestContextConfigAnnotation {
 
         webxml.addFilter(filterDef);
         FilterMap filterMap = new FilterMap();
-        filterMap.addURLPattern("/param1");
+        filterMap.addURLPatternDecoded("/param1");
         filterMap.setFilterName("paramFilter");
         webxml.addFilterMapping(filterMap);
 

==================================================
TestTomcatClassLoader.java
index c38a73764b..e3e92cc465 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -190,7 +190,7 @@ public class TestTomcat extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "myServlet", new HelloWorld());
-        ctx.addServletMapping("/", "myServlet");
+        ctx.addServletMappingDecoded("/", "myServlet");
 
         tomcat.start();
 
@@ -241,7 +241,7 @@ public class TestTomcat extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "myServlet", new HelloWorldSession());
-        ctx.addServletMapping("/", "myServlet");
+        ctx.addServletMappingDecoded("/", "myServlet");
 
         tomcat.start();
 
@@ -280,7 +280,7 @@ public class TestTomcat extends TomcatBaseTest {
         ctx.getNamingResources().addEnvironment(environment);
 
         Tomcat.addServlet(ctx, "jndiServlet", new HelloWorldJndi());
-        ctx.addServletMapping("/", "jndiServlet");
+        ctx.addServletMappingDecoded("/", "jndiServlet");
 
         tomcat.start();
 
@@ -314,7 +314,7 @@ public class TestTomcat extends TomcatBaseTest {
         ctx.getNamingResources().addResourceLink(link);
 
         Tomcat.addServlet(ctx, "jndiServlet", new HelloWorldJndi());
-        ctx.addServletMapping("/", "jndiServlet");
+        ctx.addServletMappingDecoded("/", "jndiServlet");
 
         tomcat.start();
 
@@ -339,7 +339,7 @@ public class TestTomcat extends TomcatBaseTest {
         ctx.addApplicationListener(WsContextListener.class.getName());
 
         Tomcat.addServlet(ctx, "testGetResource", new GetResource());
-        ctx.addServletMapping("/testGetResource", "testGetResource");
+        ctx.addServletMappingDecoded("/testGetResource", "testGetResource");
 
         tomcat.start();
 
@@ -379,7 +379,7 @@ public class TestTomcat extends TomcatBaseTest {
 
         InitCount initCount = new InitCount();
         Tomcat.addServlet(ctx, "initCount", initCount);
-        ctx.addServletMapping("/", "initCount");
+        ctx.addServletMappingDecoded("/", "initCount");
 
         tomcat.start();
 

==================================================
TestErrorReportValve.java
index 9f3b5fdbba..2cec79c7c3 100644
--- a/test/org/apache/catalina/startup/TestTomcatClassLoader.java
+++ b/test/org/apache/catalina/startup/TestTomcatClassLoader.java
@@ -44,7 +44,7 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "ClassLoaderReport", new ClassLoaderReport(null));
-        ctx.addServletMapping("/", "ClassLoaderReport");
+        ctx.addServletMappingDecoded("/", "ClassLoaderReport");
 
         tomcat.start();
 
@@ -67,7 +67,7 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "ClassLoaderReport", new ClassLoaderReport(cl));
-        ctx.addServletMapping("/", "ClassLoaderReport");
+        ctx.addServletMappingDecoded("/", "ClassLoaderReport");
 
         tomcat.start();
 

==================================================
TestIoTimeouts.java
index b3150b4a3e..e15aef98cc 100644
--- a/test/org/apache/catalina/valves/TestErrorReportValve.java
+++ b/test/org/apache/catalina/valves/TestErrorReportValve.java
@@ -44,7 +44,7 @@ public class TestErrorReportValve extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "errorServlet", new ErrorServlet());
-        ctx.addServletMapping("/", "errorServlet");
+        ctx.addServletMappingDecoded("/", "errorServlet");
 
         tomcat.start();
 
@@ -77,7 +77,7 @@ public class TestErrorReportValve extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "bug54220", new Bug54220Servlet(false));
-        ctx.addServletMapping("/", "bug54220");
+        ctx.addServletMappingDecoded("/", "bug54220");
 
         tomcat.start();
 
@@ -97,7 +97,7 @@ public class TestErrorReportValve extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "bug54220", new Bug54220Servlet(true));
-        ctx.addServletMapping("/", "bug54220");
+        ctx.addServletMappingDecoded("/", "bug54220");
 
         tomcat.start();
 
@@ -141,7 +141,7 @@ public class TestErrorReportValve extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "bug54536", new Bug54536Servlet());
-        ctx.addServletMapping("/", "bug54536");
+        ctx.addServletMappingDecoded("/", "bug54536");
 
         tomcat.start();
 
@@ -180,7 +180,7 @@ public class TestErrorReportValve extends TomcatBaseTest {
         Wrapper wrapper =
             Tomcat.addServlet(ctx, "bug56042Servlet", bug56042Servlet);
         wrapper.setAsyncSupported(true);
-        ctx.addServletMapping("/bug56042Servlet", "bug56042Servlet");
+        ctx.addServletMappingDecoded("/bug56042Servlet", "bug56042Servlet");
 
         tomcat.start();
 

==================================================
TestAbstractAjpProcessor.java
index 418a5c73ee..a400bc4c61 100644
--- a/test/org/apache/coyote/TestIoTimeouts.java
+++ b/test/org/apache/coyote/TestIoTimeouts.java
@@ -93,7 +93,7 @@ public class TestIoTimeouts extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Wrapper w = Tomcat.addServlet(root, "Test", new NonBlockingEchoServlet());
             w.setAsyncSupported(true);
-            root.addServletMapping("/test", "Test");
+            root.addServletMappingDecoded("/test", "Test");
 
             try {
                 tomcat.start();

==================================================
TestHttp11InputBuffer.java
index 6f2a438a98..4cf8426eb4 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -82,7 +82,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "snoop", new SnoopServlet());
-        ctx.addServletMapping("/", "snoop");
+        ctx.addServletMappingDecoded("/", "snoop");
 
         SimpleAjpClient ajpClient = new SimpleAjpClient(ajpPacketSize);
 
@@ -497,7 +497,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "helloWorld", new HelloWorldServlet());
-        ctx.addServletMapping("/", "helloWorld");
+        ctx.addServletMappingDecoded("/", "helloWorld");
 
         SimpleAjpClient ajpClient = new SimpleAjpClient();
 
@@ -557,7 +557,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "helloWorld", new HelloWorldServlet());
-        ctx.addServletMapping("/", "helloWorld");
+        ctx.addServletMappingDecoded("/", "helloWorld");
 
         SimpleAjpClient ajpClient = new SimpleAjpClient();
 
@@ -662,7 +662,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "bug55453", new Tester304WithBodyServlet());
-        ctx.addServletMapping("/", "bug55453");
+        ctx.addServletMappingDecoded("/", "bug55453");
 
         tomcat.start();
 
@@ -719,7 +719,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
 
         ReadBodyServlet servlet = new ReadBodyServlet(callAvailable);
         Tomcat.addServlet(ctx, "ReadBody", servlet);
-        ctx.addServletMapping("/", "ReadBody");
+        ctx.addServletMappingDecoded("/", "ReadBody");
 
         tomcat.start();
 
@@ -776,7 +776,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
 
         FixedResponseSizeServlet servlet = new FixedResponseSizeServlet(15000, 16000);
         Tomcat.addServlet(ctx, "FixedResponseSizeServlet", servlet);
-        ctx.addServletMapping("/", "FixedResponseSizeServlet");
+        ctx.addServletMappingDecoded("/", "FixedResponseSizeServlet");
 
         tomcat.start();
 

==================================================
TestHttp11OutputBuffer.java
index 6d4e244b6a..60a3129d1d 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
@@ -65,7 +65,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug48839", new Bug48839Servlet());
-            root.addServletMapping("/test", "Bug48839");
+            root.addServletMappingDecoded("/test", "Bug48839");
 
             try {
                 tomcat.start();
@@ -240,7 +240,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug51557",
                     new Bug51557Servlet(headerName));
-            root.addServletMapping("/test", "Bug51557");
+            root.addServletMappingDecoded("/test", "Bug51557");
 
             try {
                 tomcat.start();
@@ -372,7 +372,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "test", new TesterServlet());
-            root.addServletMapping("/test", "test");
+            root.addServletMappingDecoded("/test", "test");
 
             try {
                 tomcat.start();
@@ -440,7 +440,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug54947", new TesterServlet());
-            root.addServletMapping("/test", "Bug54947");
+            root.addServletMappingDecoded("/test", "Bug54947");
 
             try {
                 tomcat.start();
@@ -508,7 +508,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Bug59089", new TesterServlet());
-            root.addServletMapping("/test", "Bug59089");
+            root.addServletMappingDecoded("/test", "Bug59089");
 
             try {
                 tomcat.start();

==================================================
TestHttp11Processor.java
index 6af691d693..3e2a652f7c 100644
--- a/test/org/apache/coyote/http11/TestHttp11OutputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11OutputBuffer.java
@@ -34,7 +34,7 @@ public class TestHttp11OutputBuffer extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "echo", new EchoBodyServlet());
-        ctx.addServletMapping("/echo", "echo");
+        ctx.addServletMappingDecoded("/echo", "echo");
 
         tomcat.start();
 

==================================================
TestChunkedInputFilter.java
index c9833a4011..5bc1726978 100644
--- a/test/org/apache/coyote/http11/TestHttp11Processor.java
+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java
@@ -79,7 +79,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         // Add protected servlet
         Tomcat.addServlet(ctx, "ChunkedResponseWithErrorServlet",
                 new ResponseWithErrorServlet(true));
-        ctx.addServletMapping("/*", "ChunkedResponseWithErrorServlet");
+        ctx.addServletMappingDecoded("/*", "ChunkedResponseWithErrorServlet");
 
         tomcat.start();
 
@@ -333,7 +333,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         // Add protected servlet
         Tomcat.addServlet(ctx, "TesterServlet", new TesterServlet());
-        ctx.addServletMapping("/foo", "TesterServlet");
+        ctx.addServletMappingDecoded("/foo", "TesterServlet");
 
         tomcat.start();
 
@@ -393,7 +393,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "NoContentLengthFlushingServlet",
                 new NoContentLengthFlushingServlet());
-        ctx.addServletMapping("/test", "NoContentLengthFlushingServlet");
+        ctx.addServletMappingDecoded("/test", "NoContentLengthFlushingServlet");
 
         tomcat.start();
 
@@ -420,7 +420,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "NoContentLengthConnectionCloseFlushingServlet",
                 new NoContentLengthConnectionCloseFlushingServlet());
-        ctx.addServletMapping("/test",
+        ctx.addServletMappingDecoded("/test",
                 "NoContentLengthConnectionCloseFlushingServlet");
 
         tomcat.start();
@@ -460,7 +460,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "LargeHeaderServlet",
                 new LargeHeaderServlet(flush));
-        ctx.addServletMapping("/test", "LargeHeaderServlet");
+        ctx.addServletMappingDecoded("/test", "LargeHeaderServlet");
 
         tomcat.start();
 
@@ -495,7 +495,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "async", new Bug55772Servlet());
-        ctx.addServletMapping("/*", "async");
+        ctx.addServletMappingDecoded("/*", "async");
 
         tomcat.start();
 
@@ -568,10 +568,10 @@ public class TestHttp11Processor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "echo", new EchoBodyServlet());
-        ctx.addServletMapping("/echo", "echo");
+        ctx.addServletMappingDecoded("/echo", "echo");
 
         SecurityCollection collection = new SecurityCollection("All", "");
-        collection.addPattern("/*");
+        collection.addPatternDecoded("/*");
         SecurityConstraint constraint = new SecurityConstraint();
         constraint.addAuthRole("Any");
         constraint.addCollection(collection);
@@ -733,7 +733,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         Context root = tomcat.addContext("", null);
         Wrapper w = Tomcat.addServlet(root, "Bug57621", new Bug57621Servlet(delayAsyncThread));
         w.setAsyncSupported(true);
-        root.addServletMapping("/test", "Bug57621");
+        root.addServletMappingDecoded("/test", "Bug57621");
 
         tomcat.start();
 
@@ -846,7 +846,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "Bug59310", new Bug59310Servlet());
-        ctx.addServletMapping("/test", "Bug59310");
+        ctx.addServletMappingDecoded("/test", "Bug59310");
 
         tomcat.start();
 
@@ -893,7 +893,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         DispatchingServlet servlet = new DispatchingServlet();
         Wrapper w = Tomcat.addServlet(ctx, "Test", servlet);
         w.setAsyncSupported(true);
-        ctx.addServletMapping("/test", "Test");
+        ctx.addServletMappingDecoded("/test", "Test");
 
         tomcat.start();
 

==================================================
TestUpgrade.java
index e23d7d00cb..09d9917de8 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -109,7 +109,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
 
         EchoHeaderServlet servlet = new EchoHeaderServlet(expectPass);
         Tomcat.addServlet(ctx, "servlet", servlet);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -171,7 +171,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new EchoHeaderServlet(false));
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         // Limit the size of the trailing header
         tomcat.getConnector().setProperty("maxTrailerSize", "10");
@@ -234,7 +234,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new EchoHeaderServlet(ok));
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -282,7 +282,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "servlet", new EchoHeaderServlet(true));
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 
@@ -382,7 +382,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
 
         BodyReadServlet servlet = new BodyReadServlet(expectPass, readLimit);
         Tomcat.addServlet(ctx, "servlet", servlet);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 

==================================================
TestUpgradeInternalHandler.java
index 5ef718d958..1e542c0d08 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgrade.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgrade.java
@@ -161,7 +161,7 @@ public class TestUpgrade extends TomcatBaseTest {
 
         UpgradeServlet servlet = new UpgradeServlet(upgradeHandlerClass);
         Tomcat.addServlet(ctx, "servlet", servlet);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 

==================================================
Http2TestBase.java
index dc75a0413e..6e26fde996 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
@@ -91,7 +91,7 @@ public class TestUpgradeInternalHandler extends TomcatBaseTest {
 
         UpgradeServlet servlet = new UpgradeServlet(upgradeHandlerClass);
         Tomcat.addServlet(ctx, "servlet", servlet);
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         tomcat.start();
 

==================================================
TestPageContextImpl.java
index 9f9ca3667e..4702986d7c 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -394,11 +394,11 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
         Context ctxt = tomcat.addContext("", null);
         Tomcat.addServlet(ctxt, "empty", new EmptyServlet());
-        ctxt.addServletMapping("/empty", "empty");
+        ctxt.addServletMappingDecoded("/empty", "empty");
         Tomcat.addServlet(ctxt, "simple", new SimpleServlet());
-        ctxt.addServletMapping("/simple", "simple");
+        ctxt.addServletMappingDecoded("/simple", "simple");
         Tomcat.addServlet(ctxt, "large", new LargeServlet());
-        ctxt.addServletMapping("/large", "large");
+        ctxt.addServletMappingDecoded("/large", "large");
 
         tomcat.start();
     }

==================================================
TestJspServlet.java
index 577cb827e3..6226cd26a8 100644
--- a/test/org/apache/jasper/runtime/TestPageContextImpl.java
+++ b/test/org/apache/jasper/runtime/TestPageContextImpl.java
@@ -65,7 +65,7 @@ public class TestPageContextImpl extends TomcatBaseTest {
 
         // Add the Servlet
         Tomcat.addServlet(ctx, "bug56010", new Bug56010());
-        ctx.addServletMapping("/bug56010", "bug56010");
+        ctx.addServletMappingDecoded("/bug56010", "bug56010");
 
         tomcat.start();
 

==================================================
TestNamingContext.java
index 22da44bf0e..6abe6bf661 100644
--- a/test/org/apache/jasper/servlet/TestJspServlet.java
+++ b/test/org/apache/jasper/servlet/TestJspServlet.java
@@ -46,7 +46,7 @@ public class TestJspServlet  extends TomcatBaseTest {
 
         // Create a servlet that always throws an exception for a PUT request
         Tomcat.addServlet(context, "Bug56568Servlet", new Bug56568aServlet());
-        context.addServletMapping("/bug56568", "Bug56568Servlet");
+        context.addServletMappingDecoded("/bug56568", "Bug56568Servlet");
 
         // Configure a JSP page to handle the 500 error response
         // The JSP page will see the same method as the original request (PUT)

==================================================
TesterContext.java
index 8382b4782a..a0b5a420f6 100644
--- a/test/org/apache/naming/resources/TestNamingContext.java
+++ b/test/org/apache/naming/resources/TestNamingContext.java
@@ -74,7 +74,7 @@ public class TestNamingContext extends TomcatBaseTest {
         // Map the test Servlet
         Bug49994Servlet bug49994Servlet = new Bug49994Servlet();
         Tomcat.addServlet(ctx, "bug49994Servlet", bug49994Servlet);
-        ctx.addServletMapping("/", "bug49994Servlet");
+        ctx.addServletMappingDecoded("/", "bug49994Servlet");
 
         tomcat.start();
 
@@ -134,7 +134,7 @@ public class TestNamingContext extends TomcatBaseTest {
         // Map the test Servlet
         Bug23950Servlet bug23950Servlet = new Bug23950Servlet();
         Tomcat.addServlet(ctx, "bug23950Servlet", bug23950Servlet);
-        ctx.addServletMapping("/", "bug23950Servlet");
+        ctx.addServletMappingDecoded("/", "bug23950Servlet");
 
         tomcat.start();
 
@@ -186,7 +186,7 @@ public class TestNamingContext extends TomcatBaseTest {
         // Map the test Servlet
         Bug50351Servlet bug50351Servlet = new Bug50351Servlet();
         Tomcat.addServlet(ctx, "bug50351Servlet", bug50351Servlet);
-        ctx.addServletMapping("/", "bug50351Servlet");
+        ctx.addServletMappingDecoded("/", "bug50351Servlet");
 
         tomcat.start();
 
@@ -239,7 +239,7 @@ public class TestNamingContext extends TomcatBaseTest {
         // Map the test Servlet
         Bug51744Servlet bug51744Servlet = new Bug51744Servlet();
         Tomcat.addServlet(ctx, "bug51744Servlet", bug51744Servlet);
-        ctx.addServletMapping("/", "bug51744Servlet");
+        ctx.addServletMappingDecoded("/", "bug51744Servlet");
 
         tomcat.start();
 
@@ -302,7 +302,7 @@ public class TestNamingContext extends TomcatBaseTest {
         // Map the test Servlet
         Bug52830Servlet bug52830Servlet = new Bug52830Servlet();
         Tomcat.addServlet(ctx, "bug52830Servlet", bug52830Servlet);
-        ctx.addServletMapping("/", "bug52830Servlet");
+        ctx.addServletMappingDecoded("/", "bug52830Servlet");
 
         tomcat.start();
 

==================================================
TestJspPropertyGroupDescriptorImpl.java
index a4fd2d685b..b7bce3296e 100644
--- a/test/org/apache/tomcat/unittest/TesterContext.java
+++ b/test/org/apache/tomcat/unittest/TesterContext.java
@@ -755,7 +755,7 @@ public class TesterContext implements Context {
     }
 
     @Override
-    public void addServletMapping(String pattern, String name,
+    public void addServletMappingDecoded(String pattern, String name,
             boolean jspWildcard) {
         // NO-OP
     }

==================================================
TestSecurityConstraint.java
index 4266ed8896..15ce498a8e 100644
--- a/test/org/apache/tomcat/util/descriptor/web/TestJspPropertyGroupDescriptorImpl.java
+++ b/test/org/apache/tomcat/util/descriptor/web/TestJspPropertyGroupDescriptorImpl.java
@@ -42,7 +42,7 @@ public class TestJspPropertyGroupDescriptorImpl {
     @Test
     public void testUrlPatternsAreIsolated() {
         JspPropertyGroup jpg = new JspPropertyGroup();
-        jpg.addUrlPattern("pattern");
+        jpg.addUrlPatternDecoded("pattern");
         JspPropertyGroupDescriptorImpl descriptor = new JspPropertyGroupDescriptorImpl(jpg);
         descriptor.getUrlPatterns().clear();
         Assert.assertEquals(1, descriptor.getUrlPatterns().size());

==================================================
TestWebXml.java
index f6951e5317..499996f851 100644
--- a/test/org/apache/tomcat/util/descriptor/web/TestSecurityConstraint.java
+++ b/test/org/apache/tomcat/util/descriptor/web/TestSecurityConstraint.java
@@ -55,7 +55,7 @@ public class TestSecurityConstraint {
         GET_ONLY.addAuthRole(ROLE1);
         SecurityCollection scGetOnly = new SecurityCollection();
         scGetOnly.addMethod("GET");
-        scGetOnly.addPattern(URL_PATTERN);
+        scGetOnly.addPatternDecoded(URL_PATTERN);
         scGetOnly.setName("GET-ONLY");
         GET_ONLY.addCollection(scGetOnly);
 
@@ -63,7 +63,7 @@ public class TestSecurityConstraint {
         POST_ONLY.addAuthRole(ROLE1);
         SecurityCollection scPostOnly = new SecurityCollection();
         scPostOnly.addMethod("POST");
-        scPostOnly.addPattern(URL_PATTERN);
+        scPostOnly.addPatternDecoded(URL_PATTERN);
         scPostOnly.setName("POST_ONLY");
         POST_ONLY.addCollection(scPostOnly);
 
@@ -71,7 +71,7 @@ public class TestSecurityConstraint {
         GET_OMIT.addAuthRole(ROLE1);
         SecurityCollection scGetOmit = new SecurityCollection();
         scGetOmit.addOmittedMethod("GET");
-        scGetOmit.addPattern(URL_PATTERN);
+        scGetOmit.addPatternDecoded(URL_PATTERN);
         scGetOmit.setName("GET_OMIT");
         GET_OMIT.addCollection(scGetOmit);
 
@@ -79,7 +79,7 @@ public class TestSecurityConstraint {
         POST_OMIT.addAuthRole(ROLE1);
         SecurityCollection scPostOmit = new SecurityCollection();
         scPostOmit.addOmittedMethod("POST");
-        scPostOmit.addPattern(URL_PATTERN);
+        scPostOmit.addPatternDecoded(URL_PATTERN);
         scPostOmit.setName("POST_OMIT");
         POST_OMIT.addCollection(scPostOmit);
     }

==================================================
CookiesBaseTest.java
index 68749ad36a..29ddc24992 100644
--- a/test/org/apache/tomcat/util/descriptor/web/TestWebXml.java
+++ b/test/org/apache/tomcat/util/descriptor/web/TestWebXml.java
@@ -246,7 +246,7 @@ public class TestWebXml {
 
         FilterMap filterMap = new FilterMap();
         filterMap.setFilterName("Dummy");
-        filterMap.addURLPattern("/*");
+        filterMap.addURLPatternDecoded("/*");
         webXmlDefaultFragment.addFilterMapping(filterMap);
 
         // Listeners were added in 2.3 so should be excluded in 2.2
@@ -291,7 +291,7 @@ public class TestWebXml {
         sc.setDisplayName("dummy");
         SecurityCollection collection = new SecurityCollection();
         collection.setName("dummy");
-        collection.addPattern("/*");
+        collection.addPatternDecoded("/*");
         collection.addMethod("DELETE");
         sc.addCollection(collection);
         webXmlDefaultFragment.addSecurityConstraint(sc);

==================================================
TestBug49158.java
index 00f5bf7552..df40e3dd08 100644
--- a/test/org/apache/tomcat/util/http/CookiesBaseTest.java
+++ b/test/org/apache/tomcat/util/http/CookiesBaseTest.java
@@ -73,21 +73,21 @@ public abstract class CookiesBaseTest extends TomcatBaseTest {
         ctx.setCookieProcessor(new LegacyCookieProcessor());
 
         Tomcat.addServlet(ctx, "invalid", new CookieServlet("na;me", "value"));
-        ctx.addServletMapping("/invalid", "invalid");
+        ctx.addServletMappingDecoded("/invalid", "invalid");
         Tomcat.addServlet(ctx, "null", new CookieServlet(null, "value"));
-        ctx.addServletMapping("/null", "null");
+        ctx.addServletMappingDecoded("/null", "null");
         Tomcat.addServlet(ctx, "blank", new CookieServlet("", "value"));
-        ctx.addServletMapping("/blank", "blank");
+        ctx.addServletMappingDecoded("/blank", "blank");
         Tomcat.addServlet(ctx, "invalidFwd",
                 new CookieServlet("na/me", "value"));
-        ctx.addServletMapping("/invalidFwd", "invalidFwd");
+        ctx.addServletMappingDecoded("/invalidFwd", "invalidFwd");
         Tomcat.addServlet(ctx, "invalidStrict",
                 new CookieServlet("$name", "value"));
-        ctx.addServletMapping("/invalidStrict", "invalidStrict");
+        ctx.addServletMappingDecoded("/invalidStrict", "invalidStrict");
         Tomcat.addServlet(ctx, "valid", new CookieServlet("name", "value"));
-        ctx.addServletMapping("/valid", "valid");
+        ctx.addServletMappingDecoded("/valid", "valid");
         Tomcat.addServlet(ctx, "switch", new CookieServlet("name", "val?ue"));
-        ctx.addServletMapping("/switch", "switch");
+        ctx.addServletMappingDecoded("/switch", "switch");
 
     }
 

==================================================
TestCookieParsing.java
index 18580326c4..cb97d5e335 100644
--- a/test/org/apache/tomcat/util/http/TestBug49158.java
+++ b/test/org/apache/tomcat/util/http/TestBug49158.java
@@ -64,7 +64,7 @@ public class TestBug49158 extends CookiesBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, path, new TestBug49158Servlet());
-        ctx.addServletMapping("/"+path, path);
+        ctx.addServletMappingDecoded("/"+path, path);
     }
 
     public static class TestBug49158Servlet extends HttpServlet {

==================================================
TestCookieProcessorGenerationHttp.java
index e884d6430d..0d8a212a52 100644
--- a/test/org/apache/tomcat/util/http/TestCookieParsing.java
+++ b/test/org/apache/tomcat/util/http/TestCookieParsing.java
@@ -255,7 +255,7 @@ public class TestCookieParsing extends TomcatBaseTest {
             } else {
                 Tomcat.addServlet(root, "Cookies", new EchoCookies());
             }
-            root.addServletMapping("/test", "Cookies");
+            root.addServletMappingDecoded("/test", "Cookies");
 
             tomcat.start();
             // Open connection

==================================================
TestMimeHeadersIntegration.java
index 6e667f4639..3e89def15e 100644
--- a/test/org/apache/tomcat/util/http/TestCookieProcessorGenerationHttp.java
+++ b/test/org/apache/tomcat/util/http/TestCookieProcessorGenerationHttp.java
@@ -45,7 +45,7 @@ public class TestCookieProcessorGenerationHttp extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.setCookieProcessor(new Rfc6265CookieProcessor());
         Tomcat.addServlet(ctx, "test", new CookieServlet("\u0120"));
-        ctx.addServletMapping("/test", "test");
+        ctx.addServletMappingDecoded("/test", "test");
         tomcat.start();
 
         Map<String,List<String>> headers = new HashMap<>();

==================================================
TestSsl.java
index 8d16a92206..0275ba4ea9 100644
--- a/test/org/apache/tomcat/util/http/TestMimeHeadersIntegration.java
+++ b/test/org/apache/tomcat/util/http/TestMimeHeadersIntegration.java
@@ -56,7 +56,7 @@ public class TestMimeHeadersIntegration extends TomcatBaseTest {
                 res.getWriter().write("OK");
             }
         });
-        ctx.addServletMapping("/", "servlet");
+        ctx.addServletMappingDecoded("/", "servlet");
 
         alv = new HeaderCountLogValve();
         tomcat.getHost().getPipeline().addValve(alv);

==================================================
TesterSupport.java
index 11b02d96bf..3d41294d74 100644
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -101,7 +101,7 @@ public class TestSsl extends TomcatBaseTest {
         Wrapper w =
             Tomcat.addServlet(root, "tester", new TesterServlet());
         w.setAsyncSupported(true);
-        root.addServletMapping("/", "tester");
+        root.addServletMappingDecoded("/", "tester");
 
         TesterSupport.initSsl(tomcat);
 

==================================================
TestConnectionLimit.java
index 9a7c839b78..862d1a079e 100644
--- a/test/org/apache/tomcat/util/net/TesterSupport.java
+++ b/test/org/apache/tomcat/util/net/TesterSupport.java
@@ -175,12 +175,12 @@ public final class TesterSupport {
         Context ctx = tomcat.addContext("", null);
 
         Tomcat.addServlet(ctx, "simple", new SimpleServlet());
-        ctx.addServletMapping("/unprotected", "simple");
-        ctx.addServletMapping("/protected", "simple");
+        ctx.addServletMappingDecoded("/unprotected", "simple");
+        ctx.addServletMappingDecoded("/protected", "simple");
 
         // Security constraints
         SecurityCollection collection = new SecurityCollection();
-        collection.addPattern("/protected");
+        collection.addPatternDecoded("/protected");
         SecurityConstraint sc = new SecurityConstraint();
         sc.addAuthRole(ROLE);
         sc.addCollection(collection);

==================================================
TestWebSocketFrameClient.java
index 699d92e4e1..85c2a0f8a2 100644
--- a/test/org/apache/tomcat/websocket/TestConnectionLimit.java
+++ b/test/org/apache/tomcat/websocket/TestConnectionLimit.java
@@ -48,7 +48,7 @@ public class TestConnectionLimit extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.getConnector().setAttribute("maxConnections", "-1");
 

==================================================
TestWebSocketFrameClientSSL.java
index fc76428745..02954b84c7 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -45,7 +45,7 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterFirehoseServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 
@@ -87,11 +87,11 @@ public class TestWebSocketFrameClient extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
         Context ctx2 = tomcat.addContext("/foo", null);
         ctx2.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx2, "default", new DefaultServlet());
-        ctx2.addServletMapping("/", "default");
+        ctx2.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 

==================================================
TestWsPingPongMessages.java
index 5468923201..1bd4588d6f 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
@@ -47,7 +47,7 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterFirehoseServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         TesterSupport.initSsl(tomcat);
 
@@ -94,7 +94,7 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterFirehoseServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         TesterSupport.initSsl(tomcat);
 

==================================================
TestWsRemoteEndpoint.java
index 466c9f09fa..32af691d77 100644
--- a/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
+++ b/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
@@ -50,7 +50,7 @@ public class TestWsPingPongMessages extends WebSocketBaseTest {
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
 
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 

==================================================
TestWsSubprotocols.java
index 9584e0e75d..8c01d1af7b 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -95,7 +95,7 @@ public class TestWsRemoteEndpoint extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -208,7 +208,7 @@ public class TestWsRemoteEndpoint extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 

==================================================
TestWsWebSocketContainer.java
index afdbf9647f..d6b848e4eb 100644
--- a/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
+++ b/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
@@ -49,7 +49,7 @@ public class TestWsSubprotocols extends WebSocketBaseTest {
         ctx.addApplicationListener(Config.class.getName());
 
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 

==================================================
TestEncodingDecoding.java
index 405cf77c9e..becd4d1122 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -88,7 +88,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 
@@ -210,7 +210,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -318,7 +318,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(BlockingConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -407,7 +407,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ConstantTxConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -622,7 +622,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 
@@ -679,7 +679,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 
@@ -737,7 +737,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 
@@ -823,7 +823,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         TesterSupport.initSsl(tomcat);
 
@@ -906,7 +906,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 
@@ -990,7 +990,7 @@ public class TestWsWebSocketContainer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 

==================================================
TestPojoEndpointBase.java
index 14132fb02f..47f8cd1761 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
@@ -77,7 +77,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ProgramaticServerEndpointConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 
@@ -126,7 +126,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -186,7 +186,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -235,7 +235,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -283,7 +283,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -764,7 +764,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ProgramaticServerEndpointConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 

==================================================
TestPojoMethodMapping.java
index f245c04fe2..b98cdcdb3a 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestPojoEndpointBase.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestPojoEndpointBase.java
@@ -56,7 +56,7 @@ public class TestPojoEndpointBase extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
@@ -87,7 +87,7 @@ public class TestPojoEndpointBase extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();

==================================================
TestClassLoader.java
index 59571a95b7..e4ebc18272 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java
@@ -59,7 +59,7 @@ public class TestPojoMethodMapping extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();

==================================================
TestClose.java
index c9b24c3a41..b182ef6bfc 100644
--- a/test/org/apache/tomcat/websocket/server/TestClassLoader.java
+++ b/test/org/apache/tomcat/websocket/server/TestClassLoader.java
@@ -57,7 +57,7 @@ public class TestClassLoader extends WebSocketBaseTest {
         ctx.addApplicationListener(Config.class.getName());
 
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 

==================================================
TestCloseBug58624.java
index cadf16cbf6..97ce4c9262 100644
--- a/test/org/apache/tomcat/websocket/server/TestClose.java
+++ b/test/org/apache/tomcat/websocket/server/TestClose.java
@@ -341,7 +341,7 @@ public class TestClose extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(configClass.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
         return tomcat;

==================================================
TestShutdown.java
index 6bcdadd00d..bafe15e1b0 100644
--- a/test/org/apache/tomcat/websocket/server/TestCloseBug58624.java
+++ b/test/org/apache/tomcat/websocket/server/TestCloseBug58624.java
@@ -50,7 +50,7 @@ public class TestCloseBug58624 extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(Bug58624ServerConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
 

==================================================
TestWsRemoteEndpointImplServer.java
index e628121e49..6cd7f18d74 100644
--- a/test/org/apache/tomcat/websocket/server/TestShutdown.java
+++ b/test/org/apache/tomcat/websocket/server/TestShutdown.java
@@ -54,7 +54,7 @@ public class TestShutdown extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(EchoBufferedConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         tomcat.start();
 

==================================================
TestWsServerContainer.java
index ff2c44e80f..77987acd79 100644
--- a/test/org/apache/tomcat/websocket/server/TestWsRemoteEndpointImplServer.java
+++ b/test/org/apache/tomcat/websocket/server/TestWsRemoteEndpointImplServer.java
@@ -73,7 +73,7 @@ public class TestWsRemoteEndpointImplServer extends WebSocketBaseTest {
         Context ctx = tomcat.addContext("", null);
         ctx.addApplicationListener(Bug58624Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
+        ctx.addServletMappingDecoded("/", "default");
 
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();

==================================================
