bfabec5ae7ac32d2bb4bd40cf98039c648026857
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51852
==================================================
Mark Emlyn
==================================================
Wed Sep 21 13:33:51 2011 +0000
==================================================
BeanELResolver.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51852
Correct 2 issues in varargs handling
 - Incorrectly constructed varargs arguments (resulting in
ArrayIndexOutOfBoundsExceptions)
 - Incorrectly detected matching varargs methods
Patch (with a test case!) provided by Matt Benson

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1173630 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestBeanELResolverVarargsInvocation.java
index ddaa8e2ccc..dca216f445 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -420,7 +420,8 @@ public class BeanELResolver extends ELResolver {
                     matchingMethod = getMethod(clazz, m);
                     break;
                 }
-                if (m.isVarArgs()) {
+                if (m.isVarArgs() && methodName.equals(m.getName()) && 
+                            paramCount > m.getParameterTypes().length - 2 ) {
                     matchingMethod = getMethod(clazz, m);
                 }
             }
@@ -440,21 +441,21 @@ public class BeanELResolver extends ELResolver {
             if (matchingMethod.isVarArgs()) {
                 int varArgIndex = parameterTypes.length - 1;
                 // First argCount-1 parameters are standard
-                for (int i = 0; (i < varArgIndex - 1); i++) {
+                for (int i = 0; (i < varArgIndex); i++) {
                     parameters[i] = factory.coerceToType(params[i],
                             parameterTypes[i]);
                 }
-                // Last parameter is the varags
+                // Last parameter is the varargs
                 Class<?> varArgClass =
                     parameterTypes[varArgIndex].getComponentType();
+                final Object varargs = Array.newInstance(
+                    varArgClass,
+                    (paramCount - varArgIndex));
                 for (int i = (varArgIndex); i < paramCount; i++) {
-                    Object varargs = Array.newInstance(
-                            parameterTypes[paramCount],
-                            (paramCount - varArgIndex));
-                    Array.set(varargs, i,
+                    Array.set(varargs, i - varArgIndex,
                             factory.coerceToType(params[i], varArgClass));
-                    parameters[varArgIndex] = varargs;
                 }
+                parameters[varArgIndex] = varargs;
             } else {
                 parameters = new Object[parameterTypes.length];
                 for (int i = 0; i < parameterTypes.length; i++) {

==================================================
