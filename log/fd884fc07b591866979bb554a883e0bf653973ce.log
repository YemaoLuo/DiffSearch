fd884fc07b591866979bb554a883e0bf653973ce
==================================================
Don't duplicate storage of maxSavePostSize in the Processor
==================================================
Mark Thomas
==================================================
Wed Dec 14 11:04:34 2016 +0000
==================================================
AbstractHttp11Protocol.java
Don't duplicate storage of maxSavePostSize in the Processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774172 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 6fb9d929d4..f45abbfd22 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -90,12 +90,23 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     // ------------------------------------------------ HTTP specific properties
     // ------------------------------------------ managed in the ProtocolHandler
 
+    private int maxSavePostSize = 4 * 1024;
     /**
-     * Maximum size of the post which will be saved when processing certain
-     * requests, such as a POST.
+     * Return the maximum size of the post which will be saved during FORM or
+     * CLIENT-CERT authentication.
+     *
+     * @return The size in bytes
      */
-    private int maxSavePostSize = 4 * 1024;
     public int getMaxSavePostSize() { return maxSavePostSize; }
+    /**
+     * Set the maximum size of a POST which will be buffered during FORM or
+     * CLIENT-CERT authentication. When a POST is received where the security
+     * constraints require a client certificate, the POST body needs to be
+     * buffered while an SSL handshake takes place to obtain the certificate. A
+     * similar buffering is required during FDORM auth.
+     *
+     * @param msps The maximum size POST body to buffer in bytes
+     */
     public void setMaxSavePostSize(int valueI) { maxSavePostSize = valueI; }
 
 
@@ -694,7 +705,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         processor.setCompression(getCompression());
         processor.setNoCompressionUserAgents(getNoCompressionUserAgents());
         processor.setCompressableMimeTypes(getCompressableMimeTypes());
-        processor.setMaxSavePostSize(getMaxSavePostSize());
         processor.setServer(getServer());
         processor.setServerRemoveAppProvidedValues(getServerRemoveAppProvidedValues());
         return processor;

==================================================
