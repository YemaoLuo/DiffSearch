16f9ca9b3528d764e7680a9606a99e40d9e650d6
==================================================
Improve logging of unhandled servlet exceptions by including the context name. For JasperExceptions, the JSP snippet will be logged (if enabled). Previously this was not logged and only displayed in the error page seen by the user.
==================================================
Mark Emlyn
==================================================
Wed Jul 7 23:33:28 2010 +0000
==================================================
Globals.java
Improve logging of unhandled servlet exceptions by including the context name. For JasperExceptions, the JSP snippet will be logged (if enabled). Previously this was not logged and only displayed in the error page seen by the user.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@961535 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardWrapperValve.java
index b1a794d5d1..9a993b07e0 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -226,7 +226,8 @@ standardWrapper.notContext=Parent container of a Wrapper must be a Context
 standardWrapper.notFound=Servlet {0} is not available
 standardWrapper.notServlet=Class {0} is not a Servlet
 standardWrapper.releaseFilters=Release filters exception for servlet {0}
-standardWrapper.serviceException=Servlet.service() for servlet {0} threw exception
+standardWrapper.serviceException=Servlet.service() for servlet [{0}] in context with path [{1}] threw exception
+standardWrapper.serviceExceptionRoot=Servlet.service() for servlet [{0}] in context with path [{1}] threw exception [{2}] with root cause
 standardWrapper.statusHeader=HTTP Status {0} - {1}
 standardWrapper.statusTitle=Tomcat Error Report
 standardWrapper.unavailable=Marking servlet {0} as unavailable

==================================================
Constants.java
index e847dc8847..9c655835ad 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -253,14 +253,16 @@ final class StandardWrapperValve
             exception(request, response, e);
         } catch (IOException e) {
         	request.removeAttribute(Globals.JSP_FILE_ATTR);
-            container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                             wrapper.getName()), e);
+            container.getLogger().error(sm.getString(
+                    "standardWrapper.serviceException", wrapper.getName(),
+                    context.getName()), e);
             throwable = e;
             exception(request, response, e);
         } catch (UnavailableException e) {
         	request.removeAttribute(Globals.JSP_FILE_ATTR);
-            container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                             wrapper.getName()), e);
+            container.getLogger().error(sm.getString(
+                    "standardWrapper.serviceException", wrapper.getName(),
+                    context.getName()), e);
             //            throwable = e;
             //            exception(request, response, e);
             wrapper.unavailable(e);
@@ -281,15 +283,18 @@ final class StandardWrapperValve
         	request.removeAttribute(Globals.JSP_FILE_ATTR);
             Throwable rootCause = StandardWrapper.getRootCause(e);
             if (!(rootCause instanceof ClientAbortException)) {
-                container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                                 wrapper.getName()), rootCause);
+                container.getLogger().error(sm.getString(
+                        "standardWrapper.serviceExceptionRoot",
+                        wrapper.getName(), context.getName(), e.getMessage()),
+                        rootCause);
             }
             throwable = e;
             exception(request, response, e);
         } catch (Throwable e) {
             request.removeAttribute(Globals.JSP_FILE_ATTR);
-            container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                             wrapper.getName()), e);
+            container.getLogger().error(sm.getString(
+                    "standardWrapper.serviceException", wrapper.getName(),
+                    context.getName()), e);
             throwable = e;
             exception(request, response, e);
         }
@@ -437,29 +442,34 @@ final class StandardWrapperValve
             exception(request, response, e);
         } catch (IOException e) {
             request.removeAttribute(Globals.JSP_FILE_ATTR);
-            container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                             wrapper.getName()), e);
+            container.getLogger().error(sm.getString(
+                    "standardWrapper.serviceException", wrapper.getName(),
+                    context.getName()), e);
             throwable = e;
             exception(request, response, e);
         } catch (UnavailableException e) {
             request.removeAttribute(Globals.JSP_FILE_ATTR);
-            container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                             wrapper.getName()), e);
+            container.getLogger().error(sm.getString(
+                    "standardWrapper.serviceException", wrapper.getName(),
+                    context.getName()), e);
             // Do not save exception in 'throwable', because we
             // do not want to do exception(request, response, e) processing
         } catch (ServletException e) {
             request.removeAttribute(Globals.JSP_FILE_ATTR);
             Throwable rootCause = StandardWrapper.getRootCause(e);
             if (!(rootCause instanceof ClientAbortException)) {
-                container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                                 wrapper.getName()), rootCause);
+                container.getLogger().error(sm.getString(
+                        "standardWrapper.serviceExceptionRoot",
+                        wrapper.getName(), context.getName(), e.getMessage()),
+                        rootCause);
             }
             throwable = e;
             exception(request, response, e);
         } catch (Throwable e) {
             request.removeAttribute(Globals.JSP_FILE_ATTR);
-            container.getLogger().error(sm.getString("standardWrapper.serviceException",
-                             wrapper.getName()), e);
+            container.getLogger().error(sm.getString(
+                    "standardWrapper.serviceException", wrapper.getName(),
+                    context.getName()), e);
             throwable = e;
             exception(request, response, e);
         }

==================================================
JavacErrorDetail.java
index e1da650722..cea3a50c96 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -96,6 +96,11 @@ public class Constants {
      */
     public static final int MAX_POOL_SIZE = 5;
 
+    /**
+     * Platform specific new line sequence.
+     */
+    public static final String NEWLINE = System.getProperty("line.separator");
+
     /**
      * The query parameter that causes the JSP engine to just
      * pregenerated the servlet but not invoke it. 

==================================================
JspServletWrapper.java
index 4042b06978..6c6b96d2f4 100644
--- a/java/org/apache/jasper/compiler/JavacErrorDetail.java
+++ b/java/org/apache/jasper/compiler/JavacErrorDetail.java
@@ -25,6 +25,7 @@ import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.jasper.Constants;
 import org.apache.jasper.JspCompilationContext;
 
 /**
@@ -129,7 +130,7 @@ public class JavacErrorDetail {
                     fragment.append(i+1);
                     fragment.append(": ");
                     fragment.append(jspLines[i]);
-                    fragment.append("\n");
+                    fragment.append(Constants.NEWLINE);
                 }
                 jspExtract = fragment.toString();
     

==================================================
