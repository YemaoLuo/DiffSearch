2dcef8076277946a9d838d851b5e53c38808565e
==================================================
Follow on to r980418
==================================================
Mark Emlyn
==================================================
Thu Jul 29 12:28:40 2010 +0000
==================================================
DeltaManager.java
Follow on to r980418
Need to move registration with context to ManagerBase too

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@980424 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerBase.java
index 087197fd78..e6b8eb7ea0 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -442,31 +442,6 @@ public class DeltaManager extends ClusterManagerBase{
         this.cluster = cluster;
     }
 
-    /**
-     * Set the Container with which this Manager has been associated. If it is a
-     * Context (the usual case), listen for changes to the session timeout
-     * property.
-     * 
-     * @param container
-     *            The associated Container
-     */
-    @Override
-    public void setContainer(Container container) {
-        // De-register from the old Container (if any)
-        if ((this.container != null) && (this.container instanceof Context))
-            ((Context) this.container).removePropertyChangeListener(this);
-
-        // Default processing provided by our superclass
-        super.setContainer(container);
-
-        // Register with the new Container (if any)
-        if ((this.container != null) && (this.container instanceof Context)) {
-            setMaxInactiveInterval(((Context) this.container).getSessionTimeout() * 60);
-            ((Context) this.container).addPropertyChangeListener(this);
-        }
-
-    }
-    
     // --------------------------------------------------------- Public Methods
 
     /**

==================================================
PersistentManagerBase.java
index c3d20c285d..78299af3b0 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -308,9 +308,21 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      */
     public void setContainer(Container container) {
 
+        // De-register from the old Container (if any)
+        if ((this.container != null) && (this.container instanceof Context))
+            ((Context) this.container).removePropertyChangeListener(this);
+
         Container oldContainer = this.container;
         this.container = container;
         support.firePropertyChange("container", oldContainer, this.container);
+
+        // Register with the new Container (if any)
+        if ((this.container != null) && (this.container instanceof Context)) {
+            setMaxInactiveInterval
+                ( ((Context) this.container).getSessionTimeout()*60 );
+            ((Context) this.container).addPropertyChangeListener(this);
+        }
+
     }
 
 

==================================================
StandardManager.java
index 832ddf2a72..14d1300568 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -25,8 +25,6 @@ import java.security.PrivilegedExceptionAction;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.catalina.Container;
-import org.apache.catalina.Context;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
@@ -298,34 +296,6 @@ public abstract class PersistentManagerBase extends ManagerBase {
     }
 
 
-    /**
-     * Set the Container with which this Manager has been associated. If it is a
-     * Context (the usual case), listen for changes to the session timeout
-     * property.
-     * 
-     * @param container
-     *            The associated Container
-     */
-    @Override
-    public void setContainer(Container container) {
-
-        // De-register from the old Container (if any)
-        if ((this.container != null) && (this.container instanceof Context))
-            ((Context) this.container).removePropertyChangeListener(this);
-
-        // Default processing provided by our superclass
-        super.setContainer(container);
-
-        // Register with the new Container (if any)
-        if ((this.container != null) && (this.container instanceof Context)) {
-            setMaxInactiveInterval
-                ( ((Context) this.container).getSessionTimeout()*60 );
-            ((Context) this.container).addPropertyChangeListener(this);
-        }
-
-    }
-
-
     /**
      * Return descriptive information about this Manager implementation and
      * the corresponding version number, in the format

==================================================
