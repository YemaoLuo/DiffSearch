1c34391f154610723d437ec37ad055ecf415a856
==================================================
Extend the reach of the Context attribute xmlValidation to cover XML parsing by Jasper the JSP engine.
==================================================
Mark Emlyn
==================================================
Thu Nov 21 12:59:36 2013 +0000
==================================================
Globals.java
Extend the reach of the Context attribute xmlValidation to cover XML parsing by Jasper the JSP engine.
Fix a TODO and enable validation (if required) for implicit TLD files.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1544165 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 26104e084a..afa3ac32f3 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -14,18 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina;
 
-
 /**
  * Global constants that are applicable to multiple packages within Catalina.
  *
  * @author Craig R. McClanahan
  * @version $Id$
  */
-
 public final class Globals {
 
     /**
@@ -273,4 +269,14 @@ public final class Globals {
      * the tomcat instance installation path
      */
     public static final String CATALINA_BASE_PROP = "catalina.base";
+
+
+    /**
+     * Name of the ServletContext attribute that determines if the JSP engine
+     * should validate *.tld, *.jspx and *.tagx files when parsing them.
+     * <p>
+     * This must be kept in sync with org.apache.japser.Constants
+     */
+    public static final String JASPER_XML_VALIDATION_ATTR =
+            "org.apache.jasper.XML_VALIDATE";
 }

==================================================
Constants.java
index 0ea43abd82..a314447668 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -221,6 +221,12 @@ public class ApplicationContext
     @Override
     public Object getAttribute(String name) {
 
+        // Special handling for XML validation as the context setting must
+        // always override anything that might have been set by an application.
+        if (Globals.JASPER_XML_VALIDATION_ATTR.equals(name) &&
+                context.getXmlValidation()) {
+            return Boolean.TRUE;
+        }
         return (attributes.get(name));
 
     }
@@ -234,6 +240,11 @@ public class ApplicationContext
     public Enumeration<String> getAttributeNames() {
         Set<String> names = new HashSet<>();
         names.addAll(attributes.keySet());
+        // Special handling for XML validation as this attribute will always be
+        // available if validation has been enabled on the context
+        if (context.getXmlValidation()) {
+            names.add(Globals.JASPER_XML_VALIDATION_ATTR);
+        }
         return Collections.enumeration(names);
     }
 

==================================================
ImplicitTagLibraryInfo.java
index 01a935b5b7..5f54238a34 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -150,4 +150,13 @@ public class Constants {
      * the tomcat product installation path
      */
     public static final String CATALINA_HOME_PROP = "catalina.home";
+
+
+    /**
+     * Name of the ServletContext attribute that determines if the XML parsers
+     * used for *.tld, *.jspx and *.tagx files will be validating or not.
+     * <p>
+     * This must be kept in sync with org.apache.catalina.Globals
+     */
+    public static final String XML_VALIDATION_ATTR = "org.apache.jasper.XML_VALIDATE";
 }

==================================================
JspDocumentParser.java
index bd72b63b3d..8b5a21ed06 100644
--- a/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
+++ b/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
@@ -29,6 +29,7 @@ import javax.servlet.jsp.tagext.TagFileInfo;
 import javax.servlet.jsp.tagext.TagInfo;
 import javax.servlet.jsp.tagext.TagLibraryInfo;
 
+import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet;
@@ -118,8 +119,10 @@ class ImplicitTagLibraryInfo extends TagLibraryInfo {
                     try {
                         URL url = ctxt.getResource(path);
                         TldResourcePath resourcePath = new TldResourcePath(url, path);
-                        // TODO enable validation
-                        TldParser parser = new TldParser(true, false, new ImplicitTldRuleSet());
+                        boolean validate = Boolean.parseBoolean(
+                                ctxt.getServletContext().getInitParameter(
+                                        Constants.XML_VALIDATION_ATTR));
+                        TldParser parser = new TldParser(true, validate, new ImplicitTldRuleSet());
                         taglibXml = parser.parse(resourcePath);
                     } catch (IOException | SAXException e) {
                         err.jspError(e);

==================================================
TldCache.java
index a6b19206c3..30137f7f85 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -29,6 +29,7 @@ import javax.servlet.jsp.tagext.TagLibraryInfo;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
+import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.tomcat.util.descriptor.tld.TldResourcePath;
@@ -163,8 +164,13 @@ class JspDocumentParser
                 jspDocParser.isTop = false;
             }
 
+            boolean validate = Boolean.parseBoolean(
+                    pc.getJspCompilationContext().getServletContext().getInitParameter(
+                            Constants.XML_VALIDATION_ATTR));
+            jspDocParser.isValidating = validate;
+
             // Parse the input
-            SAXParser saxParser = getSAXParser(false, jspDocParser);
+            SAXParser saxParser = getSAXParser(validate, jspDocParser);
             InputStream inStream = null;
             try {
                 inStream = JspUtil.getInputStream(path, jar, jspDocParser.ctxt);

==================================================
JasperInitializer.java
index 5a20c5475c..3d3f70ba13 100644
--- a/java/org/apache/jasper/compiler/TldCache.java
+++ b/java/org/apache/jasper/compiler/TldCache.java
@@ -25,8 +25,8 @@ import java.util.Map.Entry;
 
 import javax.servlet.ServletContext;
 
+import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
-import org.apache.jasper.servlet.JasperInitializer;
 import org.apache.tomcat.util.descriptor.tld.TaglibXml;
 import org.apache.tomcat.util.descriptor.tld.TldParser;
 import org.apache.tomcat.util.descriptor.tld.TldResourcePath;
@@ -73,7 +73,7 @@ public class TldCache {
             this.tldResourcePathTaglibXmlMap.put(tldResourcePath, cacheEntry);
         }
         boolean validate = Boolean.parseBoolean(
-                servletContext.getInitParameter(JasperInitializer.VALIDATE));
+                servletContext.getInitParameter(Constants.XML_VALIDATION_ATTR));
         tldParser = new TldParser(true, validate);
     }
 

==================================================
