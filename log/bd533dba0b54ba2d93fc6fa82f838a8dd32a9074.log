bd533dba0b54ba2d93fc6fa82f838a8dd32a9074
==================================================
Code clean-up. Add braces for clarity.
==================================================
Mark Thomas
==================================================
Wed May 26 17:03:32 2021 +0100
==================================================
MemoryUserDatabaseFactory.java
Code clean-up. Add braces for clarity.

Still testing changes to CI


==================================================
Extension.java
index 6d01ac17d2..8c23fed410 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
@@ -106,8 +106,9 @@ public class MemoryUserDatabaseFactory implements ObjectFactory {
         // Return the configured database instance
         database.open();
         // Don't try something we know won't work
-        if (!database.getReadonly())
+        if (!database.getReadonly()) {
             database.save();
+        }
         return database;
 
     }

==================================================
ManifestResource.java
index 172f313b16..b326561917 100644
--- a/java/org/apache/catalina/util/Extension.java
+++ b/java/org/apache/catalina/util/Extension.java
@@ -181,32 +181,38 @@ public final class Extension {
     public boolean isCompatibleWith(Extension required) {
 
         // Extension Name must match
-        if (extensionName == null)
+        if (extensionName == null) {
             return false;
-        if (!extensionName.equals(required.getExtensionName()))
+        }
+        if (!extensionName.equals(required.getExtensionName())) {
             return false;
+        }
 
         // If specified, available specification version must be >= required
         if (required.getSpecificationVersion() != null) {
             if (!isNewer(specificationVersion,
-                         required.getSpecificationVersion()))
+                         required.getSpecificationVersion())) {
                 return false;
+            }
         }
 
         // If specified, Implementation Vendor ID must match
         if (required.getImplementationVendorId() != null) {
-            if (implementationVendorId == null)
+            if (implementationVendorId == null) {
                 return false;
+            }
             if (!implementationVendorId.equals(required
-                    .getImplementationVendorId()))
+                    .getImplementationVendorId())) {
                 return false;
+            }
         }
 
         // If specified, Implementation version must be >= required
         if (required.getImplementationVersion() != null) {
             if (!isNewer(implementationVersion,
-                         required.getImplementationVersion()))
+                         required.getImplementationVersion())) {
                 return false;
+            }
         }
 
         // This available optional package satisfies the requirements
@@ -263,32 +269,39 @@ public final class Extension {
     private boolean isNewer(String first, String second)
         throws NumberFormatException {
 
-        if ((first == null) || (second == null))
+        if ((first == null) || (second == null)) {
             return false;
-        if (first.equals(second))
+        }
+        if (first.equals(second)) {
             return true;
+        }
 
         StringTokenizer fTok = new StringTokenizer(first, ".", true);
         StringTokenizer sTok = new StringTokenizer(second, ".", true);
         int fVersion = 0;
         int sVersion = 0;
         while (fTok.hasMoreTokens() || sTok.hasMoreTokens()) {
-            if (fTok.hasMoreTokens())
+            if (fTok.hasMoreTokens()) {
                 fVersion = Integer.parseInt(fTok.nextToken());
-            else
+            } else {
                 fVersion = 0;
-            if (sTok.hasMoreTokens())
+            }
+            if (sTok.hasMoreTokens()) {
                 sVersion = Integer.parseInt(sTok.nextToken());
-            else
+            } else {
                 sVersion = 0;
-            if (fVersion < sVersion)
+            }
+            if (fVersion < sVersion) {
                 return false;
-            else if (fVersion > sVersion)
+            } else if (fVersion > sVersion) {
                 return true;
-            if (fTok.hasMoreTokens())   // Swallow the periods
+            }
+            if (fTok.hasMoreTokens()) {
                 fTok.nextToken();
-            if (sTok.hasMoreTokens())
+            }
+            if (sTok.hasMoreTokens()) {
                 sTok.nextToken();
+            }
         }
 
         return true;  // Exact match

==================================================
ResourceSet.java
index 2402b511cb..d4c80de825 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -107,7 +107,9 @@ public class ManifestResource {
             return true;
         }
         for (Extension ext : requiredExtensions) {
-            if (!ext.isFulfilled()) return false;
+            if (!ext.isFulfilled()) {
+                return false;
+            }
         }
         return true;
     }
@@ -154,8 +156,9 @@ public class ManifestResource {
 
         Attributes attributes = manifest.getMainAttributes();
         String names = attributes.getValue("Extension-List");
-        if (names == null)
+        if (names == null) {
             return null;
+        }
 
         ArrayList<Extension> extensionList = new ArrayList<>();
         names += " ";
@@ -163,15 +166,17 @@ public class ManifestResource {
         while (true) {
 
             int space = names.indexOf(' ');
-            if (space < 0)
+            if (space < 0) {
                 break;
+            }
             String name = names.substring(0, space).trim();
             names = names.substring(space + 1);
 
             String value =
                 attributes.getValue(name + "-Extension-Name");
-            if (value == null)
+            if (value == null) {
                 continue;
+            }
             Extension extension = new Extension();
             extension.setExtensionName(value);
             extension.setImplementationURL
@@ -201,8 +206,9 @@ public class ManifestResource {
 
         Attributes attributes = manifest.getMainAttributes();
         String name = attributes.getValue("Extension-Name");
-        if (name == null)
+        if (name == null) {
             return null;
+        }
 
         ArrayList<Extension> extensionList = new ArrayList<>();
 

==================================================
ServerInfo.java
index 4e6dc68102..a551d5ac58 100644
--- a/java/org/apache/catalina/util/ResourceSet.java
+++ b/java/org/apache/catalina/util/ResourceSet.java
@@ -138,9 +138,10 @@ public final class ResourceSet<T> extends HashSet<T> {
      */
     @Override
     public boolean add(T o) {
-        if (locked)
+        if (locked) {
             throw new IllegalStateException
               (sm.getString("resourceSet.locked"));
+        }
         return super.add(o);
     }
 
@@ -153,9 +154,10 @@ public final class ResourceSet<T> extends HashSet<T> {
     @Override
     public void clear() {
 
-        if (locked)
+        if (locked) {
             throw new IllegalStateException
               (sm.getString("resourceSet.locked"));
+        }
         super.clear();
 
     }
@@ -171,9 +173,10 @@ public final class ResourceSet<T> extends HashSet<T> {
      */
     @Override
     public boolean remove(Object o) {
-        if (locked)
+        if (locked) {
             throw new IllegalStateException
               (sm.getString("resourceSet.locked"));
+        }
         return super.remove(o);
     }
 

==================================================
StandardSessionIdGenerator.java
index b02c7bbcfb..e5bd10fb29 100644
--- a/java/org/apache/catalina/util/ServerInfo.java
+++ b/java/org/apache/catalina/util/ServerInfo.java
@@ -68,12 +68,15 @@ public class ServerInfo {
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
         }
-        if (info == null || info.equals("Apache Tomcat/@VERSION@"))
+        if (info == null || info.equals("Apache Tomcat/@VERSION@")) {
             info = "Apache Tomcat/10.1.x-dev";
-        if (built == null || built.equals("@VERSION_BUILT@"))
+        }
+        if (built == null || built.equals("@VERSION_BUILT@")) {
             built = "unknown";
-        if (number == null || number.equals("@VERSION_NUMBER@"))
+        }
+        if (number == null || number.equals("@VERSION_NUMBER@")) {
             number = "10.1.x";
+        }
 
         serverInfo = info;
         serverBuilt = built;

==================================================
AbstractProtocol.java
index 437a28a4c0..ea6ea65e9c 100644
--- a/java/org/apache/catalina/util/StandardSessionIdGenerator.java
+++ b/java/org/apache/catalina/util/StandardSessionIdGenerator.java
@@ -37,14 +37,16 @@ public class StandardSessionIdGenerator extends SessionIdGeneratorBase {
             j++) {
                 byte b1 = (byte) ((random[j] & 0xf0) >> 4);
                 byte b2 = (byte) (random[j] & 0x0f);
-                if (b1 < 10)
+                if (b1 < 10) {
                     buffer.append((char) ('0' + b1));
-                else
+                } else {
                     buffer.append((char) ('A' + (b1 - 10)));
-                if (b2 < 10)
+                }
+                if (b2 < 10) {
                     buffer.append((char) ('0' + b2));
-                else
+                } else {
                     buffer.append((char) ('A' + (b2 - 10)));
+                }
                 resultLenBytes++;
             }
         }

==================================================
RequestGroupInfo.java
index 7b8756d28b..a8b65db28d 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -1188,7 +1188,9 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                     size.incrementAndGet();
                 }
             }
-            if (!result) handler.unregister(processor);
+            if (!result) {
+                handler.unregister(processor);
+            }
             return result;
         }
 

==================================================
Response.java
index 057430a59a..e2ca05bd35 100644
--- a/java/org/apache/coyote/RequestGroupInfo.java
+++ b/java/org/apache/coyote/RequestGroupInfo.java
@@ -40,8 +40,9 @@ public class RequestGroupInfo extends BaseModelMBean {
 
     public synchronized void removeRequestProcessor( RequestInfo rp ) {
         if( rp != null ) {
-            if( deadMaxTime < rp.getMaxTime() )
+            if( deadMaxTime < rp.getMaxTime() ) {
                 deadMaxTime = rp.getMaxTime();
+            }
             deadProcessingTime += rp.getProcessingTime();
             deadRequestCount += rp.getRequestCount();
             deadErrorCount += rp.getErrorCount();

==================================================
AjpMessage.java
index f46dfed0df..604415ab06 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -371,8 +371,9 @@ public final class Response {
     public void setHeader(String name, String value) {
         char cc=name.charAt(0);
         if( cc=='C' || cc=='c' ) {
-            if( checkSpecialHeader(name, value) )
-            return;
+            if( checkSpecialHeader(name, value) ) {
+                return;
+            }
         }
         headers.setValue(name).setString( value);
     }
@@ -386,8 +387,9 @@ public final class Response {
     public void addHeader(String name, String value, Charset charset) {
         char cc=name.charAt(0);
         if( cc=='C' || cc=='c' ) {
-            if( checkSpecialHeader(name, value) )
-            return;
+            if( checkSpecialHeader(name, value) ) {
+                return;
+            }
         }
         MessageBytes mb = headers.addValue(name);
         if (charset != null) {

==================================================
AjpProcessor.java
index 9c93a59f00..356030503a 100644
--- a/java/org/apache/coyote/ajp/AjpMessage.java
+++ b/java/org/apache/coyote/ajp/AjpMessage.java
@@ -371,10 +371,12 @@ public class AjpMessage {
             log.debug(prefix + ": " + HexUtils.toHexString(buf) + " " + pos +"/" + (len + 4));
         }
         int max = pos;
-        if (len + 4 > pos)
+        if (len + 4 > pos) {
             max = len+4;
-        if (max > 1000)
+        }
+        if (max > 1000) {
             max = 1000;
+        }
         if (log.isDebugEnabled()) {
             for (int j = 0; j < max; j += 16) {
                 log.debug(hexLine(buf, j, len));

==================================================
Constants.java
index 4341c7b415..b98f78ca13 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1049,8 +1049,9 @@ public class AjpProcessor extends AbstractProcessor {
      */
     @Override
     protected final void finishResponse() throws IOException {
-        if (responseFinished)
+        if (responseFinished) {
             return;
+        }
 
         responseFinished = true;
 

==================================================
Http11InputBuffer.java
index 245404b205..355c7659dc 100644
--- a/java/org/apache/coyote/ajp/Constants.java
+++ b/java/org/apache/coyote/ajp/Constants.java
@@ -232,9 +232,10 @@ public final class Constants {
     public static final int getResponseAjpIndex(String header)
     {
         Integer i = responseTransHash.get(header);
-        if (i == null)
+        if (i == null) {
             return 0;
-        else
+        } else {
             return i.intValue();
+        }
     }
 }

==================================================
Http11OutputBuffer.java
index b5f769f02d..cbf436a9c5 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -218,8 +218,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             filter.setBuffer(inputStreamInputBuffer);
         } else {
             for (int i = 0; i <= lastActiveFilter; i++) {
-                if (activeFilters[i] == filter)
+                if (activeFilters[i] == filter) {
                     return;
+                }
             }
             filter.setBuffer(activeFilters[lastActiveFilter]);
         }
@@ -399,8 +400,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             while (!space) {
                 // Read new bytes if needed
                 if (byteBuffer.position() >= byteBuffer.limit()) {
-                    if (!fill(false)) // request line parsing
+                    if (!fill(false)) {
                         return false;
+                    }
                 }
                 // Spec says method name is a token followed by a single SP but
                 // also be tolerant of multiple SP and/or HT.
@@ -425,8 +427,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             while (space) {
                 // Read new bytes if needed
                 if (byteBuffer.position() >= byteBuffer.limit()) {
-                    if (!fill(false)) // request line parsing
+                    if (!fill(false)) {
                         return false;
+                    }
                 }
                 chr = byteBuffer.get();
                 if (!(chr == Constants.SP || chr == Constants.HT)) {
@@ -448,8 +451,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             while (!space) {
                 // Read new bytes if needed
                 if (byteBuffer.position() >= byteBuffer.limit()) {
-                    if (!fill(false)) // request line parsing
+                    if (!fill(false)) {
                         return false;
+                    }
                 }
                 int pos = byteBuffer.position();
                 prevChr = chr;
@@ -519,8 +523,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             while (space) {
                 // Read new bytes if needed
                 if (byteBuffer.position() >= byteBuffer.limit()) {
-                    if (!fill(false)) // request line parsing
+                    if (!fill(false)) {
                         return false;
+                    }
                 }
                 byte chr = byteBuffer.get();
                 if (!(chr == Constants.SP || chr == Constants.HT)) {
@@ -542,8 +547,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             while (!parsingRequestLineEol) {
                 // Read new bytes if needed
                 if (byteBuffer.position() >= byteBuffer.limit()) {
-                    if (!fill(false)) // request line parsing
+                    if (!fill(false)) {
                         return false;
+                    }
                 }
 
                 int pos = byteBuffer.position();
@@ -1163,8 +1169,9 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             if (byteBuffer.position() >= byteBuffer.limit()) {
                 // The application is reading the HTTP request body which is
                 // always a blocking operation.
-                if (!fill(true))
+                if (!fill(true)) {
                     return -1;
+                }
             }
 
             int length = byteBuffer.remaining();

==================================================
ChunkedInputFilter.java
index 906e8c9b5b..cf666b605d 100644
--- a/java/org/apache/coyote/http11/Http11OutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -163,8 +163,9 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
             filter.setBuffer(outputStreamOutputBuffer);
         } else {
             for (int i = 0; i <= lastActiveFilter; i++) {
-                if (activeFilters[i] == filter)
+                if (activeFilters[i] == filter) {
                     return;
+                }
             }
             filter.setBuffer(activeFilters[lastActiveFilter]);
         }

==================================================
SavedRequestInputFilter.java
index b59eb6e72a..586d070f4d 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -335,8 +335,9 @@ public class ChunkedInputFilter implements InputFilter, ApplicationBufferHandler
         while (!eol) {
 
             if (readChunk == null || readChunk.position() >= readChunk.limit()) {
-                if (readBytes() <= 0)
+                if (readBytes() <= 0) {
                     return false;
+                }
             }
 
             byte chr = readChunk.get(readChunk.position());

==================================================
HPackHuffman.java
index 5229bcbb57..c84fe69955 100644
--- a/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
@@ -47,8 +47,9 @@ public class SavedRequestInputFilter implements InputFilter {
 
     @Override
     public int doRead(ApplicationBufferHandler handler) throws IOException {
-        if(input.getOffset()>= input.getEnd())
+        if(input.getOffset()>= input.getEnd()) {
             return -1;
+        }
 
         ByteBuffer byteBuffer = handler.getByteBuffer();
         byteBuffer.position(byteBuffer.limit()).limit(byteBuffer.capacity());

==================================================
ELArithmetic.java
index cda063c276..1bdc9a0c9e 100644
--- a/java/org/apache/coyote/http2/HPackHuffman.java
+++ b/java/org/apache/coyote/http2/HPackHuffman.java
@@ -555,13 +555,21 @@ public class HPackHuffman {
         public boolean equals(Object o) {
 
 
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
+            if (this == o) {
+                return true;
+            }
+            if (o == null || getClass() != o.getClass()) {
+                return false;
+            }
 
             HuffmanCode that = (HuffmanCode) o;
 
-            if (length != that.length) return false;
-            if (value != that.value) return false;
+            if (length != that.length) {
+                return false;
+            }
+            if (value != that.value) {
+                return false;
+            }
 
             return true;
         }

==================================================
ExpressionBuilder.java
index cff8d6992d..228e6a5198 100644
--- a/java/org/apache/el/lang/ELArithmetic.java
+++ b/java/org/apache/el/lang/ELArithmetic.java
@@ -39,10 +39,12 @@ public abstract class ELArithmetic {
 
         @Override
         protected Number coerce(Number num) {
-            if (num instanceof BigDecimal)
+            if (num instanceof BigDecimal) {
                 return num;
-            if (num instanceof BigInteger)
+            }
+            if (num instanceof BigInteger) {
                 return new BigDecimal((BigInteger) num);
+            }
             return new BigDecimal(num.doubleValue());
         }
 
@@ -87,8 +89,9 @@ public abstract class ELArithmetic {
 
         @Override
         protected Number coerce(Number num) {
-            if (num instanceof BigInteger)
+            if (num instanceof BigInteger) {
                 return num;
+            }
             return new BigInteger(num.toString());
         }
 
@@ -138,10 +141,12 @@ public abstract class ELArithmetic {
 
         @Override
         protected Number coerce(Number num) {
-            if (num instanceof Double)
+            if (num instanceof Double) {
                 return num;
-            if (num instanceof BigInteger)
+            }
+            if (num instanceof BigInteger) {
                 return new BigDecimal((BigInteger) num);
+            }
             return Double.valueOf(num.doubleValue());
         }
 
@@ -203,8 +208,9 @@ public abstract class ELArithmetic {
 
         @Override
         protected Number coerce(Number num) {
-            if (num instanceof Long)
+            if (num instanceof Long) {
                 return num;
+            }
             return Long.valueOf(num.longValue());
         }
 
@@ -267,14 +273,15 @@ public abstract class ELArithmetic {
         }
 
         final ELArithmetic delegate;
-        if (BIGDECIMAL.matches(obj0, obj1))
+        if (BIGDECIMAL.matches(obj0, obj1)) {
             delegate = DOUBLE;
-        else if (DOUBLE.matches(obj0, obj1))
+        } else if (DOUBLE.matches(obj0, obj1)) {
             delegate = DOUBLE;
-        else if (BIGINTEGER.matches(obj0, obj1))
+        } else if (BIGINTEGER.matches(obj0, obj1)) {
             delegate = BIGINTEGER;
-        else
+        } else {
             delegate = LONG;
+        }
 
         Number num0 = delegate.coerce(obj0);
         Number num1 = delegate.coerce(obj1);
@@ -300,12 +307,13 @@ public abstract class ELArithmetic {
         }
 
         final ELArithmetic delegate;
-        if (BIGDECIMAL.matches(obj0, obj1))
+        if (BIGDECIMAL.matches(obj0, obj1)) {
             delegate = BIGDECIMAL;
-        else if (BIGINTEGER.matches(obj0, obj1))
+        } else if (BIGINTEGER.matches(obj0, obj1)) {
             delegate = BIGDECIMAL;
-        else
+        } else {
             delegate = DOUBLE;
+        }
 
         Number num0 = delegate.coerce(obj0);
         Number num1 = delegate.coerce(obj1);

==================================================
FunctionMapperImpl.java
index 919898adcd..a98daac78a 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -120,11 +120,12 @@ public final class ExpressionBuilder implements NodeVisitor {
                     Node child = null;
                     for (int i = 0; i < numChildren; i++) {
                         child = n.jjtGetChild(i);
-                        if (child instanceof AstLiteralExpression)
+                        if (child instanceof AstLiteralExpression) {
                             continue;
-                        if (type == null)
+                        }
+                        if (type == null) {
                             type = child.getClass();
-                        else {
+                        } else {
                             if (!type.equals(child.getClass())) {
                                 throw new ELException(MessageFactory.get(
                                         "error.mixed", expr));

==================================================
ReflectionUtil.java
index 2887e11be8..306be6b4f9 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -146,7 +146,9 @@ public class FunctionMapperImpl extends FunctionMapper implements
                 ClassNotFoundException {
 
             this.prefix = in.readUTF();
-            if (this.prefix.isEmpty()) this.prefix = null;
+            if (this.prefix.isEmpty()) {
+                this.prefix = null;
+            }
             this.localName = in.readUTF();
             this.owner = in.readUTF();
             this.name = in.readUTF();

==================================================
EmbeddedServletOptions.java
index b8565e8baf..8e6cf9f483 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -87,8 +87,9 @@ public class ReflectionUtil {
      * @throws ClassNotFoundException If a class of a given name cannot be found
      */
     public static Class<?>[] toTypeArray(String[] s) throws ClassNotFoundException {
-        if (s == null)
+        if (s == null) {
             return null;
+        }
         Class<?>[] c = new Class[s.length];
         for (int i = 0; i < s.length; i++) {
             c[i] = forName(s[i]);
@@ -103,8 +104,9 @@ public class ReflectionUtil {
      *         result is the name of the class instance at index i in the input
      */
     public static String[] toTypeNameArray(Class<?>[] c) {
-        if (c == null)
+        if (c == null) {
             return null;
+        }
         String[] s = new String[c.length];
         for (int i = 0; i < c.length; i++) {
             s[i] = c[i].getName();

==================================================
JspC.java
index 1758a8d3ce..b9be46a02b 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -735,12 +735,14 @@ public final class EmbeddedServletOptions implements Options {
         }
 
         String ieClassId = config.getInitParameter("ieClassId");
-        if (ieClassId != null)
+        if (ieClassId != null) {
             this.ieClassId = ieClassId;
+        }
 
         String classpath = config.getInitParameter("classpath");
-        if (classpath != null)
+        if (classpath != null) {
             this.classpath = classpath;
+        }
 
         /*
          * scratchdir
@@ -761,9 +763,10 @@ public final class EmbeddedServletOptions implements Options {
         }
 
         if (!(scratchDir.exists() && scratchDir.canRead() &&
-                scratchDir.canWrite() && scratchDir.isDirectory()))
+                scratchDir.canWrite() && scratchDir.isDirectory())) {
             log.fatal(Localizer.getMessage("jsp.error.bad.scratch.dir",
                     scratchDir.getAbsolutePath()));
+        }
 
         this.compiler = config.getInitParameter("compiler");
 

==================================================
AntCompiler.java
index 3804d2aec5..ca6f8fb5f1 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -836,8 +836,9 @@ public class JspC extends Task implements Options {
      */
     @Override
     public String getClassPath() {
-        if( classPath != null )
+        if( classPath != null ) {
             return classPath;
+        }
         return System.getProperty("java.class.path");
     }
 
@@ -1268,12 +1269,14 @@ public class JspC extends Task implements Options {
             }
         }
 
-        if(!webXml2.delete() && log.isDebugEnabled())
+        if(!webXml2.delete() && log.isDebugEnabled()) {
             log.debug(Localizer.getMessage("jspc.delete.fail",
                     webXml2.toString()));
+        }
 
-        if (!(new File(webxmlFile)).delete() && log.isDebugEnabled())
+        if (!(new File(webxmlFile)).delete() && log.isDebugEnabled()) {
             log.debug(Localizer.getMessage("jspc.delete.fail", webxmlFile));
+        }
 
     }
 
@@ -1586,7 +1589,9 @@ public class JspC extends Task implements Options {
     }
 
     protected String nextFile() {
-        if (fullstop) argPos++;
+        if (fullstop) {
+            argPos++;
+        }
         if (argPos >= args.length) {
             return null;
         } else {
@@ -1740,7 +1745,9 @@ public class JspC extends Task implements Options {
                 String[] libs = webinfLib.list();
                 if (libs != null) {
                     for (String lib : libs) {
-                        if (lib.length() < 5) continue;
+                        if (lib.length() < 5) {
+                            continue;
+                        }
                         String ext = lib.substring(lib.length() - 4);
                         if (!".jar".equalsIgnoreCase(ext)) {
                             if (".tld".equalsIgnoreCase(ext)) {

==================================================
Collector.java
index 2246b99683..3e14bc7d33 100644
--- a/java/org/apache/jasper/compiler/AntCompiler.java
+++ b/java/org/apache/jasper/compiler/AntCompiler.java
@@ -65,8 +65,9 @@ public class AntCompiler extends Compiler {
     // Lazy eval - if we don't need to compile we probably don't need the project
     protected Project getProject() {
 
-        if (project != null)
+        if (project != null) {
             return project;
+        }
 
         // Initializing project
         project = new Project();
@@ -80,8 +81,9 @@ public class AntCompiler extends Compiler {
         }
 
         if( options.getCompiler() != null ) {
-            if( log.isDebugEnabled() )
+            if( log.isDebugEnabled() ) {
                 log.debug("Compiler " + options.getCompiler() );
+            }
             project.setProperty("build.compiler", options.getCompiler() );
         }
         project.init();

==================================================
Compiler.java
index cd0f38d262..29d93c9e01 100644
--- a/java/org/apache/jasper/compiler/Collector.java
+++ b/java/org/apache/jasper/compiler/Collector.java
@@ -161,8 +161,9 @@ class Collector {
 
         @Override
         public void visit(Node.JspElement n) throws JasperException {
-            if (n.getNameAttribute().isExpression())
+            if (n.getNameAttribute().isExpression()) {
                 scriptingElementSeen = true;
+            }
 
             Node.JspAttribute[] attrs = n.getJspAttributes();
             for (Node.JspAttribute attr : attrs) {

==================================================
ELParser.java
index e2a2fcdb48..a96c69732d 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -543,9 +543,10 @@ public abstract class Compiler {
                     return true;
                 }
             } catch (Exception e) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("Problem accessing resource. Treat as outdated.",
                             e);
+                }
                 return true;
             }
         }
@@ -580,8 +581,9 @@ public abstract class Compiler {
 
         try {
             File javaFile = new File(ctxt.getServletJavaFileName());
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Deleting " + javaFile);
+            }
             if (javaFile.exists()) {
                 if (!javaFile.delete()) {
                     log.warn(Localizer.getMessage(
@@ -599,8 +601,9 @@ public abstract class Compiler {
     public void removeGeneratedClassFiles() {
         try {
             File classFile = new File(ctxt.getClassFileName());
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Deleting " + classFile);
+            }
             if (classFile.exists()) {
                 if (!classFile.delete()) {
                     log.warn(Localizer.getMessage(

==================================================
Generator.java
index 3bcef5bc7f..afae730f34 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -407,8 +407,9 @@ public class ELParser {
         int start = index;
         while (hasNextChar()) {
             char c = expression.charAt(index);
-            if (c > ' ')
+            if (c > ' ') {
                 break;
+            }
             index++;
         }
         whiteSpace = expression.substring(start, index);

==================================================
JDTCompiler.java
index 65098c6275..37b0e73572 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -147,16 +147,17 @@ class Generator {
         StringBuilder b = new StringBuilder();
         for (int i = 0; i < s.length(); i++) {
             char c = s.charAt(i);
-            if (c == '"')
+            if (c == '"') {
                 b.append('\\').append('"');
-            else if (c == '\\')
+            } else if (c == '\\') {
                 b.append('\\').append('\\');
-            else if (c == '\n')
+            } else if (c == '\n') {
                 b.append('\\').append('n');
-            else if (c == '\r')
+            } else if (c == '\r') {
                 b.append('\\').append('r');
-            else
+            } else {
                 b.append(c);
+            }
         }
         return b.toString();
     }
@@ -168,16 +169,17 @@ class Generator {
 
         StringBuilder b = new StringBuilder();
         b.append('\'');
-        if (c == '\'')
+        if (c == '\'') {
             b.append('\\').append('\'');
-        else if (c == '\\')
+        } else if (c == '\\') {
             b.append('\\').append('\\');
-        else if (c == '\n')
+        } else if (c == '\n') {
             b.append('\\').append('n');
-        else if (c == '\r')
+        } else if (c == '\r') {
             b.append('\\').append('r');
-        else
+        } else {
             b.append(c);
+        }
         b.append('\'');
         return b.toString();
     }
@@ -221,8 +223,9 @@ class Generator {
                 }
 
                 String info = n.getAttributeValue("info");
-                if (info == null)
+                if (info == null) {
                     return;
+                }
 
                 getServletInfoGenerated = true;
                 out.printil("public java.lang.String getServletInfo() {");
@@ -784,8 +787,9 @@ class Generator {
         // Local variable declarations
         out.printil("final jakarta.servlet.jsp.PageContext pageContext;");
 
-        if (pageInfo.isSession())
+        if (pageInfo.isSession()) {
             out.printil("jakarta.servlet.http.HttpSession session = null;");
+        }
 
         if (pageInfo.isErrorPage()) {
             out.printil("java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);");
@@ -831,8 +835,9 @@ class Generator {
         out.printil("application = pageContext.getServletContext();");
         out.printil("config = pageContext.getServletConfig();");
 
-        if (pageInfo.isSession())
+        if (pageInfo.isSession()) {
             out.printil("session = pageContext.getSession();");
+        }
         out.printil("out = pageContext.getOut();");
         out.printil("_jspx_out = out;");
         out.println();
@@ -1249,7 +1254,9 @@ class Generator {
                         + name + "\"), request);");
             } else if (value == null) {
                 if (param == null)
+                 {
                     param = property; // default to same as property
+                }
                 out.printil("org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper("
                         + "_jspx_page_context.findAttribute(\""
                         + name
@@ -1519,8 +1526,9 @@ class Generator {
          * @return a string for the form 'attr = "value"'
          */
         private String makeAttr(String attr, String value) {
-            if (value == null)
+            if (value == null) {
                 return "";
+            }
 
             return " " + attr + "=\"" + value + '\"';
         }
@@ -1543,10 +1551,11 @@ class Generator {
                 public void visit(Node.ParamAction n) throws JasperException {
 
                     String name = n.getTextAttribute("name");
-                    if (name.equalsIgnoreCase("object"))
+                    if (name.equalsIgnoreCase("object")) {
                         name = "java_object";
-                    else if (name.equalsIgnoreCase("type"))
+                    } else if (name.equalsIgnoreCase("type")) {
                         name = "java_type";
+                    }
 
                     n.setBeginJavaLine(out.getJavaLine());
                     // XXX - Fixed a bug here - value used to be output
@@ -1614,10 +1623,12 @@ class Generator {
                 }
             }
 
-            if (iepluginurl == null)
+            if (iepluginurl == null) {
                 iepluginurl = Constants.IE_PLUGIN_URL;
-            if (nspluginurl == null)
+            }
+            if (nspluginurl == null) {
                 nspluginurl = Constants.NS_PLUGIN_URL;
+            }
 
             n.setBeginJavaLine(out.getJavaLine());
 
@@ -1700,8 +1711,9 @@ class Generator {
             /*
              * generate a <param> for each <jsp:param> in the plugin body
              */
-            if (n.getBody() != null)
+            if (n.getBody() != null) {
                 n.getBody().visit(new ParamVisitor(true));
+            }
 
             /*
              * Netscape style plugin part
@@ -1728,8 +1740,9 @@ class Generator {
             /*
              * Generate a 'attr = "value"' for each <jsp:param> in plugin body
              */
-            if (n.getBody() != null)
+            if (n.getBody() != null) {
                 n.getBody().visit(new ParamVisitor(false));
+            }
 
             out.printil("out.write(" + quote("/>") + ");");
             out.printil("out.write(\"\\n\");");
@@ -2778,12 +2791,14 @@ class Generator {
 
             if (varInfos.length > 0) {
                 for (VariableInfo varInfo : varInfos) {
-                    if (varInfo.getScope() != scope)
+                    if (varInfo.getScope() != scope) {
                         continue;
+                    }
                     // If the scripting variable has been declared, skip codes
                     // for saving and restoring it.
-                    if (declaredVariables.contains(varInfo))
+                    if (declaredVariables.contains(varInfo)) {
                         continue;
+                    }
                     String varName = varInfo.getVarName();
                     String tmpVarName = "_jspx_" + varName + "_"
                             + n.getCustomNestingLevel();
@@ -2794,12 +2809,14 @@ class Generator {
                 }
             } else {
                 for (TagVariableInfo tagVarInfo : tagVarInfos) {
-                    if (tagVarInfo.getScope() != scope)
+                    if (tagVarInfo.getScope() != scope) {
                         continue;
+                    }
                     // If the scripting variable has been declared, skip codes
                     // for saving and restoring it.
-                    if (declaredVariables.contains(tagVarInfo))
+                    if (declaredVariables.contains(tagVarInfo)) {
                         continue;
+                    }
                     String varName = tagVarInfo.getNameGiven();
                     if (varName == null) {
                         varName = n.getTagData().getAttributeString(
@@ -2850,12 +2867,14 @@ class Generator {
 
             if (varInfos.length > 0) {
                 for (VariableInfo varInfo : varInfos) {
-                    if (varInfo.getScope() != scope)
+                    if (varInfo.getScope() != scope) {
                         continue;
+                    }
                     // If the scripting variable has been declared, skip codes
                     // for saving and restoring it.
-                    if (declaredVariables.contains(varInfo))
+                    if (declaredVariables.contains(varInfo)) {
                         continue;
+                    }
                     String varName = varInfo.getVarName();
                     String tmpVarName = "_jspx_" + varName + "_"
                             + n.getCustomNestingLevel();
@@ -2866,12 +2885,14 @@ class Generator {
                 }
             } else {
                 for (TagVariableInfo tagVarInfo : tagVarInfos) {
-                    if (tagVarInfo.getScope() != scope)
+                    if (tagVarInfo.getScope() != scope) {
                         continue;
+                    }
                     // If the scripting variable has been declared, skip codes
                     // for saving and restoring it.
-                    if (declaredVariables.contains(tagVarInfo))
+                    if (declaredVariables.contains(tagVarInfo)) {
                         continue;
+                    }
                     String varName = tagVarInfo.getNameGiven();
                     if (varName == null) {
                         varName = n.getTagData().getAttributeString(
@@ -3653,8 +3674,9 @@ class Generator {
 
         // Tag-handler specific declarations
         generateTagHandlerAttributes(tagInfo);
-        if (tagInfo.hasDynamicAttributes())
+        if (tagInfo.hasDynamicAttributes()) {
             generateSetDynamicAttribute();
+        }
 
         // Methods here
         genPreambleMethods();
@@ -4046,9 +4068,10 @@ class Generator {
                     if (propertyDescriptor.getWriteMethod() != null) {
                         methodMaps.put(propertyDescriptor.getName(), propertyDescriptor.getWriteMethod());
                     }
-                    if (propertyDescriptor.getPropertyEditorClass() != null)
+                    if (propertyDescriptor.getPropertyEditorClass() != null) {
                         propertyEditorMaps.put(propertyDescriptor.getName(), propertyDescriptor
                                 .getPropertyEditorClass());
+                    }
                 }
             } catch (IntrospectionException ie) {
                 // Likely unreachable code

==================================================
JspDocumentParser.java
index 5b15a8088d..7e3e4de20c 100644
--- a/java/org/apache/jasper/compiler/JDTCompiler.java
+++ b/java/org/apache/jasper/compiler/JDTCompiler.java
@@ -415,8 +415,9 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                                 StringBuilder classFileName = new StringBuilder(outputDir).append('/');
                                 for (int j = 0;
                                      j < compoundName.length; j++) {
-                                    if (j > 0)
+                                    if (j > 0) {
                                         classFileName.append('/');
+                                    }
                                     classFileName.append(compoundName[j]);
                                 }
                                 byte[] bytes = classFile.getBytes();

==================================================
JspReader.java
index 74408f5abd..cb8f42df4e 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -595,10 +595,11 @@ class JspDocumentParser
                             startMark = new Mark(ctxt, path, line, column);
                             break;
                         }
-                        if (ch == '"')
+                        if (ch == '"') {
                             doubleQ = !doubleQ;
-                        else if (ch == '\'')
+                        } else if (ch == '\'') {
                             singleQ = !singleQ;
+                        }
 
                         ttext.write(ch);
                         lastCh = ch;
@@ -1353,10 +1354,12 @@ class JspDocumentParser
                 Node n = body.getNode(i);
                 if (!(n instanceof Node.TemplateText)) {
                     String elemType = SCRIPTLET_ACTION;
-                    if (scriptingElem instanceof Node.Declaration)
+                    if (scriptingElem instanceof Node.Declaration) {
                         elemType = DECLARATION_ACTION;
-                    if (scriptingElem instanceof Node.Expression)
+                    }
+                    if (scriptingElem instanceof Node.Expression) {
                         elemType = EXPRESSION_ACTION;
+                    }
                     String msg =
                         Localizer.getMessage(
                             "jsp.error.parse.xml.scripting.invalid.body",

==================================================
Node.java
index d191df05ca..c2c86cec6c 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -112,8 +112,9 @@ class JspReader {
         try {
             CharArrayWriter caw = new CharArrayWriter();
             char buf[] = new char[1024];
-            for (int i = 0 ; (i = reader.read(buf)) != -1 ;)
+            for (int i = 0 ; (i = reader.read(buf)) != -1 ;) {
                 caw.write(buf, 0, i);
+            }
             caw.close();
             current = new Mark(this, caw.toCharArray(), fname);
         } catch (Throwable ex) {
@@ -152,8 +153,9 @@ class JspReader {
     }
 
     int nextChar() {
-        if (!hasMoreInput())
+        if (!hasMoreInput()) {
             return -1;
+        }
 
         int ch = current.stream[current.cursor];
 
@@ -198,8 +200,9 @@ class JspReader {
      * and the cursor point to next character.
      */
     private Boolean indexOf(char c, Mark mark) {
-        if (!hasMoreInput())
+        if (!hasMoreInput()) {
             return null;
+        }
 
         int end = current.stream.length;
         int ch;
@@ -345,11 +348,13 @@ class JspReader {
     boolean matchesETag(String tagName) {
         Mark mark = mark();
 
-        if (!matches("</" + tagName))
+        if (!matches("</" + tagName)) {
             return false;
+        }
         skipSpaces();
-        if (nextChar() == '>')
+        if (nextChar() == '>') {
             return true;
+        }
 
         setCurrent(mark);
         return false;
@@ -358,11 +363,13 @@ class JspReader {
     boolean matchesETagWithoutLessThan(String tagName) {
        Mark mark = mark();
 
-       if (!matches("/" + tagName))
-           return false;
+       if (!matches("/" + tagName)) {
+        return false;
+    }
        skipSpaces();
-       if (nextChar() == '>')
-           return true;
+       if (nextChar() == '>') {
+        return true;
+    }
 
        setCurrent(mark);
        return false;
@@ -464,10 +471,11 @@ class JspReader {
                 skipELExpression();
             } else if (ch == firstChar) {
                 for (int i = 1 ; i < limlen ; i++) {
-                    if (peekChar() == limit.charAt(i))
+                    if (peekChar() == limit.charAt(i)) {
                         nextChar();
-                    else
+                    } else {
                         continue skip;
+                    }
                 }
                 return ret;
             }
@@ -487,8 +495,9 @@ class JspReader {
         Mark ret = skipUntil("</" + tag);
         if (ret != null) {
             skipSpaces();
-            if (nextChar() != '>')
+            if (nextChar() != '>') {
                 ret = null;
+            }
         }
         return ret;
     }
@@ -576,8 +585,9 @@ class JspReader {
                 ch = nextChar();
                 for (ch = nextChar(); ch != -1 && ch != endQuote;
                          ch = nextChar()) {
-                    if (ch == '\\')
+                    if (ch == '\\') {
                         ch = nextChar();
+                    }
                     StringBuilder.append((char) ch);
                 }
                 // Check end of quote, skip closing quote:
@@ -595,8 +605,9 @@ class JspReader {
                     // Take care of the quoting here.
                     if (ch == '\\') {
                         if (peekChar() == '"' || peekChar() == '\'' ||
-                               peekChar() == '>' || peekChar() == '%')
+                               peekChar() == '>' || peekChar() == '%') {
                             ch = nextChar();
+                        }
                     }
                     StringBuilder.append((char) ch);
                 } while (!isDelimiter());

==================================================
PageDataImpl.java
index ab110957ac..8ae43798b4 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -462,8 +462,9 @@ abstract class Node implements TagConstants {
 
             // Figure out and set the parent root
             Node r = parent;
-            while ((r != null) && !(r instanceof Node.Root))
+            while ((r != null) && !(r instanceof Node.Root)) {
                 r = r.getParent();
+            }
             parentRoot = (Node.Root) r;
         }
 

==================================================
PageInfo.java
index 25e3e43fe3..4b9a3df5fa 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -665,7 +665,9 @@ class PageDataImpl extends PageData implements TagConstants {
          * within the given text, so it can be included in a CDATA section.
          */
         private String escapeCDATA(String text) {
-            if( text==null ) return "";
+            if( text==null ) {
+                return "";
+            }
             int len = text.length();
             CharArrayWriter result = new CharArrayWriter(len);
             for (int i=0; i<len; i++) {

==================================================
Parser.java
index af9a100272..464a5c91c1 100644
--- a/java/org/apache/jasper/compiler/PageInfo.java
+++ b/java/org/apache/jasper/compiler/PageInfo.java
@@ -135,8 +135,9 @@ class PageInfo {
      * @return true if Id has been declared.
      */
     public boolean isPluginDeclared(String id) {
-        if (pluginDcls.contains(id))
+        if (pluginDcls.contains(id)) {
             return true;
+        }
         pluginDcls.add(id);
         return false;
     }
@@ -158,8 +159,9 @@ class PageInfo {
     }
 
     public void addDependant(String d, Long lastModified) {
-        if (!dependants.containsKey(d) && !jspFile.equals(d))
-                dependants.put(d, lastModified);
+        if (!dependants.containsKey(d) && !jspFile.equals(d)) {
+            dependants.put(d, lastModified);
+        }
     }
 
     public Map<String,Long> getDependants() {
@@ -382,10 +384,11 @@ class PageInfo {
         throws JasperException {
 
         if (!"java".equalsIgnoreCase(value)) {
-            if (pagedir)
+            if (pagedir) {
                 err.jspError(n, "jsp.error.page.language.nonjava");
-            else
+            } else {
                 err.jspError(n, "jsp.error.tag.language.nonjava");
+            }
         }
 
         language = value;
@@ -447,9 +450,9 @@ class PageInfo {
     public void setBufferValue(String value, Node n, ErrorDispatcher err)
         throws JasperException {
 
-        if ("none".equalsIgnoreCase(value))
+        if ("none".equalsIgnoreCase(value)) {
             buffer = 0;
-        else {
+        } else {
             if (value == null || !value.endsWith("kb")) {
                 if (n == null) {
                     err.jspError("jsp.error.page.invalid.buffer");
@@ -488,12 +491,13 @@ class PageInfo {
     public void setSession(String value, Node n, ErrorDispatcher err)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             isSession = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             isSession = false;
-        else
+        } else {
             err.jspError(n, "jsp.error.page.invalid.session");
+        }
 
         session = value;
     }
@@ -513,12 +517,13 @@ class PageInfo {
     public void setAutoFlush(String value, Node n, ErrorDispatcher err)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             isAutoFlush = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             isAutoFlush = false;
-        else
+        } else {
             err.jspError(n, "jsp.error.autoFlush.invalid");
+        }
 
         autoFlush = value;
     }
@@ -538,12 +543,13 @@ class PageInfo {
     public void setIsThreadSafe(String value, Node n, ErrorDispatcher err)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             isThreadSafe = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             isThreadSafe = false;
-        else
+        } else {
             err.jspError(n, "jsp.error.page.invalid.isthreadsafe");
+        }
 
         isThreadSafeValue = value;
     }
@@ -587,12 +593,13 @@ class PageInfo {
     public void setIsErrorPage(String value, Node n, ErrorDispatcher err)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             isErrorPage = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             isErrorPage = false;
-        else
+        } else {
             err.jspError(n, "jsp.error.page.invalid.iserrorpage");
+        }
 
         isErrorPageValue = value;
     }
@@ -613,15 +620,16 @@ class PageInfo {
                    boolean pagedir)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             isELIgnored = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             isELIgnored = false;
-        else {
-            if (pagedir)
+        } else {
+            if (pagedir) {
                 err.jspError(n, "jsp.error.page.invalid.iselignored");
-            else
+            } else {
                 err.jspError(n, "jsp.error.tag.invalid.iselignored");
+            }
         }
 
         isELIgnoredValue = value;
@@ -634,15 +642,16 @@ class PageInfo {
                    boolean pagedir)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             deferredSyntaxAllowedAsLiteral = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             deferredSyntaxAllowedAsLiteral = false;
-        else {
-            if (pagedir)
+        } else {
+            if (pagedir) {
                 err.jspError(n, "jsp.error.page.invalid.deferredsyntaxallowedasliteral");
-            else
+            } else {
                 err.jspError(n, "jsp.error.tag.invalid.deferredsyntaxallowedasliteral");
+            }
         }
 
         deferredSyntaxAllowedAsLiteralValue = value;
@@ -655,15 +664,16 @@ class PageInfo {
                    boolean pagedir)
         throws JasperException {
 
-        if ("true".equalsIgnoreCase(value))
+        if ("true".equalsIgnoreCase(value)) {
             trimDirectiveWhitespaces = true;
-        else if ("false".equalsIgnoreCase(value))
+        } else if ("false".equalsIgnoreCase(value)) {
             trimDirectiveWhitespaces = false;
-        else {
-            if (pagedir)
+        } else {
+            if (pagedir) {
                 err.jspError(n, "jsp.error.page.invalid.trimdirectivewhitespaces");
-            else
+            } else {
                 err.jspError(n, "jsp.error.tag.invalid.trimdirectivewhitespaces");
+            }
         }
 
         trimDirectiveWhitespacesValue = value;

==================================================
ParserController.java
index 499098b236..f37801698c 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -202,8 +202,9 @@ class Parser implements TagConstants {
 
         // Get the qualified name
         String qName = parseName();
-        if (qName == null)
+        if (qName == null) {
             return false;
+        }
 
         boolean ignoreEL = pageInfo.isELIgnored();
 
@@ -222,13 +223,15 @@ class Parser implements TagConstants {
         }
 
         reader.skipSpaces();
-        if (!reader.matches("="))
+        if (!reader.matches("=")) {
             err.jspError(reader.mark(), "jsp.error.attribute.noequal");
+        }
 
         reader.skipSpaces();
         char quote = (char) reader.nextChar();
-        if (quote != '\'' && quote != '"')
+        if (quote != '\'' && quote != '"') {
             err.jspError(reader.mark(), "jsp.error.attribute.noquote");
+        }
 
         String watchString = "";
         if (reader.matches("<%=")) {
@@ -296,8 +299,9 @@ class Parser implements TagConstants {
         } catch (IllegalArgumentException iae) {
             err.jspError(start, iae.getMessage());
         }
-        if (watch.length() == 1) // quote
+        if (watch.length() == 1) {
             return ret;
+        }
 
         // Put back delimiter '<%=' and '%>', since they are needed if the
         // attribute does not allow RTexpression.
@@ -1297,8 +1301,9 @@ class Parser implements TagConstants {
      */
     private void parseTemplateText(Node parent) {
 
-        if (!reader.hasMoreInput())
+        if (!reader.hasMoreInput()) {
             return;
+        }
 
         CharArrayWriter ttext = new CharArrayWriter();
 

==================================================
ScriptingVariabler.java
index e3d33d2910..376df38707 100644
--- a/java/org/apache/jasper/compiler/ParserController.java
+++ b/java/org/apache/jasper/compiler/ParserController.java
@@ -545,7 +545,9 @@ class ParserController implements TagConstants {
         Mark start = null;
         while ((start = reader.skipUntil("<")) != null) {
             int c = reader.nextChar();
-            if (c != '!' && c != '?') break;
+            if (c != '!' && c != '?') {
+                break;
+            }
         }
         if (start == null) {
             return false;

==================================================
ServletWriter.java
index 7b1d958c2e..2e40768c31 100644
--- a/java/org/apache/jasper/compiler/ScriptingVariabler.java
+++ b/java/org/apache/jasper/compiler/ScriptingVariabler.java
@@ -95,10 +95,11 @@ class ScriptingVariabler {
             Node.CustomTag parent = n.getCustomTagParent();
             if (scope == VariableInfo.AT_BEGIN
                     || scope == VariableInfo.AT_END) {
-                if (parent == null)
+                if (parent == null) {
                     ownRange = MAX_SCOPE;
-                else
+                } else {
                     ownRange = parent.getNumCount();
+                }
             } else {
                 // NESTED
                 ownRange = n.getNumCount();

==================================================
SmapStratum.java
index b34b8cfa9f..f5d305757e 100644
--- a/java/org/apache/jasper/compiler/ServletWriter.java
+++ b/java/org/apache/jasper/compiler/ServletWriter.java
@@ -67,14 +67,16 @@ public class ServletWriter implements AutoCloseable {
 
     public void pushIndent() {
         virtual_indent += TAB_WIDTH;
-        if (virtual_indent >= 0 && virtual_indent <= SPACES.length())
+        if (virtual_indent >= 0 && virtual_indent <= SPACES.length()) {
             indent = virtual_indent;
+        }
     }
 
     public void popIndent() {
         virtual_indent -= TAB_WIDTH;
-        if (virtual_indent >= 0 && virtual_indent <= SPACES.length())
+        if (virtual_indent >= 0 && virtual_indent <= SPACES.length()) {
             indent = virtual_indent;
+        }
     }
 
     /**

==================================================
SmapUtil.java
index 334a077148..304a15eaff 100644
--- a/java/org/apache/jasper/compiler/SmapStratum.java
+++ b/java/org/apache/jasper/compiler/SmapStratum.java
@@ -45,16 +45,18 @@ public class SmapStratum {
         private boolean lineFileIDSet = false;
 
         public void setInputStartLine(int inputStartLine) {
-            if (inputStartLine < 0)
+            if (inputStartLine < 0) {
                 throw new IllegalArgumentException(Localizer.getMessage(
                         "jsp.error.negativeParameter", Integer.valueOf(inputStartLine)));
+            }
             this.inputStartLine = inputStartLine;
         }
 
         public void setOutputStartLine(int outputStartLine) {
-            if (outputStartLine < 0)
+            if (outputStartLine < 0) {
                 throw new IllegalArgumentException(Localizer.getMessage(
                         "jsp.error.negativeParameter", Integer.valueOf(outputStartLine)));
+            }
             this.outputStartLine = outputStartLine;
         }
 
@@ -67,24 +69,27 @@ public class SmapStratum {
          * @param lineFileID The new line file ID
          */
         public void setLineFileID(int lineFileID) {
-            if (lineFileID < 0)
+            if (lineFileID < 0) {
                 throw new IllegalArgumentException(Localizer.getMessage(
                         "jsp.error.negativeParameter", Integer.valueOf(lineFileID)));
+            }
             this.lineFileID = lineFileID;
             this.lineFileIDSet = true;
         }
 
         public void setInputLineCount(int inputLineCount) {
-            if (inputLineCount < 0)
+            if (inputLineCount < 0) {
                 throw new IllegalArgumentException(Localizer.getMessage(
                         "jsp.error.negativeParameter", Integer.valueOf(inputLineCount)));
+            }
             this.inputLineCount = inputLineCount;
         }
 
         public void setOutputLineIncrement(int outputLineIncrement) {
-            if (outputLineIncrement < 0)
+            if (outputLineIncrement < 0) {
                 throw new IllegalArgumentException(Localizer.getMessage(
                         "jsp.error.negativeParameter", Integer.valueOf(outputLineIncrement)));
+            }
             this.outputLineIncrement = outputLineIncrement;
         }
 
@@ -98,17 +103,21 @@ public class SmapStratum {
          *         specified, as its necessity is sensitive to context).
          */
         public String getString() {
-            if (inputStartLine == -1 || outputStartLine == -1)
+            if (inputStartLine == -1 || outputStartLine == -1) {
                 throw new IllegalStateException();
+            }
             StringBuilder out = new StringBuilder();
             out.append(inputStartLine);
-            if (lineFileIDSet)
+            if (lineFileIDSet) {
                 out.append("#" + lineFileID);
-            if (inputLineCount != 1)
+            }
+            if (inputLineCount != 1) {
                 out.append("," + inputLineCount);
+            }
             out.append(":" + outputStartLine);
-            if (outputLineIncrement != 1)
+            if (outputLineIncrement != 1) {
                 out.append("," + outputLineIncrement);
+            }
             out.append('\n');
             return out.toString();
         }
@@ -244,17 +253,19 @@ public class SmapStratum {
         int outputLineIncrement) {
         // check the input - what are you doing here??
         int fileIndex = filePathList.indexOf(inputFileName);
-        if (fileIndex == -1) // still
+        if (fileIndex == -1) {
             throw new IllegalArgumentException(
                 "inputFileName: " + inputFileName);
+        }
 
         //Jasper incorrectly SMAPs certain Nodes, giving them an
         //outputStartLine of 0.  This can cause a fatal error in
         //optimizeLineSection, making it impossible for Jasper to
         //compile the JSP.  Until we can fix the underlying
         //SMAPping problem, we simply ignore the flawed SMAP entries.
-        if (outputStartLine == 0)
+        if (outputStartLine == 0) {
             return;
+        }
 
         // build the LineInfo
         LineInfo li = new LineInfo();
@@ -262,8 +273,9 @@ public class SmapStratum {
         li.setInputLineCount(inputLineCount);
         li.setOutputStartLine(outputStartLine);
         li.setOutputLineIncrement(outputLineIncrement);
-        if (fileIndex != lastFileID)
+        if (fileIndex != lastFileID) {
             li.setLineFileID(fileIndex);
+        }
         lastFileID = fileIndex;
 
         // save it

==================================================
TagFileProcessor.java
index 86d21877d1..ca671f5b6a 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -224,8 +224,9 @@ public class SmapUtil {
             copy(4 + 2 + 2); // magic min/maj version
             int constantPoolCountPos = genPos;
             int constantPoolCount = readU2();
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("constant pool count: " + constantPoolCount);
+            }
             writeU2(constantPoolCount);
 
             // copy old constant pool return index of SDE symbol, if found
@@ -239,32 +240,37 @@ public class SmapUtil {
                 ++constantPoolCount;
                 randomAccessWriteU2(constantPoolCountPos, constantPoolCount);
 
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("SourceDebugExtension not found, installed at: " + sdeIndex);
+                }
             } else {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("SourceDebugExtension found at: " + sdeIndex);
+                }
             }
             copy(2 + 2 + 2); // access, this, super
             int interfaceCount = readU2();
             writeU2(interfaceCount);
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("interfaceCount: " + interfaceCount);
+            }
             copy(interfaceCount * 2);
             copyMembers(); // fields
             copyMembers(); // methods
             int attrCountPos = genPos;
             int attrCount = readU2();
             writeU2(attrCount);
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("class attrCount: " + attrCount);
+            }
             // copy the class attributes, return true if SDE attr found (not copied)
             if (!copyAttrs(attrCount)) {
                 // we will be adding SDE and it isn't already counted
                 ++attrCount;
                 randomAccessWriteU2(attrCountPos, attrCount);
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("class attrCount incremented");
+                }
             }
             writeAttrForSDE(sdeIndex);
         }
@@ -272,14 +278,16 @@ public class SmapUtil {
         void copyMembers() {
             int count = readU2();
             writeU2(count);
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("members count: " + count);
+            }
             for (int i = 0; i < count; ++i) {
                 copy(6); // access, name, descriptor
                 int attrCount = readU2();
                 writeU2(attrCount);
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("member attr count: " + attrCount);
+                }
                 copyAttrs(attrCount);
             }
         }
@@ -291,15 +299,17 @@ public class SmapUtil {
                 // don't write old SDE
                 if (nameIndex == sdeIndex) {
                     sdeFound = true;
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("SDE attr found");
+                    }
                 } else {
                     writeU2(nameIndex); // name
                     int len = readU4();
                     writeU4(len);
                     copy(len);
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("attr len: " + len);
+                    }
                 }
             }
             return sdeFound;
@@ -379,13 +389,15 @@ public class SmapUtil {
                     case 7 :  // Class
                     case 8 :  // String
                     case 16 : // MethodType
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(i + " copying 2 bytes");
+                        }
                         copy(2);
                         break;
                     case 15 : // MethodHandle
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(i + " copying 3 bytes");
+                        }
                         copy(3);
                         break;
                     case 9 :  // Field
@@ -395,14 +407,16 @@ public class SmapUtil {
                     case 4 :  // Float
                     case 12 : // NameAndType
                     case 18 : // InvokeDynamic
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(i + " copying 4 bytes");
+                        }
                         copy(4);
                         break;
                     case 5 : // Long
                     case 6 : // Double
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(i + " copying 8 bytes");
+                        }
                         copy(8);
                         i++;
                         break;
@@ -411,8 +425,9 @@ public class SmapUtil {
                         writeU2(len);
                         byte[] utf8 = readBytes(len);
                         String str = new String(utf8, "UTF-8");
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(i + " read class attr -- '" + str + "'");
+                        }
                         if (str.equals(nameSDE)) {
                             sdeIndex = i;
                         }

==================================================
TagLibraryInfoImpl.java
index 28cffd4da6..1bfc744238 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -262,8 +262,9 @@ class TagFileProcessor {
                     err.jspError(n, "jsp.error.frgmentwithrtexprvalue");
                 }
             } else {
-                if (type == null)
+                if (type == null) {
                     type = "java.lang.String";
+                }
 
                 if (deferredValue) {
                     type = ValueExpression.class.getName();
@@ -309,13 +310,15 @@ class TagFileProcessor {
             }
 
             String className = n.getAttributeValue("variable-class");
-            if (className == null)
+            if (className == null) {
                 className = "java.lang.String";
+            }
 
             String declareStr = n.getAttributeValue("declare");
             boolean declare = true;
-            if (declareStr != null)
+            if (declareStr != null) {
                 declare = JspUtil.booleanValue(declareStr);
+            }
 
             int scope = VariableInfo.NESTED;
             String scopeStr = n.getAttributeValue("scope");

==================================================
TagPluginManager.java
index 4a284a8475..bef122c18d 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -385,8 +385,9 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
      */
     public ValidationMessage[] validate(PageData thePage) {
         TagLibraryValidator tlv = getTagLibraryValidator();
-        if (tlv == null)
+        if (tlv == null) {
             return null;
+        }
 
         String uri = getURI();
         if (uri.startsWith("/")) {

==================================================
Validator.java
index 17c2be081e..832f2f7732 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -62,8 +62,9 @@ public class TagPluginManager {
     }
 
     private void init(ErrorDispatcher err) throws JasperException {
-        if (initialized)
+        if (initialized) {
             return;
+        }
 
         String blockExternalString = ctxt.getInitParameter(
                 Constants.XML_BLOCK_EXTERNAL_INIT_PARAM);
@@ -209,16 +210,18 @@ public class TagPluginManager {
         @Override
         public boolean isConstantAttribute(String attribute) {
             Node.JspAttribute attr = getNodeAttribute(attribute);
-            if (attr == null)
+            if (attr == null) {
                 return false;
+            }
             return attr.isLiteral();
         }
 
         @Override
         public String getConstantAttribute(String attribute) {
             Node.JspAttribute attr = getNodeAttribute(attribute);
-            if (attr == null)
+            if (attr == null) {
                 return null;
+            }
             return attr.getValue();
         }
 

==================================================
ELContextWrapper.java
index c5fbd15a39..14a32d1c02 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -197,8 +197,9 @@ class Validator {
                                 pageInfo.getInfo(), value);
                     }
                 } else if ("pageEncoding".equals(attr)) {
-                    if (pageEncodingSeen)
+                    if (pageEncodingSeen) {
                         err.jspError(n, "jsp.error.page.multi.pageencoding");
+                    }
                     // 'pageEncoding' can occur at most once per file
                     pageEncodingSeen = true;
                     String actual = comparePageEncodings(value, n);
@@ -234,8 +235,9 @@ class Validator {
             }
 
             // Check for bad combinations
-            if (pageInfo.getBuffer() == 0 && !pageInfo.isAutoFlush())
+            if (pageInfo.getBuffer() == 0 && !pageInfo.isAutoFlush()) {
                 err.jspError(n, "jsp.error.page.badCombo");
+            }
 
             // Attributes for imports for this node have been processed by
             // the parsers, just add them to pageInfo.
@@ -270,8 +272,9 @@ class Validator {
                                 pageInfo.getIsELIgnored(), value);
                     }
                 } else if ("pageEncoding".equals(attr)) {
-                    if (pageEncodingSeen)
+                    if (pageEncodingSeen) {
                         err.jspError(n, "jsp.error.tag.multi.pageencoding");
+                    }
                     pageEncodingSeen = true;
                     compareTagEncodings(value, n);
                     n.getRoot().setPageEncoding(value);
@@ -619,8 +622,9 @@ class Validator {
             boolean valueSpecified = n.getValue() != null;
 
             if ("*".equals(property)) {
-                if (param != null || valueSpecified)
+                if (param != null || valueSpecified) {
                     err.jspError(n, "jsp.error.setProperty.invalid");
+                }
 
             } else if (param != null && valueSpecified) {
                 err.jspError(n, "jsp.error.setProperty.invalid");
@@ -640,23 +644,28 @@ class Validator {
             String type = n.getTextAttribute("type");
             BeanRepository beanInfo = pageInfo.getBeanRepository();
 
-            if (className == null && type == null)
+            if (className == null && type == null) {
                 err.jspError(n, "jsp.error.usebean.missingType");
+            }
 
-            if (beanInfo.checkVariable(name))
+            if (beanInfo.checkVariable(name)) {
                 err.jspError(n, "jsp.error.usebean.duplicate");
+            }
 
-            if ("session".equals(scope) && !pageInfo.isSession())
+            if ("session".equals(scope) && !pageInfo.isSession()) {
                 err.jspError(n, "jsp.error.usebean.noSession");
+            }
 
             Node.JspAttribute jattr = getJspAttribute(null, "beanName", null,
                     null, n.getAttributeValue("beanName"), n, null, false);
             n.setBeanName(jattr);
-            if (className != null && jattr != null)
+            if (className != null && jattr != null) {
                 err.jspError(n, "jsp.error.usebean.notBoth");
+            }
 
-            if (className == null)
+            if (className == null) {
                 className = type;
+            }
 
             beanInfo.addBean(n, name, className, scope);
 
@@ -681,12 +690,15 @@ class Validator {
             throwErrorIfExpression(n, "iepluginurl", "jsp:plugin");
 
             String type = n.getTextAttribute("type");
-            if (type == null)
+            if (type == null) {
                 err.jspError(n, "jsp.error.plugin.notype");
-            if (!type.equals("bean") && !type.equals("applet"))
+            }
+            if (!type.equals("bean") && !type.equals("applet")) {
                 err.jspError(n, "jsp.error.plugin.badtype");
-            if (n.getTextAttribute("code") == null)
+            }
+            if (n.getTextAttribute("code") == null) {
                 err.jspError(n, "jsp.error.plugin.nocode");
+            }
 
             Node.JspAttribute width = getJspAttribute(null, "width", null,
                     null, n.getAttributeValue("width"), n, null, false);
@@ -736,8 +748,9 @@ class Validator {
         @Override
         public void visit(Node.ELExpression n) throws JasperException {
             // exit if we are ignoring EL all together
-            if (pageInfo.isELIgnored())
+            if (pageInfo.isELIgnored()) {
                 return;
+            }
 
             // JSP.2.2 - '#{' not allowed in template text
             if (n.getType() == '#') {
@@ -1885,8 +1898,9 @@ class Validator {
 
         for (Object o : compiler.getPageInfo().getTaglibs()) {
 
-            if (!(o instanceof TagLibraryInfoImpl))
+            if (!(o instanceof TagLibraryInfoImpl)) {
                 continue;
+            }
             TagLibraryInfoImpl tli = (TagLibraryInfoImpl) o;
 
             ValidationMessage[] errors = tli.validate(xmlView);

==================================================
JspMethodExpression.java
index d19dfe86be..f8d7aaa8d3 100644
--- a/java/org/apache/jasper/el/ELContextWrapper.java
+++ b/java/org/apache/jasper/el/ELContextWrapper.java
@@ -45,7 +45,9 @@ public final class ELContextWrapper extends ELContext {
 
     @Override
     public FunctionMapper getFunctionMapper() {
-        if (this.fnMapper != null) return this.fnMapper;
+        if (this.fnMapper != null) {
+            return this.fnMapper;
+        }
         return this.target.getFunctionMapper();
     }
 

==================================================
BodyContentImpl.java
index 820f21c18c..c59b6f08c0 100644
--- a/java/org/apache/jasper/el/JspMethodExpression.java
+++ b/java/org/apache/jasper/el/JspMethodExpression.java
@@ -54,13 +54,19 @@ public final class JspMethodExpression extends MethodExpression implements
             context.notifyAfterEvaluation(getExpressionString());
             return result;
         } catch (MethodNotFoundException e) {
-            if (e instanceof JspMethodNotFoundException) throw e;
+            if (e instanceof JspMethodNotFoundException) {
+                throw e;
+            }
             throw new JspMethodNotFoundException(this.mark, e);
         } catch (PropertyNotFoundException e) {
-            if (e instanceof JspPropertyNotFoundException) throw e;
+            if (e instanceof JspPropertyNotFoundException) {
+                throw e;
+            }
             throw new JspPropertyNotFoundException(this.mark, e);
         } catch (ELException e) {
-            if (e instanceof JspELException) throw e;
+            if (e instanceof JspELException) {
+                throw e;
+            }
             throw new JspELException(this.mark, e);
         }
     }
@@ -75,13 +81,19 @@ public final class JspMethodExpression extends MethodExpression implements
             context.notifyAfterEvaluation(getExpressionString());
             return result;
         } catch (MethodNotFoundException e) {
-            if (e instanceof JspMethodNotFoundException) throw e;
+            if (e instanceof JspMethodNotFoundException) {
+                throw e;
+            }
             throw new JspMethodNotFoundException(this.mark, e);
         } catch (PropertyNotFoundException e) {
-            if (e instanceof JspPropertyNotFoundException) throw e;
+            if (e instanceof JspPropertyNotFoundException) {
+                throw e;
+            }
             throw new JspPropertyNotFoundException(this.mark, e);
         } catch (ELException e) {
-            if (e instanceof JspELException) throw e;
+            if (e instanceof JspELException) {
+                throw e;
+            }
             throw new JspELException(this.mark, e);
         }
     }

==================================================
JspFactoryImpl.java
index fcb9778172..675b67d13b 100644
--- a/java/org/apache/jasper/runtime/BodyContentImpl.java
+++ b/java/org/apache/jasper/runtime/BodyContentImpl.java
@@ -115,8 +115,9 @@ public class BodyContentImpl extends BodyContent {
                 return;
             }
 
-            if (len >= bufferSize - nextChar)
+            if (len >= bufferSize - nextChar) {
                 reAllocBuff (len);
+            }
 
             System.arraycopy(cbuf, off, cb, nextChar, len);
             nextChar+=len;
@@ -152,8 +153,9 @@ public class BodyContentImpl extends BodyContent {
             writer.write(s, off, len);
         } else {
             ensureOpen();
-            if (len >= bufferSize - nextChar)
+            if (len >= bufferSize - nextChar) {
                 reAllocBuff(len);
+            }
 
             s.getChars(off, off + len, cb, nextChar);
             nextChar += len;
@@ -336,7 +338,9 @@ public class BodyContentImpl extends BodyContent {
      */
     @Override
     public void print(String s) throws IOException {
-        if (s == null) s = "null";
+        if (s == null) {
+            s = "null";
+        }
         if (writer != null) {
             writer.write(s);
         } else {

==================================================
JspRuntimeLibrary.java
index 578b5f30e7..6e288019de 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -60,8 +60,9 @@ public class JspFactoryImpl extends JspFactory {
 
     @Override
     public void releasePageContext(PageContext pc) {
-        if( pc == null )
+        if( pc == null ) {
             return;
+        }
         if( Constants.IS_SECURITY_ENABLED ) {
             PrivilegedReleasePageContext dp = new PrivilegedReleasePageContext(
                     this,pc);

==================================================
JspWriterImpl.java
index 73b149fbc1..d061dc36a2 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -104,17 +104,19 @@ public class JspRuntimeLibrary {
     }
 
     public static boolean coerceToBoolean(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return false;
-        else
+        } else {
             return Boolean.parseBoolean(s);
+        }
     }
 
     public static byte coerceToByte(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return (byte) 0;
-        else
+        } else {
             return Byte.parseByte(s);
+        }
     }
 
     public static char coerceToChar(String s) {
@@ -126,38 +128,43 @@ public class JspRuntimeLibrary {
     }
 
     public static double coerceToDouble(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return 0;
-        else
+        } else {
             return Double.parseDouble(s);
+        }
     }
 
     public static float coerceToFloat(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return 0;
-        else
+        } else {
             return Float.parseFloat(s);
+        }
     }
 
     public static int coerceToInt(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return 0;
-        else
+        } else {
             return Integer.parseInt(s);
+        }
     }
 
     public static short coerceToShort(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return (short) 0;
-        else
+        } else {
             return Short.parseShort(s);
+        }
     }
 
     public static long coerceToLong(String s) {
-        if (s == null || s.length() == 0)
+        if (s == null || s.length() == 0) {
             return 0;
-        else
+        } else {
             return Long.parseLong(s);
+        }
     }
 
     public static Object coerce(String s, Class<?> target) {
@@ -170,43 +177,49 @@ public class JspRuntimeLibrary {
             }
             return Boolean.valueOf(s);
         } else if (target == Byte.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Byte.valueOf((byte) 0);
-            else
+            } else {
                 return Byte.valueOf(s);
+            }
         } else if (target == Character.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Character.valueOf((char) 0);
-            else {
+            } else {
                 @SuppressWarnings("null")
                 Character result = Character.valueOf(s.charAt(0));
                 return result;
             }
         } else if (target == Double.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Double.valueOf(0);
-            else
+            } else {
                 return Double.valueOf(s);
+            }
         } else if (target == Float.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Float.valueOf(0);
-            else
+            } else {
                 return Float.valueOf(s);
+            }
         } else if (target == Integer.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Integer.valueOf(0);
-            else
+            } else {
                 return Integer.valueOf(s);
+            }
         } else if (target == Short.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Short.valueOf((short) 0);
-            else
+            } else {
                 return Short.valueOf(s);
+            }
         } else if (target == Long.class) {
-            if (isNullOrEmpty)
+            if (isNullOrEmpty) {
                 return Long.valueOf(0);
-            else
+            } else {
                 return Long.valueOf(s);
+            }
         } else {
             return null;
         }
@@ -219,10 +232,11 @@ public class JspRuntimeLibrary {
     {
         try {
             if (s == null) {
-                if (t.equals(Boolean.class) || t.equals(Boolean.TYPE))
+                if (t.equals(Boolean.class) || t.equals(Boolean.TYPE)) {
                     s = "false";
-                else
+                } else {
                     return null;
+                }
             }
             if (propertyEditorClass != null) {
                 return getValueFromBeanInfoPropertyEditor(
@@ -337,7 +351,9 @@ public class JspRuntimeLibrary {
                     Class<?> t = type.getComponentType();
                     String[] values = request.getParameterValues(param);
                     //XXX Please check.
-                    if(values == null) return;
+                    if(values == null) {
+                        return;
+                    }
                     if(t.equals(String.class)) {
                         method.invoke(bean, new Object[] { values });
                     } else {
@@ -345,10 +361,13 @@ public class JspRuntimeLibrary {
                                           propertyEditorClass);
                     }
                 } else {
-                    if(value == null || (param != null && value.equals(""))) return;
+                    if(value == null || (param != null && value.equals(""))) {
+                        return;
+                    }
                     Object oval = convert(prop, value, type, propertyEditorClass);
-                    if ( oval != null )
+                    if ( oval != null ) {
                         method.invoke(bean, new Object[] { oval });
+                    }
                 }
             }
         } catch (Exception ex) {
@@ -445,83 +464,99 @@ public class JspRuntimeLibrary {
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Integer.class)) {
                 Integer []tmpval = new Integer[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] =  Integer.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Byte.class)) {
                 Byte[] tmpval = new Byte[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Byte.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Boolean.class)) {
                 Boolean[] tmpval = new Boolean[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Boolean.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Short.class)) {
                 Short[] tmpval = new Short[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Short.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Long.class)) {
                 Long[] tmpval = new Long[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Long.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Double.class)) {
                 Double[] tmpval = new Double[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Double.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Float.class)) {
                 Float[] tmpval = new Float[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Float.valueOf(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(Character.class)) {
                 Character[] tmpval = new Character[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Character.valueOf(values[i].charAt(0));
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(int.class)) {
                 int []tmpval = new int[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Integer.parseInt (values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(byte.class)) {
                 byte[] tmpval = new byte[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Byte.parseByte (values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(boolean.class)) {
                 boolean[] tmpval = new boolean[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Boolean.parseBoolean(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(short.class)) {
                 short[] tmpval = new short[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Short.parseShort (values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(long.class)) {
                 long[] tmpval = new long[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Long.parseLong (values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(double.class)) {
                 double[] tmpval = new double[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Double.parseDouble(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(float.class)) {
                 float[] tmpval = new float[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = Float.parseFloat(values[i]);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(char.class)) {
                 char[] tmpval = new char[values.length];
-                for (int i = 0 ; i < values.length; i++)
+                for (int i = 0 ; i < values.length; i++) {
                     tmpval[i] = values[i].charAt(0);
+                }
                 method.invoke (bean, new Object[] {tmpval});
             } else {
                 Object[] tmpval = new Integer[values.length];
@@ -894,10 +929,12 @@ public class JspRuntimeLibrary {
     public static String getContextRelativePath(ServletRequest request,
                                                 String relativePath) {
 
-        if (relativePath.startsWith("/"))
+        if (relativePath.startsWith("/")) {
             return relativePath;
-        if (!(request instanceof HttpServletRequest))
+        }
+        if (!(request instanceof HttpServletRequest)) {
             return relativePath;
+        }
         HttpServletRequest hrequest = (HttpServletRequest) request;
         String uri = (String) request.getAttribute(
                 RequestDispatcher.INCLUDE_SERVLET_PATH);
@@ -905,13 +942,15 @@ public class JspRuntimeLibrary {
             String pathInfo = (String)
                 request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
             if (pathInfo == null) {
-                if (uri.lastIndexOf('/') >= 0)
+                if (uri.lastIndexOf('/') >= 0) {
                     uri = uri.substring(0, uri.lastIndexOf('/'));
+                }
             }
         } else {
             uri = hrequest.getServletPath();
-            if (uri.lastIndexOf('/') >= 0)
+            if (uri.lastIndexOf('/') >= 0) {
                 uri = uri.substring(0, uri.lastIndexOf('/'));
+            }
         }
         return uri + '/' + relativePath;
 
@@ -938,8 +977,9 @@ public class JspRuntimeLibrary {
                                boolean flush)
         throws IOException, ServletException {
 
-        if (flush && !(out instanceof BodyContent))
+        if (flush && !(out instanceof BodyContent)) {
             out.flush();
+        }
 
         // FIXME - It is tempting to use request.getRequestDispatcher() to
         // resolve a relative path directly, but Catalina currently does not

==================================================
PageContextImpl.java
index 3f1b1e334b..226c188414 100644
--- a/java/org/apache/jasper/runtime/JspWriterImpl.java
+++ b/java/org/apache/jasper/runtime/JspWriterImpl.java
@@ -65,8 +65,9 @@ public class JspWriterImpl extends JspWriter {
     public JspWriterImpl(ServletResponse response, int sz,
             boolean autoFlush) {
         super(sz, autoFlush);
-        if (sz < 0)
+        if (sz < 0) {
             throw new IllegalArgumentException(Localizer.getMessage("jsp.error.negativeBufferSize"));
+        }
         this.response = response;
         cb = sz == 0 ? null : new char[sz];
         nextChar = 0;
@@ -74,8 +75,9 @@ public class JspWriterImpl extends JspWriter {
 
     void init( ServletResponse response, int sz, boolean autoFlush ) {
         this.response= response;
-        if( sz > 0 && ( cb == null || sz > cb.length ) )
+        if( sz > 0 && ( cb == null || sz > cb.length ) ) {
             cb=new char[sz];
+        }
         nextChar = 0;
         this.autoFlush=autoFlush;
         this.bufferSize=sz;
@@ -99,12 +101,14 @@ public class JspWriterImpl extends JspWriter {
      * @throws IOException Error writing buffered data
      */
     protected final void flushBuffer() throws IOException {
-        if (bufferSize == 0)
+        if (bufferSize == 0) {
             return;
+        }
         flushed = true;
         ensureOpen();
-        if (nextChar == 0)
+        if (nextChar == 0) {
             return;
+        }
         initOut();
         out.write(cb, 0, nextChar);
         nextChar = 0;
@@ -121,22 +125,25 @@ public class JspWriterImpl extends JspWriter {
      */
     @Override
     public final void clear() throws IOException {
-        if ((bufferSize == 0) && (out != null))
+        if ((bufferSize == 0) && (out != null)) {
             // clear() is illegal after any unbuffered output (JSP.5.5)
             throw new IllegalStateException(
                     Localizer.getMessage("jsp.error.ise_on_clear"));
-        if (flushed)
+        }
+        if (flushed) {
             throw new IOException(
                     Localizer.getMessage("jsp.error.attempt_to_clear_flushed_buffer"));
+        }
         ensureOpen();
         nextChar = 0;
     }
 
     @Override
     public void clearBuffer() throws IOException {
-        if (bufferSize == 0)
+        if (bufferSize == 0) {
             throw new IllegalStateException(
                     Localizer.getMessage("jsp.error.ise_on_clear"));
+        }
         ensureOpen();
         nextChar = 0;
     }
@@ -163,12 +170,14 @@ public class JspWriterImpl extends JspWriter {
      */
     @Override
     public void close() throws IOException {
-        if (response == null || closed)
+        if (response == null || closed) {
             // multiple calls to close is OK
             return;
+        }
         flush();
-        if (out != null)
+        if (out != null) {
             out.close();
+        }
         out = null;
         closed = true;
     }
@@ -183,8 +192,9 @@ public class JspWriterImpl extends JspWriter {
 
     /** check to make sure that the stream has not been closed */
     private void ensureOpen() throws IOException {
-        if (response == null || closed)
+        if (response == null || closed) {
             throw new IOException(Localizer.getMessage("jsp.error.stream.closed"));
+        }
     }
 
 
@@ -198,11 +208,13 @@ public class JspWriterImpl extends JspWriter {
             initOut();
             out.write(c);
         } else {
-            if (nextChar >= bufferSize)
-                if (autoFlush)
+            if (nextChar >= bufferSize) {
+                if (autoFlush) {
                     flushBuffer();
-                else
+                } else {
                     bufferOverflow();
+                }
+            }
             cb[nextChar++] = (char) c;
         }
     }
@@ -212,7 +224,9 @@ public class JspWriterImpl extends JspWriter {
      * out of file descriptors and we're trying to print a stack trace.
      */
     private static int min(int a, int b) {
-        if (a < b) return a;
+        if (a < b) {
+            return a;
+        }
         return b;
     }
 
@@ -253,10 +267,11 @@ public class JspWriterImpl extends JspWriter {
             /* If the request length exceeds the size of the output buffer,
              flush the buffer and then write the data directly.  In this
              way buffered streams will cascade harmlessly. */
-            if (autoFlush)
+            if (autoFlush) {
                 flushBuffer();
-            else
+            } else {
                 bufferOverflow();
+            }
             initOut();
             out.write(cbuf, off, len);
             return;
@@ -268,11 +283,13 @@ public class JspWriterImpl extends JspWriter {
             System.arraycopy(cbuf, b, cb, nextChar, d);
             b += d;
             nextChar += d;
-            if (nextChar >= bufferSize)
-                if (autoFlush)
+            if (nextChar >= bufferSize) {
+                if (autoFlush) {
                     flushBuffer();
-                else
+                } else {
                     bufferOverflow();
+                }
+            }
         }
 
     }
@@ -307,11 +324,13 @@ public class JspWriterImpl extends JspWriter {
             s.getChars(b, b + d, cb, nextChar);
             b += d;
             nextChar += d;
-            if (nextChar >= bufferSize)
-                if (autoFlush)
+            if (nextChar >= bufferSize) {
+                if (autoFlush) {
                     flushBuffer();
-                else
+                } else {
                     bufferOverflow();
+                }
+            }
         }
     }
 

==================================================
TagHandlerPool.java
index 1310f16858..01d4884633 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -139,10 +139,12 @@ public class PageContextImpl extends PageContext {
         this.applicationContext = JspApplicationContextImpl.getInstance(context);
 
         // Setup session (if required)
-        if (request instanceof HttpServletRequest && needsSession)
+        if (request instanceof HttpServletRequest && needsSession) {
             this.session = ((HttpServletRequest) request).getSession();
-        if (needsSession && session == null)
+        }
+        if (needsSession && session == null) {
             throw new IllegalStateException(Localizer.getMessage("jsp.error.page.sessionRequired"));
+        }
 
         // initialize the initial out ...
         depth = -1;
@@ -161,8 +163,9 @@ public class PageContextImpl extends PageContext {
         setAttribute(REQUEST, request);
         setAttribute(RESPONSE, response);
 
-        if (session != null)
+        if (session != null) {
             setAttribute(SESSION, session);
+        }
 
         setAttribute(PAGE, servlet);
         setAttribute(CONFIG, config);
@@ -334,8 +337,9 @@ public class PageContextImpl extends PageContext {
 
         if (session != null) {
             try {
-                if (session.getAttribute(name) != null)
+                if (session.getAttribute(name) != null) {
                     return SESSION_SCOPE;
+                }
             } catch(IllegalStateException ise) {
                 // Session has been invalidated.
                 // Ignore and fall through to application scope.
@@ -484,8 +488,9 @@ public class PageContextImpl extends PageContext {
         if (!path.startsWith("/")) {
             String uri = (String) request.getAttribute(
                     RequestDispatcher.INCLUDE_SERVLET_PATH);
-            if (uri == null)
+            if (uri == null) {
                 uri = ((HttpServletRequest) request).getServletPath();
+            }
             String baseURI = uri.substring(0, uri.lastIndexOf('/'));
             path = baseURI + '/' + path;
         }
@@ -532,8 +537,9 @@ public class PageContextImpl extends PageContext {
         final String path = getAbsolutePathRelativeToContext(relativeUrlPath);
         String includeUri = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
 
-        if (includeUri != null)
+        if (includeUri != null) {
             request.removeAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
+        }
         try {
             context.getRequestDispatcher(path).forward(request, response);
         } finally {
@@ -653,12 +659,15 @@ public class PageContextImpl extends PageContext {
             // Otherwise throw the exception wrapped inside a ServletException.
             // Set the exception as the root cause in the ServletException
             // to get a stack trace for the real problem
-            if (t instanceof IOException)
+            if (t instanceof IOException) {
                 throw (IOException) t;
-            if (t instanceof ServletException)
+            }
+            if (t instanceof ServletException) {
                 throw (ServletException) t;
-            if (t instanceof RuntimeException)
+            }
+            if (t instanceof RuntimeException) {
                 throw (RuntimeException) t;
+            }
 
             Throwable rootCause = null;
             if (t instanceof JspException || t instanceof ELException ||

==================================================
JasperLoader.java
index 5ef15d6c55..522537c272 100644
--- a/java/org/apache/jasper/runtime/TagHandlerPool.java
+++ b/java/org/apache/jasper/runtime/TagHandlerPool.java
@@ -55,8 +55,9 @@ public class TagHandlerPool {
                 result = null;
             }
         }
-        if (result == null)
+        if (result == null) {
             result = new TagHandlerPool();
+        }
         result.init(config);
 
         return result;
@@ -159,17 +160,21 @@ public class TagHandlerPool {
 
     protected static String getOption(ServletConfig config, String name,
             String defaultV) {
-        if (config == null)
+        if (config == null) {
             return defaultV;
+        }
 
         String value = config.getInitParameter(name);
-        if (value != null)
+        if (value != null) {
             return value;
-        if (config.getServletContext() == null)
+        }
+        if (config.getServletContext() == null) {
             return defaultV;
+        }
         value = config.getServletContext().getInitParameter(name);
-        if (value != null)
+        if (value != null) {
             return value;
+        }
         return defaultV;
     }
 

==================================================
JspCServletContext.java
index 2a4b99755d..6edcc375b1 100644
--- a/java/org/apache/jasper/servlet/JasperLoader.java
+++ b/java/org/apache/jasper/servlet/JasperLoader.java
@@ -93,8 +93,9 @@ public class JasperLoader extends URLClassLoader {
         // (0) Check our previously loaded class cache
         clazz = findLoadedClass(name);
         if (clazz != null) {
-            if (resolve)
+            if (resolve) {
                 resolveClass(clazz);
+            }
             return clazz;
         }
 
@@ -120,8 +121,9 @@ public class JasperLoader extends URLClassLoader {
             // Class is not in org.apache.jsp, therefore, have our
             // parent load it
             clazz = getParent().loadClass(name);
-            if( resolve )
+            if( resolve ) {
                 resolveClass(clazz);
+            }
             return clazz;
         }
 

==================================================
JspServlet.java
index 8fc0a1fb3f..a31ccfe2d7 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -340,10 +340,12 @@ public class JspCServletContext implements ServletContext {
      */
     @Override
     public String getRealPath(String path) {
-        if (!myResourceBaseURL.getProtocol().equals("file"))
+        if (!myResourceBaseURL.getProtocol().equals("file")) {
             return null;
-        if (!path.startsWith("/"))
+        }
+        if (!path.startsWith("/")) {
             return null;
+        }
         try {
             File f = new File(getResource(path).toURI());
             return f.getAbsolutePath();

==================================================
Util.java
index 2f46dcdddf..60ab4e5116 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -139,7 +139,9 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
                 throw new ServletException(Localizer.getMessage("jsp.error.precompilation", jspFile), e);
             } catch (PrivilegedActionException e) {
                 Throwable t = e.getCause();
-                if (t instanceof ServletException) throw (ServletException)t;
+                if (t instanceof ServletException) {
+                    throw (ServletException)t;
+                }
                 throw new ServletException(Localizer.getMessage("jsp.error.precompilation", jspFile), e);
             }
         }

==================================================
