f7b22821a5ab8a8daac1b0a5a24635ebcb90f6ea
==================================================
Improve handling of setting primitive values on beans.
==================================================
Mark Emlyn
==================================================
Sun Oct 3 19:16:32 2010 +0000
==================================================
ReflectionUtil.java
Improve handling of setting primitive values on beans.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1004027 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestMethodExpressionImpl.java
index 83331f4632..37356f73e4 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -171,14 +171,14 @@ public class ReflectionUtil {
                 } else if (i == (mParamCount - 1) && m.isVarArgs()) {
                     Class<?> varType = mParamTypes[i].getComponentType();
                     for (int j = i; j < paramCount; j++) {
-                        if (!varType.isAssignableFrom(paramTypes[j])) {
+                        if (!isAssignableFrom(paramTypes[j], varType)) {
                             break;
                         }
                         // Don't treat a varArgs match as an exact match, it can
                         // lead to a varArgs method matching when the result
                         // should be ambiguous
                     }
-                } else if (!mParamTypes[i].isAssignableFrom(paramTypes[i])) {
+                } else if (!isAssignableFrom(paramTypes[i], mParamTypes[i])) {
                     noMatch = true;
                     break;
                 }
@@ -281,6 +281,33 @@ public class ReflectionUtil {
         return null;
     }
 
+    // src will always be an object
+    private static boolean isAssignableFrom(Class<?> src, Class<?> target) {
+        Class<?> targetClass;
+        if (target.isPrimitive()) {
+            if (target == Boolean.TYPE) {
+                targetClass = Boolean.class;
+            } else if (target == Character.TYPE) {
+                targetClass = Character.class;
+            } else if (target == Byte.TYPE) {
+                targetClass = Byte.class;
+            } else if (target == Short.TYPE) {
+                targetClass = Short.class;
+            } else if (target == Integer.TYPE) {
+                targetClass = Integer.class;
+            } else if (target == Long.TYPE) {
+                targetClass = Long.class;
+            } else if (target == Float.TYPE) {
+                targetClass = Float.class;
+            } else {
+                targetClass = Double.class;
+            }
+        } else {
+            targetClass = target;
+        }
+        return targetClass.isAssignableFrom(src);
+    }
+
     protected static final String paramString(Class<?>[] types) {
         if (types != null) {
             StringBuilder sb = new StringBuilder();

==================================================
TesterBeanA.java
index 7e48873082..ff28ccb976 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -326,4 +326,13 @@ public class TestMethodExpressionImpl extends TestCase {
                 "#{beanA.name}", java.lang.String.class);
         assertEquals("New value", ve.getValue(context));
     }
+    
+    public void testBugPrimitives() throws Exception {
+        MethodExpression me = factory.createMethodExpression(context,
+                "${beanA.setValLong(5)}", null, null);
+        me.invoke(context, null);
+        ValueExpression ve = factory.createValueExpression(context,
+                "#{beanA.valLong}", java.lang.String.class);
+        assertEquals("5", ve.getValue(context));
+    }
 }

==================================================
