e98769d9f2a001fa196dbeb6cafd5e342da52146
==================================================
Start to process Headers frame
==================================================
Mark Thomas
==================================================
Wed May 13 20:36:27 2015 +0000
==================================================
AbstractStream.java
Start to process Headers frame

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1679270 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectionSettings.java
index 3629576efe..c0039c484b 100644
--- a/java/org/apache/coyote/http2/AbstractStream.java
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -21,7 +21,6 @@ import java.util.Iterator;
 import java.util.Set;
 
 import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -29,7 +28,6 @@ import org.apache.tomcat.util.res.StringManager;
  */
 abstract class AbstractStream {
 
-    private static final Log log = LogFactory.getLog(AbstractStream.class);
     private static final StringManager sm = StringManager.getManager(AbstractStream.class);
 
     private final Integer identifier;
@@ -49,8 +47,8 @@ abstract class AbstractStream {
 
 
     public void rePrioritise(AbstractStream parent, boolean exclusive, int weight) {
-        if (log.isDebugEnabled()) {
-            log.debug(sm.getString("abstractStream.reprioritisation.debug", identifier,
+        if (getLog().isDebugEnabled()) {
+            getLog().debug(sm.getString("abstractStream.reprioritisation.debug", identifier,
                     Boolean.toString(exclusive), parent.getIdentifier(), Integer.toString(weight)));
         }
 
@@ -120,4 +118,6 @@ abstract class AbstractStream {
     Set<AbstractStream> getChildStreams() {
         return childStreams;
     }
+
+    protected abstract Log getLog();
 }

==================================================
Http2UpgradeHandler.java
index 8ea1547ad6..438043eb1c 100644
--- a/java/org/apache/coyote/http2/ConnectionSettings.java
+++ b/java/org/apache/coyote/http2/ConnectionSettings.java
@@ -27,20 +27,20 @@ public class ConnectionSettings {
     private final Log log = LogFactory.getLog(ConnectionSettings.class);
     private final StringManager sm = StringManager.getManager(ConnectionSettings.class);
 
-    public static final long DEFAULT_WINDOW_SIZE = (1 << 16) - 1;
-    private static final long UNLIMITED = 1 << 32; // Use the maximum possible
-    private static final long MAX_WINDOW_SIZE = (1 << 31) - 1;
-    private static final long MIN_MAX_FRAME_SIZE = 1 << 14;
-    private static final long MAX_MAX_FRAME_SIZE = (1 << 24) - 1;
-
-    private volatile long headerTableSize = 4096;
-    private volatile long enablePush = 1;
-    private volatile long maxConcurrentStreams = UNLIMITED;
-    private volatile long initialWindowSize = DEFAULT_WINDOW_SIZE;
-    private volatile long maxFrameSize = MIN_MAX_FRAME_SIZE;
-    private volatile long maxHeaderListSize = UNLIMITED;
-
-    public void set(int parameterId, long value) throws IOException {
+    public static final int DEFAULT_WINDOW_SIZE = (1 << 16) - 1;
+    private static final int UNLIMITED = 1 << 32; // Use the maximum possible
+    private static final int MAX_WINDOW_SIZE = (1 << 31) - 1;
+    private static final int MIN_MAX_FRAME_SIZE = 1 << 14;
+    private static final int MAX_MAX_FRAME_SIZE = (1 << 24) - 1;
+
+    private volatile int headerTableSize = 4096;
+    private volatile int enablePush = 1;
+    private volatile int maxConcurrentStreams = UNLIMITED;
+    private volatile int initialWindowSize = DEFAULT_WINDOW_SIZE;
+    private volatile int maxFrameSize = MIN_MAX_FRAME_SIZE;
+    private volatile int maxHeaderListSize = UNLIMITED;
+
+    public void set(int parameterId, int value) throws IOException {
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("connectionSettings.debug",
                     Integer.toString(parameterId), Long.toString(value)));
@@ -73,18 +73,18 @@ public class ConnectionSettings {
     }
 
 
-    public long getHeaderTableSize() {
+    public int getHeaderTableSize() {
         return headerTableSize;
     }
-    public void setHeaderTableSize(long headerTableSize) {
+    public void setHeaderTableSize(int headerTableSize) {
         this.headerTableSize = headerTableSize;
     }
 
 
-    public long getEnablePush() {
+    public int getEnablePush() {
         return enablePush;
     }
-    public void setEnablePush(long enablePush) throws IOException {
+    public void setEnablePush(int enablePush) throws IOException {
         // Can't be less than zero since the result of the byte->long conversion
         // will never be negative
         if (enablePush > 1) {
@@ -95,18 +95,18 @@ public class ConnectionSettings {
     }
 
 
-    public long getMaxConcurrentStreams() {
+    public int getMaxConcurrentStreams() {
         return maxConcurrentStreams;
     }
-    public void setMaxConcurrentStreams(long maxConcurrentStreams) {
+    public void setMaxConcurrentStreams(int maxConcurrentStreams) {
         this.maxConcurrentStreams = maxConcurrentStreams;
     }
 
 
-    public long getInitialWindowSize() {
+    public int getInitialWindowSize() {
         return initialWindowSize;
     }
-    public void setInitialWindowSize(long initialWindowSize) throws IOException {
+    public void setInitialWindowSize(int initialWindowSize) throws IOException {
         if (initialWindowSize > MAX_WINDOW_SIZE) {
             throw new Http2Exception(sm.getString("connectionSettings.windowSizeTooBig",
                     Long.toString(initialWindowSize), Long.toString(MAX_WINDOW_SIZE)),
@@ -116,10 +116,10 @@ public class ConnectionSettings {
     }
 
 
-    public long getMaxFrameSize() {
+    public int getMaxFrameSize() {
         return maxFrameSize;
     }
-    public void setMaxFrameSize(long maxFrameSize) throws IOException {
+    public void setMaxFrameSize(int maxFrameSize) throws IOException {
         if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {
             throw new Http2Exception(sm.getString("connectionSettings.maxFrameSizeInvalid",
                     Long.toString(maxFrameSize), Long.toString(MIN_MAX_FRAME_SIZE),
@@ -129,10 +129,10 @@ public class ConnectionSettings {
     }
 
 
-    public long getMaxHeaderListSize() {
+    public int getMaxHeaderListSize() {
         return maxHeaderListSize;
     }
-    public void setMaxHeaderListSize(long maxHeaderListSize) {
+    public void setMaxHeaderListSize(int maxHeaderListSize) {
         this.maxHeaderListSize = maxHeaderListSize;
     }
 }

==================================================
Stream.java
index 0183dd8400..4c7ec0a6cc 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -30,12 +30,14 @@ hpackdecoder.zeroNotValidHeaderTableIndex=Zero is not a valid header table index
 
 hpackhuffman.huffmanEncodedHpackValueDidNotEndWithEOS=Huffman encoded value in HPACK headers did not end with EOS padding
 
+stream.header.debug=Stream [{0}] recieved HTTP header [{1}] with value [{2}]
 upgradeHandler.connectionError=An error occurred that requires the HTTP/2 connection to be closed.
 upgradeHandler.payloadTooBig=The payload is [{0}] bytes long but the maximum frame size is [{1}]
 upgradeHandler.processFrame=Processing frame of type [{0}] for stream [{2}] with flags [{1}] and payload size [{3}]
 upgradeHandler.processFrame.ioerror=An I/O error occurred while reading an incoming HTTP/2 frame
-upgradeHandler.processFramePriority.invalidPayloadSize=Settings frame received with an invalid payload size of [{0}] (should be 5)
-upgradeHandler.processFramePriority.invalidStream=Settings frame received for stream [0]
+upgradeHandler.processFrameHeaders.invalidStream=Headers frame received for stream [0]
+upgradeHandler.processFramePriority.invalidPayloadSize=Priority frame received with an invalid payload size of [{0}] (should be 5)
+upgradeHandler.processFramePriority.invalidStream=Priority frame received for stream [0]
 upgradeHandler.processFrameSettings.ackWithNonZeroPayload=Settings frame received with the ACK flag set and payload present
 upgradeHandler.processFrameSettings.invalidPayloadSize=Settings frame received with a payload size of [{0}] which is not a multiple of 6
 upgradeHandler.processFrameSettings.invalidStream=Settings frame received for stream [{0}]

==================================================
