1289a735c1ec0507a71388eea58b97f45bad31ea
==================================================
SpotBugs
==================================================
Mark Thomas
==================================================
Wed Mar 21 10:10:48 2018 +0000
==================================================
AbstractReplicatedMap.java
SpotBugs
Avoid catching Exception

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1827399 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2AsyncParser.java
index b1f92810d3..eb83851751 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -1033,7 +1033,7 @@ public abstract class AbstractReplicatedMap<K,V>
                 entry.setCopy(false);
                 if ( getMapOwner()!=null ) getMapOwner().objectMadePrimary(key, entry.getValue());
 
-            } catch (Exception x) {
+            } catch (RuntimeException | ChannelException | ClassNotFoundException | IOException x) {
                 log.error(sm.getString("abstractReplicatedMap.unable.get"), x);
                 return null;
             }

==================================================
Compiler.java
index 3930452a4a..e05536e538 100644
--- a/java/org/apache/coyote/http2/Http2AsyncParser.java
+++ b/java/org/apache/coyote/http2/Http2AsyncParser.java
@@ -228,7 +228,7 @@ class Http2AsyncParser extends Http2Parser {
                             }
                         }
                     } while (continueParsing);
-                } catch (Exception e) {
+                } catch (RuntimeException | IOException | Http2Exception e) {
                     error = e;
                 }
                 if (payload.hasRemaining()) {

==================================================
JspRuntimeContext.java
index 27fcb442f4..207a978bc5 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -268,7 +268,7 @@ public abstract class Compiler {
                         + " generate=" + (t4 - t3) + " validate=" + (t2 - t1));
             }
 
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             // Remove the generated .java file
             File file = new File(javaFileName);
             if (file.exists()) {

==================================================
TagFileProcessor.java
index 9bce564d92..7b7b1d6874 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -20,6 +20,7 @@ package org.apache.jasper.compiler;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FilePermission;
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.net.URLClassLoader;
@@ -517,7 +518,7 @@ public final class JspRuntimeContext {
                 // Allow the JSP to access org.apache.jasper.runtime.HttpJspBase
                 permissions.add( new RuntimePermission(
                     "accessClassInPackage.org.apache.jasper.runtime") );
-            } catch(Exception e) {
+            } catch(RuntimeException | IOException e) {
                 context.log("Security Init for context failed",e);
             }
         }

==================================================
JspRuntimeLibrary.java
index b47e0db602..d543de0028 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -601,7 +601,7 @@ class TagFileProcessor {
                                         entry.getValue());
                             }
                         }
-                    } catch (Exception e) {
+                    } catch (RuntimeException | ReflectiveOperationException e) {
                         // ignore errors
                     }
 

==================================================
AsyncChannelWrapperSecure.java
index 43654332fa..d3fb01e8eb 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -489,7 +489,7 @@ public class JspRuntimeLibrary {
                 }
                 method.invoke (bean, new Object[] {tmpval});
             }
-        } catch (Exception ex) {
+        } catch (RuntimeException | ReflectiveOperationException ex) {
             Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
             ExceptionUtils.handleThrowable(thr);
             throw new JasperException ("error in invoking method", ex);

==================================================
StatementCache.java
index b427de7a59..00c3d5c0f8 100644
--- a/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
+++ b/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
@@ -268,8 +268,7 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
                         Future<Integer> f = socketChannel.read(socketReadBuffer);
                         Integer socketRead = f.get();
                         if (socketRead.intValue() == -1) {
-                            throw new EOFException(sm.getString(
-                                    "asyncChannelWrapperSecure.eof"));
+                            throw new EOFException(sm.getString("asyncChannelWrapperSecure.eof"));
                         }
                     }
 
@@ -277,8 +276,7 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
 
                     if (socketReadBuffer.hasRemaining()) {
                         // Decrypt the data in the buffer
-                        SSLEngineResult r =
-                                sslEngine.unwrap(socketReadBuffer, dest);
+                        SSLEngineResult r = sslEngine.unwrap(socketReadBuffer, dest);
                         read += r.bytesProduced();
                         Status s = r.getStatus();
 
@@ -335,7 +333,8 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
                     future.fail(new IllegalStateException(sm.getString(
                             "asyncChannelWrapperSecure.wrongStateRead")));
                 }
-            } catch (Exception e) {
+            } catch (RuntimeException | ReadBufferOverflowException | SSLException | EOFException |
+                    ExecutionException | InterruptedException e) {
                 reading.set(false);
                 future.fail(e);
             }

==================================================
ConnectCountTest.java
index 94de9c089c..a5719236a2 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
@@ -20,6 +20,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.Arrays;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -293,7 +294,7 @@ public class StatementCache extends StatementDecoratorInterceptor implements Sta
                         proxy.cached = true;
                         shouldClose = false;
                     }
-                } catch (Exception x) {
+                } catch (RuntimeException | ReflectiveOperationException | SQLException x) {
                     removeStatement(proxy);
                 }
             }

==================================================
FairnessTest.java
index 5a0a71fc09..8e240f91e2 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/ConnectCountTest.java
@@ -17,7 +17,9 @@
 package org.apache.tomcat.jdbc.test;
 
 import java.sql.Connection;
+import java.sql.SQLException;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
@@ -259,7 +261,7 @@ public class ConnectCountTest extends DefaultTestCase {
                     totalruntime+=(System.nanoTime()-start);
                 }
 
-            } catch (Exception x) {
+            } catch (RuntimeException | SQLException | ExecutionException | InterruptedException x) {
                 x.printStackTrace();
             } finally {
                 ConnectCountTest.this.latch.countDown();

==================================================
