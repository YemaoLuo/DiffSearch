5c42732c2f0ad8753cae2a4d5ae3505310d55893
==================================================
Fix Java 8 Javadoc errors in org.apache.naming
==================================================
Mark Emlyn
==================================================
Mon Oct 13 14:59:30 2014 +0000
==================================================
JndiPermission.java
Fix Java 8 Javadoc errors in org.apache.naming

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631431 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SelectorContext.java
index 4d5a216c21..6d7fc98c49 100644
--- a/java/org/apache/naming/JndiPermission.java
+++ b/java/org/apache/naming/JndiPermission.java
@@ -29,8 +29,8 @@ import java.security.BasicPermission;
  * resources that start with name.  There are no actions.</p>
  * <p>
  * Example that grants permission to read all JNDI file based resources:
- * <li> permission org.apache.naming.JndiPermission "*";</li>
  * </p>
+ * <code>permission org.apache.naming.JndiPermission "*";</code>
  *
  * @author Glenn Nielsen
  */

==================================================
BeanFactory.java
index 4290c244e7..3fcbdd551c 100644
--- a/java/org/apache/naming/SelectorContext.java
+++ b/java/org/apache/naming/SelectorContext.java
@@ -117,7 +117,7 @@ public class SelectorContext implements Context {
      *
      * @param name the name of the object to look up
      * @return the object bound to name
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Object lookup(Name name)
@@ -140,7 +140,7 @@ public class SelectorContext implements Context {
      *
      * @param name the name of the object to look up
      * @return the object bound to name
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Object lookup(String name)
@@ -165,11 +165,11 @@ public class SelectorContext implements Context {
      *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
-     * @exception javax.naming.NameAlreadyBoundException if name is already
+     * @throws javax.naming.NameAlreadyBoundException if name is already
      * bound
-     * @exception javax.naming.directory.InvalidAttributesException if object did not
+     * @throws javax.naming.directory.InvalidAttributesException if object did not
      * supply all mandatory attributes
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void bind(Name name, Object obj)
@@ -183,11 +183,11 @@ public class SelectorContext implements Context {
      *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
-     * @exception javax.naming.NameAlreadyBoundException if name is already
+     * @throws javax.naming.NameAlreadyBoundException if name is already
      * bound
-     * @exception javax.naming.directory.InvalidAttributesException if object did not
+     * @throws javax.naming.directory.InvalidAttributesException if object did not
      * supply all mandatory attributes
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void bind(String name, Object obj)
@@ -207,9 +207,9 @@ public class SelectorContext implements Context {
      *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
-     * @exception javax.naming.directory.InvalidAttributesException if object did not
+     * @throws javax.naming.directory.InvalidAttributesException if object did not
      * supply all mandatory attributes
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void rebind(Name name, Object obj)
@@ -223,9 +223,9 @@ public class SelectorContext implements Context {
      *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
-     * @exception javax.naming.directory.InvalidAttributesException if object did not
+     * @throws javax.naming.directory.InvalidAttributesException if object did not
      * supply all mandatory attributes
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void rebind(String name, Object obj)
@@ -244,9 +244,9 @@ public class SelectorContext implements Context {
      * NameNotFoundException if any of the intermediate contexts do not exist.
      *
      * @param name the name to bind; may not be empty
-     * @exception javax.naming NameNotFoundException if an intermediate context
+     * @throws javax.naming.NameNotFoundException if an intermediate context
      * does not exist
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void unbind(Name name)
@@ -259,9 +259,9 @@ public class SelectorContext implements Context {
      * Unbinds the named object.
      *
      * @param name the name to bind; may not be empty
-     * @exception javax.naming NameNotFoundException if an intermediate context
+     * @throws javax.naming.NameNotFoundException if an intermediate context
      * does not exist
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void unbind(String name)
@@ -278,9 +278,9 @@ public class SelectorContext implements Context {
      *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
-     * @exception javax.naming.NameAlreadyBoundException if name is already
+     * @throws javax.naming.NameAlreadyBoundException if name is already
      * bound
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void rename(Name oldName, Name newName)
@@ -295,9 +295,9 @@ public class SelectorContext implements Context {
      *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
-     * @exception javax.naming.NameAlreadyBoundException if name is already
+     * @throws javax.naming.NameAlreadyBoundException if name is already
      * bound
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void rename(String oldName, String newName)
@@ -317,7 +317,7 @@ public class SelectorContext implements Context {
      * @param name the name of the context to list
      * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public NamingEnumeration<NameClassPair> list(Name name)
@@ -339,7 +339,7 @@ public class SelectorContext implements Context {
      * @param name the name of the context to list
      * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public NamingEnumeration<NameClassPair> list(String name)
@@ -365,7 +365,7 @@ public class SelectorContext implements Context {
      * @param name the name of the context to list
      * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public NamingEnumeration<Binding> listBindings(Name name)
@@ -387,7 +387,7 @@ public class SelectorContext implements Context {
      * @param name the name of the context to list
      * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public NamingEnumeration<Binding> listBindings(String name)
@@ -422,9 +422,9 @@ public class SelectorContext implements Context {
      * the foreign context's "native" naming system.
      *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception javax.naming NameNotFoundException if an intermediate context
+     * @throws javax.naming.NameNotFoundException if an intermediate context
      * does not exist
-     * @exception javax.naming.NotContextException if the name is bound but does
+     * @throws javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
      */
     @Override
@@ -438,9 +438,9 @@ public class SelectorContext implements Context {
      * Destroys the named context and removes it from the namespace.
      *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception javax.naming NameNotFoundException if an intermediate context
+     * @throws javax.naming.NameNotFoundException if an intermediate context
      * does not exist
-     * @exception javax.naming.NotContextException if the name is bound but does
+     * @throws javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
      */
     @Override
@@ -458,11 +458,11 @@ public class SelectorContext implements Context {
      *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
-     * @exception javax.naming.NameAlreadyBoundException if name is already
+     * @throws javax.naming.NameAlreadyBoundException if name is already
      * bound
-     * @exception javax.naming.directory.InvalidAttributesException if creation of the
+     * @throws javax.naming.directory.InvalidAttributesException if creation of the
      * sub-context requires specification of mandatory attributes
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Context createSubcontext(Name name)
@@ -476,11 +476,11 @@ public class SelectorContext implements Context {
      *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
-     * @exception javax.naming.NameAlreadyBoundException if name is already
+     * @throws javax.naming.NameAlreadyBoundException if name is already
      * bound
-     * @exception javax.naming.directory.InvalidAttributesException if creation of the
+     * @throws javax.naming.directory.InvalidAttributesException if creation of the
      * sub-context requires specification of mandatory attributes
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Context createSubcontext(String name)
@@ -497,7 +497,7 @@ public class SelectorContext implements Context {
      * @param name the name of the object to look up
      * @return the object bound to name, not following the terminal link
      * (if any).
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Object lookupLink(Name name)
@@ -519,7 +519,7 @@ public class SelectorContext implements Context {
      * @param name the name of the object to look up
      * @return the object bound to name, not following the terminal link
      * (if any).
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Object lookupLink(String name)
@@ -546,7 +546,7 @@ public class SelectorContext implements Context {
      * @param name the name of the context from which to get the parser
      * @return a name parser that can parse compound names into their atomic
      * components
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public NameParser getNameParser(Name name)
@@ -561,7 +561,7 @@ public class SelectorContext implements Context {
      * @param name the name of the context from which to get the parser
      * @return a name parser that can parse compound names into their atomic
      * components
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public NameParser getNameParser(String name)
@@ -583,7 +583,7 @@ public class SelectorContext implements Context {
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Name composeName(Name name, Name prefix)
@@ -599,7 +599,7 @@ public class SelectorContext implements Context {
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public String composeName(String name, String prefix)
@@ -615,7 +615,7 @@ public class SelectorContext implements Context {
      * @param propName the name of the environment property to add; may not
      * be null
      * @param propVal the value of the property to add; may not be null
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Object addToEnvironment(String propName, Object propVal)
@@ -629,7 +629,7 @@ public class SelectorContext implements Context {
      *
      * @param propName the name of the environment property to remove;
      * may not be null
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Object removeFromEnvironment(String propName)
@@ -646,7 +646,7 @@ public class SelectorContext implements Context {
      * may be changed using addToEnvironment() and removeFromEnvironment().
      *
      * @return the environment of this context; never null
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public Hashtable<?,?> getEnvironment()
@@ -663,7 +663,7 @@ public class SelectorContext implements Context {
      * been closed has no effect. Invoking any other method on a closed
      * context is not allowed, and results in undefined behaviour.
      *
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public void close()
@@ -685,9 +685,9 @@ public class SelectorContext implements Context {
      * OperationNotSupportedException is thrown.
      *
      * @return this context's name in its own namespace; never null
-     * @exception javax.naming.OperationNotSupportedException if the naming
+     * @throws javax.naming.OperationNotSupportedException if the naming
      * system does not have the notion of a full name
-     * @exception NamingException if a naming exception is encountered
+     * @throws NamingException if a naming exception is encountered
      */
     @Override
     public String getNameInNamespace()
@@ -735,7 +735,7 @@ public class SelectorContext implements Context {
      * Strips the URL header.
      *
      * @return the parsed name
-     * @exception NamingException if there is no "java:" header or if no
+     * @throws NamingException if there is no "java:" header or if no
      * naming context has been bound to this thread
      */
     protected String parseName(String name)
@@ -759,7 +759,7 @@ public class SelectorContext implements Context {
      * Strips the URL header.
      *
      * @return the parsed name
-     * @exception NamingException if there is no "java:" header or if no
+     * @throws NamingException if there is no "java:" header or if no
      * naming context has been bound to this thread
      */
     protected Name parseName(Name name)

==================================================
SendMailFactory.java
index 6ced130653..8de348363a 100644
--- a/java/org/apache/naming/factory/BeanFactory.java
+++ b/java/org/apache/naming/factory/BeanFactory.java
@@ -82,7 +82,7 @@ import org.apache.naming.ResourceRef;
  * &lt;/ResourceParams&gt;
  * </pre>
  *
- * @author <a href="mailto:aner at ncstech.com">Aner Perez</a>
+ * @author Aner Perez [aner at ncstech.com]
  */
 public class BeanFactory
     implements ObjectFactory {

==================================================
