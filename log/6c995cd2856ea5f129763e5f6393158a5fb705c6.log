6c995cd2856ea5f129763e5f6393158a5fb705c6
==================================================
Simplify ApplicationFilterFactory.
==================================================
Mark Thomas
==================================================
Sun Sep 13 16:57:06 2015 +0000
==================================================
ApplicationDispatcher.java
Simplify ApplicationFilterFactory.
It is a utility class so use static methods rather than going via a getInstance() method.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1702795 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationFilterFactory.java
index d97e2fb538..630b2170c9 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -708,9 +708,8 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         }
 
         // Get the FilterChain Here
-        ApplicationFilterFactory factory = ApplicationFilterFactory.getInstance();
-        ApplicationFilterChain filterChain = factory.createFilterChain(request,
-                                                                wrapper,servlet);
+        ApplicationFilterChain filterChain =
+                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);
 
         // Call the service() method for the allocated servlet instance
         try {

==================================================
StandardWrapperValve.java
index 9aec0860a9..3dbb9a280b 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -34,25 +34,8 @@ import org.apache.tomcat.util.descriptor.web.FilterMap;
  */
 public final class ApplicationFilterFactory {
 
-    private static ApplicationFilterFactory factory = null;
-
-
     private ApplicationFilterFactory() {
-        // Prevent instantiation outside of the getInstanceMethod().
-    }
-
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Return the factory instance.
-     */
-    public static ApplicationFilterFactory getInstance() {
-        if (factory == null) {
-            factory = new ApplicationFilterFactory();
-        }
-        return factory;
+        // Prevent instance creation. This is a utility class.
     }
 
 
@@ -63,8 +46,9 @@ public final class ApplicationFilterFactory {
      *
      * @param request The servlet request we are processing
      * @param servlet The servlet instance to be wrapped
+
      */
-    public ApplicationFilterChain createFilterChain
+    public static ApplicationFilterChain createFilterChain
         (ServletRequest request, Wrapper wrapper, Servlet servlet) {
 
         // get the dispatcher type
@@ -168,7 +152,7 @@ public final class ApplicationFilterFactory {
      * @param filterMap Filter mapping being checked
      * @param requestPath Context-relative request path of this request
      */
-    private boolean matchFiltersURL(FilterMap filterMap, String requestPath) {
+    private static boolean matchFiltersURL(FilterMap filterMap, String requestPath) {
 
         // Check the specific "*" special URL pattern, which also matches
         // named dispatches
@@ -201,7 +185,7 @@ public final class ApplicationFilterFactory {
      * @param testPath URL mapping being checked
      * @param requestPath Context-relative request path of this request
      */
-    private boolean matchFiltersURL(String testPath, String requestPath) {
+    private static boolean matchFiltersURL(String testPath, String requestPath) {
 
         if (testPath == null)
             return false;
@@ -252,7 +236,7 @@ public final class ApplicationFilterFactory {
      * @param filterMap Filter mapping being checked
      * @param servletName Servlet name being checked
      */
-    private boolean matchFiltersServlet(FilterMap filterMap,
+    private static boolean matchFiltersServlet(FilterMap filterMap,
                                         String servletName) {
 
         if (servletName == null) {
@@ -278,7 +262,7 @@ public final class ApplicationFilterFactory {
      * Convenience method which returns true if  the dispatcher type
      * matches the dispatcher types specified in the FilterMap
      */
-    private boolean matchDispatcher(FilterMap filterMap, DispatcherType type) {
+    private static boolean matchDispatcher(FilterMap filterMap, DispatcherType type) {
         switch (type) {
             case FORWARD :
                 if ((filterMap.getDispatcherMapping() & FilterMap.FORWARD) > 0) {

==================================================
