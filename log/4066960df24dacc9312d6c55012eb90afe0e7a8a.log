4066960df24dacc9312d6c55012eb90afe0e7a8a
==================================================
Implement modifyHandshake() call
==================================================
Mark Emlyn
==================================================
Tue Mar 19 13:00:43 2013 +0000
==================================================
WsHandshakeResponse.java
Implement modifyHandshake() call
Based on a patch by Nick Williams

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458263 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsSession.java
similarity index 50%
rename from java/org/apache/tomcat/websocket/WsRequest.java
rename to java/org/apache/tomcat/websocket/WsHandshakeResponse.java
index b01172026e..df2e271999 100644
--- a/java/org/apache/tomcat/websocket/WsRequest.java
+++ b/java/org/apache/tomcat/websocket/WsHandshakeResponse.java
@@ -16,42 +16,32 @@
  */
 package org.apache.tomcat.websocket;
 
-import java.net.URI;
-import java.security.Principal;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import javax.websocket.HandshakeResponse;
+
 /**
- * Represents the request that this session was opened under.
+ * Represents the response to a WebSocket handshake.
  */
-public class WsRequest {
-
-    private final URI requestURI;
-    private final Map<String,List<String>> parameterMap;
-    private final String queryString;
-    private final Principal userPrincipal;
-
-    public WsRequest(URI requestURI, Map<String,List<String>> parameterMap,
-            String queryString, Principal userPrincipal) {
-        this.requestURI = requestURI;
-        this.parameterMap = parameterMap;
-        this.queryString = queryString;
-        this.userPrincipal = userPrincipal;
-    }
+public class WsHandshakeResponse implements HandshakeResponse {
 
-    public URI getRequestURI() {
-        return requestURI;
-    }
+    private final Map<String,List<String>> headers;
 
-    public Map<String,List<String>> getRequestParameterMap() {
-        return parameterMap;
+
+    public WsHandshakeResponse() {
+        this(new HashMap<String,List<String>>());
     }
 
-    public String getQueryString() {
-        return queryString;
+
+    public WsHandshakeResponse(Map<String,List<String>> headers) {
+        this.headers = headers;
     }
 
-    public Principal getUserPrincipal() {
-        return userPrincipal;
+
+    @Override
+    public Map<String,List<String>> getHeaders() {
+        return headers;
     }
 }

==================================================
WsWebSocketContainer.java
index 1fea2fffc8..6c05a38f22 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -61,7 +61,11 @@ public class WsSession implements Session {
     private final RemoteEndpoint.Basic remoteEndpointBasic;
     private final ClassLoader applicationClassLoader;
     private final WsWebSocketContainer webSocketContainer;
-    private final WsRequest request;
+    private final URI requestUri;
+    private final Map<String,List<String>> requestParameterMap;
+    private final String queryString;
+    private final Principal userPrincipal;
+
     private final String subProtocol;
     private final Map<String,String> pathParameters;
     private final boolean secure;
@@ -93,9 +97,11 @@ public class WsSession implements Session {
     public WsSession(Endpoint localEndpoint,
             WsRemoteEndpointImplBase wsRemoteEndpoint,
             WsWebSocketContainer wsWebSocketContainer,
-            WsRequest request, String subProtocol,
+            URI requestUri, Map<String,List<String>> requestParameterMap,
+            String queryString, Principal userPrincipal, String subProtocol,
             Map<String,String> pathParameters,
-            boolean secure, List<Class<? extends Encoder>> encoders)
+            boolean secure, List<Class<? extends Encoder>> encoders,
+            Map<String,Object> userProperties)
                     throws DeploymentException {
         this.localEndpoint = localEndpoint;
         this.wsRemoteEndpoint = wsRemoteEndpoint;
@@ -112,12 +118,20 @@ public class WsSession implements Session {
                 webSocketContainer.getDefaultMaxTextMessageBufferSize();
         this.maxIdleTimeout =
                 webSocketContainer.getDefaultMaxSessionIdleTimeout();
-        this.request = request;
+        this.requestUri = requestUri;
+        if (requestParameterMap == null) {
+            this.requestParameterMap = Collections.EMPTY_MAP;
+        } else {
+            this.requestParameterMap = requestParameterMap;
+        }
+        this.queryString = queryString;
+        this.userPrincipal = userPrincipal;
         this.subProtocol = subProtocol;
         this.pathParameters = pathParameters;
         this.secure = secure;
         this.wsRemoteEndpoint.setEncoders(encoders);
 
+        this.userProperties.putAll(userProperties);
         this.id = Long.toHexString(ids.getAndIncrement());
     }
 
@@ -369,37 +383,25 @@ public class WsSession implements Session {
 
     @Override
     public URI getRequestURI() {
-        if (request == null) {
-            return null;
-        }
-        return request.getRequestURI();
+        return requestUri;
     }
 
 
     @Override
     public Map<String,List<String>> getRequestParameterMap() {
-        if (request == null) {
-            return Collections.EMPTY_MAP;
-        }
-        return request.getRequestParameterMap();
+        return requestParameterMap;
     }
 
 
     @Override
     public String getQueryString() {
-        if (request == null) {
-            return null;
-        }
-        return request.getQueryString();
+        return queryString;
     }
 
 
     @Override
     public Principal getUserPrincipal() {
-        if (request == null) {
-            return null;
-        }
-        return request.getUserPrincipal();
+        return userPrincipal;
     }
 
 

==================================================
WsHandshakeRequest.java
index d068dd0d05..7db624b51b 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -239,8 +239,10 @@ public class WsWebSocketContainer
 
 
         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,
-                this, null, subProtocol, Collections.EMPTY_MAP, false,
-                clientEndpointConfiguration.getEncoders());
+                this, null, null, null, null, subProtocol,
+                Collections.EMPTY_MAP, false,
+                clientEndpointConfiguration.getEncoders(),
+                clientEndpointConfiguration.getUserProperties());
         endpoint.onOpen(wsSession, clientEndpointConfiguration);
         registerSession(endpoint.getClass(), wsSession);
 
@@ -554,21 +556,6 @@ public class WsWebSocketContainer
         this.defaultAsyncTimeout = timeout;
     }
 
-    private static class WsHandshakeResponse implements HandshakeResponse {
-
-        private final Map<String,List<String>> headers;
-
-        public WsHandshakeResponse(Map<String,List<String>> headers) {
-            this.headers = headers;
-        }
-
-        @Override
-        public Map<String,List<String>> getHeaders() {
-            return headers;
-        }
-    }
-
-
     // ----------------------------------------------- BackgroundProcess methods
 
     @Override

==================================================
WsProtocolHandler.java
new file mode 100644
index 0000000000..3cef5a956a
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/server/WsHandshakeRequest.java
@@ -0,0 +1,139 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket.server;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.security.Principal;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.websocket.server.HandshakeRequest;
+
+/**
+ * Represents the request that this session was opened under.
+ */
+public class WsHandshakeRequest implements HandshakeRequest {
+
+    private volatile HttpServletRequest request;
+
+    public WsHandshakeRequest(HttpServletRequest request) {
+        this.request = request;
+    }
+
+    @Override
+    public URI getRequestURI() {
+        validate();
+        // Calculate every time as only likely to be zero or one calls
+        String queryString = request.getQueryString();
+
+        StringBuffer sb = request.getRequestURL();
+        if (queryString != null) {
+            sb.append("?");
+            sb.append(queryString);
+        }
+        URI requestURI;
+        try {
+            requestURI = new URI(sb.toString());
+        } catch (URISyntaxException e) {
+            throw new IllegalArgumentException(e);
+        }
+
+        return requestURI;
+    }
+
+    @Override
+    public Map<String,List<String>> getParameterMap() {
+        validate();
+
+        Map<String,String[]> originalParameters = request.getParameterMap();
+        Map<String,List<String>> newParameters =
+                new HashMap<>(originalParameters.size());
+        for (Entry<String,String[]> entry : originalParameters.entrySet()) {
+            newParameters.put(entry.getKey(),
+                    Collections.unmodifiableList(
+                            Arrays.asList(entry.getValue())));
+        }
+
+        return Collections.unmodifiableMap(newParameters);
+    }
+
+    @Override
+    public String getQueryString() {
+        validate();
+        return request.getQueryString();
+    }
+
+    @Override
+    public Principal getUserPrincipal() {
+        validate();
+        return request.getUserPrincipal();
+    }
+
+    @Override
+    public Map<String,List<String>> getHeaders() {
+        validate();
+
+        Map<String,List<String>> newHeaders = new HashMap<>();
+
+        Enumeration<String> headerNames = request.getHeaderNames();
+        while (headerNames.hasMoreElements()) {
+            String headerName = headerNames.nextElement();
+
+            newHeaders.put(headerName, Collections.unmodifiableList(
+                    Collections.list(request.getHeaders(headerName))));
+        }
+
+        return Collections.unmodifiableMap(newHeaders);
+    }
+
+    @Override
+    public boolean isUserInRole(String role) {
+        validate();
+        return request.isUserInRole(role);
+    }
+
+    @Override
+    public Object getHttpSession() {
+        validate();
+        return request.getSession(false);
+    }
+
+    /**
+     * Called when the HandshakeRequest is no longer required. Since an instance
+     * of this class retains a reference to the current HttpServletRequest that
+     * reference needs to be cleared as the HttpServletRequest may be reused.
+     *
+     * There is no reason for instances of this class to be accessed once the
+     * handshake has been completed.
+     */
+    void finished() {
+        request = null;
+    }
+
+    private void validate() {
+        if (request == null) {
+            throw new IllegalStateException();
+        }
+    }
+}

==================================================
WsServlet.java
index 72e020ee13..eb08f8d209 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -36,7 +36,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.WsIOException;
-import org.apache.tomcat.websocket.WsRequest;
 import org.apache.tomcat.websocket.WsSession;
 
 /**
@@ -53,7 +52,7 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
     private final EndpointConfig endpointConfig;
     private final ClassLoader applicationClassLoader;
     private final WsServerContainer webSocketContainer;
-    private final WsRequest request;
+    private final WsHandshakeRequest handshakeRequest;
     private final String subProtocol;
     private final Map<String,String> pathParameters;
     private final boolean secure;
@@ -62,12 +61,13 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
 
 
     public WsProtocolHandler(Endpoint ep, EndpointConfig endpointConfig,
-            WsServerContainer wsc, WsRequest request, String subProtocol,
-            Map<String,String> pathParameters, boolean secure) {
+            WsServerContainer wsc, WsHandshakeRequest handshakeRequest,
+            String subProtocol, Map<String,String> pathParameters,
+            boolean secure) {
         this.ep = ep;
         this.endpointConfig = endpointConfig;
         this.webSocketContainer = wsc;
-        this.request = request;
+        this.handshakeRequest = handshakeRequest;
         this.subProtocol = subProtocol;
         this.pathParameters = pathParameters;
         this.secure = secure;
@@ -96,8 +96,12 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
             WsRemoteEndpointImplServer wsRemoteEndpointServer =
                     new WsRemoteEndpointImplServer(sos, webSocketContainer);
             wsSession = new WsSession(ep, wsRemoteEndpointServer,
-                    webSocketContainer, request, subProtocol, pathParameters,
-                    secure, endpointConfig.getEncoders());
+                    webSocketContainer, handshakeRequest.getRequestURI(),
+                    handshakeRequest.getParameterMap(),
+                    handshakeRequest.getQueryString(),
+                    handshakeRequest.getUserPrincipal(), subProtocol,
+                    pathParameters, secure, endpointConfig.getEncoders(),
+                    endpointConfig.getUserProperties());
             WsFrameServer wsFrame = new WsFrameServer(
                     sis,
                     wsSession);

==================================================
