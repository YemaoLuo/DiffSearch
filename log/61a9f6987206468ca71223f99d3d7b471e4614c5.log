61a9f6987206468ca71223f99d3d7b471e4614c5
==================================================
Provide messages with exceptions
==================================================
Mark Emlyn
==================================================
Wed Jul 17 13:28:25 2013 +0000
==================================================
Optional.java
index d631e848f3..af0dd0a3b3 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -53,3 +53,7 @@ error.context.null=ELContext was null
 # Parser
 error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
 error.lambda.tooManyMethodParameterSets=There are more sets of method parameters specified than there are nested lambda expressions
+
+# Stream
+stream.optional.empty=It is illegal to call get() on an empty optional
+stream.compare.notComparable=Stream elements must implement Comparable
\ No newline at end of file

==================================================
Stream.java
index 511f19d3be..976fda4f17 100644
--- a/java/org/apache/el/stream/Optional.java
+++ b/java/org/apache/el/stream/Optional.java
@@ -19,6 +19,8 @@ package org.apache.el.stream;
 import javax.el.ELException;
 import javax.el.LambdaExpression;
 
+import org.apache.el.util.MessageFactory;
+
 public class Optional {
 
     private final Object obj;
@@ -32,7 +34,7 @@ public class Optional {
 
     public Object get() throws ELException {
         if (obj == null) {
-            throw new ELException();
+            throw new ELException(MessageFactory.get("stream.optional.empty"));
         } else {
             return obj;
         }

==================================================
