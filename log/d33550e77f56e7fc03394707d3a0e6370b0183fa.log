d33550e77f56e7fc03394707d3a0e6370b0183fa
==================================================
Add support (with tests) for read-only web resource sets.
==================================================
Mark Emlyn
==================================================
Wed Jan 15 14:31:57 2014 +0000
==================================================
WebResourceSet.java
Add support (with tests) for read-only web resource sets.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1558395 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractArchiveResourceSet.java
index 2a08610d86..1ca244b2f5 100644
--- a/java/org/apache/catalina/WebResourceSet.java
+++ b/java/org/apache/catalina/WebResourceSet.java
@@ -95,9 +95,9 @@ public interface WebResourceSet extends Lifecycle {
      * Are resources provided by this resource set only intended for use by
      * calls to {@link WebResourceRoot#getClassLoaderResource(String)}.
      *
-     * @return true if these resources should only be used for calls to
-     *         {@link WebResourceRoot#getClassLoaderResource(String)}, otherwise
-     *         false
+     * @return <code>true</code> if these resources should only be used for
+     *         calls to {@link WebResourceRoot#getClassLoaderResource(String)},
+     *         otherwise <code>false</code>
      */
     boolean getClassLoaderOnly();
 
@@ -109,4 +109,25 @@ public interface WebResourceSet extends Lifecycle {
      * manager.
      */
     URL getBaseUrl();
+
+    /**
+     * Configures whether or not this set of resources is read-only.
+     *
+     * @param readOnly <code>true</code> if this set of resources should be
+     *                 configured to be read-only
+     *
+     * @throws IllegalArgumentException if an attempt is made to configure a
+     *         {@link WebResourceSet} that is hard-coded to be read-only as
+     *         writable
+     */
+    void setReadOnly(boolean readOnly);
+
+    /**
+     * Obtains the current value of the read-only setting for this set of
+     * resources.
+     *
+     * @return <code>true</code> if this set of resources is configured to be
+     *         read-only, otherwise <code>false</code>
+     */
+    boolean isReadOnly();
 }

==================================================
AbstractFileResourceSet.java
index 4836bcd8bc..802000b12a 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -244,4 +244,20 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
 
     protected abstract WebResource createArchiveResource(JarEntry jarEntry,
             String webAppPath, Manifest manifest);
+
+    @Override
+    public final boolean isReadOnly() {
+        return true;
+    }
+
+    @Override
+    public void setReadOnly(boolean readOnly) {
+        if (readOnly) {
+            // This is the hard-coded default - ignore the call
+            return;
+        }
+
+        throw new IllegalArgumentException(
+                sm.getString("abstractArchiveResourceSet.setReadOnlyFalse"));
+    }
 }

==================================================
DirResourceSet.java
index 30f71e145e..c8090abfe1 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -31,6 +31,7 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
     private File fileBase;
     private String absoluteBase;
     private String canonicalBase;
+    private boolean readOnly = false;
 
     protected AbstractFileResourceSet(String internalPath) {
         setInternalPath(internalPath);
@@ -40,6 +41,16 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
         return fileBase;
     }
 
+    @Override
+    public void setReadOnly(boolean readOnly) {
+        this.readOnly = readOnly;
+    }
+
+    @Override
+    public boolean isReadOnly() {
+        return readOnly;
+    }
+
     protected final File file(String name, boolean mustExist) {
 
         if (name.equals("/")) {

==================================================
FileResource.java
index 5d4ab86873..e05223328f 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -102,7 +102,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
             if (f.isDirectory() && path.charAt(path.length() - 1) != '/') {
                 path = path += '/';
             }
-            return new FileResource(root, path, f);
+            return new FileResource(root, path, f, isReadOnly());
         } else {
             return new EmptyResource(root, path);
         }
@@ -183,6 +183,9 @@ public class DirResourceSet extends AbstractFileResourceSet {
     @Override
     public boolean mkdir(String path) {
         checkPath(path);
+        if (isReadOnly()) {
+            return false;
+        }
         String webAppMount = getWebAppMount();
         if (path.startsWith(webAppMount)) {
             File f = file(path.substring(webAppMount.length()), false);
@@ -204,6 +207,10 @@ public class DirResourceSet extends AbstractFileResourceSet {
                     sm.getString("dirResourceSet.writeNpe"));
         }
 
+        if (isReadOnly()) {
+            return false;
+        }
+
         File dest = null;
         String webAppMount = getWebAppMount();
         if (path.startsWith(webAppMount)) {

==================================================
FileResourceSet.java
index 11afeafd50..336d6869f0 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -42,9 +42,10 @@ public class FileResource extends AbstractResource {
 
     private final File resource;
     private final String name;
+    private final boolean readOnly;
 
     public FileResource(WebResourceRoot root, String webAppPath,
-            File resource) {
+            File resource, boolean readOnly) {
         super(root,webAppPath);
         this.resource = resource;
 
@@ -64,6 +65,8 @@ public class FileResource extends AbstractResource {
             // Must be a file
             name = resource.getName();
         }
+
+        this.readOnly = readOnly;
     }
 
     @Override
@@ -93,6 +96,9 @@ public class FileResource extends AbstractResource {
 
     @Override
     public boolean delete() {
+        if (readOnly) {
+            return false;
+        }
         return resource.delete();
     }
 

==================================================
AbstractTestDirResourceSet.java
index add9ce638a..2774e0cc99 100644
--- a/java/org/apache/catalina/webresources/LocalStrings.properties
+++ b/java/org/apache/catalina/webresources/LocalStrings.properties
@@ -13,6 +13,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+abstractArchiveResourceSet.setReadOnlyFalse=Archive based WebResourceSets such as those based on JARs are hard-coded to be read-only and may not be configured to be read-write
 abstractResource.getContentFail=Unable to return [{0}] as a byte array
 abstractResource.getContentTooLarge=Unable to return [{0}] as a byte array since the resource is [{1}] bytes in size which is larger than the maximum size of a byte array
 

==================================================
AbstractTestFileResourceSet.java
new file mode 100644
index 0000000000..3717f345dd
--- /dev/null
+++ b/test/org/apache/catalina/webresources/AbstractTestDirResourceSet.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.File;
+
+import org.junit.Test;
+
+import org.apache.catalina.WebResourceRoot;
+import org.apache.catalina.WebResourceSet;
+
+public abstract class AbstractTestDirResourceSet extends AbstractTestResourceSet {
+
+    private final boolean readOnly;
+
+    protected AbstractTestDirResourceSet(boolean readOnly) {
+        this.readOnly = readOnly;
+    }
+
+    @Override
+    public WebResourceRoot getWebResourceRoot() {
+        File f = new File(getBaseDir());
+        TesterWebResourceRoot root = new TesterWebResourceRoot();
+        WebResourceSet webResourceSet =
+                new DirResourceSet(new TesterWebResourceRoot(), "/",
+                        f.getAbsolutePath(), "/");
+        webResourceSet.setReadOnly(readOnly);
+        root.setMainResources(webResourceSet);
+        return root;
+    }
+
+    @Override
+    protected boolean isWriteable() {
+        return !readOnly;
+    }
+
+    @Override
+    public String getBaseDir() {
+        return "test/webresources/dir1";
+    }
+
+    @Override
+    @Test
+    public void testNoArgConstructor() {
+        @SuppressWarnings("unused")
+        Object obj = new DirResourceSet();
+    }
+}

==================================================
TestDirResourceSet.java
new file mode 100644
index 0000000000..0dda231537
--- /dev/null
+++ b/test/org/apache/catalina/webresources/AbstractTestFileResourceSet.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.File;
+
+import org.junit.Test;
+
+import org.apache.catalina.WebResourceRoot;
+import org.apache.catalina.WebResourceSet;
+
+public abstract class AbstractTestFileResourceSet extends AbstractTestResourceSet {
+
+    private final boolean readOnly;
+
+    protected AbstractTestFileResourceSet(boolean readOnly) {
+        this.readOnly = readOnly;
+    }
+
+    @Override
+    public WebResourceRoot getWebResourceRoot() {
+        File f = new File(getBaseDir());
+        TesterWebResourceRoot root = new TesterWebResourceRoot();
+        WebResourceSet webResourceSet =
+                new DirResourceSet(new TesterWebResourceRoot(), "/",
+                        f.getAbsolutePath(), "/");
+        webResourceSet.setReadOnly(readOnly);
+        root.setMainResources(webResourceSet);
+
+        WebResourceSet f1 = new FileResourceSet(root, "/f1.txt",
+                "test/webresources/dir1/f1.txt", "/");
+        f1.setReadOnly(readOnly);
+        root.addPreResources(f1);
+
+        WebResourceSet f2 = new FileResourceSet(root, "/f2.txt",
+                "test/webresources/dir1/f2.txt", "/");
+        f2.setReadOnly(readOnly);
+        root.addPreResources(f2);
+
+        WebResourceSet d1f1 = new FileResourceSet(root, "/d1/d1-f1.txt",
+                "test/webresources/dir1/d1/d1-f1.txt", "/");
+        d1f1.setReadOnly(readOnly);
+        root.addPreResources(d1f1);
+
+        WebResourceSet d2f1 = new FileResourceSet(root, "/d2/d2-f1.txt",
+                "test/webresources/dir1/d2/d2-f1.txt", "/");
+        d2f1.setReadOnly(readOnly);
+        root.addPreResources(d2f1);
+
+        return root;
+    }
+
+    @Override
+    protected boolean isWriteable() {
+        return !readOnly;
+    }
+
+    @Override
+    public String getBaseDir() {
+        return "test/webresources/dir2";
+    }
+
+    @Override
+    @Test
+    public void testNoArgConstructor() {
+        @SuppressWarnings("unused")
+        Object obj = new FileResourceSet();
+    }
+}

==================================================
TestDirResourceSetReadOnly.java
index dc7453cf3a..7c4ccfcd56 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSet.java
@@ -16,40 +16,9 @@
  */
 package org.apache.catalina.webresources;
 
-import java.io.File;
+public class TestDirResourceSet extends AbstractTestDirResourceSet {
 
-import org.junit.Test;
-
-import org.apache.catalina.WebResourceRoot;
-import org.apache.catalina.WebResourceSet;
-
-public class TestDirResourceSet extends AbstractTestResourceSet {
-
-    @Override
-    public WebResourceRoot getWebResourceRoot() {
-        File f = new File(getBaseDir());
-        TesterWebResourceRoot root = new TesterWebResourceRoot();
-        WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(), "/",
-                        f.getAbsolutePath(), "/");
-        root.setMainResources(webResourceSet);
-        return root;
-    }
-
-    @Override
-    protected boolean isWriteable() {
-        return true;
-    }
-
-    @Override
-    public String getBaseDir() {
-        return "test/webresources/dir1";
-    }
-
-    @Override
-    @Test
-    public void testNoArgConstructor() {
-        @SuppressWarnings("unused")
-        Object obj = new DirResourceSet();
+    public TestDirResourceSet() {
+        super(false);
     }
 }

==================================================
TestFileResourceSet.java
new file mode 100644
index 0000000000..8b67e34e13
--- /dev/null
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetReadOnly.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+public class TestDirResourceSetReadOnly extends AbstractTestDirResourceSet {
+
+    public TestDirResourceSetReadOnly() {
+        super(true);
+    }
+}

==================================================
TestFileResourceSetReadOnly.java
index 200dc2ec91..5a0829d837 100644
--- a/test/org/apache/catalina/webresources/TestFileResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestFileResourceSet.java
@@ -16,57 +16,9 @@
  */
 package org.apache.catalina.webresources;
 
-import java.io.File;
+public class TestFileResourceSet extends AbstractTestFileResourceSet {
 
-import org.junit.Test;
-
-import org.apache.catalina.WebResourceRoot;
-import org.apache.catalina.WebResourceSet;
-
-public class TestFileResourceSet extends AbstractTestResourceSet {
-
-    @Override
-    public WebResourceRoot getWebResourceRoot() {
-        File f = new File(getBaseDir());
-        TesterWebResourceRoot root = new TesterWebResourceRoot();
-        WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(), "/",
-                        f.getAbsolutePath(), "/");
-        root.setMainResources(webResourceSet);
-
-        WebResourceSet f1 = new FileResourceSet(root, "/f1.txt",
-                "test/webresources/dir1/f1.txt", "/");
-        root.addPreResources(f1);
-
-        WebResourceSet f2 = new FileResourceSet(root, "/f2.txt",
-                "test/webresources/dir1/f2.txt", "/");
-        root.addPreResources(f2);
-
-        WebResourceSet d1f1 = new FileResourceSet(root, "/d1/d1-f1.txt",
-                "test/webresources/dir1/d1/d1-f1.txt", "/");
-        root.addPreResources(d1f1);
-
-        WebResourceSet d2f1 = new FileResourceSet(root, "/d2/d2-f1.txt",
-                "test/webresources/dir1/d2/d2-f1.txt", "/");
-        root.addPreResources(d2f1);
-
-        return root;
-    }
-
-    @Override
-    protected boolean isWriteable() {
-        return true;
-    }
-
-    @Override
-    public String getBaseDir() {
-        return "test/webresources/dir2";
-    }
-
-    @Override
-    @Test
-    public void testNoArgConstructor() {
-        @SuppressWarnings("unused")
-        Object obj = new FileResourceSet();
+    public TestFileResourceSet() {
+        super(false);
     }
-}
+}
\ No newline at end of file

==================================================
