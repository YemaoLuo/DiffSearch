b1712fb464bf24b530021f594f5a1aeadb1d228c
==================================================
Add simple implementations that can use used, via configuration, when working with 3rd-party providers that only provide a ServerAuthModule implementation.
==================================================
Mark Thomas
==================================================
Tue Feb 16 20:47:09 2016 +0000
==================================================
SimpleAuthConfigProvider.java
index 368ed2c9a9..ac4b956aed 100644
--- a/java/org/apache/catalina/authenticator/jaspic/LocalStrings.properties
+++ b/java/org/apache/catalina/authenticator/jaspic/LocalStrings.properties
@@ -23,4 +23,6 @@ jaspicAuthenticator.authenticate=Authenticating request for [{0}] via JASPIC
 
 persistentProviderRegistrations.deleteFail=The temporary file [{0}] cannot be deleted
 persistentProviderRegistrations.existsDeleteFail=The temporary file [{0}] already exists and cannot be deleted
-persistentProviderRegistrations.moveFail=Failed to move [{0}] to [{1}]
\ No newline at end of file
+persistentProviderRegistrations.moveFail=Failed to move [{0}] to [{1}]
+
+simpleServerAuthConfig.noModules="No ServerAuthModules configured"
\ No newline at end of file

==================================================
SimpleServerAuthConfig.java
new file mode 100644
index 0000000000..476e97822c
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleAuthConfigProvider.java
@@ -0,0 +1,89 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic;
+
+import java.util.Map;
+
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.config.AuthConfigFactory;
+import javax.security.auth.message.config.AuthConfigProvider;
+import javax.security.auth.message.config.ClientAuthConfig;
+import javax.security.auth.message.config.ServerAuthConfig;
+
+/**
+ * Basic implementation primarily intended for use when using third-party
+ * {@link javax.security.auth.message.module.ServerAuthModule} implementations
+ * that only provide the module.
+ */
+public class SimpleAuthConfigProvider implements AuthConfigProvider {
+
+    private final Map<String,String> properties;
+
+    private volatile ServerAuthConfig serverAuthConfig;
+
+    public SimpleAuthConfigProvider(Map<String,String> properties, AuthConfigFactory factory) {
+        this.properties = properties;
+        if (factory != null) {
+            factory.registerConfigProvider(this, null, null, "Automatic registration");
+        }
+    }
+
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * This implementation does not support client-side authentication and
+     * therefore always returns {@code null}.
+     */
+    @Override
+    public ClientAuthConfig getClientAuthConfig(String layer, String appContext,
+            CallbackHandler handler) throws AuthException {
+        return null;
+    }
+
+
+    @Override
+    public ServerAuthConfig getServerAuthConfig(String layer, String appContext,
+            CallbackHandler handler) throws AuthException {
+        ServerAuthConfig serverAuthConfig = this.serverAuthConfig;
+        if (serverAuthConfig == null) {
+            synchronized (this) {
+                if (this.serverAuthConfig == null) {
+                    this.serverAuthConfig = createServerAuthConfig(layer, appContext, handler, properties);
+                }
+                serverAuthConfig = this.serverAuthConfig;
+            }
+        }
+        return serverAuthConfig;
+    }
+
+
+    protected ServerAuthConfig createServerAuthConfig(String layer, String appContext,
+            CallbackHandler handler, Map<String,String> properties) {
+        return new SimpleServerAuthConfig(layer, appContext, handler, properties);
+    }
+
+
+    @Override
+    public void refresh() {
+        ServerAuthConfig serverAuthConfig = this.serverAuthConfig;
+        if (serverAuthConfig != null) {
+            serverAuthConfig.refresh();
+        }
+    }
+}

==================================================
SimpleServerAuthContext.java
new file mode 100644
index 0000000000..fcf6f78073
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
@@ -0,0 +1,150 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.MessageInfo;
+import javax.security.auth.message.config.ServerAuthConfig;
+import javax.security.auth.message.config.ServerAuthContext;
+import javax.security.auth.message.module.ServerAuthModule;
+
+import org.apache.tomcat.util.res.StringManager;
+
+/**
+ * Basic implementation primarily intended for use when using third-party
+ * {@link ServerAuthModule} implementations that only provide the module. This
+ * implementation supports configuring the {@link ServerAuthContext} with
+ * multiple modules.
+ */
+public class SimpleServerAuthConfig implements ServerAuthConfig {
+
+    private static StringManager sm = StringManager.getManager(SimpleServerAuthConfig.class);
+
+    private static final String SERVER_AUTH_MODULE_KEY_PREFIX =
+            "org.apache.catalina.authenticator.jaspic.ServerAuthModule.";
+
+    private final String layer;
+    private final String appContext;
+    private final CallbackHandler handler;
+    private final Map<String,String> properties;
+
+    private volatile ServerAuthContext serverAuthContext;
+
+    public SimpleServerAuthConfig(String layer, String appContext, CallbackHandler handler,
+            Map<String,String> properties) {
+        this.layer = layer;
+        this.appContext = appContext;
+        this.handler = handler;
+        this.properties = properties;
+    }
+
+
+    @Override
+    public String getMessageLayer() {
+        return layer;
+    }
+
+
+    @Override
+    public String getAppContext() {
+        return appContext;
+    }
+
+
+    @Override
+    public String getAuthContextID(MessageInfo messageInfo) {
+        return messageInfo.toString();
+    }
+
+
+    @Override
+    public void refresh() {
+        serverAuthContext = null;
+    }
+
+
+    @Override
+    public boolean isProtected() {
+        return false;
+    }
+
+
+    @SuppressWarnings({"rawtypes", "unchecked"}) // JASPIC API uses raw types
+    @Override
+    public ServerAuthContext getAuthContext(String authContextID, Subject serviceSubject,
+            Map properties) throws AuthException {
+        ServerAuthContext serverAuthContext = this.serverAuthContext;
+        if (serverAuthContext == null) {
+            synchronized (this) {
+                if (this.serverAuthContext == null) {
+                    Map<String,String> mergedProperties = new HashMap<>();
+                    if (this.properties != null) {
+                        mergedProperties.putAll(this.properties);
+                    }
+                    if (properties == null) {
+                        throw new AuthException(sm.getString("simpleServerAuthConfig.noModules"));
+                    } else {
+                        mergedProperties.putAll(properties);
+                    }
+
+                    List<ServerAuthModule> modules = new ArrayList<>();
+                    int moduleIndex = 1;
+                    String key = SERVER_AUTH_MODULE_KEY_PREFIX + moduleIndex;
+                    String moduleClassName = (String) properties.get(key);
+                    while (moduleClassName != null) {
+                        try {
+                            Class<?> clazz = Class.forName(moduleClassName);
+                            ServerAuthModule module = (ServerAuthModule) clazz.newInstance();
+                            module.initialize(null, null, handler, mergedProperties);
+                            modules.add(module);
+                        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+                            AuthException ae = new AuthException();
+                            ae.initCause(e);
+                            throw ae;
+                        }
+
+                        // Look for the next module
+                        moduleIndex++;
+                        key = SERVER_AUTH_MODULE_KEY_PREFIX + moduleIndex;
+                        moduleClassName = (String) properties.get(key);
+                    }
+
+                    if (modules.size() == 0) {
+                        throw new AuthException(sm.getString("simpleServerAuthConfig.noModules"));
+                    }
+
+                    this.serverAuthContext = createServerAuthContext(modules);
+                }
+                serverAuthContext = this.serverAuthContext;
+            }
+        }
+
+        return serverAuthContext;
+    }
+
+
+    protected ServerAuthContext createServerAuthContext(List<ServerAuthModule> modules) {
+        return new SimpleServerAuthContext(modules);
+    }
+}

==================================================
