b19324022b790cfc4126c723918e0bdfd49a5f34
==================================================
Remove unused code.
==================================================
Violeta Georgieva
==================================================
Thu Oct 6 12:18:01 2016 +0000
==================================================
InputBuffer.java
Remove unused code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1763571 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 0aa17bcab7..6e5e9d51b7 100644
--- a/java/org/apache/coyote/InputBuffer.java
+++ b/java/org/apache/coyote/InputBuffer.java
@@ -18,7 +18,6 @@ package org.apache.coyote;
 
 import java.io.IOException;
 
-import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.net.ApplicationBufferHandler;
 
 /**
@@ -27,24 +26,6 @@ import org.apache.tomcat.util.net.ApplicationBufferHandler;
  */
 public interface InputBuffer {
 
-    /**
-     * Read from the input stream into the given buffer.
-     * IMPORTANT: the current model assumes that the protocol will 'own' the
-     * buffer and return a pointer to it in ByteChunk (i.e. the param will
-     * have chunk.getBytes()==null before call, and the result after the call).
-     *
-     * @param chunk The buffer to read data into.
-     *
-     * @return The number of bytes that have been added to the buffer or -1 for
-     *         end of stream
-     *
-     * @throws IOException If an I/O error occurs reading from the input stream
-     *
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    public int doRead(ByteChunk chunk) throws IOException;
-
     /**
      * Read from the input stream into the ByteBuffer provided by the
      * ApplicaitonBufferHandler.

==================================================
AjpProcessor.java
index 2598d5989b..6d82ac91ce 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -23,7 +23,6 @@ import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.servlet.ReadListener;
 
-import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.http.MimeHeaders;
@@ -492,34 +491,6 @@ public final class Request {
     }
 
 
-    /**
-     * Read data from the input buffer and put it into a byte chunk.
-     *
-     * The buffer is owned by the protocol implementation - it will be reused on
-     * the next read. The Adapter must either process the data in place or copy
-     * it to a separate buffer if it needs to hold it. In most cases this is
-     * done during byte-&gt;char conversions or via InputStream. Unlike
-     * InputStream, this interface allows the app to process data in place,
-     * without copy.
-     *
-     * @param chunk The destination to which to copy the data
-     *
-     * @return The number of bytes copied
-     *
-     * @throws IOException If an I/O error occurs during the copy
-     *
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    public int doRead(ByteChunk chunk) throws IOException {
-        int n = inputBuffer.doRead(chunk);
-        if (n > 0) {
-            bytesRead+=n;
-        }
-        return n;
-    }
-
-
     /**
      * Read data from the input buffer and put it into ApplicationBufferHandler.
      *

==================================================
Http11InputBuffer.java
index a33b6992d7..0b05e8c284 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1352,27 +1352,6 @@ public class AjpProcessor extends AbstractProcessor {
      */
     protected class SocketInputBuffer implements InputBuffer {
 
-        /**
-         * @deprecated Unused. Will be removed in Tomcat 9. Use
-         *             {@link #doRead(ApplicationBufferHandler)}
-         */
-        @Override
-        public int doRead(ByteChunk chunk) throws IOException {
-
-            if (endOfStream) {
-                return -1;
-            }
-            if (empty) {
-                if (!refillReadBuffer(true)) {
-                    return -1;
-                }
-            }
-            ByteChunk bc = bodyBytes.getByteChunk();
-            chunk.setBytes(bc.getBuffer(), bc.getStart(), bc.getLength());
-            empty = true;
-            return chunk.getLength();
-        }
-
         @Override
         public int doRead(ApplicationBufferHandler handler) throws IOException {
 

==================================================
BufferedInputFilter.java
index 5afc3965ae..c6a217a3b0 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -25,7 +25,6 @@ import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.ApplicationBufferHandler;
@@ -282,20 +281,6 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
 
     // ---------------------------------------------------- InputBuffer Methods
 
-    /**
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    @Override
-    public int doRead(ByteChunk chunk) throws IOException {
-
-        if (lastActiveFilter == -1)
-            return inputStreamInputBuffer.doRead(chunk);
-        else
-            return activeFilters[lastActiveFilter].doRead(chunk);
-
-    }
-
     @Override
     public int doRead(ApplicationBufferHandler handler) throws IOException {
 
@@ -1071,28 +1056,6 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
      */
     private class SocketInputBuffer implements InputBuffer {
 
-        /**
-         *
-         * @deprecated Unused. Will be removed in Tomcat 9. Use
-         *             {@link #doRead(ApplicationBufferHandler)}
-         */
-        @Override
-        public int doRead(ByteChunk chunk) throws IOException {
-
-            if (byteBuffer.position() >= byteBuffer.limit()) {
-                // The application is reading the HTTP request body which is
-                // always a blocking operation.
-                if (!fill(true))
-                    return -1;
-            }
-
-            int length = byteBuffer.remaining();
-            chunk.setBytes(byteBuffer.array(), byteBuffer.position(), length);
-            byteBuffer.position(byteBuffer.limit());
-
-            return length;
-        }
-
         @Override
         public int doRead(ApplicationBufferHandler handler) throws IOException {
 

==================================================
ChunkedInputFilter.java
index 927e881a07..1784cf3d01 100644
--- a/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
@@ -96,24 +96,6 @@ public class BufferedInputFilter implements InputFilter, ApplicationBufferHandle
         }
     }
 
-    /**
-     * Fills the given ByteChunk with the buffered request body.
-     *
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    @Override
-    public int doRead(ByteChunk chunk) throws IOException {
-        if (isFinished()) {
-            return -1;
-        }
-
-        chunk.setBytes(buffered.array(), buffered.arrayOffset() + buffered.position(),
-                buffered.remaining());
-        hasRead = true;
-        return chunk.getLength();
-    }
-
     /**
      * Fills the given ByteBuffer with the buffered request body.
      */

==================================================
IdentityInputFilter.java
index 80b32fe797..b964600415 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -148,64 +148,6 @@ public class ChunkedInputFilter implements InputFilter, ApplicationBufferHandler
 
     // ---------------------------------------------------- InputBuffer Methods
 
-    /**
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    @Override
-    public int doRead(ByteChunk chunk) throws IOException {
-        if (endChunk) {
-            return -1;
-        }
-
-        checkError();
-
-        if(needCRLFParse) {
-            needCRLFParse = false;
-            parseCRLF(false);
-        }
-
-        if (remaining <= 0) {
-            if (!parseChunkHeader()) {
-                throwIOException(sm.getString("chunkedInputFilter.invalidHeader"));
-            }
-            if (endChunk) {
-                parseEndChunk();
-                return -1;
-            }
-        }
-
-        int result = 0;
-
-        if (readChunk == null || readChunk.position() >= readChunk.limit()) {
-            if (readBytes() < 0) {
-                throwIOException(sm.getString("chunkedInputFilter.eos"));
-            }
-        }
-
-        if (remaining > readChunk.remaining()) {
-            result = readChunk.remaining();
-            remaining = remaining - result;
-            chunk.setBytes(readChunk.array(), readChunk.arrayOffset() + readChunk.position(), result);
-            readChunk.position(readChunk.limit());
-        } else {
-            result = remaining;
-            chunk.setBytes(readChunk.array(), readChunk.arrayOffset() + readChunk.position(), remaining);
-            readChunk.position(readChunk.position() + remaining);
-            remaining = 0;
-            //we need a CRLF
-            if ((readChunk.position() + 1) >= readChunk.limit()) {
-                //if we call parseCRLF we overrun the buffer here
-                //so we defer it to the next call BZ 11117
-                needCRLFParse = true;
-            } else {
-                parseCRLF(false); //parse the CRLF immediately
-            }
-        }
-
-        return result;
-    }
-
     @Override
     public int doRead(ApplicationBufferHandler handler) throws IOException {
         if (endChunk) {

==================================================
SavedRequestInputFilter.java
index b52a5314ef..0a69cf531b 100644
--- a/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
@@ -92,43 +92,6 @@ public class IdentityInputFilter implements InputFilter, ApplicationBufferHandle
 
     // ---------------------------------------------------- InputBuffer Methods
 
-    /**
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    @Override
-    public int doRead(ByteChunk chunk) throws IOException {
-
-        int result = -1;
-
-        if (contentLength >= 0) {
-            if (remaining > 0) {
-                int nRead = buffer.doRead(chunk);
-                if (nRead > remaining) {
-                    // The chunk is longer than the number of bytes remaining
-                    // in the body; changing the chunk length to the number
-                    // of bytes remaining
-                    chunk.setBytes(chunk.getBytes(), chunk.getStart(),
-                                   (int) remaining);
-                    result = (int) remaining;
-                } else {
-                    result = nRead;
-                }
-                if (nRead > 0) {
-                    remaining = remaining - nRead;
-                }
-            } else {
-                // No more bytes left to be read : return -1 and clear the
-                // buffer
-                chunk.recycle();
-                result = -1;
-            }
-        }
-
-        return result;
-
-    }
-
     @Override
     public int doRead(ApplicationBufferHandler handler) throws IOException {
 

==================================================
VoidInputFilter.java
index ec5d40aa4a..d27c8da63c 100644
--- a/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
@@ -45,30 +45,6 @@ public class SavedRequestInputFilter implements InputFilter {
         this.input = input;
     }
 
-    /**
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    @Override
-    public int doRead(ByteChunk chunk) throws IOException {
-        if(input.getOffset()>= input.getEnd())
-            return -1;
-
-        int writeLength = 0;
-
-        if (chunk.getLimit() > 0 && chunk.getLimit() < input.getLength()) {
-            writeLength = chunk.getLimit();
-        } else {
-            writeLength = input.getLength();
-        }
-
-        input.substract(chunk.getBuffer(), 0, writeLength);
-        chunk.setOffset(0);
-        chunk.setEnd(writeLength);
-
-        return writeLength;
-    }
-
     @Override
     public int doRead(ApplicationBufferHandler handler) throws IOException {
         if(input.getOffset()>= input.getEnd())

==================================================
Stream.java
index 057145af69..0784d7bd01 100644
--- a/java/org/apache/coyote/http11/filters/VoidInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidInputFilter.java
@@ -50,15 +50,6 @@ public class VoidInputFilter implements InputFilter {
 
     // ---------------------------------------------------- InputBuffer Methods
 
-    /**
-     * @deprecated Unused. Will be removed in Tomcat 9. Use
-     *             {@link #doRead(ApplicationBufferHandler)}
-     */
-    @Override
-    public int doRead(ByteChunk chunk) throws IOException {
-        return -1;
-    }
-
     @Override
     public int doRead(ApplicationBufferHandler handler) throws IOException {
         return -1;

==================================================
