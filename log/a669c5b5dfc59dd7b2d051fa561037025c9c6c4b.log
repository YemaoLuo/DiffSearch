a669c5b5dfc59dd7b2d051fa561037025c9c6c4b
==================================================
Switch the Http2UpgradeHandler to using ConnectionSettingsLocal
==================================================
Mark Thomas
==================================================
Tue Aug 18 17:06:22 2015 +0000
==================================================
ConnectionSettingsRemote.java
Switch the Http2UpgradeHandler to using ConnectionSettingsLocal
Fix TODO for sending non-default values in initial settings frame including updating tests
 

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1696459 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index 5e392758a1..4be78a38ed 100644
--- a/java/org/apache/coyote/http2/ConnectionSettingsRemote.java
+++ b/java/org/apache/coyote/http2/ConnectionSettingsRemote.java
@@ -20,6 +20,10 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
+/**
+ * Represents the remote connection settings: i.e. the settings the server must
+ * use when communicating with the client.
+ */
 public class ConnectionSettingsRemote {
 
     private final Log log = LogFactory.getLog(ConnectionSettingsRemote.class);

==================================================
Http2TestBase.java
index 7d0a1a92e1..76971978a9 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -115,7 +115,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     private volatile long pausedNanoTime = Long.MAX_VALUE;
 
     private final ConnectionSettingsRemote remoteSettings = new ConnectionSettingsRemote();
-    private final ConnectionSettingsRemote localSettings = new ConnectionSettingsRemote();
+    private final ConnectionSettingsLocal localSettings = new ConnectionSettingsLocal();
 
     private HpackDecoder hpackDecoder;
     private HpackEncoder hpackEncoder;
@@ -205,9 +205,9 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
         }
 
         // Send the initial settings frame
-        // TODO: Need to send non-default settings values
         try {
-            socketWrapper.write(true, SETTINGS_EMPTY, 0, SETTINGS_EMPTY.length);
+            byte[] settings = localSettings.getSettingsFrameForPending();
+            socketWrapper.write(true, settings, 0, settings.length);
             socketWrapper.flush(true);
         } catch (IOException ioe) {
             throw new IllegalStateException(sm.getString("upgradeHandler.sendPrefaceFail"), ioe);
@@ -810,25 +810,13 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     }
 
 
-    /*
-     * This only has an effect if called before the connection is established
-     */
     public void setMaxConcurrentStreams(long maxConcurrentStreams) {
         localSettings.setMaxConcurrentStreams(maxConcurrentStreams);
     }
 
 
-    /*
-     * This only has an effect if called before the connection is established
-     */
     public void setInitialWindowSize(int initialWindowSize) {
-        try {
-            localSettings.setInitialWindowSize(initialWindowSize);
-        } catch (ConnectionException e) {
-            // Illegal setting. Ignore it but log a warning.
-            log.warn(sm.getString("upgradeHandler.initialWindowSize.invalid",
-                    connectionId, Integer.toString(initialWindowSize)));
-        }
+        localSettings.setInitialWindowSize(initialWindowSize);
     }
 
 
@@ -995,7 +983,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     @Override
     public void settingsEnd(boolean ack) throws IOException {
         if (ack) {
-            // TODO Process ACK
+            localSettings.ack();
         } else {
             synchronized (socketWrapper) {
                 socketWrapper.write(true, SETTINGS_ACK, 0, SETTINGS_ACK.length);

==================================================
TestHttp2Section_5_1.java
index 8c47d7c8c6..9b537f8785 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -92,9 +92,10 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
     protected void validateHttp2InitialResponse() throws Exception {
         // - 101 response acts as acknowledgement of the HTTP2-Settings header
-        // Need to read 4 frames
+        // Need to read 5 frames
         // - settings (server settings - must be first)
         // - settings ack (for the settings frame in the client preface)
+        // - ping
         // - headers (for response)
         // - data (for response body)
         parser.readFrame(true);
@@ -103,7 +104,8 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         parser.readFrame(true);
         parser.readFrame(true);
 
-        Assert.assertEquals("0-Settings-End\n" +
+        Assert.assertEquals("0-Settings-[3]-[200]\n" +
+                "0-Settings-End\n" +
                 "0-Settings-Ack\n" +
                 "0-Ping-[0,0,0,0,0,0,0,1]\n" +
                 getSimpleResponseTrace(1)
@@ -596,9 +598,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
     void sendSettings(int streamId, boolean ack, Setting... settings) throws IOException {
-        byte[] settingFrame = new byte[15];
         // length
-
         int settingsCount;
         if (settings == null) {
             settingsCount = 0;
@@ -606,6 +606,8 @@ public abstract class Http2TestBase extends TomcatBaseTest {
             settingsCount = settings.length;
         }
 
+        byte[] settingFrame = new byte[9 + 6 * settingsCount];
+
         ByteUtil.setThreeBytes(settingFrame, 0, 6 * settingsCount);
         // type
         settingFrame[3] = FrameType.SETTINGS.getIdByte();
@@ -732,6 +734,12 @@ public abstract class Http2TestBase extends TomcatBaseTest {
                 trace.append("0-Settings-Ack\n");
             } else {
                 trace.append("0-Settings-End\n");
+                try {
+                    sendSettings(0,  true);
+                } catch (IOException ioe) {
+                    // Convert to uncaught exception
+                    throw new IllegalStateException(ioe);
+                }
             }
         }
 

==================================================
