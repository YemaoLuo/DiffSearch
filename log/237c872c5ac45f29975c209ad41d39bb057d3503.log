237c872c5ac45f29975c209ad41d39bb057d3503
==================================================
Lifecycle refactoring
==================================================
Mark Emlyn
==================================================
Fri Mar 5 14:49:39 2010 +0000
==================================================
VirtualWebappLoader.java
Lifecycle refactoring
o.a.c.loader - Note WebappClassloader only has a stubbed Lifecycle implementation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@919434 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index 49ba01f61f..d60fa97001 100644
--- a/java/org/apache/catalina/loader/VirtualWebappLoader.java
+++ b/java/org/apache/catalina/loader/VirtualWebappLoader.java
@@ -20,6 +20,7 @@ import java.io.File;
 import java.util.StringTokenizer;
 
 import org.apache.catalina.LifecycleException;
+import org.apache.catalina.util.LifecycleBase;
 
 /**
  * Simple webapp classloader that allows a customized classpath to be added
@@ -80,8 +81,15 @@ public class VirtualWebappLoader extends WebappLoader {
         virtualClasspath = path;
     }
 
+    /**
+     * Implement the requirements
+     * of {@link LifecycleBase#startInternal()}.
+     *
+     * @exception LifecycleException if this component detects a fatal error
+     *  that prevents this component from being used
+     */
     @Override
-    public void start() throws LifecycleException {
+    protected void startInternal() throws LifecycleException {
 
         // just add any jar/directory set in virtual classpath to the
         // repositories list before calling start on the standard WebappLoader
@@ -94,7 +102,7 @@ public class VirtualWebappLoader extends WebappLoader {
             addRepository(file.toURI().toString());
         }
 
-        super.start();
+        super.startInternal();
     }
 
 }

==================================================
WebappLoader.java
index 0736f5c526..cf7b19e941 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -68,6 +68,7 @@ import org.apache.catalina.Globals;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.LifecycleState;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.jasper.servlet.JasperLoader;
 import org.apache.naming.JndiPermission;
@@ -107,6 +108,9 @@ import org.apache.tomcat.util.IntrospectionUtils;
  * <p>
  * <strong>IMPLEMENTATION NOTE</strong> - No check for sealing violations or
  * security is made unless a security manager is present.
+ * <p>
+ * TODO: Is there any requirement to provide a proper Lifecycle implementation
+ *       rather than the current stubbed implementation?
  *
  * @author Remy Maucherat
  * @author Craig R. McClanahan
@@ -1640,6 +1644,16 @@ public class WebappClassLoader
     }
 
 
+    /**
+     * Obtain the current state of the source component.
+     * 
+     * @return The current state of the source component.
+     */
+    public LifecycleState getState() {
+        return LifecycleState.NEW;
+    }
+
+
     /**
      * Start the class loader.
      *

==================================================
