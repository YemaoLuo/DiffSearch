f1ca273fe2698084237cae1c355771484ade0eff
==================================================
Fix remaining SpotBugs failures in the test code when the rank is set to 16
==================================================
Mark Thomas
==================================================
Fri Oct 13 16:50:39 2017 +0000
==================================================
TestNonBlockingAPI.java
index bdcb11f29e..c467f9ddd2 100644
--- a/res/findbugs/filter-false-positives.xml
+++ b/res/findbugs/filter-false-positives.xml
@@ -1182,6 +1182,12 @@
     <Method name="testNoArgConstructor" />
     <Bug pattern="DLS_DEAD_LOCAL_STORE"/>
   </Match>
+  <Match>
+    <!-- Result is negated to compare result when order is reversed -->
+    <Class name="org.apache.el.TestELEvaluation" />
+    <Method name="compareBoth" />
+    <Bug pattern="RV_NEGATING_RESULT_OF_COMPARETO" />
+  </Match>
   <Match>
     <!-- Use of statics is unavoidable in all cases -->
     <!-- Better to use it consistently rather than only where necessary -->
@@ -1228,6 +1234,12 @@
     <Method name="service"/>
     <Bug pattern="XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER"/>
   </Match>
+  <Match>
+    <!-- No performance issue as there is no DNS resolution -->
+    <Class name="org.apache.tomcat.util.bcel.TesterPerformance" />
+    <Method name="testClassParserPerformance" />
+    <Bug pattern="DMI_COLLECTION_OF_URLS" />
+  </Match>
   <Match>
     <Class name="org.apache.tomcat.util.net.TestSsl" />
     <Or>

==================================================
SimpleHttpClient.java
index f8682584d3..f8cbe0faa7 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -19,6 +19,7 @@ package org.apache.catalina.nonblocking;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.Serializable;
 import java.net.HttpURLConnection;
 import java.net.Socket;
 import java.net.URL;
@@ -154,7 +155,13 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
                     "Host: localhost:" + getPort() + "\r\n" +
                     "\r\n").getBytes(StandardCharsets.ISO_8859_1));
             os.flush();
-            is.read(buffer);
+            // Make sure the entire response has been read.
+            int read = is.read(buffer);
+            // The response should end with CRLFCRLF
+            Assert.assertEquals(buffer[read - 4], '\r');
+            Assert.assertEquals(buffer[read - 3], '\n');
+            Assert.assertEquals(buffer[read - 2], '\r');
+            Assert.assertEquals(buffer[read - 1], '\n');
         }
         os.write(("GET / HTTP/1.1\r\n" +
                 "Host: localhost:" + getPort() + "\r\n" +
@@ -843,7 +850,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
     private static final class DelayedNBWriteServlet extends TesterServlet {
         private static final long serialVersionUID = 1L;
         private final Set<Emitter> emitters = new HashSet<>();
-        private final CountDownLatch latch;
+        private transient final CountDownLatch latch;
 
         public DelayedNBWriteServlet(CountDownLatch latch) {
             this.latch = latch;
@@ -870,8 +877,11 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
     }
 
-    private static final class Emitter {
-        private final AsyncContext ctx;
+    private static final class Emitter implements Serializable {
+
+        private static final long serialVersionUID = 1L;
+
+        private transient final AsyncContext ctx;
 
         Emitter(AsyncContext ctx) {
             this.ctx = ctx;

==================================================
TestFileHandler.java
index 2b3b0ea62f..0cf14ee8f8 100644
--- a/test/org/apache/catalina/startup/SimpleHttpClient.java
+++ b/test/org/apache/catalina/startup/SimpleHttpClient.java
@@ -33,6 +33,8 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 
+import org.junit.Assert;
+
 /**
  * Simple client for unit testing. It isn't robust, it isn't secure and
  * should not be used as the basis for production code. Its only purpose
@@ -298,7 +300,8 @@ public abstract class SimpleHttpClient {
         if (wantBody) {
             if (useContentLength && (contentLength > -1)) {
                 char[] body = new char[contentLength];
-                reader.read(body);
+                int read = reader.read(body);
+                Assert.assertEquals(contentLength, read);
                 builder.append(body);
             }
             else {

==================================================
