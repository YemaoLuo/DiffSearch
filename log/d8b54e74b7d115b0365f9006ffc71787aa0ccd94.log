d8b54e74b7d115b0365f9006ffc71787aa0ccd94
==================================================
Make session id generation extensible.
==================================================
Rainer Jung
==================================================
Wed Aug 20 09:24:21 2014 +0000
==================================================
Manager.java
Make session id generation extensible.

See discussion "Special requirements on session id generator"
on dev list (http://marc.info/?t=139238389300003&r=1&w=2).

1) New interface org.apache.catalina.SessionIdGenerator
   - setter and getter for jvmRoute
   - setter and getter for session id length
   - generateSessionId() (use jvmRoute if set) and
     generateSessionId(String route).
2) Renamed org.apache.catalina.util.SessionIdGenerator to
   abstract org.apache.catalina.util.SessionIdGeneratorBase.
   For consistency with similar cases.
3) Adjust visibility of getRandomBytes(byte bytes[]) in SessionIdGeneratorBase
   from private to protected to allow extension.
4) Moved generateSessionId() from SessionIdGeneratorBase
   to new org.apache.catalina.util.StandardSessionIdGenerator
   extending SessionIdGeneratorBase and implementing SessionIdGenerator.
   Make SessionIdGeneratorBase abstract.
5) Changed message keys in org.apache.catalina.util.LocalStrings.properties
   etc. from sessionIdGenerator.* to sessionIdGeneratorBase.*.
6) Add getter and setter for SessionIdGenerator to Manager interface
   and to ManagerBase. Deprecated setSessionIdLength(int) and
   getSessionIdLength() there. Use value only if explicitly set
   otherwise use value from SessionIdGenerator impl.
7) Adjust SessionIdGenerator initialization in ManagerBase:
   uses generator set in context config if present, otherwise
   uses StandardSessionIdGenerator as default.
9) Add Context/Manager/SessionIdGenerator to digester ContextRuleSet.

Method getSessionIdLength() and setSessionIdlength(int) in Manager
interface only kept for API stability (too late for removing in TC 8).


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1619056 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SessionIdGenerator.java
index c5b50a9195..2e9c6b1f37 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -116,12 +116,30 @@ public interface Manager {
     public void setMaxInactiveInterval(int interval);
 
 
+    /**
+     * return the session id generator
+     */
+    public SessionIdGenerator getSessionIdGenerator();
+
+
+    /**
+     * Sets the session id generator
+     *
+     * @param idGenerator The session id generator
+     */
+    public void setSessionIdGenerator(SessionIdGenerator sessionIdGenerator);
+
+
     /**
      * Gets the session id length (in bytes) of Sessions created by
      * this Manager.
      *
+     * @deprecated Use {@link SessionIdGenerator#getSessionIdLength()}.
+     *             This method will be removed in Tomcat 9 onwards.
+     *
      * @return The session id length
      */
+    @Deprecated
     public int getSessionIdLength();
 
 
@@ -129,8 +147,12 @@ public interface Manager {
      * Sets the session id length (in bytes) for Sessions created by this
      * Manager.
      *
+     * @deprecated Use {@link SessionIdGenerator#setSessionIdLength(int)}.
+     *             This method will be removed in Tomcat 9 onwards.
+     *
      * @param idLength The session id length
      */
+    @Deprecated
     public void setSessionIdLength(int idLength);
 
 

==================================================
AuthenticatorBase.java
new file mode 100644
index 0000000000..85b443107e
--- /dev/null
+++ b/java/org/apache/catalina/SessionIdGenerator.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina;
+
+public interface SessionIdGenerator {
+
+    /**
+     * Return the node identifier associated with this node which will be
+     * included in the generated session ID.
+     */
+    public String getJvmRoute();
+
+    /**
+     * Specify the node identifier associated with this node which will be
+     * included in the generated session ID.
+     *
+     * @param jvmRoute  The node identifier
+     */
+    public void setJvmRoute(String jvmRoute);
+
+    /**
+     * Return the number of bytes for a session ID
+     */
+    public int getSessionIdLength();
+
+    /**
+     * Specify the number of bytes for a session ID
+     *
+     * @param sessionIdLength   Number of bytes
+     */
+    public void setSessionIdLength(int sessionIdLength);
+
+    /**
+     * Generate and return a new session identifier.
+     */
+    public String generateSessionId();
+
+    /**
+     * Generate and return a new session identifier.
+     *
+     * @param route   node identifier to include in generated id
+     */
+    public String generateSessionId(String route);
+
+}

==================================================
ClusterManagerBase.java
index 086019ac14..8c057ec87a 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -39,7 +39,8 @@ import org.apache.catalina.Valve;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.SessionIdGenerator;
+import org.apache.catalina.util.SessionIdGeneratorBase;
+import org.apache.catalina.util.StandardSessionIdGenerator;
 import org.apache.catalina.valves.ValveBase;
 import org.apache.coyote.ActionCode;
 import org.apache.juli.logging.Log;
@@ -166,7 +167,7 @@ public abstract class AuthenticatorBase extends ValveBase
      */
     protected String secureRandomProvider = null;
 
-    protected SessionIdGenerator sessionIdGenerator = null;
+    protected SessionIdGeneratorBase sessionIdGenerator = null;
 
     /**
      * The string manager for this package.
@@ -918,7 +919,7 @@ public abstract class AuthenticatorBase extends ValveBase
             }
         }
 
-        sessionIdGenerator = new SessionIdGenerator();
+        sessionIdGenerator = new StandardSessionIdGenerator();
         sessionIdGenerator.setSecureRandomAlgorithm(getSecureRandomAlgorithm());
         sessionIdGenerator.setSecureRandomClass(getSecureRandomClass());
         sessionIdGenerator.setSecureRandomProvider(getSecureRandomProvider());

==================================================
ManagerBase.java
index f80233e68c..8eb284d2a7 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -193,7 +193,6 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
         copy.setName("Clone-from-" + getName());
         copy.setMaxActiveSessions(getMaxActiveSessions());
         copy.setMaxInactiveInterval(getMaxInactiveInterval());
-        copy.setSessionIdLength(getSessionIdLength());
         copy.setProcessExpiresFrequency(getProcessExpiresFrequency());
         copy.setNotifyListenersOnReplication(isNotifyListenersOnReplication());
         copy.setSessionAttributeFilter(getSessionAttributeFilter());

==================================================
ContextRuleSet.java
index ac2535c31c..eefb5bfebd 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -39,8 +39,10 @@ import org.apache.catalina.Engine;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Session;
+import org.apache.catalina.SessionIdGenerator;
 import org.apache.catalina.util.LifecycleMBeanBase;
-import org.apache.catalina.util.SessionIdGenerator;
+import org.apache.catalina.util.SessionIdGeneratorBase;
+import org.apache.catalina.util.StandardSessionIdGenerator;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
@@ -87,10 +89,14 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     protected int maxInactiveInterval = 30 * 60;
 
 
+    protected static final int SESSION_ID_LENGTH_UNSET = -1;
+
     /**
      * The session id length of Sessions created by this Manager.
+     * The length should be set directly on the SessionIdGenerator.
+     * Setting it here is deprecated.
      */
-    protected int sessionIdLength = 16;
+    protected int sessionIdLength = SESSION_ID_LENGTH_UNSET;
 
 
     /**
@@ -124,6 +130,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     protected String secureRandomProvider = null;
 
     protected SessionIdGenerator sessionIdGenerator = null;
+    protected Class sessionIdGeneratorClass = null;
 
     /**
      * The longest time (in seconds) that an expired session had been alive.
@@ -323,9 +330,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      * Gets the session id length (in bytes) of Sessions created by
      * this Manager.
      *
+     * @deprecated Use {@link SessionIdGenerator#getSessionIdLength()}.
+     *             This method will be removed in Tomcat 9 onwards.
+     *
      * @return The session id length
      */
     @Override
+    @Deprecated
     public int getSessionIdLength() {
 
         return (this.sessionIdLength);
@@ -337,9 +348,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      * Sets the session id length (in bytes) for Sessions created by this
      * Manager.
      *
+     * @deprecated Use {@link SessionIdGenerator#setSessionIdLength(int)}.
+     *             This method will be removed in Tomcat 9 onwards.
+     *
      * @param idLength The session id length
      */
     @Override
+    @Deprecated
     public void setSessionIdLength(int idLength) {
 
         int oldSessionIdLength = this.sessionIdLength;
@@ -351,6 +366,42 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
+    /**
+     * Gets the session id generator.
+     *
+     * @return The session id generator
+     */
+    @Override
+    public SessionIdGenerator getSessionIdGenerator() {
+        if (sessionIdGenerator != null) {
+            return sessionIdGenerator;
+        } else if (sessionIdGeneratorClass != null) {
+            try {
+                sessionIdGenerator =
+                    (SessionIdGenerator) sessionIdGeneratorClass.newInstance();
+                return sessionIdGenerator;
+            } catch(IllegalAccessException ex) {
+                // Ignore
+            } catch(InstantiationException ex) {
+                // Ignore
+            }
+        }
+        return null;
+    }
+
+
+    /**
+     * Sets the session id generator
+     *
+     * @param idGenerator The session id generator
+     */
+    @Override
+    public void setSessionIdGenerator(SessionIdGenerator sessionIdGenerator) {
+        this.sessionIdGenerator = sessionIdGenerator;
+        sessionIdGeneratorClass = sessionIdGenerator.getClass();
+    }
+
+
     /**
      * Return the descriptive short name of this Manager implementation.
      */
@@ -547,12 +598,23 @@ public abstract class ManagerBase extends LifecycleMBeanBase
             sessionExpirationTiming.add(null);
         }
 
-        sessionIdGenerator = new SessionIdGenerator();
+        /* Create sessionIdGenerator if not explicitly configured */
+        SessionIdGenerator sessionIdGenerator = getSessionIdGenerator();
+        if (sessionIdGenerator == null) {
+            sessionIdGenerator = new StandardSessionIdGenerator();
+            setSessionIdGenerator(sessionIdGenerator);
+        }
+
+        if (sessionIdLength != SESSION_ID_LENGTH_UNSET) {
+            sessionIdGenerator.setSessionIdLength(sessionIdLength);
+        }
         sessionIdGenerator.setJvmRoute(getJvmRoute());
-        sessionIdGenerator.setSecureRandomAlgorithm(getSecureRandomAlgorithm());
-        sessionIdGenerator.setSecureRandomClass(getSecureRandomClass());
-        sessionIdGenerator.setSecureRandomProvider(getSecureRandomProvider());
-        sessionIdGenerator.setSessionIdLength(getSessionIdLength());
+        if (sessionIdGenerator instanceof SessionIdGeneratorBase) {
+            SessionIdGeneratorBase sig = (SessionIdGeneratorBase)sessionIdGenerator;
+            sig.setSecureRandomAlgorithm(getSecureRandomAlgorithm());
+            sig.setSecureRandomClass(getSecureRandomClass());
+            sig.setSecureRandomProvider(getSecureRandomProvider());
+        }
 
         // Force initialization of the random number generator
         if (log.isDebugEnabled())

==================================================
SessionIdGeneratorBase.java
index b3799e28c9..d31911a383 100644
--- a/java/org/apache/catalina/util/LocalStrings_ja.properties
+++ b/java/org/apache/catalina/util/LocalStrings_ja.properties
@@ -23,4 +23,4 @@ extensionValidator.extension-not-found-error=ExtensionValidator[{0}][{1}]: \u5fc
 extensionValidator.extension-validation-error=ExtensionValidator[{0}]: \u5fc5\u8981\u306a\u62e1\u5f35 "{1}" \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002
 extensionValidator.failload=\u62e1\u5f35 {0} \u306e\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u307e\u3057\u305f
 SecurityUtil.doAsPrivilege=PrivilegedExceptionAction\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u4e2d\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002
-sessionIdGenerator.random=\u30af\u30e9\u30b9 {0} \u306e\u4e71\u6570\u767a\u751f\u5668\u306e\u521d\u671f\u5316\u306e\u4f8b\u5916\u3067\u3059
+sessionIdGeneratorBase.random=\u30af\u30e9\u30b9 {0} \u306e\u4e71\u6570\u767a\u751f\u5668\u306e\u521d\u671f\u5316\u306e\u4f8b\u5916\u3067\u3059

==================================================
StandardSessionIdGenerator.java
similarity index 82%
rename from java/org/apache/catalina/util/SessionIdGenerator.java
rename to java/org/apache/catalina/util/SessionIdGeneratorBase.java
index 8c11df1137..3a11ac7554 100644
--- a/java/org/apache/catalina/util/SessionIdGenerator.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -22,13 +22,14 @@ import java.security.SecureRandom;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
+import org.apache.catalina.SessionIdGenerator;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
-public class SessionIdGenerator {
+public abstract class SessionIdGeneratorBase implements SessionIdGenerator {
 
-    private static final Log log = LogFactory.getLog(SessionIdGenerator.class);
+    private static final Log log = LogFactory.getLog(SessionIdGeneratorBase.class);
 
 
     private static final StringManager sm =
@@ -115,22 +116,41 @@ public class SessionIdGenerator {
     }
 
 
+    /**
+     * Return the node identifier associated with this node which will be
+     * included in the generated session ID.
+     */
+    @Override
+    public String getJvmRoute() {
+        return jvmRoute;
+    }
+
+
     /**
      * Specify the node identifier associated with this node which will be
      * included in the generated session ID.
      *
      * @param jvmRoute  The node identifier
      */
+    @Override
     public void setJvmRoute(String jvmRoute) {
         this.jvmRoute = jvmRoute;
     }
 
 
+    /**
+     * Return the number of bytes for a session ID
+     */
+    @Override
+    public int getSessionIdLength() {
+        return sessionIdLength;
+    }
     /**
      * Specify the number of bytes for a session ID
      *
      * @param sessionIdLength   Number of bytes
      */
+    @Override
     public void setSessionIdLength(int sessionIdLength) {
         this.sessionIdLength = sessionIdLength;
     }
@@ -139,43 +159,12 @@ public class SessionIdGenerator {
     /**
      * Generate and return a new session identifier.
      */
+    @Override
     public String generateSessionId() {
-
-        byte random[] = new byte[16];
-
-        // Render the result as a String of hexadecimal digits
-        StringBuilder buffer = new StringBuilder();
-
-        int resultLenBytes = 0;
-
-        while (resultLenBytes < sessionIdLength) {
-            getRandomBytes(random);
-            for (int j = 0;
-            j < random.length && resultLenBytes < sessionIdLength;
-            j++) {
-                byte b1 = (byte) ((random[j] & 0xf0) >> 4);
-                byte b2 = (byte) (random[j] & 0x0f);
-                if (b1 < 10)
-                    buffer.append((char) ('0' + b1));
-                else
-                    buffer.append((char) ('A' + (b1 - 10)));
-                if (b2 < 10)
-                    buffer.append((char) ('0' + b2));
-                else
-                    buffer.append((char) ('A' + (b2 - 10)));
-                resultLenBytes++;
-            }
-        }
-
-        if (jvmRoute != null && jvmRoute.length() > 0) {
-            buffer.append('.').append(jvmRoute);
-        }
-
-        return buffer.toString();
+        return generateSessionId(jvmRoute);
     }
 
-
-    private void getRandomBytes(byte bytes[]) {
+    protected void getRandomBytes(byte bytes[]) {
 
         SecureRandom random = randoms.poll();
         if (random == null) {
@@ -201,7 +190,7 @@ public class SessionIdGenerator {
                 Class<?> clazz = Class.forName(secureRandomClass);
                 result = (SecureRandom) clazz.newInstance();
             } catch (Exception e) {
-                log.error(sm.getString("sessionIdGenerator.random",
+                log.error(sm.getString("sessionIdGeneratorBase.random",
                         secureRandomClass), e);
             }
         }
@@ -218,10 +207,10 @@ public class SessionIdGenerator {
                     result = SecureRandom.getInstance(secureRandomAlgorithm);
                 }
             } catch (NoSuchAlgorithmException e) {
-                log.error(sm.getString("sessionIdGenerator.randomAlgorithm",
+                log.error(sm.getString("sessionIdGeneratorBase.randomAlgorithm",
                         secureRandomAlgorithm), e);
             } catch (NoSuchProviderException e) {
-                log.error(sm.getString("sessionIdGenerator.randomProvider",
+                log.error(sm.getString("sessionIdGeneratorBase.randomProvider",
                         secureRandomProvider), e);
             }
         }
@@ -231,7 +220,7 @@ public class SessionIdGenerator {
             try {
                 result = SecureRandom.getInstance("SHA1PRNG");
             } catch (NoSuchAlgorithmException e) {
-                log.error(sm.getString("sessionIdGenerator.randomAlgorithm",
+                log.error(sm.getString("sessionIdGeneratorBase.randomAlgorithm",
                         secureRandomAlgorithm), e);
             }
         }
@@ -246,7 +235,7 @@ public class SessionIdGenerator {
 
         long t2=System.currentTimeMillis();
         if( (t2-t1) > 100 )
-            log.info(sm.getString("sessionIdGenerator.createRandom",
+            log.info(sm.getString("sessionIdGeneratorBase.createRandom",
                     result.getAlgorithm(), Long.valueOf(t2-t1)));
         return result;
     }

==================================================
