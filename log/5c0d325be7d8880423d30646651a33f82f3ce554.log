5c0d325be7d8880423d30646651a33f82f3ce554
==================================================
Complete update to v014 API plus some minor proposed tweaks
==================================================
Mark Emlyn
==================================================
Wed Mar 6 16:18:39 2013 +0000
==================================================
ServerContainer.java
Complete update to v014 API plus some minor proposed tweaks

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1453401 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServerContainerProvider.java
new file mode 100644
index 0000000000..13a427fbf5
--- /dev/null
+++ b/java/javax/websocket/server/ServerContainer.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket.server;
+
+import javax.websocket.DeploymentException;
+import javax.websocket.WebSocketContainer;
+
+public interface ServerContainer extends WebSocketContainer {
+    public abstract void addEndpoint(Class<?> clazz) throws DeploymentException;
+
+    public abstract void addEndpoint(ServerEndpointConfig sec)
+            throws DeploymentException;
+}

==================================================
DefaultServerEndpointConfigurator.java
new file mode 100644
index 0000000000..b178eadbcf
--- /dev/null
+++ b/java/javax/websocket/server/ServerContainerProvider.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket.server;
+
+import java.util.Iterator;
+import java.util.ServiceLoader;
+
+public abstract class ServerContainerProvider {
+
+    private static final String DEFAULT_PROVIDER_CLASS_NAME =
+            "org.apache.tomcat.websocket.ServerContainerImpl";
+
+    /**
+     * Use the service loader API to obtain a reference to the
+     * {@link ServerContainer}.
+     */
+    static ServerContainer getServerContainer() {
+        ServerContainer result = null;
+
+        ServiceLoader<ServerContainerProvider> serviceLoader =
+                ServiceLoader.load(ServerContainerProvider.class);
+        Iterator<ServerContainerProvider> iter = serviceLoader.iterator();
+        while (result == null && iter.hasNext()) {
+            result = iter.next().getContainer();
+        }
+
+        // Fall-back. Also used by unit tests
+        if (result == null) {
+            try {
+                Class<ServerContainer> clazz =
+                        (Class<ServerContainer>) Class.forName(
+                                DEFAULT_PROVIDER_CLASS_NAME);
+                result = clazz.newInstance();
+            } catch (ClassNotFoundException | InstantiationException |
+                    IllegalAccessException e) {
+                // No options left. Just return null.
+            }
+        }
+        return result;
+
+    }
+
+    protected abstract ServerContainer getContainer();
+}

==================================================
WsListener.java
index 4c60db3156..78355f78b2 100644
--- a/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
+++ b/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
@@ -72,14 +72,14 @@ public class DefaultServerEndpointConfigurator
             return requestPath.equals(path);
         }
 
-        String servletPath = ServerContainerImpl.getServletPath(path);
+        String servletPath = WsServerContainer.getServletPath(path);
         if (!requestPath.startsWith(servletPath)) {
             return false;
         }
 
         Map<String,String> params;
         try {
-            params = ServerContainerImpl.getServerContainer().getPathParameters(
+            params = WsServerContainer.getServerContainer().getPathParameters(
                     servletPath, requestPath.substring(servletPath.length()));
         } catch (IllegalArgumentException iae) {
             return false;

==================================================
WsProtocolHandler.java
index 129f63ce94..4281ffaed7 100644
--- a/java/org/apache/tomcat/websocket/server/WsListener.java
+++ b/java/org/apache/tomcat/websocket/server/WsListener.java
@@ -29,7 +29,7 @@ public class WsListener implements ServletContextListener {
 
     @Override
     public void contextInitialized(ServletContextEvent sce) {
-        ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+        WsServerContainer sc = WsServerContainer.getServerContainer();
         sc.setServletContext(sce.getServletContext());
     }
 

==================================================
WsRemoteEndpointImplServer.java
index f00d631b88..72e020ee13 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -52,7 +52,7 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
     private final Endpoint ep;
     private final EndpointConfig endpointConfig;
     private final ClassLoader applicationClassLoader;
-    private final ServerContainerImpl webSocketContainer;
+    private final WsServerContainer webSocketContainer;
     private final WsRequest request;
     private final String subProtocol;
     private final Map<String,String> pathParameters;
@@ -62,7 +62,7 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
 
 
     public WsProtocolHandler(Endpoint ep, EndpointConfig endpointConfig,
-            ServerContainerImpl wsc, WsRequest request, String subProtocol,
+            WsServerContainer wsc, WsRequest request, String subProtocol,
             Map<String,String> pathParameters, boolean secure) {
         this.ep = ep;
         this.endpointConfig = endpointConfig;

==================================================
WsSci.java
index 974613aaeb..e2c0e2b329 100644
--- a/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java
+++ b/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java
@@ -51,7 +51,7 @@ public class WsRemoteEndpointImplServer extends WsRemoteEndpointImplBase {
 
 
     public WsRemoteEndpointImplServer(ServletOutputStream sos,
-            ServerContainerImpl serverContainer) {
+            WsServerContainer serverContainer) {
         this.sos = sos;
         this.wsWriteTimeout = serverContainer.getTimeout();
     }

==================================================
WsServerContainer.java
index 1f5bc000c6..99076e5f81 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -43,11 +43,11 @@ public class WsSci implements ServletContainerInitializer {
             return;
         }
 
-        ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+        WsServerContainer sc = WsServerContainer.getServerContainer();
         sc.setServletContext(ctx);
         for (Class<?> clazz : clazzes) {
             try {
-                sc.deploy(clazz);
+                sc.addEndpoint(clazz);
             } catch (DeploymentException e) {
                 throw new ServletException(e);
             }

==================================================
WsServerContainerProvider.java
similarity index 93%
rename from java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
rename to java/org/apache/tomcat/websocket/server/WsServerContainer.java
index 24f5815ca4..cbc66051c8 100644
--- a/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -24,6 +24,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
 import javax.websocket.DeploymentException;
+import javax.websocket.server.ServerContainer;
 import javax.websocket.server.ServerEndpoint;
 import javax.websocket.server.ServerEndpointConfig;
 
@@ -45,25 +46,26 @@ import org.apache.tomcat.websocket.pojo.PojoMethodMapping;
  * <li>{@link Constants#TEXT_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM}</li>
  * </ul>
  */
-public class ServerContainerImpl extends WsWebSocketContainer {
+public class WsServerContainer extends WsWebSocketContainer
+        implements ServerContainer {
 
     // Needs to be a WeakHashMap to prevent memory leaks when a context is
     // stopped
-    private static final Map<ClassLoader,ServerContainerImpl>
+    private static final Map<ClassLoader,WsServerContainer>
             classLoaderContainerMap = new WeakHashMap<>();
     private static final Object classLoaderContainerMapLock = new Object();
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
-    private final Log log = LogFactory.getLog(ServerContainerImpl.class);
+    private final Log log = LogFactory.getLog(WsServerContainer.class);
 
 
-    public static ServerContainerImpl getServerContainer() {
+    public static WsServerContainer getServerContainer() {
         ClassLoader tccl = Thread.currentThread().getContextClassLoader();
-        ServerContainerImpl result = null;
+        WsServerContainer result = null;
         synchronized (classLoaderContainerMapLock) {
             result = classLoaderContainerMap.get(tccl);
             if (result == null) {
-                result = new ServerContainerImpl();
+                result = new WsServerContainer();
                 classLoaderContainerMap.put(tccl, result);
             }
         }
@@ -113,7 +115,8 @@ public class ServerContainerImpl extends WsWebSocketContainer {
      * @param sec   The configuration to use when creating endpoint instances
      * @throws DeploymentException
      */
-    public void deploy(ServerEndpointConfig sec)
+    @Override
+    public void addEndpoint(ServerEndpointConfig sec)
             throws DeploymentException {
         if (servletContext == null) {
             throw new DeploymentException(
@@ -141,13 +144,14 @@ public class ServerContainerImpl extends WsWebSocketContainer {
 
 
     /**
-     * Provides the equivalent of {@link #deploy(ServerEndpointConfig)}
+     * Provides the equivalent of {@link #addEndpoint(ServerEndpointConfig)}
      * for publishing plain old java objects (POJOs) that have been annotated as
      * WebSocket endpoints.
      *
      * @param pojo   The annotated POJO
      */
-    public void deploy(Class<?> pojo) throws DeploymentException {
+    @Override
+    public void addEndpoint(Class<?> pojo) throws DeploymentException {
 
         ServerEndpoint annotation = pojo.getAnnotation(ServerEndpoint.class);
         if (annotation == null) {

==================================================
WsServlet.java
new file mode 100644
index 0000000000..2944b30749
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainerProvider.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket.server;
+
+import javax.websocket.server.ServerContainer;
+import javax.websocket.server.ServerContainerProvider;
+
+
+public class WsServerContainerProvider extends ServerContainerProvider {
+
+    @Override
+    protected ServerContainer getContainer() {
+        return new WsServerContainer();
+    }
+}

==================================================
TestWsWebSocketContainer.java
new file mode 100644
index 0000000000..2dc76317ca
--- /dev/null
+++ b/res/META-INF/tomcat-websocket.jar/services/javax.websocket.server.ServerContainerProvider
@@ -0,0 +1 @@
+org.apache.tomcat.websocket.server.WsServerContainerProvider
\ No newline at end of file

==================================================
TesterEchoServer.java
index 5c090c0c1d..ef5d8069e2 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -50,8 +50,8 @@ import org.apache.tomcat.websocket.TesterSingleMessageClient.BasicBinary;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.BasicHandler;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.BasicText;
 import org.apache.tomcat.websocket.TesterSingleMessageClient.TesterEndpoint;
-import org.apache.tomcat.websocket.server.ServerContainerImpl;
 import org.apache.tomcat.websocket.server.WsListener;
+import org.apache.tomcat.websocket.server.WsServerContainer;
 
 public class TestWsWebSocketContainer extends TomcatBaseTest {
 
@@ -412,10 +412,10 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+            WsServerContainer sc = WsServerContainer.getServerContainer();
             sc.setServletContext(sce.getServletContext());
             try {
-                sc.deploy(BlockingPojo.class);
+                sc.addEndpoint(BlockingPojo.class);
             } catch (DeploymentException e) {
                 throw new IllegalStateException(e);
             }
@@ -522,9 +522,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+            WsServerContainer sc = WsServerContainer.getServerContainer();
             try {
-                sc.deploy(ServerEndpointConfig.Builder.create(
+                sc.addEndpoint(ServerEndpointConfig.Builder.create(
                         ConstantTxEndpoint.class, PATH).build());
                 if (TestWsWebSocketContainer.timoutOnContainer) {
                     sc.setAsyncSendTimeout(TIMEOUT_MS);

==================================================
TestServerContainerImpl.java
index 1d44420356..a652dd62c7 100644
--- a/test/org/apache/tomcat/websocket/TesterEchoServer.java
+++ b/test/org/apache/tomcat/websocket/TesterEchoServer.java
@@ -25,8 +25,8 @@ import javax.websocket.OnMessage;
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
-import org.apache.tomcat.websocket.server.ServerContainerImpl;
 import org.apache.tomcat.websocket.server.WsListener;
+import org.apache.tomcat.websocket.server.WsServerContainer;
 
 public class TesterEchoServer {
 
@@ -38,11 +38,11 @@ public class TesterEchoServer {
         @Override
         public void contextInitialized(ServletContextEvent sce) {
             super.contextInitialized(sce);
-            ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
+            WsServerContainer sc = WsServerContainer.getServerContainer();
             sc.setServletContext(sce.getServletContext());
             try {
-                sc.deploy(Async.class);
-                sc.deploy(Basic.class);
+                sc.addEndpoint(Async.class);
+                sc.addEndpoint(Basic.class);
             } catch (DeploymentException e) {
                 throw new IllegalStateException(e);
             }

==================================================
WsConfigListener.java
index 96f174272d..d0e233154d 100644
--- a/test/org/apache/tomcat/websocket/server/TestServerContainerImpl.java
+++ b/test/org/apache/tomcat/websocket/server/TestServerContainerImpl.java
@@ -24,20 +24,20 @@ public class TestServerContainerImpl {
     @Test
     public void testGetServletMappingPath() throws Exception {
         Assert.assertEquals("/foo/*",
-                ServerContainerImpl.getServletPath("/foo"));
+                WsServerContainer.getServletPath("/foo"));
         Assert.assertEquals("/foo/*",
-                ServerContainerImpl.getServletPath("/foo/"));
+                WsServerContainer.getServletPath("/foo/"));
         Assert.assertEquals("/foo/bar/*",
-                ServerContainerImpl.getServletPath("/foo/bar"));
+                WsServerContainer.getServletPath("/foo/bar"));
         Assert.assertEquals("/foo/bar/*",
-                ServerContainerImpl.getServletPath("/foo/bar/"));
+                WsServerContainer.getServletPath("/foo/bar/"));
         Assert.assertEquals("/foo/*",
-                ServerContainerImpl.getServletPath("/foo/{bar}"));
+                WsServerContainer.getServletPath("/foo/{bar}"));
         Assert.assertEquals("/foo/*",
-                ServerContainerImpl.getServletPath("/foo/{bar}/"));
+                WsServerContainer.getServletPath("/foo/{bar}/"));
         Assert.assertEquals("/foo/*",
-                ServerContainerImpl.getServletPath("/foo/x{bar}"));
+                WsServerContainer.getServletPath("/foo/x{bar}"));
         Assert.assertEquals("/foo/*",
-                ServerContainerImpl.getServletPath("/foo/x{bar}/"));
+                WsServerContainer.getServletPath("/foo/x{bar}/"));
     }
 }

==================================================
