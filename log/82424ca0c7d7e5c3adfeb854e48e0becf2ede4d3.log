82424ca0c7d7e5c3adfeb854e48e0becf2ede4d3
==================================================
Smarter executor, only create threads if no threads are available
==================================================
Filip Hanik
==================================================
Sat Apr 14 01:41:35 2007 +0000
==================================================
StandardThreadExecutor.java
Smarter executor, only create threads if no threads are available


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@528735 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index c2d3836286..d8b62ff9fa 100644
--- a/java/org/apache/catalina/core/StandardThreadExecutor.java
+++ b/java/org/apache/catalina/core/StandardThreadExecutor.java
@@ -219,10 +219,17 @@ public class StandardThreadExecutor implements Executor {
         }
 
         public boolean offer(Runnable o) {
-            if (parent != null && parent.getPoolSize() < parent.getMaximumPoolSize())
-                return false; //force creation of new threads by rejecting the task
-            else
-                return super.offer(o);
+            //we can't do any checks
+            if (parent==null) return super.offer(o);
+            //we are maxed out on threads, simply queue the object
+            if (parent.getPoolSize() == parent.getMaximumPoolSize()) return super.offer(o);
+            //we have idle threads, just add it to the queue
+            //this is an approximation, so it could use some tuning
+            if (parent.getActiveCount()<(parent.getPoolSize())) return super.offer(o);
+            //if we have less threads than maximum force creation of a new thread
+            if (parent.getPoolSize()<parent.getMaximumPoolSize()) return false;
+            //if we reached here, we need to add it to the queue
+            return super.offer(o);
         }
     }
 

==================================================
