014db9ac7d3067f4d24ee21062ecc8b9ac94a3b8
==================================================
Plumbing to enable transformation / extension processing for outgoing server messages.
==================================================
Mark Emlyn
==================================================
Fri Jun 27 14:07:41 2014 +0000
==================================================
PerMessageDeflate.java
Plumbing to enable transformation / extension processing for outgoing server messages.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606103 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Transformation.java
index 08aeeb2b63..d5291f2596 100644
--- a/java/org/apache/tomcat/websocket/PerMessageDeflate.java
+++ b/java/org/apache/tomcat/websocket/PerMessageDeflate.java
@@ -283,4 +283,15 @@ public class PerMessageDeflate implements Transformation {
             return next.validateRsvBits(i | RSV_BITMASK);
         }
     }
+
+
+    @Override
+    public List<MessagePart> sendMessagePart(List<MessagePart> messageParts) {
+        // TODO: Implement compression of sent messages
+        if (next == null) {
+            return messageParts;
+        } else {
+            return next.sendMessagePart(messageParts);
+        }
+    }
 }

==================================================
WsFrameBase.java
index 49208eeb78..28791ecbd4 100644
--- a/java/org/apache/tomcat/websocket/Transformation.java
+++ b/java/org/apache/tomcat/websocket/Transformation.java
@@ -18,17 +18,43 @@ package org.apache.tomcat.websocket;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.util.List;
 
 import javax.websocket.Extension;
 
 /**
  * The internal representation of the transformation that a WebSocket extension
  * performs on a message.
- *
- * TODO Add support for transformation of outgoing data as well as incoming.
  */
 public interface Transformation {
 
+    /**
+     * Sets the next transformation in the pipeline.
+     */
+    void setNext(Transformation t);
+
+    /**
+     * Validate that the RSV bit(s) required by this transformation are not
+     * being used by another extension. The implementation is expected to set
+     * any bits it requires before passing the set of in-use bits to the next
+     * transformation.
+     *
+     * @param i         The RSV bits marked as in use so far as an int in the
+     *                  range zero to seven with RSV1 as the MSB and RSV3 as the
+     *                  LSB
+     *
+     * @return <code>true</code> if the combination of RSV bits used by the
+     *         transformations in the pipeline do not conflict otherwise
+     *         <code>false</code>
+     */
+    boolean validateRsvBits(int i);
+
+    /**
+     * Obtain the extension that describes the information to be returned to the
+     * client.
+     */
+    Extension getExtensionResponse();
+
     /**
      * Obtain more input data.
      *
@@ -56,29 +82,16 @@ public interface Transformation {
     boolean validateRsv(int rsv, byte opCode);
 
     /**
-     * Obtain the extension that describes the information to be returned to the
-     * client.
-     */
-    Extension getExtensionResponse();
-
-    /**
-     * Sets the next transformation in the pipeline.
-     */
-    void setNext(Transformation t);
-
-    /**
-     * Validate that the RSV bit(s) required by this transformation are not
-     * being used by another extension. The implementation is expected to set
-     * any bits it requires before passing the set of in-use bits to the next
-     * transformation.
+     * Takes the provided list of messages, transforms them, passes the
+     * transformed list on to the next transformation (if any) and then returns
+     * the resulting list of message parts after all of the transformations have
+     * been applied.
      *
-     * @param i         The RSV bits marked as in use so far as an int in the
-     *                  range zero to seven with RSV1 as the MSB and RSV3 as the
-     *                  LSB
+     * @param messageParts  The list of messages to be transformed
      *
-     * @return <code>true</code> if the combination of RSV bits used by the
-     *         transformations in the pipeline do not conflict otherwise
-     *         <code>false</code>
+     * @return  The list of messages after this any any subsequent
+     *          transformations have been applied. The size of the returned list
+     *          may be bigger or smaller than the size of the input list
      */
-    boolean validateRsvBits(int i);
+    List<MessagePart> sendMessagePart(List<MessagePart> messageParts);
 }

==================================================
WsRemoteEndpointImplBase.java
index 5a0c21f092..3cd7759bc4 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -22,6 +22,7 @@ import java.nio.CharBuffer;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CoderResult;
 import java.nio.charset.CodingErrorAction;
+import java.util.List;
 
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
@@ -691,6 +692,11 @@ public abstract class WsFrameBase {
     }
 
 
+    protected Transformation getTransformation() {
+        return transformation;
+    }
+
+
     private static enum State {
         NEW_FRAME, PARTIAL_HEADER, DATA
     }
@@ -757,6 +763,14 @@ public abstract class WsFrameBase {
                 return TransformationResult.OVERFLOW;
             }
         }
+
+
+        @Override
+        public List<MessagePart> sendMessagePart(List<MessagePart> messageParts) {
+            // TODO Masking should move to this method
+            // NO-OP send so simply return the message unchanged.
+            return messageParts;
+        }
     }
 
 
@@ -792,5 +806,11 @@ public abstract class WsFrameBase {
                 return TransformationResult.OVERFLOW;
             }
         }
+
+        @Override
+        public List<MessagePart> sendMessagePart(List<MessagePart> messageParts) {
+            // NO-OP send so simply return the message unchanged.
+            return messageParts;
+        }
     }
 }

==================================================
WsSession.java
index b43c4f28f4..e4a16e04ba 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -61,6 +61,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
 
     private final StateMachine stateMachine = new StateMachine();
 
+    private Transformation transformation = null;
     private boolean messagePartInProgress = false;
     private final Queue<MessagePart> messagePartQueue = new ArrayDeque<>();
     private final Object messagePartLock = new Object();
@@ -82,6 +83,12 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
     private WsSession wsSession;
     private List<EncoderEntry> encoderEntries = new ArrayList<>();
 
+
+    protected void setTransformation(Transformation transformation) {
+        this.transformation = transformation;
+    }
+
+
     public long getSendTimeout() {
         return sendTimeout;
     }
@@ -249,8 +256,13 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
 
         wsSession.updateLastActive();
 
-        MessagePart mp = new MessagePart(opCode, payload, last,
-                new EndMessageHandler(this, handler));
+        List<MessagePart> messageParts = new ArrayList<>();
+        messageParts.add(new MessagePart(opCode, payload, last,
+                new EndMessageHandler(this, handler)));
+
+        messageParts = transformation.sendMessagePart(messageParts);
+
+        MessagePart mp = messageParts.remove(0);
 
         boolean doWrite = false;
         synchronized (messagePartLock) {
@@ -277,6 +289,8 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
                 messagePartInProgress = true;
                 doWrite = true;
             }
+            // Add any remaining messages to the queue
+            messagePartQueue.addAll(messageParts);
         }
         if (doWrite) {
             // Actual write has to be outside sync block to avoid possible

==================================================
WsWebSocketContainer.java
index f3fbbed891..11a8da744e 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -113,8 +113,7 @@ public class WsSession implements Session {
             URI requestUri, Map<String,List<String>> requestParameterMap,
             String queryString, Principal userPrincipal, String httpSessionId,
             String subProtocol, Map<String,String> pathParameters,
-            boolean secure, EndpointConfig endpointConfig,
-            Transformation transformation) throws DeploymentException {
+            boolean secure, EndpointConfig endpointConfig) throws DeploymentException {
         this.localEndpoint = localEndpoint;
         this.wsRemoteEndpoint = wsRemoteEndpoint;
         this.wsRemoteEndpoint.setSession(this);

==================================================
WsFrameServer.java
index 58b930957a..a572b3d9fe 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -316,15 +316,15 @@ public class WsWebSocketContainer
                     sm.getString("wsWebSocketContainer.httpRequestFailed"), e);
         }
 
-        // Switch to WebSocket
-        WsRemoteEndpointImplClient wsRemoteEndpointClient =
-                new WsRemoteEndpointImplClient(channel);
+        // TODO Add extension/transformation support to the client
 
+        // Switch to WebSocket
+        WsRemoteEndpointImplClient wsRemoteEndpointClient = new WsRemoteEndpointImplClient(channel);
 
         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,
                 this, null, null, null, null, null, subProtocol,
                 Collections.<String, String> emptyMap(), secure,
-                clientEndpointConfiguration, null);
+                clientEndpointConfiguration);
         endpoint.onOpen(wsSession, clientEndpointConfiguration);
         registerSession(endpoint, wsSession);
 

==================================================
WsHttpUpgradeHandler.java
index ff9efbfb63..aab083b5b9 100644
--- a/java/org/apache/tomcat/websocket/server/WsFrameServer.java
+++ b/java/org/apache/tomcat/websocket/server/WsFrameServer.java
@@ -65,4 +65,11 @@ public class WsFrameServer extends WsFrameBase {
         // Data is from the client so it should be masked
         return true;
     }
+
+
+    @Override
+    protected Transformation getTransformation() {
+        // Overridden to make it visible to other classes in this package
+        return super.getTransformation();
+    }
 }

==================================================
WsRemoteEndpointImplServer.java
index e1a663e18d..912dd10460 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -123,9 +123,12 @@ public class WsHttpUpgradeHandler implements HttpUpgradeHandler {
                     handshakeRequest.getParameterMap(),
                     handshakeRequest.getQueryString(),
                     handshakeRequest.getUserPrincipal(), httpSessionId,
-                    subProtocol, pathParameters, secure, endpointConfig, transformation);
+                    subProtocol, pathParameters, secure, endpointConfig);
             WsFrameServer wsFrame = new WsFrameServer(sis, wsSession, transformation);
             sos.setWriteListener(new WsWriteListener(this, wsRemoteEndpointServer));
+            // WsFrame adds the necessary final transformations. Copy the
+            // completed transformation chain to the remote end point.
+            wsRemoteEndpointServer.setTransformation(wsFrame.getTransformation());
             ep.onOpen(wsSession, endpointConfig);
             webSocketContainer.registerSession(ep, wsSession);
             sis.setReadListener(new WsReadListener(this, wsFrame));

==================================================
