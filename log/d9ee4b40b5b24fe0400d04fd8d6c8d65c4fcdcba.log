d9ee4b40b5b24fe0400d04fd8d6c8d65c4fcdcba
==================================================
Tab police: javax.el
==================================================
Mark Emlyn
==================================================
Thu Jul 22 22:35:32 2010 +0000
==================================================
ArrayELResolver.java
Tab police: javax.el
Thanks to Checkstyle

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@966883 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ListELResolver.java
index 2e7f70ee6b..0087546e65 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -24,149 +24,149 @@ import java.util.Iterator;
 
 public class ArrayELResolver extends ELResolver {
 
-	private final boolean readOnly;
+    private final boolean readOnly;
 
-	public ArrayELResolver() {
-		this.readOnly = false;
-	}
+    public ArrayELResolver() {
+        this.readOnly = false;
+    }
 
-	public ArrayELResolver(boolean readOnly) {
-		this.readOnly = readOnly;
-	}
+    public ArrayELResolver(boolean readOnly) {
+        this.readOnly = readOnly;
+    }
 
-	@Override
+    @Override
     public Object getValue(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base != null && base.getClass().isArray()) {
-			context.setPropertyResolved(true);
-			int idx = coerce(property);
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base != null && base.getClass().isArray()) {
+            context.setPropertyResolved(true);
+            int idx = coerce(property);
             if (idx < 0 || idx >= Array.getLength(base)) {
                 return null;
             }
             return Array.get(base, idx);
         }
 
-		return null;
-	}
+        return null;
+    }
 
-	@Override
+    @Override
     public Class<?> getType(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base != null && base.getClass().isArray()) {
-			context.setPropertyResolved(true);
-			int idx = coerce(property);
-			checkBounds(base, idx);
-			return base.getClass().getComponentType();
-		}
-
-		return null;
-	}
-
-	@Override
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base != null && base.getClass().isArray()) {
+            context.setPropertyResolved(true);
+            int idx = coerce(property);
+            checkBounds(base, idx);
+            return base.getClass().getComponentType();
+        }
+
+        return null;
+    }
+
+    @Override
     public void setValue(ELContext context, Object base, Object property,
-			Object value) throws NullPointerException,
-			PropertyNotFoundException, PropertyNotWritableException,
-			ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base != null && base.getClass().isArray()) {
-			context.setPropertyResolved(true);
-
-			if (this.readOnly) {
-				throw new PropertyNotWritableException(message(context,
-						"resolverNotWriteable", new Object[] { base.getClass()
-								.getName() }));
-			}
-
-			int idx = coerce(property);
-			checkBounds(base, idx);
-			if (value != null &&
-			        !base.getClass().getComponentType().isAssignableFrom(
-			                value.getClass())) {
-			    throw new ClassCastException(message(context,
-			            "objectNotAssignable",
-			            new Object[] {value.getClass().getName(),
-			            base.getClass().getComponentType().getName()}));
-			}
-			Array.set(base, idx, value);
-		}
-	}
-
-	@Override
+            Object value) throws NullPointerException,
+            PropertyNotFoundException, PropertyNotWritableException,
+            ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base != null && base.getClass().isArray()) {
+            context.setPropertyResolved(true);
+
+            if (this.readOnly) {
+                throw new PropertyNotWritableException(message(context,
+                        "resolverNotWriteable", new Object[] { base.getClass()
+                                .getName() }));
+            }
+
+            int idx = coerce(property);
+            checkBounds(base, idx);
+            if (value != null &&
+                    !base.getClass().getComponentType().isAssignableFrom(
+                            value.getClass())) {
+                throw new ClassCastException(message(context,
+                        "objectNotAssignable",
+                        new Object[] {value.getClass().getName(),
+                        base.getClass().getComponentType().getName()}));
+            }
+            Array.set(base, idx, value);
+        }
+    }
+
+    @Override
     public boolean isReadOnly(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
 
-		if (base != null && base.getClass().isArray()) {
-			context.setPropertyResolved(true);
-			int idx = coerce(property);
-			checkBounds(base, idx);
-		}
+        if (base != null && base.getClass().isArray()) {
+            context.setPropertyResolved(true);
+            int idx = coerce(property);
+            checkBounds(base, idx);
+        }
 
-		return this.readOnly;
-	}
+        return this.readOnly;
+    }
 
-	@Override
+    @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-		if (base != null && base.getClass().isArray()) {
-			FeatureDescriptor[] descs = new FeatureDescriptor[Array.getLength(base)];
-			for (int i = 0; i < descs.length; i++) {
-				descs[i] = new FeatureDescriptor();
-				descs[i].setDisplayName("["+i+"]");
-				descs[i].setExpert(false);
-				descs[i].setHidden(false);
-				descs[i].setName(""+i);
-				descs[i].setPreferred(true);
-				descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
-				descs[i].setValue(TYPE, Integer.class);
-			}
-			return Arrays.asList(descs).iterator();
-		}
-		return null;
-	}
-
-	@Override
+        if (base != null && base.getClass().isArray()) {
+            FeatureDescriptor[] descs = new FeatureDescriptor[Array.getLength(base)];
+            for (int i = 0; i < descs.length; i++) {
+                descs[i] = new FeatureDescriptor();
+                descs[i].setDisplayName("["+i+"]");
+                descs[i].setExpert(false);
+                descs[i].setHidden(false);
+                descs[i].setName(""+i);
+                descs[i].setPreferred(true);
+                descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
+                descs[i].setValue(TYPE, Integer.class);
+            }
+            return Arrays.asList(descs).iterator();
+        }
+        return null;
+    }
+
+    @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
-		if (base != null && base.getClass().isArray()) {
-			return Integer.class;
-		}
-		return null;
-	}
-
-	private final static void checkBounds(Object base, int idx) {
-		if (idx < 0 || idx >= Array.getLength(base)) {
-			throw new PropertyNotFoundException(
-					new ArrayIndexOutOfBoundsException(idx).getMessage());
-		}
-	}
-
-	private final static int coerce(Object property) {
-		if (property instanceof Number) {
-			return ((Number) property).intValue();
-		}
-		if (property instanceof Character) {
-			return ((Character) property).charValue();
-		}
-		if (property instanceof Boolean) {
-			return (((Boolean) property).booleanValue() ? 1 : 0);
-		}
+        if (base != null && base.getClass().isArray()) {
+            return Integer.class;
+        }
+        return null;
+    }
+
+    private final static void checkBounds(Object base, int idx) {
+        if (idx < 0 || idx >= Array.getLength(base)) {
+            throw new PropertyNotFoundException(
+                    new ArrayIndexOutOfBoundsException(idx).getMessage());
+        }
+    }
+
+    private final static int coerce(Object property) {
+        if (property instanceof Number) {
+            return ((Number) property).intValue();
+        }
+        if (property instanceof Character) {
+            return ((Character) property).charValue();
+        }
+        if (property instanceof Boolean) {
+            return (((Boolean) property).booleanValue() ? 1 : 0);
+        }
         if (property instanceof String) {
             return Integer.parseInt((String) property);
         }
-		throw new IllegalArgumentException(property != null ? property
-				.toString() : "null");
-	}
+        throw new IllegalArgumentException(property != null ?
+                property.toString() : "null");
+    }
 
 }

==================================================
MapELResolver.java
index 63a6035f00..90962b6f3d 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -26,154 +26,154 @@ import java.util.List;
 
 public class ListELResolver extends ELResolver {
 
-	private final boolean readOnly;
+    private final boolean readOnly;
 
-	private final static Class<?> UNMODIFIABLE =
-	    Collections.unmodifiableList(new ArrayList<Object>()).getClass();
+    private final static Class<?> UNMODIFIABLE =
+        Collections.unmodifiableList(new ArrayList<Object>()).getClass();
 
-	public ListELResolver() {
-		this.readOnly = false;
-	}
+    public ListELResolver() {
+        this.readOnly = false;
+    }
 
-	public ListELResolver(boolean readOnly) {
-		this.readOnly = readOnly;
-	}
+    public ListELResolver(boolean readOnly) {
+        this.readOnly = readOnly;
+    }
 
-	@Override
+    @Override
     public Object getValue(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof List<?>) {
-			context.setPropertyResolved(true);
-			List<?> list = (List<?>) base;
-			int idx = coerce(property);
-			if (idx < 0 || idx >= list.size()) {
-				return null;
-			}
-			return list.get(idx);
-		}
-
-		return null;
-	}
-
-	@Override
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof List<?>) {
+            context.setPropertyResolved(true);
+            List<?> list = (List<?>) base;
+            int idx = coerce(property);
+            if (idx < 0 || idx >= list.size()) {
+                return null;
+            }
+            return list.get(idx);
+        }
+
+        return null;
+    }
+
+    @Override
     public Class<?> getType(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof List<?>) {
-			context.setPropertyResolved(true);
-			List<?> list = (List<?>) base;
-			int idx = coerce(property);
-			if (idx < 0 || idx >= list.size()) {
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof List<?>) {
+            context.setPropertyResolved(true);
+            List<?> list = (List<?>) base;
+            int idx = coerce(property);
+            if (idx < 0 || idx >= list.size()) {
                 throw new PropertyNotFoundException(
                         new ArrayIndexOutOfBoundsException(idx).getMessage());
-			}
-			Object obj = list.get(idx);
-			return (obj != null) ? obj.getClass() : null;
-		}
+            }
+            Object obj = list.get(idx);
+            return (obj != null) ? obj.getClass() : null;
+        }
 
-		return null;
-	}
+        return null;
+    }
 
-	@Override
+    @Override
     public void setValue(ELContext context, Object base, Object property,
-			Object value) throws NullPointerException,
-			PropertyNotFoundException, PropertyNotWritableException,
-			ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof List<?>) {
-			context.setPropertyResolved(true);
-			@SuppressWarnings("unchecked") // Must be OK to cast to Object
-			List<Object> list = (List<Object>) base;
-
-			if (this.readOnly) {
-				throw new PropertyNotWritableException(message(context,
-						"resolverNotWriteable", new Object[] { base.getClass()
-								.getName() }));
-			}
-
-			int idx = coerce(property);
-			try {
-				list.set(idx, value);
-			} catch (UnsupportedOperationException e) {
-				throw new PropertyNotWritableException(e);
-			} catch (IndexOutOfBoundsException e) {
-				throw new PropertyNotFoundException(e);
-			}
-		}
-	}
-
-	@Override
+            Object value) throws NullPointerException,
+            PropertyNotFoundException, PropertyNotWritableException,
+            ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof List<?>) {
+            context.setPropertyResolved(true);
+            @SuppressWarnings("unchecked") // Must be OK to cast to Object
+            List<Object> list = (List<Object>) base;
+
+            if (this.readOnly) {
+                throw new PropertyNotWritableException(message(context,
+                        "resolverNotWriteable", new Object[] { base.getClass()
+                                .getName() }));
+            }
+
+            int idx = coerce(property);
+            try {
+                list.set(idx, value);
+            } catch (UnsupportedOperationException e) {
+                throw new PropertyNotWritableException(e);
+            } catch (IndexOutOfBoundsException e) {
+                throw new PropertyNotFoundException(e);
+            }
+        }
+    }
+
+    @Override
     public boolean isReadOnly(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof List<?>) {
-			context.setPropertyResolved(true);
-			List<?> list = (List<?>) base;
-			int idx = coerce(property);
-			if (idx < 0 || idx >= list.size()) {
-				throw new PropertyNotFoundException(
-						new ArrayIndexOutOfBoundsException(idx).getMessage());
-			}
-			return this.readOnly || UNMODIFIABLE.equals(list.getClass());
-		}
-
-		return this.readOnly;
-	}
-
-	@Override
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof List<?>) {
+            context.setPropertyResolved(true);
+            List<?> list = (List<?>) base;
+            int idx = coerce(property);
+            if (idx < 0 || idx >= list.size()) {
+                throw new PropertyNotFoundException(
+                        new ArrayIndexOutOfBoundsException(idx).getMessage());
+            }
+            return this.readOnly || UNMODIFIABLE.equals(list.getClass());
+        }
+
+        return this.readOnly;
+    }
+
+    @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-		if (base instanceof List<?>) {
-			FeatureDescriptor[] descs = new FeatureDescriptor[((List<?>) base).size()];
-			for (int i = 0; i < descs.length; i++) {
-				descs[i] = new FeatureDescriptor();
-				descs[i].setDisplayName("["+i+"]");
-				descs[i].setExpert(false);
-				descs[i].setHidden(false);
-				descs[i].setName(""+i);
-				descs[i].setPreferred(true);
-				descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
-				descs[i].setValue(TYPE, Integer.class);
-			}
-			return Arrays.asList(descs).iterator();
-		}
-		return null;
-	}
-
-	@Override
+        if (base instanceof List<?>) {
+            FeatureDescriptor[] descs = new FeatureDescriptor[((List<?>) base).size()];
+            for (int i = 0; i < descs.length; i++) {
+                descs[i] = new FeatureDescriptor();
+                descs[i].setDisplayName("["+i+"]");
+                descs[i].setExpert(false);
+                descs[i].setHidden(false);
+                descs[i].setName(""+i);
+                descs[i].setPreferred(true);
+                descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
+                descs[i].setValue(TYPE, Integer.class);
+            }
+            return Arrays.asList(descs).iterator();
+        }
+        return null;
+    }
+
+    @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
-		if (base instanceof List<?>) { // implies base != null
-			return Integer.class;
-		}
-		return null;
-	}
-
-	private final static int coerce(Object property) {
-		if (property instanceof Number) {
-			return ((Number) property).intValue();
-		}
-		if (property instanceof Character) {
-			return ((Character) property).charValue();
-		}
-		if (property instanceof Boolean) {
-			return (((Boolean) property).booleanValue() ? 1 : 0);
-		}
+        if (base instanceof List<?>) { // implies base != null
+            return Integer.class;
+        }
+        return null;
+    }
+
+    private final static int coerce(Object property) {
+        if (property instanceof Number) {
+            return ((Number) property).intValue();
+        }
+        if (property instanceof Character) {
+            return ((Character) property).charValue();
+        }
+        if (property instanceof Boolean) {
+            return (((Boolean) property).booleanValue() ? 1 : 0);
+        }
         if (property instanceof String) {
             return Integer.parseInt((String) property);
         }
-		throw new IllegalArgumentException(property != null ? property
-				.toString() : "null");
-	}
+        throw new IllegalArgumentException(property != null ?
+                property.toString() : "null");
+    }
 }

==================================================
PropertyNotFoundException.java
index a265d09a6e..14e47e2038 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -27,123 +27,123 @@ import java.util.Map;
 
 public class MapELResolver extends ELResolver {
 
-	private final static Class<?> UNMODIFIABLE = Collections.unmodifiableMap(
-			new HashMap<Object, Object>()).getClass();
+    private final static Class<?> UNMODIFIABLE = Collections.unmodifiableMap(
+            new HashMap<Object, Object>()).getClass();
 
-	private final boolean readOnly;
+    private final boolean readOnly;
 
-	public MapELResolver() {
-		this.readOnly = false;
-	}
+    public MapELResolver() {
+        this.readOnly = false;
+    }
 
-	public MapELResolver(boolean readOnly) {
-		this.readOnly = readOnly;
-	}
+    public MapELResolver(boolean readOnly) {
+        this.readOnly = readOnly;
+    }
 
-	@Override
+    @Override
     public Object getValue(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof Map<?,?>) {
-			context.setPropertyResolved(true);
-			return ((Map<?,?>) base).get(property);
-		}
-		
-		return null;
-	}
-
-	@Override
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof Map<?,?>) {
+            context.setPropertyResolved(true);
+            return ((Map<?,?>) base).get(property);
+        }
+        
+        return null;
+    }
+
+    @Override
     public Class<?> getType(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof Map<?,?>) {
-			context.setPropertyResolved(true);
-			Object obj = ((Map<?,?>) base).get(property);
-			return (obj != null) ? obj.getClass() : null;
-		}
-		
-		return null;
-	}
-
-	@Override
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof Map<?,?>) {
+            context.setPropertyResolved(true);
+            Object obj = ((Map<?,?>) base).get(property);
+            return (obj != null) ? obj.getClass() : null;
+        }
+        
+        return null;
+    }
+
+    @Override
     public void setValue(ELContext context, Object base, Object property,
-			Object value) throws NullPointerException,
-			PropertyNotFoundException, PropertyNotWritableException,
-			ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof Map<?, ?>) {
-			context.setPropertyResolved(true);
-
-			if (this.readOnly) {
-				throw new PropertyNotWritableException(message(context,
-						"resolverNotWriteable", new Object[] { base.getClass()
-								.getName() }));
-			}
-
-			try {
-			    @SuppressWarnings("unchecked") // Must be OK
-			    Map<Object, Object> map = ((Map<Object, Object>) base);
-			    map.put(property, value);
-			} catch (UnsupportedOperationException e) {
-				throw new PropertyNotWritableException(e);
-			}
-		}
-	}
-
-	@Override
+            Object value) throws NullPointerException,
+            PropertyNotFoundException, PropertyNotWritableException,
+            ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof Map<?, ?>) {
+            context.setPropertyResolved(true);
+
+            if (this.readOnly) {
+                throw new PropertyNotWritableException(message(context,
+                        "resolverNotWriteable", new Object[] { base.getClass()
+                                .getName() }));
+            }
+
+            try {
+                @SuppressWarnings("unchecked") // Must be OK
+                Map<Object, Object> map = ((Map<Object, Object>) base);
+                map.put(property, value);
+            } catch (UnsupportedOperationException e) {
+                throw new PropertyNotWritableException(e);
+            }
+        }
+    }
+
+    @Override
     public boolean isReadOnly(ELContext context, Object base, Object property)
-			throws NullPointerException, PropertyNotFoundException, ELException {
-		if (context == null) {
-			throw new NullPointerException();
-		}
-
-		if (base instanceof Map<?, ?>) {
-			context.setPropertyResolved(true);
-			return this.readOnly || UNMODIFIABLE.equals(base.getClass());
-		}
-		
-		return this.readOnly;
-	}
-
-	@Override
+            throws NullPointerException, PropertyNotFoundException, ELException {
+        if (context == null) {
+            throw new NullPointerException();
+        }
+
+        if (base instanceof Map<?, ?>) {
+            context.setPropertyResolved(true);
+            return this.readOnly || UNMODIFIABLE.equals(base.getClass());
+        }
+        
+        return this.readOnly;
+    }
+
+    @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-		if (base instanceof Map<?, ?>) {
-			Iterator<?> itr = ((Map<?, ?>) base).keySet().iterator();
-			List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();
-			Object key;
-			FeatureDescriptor desc;
-			while (itr.hasNext()) {
-				key = itr.next();
-				desc = new FeatureDescriptor();
-				desc.setDisplayName(key.toString());
-				desc.setExpert(false);
-				desc.setHidden(false);
-				desc.setName(key.toString());
-				desc.setPreferred(true);
-				desc.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
-				desc.setValue(TYPE, key.getClass());
-				feats.add(desc);
-			}
-			return feats.iterator();
-		}
-		return null;
-	}
-
-	@Override
+        if (base instanceof Map<?, ?>) {
+            Iterator<?> itr = ((Map<?, ?>) base).keySet().iterator();
+            List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();
+            Object key;
+            FeatureDescriptor desc;
+            while (itr.hasNext()) {
+                key = itr.next();
+                desc = new FeatureDescriptor();
+                desc.setDisplayName(key.toString());
+                desc.setExpert(false);
+                desc.setHidden(false);
+                desc.setName(key.toString());
+                desc.setPreferred(true);
+                desc.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);
+                desc.setValue(TYPE, key.getClass());
+                feats.add(desc);
+            }
+            return feats.iterator();
+        }
+        return null;
+    }
+
+    @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
-		if (base instanceof Map<?, ?>) {
-			return Object.class;
-		}
-		return null;
-	}
+        if (base instanceof Map<?, ?>) {
+            return Object.class;
+        }
+        return null;
+    }
 
 }

==================================================
ResourceBundleELResolver.java
index 37b7cf8100..e19127a370 100644
--- a/java/javax/el/PropertyNotFoundException.java
+++ b/java/javax/el/PropertyNotFoundException.java
@@ -21,7 +21,7 @@ package javax.el;
  *
  */
 public class PropertyNotFoundException extends ELException {
-	
+
     private static final long serialVersionUID = -3799200961303506745L;
 
     /**

==================================================
