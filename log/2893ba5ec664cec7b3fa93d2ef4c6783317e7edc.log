2893ba5ec664cec7b3fa93d2ef4c6783317e7edc
==================================================
No longer need to pass NioSelectorPool in constructors in I/O streams
==================================================
Mark Emlyn
==================================================
Mon Nov 10 16:45:33 2014 +0000
==================================================
Http11NioProtocol.java
No longer need to pass NioSelectorPool in constructors in I/O streams

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637920 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioProcessor.java
index 23d71f1a08..00515eee76 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -297,7 +297,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
                 HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
             return new NioProcessor(socket, leftoverInput, httpUpgradeProcessor,
-                    proto.getEndpoint().getSelectorPool(),
                     proto.getUpgradeAsyncWriteBufferSize());
         }
 

==================================================
NioServletInputStream.java
index 8c5762cf6e..55f164e7ab 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -23,7 +23,6 @@ import javax.servlet.http.HttpUpgradeHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
-import org.apache.tomcat.util.net.NioSelectorPool;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public class NioProcessor extends AbstractProcessor<NioChannel> {
@@ -35,11 +34,10 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
     private static final int INFINITE_TIMEOUT = -1;
 
     public NioProcessor(SocketWrapperBase<NioChannel> wrapper, ByteBuffer leftoverInput,
-            HttpUpgradeHandler httpUpgradeProcessor, NioSelectorPool pool,
-            int asyncWriteBufferSize) {
+            HttpUpgradeHandler httpUpgradeProcessor, int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
-                new NioServletInputStream(wrapper, pool),
-                new NioServletOutputStream(wrapper, asyncWriteBufferSize, pool));
+                new NioServletInputStream(wrapper),
+                new NioServletOutputStream(wrapper, asyncWriteBufferSize));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
         if (leftoverInput != null) {

==================================================
NioServletOutputStream.java
index a40d3cd694..32ada07012 100644
--- a/java/org/apache/coyote/http11/upgrade/NioServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/NioServletInputStream.java
@@ -31,10 +31,9 @@ public class NioServletInputStream extends AbstractServletInputStream {
     private final NioChannel channel;
     private final NioSelectorPool pool;
 
-    public NioServletInputStream(SocketWrapperBase<NioChannel> wrapper,
-            NioSelectorPool pool) {
+    public NioServletInputStream(SocketWrapperBase<NioChannel> wrapper) {
         this.channel = wrapper.getSocket();
-        this.pool = pool;
+        this.pool = ((NioEndpoint) wrapper.getEndpoint()).getSelectorPool();
     }
 
     @Override

==================================================
SocketWrapperBase.java
index d6839a0bb0..1739bdb0a0 100644
--- a/java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java
@@ -33,10 +33,10 @@ public class NioServletOutputStream extends AbstractServletOutputStream<NioChann
 
 
     public NioServletOutputStream(SocketWrapperBase<NioChannel> socketWrapper,
-            int asyncWriteBufferSize, NioSelectorPool pool) {
+            int asyncWriteBufferSize) {
         super(socketWrapper, asyncWriteBufferSize);
         channel = socketWrapper.getSocket();
-        this.pool = pool;
+        this.pool = ((NioEndpoint) socketWrapper.getEndpoint()).getSelectorPool();
         maxWrite = channel.getBufHandler().getWriteBuffer().capacity();
     }
 

==================================================
