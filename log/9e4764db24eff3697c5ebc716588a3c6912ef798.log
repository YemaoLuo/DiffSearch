9e4764db24eff3697c5ebc716588a3c6912ef798
==================================================
Refactoring - reduce duplication
==================================================
Mark Emlyn
==================================================
Thu Jul 29 11:49:47 2010 +0000
==================================================
DeltaManager.java
Refactoring - reduce duplication
Handle maxActiveSessions, rejectedSessions and processingTime in ManagerBase

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@980411 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerBase.java
index 2c63b0f21d..66693b6b12 100644
--- a/java/org/apache/catalina/session/LocalStrings_ja.properties
+++ b/java/org/apache/catalina/session/LocalStrings_ja.properties
@@ -28,12 +28,12 @@ JDBCStore.checkConnectionDBReOpenFail=\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e
 JDBCStore.checkConnectionSQLException=SQL\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3057\u305f {0}
 JDBCStore.checkConnectionClassNotFoundException=JDBC\u30c9\u30e9\u30a4\u30d0\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093 {0}
 managerBase.complete=\u4e71\u6570\u767a\u751f\u5668\u306e\u30b7\u30fc\u30c9\u306e\u751f\u6210\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f
+managerBase.createSession.ise=createSession: \u30a2\u30af\u30c6\u30a3\u30d6\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u591a\u3059\u304e\u307e\u3059
 managerBase.getting=\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 {0} \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059
 managerBase.gotten=\u30e1\u30c3\u30bb\u30fc\u30b8\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u53d6\u5f97\u3092\u5b8c\u4e86\u3057\u307e\u3057\u305f
 managerBase.random=\u30af\u30e9\u30b9 {0} \u306e\u4e71\u6570\u767a\u751f\u5668\u306e\u521d\u671f\u5316\u306e\u4f8b\u5916\u3067\u3059
 managerBase.seeding=\u4e71\u6570\u767a\u751f\u5668\u30af\u30e9\u30b9 {0} \u306e\u30b7\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059
 serverSession.value.iae=null\u5024\u3067\u3059
-standardManager.createSession.ise=createSession: \u30a2\u30af\u30c6\u30a3\u30d6\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u591a\u3059\u304e\u307e\u3059
 standardManager.expireException=processsExpire: \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u51e6\u7406\u4e2d\u306e\u4f8b\u5916\u3067\u3059
 standardManager.loading={0} \u304b\u3089\u6301\u7d9a\u3055\u308c\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059
 standardManager.loading.cnfe=\u6301\u7d9a\u3055\u308c\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u4e2d\u306bClassNotFoundException\u304c\u767a\u751f\u3057\u307e\u3057\u305f: {0}

==================================================
PersistentManagerBase.java
index 4219f2319c..53e0fae2dd 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -185,6 +185,16 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     private final Object maxActiveUpdateLock = new Object();
 
+    /**
+     * The maximum number of active Sessions allowed, or -1 for no limit.
+     */
+    protected int maxActiveSessions = -1;
+
+    /**
+     * Number of session creations that failed due to maxActiveSessions.
+     */
+    protected int rejectedSessions = 0;
+
     // number of duplicated session ids - anything >0 means we have problems
     protected volatile int duplicates=0;
 
@@ -616,6 +626,15 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
+    /**
+     * Number of session creations that failed due to maxActiveSessions
+     * 
+     * @return The count
+     */
+    public int getRejectedSessions() {
+        return rejectedSessions;
+    }
+
     /**
      * Gets the number of sessions that have expired.
      *
@@ -778,6 +797,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      */
     public Session createSession(String sessionId) {
         
+        if ((maxActiveSessions >= 0) &&
+                (sessions.size() >= maxActiveSessions)) {
+            rejectedSessions++;
+            throw new IllegalStateException(
+                    sm.getString("managerBase.createSession.ise"));
+        }
+        
         // Recycle or create a Session instance
         Session session = createEmptySession();
 
@@ -1052,6 +1078,34 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
+    /**
+     * Return the maximum number of active Sessions allowed, or -1 for
+     * no limit.
+     */
+    public int getMaxActiveSessions() {
+
+        return (this.maxActiveSessions);
+
+    }
+
+
+    /**
+     * Set the maximum number of active Sessions allowed, or -1 for
+     * no limit.
+     *
+     * @param max The new maximum number of sessions
+     */
+    public void setMaxActiveSessions(int max) {
+
+        int oldMaxActiveSessions = this.maxActiveSessions;
+        this.maxActiveSessions = max;
+        support.firePropertyChange("maxActiveSessions",
+                                   new Integer(oldMaxActiveSessions),
+                                   new Integer(this.maxActiveSessions));
+
+    }
+
+
     /**
      * Gets the longest time (in seconds) that an expired session had been
      * alive.

==================================================
StandardManager.java
index 3165936c84..14324fe5c6 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -138,12 +138,6 @@ public abstract class PersistentManagerBase extends ManagerBase
     private static final String info = "PersistentManagerBase/1.1";
 
 
-    /**
-     * The maximum number of active Sessions allowed, or -1 for no limit.
-     */
-    protected int maxActiveSessions = -1;
-
-
     /**
      * The descriptive name of this Manager implementation (for logging).
      */
@@ -185,12 +179,6 @@ public abstract class PersistentManagerBase extends ManagerBase
     protected int maxIdleSwap = -1;
 
 
-    /**
-     * Number of session creations that failed due to maxActiveSessions.
-     */
-    protected int rejectedSessions = 0;
-
-
     /**
      * Processing time during session expiration and passivation.
      */
@@ -371,44 +359,6 @@ public abstract class PersistentManagerBase extends ManagerBase
     }
 
 
-    /**
-     * Return the maximum number of active Sessions allowed, or -1 for
-     * no limit.
-     */
-    public int getMaxActiveSessions() {
-
-        return (this.maxActiveSessions);
-
-    }
-
-
-    /**
-     * Set the maximum number of active Sessions allowed, or -1 for
-     * no limit.
-     *
-     * @param max The new maximum number of sessions
-     */
-    public void setMaxActiveSessions(int max) {
-
-        int oldMaxActiveSessions = this.maxActiveSessions;
-        this.maxActiveSessions = max;
-        support.firePropertyChange("maxActiveSessions",
-                                   new Integer(oldMaxActiveSessions),
-                                   new Integer(this.maxActiveSessions));
-
-    }
-
-
-    /** 
-     * Number of session creations that failed due to maxActiveSessions.
-     *
-     * @return The count
-     */
-    public int getRejectedSessions() {
-        return rejectedSessions;
-    }
-
-    
     /**
      * Return the descriptive short name of this Manager implementation.
      */

==================================================
