fb51ca72f13d821ea49ff778ce9d08f5482a2b84
==================================================
Move allowing HTTP separators config option to the CookieProcessor
==================================================
Mark Emlyn
==================================================
Fri Sep 26 13:20:55 2014 +0000
==================================================
CookieSupport.java
Move allowing HTTP separators config option to the CookieProcessor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1627781 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LegacyCookieProcessor.java
index 3b8b09ab5f..17267e6b65 100644
--- a/java/org/apache/tomcat/util/http/CookieSupport.java
+++ b/java/org/apache/tomcat/util/http/CookieSupport.java
@@ -43,7 +43,10 @@ public final class CookieSupport {
      * spec but are disallowed by the HTTP spec will be allowed in v0 cookie
      * names and values. These characters are: \"()/:<=>?@[\\]{} Note that the
      * inclusion of / depends on the value of {@link #FWD_SLASH_IS_SEPARATOR}.
+     *
+     * @deprecated  Will be removed in Tomcat 9.
      */
+    @Deprecated
     public static final boolean ALLOW_HTTP_SEPARATORS_IN_V0;
 
     /**

==================================================
TestCookieParsing.java
index 7f63c1aa23..6bf2e163af 100644
--- a/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
@@ -51,6 +51,8 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     @SuppressWarnings("deprecation") // Default to false when deprecated code is removed
     private boolean allowNameOnly = CookieSupport.ALLOW_NAME_ONLY;
 
+    @SuppressWarnings("deprecation") // Default to false when deprecated code is removed
+    private boolean allowHttpSepsInV0 = CookieSupport.ALLOW_HTTP_SEPARATORS_IN_V0;
 
 
     public boolean getAllowEqualsInValue() {
@@ -73,6 +75,16 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     }
 
 
+    public boolean getAllowHttpSepsInV0() {
+        return allowHttpSepsInV0;
+    }
+
+
+    public void setAllowHttpSepsInV0(boolean allowHttpSepsInV0) {
+        this.allowHttpSepsInV0 = allowHttpSepsInV0;
+    }
+
+
     @Override
     public Charset getCharset() {
         return StandardCharsets.ISO_8859_1;
@@ -150,7 +162,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
             // Skip whitespace and non-token characters (separators)
             while (pos < end &&
                    (CookieSupport.isHttpSeparator((char) bytes[pos]) &&
-                           !CookieSupport.ALLOW_HTTP_SEPARATORS_IN_V0 ||
+                           !getAllowHttpSepsInV0() ||
                     CookieSupport.isV0Separator((char) bytes[pos]) ||
                     isWhiteSpace(bytes[pos])))
                 {pos++; }
@@ -217,7 +229,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
                 default:
                     if (version == 0 &&
                                 !CookieSupport.isV0Separator((char)bytes[pos]) &&
-                                CookieSupport.ALLOW_HTTP_SEPARATORS_IN_V0 ||
+                                getAllowHttpSepsInV0() ||
                             !CookieSupport.isHttpSeparator((char)bytes[pos]) ||
                             bytes[pos] == '=') {
                         // Token
@@ -386,9 +398,7 @@ public final class LegacyCookieProcessor implements CookieProcessor {
         int pos = off;
         while (pos < end &&
                 (!CookieSupport.isHttpSeparator((char)bytes[pos]) ||
-                 version == 0 &&
-                        CookieSupport.ALLOW_HTTP_SEPARATORS_IN_V0 &&
-                        bytes[pos] != '=' &&
+                 version == 0 && getAllowHttpSepsInV0() && bytes[pos] != '=' &&
                         !CookieSupport.isV0Separator((char)bytes[pos]) ||
                  !isName && bytes[pos] == '=' && getAllowEqualsInValue())) {
             pos++;

==================================================
TestCookiesAllowHttpSeps.java
index 143d8fbe00..0e05941311 100644
--- a/test/org/apache/tomcat/util/http/TestCookieParsing.java
+++ b/test/org/apache/tomcat/util/http/TestCookieParsing.java
@@ -37,9 +37,15 @@ public class TestCookieParsing extends TomcatBaseTest {
 
     private static final String[] COOKIES_WITH_EQUALS = new String[] {
             "name=equals=middle", "name==equalsstart", "name=equalsend=" };
+    private static final String COOKIES_WITH_EQUALS_TRUNC = "name=equalsname=name=equalsend";
 
-    private static final String[] COOKIEs_WITH_NAME_ONLY = new String[] {
+    private static final String[] COOKIES_WITH_NAME_ONLY = new String[] {
             "bob", "bob=" };
+    private static final String COOKIES_WITH_NAME_ONLY_CONCAT = "bob=bob=";
+
+    private static final String[] COOKIES_WITH_SEPS = new String[] {
+        "name=val(ue" };
+    private static final String COOKIES_WITH_SEPS_TRUNC = "name=val";
 
 
     @Test
@@ -47,6 +53,7 @@ public class TestCookieParsing extends TomcatBaseTest {
         doTestLegacyEquals(true);
     }
 
+
     @Test
     public void testLegacyWithoutEquals() throws Exception {
         doTestLegacyEquals(false);
@@ -64,12 +71,7 @@ public class TestCookieParsing extends TomcatBaseTest {
         if (allowEquals) {
             expected = concat(COOKIES_WITH_EQUALS);
         } else {
-            StringBuilder sb = new StringBuilder();
-            for (String cookie : COOKIES_WITH_EQUALS) {
-                int end = cookie.indexOf('=', cookie.indexOf('=') + 1);
-                sb.append(cookie.substring(0, end));
-            }
-            expected = sb.toString();
+            expected = COOKIES_WITH_EQUALS_TRUNC;
         }
         TestCookieParsingClient client = new TestCookieParsingClient(
                 legacyCookieProcessor, COOKIES_WITH_EQUALS, expected);
@@ -91,6 +93,7 @@ public class TestCookieParsing extends TomcatBaseTest {
         doTestLegacyNameOnly(true);
     }
 
+
     @Test
     public void testLegacyWithoutNameOnly() throws Exception {
         doTestLegacyNameOnly(false);
@@ -103,12 +106,12 @@ public class TestCookieParsing extends TomcatBaseTest {
 
         String expected;
         if (nameOnly) {
-            expected = concat(COOKIEs_WITH_NAME_ONLY, true);
+            expected = COOKIES_WITH_NAME_ONLY_CONCAT;
         } else {
             expected = "";
         }
         TestCookieParsingClient client = new TestCookieParsingClient(
-                legacyCookieProcessor, COOKIEs_WITH_NAME_ONLY, expected);
+                legacyCookieProcessor, COOKIES_WITH_NAME_ONLY, expected);
         client.doRequest();
     }
 
@@ -117,23 +120,53 @@ public class TestCookieParsing extends TomcatBaseTest {
     public void testRfc6265NameOnly() throws Exception {
         // Always allows equals
         TestCookieParsingClient client = new TestCookieParsingClient(
-                new Rfc6265CookieProcessor(), COOKIEs_WITH_NAME_ONLY,
-                concat(COOKIEs_WITH_NAME_ONLY, true));
+                new Rfc6265CookieProcessor(), COOKIES_WITH_NAME_ONLY,
+                COOKIES_WITH_NAME_ONLY_CONCAT);
         client.doRequest();
     }
 
 
-    private static String concat(String[] input) {
-        return concat(input, false);
+    @Test
+    public void testLegacyWithSeps() throws Exception {
+        doTestLegacySeps(true);
+    }
+
+
+    @Test
+    public void testLegacyWithoutSeps() throws Exception {
+        doTestLegacySeps(false);
+    }
+
+
+    private void doTestLegacySeps(boolean seps) throws Exception {
+        LegacyCookieProcessor legacyCookieProcessor = new LegacyCookieProcessor();
+        legacyCookieProcessor.setAllowHttpSepsInV0(seps);
+
+        String expected;
+        if (seps) {
+            expected = concat(COOKIES_WITH_SEPS);
+        } else {
+            expected = COOKIES_WITH_SEPS_TRUNC;
+        }
+        TestCookieParsingClient client = new TestCookieParsingClient(
+                legacyCookieProcessor, COOKIES_WITH_SEPS, expected);
+        client.doRequest();
     }
 
-    private static String concat(String[] input, boolean mustEndInEquals) {
+
+    @Test
+    public void testRfc6265Seps() throws Exception {
+        // Always allows equals
+        TestCookieParsingClient client = new TestCookieParsingClient(
+                new Rfc6265CookieProcessor(), COOKIES_WITH_SEPS, concat(COOKIES_WITH_SEPS));
+        client.doRequest();
+    }
+
+
+    private static String concat(String[] input) {
         StringBuilder result = new StringBuilder();
         for (String s : input) {
             result.append(s);
-            if (!s.endsWith("=") && mustEndInEquals) {
-                result.append('=');
-            }
         }
         return result.toString();
     }

==================================================
