6b3c4bf755cf0da0f767536468f600b6fd9c2978
==================================================
Start on non-blocking I/O support.
==================================================
Mark Thomas
==================================================
Thu Sep 24 15:58:32 2015 +0000
==================================================
Stream.java
Start on non-blocking I/O support.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705091 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StreamProcessor.java
index 982263ad0e..21474cab85 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -298,6 +298,10 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    boolean isInputFinished() {
+        return !state.isFrameTypePermitted(FrameType.DATA);
+    }
+
     class StreamOutputBuffer implements OutputBuffer {
 
         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);
@@ -428,11 +432,11 @@ public class Stream extends AbstractStream implements HeaderEmitter {
 
             ensureBuffersExist();
 
-            int written = 0;
+            int written = -1;
 
             // Ensure that only one thread accesses inBuffer at a time
             synchronized (inBuffer) {
-                while (inBuffer.position() == 0 && state.isFrameTypePermitted(FrameType.DATA)) {
+                while (inBuffer.position() == 0 && !isInputFinished()) {
                     // Need to block until some data is written
                     try {
                         inBuffer.wait();
@@ -450,7 +454,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
                     written = inBuffer.remaining();
                     inBuffer.get(outBuffer, 0, written);
                     inBuffer.clear();
-                } else if (!state.isFrameTypePermitted(FrameType.DATA)) {
+                } else if (isInputFinished()) {
                     return -1;
                 } else {
                     // Should never happen

==================================================
StreamStateMachine.java
index dc9950d2b4..331ea51930 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -259,6 +259,14 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
             break;
         }
 
+        // Servlet 3.1 non-blocking I/O
+        case REQUEST_BODY_FULLY_READ: {
+            AtomicBoolean result = (AtomicBoolean) param;
+            result.set(stream.isInputFinished());
+            break;
+        }
+
+
         // Unsupported / illegal under HTTP/2
         case UPGRADE:
             throw new UnsupportedOperationException(
@@ -275,7 +283,6 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
         case END_REQUEST:
         case NB_READ_INTEREST:
         case NB_WRITE_INTEREST:
-        case REQUEST_BODY_FULLY_READ:
         case REQ_SET_BODY_REPLAY:
         case RESET:
             log.info("TODO: Implement [" + actionCode + "] for HTTP/2");

==================================================
