1fbe4cb520dc22f27bf7152018320619d1c3adf7
==================================================
More work towards using Charset rather than String internally to reduce the number of calls required to B2CConverter.getCharset() or equivalent during a request.
==================================================
Mark Thomas
==================================================
Thu May 4 13:29:20 2017 +0000
==================================================
CoyoteAdapter.java
More work towards using Charset rather than String internally to reduce the number of calls required to B2CConverter.getCharset() or equivalent during a request.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793798 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 0168ce34ac..9a907d4087 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -18,6 +18,7 @@ package org.apache.catalina.connector;
 
 import java.io.IOException;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.EnumSet;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -771,7 +772,8 @@ public class CoyoteAdapter implements Adapter {
         // Possible redirect
         MessageBytes redirectPathMB = request.getMappingData().redirectPath;
         if (!redirectPathMB.isNull()) {
-            String redirectPath = URLEncoder.DEFAULT.encode(redirectPathMB.toString(), "UTF-8");
+            String redirectPath = URLEncoder.DEFAULT.encode(
+                    redirectPathMB.toString(), StandardCharsets.UTF_8);
             String query = request.getQueryString();
             if (request.isRequestedSessionIdFromURL()) {
                 // This is not optimal, but as this is not very common, it

==================================================
ApplicationContext.java
index 77169b279d..083f39c222 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -24,6 +24,7 @@ import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.InvocationTargetException;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.Principal;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1359,9 +1360,9 @@ public class Request implements HttpServletRequest {
         if (context.getDispatchersUseEncodedPaths()) {
             if (pos >= 0) {
                 relative = URLEncoder.DEFAULT.encode(
-                        requestPath.substring(0, pos + 1), "UTF-8") + path;
+                        requestPath.substring(0, pos + 1), StandardCharsets.UTF_8) + path;
             } else {
-                relative = URLEncoder.DEFAULT.encode(requestPath, "UTF-8") + path;
+                relative = URLEncoder.DEFAULT.encode(requestPath, StandardCharsets.UTF_8) + path;
             }
         } else {
             if (pos >= 0) {

==================================================
AsyncContextImpl.java
index b81fbf6cef..0ac897c9ee 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -22,6 +22,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
@@ -486,7 +487,7 @@ public class ApplicationContext implements ServletContext {
 
         mappingData.recycle();
 
-        String encodedUri = URLEncoder.DEFAULT.encode(uriCC.toString(), "UTF-8");
+        String encodedUri = URLEncoder.DEFAULT.encode(uriCC.toString(), StandardCharsets.UTF_8);
 
         // Construct a RequestDispatcher to process this request
         return new ApplicationDispatcher(wrapper, encodedUri, wrapperPath, pathInfo,

==================================================
StandardContext.java
index 49718c2995..f4d9632a6a 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.core;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -164,7 +165,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             path += pathInfo;
         }
         if (this.context.getDispatchersUseEncodedPaths()) {
-            path = URLEncoder.DEFAULT.encode(path, "UTF-8");
+            path = URLEncoder.DEFAULT.encode(path, StandardCharsets.UTF_8);
         }
         dispatch(path);
     }

==================================================
HTMLManagerServlet.java
index bed9b1441f..869d46c8ad 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
@@ -2066,7 +2067,7 @@ public class StandardContext extends ContainerBase
             log.warn(sm.getString(
                     "standardContext.pathInvalid", path, this.path));
         }
-        encodedPath = URLEncoder.DEFAULT.encode(this.path, "UTF-8");
+        encodedPath = URLEncoder.DEFAULT.encode(this.path, StandardCharsets.UTF_8);
         if (getName() == null) {
             setName(this.path);
         }

==================================================
DefaultServlet.java
index 31e85baccd..7bae2d0182 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -24,6 +24,7 @@ import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -423,10 +424,11 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
                 StringBuilder tmp = new StringBuilder();
                 tmp.append("path=");
-                tmp.append(URLEncoder.DEFAULT.encode(displayPath, "UTF-8"));
+                tmp.append(URLEncoder.DEFAULT.encode(displayPath, StandardCharsets.UTF_8));
                 if (ctxt.getWebappVersion().length() > 0) {
                     tmp.append("&version=");
-                    tmp.append(URLEncoder.DEFAULT.encode(ctxt.getWebappVersion(), "UTF-8"));
+                    tmp.append(URLEncoder.DEFAULT.encode(
+                            ctxt.getWebappVersion(), StandardCharsets.UTF_8));
                 }
                 String pathVersion = tmp.toString();
 
@@ -438,7 +440,8 @@ public final class HTMLManagerServlet extends ManagerServlet {
                 }
 
                 args = new Object[7];
-                args[0] = "<a href=\"" + URLEncoder.DEFAULT.encode(contextPath + "/", "UTF-8") +
+                args[0] = "<a href=\"" +
+                        URLEncoder.DEFAULT.encode(contextPath + "/", StandardCharsets.UTF_8) +
                         "\">" + RequestUtil.filter(displayPath) + "</a>";
                 if ("".equals(ctxt.getWebappVersion())) {
                     args[1] = noVersion;

==================================================
SSIMediator.java
index 48f287d75d..7a6711e29b 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -32,6 +32,7 @@ import java.io.Reader;
 import java.io.Serializable;
 import java.io.StringReader;
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 import java.security.AccessController;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -704,7 +705,7 @@ public class DefaultServlet extends HttpServlet {
      * @return the rewritten path
      */
     protected String rewriteUrl(String path) {
-        return URLEncoder.DEFAULT.encode(path, "UTF-8");
+        return URLEncoder.DEFAULT.encode(path, StandardCharsets.UTF_8);
     }
 
 

==================================================
URLEncoder.java
index 9a494e9941..129ccbf8cd 100644
--- a/java/org/apache/catalina/ssi/SSIMediator.java
+++ b/java/org/apache/catalina/ssi/SSIMediator.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.ssi;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashSet;
@@ -279,7 +280,7 @@ public class SSIMediator {
     protected String encode(String value, String encoding) {
         String retVal = null;
         if (encoding.equalsIgnoreCase("url")) {
-            retVal = URLEncoder.DEFAULT.encode(value, "UTF-8");
+            retVal = URLEncoder.DEFAULT.encode(value, StandardCharsets.UTF_8);
         } else if (encoding.equalsIgnoreCase("none")) {
             retVal = value;
         } else if (encoding.equalsIgnoreCase("entity")) {

==================================================
Resolver.java
index ef503db053..245610eac5 100644
--- a/java/org/apache/catalina/util/URLEncoder.java
+++ b/java/org/apache/catalina/util/URLEncoder.java
@@ -19,8 +19,12 @@ package org.apache.catalina.util;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.BitSet;
 
+import org.apache.tomcat.util.buf.B2CConverter;
+
 /**
  *
  * This class is very similar to the java.net.URLEncoder class.
@@ -133,18 +137,35 @@ public class URLEncoder {
      * @param encoding  The encoding to use to convert the path to bytes
      *
      * @return The encoded path
+     *
+     * @deprecated This will be removed in Tomcat 9.0.x
      */
+    @Deprecated
     public String encode(String path, String encoding) {
+        Charset charset;
+        try {
+            charset = B2CConverter.getCharset(encoding);
+        } catch (UnsupportedEncodingException e) {
+            charset = Charset.defaultCharset();
+        }
+        return encode(path, charset);
+    }
+
+
+    /**
+     * URL encodes the provided path using the given character set.
+     *
+     * @param path      The path to encode
+     * @param charset   The character set to use to convert the path to bytes
+     *
+     * @return The encoded path
+     */
+    public String encode(String path, Charset charset) {
+
         int maxBytesPerChar = 10;
         StringBuilder rewrittenPath = new StringBuilder(path.length());
         ByteArrayOutputStream buf = new ByteArrayOutputStream(maxBytesPerChar);
-        OutputStreamWriter writer = null;
-        try {
-            writer = new OutputStreamWriter(buf, encoding);
-        } catch (Exception e) {
-            e.printStackTrace();
-            writer = new OutputStreamWriter(buf);
-        }
+        OutputStreamWriter writer = new OutputStreamWriter(buf, charset);
 
         for (int i = 0; i < path.length(); i++) {
             int c = path.charAt(i);

==================================================
ResolverImpl.java
index b02e6fcb31..50fece1f60 100644
--- a/java/org/apache/catalina/valves/rewrite/Resolver.java
+++ b/java/org/apache/catalina/valves/rewrite/Resolver.java
@@ -17,6 +17,8 @@
 
 package org.apache.catalina.valves.rewrite;
 
+import java.nio.charset.Charset;
+
 /**
  * Resolver abstract class.
  */
@@ -34,5 +36,13 @@ public abstract class Resolver {
 
     public abstract boolean resolveResource(int type, String name);
 
+    /**
+     * @return The name of the encoding to use to %nn encode URIs
+     *
+     * @deprecated This will be removed in Tomcat 9.0.x
+     */
+    @Deprecated
     public abstract String getUriEncoding();
+
+    public abstract Charset getUriCharset();
 }

==================================================
RewriteValve.java
index 9f76cbea39..91565f819c 100644
--- a/java/org/apache/catalina/valves/rewrite/ResolverImpl.java
+++ b/java/org/apache/catalina/valves/rewrite/ResolverImpl.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.valves.rewrite;
 
+import java.nio.charset.Charset;
 import java.util.Calendar;
 
 import org.apache.catalina.WebResource;
@@ -178,7 +179,13 @@ public class ResolverImpl extends Resolver {
     }
 
     @Override
+    @Deprecated
     public String getUriEncoding() {
         return request.getConnector().getURIEncoding();
     }
+
+    @Override
+    public Charset getUriCharset() {
+        return request.getConnector().getURICharset();
+    }
 }

==================================================
Substitution.java
index f46e6e0468..5adff68c8d 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -23,7 +23,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.StringReader;
-import java.net.URLDecoder;
+import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Hashtable;
@@ -50,6 +50,7 @@ import org.apache.catalina.valves.ValveBase;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.buf.UriUtil;
 import org.apache.tomcat.util.http.RequestUtil;
 
@@ -296,7 +297,7 @@ public class RewriteValve extends ValveBase {
 
             // As long as MB isn't a char sequence or affiliated, this has to be
             // converted to a string
-            String uriEncoding = request.getConnector().getURIEncoding();
+            Charset uriCharset = request.getConnector().getURICharset();
             String originalQueryStringEncoded = request.getQueryString();
             MessageBytes urlMB =
                     context ? request.getRequestPathMB() : request.getDecodedRequestURIMB();
@@ -360,7 +361,7 @@ public class RewriteValve extends ValveBase {
                     }
 
                     StringBuffer urlStringEncoded =
-                            new StringBuffer(URLEncoder.DEFAULT.encode(urlStringDecoded, uriEncoding));
+                            new StringBuffer(URLEncoder.DEFAULT.encode(urlStringDecoded, uriCharset));
                     if (originalQueryStringEncoded != null &&
                             originalQueryStringEncoded.length() > 0) {
                         if (rewrittenQueryStringDecoded == null) {
@@ -371,7 +372,7 @@ public class RewriteValve extends ValveBase {
                                 // if qsa is specified append the query
                                 urlStringEncoded.append('?');
                                 urlStringEncoded.append(URLEncoder.QUERY.encode(
-                                        rewrittenQueryStringDecoded, uriEncoding));
+                                        rewrittenQueryStringDecoded, uriCharset));
                                 urlStringEncoded.append('&');
                                 urlStringEncoded.append(originalQueryStringEncoded);
                             } else if (index == urlStringEncoded.length() - 1) {
@@ -381,13 +382,13 @@ public class RewriteValve extends ValveBase {
                             } else {
                                 urlStringEncoded.append('?');
                                 urlStringEncoded.append(URLEncoder.QUERY.encode(
-                                        rewrittenQueryStringDecoded, uriEncoding));
+                                        rewrittenQueryStringDecoded, uriCharset));
                             }
                         }
                     } else if (rewrittenQueryStringDecoded != null) {
                         urlStringEncoded.append('?');
                         urlStringEncoded.append(
-                                URLEncoder.QUERY.encode(rewrittenQueryStringDecoded, uriEncoding));
+                                URLEncoder.QUERY.encode(rewrittenQueryStringDecoded, uriCharset));
                     }
 
                     // Insert the context if
@@ -400,7 +401,7 @@ public class RewriteValve extends ValveBase {
                     }
                     if (rule.isNoescape()) {
                         response.sendRedirect(
-                                URLDecoder.decode(urlStringEncoded.toString(), uriEncoding));
+                                UDecoder.URLDecode(urlStringEncoded.toString(), uriCharset));
                     } else {
                         response.sendRedirect(urlStringEncoded.toString());
                     }
@@ -485,7 +486,7 @@ public class RewriteValve extends ValveBase {
                         // This is neither decoded nor normalized
                         chunk.append(contextPath);
                     }
-                    chunk.append(URLEncoder.DEFAULT.encode(urlStringDecoded, uriEncoding));
+                    chunk.append(URLEncoder.DEFAULT.encode(urlStringDecoded, uriCharset));
                     request.getCoyoteRequest().requestURI().toChars();
                     // Decoded and normalized URI
                     // Rewriting may have denormalized the URL
@@ -504,7 +505,7 @@ public class RewriteValve extends ValveBase {
                         request.getCoyoteRequest().queryString().setString(null);
                         chunk = request.getCoyoteRequest().queryString().getCharChunk();
                         chunk.recycle();
-                        chunk.append(URLEncoder.QUERY.encode(queryStringDecoded, uriEncoding));
+                        chunk.append(URLEncoder.QUERY.encode(queryStringDecoded, uriCharset));
                         if (qsa && originalQueryStringEncoded != null &&
                                 originalQueryStringEncoded.length() > 0) {
                             chunk.append('&');

==================================================
TestApplicationContextGetRequestDispatcher.java
index a9c34b18f2..d723192475 100644
--- a/java/org/apache/catalina/valves/rewrite/Substitution.java
+++ b/java/org/apache/catalina/valves/rewrite/Substitution.java
@@ -51,7 +51,7 @@ public class Substitution {
                 //       We might want to consider providing a dedicated decoder
                 //       with an option to add additional safe characters to
                 //       provide users with more flexibility
-                return URLEncoder.DEFAULT.encode(result, resolver.getUriEncoding());
+                return URLEncoder.DEFAULT.encode(result, resolver.getUriCharset());
             } else {
                 return result;
             }

==================================================
