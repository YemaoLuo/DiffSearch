9600ecc2e07724644426a4d6db99730895c3d686
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57621
==================================================
Mark Thomas
==================================================
Tue Mar 3 09:14:17 2015 +0000
==================================================
AsyncContextImpl.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57621
When an async request completes, need to ensure that any unread input is swallowed.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1663562 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ActionCode.java
index 699cd5c226..3d1dac4a9f 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -107,11 +107,15 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             context.unbind(Globals.IS_SECURITY_ENABLED, oldCL);
         }
 
-        // The application doesn't know it has to stop writing until it receives
-        // the complete event so the response has to be closed after firing the
-        // event.
+        // The application doesn't know it has to stop read and/or writing until
+        // it receives the complete event so the request and response have to be
+        // closed after firing the event.
         try {
+            // First of all ensure that any data written to the response is
+            // written to the I/O layer.
             request.getResponse().finishResponse();
+            // Close the request and the response.
+            request.getCoyoteRequest().action(ActionCode.END_REQUEST, null);
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             // Catch this here and allow async context complete to continue

==================================================
AjpProcessor.java
index cf951ab672..f5418b0308 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -228,5 +228,11 @@ public enum ActionCode {
      * when the non-blocking listeners are configured on a thread where the
      * processing wasn't triggered by a read or write event on the socket.
      */
-    DISPATCH_EXECUTE
+    DISPATCH_EXECUTE,
+
+    /**
+     * Trigger end of request processing (remaining input swallowed, write any
+     * remaining parts of the response etc.).
+     */
+    END_REQUEST
 }

==================================================
Http11Processor.java
index e8ac663f46..595eac6b11 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -600,6 +600,9 @@ public class AjpProcessor extends AbstractProcessor {
             setErrorState(ErrorState.CLOSE_NOW, null);
             break;
         }
+        case END_REQUEST: {
+            // NO-OP for AJP
+        }
         }
     }
 

==================================================
SimpleHttpClient.java
index 3a6eb99b59..a2668c0373 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -974,6 +974,9 @@ public class Http11Processor extends AbstractProcessor {
             }
             break;
         }
+        case END_REQUEST: {
+            endRequest();
+        }
         }
     }
 
@@ -1128,22 +1131,12 @@ public class Http11Processor extends AbstractProcessor {
 
             // Finish the handling of the request
             rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);
-
             if (!isAsync()) {
-                if (getErrorState().isError()) {
-                    // If we know we are closing the connection, don't drain
-                    // input. This way uploading a 100GB file doesn't tie up the
-                    // thread if the servlet has rejected it.
-                    inputBuffer.setSwallowInput(false);
-                } else {
-                    // Need to check this again here in case the response was
-                    // committed before the error that requires the connection
-                    // to be closed occurred.
-                    checkExpectationAndResponseStatus();
-                }
+                // If this is an async request then the request ends when it has
+                // been completed. The AsyncContext is responsible for calling
+                // endRequest() in that case.
                 endRequest();
             }
-
             rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);
 
             // If there was an error, make sure the request is counted as
@@ -1807,7 +1800,23 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    /*
+     * No more input will be passed to the application. Remaining input will be
+     * swallowed or the connection dropped depending on the error and
+     * expectation status.
+     */
     private void endRequest() {
+        if (getErrorState().isError()) {
+            // If we know we are closing the connection, don't drain
+            // input. This way uploading a 100GB file doesn't tie up the
+            // thread if the servlet has rejected it.
+            inputBuffer.setSwallowInput(false);
+        } else {
+            // Need to check this again here in case the response was
+            // committed before the error that requires the connection
+            // to be closed occurred.
+            checkExpectationAndResponseStatus();
+        }
 
         // Finish the handling of the request
         if (getErrorState().isIoAllowed()) {

==================================================
TestHttp11Processor.java
index abeb029b14..d5e3a3b990 100644
--- a/test/org/apache/catalina/startup/SimpleHttpClient.java
+++ b/test/org/apache/catalina/startup/SimpleHttpClient.java
@@ -385,6 +385,10 @@ public abstract class SimpleHttpClient {
 
         useContinue = false;
 
+        resetResponse();
+    }
+
+    public void resetResponse() {
         responseLine = null;
         responseHeaders = new ArrayList<>();
         responseBody = null;

==================================================
