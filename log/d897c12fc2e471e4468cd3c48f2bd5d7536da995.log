d897c12fc2e471e4468cd3c48f2bd5d7536da995
==================================================
First cut at adding resource tracking
==================================================
Mark Emlyn
==================================================
Tue Nov 5 00:06:50 2013 +0000
==================================================
WebResourceRoot.java
First cut at adding resource tracking

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538836 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebResourceTraceWrapper.java
index c8d687874a..5eb42ec3a1 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -359,6 +359,33 @@ public interface WebResourceRoot extends Lifecycle {
      */
     long getCacheMaxObjectSize();
 
+    /**
+     * Controls whether the trace locked files feature is enabled. If enabled,
+     * all calls to methods that return objects that lock a file and need to be
+     * closed to release that lock (e.g. {@link WebResource#getInputStream()}
+     * will perform a number of additional tasks.
+     * <ul>
+     *   <li>The stack trace at the point where the method was called will be
+     *       recorded and associated with the returned object.</li>
+     *   <li>The returned object will be wrapped so that the point where close()
+     *       (or equivalent) is called to release the resources can be detected.
+     *       Tracking of the object will cease once the resources have been
+     *       released.</li>
+     *   <li>All remaining locked resources on web application shutdown will be
+     *       logged and then closed.</li>
+     * </ul>
+     *
+     * @param traceLockedFiles @true to enable it, @false to disable it
+     */
+    void setTraceLockedFiles(boolean traceLockedFiles);
+
+    /**
+     * Has the trace locked files feature been enabled?
+     *
+     * @return @true if it has been enabled, otherwise @false
+     */
+    boolean getTraceLockedFiles();
+
     /**
      * This method will be invoked by the context on a periodic basis and allows
      * the implementation a method that executes periodic tasks, such as purging
@@ -372,4 +399,8 @@ public interface WebResourceRoot extends Lifecycle {
         POST,
         CLASSES_JAR
     }
+
+    void registerTracedResource(WebResourceTraceWrapper traceWrapper);
+
+    void deregisterTracedResource(WebResourceTraceWrapper traceWrapperInputStream);
 }

==================================================
AbstractResource.java
new file mode 100644
index 0000000000..5dffaf8f9a
--- /dev/null
+++ b/java/org/apache/catalina/WebResourceTraceWrapper.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina;
+
+import java.io.Closeable;
+
+public interface WebResourceTraceWrapper extends Closeable {
+    Exception getCreatedBy();
+    String getName();
+}

==================================================
FileResource.java
index 18944107c2..d2b7b7889b 100644
--- a/java/org/apache/catalina/webresources/AbstractResource.java
+++ b/java/org/apache/catalina/webresources/AbstractResource.java
@@ -128,5 +128,19 @@ public abstract class AbstractResource implements WebResource {
     }
 
 
+    @Override
+    public final InputStream getInputStream() {
+        InputStream is = doGetInputStream();
+
+        if (is == null || !root.getTraceLockedFiles()) {
+            return is;
+        }
+
+        return new TraceWrapperInputStream(root, getName(), is);
+    }
+
+    protected abstract InputStream doGetInputStream();
+
+
     protected abstract Log getLog();
 }

==================================================
JarResource.java
index 2fae936add..369aba911b 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -123,7 +123,7 @@ public class FileResource extends AbstractResource {
     }
 
     @Override
-    public InputStream getInputStream() {
+    protected InputStream doGetInputStream() {
         if (resource.exists()) {
             try {
                 return new FileInputStream(resource);

==================================================
JarResourceRoot.java
index e9f9a0b6ea..168dfeb3d5 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -39,7 +39,7 @@ public class JarResource extends AbstractArchiveResource {
     }
 
     @Override
-    public InputStream getInputStream() {
+    protected InputStream doGetInputStream() {
         try {
             JarFile jarFile = new JarFile(getBase());
             InputStream is = jarFile.getInputStream(getResource());

==================================================
JarWarResource.java
index b6e4ad02f5..56e782f09c 100644
--- a/java/org/apache/catalina/webresources/JarResourceRoot.java
+++ b/java/org/apache/catalina/webresources/JarResourceRoot.java
@@ -104,7 +104,7 @@ public class JarResourceRoot extends AbstractResource {
     }
 
     @Override
-    public InputStream getInputStream() {
+    protected InputStream doGetInputStream() {
         return null;
     }
 

==================================================
StandardRoot.java
index ccad91b80d..7df34a6640 100644
--- a/java/org/apache/catalina/webresources/LocalStrings.properties
+++ b/java/org/apache/catalina/webresources/LocalStrings.properties
@@ -33,6 +33,7 @@ standardRoot.checkStateNotStarted=The resources may not be accessed if they are
 standardRoot.createInvalidFile=Unable to create WebResourceSet from [{0}]
 standardRoot.createNoFileResourceSet=The FileResourceSet feature has not yet been implemented
 standardRoot.createUnknownType=Unable to create WebResourceSet of unknown type [{0}]
+standardRoot.lockedFile=The web application [{0}] failed to close the file [{1}] opened via the following stack trace
 standardRoot.noContext=A Context has not been configured for this WebResourceRoot
 standardRoot.startInvalidMain=The main resource set specified [{0}] is not valid
 standardRoot.unsupportedProtocol=The URL protocol [{0}] is not supported by this web resources implementation
\ No newline at end of file

==================================================
TraceWrapperInputStream.java
index ef5a09e54c..345375928f 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.webresources;
 
 import java.io.File;
+import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URISyntaxException;
@@ -33,7 +34,10 @@ import org.apache.catalina.LifecycleState;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.WebResourceSet;
+import org.apache.catalina.WebResourceTraceWrapper;
 import org.apache.catalina.util.LifecycleMBeanBase;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -51,6 +55,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class StandardRoot extends LifecycleMBeanBase
         implements WebResourceRoot {
 
+    private static final Log log = LogFactory.getLog(Cache.class);
     protected static final StringManager sm =
             StringManager.getManager(Constants.Package);
 
@@ -65,6 +70,9 @@ public class StandardRoot extends LifecycleMBeanBase
     private Cache cache = new Cache(this);
     private boolean cachingAllowed = true;
 
+    private boolean traceLockedFiles = false;
+    private Set<WebResourceTraceWrapper> tracedResources = new HashSet<>();
+
     // Constructs to make iteration over all WebResourceSets simpler
     private ArrayList<WebResourceSet> mainResources = new ArrayList<>();
     private ArrayList<ArrayList<WebResourceSet>> allResources =
@@ -430,6 +438,16 @@ public class StandardRoot extends LifecycleMBeanBase
         return cache.getMaxObjectSize();
     }
 
+    @Override
+    public void setTraceLockedFiles(boolean traceLockedFiles) {
+        this.traceLockedFiles = traceLockedFiles;
+    }
+
+    @Override
+    public boolean getTraceLockedFiles() {
+        return traceLockedFiles;
+    }
+
     @Override
     public Context getContext() {
         return context;
@@ -483,6 +501,19 @@ public class StandardRoot extends LifecycleMBeanBase
         cache.backgroundProcess();
     }
 
+
+    @Override
+    public void registerTracedResource(WebResourceTraceWrapper traceResource) {
+        tracedResources.add(traceResource);
+    }
+
+
+    @Override
+    public void deregisterTracedResource(WebResourceTraceWrapper traceResource) {
+        tracedResources.remove(traceResource);
+    }
+
+
     // ----------------------------------------------------------- JMX Lifecycle
     @Override
     protected String getDomainInternal() {
@@ -575,6 +606,17 @@ public class StandardRoot extends LifecycleMBeanBase
         }
         jarResources.clear();
 
+        for (WebResourceTraceWrapper tracedResource : tracedResources) {
+            log.error(sm.getString("standardRoot.lockedFile",
+                    context.getName(),
+                    tracedResource.getName()),
+                    tracedResource.getCreatedBy());
+            try {
+                tracedResource.close();
+            } catch (IOException e) {
+                // Ignore
+            }
+        }
         cache.clear();
 
         setState(LifecycleState.STOPPING);

==================================================
