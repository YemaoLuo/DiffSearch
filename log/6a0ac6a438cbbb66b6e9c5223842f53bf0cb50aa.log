6a0ac6a438cbbb66b6e9c5223842f53bf0cb50aa
==================================================
Avoid invalid JSON in JSONErrorReportValve output
==================================================
Mark Thomas
==================================================
Wed Nov 9 12:39:15 2022 +0000
==================================================
JsonErrorReportValve.java
Avoid invalid JSON in JSONErrorReportValve output


==================================================
JSONFilter.java
index a9bb895585..1e7719fb51 100644
--- a/java/org/apache/catalina/valves/JsonErrorReportValve.java
+++ b/java/org/apache/catalina/valves/JsonErrorReportValve.java
@@ -24,6 +24,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.json.JSONFilter;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -82,9 +83,9 @@ public class JsonErrorReportValve extends ErrorReportValve {
             }
         }
         String jsonReport = "{\n" +
-                            "  \"type\": \"" + type + "\",\n" +
-                            "  \"message\": \"" + message + "\",\n" +
-                            "  \"description\": \"" + description + "\"\n" +
+                            "  \"type\": \"" + JSONFilter.escape(type) + "\",\n" +
+                            "  \"message\": \"" + JSONFilter.escape(message) + "\",\n" +
+                            "  \"description\": \"" + JSONFilter.escape(description) + "\"\n" +
                             "}";
         try {
             try {

==================================================
TestJSONFilter.java
new file mode 100644
index 0000000000..cb255dc41b
--- /dev/null
+++ b/java/org/apache/tomcat/util/json/JSONFilter.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.json;
+
+/**
+ * Provides escaping of values so they can be included in a JSON document.
+ * Escaping is based on the definition of JSON found in
+ * <a href="https://www.rfc-editor.org/rfc/rfc8259.html">RFC 8259</a>.
+ */
+public class JSONFilter {
+
+    private JSONFilter() {
+        // Utility class. Hide the default constructor.
+    }
+
+    public static String escape(String input) {
+        /*
+         * While any character MAY be escaped, only U+0000 to U+001F (control
+         * characters), U+0022 (quotation mark) and U+005C (reverse solidus)
+         * MUST be escaped.
+         */
+        char[] chars = input.toCharArray();
+        StringBuffer escaped = null;
+        int lastUnescapedStart = 0;
+        for (int i = 0; i < chars.length; i++) {
+            if (chars[i] < 0x20 || chars[i] == 0x22 || chars[i] == 0x5c) {
+                if (escaped == null) {
+                    escaped = new StringBuffer(chars.length + 20);
+                }
+                if (lastUnescapedStart < i) {
+                    escaped.append(input.subSequence(lastUnescapedStart, i));
+                }
+                lastUnescapedStart = i + 1;
+                escaped.append("\\u");
+                escaped.append(String.format("%04X", Integer.valueOf(chars[i])));
+            }
+        }
+        if (escaped == null) {
+            return input;
+        } else {
+            if (lastUnescapedStart < chars.length) {
+                escaped.append(input.subSequence(lastUnescapedStart, chars.length));
+            }
+            return escaped.toString();
+        }
+    }
+}

==================================================
