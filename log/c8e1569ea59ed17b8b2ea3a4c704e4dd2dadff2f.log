c8e1569ea59ed17b8b2ea3a4c704e4dd2dadff2f
==================================================
Reduce code duplication in connectors: Move initializeFilters()to base class
==================================================
Mark Emlyn
==================================================
Mon Jun 21 15:16:33 2010 +0000
==================================================
AbstractHttp11Processor.java
Reduce code duplication in connectors: Move initializeFilters()to base class

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@956617 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 0dcd435a7c..bf0a0f0cfe 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -23,6 +23,14 @@ import java.util.regex.PatternSyntaxException;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.Request;
 import org.apache.coyote.Response;
+import org.apache.coyote.http11.filters.BufferedInputFilter;
+import org.apache.coyote.http11.filters.ChunkedInputFilter;
+import org.apache.coyote.http11.filters.ChunkedOutputFilter;
+import org.apache.coyote.http11.filters.GzipOutputFilter;
+import org.apache.coyote.http11.filters.IdentityInputFilter;
+import org.apache.coyote.http11.filters.IdentityOutputFilter;
+import org.apache.coyote.http11.filters.VoidInputFilter;
+import org.apache.coyote.http11.filters.VoidOutputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.Ascii;
@@ -726,12 +734,40 @@ public abstract class AbstractHttp11Processor {
      */
     protected abstract AbstractInputBuffer getInputBuffer();
 
+    
     /**
      * Exposes output buffer to super class to allow better code re-use.
      * @return  The output buffer used by the processor. 
      */
     protected abstract AbstractOutputBuffer getOutputBuffer();
 
+    
+    /**
+     * Initialize standard input and output filters.
+     */
+    protected void initializeFilters() {
+        // Create and add the identity filters.
+        getInputBuffer().addFilter(new IdentityInputFilter());
+        getOutputBuffer().addFilter(new IdentityOutputFilter());
+
+        // Create and add the chunked filters.
+        getInputBuffer().addFilter(new ChunkedInputFilter());
+        getOutputBuffer().addFilter(new ChunkedOutputFilter());
+
+        // Create and add the void filters.
+        getInputBuffer().addFilter(new VoidInputFilter());
+        getOutputBuffer().addFilter(new VoidOutputFilter());
+
+        // Create and add buffered input filter
+        getInputBuffer().addFilter(new BufferedInputFilter());
+
+        // Create and add the chunked filters.
+        //getInputBuffer().addFilter(new GzipInputFilter());
+        getOutputBuffer().addFilter(new GzipOutputFilter());
+
+    }
+
+    
     /**
      * Add input or output filter.
      *

==================================================
Http11NioProcessor.java
index 764ba9e2c3..95b96c4599 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -30,14 +30,7 @@ import org.apache.coyote.ActionHook;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
-import org.apache.coyote.http11.filters.ChunkedInputFilter;
-import org.apache.coyote.http11.filters.ChunkedOutputFilter;
-import org.apache.coyote.http11.filters.GzipOutputFilter;
-import org.apache.coyote.http11.filters.IdentityInputFilter;
-import org.apache.coyote.http11.filters.IdentityOutputFilter;
 import org.apache.coyote.http11.filters.SavedRequestInputFilter;
-import org.apache.coyote.http11.filters.VoidInputFilter;
-import org.apache.coyote.http11.filters.VoidOutputFilter;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -1149,32 +1142,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor implements Actio
     }
 
 
-    /**
-     * Initialize standard input and output filters.
-     */
-    protected void initializeFilters() {
-
-        // Create and add the identity filters.
-        inputBuffer.addFilter(new IdentityInputFilter());
-        outputBuffer.addFilter(new IdentityOutputFilter());
-
-        // Create and add the chunked filters.
-        inputBuffer.addFilter(new ChunkedInputFilter());
-        outputBuffer.addFilter(new ChunkedOutputFilter());
-
-        // Create and add the void filters.
-        inputBuffer.addFilter(new VoidInputFilter());
-        outputBuffer.addFilter(new VoidOutputFilter());
-
-        // Create and add buffered input filter
-        inputBuffer.addFilter(new BufferedInputFilter());
-
-        // Create and add the chunked filters.
-        //inputBuffer.addFilter(new GzipInputFilter());
-        outputBuffer.addFilter(new GzipOutputFilter());
-
-    }
-    
     @Override
     protected AbstractInputBuffer getInputBuffer() {
         return inputBuffer;

==================================================
Http11Processor.java
index fc3610998c..35e0815d9f 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -29,14 +29,7 @@ import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
-import org.apache.coyote.http11.filters.ChunkedInputFilter;
-import org.apache.coyote.http11.filters.ChunkedOutputFilter;
-import org.apache.coyote.http11.filters.GzipOutputFilter;
-import org.apache.coyote.http11.filters.IdentityInputFilter;
-import org.apache.coyote.http11.filters.IdentityOutputFilter;
 import org.apache.coyote.http11.filters.SavedRequestInputFilter;
-import org.apache.coyote.http11.filters.VoidInputFilter;
-import org.apache.coyote.http11.filters.VoidOutputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.Ascii;
@@ -1200,33 +1193,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
     }
 
 
-    /**
-     * Initialize standard input and output filters.
-     */
-    protected void initializeFilters() {
-
-        // Create and add the identity filters.
-        inputBuffer.addFilter(new IdentityInputFilter());
-        outputBuffer.addFilter(new IdentityOutputFilter());
-
-        // Create and add the chunked filters.
-        inputBuffer.addFilter(new ChunkedInputFilter());
-        outputBuffer.addFilter(new ChunkedOutputFilter());
-
-        // Create and add the void filters.
-        inputBuffer.addFilter(new VoidInputFilter());
-        outputBuffer.addFilter(new VoidOutputFilter());
-
-        // Create and add buffered input filter
-        inputBuffer.addFilter(new BufferedInputFilter());
-
-        // Create and add the chunked filters.
-        //inputBuffer.addFilter(new GzipInputFilter());
-        outputBuffer.addFilter(new GzipOutputFilter());
-
-    }
-
-
     /**
      * Specialized utility method: find a sequence of lower case bytes inside
      * a ByteChunk.

==================================================
