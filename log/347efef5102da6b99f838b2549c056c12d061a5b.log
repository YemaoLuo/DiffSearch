347efef5102da6b99f838b2549c056c12d061a5b
==================================================
60202: Add an available flag to realms, to indicate the state, or the realm backend. Update lockout realm to only register auth failures if the realm is available.
==================================================
Remy Maucherat
==================================================
Fri Nov 4 23:09:45 2016 +0000
==================================================
Realm.java
60202: Add an available flag to realms, to indicate the state, or the realm backend. Update lockout realm to only register auth failures if the realm is available.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1768123 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CombinedRealm.java
index 09600281a4..3dd05ba9bd 100644
--- a/java/org/apache/catalina/Realm.java
+++ b/java/org/apache/catalina/Realm.java
@@ -231,4 +231,13 @@ public interface Realm {
      * @return principal roles
      */
     public String[] getRoles(Principal principal);
+
+
+    /**
+     * Return the availability of the realm for authentication.
+     * @return <code>true</code> if the realm is able to perform authentication
+     */
+    default public boolean isAvailable() {
+        return true;
+    }
 }

==================================================
DataSourceRealm.java
index f8e65e7635..061c96a98f 100644
--- a/java/org/apache/catalina/realm/CombinedRealm.java
+++ b/java/org/apache/catalina/realm/CombinedRealm.java
@@ -418,4 +418,15 @@ public class CombinedRealm extends RealmBase {
         throw uoe;
     }
 
+
+    @Override
+    public boolean isAvailable() {
+        for (Realm realm : realms) {
+            if (!realm.isAvailable()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
 }

==================================================
JDBCRealm.java
index 8eb9e12aac..da134bb6ef 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -107,6 +107,12 @@ public class DataSourceRealm extends RealmBase {
     protected String userTable = null;
 
 
+    /**
+     * Last connection attempt.
+     */
+    private volatile boolean connectionSuccess = true;
+
+
     // ------------------------------------------------------------- Properties
 
 
@@ -270,6 +276,11 @@ public class DataSourceRealm extends RealmBase {
     }
 
 
+    @Override
+    public boolean isAvailable() {
+        return connectionSuccess;
+    }
+
     // -------------------------------------------------------- Package Methods
 
 
@@ -378,8 +389,11 @@ public class DataSourceRealm extends RealmBase {
                 context = getServer().getGlobalNamingContext();
             }
             DataSource dataSource = (DataSource)context.lookup(dataSourceName);
-        return dataSource.getConnection();
+            Connection connection = dataSource.getConnection();
+            connectionSuccess = true;
+            return connection;
         } catch (Exception e) {
+            connectionSuccess = false; 
             // Log the problem for posterity
             containerLog.error(sm.getString("dataSourceRealm.exception"), e);
         }

==================================================
JNDIRealm.java
index cff5411150..ed0c8d8680 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -414,6 +414,12 @@ public class JDBCRealm
     }
 
 
+    @Override
+    public boolean isAvailable() {
+        return (dbConnection != null);
+    }
+
+
     /**
      * Close the specified database connection.
      *

==================================================
LockOutRealm.java
index e24f74117c..bbfde7025d 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -2379,6 +2379,12 @@ public class JNDIRealm extends RealmBase {
 
     }
 
+    @Override
+    public boolean isAvailable() {
+        // Simple best effort check
+        return (context != null);
+    }
+
     private DirContext createDirContext(Hashtable<String, String> env) throws NamingException {
         if (useStartTls) {
             return createTlsDirContext(env);

==================================================
