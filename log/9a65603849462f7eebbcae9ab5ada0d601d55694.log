9a65603849462f7eebbcae9ab5ada0d601d55694
==================================================
Extract log message validation filter to a separate class where it can be used by any unit test.
==================================================
Mark Thomas
==================================================
Mon Jun 5 17:30:52 2017 +0000
==================================================
TestWebappClassLoaderThreadLocalMemoryLeak.java
Extract log message validation filter to a separate class where it can be used by any unit test.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1797678 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TesterLogValidationFilter.java
index 0c573e9c8d..942aaec994 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
@@ -18,10 +18,7 @@ package org.apache.catalina.loader;
 
 import java.io.InputStream;
 import java.util.concurrent.Executor;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.logging.Filter;
 import java.util.logging.LogManager;
-import java.util.logging.LogRecord;
 
 import javax.servlet.http.HttpServletResponse;
 
@@ -34,6 +31,7 @@ import org.apache.catalina.core.JreMemoryLeakPreventionListener;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.unittest.TesterLogValidationFilter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 
@@ -76,7 +74,7 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
         ((ThreadPoolExecutor) executor).setThreadRenewalDelay(-1);
 
         // Configure logging filter to check leak message appears
-        LogValidationFilter f = new LogValidationFilter(
+        TesterLogValidationFilter f = new TesterLogValidationFilter(
                 "The web application [ROOT] created a ThreadLocal with key of");
         LogManager.getLogManager().getLogger(
                 "org.apache.catalina.loader.WebappClassLoaderBase").setFilter(f);
@@ -132,7 +130,7 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
         ((ThreadPoolExecutor) executor).setThreadRenewalDelay(-1);
 
         // Configure logging filter to check leak message appears
-        LogValidationFilter f = new LogValidationFilter(
+        TesterLogValidationFilter f = new TesterLogValidationFilter(
                 "The web application [ROOT] created a ThreadLocal with key of");
         LogManager.getLogManager().getLogger(
                 "org.apache.catalina.loader.WebappClassLoaderBase").setFilter(f);
@@ -205,32 +203,4 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
             obj.toString();
         }
     }
-
-
-    private class LogValidationFilter implements Filter {
-
-        private String targetMessage;
-        private AtomicInteger messageCount = new AtomicInteger(0);
-
-
-        public LogValidationFilter(String targetMessage) {
-            this.targetMessage = targetMessage;
-        }
-
-
-        public int getMessageCount() {
-            return messageCount.get();
-        }
-
-
-        @Override
-        public boolean isLoggable(LogRecord record) {
-            String msg = record.getMessage();
-            if (msg != null && msg.contains(targetMessage)) {
-                messageCount.incrementAndGet();
-            }
-
-            return true;
-        }
-    }
 }
\ No newline at end of file

==================================================
