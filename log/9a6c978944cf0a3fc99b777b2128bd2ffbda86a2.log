9a6c978944cf0a3fc99b777b2128bd2ffbda86a2
==================================================
Various caching improvements:
==================================================
Mark Emlyn
==================================================
Thu Dec 12 11:31:05 2013 +0000
==================================================
Cache.java
Various caching improvements:
- Collect cache stats and make them available over JMX.
- Separate the root resources and Cache in JMX.
- Clear the cache when it is disabled.
- Clear the traced resources when tracing is disabled.
- Use a concurrent set for the traced resources.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1550397 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardRoot.java
index 68046e4679..44df51a3d5 100644
--- a/java/org/apache/catalina/webresources/Cache.java
+++ b/java/org/apache/catalina/webresources/Cache.java
@@ -45,6 +45,9 @@ public class Cache {
     private int maxObjectSize =
             (int) (maxSize / 20 > Integer.MAX_VALUE ? Integer.MAX_VALUE : maxSize / 20);
 
+    private AtomicLong lookupCount = new AtomicLong(0);
+    private AtomicLong hitCount = new AtomicLong(0);
+
     private final ConcurrentMap<String,CachedResource> resourceCache =
             new ConcurrentHashMap<>();
 
@@ -54,6 +57,8 @@ public class Cache {
 
     protected WebResource getResource(String path, boolean useClassLoaderResources) {
 
+        lookupCount.incrementAndGet();
+
         if (noCache(path)) {
             return root.getResourceInternal(path, useClassLoaderResources);
         }
@@ -107,6 +112,8 @@ public class Cache {
                 // Make sure it is validated
                 cacheEntry.validate(useClassLoaderResources);
             }
+        } else {
+            hitCount.incrementAndGet();
         }
 
         return cacheEntry;
@@ -196,6 +203,13 @@ public class Cache {
         this.maxSize = maxSize * 1024;
     }
 
+    public long getLookupCount() {
+        return lookupCount.get();
+    }
+
+    public long getHitCount() {
+        return hitCount.get();
+    }
 
     public void setMaxObjectSize(int maxObjectSize) {
         if (maxObjectSize * 1024L > Integer.MAX_VALUE) {
@@ -220,6 +234,10 @@ public class Cache {
         resourceCache.clear();
     }
 
+    public long getSize() {
+        return size.get() / 1024;
+    }
+
     private static class EvictionOrder implements Comparator<CachedResource> {
 
         @Override

==================================================
