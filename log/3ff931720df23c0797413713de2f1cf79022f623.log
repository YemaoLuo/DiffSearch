3ff931720df23c0797413713de2f1cf79022f623
==================================================
Remove confusing @version tags from Javadoc
==================================================
Mark Thomas
==================================================
Fri Oct 7 17:49:35 2022 +0100
==================================================
ReplicatedContext.java
Remove confusing @version tags from Javadoc

Also includes small amounts of Javadoc clean-up.


==================================================
FileMessage.java
index dc45707f53..91c311708a 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -38,9 +38,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
-/**
- * @version 1.0
- */
 public class ReplicatedContext extends StandardContext implements MapOwner {
     private int mapSendOptions = Channel.SEND_OPTIONS_DEFAULT;
     private static final Log log = LogFactory.getLog(ReplicatedContext.class);

==================================================
FileMessageFactory.java
index 22d665cc31..1f359f8c6c 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessage.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessage.java
@@ -21,8 +21,7 @@ import org.apache.catalina.tribes.Member;
 
 /**
  * Contains the data for a file being transferred over TCP, this is
- * essentially a fragment of a file, read and written by the FileMessageFactory
- * @version 1.0
+ * essentially a fragment of a file, read and written by the FileMessageFactory.
  */
 
 public class FileMessage extends ClusterMessageBase {

==================================================
WarWatcher.java
index e005583646..7a7048ad1e 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -40,8 +40,6 @@ import org.apache.tomcat.util.res.StringManager;
  * that. <BR>
  * To force a cleanup, call cleanup() from the calling object. <BR>
  * This class is not thread safe.
- *
- * @version 1.0
  */
 public class FileMessageFactory {
     /*--Static Variables----------------------------------------*/

==================================================
BackupManager.java
index 6b732b88b6..b9e6f91f96 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -31,7 +31,6 @@ import org.apache.tomcat.util.res.StringManager;
  * and notifies a listener of the changes made.
  *
  * @author Peter Rossbach
- * @version 1.1
  */
 public class WarWatcher {
 

==================================================
DeltaRequest.java
index 72f67a98a2..e1ab106da7 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -32,9 +32,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
-/**
- *@version 1.0
- */
 public class BackupManager extends ClusterManagerBase
         implements MapOwner, DistributedManager {
 

==================================================
WebdavServlet.java
index f5134f5fd5..1f5b481818 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -21,7 +21,6 @@ package org.apache.catalina.ha.session;
  * a request is executed. These actions will then translate into invocations of methods
  * on the actual session.
  * This class is NOT thread safe. One DeltaRequest per session
- * @version 1.0
  */
 
 import java.io.ByteArrayOutputStream;

==================================================
ChannelException.java
index a93492c606..f3f57c8a66 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -2373,7 +2373,6 @@ public class WebdavServlet extends DefaultServlet {
  * WebDavRetCode classes.
  *
  * @author              Marc Eaddy
- * @version             1.0, 16 Nov 1997
  */
 class WebdavStatus {
 

==================================================
ChannelListener.java
index 8492dea300..9eb12fc159 100644
--- a/java/org/apache/catalina/tribes/ChannelException.java
+++ b/java/org/apache/catalina/tribes/ChannelException.java
@@ -19,9 +19,9 @@ package org.apache.catalina.tribes;
 import java.util.ArrayList;
 
 /**
- * Channel Exception<br>
  * A channel exception is thrown when an internal error happens
- * somewhere in the channel. <br>
+ * somewhere in the channel.
+ * <p>
  * When a global error happens, the cause can be retrieved using <code>getCause()</code><br><br>
  * If an application is sending a message and some of the recipients fail to receive it,
  * the application can retrieve what recipients failed by using the <code>getFaultyMembers()</code>
@@ -152,8 +152,6 @@ public class ChannelException extends Exception {
      *
      * <p>Description: Represent a failure to a specific member when a message was sent
      * to more than one member</p>
-     *
-     * @version 1.0
      */
     public static class FaultyMember {
         protected final Exception cause;

==================================================
ErrorHandler.java
index 2428268cd5..6a18a4ea10 100644
--- a/java/org/apache/catalina/tribes/ChannelListener.java
+++ b/java/org/apache/catalina/tribes/ChannelListener.java
@@ -18,18 +18,14 @@ package org.apache.catalina.tribes;
 
 import java.io.Serializable;
 /**
- *
- * <p>Title: ChannelListener</p>
- *
- * <p>Description: An interface to listens to incoming messages from a channel </p>
+ * An interface to listens to incoming messages from a channel.
+ * <p>
  * When a message is received, the Channel will invoke the channel listener in a conditional sequence.
  * <code>if ( listener.accept(msg,sender) ) listener.messageReceived(msg,sender);</code><br>
  * A ChannelListener implementation MUST NOT return true on <code>accept(Serializable, Member)</code>
  * if it doesn't intend to process the message. The channel can this way track whether a message
  * was processed by an above application or if it was just received and forgot about, a feature required
- * to support message-response(RPC) calls<br>
- *
- * @version 1.0
+ * to support message-response(RPC) calls
  */
 
 public interface ChannelListener {

==================================================
Heartbeat.java
index 4b34ba8853..09bcfcc950 100644
--- a/java/org/apache/catalina/tribes/ErrorHandler.java
+++ b/java/org/apache/catalina/tribes/ErrorHandler.java
@@ -16,13 +16,10 @@
  */
 package org.apache.catalina.tribes;
 
-
-
 /**
  * The <code>ErrorHandler</code> class is used when sending messages
  * that are sent asynchronously and the application still needs to get
  * confirmation when the message was sent successfully or when a message errored out.
- * @version 1.0
  */
 public interface ErrorHandler {
 

==================================================
MessageListener.java
index 75c8244e08..7ccfc37bb0 100644
--- a/java/org/apache/catalina/tribes/Heartbeat.java
+++ b/java/org/apache/catalina/tribes/Heartbeat.java
@@ -19,7 +19,7 @@ package org.apache.catalina.tribes;
 /**
  * Can be implemented by the ChannelListener and Membership listeners to receive heartbeat
  * notifications from the Channel
- * @version 1.0
+ *
  * @see Channel
  * @see Channel#heartbeat()
  */

==================================================
RemoteProcessException.java
index 303529fec4..e62b84da14 100644
--- a/java/org/apache/catalina/tribes/MessageListener.java
+++ b/java/org/apache/catalina/tribes/MessageListener.java
@@ -17,14 +17,9 @@
 package org.apache.catalina.tribes;
 
 /**
- *
- * <p>Title: MessageListener</p>
- *
- * <p>Description: The listener to be registered with the ChannelReceiver, internal Tribes component</p>
- *
- * @version 1.0
+ * The listener to be registered with the ChannelReceiver, internal Tribes
+ * component.
  */
-
 public interface MessageListener {
 
     /**

==================================================
UniqueId.java
index 75003d1bb5..8b05fc6b27 100644
--- a/java/org/apache/catalina/tribes/RemoteProcessException.java
+++ b/java/org/apache/catalina/tribes/RemoteProcessException.java
@@ -17,14 +17,12 @@
 package org.apache.catalina.tribes;
 
 /**
- * <p>Title: RemoteProcessException</p>
- *
- * <p>Description: Message thrown by a sender when USE_SYNC_ACK receives a FAIL_ACK_COMMAND.<br>
+ * Message thrown by a sender when USE_SYNC_ACK receives a FAIL_ACK_COMMAND.
+ * <br>
  * This means that the message was received on the remote node but the processing of the message failed.
  * This message will be embedded in a ChannelException.FaultyMember
- * </p>
+ *
  * @see ChannelException
- * @version 1.0
  */
 public class RemoteProcessException extends RuntimeException {
     private static final long serialVersionUID = 1L;

==================================================
AbsoluteOrder.java
index 7adb75b80d..e13001581d 100644
--- a/java/org/apache/catalina/tribes/UniqueId.java
+++ b/java/org/apache/catalina/tribes/UniqueId.java
@@ -21,11 +21,7 @@ import java.io.Serializable;
 import org.apache.catalina.tribes.util.Arrays;
 
 /**
- * <p>Title: Represents a globally unique Id</p>
- *
- * <p>Company: </p>
- *
- * @version 1.0
+ * Represents a globally unique Id.
  */
 public final class UniqueId implements Serializable{
     private static final long serialVersionUID = 1L;

==================================================
GroupChannel.java
index 412d2a6c7a..1e06dc1f09 100644
--- a/java/org/apache/catalina/tribes/group/AbsoluteOrder.java
+++ b/java/org/apache/catalina/tribes/group/AbsoluteOrder.java
@@ -39,8 +39,6 @@ import org.apache.catalina.tribes.Member;
  *     <li>UniqueId comparison- byte by byte, lower byte higher rank</li>
  * </ol>
  *
- *
- * @version 1.0
  * @see org.apache.catalina.tribes.Member
  */
 public class AbsoluteOrder {

==================================================
InterceptorPayload.java
index bf1e1e4727..4a810937c6 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -804,12 +804,7 @@ public class GroupChannel extends ChannelInterceptorBase
     }
 
     /**
-     *
-     * <p>Title: Interceptor Iterator</p>
-     *
-     * <p>Description: An iterator to loop through the interceptors in a channel</p>
-     *
-     * @version 1.0
+     * An iterator to loop through the interceptors in a channel.
      */
     public static class InterceptorIterator implements Iterator<ChannelInterceptor> {
         private final ChannelInterceptor end;

==================================================
Response.java
index c665b56a21..d0b44c812f 100644
--- a/java/org/apache/catalina/tribes/group/InterceptorPayload.java
+++ b/java/org/apache/catalina/tribes/group/InterceptorPayload.java
@@ -18,9 +18,6 @@ package org.apache.catalina.tribes.group;
 
 import org.apache.catalina.tribes.ErrorHandler;
 
-/**
- * @version 1.0
- */
 public class InterceptorPayload  {
     private ErrorHandler errorHandler;
 

==================================================
RpcCallback.java
index 8f700e0018..91aa73fba5 100644
--- a/java/org/apache/catalina/tribes/group/Response.java
+++ b/java/org/apache/catalina/tribes/group/Response.java
@@ -22,7 +22,6 @@ import org.apache.catalina.tribes.Member;
 
 /**
  * A response object holds a message from a responding partner.
- * @version 1.0
  */
 public class Response {
     private Member source;

==================================================
RpcChannel.java
index d7a1832131..494a1e2b3c 100644
--- a/java/org/apache/catalina/tribes/group/RpcCallback.java
+++ b/java/org/apache/catalina/tribes/group/RpcCallback.java
@@ -23,7 +23,6 @@ import org.apache.catalina.tribes.Member;
 /**
  * The RpcCallback interface is an interface for the Tribes channel to request a
  * response object to a request that came in.
- * @version 1.0
  */
 public interface RpcCallback {
 

==================================================
DomainFilterInterceptor.java
index 81ce5116e0..c72963f2e5 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -231,9 +231,7 @@ public class RpcChannel implements ChannelListener {
     }
 
     /**
-     *
      * Class that holds all response.
-     * @version 1.0
      */
     public static class RpcCollector {
         public final ArrayList<Response> responses = new ArrayList<>();

==================================================
FragmentationInterceptor.java
index 37bf826882..c0c7b06124 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
@@ -28,12 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * <p>Title: Member domain filter interceptor </p>
- *
- * <p>Description: Filters membership based on domain.
- * </p>
- *
- * @version 1.0
+ * Filters membership based on domain.
  */
 public class DomainFilterInterceptor extends ChannelInterceptorBase
         implements DomainFilterInterceptorMBean {

==================================================
GzipInterceptor.java
index 6646070a6d..2a1eeecf7a 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -40,7 +40,6 @@ import org.apache.juli.logging.LogFactory;
  * FragmentationInterceptor.expire=&lt;milliseconds&gt; - how long do we keep the fragments in memory and wait for the rest to arrive <b>default=60,000ms -&gt; 60seconds</b>
  * This setting is useful to avoid OutOfMemoryErrors<br>
  * FragmentationInterceptor.maxSize=&lt;max message size&gt; - message size in bytes <b>default=1024*100 (around a tenth of a MB)</b><br>
- * @version 1.0
  */
 public class FragmentationInterceptor extends ChannelInterceptorBase implements FragmentationInterceptorMBean {
     private static final Log log = LogFactory.getLog(FragmentationInterceptor.class);

==================================================
NonBlockingCoordinator.java
index ebded9c787..1de0dc1e38 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
@@ -33,10 +33,6 @@ import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
-
-/**
- * @version 1.0
- */
 public class GzipInterceptor extends ChannelInterceptorBase implements GzipInterceptorMBean {
 
     private static final Log log = LogFactory.getLog(GzipInterceptor.class);

==================================================
OrderInterceptor.java
index 37937b79c8..bbe9462b0a 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
@@ -120,11 +120,6 @@ import org.apache.juli.logging.LogFactory;
  * <h2>State Diagrams</h2>
  * <a href="https://people.apache.org/~fhanik/tribes/docs/leader-election-initiate-election.jpg">Initiate an election</a><br><br>
  * <a href="https://people.apache.org/~fhanik/tribes/docs/leader-election-message-arrives.jpg">Receive an election message</a><br><br>
- *
- * @version 1.0
- *
- *
- *
  */
 public class NonBlockingCoordinator extends ChannelInterceptorBase {
 

==================================================
TcpFailureDetector.java
index 5e4c5ce3fb..5607e2cae5 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
@@ -49,9 +49,6 @@ import org.apache.catalina.tribes.util.StringManager;
  * do when a message has expired or the queue has grown larger than the maxQueue value.
  * true means that the message is sent up the stack to the receiver that will receive and out of order message
  * false means, forget the message and reset the message counter. <b>default=true</b>
- *
- *
- * @version 1.1
  */
 public class OrderInterceptor extends ChannelInterceptorBase {
     protected static final StringManager sm = StringManager.getManager(OrderInterceptor.class);

==================================================
TcpPingInterceptor.java
index ad5ee897ef..d34eaea2b2 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -42,23 +42,18 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * <p>Title: A perfect failure detector </p>
- *
- * <p>Description: The TcpFailureDetector is a useful interceptor
- * that adds reliability to the membership layer.</p>
+ * The TcpFailureDetector is a useful interceptor that adds reliability to the
+ * membership layer.
  * <p>
  * If the network is busy, or the system is busy so that the membership receiver thread
  * is not getting enough time to update its table, members can be &quot;timed out&quot;
  * This failure detector will intercept the memberDisappeared message(unless its a true shutdown message)
  * and connect to the member using TCP.
- * </p>
  * <p>
- * The TcpFailureDetector works in two ways. <br>
- * 1. It intercepts memberDisappeared events
- * 2. It catches send errors
- * </p>
- *
- * @version 1.0
+ * The TcpFailureDetector works in two ways:
+ * <ol>
+ * <li>It intercepts memberDisappeared events</li>
+ * <li>It catches send errors</li>
  */
 public class TcpFailureDetector extends ChannelInterceptorBase implements TcpFailureDetectorMBean {
 

==================================================
DirectByteArrayOutputStream.java
index 0cddef05d5..f0e488bd3f 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -36,7 +36,6 @@ import org.apache.juli.logging.LogFactory;
  * Sends a ping to all members.
  * Configure this interceptor with the TcpFailureDetector below it,
  * and the TcpFailureDetector will act as the membership guide.
- * @version 1.0
  */
 
 public class TcpPingInterceptor extends ChannelInterceptorBase implements TcpPingInterceptorMBean {

==================================================
ReplicatedMapEntry.java
index d5d155bbf5..850689da93 100644
--- a/java/org/apache/catalina/tribes/io/DirectByteArrayOutputStream.java
+++ b/java/org/apache/catalina/tribes/io/DirectByteArrayOutputStream.java
@@ -21,8 +21,6 @@ import java.io.OutputStream;
 
 /**
  * Byte array output stream that exposes the byte array directly
- *
- * @version 1.0
  */
 public class DirectByteArrayOutputStream extends OutputStream {
 

==================================================
RxTaskPool.java
index 2110eaef7d..afa1e26aad 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
@@ -41,10 +41,6 @@ import java.io.Serializable;
  * 1. ReplicatedMapEntry entry = (ReplicatedMapEntry)objectIn.readObject();<br>
  * 2. if ( isBackup(entry)||isPrimary(entry) ) entry.setOwner(owner); <br>
  * </code>
- * <br>
- *
- *
- * @version 1.0
  */
 public interface ReplicatedMapEntry extends Serializable {
 

==================================================
NioSender.java
index c57c3b54ab..bafe307b0c 100644
--- a/java/org/apache/catalina/tribes/transport/RxTaskPool.java
+++ b/java/org/apache/catalina/tribes/transport/RxTaskPool.java
@@ -23,7 +23,6 @@ import java.util.List;
  * A very simple thread pool class.  The pool size is set at
  * construction time and remains fixed.  Threads are cycled
  * through a FIFO idle queue.
- * @version 1.0
  */
 public class RxTaskPool {
 

==================================================
Arrays.java
index c48b79437d..252dc4d183 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -43,8 +43,6 @@ import org.apache.juli.logging.LogFactory;
  * - READY_TO_WRITE -&gt; write() -&gt; READY TO WRITE | READY TO READ
  * - READY_TO_READ -&gt; read() -&gt; READY_TO_READ | TRANSFER_COMPLETE
  * - TRANSFER_COMPLETE -&gt; CONNECTED
- *
- * @version 1.0
  */
 public class NioSender extends AbstractSender {
 

==================================================
Logs.java
index 2bf317cafb..9cbe2db703 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -27,9 +27,6 @@ import org.apache.catalina.tribes.UniqueId;
 import org.apache.catalina.tribes.group.AbsoluteOrder;
 import org.apache.catalina.tribes.membership.Membership;
 
-/**
- * @version 1.0
- */
 public class Arrays {
     protected static final StringManager sm = StringManager.getManager(Arrays.class);
 

==================================================
UUIDGenerator.java
index 802b7e661c..112e8cf8f5 100644
--- a/java/org/apache/catalina/tribes/util/Logs.java
+++ b/java/org/apache/catalina/tribes/util/Logs.java
@@ -19,9 +19,7 @@ package org.apache.catalina.tribes.util;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 /**
- *
  * Simple class that holds references to global loggers
- * @version 1.0
  */
 public class Logs {
     public static final Log MESSAGES = LogFactory.getLog("org.apache.catalina.tribes.MESSAGES");

==================================================
ConnectionPool.java
index 99c34b4591..d3ef7a31c4 100644
--- a/java/org/apache/catalina/tribes/util/UUIDGenerator.java
+++ b/java/org/apache/catalina/tribes/util/UUIDGenerator.java
@@ -23,8 +23,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * simple generation of a UUID
- * @version 1.0
+ * Smple generation of a UUID.
  */
 public class UUIDGenerator {
     private static final Log log = LogFactory.getLog(UUIDGenerator.class);

==================================================
DataSource.java
index 88ba9e9911..58505cabc6 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -51,7 +51,6 @@ import org.apache.juli.logging.LogFactory;
  * The ConnectionPool uses a {@link PoolProperties} object for storing all the meta information about the connection pool.
  * As the underlying implementation, the connection pool uses {@link java.util.concurrent.BlockingQueue} to store active and idle connections.
  * A custom implementation of a fair {@link FairBlockingQueue} blocking queue is provided with the connection pool itself.
- * @version 1.0
  */
 public class ConnectionPool {
 

==================================================
DataSourceProxy.java
index 73a1b5a07b..a8d672ae8f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.jdbc.pool.jmx.JmxUtil;
  * A DataSource that can be instantiated through IoC and implements the DataSource interface
  * since the DataSourceProxy is used as a generic proxy.
  * The DataSource simply wraps a {@link ConnectionPool} in order to provide a standard interface to the user.
- * @version 1.0
  */
 public class DataSource extends DataSourceProxy implements javax.sql.DataSource,MBeanRegistration, org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean, javax.sql.ConnectionPoolDataSource {
     private static final Log log = LogFactory.getLog(DataSource.class);

==================================================
JdbcInterceptor.java
index 653a2ccfa7..e48147eaa9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -39,8 +39,6 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
  * It's a trick to work around compiler issues when implementing interfaces. For example,
  * I could put in Java 6 methods of javax.sql.DataSource here, and compile it with JDK 1.5
  * and still be able to run under Java 6 without getting NoSuchMethodException.
- *
- * @version 1.0
  */
 
 public class DataSourceProxy implements PoolConfiguration {

==================================================
PooledConnection.java
index 74c1c0faa6..fa27c330e5 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -31,8 +31,6 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
  * are needed or simply override the {@link #setProperties(Map)} method.
  * Properties arrive in a key-value pair of Strings as they were received through the configuration.
  * This method is called once per cached connection object when the object is first configured.
- *
- * @version 1.0
  */
 public abstract class JdbcInterceptor implements InvocationHandler {
     /**

==================================================
AbstractCreateStatementInterceptor.java
index 6bc096d031..d691258ace 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -36,7 +36,6 @@ import org.apache.tomcat.jdbc.pool.jmx.JmxUtil;
 /**
  * Represents a pooled connection
  * and holds a reference to the {@link java.sql.Connection} object
- * @version 1.0
  */
 public class PooledConnection implements PooledConnectionMBean {
     /**

==================================================
SlowQueryReport.java
index b0820e6e93..51c25c0d9c 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
@@ -29,7 +29,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  * Abstraction interceptor. This component intercepts all calls to create some type of SQL statement.
  * By extending this class, one can intercept queries and update statements by overriding the {@link #createStatement(Object, Method, Object[], Object, long)}
  * method.
- * @version 1.0
  */
 public abstract class  AbstractCreateStatementInterceptor extends JdbcInterceptor {
     protected static final String CREATE_STATEMENT      = "createStatement";

==================================================
DefaultProperties.java
index 1791f5d014..d336fae030 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -39,7 +39,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
 
 /**
  * Slow query report interceptor. Tracks timing of query executions.
- * @version 1.0
  */
 public class SlowQueryReport extends AbstractQueryReport  {
     //logger

==================================================
DefaultTestCase.java
index 17b85ccb47..a3d66d15a4 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultProperties.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultProperties.java
@@ -21,9 +21,6 @@ import java.util.Properties;
 import org.apache.tomcat.jdbc.pool.DataSourceFactory;
 import org.apache.tomcat.jdbc.pool.PoolProperties;
 
-/**
- * @version 1.0
- */
 public class DefaultProperties extends PoolProperties {
     private static final long serialVersionUID = 1L;
 

==================================================
ChannelCreator.java
index c0fff4fe75..ca562ad3c5 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultTestCase.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultTestCase.java
@@ -29,10 +29,6 @@ import org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory;
 import org.apache.tomcat.jdbc.pool.PoolConfiguration;
 import org.apache.tomcat.jdbc.pool.PoolProperties;
 
-
-/**
- * @version 1.0
- */
 public abstract class DefaultTestCase {
 
     protected org.apache.tomcat.jdbc.pool.DataSource datasource;

==================================================
MapDemo.java
index 92ec94892e..43cebc05ab 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -38,19 +38,8 @@ import org.apache.catalina.tribes.transport.MultiPointSender;
 import org.apache.catalina.tribes.transport.ReceiverBase;
 import org.apache.catalina.tribes.transport.ReplicationTransmitter;
 
-/**
- * <p>Title: </p>
- *
- * <p>Description: </p>
- *
- *
- * <p>Company: </p>
- *
- * @version 1.0
- */
 public class ChannelCreator {
 
-
     public static StringBuilder usage() {
         StringBuilder buf = new StringBuilder();
         buf.append("\n\t\t[-bind tcpbindaddress]")

==================================================
TestGroupChannelStartStop.java
index 17ba0e829b..393214814d 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -47,8 +47,7 @@ import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
 
 /**
  * Example of how the lazy replicated map works, also shows how the BackupManager
- * works in a Tomcat cluster
- * @version 1.1
+ * works in a Tomcat cluster.
  */
 public class MapDemo implements ChannelListener, MembershipListener{
 

==================================================
