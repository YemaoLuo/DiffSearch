24babd6dd69a49a7f45aa4df2283fbe4996b30de
==================================================
Start adding model for loading complete TLDs using Digester.
==================================================
Jeremy Boynes
==================================================
Fri Aug 9 06:21:56 2013 +0000
==================================================
Tag.java
Start adding model for loading complete TLDs using Digester.
This will unify Jasper's model, which is mostly complete but uses a separate DOM model, 
and Catalina's, which is Digester based but only handles listener entries.

Basic top-level entries are handled but not child elements for tags etc

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1512148 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TagFile.java
new file mode 100644
index 0000000000..58de71798b
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/Tag.java
@@ -0,0 +1,249 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+import java.util.List;
+
+/**
+ *
+ */
+public class Tag {
+    private String name;
+    private String tagClass;
+    private String teiClass;
+    private String bodyContent;
+    private String displayName;
+    private String smallIcon;
+    private String largeIcon;
+    private String info;
+    private boolean dynamicAttributes;
+    private List<Variable> variables;
+    private List<Attribute> attributes;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getTagClass() {
+        return tagClass;
+    }
+
+    public void setTagClass(String tagClass) {
+        this.tagClass = tagClass;
+    }
+
+    public String getTeiClass() {
+        return teiClass;
+    }
+
+    public void setTeiClass(String teiClass) {
+        this.teiClass = teiClass;
+    }
+
+    public String getBodyContent() {
+        return bodyContent;
+    }
+
+    public void setBodyContent(String bodyContent) {
+        this.bodyContent = bodyContent;
+    }
+
+    public String getDisplayName() {
+        return displayName;
+    }
+
+    public void setDisplayName(String displayName) {
+        this.displayName = displayName;
+    }
+
+    public String getSmallIcon() {
+        return smallIcon;
+    }
+
+    public void setSmallIcon(String smallIcon) {
+        this.smallIcon = smallIcon;
+    }
+
+    public String getLargeIcon() {
+        return largeIcon;
+    }
+
+    public void setLargeIcon(String largeIcon) {
+        this.largeIcon = largeIcon;
+    }
+
+    public String getInfo() {
+        return info;
+    }
+
+    public void setInfo(String info) {
+        this.info = info;
+    }
+
+    public boolean hasDynamicAttributes() {
+        return dynamicAttributes;
+    }
+
+    public void setDynamicAttributes(boolean dynamicAttributes) {
+        this.dynamicAttributes = dynamicAttributes;
+    }
+
+    public static class Variable {
+        private String nameGiven;
+        private String nameFromAttribute;
+        private String className;
+        private boolean declare;
+        private int scope;
+
+        public String getNameGiven() {
+            return nameGiven;
+        }
+
+        public void setNameGiven(String nameGiven) {
+            this.nameGiven = nameGiven;
+        }
+
+        public String getNameFromAttribute() {
+            return nameFromAttribute;
+        }
+
+        public void setNameFromAttribute(String nameFromAttribute) {
+            this.nameFromAttribute = nameFromAttribute;
+        }
+
+        public String getClassName() {
+            return className;
+        }
+
+        public void setClassName(String className) {
+            this.className = className;
+        }
+
+        public boolean isDeclare() {
+            return declare;
+        }
+
+        public void setDeclare(boolean declare) {
+            this.declare = declare;
+        }
+
+        public int getScope() {
+            return scope;
+        }
+
+        public void setScope(int scope) {
+            this.scope = scope;
+        }
+    }
+
+    public static class Attribute {
+        private String name;
+        private boolean required;
+        private String type;
+        private boolean requestTime;
+        private boolean fragment;
+        private String description;
+        private boolean deferredValue;
+        private boolean deferredMethod;
+        private String expectedTypeName;
+        private String methodSignature;
+
+        public String getName() {
+            return name;
+        }
+
+        public void setName(String name) {
+            this.name = name;
+        }
+
+        public boolean isRequired() {
+            return required;
+        }
+
+        public void setRequired(boolean required) {
+            this.required = required;
+        }
+
+        public String getType() {
+            return type;
+        }
+
+        public void setType(String type) {
+            this.type = type;
+        }
+
+        public boolean isRequestTime() {
+            return requestTime;
+        }
+
+        public void setRequestTime(boolean requestTime) {
+            this.requestTime = requestTime;
+        }
+
+        public boolean isFragment() {
+            return fragment;
+        }
+
+        public void setFragment(boolean fragment) {
+            this.fragment = fragment;
+        }
+
+        public String getDescription() {
+            return description;
+        }
+
+        public void setDescription(String description) {
+            this.description = description;
+        }
+
+        public boolean isDeferredValue() {
+            return deferredValue;
+        }
+
+        public void setDeferredValue(boolean deferredValue) {
+            this.deferredValue = deferredValue;
+        }
+
+        public boolean isDeferredMethod() {
+            return deferredMethod;
+        }
+
+        public void setDeferredMethod(boolean deferredMethod) {
+            this.deferredMethod = deferredMethod;
+        }
+
+        public String getExpectedTypeName() {
+            return expectedTypeName;
+        }
+
+        public void setExpectedTypeName(String expectedTypeName) {
+            this.expectedTypeName = expectedTypeName;
+        }
+
+        public String getMethodSignature() {
+            return methodSignature;
+        }
+
+        public void setMethodSignature(String methodSignature) {
+            this.methodSignature = methodSignature;
+        }
+    }
+}

==================================================
TaglibXml.java
new file mode 100644
index 0000000000..f74bc62793
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/TagFile.java
@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+/**
+ *
+ */
+public class TagFile {
+    private String name;
+    private String path;
+    private String displayName;
+    private String smallIcon;
+    private String largeIcon;
+    private String info;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getPath() {
+        return path;
+    }
+
+    public void setPath(String path) {
+        this.path = path;
+    }
+
+    public String getDisplayName() {
+        return displayName;
+    }
+
+    public void setDisplayName(String displayName) {
+        this.displayName = displayName;
+    }
+
+    public String getSmallIcon() {
+        return smallIcon;
+    }
+
+    public void setSmallIcon(String smallIcon) {
+        this.smallIcon = smallIcon;
+    }
+
+    public String getLargeIcon() {
+        return largeIcon;
+    }
+
+    public void setLargeIcon(String largeIcon) {
+        this.largeIcon = largeIcon;
+    }
+
+    public String getInfo() {
+        return info;
+    }
+
+    public void setInfo(String info) {
+        this.info = info;
+    }
+}

==================================================
TldParser.java
new file mode 100644
index 0000000000..527832b76c
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/TaglibXml.java
@@ -0,0 +1,124 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.servlet.jsp.tagext.FunctionInfo;
+
+/**
+ * Common representation of a Tag Library Descriptor (TLD) XML file.
+ * <p/>
+ * This stores the raw result of parsing an TLD XML file, flattening different
+ * version of the descriptors to a common format. This is different to a
+ * TagLibraryInfo instance that would be passed to a tag validator in that it
+ * does not contain the uri and prefix values used by a JSP to reference this
+ * tag library.
+ */
+public class TaglibXml {
+    private String tlibVersion;
+    private String jspVersion;
+    private String shortName;
+    private String uri;
+    private String info;
+    private Validator validator;
+    private List<Tag> tags;
+    private List<String> listeners;
+    private List<FunctionInfo> functions;
+
+    public String getTlibVersion() {
+        return tlibVersion;
+    }
+
+    public void setTlibVersion(String tlibVersion) {
+        this.tlibVersion = tlibVersion;
+    }
+
+    public String getJspVersion() {
+        return jspVersion;
+    }
+
+    public void setJspVersion(String jspVersion) {
+        this.jspVersion = jspVersion;
+    }
+
+    public String getShortName() {
+        return shortName;
+    }
+
+    public void setShortName(String shortName) {
+        this.shortName = shortName;
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public String getInfo() {
+        return info;
+    }
+
+    public void setInfo(String info) {
+        this.info = info;
+    }
+
+    public Validator getValidator() {
+        return validator;
+    }
+
+    public void setValidator(Validator validator) {
+        this.validator = validator;
+    }
+
+    public void addTag(Tag tag) {
+        if (tags == null) {
+            tags = new ArrayList<>();
+        }
+        tags.add(tag);
+    }
+
+    public List<Tag> getTags() {
+        return tags;
+    }
+
+    public void addListener(String listener) {
+        if (listeners == null) {
+            listeners = new ArrayList<>();
+        }
+        listeners.add(listener);
+    }
+
+    public List<String> getListeners() {
+        return listeners;
+    }
+
+    public void addFunction(FunctionInfo functionInfo) {
+        if (functions == null) {
+            functions = new ArrayList<>();
+        }
+        functions.add(functionInfo);
+    }
+
+    public List<FunctionInfo> getFunctions() {
+        return functions;
+    }
+}

==================================================
TldRuleSet.java
new file mode 100644
index 0000000000..f8bddbf5ac
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+import java.io.IOException;
+import java.net.URL;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.descriptor.DigesterFactory;
+import org.apache.tomcat.util.descriptor.XmlErrorHandler;
+import org.apache.tomcat.util.digester.Digester;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+/**
+ * Parses a Tag Library Descriptor.
+ */
+public class TldParser {
+    private static final Log LOG = LogFactory.getLog(TldParser.class);
+
+    private final Digester digester;
+
+    public TldParser(boolean namespaceAware, boolean validation) {
+        TldRuleSet ruleSet = new TldRuleSet();
+        digester = DigesterFactory.newDigester(validation, namespaceAware, ruleSet);
+    }
+
+    public TaglibXml parse(URL url) throws IOException, SAXException {
+        InputSource source = new InputSource(url.toExternalForm());
+        source.setByteStream(url.openStream());
+        return parse(source);
+    }
+
+    public TaglibXml parse(InputSource source) throws IOException, SAXException {
+        try {
+            XmlErrorHandler handler = new XmlErrorHandler();
+            digester.setErrorHandler(handler);
+
+            TaglibXml taglibXml = new TaglibXml();
+            digester.push(taglibXml);
+            digester.parse(source);
+            if (!handler.getWarnings().isEmpty() || !handler.getErrors().isEmpty()) {
+                handler.logFindings(LOG, source.getSystemId());
+            }
+            return taglibXml;
+        } finally {
+            digester.reset();
+        }
+    }
+}

==================================================
Validator.java
new file mode 100644
index 0000000000..92eda40db3
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/TldRuleSet.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+import org.apache.tomcat.util.digester.Digester;
+import org.apache.tomcat.util.digester.Rule;
+import org.apache.tomcat.util.digester.RuleSetBase;
+import org.xml.sax.Attributes;
+
+/**
+ * RulesSet for digesting TLD files.
+ */
+public class TldRuleSet extends RuleSetBase {
+    private static final String PREFIX = "taglib";
+    private static final String TAG_PREFIX = PREFIX + "/tag";
+
+    @Override
+    public void addRuleInstances(Digester digester) {
+
+        digester.addCallMethod(PREFIX + "/tlibversion", "setTlibVersion", 0);
+        digester.addCallMethod(PREFIX + "/tlib-version", "setTlibVersion", 0);
+        digester.addCallMethod(PREFIX + "/jspversion", "setJspVersion", 0);
+        digester.addCallMethod(PREFIX + "/jsp-version", "setJspVersion", 0);
+        digester.addRule(PREFIX, new Rule() {
+            // for TLD 2.0 and later, jsp-version is set by version attribute
+            @Override
+            public void begin(String namespace, String name, Attributes attributes) {
+                TaglibXml taglibXml = (TaglibXml) digester.peek();
+                taglibXml.setJspVersion(attributes.getValue("version"));
+            }
+        });
+        digester.addCallMethod(PREFIX + "/shortname", "setShortName", 0);
+        digester.addCallMethod(PREFIX + "/short-name", "setShortName", 0);
+
+        // common rules
+        digester.addCallMethod(PREFIX + "/uri", "setUri", 0);
+        digester.addCallMethod(PREFIX + "/info", "setInfo", 0);
+        digester.addCallMethod(PREFIX + "/description", "setInfo", 0);
+        digester.addCallMethod(PREFIX + "/listener/listener-class", "addListener", 0);
+
+        // tag
+        digester.addObjectCreate(TAG_PREFIX, Tag.class.getName());
+        digester.addCallMethod(TAG_PREFIX + "/name", "setName", 0);
+        digester.addCallMethod(TAG_PREFIX + "/tagclass", "setTagClass", 0);
+        digester.addCallMethod(TAG_PREFIX + "/tag-class", "setTagClass", 0);
+        digester.addCallMethod(TAG_PREFIX + "/teiclass", "setTeiClass", 0);
+        digester.addCallMethod(TAG_PREFIX + "/tei-class", "setTeiClass", 0);
+        digester.addCallMethod(TAG_PREFIX + "/bodycontent", "setBodyContent", 0);
+        digester.addCallMethod(TAG_PREFIX + "/body-content", "setBodyContent", 0);
+        digester.addSetNext(TAG_PREFIX, "addTag", Tag.class.getName());
+    }
+}

==================================================
package-info.java
new file mode 100644
index 0000000000..5db654cdef
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/Validator.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Model of a Tag Library Validator from the XML descriptor.
+ */
+public class Validator {
+    private String validationClass;
+    private Map<String, String> initParams;
+
+    public String getValidationClass() {
+        return validationClass;
+    }
+
+    public void setValidationClass(String validationClass) {
+        this.validationClass = validationClass;
+    }
+
+    public void addInitParam(String name, String value) {
+        if (initParams == null) {
+            initParams = new HashMap<>();
+        }
+        initParams.put(name, value);
+    }
+
+    public Map<String, String> getInitParams() {
+        return initParams;
+    }
+}

==================================================
TestTldParser.java
new file mode 100644
index 0000000000..9b85ae65ba
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/package-info.java
@@ -0,0 +1,21 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Package containing a Java model of the XML for a Tag Library Descriptor.
+ */
+package org.apache.tomcat.util.descriptor.tld;
\ No newline at end of file

==================================================
