b04b0b45f52bbdfa0dc543388f91d28c0b1ce7b3
==================================================
Remove unused method Attribute.getName(). It allows to remove name_index field as well.
==================================================
Konstantin Kolinko
==================================================
Fri Sep 12 15:02:00 2014 +0000
==================================================
AnnotationDefault.java
Remove unused method Attribute.getName(). It allows to remove name_index field as well.
Found thanks to Cobertura coverage report.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624564 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Annotations.java
index a0f1be7334..fc68c1b368 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -29,8 +29,6 @@ import java.io.IOException;
 public class AnnotationDefault extends Attribute {
 
     /**
-     * @param name_index
-     *            Index pointing to the name <em>Code</em>
      * @param length
      *            Content length in bytes
      * @param file
@@ -38,11 +36,9 @@ public class AnnotationDefault extends Attribute {
      * @param constant_pool
      *            Array of constants
      */
-    public AnnotationDefault(int name_index, int length,
-            DataInputStream file, ConstantPool constant_pool)
-            throws IOException
-    {
-        super(name_index, length, constant_pool);
+    public AnnotationDefault(int length, DataInputStream file,
+            ConstantPool constant_pool) throws IOException {
+        super(length, constant_pool);
         // Default value
         ElementValue.readElementValue(file, constant_pool);
     }

==================================================
Attribute.java
index 4a6e4897f6..60470fc28d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -31,14 +31,13 @@ public abstract class Annotations extends Attribute {
     private final AnnotationEntry[] annotation_table;
 
     /**
-     * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param file Input stream
      * @param constant_pool Array of constants
      */
-    public Annotations(int name_index, int length, DataInputStream file,
+    public Annotations(int length, DataInputStream file,
             ConstantPool constant_pool) throws IOException {
-        super(name_index, length, constant_pool);
+        super(length, constant_pool);
         final int annotation_table_length = (file.readUnsignedShort());
         annotation_table = new AnnotationEntry[annotation_table_length];
         for (int i = 0; i < annotation_table_length; i++) {

==================================================
ParameterAnnotations.java
index 55aaf502ff..be8000e4d0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -34,16 +34,11 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public abstract class Attribute {
 
-    protected int name_index; // Points to attribute name in constant pool
-
     protected int length; // Content length of attribute field
 
     protected ConstantPool constant_pool;
 
-    protected Attribute(int name_index, int length,
-            ConstantPool constant_pool)
-    {
-        this.name_index = name_index;
+    protected Attribute(int length, ConstantPool constant_pool) {
         this.length = length;
         this.constant_pool = constant_pool;
     }
@@ -88,27 +83,15 @@ public abstract class Attribute {
         switch (tag)
         {
         case Constants.ATTR_RUNTIME_VISIBLE_ANNOTATIONS:
-            return new RuntimeVisibleAnnotations(name_index, length, file,
-                    constant_pool);
+            return new RuntimeVisibleAnnotations(length, file, constant_pool);
         case Constants.ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS:
-            return new RuntimeVisibleParameterAnnotations(name_index, length,
-                    file, constant_pool);
-        case Constants.ATTR_ANNOTATION_DEFAULT:
-            return new AnnotationDefault(name_index, length, file,
+            return new RuntimeVisibleParameterAnnotations(length, file,
                     constant_pool);
+        case Constants.ATTR_ANNOTATION_DEFAULT:
+            return new AnnotationDefault(length, file, constant_pool);
         default: // All other attributes are skipped
             Utility.skipFully(file, length);
             return null;
         }
     }
-
-    /**
-     * @return Name of attribute
-     */
-    public String getName()
-    {
-        ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(name_index,
-                Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
 }

==================================================
RuntimeVisibleAnnotations.java
index b189ba9ff6..e4409d8b4f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
@@ -33,14 +33,13 @@ public abstract class ParameterAnnotations extends Attribute {
 
 
     /**
-     * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param file Input stream
      * @param constant_pool Array of constants
      */
-    ParameterAnnotations(int name_index, int length,
-            DataInputStream file, ConstantPool constant_pool) throws IOException {
-        super(name_index, length, constant_pool);
+    ParameterAnnotations(int length, DataInputStream file,
+            ConstantPool constant_pool) throws IOException {
+        super(length, constant_pool);
         num_parameters = (file.readUnsignedByte());
         parameter_annotation_table = new ParameterAnnotationEntry[num_parameters];
         for (int i = 0; i < num_parameters; i++) {

==================================================
RuntimeVisibleParameterAnnotations.java
index 5f7c474a4f..8d8c1eba1a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
@@ -30,8 +30,6 @@ import java.io.IOException;
 public class RuntimeVisibleAnnotations extends Annotations {
 
     /**
-     * @param name_index
-     *            Index pointing to the name <em>Code</em>
      * @param length
      *            Content length in bytes
      * @param file
@@ -39,10 +37,8 @@ public class RuntimeVisibleAnnotations extends Annotations {
      * @param constant_pool
      *            Array of constants
      */
-    public RuntimeVisibleAnnotations(int name_index, int length,
-            DataInputStream file, ConstantPool constant_pool)
-            throws IOException
-    {
-        super(name_index, length, file, constant_pool);
+    public RuntimeVisibleAnnotations(int length, DataInputStream file,
+            ConstantPool constant_pool) throws IOException {
+        super(length, file, constant_pool);
     }
 }

==================================================
