10bd883d8d3624eb1180097f5390284bb573b4bf
==================================================
Clean up. The setAsync can be done in a single bottleneck, instead mixed into the processor
==================================================
Filip Hanik
==================================================
Thu Mar 25 19:32:46 2010 +0000
==================================================
Request.java
Clean up. The setAsync can be done in a single bottleneck, instead mixed into the processor


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@927555 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index 36c15c35fd..62ad7eb3cd 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1558,7 +1558,6 @@ public class Request
     }
 
     public AsyncContext getAsyncContext() {
-        // TODO SERVLET3 - async
         return this.asyncContext;
     }
 

==================================================
AjpProtocol.java
index 55431a9e56..2bd43fc58c 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -482,7 +482,6 @@ public class AjpProcessor implements ActionHook {
         }
         if (async && !error) {
             rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
-            socket.setAsync(true);
             return SocketState.LONG;
         } else {
             rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
@@ -513,7 +512,6 @@ public class AjpProcessor implements ActionHook {
 
         if (async) {
             if (error) {
-                socket.setAsync(false);
                 response.setStatus(500);
                 request.updateCounters();
                 recycle();
@@ -524,7 +522,6 @@ public class AjpProcessor implements ActionHook {
                 return SocketState.LONG;
             }
         } else {
-            socket.setAsync(false);
             if (error) {
                 response.setStatus(500);
             }

==================================================
Http11Processor.java
index ff6492957c..008a31044c 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -385,8 +385,10 @@ public class AjpProtocol
                 SocketState state = socket.isAsync()?processor.asyncDispatch(status):processor.process(socket);
                 if (state == SocketState.LONG) {
                     connections.put(socket, processor);
+                    socket.setAsync(true);
                 } else {
                     connections.remove(socket);
+                    socket.setAsync(false);
                 }
                 return state;
             } catch(java.net.SocketException e) {

==================================================
Http11Protocol.java
index bdd08529aa..2e8f8015b2 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -323,11 +323,9 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo
                 recycle();
                 return SocketState.CLOSED;
             } else {
-                socket.setAsync(true);
                 return SocketState.LONG;
             }
         } else {
-            socket.setAsync(false);
             if ( error || (!keepAlive)) {
                 recycle();
                 return SocketState.CLOSED;
@@ -357,14 +355,12 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo
 
         if (async) {
             if (error) {
-                socket.setAsync(false);
                 recycle();
                 return SocketState.CLOSED;
             } else {
                 return SocketState.LONG;
             }
         } else {
-            socket.setAsync(false);
             if ( error || (!keepAlive)) {
                 recycle();
                 return SocketState.CLOSED;

==================================================
AbstractEndpoint.java
index a82ccc2a28..399079e04d 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -261,8 +261,10 @@ public class Http11Protocol extends AbstractHttp11Protocol {
                 SocketState state = socket.isAsync()?processor.asyncDispatch(status):processor.process(socket);
                 if (state == SocketState.LONG) {
                     connections.put(socket, processor);
+                    socket.setAsync(true);
                 } else {
                     connections.remove(socket);
+                    socket.setAsync(false);
                 }
                 return state;
             } catch(java.net.SocketException e) {

==================================================
JIoEndpoint.java
index a2f237ab4c..6121e072dc 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -146,12 +146,12 @@ public abstract class AbstractEndpoint {
         return socketProperties;
     }
 
-
-
-
     
     // ----------------------------------------------------------------- Properties
 
+    private int maxConnections = 10000;
+    public void setMaxConnections(int maxCon) { this.maxConnections = maxCon; }
+    public int  getMaxConnections() { return this.maxConnections; }
     /**
      * External Executor based thread pool.
      */

==================================================
