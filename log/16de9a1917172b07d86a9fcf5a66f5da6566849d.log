16de9a1917172b07d86a9fcf5a66f5da6566849d
==================================================
No need to use fully-qualified name now that it has been renamed from ProtocolHandler (that clashed with an internal Tomcat class)
==================================================
Mark Emlyn
==================================================
Tue Jun 11 20:42:33 2013 +0000
==================================================
AbstractProcessor.java
No need to use fully-qualified name now that it has been renamed from ProtocolHandler (that clashed with an internal Tomcat class)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1491948 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index 4d611f1850..0c07e2dafe 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -19,6 +19,8 @@ package org.apache.coyote;
 import java.io.IOException;
 import java.util.concurrent.Executor;
 
+import javax.servlet.http.HttpUpgradeHandler;
+
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -153,5 +155,5 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
             throws IOException;
 
     @Override
-    public abstract javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler();
+    public abstract HttpUpgradeHandler getHttpUpgradeHandler();
 }

==================================================
Processor.java
index 21011fd278..c0a223f53c 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -29,6 +29,7 @@ import javax.management.MBeanRegistrationException;
 import javax.management.MBeanServer;
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -631,7 +632,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
 
                     if (state == SocketState.UPGRADING) {
                         // Get the HTTP upgrade handler
-                        javax.servlet.http.HttpUpgradeHandler httpUpgradeHandler =
+                        HttpUpgradeHandler httpUpgradeHandler =
                                 processor.getHttpUpgradeHandler();
                         // Release the Http11 processor to be re-used
                         release(wrapper, processor, false, false);
@@ -727,8 +728,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                 boolean addToPoller);
         protected abstract Processor<S> createUpgradeProcessor(
                 SocketWrapper<S> socket,
-                javax.servlet.http.HttpUpgradeHandler httpUpgradeProcessor)
-                        throws IOException;
+                HttpUpgradeHandler httpUpgradeProcessor) throws IOException;
 
         protected void register(AbstractProcessor<S> processor) {
             if (getProtocol().getDomain() != null) {

==================================================
