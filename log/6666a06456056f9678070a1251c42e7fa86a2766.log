6666a06456056f9678070a1251c42e7fa86a2766
==================================================
Test method invocation with super classes
==================================================
Mark Emlyn
==================================================
Thu Jun 10 20:09:47 2010 +0000
==================================================
TestMethodExpressionImpl.java
Test method invocation with super classes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@953438 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TesterBeanC.java
index 81b43359ee..0bbedf2452 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -69,10 +69,37 @@ public class TestMethodExpressionImpl extends TestCase {
 
         assertEquals("Tomcat", me1.invoke(context, null));
         assertEquals("Hello JUnit from Tomcat", me2.invoke(context, null));
-        assertEquals("Hello JUnit from Tomcat", me2.invoke(context, new Object[] { "JUnit2" }));
-        assertEquals("Hello JUnit2 from Tomcat", me3.invoke(context, new Object[] { "JUnit2" }));
-        assertEquals("Hello JUnit from Tomcat", me2.invoke(context, new Object[] { null }));
-        assertEquals("Hello null from Tomcat", me3.invoke(context, new Object[] { null }));
+        assertEquals("Hello JUnit from Tomcat",
+                me2.invoke(context, new Object[] { "JUnit2" }));
+        assertEquals("Hello JUnit2 from Tomcat",
+                me3.invoke(context, new Object[] { "JUnit2" }));
+        assertEquals("Hello JUnit from Tomcat",
+                me2.invoke(context, new Object[] { null }));
+        assertEquals("Hello null from Tomcat",
+                me3.invoke(context, new Object[] { null }));
     }
 
+    public void testInvokeWithSuper() {
+        ExpressionFactory factory = ExpressionFactory.newInstance();
+        ELContext context = new ELContextImpl();
+
+        TesterBeanA beanA = new TesterBeanA();
+        ValueExpression varA =
+            factory.createValueExpression(beanA, TesterBeanA.class);
+        context.getVariableMapper().setVariable("beanA", varA);
+        
+        TesterBeanC beanC = new TesterBeanC();        
+        beanC.setName("Tomcat");
+        ValueExpression varC =
+            factory.createValueExpression(beanC, TesterBeanC.class);
+        context.getVariableMapper().setVariable("beanC", varC);
+        
+        MethodExpression me1 = factory.createMethodExpression(context,
+                "${beanA.setBean(beanC)}", null ,
+                new Class<?>[] { TesterBeanB.class });
+        
+        me1.invoke(context, null);
+        
+        assertEquals(beanA.getBean(), beanC);
+    }
 }

==================================================
