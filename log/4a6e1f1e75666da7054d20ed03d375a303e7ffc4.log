4a6e1f1e75666da7054d20ed03d375a303e7ffc4
==================================================
Java 9 allows us to be more selective with the JRE memory leak protection.
==================================================
Mark Thomas
==================================================
Fri Sep 1 15:04:45 2017 +0000
==================================================
JreMemoryLeakPreventionListener.java
Java 9 allows us to be more selective with the JRE memory leak protection.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1806973 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Jre9Compat.java
index 69b8bbbe4d..1823687d43 100644
--- a/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
@@ -20,7 +20,6 @@ package org.apache.catalina.core;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.net.URL;
 import java.net.URLConnection;
 import java.sql.DriverManager;
 import java.util.StringTokenizer;
@@ -288,19 +287,17 @@ public class JreMemoryLeakPreventionListener implements LifecycleListener {
                  * - javax.xml.bind.JAXBContext.newInstance()
                  *
                  * https://bugs.openjdk.java.net/browse/JDK-8163449
+                 *
+                 * Java 9 onwards disables caching for JAR URLConnections
+                 * Java 8 and earlier disables caching for all URLConnections
                  */
 
                 // Set the default URL caching policy to not to cache
                 if (urlCacheProtection) {
                     try {
-                        // Doesn't matter that this JAR doesn't exist - just as
-                        // long as the URL is well-formed
-                        URL url = new URL("jar:file://dummy.jar!/");
-                        URLConnection uConn = url.openConnection();
-                        uConn.setDefaultUseCaches(false);
+                        JreCompat.getInstance().disableCachingForJarUrlConnections();
                     } catch (IOException e) {
-                        log.error(sm.getString(
-                                "jreLeakListener.jarUrlConnCacheFail"), e);
+                        log.error(sm.getString("jreLeakListener.jarUrlConnCacheFail"), e);
                     }
                 }
 

==================================================
JreCompat.java
index 0ce41a22ad..c2e696b31b 100644
--- a/java/org/apache/tomcat/util/compat/Jre9Compat.java
+++ b/java/org/apache/tomcat/util/compat/Jre9Compat.java
@@ -16,8 +16,10 @@
  */
 package org.apache.tomcat.util.compat;
 
+import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.net.URLConnection;
 
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLParameters;
@@ -27,16 +29,19 @@ class Jre9Compat extends JreCompat {
     private static final Class<?> inaccessibleObjectExceptionClazz;
     private static final Method setApplicationProtocolsMethod;
     private static final Method getApplicationProtocolMethod;
+    private static final Method setDefaultUseCaches;
 
     static {
         Class<?> c1 = null;
         Method m2 = null;
         Method m3 = null;
+        Method m4 = null;
 
         try {
             c1 = Class.forName("java.lang.reflect.InaccessibleObjectException");
             m2 = SSLParameters.class.getMethod("setApplicationProtocols", String[].class);
             m3 = SSLEngine.class.getMethod("getApplicationProtocol");
+            m4 = URLConnection.class.getMethod("setDefaultUseCaches", String.class, boolean.class);
         } catch (SecurityException | NoSuchMethodException e) {
             // Should never happen
         } catch (ClassNotFoundException e) {
@@ -45,6 +50,7 @@ class Jre9Compat extends JreCompat {
         inaccessibleObjectExceptionClazz = c1;
         setApplicationProtocolsMethod = m2;
         getApplicationProtocolMethod = m3;
+        setDefaultUseCaches = m4;
     }
 
 
@@ -81,4 +87,14 @@ class Jre9Compat extends JreCompat {
             throw new UnsupportedOperationException(e);
         }
     }
+
+
+    @Override
+    public void disableCachingForJarUrlConnections() throws IOException {
+        try {
+            setDefaultUseCaches.invoke(null, "JAR", Boolean.FALSE);
+        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
+            throw new UnsupportedOperationException(e);
+        }
+    }
 }

==================================================
