53313cf68c805786e00e314de30e1e5b50bb9d17
==================================================
More consistent names
==================================================
Mark Emlyn
==================================================
Thu Jan 31 13:31:26 2013 +0000
==================================================
WsFrameBase.java
More consistent names

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1440953 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrameClient.java
index 3392c93610..97d61e36ce 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -77,12 +77,12 @@ public abstract class WsFrameBase {
     private int readPos = 0;
     protected int writePos = 0;
 
-    public WsFrameBase(int binaryBufferSize, int textBufferSize,
+    public WsFrameBase(int binaryMerssageBufferSize, int textMessageBufferSize,
             WsSession wsSession) {
 
-        inputBuffer = new byte[binaryBufferSize];
-        messageBufferBinary = ByteBuffer.allocate(binaryBufferSize);
-        messageBufferText = CharBuffer.allocate(textBufferSize);
+        inputBuffer = new byte[binaryMerssageBufferSize];
+        messageBufferBinary = ByteBuffer.allocate(binaryMerssageBufferSize);
+        messageBufferText = CharBuffer.allocate(textMessageBufferSize);
         this.wsSession = wsSession;
     }
 

==================================================
WsWebSocketContainer.java
index 3465577052..414e60297e 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -31,8 +31,9 @@ public class WsFrameClient extends WsFrameBase {
     private final CompletionHandler<Integer,Void> handler;
 
     public WsFrameClient(ByteBuffer response, AsynchronousSocketChannel channel,
-            int binaryBufferSize, int textBufferSize, WsSession wsSession) {
-        super(binaryBufferSize, textBufferSize, wsSession);
+            int binaryMessageBufferSize, int textMessageBufferSize,
+            WsSession wsSession) {
+        super(binaryMessageBufferSize, textMessageBufferSize, wsSession);
         this.response = response;
         this.channel = channel;
         this.handler = new WsFrameClientCompletionHandler();

==================================================
WsFrameServer.java
index d7fadda05a..d731cd2d52 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -52,11 +52,11 @@ public class WsWebSocketContainer implements WebSocketContainer {
     private static final Random random = new Random();
     private static final Charset iso88591 = Charset.forName("ISO-8859-1");
     private static final byte[] crlf = new byte[] {13, 10};
-    private static final int defaultBufferSize = 8 * 1024;
+    private static final int DEFAULT_BUFFER_SIZE = 8 * 1024;
 
     private long defaultAsyncTimeout = -1;
-    private int binaryBufferSize = defaultBufferSize;
-    private int textBufferSize = defaultBufferSize;
+    private int maxBinaryMessageBufferSize = DEFAULT_BUFFER_SIZE;
+    private int maxTextMessageBufferSize = DEFAULT_BUFFER_SIZE;
 
     @Override
     public Session connectToServer(Class<?> annotatedEndpointClass, URI path)
@@ -125,7 +125,7 @@ public class WsWebSocketContainer implements WebSocketContainer {
                 toWrite -= thisWrite.intValue();
             }
             // Same size as the WsFrame input buffer
-            response = ByteBuffer.allocate(binaryBufferSize);
+            response = ByteBuffer.allocate(maxBinaryMessageBufferSize);
 
             HandshakeResponse handshakeResponse =
                     processResponse(response, channel);
@@ -154,7 +154,8 @@ public class WsWebSocketContainer implements WebSocketContainer {
         // Object creation will trigger input processing
         @SuppressWarnings("unused")
         WsFrameClient wsFrameClient = new WsFrameClient(response, channel,
-                binaryBufferSize, textBufferSize, wsSession);
+                maxBinaryMessageBufferSize, maxTextMessageBufferSize,
+                wsSession);
 
         return wsSession;
     }
@@ -363,7 +364,7 @@ public class WsWebSocketContainer implements WebSocketContainer {
 
     @Override
     public long getMaxBinaryMessageBufferSize() {
-        return binaryBufferSize;
+        return maxBinaryMessageBufferSize;
     }
 
 
@@ -373,13 +374,13 @@ public class WsWebSocketContainer implements WebSocketContainer {
             throw new IllegalArgumentException(
                     sm.getString("wsWebSocketContainer.maxBuffer"));
         }
-        binaryBufferSize = (int) max;
+        maxBinaryMessageBufferSize = (int) max;
     }
 
 
     @Override
     public long getMaxTextMessageBufferSize() {
-        return textBufferSize;
+        return maxTextMessageBufferSize;
     }
 
 
@@ -389,7 +390,7 @@ public class WsWebSocketContainer implements WebSocketContainer {
             throw new IllegalArgumentException(
                     sm.getString("wsWebSocketContainer.maxBuffer"));
         }
-        textBufferSize = (int) max;
+        maxTextMessageBufferSize = (int) max;
     }
 
 

==================================================
