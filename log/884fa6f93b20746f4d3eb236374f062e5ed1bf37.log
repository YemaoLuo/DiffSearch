884fa6f93b20746f4d3eb236374f062e5ed1bf37
==================================================
Add the type of scan to the JarScanner API
==================================================
Mark Emlyn
==================================================
Fri Jun 14 07:41:33 2013 +0000
==================================================
ContextConfig.java
Add the type of scan to the JarScanner API
This is preparation for changing how jarsToSkip are handled.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1492978 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TldConfig.java
index c5526bb517..46b4ef9357 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -95,6 +95,7 @@ import org.apache.catalina.util.ContextName;
 import org.apache.catalina.util.Introspection;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.JarScanType;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -2042,8 +2043,8 @@ public class ContextConfig implements LifecycleListener {
         JarScanner jarScanner = context.getJarScanner();
         FragmentJarScannerCallback callback = new FragmentJarScannerCallback();
 
-        jarScanner.scan(context.getServletContext(), callback,
-                pluggabilityJarsToSkip);
+        jarScanner.scan(JarScanType.SERVLET3_PLUGGABILITY,
+                context.getServletContext(), callback, pluggabilityJarsToSkip);
 
         return callback.getFragments();
     }

==================================================
TldLocationsCache.java
index a88673c55c..079894895b 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -37,6 +37,7 @@ import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.core.StandardContext;
 import org.apache.catalina.deploy.ApplicationListener;
+import org.apache.tomcat.JarScanType;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -262,7 +263,7 @@ public final class TldConfig  implements LifecycleListener {
 
         // Stages 3b & 4
         JarScanner jarScanner = context.getJarScanner();
-        jarScanner.scan(context.getServletContext(),
+        jarScanner.scan(JarScanType.TLD, context.getServletContext(),
                 new TldJarScannerCallback(), noTldJars);
 
         // Now add all the listeners we found to the listeners for this context

==================================================
JarScanType.java
index 613da29224..c3a5ed8370 100644
--- a/java/org/apache/jasper/compiler/TldLocationsCache.java
+++ b/java/org/apache/jasper/compiler/TldLocationsCache.java
@@ -37,6 +37,7 @@ import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.jasper.xmlparser.TreeNode;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.JarScanType;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.scan.Jar;
@@ -242,7 +243,8 @@ public class TldLocationsCache {
 
             JarScanner jarScanner = JarScannerFactory.getJarScanner(ctxt);
             if (jarScanner != null) {
-                jarScanner.scan(ctxt, new TldJarScannerCallback(), noTldJars);
+                jarScanner.scan(JarScanType.TLD, ctxt,
+                        new TldJarScannerCallback(), noTldJars);
             }
 
             initialized = true;

==================================================
JarScanner.java
new file mode 100644
index 0000000000..73d9fedf7b
--- /dev/null
+++ b/java/org/apache/tomcat/JarScanType.java
@@ -0,0 +1,23 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat;
+
+public enum JarScanType {
+    TLD,
+    SERVLET3_PLUGGABILITY,
+    OTHER
+}

==================================================
StandardJarScanner.java
index 302775861b..98199a3054 100644
--- a/java/org/apache/tomcat/JarScanner.java
+++ b/java/org/apache/tomcat/JarScanner.java
@@ -31,12 +31,15 @@ public interface JarScanner {
      * Scan the provided ServletContext and classloader for JAR files. Each JAR
      * file found will be passed to the callback handler to be processed.
      *
+     * @param scanType      The type of JAR scan to perform. This is passed to
+     *                          the filter which uses it to determine how to
+     *                          filter the results
      * @param context       The ServletContext - used to locate and access
      *                      WEB-INF/lib
      * @param callback      The handler to process any JARs found
      * @param jarsToSkip    List of JARs to ignore
      */
-    public void scan(ServletContext context, JarScannerCallback callback,
+    public void scan(JarScanType scanType, ServletContext context, JarScannerCallback callback,
             Set<String> jarsToSkip);
 
 }

==================================================
