debe7455e5c29600274137740543fea3d9e2df33
==================================================
First pass at using the new resources implementation to provide
==================================================
Mark Emlyn
==================================================
Mon Nov 4 23:53:26 2013 +0000
==================================================
WebResourceRoot.java
First pass at using the new resources implementation to provide
resources to the class loader.

Class loader resources are handled by treating JARs in WEB-INF/lib as
resource JARs (without the internal META-INF/resources/ prefix) mounted
at WEB-INF/claasses (rather than the web app root). This enables reuse
of the resource handling plumbing.

These resources are marked as class loader only so they are only used in
the methods that are explicitly defined to return class loader
resources. This prevents calls to getResource("/WEB-INF/classes")
returning from one or more of the JAR files.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538807 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebResourceSet.java
index 046dfb1b57..db82449919 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -110,6 +110,22 @@ public interface WebResourceRoot extends Lifecycle {
      */
     WebResource[] getResources(String path);
 
+    /**
+     * Obtain the object that represents the class loader resource at the given
+     * path. WEB-INF/classes is always searched prior to searching JAR files in
+     * WEB-INF/lib. The search order for JAR files will be consistent across
+     * subsequent calls to this method until the web application is reloaded. No
+     * guarantee is made as to what the search order for JAR files may be.
+     *
+     * @param path  The path of the class loader resource of interest relative
+     *              to the the root of class loader resources for this web
+     *              application.
+     *
+     * @return  The object that represents the class loader resource at the
+     *          given path
+     */
+    WebResource getClassLoaderResource(String path);
+
     /**
      * Obtain the list of the names of all of the files and directories located
      * in the specified directory.
@@ -336,6 +352,7 @@ public interface WebResourceRoot extends Lifecycle {
     public static enum ResourceSetType {
         PRE,
         RESOURCE_JAR,
-        POST
+        POST,
+        CLASSES_JAR
     }
 }

==================================================
AbstractResourceSet.java
index 6d64e62a16..9c95942fe2 100644
--- a/java/org/apache/catalina/WebResourceSet.java
+++ b/java/org/apache/catalina/WebResourceSet.java
@@ -90,4 +90,16 @@ public interface WebResourceSet extends Lifecycle {
     boolean write(String path, InputStream is, boolean overwrite);
 
     void setRoot(WebResourceRoot root);
+
+    /**
+     * Are resources provided by this resource set only intended for use by
+     * calls to {@link WebResourceRoot#getClassLoaderResource(String)}.
+     *
+     * @return @true if these resources should only be used for calls to
+     *         {@link WebResourceRoot#getClassLoaderResource(String)}, otherwise
+     *         @false
+     */
+    boolean getClassLoaderOnly();
+
+    void setClassLoaderOnly(boolean classLoaderOnly);
 }

==================================================
Cache.java
index 33cc6aafc5..eab9d1383a 100644
--- a/java/org/apache/catalina/webresources/AbstractResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractResourceSet.java
@@ -30,6 +30,7 @@ public abstract class AbstractResourceSet extends LifecycleBase
     private String base;
     private String internalPath;
     private String webAppMount;
+    private boolean classLoaderOnly;
 
 
     protected static final StringManager sm =
@@ -88,6 +89,15 @@ public abstract class AbstractResourceSet extends LifecycleBase
         return base;
     }
 
+    @Override
+    public boolean getClassLoaderOnly() {
+        return classLoaderOnly;
+    }
+
+    @Override
+    public void setClassLoaderOnly(boolean classLoaderOnly) {
+        this.classLoaderOnly = classLoaderOnly;
+    }
 
     //-------------------------------------------------------- Lifecycle methods
     @Override

==================================================
CachedResource.java
index 7001533c4c..691f783c7c 100644
--- a/java/org/apache/catalina/webresources/Cache.java
+++ b/java/org/apache/catalina/webresources/Cache.java
@@ -55,15 +55,15 @@ public class Cache {
         this.root = root;
     }
 
-    protected WebResource getResource(String path) {
+    protected WebResource getResource(String path, boolean useClassLoaderResources) {
 
         if (noCache(path)) {
-            return root.getResourceInternal(path);
+            return root.getResourceInternal(path, useClassLoaderResources);
         }
 
         CachedResource cacheEntry = resourceCache.get(path);
 
-        if (cacheEntry != null && !cacheEntry.validate()) {
+        if (cacheEntry != null && !cacheEntry.validate(useClassLoaderResources)) {
             removeCacheEntry(path, true);
             cacheEntry = null;
         }
@@ -77,7 +77,7 @@ public class Cache {
             if (cacheEntry == null) {
                 // newCacheEntry was inserted into the cache - validate it
                 cacheEntry = newCacheEntry;
-                cacheEntry.validate();
+                cacheEntry.validate(useClassLoaderResources);
                 if (newCacheEntry.getContentLength() > getMaxSizeBytes()) {
                     // Cache size has not been updated at this point
                     removeCacheEntry(path, false);
@@ -110,7 +110,7 @@ public class Cache {
             } else {
                 // Another thread added the entry to the cache
                 // Make sure it is validated
-                cacheEntry.validate();
+                cacheEntry.validate(useClassLoaderResources);
             }
         }
 
@@ -141,6 +141,8 @@ public class Cache {
 
     private boolean noCache(String path) {
         // Don't cache resources used by the class loader (it has its own cache)
+        // TODO. Review these exclusions once class loader resource handling is
+        // complete
         if (path.startsWith("/WEB-INF/classes") ||
                 path.startsWith("/WEB-INF/lib")) {
             return true;

==================================================
StandardRoot.java
index 9b6f9df7e9..cd12372b6e 100644
--- a/java/org/apache/catalina/webresources/CachedResource.java
+++ b/java/org/apache/catalina/webresources/CachedResource.java
@@ -53,13 +53,14 @@ public class CachedResource implements WebResource {
         this.ttl = ttl;
     }
 
-    protected boolean validate() {
+    protected boolean validate(boolean useClassLoaderResources) {
         long now = System.currentTimeMillis();
 
         if (webResource == null) {
             synchronized (this) {
                 if (webResource == null) {
-                    webResource = root.getResourceInternal(webAppPath);
+                    webResource = root.getResourceInternal(
+                            webAppPath, useClassLoaderResources);
                     getLastModified();
                     getContentLength();
                     nextCheck = ttl + now;
@@ -72,8 +73,8 @@ public class CachedResource implements WebResource {
             return true;
         }
 
-        if (!webResource.exists() &&
-                root.getResourceInternal(webAppPath).exists()) {
+        if (!webResource.exists() && root.getResourceInternal(
+                webAppPath, useClassLoaderResources).exists()) {
             return false;
         }
 

==================================================
