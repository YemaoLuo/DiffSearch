8fd5d6273099c504e1739080c07cf4d33cff89bf
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=50175
==================================================
Mark Thomas
==================================================
Tue May 15 10:26:30 2018 +0000
==================================================
StandardContext.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=50175
Add a new attribute to the standard context implementation, skipMemoryLeakChecksOnJvmShutdown, that allows the user to configure Tomcat to skip the memory leak checks usually performed during web application stop if that stop is triggered by a JVM shutdown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1831618 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoaderBase.java
index e3523006e5..19cb2b8136 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -742,6 +742,12 @@ public class StandardContext extends ContainerBase
      */
     private boolean clearReferencesObjectStreamClassCaches = true;
 
+    /**
+     * Should Tomcat skip the memory leak checks when the web application is
+     * stopped as part of the process of shutting down the JVM?
+     */
+    private boolean skipMemoryLeakChecksOnJvmShutdown = false;
+
     /**
      * Should the effective web.xml be logged when the context starts?
      */
@@ -2691,6 +2697,16 @@ public class StandardContext extends ContainerBase
     }
 
 
+    public boolean getSkipMemoryLeakChecksOnJvmShutdown() {
+        return skipMemoryLeakChecksOnJvmShutdown;
+    }
+
+
+    public void setSkipMemoryLeakChecksOnJvmShutdown(boolean skipMemoryLeakChecksOnJvmShutdown) {
+        this.skipMemoryLeakChecksOnJvmShutdown = skipMemoryLeakChecksOnJvmShutdown;
+    }
+
+
     public Boolean getFailCtxIfServletStartFails() {
         return failCtxIfServletStartFails;
     }
@@ -4951,6 +4967,8 @@ public class StandardContext extends ContainerBase
                         getClearReferencesHttpClientKeepAliveThread());
                 setClassLoaderProperty("clearReferencesObjectStreamClassCaches",
                         getClearReferencesObjectStreamClassCaches());
+                setClassLoaderProperty("skipMemoryLeakChecksOnJvmShutdown",
+                        getSkipMemoryLeakChecksOnJvmShutdown());
 
                 // By calling unbindThread and bindThread in a row, we setup the
                 // current Thread CCL to be the webapp classloader

==================================================
