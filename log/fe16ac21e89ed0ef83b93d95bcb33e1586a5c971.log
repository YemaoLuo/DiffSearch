fe16ac21e89ed0ef83b93d95bcb33e1586a5c971
==================================================
https://issues.apache.org/bugzilla/show_bug.cgi?id=52066
==================================================
Filip Hanik
==================================================
Tue Mar 27 17:55:41 2012 +0000
==================================================
ConnectionPool.java
index 06ddceeb86..6e986f2647 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -463,6 +463,11 @@
       <p>(boolean) Set this to true to log errors during the validation phase to the log file. If set to true, errors will be logged as SEVERE. Default value is <code>false</code> for backwards compatibility.
       </p>
     </attribute>
+    <attribute name="propagateInterruptState" required="false">
+      <p>(boolean) Set this to true to propagate the interrupt state for a thread that has been interrupted (not clearing the interrupt state). Default value is <code>false</code> for backwards compatibility.
+      </p>
+    </attribute>
+    
   </attributes>
   </subsection>
 </section>

==================================================
DataSourceProxy.java
index 58a2364267..2567317c25 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -381,7 +381,9 @@ public class ConnectionPool {
                     }
                 } //while
             } catch (InterruptedException ex) {
-                Thread.interrupted();
+                if (!getPoolProperties().getPropagateInterruptState()) {
+                    Thread.interrupted();
+                }
             }
             if (pool.size()==0 && force && pool!=busy) pool = busy;
         }
@@ -626,7 +628,9 @@ public class ConnectionPool {
                 //retrieve an existing connection
                 con = idle.poll(timetowait, TimeUnit.MILLISECONDS);
             } catch (InterruptedException ex) {
-                Thread.interrupted();//clear the flag, and bail out
+                if (!getPoolProperties().getPropagateInterruptState()) {
+                    Thread.interrupted();
+                }
                 SQLException sx = new SQLException("Pool wait interrupted.");
                 sx.initCause(ex);
                 throw sx;

==================================================
PoolConfiguration.java
index ed100334c9..caebc7fe24 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -1268,4 +1268,20 @@ public class DataSourceProxy implements PoolConfiguration {
         return getPoolProperties().getLogValidationErrors();
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean getPropagateInterruptState() {
+        return getPoolProperties().getPropagateInterruptState();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void setPropagateInterruptState(boolean propagateInterruptState) {
+        getPoolProperties().setPropagateInterruptState(propagateInterruptState);
+    }
+
 }

==================================================
PoolProperties.java
index 6609d21d9e..498ca54845 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -847,4 +847,21 @@ public interface PoolConfiguration {
      */
     public boolean getLogValidationErrors();
 
+    /**
+     * Returns true if the pool is configured to propagate interrupt state of a thread.
+     * A thread waiting for a connection, can have its wait interrupted, and by default
+     * will clear the interrupt flag and throw a {@link PoolExhaustedException}
+     * @return true if the pool is configured to propagate and not clear the thread interrupt state
+     */
+    public boolean getPropagateInterruptState();
+
+    /**
+     * Configure the pool to propagate interrupt state for interrupted threads waiting for a connection
+     * A thread waiting for a connection, can have its wait interrupted, and by default
+     * will clear the interrupt flag and throw a {@link PoolExhaustedException}
+     * If set to true, this behavior will change, while the {@link PoolExhaustedException} is still thrown, the threads interrupted state is still set.
+     * @param propagateInterruptState - set to true to not clear, but propagate, a threads interrupted state.
+     */
+    public void setPropagateInterruptState(boolean propagateInterruptState);
+
 }

==================================================
ConnectionPool.java
index 48ba523642..2356fb2131 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -88,6 +88,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
     protected boolean rollbackOnReturn = false;
     protected boolean useDisposableConnectionFacade = true;
     protected boolean logValidationErrors = false;
+    protected boolean propagateInterruptState = false;
 
 
     /**
@@ -1229,6 +1230,22 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         return this.logValidationErrors;
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean getPropagateInterruptState() {
+        return propagateInterruptState;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void setPropagateInterruptState(boolean propagateInterruptState) {
+        this.propagateInterruptState = propagateInterruptState;
+    }
+
     @Override
     protected Object clone() throws CloneNotSupportedException {
         // TODO Auto-generated method stub

==================================================
