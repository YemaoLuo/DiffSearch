b32df7c938b6f17e68af67d090fcce582be3ca86
==================================================
Generics fixes for o.a.jk
==================================================
Mark Emlyn
==================================================
Sun Nov 23 13:49:26 2008 +0000
==================================================
AprImpl.java
Generics fixes for o.a.jk

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@719988 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TomcatStarter.java
index 271e73a319..bb4038f1b9 100644
--- a/java/org/apache/jk/apr/AprImpl.java
+++ b/java/org/apache/jk/apr/AprImpl.java
@@ -40,7 +40,7 @@ public class AprImpl extends JkHandler { // This will be o.a.t.util.handler.TcHa
     static boolean ok=true;
     boolean initialized=false;
     // Handlers for native callbacks
-    Hashtable jkHandlers=new Hashtable();
+    Hashtable<String, JkHandler> jkHandlers= new Hashtable<String, JkHandler>();
 
     // Name of the so used in inprocess mode 
     String jniModeSo="inprocess";

==================================================
ChannelNioSocket.java
index 7efa319ddf..65ab02571f 100644
--- a/java/org/apache/jk/apr/TomcatStarter.java
+++ b/java/org/apache/jk/apr/TomcatStarter.java
@@ -27,7 +27,7 @@ import java.lang.reflect.Method;
  * 
  */
 public class TomcatStarter implements Runnable {
-    Class c;
+    Class<?> c;
     String args[];
     AprImpl apr = new AprImpl();
     
@@ -45,7 +45,7 @@ public class TomcatStarter implements Runnable {
         try {
             AprImpl.jniMode();            
             // Find the class
-            Class c=null;
+            Class<?> c=null;
             for( int i=0; i<mainClasses.length; i++ ) {
                 try {
                     System.err.println("Try  " + mainClasses[i]);
@@ -69,7 +69,7 @@ public class TomcatStarter implements Runnable {
         }
     }
 
-    public TomcatStarter( Class c, String args[] ) {
+    public TomcatStarter( Class<?> c, String args[] ) {
         this.c=c;
         this.args=args;
     }
@@ -77,7 +77,7 @@ public class TomcatStarter implements Runnable {
     public void run() {
         System.err.println("Starting " + c.getName());
         try {
-            Class argClass=args.getClass();
+            Class<?> argClass=args.getClass();
             Method m=c.getMethod( "main", new Class[] {argClass} );
             m.invoke( c, new Object[] { args } );
             System.out.println("TomcatStarter: Done");

==================================================
ChannelSocket.java
index b34bea46fd..ffefdd8367 100644
--- a/java/org/apache/jk/common/ChannelNioSocket.java
+++ b/java/org/apache/jk/common/ChannelNioSocket.java
@@ -917,7 +917,7 @@ public class ChannelNioSocket extends JkHandler
                 log.error("Error closing connection", e);
             }
             try{
-                Request req = (Request)ep.getRequest();
+                Request req = ep.getRequest();
                 if( req != null ) {
                     ObjectName roname = (ObjectName)ep.getNote(JMXRequestNote);
                     if( roname != null ) {
@@ -958,10 +958,10 @@ public class ChannelNioSocket extends JkHandler
                     if(log.isDebugEnabled())
                         log.debug("Selecting "+ns+" channels");
                     if(ns > 0) {
-                        Set sels = selector.selectedKeys();
-                        Iterator it = sels.iterator();
+                        Set<SelectionKey> sels = selector.selectedKeys();
+                        Iterator<SelectionKey> it = sels.iterator();
                         while(it.hasNext()) {
-                            SelectionKey sk = (SelectionKey)it.next();
+                            SelectionKey sk = it.next();
                             if(sk.isAcceptable()) {
                                 acceptConnections();
                             } else {

==================================================
ChannelUn.java
index 592757df92..68dbb8ddef 100644
--- a/java/org/apache/jk/common/ChannelSocket.java
+++ b/java/org/apache/jk/common/ChannelSocket.java
@@ -722,7 +722,7 @@ public class ChannelSocket extends JkHandler
                 log.error( "Error, closing connection", e);
             }
             try{
-                Request req = (Request)ep.getRequest();
+                Request req = ep.getRequest();
                 if( req != null ) {
                     ObjectName roname = (ObjectName)ep.getNote(JMXRequestNote);
                     if( roname != null ) {

==================================================
HandlerRequest.java
index 1da79bd9f5..d9f2899a15 100644
--- a/java/org/apache/jk/common/ChannelUn.java
+++ b/java/org/apache/jk/common/ChannelUn.java
@@ -310,7 +310,7 @@ public class ChannelUn extends JniHandler implements JkChannel {
             if( log.isDebugEnabled() )
                 log.debug( "Closing un channel");
             try{
-                Request req = (Request)ep.getRequest();
+                Request req = ep.getRequest();
                 if( req != null ) {
                     ObjectName roname = (ObjectName)ep.getNote(JMXRequestNote);
                     if( roname != null ) {

==================================================
JkMX.java
index ead0bbdb67..97357e80b6 100644
--- a/java/org/apache/jk/common/HandlerRequest.java
+++ b/java/org/apache/jk/common/HandlerRequest.java
@@ -261,8 +261,7 @@ public class HandlerRequest extends JkHandler
                 decodeRequest( msg, ep, tmpMB );
                 if (twa != null) {
                     twa.setCurrentStage(control, "JkService");
-                    twa.setParam(control,
-                                 ((Request)ep.getRequest()).unparsedURI());
+                    twa.setParam(control, ep.getRequest().unparsedURI());
                 }
             } catch( Exception ex ) {
                 log.error( "Error decoding request ", ex );
@@ -377,7 +376,7 @@ public class HandlerRequest extends JkHandler
         // Translate the HTTP method code to a String.
         byte methodCode = msg.getByte();
         if (methodCode != AjpConstants.SC_M_JK_STORED) {
-            String mName=AjpConstants.methodTransArray[(int)methodCode - 1];
+            String mName=AjpConstants.methodTransArray[methodCode - 1];
             req.method().setString(mName);
         }
 
@@ -652,7 +651,7 @@ public class HandlerRequest extends JkHandler
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.DEC[valueB[i + valueS]];
                 if (charValue == -1) {
                     // Invalid character
                     throw new CharConversionException("Invalid char in port: " + valueB[i + valueS]); 

==================================================
Shm.java
index dd341c4f6b..ceb93d34c9 100644
--- a/java/org/apache/jk/common/JkMX.java
+++ b/java/org/apache/jk/common/JkMX.java
@@ -380,7 +380,7 @@ public class JkMX extends JkHandler
 
     private ObjectName registerObject(String className, String oName) 
         throws Exception {
-        Class c = Class.forName(className);
+        Class<?> c = Class.forName(className);
         Object o = c.newInstance();
         ObjectName objN = new ObjectName(oName);
         mserver.registerMBean(o, objN);

==================================================
ApacheConfig.java
index 4d5130f24d..c4360678e4 100644
--- a/java/org/apache/jk/common/Shm.java
+++ b/java/org/apache/jk/common/Shm.java
@@ -51,7 +51,7 @@ public class Shm extends JniHandler {
     boolean reset=false;
     String dumpFile=null;
 
-    Vector groups=new Vector();
+    Vector<String> groups = new Vector<String>();
     
     // Will be dynamic ( getMethodId() ) after things are stable 
     static final int SHM_WRITE_SLOT=2;
@@ -149,7 +149,7 @@ public class Shm extends JniHandler {
     public void resetScoreboard() throws IOException {
         if( apr==null ) return;
         MsgContext mCtx=createMsgContext();
-        Msg msg=(Msg)mCtx.getMsg(0);
+        Msg msg=mCtx.getMsg(0);
         msg.reset();
 
         msg.appendByte( SHM_RESET );
@@ -160,7 +160,7 @@ public class Shm extends JniHandler {
     public void dumpScoreboard(String fname) throws IOException {
         if( apr==null ) return;
         MsgContext mCtx=createMsgContext();
-        Msg msg=(Msg)mCtx.getMsg(0);
+        Msg msg=mCtx.getMsg(0);
         C2BConverter c2b=mCtx.getConverter();
         msg.reset();
 
@@ -181,7 +181,7 @@ public class Shm extends JniHandler {
 
         String slotName="TOMCAT:" + instanceId;
         MsgContext mCtx=createMsgContext();
-        Msg msg=(Msg)mCtx.getMsg(0);
+        Msg msg=mCtx.getMsg(0);
         msg.reset();
         C2BConverter c2b=mCtx.getConverter();
         
@@ -194,7 +194,7 @@ public class Shm extends JniHandler {
         // number of groups. 0 means the default lb.
         msg.appendInt( groups.size() );
         for( int i=0; i<groups.size(); i++ ) {
-            appendString( msg, (String)groups.elementAt( i ), c2b);
+            appendString( msg, groups.elementAt( i ), c2b);
             appendString( msg, instanceId, c2b);
         }
         
@@ -224,7 +224,7 @@ public class Shm extends JniHandler {
     {
         String slotName="TOMCAT:" + host + ":" + port;
         MsgContext mCtx=createMsgContext();
-        Msg msg=(Msg)mCtx.getMsg(0);
+        Msg msg=mCtx.getMsg(0);
         msg.reset();
         C2BConverter c2b=mCtx.getConverter();
         

==================================================
GeneratorApache2.java
index 6683b073fc..232f20523e 100644
--- a/java/org/apache/jk/config/ApacheConfig.java
+++ b/java/org/apache/jk/config/ApacheConfig.java
@@ -153,7 +153,7 @@ public class ApacheConfig  extends BaseJkConfig {
     private String sslCipherIndicator="SSL_CIPHER";
     private String sslCertsIndicator="SSL_CLIENT_CERT";
 
-    Hashtable NamedVirtualHosts=null;
+    Hashtable<String, String> NamedVirtualHosts=null;
     
     public ApacheConfig() {
     }

==================================================
GeneratorJk1.java
index c66a8ce738..fe833f25b4 100644
--- a/java/org/apache/jk/config/GeneratorApache2.java
+++ b/java/org/apache/jk/config/GeneratorApache2.java
@@ -98,10 +98,10 @@ public class GeneratorApache2 implements WebXml2Jk.MappingGenerator {
     }
 
     private void generateWelcomeFiles( PrintWriter out ) {
-        Vector wf= wxml.getWellcomeFiles();
+        Vector<String> wf= wxml.getWellcomeFiles();
         out.print("  DirectoryIndex ");
         for( int i=0; i<wf.size(); i++ ) {
-            out.print( " " + (String)wf.elementAt(i));
+            out.print( " " + wf.elementAt(i));
         }
         out.println();
     }
@@ -161,16 +161,17 @@ public class GeneratorApache2 implements WebXml2Jk.MappingGenerator {
     }
 
     // XXX Only if BASIC/DIGEST and 'integrated auth'
-    public void generateConstraints( Vector urls, Vector methods, Vector roles, boolean isSSL ) {
+    public void generateConstraints( Vector<String> urls, Vector<String> methods,
+            Vector<String> roles, boolean isSSL ) {
         for( int i=0; i<urls.size(); i++ ) {
-            String url=(String)urls.elementAt(i);
+            String url = urls.elementAt(i);
 
             out.println( "<Location \"" + cpath + url + "\" >");
 
             if( methods.size() > 0 ) {
                 out.print("  <Limit ");
                 for( int j=0; j<methods.size(); j++ ) {
-                    String m=(String)methods.elementAt(j);
+                    String m = methods.elementAt(j);
                     out.print( " " +  m);
                 }
                 out.println(  " >" );
@@ -179,7 +180,7 @@ public class GeneratorApache2 implements WebXml2Jk.MappingGenerator {
             out.println( "    AuthType basic" );
             out.print( "    Require group " );
             for( int j=0; j<roles.size(); j++ ) {
-                String role=(String)roles.elementAt(j);
+                String role = roles.elementAt(j);
                 out.print( " " +  role);
             }
             out.println();

==================================================
GeneratorJk2.java
index 7f9c237fd0..96bb9eb888 100644
--- a/java/org/apache/jk/config/GeneratorJk1.java
+++ b/java/org/apache/jk/config/GeneratorJk1.java
@@ -98,14 +98,15 @@ public class GeneratorJk1 implements WebXml2Jk.MappingGenerator {
 
     }
     
-    public void generateWelcomeFiles( Vector wf ) {
+    public void generateWelcomeFiles( Vector<String> wf ) {
 
     }
                                             
     
-    public void generateConstraints( Vector urls, Vector methods, Vector roles, boolean isSSL ) {
+    public void generateConstraints( Vector<String> urls, Vector<String> methods,
+            Vector<String> roles, boolean isSSL ) {
         for( int i=0; i<urls.size(); i++ ) {
-            String url=(String)urls.elementAt(i);
+            String url = urls.elementAt(i);
 
             out.println( "JkMount " + cpath + url + " " + worker);
         }

==================================================
WebXml2Jk.java
index f06c6e8ee4..d7dba0eb82 100644
--- a/java/org/apache/jk/config/GeneratorJk2.java
+++ b/java/org/apache/jk/config/GeneratorJk2.java
@@ -116,25 +116,26 @@ public class GeneratorJk2 implements WebXml2Jk.MappingGenerator {
 
     }
     
-    public void generateWelcomeFiles( Vector wf ) {
+    public void generateWelcomeFiles( Vector<String> wf ) {
 
     }
                                             
     
-    public void generateConstraints( Vector urls, Vector methods, Vector roles, boolean isSSL ) {
+    public void generateConstraints(Vector<String> urls, Vector<String> methods,
+            Vector<String> roles, boolean isSSL ) {
         for( int i=0; i<urls.size(); i++ ) {
-            String url=(String)urls.elementAt(i);
+            String url=urls.elementAt(i);
 
             out.println("[url:" + vhost + cpath + url + "]");
             out.println( "group=" + worker );
             out.println( "host=" +  vhost); 
             out.println( "context=" +  cpath);
             for( int j=0; j<roles.size(); j++ ) {
-                String role=(String)roles.elementAt(j);
+                String role=roles.elementAt(j);
                 out.println( "role=" +  role);
             }
             for( int j=0; j<methods.size(); j++ ) {
-                String m=(String)methods.elementAt(j);
+                String m=methods.elementAt(j);
                 out.println( "method=" +  m);
             }
             if( isSSL )

==================================================
WorkerEnv.java
index c03030fd32..1ec5ee990b 100644
--- a/java/org/apache/jk/config/WebXml2Jk.java
+++ b/java/org/apache/jk/config/WebXml2Jk.java
@@ -147,7 +147,8 @@ public class WebXml2Jk {
 
         void generateErrorPage( int err, String location ) throws IOException ;
             
-        void generateConstraints( Vector urls, Vector methods, Vector roles, boolean isSSL ) throws IOException ;
+        void generateConstraints( Vector<String> urls, Vector<String> methods,
+                Vector<String> roles, boolean isSSL ) throws IOException ;
     }    
     
     // -------------------- Implementation --------------------
@@ -164,11 +165,11 @@ public class WebXml2Jk {
         return jkDir;
     }
     
-    /** Extract the wellcome files from the web.xml
+    /** Extract the welcome files from the web.xml
      */
-    public Vector getWellcomeFiles() {
+    public Vector<String> getWellcomeFiles() {
         Node n0=getChild( webN, "welcome-file-list" );
-        Vector wF=new Vector();
+        Vector<String> wF = new Vector<String>();
         if( n0!=null ) {
             for( Node mapN=getChild( webN, "welcome-file" );
                  mapN != null; mapN = getNext( mapN ) ) {
@@ -240,9 +241,9 @@ public class WebXml2Jk {
         for( Node mapN=getChild( webN, "security-constraint" );
              mapN != null; mapN = getNext( mapN )) {
 
-            Vector methods=new Vector();
-            Vector urls=new Vector();
-            Vector roles=new Vector();
+            Vector<String> methods = new Vector<String>();
+            Vector<String> urls= new Vector<String>();
+            Vector<String> roles= new Vector<String>();
             boolean isSSL=false;
             
             Node wrcN=getChild( mapN, "web-resource-collection");
@@ -340,7 +341,7 @@ public class WebXml2Jk {
 
             /* do ant-style property setting */
             IntrospectionUtils.processArgs( w2jk, args, new String[] {},
-                                            null, new Hashtable());
+                                            null, new Hashtable<Object, Object>());
             w2jk.execute();
         } catch( Exception ex ) {
             ex.printStackTrace();

==================================================
JkMain.java
index 18145ebe63..c6d19b10a3 100644
--- a/java/org/apache/jk/core/WorkerEnv.java
+++ b/java/org/apache/jk/core/WorkerEnv.java
@@ -33,7 +33,7 @@ import javax.management.ObjectName;
  */
 public class WorkerEnv {
 
-    Hashtable properties;
+    Hashtable<Object, Object> properties;
 
     public static final int ENDPOINT_NOTE=0;
     public static final int REQUEST_NOTE=1;
@@ -42,7 +42,8 @@ public class WorkerEnv {
     String noteName[][]=new String[4][];
     private Object notes[]=new Object[32];
 
-    Hashtable handlersMap=new Hashtable();
+    Hashtable<String, JkHandler> handlersMap =
+        new Hashtable<String, JkHandler>();
     JkHandler handlersTable[]=new JkHandler[20];
     int handlerCount=0;
     
@@ -122,7 +123,7 @@ public class WorkerEnv {
     }
 
     public final JkHandler getHandler( String name ) {
-        return (JkHandler)handlersMap.get(name);
+        return handlersMap.get(name);
     }
 
     public final JkHandler getHandler( int id ) {

==================================================
