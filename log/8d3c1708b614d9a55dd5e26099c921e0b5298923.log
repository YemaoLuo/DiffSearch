8d3c1708b614d9a55dd5e26099c921e0b5298923
==================================================
No longer require per I/O implementation Processor implementations for HTTP
==================================================
Mark Thomas
==================================================
Fri Jan 30 09:46:27 2015 +0000
==================================================
AbstractHttp11Protocol.java
No longer require per I/O implementation Processor implementations for HTTP

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655973 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 80ae6ed16a..fb29337c5c 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -214,7 +214,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     // ------------------------------------------------------------- Common code
 
     // Common configuration required for all new HTTP11 processors
-    protected void configureProcessor(AbstractHttp11Processor<S> processor) {
+    protected void configureProcessor(Http11Processor<S> processor) {
         processor.setAdapter(getAdapter());
         processor.setMaxKeepAliveRequests(getMaxKeepAliveRequests());
         processor.setConnectionUploadTimeout(getConnectionUploadTimeout());

==================================================
Http11AprProtocol.java
deleted file mode 100644
index 4e6eb9fcf3..0000000000
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11;
-
-import org.apache.coyote.ActionCode;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
-
-
-/**
- * Processes HTTP requests.
- *
- * @author Remy Maucherat
- */
-public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
-
-
-    private static final Log log = LogFactory.getLog(Http11AprProcessor.class);
-    @Override
-    protected Log getLog() {
-        return log;
-    }
-
-
-    // ----------------------------------------------------------- Constructors
-
-    public Http11AprProcessor(int maxHttpHeaderSize, AbstractEndpoint<Long> endpoint,
-            int maxTrailerSize, int maxExtensionSize, int maxSwallowSize) {
-
-        super(maxHttpHeaderSize, endpoint, maxTrailerSize, maxExtensionSize, maxSwallowSize);
-    }
-
-
-    // ----------------------------------------------------- ActionHook Methods
-
-    /**
-     * Send an action to the connector.
-     *
-     * @param actionCode Type of the action
-     * @param param Action parameter
-     */
-    @Override
-    public void actionInternal(ActionCode actionCode, Object param) {
-        // Unused
-    }
-}

==================================================
Http11Nio2Processor.java
index 4cca8c2999..7d7fd546c0 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -212,7 +212,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     // --------------------  Connection handler --------------------
 
     protected static class Http11ConnectionHandler
-            extends AbstractConnectionHandler<Long,Http11AprProcessor> {
+            extends AbstractConnectionHandler<Long,Http11Processor<Long>> {
 
         protected Http11AprProtocol proto;
 
@@ -295,8 +295,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         }
 
         @Override
-        protected Http11AprProcessor createProcessor() {
-            Http11AprProcessor processor = new Http11AprProcessor(
+        protected Http11Processor<Long> createProcessor() {
+            Http11Processor<Long> processor = new Http11Processor<>(
                     proto.getMaxHttpHeaderSize(), proto.getEndpoint(),
                     proto.getMaxTrailerSize(), proto.getMaxExtensionSize(),
                     proto.getMaxSwallowSize());

==================================================
Http11Nio2Protocol.java
deleted file mode 100644
index 1fa649cf45..0000000000
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11;
-
-import org.apache.coyote.ActionCode;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
-import org.apache.tomcat.util.net.Nio2Channel;
-
-
-/**
- * Processes HTTP requests.
- */
-public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
-
-    private static final Log log = LogFactory.getLog(Http11Nio2Processor.class);
-    @Override
-    protected Log getLog() {
-        return log;
-    }
-
-
-    // ----------------------------------------------------------- Constructors
-
-    public Http11Nio2Processor(int maxHttpHeaderSize, AbstractEndpoint<Nio2Channel> endpoint,
-            int maxTrailerSize, int maxExtensionSize, int maxSwallowSize) {
-
-        super(maxHttpHeaderSize, endpoint, maxTrailerSize, maxExtensionSize, maxSwallowSize);
-    }
-
-
-    // ----------------------------------------------------- ActionHook Methods
-
-    /**
-     * Send an action to the connector.
-     *
-     * @param actionCode Type of the action
-     * @param param Action parameter
-     */
-    @Override
-    public void actionInternal(ActionCode actionCode, Object param) {
-        // Unused
-    }
-}

==================================================
Http11NioProcessor.java
index de4cb00065..b0a3eae311 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -100,7 +100,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
     // --------------------  Connection handler --------------------
 
     protected static class Http11ConnectionHandler
-            extends AbstractConnectionHandler<Nio2Channel,Http11Nio2Processor>
+            extends AbstractConnectionHandler<Nio2Channel,Http11Processor<Nio2Channel>>
             implements Handler {
 
         protected Http11Nio2Protocol proto;
@@ -209,8 +209,8 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         }
 
         @Override
-        public Http11Nio2Processor createProcessor() {
-            Http11Nio2Processor processor = new Http11Nio2Processor(
+        public Http11Processor<Nio2Channel> createProcessor() {
+            Http11Processor<Nio2Channel> processor = new Http11Processor<>(
                     proto.getMaxHttpHeaderSize(), proto.getEndpoint(),
                     proto.getMaxTrailerSize(), proto.getMaxExtensionSize(),
                     proto.getMaxSwallowSize());

==================================================
Http11NioProtocol.java
deleted file mode 100644
index c9b01f04b9..0000000000
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11;
-
-import org.apache.coyote.ActionCode;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
-import org.apache.tomcat.util.net.NioChannel;
-
-
-/**
- * Processes HTTP requests.
- *
- * @author Remy Maucherat
- */
-public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
-
-    private static final Log log = LogFactory.getLog(Http11NioProcessor.class);
-    @Override
-    protected Log getLog() {
-        return log;
-    }
-
-
-    // ----------------------------------------------------------- Constructors
-
-    public Http11NioProcessor(int maxHttpHeaderSize, AbstractEndpoint<NioChannel> endpoint,
-            int maxTrailerSize, int maxExtensionSize, int maxSwallowSize) {
-
-        super(maxHttpHeaderSize, endpoint, maxTrailerSize, maxExtensionSize, maxSwallowSize);
-    }
-
-
-    // ----------------------------------------------------- ActionHook Methods
-
-    /**
-     * Send an action to the connector.
-     *
-     * @param actionCode Type of the action
-     * @param param Action parameter
-     */
-    @Override
-    public void actionInternal(ActionCode actionCode, Object param) {
-        // Unused
-    }
-}

==================================================
Http11Processor.java
index aa248fef58..7811da7e9d 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -127,7 +127,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
     // --------------------  Connection handler --------------------
 
     protected static class Http11ConnectionHandler
-            extends AbstractConnectionHandler<NioChannel,Http11NioProcessor>
+            extends AbstractConnectionHandler<NioChannel,Http11Processor<NioChannel>>
             implements Handler {
 
         protected Http11NioProtocol proto;
@@ -247,8 +247,8 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         }
 
         @Override
-        public Http11NioProcessor createProcessor() {
-            Http11NioProcessor processor = new Http11NioProcessor(
+        public Http11Processor<NioChannel> createProcessor() {
+            Http11Processor<NioChannel> processor = new Http11Processor<>(
                     proto.getMaxHttpHeaderSize(), proto.getEndpoint(),
                     proto.getMaxTrailerSize(), proto.getMaxExtensionSize(),
                     proto.getMaxSwallowSize());

==================================================
