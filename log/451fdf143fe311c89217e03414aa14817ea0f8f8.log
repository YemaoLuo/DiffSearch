451fdf143fe311c89217e03414aa14817ea0f8f8
==================================================
Use new utility method to obtain StringManager and remove the constant that is now unused.
==================================================
Mark Emlyn
==================================================
Mon Nov 10 15:47:25 2014 +0000
==================================================
AuthenticatorBase.java
Use new utility method to obtain StringManager and remove the constant that is now unused.
Move the statics to the start of the class.
A small amount of whitespace clean-up

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637893 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index a3e4904a23..a309bf1ace 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -70,19 +70,20 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @author Craig R. McClanahan
  */
-public abstract class AuthenticatorBase extends ValveBase
-        implements Authenticator {
+public abstract class AuthenticatorBase extends ValveBase implements Authenticator {
 
     private static final Log log = LogFactory.getLog(AuthenticatorBase.class);
 
+    /**
+     * "Expires" header always set to Date(1), so generate once only
+     */
+    private static final String DATE_ONE = (new SimpleDateFormat(
+            FastHttpDateFormat.RFC1123_DATE, Locale.US)).format(new Date(1));
 
-    //------------------------------------------------------ Constructor
-    public AuthenticatorBase() {
-        super(true);
-    }
-
-    // ----------------------------------------------------- Instance Variables
-
+    /**
+     * The string manager for this package.
+     */
+    protected static final StringManager sm = StringManager.getManager(AuthenticatorBase.class);
 
     /**
      * Authentication header
@@ -94,6 +95,37 @@ public abstract class AuthenticatorBase extends ValveBase
      */
     protected static final String REALM_NAME = "Authentication required";
 
+
+    protected static String getRealmName(Context context) {
+        if (context == null) {
+            // Very unlikely
+            return REALM_NAME;
+        }
+
+        LoginConfig config = context.getLoginConfig();
+        if (config == null) {
+            return REALM_NAME;
+        }
+
+        String result = config.getRealmName();
+        if (result == null) {
+            return REALM_NAME;
+        }
+
+        return result;
+    }
+
+
+
+    //------------------------------------------------------ Constructor
+
+    public AuthenticatorBase() {
+        super(true);
+    }
+
+
+    // ----------------------------------------------------- Instance Variables
+
     /**
      * Should a session always be used once a user is authenticated? This may
      * offer some performance benefits since the session can then be used to
@@ -170,13 +202,6 @@ public abstract class AuthenticatorBase extends ValveBase
 
     protected SessionIdGeneratorBase sessionIdGenerator = null;
 
-    /**
-     * The string manager for this package.
-     */
-    protected static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-
     /**
      * The SingleSignOn implementation in our request processing chain,
      * if there is one.
@@ -184,37 +209,8 @@ public abstract class AuthenticatorBase extends ValveBase
     protected SingleSignOn sso = null;
 
 
-    /**
-     * "Expires" header always set to Date(1), so generate once only
-     */
-    private static final String DATE_ONE =
-        (new SimpleDateFormat(FastHttpDateFormat.RFC1123_DATE,
-                              Locale.US)).format(new Date(1));
-
-
-    protected static String getRealmName(Context context) {
-        if (context == null) {
-            // Very unlikely
-            return REALM_NAME;
-        }
-
-        LoginConfig config = context.getLoginConfig();
-        if (config == null) {
-            return REALM_NAME;
-        }
-
-        String result = config.getRealmName();
-        if (result == null) {
-            return REALM_NAME;
-        }
-
-        return result;
-    }
-
-
     // ------------------------------------------------------------- Properties
 
-
     public boolean getAlwaysUseSession() {
         return alwaysUseSession;
     }
@@ -229,9 +225,7 @@ public abstract class AuthenticatorBase extends ValveBase
      * Return the cache authenticated Principals flag.
      */
     public boolean getCache() {
-
-        return (this.cache);
-
+        return this.cache;
     }
 
 
@@ -241,9 +235,7 @@ public abstract class AuthenticatorBase extends ValveBase
      * @param cache The new cache flag
      */
     public void setCache(boolean cache) {
-
         this.cache = cache;
-
     }
 
 
@@ -252,9 +244,7 @@ public abstract class AuthenticatorBase extends ValveBase
      */
     @Override
     public Container getContainer() {
-
-        return (this.context);
-
+        return this.context;
     }
 
 
@@ -401,7 +391,6 @@ public abstract class AuthenticatorBase extends ValveBase
 
     // --------------------------------------------------------- Public Methods
 
-
     /**
      * Enforce the security restrictions in the web application deployment
      * descriptor of our associated Context.

==================================================
