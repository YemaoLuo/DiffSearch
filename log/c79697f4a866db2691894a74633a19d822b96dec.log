c79697f4a866db2691894a74633a19d822b96dec
==================================================
fix for Konstantin's review.
==================================================
Keiichi Fujino
==================================================
Mon May 28 07:11:43 2012 +0000
==================================================
Host.java
fix for Konstantin's review.
Add new calculation method of host's default config path to Host(StanderdHost).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1343153 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardHost.java
index b582aba05f..9d76919de0 100644
--- a/java/org/apache/catalina/Host.java
+++ b/java/org/apache/catalina/Host.java
@@ -85,6 +85,12 @@ public interface Host extends Container {
      */
     public void setXmlBase(String xmlBase);
 
+    /**
+     * Return a default configuration path of this Host. The file will be
+     * canonical if possible.
+     */
+    public File getConfigBaseFile();
+
     /**
      * Return the application root for this Host.  This can be an absolute
      * pathname, a relative pathname, or a URL.

==================================================
ContextConfig.java
index 97289d7269..db2967a372 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -30,6 +30,7 @@ import javax.management.ObjectName;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
 import org.apache.catalina.Host;
 import org.apache.catalina.JmxEnabled;
 import org.apache.catalina.Lifecycle;
@@ -91,6 +92,11 @@ public class StandardHost extends ContainerBase implements Host {
      */
     private String xmlBase = null;
 
+    /**
+     * host's default config path
+     */
+    private volatile File hostConfigBase = null;
+
     /**
      * The auto deploy flag for this Host.
      */
@@ -269,6 +275,40 @@ public class StandardHost extends ContainerBase implements Host {
     }
 
 
+    /**
+     * ({@inheritDoc}
+     */
+    @Override
+    public File getConfigBaseFile() {
+        if (hostConfigBase != null) {
+            return hostConfigBase;
+        }
+        String path = null;
+        if (getXmlBase()!=null) {
+            path = getXmlBase();
+        } else {
+            StringBuilder xmlDir = new StringBuilder("conf");
+            Container parent = getParent();
+            if (parent instanceof Engine) {
+                xmlDir.append('/');
+                xmlDir.append(parent.getName());
+            }
+            xmlDir.append('/');
+            xmlDir.append(getName());
+            path = xmlDir.toString();
+        }
+        File file = new File(path);
+        if (!file.isAbsolute())
+            file = new File(getCatalinaBase(), path);
+        try {
+            file = file.getCanonicalFile();
+        } catch (IOException e) {// ignore
+        }
+        this.hostConfigBase = file;
+        return file;
+    }
+
+
     /**
      * Returns true if the Host will attempt to create directories for appBase and xmlBase
      * unless they already exist.

==================================================
HostConfig.java
index 068be3aaa6..7b619d10ee 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1106,38 +1106,10 @@ public class ContextConfig implements LifecycleListener {
 
     protected File getHostConfigBase() {
         File file = null;
-        Container container = context;
-        Host host = null;
-        Engine engine = null;
-        while (container != null) {
-            if (container instanceof Host) {
-                host = (Host)container;
-            }
-            if (container instanceof Engine) {
-                engine = (Engine)container;
-            }
-            container = container.getParent();
-        }
-        if (host != null && host.getXmlBase()!=null) {
-            String xmlBase = host.getXmlBase();
-            file = new File(xmlBase);
-            if (!file.isAbsolute())
-                file = new File(context.getCatalinaBase(), xmlBase);
-        } else {
-            StringBuilder result = new StringBuilder();
-            if (engine != null) {
-                result.append(engine.getName()).append('/');
-            }
-            if (host != null) {
-                result.append(host.getName()).append('/');
-            }
-            file = new File (getConfigBase(), result.toString());
-        }
-        try {
-            return file.getCanonicalFile();
-        } catch (IOException e) {
-            return file;
+        if (context.getParent() instanceof Host) {
+            file = ((Host)context.getParent()).getConfigBaseFile();
         }
+        return file;
     }
 
     /**
@@ -1653,15 +1625,11 @@ public class ContextConfig implements LifecycleListener {
      * it.
      */
     protected InputSource getHostWebXmlSource() {
-        String basePath = null;
-        try {
-            basePath = getHostConfigBase().getCanonicalPath();
-        } catch (IOException e) {
-            log.error(sm.getString("contextConfig.baseError"), e);
+        File hostConfigBase = getHostConfigBase();
+        if (hostConfigBase == null)
             return null;
-        }
 
-        return getWebXmlSource(Constants.HostWebXml, basePath);
+        return getWebXmlSource(Constants.HostWebXml, hostConfigBase.getPath());
     }
 
     /**

==================================================
