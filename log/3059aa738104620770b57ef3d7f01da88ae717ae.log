3059aa738104620770b57ef3d7f01da88ae717ae
==================================================
Add @Override annotation
==================================================
Konstantin Kolinko
==================================================
Mon Jul 4 13:54:52 2011 +0000
==================================================
ReplicationTransmitter.java
Add @Override annotation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1142666 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioReceiver.java
index 26e3a0dcfe..8654f3f94f 100644
--- a/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
+++ b/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
@@ -73,6 +73,7 @@ public class ReplicationTransmitter implements ChannelSender {
      * Send data to one member
      * @see org.apache.catalina.tribes.ChannelSender#sendMessage(org.apache.catalina.tribes.ChannelMessage, org.apache.catalina.tribes.Member[])
      */
+    @Override
     public void sendMessage(ChannelMessage message, Member[] destination) throws ChannelException {
         MultiPointSender sender = getTransport();
         sender.sendMessage(destination,message);
@@ -84,6 +85,7 @@ public class ReplicationTransmitter implements ChannelSender {
      * 
      * @see org.apache.catalina.tribes.ChannelSender#start()
      */
+    @Override
     public void start() throws java.io.IOException {
         getTransport().connect();
     }
@@ -93,6 +95,7 @@ public class ReplicationTransmitter implements ChannelSender {
      * 
      * @see org.apache.catalina.tribes.ChannelSender#stop()
      */
+    @Override
     public synchronized void stop() {
         getTransport().disconnect();
     }
@@ -113,6 +116,7 @@ public class ReplicationTransmitter implements ChannelSender {
      * 
      * @see org.apache.catalina.tribes.ChannelSender#add(org.apache.catalina.tribes.Member)
      */
+    @Override
     public synchronized void add(Member member) {
         getTransport().add(member);
     }
@@ -122,6 +126,7 @@ public class ReplicationTransmitter implements ChannelSender {
      * 
      * @see org.apache.catalina.tribes.ChannelSender#remove(org.apache.catalina.tribes.Member)
      */
+    @Override
     public synchronized void remove(Member member) {
         getTransport().remove(member);
     }

==================================================
NioReplicationTask.java
index 14aa37ef6f..5f82669794 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -115,6 +115,7 @@ public class NioReceiver extends ReceiverBase implements Runnable {
         }
     }
 
+    @Override
     public AbstractRxTask createRxTask() {
         NioReplicationTask thread = new NioReplicationTask(this,this);
         thread.setUseBufferPool(this.getUseBufferPool());
@@ -402,6 +403,7 @@ public class NioReceiver extends ReceiverBase implements Runnable {
     /**
      * Start thread and listen
      */
+    @Override
     public void run() {
         try {
             listen();

==================================================
PooledParallelSender.java
index 5575b7b650..df8437f0cb 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -67,6 +67,7 @@ public class NioReplicationTask extends AbstractRxTask {
     }
 
     // loop forever waiting for work to do
+    @Override
     public synchronized void run() {
         if ( buffer == null ) {
             int size = getRxBufSize();
@@ -246,6 +247,7 @@ public class NioReplicationTask extends AbstractRxTask {
         reader.finish();
         //register our OP_READ interest
         Runnable r = new Runnable() {
+            @Override
             public void run() {
                 try {
                     if (key.isValid()) {
@@ -280,6 +282,7 @@ public class NioReplicationTask extends AbstractRxTask {
             reader.finish();
         }
         Runnable cx = new Runnable() {
+            @Override
             public void run() {
                 if ( log.isTraceEnabled() )
                     log.trace("Cancelling key:"+key);

==================================================
