72db186aff0fefdd235e71d9fc30a02281928a87
==================================================
Remove realm name and authentication type from security messages, this information is set up per module now
==================================================
Mark Thomas
==================================================
Fri Jun 26 07:46:48 2015 +0000
==================================================
JaspicAuthenticator.java
Remove realm name and authentication type from security messages, this information is set up per module now
Patch by fjodorver

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687700 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MessageInfoImpl.java
index 07bb2560d7..f342951c33 100644
--- a/java/org/apache/catalina/authenticator/jaspic/JaspicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/jaspic/JaspicAuthenticator.java
@@ -68,8 +68,7 @@ public class JaspicAuthenticator extends AuthenticatorBase {
             return true;
         }
 
-        MessageInfoImpl messageInfo = new MessageInfoImpl(request, response, true, getAuthMethod());
-        messageInfo.setRealmName(getRealmName(context));
+        MessageInfoImpl messageInfo = new MessageInfoImpl(request, response, true);
 
         AuthConfigFactory factory = AuthConfigFactory.getFactory();
         String appContext = getAppContextId(request);

==================================================
TomcatAuthConfig.java
index fccd891892..7c01dde85f 100644
--- a/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java
@@ -27,8 +27,6 @@ import org.apache.catalina.connector.Request;
 
 public class MessageInfoImpl implements MessageInfo {
     public static final String IS_MANDATORY = "javax.security.auth.message.MessagePolicy.isMandatory";
-    public static final String AUTH_METHOD = "javax.servlet.http.authType";
-    public static final String REALM_NAME = "javax.servlet.http.realmName";
 
     private final Map<String, Object> map = new HashMap<>();
     private HttpServletRequest request;
@@ -37,16 +35,10 @@ public class MessageInfoImpl implements MessageInfo {
     public MessageInfoImpl() {
     }
 
-    public MessageInfoImpl(Request request, HttpServletResponse response, boolean authMandatory,
-            String authMethod) {
+    public MessageInfoImpl(Request request, HttpServletResponse response, boolean authMandatory) {
         this.request = request;
         this.response = response;
         map.put(IS_MANDATORY, Boolean.toString(authMandatory));
-        map.put(AUTH_METHOD, authMethod);
-    }
-
-    public void setRealmName(String realmName) {
-        map.put(REALM_NAME, realmName);
     }
 
     @Override

==================================================
TomcatServerAuthContext.java
index a0ba5728ed..6c4bbad0ea 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfig.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfig.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.authenticator.jaspic.provider;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import javax.security.auth.Subject;
@@ -88,12 +89,20 @@ public class TomcatAuthConfig implements ServerAuthConfig {
     public synchronized ServerAuthContext getAuthContext(String authContextID,
             Subject serviceSubject, Map properties) throws AuthException {
         if (this.tomcatServerAuthContext == null) {
-            this.tomcatServerAuthContext = new TomcatServerAuthContext(handler, getModule());
+            this.tomcatServerAuthContext = new TomcatServerAuthContext(handler, getModule(),
+                    getOptions());
         }
         return tomcatServerAuthContext;
     }
 
 
+    private Map<String, String> getOptions() {
+        Map<String, String> options = new HashMap<>();
+        options.put(TomcatAuthModule.REALM_NAME, getRealmName());
+        return options;
+    }
+
+
     private TomcatAuthModule getModule() throws AuthException {
         String authMethod = getAuthMethod();
         switch (authMethod) {
@@ -111,6 +120,11 @@ public class TomcatAuthConfig implements ServerAuthConfig {
     }
 
 
+    private String getRealmName() {
+        return loginConfig.getRealmName();
+    }
+
+
     /**
      * Temporary workaround to get authentication method
      * @return

==================================================
BasicAuthModule.java
index 7d4b1eba05..4b269c9744 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/TomcatServerAuthContext.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatServerAuthContext.java
@@ -16,7 +16,7 @@
  */
 package org.apache.catalina.authenticator.jaspic.provider;
 
-import java.util.Collections;
+import java.util.Map;
 
 import javax.security.auth.Subject;
 import javax.security.auth.callback.CallbackHandler;
@@ -33,15 +33,16 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class TomcatServerAuthContext implements ServerAuthContext {
 
-    protected static final StringManager sm = StringManager.getManager(TomcatServerAuthContext.class);
+    protected static final StringManager sm = StringManager
+            .getManager(TomcatServerAuthContext.class);
 
     private ServerAuthModule module;
 
 
-    public TomcatServerAuthContext(CallbackHandler handler, ServerAuthModule module)
-            throws AuthException {
+    public TomcatServerAuthContext(CallbackHandler handler, ServerAuthModule module,
+            Map<String, String> options) throws AuthException {
         this.module = module;
-        this.module.initialize(null, null, handler, Collections.emptyMap());
+        this.module.initialize(null, null, handler, options);
     }
 
 

==================================================
DigestAuthModule.java
index 6faacc3e3f..0653ce20e4 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/BasicAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/BasicAuthModule.java
@@ -45,14 +45,10 @@ public class BasicAuthModule extends TomcatAuthModule {
     private Class<?>[] supportedMessageTypes = new Class[] { HttpServletRequest.class,
             HttpServletResponse.class };
 
-    private CallbackHandler handler;
-
-
     @SuppressWarnings("rawtypes")
     @Override
-    public void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
+    public void initializeModule(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
             CallbackHandler handler, Map options) throws AuthException {
-        this.handler = handler;
     }
 
 
@@ -67,7 +63,7 @@ public class BasicAuthModule extends TomcatAuthModule {
         HttpServletResponse response = (HttpServletResponse) messageInfo.getResponseMessage();
         String authorization = request.getHeader(AUTHORIZATION_HEADER);
 
-        String realmName = getRealmName(messageInfo);
+        String realmName = getRealmName();
 
         if (authorization == null) {
             return sendUnauthorizedError(response, realmName);

==================================================
TomcatAuthModule.java
index cf6fad66bd..7fbb5c402a 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/DigestAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/DigestAuthModule.java
@@ -180,9 +180,9 @@ public class DigestAuthModule extends TomcatAuthModule {
     }
 
 
-    @SuppressWarnings("rawtypes")
     @Override
-    public void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
+    @SuppressWarnings("rawtypes")
+    public void initializeModule(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
             CallbackHandler handler, Map options) throws AuthException {
         this.handler = handler;
         startInternal();
@@ -238,12 +238,12 @@ public class DigestAuthModule extends TomcatAuthModule {
         String authorization = request.getHeader(AUTHORIZATION_HEADER);
 
         DigestInfo digestInfo = new DigestInfo(getOpaque(), getNonceValidity(), getKey(), nonces,
-                isValidateUri());
+                isValidateUri(), getRealmName());
         if (authorization == null) {
 
             String nonce = generateNonce(request);
 
-            String authenticateHeader = getAuthenticateHeader(nonce, false, messageInfo);
+            String authenticateHeader = getAuthenticateHeader(nonce, false);
             return sendUnauthorizedError(response, authenticateHeader);
         }
 
@@ -251,7 +251,7 @@ public class DigestAuthModule extends TomcatAuthModule {
             return AuthStatus.SEND_FAILURE;
         }
 
-        if (digestInfo.validate(request, messageInfo)) {
+        if (digestInfo.validate(request)) {
             // TODO discuss a better way to get user roles
             principal = (GenericPrincipal) digestInfo.authenticate(realm);
         }
@@ -259,7 +259,7 @@ public class DigestAuthModule extends TomcatAuthModule {
         if (principal == null || digestInfo.isNonceStale()) {
             String nonce = generateNonce(request);
             boolean isNoncaneStale = principal != null && digestInfo.isNonceStale();
-            String authenticateHeader = getAuthenticateHeader(nonce, isNoncaneStale, messageInfo);
+            String authenticateHeader = getAuthenticateHeader(nonce, isNoncaneStale);
             return sendUnauthorizedError(response, authenticateHeader);
         }
 
@@ -389,10 +389,9 @@ public class DigestAuthModule extends TomcatAuthModule {
      * @param nonce nonce token
      * @return
      */
-    protected String getAuthenticateHeader(String nonce, boolean isNonceStale,
-            MessageInfo messageInfo) {
+    protected String getAuthenticateHeader(String nonce, boolean isNonceStale) {
 
-        String realmName = getRealmName(messageInfo);
+        String realmName = getRealmName();
 
         String template = "Digest realm=\"{0}\", qop=\"{1}\", nonce=\"{2}\", opaque=\"{3}\"";
         String authenticateHeader = MessageFormat.format(template, realmName, QOP, nonce,
@@ -425,13 +424,16 @@ public class DigestAuthModule extends TomcatAuthModule {
 
         private boolean nonceStale = false;
 
+        private String contextRealmName;
+
         public DigestInfo(String opaque, long nonceValidity, String key,
-                Map<String, NonceInfo> nonces, boolean validateUri) {
+                Map<String, NonceInfo> nonces, boolean validateUri, String contextRealmName) {
             this.opaque = opaque;
             this.nonceValidity = nonceValidity;
             this.key = key;
             this.nonces = nonces;
             this.validateUri = validateUri;
+            this.contextRealmName = contextRealmName;
         }
 
         public String getUsername() {
@@ -470,7 +472,7 @@ public class DigestAuthModule extends TomcatAuthModule {
             return true;
         }
 
-        public boolean validate(HttpServletRequest request, MessageInfo messageInfo) {
+        public boolean validate(HttpServletRequest request) {
             if ((userName == null) || (realmName == null) || (nonce == null) || (uri == null)
                     || (response == null)) {
                 return false;
@@ -507,8 +509,7 @@ public class DigestAuthModule extends TomcatAuthModule {
             }
 
             // Validate the Realm name
-            String lcRealm = getRealmName(messageInfo);
-            if (!lcRealm.equals(realmName)) {
+            if (!contextRealmName.equals(realmName)) {
                 return false;
             }
 

==================================================
