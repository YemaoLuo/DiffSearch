692011dd901485d8d897ca52f2ae6ad38baedd9a
==================================================
Refactor transformations to enable the handing of overflow (the previous code ignored this possibility).
==================================================
Mark Emlyn
==================================================
Tue Jun 24 10:40:56 2014 +0000
==================================================
PerMessageDeflate.java
Refactor transformations to enable the handing of overflow (the previous code ignored this possibility).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1605054 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Transformation.java
index ba6b09981b..2fa9b42747 100644
--- a/java/org/apache/tomcat/websocket/PerMessageDeflate.java
+++ b/java/org/apache/tomcat/websocket/PerMessageDeflate.java
@@ -89,41 +89,51 @@ public class PerMessageDeflate implements Transformation {
     }
 
     @Override
-    public boolean getMoreData(byte opCode, int rsv, ByteBuffer dest) throws IOException {
+    public TransformationResult getMoreData(byte opCode, int rsv, ByteBuffer dest) throws IOException {
 
-        // Control frames are never compressed
+        // Control frames are never compressed. Pass control frames and
+        // uncompressed frames straight through.
         if (Util.isControl(opCode) || (rsv & RSV_BITMASK) == 0) {
             return next.getMoreData(opCode, rsv, dest);
         }
 
-        boolean endOfInputFrame = false;
+        int written;
+        boolean usedEomBytes = false;
 
-        if (inflator.needsInput()) {
-            readBuffer.clear();
-            endOfInputFrame = next.getMoreData(opCode, (rsv ^ RSV_BITMASK), readBuffer);
-            inflator.setInput(readBuffer.array(), readBuffer.arrayOffset(), readBuffer.position());
-        }
-
-        int written = 0;
-        try {
-            written = inflator.inflate(dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());
-            if (endOfInputFrame && !inflator.finished()) {
-                inflator.setInput(EOM_BYTES);
-                inflator.inflate(dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());
+        while (dest.remaining() > 0) {
+            // Space available in destination. Try and fill it.
+            try {
+                written = inflator.inflate(
+                        dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());
+            } catch (DataFormatException e) {
+                throw new IOException(sm.getString("perMessageDeflate.deflateFailed"), e);
+            }
+            dest.position(dest.position() + written);
+
+            if (inflator.needsInput() && !usedEomBytes ) {
+                if (dest.hasRemaining()) {
+                    readBuffer.clear();
+                    TransformationResult nextResult =
+                            next.getMoreData(opCode, (rsv ^ RSV_BITMASK), readBuffer);
+                    inflator.setInput(
+                            readBuffer.array(), readBuffer.arrayOffset(), readBuffer.position());
+                    if (TransformationResult.UNDERFLOW.equals(nextResult)) {
+                        return nextResult;
+                    } else if (TransformationResult.END_OF_FRAME.equals(nextResult) &&
+                            readBuffer.position() == 0) {
+                        inflator.setInput(EOM_BYTES);
+                        usedEomBytes = true;
+                    }
+                }
+            } else if (written == 0) {
+                return TransformationResult.END_OF_FRAME;
             }
-        } catch (DataFormatException e) {
-            throw new IOException(sm.getString("perMessageDeflate.deflateFailed"), e);
-        }
-        dest.position(dest.position() + written);
-
-
-        if (endOfInputFrame && !clientContextTakeover) {
-            inflator.reset();
         }
 
-        return endOfInputFrame;
+        return TransformationResult.OVERFLOW;
     }
 
+
     @Override
     public boolean validateRsv(int rsv, byte opCode) {
         if (Util.isControl(opCode)) {

==================================================
TransformationResult.java
index 833787ef3b..5725ded1dd 100644
--- a/java/org/apache/tomcat/websocket/Transformation.java
+++ b/java/org/apache/tomcat/websocket/Transformation.java
@@ -36,11 +36,8 @@ public interface Transformation {
      * @param rsv       The reserved bits for the frame currently being
      *                      processed
      * @param dest      The buffer in which the data is to be written
-     *
-     * @return <code>true</code> if the data source has been fully read
-     *         otherwise <code>false</code>
      */
-    boolean getMoreData(byte opCode, int rsv, ByteBuffer dest) throws IOException;
+    TransformationResult getMoreData(byte opCode, int rsv, ByteBuffer dest) throws IOException;
 
     /**
      * Validates the RSV and opcode combination (assumed to have been extracted

==================================================
WsFrameBase.java
new file mode 100644
index 0000000000..c6ced0251c
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/TransformationResult.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+public enum TransformationResult {
+    /**
+     * The end of the available data was reached before the WebSocket frame was
+     * completely read.
+     */
+    UNDERFLOW,
+
+    /**
+     * The provided destination buffer was filled before all of the available
+     * data from the WebSocket frame could be processed.
+     */
+    OVERFLOW,
+
+    /**
+     * The end of the WebSocket frame was reached and all the data from that
+     * frame processed into the provided destination buffer.
+     */
+    END_OF_FRAME
+}

==================================================
