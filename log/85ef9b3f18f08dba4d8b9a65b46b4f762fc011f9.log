85ef9b3f18f08dba4d8b9a65b46b4f762fc011f9
==================================================
Rename as per kkolinko's review
==================================================
Mark Emlyn
==================================================
Sun Sep 23 19:32:20 2012 +0000
==================================================
SynchronizedStack.java
Rename as per kkolinko's review

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1389128 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioBlockingSelector.java
similarity index 95%
rename from java/org/apache/tomcat/util/collections/ConcurrentStack.java
rename to java/org/apache/tomcat/util/collections/SynchronizedStack.java
index 9f011689b1..0d35c6925d 100644
--- a/java/org/apache/tomcat/util/collections/ConcurrentStack.java
+++ b/java/org/apache/tomcat/util/collections/SynchronizedStack.java
@@ -23,7 +23,7 @@ package org.apache.tomcat.util.collections;
  * The aim is to provide the bare minimum of required functionality as quickly
  * as possible with minimum garbage.
  */
-public class ConcurrentStack<T> {
+public class SynchronizedStack<T> {
 
     public static final int DEFAULT_SIZE = 128;
     private static final int DEFAULT_LIMIT = -1;
@@ -39,11 +39,11 @@ public class ConcurrentStack<T> {
     private Object[] stack;
 
 
-    public ConcurrentStack() {
+    public SynchronizedStack() {
         this(DEFAULT_SIZE, DEFAULT_LIMIT);
     }
 
-    public ConcurrentStack(int size, int limit) {
+    public SynchronizedStack(int size, int limit) {
         this.size = size;
         this.limit = limit;
         stack = new Object[size];

==================================================
NioEndpoint.java
index b317933c32..e5495d9450 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -34,7 +34,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
-import org.apache.tomcat.util.collections.ConcurrentStack;
+import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.net.NioEndpoint.KeyAttachment;
 
 public class NioBlockingSelector {
@@ -43,8 +43,8 @@ public class NioBlockingSelector {
 
     private static int threadCounter = 0;
 
-    private ConcurrentStack<KeyReference> keyReferenceStack =
-            new ConcurrentStack<>();
+    private SynchronizedStack<KeyReference> keyReferenceStack =
+            new SynchronizedStack<>();
 
     protected Selector sharedSelector;
 

==================================================
TestSynchronizedStack.java
index 457a74f6ec..67cc3de9c3 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -51,7 +51,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
-import org.apache.tomcat.util.collections.ConcurrentStack;
+import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;
 import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
@@ -127,29 +127,29 @@ public class NioEndpoint extends AbstractEndpoint {
     /**
      * Cache for SocketProcessor objects
      */
-    protected final ConcurrentStack<SocketProcessor> processorCache =
-            new ConcurrentStack<>(ConcurrentStack.DEFAULT_SIZE,
+    protected final SynchronizedStack<SocketProcessor> processorCache =
+            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
                     socketProperties.getProcessorCache());
 
     /**
      * Cache for key attachment objects
      */
-    protected final ConcurrentStack<KeyAttachment> keyCache =
-            new ConcurrentStack<>(ConcurrentStack.DEFAULT_SIZE,
+    protected final SynchronizedStack<KeyAttachment> keyCache =
+            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
                     socketProperties.getKeyCache());
 
     /**
      * Cache for poller events
      */
-    protected final ConcurrentStack<PollerEvent> eventCache =
-            new ConcurrentStack<>(ConcurrentStack.DEFAULT_SIZE,
+    protected final SynchronizedStack<PollerEvent> eventCache =
+            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
                     socketProperties.getEventCache());
 
     /**
      * Bytebuffer cache, each channel holds a set of buffers (two, except for SSL holds four)
      */
-    protected final ConcurrentStack<NioChannel> nioChannels =
-            new ConcurrentStack<>(ConcurrentStack.DEFAULT_SIZE,
+    protected final SynchronizedStack<NioChannel> nioChannels =
+            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
                     socketProperties.getBufferPoolSize());
 
 

==================================================
TesterPerformanceSynchronizedStack.java
similarity index 88%
rename from test/org/apache/tomcat/util/collections/TestConcurrentStack.java
rename to test/org/apache/tomcat/util/collections/TestSynchronizedStack.java
index 880683b092..f112bcebd0 100644
--- a/test/org/apache/tomcat/util/collections/TestConcurrentStack.java
+++ b/test/org/apache/tomcat/util/collections/TestSynchronizedStack.java
@@ -19,17 +19,17 @@ package org.apache.tomcat.util.collections;
 import org.junit.Assert;
 import org.junit.Test;
 
-public class TestConcurrentStack {
+public class TestSynchronizedStack {
 
     @Test
     public void testPopEmpty() {
-        ConcurrentStack<Object> stack = new ConcurrentStack<>();
+        SynchronizedStack<Object> stack = new SynchronizedStack<>();
         Assert.assertNull(stack.pop());
     }
 
     @Test
     public void testPushPopOrder() {
-        ConcurrentStack<Object> stack = new ConcurrentStack<>();
+        SynchronizedStack<Object> stack = new SynchronizedStack<>();
 
         Object o1 = new Object();
         Object o2 = new Object();
@@ -51,7 +51,7 @@ public class TestConcurrentStack {
 
     @Test
     public void testExpandPushPopOrder() {
-        ConcurrentStack<Object> stack = new ConcurrentStack<>();
+        SynchronizedStack<Object> stack = new SynchronizedStack<>();
 
         Object o1 = new Object();
         Object o2 = new Object();
@@ -77,7 +77,7 @@ public class TestConcurrentStack {
 
     @Test
     public void testLimit() {
-        ConcurrentStack<Object> stack = new ConcurrentStack<>(2,2);
+        SynchronizedStack<Object> stack = new SynchronizedStack<>(2,2);
 
         Object o1 = new Object();
         Object o2 = new Object();
@@ -98,7 +98,7 @@ public class TestConcurrentStack {
 
     @Test
     public void testLimitExpand() {
-        ConcurrentStack<Object> stack = new ConcurrentStack<>(1,3);
+        SynchronizedStack<Object> stack = new SynchronizedStack<>(1,3);
 
         Object o1 = new Object();
         Object o2 = new Object();

==================================================
