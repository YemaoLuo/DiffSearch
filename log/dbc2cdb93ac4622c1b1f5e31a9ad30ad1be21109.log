dbc2cdb93ac4622c1b1f5e31a9ad30ad1be21109
==================================================
Adds support for Virtual resources to the FileResourceSet (it still needs to be added for the DirResourceSet). This will allow an application to full traverse the resource hierarchy including any non-main resources mounted under a directory structure that does not exist in the main resources.
==================================================
Mark Emlyn
==================================================
Tue Jan 8 16:18:22 2013 +0000
==================================================
WebResource.java
Adds support for Virtual resources to the FileResourceSet (it still needs to be added for the DirResourceSet). This will allow an application to full traverse the resource hierarchy including any non-main resources mounted under a directory structure that does not exist in the main resources.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430353 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CachedResource.java
index 0630e4021f..0b07f50b49 100644
--- a/java/org/apache/catalina/WebResource.java
+++ b/java/org/apache/catalina/WebResource.java
@@ -40,6 +40,15 @@ public interface WebResource {
      */
     boolean exists();
 
+    /**
+     * Indicates if this resource is required for applications to correctly scan
+     * the file structure but that does not exist in either the main or any
+     * additional {@link WebResourceSet}. For example, if an external
+     * directory is mapped to /WEB-INF/lib in an otherwise empty web
+     * application, /WEB-INF will be represented as a virtual resource.
+     */
+    boolean isVirtual();
+
     /**
      * See {@link java.io.File#isDirectory()}.
      */

==================================================
EmptyResource.java
index c1c8ab4fc7..8918258668 100644
--- a/java/org/apache/catalina/webresources/CachedResource.java
+++ b/java/org/apache/catalina/webresources/CachedResource.java
@@ -43,6 +43,7 @@ public class CachedResource implements WebResource {
     private volatile Boolean cachedIsFile = null;
     private volatile Boolean cachedIsDirectory = null;
     private volatile Boolean cachedExists = null;
+    private volatile Boolean cachedIsVirtual = null;
     private volatile Long cachedContentLength = null;
 
 
@@ -117,6 +118,16 @@ public class CachedResource implements WebResource {
         return cachedExists.booleanValue();
     }
 
+    @Override
+    public boolean isVirtual() {
+        Boolean cachedIsVirtual = this.cachedIsVirtual;
+        if (cachedIsVirtual == null) {
+            cachedIsVirtual = Boolean.valueOf(webResource.isVirtual());
+            this.cachedIsVirtual = cachedIsVirtual;
+        }
+        return cachedIsVirtual.booleanValue();
+    }
+
     @Override
     public boolean isDirectory() {
         Boolean cachedIsDirectory = this.cachedIsDirectory;

==================================================
FileResource.java
index 072c2b3f07..f5f1afd9d7 100644
--- a/java/org/apache/catalina/webresources/EmptyResource.java
+++ b/java/org/apache/catalina/webresources/EmptyResource.java
@@ -47,6 +47,11 @@ public class EmptyResource implements WebResource {
         return false;
     }
 
+    @Override
+    public boolean isVirtual() {
+        return false;
+    }
+
     @Override
     public boolean isDirectory() {
         return false;

==================================================
FileResourceSet.java
index 6de852ad4a..3c8ad09eee 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -74,6 +74,11 @@ public class FileResource extends AbstractResource {
         return resource.exists();
     }
 
+    @Override
+    public boolean isVirtual() {
+        return false;
+    }
+
     @Override
     public boolean isDirectory() {
         return resource.isDirectory();

==================================================
JarResource.java
index 6156801161..cb17e3ef5e 100644
--- a/java/org/apache/catalina/webresources/FileResourceSet.java
+++ b/java/org/apache/catalina/webresources/FileResourceSet.java
@@ -85,9 +85,20 @@ public class FileResourceSet extends AbstractFileResourceSet {
                 return new EmptyResource(root, path);
             }
             return new FileResource(root, f, path);
-        } else {
-            return new EmptyResource(root, path);
         }
+
+        if (path.charAt(path.length() - 1) != '/') {
+            path = path + '/';
+        }
+
+        if (webAppMount.startsWith(path)) {
+            String name = path.substring(0, path.length() - 1);
+            name = name.substring(name.lastIndexOf('/') + 1);
+            if (name.length() > 0) {
+                return new VirtualResource(root, path, name);
+            }
+        }
+        return new EmptyResource(root, path);
     }
 
     @Override
@@ -97,14 +108,21 @@ public class FileResourceSet extends AbstractFileResourceSet {
         if (path.charAt(path.length() - 1) != '/') {
             path = path + '/';
         }
-        String webappMount = getWebAppMount();
+        String webAppMount = getWebAppMount();
 
-        if (webappMount.startsWith(path)) {
-            webappMount = webappMount.substring(path.length());
-            if (webappMount.equals(fileBase.getName())) {
+        if (webAppMount.startsWith(path)) {
+            webAppMount = webAppMount.substring(path.length());
+            if (webAppMount.equals(fileBase.getName())) {
                 return new String[] {fileBase.getName()};
+            } else {
+                // Virtual directory
+                int i = webAppMount.indexOf('/');
+                if (i > 0) {
+                    return new String[] {webAppMount.substring(0, i)};
+                }
             }
         }
+
         return EMPTY_STRING_ARRAY;
     }
 
@@ -117,12 +135,18 @@ public class FileResourceSet extends AbstractFileResourceSet {
         if (path.charAt(path.length() - 1) != '/') {
             path = path + '/';
         }
-        String webappMount = getWebAppMount();
+        String webAppMount = getWebAppMount();
 
-        if (webappMount.startsWith(path)) {
-            webappMount = webappMount.substring(path.length());
-            if (webappMount.equals(fileBase.getName())) {
+        if (webAppMount.startsWith(path)) {
+            webAppMount = webAppMount.substring(path.length());
+            if (webAppMount.equals(fileBase.getName())) {
                 result.add(path + fileBase.getName());
+            } else {
+                // Virtual directory
+                int i = webAppMount.indexOf('/');
+                if (i > 0) {
+                    result.add(path + webAppMount.substring(0, i + 1));
+                }
             }
         }
 

==================================================
JarResourceRoot.java
index 070390f4f6..2edb881fcd 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -74,6 +74,11 @@ public class JarResource extends AbstractResource {
         return true;
     }
 
+    @Override
+    public boolean isVirtual() {
+        return false;
+    }
+
     @Override
     public boolean isDirectory() {
         return resource.isDirectory();

==================================================
StandardRoot.java
index 10d6cb04d9..667f6c1fde 100644
--- a/java/org/apache/catalina/webresources/JarResourceRoot.java
+++ b/java/org/apache/catalina/webresources/JarResourceRoot.java
@@ -49,6 +49,11 @@ public class JarResourceRoot extends AbstractResource {
         return true;
     }
 
+    @Override
+    public boolean isVirtual() {
+        return false;
+    }
+
     @Override
     public boolean isDirectory() {
         return true;

==================================================
VirtualResource.java
index 1233a55e4c..40fbb50b56 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -170,15 +170,24 @@ public class StandardRoot extends LifecycleMBeanBase
         checkState();
 
         WebResource result = null;
+        WebResource virtual = null;
         for (ArrayList<WebResourceSet> list : allResources) {
             for (WebResourceSet webResourceSet : list) {
                 result = webResourceSet.getResource(path);
                 if (result.exists()) {
                     return result;
                 }
+                if (virtual == null && result.isVirtual()) {
+                    virtual = result;
+                }
             }
         }
 
+        // Use the first virtual result if no real result was found
+        if (virtual != null) {
+            return virtual;
+        }
+
         // Default is empty resource in main resources
         return new EmptyResource(this, path);
     }
@@ -378,6 +387,15 @@ public class StandardRoot extends LifecycleMBeanBase
         return f.getAbsolutePath();
     }
 
+    /**
+     * For unit testing
+     */
+    protected void setMainResources(WebResourceSet main) {
+        this.main = main;
+        mainResources.clear();
+        mainResources.add(main);
+    }
+
     @Override
     public void backgroundProcess() {
         cache.backgroundProcess();

==================================================
AbstractTestResourceSet.java
new file mode 100644
index 0000000000..3f30b5fc26
--- /dev/null
+++ b/java/org/apache/catalina/webresources/VirtualResource.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import org.apache.catalina.WebResourceRoot;
+
+public class VirtualResource extends EmptyResource {
+
+    private final String name;
+
+    public VirtualResource(WebResourceRoot root, String webAppPath,
+            String name) {
+        super(root, webAppPath);
+        this.name = name;
+    }
+
+    @Override
+    public boolean isVirtual() {
+        return true;
+    }
+
+    @Override
+    public boolean isDirectory() {
+        return true;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+}

==================================================
TestDirResourceSet.java
index 0cf2ea3e7b..d49abb9de0 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
@@ -225,12 +225,32 @@ public abstract class AbstractTestResourceSet {
 
     @Test
     public final void testMkdirDirA() {
-        Assert.assertFalse(resourceRoot.mkdir(getMount() + "/d1"));
+        WebResource d1 = resourceRoot.getResource(getMount() + "/d1");
+        if (d1.exists()) {
+            Assert.assertFalse(resourceRoot.mkdir(getMount() + "/d1"));
+        } else if (d1.isVirtual()) {
+            Assert.assertTrue(resourceRoot.mkdir(getMount() + "/d1"));
+            File file = new File(getBaseDir(), "d1");
+            Assert.assertTrue(file.isDirectory());
+            Assert.assertTrue(file.delete());
+        } else {
+            Assert.fail("Unhandled condition in unit test");
+        }
     }
 
     @Test
     public final void testMkdirDirB() {
-        Assert.assertFalse(resourceRoot.mkdir(getMount() + "/d1/"));
+        WebResource d1 = resourceRoot.getResource(getMount() + "/d1/");
+        if (d1.exists()) {
+            Assert.assertFalse(resourceRoot.mkdir(getMount() + "/d1/"));
+        } else if (d1.isVirtual()) {
+            Assert.assertTrue(resourceRoot.mkdir(getMount() + "/d1/"));
+            File file = new File(getBaseDir(), "d1");
+            Assert.assertTrue(file.isDirectory());
+            Assert.assertTrue(file.delete());
+        } else {
+            Assert.fail("Unhandled condition in unit test");
+        }
     }
 
     @Test
@@ -267,14 +287,36 @@ public abstract class AbstractTestResourceSet {
 
     @Test
     public final void testWriteDirA() {
+        WebResource d1 = resourceRoot.getResource(getMount() + "/d1");
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write(getMount() + "/d1", is, false));
+        if (d1.exists()) {
+            Assert.assertFalse(resourceRoot.write(getMount() + "/d1", is, false));
+        } else if (d1.isVirtual()) {
+            Assert.assertTrue(resourceRoot.write(
+                    getMount() + "/d1", is, false));
+            File file = new File(getBaseDir(), "d1");
+            Assert.assertTrue(file.exists());
+            Assert.assertTrue(file.delete());
+        } else {
+            Assert.fail("Unhandled condition in unit test");
+        }
     }
 
     @Test
     public final void testWriteDirB() {
+        WebResource d1 = resourceRoot.getResource(getMount() + "/d1/");
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write(getMount() + "/d1/", is, false));
+        if (d1.exists()) {
+            Assert.assertFalse(resourceRoot.write(getMount() + "/d1/", is, false));
+        } else if (d1.isVirtual()) {
+            Assert.assertTrue(resourceRoot.write(
+                    getMount() + "/d1/", is, false));
+            File file = new File(getBaseDir(), "d1");
+            Assert.assertTrue(file.exists());
+            Assert.assertTrue(file.delete());
+        } else {
+            Assert.fail("Unhandled condition in unit test");
+        }
     }
 
     @Test

==================================================
TestDirResourceSetInternal.java
index 3bbb62cfb0..8305001870 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSet.java
@@ -30,7 +30,7 @@ public class TestDirResourceSet extends AbstractTestResourceSet {
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
                         f.getAbsolutePath(), "/", "/");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
         return root;
     }
 

==================================================
TestDirResourceSetMount.java
index 93b657905b..0bce9035ac 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
@@ -30,7 +30,7 @@ public class TestDirResourceSetInternal extends TestDirResourceSet {
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
                         f.getAbsolutePath(), "/", "/webresources/dir1");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
         return root;
     }
 }

==================================================
TestFileResourceSet.java
index aca4eb9acf..2eea869865 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetMount.java
@@ -30,7 +30,7 @@ public class TestDirResourceSetMount extends AbstractTestResourceSetMount {
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
                         f.getAbsolutePath(), "/mount", "/");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
         return root;
     }
 

==================================================
TestFileResourceSetVirtual.java
index f7589870f0..41446c97d7 100644
--- a/test/org/apache/catalina/webresources/TestFileResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestFileResourceSet.java
@@ -30,7 +30,7 @@ public class TestFileResourceSet extends AbstractTestResourceSet {
         WebResourceSet webResourceSet =
                 new DirResourceSet(new TesterWebResourceRoot(),
                         f.getAbsolutePath(), "/", "/");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
 
         WebResourceSet f1 = new FileResourceSet(root,
                 "test/webresources/dir1/f1.txt", "/f1.txt", "/");

==================================================
TestJarResourceSet.java
new file mode 100644
index 0000000000..19553d8446
--- /dev/null
+++ b/test/org/apache/catalina/webresources/TestFileResourceSetVirtual.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+/**
+ * Mounts file resources in sub directories that do not exist in the main
+ * resoucres.
+ */
+public class TestFileResourceSetVirtual extends TestFileResourceSet {
+
+    @Override
+    public String getBaseDir() {
+        return "test/webresources/dir3";
+    }
+
+}

==================================================
TestJarResourceSetInternal.java
index a14da1bc6c..e3e9c432f2 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSet.java
@@ -29,7 +29,7 @@ public class TestJarResourceSet extends AbstractTestResourceSet {
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
                 new JarResourceSet(root, f.getAbsolutePath(), "/", "/");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
         return root;
     }
 

==================================================
TestJarResourceSetMount.java
index 792706e90b..24573beb3a 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSetInternal.java
@@ -29,7 +29,7 @@ public class TestJarResourceSetInternal extends AbstractTestResourceSet {
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
                 new JarResourceSet(root, f.getAbsolutePath(), "/", "/dir1");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
         return root;
     }
 

==================================================
TesterWebResourceRoot.java
index d7306542fb..35ee703cc5 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSetMount.java
@@ -29,7 +29,7 @@ public class TestJarResourceSetMount extends AbstractTestResourceSetMount {
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
                 new JarResourceSet(root, f.getAbsolutePath(), "/mount", "/");
-        root.setWebResourceSet(webResourceSet);
+        root.setMainResources(webResourceSet);
         return root;
     }
 

==================================================
