fd971f3e0192f4c5a90d5177500dd8ff64300f4d
==================================================
Align ActionCode.REQ_SSL_CERTIFICATE
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:46:56 2016 +0000
==================================================
AjpProcessor.java
Align ActionCode.REQ_SSL_CERTIFICATE

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756098 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 4defdf2996..c2d4074404 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -463,8 +463,7 @@ public class AjpProcessor extends AbstractProcessor {
             break;
         }
         case REQ_SSL_CERTIFICATE: {
-            // NO-OP. Can't force a new SSL handshake with the client when using
-            // AJP as the reverse proxy controls that connection.
+            sslReHandShake();
             break;
         }
 
@@ -1502,6 +1501,12 @@ public class AjpProcessor extends AbstractProcessor {
     }
     
     
+    private void sslReHandShake() {
+        // NO-OP. Can't force a new SSL handshake with the client when using
+        // AJP as the reverse proxy controls that connection.
+    }
+
+    
     /**
      * Read at least the specified amount of bytes, and place them
      * in the input buffer. Note that if any data is available to read then this

==================================================
StreamProcessor.java
index 880c3a24b8..44ca15b292 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -756,24 +756,7 @@ public class Http11Processor extends AbstractProcessor {
             break;
         }
         case REQ_SSL_CERTIFICATE: {
-            if (sslSupport != null) {
-                // Consume and buffer the request body, so that it does not
-                // interfere with the client's handshake messages
-                InputFilter[] inputFilters = inputBuffer.getFilters();
-                ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER]).setLimit(
-                        maxSavePostSize);
-                inputBuffer.addActiveFilter(inputFilters[Constants.BUFFERED_FILTER]);
-
-                try {
-                    socketWrapper.doClientAuth(sslSupport);
-                    Object sslO = sslSupport.getPeerCertificateChain();
-                    if (sslO != null) {
-                        request.setAttribute(SSLSupport.CERTIFICATE_KEY, sslO);
-                    }
-                } catch (IOException ioe) {
-                    log.warn(sm.getString("http11processor.socket.ssl"), ioe);
-                }
-            }
+            sslReHandShake();
             break;
         }
 
@@ -1825,6 +1808,28 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    private void sslReHandShake() {
+        if (sslSupport != null) {
+            // Consume and buffer the request body, so that it does not
+            // interfere with the client's handshake messages
+            InputFilter[] inputFilters = inputBuffer.getFilters();
+            ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER]).setLimit(
+                    maxSavePostSize);
+            inputBuffer.addActiveFilter(inputFilters[Constants.BUFFERED_FILTER]);
+
+            try {
+                socketWrapper.doClientAuth(sslSupport);
+                Object sslO = sslSupport.getPeerCertificateChain();
+                if (sslO != null) {
+                    request.setAttribute(SSLSupport.CERTIFICATE_KEY, sslO);
+                }
+            } catch (IOException ioe) {
+                log.warn(sm.getString("http11processor.socket.ssl"), ioe);
+            }
+        }
+    }
+    
+    
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
