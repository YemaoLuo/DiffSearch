99e03eaf1904e6048f8e4034f81eee4752faff7a
==================================================
more UDP impl
==================================================
Filip Hanik
==================================================
Tue Feb 19 20:45:54 2008 +0000
==================================================
ChannelReceiver.java
more UDP impl


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@629223 13f79535-47bb-0310-9956-ffa450edef68



==================================================
McastServiceImpl.java
index f52c039e5c..32c53e4973 100644
--- a/java/org/apache/catalina/tribes/ChannelReceiver.java
+++ b/java/org/apache/catalina/tribes/ChannelReceiver.java
@@ -27,6 +27,8 @@ package org.apache.catalina.tribes;
  * @version $Revision$, $Date$
  */
 public interface ChannelReceiver extends Heartbeat {
+    public static final int MAX_UDP_SIZE = 65535;
+    
     /**
      * Start listening for incoming messages on the host/port
      * @throws java.io.IOException

==================================================
ReceiverBase.java
index c17affa1c7..fd410bde7f 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -335,7 +335,10 @@ public class McastServiceImpl
                         }
                     };
                 } //end if
-                if ( t != null ) t.start();
+                if ( t != null ) {
+                    t.setDaemon(true);
+                    t.start();
+                }
             }
         } catch (SocketTimeoutException x ) { 
             //do nothing, this is normal, we don't want to block forever

==================================================
NioReceiver.java
index 3bc54a26de..06d4217c33 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -46,7 +46,6 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
 
     public static final int OPTION_DIRECT_BUFFER = 0x0004;
 
-
     protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReceiverBase.class);
 
     private MessageListener listener;

==================================================
NioReplicationTask.java
index b9ef3ba145..de527633e6 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -249,7 +249,7 @@ public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
 
         setListen(true);
         if (selector!=null && datagramChannel!=null) {
-            ObjectReader oreader = new ObjectReader(65535); //max size for a datagram packet
+            ObjectReader oreader = new ObjectReader(MAX_UDP_SIZE); //max size for a datagram packet
             registerChannel(selector,datagramChannel,SelectionKey.OP_READ,oreader);
         }
 

==================================================
NioSender.java
index 4fea62b0de..6e37070275 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -33,6 +33,8 @@ import org.apache.catalina.tribes.io.ListenCallback;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.BufferPool;
 import java.nio.channels.CancelledKeyException;
+
+import org.apache.catalina.tribes.ChannelReceiver;
 import org.apache.catalina.tribes.UniqueId;
 import org.apache.catalina.tribes.RemoteProcessException;
 import org.apache.catalina.tribes.util.Logs;
@@ -68,10 +70,14 @@ public class NioReplicationTask extends AbstractRxTask {
     // loop forever waiting for work to do
     public synchronized void run() {
         if ( buffer == null ) {
+            int size = getRxBufSize();
+            if (key.channel() instanceof DatagramChannel) {
+                size = ChannelReceiver.MAX_UDP_SIZE;
+            }
             if ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER) {
-                buffer = ByteBuffer.allocateDirect(getRxBufSize());
+                buffer = ByteBuffer.allocateDirect(size);
             } else {
-                buffer = ByteBuffer.allocate(getRxBufSize());
+                buffer = ByteBuffer.allocate(size);
             }
         } else {
             buffer.clear();

==================================================
TestDataIntegrity.java
index fe21cbf45b..b8e0479efc 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -137,16 +137,24 @@ public class NioSender extends AbstractSender implements DataSender{
         connecting = false;
         setRequestCount(0);
         setConnectTime(System.currentTimeMillis());
-        socketChannel.socket().setSendBufferSize(getTxBufSize());
-        socketChannel.socket().setReceiveBufferSize(getRxBufSize());
-        socketChannel.socket().setSoTimeout((int)getTimeout());
-        socketChannel.socket().setSoLinger(getSoLingerOn(),getSoLingerOn()?getSoLingerTime():0);
-        socketChannel.socket().setTcpNoDelay(getTcpNoDelay());
-        socketChannel.socket().setKeepAlive(getSoKeepAlive());
-        socketChannel.socket().setReuseAddress(getSoReuseAddress());
-        socketChannel.socket().setOOBInline(getOoBInline());
-        socketChannel.socket().setSoLinger(getSoLingerOn(),getSoLingerTime());
-        socketChannel.socket().setTrafficClass(getSoTrafficClass());
+        if (socketChannel!=null) {
+            socketChannel.socket().setSendBufferSize(getTxBufSize());
+            socketChannel.socket().setReceiveBufferSize(getRxBufSize());
+            socketChannel.socket().setSoTimeout((int)getTimeout());
+            socketChannel.socket().setSoLinger(getSoLingerOn(),getSoLingerOn()?getSoLingerTime():0);
+            socketChannel.socket().setTcpNoDelay(getTcpNoDelay());
+            socketChannel.socket().setKeepAlive(getSoKeepAlive());
+            socketChannel.socket().setReuseAddress(getSoReuseAddress());
+            socketChannel.socket().setOOBInline(getOoBInline());
+            socketChannel.socket().setSoLinger(getSoLingerOn(),getSoLingerTime());
+            socketChannel.socket().setTrafficClass(getSoTrafficClass());
+        } else if (dataChannel!=null) {
+            dataChannel.socket().setSendBufferSize(getTxBufSize());
+            dataChannel.socket().setReceiveBufferSize(getRxBufSize());
+            dataChannel.socket().setSoTimeout((int)getTimeout());
+            dataChannel.socket().setReuseAddress(getSoReuseAddress());
+            dataChannel.socket().setTrafficClass(getSoTrafficClass());
+        }
     }
 
 
@@ -224,6 +232,9 @@ public class NioSender extends AbstractSender implements DataSender{
             dataChannel = DatagramChannel.open();
             dataChannel.configureBlocking(false);
             dataChannel.connect(daddr);
+            completeConnect();
+            dataChannel.register(getSelector(),SelectionKey.OP_WRITE, this);
+            
         } else {
             InetSocketAddress addr = new InetSocketAddress(getAddress(),getPort());
             if ( socketChannel != null ) throw new IOException("Socket channel has already been established. Connection might be in progress.");

==================================================
TestUdpPackages.java
index 07b77bccc6..2dfcd6e78b 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -28,12 +28,12 @@ import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
 
 /**
- * <p>Title: </p> 
- * 
- * <p>Description: </p> 
- * 
+ * <p>Title: </p>
+ *
+ * <p>Description: </p>
+ *
  * <p>Company: </p>
- * 
+ *
  * @author not attributable
  * @version 1.0
  */
@@ -61,7 +61,7 @@ public class TestDataIntegrity extends TestCase {
         channel1.stop(GroupChannel.DEFAULT);
         channel2.stop(GroupChannel.DEFAULT);
     }
-    
+
     public void testDataSendNO_ACK() throws Exception {
         System.err.println("Starting NO_ACK");
         Thread[] threads = new Thread[threadCount];
@@ -89,7 +89,7 @@ public class TestDataIntegrity extends TestCase {
         System.err.println("Finished NO_ACK ["+listener1.count+"]");
         assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
-    
+
     public void testDataSendASYNCM() throws Exception {
             System.err.println("Starting ASYNC MULTI THREAD");
             Thread[] threads = new Thread[threadCount];
@@ -113,7 +113,7 @@ public class TestDataIntegrity extends TestCase {
             for (int x=0; x<threads.length; x++ ) { threads[x].join();}
             //sleep for 50 sec, let the other messages in
             long start = System.currentTimeMillis();
-            while ( (System.currentTimeMillis()-start)<15000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
+            while ( (System.currentTimeMillis()-start)<25000 && msgCount*threadCount!=listener1.count) Thread.sleep(500);
             System.err.println("Finished ASYNC MULTI THREAD ["+listener1.count+"]");
             assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
@@ -148,7 +148,7 @@ public class TestDataIntegrity extends TestCase {
         public boolean accept(Serializable s, Member m) {
             return (s instanceof Data);
         }
-        
+
         public void messageReceived(Serializable s, Member m) {
             Data d = (Data)s;
             if ( !Data.verify(d) ) {
@@ -161,7 +161,7 @@ public class TestDataIntegrity extends TestCase {
             }
         }
     }
-    
+
     public static class Data implements Serializable {
         public int length;
         public byte[] data;
@@ -178,14 +178,14 @@ public class TestDataIntegrity extends TestCase {
             Arrays.fill(d.data,d.key);
             return d;
         }
-        
+
         public static boolean verify(Data d) {
             boolean result = (d.length == d.data.length);
             for ( int i=0; result && (i<d.data.length); i++ ) result = result && d.data[i] == d.key;
             return result;
         }
     }
-    
-    
+
+
 
 }

==================================================
