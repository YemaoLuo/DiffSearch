25d8f2d396ee1ea7a2252a9d467809fe14600fcb
==================================================
Reduce code duplication
==================================================
Mark Thomas
==================================================
Wed Aug 15 15:21:12 2018 +0000
==================================================
Nio2Endpoint.java
Reduce code duplication

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1838106 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WriteBuffer.java
index d75f205446..9f2aea2655 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -32,8 +32,6 @@ import java.nio.channels.CompletionHandler;
 import java.nio.channels.FileChannel;
 import java.nio.channels.NetworkChannel;
 import java.nio.file.StandardOpenOption;
-import java.util.ArrayList;
-import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
@@ -577,11 +575,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                         } else if (!writeBuffer.isEmpty()) {
                             nestedWriteCompletionCount.get().incrementAndGet();
                             // Continue writing data using a gathering write
-                            List<ByteBuffer> arrayList = new ArrayList<>();
-                            if (attachment.hasRemaining()) {
-                                arrayList.add(attachment);
-                            }
-                            ByteBuffer[] array = writeBuffer.transferToListAsArray(arrayList);
+                            ByteBuffer[] array = writeBuffer.toArray(attachment);
                             getSocket().write(array, 0, array.length,
                                     toNio2Timeout(getWriteTimeout()), TimeUnit.MILLISECONDS,
                                     array, gatheringWriteCompletionHandler);
@@ -628,15 +622,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                         if (nBytes.longValue() < 0) {
                             failed(new EOFException(sm.getString("iob.failedwrite")), attachment);
                         } else if (!writeBuffer.isEmpty() || arrayHasData(attachment)) {
-                            // Continue writing data
+                            // Continue writing data using a gathering write
                             nestedWriteCompletionCount.get().incrementAndGet();
-                            List<ByteBuffer> arrayList = new ArrayList<>();
-                            for (ByteBuffer buffer : attachment) {
-                                if (buffer.hasRemaining()) {
-                                    arrayList.add(buffer);
-                                }
-                            }
-                            ByteBuffer[] array = writeBuffer.transferToListAsArray(arrayList);
+                            ByteBuffer[] array = writeBuffer.toArray(attachment);
                             getSocket().write(array, 0, array.length,
                                     toNio2Timeout(getWriteTimeout()), TimeUnit.MILLISECONDS,
                                     array, gatheringWriteCompletionHandler);
@@ -1287,12 +1275,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                 if (hasPermit || writePending.tryAcquire()) {
                     socketBufferHandler.configureWriteBufferForRead();
                     if (!writeBuffer.isEmpty()) {
-                        // Gathering write of the main buffer plus all leftovers
-                        List<ByteBuffer> arrayList = new ArrayList<>();
-                        if (socketBufferHandler.getWriteBuffer().hasRemaining()) {
-                            arrayList.add(socketBufferHandler.getWriteBuffer());
-                        }
-                        ByteBuffer[] array = writeBuffer.transferToListAsArray(arrayList);
+                        ByteBuffer[] array = writeBuffer.toArray(socketBufferHandler.getWriteBuffer());
                         Nio2Endpoint.startInline();
                         getSocket().write(array, 0, array.length, toNio2Timeout(getWriteTimeout()),
                                 TimeUnit.MILLISECONDS, array, gatheringWriteCompletionHandler);

==================================================
