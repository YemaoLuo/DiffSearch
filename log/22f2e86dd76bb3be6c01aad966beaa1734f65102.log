22f2e86dd76bb3be6c01aad966beaa1734f65102
==================================================
Make the HTTP request information available via the session
==================================================
Mark Emlyn
==================================================
Thu Feb 14 15:48:40 2013 +0000
==================================================
WsRequest.java
Make the HTTP request information available via the session

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1446247 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsSession.java
new file mode 100644
index 0000000000..b01172026e
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/WsRequest.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.net.URI;
+import java.security.Principal;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents the request that this session was opened under.
+ */
+public class WsRequest {
+
+    private final URI requestURI;
+    private final Map<String,List<String>> parameterMap;
+    private final String queryString;
+    private final Principal userPrincipal;
+
+    public WsRequest(URI requestURI, Map<String,List<String>> parameterMap,
+            String queryString, Principal userPrincipal) {
+        this.requestURI = requestURI;
+        this.parameterMap = parameterMap;
+        this.queryString = queryString;
+        this.userPrincipal = userPrincipal;
+    }
+
+    public URI getRequestURI() {
+        return requestURI;
+    }
+
+    public Map<String,List<String>> getRequestParameterMap() {
+        return parameterMap;
+    }
+
+    public String getQueryString() {
+        return queryString;
+    }
+
+    public Principal getUserPrincipal() {
+        return userPrincipal;
+    }
+}

==================================================
WsWebSocketContainer.java
index f7301b3bf8..057bb0d4c4 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -24,6 +24,7 @@ import java.net.URI;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.security.Principal;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -52,6 +53,7 @@ public class WsSession implements Session {
     private final WsRemoteEndpointBase wsRemoteEndpoint;
     private final ClassLoader applicationClassLoader;
     private final WsWebSocketContainer webSocketContainer;
+    private final WsRequest request;
 
     private MessageHandler textMessageHandler = null;
     private MessageHandler binaryMessageHandler = null;
@@ -78,7 +80,8 @@ public class WsSession implements Session {
      */
     public WsSession(Endpoint localEndpoint,
             WsRemoteEndpointBase wsRemoteEndpoint,
-            WsWebSocketContainer wsWebSocketContainer) {
+            WsWebSocketContainer wsWebSocketContainer,
+            WsRequest request) {
         this.localEndpoint = localEndpoint;
         this.wsRemoteEndpoint = wsRemoteEndpoint;
         this.wsRemoteEndpoint.setSession(this);
@@ -92,6 +95,7 @@ public class WsSession implements Session {
                 webSocketContainer.getDefaultMaxTextMessageBufferSize();
         this.sessionIdleTimeout =
                 webSocketContainer.getMaxSessionIdleTimeout();
+        this.request = request;
     }
 
 
@@ -188,8 +192,7 @@ public class WsSession implements Session {
 
     @Override
     public List<Extension> getNegotiatedExtensions() {
-        // TODO Auto-generated method stub
-        return null;
+        return Collections.EMPTY_LIST;
     }
 
 
@@ -307,41 +310,49 @@ public class WsSession implements Session {
 
     @Override
     public URI getRequestURI() {
-        // TODO Auto-generated method stub
-        return null;
+        if (request == null) {
+            return null;
+        }
+        return request.getRequestURI();
     }
 
 
     @Override
     public Map<String,List<String>> getRequestParameterMap() {
-        // TODO Auto-generated method stub
-        return null;
+        if (request == null) {
+            return Collections.EMPTY_MAP;
+        }
+        return request.getRequestParameterMap();
     }
 
 
     @Override
     public String getQueryString() {
-        // TODO Auto-generated method stub
-        return null;
+        if (request == null) {
+            return null;
+        }
+        return request.getQueryString();
     }
 
 
     @Override
-    public Map<String,String> getPathParameters() {
-        // TODO Auto-generated method stub
-        return null;
+    public Principal getUserPrincipal() {
+        if (request == null) {
+            return null;
+        }
+        return request.getUserPrincipal();
     }
 
 
     @Override
-    public String getId() {
+    public Map<String,String> getPathParameters() {
         // TODO Auto-generated method stub
         return null;
     }
 
 
     @Override
-    public Principal getUserPrincipal() {
+    public String getId() {
         // TODO Auto-generated method stub
         return null;
     }

==================================================
WsProtocolHandler.java
index 55be0ff5b0..85393356b6 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -158,7 +158,7 @@ public class WsWebSocketContainer
                     e);
         }
         WsSession wsSession =
-                new WsSession(endpoint, wsRemoteEndpointClient, this);
+                new WsSession(endpoint, wsRemoteEndpointClient, this, null);
         endpoint.onOpen(wsSession, clientEndpointConfiguration);
         registerSession(clazz, wsSession);
 

==================================================
WsServlet.java
index cd85fccbbc..4de0f58bff 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -34,6 +34,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.WsIOException;
+import org.apache.tomcat.websocket.WsRequest;
 import org.apache.tomcat.websocket.WsSession;
 
 /**
@@ -50,16 +51,17 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
     private final EndpointConfiguration endpointConfig;
     private final ClassLoader applicationClassLoader;
     private final ServerContainerImpl webSocketContainer;
+    private final WsRequest request;
 
     private WsSession wsSession;
 
 
-    public WsProtocolHandler(Endpoint ep,
-            EndpointConfiguration endpointConfig,
-            ServerContainerImpl wsc) {
+    public WsProtocolHandler(Endpoint ep, EndpointConfiguration endpointConfig,
+            ServerContainerImpl wsc, WsRequest request) {
         this.ep = ep;
         this.endpointConfig = endpointConfig;
         this.webSocketContainer = wsc;
+        this.request = request;
         applicationClassLoader = Thread.currentThread().getContextClassLoader();
     }
 
@@ -84,8 +86,8 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
         try {
             WsRemoteEndpointServer wsRemoteEndpointServer =
                     new WsRemoteEndpointServer(sos, webSocketContainer);
-            wsSession = new WsSession(
-                    ep, wsRemoteEndpointServer, webSocketContainer);
+            wsSession = new WsSession(ep, wsRemoteEndpointServer,
+                    webSocketContainer, request);
             WsFrameServer wsFrame = new WsFrameServer(
                     sis,
                     wsSession);

==================================================
