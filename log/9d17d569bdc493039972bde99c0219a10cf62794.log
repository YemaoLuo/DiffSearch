9d17d569bdc493039972bde99c0219a10cf62794
==================================================
Support arrays as well as collections as the source for a Stream
==================================================
Mark Emlyn
==================================================
Mon Jul 15 13:16:03 2013 +0000
==================================================
StreamELResolverImpl.java
Support arrays as well as collections as the source for a Stream

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503230 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCollectionOperations.java
index dc0de02af0..28f2ce3bce 100644
--- a/java/org/apache/el/stream/StreamELResolverImpl.java
+++ b/java/org/apache/el/stream/StreamELResolverImpl.java
@@ -17,6 +17,7 @@
 package org.apache.el.stream;
 
 import java.beans.FeatureDescriptor;
+import java.lang.reflect.Array;
 import java.util.Collection;
 import java.util.Iterator;
 
@@ -63,7 +64,8 @@ public class StreamELResolverImpl extends ELResolver {
 
         if ("stream".equals(method) && params.length == 0) {
             if (base.getClass().isArray()) {
-                // TODO handle array source
+                context.setPropertyResolved(true);
+                return new Stream(new ArrayIterator(base));
             } else if (base instanceof Collection) {
                 context.setPropertyResolved(true);
                 return new Stream(((Collection<?>) base).iterator());
@@ -73,4 +75,32 @@ public class StreamELResolverImpl extends ELResolver {
         // Not for handling by this resolver
         return null;
     }
+
+
+    private static class ArrayIterator implements Iterator<Object> {
+
+        private final Object base;
+        private final int size;
+        private int index = 0;
+
+        public ArrayIterator(Object base) {
+            this.base = base;
+            size = Array.getLength(base);
+        }
+
+        @Override
+        public boolean hasNext() {
+            return size > index;
+        }
+
+        @Override
+        public Object next() {
+            return Array.get(base, index++);
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
 }

==================================================
