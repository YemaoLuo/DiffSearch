a2e472db05eb8de60345b744632dfe1ca3713f38
==================================================
Refactor to simplify support for non-blocking IO across all HTTP
==================================================
Mark Emlyn
==================================================
Wed May 1 14:23:55 2013 +0000
==================================================
AbstractProcessor.java
Refactor to simplify support for non-blocking IO across all HTTP
connectors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478017 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Processor.java
index 277b095a46..4d611f1850 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -57,7 +57,6 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
         response = new Response();
         response.setHook(this);
         request.setResponse(response);
-
     }
 
 

==================================================
AbstractOutputBuffer.java
index 452806ca7a..1e831bb82e 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -56,12 +56,20 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
     protected abstract Log getLog();
 
+
     /**
      * The string manager for this package.
      */
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
+
+    /**
+     * Output.
+     */
+    protected AbstractOutputBuffer<S> outputBuffer;
+
+
     /*
      * Tracks how many internal filters are in the filter library so they
      * are skipped when looking for pluggable filters.
@@ -183,12 +191,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     protected int compressionMinSize = 2048;
 
 
-    /**
-     * Socket buffering.
-     */
-    protected int socketBuffer = -1;
-
-
     /**
      * Max saved post size.
      */
@@ -458,14 +460,14 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      * Set the socket buffer flag.
      */
     public void setSocketBuffer(int socketBuffer) {
-        this.socketBuffer = socketBuffer;
+        outputBuffer.setSocketBuffer(socketBuffer);
     }
 
     /**
      * Get the socket buffer flag.
      */
     public int getSocketBuffer() {
-        return socketBuffer;
+        return outputBuffer.getSocketBuffer();
     }
 
     /**

==================================================
Http11AprProcessor.java
index 17c1b90a04..284c089739 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SocketWrapper;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractOutputBuffer<S> implements OutputBuffer{
+public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
 
     // ----------------------------------------------------- Instance Variables
 
@@ -95,9 +95,14 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer{
      */
     protected long byteCount = 0;
 
-    // -------------------------------------------------------------- Variables
+    /**
+     * Socket buffering.
+     */
+    protected int socketBuffer = -1;
 
 
+    // -------------------------------------------------------------- Variables
+
     /**
      * The string manager for this package.
      */
@@ -163,9 +168,24 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer{
     }
 
 
- // --------------------------------------------------- OutputBuffer Methods
+    /**
+     * Set the socket buffer flag.
+     */
+    public void setSocketBuffer(int socketBuffer) {
+        this.socketBuffer = socketBuffer;
+    }
 
 
+    /**
+     * Get the socket buffer flag.
+     */
+    public int getSocketBuffer() {
+        return socketBuffer;
+    }
+
+
+    // --------------------------------------------------- OutputBuffer Methods
+
     /**
      * Write the contents of a byte chunk.
      *
@@ -548,9 +568,15 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer{
         }
     }
 
-    // --------------------------------------------------------- Public Methods
 
+    //------------------------------------------------------ Non-blocking writes
 
-    public abstract boolean supportsNonBlocking();
+    protected abstract boolean hasDataToWrite();
+    protected abstract void setBlocking(boolean blocking);
+    protected abstract boolean flushBuffer(boolean block) throws IOException;
 
+
+    protected final boolean isReady() {
+        return !hasDataToWrite();
+    }
 }

==================================================
Http11NioProcessor.java
index 42707cd954..c04c15245f 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -81,12 +81,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     protected final InternalAprInputBuffer inputBuffer;
 
 
-    /**
-     * Output.
-     */
-    protected final InternalAprOutputBuffer outputBuffer;
-
-
     /**
      * Sendfile data.
      */

==================================================
Http11Processor.java
index 41c6e09835..bc31d0016b 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -86,12 +86,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     protected final InternalNioInputBuffer inputBuffer;
 
 
-    /**
-     * Output.
-     */
-    protected final InternalNioOutputBuffer outputBuffer;
-
-
     /**
      * Sendfile data.
      */

==================================================
InternalAprOutputBuffer.java
index a7e6ce84c8..e44c60c6f9 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -73,12 +73,6 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
     protected final InternalInputBuffer inputBuffer ;
 
 
-    /**
-     * Output.
-     */
-    protected final InternalOutputBuffer outputBuffer;
-
-
     /**
      * SSL information.
      */

==================================================
InternalNioOutputBuffer.java
index e27b38612c..cfe20e14a1 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -85,11 +85,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
 
     // --------------------------------------------------------- Public Methods
 
-    @Override
-    public boolean supportsNonBlocking() {
-        return false;
-    }
-
     @Override
     public void init(SocketWrapper<Long> socketWrapper,
             AbstractEndpoint endpoint) throws IOException {
@@ -214,8 +209,29 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     }
 
 
-    // ----------------------------------- OutputStreamOutputBuffer Inner Class
+    //------------------------------------------------------ Non-blocking writes
+
+    @Override
+    protected boolean hasDataToWrite() {
+        // TODO
+        return false;
+    }
+
 
+    @Override
+    protected void setBlocking(boolean blocking) {
+        // TODO
+    }
+
+
+    @Override
+    protected boolean flushBuffer(boolean block) throws IOException {
+        // TODO
+        return false;
+    }
+
+
+    // ----------------------------------- OutputStreamOutputBuffer Inner Class
 
     /**
      * This class is an output buffer which will write data to an output

==================================================
InternalOutputBuffer.java
index 0ec8c4dda2..7694df37d1 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -150,11 +150,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 
     // --------------------------------------------------------- Public Methods
 
-    @Override
-    public boolean supportsNonBlocking() {
-        return true;
-    }
-
     /**
      * Flush the response.
      *
@@ -329,6 +324,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
     /**
      * Callback to write data from the buffer.
      */
+    @Override
     protected boolean flushBuffer(boolean block) throws IOException {
 
         //prevent timeout for async,
@@ -420,14 +416,17 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
         }
     }
 
-    //----------------------------------------non blocking writes -----------------
+
+    //------------------------------------------------------ Non-blocking writes
+
+    @Override
     public void setBlocking(boolean blocking) {
         this.blocking = blocking;
         if (blocking)
             bufferedWrite = null;
         else
             bufferedWrite = new LinkedBlockingDeque<>();
-}
+    }
 
     public void setBufferedWriteSize(int bufferedWriteSize) {
         this.bufferedWriteSize = bufferedWriteSize;
@@ -448,6 +447,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
         return result;
     }
 
+    @Override
     public boolean hasDataToWrite() {
         return hasMoreDataToFlush() || hasBufferedData();
     }
@@ -455,8 +455,4 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
     public int getBufferedWriteSize() {
         return bufferedWriteSize;
     }
-
-    public boolean isReady() {
-        return !hasDataToWrite();
-    }
 }

==================================================
