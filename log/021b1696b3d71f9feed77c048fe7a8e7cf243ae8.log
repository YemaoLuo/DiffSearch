021b1696b3d71f9feed77c048fe7a8e7cf243ae8
==================================================
Refactor storage of current character encoding for request/response
==================================================
Mark Thomas
==================================================
Wed Jan 18 16:05:50 2023 +0000
==================================================
Request.java
Refactor storage of current character encoding for request/response


==================================================
Response.java
index 6908cdb7f0..8fdcfdb6ed 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -29,7 +29,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import jakarta.servlet.ReadListener;
 import jakarta.servlet.ServletConnection;
 
-import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.buf.CharsetHolder;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.http.MimeHeaders;
@@ -148,10 +148,7 @@ public final class Request {
      */
     private long contentLength = -1;
     private MessageBytes contentTypeMB = null;
-    private Charset charset = null;
-    // Retain the original, user specified character encoding so it can be
-    // returned even if it is invalid
-    private String characterEncoding = null;
+    private CharsetHolder charsetHolder = CharsetHolder.EMPTY;
 
     /**
      * Is there an expectation ?
@@ -409,11 +406,11 @@ public final class Request {
      *         content type.
      */
     public String getCharacterEncoding() {
-        if (characterEncoding == null) {
-            characterEncoding = getCharsetFromContentType(getContentType());
+        if (charsetHolder.getName() == null) {
+            charsetHolder = CharsetHolder.getInstance(getCharsetFromContentType(getContentType()));
         }
 
-        return characterEncoding;
+        return charsetHolder.getName();
     }
 
 
@@ -428,20 +425,17 @@ public final class Request {
      *         invalid character encoding
      */
     public Charset getCharset() throws UnsupportedEncodingException {
-        if (charset == null) {
+        if (charsetHolder.getName() == null) {
+            // Populates charsetHolder
             getCharacterEncoding();
-            if (characterEncoding != null) {
-                charset = B2CConverter.getCharset(characterEncoding);
-            }
          }
 
-        return charset;
+        return charsetHolder.getValidatedCharset();
     }
 
 
     public void setCharset(Charset charset) {
-        this.charset = charset;
-        this.characterEncoding = charset.name();
+        charsetHolder = CharsetHolder.getInstance(charset);
     }
 
 
@@ -784,8 +778,7 @@ public final class Request {
 
         contentLength = -1;
         contentTypeMB = null;
-        charset = null;
-        characterEncoding = null;
+        charsetHolder = CharsetHolder.EMPTY;
         expectation = false;
         headers.recycle();
         trailerFields.clear();

==================================================
CharsetHolder.java
index b2a32387d7..f5fb215c22 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -32,7 +32,7 @@ import jakarta.servlet.WriteListener;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.buf.CharsetHolder;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.http.parser.MediaType;
@@ -113,11 +113,7 @@ public final class Response {
      */
     String contentType = null;
     String contentLanguage = null;
-    Charset charset = null;
-    // Retain the original name used to set the charset so exactly that name is
-    // used in the ContentType header. Some (arguably non-specification
-    // compliant) user agents are very particular
-    String characterEncoding = null;
+    private CharsetHolder charsetHolder = CharsetHolder.EMPTY;
     long contentLength = -1;
     private Locale locale = DEFAULT_LOCALE;
 
@@ -505,19 +501,13 @@ public final class Response {
         if (isCommitted()) {
             return;
         }
-        if (characterEncoding == null) {
-            this.charset = null;
-            this.characterEncoding = null;
-            return;
-        }
 
-        this.characterEncoding = characterEncoding;
-        this.charset = B2CConverter.getCharset(characterEncoding);
+        charsetHolder = CharsetHolder.getValidatedInstance(characterEncoding);
     }
 
 
     public Charset getCharset() {
-        return charset;
+        return charsetHolder.getCharset();
     }
 
 
@@ -525,7 +515,7 @@ public final class Response {
      * @return The name of the current encoding
      */
     public String getCharacterEncoding() {
-        return characterEncoding;
+        return charsetHolder.getName();
     }
 
 
@@ -573,7 +563,7 @@ public final class Response {
             charsetValue = charsetValue.trim();
             if (charsetValue.length() > 0) {
                 try {
-                    charset = B2CConverter.getCharset(charsetValue);
+                    charsetHolder = CharsetHolder.getValidatedInstance(charsetValue);
                 } catch (UnsupportedEncodingException e) {
                     log.warn(sm.getString("response.encoding.invalid", charsetValue), e);
                 }
@@ -588,9 +578,11 @@ public final class Response {
     public String getContentType() {
 
         String ret = contentType;
-
-        if (ret != null && charset != null) {
-            ret = ret + ";charset=" + characterEncoding;
+        if (ret != null) {
+            String charsetName = charsetHolder.getName();
+            if (charsetName != null) {
+                ret = ret + ";charset=" + charsetName;
+            }
         }
 
         return ret;
@@ -634,8 +626,7 @@ public final class Response {
         contentType = null;
         contentLanguage = null;
         locale = DEFAULT_LOCALE;
-        charset = null;
-        characterEncoding = null;
+        charsetHolder = CharsetHolder.EMPTY;
         contentLength = -1;
         status = 200;
         message = null;

==================================================
