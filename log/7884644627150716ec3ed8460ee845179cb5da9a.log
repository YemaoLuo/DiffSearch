7884644627150716ec3ed8460ee845179cb5da9a
==================================================
Clean-up more Javadoc after removing author tags
==================================================
Mark Emlyn
==================================================
Fri Jan 24 17:50:45 2014 +0000
==================================================
AsyncListenerWrapper.java
Clean-up more Javadoc after removing author tags

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1561092 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TaskQueue.java
index f5e883e5c7..0f7b0109f3 100644
--- a/java/org/apache/catalina/core/AsyncListenerWrapper.java
+++ b/java/org/apache/catalina/core/AsyncListenerWrapper.java
@@ -21,10 +21,6 @@ import java.io.IOException;
 import javax.servlet.AsyncEvent;
 import javax.servlet.AsyncListener;
 
-/**
- * TODO SERVLET3 - async
- *
- */
 public class AsyncListenerWrapper {
 
     private AsyncListener listener = null;

==================================================
ConnectionPool.java
index 4e2cc0154f..87b633b4b4 100644
--- a/java/org/apache/tomcat/util/threads/TaskQueue.java
+++ b/java/org/apache/tomcat/util/threads/TaskQueue.java
@@ -22,11 +22,11 @@ import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
 
 /**
- * As task queue specifically designed to run with a thread pool executor.
- * The task queue is optimised to properly utilize threads within
- * a thread pool executor. If you use a normal queue, the executor will spawn threads
- * when there are idle threads and you wont be able to force items unto the queue itself
- *
+ * As task queue specifically designed to run with a thread pool executor. The
+ * task queue is optimised to properly utilize threads within a thread pool
+ * executor. If you use a normal queue, the executor will spawn threads when
+ * there are idle threads and you wont be able to force items unto the queue
+ * itself.
  */
 public class TaskQueue extends LinkedBlockingQueue<Runnable> {
 

==================================================
PoolUtilities.java
index ab5e771ab2..2d7e2000a2 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -52,7 +52,6 @@ import org.apache.juli.logging.LogFactory;
  * A custom implementation of a fair {@link FairBlockingQueue} blocking queue is provided with the connection pool itself.
  * @version 1.0
  */
-
 public class ConnectionPool {
 
     /**

==================================================
SlowQueryReport.java
index 31d2357c9c..0da0d0b159 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolUtilities.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolUtilities.java
@@ -18,10 +18,6 @@ package org.apache.tomcat.jdbc.pool;
 
 import java.util.Properties;
 
-/**
- *
- *
- */
 public class PoolUtilities {
 
     public static final String PROP_USER = "user";

==================================================
StatementDecoratorInterceptor.java
index 4d35de3642..3dcc8b0804 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -215,10 +215,6 @@ public class SlowQueryReport extends AbstractQueryReport  {
     }
 
 
-    /**
-     *
-     *
-     */
     public static class QueryStats {
         static final String[] FIELD_NAMES = new String[] {
             "query",

==================================================
InduceSlowQuery.java
index 4207ee5876..e5036b254e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
@@ -162,9 +162,7 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
     }
 
     /**
-     * Class to measure query execute time
-     *
-     *
+     * Class to measure query execute time.
      */
     protected class StatementProxy<T extends java.sql.Statement> implements InvocationHandler {
 

==================================================
