8bc6fa5140ea23e97922ff07b345b92450da3618
==================================================
Use distributable and sessionTimeout from Context rather than values copied to Manager since the Context values (should) always take precedence and overwrite anything set on the Manager.
==================================================
Mark Thomas
==================================================
Tue Jan 19 23:27:17 2016 +0000
==================================================
HTMLManagerServlet.java
Use distributable and sessionTimeout from Context rather than values copied to Manager since the Context values (should) always take precedence and overwrite anything set on the Manager.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725651 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerServlet.java
index 210782b233..ff956ddfd0 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -491,14 +491,11 @@ public final class HTMLManagerServlet extends ManagerServlet {
                 args[8] = RequestUtil.filter(response.encodeURL(request
                         .getContextPath() + "/html/expire?" + pathVersion));
                 args[9] = appsExpire;
-                args[10] = smClient.getString(
-                        "htmlManagerServlet.expire.explain");
+                args[10] = smClient.getString("htmlManagerServlet.expire.explain");
                 if (manager == null) {
-                    args[11] = smClient.getString(
-                            "htmlManagerServlet.noManager");
+                    args[11] = smClient.getString("htmlManagerServlet.noManager");
                 } else {
-                    args[11] = Integer.valueOf(
-                            ctxt.getManager().getMaxInactiveInterval()/60);
+                    args[11] = Integer.valueOf(ctxt.getSessionTimeout());
                 }
                 args[12] = smClient.getString("htmlManagerServlet.expire.unit");
                 args[13] = highlightColor;

==================================================
StandardSession.java
index 795a45b26b..21a90f8980 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -1195,7 +1195,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             }
             int maxCount = 60;
             int histoInterval = 1;
-            int maxInactiveInterval = manager.getMaxInactiveInterval()/60;
+            int maxInactiveInterval = context.getSessionTimeout();
             if (maxInactiveInterval > 0) {
                 histoInterval = maxInactiveInterval / maxCount;
                 if (histoInterval * maxCount < maxInactiveInterval)

==================================================
StandardContextSF.java
index 96cec1f156..18b23937fd 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -1462,7 +1462,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             throw new IllegalStateException(sm.getString(
                     "standardSession.setAttribute.ise", getIdInternal()));
         }
-        if ((manager != null) && manager.getDistributable() &&
+        if ((manager != null) && manager.getContext().getDistributable() &&
                 !isAttributeDistributable(name, value) && !exclude(name, value)) {
             throw new IllegalArgumentException(sm.getString(
                     "standardSession.setAttribute.iae", name));

==================================================
