fa768e3878ae56fbdfadf3a86e1d218e722c459d
==================================================
make threadNameCache actually useful
==================================================
t-gergely 8715996+t-gergely@users.noreply.github.com
==================================================
Wed Sep 15 12:26:28 2021 +0200
==================================================
OneLineFormatter.java
make threadNameCache actually useful



==================================================
TestThreadNameCache.java
index ba340bd5ec..3f1e4f685e 100644
--- a/java/org/apache/juli/OneLineFormatter.java
+++ b/java/org/apache/juli/OneLineFormatter.java
@@ -43,7 +43,7 @@ public class OneLineFormatter extends Formatter {
     private static final Object threadMxBeanLock = new Object();
     private static volatile ThreadMXBean threadMxBean = null;
     private static final int THREAD_NAME_CACHE_SIZE = 10000;
-    private static ThreadLocal<ThreadNameCache> threadNameCache =
+    private static final ThreadLocal<ThreadNameCache> threadNameCache =
             ThreadLocal.withInitial(() -> new ThreadNameCache(THREAD_NAME_CACHE_SIZE));
 
     /* Timestamp format */
@@ -221,11 +221,7 @@ public class OneLineFormatter extends Formatter {
      */
     private static String getThreadName(int logRecordThreadId) {
         Map<Integer,String> cache = threadNameCache.get();
-        String result = null;
-
-        if (logRecordThreadId > (Integer.MAX_VALUE / 2)) {
-            result = cache.get(Integer.valueOf(logRecordThreadId));
-        }
+        String result = cache.get(Integer.valueOf(logRecordThreadId));
 
         if (result != null) {
             return result;

==================================================
