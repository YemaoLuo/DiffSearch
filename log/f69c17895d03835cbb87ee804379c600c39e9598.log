f69c17895d03835cbb87ee804379c600c39e9598
==================================================
Re-fixed bug #49711: HttpServletRequest#getParts() does not work in a Filter
==================================================
Christopher Schultz
==================================================
Fri Jan 21 18:32:39 2011 +0000
==================================================
Context.java
Re-fixed bug #49711: HttpServletRequest#getParts() does not work in a Filter
- Moved allowCasualMultipartParsing setting from <Connector> to <Context>



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1061953 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index 33c03a237e..6743085fb6 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -89,6 +89,26 @@ public interface Context extends Container {
 
     // ------------------------------------------------------------- Properties
 
+    /**
+     * Set to <code>true</code> to allow requests mapped to servlets that
+     * do not explicitly declare @MultipartConfig or have
+     * &lt;multipart-config&gt; specified in web.xml to parse
+     * multipart/form-data requests.
+     *
+     * @param allowCasualMultipartParsing <code>true</code> to allow such
+     *        casual parsing, <code>false</code> otherwise.
+     */
+    public void setAllowCasualMultipartParsing(boolean allowCasualMultipartParsing);
+
+    /**
+     * Returns <code>true</code> if requests mapped to servlets without
+     * "multipart config" to parse multipart/form-data requests anyway.
+     *
+     * @return <code>true</code> if requests mapped to servlets without
+     *    "multipart config" to parse multipart/form-data requests,
+     *    <code>false</code> otherwise.
+     */
+    public boolean getAllowCasualMultipartParsing();
 
     /**
      * Return the set of initialized application event listener objects,

==================================================
Request.java
index 6f54c66d66..98fbc1c2ec 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -247,13 +247,6 @@ public class Connector extends LifecycleMBeanBase  {
      protected boolean useBodyEncodingForURI = false;
 
 
-    /**
-     * Allow multipart/form-data requests to be parsed even when the
-     * target servlet doesn't specify @MultipartConfig or have a
-     * &lt;multipart-config&gt; element.
-     */
-    protected boolean allowCasualMultipartParsing = false;
-     
      protected static HashMap<String,String> replacements =
          new HashMap<String,String>();
      static {
@@ -774,33 +767,6 @@ public class Connector extends LifecycleMBeanBase  {
 
      }
 
-    /**
-     * Set to <code>true</code> to allow requests mapped to servlets that
-     * do not explicitly declare @MultipartConfig or have
-     * &lt;multipart-config&gt; specified in web.xml to parse
-     * multipart/form-data requests.
-     *
-     * @param allowCasualMultipartParsing <code>true</code> to allow such
-     *        casual parsing, <code>false</code> otherwise.
-     */
-    public void setAllowCasualMultipartParsing(boolean allowCasualMultipartParsing)
-    {
-        this.allowCasualMultipartParsing = allowCasualMultipartParsing;
-    }
-
-    /**
-     * Returns <code>true</code> if requests mapped to servlets without
-     * "multipart config" to parse multipart/form-data requests anyway.
-     *
-     * @return <code>true</code> if requests mapped to servlets without
-     *    "multipart config" to parse multipart/form-data requests,
-     *    <code>false</code> otherwise.
-     */
-    protected boolean getAllowCasualMultipartParsing()
-    {
-        return this.allowCasualMultipartParsing;
-    }
-
     /**
      * Indicates whether the generation of an X-Powered-By response header for
      * servlet-generated responses is enabled or disabled for this Connector.

==================================================
StandardContext.java
index f656078789..0163c6ba76 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2547,8 +2547,7 @@ public class Request
         MultipartConfigElement mce = getWrapper().getMultipartConfigElement();
 
         if (mce == null) {
-            Connector connector = getConnector();
-            if(connector.getAllowCasualMultipartParsing()) {
+            if(getContext().getAllowCasualMultipartParsing()) {
                 mce = new MultipartConfigElement(null,
                                                  connector.getMaxPostSize(),
                                                  connector.getMaxPostSize(),

==================================================
TestRequest.java
index 0556cdd1ba..331d78dafe 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -190,6 +190,13 @@ public class StandardContext extends ContainerBase
     // ----------------------------------------------------- Instance Variables
 
 
+    /**
+     * Allow multipart/form-data requests to be parsed even when the
+     * target servlet doesn't specify @MultipartConfig or have a
+     * &lt;multipart-config&gt; element.
+     */
+    protected boolean allowCasualMultipartParsing = false;
+     
     /**
      * The alternate deployment descriptor name.
      */
@@ -1001,6 +1008,34 @@ public class StandardContext extends ContainerBase
         return allowLinking;
     }
 
+    /**
+     * Set to <code>true</code> to allow requests mapped to servlets that
+     * do not explicitly declare @MultipartConfig or have
+     * &lt;multipart-config&gt; specified in web.xml to parse
+     * multipart/form-data requests.
+     *
+     * @param allowCasualMultipartParsing <code>true</code> to allow such
+     *        casual parsing, <code>false</code> otherwise.
+     */
+    @Override
+    public void setAllowCasualMultipartParsing(boolean allowCasualMultipartParsing)
+    {
+        this.allowCasualMultipartParsing = allowCasualMultipartParsing;
+    }
+
+    /**
+     * Returns <code>true</code> if requests mapped to servlets without
+     * "multipart config" to parse multipart/form-data requests anyway.
+     *
+     * @return <code>true</code> if requests mapped to servlets without
+     *    "multipart config" to parse multipart/form-data requests,
+     *    <code>false</code> otherwise.
+     */
+    @Override
+    public boolean getAllowCasualMultipartParsing()
+    {
+        return this.allowCasualMultipartParsing;
+    }
 
     /**
      * Set cache TTL.

==================================================
TestStandardContext.java
index 8195543d08..90358ce20e 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -25,9 +25,7 @@ import java.net.URL;
 import java.util.Enumeration;
 import java.util.TreeMap;
 
-import javax.servlet.MultipartConfigElement;
 import javax.servlet.ServletException;
-import javax.servlet.annotation.MultipartConfig;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -527,167 +525,6 @@ public class TestRequest extends TomcatBaseTest {
         }
     }
 
-    /**
-     * Test case for bug 49711: HttpServletRequest.getParts does not work
-     * in a filter.
-     */
-    public void testBug49711() {
-        Bug49711Client client = new Bug49711Client();
-        client.setPort(getPort());
-
-        // Make sure non-multipart works properly
-        client.doRequest("/regular", false, false);
-
-        assertEquals("Incorrect response for GET request",
-                     "parts=0",
-                     client.getResponseBody());
-
-        client.reset();
-
-        // Make sure regular multipart works properly
-        client.doRequest("/multipart", false, true); // send multipart request
-
-        assertEquals("Regular multipart doesn't work",
-                     "parts=1",
-                     client.getResponseBody());
-
-        client.reset();
-
-        // Make casual multipart request to "regular" servlet w/o config
-        // We expect that no parts will be available
-        client.doRequest("/regular", false, true); // send multipart request
-
-        assertEquals("Incorrect response for non-configured casual multipart request",
-                     "parts=0", // multipart request should be ignored
-                     client.getResponseBody());
-
-        client.reset();
-
-        // Make casual multipart request to "regular" servlet w/config
-        // We expect that the server /will/ parse the parts, even though
-        // there is no @MultipartConfig
-        client.doRequest("/regular", true, true); // send multipart request
-
-        assertEquals("Incorrect response for configured casual multipart request",
-                     "parts=1",
-                     client.getResponseBody());
-
-        client.reset();
-    }
-
-    private static class Bug49711Servlet extends HttpServlet {
-        @Override
-        protected void service(HttpServletRequest req, HttpServletResponse resp)
-            throws ServletException, IOException {
-            // Just echo the parameters and values back as plain text
-            resp.setContentType("text/plain");
-            resp.setCharacterEncoding("UTF-8");
-
-            PrintWriter out = resp.getWriter();
-            
-            out.println("parts=" + (null == req.getParts()
-                                    ? "null"
-                                    : req.getParts().size()));
-        }
-    }
-
-    @MultipartConfig
-    private static class Bug49711Servlet_multipart extends Bug49711Servlet {
-    }
-
-    /**
-     * Bug 49711 test client: test for casual getParts calls.
-     */
-    private class Bug49711Client extends SimpleHttpClient {
-
-        private boolean init;
-        
-        private synchronized void init() throws Exception {
-            if (init) return;
-            
-            Tomcat tomcat = getTomcatInstance();
-            Context root = tomcat.addContext("", TEMP_DIR);
-            Tomcat.addServlet(root, "regular", new Bug49711Servlet());
-            Wrapper w = Tomcat.addServlet(root, "multipart", new Bug49711Servlet_multipart());
-
-            // Tomcat.addServlet does not respect annotations, so we have
-            // to set our own MultipartConfigElement.
-            w.setMultipartConfigElement(new MultipartConfigElement(""));
-
-            root.addServletMapping("/regular", "regular");
-            root.addServletMapping("/multipart", "multipart");
-            tomcat.start();
-            
-            init = true;
-        }
-        
-        private Exception doRequest(String uri,
-                                    boolean allowCasualMultipart,
-                                    boolean makeMultipartRequest) {
-            Tomcat tomcat = getTomcatInstance();
-
-            tomcat.getConnector().setAllowCasualMultipartParsing(allowCasualMultipart);
-
-            try {
-                init();
-
-                // Open connection
-                connect();
-
-                // Send specified request body using method
-                String[] request;
-
-                if(makeMultipartRequest) {
-                    String boundary = "--simpleboundary";
-
-                    String content = "--" + boundary + CRLF
-                        + "Content-Disposition: form-data; name=\"name\"" + CRLF + CRLF
-                        + "value" + CRLF
-                        + "--" + boundary + "--" + CRLF
-                        ;
-
-                    // Re-encode the content so that bytes = characters
-                    if(null != content)
-                        content = new String(content.getBytes("UTF-8"), "ASCII");
-
-                    request = new String[] {
-                        "POST http://localhost:" + getPort() + uri + " HTTP/1.1" + CRLF
-                        + "Host: localhost" + CRLF
-                        + "Connection: close" + CRLF
-                        + "Content-Type: multipart/form-data; boundary=" + boundary + CRLF
-                        + "Content-Length: " + content.length() + CRLF
-                        + CRLF
-                        + content
-                        + CRLF
-                    };
-                }
-                else
-                {
-                    request = new String[] {
-                        "GET http://localhost:" + getPort() + uri + " HTTP/1.1" + CRLF
-                        + "Host: localhost" + CRLF
-                        + "Connection: close" + CRLF
-                        + CRLF
-                    };
-                }
-
-                setRequest(request);
-                processRequest(); // blocks until response has been read
-                
-                // Close the connection
-                disconnect();
-            } catch (Exception e) {
-                return e;
-            }
-            return null;
-        }
-
-        @Override
-        public boolean isResponseBodyOK() {
-            return false; // Don't care
-        }
-    }
-
     private HttpURLConnection getConnection() throws IOException {
         final String query = "http://localhost:" + getPort() + "/";
         URL postURL;

==================================================
