485448f68a94fd0168e25e2101178f0f8c15fd45
==================================================
Fix spellings in org.apache.catalina
==================================================
Mark Thomas
==================================================
Wed Sep 16 16:39:19 2020 +0100
==================================================
AuthenticatorBase.java
Fix spellings in org.apache.catalina

Based on a PR provided by John Bampton
i18n keys, local variables, Javadoc and private methods and private
classes so changes are low risk


==================================================
Response.java
index 66b9038f22..0911152035 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -228,7 +228,7 @@ public abstract class AuthenticatorBase extends ValveBase
      * {@link RemoteIpFilter} mark a forwarded request with the
      * {@link Globals#REQUEST_FORWARDED_ATTRIBUTE} this authenticator can return the
      * values of {@link HttpServletRequest#getRemoteUser()} and
-     * {@link HttpServletRequest#getAuthType()} as reponse headers {@code remote-user}
+     * {@link HttpServletRequest#getAuthType()} as response headers {@code remote-user}
      * and {@code auth-type} to a reverse proxy. This is useful, e.g., for access log
      * consistency or other decisions to make.
      */
@@ -1239,7 +1239,7 @@ public abstract class AuthenticatorBase extends ValveBase
         }
 
         // Fix for Bug 10040
-        // Always associate a session with a new SSO reqistration.
+        // Always associate a session with a new SSO registration.
         // SSO entries are only removed from the SSO registry map when
         // associated sessions are destroyed; if a new SSO entry is created
         // above for this request and the user never revisits the context, the

==================================================
AsyncContextImpl.java
index c529d971c2..9c5fea35ab 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -1627,7 +1627,7 @@ public class Response implements HttpServletResponse {
                     if (SecurityUtil.isPackageProtectionEnabled() ){
                         try{
                             encodedURI = AccessController.doPrivileged(
-                                    new PrivilgedEncodeUrl(urlEncoder, relativePath, pos));
+                                    new PrivilegedEncodeUrl(urlEncoder, relativePath, pos));
                         } catch (PrivilegedActionException pae){
                             IllegalArgumentException iae =
                                 new IllegalArgumentException(location);
@@ -1854,13 +1854,13 @@ public class Response implements HttpServletResponse {
     }
 
 
-    private static class PrivilgedEncodeUrl implements PrivilegedExceptionAction<CharChunk> {
+    private static class PrivilegedEncodeUrl implements PrivilegedExceptionAction<CharChunk> {
 
         private final UEncoder urlEncoder;
         private final String relativePath;
         private final int end;
 
-        public PrivilgedEncodeUrl(UEncoder urlEncoder, String relativePath, int end) {
+        public PrivilegedEncodeUrl(UEncoder urlEncoder, String relativePath, int end) {
             this.urlEncoder = urlEncoder;
             this.relativePath = relativePath;
             this.end = end;

==================================================
ExpiresFilter.java
index c909dc62fb..acc70ebdc4 100644
--- a/java/org/apache/catalina/core/LocalStrings_zh_CN.properties
+++ b/java/org/apache/catalina/core/LocalStrings_zh_CN.properties
@@ -91,7 +91,7 @@ aprListener.tooLateForSSLEngine=无法设置引擎：SSL已初始化
 aprListener.tooLateForSSLRandomSeed=无法设置 SSLRandomSeed：SSL已经初始化
 aprListener.wrongFIPSMode=AprLifecycleListener的FIPSMode选项的意外值：[{0}]
 
-asyncContextImpl.asyncDispachError=异步调度时出错
+asyncContextImpl.asyncDispatchError=异步调度时出错
 asyncContextImpl.asyncRunnableError=通过AsyncContext.start（）处理异步运行时出错
 asyncContextImpl.dispatchingStarted=异步调度操作已经被调用。不允许在同一异步周期内进行其他异步调度操作。
 asyncContextImpl.fireOnComplete=为任何异步侦听器触发onComplete（）事件

==================================================
HeartbeatListener.java
index 3cdf7f6d30..81536eeea7 100644
--- a/java/org/apache/catalina/filters/LocalStrings_zh_CN.properties
+++ b/java/org/apache/catalina/filters/LocalStrings_zh_CN.properties
@@ -35,7 +35,7 @@ expiresFilter.noDurationUnitAfterAmount=在指令[{1}]中的amount[{0}]之后找
 expiresFilter.noExpirationConfigured=请求[{0}]，其响应状态为[{1}]内容类型[{2}]，未配置到期日期
 expiresFilter.noExpirationConfiguredForContentType=没有为 content-type [{0}] 找到过期配置
 expiresFilter.numberError=分析逗号分隔列表[{1}中位置[{0}（基于零）处的数字时发生异常
-expiresFilter.responseAlreadyCommited=请求[{0}]，无法对已提交的响应应用ExpiresFilter。
+expiresFilter.responseAlreadyCommitted=请求[{0}]，无法对已提交的响应应用ExpiresFilter。
 expiresFilter.setExpirationDate=请求{0}，响应状态为{1}，内容类型为{2}，设置过期日期{3}
 expiresFilter.skippedStatusCode=请求{0}，响应状态为{1}，内容类型为{1}，跳过给定状态的过期头生成。
 expiresFilter.startingPointInvalid=在指令[{1}]中无效的起点(访问|现在|修改|a<秒>|m<秒>)[{0}]

==================================================
FileMessageFactory.java
index 4a20113340..169b3f8421 100644
--- a/java/org/apache/catalina/ha/backend/HeartbeatListener.java
+++ b/java/org/apache/catalina/ha/backend/HeartbeatListener.java
@@ -128,7 +128,7 @@ public class HeartbeatListener implements LifecycleListener {
     public String getProxyList() { return proxyList; }
 
     /**
-     * Set the list of Proxies that send is requests, when not empty it toogles
+     * Set the list of Proxies that send is requests, when not empty it toggles
      * the multi to off. A SetHandler heartbeat must be existing in httpd.conf.
      *
      * @param proxyList the list of proxy, format "address:port,address:port".

==================================================
WebappClassLoaderBase.java
index 496f3170fb..f70274e12b 100644
--- a/java/org/apache/catalina/loader/LocalStrings_zh_CN.properties
+++ b/java/org/apache/catalina/loader/LocalStrings_zh_CN.properties
@@ -15,8 +15,8 @@
 
 webappClassLoader.addExportsRmi=在Java 9上运行时，需要在JVM命令行参数中添加“-add opens=Java.rmi/sun.rmi.transport=ALL-UNNAMED”，以启用rmi目标内存泄漏检测。或者，可以通过禁用RMI目标内存泄漏检测来抑制此警告。
 webappClassLoader.addExportsThreadLocal=在Java 9上运行时，需要在JVM命令行参数中添加“-add opens=Java.base/Java.lang=ALL-UNNAMED”，以启用线程本地内存泄漏检测。或者，可以通过禁用ThreadLocal内存泄漏检测来抑制此警告。
-webappClassLoader.addPermisionNoCanonicalFile=无法从URL[{0}]获取规范文件路径
-webappClassLoader.addPermisionNoProtocol=不支持URL[{1}]中的协议[{0}]，因此未授予位于此URL的资源的读取权限
+webappClassLoader.addPermissionNoCanonicalFile=无法从URL[{0}]获取规范文件路径
+webappClassLoader.addPermissionNoProtocol=不支持URL[{1}]中的协议[{0}]，因此未授予位于此URL的资源的读取权限
 webappClassLoader.addTransformer=将类文件转换器[{0}]添加到Web应用程序[{1}]。
 webappClassLoader.addTransformer.duplicate=将类文件转换器[{0}]添加到web应用程序[{1}]的重复调用被忽略。
 webappClassLoader.addTransformer.illegalArgument=Web应用程序[{0}]试图添加空类文件转换器。

==================================================
SecurityClassLoad.java
index ddb0f7076a..60241c3ed1 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -504,7 +504,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     path = f.getCanonicalPath();
                 } catch (IOException | URISyntaxException e) {
                     log.warn(sm.getString(
-                            "webappClassLoader.addPermisionNoCanonicalFile",
+                            "webappClassLoader.addPermissionNoCanonicalFile",
                             url.toExternalForm()));
                     return;
                 }
@@ -521,7 +521,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             } else {
                 // Unsupported URL protocol
                 log.warn(sm.getString(
-                        "webappClassLoader.addPermisionNoProtocol",
+                        "webappClassLoader.addPermissionNoProtocol",
                         protocol, url.toExternalForm()));
             }
         }

==================================================
ByteArrayServletOutputStream.java
index 1821695cfc..a111c65d82 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -153,7 +153,7 @@ public final class SecurityClassLoad {
         loader.loadClass(basePackage + "InputBuffer$PrivilegedCreateConverter");
         loader.loadClass(basePackage + "Response$PrivilegedDoIsEncodable");
         loader.loadClass(basePackage + "Response$PrivilegedGenerateCookieString");
-        loader.loadClass(basePackage + "Response$PrivilgedEncodeUrl");
+        loader.loadClass(basePackage + "Response$PrivilegedEncodeUrl");
     }
 
 

==================================================
SSIConditional.java
index fe3802c9a9..b763e755f6 100644
--- a/java/org/apache/catalina/ssi/ByteArrayServletOutputStream.java
+++ b/java/org/apache/catalina/ssi/ByteArrayServletOutputStream.java
@@ -24,7 +24,7 @@ import jakarta.servlet.WriteListener;
 
 
 /**
- * Class that extends ServletOuputStream, used as a wrapper from within
+ * Class that extends ServletOutputStream, used as a wrapper from within
  * <code>SsiInclude</code>
  *
  * @author Bip Thelin

==================================================
Catalina.java
index 6ac2583570..0fbe778bb1 100644
--- a/java/org/apache/catalina/ssi/SSIConditional.java
+++ b/java/org/apache/catalina/ssi/SSIConditional.java
@@ -107,7 +107,7 @@ public class SSIConditional implements SSICommand {
 
 
     /**
-     * Retrieves the expression from the specified arguments and peforms the
+     * Retrieves the expression from the specified arguments and performs the
      * necessary evaluation steps.
      */
     private boolean evaluateArguments(String[] names, String[] values,
@@ -136,4 +136,4 @@ public class SSIConditional implements SSICommand {
         if ("expr".equalsIgnoreCase(paramNames[0])) return paramValues[0];
         return null;
     }
-}
\ No newline at end of file
+}

==================================================
ContextConfig.java
index 003ef17877..69f22a08dc 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -909,7 +909,7 @@ public class Catalina {
     protected void initNaming() {
         // Setting additional variables
         if (!useNaming) {
-            log.info(sm.getString("catalina.noNatming"));
+            log.info(sm.getString("catalina.noNaming"));
             System.setProperty("catalina.useNaming", "false");
         } else {
             System.setProperty("catalina.useNaming", "true");

==================================================
AbstractReplicatedMap.java
index c35840ced4..237a1005f4 100644
--- a/java/org/apache/catalina/startup/LocalStrings_zh_CN.properties
+++ b/java/org/apache/catalina/startup/LocalStrings_zh_CN.properties
@@ -18,7 +18,7 @@ catalina.incorrectPermissions=权限错误，此文件没有读取权限
 catalina.init=服务器在[{0}]毫秒内初始化
 catalina.initError=初始化 Catalina 时出错
 catalina.noCluster=由于[{0}]未找到群集Ruleset。已禁用群集配置。
-catalina.noNatming=命名环境已禁用
+catalina.noNaming=命名环境已禁用
 catalina.noServer=无法启动服务器，服务器实例未配置
 catalina.serverStartFail=所必需的服务组件启动失败，所以无法启动Tomcat
 catalina.shutdownHookFail=关闭挂钩在尝试停止服务器时遇到错误

==================================================
NioReplicationTask.java
index 689decd43c..31282335f3 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -581,7 +581,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
         //state transfer request
         if (mapmsg.getMsgType() == MapMessage.MSG_STATE || mapmsg.getMsgType() == MapMessage.MSG_STATE_COPY) {
-            synchronized (stateMutex) { //make sure we dont do two things at the same time
+            synchronized (stateMutex) { //make sure we don't do two things at the same time
                 ArrayList<MapMessage> list = new ArrayList<>();
                 for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
                     MapEntry<K,V> entry = innerMap.get(e.getKey());

==================================================
StringManager.java
index 1b311299df..221d691b59 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -106,7 +106,7 @@ public class NioReplicationTask extends AbstractRxTask {
             if ( e instanceof CancelledKeyException ) {
                 //do nothing
             } else if ( e instanceof IOException ) {
-                //dont spew out stack traces for IO exceptions unless debug is enabled.
+                //don't spew out stack traces for IO exceptions unless debug is enabled.
                 if (log.isDebugEnabled()) log.debug ("IOException in replication worker, unable to drain channel. Probable cause: Keep alive socket closed["+e.getMessage()+"].", e);
                 else log.warn (sm.getString("nioReplicationTask.unable.drainChannel.ioe", e.getMessage()));
             } else if ( log.isErrorEnabled() ) {

==================================================
UUIDGenerator.java
index 2be37581bc..b3f96c17e1 100644
--- a/java/org/apache/catalina/tribes/util/StringManager.java
+++ b/java/org/apache/catalina/tribes/util/StringManager.java
@@ -30,7 +30,7 @@ import java.util.ResourceBundle;
 /**
  * An internationalization / localization helper class which reduces
  * the bother of handling ResourceBundles and takes care of the
- * common cases of message formating which otherwise require the
+ * common cases of message formatting which otherwise require the
  * creation of Object arrays and such.
  *
  * <p>The StringManager operates on a package basis. One StringManager

==================================================
ParameterMap.java
index 44dfffc510..04148c8d32 100644
--- a/java/org/apache/catalina/tribes/util/UUIDGenerator.java
+++ b/java/org/apache/catalina/tribes/util/UUIDGenerator.java
@@ -71,7 +71,7 @@ public class UUIDGenerator {
     }
 
     /**
-     * Same as java.util.Random.nextBytes except this one we dont have to allocate a new byte array
+     * Same as java.util.Random.nextBytes except this one we don't have to allocate a new byte array
      * @param into byte[]
      * @param offset int
      * @param length int
@@ -90,4 +90,4 @@ public class UUIDGenerator {
         }
     }
 
-}
\ No newline at end of file
+}

==================================================
Substitution.java
index 96bc0145f6..b9de052e10 100644
--- a/java/org/apache/catalina/util/ParameterMap.java
+++ b/java/org/apache/catalina/util/ParameterMap.java
@@ -30,7 +30,7 @@ import org.apache.tomcat.util.res.StringManager;
  * <code>locked</code> property.  This class can be used to safely expose
  * Catalina internal parameter map objects to user classes without having
  * to clone them in order to avoid modifications.  When first created, a
- * <code>ParmaeterMap</code> instance is not locked.
+ * <code>ParameterMap</code> instance is not locked.
  *
  * @param <K> The type of Key
  * @param <V> The type of Value

==================================================
