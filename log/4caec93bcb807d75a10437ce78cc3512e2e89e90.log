4caec93bcb807d75a10437ce78cc3512e2e89e90
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62603
==================================================
Mark Thomas
==================================================
Thu Aug 9 13:42:16 2018 +0000
==================================================
JspRuntimeContext.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62603
Fix a potential race condition when development mode is disabled and background compilation checks are enabled. It was possible that some updates would not take effect and/or ClassNotFoundExceptions would occur.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1837726 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspServletWrapper.java
index 46eaf665b9..359ab80fe8 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -28,11 +28,14 @@ import java.security.CodeSource;
 import java.security.PermissionCollection;
 import java.security.Policy;
 import java.security.cert.Certificate;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.ServletContext;
+import javax.servlet.ServletException;
 
 import org.apache.jasper.Constants;
 import org.apache.jasper.JspCompilationContext;
@@ -176,6 +179,11 @@ public final class JspRuntimeContext {
      */
     private final Map<String,SmapStratum> smaps = new ConcurrentHashMap<>();
 
+    /**
+     * Flag that indicates if a background compilation check is in progress.
+     */
+    private volatile boolean compileCheckInProgress = false;
+
 
     // ------------------------------------------------------ Public Methods
 
@@ -361,6 +369,11 @@ public final class JspRuntimeContext {
             return;
         }
 
+        List<JspServletWrapper> wrappersToReload = new ArrayList<>();
+        // Tell JspServletWrapper to ignore the reload attribute while this
+        // check is in progress. See BZ 62603.
+        compileCheckInProgress = true;
+
         Object [] wrappers = jsps.values().toArray();
         for (int i = 0; i < wrappers.length; i++ ) {
             JspServletWrapper jsw = (JspServletWrapper)wrappers[i];
@@ -370,6 +383,9 @@ public final class JspRuntimeContext {
             synchronized(jsw) {
                 try {
                     ctxt.compile();
+                    if (jsw.getReload()) {
+                        wrappersToReload.add(jsw);
+                    }
                 } catch (FileNotFoundException ex) {
                     ctxt.incrementRemoved();
                 } catch (Throwable t) {
@@ -380,6 +396,31 @@ public final class JspRuntimeContext {
             }
         }
 
+        // See BZ 62603.
+        // OK to process reload flag now.
+        compileCheckInProgress = false;
+        // Ensure all servlets and tags that need to be reloaded, are reloaded.
+        for (JspServletWrapper jsw : wrappersToReload) {
+            // Triggers reload
+            try {
+                if (jsw.isTagFile()) {
+                    // Although this is a public method, all other paths to this
+                    // method use this sync and it is required to prevent race
+                    // conditions during the reload.
+                    synchronized (this) {
+                        jsw.loadTagFile();
+                    }
+                } else {
+                    jsw.getServlet();
+                }
+            } catch (ServletException e) {
+                jsw.getServletContext().log("Servlet reload failed", e);
+            }
+        }
+    }
+
+    public boolean isCompileCheckInProgress() {
+        return compileCheckInProgress;
     }
 
     /**

==================================================
