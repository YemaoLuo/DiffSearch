b0c8fc886e687c24511ada4d466f87ea29d00328
==================================================
Add features to get the statistics of the thread pool of the Receiver component.
==================================================
Keiichi Fujino
==================================================
Fri Apr 14 08:17:17 2017 +0000
==================================================
ReceiverBase.java
Add features to get the statistics of the thread pool of the Receiver component.
These statistics information can be acquired via JMX.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791325 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioReceiverMBean.java
index 36ac789c55..8d82aaa401 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -23,6 +23,7 @@ import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -516,6 +517,55 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
         this.channel = channel;
     }
 
+    // ---------------------------------------------- stats of the thread pool
+    /**
+     * Return the current number of threads that are managed by the pool.
+     * @return the current number of threads that are managed by the pool
+     */
+    public int getPoolSize() {
+        if (executor instanceof ThreadPoolExecutor) {
+            return ((ThreadPoolExecutor) executor).getPoolSize();
+        } else {
+            return -1;
+        }
+    }
+
+    /**
+     * Return the current number of threads that are in use.
+     * @return the current number of threads that are in use
+     */
+    public int getActiveCount() {
+        if (executor instanceof ThreadPoolExecutor) {
+            return ((ThreadPoolExecutor) executor).getActiveCount();
+        } else {
+            return -1;
+        }
+    }
+
+    /**
+     * Return the total number of tasks that have ever been scheduled for execution by the pool.
+     * @return the total number of tasks that have ever been scheduled for execution by the pool
+     */
+    public long getTaskCount() {
+        if (executor instanceof ThreadPoolExecutor) {
+            return ((ThreadPoolExecutor) executor).getTaskCount();
+        } else {
+            return -1;
+        }
+    }
+
+    /**
+     * Return the total number of tasks that have completed execution by the pool.
+     * @return the total number of tasks that have completed execution by the pool
+     */
+    public long getCompletedTaskCount() {
+        if (executor instanceof ThreadPoolExecutor) {
+            return ((ThreadPoolExecutor) executor).getCompletedTaskCount();
+        } else {
+            return -1;
+        }
+    }
+
     // ---------------------------------------------- ThreadFactory Inner Class
     class TaskThreadFactory implements ThreadFactory {
         final ThreadGroup group;

==================================================
