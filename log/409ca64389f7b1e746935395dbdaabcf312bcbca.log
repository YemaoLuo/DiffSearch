409ca64389f7b1e746935395dbdaabcf312bcbca
==================================================
Add a new new cookie option to allow the use of equals signs in cookies. Includes test cases and docs.
==================================================
Mark Emlyn
==================================================
Sat Oct 31 14:09:02 2009 +0000
==================================================
Cookies.java
Add a new new cookie option to allow the use of equals signs in cookies. Includes test cases and docs.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@831544 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCookiesAllowEquals.java
index e45b60d211..12ef857bb9 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -52,6 +52,12 @@ public final class Cookies { // extends MultiMap {
      */
     public static final boolean STRICT_SERVLET_COMPLIANCE;
 
+    /**
+     * If true, cookie values are allowed to contain an equals character without
+     * being quoted.
+     */
+    public static final boolean ALLOW_EQUALS_IN_VALUE;
+    
     /**
      * If set to true, the <code>/</code> character will be treated as a
      * separator. Default is usually false. If STRICT_SERVLET_COMPLIANCE==true
@@ -70,6 +76,10 @@ public final class Cookies { // extends MultiMap {
                 "org.apache.catalina.STRICT_SERVLET_COMPLIANCE",
                 "false")).booleanValue();
         
+        ALLOW_EQUALS_IN_VALUE = Boolean.valueOf(System.getProperty(
+                "org.apache.tomcat.util.http.ServerCookie.ALLOW_EQUALS_IN_VALUE",
+                "false")).booleanValue();
+        
         String  fwdSlashIsSeparator = System.getProperty(
                 "org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR");
         if (fwdSlashIsSeparator == null) {
@@ -588,7 +598,11 @@ public final class Cookies { // extends MultiMap {
      */
     public static final int getTokenEndPosition(byte bytes[], int off, int end){
         int pos = off;
-        while (pos < end && !isSeparator(bytes[pos])) {pos++; }
+        while (pos < end &&
+                (!isSeparator(bytes[pos]) ||
+                        bytes[pos]=='=' && ALLOW_EQUALS_IN_VALUE)) {
+            pos++;
+        }
         
         if (pos > end)
             return end;

==================================================
TestCookiesDisallowEquals.java
new file mode 100644
index 0000000000..225946aebf
--- /dev/null
+++ b/test/org/apache/tomcat/util/http/TestCookiesAllowEquals.java
@@ -0,0 +1,99 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.http;
+
+import java.io.IOException;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.catalina.core.StandardContext;
+import org.apache.catalina.startup.SimpleHttpClient;
+import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.Tomcat;
+
+public class TestCookiesAllowEquals extends TomcatBaseTest{
+
+    private static final String COOKIE_WITH_EQUALS = "name=value=withequals";
+    
+    public void testWithEquals() throws Exception {
+        System.setProperty(
+                "org.apache.tomcat.util.http.ServerCookie.ALLOW_EQUALS_IN_VALUE",
+                "true");
+
+        TestCookieEqualsClient client = new TestCookieEqualsClient();
+        client.doRequest();
+    }
+    
+    private class TestCookieEqualsClient extends SimpleHttpClient {
+
+
+        private void doRequest() throws Exception {
+            Tomcat tomcat = getTomcatInstance();
+            StandardContext root = tomcat.addContext("", TEMP_DIR);
+            Tomcat.addServlet(root, "Simple", new SimpleServlet());
+            root.addServletMapping("/test", "Simple");
+            
+            tomcat.start();
+            // Open connection
+            setPort(tomcat.getConnector().getPort());
+            connect();
+            
+            String[] request = new String[1];
+            request[0] =
+                "GET /test HTTP/1.0" + CRLF +
+                "Cookie: " + COOKIE_WITH_EQUALS + CRLF + CRLF;
+            setRequest(request);
+            processRequest(true); // blocks until response has been read
+            String response = getResponseBody();
+            
+            // Close the connection
+            disconnect();
+            reset();
+            tomcat.stop();
+            assertTrue(response.contains(COOKIE_WITH_EQUALS));
+        }
+        
+        @Override
+        public boolean isResponseBodyOK() {
+            return true;
+        }
+        
+    }
+    
+    
+    private static class SimpleServlet extends HttpServlet {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void service(HttpServletRequest req, HttpServletResponse resp)
+        throws ServletException, IOException {
+            Cookie cookies[] = req.getCookies();
+            for (Cookie cookie : cookies) {
+                resp.getWriter().write(cookie.getName() + "=" +
+                        cookie.getValue() + "\n");
+            }
+            resp.flushBuffer();
+        }
+        
+    }
+    
+}

==================================================
