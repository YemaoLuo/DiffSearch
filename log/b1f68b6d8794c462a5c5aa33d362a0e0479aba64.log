b1f68b6d8794c462a5c5aa33d362a0e0479aba64
==================================================
UCDetector: Remove unused methods
==================================================
Mark Emlyn
==================================================
Tue Feb 19 20:25:03 2013 +0000
==================================================
CallMethodRule.java
UCDetector: Remove unused methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1447899 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FactoryCreateRule.java
index 97e2630df4..59a3ec18bf 100644
--- a/java/org/apache/tomcat/util/digester/CallMethodRule.java
+++ b/java/org/apache/tomcat/util/digester/CallMethodRule.java
@@ -124,45 +124,6 @@ public class CallMethodRule extends Rule {
     }
 
 
-    /**
-     * Construct a "call method" rule with the specified method name.
-     * The method should accept no parameters.
-     *
-     * @param targetOffset location of the target object. Positive numbers are
-     * relative to the top of the digester object stack. Negative numbers
-     * are relative to the bottom of the stack. Zero implies the top
-     * object on the stack.
-     * @param methodName Method name of the parent method to call
-     */
-    public CallMethodRule(int targetOffset, String methodName) {
-
-        this(targetOffset, methodName, 0, (Class[]) null);
-
-    }
-
-
-    /**
-     * Construct a "call method" rule with the specified method name and
-     * parameter types. If <code>paramCount</code> is set to zero the rule
-     * will use the body of this element as the single argument of the
-     * method, unless <code>paramTypes</code> is null or empty, in this
-     * case the rule will call the specified method with no arguments.
-     *
-     * @param methodName Method name of the parent method to call
-     * @param paramCount The number of parameters to collect, or
-     *  zero for a single argument from the body of this element
-     * @param paramTypes The Java class names of the arguments
-     *  (if you wish to use a primitive type, specify the corresponding
-     *  Java wrapper class instead, such as <code>java.lang.Boolean</code>
-     *  for a <code>boolean</code> parameter)
-     */
-    public CallMethodRule(
-                            String methodName,
-                            int paramCount,
-                            String paramTypes[]) {
-        this(0, methodName, paramCount, paramTypes);
-    }
-
     /**
      * Construct a "call method" rule with the specified method name and
      * parameter types. If <code>paramCount</code> is set to zero the rule
@@ -208,29 +169,6 @@ public class CallMethodRule extends Rule {
     }
 
 
-    /**
-     * Construct a "call method" rule with the specified method name and
-     * parameter types. If <code>paramCount</code> is set to zero the rule
-     * will use the body of this element as the single argument of the
-     * method, unless <code>paramTypes</code> is null or empty, in this
-     * case the rule will call the specified method with no arguments.
-     *
-     * @param methodName Method name of the parent method to call
-     * @param paramCount The number of parameters to collect, or
-     *  zero for a single argument from the body of this element
-     * @param paramTypes The Java classes that represent the
-     *  parameter types of the method arguments
-     *  (if you wish to use a primitive type, specify the corresponding
-     *  Java wrapper class instead, such as <code>java.lang.Boolean.TYPE</code>
-     *  for a <code>boolean</code> parameter)
-     */
-    public CallMethodRule(
-                            String methodName,
-                            int paramCount,
-                            Class<?> paramTypes[]) {
-        this(0, methodName, paramCount, paramTypes);
-    }
-
     /**
      * Construct a "call method" rule with the specified method name and
      * parameter types. If <code>paramCount</code> is set to zero the rule

==================================================
SetNextRule.java
index a9542b1b17..15dfe4ccba 100644
--- a/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
@@ -44,90 +44,6 @@ public class FactoryCreateRule extends Rule {
     // ----------------------------------------------------------- Constructors
 
 
-    /**
-     * <p>Construct a factory create rule that will use the specified
-     * class name to create an {@link ObjectCreationFactory} which will
-     * then be used to create an object and push it on the stack.</p>
-     *
-     * <p>Exceptions thrown during the object creation process will be propagated.</p>
-     *
-     * @param className Java class name of the object creation factory class
-     */
-    public FactoryCreateRule(String className) {
-
-        this(className, false);
-
-    }
-
-
-    /**
-     * <p>Construct a factory create rule that will use the specified
-     * class to create an {@link ObjectCreationFactory} which will
-     * then be used to create an object and push it on the stack.</p>
-     *
-     * <p>Exceptions thrown during the object creation process will be propagated.</p>
-     *
-     * @param clazz Java class name of the object creation factory class
-     */
-    public FactoryCreateRule(Class<?> clazz) {
-
-        this(clazz, false);
-
-    }
-
-
-    /**
-     * <p>Construct a factory create rule that will use the specified
-     * class name (possibly overridden by the specified attribute if present)
-     * to create an {@link ObjectCreationFactory}, which will then be used
-     * to instantiate an object instance and push it onto the stack.</p>
-     *
-     * <p>Exceptions thrown during the object creation process will be propagated.</p>
-     *
-     * @param className Default Java class name of the factory class
-     * @param attributeName Attribute name which, if present, contains an
-     *  override of the class name of the object creation factory to create.
-     */
-    public FactoryCreateRule(String className, String attributeName) {
-
-        this(className, attributeName, false);
-
-    }
-
-
-    /**
-     * <p>Construct a factory create rule that will use the specified
-     * class (possibly overridden by the specified attribute if present)
-     * to create an {@link ObjectCreationFactory}, which will then be used
-     * to instantiate an object instance and push it onto the stack.</p>
-     *
-     * <p>Exceptions thrown during the object creation process will be propagated.</p>
-     *
-     * @param clazz Default Java class name of the factory class
-     * @param attributeName Attribute name which, if present, contains an
-     *  override of the class name of the object creation factory to create.
-     */
-    public FactoryCreateRule(Class<?> clazz, String attributeName) {
-
-        this(clazz, attributeName, false);
-
-    }
-
-
-    /**
-     * <p>Construct a factory create rule using the given, already instantiated,
-     * {@link ObjectCreationFactory}.</p>
-     *
-     * <p>Exceptions thrown during the object creation process will be propagated.</p>
-     *
-     * @param creationFactory called on to create the object.
-     */
-    public FactoryCreateRule(ObjectCreationFactory creationFactory) {
-
-        this(creationFactory, false);
-
-    }
-
     /**
      * Construct a factory create rule that will use the specified
      * class name to create an {@link ObjectCreationFactory} which will

==================================================
SetPropertiesRule.java
index d4c8e2f5ec..cb03520986 100644
--- a/java/org/apache/tomcat/util/digester/SetNextRule.java
+++ b/java/org/apache/tomcat/util/digester/SetNextRule.java
@@ -34,50 +34,8 @@ import org.apache.tomcat.util.IntrospectionUtils;
 
 public class SetNextRule extends Rule {
 
-
     // ----------------------------------------------------------- Constructors
 
-
-    /**
-     * Construct a "set next" rule with the specified method name.  The
-     * method's argument type is assumed to be the class of the
-     * child object.
-     *
-     * @param digester The associated Digester
-     * @param methodName Method name of the parent method to call
-     *
-     * @deprecated The digester instance is now set in the {@link Digester#addRule} method.
-     * Use {@link #SetNextRule(String methodName)} instead.
-     */
-    @Deprecated
-    public SetNextRule(Digester digester, String methodName) {
-
-        this(methodName);
-
-    }
-
-
-    /**
-     * Construct a "set next" rule with the specified method name.
-     *
-     * @param digester The associated Digester
-     * @param methodName Method name of the parent method to call
-     * @param paramType Java class of the parent method's argument
-     *  (if you wish to use a primitive type, specify the corresponding
-     *  Java wrapper class instead, such as <code>java.lang.Boolean</code>
-     *  for a <code>boolean</code> parameter)
-     *
-     * @deprecated The digester instance is now set in the {@link Digester#addRule} method.
-     * Use {@link #SetNextRule(String methodName,String paramType)} instead.
-     */
-    @Deprecated
-    public SetNextRule(Digester digester, String methodName,
-                       String paramType) {
-
-        this(methodName, paramType);
-
-    }
-
     /**
      * Construct a "set next" rule with the specified method name.  The
      * method's argument type is assumed to be the class of the

==================================================
SetPropertyRule.java
index 013b33652c..7182b9ccaa 100644
--- a/java/org/apache/tomcat/util/digester/SetPropertiesRule.java
+++ b/java/org/apache/tomcat/util/digester/SetPropertiesRule.java
@@ -36,26 +36,9 @@ import org.xml.sax.Attributes;
 
 public class SetPropertiesRule extends Rule {
 
-
     // ----------------------------------------------------------- Constructors
 
 
-    /**
-     * Default constructor sets only the the associated Digester.
-     *
-     * @param digester The digester with which this rule is associated
-     *
-     * @deprecated The digester instance is now set in the {@link Digester#addRule} method.
-     * Use {@link #SetPropertiesRule()} instead.
-     */
-    @Deprecated
-    public SetPropertiesRule(Digester digester) {
-
-        this();
-
-    }
-
-
     /**
      * Base constructor.
      */
@@ -224,42 +207,6 @@ public class SetPropertiesRule extends Rule {
     }
 
 
-    /**
-     * <p>Add an additional attribute name to property name mapping.
-     * This is intended to be used from the xml rules.
-     */
-    public void addAlias(String attributeName, String propertyName) {
-
-        // this is a bit tricky.
-        // we'll need to resize the array.
-        // probably should be synchronized but digester's not thread safe anyway
-        if (attributeNames == null) {
-
-            attributeNames = new String[1];
-            attributeNames[0] = attributeName;
-            propertyNames = new String[1];
-            propertyNames[0] = propertyName;
-
-        } else {
-            int length = attributeNames.length;
-            String [] tempAttributes = new String[length + 1];
-            for (int i=0; i<length; i++) {
-                tempAttributes[i] = attributeNames[i];
-            }
-            tempAttributes[length] = attributeName;
-
-            String [] tempProperties = new String[length + 1];
-            for (int i=0; i<length && i< propertyNames.length; i++) {
-                tempProperties[i] = propertyNames[i];
-            }
-            tempProperties[length] = propertyName;
-
-            propertyNames = tempProperties;
-            attributeNames = tempAttributes;
-        }
-    }
-
-
     /**
      * Render a printable version of this Rule.
      */
@@ -271,6 +218,4 @@ public class SetPropertiesRule extends Rule {
         return (sb.toString());
 
     }
-
-
 }

==================================================
SetRootRule.java
index bee1d0a0de..00e0ca781f 100644
--- a/java/org/apache/tomcat/util/digester/SetPropertyRule.java
+++ b/java/org/apache/tomcat/util/digester/SetPropertyRule.java
@@ -30,30 +30,8 @@ import org.xml.sax.Attributes;
 
 public class SetPropertyRule extends Rule {
 
-
     // ----------------------------------------------------------- Constructors
 
-
-    /**
-     * Construct a "set property" rule with the specified name and value
-     * attributes.
-     *
-     * @param digester The digester with which this rule is associated
-     * @param name Name of the attribute that will contain the name of the
-     *  property to be set
-     * @param value Name of the attribute that will contain the value to which
-     *  the property should be set
-     *
-     * @deprecated The digester instance is now set in the {@link Digester#addRule} method.
-     * Use {@link #SetPropertyRule(String name, String value)} instead.
-     */
-    @Deprecated
-    public SetPropertyRule(Digester digester, String name, String value) {
-
-        this(name, value);
-
-    }
-
     /**
      * Construct a "set property" rule with the specified name and value
      * attributes.

==================================================
SetTopRule.java
index 722121677a..49496e196c 100644
--- a/java/org/apache/tomcat/util/digester/SetRootRule.java
+++ b/java/org/apache/tomcat/util/digester/SetRootRule.java
@@ -34,50 +34,8 @@ import org.apache.tomcat.util.IntrospectionUtils;
 
 public class SetRootRule extends Rule {
 
-
     // ----------------------------------------------------------- Constructors
 
-
-    /**
-     * Construct a "set root" rule with the specified method name.  The
-     * method's argument type is assumed to be the class of the
-     * child object.
-     *
-     * @param digester The associated Digester
-     * @param methodName Method name of the parent method to call
-     *
-     * @deprecated The digester instance is now set in the {@link Digester#addRule} method.
-     * Use {@link #SetRootRule(String methodName)} instead.
-     */
-    @Deprecated
-    public SetRootRule(Digester digester, String methodName) {
-
-        this(methodName);
-
-    }
-
-
-    /**
-     * Construct a "set root" rule with the specified method name.
-     *
-     * @param digester The associated Digester
-     * @param methodName Method name of the parent method to call
-     * @param paramType Java class of the parent method's argument
-     *  (if you wish to use a primitive type, specify the corresponding
-     *  Java wrapper class instead, such as <code>java.lang.Boolean</code>
-     *  for a <code>boolean</code> parameter)
-     *
-     * @deprecated The digester instance is now set in the {@link Digester#addRule} method.
-     * Use {@link #SetRootRule(String methodName,String paramType)} instead.
-     */
-    @Deprecated
-    public SetRootRule(Digester digester, String methodName,
-                       String paramType) {
-
-        this(methodName, paramType);
-
-    }
-
     /**
      * Construct a "set root" rule with the specified method name.  The
      * method's argument type is assumed to be the class of the

==================================================
