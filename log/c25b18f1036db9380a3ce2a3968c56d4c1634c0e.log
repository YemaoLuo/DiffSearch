c25b18f1036db9380a3ce2a3968c56d4c1634c0e
==================================================
Align names between 7.0.x and 8.0.x
==================================================
Mark Emlyn
==================================================
Fri Dec 27 14:38:46 2013 +0000
==================================================
WebResourceRoot.java
Align names between 7.0.x and 8.0.x

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1553679 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index 94dd9f65a2..5ace0b65ff 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -349,10 +349,10 @@ public interface WebResourceRoot extends Lifecycle {
      * Set the maximum permitted size for a single object in the cache. Note
      * that the maximum size in bytes may not exceed {@link Integer#MAX_VALUE}.
      *
-     * @param cacheMaxObjectSize    Maximum size for a single cached object in
+     * @param cacheObjectMaxSize    Maximum size for a single cached object in
      *                              kilobytes
      */
-    void setCacheMaxObjectSize(int cacheMaxObjectSize);
+    void setCacheObjectMaxSize(int cacheObjectMaxSize);
 
     /**
      * Get the maximum permitted size for a single object in the cache. Note
@@ -360,7 +360,7 @@ public interface WebResourceRoot extends Lifecycle {
      *
      * @return  Maximum size for a single cached object in kilobytes
      */
-    int getCacheMaxObjectSize();
+    int getCacheObjectMaxSize();
 
     /**
      * Controls whether the trace locked files feature is enabled. If enabled,

==================================================
Cache.java
index b41e72742f..c4f3e3f293 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -4912,7 +4912,7 @@ public class StandardContext extends ContainerBase
         resources.setCachingAllowed(isCachingAllowed());
         resources.setCacheTtl(getCacheTTL());
         resources.setCacheMaxSize(getCacheMaxSize());
-        resources.setCacheMaxObjectSize(getCacheObjectMaxSize());
+        resources.setCacheObjectMaxSize(getCacheObjectMaxSize());
 
         // May have been started (but not fully configured) in init() so no need
         // to start the resources if they are already available

==================================================
CachedResource.java
index 44df51a3d5..b1250a456c 100644
--- a/java/org/apache/catalina/webresources/Cache.java
+++ b/java/org/apache/catalina/webresources/Cache.java
@@ -42,7 +42,7 @@ public class Cache {
 
     private long ttl = 5000;
     private long maxSize = 10 * 1024 * 1024;
-    private int maxObjectSize =
+    private int objectMaxSize =
             (int) (maxSize / 20 > Integer.MAX_VALUE ? Integer.MAX_VALUE : maxSize / 20);
 
     private AtomicLong lookupCount = new AtomicLong(0);
@@ -72,9 +72,9 @@ public class Cache {
 
         if (cacheEntry == null) {
             // Local copy to ensure consistency
-            int maxObjectSizeBytes = getMaxObjectSizeBytes();
+            int objectMaxSizeBytes = getObjectMaxSizeBytes();
             CachedResource newCacheEntry =
-                    new CachedResource(root, path, getTtl(), maxObjectSizeBytes);
+                    new CachedResource(root, path, getTtl(), objectMaxSizeBytes);
 
             // Concurrent callers will end up with the same CachedResource
             // instance
@@ -211,23 +211,22 @@ public class Cache {
         return hitCount.get();
     }
 
-    public void setMaxObjectSize(int maxObjectSize) {
-        if (maxObjectSize * 1024L > Integer.MAX_VALUE) {
-            log.warn(sm.getString("cache.maxObjectSizeTooBig",
-                    Integer.valueOf(maxObjectSize)));
-            this.maxObjectSize = Integer.MAX_VALUE;
+    public void setObjectMaxSize(int objectMaxSize) {
+        if (objectMaxSize * 1024L > Integer.MAX_VALUE) {
+            log.warn(sm.getString("cache.objectMaxSizeTooBig", Integer.valueOf(objectMaxSize)));
+            this.objectMaxSize = Integer.MAX_VALUE;
         }
         // Internally bytes, externally kilobytes
-        this.maxObjectSize = maxObjectSize * 1024;
+        this.objectMaxSize = objectMaxSize * 1024;
     }
 
-    public int getMaxObjectSize() {
+    public int getObjectMaxSize() {
         // Internally bytes, externally kilobytes
-        return maxObjectSize / 1024;
+        return objectMaxSize / 1024;
     }
 
-    public int getMaxObjectSizeBytes() {
-        return maxObjectSize;
+    public int getObjectMaxSizeBytes() {
+        return objectMaxSize;
     }
 
     public void clear() {

==================================================
StandardRoot.java
index 3fe4b3d0ea..2fdc35e175 100644
--- a/java/org/apache/catalina/webresources/LocalStrings.properties
+++ b/java/org/apache/catalina/webresources/LocalStrings.properties
@@ -18,7 +18,7 @@ abstractResource.getContentTooLarge=Unable to return [{0}] as a byte array since
 
 cache.addFail=Unable to add the resource at [{0}] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache
 cache.backgroundEvictFail=The background cache eviction process was unable to free [{0}] percent of the cache for Context [{1}] - consider increasing the maximum size of the cache. After eviction approximately [{2}] KB of data remained in the cache.
-cache.maxObjectSizeTooBig=The value specified for the maximum object size to cache [{0}]kB is greater than Integer.MAX_VALUE bytes which is the maximum size that can be cached. The limit will be set to Integer.MAX_VALUE bytes.
+cache.objectMaxSizeTooBig=The value specified for the maximum object size to cache [{0}]kB is greater than Integer.MAX_VALUE bytes which is the maximum size that can be cached. The limit will be set to Integer.MAX_VALUE bytes.
 
 dirResourceSet.writeExists=The target of the write already exists
 dirResourceSet.writeNpe=The input stream may not be null

==================================================
TesterWebResourceRoot.java
index 5aee8df7db..3e87aa93b0 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -464,13 +464,13 @@ public class StandardRoot extends LifecycleMBeanBase
     }
 
     @Override
-    public void setCacheMaxObjectSize(int cacheMaxObjectSize) {
-        cache.setMaxObjectSize(cacheMaxObjectSize);
+    public void setCacheObjectMaxSize(int cacheObjectMaxSize) {
+        cache.setObjectMaxSize(cacheObjectMaxSize);
     }
 
     @Override
-    public int getCacheMaxObjectSize() {
-        return cache.getMaxObjectSize();
+    public int getCacheObjectMaxSize() {
+        return cache.getObjectMaxSize();
     }
 
     @Override

==================================================
