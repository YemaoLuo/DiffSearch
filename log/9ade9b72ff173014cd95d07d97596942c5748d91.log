9ade9b72ff173014cd95d07d97596942c5748d91
==================================================
Make the time the internal executor waits for request processing threads to terminate before continuing with the connector stop process configurable.
==================================================
Mark Emlyn
==================================================
Wed Nov 6 20:17:24 2013 +0000
==================================================
AbstractEndpoint.java
Make the time the internal executor waits for request processing threads to terminate before continuing with the connector stop process configurable.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1539452 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JIoEndpoint.java
index 206aeeaa57..0c19f68391 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -135,6 +135,7 @@ public abstract class AbstractEndpoint<S> {
      */
     protected volatile boolean internalExecutor = false;
 
+
     /**
      * counter for nr of connections handled by an endpoint
      */
@@ -156,10 +157,27 @@ public abstract class AbstractEndpoint<S> {
 
     // ----------------------------------------------------------------- Properties
 
+    /**
+     * Time to wait for the internal executor (if used) to terminate when the
+     * endpoint is stopped in milliseconds. Defaults to 5000 (5 seconds).
+     */
+    private long executorTerminationTimeoutMillis = 5000;
+
+    public long getExecutorTerminationTimeoutMillis() {
+        return executorTerminationTimeoutMillis;
+    }
+
+    public void setExecutorTerminationTimeoutMillis(
+            long executorTerminationTimeoutMillis) {
+        this.executorTerminationTimeoutMillis = executorTerminationTimeoutMillis;
+    }
+
+
     /**
      * Acceptor thread count.
      */
     protected int acceptorThreadCount = 0;
+
     public void setAcceptorThreadCount(int acceptorThreadCount) {
         this.acceptorThreadCount = acceptorThreadCount;
     }
@@ -521,7 +539,8 @@ public abstract class AbstractEndpoint<S> {
                 ThreadPoolExecutor tpe = (ThreadPoolExecutor) executor;
                 tpe.shutdownNow();
                 try {
-                    tpe.awaitTermination(5000, TimeUnit.MILLISECONDS);
+                    tpe.awaitTermination(getExecutorTerminationTimeoutMillis(),
+                            TimeUnit.MILLISECONDS);
                 } catch (InterruptedException e) {
                     // Ignore
                 }

==================================================
