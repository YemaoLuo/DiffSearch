2baf6cbac68e806c62fec9a8f5884c4a5c11beae
==================================================
Implement notification of open and close for WebSocket connections.
==================================================
Mark Emlyn
==================================================
Fri Mar 2 19:07:01 2012 +0000
==================================================
StreamInbound.java
Implement notification of open and close for WebSocket connections.
Patch provided by Johno Crawford.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1296388 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index e6d1c4b3c9..aaa149d04b 100644
--- a/java/org/apache/catalina/websocket/StreamInbound.java
+++ b/java/org/apache/catalina/websocket/StreamInbound.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
+import java.nio.ByteBuffer;
 import java.nio.charset.MalformedInputException;
 import java.nio.charset.UnmappableCharacterException;
 
@@ -113,7 +114,7 @@ public abstract class StreamInbound implements UpgradeInbound {
             try {
                 // TODO User defined extensions may define values for rsv
                 if (frame.getRsv() > 0) {
-                    getWsOutbound().close(
+                    closeOutboundConnection(
                             Constants.STATUS_PROTOCOL_ERROR, null);
                     return SocketState.CLOSED;
                 }
@@ -127,7 +128,7 @@ public abstract class StreamInbound implements UpgradeInbound {
                             new InputStreamReader(wsIs, new Utf8Decoder());
                     onTextData(r);
                 } else if (opCode == Constants.OPCODE_CLOSE){
-                    getWsOutbound().close(frame);
+                    closeOutboundConnection(frame);
                     return SocketState.CLOSED;
                 } else if (opCode == Constants.OPCODE_PING) {
                     getWsOutbound().pong(frame.getPayLoad());
@@ -135,22 +136,22 @@ public abstract class StreamInbound implements UpgradeInbound {
                     // NO-OP
                 } else {
                     // Unknown OpCode
-                    getWsOutbound().close(
+                    closeOutboundConnection(
                             Constants.STATUS_PROTOCOL_ERROR, null);
                     return SocketState.CLOSED;
                 }
             } catch (MalformedInputException mie) {
                 // Invalid UTF-8
-                getWsOutbound().close(Constants.STATUS_BAD_DATA, null);
+                closeOutboundConnection(Constants.STATUS_BAD_DATA, null);
                 return SocketState.CLOSED;
             } catch (UnmappableCharacterException uce) {
                 // Invalid UTF-8
-                getWsOutbound().close(Constants.STATUS_BAD_DATA, null);
+                closeOutboundConnection(Constants.STATUS_BAD_DATA, null);
                 return SocketState.CLOSED;
             } catch (IOException ioe) {
                 // Given something must have gone to reach this point, this
                 // might not work but try it anyway.
-                getWsOutbound().close(Constants.STATUS_PROTOCOL_ERROR, null);
+                closeOutboundConnection(Constants.STATUS_PROTOCOL_ERROR, null);
                 return SocketState.CLOSED;
             }
             frame = wsIs.nextFrame(false);
@@ -158,6 +159,49 @@ public abstract class StreamInbound implements UpgradeInbound {
         return SocketState.UPGRADED;
     }
 
+    private void closeOutboundConnection(int status, ByteBuffer data) throws IOException {
+        try {
+            getWsOutbound().close(status, data);
+        } finally {
+            onClose(status);
+        }
+    }
+
+    private void closeOutboundConnection(WsFrame frame) throws IOException {
+        try {
+            getWsOutbound().close(frame);
+        } finally {
+            onClose(Constants.OPCODE_CLOSE);
+        }
+    }
+
+    @Override
+    public void onUpgradeComplete() {
+        onOpen(outbound);
+    }
+
+    /**
+     * Intended to be overridden by sub-classes that wish to be notified
+     * when the outbound connection is established. The default implementation
+     * is a NO-OP.
+     *
+     * @param outbound    The outbound WebSocket connection.
+     */
+    protected void onOpen(WsOutbound outbound) {
+        // NO-OP
+    }
+
+    /**
+     * Intended to be overridden by sub-classes that wish to be notified
+     * when the outbound connection is closed. The default implementation
+     * is a NO-OP.
+     *
+     * @param status    The status code of the close reason.
+     */
+    protected void onClose(int status) {
+        // NO-OP
+    }
+
 
     /**
      * This method is called when there is a binary WebSocket message available

==================================================
UpgradeInbound.java
index 54aa6bf5ad..7ae27a0d2e 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -571,6 +571,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                         release(socket, processor, false, false);
                         // Create the light-weight upgrade processor
                         processor = createUpgradeProcessor(socket, inbound);
+                        inbound.onUpgradeComplete();
                     }
                 } while (state == SocketState.ASYNC_END ||
                         state == SocketState.UPGRADING);

==================================================
