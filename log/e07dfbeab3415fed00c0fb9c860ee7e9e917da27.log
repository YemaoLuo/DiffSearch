e07dfbeab3415fed00c0fb9c860ee7e9e917da27
==================================================
Refactoring towards v014 API (not yet complete)
==================================================
Mark Emlyn
==================================================
Tue Mar 5 16:12:30 2013 +0000
==================================================
ClientEndpointConfig.java
Refactoring towards v014 API (not yet complete)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1452873 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DefaultClientEndpointConfig.java
index 515e3771d7..92393683bb 100644
--- a/java/javax/websocket/ClientEndpointConfig.java
+++ b/java/javax/websocket/ClientEndpointConfig.java
@@ -46,8 +46,10 @@ public interface ClientEndpointConfig extends EndpointConfig {
         private Configurator configurator = DEFAULT_CONFIGURATOR;
         private List<String> preferredSubprotocols = Collections.EMPTY_LIST;
         private List<Extension> extensions = Collections.EMPTY_LIST;
-        private List<Encoder> encoders = Collections.EMPTY_LIST;
-        private List<Decoder> decoders = Collections.EMPTY_LIST;
+        private List<Class<? extends Encoder>> encoders =
+                Collections.EMPTY_LIST;
+        private List<Class<? extends Decoder>> decoders =
+                Collections.EMPTY_LIST;
 
 
         public ClientEndpointConfig build() {
@@ -90,7 +92,7 @@ public interface ClientEndpointConfig extends EndpointConfig {
         }
 
 
-        public Builder encoders(List<Encoder> encoders) {
+        public Builder encoders(List<Class<? extends Encoder>> encoders) {
             if (encoders == null || encoders.size() == 0) {
                 this.encoders = Collections.EMPTY_LIST;
             } else {
@@ -100,7 +102,7 @@ public interface ClientEndpointConfig extends EndpointConfig {
         }
 
 
-        public Builder decoders(List<Decoder> decoders) {
+        public Builder decoders(List<Class<? extends Decoder>> decoders) {
             if (decoders == null || decoders.size() == 0) {
                 this.decoders = Collections.EMPTY_LIST;
             } else {

==================================================
EndpointConfig.java
index 8e75ae26f9..4c54bdaed2 100644
--- a/java/javax/websocket/DefaultClientEndpointConfig.java
+++ b/java/javax/websocket/DefaultClientEndpointConfig.java
@@ -24,15 +24,17 @@ final class DefaultClientEndpointConfig implements ClientEndpointConfig {
 
     private final List<String> preferredSubprotocols;
     private final List<Extension> extensions;
-    private final List<Encoder> encoders;
-    private final List<Decoder> decoders;
+    private final List<Class<? extends Encoder>> encoders;
+    private final List<Class<? extends Decoder>> decoders;
     private final Map<String,Object> userProperties = new HashMap<>();
     private final Configurator configurator;
 
 
     DefaultClientEndpointConfig(List<String> preferredSubprotocols,
-            List<Extension> extensions, List<Encoder> encoders,
-            List<Decoder> decoders, Configurator configurator) {
+            List<Extension> extensions,
+            List<Class<? extends Encoder>> encoders,
+            List<Class<? extends Decoder>> decoders,
+            Configurator configurator) {
         this.preferredSubprotocols = preferredSubprotocols;
         this.extensions = extensions;
         this.decoders = decoders;
@@ -54,13 +56,13 @@ final class DefaultClientEndpointConfig implements ClientEndpointConfig {
 
 
     @Override
-    public List<Encoder> getEncoders() {
+    public List<Class<? extends Encoder>> getEncoders() {
         return encoders;
     }
 
 
     @Override
-    public List<Decoder> getDecoders() {
+    public List<Class<? extends Decoder>> getDecoders() {
         return decoders;
     }
 

==================================================
DefaultServerEndpointConfiguration.java
index edefe3d508..0b6c96818d 100644
--- a/java/javax/websocket/EndpointConfig.java
+++ b/java/javax/websocket/EndpointConfig.java
@@ -21,9 +21,9 @@ import java.util.Map;
 
 public interface EndpointConfig {
 
-    List<Encoder> getEncoders();
+    List<Class<? extends Encoder>> getEncoders();
 
-    List<Decoder> getDecoders();
+    List<Class<? extends Decoder>> getDecoders();
 
     Map<String,Object> getUserProperties();
 }

==================================================
ServerEndpointConfigurationBuilder.java
index 0285d44380..6cff5b1d3d 100644
--- a/java/javax/websocket/server/DefaultServerEndpointConfiguration.java
+++ b/java/javax/websocket/server/DefaultServerEndpointConfiguration.java
@@ -34,15 +34,16 @@ public class DefaultServerEndpointConfiguration
     private final String path;
     private final List<String> subprotocols;
     private final List<Extension> extensions;
-    private final List<Encoder> encoders;
-    private final List<Decoder> decoders;
+    private final List<Class<? extends Encoder>> encoders;
+    private final List<Class<? extends Decoder>> decoders;
     private final ServerEndpointConfigurator serverEndpointConfigurator;
     private final Map<String,Object> userProperties = new HashMap<>();
 
     DefaultServerEndpointConfiguration(
             Class<?> endpointClass, String path,
             List<String> subprotocols, List<Extension> extensions,
-            List<Encoder> encoders, List<Decoder> decoders,
+            List<Class<? extends Encoder>> encoders,
+            List<Class<? extends Decoder>> decoders,
             ServerEndpointConfigurator serverEndpointConfigurator) {
         this.endpointClass = endpointClass;
         this.path = path;
@@ -59,12 +60,12 @@ public class DefaultServerEndpointConfiguration
     }
 
     @Override
-    public List<Encoder> getEncoders() {
+    public List<Class<? extends Encoder>> getEncoders() {
         return this.encoders;
     }
 
     @Override
-    public List<Decoder> getDecoders() {
+    public List<Class<? extends Decoder>> getDecoders() {
         return this.decoders;
     }
 

==================================================
Util.java
index 05fc48a557..1a8520b839 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -36,6 +36,7 @@ wsRemoteEndpoint.changeType=When sending a fragmented message, all fragments bus
 wsRemoteEndpoint.concurrentMessageSend=Messages may not be sent concurrently even when using the asynchronous send messages. The client must wait for the previous message to complete before sending the next.
 wsRemoteEndpoint.flushOnCloseFailed=Flushing batched messages before closing the session failed
 wsRemoteEndpoint.inProgress=Message will not be sent because the WebSocket session is currently sending another message
+wsRemoteEndpoint.invalidEncoder=The specified encoder of type [{0}] could not be instantiated
 wsRemoteEndpoint.noEncoder=No encoder specified for object of class [{0}]
 
 # Note the following message is used as a close reason in a WebSocket control

==================================================
WsRemoteEndpointImplBase.java
index e1b4646995..2e34c87d27 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -142,9 +142,8 @@ class Util {
     }
 
 
-    static Class<?> getEncoderType(Encoder encoder) {
-        return (Class<?>) Util.getGenericType(Encoder.class,
-                encoder.getClass());
+    static Class<?> getEncoderType(Class<? extends Encoder> encoder) {
+        return (Class<?>) Util.getGenericType(Encoder.class, encoder);
     }
 
 

==================================================
WsSession.java
index 084c6ada71..82ef05ad23 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -35,6 +35,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import javax.websocket.DeploymentException;
 import javax.websocket.EncodeException;
 import javax.websocket.Encoder;
 import javax.websocket.RemoteEndpoint;
@@ -453,11 +454,20 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
     }
 
 
-    protected void setEncoders(List<Encoder> encoders) {
+    protected void setEncoders(List<Class<? extends Encoder>> encoders)
+            throws DeploymentException {
         encoderEntries.clear();
-        for (Encoder encoder : encoders) {
-            EncoderEntry entry =
-                    new EncoderEntry(Util.getEncoderType(encoder), encoder);
+        for (Class<? extends Encoder> encoderClazz : encoders) {
+            Encoder instance;
+            try {
+                instance = encoderClazz.newInstance();
+            } catch (InstantiationException | IllegalAccessException e) {
+                throw new DeploymentException(
+                        sm.getString("wsRemoteEndpoint.invalidEncoder",
+                                encoderClazz.getName()), e);
+            }
+            EncoderEntry entry = new EncoderEntry(
+                    Util.getEncoderType(encoderClazz), instance);
             encoderEntries.add(entry);
         }
     }

==================================================
WsProtocolHandler.java
index 93d75fc56d..e273c457f5 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -31,6 +31,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
+import javax.websocket.DeploymentException;
 import javax.websocket.Encoder;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
@@ -85,13 +86,15 @@ public class WsSession implements Session {
      *
      * @param localEndpoint
      * @param wsRemoteEndpoint
+     * @throws DeploymentException
      */
     public WsSession(Endpoint localEndpoint,
             WsRemoteEndpointImplBase wsRemoteEndpoint,
             WsWebSocketContainer wsWebSocketContainer,
             WsRequest request, String subProtocol,
             Map<String,String> pathParameters,
-            boolean secure, List<Encoder> encoders) {
+            boolean secure, List<Class<? extends Encoder>> encoders)
+                    throws DeploymentException {
         this.localEndpoint = localEndpoint;
         this.wsRemoteEndpoint = wsRemoteEndpoint;
         this.wsRemoteEndpoint.setSession(this);

==================================================
TestUtil.java
index 751fbd8e97..f00d631b88 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -28,6 +28,7 @@ import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.WebConnection;
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
+import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfig;
 
@@ -105,6 +106,8 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
                     new WsWriteListener(this, wsRemoteEndpointServer));
             ep.onOpen(wsSession, endpointConfig);
             webSocketContainer.registerSession(ep.getClass(), wsSession);
+        } catch (DeploymentException e) {
+            throw new IllegalArgumentException(e);
         } finally {
             t.setContextClassLoader(cl);
         }

==================================================
