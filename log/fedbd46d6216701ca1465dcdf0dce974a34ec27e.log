fedbd46d6216701ca1465dcdf0dce974a34ec27e
==================================================
Loggers should be final
==================================================
Mark Emlyn
==================================================
Mon Nov 9 20:51:17 2009 +0000
==================================================
AuthenticatorBase.java
Loggers should be final

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@834226 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index f85e39b5c9..a84bfaae73 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -77,7 +77,7 @@ import org.apache.juli.logging.LogFactory;
 public abstract class AuthenticatorBase
     extends ValveBase
     implements Authenticator, Lifecycle {
-    private static Log log = LogFactory.getLog(AuthenticatorBase.class);
+    private static final Log log = LogFactory.getLog(AuthenticatorBase.class);
 
 
     //------------------------------------------------------ Constructor

==================================================
DigestAuthenticator.java
index 43381b6528..b14032d20f 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -47,7 +47,7 @@ import org.apache.tomcat.util.buf.MessageBytes;
 
 public class BasicAuthenticator
     extends AuthenticatorBase {
-    private static Log log = LogFactory.getLog(BasicAuthenticator.class);
+    private static final Log log = LogFactory.getLog(BasicAuthenticator.class);
 
 
 

==================================================
FormAuthenticator.java
index 10e4398faf..bef80fe438 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -49,7 +49,7 @@ import org.apache.juli.logging.LogFactory;
 
 public class DigestAuthenticator
     extends AuthenticatorBase {
-    private static Log log = LogFactory.getLog(DigestAuthenticator.class);
+    private static final Log log = LogFactory.getLog(DigestAuthenticator.class);
 
 
     // -------------------------------------------------------------- Constants

==================================================
Connector.java
index b67c50632a..8f12842b4e 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -56,7 +56,7 @@ import org.apache.tomcat.util.http.MimeHeaders;
 public class FormAuthenticator
     extends AuthenticatorBase {
     
-    private static Log log = LogFactory.getLog(FormAuthenticator.class);
+    private static final Log log = LogFactory.getLog(FormAuthenticator.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
CoyoteAdapter.java
index fe7be66f16..1a4571c2ab 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -56,7 +56,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public class Connector
     implements Lifecycle, MBeanRegistration
 {
-    private static Log log = LogFactory.getLog(Connector.class);
+    private static final Log log = LogFactory.getLog(Connector.class);
 
 
     /**

==================================================
MapperListener.java
index 16c1d4235c..026c129c5e 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -57,7 +57,7 @@ import org.apache.tomcat.util.net.SocketStatus;
 public class CoyoteAdapter
     implements Adapter 
  {
-    private static Log log = LogFactory.getLog(CoyoteAdapter.class);
+    private static final Log log = LogFactory.getLog(CoyoteAdapter.class);
 
     // -------------------------------------------------------------- Constants
 

==================================================
ApplicationDispatcher.java
index 089e29f413..16343ec1d8 100644
--- a/java/org/apache/catalina/connector/MapperListener.java
+++ b/java/org/apache/catalina/connector/MapperListener.java
@@ -53,7 +53,7 @@ public class MapperListener
  {
 
 
-    private static Log log = LogFactory.getLog(MapperListener.class);
+    private static final Log log = LogFactory.getLog(MapperListener.class);
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
AprLifecycleListener.java
index 037ba8c3fc..ac561749e9 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -68,7 +68,7 @@ import org.apache.tomcat.util.res.StringManager;
 final class ApplicationDispatcher
     implements RequestDispatcher {
 
-    protected static Log log = LogFactory.getLog(ApplicationDispatcher.class);
+    protected static final Log log = LogFactory.getLog(ApplicationDispatcher.class);
 
     protected class PrivilegedForward
             implements PrivilegedExceptionAction<Void> {

==================================================
AsyncContextImpl.java
index 6ea8f508b1..455018ebf5 100644
--- a/java/org/apache/catalina/core/AprLifecycleListener.java
+++ b/java/org/apache/catalina/core/AprLifecycleListener.java
@@ -44,7 +44,7 @@ import org.apache.tomcat.jni.Library;
 public class AprLifecycleListener
     implements LifecycleListener {
 
-    private static Log log = LogFactory.getLog(AprLifecycleListener.class);
+    private static final Log log = LogFactory.getLog(AprLifecycleListener.class);
 
     /**
      * The string manager for this package.

==================================================
JasperListener.java
index aab357ce0b..bfcf7ef7e3 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -51,7 +51,7 @@ public class AsyncContextImpl implements AsyncContext {
         NOT_STARTED, STARTED, DISPATCHING, DISPATCHED, COMPLETING, TIMING_OUT, ERROR_DISPATCHING
     }
     
-    protected static Log log = LogFactory.getLog(AsyncContextImpl.class);
+    protected static final Log log = LogFactory.getLog(AsyncContextImpl.class);
     
     private ServletRequest servletRequest = null;
     private ServletResponse servletResponse = null;

==================================================
NamingContextListener.java
index 78d2c7de54..255b683e7d 100644
--- a/java/org/apache/catalina/core/JasperListener.java
+++ b/java/org/apache/catalina/core/JasperListener.java
@@ -38,7 +38,7 @@ import org.apache.juli.logging.LogFactory;
 public class JasperListener
     implements LifecycleListener {
 
-    private static Log log = LogFactory.getLog(JasperListener.class);
+    private static final Log log = LogFactory.getLog(JasperListener.class);
 
     /**
      * The string manager for this package.

==================================================
StandardContext.java
index 6d5c2f1375..afadf80322 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -81,7 +81,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public class NamingContextListener
     implements LifecycleListener, ContainerListener, PropertyChangeListener {
 
-    private static Log log = LogFactory.getLog(NamingContextListener.class);
+    private static final Log log = LogFactory.getLog(NamingContextListener.class);
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
StandardEngine.java
index 7a1e27e453..fbbe0cef7f 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -117,7 +117,7 @@ public class StandardContext
     extends ContainerBase
     implements Context, NotificationEmitter
 {
-    private static Log log = LogFactory.getLog(StandardContext.class);
+    private static final Log log = LogFactory.getLog(StandardContext.class);
 
 
     // ----------------------------------------------------------- Constructors

==================================================
StandardHostValve.java
index 07d9e0b865..194785c593 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -53,7 +53,7 @@ public class StandardEngine
     extends ContainerBase
     implements Engine {
 
-    private static Log log = LogFactory.getLog(StandardEngine.class);
+    private static final Log log = LogFactory.getLog(StandardEngine.class);
 
     // ----------------------------------------------------------- Constructors
 

==================================================
StandardPipeline.java
index f22b9486b2..197d7b5e87 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -57,7 +57,7 @@ final class StandardHostValve
     extends ValveBase {
 
 
-    private static Log log = LogFactory.getLog(StandardHostValve.class);
+    private static final Log log = LogFactory.getLog(StandardHostValve.class);
 
     //------------------------------------------------------ Constructor
     public StandardHostValve() {

==================================================
StandardServer.java
index a6ab6ddf8f..dc673e7dbd 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -55,7 +55,7 @@ public class StandardPipeline
     implements Pipeline, Contained, Lifecycle 
  {
 
-    private static Log log = LogFactory.getLog(StandardPipeline.class);
+    private static final Log log = LogFactory.getLog(StandardPipeline.class);
 
     // ----------------------------------------------------------- Constructors
 

==================================================
StandardService.java
index eac6cfa915..d4ef06b03d 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -60,7 +60,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public final class StandardServer
     implements Lifecycle, Server, MBeanRegistration 
  {
-    private static Log log = LogFactory.getLog(StandardServer.class);
+    private static final Log log = LogFactory.getLog(StandardServer.class);
    
 
     // ------------------------------------------------------------ Constructor

==================================================
RemoteAddrFilter.java
index cf64364695..c0cf3c7fd8 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -52,7 +52,7 @@ import org.apache.catalina.Executor;
 public class StandardService
         implements Lifecycle, Service, MBeanRegistration 
  {
-    private static Log log = LogFactory.getLog(StandardService.class);
+    private static final Log log = LogFactory.getLog(StandardService.class);
    
 
     // ----------------------------------------------------- Instance Variables

==================================================
RemoteHostFilter.java
index ffb252d728..724690047c 100644
--- a/java/org/apache/catalina/filters/RemoteAddrFilter.java
+++ b/java/org/apache/catalina/filters/RemoteAddrFilter.java
@@ -44,7 +44,7 @@ public final class RemoteAddrFilter
     extends RequestFilter {
 
     // ----------------------------------------------------- Instance Variables
-    private static Log log = LogFactory.getLog(RemoteAddrFilter.class);
+    private static final Log log = LogFactory.getLog(RemoteAddrFilter.class);
 
 
     // ------------------------------------------------------------- Properties

==================================================
RemoteIpFilter.java
index 0b4c12d472..1b783204fb 100644
--- a/java/org/apache/catalina/filters/RemoteHostFilter.java
+++ b/java/org/apache/catalina/filters/RemoteHostFilter.java
@@ -45,7 +45,7 @@ public final class RemoteHostFilter
 
     
     // ----------------------------------------------------- Instance Variables
-    private static Log log = LogFactory.getLog(RemoteHostFilter.class);
+    private static final Log log = LogFactory.getLog(RemoteHostFilter.class);
 
 
     // ------------------------------------------------------------- Properties

==================================================
RequestDumperFilter.java
index 7710febf9e..5a358473ef 100644
--- a/java/org/apache/catalina/filters/RemoteIpFilter.java
+++ b/java/org/apache/catalina/filters/RemoteIpFilter.java
@@ -581,7 +581,7 @@ public class RemoteIpFilter implements Filter {
     /**
      * Logger
      */
-    private static Log log = LogFactory.getLog(RemoteIpFilter.class);
+    private static final Log log = LogFactory.getLog(RemoteIpFilter.class);
     
     protected static final String PROTOCOL_HEADER_PARAMETER = "protocolHeader";
     

==================================================
HeartbeatListener.java
index 3a4db03ac0..23f15ec760 100644
--- a/java/org/apache/catalina/filters/RequestDumperFilter.java
+++ b/java/org/apache/catalina/filters/RequestDumperFilter.java
@@ -68,7 +68,7 @@ public class RequestDumperFilter implements Filter {
     /**
      * The logger for this class.
      */
-    private static Log log = LogFactory.getLog(RequestDumperFilter.class);
+    private static final Log log = LogFactory.getLog(RequestDumperFilter.class);
 
 
     /**

==================================================
MultiCastSender.java
index 1ba3fe6c83..0b0d5eb8d9 100644
--- a/java/org/apache/catalina/ha/backend/HeartbeatListener.java
+++ b/java/org/apache/catalina/ha/backend/HeartbeatListener.java
@@ -36,7 +36,7 @@ import org.apache.juli.logging.LogFactory;
 public class HeartbeatListener
     implements LifecycleListener, ContainerListener {
 
-    private static Log log = LogFactory.getLog(HeartbeatListener.class);
+    private static final Log log = LogFactory.getLog(HeartbeatListener.class);
 
     /* To allow to select the connector */
     int port = 0;

==================================================
TcpSender.java
index 63f51dbe65..fee60f34d6 100644
--- a/java/org/apache/catalina/ha/backend/MultiCastSender.java
+++ b/java/org/apache/catalina/ha/backend/MultiCastSender.java
@@ -33,7 +33,7 @@ import java.io.UnsupportedEncodingException;
 public class MultiCastSender
     implements Sender {
 
-    private static Log log = LogFactory.getLog(HeartbeatListener.class);
+    private static final Log log = LogFactory.getLog(HeartbeatListener.class);
 
     HeartbeatListener config = null;
 

==================================================
ClusterJmxHelper.java
index 06dab1ec07..8a1160fe9b 100644
--- a/java/org/apache/catalina/ha/backend/TcpSender.java
+++ b/java/org/apache/catalina/ha/backend/TcpSender.java
@@ -37,7 +37,7 @@ import java.util.StringTokenizer;
 public class TcpSender
     implements Sender {
 
-    private static Log log = LogFactory.getLog(HeartbeatListener.class);
+    private static final Log log = LogFactory.getLog(HeartbeatListener.class);
 
     HeartbeatListener config = null;
 

==================================================
SimpleTcpCluster.java
index cfcb1493df..24150192f1 100644
--- a/java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
+++ b/java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
@@ -39,7 +39,7 @@ public class ClusterJmxHelper {
     
     protected static Registry registry = Registry.getRegistry(null,null);
     
-    protected static Log log = LogFactory.getLog(ClusterJmxHelper.class);
+    protected static final Log log = LogFactory.getLog(ClusterJmxHelper.class);
     
     protected static boolean jmxEnabled = true;
     

==================================================
GlobalResourcesLifecycleListener.java
index 9ed50478de..2c5c848bb5 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -76,7 +76,7 @@ public class SimpleTcpCluster
     implements CatalinaCluster, Lifecycle, LifecycleListener, IDynamicProperty,
                MembershipListener, ChannelListener{
 
-    public static Log log = LogFactory.getLog(SimpleTcpCluster.class);
+    public static final Log log = LogFactory.getLog(SimpleTcpCluster.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
JmxRemoteLifecycleListener.java
index 69015db0fa..62cf94b269 100644
--- a/java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java
@@ -49,7 +49,7 @@ import org.apache.tomcat.util.modeler.Registry;
 
 public class GlobalResourcesLifecycleListener
     implements LifecycleListener {
-    private static Log log = LogFactory.getLog(GlobalResourcesLifecycleListener.class);
+    private static final Log log = LogFactory.getLog(GlobalResourcesLifecycleListener.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
ServerLifecycleListener.java
index 80198dc5f8..61a7c79a4f 100644
--- a/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
@@ -52,7 +52,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class JmxRemoteLifecycleListener implements LifecycleListener {
     
-    private static Log log =
+    private static final Log log =
         LogFactory.getLog(JmxRemoteLifecycleListener.class);
     
     /**

==================================================
CombinedRealm.java
index e9b8b76d29..09c6c01c9b 100644
--- a/java/org/apache/catalina/mbeans/ServerLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/ServerLifecycleListener.java
@@ -64,7 +64,7 @@ import org.apache.juli.logging.LogFactory;
 public class ServerLifecycleListener
     implements ContainerListener, LifecycleListener, PropertyChangeListener {
 
-    private static Log log = LogFactory.getLog(ServerLifecycleListener.class);
+    private static final Log log = LogFactory.getLog(ServerLifecycleListener.class);
 
 
     // ------------------------------------------------------------- Properties

==================================================
JAASMemoryLoginModule.java
index 998d9b0bc0..fd5ed5b1e4 100644
--- a/java/org/apache/catalina/realm/CombinedRealm.java
+++ b/java/org/apache/catalina/realm/CombinedRealm.java
@@ -41,7 +41,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class CombinedRealm extends RealmBase {
 
-    private static Log log = LogFactory.getLog(CombinedRealm.class);
+    private static final Log log = LogFactory.getLog(CombinedRealm.class);
 
     /**
      * The string manager for this package.

==================================================
JAASRealm.java
index 2f094e4c1f..6e71fc83a0 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -79,7 +79,7 @@ import org.apache.tomcat.util.digester.Digester;
 public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
     // We need to extend MemoryRealm to avoid class cast
 
-    private static Log log = LogFactory.getLog(JAASMemoryLoginModule.class);
+    private static final Log log = LogFactory.getLog(JAASMemoryLoginModule.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
LockOutRealm.java
index 1037e2139e..3c0cc32ae6 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -128,7 +128,7 @@ org.foobar.auth.DatabaseLoginModule REQUIRED
 public class JAASRealm
     extends RealmBase
  {
-    private static Log log = LogFactory.getLog(JAASRealm.class);
+    private static final Log log = LogFactory.getLog(JAASRealm.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
MemoryRealm.java
index f0cd11df0b..e0d925d414 100644
--- a/java/org/apache/catalina/realm/LockOutRealm.java
+++ b/java/org/apache/catalina/realm/LockOutRealm.java
@@ -41,7 +41,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class LockOutRealm extends CombinedRealm {
 
-    private static Log log = LogFactory.getLog(LockOutRealm.class);
+    private static final Log log = LogFactory.getLog(LockOutRealm.class);
 
     /**
      * The number of times in a row a user has to fail authentication to be

==================================================
RealmBase.java
index 3d4987b284..2be85e1b51 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -47,7 +47,7 @@ import org.apache.tomcat.util.digester.Digester;
 
 public class MemoryRealm  extends RealmBase {
 
-    private static Log log = LogFactory.getLog(MemoryRealm.class);
+    private static final Log log = LogFactory.getLog(MemoryRealm.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
PersistentManagerBase.java
index bb1d1b2396..19c61c5896 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -72,7 +72,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public abstract class RealmBase
     implements Lifecycle, Realm, MBeanRegistration {
 
-    private static Log log = LogFactory.getLog(RealmBase.class);
+    private static final Log log = LogFactory.getLog(RealmBase.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
Bootstrap.java
index 279b9f2817..93a68f7b02 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -54,7 +54,7 @@ public abstract class PersistentManagerBase
     extends ManagerBase
     implements Lifecycle, PropertyChangeListener {
 
-    private static Log log = LogFactory.getLog(PersistentManagerBase.class);
+    private static final Log log = LogFactory.getLog(PersistentManagerBase.class);
 
     // ---------------------------------------------------- Security Classes
 

==================================================
ClassLoaderFactory.java
index c5f5db0095..3323f31595 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -52,7 +52,7 @@ import org.apache.juli.logging.LogFactory;
 
 public final class Bootstrap {
 
-    private static Log log = LogFactory.getLog(Bootstrap.class);
+    private static final Log log = LogFactory.getLog(Bootstrap.class);
     
     // -------------------------------------------------------------- Constants
 

==================================================
ClusterRuleSetFactory.java
index d10b1e42e0..4eba147dbf 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -51,7 +51,7 @@ import org.apache.juli.logging.LogFactory;
 public final class ClassLoaderFactory {
 
 
-    private static Log log = LogFactory.getLog(ClassLoaderFactory.class);
+    private static final Log log = LogFactory.getLog(ClassLoaderFactory.class);
 
     protected static final Integer IS_DIR = new Integer(0);
     protected static final Integer IS_JAR = new Integer(1);

==================================================
ConnectorCreateRule.java
index 37b69d408b..a5c283684f 100644
--- a/java/org/apache/catalina/startup/ClusterRuleSetFactory.java
+++ b/java/org/apache/catalina/startup/ClusterRuleSetFactory.java
@@ -29,7 +29,7 @@ import org.apache.juli.logging.LogFactory;
 import java.lang.reflect.InvocationTargetException;
 public class ClusterRuleSetFactory {
     
-    public static Log log = LogFactory.getLog(ClusterRuleSetFactory.class);
+    public static final Log log = LogFactory.getLog(ClusterRuleSetFactory.class);
     
     public static RuleSetBase getClusterRuleSet(String prefix) {
         

==================================================
Embedded.java
index 05d3c02141..902453658e 100644
--- a/java/org/apache/catalina/startup/ConnectorCreateRule.java
+++ b/java/org/apache/catalina/startup/ConnectorCreateRule.java
@@ -37,7 +37,7 @@ import org.apache.juli.logging.Log;
 
 public class ConnectorCreateRule extends Rule {
 
-    protected static Log log = LogFactory.getLog(ConnectorCreateRule.class);
+    protected static final Log log = LogFactory.getLog(ConnectorCreateRule.class);
     // --------------------------------------------------------- Public Methods
 
 

==================================================
ExpandWar.java
index 9349b8aae6..1e4f9b288c 100644
--- a/java/org/apache/catalina/startup/Embedded.java
+++ b/java/org/apache/catalina/startup/Embedded.java
@@ -102,7 +102,7 @@ import org.apache.tomcat.util.log.SystemLogHandler;
  */
 
 public class Embedded  extends StandardService {
-    private static Log log = LogFactory.getLog(Embedded.class);
+    private static final Log log = LogFactory.getLog(Embedded.class);
 
     // ----------------------------------------------------------- Constructors
 

==================================================
Tool.java
index 7b36e462a7..70cd6d181e 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -47,7 +47,7 @@ import org.apache.juli.logging.LogFactory;
 
 public class ExpandWar {
 
-    private static Log log = LogFactory.getLog(ExpandWar.class);
+    private static final Log log = LogFactory.getLog(ExpandWar.class);
 
     /**
      * The string resources for this package.

==================================================
BufferPool.java
index 6816bde4cb..c72fa1d210 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -73,7 +73,7 @@ import org.apache.juli.logging.LogFactory;
 public final class Tool {
 
 
-    private static Log log = LogFactory.getLog(Tool.class);
+    private static final Log log = LogFactory.getLog(Tool.class);
     
     // ------------------------------------------------------- Static Variables
 

==================================================
AbstractReplicatedMap.java
index bd236b92c3..c62075da97 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool.java
@@ -27,7 +27,7 @@ import org.apache.juli.logging.LogFactory;
  * @version 1.0
  */
 public class BufferPool {
-    protected static Log log = LogFactory.getLog(BufferPool.class);
+    protected static final Log log = LogFactory.getLog(BufferPool.class);
 
     public static int DEFAULT_POOL_SIZE = 100*1024*1024; //100MB
 

==================================================
Arrays.java
index 028c0df424..644a61d0b3 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -53,7 +53,7 @@ import java.util.concurrent.ConcurrentHashMap;
  * @version 1.0
  */
 public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements RpcCallback, ChannelListener, MembershipListener, Heartbeat {
-    protected static Log log = LogFactory.getLog(AbstractReplicatedMap.class);
+    protected static final Log log = LogFactory.getLog(AbstractReplicatedMap.class);
 
     /**
      * The default initial capacity - MUST be a power of two.

==================================================
MemoryUserDatabase.java
index a023ba851e..6e61c54a15 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -35,7 +35,7 @@ import java.util.StringTokenizer;
  * @version 1.0
  */
 public class Arrays {
-    protected static Log log = LogFactory.getLog(Arrays.class);
+    protected static final Log log = LogFactory.getLog(Arrays.class);
     
     public static boolean contains(byte[] source, int srcoffset, byte[] key, int keyoffset, int length) {
         if ( srcoffset < 0 || srcoffset >= source.length) throw new ArrayIndexOutOfBoundsException("srcoffset is out of bounds.");

==================================================
AccessLogValve.java
index 9fae2894b2..5f126d3f61 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -52,7 +52,7 @@ import org.xml.sax.Attributes;
 public class MemoryUserDatabase implements UserDatabase {
 
 
-    private static Log log = LogFactory.getLog(MemoryUserDatabase.class);
+    private static final Log log = LogFactory.getLog(MemoryUserDatabase.class);
 
     // ----------------------------------------------------------- Constructors
 

==================================================
ExtendedAccessLogValve.java
index e4a3c6f406..6f4c3230a7 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -123,7 +123,7 @@ public class AccessLogValve
     extends ValveBase
     implements Lifecycle {
 
-    private static Log log = LogFactory.getLog(AccessLogValve.class);
+    private static final Log log = LogFactory.getLog(AccessLogValve.class);
 
     //------------------------------------------------------ Constructor
     public AccessLogValve() {

==================================================
RemoteIpValve.java
index 28fedba742..5908948427 100644
--- a/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
+++ b/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
@@ -133,7 +133,7 @@ public class ExtendedAccessLogValve
     extends AccessLogValve
     implements Lifecycle {
 
-    private static Log log = LogFactory.getLog(ExtendedAccessLogValve.class);
+    private static final Log log = LogFactory.getLog(ExtendedAccessLogValve.class);
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
ValveBase.java
index 5b49b227a7..6d2a31f58e 100644
--- a/java/org/apache/catalina/valves/RemoteIpValve.java
+++ b/java/org/apache/catalina/valves/RemoteIpValve.java
@@ -347,7 +347,7 @@ public class RemoteIpValve extends ValveBase {
     /**
      * Logger
      */
-    private static Log log = LogFactory.getLog(RemoteIpValve.class);
+    private static final Log log = LogFactory.getLog(RemoteIpValve.class);
     
     /**
      * The StringManager for this package.

==================================================
EmbeddedServletOptions.java
index a5f41fc252..50ac2cd7a0 100644
--- a/java/org/apache/catalina/valves/ValveBase.java
+++ b/java/org/apache/catalina/valves/ValveBase.java
@@ -57,7 +57,7 @@ import org.apache.juli.logging.LogFactory;
 
 public abstract class ValveBase
     implements Contained, Valve, MBeanRegistration {
-    private static Log log = LogFactory.getLog(ValveBase.class);
+    private static final Log log = LogFactory.getLog(ValveBase.class);
 
     //------------------------------------------------------ Constructor
     

==================================================
JspC.java
index 2f7e9b171c..138b1229cf 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -42,7 +42,7 @@ import org.apache.juli.logging.LogFactory;
 public final class EmbeddedServletOptions implements Options {
     
     // Logger
-    private Log log = LogFactory.getLog(EmbeddedServletOptions.class);
+    private final Log log = LogFactory.getLog(EmbeddedServletOptions.class);
     
     private Properties settings = new Properties();
     

==================================================
JspConfig.java
index 74ddc3757f..69cbe412dc 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -97,7 +97,7 @@ public class JspC implements Options {
             "clsid:8AD9C840-044E-11D1-B3E9-00805F499D93";
 
     // Logger
-    protected static Log log = LogFactory.getLog(JspC.class);
+    protected static final Log log = LogFactory.getLog(JspC.class);
 
     protected static final String SWITCH_VERBOSE = "-v";
     protected static final String SWITCH_HELP = "-help";

==================================================
JspReader.java
index 0c44a737e1..21eab7ae6c 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -44,7 +44,7 @@ public class JspConfig {
     private static final String WEB_XML = "/WEB-INF/web.xml";
 
     // Logger
-    private Log log = LogFactory.getLog(JspConfig.class);
+    private final Log log = LogFactory.getLog(JspConfig.class);
 
     private Vector<JspPropertyGroup> jspProperties = null;
     private ServletContext ctxt;

==================================================
JspRuntimeContext.java
index 64d2f8d7bc..b88e22e9b8 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -51,7 +51,7 @@ class JspReader {
     /**
      * Logger.
      */
-    private Log log = LogFactory.getLog(JspReader.class);
+    private final Log log = LogFactory.getLog(JspReader.class);
 
     /**
      * The current spot in the file.

==================================================
TagLibraryInfoImpl.java
index 5978ef52e3..c52955c1ee 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -58,7 +58,7 @@ import org.apache.juli.logging.LogFactory;
 public final class JspRuntimeContext {
 
     // Logger
-    private Log log = LogFactory.getLog(JspRuntimeContext.class);
+    private final Log log = LogFactory.getLog(JspRuntimeContext.class);
 
     /*
      * Counts how many times the webapp's JSPs have been reloaded.

==================================================
TldLocationsCache.java
index 2fc299af71..0946e81bb1 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -65,7 +65,7 @@ import org.apache.juli.logging.LogFactory;
 class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
 
     // Logger
-    private Log log = LogFactory.getLog(TagLibraryInfoImpl.class);
+    private final Log log = LogFactory.getLog(TagLibraryInfoImpl.class);
 
     private JspCompilationContext ctxt;
     

==================================================
JspFactoryImpl.java
index 167d90070b..aee1f44557 100644
--- a/java/org/apache/jasper/compiler/TldLocationsCache.java
+++ b/java/org/apache/jasper/compiler/TldLocationsCache.java
@@ -81,7 +81,7 @@ import org.apache.tomcat.JarScannerCallback;
 public class TldLocationsCache {
 
     // Logger
-    private Log log = LogFactory.getLog(TldLocationsCache.class);
+    private final Log log = LogFactory.getLog(TldLocationsCache.class);
 
     /**
      * The types of URI one may specify for a tag library

==================================================
TagHandlerPool.java
index 3378ae0048..f9cbac45e0 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -40,7 +40,7 @@ import org.apache.juli.logging.LogFactory;
 public class JspFactoryImpl extends JspFactory {
 
     // Logger
-    private Log log = LogFactory.getLog(JspFactoryImpl.class);
+    private final Log log = LogFactory.getLog(JspFactoryImpl.class);
 
     private static final String SPEC_VERSION = "2.1";
     private static final boolean USE_POOL = 

==================================================
JspServlet.java
index 46fa7c827d..2f5c27ba4e 100644
--- a/java/org/apache/jasper/runtime/TagHandlerPool.java
+++ b/java/org/apache/jasper/runtime/TagHandlerPool.java
@@ -38,7 +38,7 @@ public class TagHandlerPool {
     public static final String OPTION_TAGPOOL="tagpoolClassName";
     public static final String OPTION_MAXSIZE="tagpoolMaxSize";
 
-    private Log log = LogFactory.getLog(TagHandlerPool.class);
+    private final Log log = LogFactory.getLog(TagHandlerPool.class);
     
     // index of next available tag handler
     private int current;

==================================================
JspServletWrapper.java
index 862a8e4ce6..5500f51345 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -58,7 +58,7 @@ import org.apache.tomcat.PeriodicEventListener;
 public class JspServlet extends HttpServlet implements PeriodicEventListener {
 
     // Logger
-    private Log log = LogFactory.getLog(JspServlet.class);
+    private final Log log = LogFactory.getLog(JspServlet.class);
 
     private ServletContext context;
     private ServletConfig config;

==================================================
GenericParser.java
index 45d52e5b19..c421fbebcb 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -65,7 +65,7 @@ import org.apache.tomcat.InstanceManager;
 public class JspServletWrapper {
 
     // Logger
-    private Log log = LogFactory.getLog(JspServletWrapper.class);
+    private final Log log = LogFactory.getLog(JspServletWrapper.class);
 
     private Servlet theServlet;
     private String jspUri;

==================================================
XercesParser.java
index c61acdcdd2..41cca6b81b 100644
--- a/java/org/apache/tomcat/util/digester/GenericParser.java
+++ b/java/org/apache/tomcat/util/digester/GenericParser.java
@@ -41,7 +41,7 @@ public class GenericParser{
     /**
      * The Log to which all SAX event related logging calls will be made.
      */
-    protected static Log log =
+    protected static final Log log =
         LogFactory.getLog("org.apache.commons.digester.Digester.sax");
 
     /**

==================================================
BaseModelMBean.java
index a8a773c5f2..cb10d7696c 100644
--- a/java/org/apache/tomcat/util/digester/XercesParser.java
+++ b/java/org/apache/tomcat/util/digester/XercesParser.java
@@ -46,7 +46,7 @@ public class XercesParser{
     /**
      * The Log to which all SAX event related logging calls will be made.
      */
-    protected static Log log =
+    protected static final Log log =
         LogFactory.getLog("org.apache.commons.digester.Digester.sax");
 
 

==================================================
Registry.java
index aef3bb0ea9..de6b81073a 100644
--- a/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
+++ b/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
@@ -101,7 +101,7 @@ import org.apache.juli.logging.LogFactory;
  * @author Costin Manolache
  */
 public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBeanNotificationBroadcaster {
-    private static Log log = LogFactory.getLog(BaseModelMBean.class);
+    private static final Log log = LogFactory.getLog(BaseModelMBean.class);
 
     // ----------------------------------------------------------- Constructors
 

==================================================
MbeansDescriptorsDOMSource.java
index 13d02ac1f3..93d72c1da1 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -76,7 +76,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
     /**
      * The Log instance to which we will write our log messages.
      */
-    private static Log log = LogFactory.getLog(Registry.class);
+    private static final Log log = LogFactory.getLog(Registry.class);
 
     // Support for the factory methods
     

==================================================
MbeansDescriptorsDigesterSource.java
index d183175bb5..69878e765b 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDOMSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDOMSource.java
@@ -39,7 +39,7 @@ import org.w3c.dom.Node;
 
 public class MbeansDescriptorsDOMSource extends ModelerSource
 {
-    private static Log log = LogFactory.getLog(MbeansDescriptorsDOMSource.class);
+    private static final Log log = LogFactory.getLog(MbeansDescriptorsDOMSource.class);
 
     Registry registry;
     String location;

==================================================
MbeansDescriptorsIntrospectionSource.java
index be8a134bbb..1f49c31028 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -34,7 +34,7 @@ import org.apache.juli.logging.LogFactory;
 
 public class MbeansDescriptorsDigesterSource extends ModelerSource
 {
-    private static Log log =
+    private static final Log log =
             LogFactory.getLog(MbeansDescriptorsDigesterSource.class);
 
     Registry registry;

==================================================
MbeansDescriptorsSerSource.java
index 048ab7774a..c5501c34ed 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -38,7 +38,7 @@ import org.apache.tomcat.util.modeler.Registry;
 
 public class MbeansDescriptorsIntrospectionSource extends ModelerSource
 {
-    private static Log log = LogFactory.getLog(MbeansDescriptorsIntrospectionSource.class);
+    private static final Log log = LogFactory.getLog(MbeansDescriptorsIntrospectionSource.class);
 
     Registry registry;
     String location;

==================================================
MbeansSource.java
index 33eefd7212..8d589d95b0 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.modeler.Registry;
 
 public class MbeansDescriptorsSerSource extends ModelerSource
 {
-    private static Log log = LogFactory.getLog(MbeansDescriptorsSerSource.class);
+    private static final Log log = LogFactory.getLog(MbeansDescriptorsSerSource.class);
     Registry registry;
     String location;
     String type;

==================================================
AbstractEndpoint.java
index a0d91d0520..0345caadb5 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansSource.java
@@ -53,7 +53,7 @@ import org.w3c.dom.Node;
  */
 public class MbeansSource extends ModelerSource implements MbeansSourceMBean
 {
-    private static Log log = LogFactory.getLog(MbeansSource.class);
+    private static final Log log = LogFactory.getLog(MbeansSource.class);
     Registry registry;
     String type;
 

==================================================
AprEndpoint.java
index fb79504f78..680eb0f6a7 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -36,7 +36,7 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
  * @author Remy Maucherat
  */
 public abstract class AbstractEndpoint {
-    protected static Log log = LogFactory.getLog(AbstractEndpoint.class);
+    protected static final Log log = LogFactory.getLog(AbstractEndpoint.class);
     
     // -------------------------------------------------------------- Constants
     protected StringManager sm = StringManager.getManager("org.apache.tomcat.util.net.res");

==================================================
JIoEndpoint.java
index fbad6c9ec7..6bdd687849 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -57,7 +57,7 @@ public class AprEndpoint extends AbstractEndpoint {
     // -------------------------------------------------------------- Constants
 
 
-    protected static Log log = LogFactory.getLog(AprEndpoint.class);
+    protected static final Log log = LogFactory.getLog(AprEndpoint.class);
 
 
     // ----------------------------------------------------------------- Fields

==================================================
NioBlockingSelector.java
index fdbc2ddaa4..1008c01bb9 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -49,7 +49,7 @@ public class JIoEndpoint extends AbstractEndpoint {
 
     // -------------------------------------------------------------- Constants
 
-    protected static Log log = LogFactory.getLog(JIoEndpoint.class);
+    protected static final Log log = LogFactory.getLog(JIoEndpoint.class);
 
     // ----------------------------------------------------------------- Fields
 

==================================================
NioEndpoint.java
index 0305f80f6f..eb134465b2 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -38,7 +38,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public class NioBlockingSelector {
     
-    protected static Log log = LogFactory.getLog(NioBlockingSelector.class);
+    protected static final Log log = LogFactory.getLog(NioBlockingSelector.class);
     
     private static int threadCounter = 0;
     

==================================================
NioSelectorPool.java
index 21e10d99ca..7a9f22f259 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -77,7 +77,7 @@ public class NioEndpoint extends AbstractEndpoint {
     // -------------------------------------------------------------- Constants
 
 
-    protected static Log log = LogFactory.getLog(NioEndpoint.class);
+    protected static final Log log = LogFactory.getLog(NioEndpoint.class);
 
 
     public static final int OP_REGISTER = 0x100; //register interest op

==================================================
BayeuxServlet.java
index edb55985d3..3a7025dee5 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -45,7 +45,7 @@ public class NioSelectorPool {
     
     protected static int threadCount = 0;
     
-    protected static Log log = LogFactory.getLog(NioSelectorPool.class);
+    protected static final Log log = LogFactory.getLog(NioSelectorPool.class);
 
     protected final static boolean SHARED =
         Boolean.valueOf(System.getProperty("org.apache.tomcat.util.net.NioSelectorShared", "true")).booleanValue();

==================================================
ChannelImpl.java
index f0ce85b0f5..9444502255 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java
@@ -49,7 +49,7 @@ public class BayeuxServlet implements CometProcessor {
     /**
      * Logger object
      */
-    protected static Log log = LogFactory.getLog(BayeuxServlet.class);
+    protected static final Log log = LogFactory.getLog(BayeuxServlet.class);
 
     /**
      * Servlet config - for future use

==================================================
ClientImpl.java
index ec3fe40741..d2e4d72ccd 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java
@@ -34,7 +34,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class ChannelImpl implements Channel {
     
-    protected static Log log = LogFactory.getLog(ChannelImpl.class);
+    protected static final Log log = LogFactory.getLog(ChannelImpl.class);
     
     /**
      * The unique id of this channel

==================================================
RequestBase.java
index b03f7a8539..2bdfad4f90 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/ClientImpl.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/ClientImpl.java
@@ -41,7 +41,7 @@ public class ClientImpl implements Client {
 
     public static final String COMET_EVENT_ATTR = "org.apache.cometd.bayeux.client";
     
-    protected static Log log = LogFactory.getLog(ClientImpl.class);
+    protected static final Log log = LogFactory.getLog(ClientImpl.class);
 
     protected static LinkedList<Message> EMPTY_LIST = new LinkedList<Message>();
     /**

==================================================
ConnectionPool.java
index a813abf21f..20eb89a51c 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java
@@ -74,7 +74,7 @@ public abstract class RequestBase implements BayeuxRequest {
     
     protected HashMap<String, Object> response = null;
     
-    protected static Log log = LogFactory.getLog(RequestBase.class);
+    protected static final Log log = LogFactory.getLog(RequestBase.class);
     
     protected int reconnectInterval = 1000;
     

==================================================
DataSourceFactory.java
index 85be2f6755..1e25d926e3 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -58,7 +58,7 @@ public class ConnectionPool {
     /**
      * Logger
      */
-    protected static Log log = LogFactory.getLog(ConnectionPool.class);
+    protected static final Log log = LogFactory.getLog(ConnectionPool.class);
 
     //===============================================================================
     //         INSTANCE/QUICK ACCESS VARIABLE

==================================================
DataSourceProxy.java
index 2ca9eb5088..fbfc005a1e 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -55,7 +55,7 @@ import org.apache.juli.logging.LogFactory;
  * @author Filip Hanik
  */
 public class DataSourceFactory implements ObjectFactory {
-    protected static Log log = LogFactory.getLog(DataSourceFactory.class);
+    protected static final Log log = LogFactory.getLog(DataSourceFactory.class);
 
     protected final static String PROP_DEFAULTAUTOCOMMIT = "defaultAutoCommit";
     protected final static String PROP_DEFAULTREADONLY = "defaultReadOnly";

==================================================
PoolProperties.java
index f355eb2a02..093dd707a2 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -43,7 +43,7 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
  */
 
 public class DataSourceProxy implements PoolConfiguration {
-    protected static Log log = LogFactory.getLog(DataSourceProxy.class);
+    protected static final Log log = LogFactory.getLog(DataSourceProxy.class);
     
     protected volatile ConnectionPool pool = null;
     

==================================================
PooledConnection.java
index 8819bd4c57..6fad3a3798 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -33,7 +33,7 @@ import org.apache.juli.logging.LogFactory;
  *
  */
 public class PoolProperties implements PoolConfiguration {
-    protected static Log log = LogFactory.getLog(PoolProperties.class);
+    protected static final Log log = LogFactory.getLog(PoolProperties.class);
     
     protected static AtomicInteger poolCounter = new AtomicInteger(0);
     protected Properties dbProperties = new Properties();

==================================================
AbstractQueryReport.java
index 167f1ae2cf..ba8edbf218 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -38,7 +38,7 @@ public class PooledConnection {
     /**
      * Logger
      */
-    protected static Log log = LogFactory.getLog(PooledConnection.class);
+    protected static final Log log = LogFactory.getLog(PooledConnection.class);
     /**
      * Instance counter
      */

==================================================
ConnectionState.java
index e57784ad59..412885e019 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
@@ -37,7 +37,7 @@ import org.apache.tomcat.jdbc.pool.JdbcInterceptor;
  */
 public abstract class AbstractQueryReport extends AbstractCreateStatementInterceptor {
     //logger
-    protected static Log log = LogFactory.getLog(AbstractQueryReport.class);
+    protected static final Log log = LogFactory.getLog(AbstractQueryReport.class);
 
     /**
      * The threshold in milliseconds. If the query is faster than this, we don't measure it

==================================================
SlowQueryReport.java
index 50567784f0..d3041fd293 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
@@ -41,7 +41,7 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  */
 
 public class ConnectionState extends JdbcInterceptor  {
-    protected static Log log = LogFactory.getLog(ConnectionState.class);
+    protected static final Log log = LogFactory.getLog(ConnectionState.class);
     
     protected final String[] readState = {"getAutoCommit","getTransactionIsolation","isReadOnly","getCatalog"};
     protected final String[] writeState = {"setAutoCommit","setTransactionIsolation","setReadOnly","setCatalog"};

==================================================
SlowQueryReportJmx.java
index 94e72cc3ef..a1b73617e6 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -39,7 +39,7 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
  */
 public class SlowQueryReport extends AbstractQueryReport  {
     //logger
-    protected static Log log = LogFactory.getLog(SlowQueryReport.class);
+    protected static final Log log = LogFactory.getLog(SlowQueryReport.class);
 
     /**
      * we will be keeping track of query stats on a per pool basis

==================================================
StatementFinalizer.java
index 5005ede2e7..df021e4318 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
@@ -60,7 +60,7 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
 
     protected static CompositeType SLOW_QUERY_TYPE; 
         
-    protected static Log log = LogFactory.getLog(SlowQueryReportJmx.class);
+    protected static final Log log = LogFactory.getLog(SlowQueryReportJmx.class);
     
     
     protected static ConcurrentHashMap<String,SlowQueryReportJmxMBean> mbeans = 

==================================================
ConnectionPool.java
index c643e5790d..717f4b0657 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  *
  */
 public class StatementFinalizer extends AbstractCreateStatementInterceptor {
-    protected static Log log = LogFactory.getLog(StatementFinalizer.class);
+    protected static final Log log = LogFactory.getLog(StatementFinalizer.class);
     
     protected ArrayList<WeakReference<Statement>> statements = new ArrayList<WeakReference<Statement>>();
     

==================================================
LoadTest.java
index 07af7f4d9f..fbfb21b8cb 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
@@ -35,7 +35,7 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
     /**
      * logger
      */
-    protected static Log log = LogFactory.getLog(ConnectionPool.class);
+    protected static final Log log = LogFactory.getLog(ConnectionPool.class);
 
     /**
      * the connection pool

==================================================
Async0.java
index 462dd1c9a3..40ec6146b3 100644
--- a/test/org/apache/catalina/tribes/demos/LoadTest.java
+++ b/test/org/apache/catalina/tribes/demos/LoadTest.java
@@ -41,7 +41,7 @@ import org.apache.juli.logging.LogFactory;
  * @version 1.0
  */
 public class LoadTest implements MembershipListener,ChannelListener, Runnable {
-    protected static Log log = LogFactory.getLog(LoadTest.class);
+    protected static final Log log = LogFactory.getLog(LoadTest.class);
     public static int size = 24000;
     public static Object mutex = new Object();
     public boolean doRun = true;

==================================================
Async1.java
index 9ad05b5d02..f43cfc521d 100644
--- a/webapps/examples/WEB-INF/classes/async/Async0.java
+++ b/webapps/examples/WEB-INF/classes/async/Async0.java
@@ -28,7 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public class Async0 extends HttpServlet {
-    protected static Log log = LogFactory.getLog(Async0.class);
+    protected static final Log log = LogFactory.getLog(Async0.class);
     public Async0() {
     }
 

==================================================
Async2.java
index b8fbc40299..ed3f539d52 100644
--- a/webapps/examples/WEB-INF/classes/async/Async1.java
+++ b/webapps/examples/WEB-INF/classes/async/Async1.java
@@ -28,7 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public class Async1 extends HttpServlet {
-    protected static Log log = LogFactory.getLog(Async1.class);
+    protected static final Log log = LogFactory.getLog(Async1.class);
     public Async1() {
     }
 

==================================================
Async3.java
index 874fe4262c..99435a0b10 100644
--- a/webapps/examples/WEB-INF/classes/async/Async2.java
+++ b/webapps/examples/WEB-INF/classes/async/Async2.java
@@ -28,7 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public class Async2 extends HttpServlet {
-    protected static Log log = LogFactory.getLog(Async2.class);
+    protected static final Log log = LogFactory.getLog(Async2.class);
     public Async2() {
     }
 

==================================================
