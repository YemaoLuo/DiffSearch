97c967d76ee2034916cbca95d5900339ef9e61ca
==================================================
Tomcat 8 uses Java 7 where RFC 5746 is supported in all versions so remove unused/unnecessary code.
==================================================
Mark Emlyn
==================================================
Tue Apr 22 21:28:03 2014 +0000
==================================================
TestClientCert.java
Tomcat 8 uses Java 7 where RFC 5746 is supported in all versions so remove unused/unnecessary code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1589295 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCustomSsl.java
index cafd395fbf..ffb98ab79f 100644
--- a/test/org/apache/tomcat/util/net/TestClientCert.java
+++ b/test/org/apache/tomcat/util/net/TestClientCert.java
@@ -96,11 +96,6 @@ public class TestClientCert extends TomcatBaseTest {
 
     @Override
     public void setUp() throws Exception {
-        if (!TesterSupport.RFC_5746_SUPPORTED) {
-            // Make sure SSL renegotiation is not disabled in the JVM
-            System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
-        }
-
         super.setUp();
 
         Tomcat tomcat = getTomcatInstance();

==================================================
TestSsl.java
index 7b4f9dca37..4d87a44557 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -97,12 +97,6 @@ public class TestCustomSsl extends TomcatBaseTest {
     private void doTestCustomTrustManager(boolean serverTrustAll)
             throws Exception {
 
-        if (!TesterSupport.RFC_5746_SUPPORTED) {
-            // Make sure SSL renegotiation is not disabled in the JVM
-            System.setProperty("sun.security.ssl.allowUnsafeRenegotiation",
-                    "true");
-        }
-
         Tomcat tomcat = getTomcatInstance();
 
         Assume.assumeTrue("SSL renegotiation has to be supported for this test",

==================================================
TesterSupport.java
index bfdf90f864..9154dc5ea5 100644
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -24,8 +24,6 @@ import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.Reader;
 
-import javax.net.ssl.HandshakeCompletedEvent;
-import javax.net.ssl.HandshakeCompletedListener;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
@@ -34,7 +32,6 @@ import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 import org.junit.Assert;
-import org.junit.Assume;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -92,82 +89,13 @@ public class TestSsl extends TomcatBaseTest {
         assertTrue(res.toString().indexOf("<h1>Hello World!</h1>") > 0);
     }
 
-    boolean handshakeDone = false;
-
-    @Test
-    public void testRenegotiateFail() throws Exception {
-
-        // If RFC5746 is supported, renegotiation will always work (and will
-        // always be secure)
-        if (TesterSupport.RFC_5746_SUPPORTED) {
-            return;
-        }
-
-        Tomcat tomcat = getTomcatInstance();
-
-        File appDir = new File(getBuildDirectory(), "webapps/examples");
-        // app dir is relative to server home
-        tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-
-        TesterSupport.initSsl(tomcat);
-
-        // Default - MITM attack prevented
-
-        tomcat.start();
-        SSLContext sslCtx = SSLContext.getInstance("TLS");
-        sslCtx.init(null, TesterSupport.getTrustManagers(), null);
-        SSLSocketFactory socketFactory = sslCtx.getSocketFactory();
-        SSLSocket socket = (SSLSocket) socketFactory.createSocket("localhost", getPort());
-
-        socket.addHandshakeCompletedListener(new HandshakeCompletedListener() {
-            @Override
-            public void handshakeCompleted(HandshakeCompletedEvent event) {
-                handshakeDone = true;
-            }
-        });
-
-        OutputStream os = socket.getOutputStream();
-        os.write("GET /examples/servlets/servlet/HelloWorldExample HTTP/1.0\n".getBytes());
-        os.flush();
-
-
-        InputStream is = socket.getInputStream();
-
-        // Make sure the NIO connector has read the request before the handshake
-        Thread.sleep(100);
-
-        socket.startHandshake();
-
-        os = socket.getOutputStream();
-
-        try {
-            os.write("Host: localhost\n\n".getBytes());
-        } catch (IOException ex) {
-            ex.printStackTrace();
-            fail("Re-negotiation failed");
-        }
-        Reader r = new InputStreamReader(is);
-        BufferedReader br = new BufferedReader(r);
-        String line = br.readLine();
-        while (line != null) {
-            // For testing System.out.println(line);
-            line = br.readLine();
-        }
-
-        if (!handshakeDone) {
-            // success - we timed-out without handshake
-            return;
-        }
-
-        fail("Re-negotiation worked");
-    }
 
     @Test
     public void testRenegotiateWorks() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        Assume.assumeTrue("SSL renegotiation has to be supported for this test",
-                TesterSupport.isRenegotiationSupported(getTomcatInstance()));
+        //Assume.assumeTrue("SSL renegotiation has to be supported for this test",
+        //        TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         // app dir is relative to server home
@@ -216,13 +144,4 @@ public class TestSsl extends TomcatBaseTest {
             }
         }
     }
-
-    @Override
-    public void setUp() throws Exception {
-        if (!TesterSupport.RFC_5746_SUPPORTED) {
-            // Make sure SSL renegotiation is not disabled in the JVM
-            System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
-        }
-        super.setUp();
-    }
 }

==================================================
