fec4c49322d5a65d3d1888a35669b99a00924bce
==================================================
Move remaining OpenSSL TLS config attributes to SSLHostConfig
==================================================
Mark Thomas
==================================================
Thu May 7 11:07:50 2015 +0000
==================================================
AbstractHttp11Protocol.java
Move remaining OpenSSL TLS config attributes to SSLHostConfig

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1678165 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index ed86ac1c41..8e1ea0809c 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -524,6 +524,36 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    public void setSSLCertificateChainFile(String certificateChainFile) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateChainFile(certificateChainFile);
+    }
+
+
+    public void setSSLCACertificatePath(String caCertificatePath) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCaCertificatePath(caCertificatePath);
+    }
+
+
+    public void setSSLCACertificateFile(String caCertificateFile) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCaCertificateFile(caCertificateFile);
+    }
+
+
+    public void setSSLDisableCompression(boolean disableCompression) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setDisableCompression(disableCompression);
+    }
+
+
+    public void setSSLDisableSessionTickets(boolean disableSessionTickets) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setDisableSessionTickets(disableSessionTickets);
+    }
+
+
     // ------------------------------------------------------------- Common code
 
     // Common configuration required for all new HTTP11 processors

==================================================
AprEndpoint.java
index 9a9760aa40..6c4487914e 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -70,42 +70,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     public void setDeferAccept(boolean deferAccept) { ((AprEndpoint)getEndpoint()).setDeferAccept(deferAccept); }
 
 
-    // --------------------  SSL related properties --------------------
-
-    /**
-     * SSL certificate chain file.
-     */
-    public String getSSLCertificateChainFile() { return ((AprEndpoint)getEndpoint()).getSSLCertificateChainFile(); }
-    public void setSSLCertificateChainFile(String SSLCertificateChainFile) { ((AprEndpoint)getEndpoint()).setSSLCertificateChainFile(SSLCertificateChainFile); }
-
-
-    /**
-     * SSL CA certificate path.
-     */
-    public String getSSLCACertificatePath() { return ((AprEndpoint)getEndpoint()).getSSLCACertificatePath(); }
-    public void setSSLCACertificatePath(String SSLCACertificatePath) { ((AprEndpoint)getEndpoint()).setSSLCACertificatePath(SSLCACertificatePath); }
-
-
-    /**
-     * SSL CA certificate file.
-     */
-    public String getSSLCACertificateFile() { return ((AprEndpoint)getEndpoint()).getSSLCACertificateFile(); }
-    public void setSSLCACertificateFile(String SSLCACertificateFile) { ((AprEndpoint)getEndpoint()).setSSLCACertificateFile(SSLCACertificateFile); }
-
-
-    /**
-     * Disable SSL compression.
-     */
-    public boolean getSSLDisableCompression() { return ((AprEndpoint)getEndpoint()).getSSLDisableCompression(); }
-    public void setSSLDisableCompression(boolean disable) { ((AprEndpoint)getEndpoint()).setSSLDisableCompression(disable); }
-
-    /**
-     * Disable TLS Session Tickets (RFC 4507).
-     */
-    public boolean getSSLDisableSessionTickets() { return ((AprEndpoint)getEndpoint()).getSSLDisableSessionTickets(); }
-    public void setSSLDisableSessionTickets(boolean enable) { ((AprEndpoint)getEndpoint()).setSSLDisableSessionTickets(enable); }
-
-
     // ----------------------------------------------------- JMX related methods
 
     @Override

==================================================
SSLHostConfig.java
index 021e090ac1..9aa764ee73 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -208,62 +208,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
     }
 
 
-    /**
-     * SSL certificate chain file.
-     */
-    protected String SSLCertificateChainFile = null;
-    public String getSSLCertificateChainFile() { return SSLCertificateChainFile; }
-    public void setSSLCertificateChainFile(String SSLCertificateChainFile) { this.SSLCertificateChainFile = SSLCertificateChainFile; }
-
-
-    /**
-     * SSL CA certificate path.
-     */
-    protected String SSLCACertificatePath = null;
-    public String getSSLCACertificatePath() { return SSLCACertificatePath; }
-    public void setSSLCACertificatePath(String SSLCACertificatePath) { this.SSLCACertificatePath = SSLCACertificatePath; }
-
-
-    /**
-     * SSL CA certificate file.
-     */
-    protected String SSLCACertificateFile = null;
-    public String getSSLCACertificateFile() { return SSLCACertificateFile; }
-    public void setSSLCACertificateFile(String SSLCACertificateFile) { this.SSLCACertificateFile = SSLCACertificateFile; }
-
-
-    /**
-     * SSL disable TLS Session Tickets (RFC 4507).
-     */
-    protected boolean SSLDisableSessionTickets = false;
-    public boolean getSSLDisableSessionTickets() { return SSLDisableSessionTickets; }
-    public void setSSLDisableSessionTickets(boolean SSLDisableSessionTickets) { this.SSLDisableSessionTickets = SSLDisableSessionTickets; }
-
-    /**
-     * SSL allow insecure renegotiation for the the client that does not
-     * support the secure renegotiation.
-     */
-    protected boolean SSLInsecureRenegotiation = false;
-    public void setSSLInsecureRenegotiation(boolean SSLInsecureRenegotiation) { this.SSLInsecureRenegotiation = SSLInsecureRenegotiation; }
-    public boolean getSSLInsecureRenegotiation() { return SSLInsecureRenegotiation; }
-
-    /**
-     * Disables compression of the SSL stream. This thwarts CRIME attack
-     * and possibly improves performance by not compressing uncompressible
-     * content such as JPEG, etc.
-     */
-    protected boolean SSLDisableCompression = false;
-
-    /**
-     * Configures whether or not to use SSL compression. The default is
-     * <code>false</code>.
-     *
-     * @param SSLDisableCompression Set to <code>true</code> to disable SSL
-     *                              compression. This thwarts the CRIMEattack.
-     */
-    public void setSSLDisableCompression(boolean SSLDisableCompression) { this.SSLDisableCompression = SSLDisableCompression; }
-    public boolean getSSLDisableCompression() { return SSLDisableCompression; }
-
     /**
      * Port in use.
      */
@@ -470,7 +414,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                             sm.getString("endpoint.apr.failSslContextMake"), e);
                 }
 
-                if (SSLInsecureRenegotiation) {
+                if (sslHostConfig.getInsecureRenegotiation()) {
                     boolean legacyRenegSupported = false;
                     try {
                         legacyRenegSupported = SSL.hasOp(SSL.SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION);
@@ -504,7 +448,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                 }
 
                 // Disable compression if requested
-                if (SSLDisableCompression) {
+                if (sslHostConfig.getDisableCompression()) {
                     boolean disableCompressionSupported = false;
                     try {
                         disableCompressionSupported = SSL.hasOp(SSL.SSL_OP_NO_COMPRESSION);
@@ -521,7 +465,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                 }
 
                 // Disable TLS Session Tickets (RFC4507) to protect perfect forward secrecy
-                if (SSLDisableSessionTickets) {
+                if (sslHostConfig.getDisableSessionTickets()) {
                     boolean disableSessionTicketsSupported = false;
                     try {
                         disableSessionTicketsSupported = SSL.hasOp(SSL.SSL_OP_NO_TICKET);
@@ -545,9 +489,11 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                         sslHostConfig.getCertificateKeyFile(),
                         sslHostConfig.getCertificateKeyPassword(), SSL.SSL_AIDX_RSA);
                 // Set certificate chain file
-                SSLContext.setCertificateChainFile(ctx, SSLCertificateChainFile, false);
+                SSLContext.setCertificateChainFile(
+                        ctx, sslHostConfig.getCertificateChainFile(), false);
                 // Support Client Certificates
-                SSLContext.setCACertificate(ctx, SSLCACertificateFile, SSLCACertificatePath);
+                SSLContext.setCACertificate(ctx, sslHostConfig.getCaCertificateFile(),
+                        sslHostConfig.getCaCertificatePath());
                 // Set revocation
                 SSLContext.setCARevocation(ctx, sslHostConfig.getCertificateRevocationListFile(),
                         sslHostConfig.getCertificateRevocationListPath());

==================================================
