d80d41fb437f7ba12916189f0f24934812b5eafd
==================================================
Switch to non-static loggers where there is a possibility of a logger becoming associated with a web application class loader causing log messages to be lost if the web application is stopped.
==================================================
Mark Thomas
==================================================
Fri Jun 1 15:03:49 2018 +0000
==================================================
AuthenticatorBase.java
Switch to non-static loggers where there is a possibility of a logger becoming associated with a web application class loader causing log messages to be lost if the web application is stopped.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832692 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index 628b9db035..98ac2289fe 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -90,7 +90,7 @@ import org.apache.tomcat.util.res.StringManager;
 public abstract class AuthenticatorBase extends ValveBase
         implements Authenticator, RegistrationListener {
 
-    private static final Log log = LogFactory.getLog(AuthenticatorBase.class);
+    private final Log log = LogFactory.getLog(AuthenticatorBase.class);
 
     /**
      * "Expires" header always set to Date(1), so generate once only

==================================================
DigestAuthenticator.java
index 967927e8eb..963c1e933a 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -45,7 +45,7 @@ import org.apache.tomcat.util.codec.binary.Base64;
  */
 public class BasicAuthenticator extends AuthenticatorBase {
 
-    private static final Log log = LogFactory.getLog(BasicAuthenticator.class);
+    private final Log log = LogFactory.getLog(BasicAuthenticator.class);
 
     private Charset charset = StandardCharsets.ISO_8859_1;
     private String charsetString = null;

==================================================
FormAuthenticator.java
index 8a1e8b3fcf..efd0341ae6 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -45,7 +45,7 @@ import org.apache.tomcat.util.security.MD5Encoder;
  */
 public class DigestAuthenticator extends AuthenticatorBase {
 
-    private static final Log log = LogFactory.getLog(DigestAuthenticator.class);
+    private final Log log = LogFactory.getLog(DigestAuthenticator.class);
 
 
     // -------------------------------------------------------------- Constants

==================================================
SpnegoAuthenticator.java
index 075f792ffd..9d57ffaa84 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -52,7 +52,7 @@ import org.apache.tomcat.util.http.MimeHeaders;
 public class FormAuthenticator
     extends AuthenticatorBase {
 
-    private static final Log log = LogFactory.getLog(FormAuthenticator.class);
+    private final Log log = LogFactory.getLog(FormAuthenticator.class);
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
AuthConfigFactoryImpl.java
index fb0ae49931..59886b6016 100644
--- a/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
@@ -54,7 +54,7 @@ import org.ietf.jgss.Oid;
  */
 public class SpnegoAuthenticator extends AuthenticatorBase {
 
-    private static final Log log = LogFactory.getLog(SpnegoAuthenticator.class);
+    private final Log log = LogFactory.getLog(SpnegoAuthenticator.class);
     private static final String AUTH_HEADER_VALUE_NEGOTIATE = "Negotiate";
 
     private String loginConfigName = Constants.DEFAULT_LOGIN_MODULE_NAME;

==================================================
CallbackHandlerImpl.java
index b32f108347..44296dbc08 100644
--- a/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
@@ -40,7 +40,7 @@ import org.apache.tomcat.util.res.StringManager;
 
 public class AuthConfigFactoryImpl extends AuthConfigFactory {
 
-    private static final Log log = LogFactory.getLog(AuthConfigFactoryImpl.class);
+    private final Log log = LogFactory.getLog(AuthConfigFactoryImpl.class);
     private static final StringManager sm = StringManager.getManager(AuthConfigFactoryImpl.class);
 
     private static final String CONFIG_PATH = "conf/jaspic-providers.xml";

==================================================
PersistentProviderRegistrations.java
index 91895a6a81..a32bd9ea46 100644
--- a/java/org/apache/catalina/authenticator/jaspic/CallbackHandlerImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/CallbackHandlerImpl.java
@@ -39,7 +39,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class CallbackHandlerImpl implements CallbackHandler {
 
-    private static final Log log = LogFactory.getLog(CallbackHandlerImpl.class);
+    private final Log log = LogFactory.getLog(CallbackHandlerImpl.class);
     private static final StringManager sm = StringManager.getManager(CallbackHandlerImpl.class);
 
     private static CallbackHandler instance;

==================================================
ApplicationFilterConfig.java
index 96578ff1e0..a1ba60c9ea 100644
--- a/java/org/apache/catalina/authenticator/jaspic/PersistentProviderRegistrations.java
+++ b/java/org/apache/catalina/authenticator/jaspic/PersistentProviderRegistrations.java
@@ -43,7 +43,6 @@ import org.xml.sax.SAXException;
  */
 final class PersistentProviderRegistrations {
 
-    private static final Log log = LogFactory.getLog(PersistentProviderRegistrations.class);
     private static final StringManager sm =
             StringManager.getManager(PersistentProviderRegistrations.class);
 
@@ -139,6 +138,7 @@ final class PersistentProviderRegistrations {
             writer.write("</jaspic-providers>\n");
         } catch (IOException e) {
             if (!configFileNew.delete()) {
+                Log log = LogFactory.getLog(PersistentProviderRegistrations.class);
                 log.warn(sm.getString("persistentProviderRegistrations.deleteFail",
                         configFileNew.getAbsolutePath()));
             }
@@ -161,6 +161,7 @@ final class PersistentProviderRegistrations {
 
         // Remove the old file
         if (configFileOld.exists() && !configFileOld.delete()) {
+            Log log = LogFactory.getLog(PersistentProviderRegistrations.class);
             log.warn(sm.getString("persistentProviderRegistrations.deleteFail",
                     configFileOld.getAbsolutePath()));
         }

==================================================
StandardWrapper.java
index e8861a2ca5..9c5001f966 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -61,7 +61,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
-    private static final Log log = LogFactory.getLog(ApplicationFilterConfig.class);
+    private final Log log = LogFactory.getLog(ApplicationFilterConfig.class);
 
     /**
      * Empty String collection to serve as the basis for empty enumerations.

==================================================
CorsFilter.java
index 12d9e7b2c4..da13fa6ead 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -74,7 +74,7 @@ import org.apache.tomcat.util.modeler.Util;
 public class StandardWrapper extends ContainerBase
     implements ServletConfig, Wrapper, NotificationEmitter {
 
-    private static final Log log = LogFactory.getLog(StandardWrapper.class);
+    private final Log log = LogFactory.getLog(StandardWrapper.class);
 
     protected static final String[] DEFAULT_SERVLET_METHODS = new String[] {
                                                     "GET", "HEAD", "POST" };

==================================================
PersistentManagerBase.java
index 0bfdb9d669..2f6e9166bf 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -79,7 +79,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class CorsFilter extends GenericFilter {
 
     private static final long serialVersionUID = 1L;
-    private static final Log log = LogFactory.getLog(CorsFilter.class);
+    private final Log log = LogFactory.getLog(CorsFilter.class);
     private static final StringManager sm = StringManager.getManager(CorsFilter.class);
 
 

==================================================
SessionIdGeneratorBase.java
index 15963b072e..3f1f565fa2 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -49,7 +49,7 @@ import org.apache.juli.logging.LogFactory;
 public abstract class PersistentManagerBase extends ManagerBase
         implements StoreManager {
 
-    private static final Log log = LogFactory.getLog(PersistentManagerBase.class);
+    private final Log log = LogFactory.getLog(PersistentManagerBase.class);
 
     // ---------------------------------------------------- Security Classes
 

==================================================
SmapUtil.java
index 6ca75f885f..e95ce720ef 100644
--- a/java/org/apache/catalina/util/SessionIdGeneratorBase.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.res.StringManager;
 public abstract class SessionIdGeneratorBase extends LifecycleBase
         implements SessionIdGenerator {
 
-    private static final Log log = LogFactory.getLog(SessionIdGeneratorBase.class);
+    private final Log log = LogFactory.getLog(SessionIdGeneratorBase.class);
 
 
     private static final StringManager sm =

==================================================
JspRuntimeLibrary.java
index e32087fe1f..fe231ca9ec 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -55,8 +55,6 @@ public class SmapUtil {
 
     private static final Charset SMAP_ENCODING = StandardCharsets.UTF_8;
 
-    private static final Log log = LogFactory.getLog(SmapUtil.class);
-
     //*********************************************************************
     // Public entry points
 
@@ -801,12 +799,14 @@ public class SmapUtil {
                 smap = new String(baos.toByteArray(), encoding);
             }
         } catch (IOException ioe) {
+            Log log = LogFactory.getLog(SmapUtil.class);
             log.warn(Localizer.getMessage("jsp.warning.loadSmap", className), ioe);
         } finally {
             if (is != null) {
                 try {
                     is.close();
                 } catch (IOException ioe) {
+                    Log log = LogFactory.getLog(SmapUtil.class);
                     log.warn(Localizer.getMessage("jsp.warning.loadSmap", className), ioe);
                 }
             }

==================================================
SecurityClassLoad.java
index d3fb01e8eb..7e4c9321fc 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -56,8 +56,6 @@ import org.apache.tomcat.InstanceManager;
  */
 public class JspRuntimeLibrary {
 
-    private static final Log log = LogFactory.getLog(JspRuntimeLibrary.class);
-
     /**
      * Returns the value of the javax.servlet.error.exception request
      * attribute value, if present, otherwise the value of the
@@ -993,6 +991,7 @@ public class JspRuntimeLibrary {
             tag.release();
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
+            Log log = LogFactory.getLog(JspRuntimeLibrary.class);
             log.warn("Error processing release on tag instance of "
                     + tag.getClass().getName(), t);
         }
@@ -1001,6 +1000,7 @@ public class JspRuntimeLibrary {
         } catch (Exception e) {
             Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
             ExceptionUtils.handleThrowable(t);
+            Log log = LogFactory.getLog(JspRuntimeLibrary.class);
             log.warn("Error processing preDestroy on tag instance of "
                     + tag.getClass().getName(), t);
         }

==================================================
JasperInitializer.java
index fea90a0efc..f973e870a2 100644
--- a/java/org/apache/jasper/security/SecurityClassLoad.java
+++ b/java/org/apache/jasper/security/SecurityClassLoad.java
@@ -26,8 +26,6 @@ import org.apache.juli.logging.LogFactory;
  */
 public final class SecurityClassLoad {
 
-    private static final Log log = LogFactory.getLog(SecurityClassLoad.class);
-
     public static void securityClassLoad(ClassLoader loader){
 
         if( System.getSecurityManager() == null ){
@@ -54,6 +52,7 @@ public final class SecurityClassLoad {
 
             loader.loadClass( basePackage + "servlet.JspServletWrapper");
         } catch (ClassNotFoundException ex) {
+            Log log = LogFactory.getLog(SecurityClassLoad.class);
             log.error("SecurityClassLoad", ex);
         }
     }

==================================================
TldScanner.java
index 258941643b..c3c7c886aa 100644
--- a/java/org/apache/jasper/servlet/JasperInitializer.java
+++ b/java/org/apache/jasper/servlet/JasperInitializer.java
@@ -41,7 +41,7 @@ import org.xml.sax.SAXException;
 public class JasperInitializer implements ServletContainerInitializer {
 
     private static final String MSG = "org.apache.jasper.servlet.JasperInitializer";
-    private static final Log log = LogFactory.getLog(JasperInitializer.class);
+    private final Log log = LogFactory.getLog(JasperInitializer.class);
 
     /**
      * Preload classes required at runtime by a JSP servlet so that

==================================================
DigesterFactory.java
index f6c64b44cb..9448f53b28 100644
--- a/java/org/apache/jasper/servlet/TldScanner.java
+++ b/java/org/apache/jasper/servlet/TldScanner.java
@@ -53,7 +53,7 @@ import org.xml.sax.SAXException;
  * Scans for and loads Tag Library Descriptors contained in a web application.
  */
 public class TldScanner {
-    private static final Log log = LogFactory.getLog(TldScanner.class);
+    private final Log log = LogFactory.getLog(TldScanner.class);
     private static final String MSG = "org.apache.jasper.servlet.TldScanner";
     private static final String TLD_EXT = ".tld";
     private static final String WEB_INF = "/WEB-INF/";

==================================================
TagPluginParser.java
index 65f4d79883..4a6632c14e 100644
--- a/java/org/apache/tomcat/util/descriptor/DigesterFactory.java
+++ b/java/org/apache/tomcat/util/descriptor/DigesterFactory.java
@@ -36,7 +36,6 @@ import org.xml.sax.ext.EntityResolver2;
  */
 public class DigesterFactory {
 
-    private static final Log log = LogFactory.getLog(DigesterFactory.class);
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
 
@@ -150,6 +149,7 @@ public class DigesterFactory {
             location = CLASS_JSP_CONTEXT.getResource("resources/" + name);
         }
         if (location == null) {
+            Log log = LogFactory.getLog(DigesterFactory.class);
             log.warn(sm.getString("digesterFactory.missingSchema", name));
             return null;
         }

==================================================
TldParser.java
index 80530d6d66..866af11c0c 100644
--- a/java/org/apache/tomcat/util/descriptor/tagplugin/TagPluginParser.java
+++ b/java/org/apache/tomcat/util/descriptor/tagplugin/TagPluginParser.java
@@ -37,7 +37,7 @@ import org.xml.sax.SAXException;
  * Parser for Tag Plugin descriptors.
  */
 public class TagPluginParser {
-    private static final Log log = LogFactory.getLog(TagPluginParser.class);
+    private final Log log = LogFactory.getLog(TagPluginParser.class);
     private static final String PREFIX = "tag-plugins/tag-plugin";
     private final Digester digester;
     private final Map<String, String> plugins = new HashMap<>();

==================================================
WebXml.java
index 7e2c73f1a5..edd117b888 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
@@ -36,7 +36,7 @@ import org.xml.sax.SAXException;
  * Parses a Tag Library Descriptor.
  */
 public class TldParser {
-    private static final Log log = LogFactory.getLog(TldParser.class);
+    private final Log log = LogFactory.getLog(TldParser.class);
     private final Digester digester;
 
     public TldParser(boolean namespaceAware, boolean validation,

==================================================
WebXmlParser.java
index c33fb18fef..6bcaa96685 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -64,7 +64,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     private static final StringManager sm =
         StringManager.getManager(Constants.PACKAGE_NAME);
 
-    private static final Log log = LogFactory.getLog(WebXml.class);
+    private final Log log = LogFactory.getLog(WebXml.class);
 
     /**
      * Global defaults are overridable but Servlets and Servlet mappings need to
@@ -1945,7 +1945,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
         return true;
     }
 
-    private static <T extends ResourceBase> boolean mergeResourceMap(
+    private <T extends ResourceBase> boolean mergeResourceMap(
             Map<String, T> fragmentResources, Map<String, T> mainResources,
             Map<String, T> tempResources, WebXml fragment) {
         for (T resource : fragmentResources.values()) {
@@ -1973,7 +1973,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
         return true;
     }
 
-    private static <T> boolean mergeMap(Map<String,T> fragmentMap,
+    private <T> boolean mergeMap(Map<String,T> fragmentMap,
             Map<String,T> mainMap, Map<String,T> tempMap, WebXml fragment,
             String mapName) {
         for (Entry<String, T> entry : fragmentMap.entrySet()) {
@@ -2166,7 +2166,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     }
 
 
-    private static boolean mergeLifecycleCallback(
+    private boolean mergeLifecycleCallback(
             Map<String, String> fragmentMap, Map<String, String> tempMap,
             WebXml fragment, String mapName) {
         for (Entry<String, String> entry : fragmentMap.entrySet()) {
@@ -2199,17 +2199,22 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
      */
     public static Set<WebXml> orderWebFragments(WebXml application,
             Map<String,WebXml> fragments, ServletContext servletContext) {
+        return application.orderWebFragments(fragments, servletContext);
+    }
+
+
+    private Set<WebXml> orderWebFragments(Map<String,WebXml> fragments,
+            ServletContext servletContext) {
 
         Set<WebXml> orderedFragments = new LinkedHashSet<>();
 
-        boolean absoluteOrdering =
-            (application.getAbsoluteOrdering() != null);
+        boolean absoluteOrdering = getAbsoluteOrdering() != null;
         boolean orderingPresent = false;
 
         if (absoluteOrdering) {
             orderingPresent = true;
             // Only those fragments listed should be processed
-            Set<String> requestedOrder = application.getAbsoluteOrdering();
+            Set<String> requestedOrder = getAbsoluteOrdering();
 
             for (String requestedName : requestedOrder) {
                 if (WebXml.ORDER_OTHERS.equals(requestedName)) {

==================================================
StandardJarScanner.java
index 3cab6314cf..312524f255 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXmlParser.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXmlParser.java
@@ -31,7 +31,7 @@ import org.xml.sax.SAXParseException;
 
 public class WebXmlParser {
 
-    private static final Log log = LogFactory.getLog(WebXmlParser.class);
+    private final Log log = LogFactory.getLog(WebXmlParser.class);
 
     /**
      * The string resources for this package.

==================================================
AsyncChannelWrapperSecure.java
index cb8d2fb24e..a1b89a1d66 100644
--- a/java/org/apache/tomcat/util/scan/StandardJarScanner.java
+++ b/java/org/apache/tomcat/util/scan/StandardJarScanner.java
@@ -61,7 +61,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class StandardJarScanner implements JarScanner {
 
-    private static final Log log = LogFactory.getLog(StandardJarScanner.class);
+    private final Log log = LogFactory.getLog(StandardJarScanner.class);
 
     /**
      * The string resources for this package.
@@ -411,7 +411,7 @@ public class StandardJarScanner implements JarScanner {
     }
 
 
-    private static void processManifest(Jar jar, boolean isWebapp,
+    private void processManifest(Jar jar, boolean isWebapp,
             Deque<URL> classPathUrlsToProcess) throws IOException {
 
         // Not processed for web application JARs nor if the caller did not

==================================================
BackgroundProcessManager.java
index 00c3d5c0f8..0147b71fe4 100644
--- a/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
+++ b/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
@@ -48,7 +48,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
 
-    private static final Log log =
+    private final Log log =
             LogFactory.getLog(AsyncChannelWrapperSecure.class);
     private static final StringManager sm =
             StringManager.getManager(AsyncChannelWrapperSecure.class);

==================================================
PojoEndpointBase.java
index 14c27b5973..88bf9321da 100644
--- a/java/org/apache/tomcat/websocket/BackgroundProcessManager.java
+++ b/java/org/apache/tomcat/websocket/BackgroundProcessManager.java
@@ -31,7 +31,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class BackgroundProcessManager {
 
-    private static final Log log =
+    private final Log log =
             LogFactory.getLog(BackgroundProcessManager.class);
     private static final StringManager sm =
             StringManager.getManager(BackgroundProcessManager.class);

==================================================
WsFrameServer.java
index 47110da306..4f054e51a0 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
@@ -39,7 +39,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public abstract class PojoEndpointBase extends Endpoint {
 
-    private static final Log log = LogFactory.getLog(PojoEndpointBase.class);
+    private final Log log = LogFactory.getLog(PojoEndpointBase.class);
     private static final StringManager sm = StringManager.getManager(PojoEndpointBase.class);
 
     private Object pojo;

==================================================
WsHttpUpgradeHandler.java
index 6b7fafa13b..281a37a536 100644
--- a/java/org/apache/tomcat/websocket/server/WsFrameServer.java
+++ b/java/org/apache/tomcat/websocket/server/WsFrameServer.java
@@ -33,7 +33,7 @@ import org.apache.tomcat.websocket.WsSession;
 
 public class WsFrameServer extends WsFrameBase {
 
-    private static final Log log = LogFactory.getLog(WsFrameServer.class);
+    private final Log log = LogFactory.getLog(WsFrameServer.class);
     private static final StringManager sm = StringManager.getManager(WsFrameServer.class);
 
     private final SocketWrapperBase<?> socketWrapper;

==================================================
WsRemoteEndpointImplServer.java
index c4a0390e23..d8c329aa8d 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -46,7 +46,7 @@ import org.apache.tomcat.websocket.WsSession;
  */
 public class WsHttpUpgradeHandler implements InternalHttpUpgradeHandler {
 
-    private static final Log log = LogFactory.getLog(WsHttpUpgradeHandler.class);
+    private final Log log = LogFactory.getLog(WsHttpUpgradeHandler.class);
     private static final StringManager sm = StringManager.getManager(WsHttpUpgradeHandler.class);
 
     private final ClassLoader applicationClassLoader;

==================================================
