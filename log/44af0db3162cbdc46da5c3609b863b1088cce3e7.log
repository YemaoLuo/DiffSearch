44af0db3162cbdc46da5c3609b863b1088cce3e7
==================================================
Fix regression between first and second parts of fix for BZ 59219
==================================================
Mark Thomas
==================================================
Fri Apr 22 12:57:50 2016 +0000
==================================================
Request.java
Fix regression between first and second parts of fix for BZ 59219

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1740509 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ErrorReportValve.java
index bea4d1ca3e..42e97536eb 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1645,6 +1645,16 @@ public class Request implements HttpServletRequest {
         return asyncContext;
     }
 
+    public boolean isAsyncStarting() {
+        if (asyncContext == null) {
+            return false;
+        }
+
+        AtomicBoolean result = new AtomicBoolean(false);
+        coyoteRequest.action(ActionCode.ASYNC_IS_STARTING, result);
+        return result.get();
+    }
+
     @Override
     public boolean isAsyncStarted() {
         if (asyncContext == null) {

==================================================
ActionCode.java
index d61211e793..b0d4e4dc6a 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -104,7 +104,7 @@ public class ErrorReportValve extends ValveBase {
             // CoyoteAdapter will trigger the necessary processing. It is only
             // necessary to trigger it here if async is starting (i.e. this is
             // the post-processing of the service() method)
-            if (throwable != null && request.isAsyncDispatching()) {
+            if (throwable != null && request.isAsyncStarting()) {
                 request.getAsyncContextInternal().setErrorState(throwable, true);
             }
             return;

==================================================
AsyncStateMachine.java
index 830624a928..7c6245570d 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -163,6 +163,11 @@ public enum ActionCode {
      */
     ASYNC_IS_ASYNC,
 
+    /**
+     * Callback to determine if async processing is starting.
+     */
+    ASYNC_IS_STARTING,
+
     /**
      * Callback to determine if async dispatch is in progress.
      */

==================================================
AjpProcessor.java
index ce76c23570..359a42b283 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -179,6 +179,10 @@ public class AsyncStateMachine {
         return state.isDispatching();
     }
 
+    public boolean isAsyncStarting() {
+        return state == AsyncState.STARTING;
+    }
+
     public boolean isAsyncStarted() {
         return state.isStarted();
     }

==================================================
Http11Processor.java
index cfbaf7aa59..814cf25779 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -571,6 +571,10 @@ public class AjpProcessor extends AbstractProcessor {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
             break;
         }
+        case ASYNC_IS_STARTING: {
+            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarting());
+            break;
+        }
         case ASYNC_IS_STARTED: {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());
             break;

==================================================
StreamProcessor.java
index 8797efd333..1fd83e4c92 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -876,6 +876,10 @@ public class Http11Processor extends AbstractProcessor {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
             break;
         }
+        case ASYNC_IS_STARTING: {
+            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarting());
+            break;
+        }
         case ASYNC_IS_STARTED: {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());
             break;

==================================================
