2322dbb447eb04a5453d3bb0f3f02ec8a1f56b58
==================================================
Use application class loader when calling ReadListener and WriteListener methods
==================================================
Mark Emlyn
==================================================
Mon Oct 28 10:03:25 2013 +0000
==================================================
AbstractServletInputStream.java
Use application class loader when calling ReadListener and WriteListener methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1536298 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractServletOutputStream.java
index aa7d4c5492..8c08c2d6ef 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java
@@ -32,7 +32,7 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
     // Start in blocking-mode
     private volatile Boolean ready = Boolean.TRUE;
     private volatile ReadListener listener = null;
-
+    private volatile ClassLoader applicationLoader = null;
 
     @Override
     public final boolean isFinished() {
@@ -61,7 +61,14 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
         try {
             ready = Boolean.valueOf(doIsReady());
         } catch (IOException e) {
-            listener.onError(e);
+            Thread thread = Thread.currentThread();
+            ClassLoader originalClassLoader = thread.getContextClassLoader();
+            try {
+                thread.setContextClassLoader(applicationLoader);
+                listener.onError(e);
+            } finally {
+                thread.setContextClassLoader(originalClassLoader);
+            }
             ready = Boolean.FALSE;
         }
         return ready.booleanValue();
@@ -75,6 +82,7 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
                     sm.getString("upgrade.sis.readListener.null"));
         }
         this.listener = listener;
+        this.applicationLoader = Thread.currentThread().getContextClassLoader();
         // Switching to non-blocking. Don't know if data is available.
         ready = null;
     }
@@ -142,11 +150,10 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
     private int readInternal() throws IOException {
         // Single byte reads for non-blocking need special handling so all
         // single byte reads run through this method.
-        ReadListener readListener = this.listener;
         byte[] b = new byte[1];
         int result;
         try {
-            result = doRead(readListener == null, b, 0, 1);
+            result = doRead(listener == null, b, 0, 1);
         } catch (IOException ioe) {
             closeRequired = true;
             throw ioe;
@@ -166,7 +173,14 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
 
     protected final void onDataAvailable() throws IOException {
         ready = Boolean.TRUE;
-        listener.onDataAvailable();
+        Thread thread = Thread.currentThread();
+        ClassLoader originalClassLoader = thread.getContextClassLoader();
+        try {
+            thread.setContextClassLoader(applicationLoader);
+            listener.onDataAvailable();
+        } finally {
+            thread.setContextClassLoader(originalClassLoader);
+        }
     }
 
 

==================================================
