65bb8142fa677cbbeff75768d3fe6ca8758f307c
==================================================
Update Tomcat's internal fork of BCEL to BCEL/trunk
==================================================
Mark Thomas
==================================================
Wed Jan 20 14:35:09 2016 +0000
==================================================
ContextConfig.java
index 4210204553..7924a7177d 100644
--- a/SVN-MERGE.txt
+++ b/SVN-MERGE.txt
@@ -29,7 +29,7 @@ to assist committers in keeping them up to date.
 
 BCEL
 org.apache.tomcat.util.bcel is copied from:
-/commons/proper/bcel/trunk/src/main/java/org/apache/bcel
+/commons/proper/bcel/trunk/src/main/java/org/apache/commons/bcel6
 
 DBCP
 org.apache.tomcat.dbcp.dbcp2 is copied from:

==================================================
Const.java
index a27da071d8..8b3bd225aa 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -2081,7 +2081,7 @@ public class ContextConfig implements LifecycleListener {
         }
 
         if ((javaClass.getAccessFlags() &
-                org.apache.tomcat.util.bcel.Constants.ACC_ANNOTATION) > 0) {
+                org.apache.tomcat.util.bcel.Const.ACC_ANNOTATION) > 0) {
             // Skip annotations.
             return;
         }

==================================================
Constants.java
new file mode 100644
index 0000000000..30973c4808
--- /dev/null
+++ b/java/org/apache/tomcat/util/bcel/Const.java
@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+package org.apache.tomcat.util.bcel;
+
+/**
+ * Constants for the project, mostly defined in the JVM specification.
+ */
+public final class Const {
+
+    /** One of the access flags for fields, methods, or classes.
+     *  @see <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.5">
+     *  Flag definitions for Fields in the Java Virtual Machine Specification (Java SE 8 Edition).</a>
+     *  @see <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.6">
+     *  Flag definitions for Methods in the Java Virtual Machine Specification (Java SE 8 Edition).</a>
+     *  @see <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.6-300-D.1-D.1">
+     *  Flag definitions for Classes in the Java Virtual Machine Specification (Java SE 8 Edition).</a>
+     */
+    public static final short ACC_FINAL      = 0x0010;
+
+    /** One of the access flags for fields, methods, or classes.
+     */
+    public static final short ACC_INTERFACE    = 0x0200;
+
+    /** One of the access flags for fields, methods, or classes.
+     */
+    public static final short ACC_ABSTRACT     = 0x0400;
+
+    /** One of the access flags for fields, methods, or classes.
+     */
+    public static final short ACC_ANNOTATION   = 0x2000;
+
+    /** Marks a constant pool entry as type UTF-8.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Utf8           = 1;
+
+    /** Marks a constant pool entry as type Integer.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.4">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Integer        = 3;
+
+    /** Marks a constant pool entry as type Float.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.4">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Float          = 4;
+
+    /** Marks a constant pool entry as type Long.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.5">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Long           = 5;
+
+    /** Marks a constant pool entry as type Double.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.5">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Double         = 6;
+
+    /** Marks a constant pool entry as a Class
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.1">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Class          = 7;
+
+    /** Marks a constant pool entry as a Field Reference.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.2">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Fieldref         = 9;
+
+    /** Marks a constant pool entry as type String
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.3">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_String         = 8;
+
+    /** Marks a constant pool entry as a Method Reference.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.2">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_Methodref        = 10;
+
+    /** Marks a constant pool entry as an Interface Method Reference.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.2">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_InterfaceMethodref = 11;
+
+    /** Marks a constant pool entry as a name and type.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.6">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_NameAndType      = 12;
+
+    /** Marks a constant pool entry as a Method Handle.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.8">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_MethodHandle     = 15;
+
+    /** Marks a constant pool entry as a Method Type.
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.9">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_MethodType       = 16;
+
+    /** Marks a constant pool entry as an Invoke Dynamic
+     * @see  <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.10">
+     * The Constant Pool in The Java Virtual Machine Specification</a> */
+    public static final byte CONSTANT_InvokeDynamic    = 18;
+
+    /**
+     * The names of the types of entries in a constant pool.
+     * Use getConstantName instead
+     */
+    private static final String[] CONSTANT_NAMES = {
+    "", "CONSTANT_Utf8", "", "CONSTANT_Integer",
+    "CONSTANT_Float", "CONSTANT_Long", "CONSTANT_Double",
+    "CONSTANT_Class", "CONSTANT_String", "CONSTANT_Fieldref",
+    "CONSTANT_Methodref", "CONSTANT_InterfaceMethodref",
+    "CONSTANT_NameAndType", "", "", "CONSTANT_MethodHandle",
+    "CONSTANT_MethodType", "", "CONSTANT_InvokeDynamic" };
+
+    public static String getConstantName(int index) {
+      return CONSTANT_NAMES[index];
+    }
+}

==================================================
AnnotationEntry.java
deleted file mode 100644
index 424ee02a0f..0000000000
--- a/java/org/apache/tomcat/util/bcel/Constants.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel;
-
-/**
- * Constants for the project, mostly defined in the JVM specification.
- *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public interface Constants {
-
-  /**
-   * One of the access flags for fields, methods, or classes.
-   * @see "<a href='http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.5'>Flag definitions for Fields in the Java Virtual Machine Specification (Java SE 8 Edition).</a>"
-   * @see "<a href='http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.6'>Flag definitions for Methods in the Java Virtual Machine Specification (Java SE 8 Edition).</a>"
-   * @see "<a href='http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.6-300-D.1-D.1'>Flag definitions for Classes in the Java Virtual Machine Specification (Java SE 8 Edition).</a>"
-   */
-  public static final short ACC_FINAL        = 0x0010;
-
-  /** One of the access flags for fields, methods, or classes.
-   */
-  public static final short ACC_INTERFACE    = 0x0200;
-
-  /** One of the access flags for fields, methods, or classes.
-   */
-  public static final short ACC_ABSTRACT     = 0x0400;
-
-  /** One of the access flags for fields, methods, or classes.
-   */
-  public static final short ACC_ANNOTATION   = 0x2000;
-
-  /** Marks a constant pool entry as type UTF-8.  */
-  public static final byte CONSTANT_Utf8               = 1;
-
-  /** Marks a constant pool entry as type Integer.  */
-  public static final byte CONSTANT_Integer            = 3;
-
-  /** Marks a constant pool entry as type Float.  */
-  public static final byte CONSTANT_Float              = 4;
-
-  /** Marks a constant pool entry as type Long.  */
-  public static final byte CONSTANT_Long               = 5;
-
-  /** Marks a constant pool entry as type Double.  */
-  public static final byte CONSTANT_Double             = 6;
-
-  /** Marks a constant pool entry as a Class.  */
-  public static final byte CONSTANT_Class              = 7;
-
-  /** Marks a constant pool entry as a Field Reference.  */
-  public static final byte CONSTANT_Fieldref           = 9;
-
-  /** Marks a constant pool entry as type String.  */
-  public static final byte CONSTANT_String             = 8;
-
-  /** Marks a constant pool entry as a Method Reference.  */
-  public static final byte CONSTANT_Methodref          = 10;
-
-  /** Marks a constant pool entry as an Interface Method Reference.  */
-  public static final byte CONSTANT_InterfaceMethodref = 11;
-
-  /** Marks a constant pool entry as a name and type.  */
-  public static final byte CONSTANT_NameAndType        = 12;
-
-  /** Marks a constant pool entry as a Method Handle.  */
-  public static final byte CONSTANT_MethodHandle       = 15;
-
-  /** Marks a constant pool entry as a Method Type.    */
-  public static final byte CONSTANT_MethodType         = 16;
-
-  /** Marks a constant pool entry as an Invoke Dynamic */
-  public static final byte CONSTANT_InvokeDynamic      = 18;
-
-  /** The names of the types of entries in a constant pool. */
-  public static final String[] CONSTANT_NAMES = {
-    "", "CONSTANT_Utf8", "", "CONSTANT_Integer",
-    "CONSTANT_Float", "CONSTANT_Long", "CONSTANT_Double",
-    "CONSTANT_Class", "CONSTANT_String", "CONSTANT_Fieldref",
-    "CONSTANT_Methodref", "CONSTANT_InterfaceMethodref",
-    "CONSTANT_NameAndType", "", "", "CONSTANT_MethodHandle",
-    "CONSTANT_MethodType", "", "CONSTANT_InvokeDynamic" };
-}

==================================================
Annotations.java
index 1bbe44595b..898a593b73 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -22,22 +22,19 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
  * represents one annotation in the annotation table
- *
- * @author  <A HREF="mailto:dbrosius@mebigfatguy.com">D. Brosius</A>
- * @since 6.0
  */
-public class AnnotationEntry implements Constants {
+public class AnnotationEntry {
 
     private final int type_index;
     private final ConstantPool constant_pool;
 
     private final List<ElementValuePair> element_value_pairs;
 
-    /**
+    /*
      * Creates an AnnotationEntry from a DataInputStream
      *
      * @param input
@@ -61,7 +58,7 @@ public class AnnotationEntry implements Constants {
      * @return the annotation type name
      */
     public String getAnnotationType() {
-        final ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(type_index, CONSTANT_Utf8);
+        final ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(type_index, Const.CONSTANT_Utf8);
         return c.getBytes();
     }
 

==================================================
ClassElementValue.java
index 20dab94f7f..4d3f405eb7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -22,9 +22,6 @@ import java.io.IOException;
 
 /**
  * base class for annotations
- *
- * @author  <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 6.0
  */
 public class Annotations {
 
@@ -35,7 +32,7 @@ public class Annotations {
      * @param constant_pool Array of constants
      */
     Annotations(DataInput input, ConstantPool constant_pool) throws IOException {
-        final int annotation_table_length = (input.readUnsignedShort());
+        final int annotation_table_length = input.readUnsignedShort();
         annotation_table = new AnnotationEntry[annotation_table_length];
         for (int i = 0; i < annotation_table_length; i++) {
             annotation_table[i] = new AnnotationEntry(input, constant_pool);

==================================================
ClassFormatException.java
index a5be4964be..93e518ea8a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -17,7 +17,7 @@
  */
 package org.apache.tomcat.util.bcel.classfile;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 public class ClassElementValue extends ElementValue
 {
@@ -35,8 +35,8 @@ public class ClassElementValue extends ElementValue
     @Override
     public String stringifyValue()
     {
-        ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(idx,
-                Constants.CONSTANT_Utf8);
+        ConstantUtf8 cu8 = (ConstantUtf8) super.getConstantPool().getConstant(idx,
+                Const.CONSTANT_Utf8);
         return cu8.getBytes();
     }
 }

==================================================
ClassParser.java
index 9c663b098a..dbdb88764f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassFormatException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassFormatException.java
@@ -21,8 +21,6 @@ package org.apache.tomcat.util.bcel.classfile;
  * Thrown when the BCEL attempts to read a class file and determines
  * that the file is malformed or otherwise cannot be interpreted as a
  * class file.
- *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  */
 public class ClassFormatException extends RuntimeException {
 

==================================================
Constant.java
index bd92254e76..d286c9254c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -23,7 +23,7 @@ import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
  * Wrapper class that parses a given Java .class file. The method <A
@@ -36,8 +36,6 @@ import org.apache.tomcat.util.bcel.Constants;
  * exactly with the <A href="http://docs.oracle.com/javase/specs/">
  * JVM specification 1.0</a>. See this paper for
  * further details about the structure of a bytecode file.
- *
- * @author <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  */
 public final class ClassParser {
 
@@ -117,7 +115,7 @@ public final class ClassParser {
             // Get class name from constant pool via `name_index' indirection
             name_index = dataInputStream.readUnsignedShort();
             c = (ConstantUtf8) constant_pool.getConstant(name_index,
-                    Constants.CONSTANT_Utf8);
+                    Const.CONSTANT_Utf8);
             name = c.getBytes();
             // Length of data in bytes
             length = dataInputStream.readInt();
@@ -146,11 +144,11 @@ public final class ClassParser {
         /* Interfaces are implicitely abstract, the flag should be set
          * according to the JVM specification.
          */
-        if ((access_flags & Constants.ACC_INTERFACE) != 0) {
-            access_flags |= Constants.ACC_ABSTRACT;
+        if ((access_flags & Const.ACC_INTERFACE) != 0) {
+            access_flags |= Const.ACC_ABSTRACT;
         }
-        if (((access_flags & Constants.ACC_ABSTRACT) != 0)
-                && ((access_flags & Constants.ACC_FINAL) != 0)) {
+        if (((access_flags & Const.ACC_ABSTRACT) != 0)
+                && ((access_flags & Const.ACC_FINAL) != 0)) {
             throw new ClassFormatException("Class can't be both final and abstract");
         }
 

==================================================
ConstantClass.java
index 07fc416986..fbff82978d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -20,7 +20,7 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
  * Abstract superclass for classes to represent the different constant types
@@ -67,30 +67,30 @@ public abstract class Constant {
         byte b = input.readByte(); // Read tag byte
         int skipSize;
         switch (b) {
-            case Constants.CONSTANT_Class:
+            case Const.CONSTANT_Class:
                 return new ConstantClass(input);
-            case Constants.CONSTANT_Integer:
+            case Const.CONSTANT_Integer:
                 return new ConstantInteger(input);
-            case Constants.CONSTANT_Float:
+            case Const.CONSTANT_Float:
                 return new ConstantFloat(input);
-            case Constants.CONSTANT_Long:
+            case Const.CONSTANT_Long:
                 return new ConstantLong(input);
-            case Constants.CONSTANT_Double:
+            case Const.CONSTANT_Double:
                 return new ConstantDouble(input);
-            case Constants.CONSTANT_Utf8:
+            case Const.CONSTANT_Utf8:
                 return ConstantUtf8.getInstance(input);
-            case Constants.CONSTANT_String:
-            case Constants.CONSTANT_MethodType:
+            case Const.CONSTANT_String:
+            case Const.CONSTANT_MethodType:
                 skipSize = 2; // unsigned short
                 break;
-            case Constants.CONSTANT_MethodHandle:
+            case Const.CONSTANT_MethodHandle:
                 skipSize = 3; // unsigned byte, unsigned short
                 break;
-            case Constants.CONSTANT_Fieldref:
-            case Constants.CONSTANT_Methodref:
-            case Constants.CONSTANT_InterfaceMethodref:
-            case Constants.CONSTANT_NameAndType:
-            case Constants.CONSTANT_InvokeDynamic:
+            case Const.CONSTANT_Fieldref:
+            case Const.CONSTANT_Methodref:
+            case Const.CONSTANT_InterfaceMethodref:
+            case Const.CONSTANT_NameAndType:
+            case Const.CONSTANT_InvokeDynamic:
                 skipSize = 4; // unsigned short, unsigned short
                 break;
             default:

==================================================
ConstantDouble.java
index 4627c65958..767c8d6fc2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -20,14 +20,12 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
- * This class is derived from the abstract
- * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
+ * This class is derived from the abstract {@link Constant}
  * and represents a reference to a (external) class.
  *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Constant
  */
 public final class ConstantClass extends Constant {
@@ -42,7 +40,7 @@ public final class ConstantClass extends Constant {
      * @throws IOException
      */
     ConstantClass(DataInput file) throws IOException {
-        super(Constants.CONSTANT_Class);
+        super(Const.CONSTANT_Class);
         this.name_index = file.readUnsignedShort();
     }
 

==================================================
ConstantFloat.java
index 895c91525c..e6b0570570 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -20,14 +20,12 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
- * This class is derived from the abstract
- * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
+ * This class is derived from the abstract  {@link Constant}
  * and represents a reference to a Double object.
  *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Constant
  */
 public final class ConstantDouble extends Constant {
@@ -42,7 +40,7 @@ public final class ConstantDouble extends Constant {
      * @throws IOException
      */
     ConstantDouble(DataInput file) throws IOException {
-        super(Constants.CONSTANT_Double);
+        super(Const.CONSTANT_Double);
         this.bytes = file.readDouble();
     }
 

==================================================
ConstantInteger.java
index 044f58b038..e6eca42e09 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -20,14 +20,12 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
- * This class is derived from the abstract
- * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
+ * This class is derived from the abstract {@link Constant}
  * and represents a reference to a float object.
  *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Constant
  */
 public final class ConstantFloat extends Constant {
@@ -42,7 +40,7 @@ public final class ConstantFloat extends Constant {
      * @throws IOException
      */
     ConstantFloat(DataInput file) throws IOException {
-        super(Constants.CONSTANT_Float);
+        super(Const.CONSTANT_Float);
         this.bytes = file.readFloat();
     }
 

==================================================
ConstantLong.java
index c66065dfbd..f7f11a2f1b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -20,14 +20,12 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
- * This class is derived from the abstract
- * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
+ * This class is derived from the abstract {@link Constant}
  * and represents a reference to an int object.
  *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Constant
  */
 public final class ConstantInteger extends Constant {
@@ -42,7 +40,7 @@ public final class ConstantInteger extends Constant {
      * @throws IOException
      */
     ConstantInteger(DataInput file) throws IOException {
-        super(Constants.CONSTANT_Integer);
+        super(Const.CONSTANT_Integer);
         this.bytes = file.readInt();
     }
 

==================================================
ConstantPool.java
index 32c5d0b4f6..b2fae5eb66 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -20,14 +20,12 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
- * This class is derived from the abstract
- * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
+ * This class is derived from the abstract {@link Constant}
  * and represents a reference to a long object.
  *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Constant
  */
 public final class ConstantLong extends Constant {
@@ -42,7 +40,7 @@ public final class ConstantLong extends Constant {
      * @throws IOException
      */
     ConstantLong(DataInput input) throws IOException {
-        super(Constants.CONSTANT_Long);
+        super(Const.CONSTANT_Long);
         this.bytes = input.readLong();
     }
 

==================================================
ConstantUtf8.java
index ea599cb950..602eeb0c31 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -20,7 +20,7 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
  * This class represents the constant pool, i.e., a table of constants, of
@@ -31,7 +31,6 @@ import org.apache.tomcat.util.bcel.Constants;
  * ConstantPoolGen</a>.
 
  * @see     Constant
- * @author <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  */
 public class ConstantPool {
 
@@ -62,7 +61,7 @@ public class ConstantPool {
              */
             if (constant_pool[i] != null) {
                 byte tag = constant_pool[i].getTag();
-                if ((tag == Constants.CONSTANT_Double) || (tag == Constants.CONSTANT_Long)) {
+                if ((tag == Const.CONSTANT_Double) || (tag == Const.CONSTANT_Long)) {
                     i++;
                 }
             }
@@ -103,7 +102,7 @@ public class ConstantPool {
             throw new ClassFormatException("Constant pool at index " + index + " is null.");
         }
         if (c.getTag() != tag) {
-            throw new ClassFormatException("Expected class `" + Constants.CONSTANT_NAMES[tag]
+            throw new ClassFormatException("Expected class `" + Const.getConstantName(tag)
                     + "' at index " + index + " and got " + c);
         }
         return c;

==================================================
ElementValue.java
index af5cf247ce..5eb552dd3d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -19,14 +19,13 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
  * This class is derived from the abstract
  * <A HREF="org.apache.tomcat.util.bcel.classfile.Constant.html">Constant</A> class
  * and represents a reference to a Utf8 encoded string.
  *
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Constant
  */
 public final class ConstantUtf8 extends Constant {
@@ -43,7 +42,7 @@ public final class ConstantUtf8 extends Constant {
      * @param bytes Data
      */
     private ConstantUtf8(String bytes) {
-        super(Constants.CONSTANT_Utf8);
+        super(Const.CONSTANT_Utf8);
         if (bytes == null) {
             throw new IllegalArgumentException("bytes must not be null!");
         }

==================================================
ElementValuePair.java
index 728f07372b..e52ba3d916 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -19,15 +19,11 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-/**
- * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
- * @since 6.0
- */
 public abstract class ElementValue
 {
-    protected final int type;
+    private final int type;
 
-    protected final ConstantPool cpool;
+    private final ConstantPool cpool;
 
 
     ElementValue(int type, ConstantPool cpool) {
@@ -92,4 +88,12 @@ public abstract class ElementValue
                         "Unexpected element value kind in annotation: " + type);
         }
     }
+
+    final ConstantPool getConstantPool() {
+        return cpool;
+    }
+
+    final int getType() {
+        return type;
+    }
 }

==================================================
EnumElementValue.java
index ab89742d57..7496789b7b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
@@ -20,12 +20,11 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 /**
  * an annotation's element value pair
  *
- * @author <A HREF="mailto:dbrosius@qis.net">D. Brosius</A>
  * @since 6.0
  */
 public class ElementValuePair
@@ -45,7 +44,7 @@ public class ElementValuePair
     public String getNameString()
     {
         ConstantUtf8 c = (ConstantUtf8) constantPool.getConstant(
-                elementNameIndex, Constants.CONSTANT_Utf8);
+                elementNameIndex, Const.CONSTANT_Utf8);
         return c.getBytes();
     }
 

==================================================
JavaClass.java
index 550f94fc7e..0eb83c0406 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -17,7 +17,7 @@
  */
 package org.apache.tomcat.util.bcel.classfile;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 public class EnumElementValue extends ElementValue
 {
@@ -34,8 +34,8 @@ public class EnumElementValue extends ElementValue
     @Override
     public String stringifyValue()
     {
-        ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(valueIdx,
-                Constants.CONSTANT_Utf8);
+        ConstantUtf8 cu8 = (ConstantUtf8) super.getConstantPool().getConstant(valueIdx,
+                Const.CONSTANT_Utf8);
         return cu8.getBytes();
     }
 }

==================================================
SimpleElementValue.java
index 433c9833de..eae29392a7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -24,8 +24,6 @@ package org.apache.tomcat.util.bcel.classfile;
  * The intent of this class is to represent a parsed or otherwise existing
  * class file.  Those interested in programatically generating classes
  * should see the <a href="../generic/ClassGen.html">ClassGen</a> class.
-
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  */
 public class JavaClass {
 

==================================================
Utility.java
index 02eb2d7c5b..15acae77df 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
@@ -17,7 +17,7 @@
  */
 package org.apache.tomcat.util.bcel.classfile;
 
-import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.Const;
 
 public class SimpleElementValue extends ElementValue
 {
@@ -41,51 +41,51 @@ public class SimpleElementValue extends ElementValue
     @Override
     public String stringifyValue()
     {
-        switch (type)
+        ConstantPool cpool = super.getConstantPool();
+        final int _type = super.getType();
+        switch (_type)
         {
         case PRIMITIVE_INT:
             ConstantInteger c = (ConstantInteger) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Integer);
+                    Const.CONSTANT_Integer);
             return Integer.toString(c.getBytes());
         case PRIMITIVE_LONG:
             ConstantLong j = (ConstantLong) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Long);
+                    Const.CONSTANT_Long);
             return Long.toString(j.getBytes());
         case PRIMITIVE_DOUBLE:
             ConstantDouble d = (ConstantDouble) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Double);
+                    Const.CONSTANT_Double);
             return Double.toString(d.getBytes());
         case PRIMITIVE_FLOAT:
             ConstantFloat f = (ConstantFloat) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Float);
+                    Const.CONSTANT_Float);
             return Float.toString(f.getBytes());
         case PRIMITIVE_SHORT:
             ConstantInteger s = (ConstantInteger) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Integer);
+                    Const.CONSTANT_Integer);
             return Integer.toString(s.getBytes());
         case PRIMITIVE_BYTE:
             ConstantInteger b = (ConstantInteger) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Integer);
+                    Const.CONSTANT_Integer);
             return Integer.toString(b.getBytes());
         case PRIMITIVE_CHAR:
             ConstantInteger ch = (ConstantInteger) cpool.getConstant(
-                    getIndex(), Constants.CONSTANT_Integer);
+                    getIndex(), Const.CONSTANT_Integer);
             return String.valueOf((char)ch.getBytes());
         case PRIMITIVE_BOOLEAN:
             ConstantInteger bo = (ConstantInteger) cpool.getConstant(
-                    getIndex(), Constants.CONSTANT_Integer);
+                    getIndex(), Const.CONSTANT_Integer);
             if (bo.getBytes() == 0) {
                 return "false";
             }
             return "true";
         case STRING:
             ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Utf8);
+                    Const.CONSTANT_Utf8);
             return cu8.getBytes();
         default:
-            throw new RuntimeException(
-                    "SimpleElementValue class does not know how to stringify type "
-                            + type);
+            throw new RuntimeException("SimpleElementValue class does not know how to stringify type " + _type);
         }
     }
 }

==================================================
