519d25725f3ef431c42c9b73d04aba3930a86a6d
==================================================
More SNI refactoring. Should be ready to start peeking at the input stream now.
==================================================
Mark Thomas
==================================================
Thu Apr 9 18:58:39 2015 +0000
==================================================
NioEndpoint.java
More SNI refactoring. Should be ready to start peeking at the input stream now.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672452 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecureNioChannel.java
index cde4176b21..229b5fecd8 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -456,32 +456,19 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
             socketProperties.setProperties(sock);
 
             NioChannel channel = nioChannels.pop();
-            if ( channel == null ) {
-                // SSL setup
+            if (channel == null) {
+                SocketBufferHandler bufhandler = new SocketBufferHandler(
+                        socketProperties.getAppReadBufSize(),
+                        socketProperties.getAppWriteBufSize(),
+                        socketProperties.getDirectBuffer());
                 if (isSSLEnabled()) {
-                    SSLEngine engine = createSSLEngine();
-                    int appbufsize = engine.getSession().getApplicationBufferSize();
-                    SocketBufferHandler bufhandler = new SocketBufferHandler(
-                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),
-                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),
-                            socketProperties.getDirectBuffer());
-                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool, this);
+                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);
                 } else {
-                    // normal tcp setup
-                    SocketBufferHandler bufhandler = new SocketBufferHandler(
-                            socketProperties.getAppReadBufSize(),
-                            socketProperties.getAppWriteBufSize(),
-                            socketProperties.getDirectBuffer());
                     channel = new NioChannel(socket, bufhandler);
                 }
             } else {
                 channel.setIOChannel(socket);
-                if ( channel instanceof SecureNioChannel ) {
-                    SSLEngine engine = createSSLEngine();
-                    ((SecureNioChannel)channel).reset(engine);
-                } else {
-                    channel.reset();
-                }
+                channel.reset();
             }
             getPoller0().register(channel);
         } catch (Throwable t) {

==================================================
SocketBufferHandler.java
index af4fb9e04a..b0d25a3d82 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -54,24 +54,19 @@ public class SecureNioChannel extends NioChannel  {
     protected NioSelectorPool pool;
     private final NioEndpoint endpoint;
 
-    public SecureNioChannel(SocketChannel channel, SSLEngine engine, SocketBufferHandler bufHandler,
+    public SecureNioChannel(SocketChannel channel, SocketBufferHandler bufHandler,
             NioSelectorPool pool, NioEndpoint endpoint) {
-        super(channel,bufHandler);
-        this.sslEngine = engine;
+        super(channel, bufHandler);
 
         // selector pool for blocking operations
         this.pool = pool;
         this.endpoint = endpoint;
     }
 
-    public void reset(SSLEngine engine) throws IOException {
-        this.sslEngine = engine;
-        reset();
-    }
-
     @Override
     public void reset() throws IOException {
         super.reset();
+        sslEngine = null;
         sniComplete = false;
         handshakeComplete = false;
         closed = false;
@@ -221,6 +216,12 @@ public class SecureNioChannel extends NioChannel  {
         //      via SNI (if any) goes here.
 
         SocketProperties sp = endpoint.getSocketProperties();
+        sslEngine = endpoint.createSSLEngine();
+
+        // Ensure the application buffers (which have to be created earlier) are
+        // big enough.
+        bufHandler.expand(sslEngine.getSession().getApplicationBufferSize());
+
         // Create/expand network buffers.
         // In/Out are always created in a pair with identical settings so only
         // need to test one to determine what needs to be done for both.

==================================================
