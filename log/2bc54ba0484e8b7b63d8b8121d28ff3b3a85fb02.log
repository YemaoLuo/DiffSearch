2bc54ba0484e8b7b63d8b8121d28ff3b3a85fb02
==================================================
Switch the Processors to use the Servlet 3.1 upgrade objects
==================================================
Mark Emlyn
==================================================
Sat Nov 24 17:15:32 2012 +0000
==================================================
AbstractProcessor.java
Switch the Processors to use the Servlet 3.1 upgrade objects
- Upgrade process still broken

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1413206 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Processor.java
index 63411fa295..f7c677abe2 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -19,7 +19,6 @@ package org.apache.coyote;
 import java.io.IOException;
 import java.util.concurrent.Executor;
 
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -154,5 +153,5 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
     public abstract SocketState upgradeDispatch() throws IOException;
 
     @Override
-    public abstract UpgradeInbound getUpgradeInbound();
+    public abstract javax.servlet.http.ProtocolHandler getHttpUpgradeHandler();
 }

==================================================
AbstractAjpProcessor.java
index 71597dae04..6b6c430c81 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -14,13 +14,11 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.coyote;
 
 import java.io.IOException;
 import java.util.concurrent.Executor;
 
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -40,7 +38,7 @@ public interface Processor<S> {
     SocketState asyncDispatch(SocketStatus status);
     SocketState asyncPostProcess();
 
-    UpgradeInbound getUpgradeInbound();
+    javax.servlet.http.ProtocolHandler getHttpUpgradeHandler();
     SocketState upgradeDispatch() throws IOException;
 
     boolean isComet();

==================================================
AbstractHttp11Processor.java
index 2e267563a9..70172b15b3 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -25,6 +25,8 @@ import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.AsyncContextCallback;
@@ -33,7 +35,6 @@ import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -536,7 +537,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
 
 
     @Override
-    public UpgradeInbound getUpgradeInbound() {
+    public ProtocolHandler getHttpUpgradeHandler() {
         // Should never reach this code but in case we do...
         throw new IllegalStateException(
                 sm.getString("ajpprocessor.httpupgrade.notsupported"));

==================================================
SpdyProcessor.java
index 45e7e596ec..91132f4257 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -23,6 +23,8 @@ import java.util.StringTokenizer;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.AsyncContextCallback;
@@ -36,7 +38,6 @@ import org.apache.coyote.http11.filters.IdentityOutputFilter;
 import org.apache.coyote.http11.filters.SavedRequestInputFilter;
 import org.apache.coyote.http11.filters.VoidInputFilter;
 import org.apache.coyote.http11.filters.VoidOutputFilter;
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.Ascii;
@@ -219,10 +220,10 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
 
     /**
-     * Listener to which data available events are passed once the associated
-     * connection has completed the HTTP upgrade process.
+     * Instance of the new protocol to use after the HTTP connection has been
+     * upgraded.
      */
-    protected UpgradeInbound upgradeInbound = null;
+    protected ProtocolHandler httpUpgradeHandler = null;
 
 
     public AbstractHttp11Processor(AbstractEndpoint endpoint) {
@@ -803,7 +804,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
         } else if (actionCode == ActionCode.UPGRADE) {
-            upgradeInbound = (UpgradeInbound) param;
+            httpUpgradeHandler = (ProtocolHandler) param;
             // Stop further HTTP output
             getOutputBuffer().finished = true;
         } else {
@@ -881,7 +882,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         }
 
         while (!error && keepAlive && !comet && !isAsync() &&
-                upgradeInbound == null && !endpoint.isPaused()) {
+                httpUpgradeHandler == null && !endpoint.isPaused()) {
 
             // Parsing the request header
             try {
@@ -1542,7 +1543,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
     @Override
     public boolean isUpgrade() {
-        return upgradeInbound != null;
+        return httpUpgradeHandler != null;
     }
 
 
@@ -1557,8 +1558,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
 
     @Override
-    public UpgradeInbound getUpgradeInbound() {
-        return upgradeInbound;
+    public ProtocolHandler getHttpUpgradeHandler() {
+        return httpUpgradeHandler;
     }
 
 
@@ -1627,7 +1628,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         if (asyncStateMachine != null) {
             asyncStateMachine.recycle();
         }
-        upgradeInbound = null;
+        httpUpgradeHandler = null;
         comet = false;
         recycleInternal();
     }

==================================================
