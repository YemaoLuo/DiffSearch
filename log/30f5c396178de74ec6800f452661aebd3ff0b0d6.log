30f5c396178de74ec6800f452661aebd3ff0b0d6
==================================================
Update to latest WebSocket API proposal
==================================================
Mark Emlyn
==================================================
Wed Nov 21 20:20:40 2012 +0000
==================================================
MessageHandler.java
Update to latest WebSocket API proposal
Checked against reference implementation with javap

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1412268 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Frame.java
deleted file mode 100644
index d6dedb5935..0000000000
--- a/java/javax/net/websocket/MessageHandler.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.net.websocket;
-
-import java.io.InputStream;
-import java.io.Reader;
-import java.nio.ByteBuffer;
-
-public interface MessageHandler {
-
-    interface Text extends MessageHandler {
-
-        void onMessage(String text);
-    }
-
-
-    interface Binary extends MessageHandler {
-
-        void onMessage(ByteBuffer data);
-    }
-
-
-    interface AsyncBinary extends MessageHandler {
-
-         void onMessagePart(ByteBuffer part, boolean last);
-    }
-
-
-    interface AsyncText extends MessageHandler {
-
-        void onMessagePart(String part, boolean last);
-    }
-
-
-    interface DecodedObject<T> extends MessageHandler {
-
-        void onMessage(T customObject);
-    }
-
-    interface BinaryStream extends MessageHandler {
-
-        void onMessage(InputStream is);
-    }
-
-
-    interface CharacterStream extends MessageHandler {
-
-        void onMessage(Reader r);
-    }
-
-
-    interface Pong extends MessageHandler {
-
-        void onPong(ByteBuffer applicationData);
-    }
-}

==================================================
FrameBuilder.java
deleted file mode 100644
index d8dee9a61a..0000000000
--- a/java/javax/net/websocket/extensions/Frame.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.net.websocket.extensions;
-
-import javax.net.websocket.CloseReason;
-
-public interface Frame {
-
-    interface Data extends Frame {
-
-        byte[] getExtensionData();
-
-        interface Text extends Frame.Data {
-
-            String getText();
-
-            interface Continuation extends Frame.Data.Text {
-
-                boolean isLast();
-            }
-        }
-
-        interface Binary extends Frame.Data {
-
-            byte[] getData();
-
-            interface Continuation extends Frame.Data.Binary {
-
-                boolean isLast();
-            }
-        }
-    }
-
-    interface Control extends Frame {
-
-        interface Ping extends Frame.Control  {
-
-            byte[] getApplicationData();
-        }
-
-        interface Pong extends Frame.Control {
-
-            byte[] getApplicationData();
-        }
-
-        interface Close extends Frame.Control {
-
-            String getReasonPhrase();
-
-            CloseReason.CloseCode getCloseCode();
-        }
-    }
-}

==================================================
ClientContainer.java
deleted file mode 100644
index af785d2b7b..0000000000
--- a/java/javax/net/websocket/extensions/FrameBuilder.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.net.websocket.extensions;
-
-import java.nio.ByteBuffer;
-
-public class FrameBuilder {
-
-    public static FrameBuilder getBuilder() {
-        // TODO
-        return null;
-    }
-
-    @SuppressWarnings("unused") // TODO Remove this once implemented
-    public Frame.Data.Text createTextFrame(String s) {
-        // TODO
-        return null;
-    }
-
-    @SuppressWarnings("unused") // TODO Remove this once implemented
-    public Frame.Data.Text.Continuation createTextContinuationFrame(
-            String s, boolean isLast) {
-        // TODO
-        return null;
-    }
-
-    @SuppressWarnings("unused") // TODO Remove this once implemented
-    public Frame.Data.Binary createBinaryFrame(ByteBuffer bb) {
-        // TODO
-        return null;
-    }
-
-    @SuppressWarnings("unused") // TODO Remove this once implemented
-    public Frame.Data.Binary.Continuation createBinaryContinuationFrame(
-            ByteBuffer bb, boolean isLast) {
-        // TODO
-        return null;
-    }
-}

==================================================
ClientEndpointConfiguration.java
similarity index 82%
rename from java/javax/net/websocket/ClientContainer.java
rename to java/javax/websocket/ClientContainer.java
index d13e360013..ceea223df5 100644
--- a/java/javax/net/websocket/ClientContainer.java
+++ b/java/javax/websocket/ClientContainer.java
@@ -14,17 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
+import java.net.URI;
 import java.util.Set;
 
-import javax.net.websocket.extensions.Extension;
-
 public interface ClientContainer {
 
-    void connectToServer(Endpoint endpoint, ClientEndpointConfiguration olc);
+    void connectToServer(Object endpoint, URI path) throws DeploymentException;
 
-    Set<Session<?>> getActiveSessions();
+    Set<Session> getActiveSessions();
 
     long getMaxSessionIdleTimeout();
 
@@ -38,5 +37,5 @@ public interface ClientContainer {
 
     void setMaxTextMessageBufferSize(long max);
 
-    Set<Extension> getInstalledExtensions();
+    Set<String> getInstalledExtensions();
 }

==================================================
CloseReason.java
similarity index 89%
rename from java/javax/net/websocket/ClientEndpointConfiguration.java
rename to java/javax/websocket/ClientEndpointConfiguration.java
index bcdbd9d718..c2c37af36d 100644
--- a/java/javax/net/websocket/ClientEndpointConfiguration.java
+++ b/java/javax/websocket/ClientEndpointConfiguration.java
@@ -14,15 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.util.List;
 
-import javax.net.websocket.extensions.Extension;
-
 public interface ClientEndpointConfiguration extends EndpointConfiguration {
 
     List<String> getPreferredSubprotocols();
 
-    List<Extension> getExtensions();
+    List<String> getExtensions();
 }

==================================================
ContainerProvider.java
similarity index 80%
rename from java/javax/net/websocket/CloseReason.java
rename to java/javax/websocket/CloseReason.java
index b3b1c71162..f1f1512dc6 100644
--- a/java/javax/net/websocket/CloseReason.java
+++ b/java/javax/websocket/CloseReason.java
@@ -14,13 +14,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public class CloseReason {
 
-    @SuppressWarnings("unused")
+    private final CloseCode closeCode;
+    private final String reasonPhrase;
+
     public CloseReason(CloseReason.CloseCode closeCode, String reasonPhrase) {
-        // FIXME - These need accessors
+        this.closeCode = closeCode;
+        this.reasonPhrase = reasonPhrase;
+    }
+
+    public CloseCode getCloseCode() {
+        return closeCode;
+    }
+
+    public String getReasonPhrase() {
+        return reasonPhrase;
     }
 
     public interface CloseCode {
@@ -41,6 +52,8 @@ public class CloseReason {
         TOO_BIG(1009),
         NO_EXTENSION(1010),
         UNEXPECTED_CONDITION(1011),
+        SERVICE_RESTART(1012),
+        TRY_AGAIN_LATER(1013),
         TLS_HANDSHAKE_FAILURE(1015);
 
         private int code;

==================================================
DecodeException.java
similarity index 97%
rename from java/javax/net/websocket/ContainerProvider.java
rename to java/javax/websocket/ContainerProvider.java
index ee6c889a9c..1bac4237d2 100644
--- a/java/javax/net/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public class ContainerProvider {
 

==================================================
Decoder.java
similarity index 98%
rename from java/javax/net/websocket/DecodeException.java
rename to java/javax/websocket/DecodeException.java
index 006d33d623..771cfa5803 100644
--- a/java/javax/net/websocket/DecodeException.java
+++ b/java/javax/websocket/DecodeException.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.nio.ByteBuffer;
 

==================================================
DefaultClientConfiguration.java
similarity index 98%
rename from java/javax/net/websocket/Decoder.java
rename to java/javax/websocket/Decoder.java
index 22a6da4b7c..490e0f6fa5 100644
--- a/java/javax/net/websocket/Decoder.java
+++ b/java/javax/websocket/Decoder.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.io.IOException;
 import java.io.InputStream;

==================================================
DefaultServerConfiguration.java
similarity index 83%
rename from java/javax/net/websocket/DefaultClientConfiguration.java
rename to java/javax/websocket/DefaultClientConfiguration.java
index 8580e178a1..9afaaf6936 100644
--- a/java/javax/net/websocket/DefaultClientConfiguration.java
+++ b/java/javax/websocket/DefaultClientConfiguration.java
@@ -14,29 +14,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.net.websocket.extensions.Extension;
-
 public class DefaultClientConfiguration implements ClientEndpointConfiguration {
-    private URI uri;
     private List<String> preferredSubprotocols = new ArrayList<>();
-    private List<Extension> extensions = new ArrayList<>();
+    private List<String> extensions = new ArrayList<>();
     private List<Encoder> encoders = new ArrayList<>();
     private List<Decoder> decoders = new ArrayList<>();
 
-    public DefaultClientConfiguration(URI uri) {
-        this.uri = uri;
-    }
-
-    public URI getURI() {
-        return uri;
-    }
-
     @Override
     public List<String> getPreferredSubprotocols() {
         return preferredSubprotocols;
@@ -49,12 +37,12 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
     }
 
     @Override
-    public List<Extension> getExtensions() {
+    public List<String> getExtensions() {
         return extensions;
     }
 
     public ClientEndpointConfiguration setExtensions(
-            List<Extension> extensions) {
+            List<String> extensions) {
         this.extensions = extensions;
         return this;
     }

==================================================
DeploymentException.java
similarity index 85%
rename from java/javax/net/websocket/DefaultServerConfiguration.java
rename to java/javax/websocket/DefaultServerConfiguration.java
index 9b3180c0d5..bb1b6c94fe 100644
--- a/java/javax/net/websocket/DefaultServerConfiguration.java
+++ b/java/javax/websocket/DefaultServerConfiguration.java
@@ -14,28 +14,26 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.net.websocket.extensions.Extension;
-
 public class DefaultServerConfiguration implements ServerEndpointConfiguration {
-    private URI uri;
+    private String path;
     @SuppressWarnings("unused") // TODO Remove this once implemented
     private List<String> subprotocols = new ArrayList<>();
     @SuppressWarnings("unused") // TODO Remove this once implemented
-    private List<Extension> extensions = new ArrayList<>();
+    private List<String> extensions = new ArrayList<>();
     private List<Encoder> encoders = new ArrayList<>();
     private List<Decoder> decoders = new ArrayList<>();
 
     protected DefaultServerConfiguration() {
     }
 
-    public DefaultServerConfiguration(URI uri) {
-        this.uri = uri;
+    public DefaultServerConfiguration(String path) {
+        this.path = path;
     }
 
     public DefaultServerConfiguration setEncoders(List<Encoder> encoders) {
@@ -55,7 +53,7 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
     }
 
     public DefaultServerConfiguration setExtensions(
-            List<Extension> extensions) {
+            List<String> extensions) {
         this.extensions = extensions;
         return this;
     }
@@ -72,6 +70,11 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
         return this.decoders;
     }
 
+    @Override
+    public String getPath() {
+        return path;
+    }
+
     @Override
     public String getNegotiatedSubprotocol(List<String> requestedSubprotocols) {
         // TODO
@@ -80,8 +83,8 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
 
 
     @Override
-    public List<Extension> getNegotiatedExtensions(
-            List<Extension> requestedExtensions) {
+    public List<String> getNegotiatedExtensions(
+            List<String> requestedExtensions) {
         // TODO
         return null;
     }
@@ -94,7 +97,8 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
 
     @Override
     public boolean matchesURI(URI uri) {
-        return this.uri.equals(uri);
+        // TODO
+        return false;
     }
 
     @Override

==================================================
EncodeException.java
new file mode 100644
index 0000000000..3528f616d7
--- /dev/null
+++ b/java/javax/websocket/DeploymentException.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket;
+
+public class DeploymentException extends Exception {
+
+    private static final long serialVersionUID = 1L;
+
+    public DeploymentException(String message) {
+        super(message);
+        // TODO Auto-generated constructor stub
+    }
+
+    public DeploymentException(String message, Throwable cause) {
+        super(message, cause);
+        // TODO Auto-generated constructor stub
+    }
+}

==================================================
Encoder.java
similarity index 88%
rename from java/javax/net/websocket/EncodeException.java
rename to java/javax/websocket/EncodeException.java
index a5e7440512..fdb536ac4c 100644
--- a/java/javax/net/websocket/EncodeException.java
+++ b/java/javax/websocket/EncodeException.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public class EncodeException extends Exception {
 
@@ -22,12 +22,12 @@ public class EncodeException extends Exception {
 
     private Object object;
 
-    public EncodeException(String message, Object object) {
+    public EncodeException(Object object, String message) {
         super(message);
         this.object = object;
     }
 
-    public EncodeException(String message, Object object, Throwable cause) {
+    public EncodeException(Object object, String message, Throwable cause) {
         super(message, cause);
         this.object = object;
     }

==================================================
Endpoint.java
similarity index 98%
rename from java/javax/net/websocket/Encoder.java
rename to java/javax/websocket/Encoder.java
index a0aa4df0e2..56596c87cc 100644
--- a/java/javax/net/websocket/Encoder.java
+++ b/java/javax/websocket/Encoder.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.io.IOException;
 import java.io.OutputStream;

==================================================
EndpointConfiguration.java
similarity index 79%
rename from java/javax/net/websocket/Endpoint.java
rename to java/javax/websocket/Endpoint.java
index f511a0fa57..a93800da6c 100644
--- a/java/javax/net/websocket/Endpoint.java
+++ b/java/javax/websocket/Endpoint.java
@@ -14,24 +14,25 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public abstract class Endpoint {
 
+    public abstract EndpointConfiguration getEndpointConfiguration();
+
     /**
      * Event that is triggered when a new session starts.
      *
      * @param session   The new session.
      */
-    public abstract void onOpen(Session<?> session);
+    public abstract void onOpen(Session session);
 
     /**
      * Event that is triggered when a session has closed.
      *
-     * @param session       The session that has closed
      * @param closeReason   Why the session was closed
      */
-    public void onClose(Session<?> session, CloseReason closeReason) {
+    public void onClose(CloseReason closeReason) {
         // NO-OP by default
     }
 
@@ -39,9 +40,8 @@ public abstract class Endpoint {
      * Event that is triggered when a protocol error occurs.
      *
      * @param throwable The exception
-     * @param session   The session that experienced the error
      */
-    public void onError(Throwable throwable, Session<?> session) {
+    public void onError(Throwable throwable) {
         // NO-OP by default
     }
 }

==================================================
HandshakeRequest.java
similarity index 97%
rename from java/javax/net/websocket/EndpointConfiguration.java
rename to java/javax/websocket/EndpointConfiguration.java
index bd70562d19..b370051dbd 100644
--- a/java/javax/net/websocket/EndpointConfiguration.java
+++ b/java/javax/websocket/EndpointConfiguration.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.util.List;
 

==================================================
HandshakeResponse.java
similarity index 97%
rename from java/javax/net/websocket/HandshakeRequest.java
rename to java/javax/websocket/HandshakeRequest.java
index efa3626220..9c218b7bde 100644
--- a/java/javax/net/websocket/HandshakeRequest.java
+++ b/java/javax/websocket/HandshakeRequest.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.net.URI;
 import java.security.Principal;

==================================================
MessageHandler.java
similarity index 96%
rename from java/javax/net/websocket/HandshakeResponse.java
rename to java/javax/websocket/HandshakeResponse.java
index ff72fa7ad5..07e9df9637 100644
--- a/java/javax/net/websocket/HandshakeResponse.java
+++ b/java/javax/websocket/HandshakeResponse.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.util.List;
 import java.util.Map;

==================================================
PingMessage.java
similarity index 73%
rename from java/javax/net/websocket/extensions/Extension.java
rename to java/javax/websocket/MessageHandler.java
index f37c8ebd05..b954fa9264 100644
--- a/java/javax/net/websocket/extensions/Extension.java
+++ b/java/javax/websocket/MessageHandler.java
@@ -14,17 +14,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket.extensions;
+package javax.websocket;
 
-import java.util.Map;
+public interface MessageHandler {
 
-public interface Extension {
+    interface Async<T> extends MessageHandler {
 
-    String getName();
+        void onMessage(T messagePart, boolean last);
+    }
 
-    Map<String, String> getParameters();
+    interface Basic<T> extends MessageHandler {
 
-    FrameHandler createIncomingFrameHandler(FrameHandler downstream);
-
-    FrameHandler createOutgoingFrameHandler(FrameHandler upstream);
+        void onMessage(T message);
+    }
 }

==================================================
RemoteEndpoint.java
similarity index 67%
rename from java/javax/net/websocket/extensions/FrameHandler.java
rename to java/javax/websocket/PingMessage.java
index d9b272d795..cfac120cd2 100644
--- a/java/javax/net/websocket/extensions/FrameHandler.java
+++ b/java/javax/websocket/PingMessage.java
@@ -1,33 +1,23 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.net.websocket.extensions;
-
-public abstract class FrameHandler {
-    private FrameHandler nextHandler;
-
-    public FrameHandler(FrameHandler nextHandler) {
-        this.nextHandler = nextHandler;
-    }
-
-    public FrameHandler getNextHandler() {
-        return this.nextHandler;
-    }
-
-    public void handleFrame(Frame f) {
-        this.nextHandler.handleFrame(f);
-    }
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket;
+
+import java.nio.ByteBuffer;
+
+public interface PingMessage {
+    ByteBuffer getApplicationData();
+}

==================================================
SendHandler.java
similarity index 74%
rename from java/javax/net/websocket/RemoteEndpoint.java
rename to java/javax/websocket/RemoteEndpoint.java
index 393a58b7bf..0837d4ff1b 100644
--- a/java/javax/net/websocket/RemoteEndpoint.java
+++ b/java/javax/websocket/RemoteEndpoint.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -23,7 +23,7 @@ import java.nio.ByteBuffer;
 import java.util.concurrent.Future;
 
 
-public interface RemoteEndpoint<T> {
+public interface RemoteEndpoint {
 
     void sendString(String text) throws IOException;
 
@@ -37,13 +37,19 @@ public interface RemoteEndpoint<T> {
 
     Writer getSendWriter() throws IOException;
 
-    void sendObject(T o) throws IOException, EncodeException;
+    void sendObject(Object o) throws IOException, EncodeException;
 
-    Future<SendResult> sendString(String text, SendHandler completion);
+    void sendStringByCompletion(String text, SendHandler completion);
 
-    Future<SendResult> sendBytes(ByteBuffer data, SendHandler completion);
+    Future<SendResult> sendStringByFuture(String text);
 
-    Future<SendResult> sendObject(T o, SendHandler handler);
+    Future<SendResult> sendBytesByFuture(ByteBuffer data);
+
+    void sendBytesByCompletion(ByteBuffer data, SendHandler completion);
+
+    Future<SendResult> sendObjectByFuture(Object obj);
+
+    void sendObjectByCompletion(Object obj, SendHandler completion);
 
     void sendPing(ByteBuffer applicationData);
 

==================================================
SendResult.java
similarity index 96%
rename from java/javax/net/websocket/SendHandler.java
rename to java/javax/websocket/SendHandler.java
index 64712c9efb..bf2e061d61 100644
--- a/java/javax/net/websocket/SendHandler.java
+++ b/java/javax/websocket/SendHandler.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public interface SendHandler {
 

==================================================
ServerContainer.java
similarity index 97%
rename from java/javax/net/websocket/SendResult.java
rename to java/javax/websocket/SendResult.java
index 1b1c004a9d..8330b2bf99 100644
--- a/java/javax/net/websocket/SendResult.java
+++ b/java/javax/websocket/SendResult.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public class SendResult {
     private Throwable exception;

==================================================
ServerEndpointConfiguration.java
similarity index 87%
rename from java/javax/net/websocket/ServerContainer.java
rename to java/javax/websocket/ServerContainer.java
index 0d0d3a5918..43e4e55dc3 100644
--- a/java/javax/net/websocket/ServerContainer.java
+++ b/java/javax/websocket/ServerContainer.java
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 public interface ServerContainer extends ClientContainer {
 
-    void publishServer(Endpoint endpoint, ServerEndpointConfiguration ilc);
+    void publishServer(Class<? extends Endpoint> clazz)
+            throws DeploymentException;
 }

==================================================
Session.java
similarity index 87%
rename from java/javax/net/websocket/ServerEndpointConfiguration.java
rename to java/javax/websocket/ServerEndpointConfiguration.java
index e0420734f3..87540491dc 100644
--- a/java/javax/net/websocket/ServerEndpointConfiguration.java
+++ b/java/javax/websocket/ServerEndpointConfiguration.java
@@ -14,22 +14,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.net.URI;
 import java.util.List;
 
-import javax.net.websocket.extensions.Extension;
-
 public interface ServerEndpointConfiguration extends EndpointConfiguration {
 
     String getNegotiatedSubprotocol(List<String> requestedSubprotocols);
 
-    List<Extension> getNegotiatedExtensions(List<Extension> requestedExtensions);
+    List<String> getNegotiatedExtensions(List<String> requestedExtensions);
 
     boolean checkOrigin(String originHeaderValue);
 
     boolean matchesURI(URI uri);
 
     void modifyHandshake(HandshakeRequest request, HandshakeResponse response);
+
+    String getPath();
 }

==================================================
WebSocketClient.java
similarity index 85%
rename from java/javax/net/websocket/Session.java
rename to java/javax/websocket/Session.java
index 76e96288eb..5910d7f2b2 100644
--- a/java/javax/net/websocket/Session.java
+++ b/java/javax/websocket/Session.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket;
+package javax.websocket;
 
 import java.io.IOException;
 import java.net.URI;
@@ -22,9 +22,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import javax.net.websocket.extensions.Extension;
-
-public interface Session<T> {
+public interface Session {
 
     ClientContainer getContainer();
 
@@ -40,7 +38,7 @@ public interface Session<T> {
 
     String getNegotiatedSubprotocol();
 
-    List<Extension> getNegotiatedExtensions();
+    List<String> getNegotiatedExtensions();
 
     boolean isSecure();
 
@@ -56,9 +54,7 @@ public interface Session<T> {
 
     long getMaximumMessageSize();
 
-    RemoteEndpoint<?> getRemote();
-
-    RemoteEndpoint<T> getRemoteL(Class<T> c);
+    RemoteEndpoint getRemote();
 
     void close() throws IOException;
 
@@ -66,7 +62,9 @@ public interface Session<T> {
 
     URI getRequestURI();
 
-    Map<String, String[]> getParameterMap();
+    Map<String, String[]> getRequestParameterMap();
 
     String getQueryString();
+
+    Map<String,String> getPathParameters();
 }

==================================================
WebSocketClose.java
new file mode 100644
index 0000000000..326234ed98
--- /dev/null
+++ b/java/javax/websocket/WebSocketClient.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface WebSocketClient {
+    String[] subprotocols();
+    Class<? extends Decoder>[] decoders();
+    Class<? extends Encoder>[] encoders();
+}

==================================================
WebSocketEndpoint.java
similarity index 96%
rename from java/javax/net/websocket/annotations/WebSocketClose.java
rename to java/javax/websocket/WebSocketClose.java
index 20d46f24d3..9b03b166f8 100644
--- a/java/javax/net/websocket/annotations/WebSocketClose.java
+++ b/java/javax/websocket/WebSocketClose.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket.annotations;
+package javax.websocket;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

==================================================
WebSocketError.java
similarity index 88%
rename from java/javax/net/websocket/annotations/WebSocketEndpoint.java
rename to java/javax/websocket/WebSocketEndpoint.java
index 5a8ca939a7..9469e0a8b9 100644
--- a/java/javax/net/websocket/annotations/WebSocketEndpoint.java
+++ b/java/javax/websocket/WebSocketEndpoint.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket.annotations;
+package javax.websocket;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -29,7 +29,7 @@ public @interface WebSocketEndpoint {
 
     public String[] subprotocols() default {};
 
-    public Class<?>[] decoders() default {};
+    public Class<? extends Decoder>[] decoders() default {};
 
-    public Class<?>[] encoders() default {};
+    public Class<? extends Encoder>[] encoders() default {};
 }

==================================================
WebSocketMessage.java
similarity index 96%
rename from java/javax/net/websocket/annotations/WebSocketError.java
rename to java/javax/websocket/WebSocketError.java
index 75ec4e224a..77ef9c2e99 100644
--- a/java/javax/net/websocket/annotations/WebSocketError.java
+++ b/java/javax/websocket/WebSocketError.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket.annotations;
+package javax.websocket;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

==================================================
WebSocketOpen.java
similarity index 96%
rename from java/javax/net/websocket/annotations/WebSocketMessage.java
rename to java/javax/websocket/WebSocketMessage.java
index 601e7d1817..5accf930bf 100644
--- a/java/javax/net/websocket/annotations/WebSocketMessage.java
+++ b/java/javax/websocket/WebSocketMessage.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket.annotations;
+package javax.websocket;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

==================================================
WebSocketPathParam.java
similarity index 96%
rename from java/javax/net/websocket/annotations/WebSocketOpen.java
rename to java/javax/websocket/WebSocketOpen.java
index 4b80096782..f10a71c15a 100644
--- a/java/javax/net/websocket/annotations/WebSocketOpen.java
+++ b/java/javax/websocket/WebSocketOpen.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package javax.net.websocket.annotations;
+package javax.websocket;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

==================================================
