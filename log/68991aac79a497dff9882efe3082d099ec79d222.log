68991aac79a497dff9882efe3082d099ec79d222
==================================================
Improve handling of I/O errors during non-blocking writes
==================================================
Mark Thomas
==================================================
Wed Mar 3 15:12:51 2021 +0000
==================================================
CoyoteAdapter.java
Improve handling of I/O errors during non-blocking writes


==================================================
TestNonBlockingAPI.java
index 8af8cd6184..b39f07bebc 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -158,12 +158,11 @@ public class CoyoteAdapter implements Adapter {
                     if (res.getWriteListener() != null) {
                         res.getWriteListener().onError(t);
                     }
+                    res.action(ActionCode.CLOSE_NOW, t);
+                    asyncConImpl.setErrorState(t, true);
                 } finally {
                     context.unbind(false, oldCL);
                 }
-                if (t != null) {
-                    asyncConImpl.setErrorState(t, true);
-                }
             }
 
             // Check to see if non-blocking writes or reads are being used
@@ -191,8 +190,8 @@ public class CoyoteAdapter implements Adapter {
                         // Therefore no need to set success=false as that would trigger a
                         // second call to AbstractProcessor.setErrorState()
                         // https://bz.apache.org/bugzilla/show_bug.cgi?id=65001
-                        res.action(ActionCode.CLOSE_NOW, t);
                         writeListener.onError(t);
+                        res.action(ActionCode.CLOSE_NOW, t);
                         asyncConImpl.setErrorState(t, true);
                     } finally {
                         context.unbind(false, oldCL);
@@ -224,8 +223,8 @@ public class CoyoteAdapter implements Adapter {
                         // Therefore no need to set success=false as that would trigger a
                         // second call to AbstractProcessor.setErrorState()
                         // https://bz.apache.org/bugzilla/show_bug.cgi?id=65001
-                        res.action(ActionCode.CLOSE_NOW, t);
                         readListener.onError(t);
+                        res.action(ActionCode.CLOSE_NOW, t);
                         asyncConImpl.setErrorState(t, true);
                     } finally {
                         context.unbind(false, oldCL);

==================================================
