838c497c8c8b86c610b4bca83cd37919579e1f4b
==================================================
Remove unused AttributeReader
==================================================
Mark Emlyn
==================================================
Sun Oct 14 18:27:10 2012 +0000
==================================================
Attribute.java
Remove unused AttributeReader

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1398112 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AttributeReader.java
index 0ae5d1df3c..e8855023d4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.Serializable;
-import java.util.HashMap;
-import java.util.Map;
 
 import org.apache.tomcat.util.bcel.Constants;
 
@@ -65,8 +63,6 @@ public abstract class Attribute implements Cloneable, Serializable
         this.constant_pool = constant_pool;
     }
 
-    private static final Map<String,AttributeReader> readers = new HashMap<>();
-
     /*
      * Class method reads one attribute from the input data stream. This method
      * must not be accessible from the outside. It is called by the Field and
@@ -107,12 +103,6 @@ public abstract class Attribute implements Cloneable, Serializable
         switch (tag)
         {
         case Constants.ATTR_UNKNOWN:
-            AttributeReader r = readers.get(name);
-            if (r != null)
-            {
-                return r.createAttribute(name_index, length, file,
-                        constant_pool);
-            }
             return new Unknown(name_index, length, file, constant_pool);
         case Constants.ATTR_CONSTANT_VALUE:
             return new ConstantValue(name_index, length, file, constant_pool);

==================================================
Unknown.java
deleted file mode 100644
index 527ca32981..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/AttributeReader.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-/**
- * Unknown (non-standard) attributes may be read via user-defined factory
- * objects that can be registered with the Attribute.addAttributeReader
- * method. These factory objects should implement this interface.
-
- * @see Attribute
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public interface AttributeReader {
-
-    /**
-     When this attribute reader is added via the static method
-     Attribute.addAttributeReader, an attribute name is associated with it.
-     As the class file parser parses attributes, it will call various
-     AttributeReaders based on the name of the attributes it is
-     constructing.
-
-     @param name_index An index into the constant pool, indexing a
-     ConstantUtf8 that represents the name of the attribute.
-
-     @param length The length of the data contained in the attribute.  This
-     is written into the constant pool and should agree with what the
-     factory expects the length to be.
-
-     @param file This is the data input stream that the factory needs to read
-     its data from.
-
-     @param constant_pool This is the constant pool associated with the
-     Attribute that we are constructing.
-
-     @return The user-defined AttributeReader should take this data and use
-     it to construct an attribute.  In the case of errors, a null can be
-     returned which will cause the parsing of the class file to fail.
-     */
-    Attribute createAttribute( int name_index, int length, java.io.DataInputStream file,
-            ConstantPool constant_pool );
-}

==================================================
