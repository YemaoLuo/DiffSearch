a7ba1af420da6b7f60ec106bb5e1ecb293432237
==================================================
Add a test case for EvaluationListener.propertyResolved() and update the various resolvers to call the new ELContext.setPropertyResolved(Object, Object) method
==================================================
Mark Emlyn
==================================================
Mon Jul 8 13:58:50 2013 +0000
==================================================
ArrayELResolver.java
Add a test case for EvaluationListener.propertyResolved() and update the various resolvers to call the new ELContext.setPropertyResolved(Object, Object) method

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1500736 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BeanELResolver.java
index 4c80c4f209..722b5659e0 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -41,7 +41,7 @@ public class ArrayELResolver extends ELResolver {
         }
 
         if (base != null && base.getClass().isArray()) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             int idx = coerce(property);
             checkBounds(base, idx);
             return base.getClass().getComponentType();
@@ -57,7 +57,7 @@ public class ArrayELResolver extends ELResolver {
         }
 
         if (base != null && base.getClass().isArray()) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             int idx = coerce(property);
             if (idx < 0 || idx >= Array.getLength(base)) {
                 return null;
@@ -76,7 +76,7 @@ public class ArrayELResolver extends ELResolver {
         }
 
         if (base != null && base.getClass().isArray()) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(Util.message(context,
@@ -103,7 +103,7 @@ public class ArrayELResolver extends ELResolver {
         }
 
         if (base != null && base.getClass().isArray()) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             int idx = coerce(property);
             checkBounds(base, idx);
         }

==================================================
BeanNameELResolver.java
index 60f6f0c3b4..044d85b148 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -78,7 +78,7 @@ public class BeanELResolver extends ELResolver {
             return null;
         }
 
-        context.setPropertyResolved(true);
+        context.setPropertyResolved(base, property);
         return this.property(context, base, property).getPropertyType();
     }
 
@@ -91,7 +91,7 @@ public class BeanELResolver extends ELResolver {
             return null;
         }
 
-        context.setPropertyResolved(true);
+        context.setPropertyResolved(base, property);
         Method m = this.property(context, base, property).read(context);
         try {
             return m.invoke(base, (Object[]) null);
@@ -122,7 +122,7 @@ public class BeanELResolver extends ELResolver {
             return;
         }
 
-        context.setPropertyResolved(true);
+        context.setPropertyResolved(base, property);
 
         if (this.readOnly) {
             throw new PropertyNotWritableException(Util.message(context,
@@ -185,7 +185,7 @@ public class BeanELResolver extends ELResolver {
             throw new ELException(cause);
         }
 
-        context.setPropertyResolved(true);
+        context.setPropertyResolved(base, method);
         return result;
     }
 
@@ -198,7 +198,7 @@ public class BeanELResolver extends ELResolver {
             return false;
         }
 
-        context.setPropertyResolved(true);
+        context.setPropertyResolved(base, property);
         return this.readOnly
                 || this.property(context, base, property).isReadOnly();
     }

==================================================
ListELResolver.java
index 866f4b0a54..b2bb1c0a3b 100644
--- a/java/javax/el/BeanNameELResolver.java
+++ b/java/javax/el/BeanNameELResolver.java
@@ -45,7 +45,7 @@ public class BeanNameELResolver extends ELResolver {
         if (beanNameResolver.isNameResolved(beanName)) {
             try {
                 Object result = beanNameResolver.getBean((String) property);
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
                 return result;
             } catch (Throwable t) {
                 Util.handleThrowable(t);
@@ -90,7 +90,7 @@ public class BeanNameELResolver extends ELResolver {
                 beanNameResolver.canCreateBean(beanName)) {
             try {
                 beanNameResolver.setBeanValue(beanName, value);
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
             } catch (Throwable t) {
                 Util.handleThrowable(t);
                 throw new ELException(t);
@@ -113,7 +113,7 @@ public class BeanNameELResolver extends ELResolver {
         try {
             if (beanNameResolver.isNameResolved(beanName)) {
                 Class<?> result = beanNameResolver.getBean(beanName).getClass();
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
                 return result;
             }
         } catch (Throwable t) {
@@ -145,7 +145,7 @@ public class BeanNameELResolver extends ELResolver {
                 Util.handleThrowable(t);
                 throw new ELException(t);
             }
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             return result;
         }
 

==================================================
MapELResolver.java
index eee12088d0..1fb2ced682 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -46,7 +46,7 @@ public class ListELResolver extends ELResolver {
         }
 
         if (base instanceof List<?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             List<?> list = (List<?>) base;
             int idx = coerce(property);
             if (idx < 0 || idx >= list.size()) {
@@ -66,7 +66,7 @@ public class ListELResolver extends ELResolver {
         }
 
         if (base instanceof List<?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             List<?> list = (List<?>) base;
             int idx = coerce(property);
             if (idx < 0 || idx >= list.size()) {
@@ -86,7 +86,7 @@ public class ListELResolver extends ELResolver {
         }
 
         if (base instanceof List<?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             @SuppressWarnings("unchecked") // Must be OK to cast to Object
             List<Object> list = (List<Object>) base;
 
@@ -113,7 +113,7 @@ public class ListELResolver extends ELResolver {
         }
 
         if (base instanceof List<?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             List<?> list = (List<?>) base;
             int idx = coerce(property);
             if (idx < 0 || idx >= list.size()) {

==================================================
ResourceBundleELResolver.java
index f4f1058b77..0f33814fed 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -47,7 +47,7 @@ public class MapELResolver extends ELResolver {
         }
 
         if (base instanceof Map<?,?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             return Object.class;
         }
 
@@ -61,7 +61,7 @@ public class MapELResolver extends ELResolver {
         }
 
         if (base instanceof Map<?,?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             return ((Map<?,?>) base).get(property);
         }
 
@@ -76,7 +76,7 @@ public class MapELResolver extends ELResolver {
         }
 
         if (base instanceof Map<?, ?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(Util.message(context,
@@ -100,7 +100,7 @@ public class MapELResolver extends ELResolver {
         }
 
         if (base instanceof Map<?, ?>) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             return this.readOnly || UNMODIFIABLE.equals(base.getClass());
         }
 

==================================================
StaticFieldELResolver.java
index a5e926fc5a..a7f4a83c2a 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -39,7 +39,7 @@ public class ResourceBundleELResolver extends ELResolver {
         }
 
         if (base instanceof ResourceBundle) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
 
             if (property != null) {
                 try {
@@ -61,7 +61,7 @@ public class ResourceBundleELResolver extends ELResolver {
         }
 
         if (base instanceof ResourceBundle) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
         }
 
         return null;
@@ -75,7 +75,7 @@ public class ResourceBundleELResolver extends ELResolver {
         }
 
         if (base instanceof ResourceBundle) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             throw new PropertyNotWritableException(Util.message(context,
                     "resolverNotWriteable", base.getClass().getName()));
         }
@@ -88,7 +88,7 @@ public class ResourceBundleELResolver extends ELResolver {
         }
 
         if (base instanceof ResourceBundle) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
         }
 
         return true;

==================================================
ImplicitObjectELResolver.java
index ed229fdceb..bf761b160b 100644
--- a/java/javax/el/StaticFieldELResolver.java
+++ b/java/javax/el/StaticFieldELResolver.java
@@ -37,7 +37,7 @@ public class StaticFieldELResolver extends ELResolver {
         }
 
         if (base instanceof ELClass && property instanceof String) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
 
             Class<?> clazz = ((ELClass) base).getKlass();
             String name = (String) property;
@@ -93,7 +93,7 @@ public class StaticFieldELResolver extends ELResolver {
         }
 
         if (base instanceof ELClass && method instanceof String) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, method);
 
             Class<?> clazz = ((ELClass) base).getKlass();
             String methodName = (String) method;
@@ -156,7 +156,7 @@ public class StaticFieldELResolver extends ELResolver {
         }
 
         if (base instanceof ELClass && property instanceof String) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
 
             Class<?> clazz = ((ELClass) base).getKlass();
             String name = (String) property;
@@ -191,7 +191,7 @@ public class StaticFieldELResolver extends ELResolver {
         }
 
         if (base instanceof ELClass && property instanceof String) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
         }
         return true;
     }

==================================================
ScopedAttributeELResolver.java
index 4958c2365a..80be339624 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -87,7 +87,7 @@ public class ImplicitObjectELResolver extends ELResolver {
             if (idx >= 0) {
                 PageContext page = (PageContext) context
                         .getContext(JspContext.class);
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
                 switch (idx) {
                 case APPLICATIONSCOPE:
                     return ScopeManager.get(page).getApplicationScope();
@@ -127,7 +127,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
             if (idx >= 0) {
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
             }
         }
         return null;
@@ -143,7 +143,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
             if (idx >= 0) {
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
                 throw new PropertyNotWritableException();
             }
         }
@@ -158,7 +158,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         if (base == null && property != null) {
             int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());
             if (idx >= 0) {
-                context.setPropertyResolved(true);
+                context.setPropertyResolved(base, property);
                 return true;
             }
         }

==================================================
ELResolverImpl.java
index 058a401b8c..c3303c90e4 100644
--- a/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
+++ b/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
@@ -44,7 +44,7 @@ public class ScopedAttributeELResolver extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             if (property != null) {
                 String key = property.toString();
                 PageContext page = (PageContext) context
@@ -64,7 +64,7 @@ public class ScopedAttributeELResolver extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             return Object.class;
         }
 
@@ -79,7 +79,7 @@ public class ScopedAttributeELResolver extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             if (property != null) {
                 String key = property.toString();
                 PageContext page = (PageContext) context
@@ -101,7 +101,7 @@ public class ScopedAttributeELResolver extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
         }
 
         return false;

==================================================
TestEvaluationListener.java
index fdbc7b2cc9..5e0056d154 100644
--- a/java/org/apache/jasper/el/ELResolverImpl.java
+++ b/java/org/apache/jasper/el/ELResolverImpl.java
@@ -43,7 +43,7 @@ public final class ELResolverImpl extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             if (property != null) {
                 try {
                     return this.variableResolver.resolveVariable(property
@@ -67,7 +67,7 @@ public final class ELResolverImpl extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             if (property != null) {
                 try {
                     Object obj = this.variableResolver.resolveVariable(property
@@ -93,7 +93,7 @@ public final class ELResolverImpl extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             throw new PropertyNotWritableException(
                     "Legacy VariableResolver wrapped, not writable");
         }
@@ -110,7 +110,7 @@ public final class ELResolverImpl extends ELResolver {
         }
 
         if (base == null) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(base, property);
             return true;
         }
 

==================================================
TesterELResolverOne.java
new file mode 100644
index 0000000000..95b404ae49
--- /dev/null
+++ b/test/javax/el/TestEvaluationListener.java
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.el;
+
+import java.util.List;
+
+import javax.el.TesterEvaluationListener.Pair;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestEvaluationListener {
+
+
+    @Test
+    public void testPropertyResolved01() {
+        ELContext context = new TesterELContext();
+        ELResolver resolver = new BeanELResolver();
+        TesterBean bean = new TesterBean("test");
+        TesterEvaluationListener listener = new TesterEvaluationListener();
+
+        context.addEvaluationListener(listener);
+
+        Object result = resolver.getValue(context, bean, "name");
+
+        Assert.assertTrue(context.isPropertyResolved());
+        Assert.assertEquals("test", result);
+        List<Pair> events = listener.getResolvedProperties();
+
+        Assert.assertEquals(1, events.size());
+        Pair p = events.get(0);
+        Assert.assertEquals(bean, p.getBase());
+        Assert.assertEquals("name", p.getProperty());
+    }
+
+
+    @Test
+    public void testPropertyResolved02() {
+        ELContext context = new TesterELContext();
+        ELResolver resolver = new BeanELResolver();
+        TesterBean bean = new TesterBean("test");
+        TesterEvaluationListener listener = new TesterEvaluationListener();
+
+        context.addEvaluationListener(listener);
+
+        Exception exception = null;
+        try {
+            resolver.getValue(context, bean, "foo");
+        } catch (PropertyNotFoundException e) {
+            exception = e;
+        }
+
+        Assert.assertNotNull(exception);
+
+        // Still expect the property to be resolved and the listener to fire
+        // since the vent is at the time of resolution. The EL spec could be a
+        // lot clear on this.
+        Assert.assertTrue(context.isPropertyResolved());
+        List<Pair> events = listener.getResolvedProperties();
+
+        Assert.assertEquals(1, events.size());
+        Pair p = events.get(0);
+        Assert.assertEquals(bean, p.getBase());
+        Assert.assertEquals("foo", p.getProperty());
+    }
+}

==================================================
TesterELResolverTwo.java
index a7b06f262a..62217eb303 100644
--- a/test/javax/el/TesterELResolverOne.java
+++ b/test/javax/el/TesterELResolverOne.java
@@ -21,7 +21,7 @@ public class TesterELResolverOne extends TypeConverter {
     @Override
     public Object convertToType(ELContext context, Object obj, Class<?> type) {
         if ("1".equals(obj) && type == String.class) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(obj, type);
             return "ONE";
         }
         return null;

==================================================
TesterEvaluationListener.java
index a7f989f7a8..6ffac1fb67 100644
--- a/test/javax/el/TesterELResolverTwo.java
+++ b/test/javax/el/TesterELResolverTwo.java
@@ -21,7 +21,7 @@ public class TesterELResolverTwo extends TypeConverter {
     @Override
     public Object convertToType(ELContext context, Object obj, Class<?> type) {
         if ("2".equals(obj) && type == String.class) {
-            context.setPropertyResolved(true);
+            context.setPropertyResolved(obj, type);
             return "TWO";
         }
         return null;

==================================================
