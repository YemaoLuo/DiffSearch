cda8f02e7d2a24eb5eb28a2746c88bad9d4aa015
==================================================
Fix possible connection leak with async
==================================================
remm remm@apache.org
==================================================
Mon Apr 15 18:59:59 2019 +0200
==================================================
Http2AsyncParser.java
Fix possible connection leak with async

It is necessary to go back to the handler for connection cleanup at the
moment.


==================================================
Http2AsyncUpgradeHandler.java
index d8f2767d51..448f3cea03 100644
--- a/java/org/apache/coyote/http2/Http2AsyncParser.java
+++ b/java/org/apache/coyote/http2/Http2AsyncParser.java
@@ -31,16 +31,14 @@ import org.apache.tomcat.util.net.SocketWrapperBase.CompletionState;
 class Http2AsyncParser extends Http2Parser {
 
     private final SocketWrapperBase<?> socketWrapper;
-    private final Http2AsyncUpgradeHandler upgradeHandler;
     private Throwable error = null;
     private final ByteBuffer header;
     private final ByteBuffer framePaylod;
 
-    Http2AsyncParser(String connectionId, Input input, Output output, SocketWrapperBase<?> socketWrapper, Http2AsyncUpgradeHandler upgradeHandler) {
+    Http2AsyncParser(String connectionId, Input input, Output output, SocketWrapperBase<?> socketWrapper) {
         super(connectionId, input, output);
         this.socketWrapper = socketWrapper;
         socketWrapper.getSocketBufferHandler().expand(input.getMaxFrameSize());
-        this.upgradeHandler = upgradeHandler;
         header = ByteBuffer.allocate(9);
         framePaylod = ByteBuffer.allocate(input.getMaxFrameSize());
     }
@@ -228,7 +226,7 @@ class Http2AsyncParser extends Http2Parser {
             if (state == CompletionState.DONE) {
                 // The call was not completed inline, so must start reading new frames
                 // or process the stream exception
-                upgradeHandler.upgradeDispatch(SocketEvent.OPEN_READ);
+                socketWrapper.processSocket(SocketEvent.OPEN_READ, false);
             }
         }
 
@@ -236,11 +234,11 @@ class Http2AsyncParser extends Http2Parser {
         public void failed(Throwable e, Void attachment) {
             // Always a fatal IO error
             error = e;
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("http2Parser.error", connectionId, Integer.valueOf(streamId), frameType), e);
+            }
             if (state == null || state == CompletionState.DONE) {
-                if (log.isDebugEnabled()) {
-                    log.debug(sm.getString("http2Parser.error", connectionId, Integer.valueOf(streamId), frameType), e);
-                }
-                upgradeHandler.upgradeDispatch(SocketEvent.ERROR);
+                socketWrapper.processSocket(SocketEvent.ERROR, true);
             }
         }
 

==================================================
