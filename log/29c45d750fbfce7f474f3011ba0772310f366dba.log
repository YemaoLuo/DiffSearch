29c45d750fbfce7f474f3011ba0772310f366dba
==================================================
writeable -> writable for consistency
==================================================
Mark Thomas
==================================================
Mon Dec 6 08:00:30 2021 +0000
==================================================
ArrayELResolver.java
writeable -> writable for consistency

Excludes MBean descriptors as DTD uses writeable


==================================================
BeanELResolver.java
index c9a0aff96b..d8d4ff93e3 100644
--- a/java/jakarta/el/ArrayELResolver.java
+++ b/java/jakarta/el/ArrayELResolver.java
@@ -84,7 +84,7 @@ public class ArrayELResolver extends ELResolver {
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(Util.message(context,
-                        "resolverNotWriteable", base.getClass().getName()));
+                        "resolverNotWritable", base.getClass().getName()));
             }
 
             int idx = coerce(property);

==================================================
ListELResolver.java
index 81a229bb98..b39fa6d5c5 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -111,7 +111,7 @@ public class BeanELResolver extends ELResolver {
 
         if (this.readOnly) {
             throw new PropertyNotWritableException(Util.message(context,
-                    "resolverNotWriteable", base.getClass().getName()));
+                    "resolverNotWritable", base.getClass().getName()));
         }
 
         Method m = this.property(context, base, property).write(context, base);

==================================================
MapELResolver.java
index a4f142bad7..ae4905dc2b 100644
--- a/java/jakarta/el/LocalStrings_zh_CN.properties
+++ b/java/jakarta/el/LocalStrings_zh_CN.properties
@@ -46,7 +46,7 @@ propertyWriteError=在类型[{0}]上写入[{1}]时出错
 
 staticFieldELResolver.methodNotFound=在类[{1}]上找不到名为[{0}]的匹配的公共静态方法
 staticFieldELResolver.notFound=（Java  9+导出）类[{1}]上找不到名为[{0}]的公共静态字段
-staticFieldELResolver.notWriteable=不允许写入静态字段（当前情况中为类[{1}]上的字段[{0}]）
+staticFieldELResolver.notWritable=不允许写入静态字段（当前情况中为类[{1}]上的字段[{0}]）
 
 util.method.ambiguous=无法找到明确的方法：{0}.{1}({2})
 util.method.notfound=找不到方法：{0}.{1}({2})

==================================================
ResourceBundleELResolver.java
index 95268301fc..35d7229288 100644
--- a/java/jakarta/el/MapELResolver.java
+++ b/java/jakarta/el/MapELResolver.java
@@ -80,7 +80,7 @@ public class MapELResolver extends ELResolver {
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(Util.message(context,
-                        "resolverNotWriteable", base.getClass().getName()));
+                        "resolverNotWritable", base.getClass().getName()));
             }
 
             try {

==================================================
StaticFieldELResolver.java
index e9d0cebab4..6050d323e1 100644
--- a/java/jakarta/el/ResourceBundleELResolver.java
+++ b/java/jakarta/el/ResourceBundleELResolver.java
@@ -74,7 +74,7 @@ public class ResourceBundleELResolver extends ELResolver {
         if (base instanceof ResourceBundle) {
             context.setPropertyResolved(base, property);
             throw new PropertyNotWritableException(Util.message(context,
-                    "resolverNotWriteable", base.getClass().getName()));
+                    "resolverNotWritable", base.getClass().getName()));
         }
     }
 

==================================================
Http2AsyncUpgradeHandler.java
index d0de03c8ef..365b97929c 100644
--- a/java/jakarta/el/StaticFieldELResolver.java
+++ b/java/jakarta/el/StaticFieldELResolver.java
@@ -74,7 +74,7 @@ public class StaticFieldELResolver extends ELResolver {
             String name = (String) property;
 
             throw new PropertyNotWritableException(Util.message(context,
-                    "staticFieldELResolver.notWriteable", name,
+                    "staticFieldELResolver.notWritable", name,
                     clazz.getName()));
         }
     }

==================================================
Http2UpgradeHandler.java
index 94114a2018..a63f470584 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -205,7 +205,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                     Integer.toString(len), Boolean.valueOf(finished)));
         }
         // Need to check this now since sending end of stream will change this.
-        boolean writeable = stream.canWrite();
+        boolean writable = stream.canWrite();
         byte[] header = new byte[9];
         ByteUtil.setThreeBytes(header, 0, len);
         header[3] = FrameType.DATA.getIdByte();
@@ -216,7 +216,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                 setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());
             }
         }
-        if (writeable) {
+        if (writable) {
             ByteUtil.set31Bits(header, 5, stream.getIdAsInt());
             int orgLimit = data.limit();
             data.limit(data.position() + len);
@@ -328,7 +328,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
             boolean finished = (frameSize == sendfile.left) && sendfile.stream.getCoyoteResponse().getTrailerFields() == null;
 
             // Need to check this now since sending end of stream will change this.
-            boolean writeable = sendfile.stream.canWrite();
+            boolean writable = sendfile.stream.canWrite();
             byte[] header = new byte[9];
             ByteUtil.setThreeBytes(header, 0, frameSize);
             header[3] = FrameType.DATA.getIdByte();
@@ -339,7 +339,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                     setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());
                 }
             }
-            if (writeable) {
+            if (writable) {
                 if (log.isDebugEnabled()) {
                     log.debug(sm.getString("upgradeHandler.writeBody", connectionId, sendfile.stream.getIdAsString(),
                             Integer.toString(frameSize), Boolean.valueOf(finished)));
@@ -408,7 +408,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                 boolean finished = (frameSize == sendfile.left) && sendfile.stream.getCoyoteResponse().getTrailerFields() == null;
 
                 // Need to check this now since sending end of stream will change this.
-                boolean writeable = sendfile.stream.canWrite();
+                boolean writable = sendfile.stream.canWrite();
                 byte[] header = new byte[9];
                 ByteUtil.setThreeBytes(header, 0, frameSize);
                 header[3] = FrameType.DATA.getIdByte();
@@ -419,7 +419,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                         setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());
                     }
                 }
-                if (writeable) {
+                if (writable) {
                     if (log.isDebugEnabled()) {
                         log.debug(sm.getString("upgradeHandler.writeBody", connectionId, sendfile.stream.getIdAsString(),
                                 Integer.toString(frameSize), Boolean.valueOf(finished)));

==================================================
SecureNioChannel.java
index f61f9210e5..fcb05b006b 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -762,7 +762,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         reduceOverheadCount(FrameType.DATA);
 
         // Need to check this now since sending end of stream will change this.
-        boolean writeable = stream.canWrite();
+        boolean writable = stream.canWrite();
         byte[] header = new byte[9];
         ByteUtil.setThreeBytes(header, 0, len);
         header[3] = FrameType.DATA.getIdByte();
@@ -773,7 +773,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
                 setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());
             }
         }
-        if (writeable) {
+        if (writable) {
             ByteUtil.set31Bits(header, 5, stream.getIdAsInt());
             synchronized (socketWrapper) {
                 try {

==================================================
AbstractTestFileResourceSet.java
index e3fc746ab6..34b13ae54f 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -361,7 +361,7 @@ public class SecureNioChannel extends NioChannel {
         }
         handshakeComplete = false;
         boolean isReadable = false;
-        boolean isWriteable = false;
+        boolean isWritable = false;
         boolean handshaking = true;
         Selector selector = null;
         SelectionKey key = null;
@@ -369,7 +369,7 @@ public class SecureNioChannel extends NioChannel {
             sslEngine.beginHandshake();
             handshakeStatus = sslEngine.getHandshakeStatus();
             while (handshaking) {
-                int hsStatus = this.handshake(isReadable, isWriteable);
+                int hsStatus = this.handshake(isReadable, isWritable);
                 switch (hsStatus) {
                     case -1 :
                         throw new EOFException(sm.getString("channel.nio.ssl.eofDuringHandshake"));
@@ -389,7 +389,7 @@ public class SecureNioChannel extends NioChannel {
                             throw new SocketTimeoutException(sm.getString("channel.nio.ssl.timeoutDuringHandshake"));
                         }
                         isReadable = key.isReadable();
-                        isWriteable = key.isWritable();
+                        isWritable = key.isWritable();
                 }
             }
         } catch (IOException x) {

==================================================
AbstractTestResourceSet.java
index fb24affa92..d61c15b0b6 100644
--- a/test/org/apache/catalina/webresources/AbstractTestFileResourceSet.java
+++ b/test/org/apache/catalina/webresources/AbstractTestFileResourceSet.java
@@ -64,7 +64,7 @@ public abstract class AbstractTestFileResourceSet extends AbstractTestResourceSe
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return !readOnly;
     }
 

==================================================
TestDirResourceSet.java
index 095781ed7d..ce4c31b28c 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
@@ -38,7 +38,7 @@ public abstract class AbstractTestResourceSet {
     protected WebResourceRoot resourceRoot;
 
     protected abstract WebResourceRoot getWebResourceRoot();
-    protected abstract boolean isWriteable();
+    protected abstract boolean isWritable();
 
     public String getMount() {
         return "";
@@ -399,7 +399,7 @@ public abstract class AbstractTestResourceSet {
     @Test
     public final void testMkdirNew() {
         String newDirName = getNewDirName();
-        if (isWriteable()) {
+        if (isWritable()) {
             Assert.assertTrue(resourceRoot.mkdir(getMount() + "/" + newDirName));
 
             File file = new File(getBaseDir(), newDirName);
@@ -472,7 +472,7 @@ public abstract class AbstractTestResourceSet {
     public final void testWrite() {
         String newFileName = getNewFileName();
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        if (isWriteable()) {
+        if (isWritable()) {
             Assert.assertTrue(resourceRoot.write(
                     getMount() + "/" + newFileName, is, false));
             File file = new File(getBaseDir(), newFileName);

==================================================
TestDirResourceSetInternal.java
index 33a20cfa1e..f636c18389 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSet.java
@@ -60,7 +60,7 @@ public class TestDirResourceSet extends AbstractTestResourceSet {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return true;
     }
 

==================================================
TestDirResourceSetMount.java
index 108fc77f9d..ffb7a6d8a2 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
@@ -58,7 +58,7 @@ public class TestDirResourceSetInternal extends AbstractTestResourceSet {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return true;
     }
 

==================================================
TestDirResourceSetReadOnly.java
index dc413c98ec..9282669cb5 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetMount.java
@@ -59,7 +59,7 @@ public class TestDirResourceSetMount extends AbstractTestResourceSetMount {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return true;
     }
 

==================================================
TestDirResourceSetVirtual.java
index e8e0a58edc..02ba3b2cf0 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetReadOnly.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetReadOnly.java
@@ -34,7 +34,7 @@ public class TestDirResourceSetReadOnly extends AbstractTestResourceSet {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return false;
     }
 

==================================================
TestJarResourceSet.java
index bf79b28f62..02c7736736 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetVirtual.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetVirtual.java
@@ -76,7 +76,7 @@ public class TestDirResourceSetVirtual extends AbstractTestResourceSet {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return true;
     }
 

==================================================
TestJarResourceSetInternal.java
index ed6c65fe47..8aa14c96aa 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSet.java
@@ -36,7 +36,7 @@ public class TestJarResourceSet extends AbstractTestResourceSet {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return false;
     }
 

==================================================
TestJarResourceSetMount.java
index 1eb15f4069..2718849bd5 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSetInternal.java
@@ -36,7 +36,7 @@ public class TestJarResourceSetInternal extends AbstractTestResourceSet {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return false;
     }
 

==================================================
TestSocketBufferHandler.java
index 8d3eeef57e..31a04cdedc 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSetMount.java
@@ -34,7 +34,7 @@ public class TestJarResourceSetMount extends AbstractTestResourceSetMount {
     }
 
     @Override
-    protected boolean isWriteable() {
+    protected boolean isWritable() {
         return false;
     }
 

==================================================
