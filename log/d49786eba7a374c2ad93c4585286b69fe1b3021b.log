d49786eba7a374c2ad93c4585286b69fe1b3021b
==================================================
Remove stream ID from Http2Exception (simpler logging of this to follow)
==================================================
Mark Thomas
==================================================
Mon Jun 8 19:51:30 2015 +0000
==================================================
ConnectionError.java
Remove stream ID from Http2Exception (simpler logging of this to follow)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684258 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectionSettings.java
index 81aed45a17..a3d641ea16 100644
--- a/java/org/apache/coyote/http2/ConnectionError.java
+++ b/java/org/apache/coyote/http2/ConnectionError.java
@@ -20,7 +20,7 @@ public class ConnectionError extends Http2Exception {
 
     private static final long serialVersionUID = 1L;
 
-    public ConnectionError(String msg, int streamId, Error error) {
-        super(msg, streamId, error);
+    public ConnectionError(String msg, Error error) {
+        super(msg, error);
     }
 }

==================================================
FrameType.java
index a1257fd171..a1369e9e7c 100644
--- a/java/org/apache/coyote/http2/ConnectionSettings.java
+++ b/java/org/apache/coyote/http2/ConnectionSettings.java
@@ -16,8 +16,6 @@
  */
 package org.apache.coyote.http2;
 
-import java.io.IOException;
-
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
@@ -44,7 +42,7 @@ public class ConnectionSettings {
     private volatile int maxFrameSize = DEFAULT_MAX_FRAME_SIZE;
     private volatile long maxHeaderListSize = UNLIMITED;
 
-    public void set(int parameterId, long value) throws IOException {
+    public void set(int parameterId, long value) throws ConnectionError {
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("connectionSettings.debug",
                     Integer.toString(parameterId), Long.toString(value)));
@@ -80,11 +78,11 @@ public class ConnectionSettings {
     public int getHeaderTableSize() {
         return headerTableSize;
     }
-    public void setHeaderTableSize(long headerTableSize) throws IOException {
+    public void setHeaderTableSize(long headerTableSize) throws ConnectionError {
         // Need to put a sensible limit on this. Start with 16k (default is 4k)
         if (headerTableSize > (16 * 1024)) {
             throw new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",
-                    Long.toString(headerTableSize)), 0, Error.PROTOCOL_ERROR);
+                    Long.toString(headerTableSize)), Error.PROTOCOL_ERROR);
         }
         this.headerTableSize = (int) headerTableSize;
     }
@@ -93,12 +91,12 @@ public class ConnectionSettings {
     public boolean getEnablePush() {
         return enablePush;
     }
-    public void setEnablePush(long enablePush) throws IOException {
+    public void setEnablePush(long enablePush) throws ConnectionError {
         // Can't be less than zero since the result of the byte->long conversion
         // will never be negative
         if (enablePush > 1) {
             throw new ConnectionError(sm.getString("connectionSettings.enablePushInvalid",
-                    Long.toString(enablePush)), 0, Error.PROTOCOL_ERROR);
+                    Long.toString(enablePush)), Error.PROTOCOL_ERROR);
         }
         this.enablePush = (enablePush  == 1);
     }
@@ -115,11 +113,11 @@ public class ConnectionSettings {
     public int getInitialWindowSize() {
         return initialWindowSize;
     }
-    public void setInitialWindowSize(long initialWindowSize) throws IOException {
+    public void setInitialWindowSize(long initialWindowSize) throws ConnectionError {
         if (initialWindowSize > MAX_WINDOW_SIZE) {
             throw new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",
                     Long.toString(initialWindowSize), Long.toString(MAX_WINDOW_SIZE)),
-                    0, Error.PROTOCOL_ERROR);
+                    Error.PROTOCOL_ERROR);
         }
         this.initialWindowSize = (int) initialWindowSize;
     }
@@ -128,11 +126,11 @@ public class ConnectionSettings {
     public int getMaxFrameSize() {
         return maxFrameSize;
     }
-    public void setMaxFrameSize(long maxFrameSize) throws IOException {
+    public void setMaxFrameSize(long maxFrameSize) throws ConnectionError {
         if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {
             throw new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",
                     Long.toString(maxFrameSize), Integer.toString(MIN_MAX_FRAME_SIZE),
-                    Integer.toString(MAX_MAX_FRAME_SIZE)), 0, Error.PROTOCOL_ERROR);
+                    Integer.toString(MAX_MAX_FRAME_SIZE)), Error.PROTOCOL_ERROR);
         }
         this.maxFrameSize = (int) maxFrameSize;
     }

==================================================
Http2Exception.java
index a925425019..3861a45496 100644
--- a/java/org/apache/coyote/http2/FrameType.java
+++ b/java/org/apache/coyote/http2/FrameType.java
@@ -59,10 +59,10 @@ public enum FrameType {
     public void checkStream(String connectionId, int streamId) throws Http2Exception {
         if (streamId == 0 && !streamZero) {
             throw new ConnectionError(sm.getString("frameType.checkStream.invalidForZero",
-                    connectionId, this), 0, Error.PROTOCOL_ERROR);
+                    connectionId, this), Error.PROTOCOL_ERROR);
         } else if (streamId != 0 && !streamNonZero) {
             throw new ConnectionError(sm.getString("frameType.checkStream.invalidForNonZero",
-                    connectionId, Integer.valueOf(streamId), this), 0, Error.PROTOCOL_ERROR);
+                    connectionId, Integer.valueOf(streamId), this), Error.PROTOCOL_ERROR);
         }
     }
 
@@ -72,7 +72,7 @@ public enum FrameType {
         if (payloadSizeValidator != null && !payloadSizeValidator.test(payloadSize)) {
             throw new ConnectionError(sm.getString("frameType.checkPayloadSize",
                     connectionId, Integer.toString(streamId), this, Integer.toString(payloadSize)),
-                    0, Error.FRAME_SIZE_ERROR);
+                    Error.FRAME_SIZE_ERROR);
         }
     }
 

==================================================
Http2Parser.java
index 3a95528383..e1e799e9dd 100644
--- a/java/org/apache/coyote/http2/Http2Exception.java
+++ b/java/org/apache/coyote/http2/Http2Exception.java
@@ -20,22 +20,15 @@ public abstract class Http2Exception extends Exception {
 
     private static final long serialVersionUID = 1L;
 
-    private final int streamId;
     private final Error error;
 
 
-    public Http2Exception(String msg, int streamId, Error error) {
+    public Http2Exception(String msg, Error error) {
         super(msg);
-        this.streamId = streamId;
         this.error = error;
     }
 
 
-    public int getStreamId() {
-        return streamId;
-    }
-
-
     public Error getError() {
         return error;
     }

==================================================
Http2UpgradeHandler.java
index 006541c96a..0763e8662c 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -245,7 +245,7 @@ class Http2Parser {
         if (payloadSize > 0 && ack) {
             throw new ConnectionError(sm.getString(
                     "http2Parser.processFrameSettings.ackWithNonZeroPayload"),
-                    0, Error.FRAME_SIZE_ERROR);
+                    Error.FRAME_SIZE_ERROR);
         }
 
         if (payloadSize != 0) {
@@ -264,7 +264,7 @@ class Http2Parser {
 
     private void readPushPromiseFrame(int streamId) throws Http2Exception {
         throw new ConnectionError(sm.getString("http2Parser.processFramePushPromise",
-                connectionId, Integer.valueOf(streamId)), 0, Error.PROTOCOL_ERROR);
+                connectionId, Integer.valueOf(streamId)), Error.PROTOCOL_ERROR);
     }
 
 
@@ -309,11 +309,11 @@ class Http2Parser {
             if (streamId == 0) {
                 throw new ConnectionError(
                         sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),
-                        0, Error.PROTOCOL_ERROR);
+                        Error.PROTOCOL_ERROR);
             } else {
                 throw new StreamError(
                         sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),
-                        streamId, Error.PROTOCOL_ERROR);
+                        Error.PROTOCOL_ERROR);
             }
         }
 
@@ -327,7 +327,7 @@ class Http2Parser {
             // No headers to continue
             throw new ConnectionError(sm.getString(
                     "http2Parser.processFrameContinuation.notExpected", connectionId,
-                    Integer.toString(streamId)), 0, Error.PROTOCOL_ERROR);
+                    Integer.toString(streamId)), Error.PROTOCOL_ERROR);
         }
 
         boolean endOfHeaders = Flags.isEndOfHeaders(flags);
@@ -358,7 +358,7 @@ class Http2Parser {
             } catch (HpackException hpe) {
                 throw new ConnectionError(
                         sm.getString("http2Parser.processFrameHeaders.decodingFailed"),
-                        0, Error.COMPRESSION_ERROR);
+                        Error.COMPRESSION_ERROR);
             }
             // switches to write mode
             headerReadBuffer.compact();
@@ -368,7 +368,7 @@ class Http2Parser {
         if (headerReadBuffer.position() > 0 && endOfHeaders) {
             throw new ConnectionError(
                     sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),
-                    0, Error.COMPRESSION_ERROR);
+                    Error.COMPRESSION_ERROR);
         }
     }
 
@@ -413,25 +413,25 @@ class Http2Parser {
 
         if (expected != null && frameType != expected) {
             throw new StreamError(sm.getString("http2Parser.processFrame.unexpectedType",
-                    expected, frameType), streamId, Error.PROTOCOL_ERROR);
+                    expected, frameType), Error.PROTOCOL_ERROR);
         }
 
         if (payloadSize > maxPayloadSize) {
             throw new ConnectionError(sm.getString("http2Parser.payloadTooBig",
                     Integer.toString(payloadSize), Integer.toString(maxPayloadSize)),
-                    streamId, Error.FRAME_SIZE_ERROR);
+                    Error.FRAME_SIZE_ERROR);
         }
 
         if (headersCurrentStream != -1) {
             if (headersCurrentStream != streamId) {
                 throw new ConnectionError(sm.getString("http2Parser.headers.wrongStream",
                         connectionId, Integer.toString(headersCurrentStream),
-                        Integer.toString(streamId)), streamId, Error.COMPRESSION_ERROR);
+                        Integer.toString(streamId)), Error.COMPRESSION_ERROR);
             }
             if (frameType != FrameType.CONTINUATION) {
                 throw new ConnectionError(sm.getString("http2Parser.headers.wrongFrameType",
                         connectionId, Integer.toString(headersCurrentStream),
-                        frameType), streamId, Error.COMPRESSION_ERROR);
+                        frameType), Error.COMPRESSION_ERROR);
             }
         }
 
@@ -529,7 +529,7 @@ class Http2Parser {
         void reset(int streamId, long errorCode) throws Http2Exception;
 
         // Settings frames
-        void setting(int identifier, long value) throws IOException;
+        void setting(int identifier, long value) throws ConnectionError;
         void settingsEnd(boolean ack) throws IOException;
 
         // Ping frames

==================================================
StreamError.java
index a139dead60..ef90076165 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -766,7 +766,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
 
 
     @Override
-    public void setting(int identifier, long value) throws IOException {
+    public void setting(int identifier, long value) throws ConnectionError {
         remoteSettings.set(identifier, value);
     }
 

==================================================
StreamStateMachine.java
index 068de32d54..f2e9c2d7eb 100644
--- a/java/org/apache/coyote/http2/StreamError.java
+++ b/java/org/apache/coyote/http2/StreamError.java
@@ -20,7 +20,7 @@ public class StreamError extends Http2Exception {
 
     private static final long serialVersionUID = 1L;
 
-    public StreamError(String msg, int streamId, Error error) {
-        super(msg, streamId, error);
+    public StreamError(String msg, Error error) {
+        super(msg, error);
     }
 }

==================================================
Http2TestBase.java
index 498f207322..ffa0025330 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -110,11 +110,11 @@ public class StreamStateMachine {
             if (state.connectionErrorForInvalidFrame) {
                 throw new ConnectionError(sm.getString("streamStateMachine.invalidFrame",
                         stream.getConnectionId(), stream.getIdentifier(), state, frameType),
-                        stream.getIdentifier().intValue(), state.errorCodeForInvalidFrame);
+                        state.errorCodeForInvalidFrame);
             } else {
                 throw new StreamError(sm.getString("streamStateMachine.invalidFrame",
                         stream.getConnectionId(), stream.getIdentifier(), state, frameType),
-                        stream.getIdentifier().intValue(), state.errorCodeForInvalidFrame);
+                        state.errorCodeForInvalidFrame);
             }
         }
     }

==================================================
