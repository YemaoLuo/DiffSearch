6a667943c5da6b5d61ac6bec1d7c9de061e3217c
==================================================
Code clean-up. Add braces for clarity.
==================================================
Mark Thomas
==================================================
Wed May 26 11:09:29 2021 +0100
==================================================
WebappClassLoaderBase.java
Code clean-up. Add braces for clarity.

Clean-up commit primarily to trigger CI build to test buildbot renaming


==================================================
WebappLoader.java
index ffd9f25bdd..f5c4c4f70a 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -733,19 +733,21 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      */
     public boolean modified() {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("modified()");
+        }
 
         for (Entry<String,ResourceEntry> entry : resourceEntries.entrySet()) {
             long cachedLastModified = entry.getValue().lastModified;
             long lastModified = resources.getClassLoaderResource(
                     entry.getKey()).getLastModified();
             if (lastModified != cachedLastModified) {
-                if( log.isDebugEnabled() )
+                if( log.isDebugEnabled() ) {
                     log.debug(sm.getString("webappClassLoader.resourceModified",
                             entry.getKey(),
                             new Date(cachedLastModified),
                             new Date(lastModified)));
+                }
                 return true;
             }
         }
@@ -830,8 +832,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     @Override
     public Class<?> findClass(String name) throws ClassNotFoundException {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("    findClass(" + name + ")");
+        }
 
         checkStateForClassLoading(name);
 
@@ -840,12 +843,14 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             int i = name.lastIndexOf('.');
             if (i >= 0) {
                 try {
-                    if (log.isTraceEnabled())
+                    if (log.isTraceEnabled()) {
                         log.trace("      securityManager.checkPackageDefinition");
+                    }
                     securityManager.checkPackageDefinition(name.substring(0,i));
                 } catch (Exception se) {
-                    if (log.isTraceEnabled())
+                    if (log.isTraceEnabled()) {
                         log.trace("      -->Exception-->ClassNotFoundException", se);
+                    }
                     throw new ClassNotFoundException(name, se);
                 }
             }
@@ -855,8 +860,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         // (throws ClassNotFoundException if it is not found)
         Class<?> clazz = null;
         try {
-            if (log.isTraceEnabled())
+            if (log.isTraceEnabled()) {
                 log.trace("      findClassInternal(" + name + ")");
+            }
             try {
                 if (securityManager != null) {
                     PrivilegedAction<Class<?>> dp =
@@ -870,8 +876,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                         ace.getMessage()), ace);
                 throw new ClassNotFoundException(name, ace);
             } catch (RuntimeException e) {
-                if (log.isTraceEnabled())
+                if (log.isTraceEnabled()) {
                     log.trace("      -->RuntimeException Rethrown", e);
+                }
                 throw e;
             }
             if ((clazz == null) && hasExternalRepositories) {
@@ -882,25 +889,29 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                             ace.getMessage()), ace);
                     throw new ClassNotFoundException(name, ace);
                 } catch (RuntimeException e) {
-                    if (log.isTraceEnabled())
+                    if (log.isTraceEnabled()) {
                         log.trace("      -->RuntimeException Rethrown", e);
+                    }
                     throw e;
                 }
             }
             if (clazz == null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("    --> Returning ClassNotFoundException");
+                }
                 throw new ClassNotFoundException(name);
             }
         } catch (ClassNotFoundException e) {
-            if (log.isTraceEnabled())
+            if (log.isTraceEnabled()) {
                 log.trace("    --> Passing on ClassNotFoundException");
+            }
             throw e;
         }
 
         // Return the class we have located
-        if (log.isTraceEnabled())
+        if (log.isTraceEnabled()) {
             log.debug("      Returning class " + clazz);
+        }
 
         if (log.isTraceEnabled()) {
             ClassLoader cl;
@@ -927,8 +938,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     @Override
     public URL findResource(final String name) {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("    findResource(" + name + ")");
+        }
 
         checkStateForResourceLoading(name);
 
@@ -947,10 +959,11 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         }
 
         if (log.isDebugEnabled()) {
-            if (url != null)
+            if (url != null) {
                 log.debug("    --> Returning '" + url.toString() + "'");
-            else
+            } else {
                 log.debug("    --> Resource not found, returning null");
+            }
         }
         return url;
     }
@@ -980,8 +993,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     @Override
     public Enumeration<URL> findResources(String name) throws IOException {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("    findResources(" + name + ")");
+        }
 
         checkStateForResourceLoading(name);
 
@@ -1033,8 +1047,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     @Override
     public URL getResource(String name) {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("getResource(" + name + ")");
+        }
 
         checkStateForResourceLoading(name);
 
@@ -1044,12 +1059,14 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
 
         // (1) Delegate to parent if requested
         if (delegateFirst) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  Delegating to parent classloader " + parent);
+            }
             url = parent.getResource(name);
             if (url != null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  --> Returning '" + url.toString() + "'");
+                }
                 return url;
             }
         }
@@ -1057,8 +1074,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         // (2) Search local repositories
         url = findResource(name);
         if (url != null) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  --> Returning '" + url.toString() + "'");
+            }
             return url;
         }
 
@@ -1066,15 +1084,17 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         if (!delegateFirst) {
             url = parent.getResource(name);
             if (url != null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  --> Returning '" + url.toString() + "'");
+                }
                 return url;
             }
         }
 
         // (4) Resource was not found
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("  --> Resource not found, returning null");
+        }
         return null;
 
     }
@@ -1110,8 +1130,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     @Override
     public InputStream getResourceAsStream(String name) {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("getResourceAsStream(" + name + ")");
+        }
 
         checkStateForResourceLoading(name);
 
@@ -1121,19 +1142,22 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
 
         // (1) Delegate to parent if requested
         if (delegateFirst) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  Delegating to parent classloader " + parent);
+            }
             stream = parent.getResourceAsStream(name);
             if (stream != null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  --> Returning stream from parent");
+                }
                 return stream;
             }
         }
 
         // (2) Search local repositories
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("  Searching local repositories");
+        }
         String path = nameToPath(name);
         WebResource resource = resources.getClassLoaderResource(path);
         if (resource.exists()) {
@@ -1186,26 +1210,30 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             // Ignore
         }
         if (stream != null) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  --> Returning stream from local");
+            }
             return stream;
         }
 
         // (3) Delegate to parent unconditionally
         if (!delegateFirst) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  Delegating to parent classloader unconditionally " + parent);
+            }
             stream = parent.getResourceAsStream(name);
             if (stream != null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  --> Returning stream from parent");
+                }
                 return stream;
             }
         }
 
         // (4) Resource was not found
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("  --> Resource not found, returning null");
+        }
         return null;
     }
 
@@ -1254,8 +1282,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
 
         synchronized (JreCompat.isGraalAvailable() ? this : getClassLoadingLock(name)) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("loadClass(" + name + ", " + resolve + ")");
+            }
             Class<?> clazz = null;
 
             // Log access to stopped class loader
@@ -1264,20 +1293,24 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             // (0) Check our previously loaded local class cache
             clazz = findLoadedClass0(name);
             if (clazz != null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  Returning class from cache");
-                if (resolve)
+                }
+                if (resolve) {
                     resolveClass(clazz);
+                }
                 return clazz;
             }
 
             // (0.1) Check our previously loaded class cache
             clazz = JreCompat.isGraalAvailable() ? null : findLoadedClass(name);
             if (clazz != null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  Returning class from cache");
-                if (resolve)
+                }
+                if (resolve) {
                     resolveClass(clazz);
+                }
                 return clazz;
             }
 
@@ -1320,8 +1353,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                 try {
                     clazz = javaseLoader.loadClass(name);
                     if (clazz != null) {
-                        if (resolve)
+                        if (resolve) {
                             resolveClass(clazz);
+                        }
                         return clazz;
                     }
                 } catch (ClassNotFoundException e) {
@@ -1347,15 +1381,18 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
 
             // (1) Delegate to our parent if requested
             if (delegateLoad) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  Delegating to parent classloader1 " + parent);
+                }
                 try {
                     clazz = Class.forName(name, false, parent);
                     if (clazz != null) {
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug("  Loading class from parent");
-                        if (resolve)
+                        }
+                        if (resolve) {
                             resolveClass(clazz);
+                        }
                         return clazz;
                     }
                 } catch (ClassNotFoundException e) {
@@ -1364,15 +1401,18 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             }
 
             // (2) Search local repositories
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  Searching local repositories");
+            }
             try {
                 clazz = findClass(name);
                 if (clazz != null) {
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Loading class from local repository");
-                    if (resolve)
+                    }
+                    if (resolve) {
                         resolveClass(clazz);
+                    }
                     return clazz;
                 }
             } catch (ClassNotFoundException e) {
@@ -1381,15 +1421,18 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
 
             // (3) Delegate to parent unconditionally
             if (!delegateLoad) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  Delegating to parent classloader at end: " + parent);
+                }
                 try {
                     clazz = Class.forName(name, false, parent);
                     if (clazz != null) {
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug("  Loading class from parent");
-                        if (resolve)
+                        }
+                        if (resolve) {
                             resolveClass(clazz);
+                        }
                         return clazz;
                     }
                 } catch (ClassNotFoundException e) {
@@ -2375,13 +2418,15 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         }
 
         Class<?> clazz = entry.loadedClass;
-        if (clazz != null)
+        if (clazz != null) {
             return clazz;
+        }
 
         synchronized (JreCompat.isGraalAvailable() ? this : getClassLoadingLock(name)) {
             clazz = entry.loadedClass;
-            if (clazz != null)
+            if (clazz != null) {
                 return clazz;
+            }
 
             if (resource == null) {
                 resource = resources.getClassLoaderResource(path);
@@ -2426,8 +2471,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             // Looking up the package
             String packageName = null;
             int pos = name.lastIndexOf('.');
-            if (pos != -1)
+            if (pos != -1) {
                 packageName = name.substring(0, pos);
+            }
 
             Package pkg = null;
 
@@ -2458,10 +2504,11 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     } else {
                         sealCheck = (manifest == null) || !isPackageSealed(packageName, manifest);
                     }
-                    if (!sealCheck)
+                    if (!sealCheck) {
                         throw new SecurityException
                             ("Sealing violation loading " + name + " : Package "
                              + packageName + " is sealed.");
+                    }
                 }
 
             }
@@ -2581,8 +2628,9 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      */
     protected boolean filter(String name, boolean isClassName) {
 
-        if (name == null)
+        if (name == null) {
             return false;
+        }
 
         char ch;
         if (name.startsWith("jakarta")) {

==================================================
HTMLManagerServlet.java
index 5015b93d1f..ed377cdbcc 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -347,8 +347,9 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
     @Override
     protected void startInternal() throws LifecycleException {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug(sm.getString("webappLoader.starting"));
+        }
 
         if (context.getResources() == null) {
             log.info(sm.getString("webappLoader.noResources", context));
@@ -412,8 +413,9 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
     @Override
     protected void stopInternal() throws LifecycleException {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug(sm.getString("webappLoader.stopping"));
+        }
 
         setState(LifecycleState.STOPPING);
 
@@ -484,10 +486,12 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
      */
     private void setPermissions() {
 
-        if (!Globals.IS_SECURITY_ENABLED)
+        if (!Globals.IS_SECURITY_ENABLED) {
             return;
-        if (context == null)
+        }
+        if (context == null) {
             return;
+        }
 
         // Tell the class loader the root of the context
         ServletContext servletContext = context.getServletContext();
@@ -521,11 +525,13 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
     private void setClassPath() {
 
         // Validate our current state information
-        if (context == null)
+        if (context == null) {
             return;
+        }
         ServletContext servletContext = context.getServletContext();
-        if (servletContext == null)
+        if (servletContext == null) {
             return;
+        }
 
         StringBuilder classpath = new StringBuilder();
 
@@ -564,16 +570,19 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
             URL repositories[] = ((URLClassLoader) loader).getURLs();
             for (URL url : repositories) {
                 String repository = url.toString();
-                if (repository.startsWith("file://"))
+                if (repository.startsWith("file://")) {
                     repository = UDecoder.URLDecode(repository.substring(7), StandardCharsets.UTF_8);
-                else if (repository.startsWith("file:"))
+                } else if (repository.startsWith("file:")) {
                     repository = UDecoder.URLDecode(repository.substring(5), StandardCharsets.UTF_8);
-                else
+                } else {
                     continue;
-                if (repository == null)
+                }
+                if (repository == null) {
                     continue;
-                if (classpath.length() > 0)
+                }
+                if (classpath.length() > 0) {
                     classpath.append(File.pathSeparator);
+                }
                 classpath.append(repository);
             }
         } else if (loader == ClassLoader.getSystemClassLoader()){

==================================================
JMXProxyServlet.java
index 0db12efb7a..b1953d802d 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -341,9 +341,10 @@ public final class HTMLManagerServlet extends ManagerServlet {
                      String message,
                      StringManager smClient) throws IOException {
 
-        if (debug >= 1)
+        if (debug >= 1) {
             log("list: Listing contexts for virtual host '" +
                 host.getName() + "'");
+        }
 
         PrintWriter writer = response.getWriter();
 
@@ -403,8 +404,9 @@ public final class HTMLManagerServlet extends ManagerServlet {
         // Create sorted map of deployed applications by context name.
         Container children[] = host.findChildren();
         String contextNames[] = new String[children.length];
-        for (int i = 0; i < children.length; i++)
+        for (int i = 0; i < children.length; i++) {
             contextNames[i] = children[i].getName();
+        }
 
         Arrays.sort(contextNames);
 
@@ -920,7 +922,9 @@ public final class HTMLManagerServlet extends ManagerServlet {
             StringManager smClient) {
 
         List<Session> sessions = getSessionsForName(cn, smClient);
-        if (sessions.isEmpty()) return null;
+        if (sessions.isEmpty()) {
+            return null;
+        }
         for(Session session : sessions) {
             if (session.getId().equals(id)) {
                 return session;

==================================================
ManagerServlet.java
index a3a88989a3..daab2e5809 100644
--- a/java/org/apache/catalina/manager/JMXProxyServlet.java
+++ b/java/org/apache/catalina/manager/JMXProxyServlet.java
@@ -136,8 +136,9 @@ public class JMXProxyServlet extends HttpServlet {
             ObjectName oname = new ObjectName(onameStr);
             Object value = mBeanServer.getAttribute(oname, att);
 
-            if (null != key && value instanceof CompositeData)
+            if (null != key && value instanceof CompositeData) {
                 value = ((CompositeData) value).get(key);
+            }
 
             String valueStr;
             if (value != null) {
@@ -234,10 +235,11 @@ public class JMXProxyServlet extends HttpServlet {
      *         <code>paramString</code> was <code>null</code>).
      */
     private String[] getInvokeParameters(String paramString) {
-        if (paramString == null)
+        if (paramString == null) {
             return NO_PARAMETERS;
-        else
+        } else {
             return paramString.split(",");
+        }
     }
 
 

==================================================
HostManagerServlet.java
index 1b97692a7d..827ee0a87e 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -312,8 +312,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         // Identify the request parameters that we need
         String command = request.getPathInfo();
-        if (command == null)
+        if (command == null) {
             command = request.getServletPath();
+        }
 
         String path = request.getParameter("path");
         String war = request.getParameter("war");
@@ -426,8 +427,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         // Identify the request parameters that we need
         String command = request.getPathInfo();
-        if (command == null)
+        if (command == null) {
             command = request.getServletPath();
+        }
         String path = request.getParameter("path");
         ContextName cn = null;
         if (path != null) {
@@ -473,9 +475,10 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     public void init() throws ServletException {
 
         // Ensure that our ContainerServlet properties have been set
-        if ((wrapper == null) || (context == null))
+        if ((wrapper == null) || (context == null)) {
             throw new UnavailableException(
                     sm.getString("managerServlet.noWrapper"));
+        }
 
         // Set our properties from the initialization parameters
         String value = null;
@@ -501,10 +504,12 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         Container host = null;
         Container engine = null;
         while (container != null) {
-            if (container instanceof Host)
+            if (container instanceof Host) {
                 host = container;
-            if (container instanceof Engine)
+            }
+            if (container instanceof Engine) {
                 engine = container;
+            }
             container = container.getParent();
         }
         if (engine != null) {
@@ -1060,9 +1065,10 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      */
     protected void list(PrintWriter writer, StringManager smClient) {
 
-        if (debug >= 1)
+        if (debug >= 1) {
             log("list: Listing contexts for virtual host '" +
                 host.getName() + "'");
+        }
 
         writer.println(smClient.getString("managerServlet.listed",
                                     host.getName()));
@@ -1071,8 +1077,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             Context context = (Context) container;
             if (context != null) {
                 String displayPath = context.getPath();
-                if (displayPath.equals(""))
+                if (displayPath.equals("")) {
                     displayPath = "/";
+                }
                 List<String> parts = null;
                 if (context.getState().isAvailable()) {
                     parts = Arrays.asList(
@@ -1103,8 +1110,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected void reload(PrintWriter writer, ContextName cn,
             StringManager smClient) {
 
-        if (debug >= 1)
+        if (debug >= 1) {
             log("restart: Reloading web application '" + cn + "'");
+        }
 
         if (!validateContextName(cn, writer, smClient)) {
             return;
@@ -1221,8 +1229,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      * @param smClient i18n support for current client's locale
     */
     protected void serverinfo(PrintWriter writer,  StringManager smClient) {
-        if (debug >= 1)
+        if (debug >= 1) {
             log("serverinfo");
+        }
         try {
             writer.println(smClient.getString("managerServlet.serverInfo", ServerInfo.getServerInfo(),
                     System.getProperty("os.name"), System.getProperty("os.version"), System.getProperty("os.arch"),
@@ -1250,8 +1259,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         if (debug >= 1) {
             log("sessions: Session information for web application '" + cn + "'");
-            if (idle >= 0)
+            if (idle >= 0) {
                 log("sessions: Session expiration for " + idle + " minutes '" + cn + "'");
+            }
         }
 
         if (!validateContextName(cn, writer, smClient)) {
@@ -1278,13 +1288,16 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             int maxInactiveInterval = context.getSessionTimeout();
             if (maxInactiveInterval > 0) {
                 histoInterval = maxInactiveInterval / maxCount;
-                if (histoInterval * maxCount < maxInactiveInterval)
+                if (histoInterval * maxCount < maxInactiveInterval) {
                     histoInterval++;
-                if (0 == histoInterval)
+                }
+                if (0 == histoInterval) {
                     histoInterval = 1;
+                }
                 maxCount = maxInactiveInterval / histoInterval;
-                if (histoInterval * maxCount < maxInactiveInterval)
+                if (histoInterval * maxCount < maxInactiveInterval) {
                     maxCount++;
+                }
             }
 
             writer.println(smClient.getString("managerServlet.sessions",
@@ -1303,23 +1316,26 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                     expired++;
                 }
                 time = time / 60 / histoInterval;
-                if (time < 0)
+                if (time < 0) {
                     notimeout++;
-                else if (time >= maxCount)
+                } else if (time >= maxCount) {
                     timeout[maxCount]++;
-                else
+                } else {
                     timeout[time]++;
+                }
             }
-            if (timeout[0] > 0)
+            if (timeout[0] > 0) {
                 writer.println(smClient.getString(
                         "managerServlet.sessiontimeout",
                         "<" + histoInterval, "" + timeout[0]));
+            }
             for (int i = 1; i < maxCount; i++) {
-                if (timeout[i] > 0)
+                if (timeout[i] > 0) {
                     writer.println(smClient.getString(
                             "managerServlet.sessiontimeout",
                             "" + (i)*histoInterval + " - <" + (i+1)*histoInterval,
                             "" + timeout[i]));
+                }
             }
             if (timeout[maxCount] > 0) {
                 writer.println(smClient.getString(
@@ -1327,14 +1343,16 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                         ">=" + maxCount*histoInterval,
                         "" + timeout[maxCount]));
             }
-            if (notimeout > 0)
+            if (notimeout > 0) {
                 writer.println(smClient.getString(
                         "managerServlet.sessiontimeout.unlimited",
                         "" + notimeout));
-            if (idle >= 0)
+            }
+            if (idle >= 0) {
                 writer.println(smClient.getString(
                         "managerServlet.sessiontimeout.expired",
                         ">" + idle,"" + expired));
+            }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             log(sm.getString("managerServlet.error.sessions", displayPath), t);
@@ -1377,8 +1395,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected void start(PrintWriter writer, ContextName cn,
             StringManager smClient) {
 
-        if (debug >= 1)
+        if (debug >= 1) {
             log("start: Starting web application '" + cn + "'");
+        }
 
         if (!validateContextName(cn, writer, smClient)) {
             return;
@@ -1394,12 +1413,13 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                 return;
             }
             context.start();
-            if (context.getState().isAvailable())
+            if (context.getState().isAvailable()) {
                 writer.println(smClient.getString("managerServlet.started",
                         displayPath));
-            else
+            } else {
                 writer.println(smClient.getString("managerServlet.startFailed",
                         displayPath));
+            }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             log(sm.getString("managerServlet.error.start", displayPath), t);
@@ -1422,8 +1442,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected void stop(PrintWriter writer, ContextName cn,
             StringManager smClient) {
 
-        if (debug >= 1)
+        if (debug >= 1) {
             log("stop: Stopping web application '" + cn + "'");
+        }
 
         if (!validateContextName(cn, writer, smClient)) {
             return;
@@ -1466,8 +1487,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected void undeploy(PrintWriter writer, ContextName cn,
             StringManager smClient) {
 
-        if (debug >= 1)
+        if (debug >= 1) {
             log("undeploy: Undeploying web application at '" + cn + "'");
+        }
 
         if (!validateContextName(cn, writer, smClient)) {
             return;

==================================================
SessionUtils.java
index 3c122e50f7..42ef9a9598 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -200,8 +200,9 @@ public class HostManagerServlet
 
         // Identify the request parameters that we need
         String command = request.getPathInfo();
-        if (command == null)
+        if (command == null) {
             command = request.getServletPath();
+        }
         String name = request.getParameter("name");
 
         // Prepare our output writer to generate the response message
@@ -291,8 +292,9 @@ public class HostManagerServlet
             } else if (value.equals("true")) {
                 booleanValue = true;
             }
-        } else if (htmlMode)
+        } else if (htmlMode) {
             booleanValue = false;
+        }
         return booleanValue;
     }
 
@@ -301,9 +303,10 @@ public class HostManagerServlet
     public void init() throws ServletException {
 
         // Ensure that our ContainerServlet properties have been set
-        if ((wrapper == null) || (context == null))
+        if ((wrapper == null) || (context == null)) {
             throw new UnavailableException
                 (sm.getString("hostManagerServlet.noWrapper"));
+        }
 
         // Set our properties from the initialization parameters
         String value = null;
@@ -371,8 +374,9 @@ public class HostManagerServlet
             applicationBase = name;
         }
         file = new File(applicationBase);
-        if (!file.isAbsolute())
+        if (!file.isAbsolute()) {
             file = new File(engine.getCatalinaBase(), file.getPath());
+        }
         try {
             appBaseFile = file.getCanonicalFile();
         } catch (IOException e) {
@@ -484,7 +488,9 @@ public class HostManagerServlet
         try {
             Container child = engine.findChild(name);
             engine.removeChild(child);
-            if ( child instanceof ContainerBase ) child.destroy();
+            if ( child instanceof ContainerBase ) {
+                child.destroy();
+            }
         } catch (Exception e) {
             writer.println(smClient.getString("hostManagerServlet.exception",
                     e.toString()));

==================================================
MBeanDumper.java
index a1701f90c2..9c403df481 100644
--- a/java/org/apache/catalina/manager/util/SessionUtils.java
+++ b/java/org/apache/catalina/manager/util/SessionUtils.java
@@ -175,8 +175,9 @@ public class SessionUtils {
             return in_session.getPrincipal().getName();
         }
         HttpSession httpSession = in_session.getSession();
-        if (httpSession == null)
+        if (httpSession == null) {
             return null;
+        }
 
         try {
             Object user = null;

==================================================
MBeanFactory.java
index 8949f25de8..6c79f71603 100644
--- a/java/org/apache/catalina/mbeans/MBeanDumper.java
+++ b/java/org/apache/catalina/mbeans/MBeanDumper.java
@@ -73,11 +73,13 @@ public class MBeanDumper {
                 Object value = null;
 
                 for (MBeanAttributeInfo attr : attrs) {
-                    if (!attr.isReadable())
+                    if (!attr.isReadable()) {
                         continue;
+                    }
                     String attName = attr.getName();
-                    if ("modelerType".equals(attName))
+                    if ("modelerType".equals(attName)) {
                         continue;
+                    }
                     if (attName.indexOf('=') >= 0 || attName.indexOf(':') >= 0
                             || attName.indexOf(' ') >= 0) {
                         continue;
@@ -170,8 +172,9 @@ public class MBeanDumper {
             appendHead(sb, value, prev, idx);
             sb.append("\\n\n ");
             prev = idx + 1;
-            if (idx == value.length() - 1)
+            if (idx == value.length() - 1) {
                 break;
+            }
             idx = value.indexOf('\n', idx + 1);
         }
         if (prev < value.length()) {

==================================================
MBeanUtils.java
index 8dcee63a10..f1a65b7eb5 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -740,12 +740,13 @@ public class MBeanFactory {
             Context context = (Context) host.findChild(pathStr);
             // Remove this component from its parent component
             host.removeChild(context);
-            if(context instanceof StandardContext)
-            try {
-                context.destroy();
-            } catch (Exception e) {
-                log.warn(sm.getString("mBeanFactory.contextDestroyError"), e);
-           }
+            if(context instanceof StandardContext) {
+                try {
+                    context.destroy();
+                } catch (Exception e) {
+                    log.warn(sm.getString("mBeanFactory.contextDestroyError"), e);
+         }
+            }
 
         }
     }

==================================================
DataSourceRealm.java
index af95dc7365..120141e047 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -100,8 +100,9 @@ public class MBeanUtils {
 
         // Perform the standard transformation
         int period = className.lastIndexOf('.');
-        if (period >= 0)
+        if (period >= 0) {
             className = className.substring(period + 1);
+        }
         return className;
 
     }
@@ -125,8 +126,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(environment);
         ObjectName oname = createObjectName(domain, environment);
         if( mserver.isRegistered( oname ))  {
@@ -156,8 +158,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(resource);
         ObjectName oname = createObjectName(domain, resource);
         if( mserver.isRegistered( oname ))  {
@@ -187,8 +190,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(resourceLink);
         ObjectName oname = createObjectName(domain, resourceLink);
         if( mserver.isRegistered( oname ))  {
@@ -218,8 +222,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(group);
         ObjectName oname = createObjectName(domain, group);
         if( mserver.isRegistered( oname ))  {
@@ -249,8 +254,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(role);
         ObjectName oname = createObjectName(domain, role);
         if( mserver.isRegistered( oname ))  {
@@ -280,8 +286,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(user);
         ObjectName oname = createObjectName(domain, user);
         if( mserver.isRegistered( oname ))  {
@@ -311,8 +318,9 @@ public class MBeanUtils {
             throw new MBeanException(e);
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         DynamicMBean mbean = managed.createMBean(userDatabase);
         ObjectName oname = createObjectName(domain, userDatabase);
         if( mserver.isRegistered( oname ))  {
@@ -596,11 +604,13 @@ public class MBeanUtils {
             return;
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         ObjectName oname = createObjectName(domain, environment);
-        if( mserver.isRegistered(oname) )
+        if( mserver.isRegistered(oname) ) {
             mserver.unregisterMBean(oname);
+        }
 
     }
 
@@ -628,11 +638,13 @@ public class MBeanUtils {
             return;
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         ObjectName oname = createObjectName(domain, resource);
-        if( mserver.isRegistered(oname ))
+        if( mserver.isRegistered(oname )) {
             mserver.unregisterMBean(oname);
+        }
 
     }
 
@@ -654,11 +666,13 @@ public class MBeanUtils {
             return;
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         ObjectName oname = createObjectName(domain, resourceLink);
-        if( mserver.isRegistered(oname) )
+        if( mserver.isRegistered(oname) ) {
             mserver.unregisterMBean(oname);
+        }
 
     }
 
@@ -679,11 +693,13 @@ public class MBeanUtils {
             return;
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         ObjectName oname = createObjectName(domain, group);
-        if( mserver.isRegistered(oname) )
+        if( mserver.isRegistered(oname) ) {
             mserver.unregisterMBean(oname);
+        }
 
     }
 
@@ -705,11 +721,13 @@ public class MBeanUtils {
             return;
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         ObjectName oname = createObjectName(domain, role);
-        if( mserver.isRegistered(oname) )
+        if( mserver.isRegistered(oname) ) {
             mserver.unregisterMBean(oname);
+        }
 
     }
 
@@ -731,11 +749,13 @@ public class MBeanUtils {
             return;
         }
         String domain = managed.getDomain();
-        if (domain == null)
+        if (domain == null) {
             domain = mserver.getDefaultDomain();
+        }
         ObjectName oname = createObjectName(domain, user);
-        if( mserver.isRegistered(oname) )
+        if( mserver.isRegistered(oname) ) {
             mserver.unregisterMBean(oname);
+        }
 
     }
 

==================================================
JAASCallbackHandler.java
index cfa2ab9f96..00ab14bdee 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -297,9 +297,10 @@ public class DataSourceRealm extends RealmBase {
         // No user or no credentials
         // Can't possibly authenticate, don't bother the database then
         if (username == null || credentials == null) {
-            if (containerLog.isTraceEnabled())
+            if (containerLog.isTraceEnabled()) {
                 containerLog.trace(sm.getString("dataSourceRealm.authenticateFailure",
                                                 username));
+            }
             return null;
         }
 
@@ -311,9 +312,10 @@ public class DataSourceRealm extends RealmBase {
             // Waste a bit of time as not to reveal that the user does not exist.
             getCredentialHandler().mutate(credentials);
 
-            if (containerLog.isTraceEnabled())
+            if (containerLog.isTraceEnabled()) {
                 containerLog.trace(sm.getString("dataSourceRealm.authenticateFailure",
                                                 username));
+            }
             return null;
         }
 
@@ -321,13 +323,15 @@ public class DataSourceRealm extends RealmBase {
         boolean validated = getCredentialHandler().matches(credentials, dbCredentials);
 
         if (validated) {
-            if (containerLog.isTraceEnabled())
+            if (containerLog.isTraceEnabled()) {
                 containerLog.trace(sm.getString("dataSourceRealm.authenticateSuccess",
                                                 username));
+            }
         } else {
-            if (containerLog.isTraceEnabled())
+            if (containerLog.isTraceEnabled()) {
                 containerLog.trace(sm.getString("dataSourceRealm.authenticateFailure",
                                                 username));
+            }
             return null;
         }
 
@@ -346,8 +350,9 @@ public class DataSourceRealm extends RealmBase {
     protected void close(Connection dbConnection) {
 
         // Do nothing if the database connection is already closed
-        if (dbConnection == null)
+        if (dbConnection == null) {
             return;
+        }
 
         // Commit if not auto committed
         try {

==================================================
JAASRealm.java
index 901031c685..29779f4854 100644
--- a/java/org/apache/catalina/realm/JAASCallbackHandler.java
+++ b/java/org/apache/catalina/realm/JAASCallbackHandler.java
@@ -185,8 +185,9 @@ public class JAASCallbackHandler implements CallbackHandler {
         for (Callback callback : callbacks) {
 
             if (callback instanceof NameCallback) {
-                if (realm.getContainer().getLogger().isTraceEnabled())
+                if (realm.getContainer().getLogger().isTraceEnabled()) {
                     realm.getContainer().getLogger().trace(sm.getString("jaasCallback.username", username));
+                }
                 ((NameCallback) callback).setName(username);
             }
             else if (callback instanceof PasswordCallback) {

==================================================
MemoryRealm.java
index ab85d2b2ff..f249ae4387 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -272,15 +272,20 @@ public class JAASRealm extends RealmBase {
      */
     protected void parseClassNames(String classNamesString, List<String> classNamesList) {
         classNamesList.clear();
-        if (classNamesString == null) return;
+        if (classNamesString == null) {
+            return;
+        }
 
         ClassLoader loader = this.getClass().getClassLoader();
-        if (isUseContextClassLoader())
+        if (isUseContextClassLoader()) {
             loader = Thread.currentThread().getContextClassLoader();
+        }
 
         String[] classNames = classNamesString.split("[ ]*,[ ]*");
         for (String className : classNames) {
-            if (className.length() == 0) continue;
+            if (className.length() == 0) {
+                continue;
+            }
             try {
                 Class<?> principalClass = Class.forName(className, false,
                         loader);
@@ -379,10 +384,13 @@ public class JAASRealm extends RealmBase {
         // Establish a LoginContext to use for authentication
         try {
             LoginContext loginContext = null;
-            if( appName==null ) appName="Tomcat";
+            if( appName==null ) {
+                appName="Tomcat";
+            }
 
-            if( log.isDebugEnabled())
+            if( log.isDebugEnabled()) {
                 log.debug(sm.getString("jaasRealm.beginLogin", username, appName));
+            }
 
             // What if the LoginModule is in the container class loader ?
             ClassLoader ocl = null;
@@ -410,8 +418,9 @@ public class JAASRealm extends RealmBase {
                 }
             }
 
-            if( log.isDebugEnabled())
+            if( log.isDebugEnabled()) {
                 log.debug("Login context created " + username);
+            }
 
             // Negotiate a login via this LoginContext
             Subject subject = null;
@@ -424,27 +433,31 @@ public class JAASRealm extends RealmBase {
                 // of the JAAS operation to keep variable consistent.
                 invocationSuccess = true;
                 if (subject == null) {
-                    if( log.isDebugEnabled())
+                    if( log.isDebugEnabled()) {
                         log.debug(sm.getString("jaasRealm.failedLogin", username));
+                    }
                     return null;
                 }
             } catch (AccountExpiredException e) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug(sm.getString("jaasRealm.accountExpired", username));
+                }
                 // JAAS checked LoginExceptions are successful authentication
                 // invocations so mark JAAS realm as available
                 invocationSuccess = true;
                 return null;
             } catch (CredentialExpiredException e) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug(sm.getString("jaasRealm.credentialExpired", username));
+                }
                 // JAAS checked LoginExceptions are successful authentication
                 // invocations so mark JAAS realm as available
                 invocationSuccess = true;
                 return null;
             } catch (FailedLoginException e) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug(sm.getString("jaasRealm.failedLogin", username));
+                }
                 // JAAS checked LoginExceptions are successful authentication
                 // invocations so mark JAAS realm as available
                 invocationSuccess = true;
@@ -464,8 +477,9 @@ public class JAASRealm extends RealmBase {
                 return null;
             }
 
-            if( log.isDebugEnabled())
+            if( log.isDebugEnabled()) {
                 log.debug(sm.getString("jaasRealm.loginContextCreated", username));
+            }
 
             // Return the appropriate Principal for this authenticated Subject
             Principal principal = createPrincipal(username, subject, loginContext);

==================================================
RealmBase.java
index 625e9ec4cc..7c1671e621 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -118,8 +118,9 @@ public class MemoryRealm  extends RealmBase {
         // No user or no credentials
         // Can't possibly authenticate, don't bother the database then
         if (username == null || credentials == null) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug(sm.getString("memoryRealm.authenticateFailure", username));
+            }
             return null;
         }
 
@@ -134,20 +135,23 @@ public class MemoryRealm  extends RealmBase {
             // Waste a bit of time as not to reveal that the user does not exist.
             getCredentialHandler().mutate(credentials);
 
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug(sm.getString("memoryRealm.authenticateFailure", username));
+            }
             return null;
         }
 
         boolean validated = getCredentialHandler().matches(credentials, password);
 
         if (validated) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug(sm.getString("memoryRealm.authenticateSuccess", username));
+            }
             return principal;
         } else {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug(sm.getString("memoryRealm.authenticateFailure", username));
+            }
             return null;
         }
     }
@@ -170,8 +174,9 @@ public class MemoryRealm  extends RealmBase {
         roles += ",";
         while (true) {
             int comma = roles.indexOf(',');
-            if (comma < 0)
+            if (comma < 0) {
                 break;
+            }
             String role = roles.substring(0, comma).trim();
             list.add(role);
             roles = roles.substring(comma + 1);

==================================================
UserDatabaseRealm.java
index 948ec3e4ef..f3598e5cfc 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -393,8 +393,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
         // In digest auth, digests are always lower case
         String md5a1 = getDigest(username, realm);
-        if (md5a1 == null)
+        if (md5a1 == null) {
             return null;
+        }
         md5a1 = md5a1.toLowerCase(Locale.ENGLISH);
         String serverDigestValue;
         if (qop == null) {
@@ -439,22 +440,26 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     @Override
     public Principal authenticate(X509Certificate certs[]) {
 
-        if ((certs == null) || (certs.length < 1))
+        if ((certs == null) || (certs.length < 1)) {
             return null;
+        }
 
         // Check the validity of each certificate in the chain
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("Authenticating client certificate chain");
+        }
         if (validate) {
             for (X509Certificate cert : certs) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug(" Checking validity for '" +
                             cert.getSubjectDN().getName() + "'");
+                }
                 try {
                     cert.checkValidity();
                 } catch (Exception e) {
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Validity exception", e);
+                    }
                     return null;
                 }
             }
@@ -546,8 +551,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         // Are there any defined security constraints?
         SecurityConstraint constraints[] = context.findConstraints();
         if ((constraints == null) || (constraints.length == 0)) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  No applicable constraints defined");
+            }
             return null;
         }
 
@@ -770,8 +776,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
         if(results == null) {
             // No applicable security constraint was found
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  No applicable constraint located");
+            }
         }
         return resultsToArray(results);
     }
@@ -809,8 +816,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                                          Context context)
         throws IOException {
 
-        if (constraints == null || constraints.length == 0)
+        if (constraints == null || constraints.length == 0) {
             return true;
+        }
 
         // Which user principal have we already authenticated?
         Principal principal = request.getPrincipal();
@@ -825,11 +833,13 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                 roles = constraint.findAuthRoles();
             }
 
-            if (roles == null)
+            if (roles == null) {
                 roles = new String[0];
+            }
 
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  Checking roles " + principal);
+            }
 
             if (constraint.getAuthenticatedUsers() && principal != null) {
                 if (log.isDebugEnabled()) {
@@ -939,10 +949,11 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
         if (log.isDebugEnabled()) {
             String name = principal.getName();
-            if (result)
+            if (result) {
                 log.debug(sm.getString("realmBase.hasRoleSuccess", name, role));
-            else
+            } else {
                 log.debug(sm.getString("realmBase.hasRoleFailure", name, role));
+            }
         }
 
         return result;
@@ -996,28 +1007,32 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
         // Is there a relevant user data constraint?
         if (constraints == null || constraints.length == 0) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  No applicable security constraint defined");
+            }
             return true;
         }
         for (SecurityConstraint constraint : constraints) {
             String userConstraint = constraint.getUserConstraint();
             if (userConstraint == null) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  No applicable user data constraint defined");
+                }
                 return true;
             }
             if (userConstraint.equals(TransportGuarantee.NONE.name())) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("  User data constraint has no restrictions");
+                }
                 return true;
             }
 
         }
         // Validate the request against the user data constraint
         if (request.getRequest().isSecure()) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  User data constraint already satisfied");
+            }
             return true;
         }
         // Initialize variables we need to determine the appropriate action
@@ -1025,8 +1040,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
         // Is redirecting disabled?
         if (redirectPort <= 0) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("  SSL redirect is disabled");
+            }
             response.sendError
                 (HttpServletResponse.SC_FORBIDDEN,
                  request.getRequestURI());
@@ -1059,8 +1075,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             file.append('?');
             file.append(queryString);
         }
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("  Redirecting to " + file.toString());
+        }
         response.sendRedirect(file.toString(), transportGuaranteeRedirectStatus);
         return false;
 
@@ -1206,8 +1223,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     protected Principal getPrincipal(X509Certificate usercert) {
         String username = x509UsernameRetriever.getUsername(usercert);
 
-        if(log.isDebugEnabled())
+        if(log.isDebugEnabled()) {
             log.debug(sm.getString("realmBase.gotX509Username", username));
+        }
 
         return getPrincipal(username);
     }
@@ -1522,8 +1540,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
     private static X509UsernameRetriever createUsernameRetriever(String className)
         throws LifecycleException {
-        if(null == className || className.trim().isEmpty())
+        if(null == className || className.trim().isEmpty()) {
             return new X509SubjectDnRetriever();
+        }
 
         try {
             @SuppressWarnings("unchecked")

==================================================
SecurityUtil.java
index 4d055fd8d2..f30c24a01d 100644
--- a/java/org/apache/catalina/realm/UserDatabaseRealm.java
+++ b/java/org/apache/catalina/realm/UserDatabaseRealm.java
@@ -135,8 +135,9 @@ public class UserDatabaseRealm extends RealmBase {
         // Check for a role alias defined in a <security-role-ref> element
         if (wrapper != null) {
             String realRole = wrapper.findSecurityReference(role);
-            if (realRole != null)
+            if (realRole != null) {
                 role = realRole;
+            }
         }
         if (principal instanceof GenericPrincipal) {
             GenericPrincipal gp = (GenericPrincipal) principal;

==================================================
DefaultServlet.java
index 52eab47e75..20b5c0e498 100644
--- a/java/org/apache/catalina/security/SecurityUtil.java
+++ b/java/org/apache/catalina/security/SecurityUtil.java
@@ -323,16 +323,17 @@ public final class SecurityUtil{
                 log.debug(sm.getString("SecurityUtil.doAsPrivilege"), e);
             }
 
-            if (e instanceof UnavailableException)
+            if (e instanceof UnavailableException) {
                 throw (UnavailableException) e;
-            else if (e instanceof ServletException)
+            } else if (e instanceof ServletException) {
                 throw (ServletException) e;
-            else if (e instanceof IOException)
+            } else if (e instanceof IOException) {
                 throw (IOException) e;
-            else if (e instanceof RuntimeException)
+            } else if (e instanceof RuntimeException) {
                 throw (RuntimeException) e;
-            else
+            } else {
                 throw new ServletException(e.getMessage(), e);
+            }
         }
     }
 

==================================================
WebdavServlet.java
index 8e6857599e..1300570a6e 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -837,12 +837,13 @@ public class DefaultServlet extends HttpServlet {
         String path = getRelativePath(request, true);
 
         if (debug > 0) {
-            if (serveContent)
+            if (serveContent) {
                 log("DefaultServlet.serveResource:  Serving resource '" +
                     path + "' headers and data");
-            else
+            } else {
                 log("DefaultServlet.serveResource:  Serving resource '" +
                     path + "' headers only");
+            }
         }
 
         if (path.length() == 0) {
@@ -1060,9 +1061,10 @@ public class DefaultServlet extends HttpServlet {
         if (resource.isDirectory() || isError || ranges == FULL ) {
             // Set the appropriate output headers
             if (contentType != null) {
-                if (debug > 0)
+                if (debug > 0) {
                     log("DefaultServlet.serveFile:  contentType='" +
                         contentType + "'");
+                }
                 // Don't override a previously set content type
                 if (response.getContentType() == null) {
                     response.setContentType(contentType);
@@ -1070,9 +1072,10 @@ public class DefaultServlet extends HttpServlet {
             }
             if (resource.isFile() && contentLength >= 0 &&
                     (!serveContent || ostream != null)) {
-                if (debug > 0)
+                if (debug > 0) {
                     log("DefaultServlet.serveFile:  contentLength=" +
                         contentLength);
+                }
                 // Don't set a content length if something else has already
                 // written to the response or if conversion will be taking place
                 if (contentWritten == 0 && !conversionRequired) {
@@ -1170,8 +1173,9 @@ public class DefaultServlet extends HttpServlet {
 
         } else {
 
-            if ((ranges == null) || (ranges.getEntries().isEmpty()))
+            if ((ranges == null) || (ranges.getEntries().isEmpty())) {
                 return;
+            }
 
             // Partial content response.
 
@@ -1188,9 +1192,10 @@ public class DefaultServlet extends HttpServlet {
                 response.setContentLengthLong(length);
 
                 if (contentType != null) {
-                    if (debug > 0)
+                    if (debug > 0) {
                         log("DefaultServlet.serveFile:  contentType='" +
                             contentType + "'");
+                    }
                     response.setContentType(contentType);
                 }
 
@@ -1202,8 +1207,9 @@ public class DefaultServlet extends HttpServlet {
                     }
                     if (ostream != null) {
                         if (!checkSendfile(request, response, resource,
-                                contentLength, range))
+                                contentLength, range)) {
                             copy(resource, contentLength, ostream, range);
+                        }
                     } else {
                         // we should not get here
                         throw new IllegalStateException();
@@ -1654,11 +1660,13 @@ public class DefaultServlet extends HttpServlet {
 
             if (entry.equalsIgnoreCase("WEB-INF") ||
                     entry.equalsIgnoreCase("META-INF") ||
-                    entry.equalsIgnoreCase(localXsltFile))
+                    entry.equalsIgnoreCase(localXsltFile)) {
                 continue;
+            }
 
-            if ((directoryWebappPath + entry).equals(contextXsltFile))
+            if ((directoryWebappPath + entry).equals(contextXsltFile)) {
                 continue;
+            }
 
             WebResource childResource =
                     resources.getResource(directoryWebappPath + entry);
@@ -1686,8 +1694,9 @@ public class DefaultServlet extends HttpServlet {
 
             sb.append('>');
             sb.append(Escape.htmlElementContent(entry));
-            if (childResource.isDirectory())
+            if (childResource.isDirectory()) {
                 sb.append('/');
+            }
             sb.append("</entry>");
         }
         sb.append("</entries>");
@@ -1801,11 +1810,13 @@ public class DefaultServlet extends HttpServlet {
             String parent = directoryWebappPath.substring(0, slash);
             sb.append(" - <a href=\"");
             sb.append(rewrittenContextPath);
-            if (parent.equals(""))
+            if (parent.equals("")) {
                 parent = "/";
+            }
             sb.append(rewriteUrl(parent));
-            if (!parent.endsWith("/"))
+            if (!parent.endsWith("/")) {
                 sb.append('/');
+            }
             sb.append("\">");
             sb.append("<b>");
             sb.append(sm.getString("directory.parent", parent));
@@ -1820,10 +1831,11 @@ public class DefaultServlet extends HttpServlet {
                      " cellpadding=\"5\" align=\"center\">\r\n");
 
         SortManager.Order order;
-        if(sortListings && null != request)
+        if(sortListings && null != request) {
             order = sortManager.getOrder(request.getQueryString());
-        else
+        } else {
             order = null;
+        }
         // Render the column headings
         sb.append("<tr>\r\n");
         sb.append("<td align=\"left\"><font size=\"+1\"><strong>");
@@ -1869,16 +1881,18 @@ public class DefaultServlet extends HttpServlet {
         for (WebResource childResource : entries) {
             String filename = childResource.getName();
             if (filename.equalsIgnoreCase("WEB-INF") ||
-                filename.equalsIgnoreCase("META-INF"))
+                filename.equalsIgnoreCase("META-INF")) {
                 continue;
+            }
 
             if (!childResource.exists()) {
                 continue;
             }
 
             sb.append("<tr");
-            if (shade)
+            if (shade) {
                 sb.append(" bgcolor=\"#eeeeee\"");
+            }
             sb.append(">\r\n");
             shade = !shade;
 
@@ -1886,19 +1900,22 @@ public class DefaultServlet extends HttpServlet {
             sb.append("<a href=\"");
             sb.append(rewrittenContextPath);
             sb.append(rewriteUrl(childResource.getWebappPath()));
-            if (childResource.isDirectory())
+            if (childResource.isDirectory()) {
                 sb.append('/');
+            }
             sb.append("\"><tt>");
             sb.append(Escape.htmlElementContent(filename));
-            if (childResource.isDirectory())
+            if (childResource.isDirectory()) {
                 sb.append('/');
+            }
             sb.append("</tt></a></td>\r\n");
 
             sb.append("<td align=\"right\"><tt>");
-            if (childResource.isDirectory())
+            if (childResource.isDirectory()) {
                 sb.append("&nbsp;");
-            else
+            } else {
                 sb.append(renderSize(childResource.getContentLength()));
+            }
             sb.append("</tt></td>\r\n");
 
             sb.append("<td align=\"right\"><tt>");
@@ -1943,8 +1960,9 @@ public class DefaultServlet extends HttpServlet {
 
         long leftSide = size / 1024;
         long rightSide = (size % 1024) / 103;   // Makes 1 digit
-        if ((leftSide == 0) && (rightSide == 0) && (size > 0))
+        if ((leftSide == 0) && (rightSide == 0) && (size > 0)) {
             rightSide = 1;
+        }
 
         return ("" + leftSide + "." + rightSide + " kb");
 
@@ -1984,8 +2002,9 @@ public class DefaultServlet extends HttpServlet {
                 }
                 return buffer.toString();
             } else {
-                if (debug > 10)
+                if (debug > 10) {
                     log("readme '" + readmeFile + "' not found");
+                }
 
                 return null;
             }
@@ -2033,8 +2052,9 @@ public class DefaultServlet extends HttpServlet {
                 }
             }
 
-            if (debug > 10)
+            if (debug > 10) {
                 log("contextXsltFile '" + contextXsltFile + "' not found");
+            }
         }
 
         /*  Open and read in file in one fell swoop to reduce chance
@@ -2380,8 +2400,9 @@ public class DefaultServlet extends HttpServlet {
         istream.close();
 
         // Rethrow any exception that has occurred
-        if (exception != null)
+        if (exception != null) {
             throw exception;
+        }
     }
 
 
@@ -2445,8 +2466,9 @@ public class DefaultServlet extends HttpServlet {
         istream.close();
 
         // Rethrow any exception that has occurred
-        if (exception != null)
+        if (exception != null) {
             throw exception;
+        }
 
     }
 
@@ -2480,8 +2502,9 @@ public class DefaultServlet extends HttpServlet {
                 // Writing MIME header.
                 ostream.println();
                 ostream.println("--" + mimeSeparation);
-                if (contentType != null)
+                if (contentType != null) {
                     ostream.println("Content-Type: " + contentType);
+                }
                 long start = getStart(range, length);
                 long end = getEnd(range, length);
                 ostream.println("Content-Range: bytes " + start
@@ -2498,8 +2521,9 @@ public class DefaultServlet extends HttpServlet {
         ostream.print("--" + mimeSeparation + "--");
 
         // Rethrow any exception that has occurred
-        if (exception != null)
+        if (exception != null) {
             throw exception;
+        }
 
     }
 
@@ -2523,8 +2547,9 @@ public class DefaultServlet extends HttpServlet {
         while (true) {
             try {
                 len = istream.read(buffer);
-                if (len == -1)
+                if (len == -1) {
                     break;
+                }
                 ostream.write(buffer, 0, len);
             } catch (IOException e) {
                 exception = e;
@@ -2555,8 +2580,9 @@ public class DefaultServlet extends HttpServlet {
         while (true) {
             try {
                 len = reader.read(buffer);
-                if (len == -1)
+                if (len == -1) {
                     break;
+                }
                 writer.write(buffer, 0, len);
             } catch (IOException e) {
                 exception = e;
@@ -2584,8 +2610,9 @@ public class DefaultServlet extends HttpServlet {
                                   ServletOutputStream ostream,
                                   long start, long end) {
 
-        if (debug > 10)
+        if (debug > 10) {
             log("Serving bytes:" + start + "-" + end);
+        }
 
         long skipped = 0;
         try {
@@ -2617,8 +2644,9 @@ public class DefaultServlet extends HttpServlet {
                 exception = e;
                 len = -1;
             }
-            if (len < buffer.length)
+            if (len < buffer.length) {
                 break;
+            }
         }
 
         return exception;
@@ -2771,8 +2799,9 @@ public class DefaultServlet extends HttpServlet {
         public void sort(WebResource[] resources, String order) {
             Comparator<WebResource> comparator = getComparator(order);
 
-            if(null != comparator)
+            if(null != comparator) {
                 Arrays.sort(resources, comparator);
+            }
         }
 
         public Comparator<WebResource> getComparator(String order) {
@@ -2780,8 +2809,9 @@ public class DefaultServlet extends HttpServlet {
         }
 
         public Comparator<WebResource> getComparator(Order order) {
-            if(null == order)
+            if(null == order) {
                 return defaultResourceComparator;
+            }
 
             if('N' == order.column) {
                 if(order.ascending) {
@@ -2822,13 +2852,15 @@ public class DefaultServlet extends HttpServlet {
          *         be applied to resources.
          */
         public Order getOrder(String order) {
-            if(null == order || 0 == order.trim().length())
+            if(null == order || 0 == order.trim().length()) {
                 return Order.DEFAULT;
+            }
 
             String[] options = order.split(";");
 
-            if(0 == options.length)
+            if(0 == options.length) {
                 return Order.DEFAULT;
+            }
 
             char column = '\0';
             boolean ascending = false;
@@ -2838,10 +2870,11 @@ public class DefaultServlet extends HttpServlet {
 
                 if(2 < option.length()) {
                     char opt = option.charAt(0);
-                    if('C' == opt)
+                    if('C' == opt) {
                         column = option.charAt(2);
-                    else if('O' == opt)
+                    } else if('O' == opt) {
                         ascending = ('A' == option.charAt(2));
+                    }
                 }
             }
 
@@ -2935,10 +2968,11 @@ public class DefaultServlet extends HttpServlet {
         public int compare(WebResource r1, WebResource r2) {
             int c = Long.compare(r1.getContentLength(), r2.getContentLength());
 
-            if(0 == c)
+            if(0 == c) {
                 return base.compare(r1, r2);
-            else
+            } else {
                 return c;
+            }
         }
     }
 
@@ -2953,10 +2987,11 @@ public class DefaultServlet extends HttpServlet {
         public int compare(WebResource r1, WebResource r2) {
             int c = Long.compare(r1.getLastModified(), r2.getLastModified());
 
-            if(0 == c)
+            if(0 == c) {
                 return base.compare(r1, r2);
-            else
+            } else {
                 return c;
+            }
         }
     }
 

==================================================
DataSourceStore.java
index 4e1d6f4a7c..a9701b0ac7 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -272,16 +272,19 @@ public class WebdavServlet extends DefaultServlet {
 
         super.init();
 
-        if (getServletConfig().getInitParameter("secret") != null)
+        if (getServletConfig().getInitParameter("secret") != null) {
             secret = getServletConfig().getInitParameter("secret");
+        }
 
-        if (getServletConfig().getInitParameter("maxDepth") != null)
+        if (getServletConfig().getInitParameter("maxDepth") != null) {
             maxDepth = Integer.parseInt(
                     getServletConfig().getInitParameter("maxDepth"));
+        }
 
-        if (getServletConfig().getInitParameter("allowSpecialPaths") != null)
+        if (getServletConfig().getInitParameter("allowSpecialPaths") != null) {
             allowSpecialPaths = Boolean.parseBoolean(
                     getServletConfig().getInitParameter("allowSpecialPaths"));
+        }
     }
 
 
@@ -387,8 +390,9 @@ public class WebdavServlet extends DefaultServlet {
                                      WebResource resource)
         throws IOException {
 
-        if (!super.checkIfHeaders(request, response, resource))
+        if (!super.checkIfHeaders(request, response, resource)) {
             return false;
+        }
 
         // TODO : Checking the WebDAV If header
         return true;
@@ -491,8 +495,9 @@ public class WebdavServlet extends DefaultServlet {
         }
 
         String path = getRelativePath(req);
-        if (path.length() > 1 && path.endsWith("/"))
+        if (path.length() > 1 && path.endsWith("/")) {
             path = path.substring(0, path.length() - 1);
+        }
 
         // Properties which are to be displayed.
         Vector<String> properties = null;
@@ -658,8 +663,9 @@ public class WebdavServlet extends DefaultServlet {
                     String[] entries = resources.list(currentPath);
                     for (String entry : entries) {
                         String newPath = currentPath;
-                        if (!(newPath.endsWith("/")))
-                                newPath += "/";
+                        if (!(newPath.endsWith("/"))) {
+                            newPath += "/";
+                        }
                         newPath += entry;
                         stackBelow.push(newPath);
                     }
@@ -667,9 +673,10 @@ public class WebdavServlet extends DefaultServlet {
                     // Displaying the lock-null resources present in that
                     // collection
                     String lockPath = currentPath;
-                    if (lockPath.endsWith("/"))
+                    if (lockPath.endsWith("/")) {
                         lockPath =
                             lockPath.substring(0, lockPath.length() - 1);
+                    }
                     Vector<String> currentLockNullResources =
                         lockNullResources.get(lockPath);
                     if (currentLockNullResources != null) {
@@ -1286,8 +1293,9 @@ public class WebdavServlet extends DefaultServlet {
         if (lockRequestType == LOCK_REFRESH) {
 
             String ifHeader = req.getHeader("If");
-            if (ifHeader == null)
+            if (ifHeader == null) {
                 ifHeader = "";
+            }
 
             // Checking resource locks
 
@@ -1374,8 +1382,9 @@ public class WebdavServlet extends DefaultServlet {
         String path = getRelativePath(req);
 
         String lockTokenHeader = req.getHeader("Lock-Token");
-        if (lockTokenHeader == null)
+        if (lockTokenHeader == null) {
             lockTokenHeader = "";
+        }
 
         // Checking resource locks
 
@@ -1447,12 +1456,14 @@ public class WebdavServlet extends DefaultServlet {
         String path = getRelativePath(req);
 
         String ifHeader = req.getHeader("If");
-        if (ifHeader == null)
+        if (ifHeader == null) {
             ifHeader = "";
+        }
 
         String lockTokenHeader = req.getHeader("Lock-Token");
-        if (lockTokenHeader == null)
+        if (lockTokenHeader == null) {
             lockTokenHeader = "";
+        }
 
         return isLocked(path, ifHeader + lockTokenHeader);
 
@@ -1489,8 +1500,9 @@ public class WebdavServlet extends DefaultServlet {
                     break;
                 }
             }
-            if (!tokenMatch)
+            if (!tokenMatch) {
                 return true;
+            }
 
         }
 
@@ -1512,8 +1524,9 @@ public class WebdavServlet extends DefaultServlet {
                         break;
                     }
                 }
-                if (!tokenMatch)
+                if (!tokenMatch) {
                     return true;
+                }
 
             }
         }
@@ -1599,8 +1612,9 @@ public class WebdavServlet extends DefaultServlet {
             }
         }
 
-        if (debug > 0)
+        if (debug > 0) {
             log("Dest path :" + destinationPath);
+        }
 
         // Check destination path to protect special subdirectories
         if (isSpecialPath(destinationPath)) {
@@ -1691,8 +1705,9 @@ public class WebdavServlet extends DefaultServlet {
     private boolean copyResource(Hashtable<String,Integer> errorList,
             String source, String dest) {
 
-        if (debug > 1)
+        if (debug > 1) {
             log("Copy: " + source + " To: " + dest);
+        }
 
         WebResource sourceResource = resources.getResource(source);
 
@@ -1790,12 +1805,14 @@ public class WebdavServlet extends DefaultServlet {
             throws IOException {
 
         String ifHeader = req.getHeader("If");
-        if (ifHeader == null)
+        if (ifHeader == null) {
             ifHeader = "";
+        }
 
         String lockTokenHeader = req.getHeader("Lock-Token");
-        if (lockTokenHeader == null)
+        if (lockTokenHeader == null) {
             lockTokenHeader = "";
+        }
 
         if (isLocked(path, ifHeader + lockTokenHeader)) {
             resp.sendError(WebdavStatus.SC_LOCKED);
@@ -1846,8 +1863,9 @@ public class WebdavServlet extends DefaultServlet {
                                   String path,
                                   Hashtable<String,Integer> errorList) {
 
-        if (debug > 1)
+        if (debug > 1) {
             log("Delete:" + path);
+        }
 
         // Prevent deletion of special subdirectories
         if (isSpecialPath(path)) {
@@ -1856,19 +1874,22 @@ public class WebdavServlet extends DefaultServlet {
         }
 
         String ifHeader = req.getHeader("If");
-        if (ifHeader == null)
+        if (ifHeader == null) {
             ifHeader = "";
+        }
 
         String lockTokenHeader = req.getHeader("Lock-Token");
-        if (lockTokenHeader == null)
+        if (lockTokenHeader == null) {
             lockTokenHeader = "";
+        }
 
         String[] entries = resources.list(path);
 
         for (String entry : entries) {
             String childName = path;
-            if (!childName.equals("/"))
+            if (!childName.equals("/")) {
                 childName += "/";
+            }
             childName += entry;
 
             if (isLocked(childName, ifHeader + lockTokenHeader)) {
@@ -1928,8 +1949,9 @@ public class WebdavServlet extends DefaultServlet {
 
             generatedXML.writeElement("D", "href", XMLWriter.OPENING);
             String toAppend = errorPath.substring(relativePath.length());
-            if (!toAppend.startsWith("/"))
+            if (!toAppend.startsWith("/")) {
                 toAppend = "/" + toAppend;
+            }
             generatedXML.writeText(absoluteUri + toAppend);
             generatedXML.writeElement("D", "href", XMLWriter.CLOSING);
             generatedXML.writeElement("D", "status", XMLWriter.OPENING);
@@ -1965,8 +1987,9 @@ public class WebdavServlet extends DefaultServlet {
                                  Vector<String> propertiesVector) {
 
         // Exclude any resource in the /WEB-INF and /META-INF subdirectories
-        if (isSpecialPath(path))
+        if (isSpecialPath(path)) {
             return;
+        }
 
         WebResource resource = resources.getResource(path);
         if (!resource.exists()) {
@@ -1976,12 +1999,14 @@ public class WebdavServlet extends DefaultServlet {
         }
 
         String href = req.getContextPath() + req.getServletPath();
-        if ((href.endsWith("/")) && (path.startsWith("/")))
+        if ((href.endsWith("/")) && (path.startsWith("/"))) {
             href += path.substring(1);
-        else
+        } else {
             href += path;
-        if (resource.isDirectory() && (!href.endsWith("/")))
+        }
+        if (resource.isDirectory() && (!href.endsWith("/"))) {
             href += "/";
+        }
 
         String rewrittenUrl = rewriteUrl(href);
 
@@ -2008,20 +2033,23 @@ public class WebdavServlet extends DefaultServlet {
                                          Vector<String> propertiesVector) {
 
         // Exclude any resource in the /WEB-INF and /META-INF subdirectories
-        if (isSpecialPath(path))
+        if (isSpecialPath(path)) {
             return;
+        }
 
         // Retrieving the lock associated with the lock-null resource
         LockInfo lock = resourceLocks.get(path);
 
-        if (lock == null)
+        if (lock == null) {
             return;
+        }
 
         String absoluteUri = req.getRequestURI();
         String relativePath = getRelativePath(req);
         String toAppend = path.substring(relativePath.length());
-        if (!toAppend.startsWith("/"))
+        if (!toAppend.startsWith("/")) {
             toAppend = "/" + toAppend;
+        }
 
         String rewrittenUrl = rewriteUrl(RequestUtil.normalize(
                 absoluteUri + toAppend));
@@ -2047,8 +2075,9 @@ public class WebdavServlet extends DefaultServlet {
 
         String resourceName = path;
         int lastSlash = path.lastIndexOf('/');
-        if (lastSlash != -1)
+        if (lastSlash != -1) {
             resourceName = resourceName.substring(lastSlash + 1);
+        }
 
         switch (propFindType) {
 
@@ -2215,8 +2244,9 @@ public class WebdavServlet extends DefaultServlet {
                     generatedXML.writeText(supportedLocks);
                     generatedXML.writeElement("D", "supportedlock", XMLWriter.CLOSING);
                 } else if (property.equals("lockdiscovery")) {
-                    if (!generateLockDiscovery(path, generatedXML))
+                    if (!generateLockDiscovery(path, generatedXML)) {
                         propertiesNotFound.addElement(property);
+                    }
                 } else {
                     propertiesNotFound.addElement(property);
                 }

==================================================
ManagerBase.java
index d6184ea96e..7c2cec4e56 100644
--- a/java/org/apache/catalina/session/DataSourceStore.java
+++ b/java/org/apache/catalina/session/DataSourceStore.java
@@ -733,8 +733,9 @@ public class DataSourceStore extends StoreBase {
     protected void close(Connection dbConnection) {
 
         // Do nothing if the database connection is already closed
-        if (dbConnection == null)
+        if (dbConnection == null) {
             return;
+        }
 
         // Commit if autoCommit is false
         try {

==================================================
PersistentManagerBase.java
index 8bd2b71d3d..15b6243e05 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -614,8 +614,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
     @Override
     public void backgroundProcess() {
         count = (count + 1) % processExpiresFrequency;
-        if (count == 0)
+        if (count == 0) {
             processExpires();
+        }
     }
 
     /**
@@ -627,16 +628,18 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
         Session sessions[] = findSessions();
         int expireHere = 0 ;
 
-        if(log.isDebugEnabled())
+        if(log.isDebugEnabled()) {
             log.debug("Start expire sessions " + getName() + " at " + timeNow + " sessioncount " + sessions.length);
+        }
         for (Session session : sessions) {
             if (session != null && !session.isValid()) {
                 expireHere++;
             }
         }
         long timeEnd = System.currentTimeMillis();
-        if(log.isDebugEnabled())
-             log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);
+        if(log.isDebugEnabled()) {
+            log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);
+        }
         processingTime += ( timeEnd - timeNow );
 
     }
@@ -683,11 +686,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
             ((Lifecycle) sessionIdGenerator).start();
         } else {
             // Force initialization of the random number generator
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Force random number initialization starting");
+            }
             sessionIdGenerator.generateSessionId();
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Force random number initialization completed");
+            }
         }
     }
 
@@ -1183,7 +1188,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
             return null;
         }
         Object o=s.getSession().getAttribute(key);
-        if( o==null ) return null;
+        if( o==null ) {
+            return null;
+        }
         return o.toString();
     }
 

==================================================
StandardManager.java
index 9f52c44659..a7698ee2fa 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -230,8 +230,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     public void setMaxIdleBackup (int backup) {
 
-        if (backup == this.maxIdleBackup)
+        if (backup == this.maxIdleBackup) {
             return;
+        }
         int oldBackup = this.maxIdleBackup;
         this.maxIdleBackup = backup;
         support.firePropertyChange("maxIdleBackup",
@@ -261,8 +262,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     public void setMaxIdleSwap(int max) {
 
-        if (max == this.maxIdleSwap)
+        if (max == this.maxIdleSwap) {
             return;
+        }
         int oldMaxIdleSwap = this.maxIdleSwap;
         this.maxIdleSwap = max;
         support.firePropertyChange("maxIdleSwap",
@@ -292,8 +294,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     public void setMinIdleSwap(int min) {
 
-        if (this.minIdleSwap == min)
+        if (this.minIdleSwap == min) {
             return;
+        }
         int oldMinIdleSwap = this.minIdleSwap;
         this.minIdleSwap = min;
         support.firePropertyChange("minIdleSwap",
@@ -375,8 +378,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     public void setSaveOnRestart(boolean saveOnRestart) {
 
-        if (saveOnRestart == this.saveOnRestart)
+        if (saveOnRestart == this.saveOnRestart) {
             return;
+        }
 
         boolean oldSaveOnRestart = this.saveOnRestart;
         this.saveOnRestart = saveOnRestart;
@@ -395,8 +399,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     public void clearStore() {
 
-        if (store == null)
+        if (store == null) {
             return;
+        }
 
         try {
             if (SecurityUtil.isPackageProtectionEnabled()) {
@@ -426,8 +431,9 @@ public abstract class PersistentManagerBase extends ManagerBase
         long timeNow = System.currentTimeMillis();
         Session sessions[] = findSessions();
         int expireHere = 0 ;
-        if(log.isDebugEnabled())
-             log.debug("Start expire sessions " + getName() + " at " + timeNow + " sessioncount " + sessions.length);
+        if(log.isDebugEnabled()) {
+            log.debug("Start expire sessions " + getName() + " at " + timeNow + " sessioncount " + sessions.length);
+        }
         for (Session session : sessions) {
             if (!session.isValid()) {
                 expiredSessions.incrementAndGet();
@@ -440,8 +446,9 @@ public abstract class PersistentManagerBase extends ManagerBase
         }
 
         long timeEnd = System.currentTimeMillis();
-        if(log.isDebugEnabled())
-             log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);
+        if(log.isDebugEnabled()) {
+            log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);
+        }
         processingTime += (timeEnd - timeNow);
 
     }
@@ -487,8 +494,9 @@ public abstract class PersistentManagerBase extends ManagerBase
                 }
             }
         }
-        if (session != null)
+        if (session != null) {
             return session;
+        }
 
         // See if the Session is in the Store
         session = swapIn(id);
@@ -522,8 +530,9 @@ public abstract class PersistentManagerBase extends ManagerBase
         // Initialize our internal data structures
         sessions.clear();
 
-        if (store == null)
+        if (store == null) {
             return;
+        }
 
         String[] ids = null;
         try {
@@ -544,18 +553,21 @@ public abstract class PersistentManagerBase extends ManagerBase
         }
 
         int n = ids.length;
-        if (n == 0)
+        if (n == 0) {
             return;
+        }
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug(sm.getString("persistentManager.loading", String.valueOf(n)));
+        }
 
-        for (String id : ids)
+        for (String id : ids) {
             try {
                 swapIn(id);
             } catch (IOException e) {
                 log.error(sm.getString("persistentManager.storeLoadError"), e);
             }
+        }
 
     }
 
@@ -610,24 +622,28 @@ public abstract class PersistentManagerBase extends ManagerBase
     @Override
     public void unload() {
 
-        if (store == null)
+        if (store == null) {
             return;
+        }
 
         Session sessions[] = findSessions();
         int n = sessions.length;
-        if (n == 0)
+        if (n == 0) {
             return;
+        }
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug(sm.getString("persistentManager.unloading",
                              String.valueOf(n)));
+        }
 
-        for (Session session : sessions)
+        for (Session session : sessions) {
             try {
                 swapOut(session);
             } catch (IOException e) {
                 // This is logged in writeSession()
             }
+        }
 
     }
 
@@ -675,8 +691,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     protected Session swapIn(String id) throws IOException {
 
-        if (store == null)
+        if (store == null) {
             return null;
+        }
 
         Object swapInLock = null;
 
@@ -737,8 +754,9 @@ public abstract class PersistentManagerBase extends ManagerBase
     }
 
     private void reactivateLoadedSession(String id, Session session) {
-        if(log.isDebugEnabled())
+        if(log.isDebugEnabled()) {
             log.debug(sm.getString("persistentManager.swapIn", id));
+        }
 
         session.setManager(this);
         // make sure the listeners know about it.
@@ -858,10 +876,11 @@ public abstract class PersistentManagerBase extends ManagerBase
 
         super.startInternal();
 
-        if (store == null)
+        if (store == null) {
             log.error("No Store configured, persistence disabled");
-        else if (store instanceof Lifecycle)
+        } else if (store instanceof Lifecycle) {
             ((Lifecycle)store).start();
+        }
 
         setState(LifecycleState.STARTING);
     }
@@ -877,8 +896,9 @@ public abstract class PersistentManagerBase extends ManagerBase
     @Override
     protected synchronized void stopInternal() throws LifecycleException {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("Stopping");
+        }
 
         setState(LifecycleState.STOPPING);
 
@@ -889,8 +909,9 @@ public abstract class PersistentManagerBase extends ManagerBase
             Session sessions[] = findSessions();
             for (Session value : sessions) {
                 StandardSession session = (StandardSession) value;
-                if (!session.isValid())
+                if (!session.isValid()) {
                     continue;
+                }
                 session.expire();
             }
         }
@@ -912,8 +933,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     protected void processMaxIdleSwaps() {
 
-        if (!getState().isAvailable() || maxIdleSwap < 0)
+        if (!getState().isAvailable() || maxIdleSwap < 0) {
             return;
+        }
 
         Session sessions[] = findSessions();
 
@@ -922,8 +944,9 @@ public abstract class PersistentManagerBase extends ManagerBase
             for (Session value : sessions) {
                 StandardSession session = (StandardSession) value;
                 synchronized (session) {
-                    if (!session.isValid())
+                    if (!session.isValid()) {
                         continue;
+                    }
                     int timeIdle = (int) (session.getIdleTimeInternal() / 1000L);
                     if (timeIdle >= maxIdleSwap && timeIdle >= minIdleSwap) {
                         if (session.accessCount != null &&
@@ -931,11 +954,12 @@ public abstract class PersistentManagerBase extends ManagerBase
                             // Session is currently being accessed - skip it
                             continue;
                         }
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(sm.getString
                                     ("persistentManager.swapMaxIdle",
                                             session.getIdInternal(),
                                             Integer.valueOf(timeIdle)));
+                        }
                         try {
                             swapOut(session);
                         } catch (IOException e) {
@@ -963,13 +987,15 @@ public abstract class PersistentManagerBase extends ManagerBase
         // FIXME: Smarter algorithm (LRU)
         int limit = (int) (getMaxActiveSessions() * 0.9);
 
-        if (limit >= sessions.length)
+        if (limit >= sessions.length) {
             return;
+        }
 
-        if(log.isDebugEnabled())
+        if(log.isDebugEnabled()) {
             log.debug(sm.getString
                 ("persistentManager.tooManyActive",
                  Integer.valueOf(sessions.length)));
+        }
 
         int toswap = sessions.length - limit;
 
@@ -983,11 +1009,12 @@ public abstract class PersistentManagerBase extends ManagerBase
                         // Session is currently being accessed - skip it
                         continue;
                     }
-                    if(log.isDebugEnabled())
+                    if(log.isDebugEnabled()) {
                         log.debug(sm.getString
                             ("persistentManager.swapTooManyActive",
                              session.getIdInternal(),
                              Integer.valueOf(timeIdle)));
+                    }
                     try {
                         swapOut(session);
                     } catch (IOException e) {
@@ -1006,8 +1033,9 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     protected void processMaxIdleBackups() {
 
-        if (!getState().isAvailable() || maxIdleBackup < 0)
+        if (!getState().isAvailable() || maxIdleBackup < 0) {
             return;
+        }
 
         Session sessions[] = findSessions();
 
@@ -1016,21 +1044,24 @@ public abstract class PersistentManagerBase extends ManagerBase
             for (Session value : sessions) {
                 StandardSession session = (StandardSession) value;
                 synchronized (session) {
-                    if (!session.isValid())
+                    if (!session.isValid()) {
                         continue;
+                    }
                     long lastAccessedTime = session.getLastAccessedTimeInternal();
                     Long persistedLastAccessedTime =
                             (Long) session.getNote(PERSISTED_LAST_ACCESSED_TIME);
                     if (persistedLastAccessedTime != null &&
-                            lastAccessedTime == persistedLastAccessedTime.longValue())
+                            lastAccessedTime == persistedLastAccessedTime.longValue()) {
                         continue;
+                    }
                     int timeIdle = (int) (session.getIdleTimeInternal() / 1000L);
                     if (timeIdle >= maxIdleBackup) {
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug(sm.getString
                                     ("persistentManager.backupMaxIdle",
                                             session.getIdInternal(),
                                             Integer.valueOf(timeIdle)));
+                        }
 
                         try {
                             writeSession(session);

==================================================
StandardSession.java
index 3031601196..ad3273c2dc 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -211,8 +211,9 @@ public class StandardManager extends ManagerBase {
                         getWarnOnSessionAttributeFilterFailure())) {
                     Integer count = (Integer) ois.readObject();
                     int n = count.intValue();
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("Loading " + n + " persisted sessions");
+                    }
                     for (int i = 0; i < n; i++) {
                         StandardSession session = getNewSession();
                         session.readObjectData(ois);
@@ -278,8 +279,9 @@ public class StandardManager extends ManagerBase {
      */
     protected void doUnload() throws IOException {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug(sm.getString("standardManager.unloading.debug"));
+        }
 
         if (sessions.isEmpty()) {
             log.debug(sm.getString("standardManager.unloading.nosessions"));

==================================================
ExpressionParseTree.java
index f755e250a4..0c418651d5 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -340,13 +340,15 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     public void setId(String id, boolean notify) {
 
-        if ((this.id != null) && (manager != null))
+        if ((this.id != null) && (manager != null)) {
             manager.remove(this);
+        }
 
         this.id = id;
 
-        if (manager != null)
+        if (manager != null) {
             manager.add(this);
+        }
 
         if (notify) {
             tellNew();
@@ -370,8 +372,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
             HttpSessionEvent event =
                 new HttpSessionEvent(getSession());
             for (Object o : listeners) {
-                if (!(o instanceof HttpSessionListener))
+                if (!(o instanceof HttpSessionListener)) {
                     continue;
+                }
                 HttpSessionListener listener = (HttpSessionListener) o;
                 try {
                     context.fireContainerEvent("beforeSessionCreated", listener);
@@ -419,8 +422,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
                     new HttpSessionEvent(getSession());
 
                 for(Object listener : listeners) {
-                    if (!(listener instanceof HttpSessionIdListener))
+                    if (!(listener instanceof HttpSessionIdListener)) {
                         continue;
+                    }
 
                     HttpSessionIdListener idListener =
                         (HttpSessionIdListener)listener;
@@ -745,19 +749,22 @@ public class StandardSession implements HttpSession, Session, Serializable {
         // Check to see if session has already been invalidated.
         // Do not check expiring at this point as expire should not return until
         // isValid is false
-        if (!isValid)
+        if (!isValid) {
             return;
+        }
 
         synchronized (this) {
             // Check again, now we are inside the sync so this code only runs once
             // Double check locking - isValid needs to be volatile
             // The check of expiring is to ensure that an infinite loop is not
             // entered as per bug 56339
-            if (expiring || !isValid)
+            if (expiring || !isValid) {
                 return;
+            }
 
-            if (manager == null)
+            if (manager == null) {
                 return;
+            }
 
             // Mark this session as "being expired"
             expiring = true;
@@ -779,8 +786,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
                             new HttpSessionEvent(getSession());
                         for (int i = 0; i < listeners.length; i++) {
                             int j = (listeners.length - 1) - i;
-                            if (!(listeners[j] instanceof HttpSessionListener))
+                            if (!(listeners[j] instanceof HttpSessionListener)) {
                                 continue;
+                            }
                             HttpSessionListener listener =
                                 (HttpSessionListener) listeners[j];
                             try {
@@ -866,8 +874,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
         for (String key : keys) {
             Object attribute = attributes.get(key);
             if (attribute instanceof HttpSessionActivationListener) {
-                if (event == null)
+                if (event == null) {
                     event = new HttpSessionEvent(getSession());
+                }
                 try {
                     ((HttpSessionActivationListener) attribute).sessionWillPassivate(event);
                 } catch (Throwable t) {
@@ -900,8 +909,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
         for (String key : keys) {
             Object attribute = attributes.get(key);
             if (attribute instanceof HttpSessionActivationListener) {
-                if (event == null)
+                if (event == null) {
                     event = new HttpSessionEvent(getSession());
+                }
                 try {
                     ((HttpSessionActivationListener) attribute).sessionDidActivate(event);
                 } catch (Throwable t) {
@@ -1062,9 +1072,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public long getCreationTime() {
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.getCreationTime.ise"));
+        }
 
         return this.creationTime;
     }
@@ -1103,8 +1114,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     @Deprecated
     public jakarta.servlet.http.HttpSessionContext getSessionContext() {
-        if (sessionContext == null)
+        if (sessionContext == null) {
             sessionContext = new StandardSessionContext();
+        }
         return sessionContext;
     }
 
@@ -1123,11 +1135,14 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public Object getAttribute(String name) {
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.getAttribute.ise"));
+        }
 
-        if (name == null) return null;
+        if (name == null) {
+            return null;
+        }
 
         return attributes.get(name);
     }
@@ -1143,9 +1158,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     public Enumeration<String> getAttributeNames() {
 
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.getAttributeNames.ise"));
+        }
 
         Set<String> names = new HashSet<>(attributes.keySet());
         return Collections.enumeration(names);
@@ -1186,9 +1202,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     @Deprecated
     public String[] getValueNames() {
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.getValueNames.ise"));
+        }
 
         return keys();
     }
@@ -1203,9 +1220,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     public void invalidate() {
 
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.invalidate.ise"));
+        }
 
         // Cause this session to expire
         expire();
@@ -1225,9 +1243,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public boolean isNew() {
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.isNew.ise"));
+        }
 
         return this.isNew;
     }
@@ -1301,9 +1320,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
     public void removeAttribute(String name, boolean notify) {
 
         // Validate our current state
-        if (!isValidInternal())
+        if (!isValidInternal()) {
             throw new IllegalStateException
                 (sm.getString("standardSession.removeAttribute.ise"));
+        }
 
         removeAttributeInternal(name, notify);
 
@@ -1541,9 +1561,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
         principal = null;        // Transient (may be set later)
         //        setId((String) stream.readObject());
         id = (String) stream.readObject();
-        if (manager.getContext().getLogger().isDebugEnabled())
+        if (manager.getContext().getLogger().isDebugEnabled()) {
             manager.getContext().getLogger().debug
                 ("readObject() loading session " + id);
+        }
 
         // The next object read could either be the number of attributes (Integer) or the session's
         // authType followed by a Principal object (not an Integer)
@@ -1566,8 +1587,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
         }
 
         // Deserialize the attribute count and attribute values
-        if (attributes == null)
+        if (attributes == null) {
             attributes = new ConcurrentHashMap<>();
+        }
         int n = ((Integer) nextObject).intValue();
         boolean isValidSave = isValid;
         isValid = true;
@@ -1589,17 +1611,19 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 }
                 throw wae;
             }
-            if (manager.getContext().getLogger().isDebugEnabled())
+            if (manager.getContext().getLogger().isDebugEnabled()) {
                 manager.getContext().getLogger().debug("  loading attribute '" + name +
                     "' with value '" + value + "'");
+            }
             // Handle the case where the filter configuration was changed while
             // the web application was stopped.
             if (exclude(name, value)) {
                 continue;
             }
             // ConcurrentHashMap does not allow null keys or values
-            if(null != value)
+            if(null != value) {
                 attributes.put(name, value);
+            }
         }
         isValid = isValidSave;
 
@@ -1642,9 +1666,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
         stream.writeObject(Boolean.valueOf(isValid));
         stream.writeObject(Long.valueOf(thisAccessedTime));
         stream.writeObject(id);
-        if (manager.getContext().getLogger().isDebugEnabled())
+        if (manager.getContext().getLogger().isDebugEnabled()) {
             manager.getContext().getLogger().debug
                 ("writeObject() storing session " + id);
+        }
 
         // Gather authentication information (if configured)
         String sessionAuthType = null;
@@ -1691,9 +1716,10 @@ public class StandardSession implements HttpSession, Session, Serializable {
             stream.writeObject(saveNames.get(i));
             try {
                 stream.writeObject(saveValues.get(i));
-                if (manager.getContext().getLogger().isDebugEnabled())
+                if (manager.getContext().getLogger().isDebugEnabled()) {
                     manager.getContext().getLogger().debug(
                             "  storing attribute '" + saveNames.get(i) + "' with value '" + saveValues.get(i) + "'");
+                }
             } catch (NotSerializableException e) {
                 manager.getContext().getLogger().warn(
                         sm.getString("standardSession.notSerializable", saveNames.get(i), id), e);
@@ -1762,8 +1788,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
      * @param data Event data
      */
     public void fireSessionEvent(String type, Object data) {
-        if (listeners.size() < 1)
+        if (listeners.size() < 1) {
             return;
+        }
         SessionEvent event = new SessionEvent(this, type, data);
         SessionListener list[] = new SessionListener[0];
         synchronized (listeners) {
@@ -1805,7 +1832,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
     protected void removeAttributeInternal(String name, boolean notify) {
 
         // Avoid NPE
-        if (name == null) return;
+        if (name == null) {
+            return;
+        }
 
         // Remove this attribute from our collection
         Object value = attributes.remove(name);
@@ -1825,8 +1854,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
         // Notify interested application event listeners
         Context context = manager.getContext();
         Object listeners[] = context.getApplicationEventListeners();
-        if (listeners == null)
+        if (listeners == null) {
             return;
+        }
         for (Object o : listeners) {
             if (!(o instanceof HttpSessionAttributeListener)) {
                 continue;

==================================================
ExpressionTokenizer.java
index dd048c01fa..0052d27c87 100644
--- a/java/org/apache/catalina/ssi/ExpressionParseTree.java
+++ b/java/org/apache/catalina/ssi/ExpressionParseTree.java
@@ -87,14 +87,20 @@ public class ExpressionParseTree {
             return;
         }
         while (true) {
-            if (oppStack.size() == 0) break;
+            if (oppStack.size() == 0) {
+                break;
+            }
             OppNode top = oppStack.get(0);
             // If the top is a spacer then don't pop
             // anything
-            if (top == null) break;
+            if (top == null) {
+                break;
+            }
             // If the top node has a lower precedence then
             // let it stay
-            if (top.getPrecedence() < node.getPrecedence()) break;
+            if (top.getPrecedence() < node.getPrecedence()) {
+                break;
+            }
             // Remove the top node
             oppStack.remove(0);
             // Let it fill its branches
@@ -135,8 +141,9 @@ public class ExpressionParseTree {
         ExpressionTokenizer et = new ExpressionTokenizer(expr);
         while (et.hasMoreTokens()) {
             int token = et.nextToken();
-            if (token != ExpressionTokenizer.TOKEN_STRING)
+            if (token != ExpressionTokenizer.TOKEN_STRING) {
                 currStringNode = null;
+            }
             switch (token) {
                 case ExpressionTokenizer.TOKEN_STRING :
                     if (currStringNode == null) {
@@ -238,8 +245,9 @@ public class ExpressionParseTree {
          * @return the value string
          */
         public String getValue() {
-            if (resolved == null)
+            if (resolved == null) {
                 resolved = ssiMediator.substituteVariables(value.toString());
+            }
             return resolved;
         }
 
@@ -325,8 +333,9 @@ public class ExpressionParseTree {
     private static final class AndNode extends OppNode {
         @Override
         public boolean evaluate() {
-            if (!left.evaluate()) // Short circuit
+            if (!left.evaluate()) {
                 return false;
+            }
             return right.evaluate();
         }
 
@@ -345,8 +354,9 @@ public class ExpressionParseTree {
     private static final class OrNode extends OppNode {
         @Override
         public boolean evaluate() {
-            if (left.evaluate()) // Short circuit
+            if (left.evaluate()) {
                 return true;
+            }
             return right.evaluate();
         }
 

==================================================
SSIConditional.java
index a99a17da03..967b3fee57 100644
--- a/java/org/apache/catalina/ssi/ExpressionTokenizer.java
+++ b/java/org/apache/catalina/ssi/ExpressionTokenizer.java
@@ -82,16 +82,22 @@ public class ExpressionTokenizer {
      */
     public int nextToken() {
         // Skip any leading white space
-        while (index < length && Character.isWhitespace(expr[index]))
+        while (index < length && Character.isWhitespace(expr[index])) {
             index++;
+        }
         // Clear the current token val
         tokenVal = null;
-        if (index == length) return TOKEN_END; // End of string
+        if (index == length)
+         {
+            return TOKEN_END; // End of string
+        }
         int start = index;
         char currentChar = expr[index];
         char nextChar = (char)0;
         index++;
-        if (index < length) nextChar = expr[index];
+        if (index < length) {
+            nextChar = expr[index];
+        }
         // Check for a known token start
         switch (currentChar) {
             case '(' :
@@ -145,7 +151,9 @@ public class ExpressionTokenizer {
                     escaped = true;
                     continue;
                 }
-                if (expr[index] == endChar && !escaped) break;
+                if (expr[index] == endChar && !escaped) {
+                    break;
+                }
                 escaped = false;
             }
             end = index;
@@ -159,14 +167,18 @@ public class ExpressionTokenizer {
                     escaped = true;
                     continue;
                 }
-                if (expr[index] == endChar && !escaped) break;
+                if (expr[index] == endChar && !escaped) {
+                    break;
+                }
                 escaped = false;
             }
             end = ++index;
         } else {
             // End is the next whitespace character
             for (; index < length; index++) {
-                if (isMetaChar(expr[index])) break;
+                if (isMetaChar(expr[index])) {
+                    break;
+                }
             }
             end = index;
         }

==================================================
SSIFilter.java
index 0fbe778bb1..3a3af58d3c 100644
--- a/java/org/apache/catalina/ssi/SSIConditional.java
+++ b/java/org/apache/catalina/ssi/SSIConditional.java
@@ -57,7 +57,9 @@ public class SSIConditional implements SSICommand {
         } else if ("elif".equalsIgnoreCase(commandName)) {
             // No need to even execute if we are nested in
             // a false branch
-            if (state.nestingCount > 0) return lastModified;
+            if (state.nestingCount > 0) {
+                return lastModified;
+            }
             // If a branch was already taken in this if block
             // then disable output and return
             if (state.branchTaken) {
@@ -77,7 +79,9 @@ public class SSIConditional implements SSICommand {
         } else if ("else".equalsIgnoreCase(commandName)) {
             // No need to even execute if we are nested in
             // a false branch
-            if (state.nestingCount > 0) return lastModified;
+            if (state.nestingCount > 0) {
+                return lastModified;
+            }
             // If we've already taken another branch then
             // disable output otherwise enable it.
             state.processConditionalCommandsOnly = state.branchTaken;
@@ -133,7 +137,9 @@ public class SSIConditional implements SSICommand {
      * null.
      */
     private String getExpression(String[] paramNames, String[] paramValues) {
-        if ("expr".equalsIgnoreCase(paramNames[0])) return paramValues[0];
+        if ("expr".equalsIgnoreCase(paramNames[0])) {
+            return paramValues[0];
+        }
         return null;
     }
 }

==================================================
SSIMediator.java
index b1c9b16b8f..57e62438a3 100644
--- a/java/org/apache/catalina/ssi/SSIFilter.java
+++ b/java/org/apache/catalina/ssi/SSIFilter.java
@@ -73,14 +73,16 @@ public class SSIFilter extends GenericFilter {
 
         isVirtualWebappRelative = Boolean.parseBoolean(getInitParameter("isVirtualWebappRelative"));
 
-        if (getInitParameter("expires") != null)
+        if (getInitParameter("expires") != null) {
             expires = Long.valueOf(getInitParameter("expires"));
+        }
 
         allowExec = Boolean.parseBoolean(getInitParameter("allowExec"));
 
-        if (debug > 0)
+        if (debug > 0) {
             getServletContext().log(
                     "SSIFilter.init() SSI invoker started with 'debug'=" + debug);
+        }
     }
 
     @Override

==================================================
SSIProcessor.java
index 3de7bd52ab..82ae5c5e35 100644
--- a/java/org/apache/catalina/ssi/SSIMediator.java
+++ b/java/org/apache/catalina/ssi/SSIMediator.java
@@ -194,7 +194,9 @@ public class SSIMediator {
     public String substituteVariables(String val) {
         // If it has no references or HTML entities then no work
         // need to be done
-        if (val.indexOf('$') < 0 && val.indexOf('&') < 0) return val;
+        if (val.indexOf('$') < 0 && val.indexOf('&') < 0) {
+            return val;
+        }
 
         // HTML decoding
         val = val.replace("&lt;", "<");
@@ -225,7 +227,9 @@ public class SSIMediator {
                     break;
                 }
             }
-            if (i == sb.length()) break;
+            if (i == sb.length()) {
+                break;
+            }
             // Check to see if the $ is escaped
             if (i > 1 && sb.charAt(i - 2) == '\\') {
                 sb.deleteCharAt(i - 2);
@@ -244,15 +248,21 @@ public class SSIMediator {
             }
             // Find the end of the var reference
             for (; i < sb.length(); i++) {
-                if (sb.charAt(i) == endChar) break;
+                if (sb.charAt(i) == endChar) {
+                    break;
+                }
             }
             end = i;
             nameEnd = end;
-            if (endChar == '}') end++;
+            if (endChar == '}') {
+                end++;
+            }
             // We should now have enough to extract the var name
             String varName = sb.substring(nameStart, nameEnd);
             String value = getVariableValue(varName);
-            if (value == null) value = "";
+            if (value == null) {
+                value = "";
+            }
             // Replace the var name with its value
             sb.replace(start, end, value);
             // Start searching for the next $ after the value

==================================================
SSIServlet.java
index 9f5153fb02..f9f60b188d 100644
--- a/java/org/apache/catalina/ssi/SSIProcessor.java
+++ b/java/org/apache/catalina/ssi/SSIProcessor.java
@@ -197,9 +197,12 @@ public class SSIProcessor {
         StringBuilder retBuf = new StringBuilder();
         while (bIdx < cmd.length()) {
             if (!inside) {
-                while (bIdx < cmd.length() && isSpace(cmd.charAt(bIdx)))
+                while (bIdx < cmd.length() && isSpace(cmd.charAt(bIdx))) {
                     bIdx++;
-                if (bIdx >= cmd.length()) break;
+                }
+                if (bIdx >= cmd.length()) {
+                    break;
+                }
                 inside = !inside;
             } else {
                 while (bIdx < cmd.length() && cmd.charAt(bIdx) != '=') {
@@ -217,7 +220,9 @@ public class SSIProcessor {
                         escaped = true;
                         continue;
                     }
-                    if (c == '"' && !escaped) quotes++;
+                    if (c == '"' && !escaped) {
+                        quotes++;
+                    }
                     escaped = false;
                 }
             }
@@ -249,9 +254,12 @@ public class SSIProcessor {
         char endQuote = 0;
         for (int bIdx = start; bIdx < cmd.length(); bIdx++) {
             if (!inside) {
-                while (bIdx < cmd.length() && !isQuote(cmd.charAt(bIdx)))
+                while (bIdx < cmd.length() && !isQuote(cmd.charAt(bIdx))) {
                     bIdx++;
-                if (bIdx >= cmd.length()) break;
+                }
+                if (bIdx >= cmd.length()) {
+                    break;
+                }
                 inside = !inside;
                 endQuote = cmd.charAt(bIdx);
             } else {
@@ -264,17 +272,23 @@ public class SSIProcessor {
                         continue;
                     }
                     // If we reach the other " then stop
-                    if (c == endQuote && !escaped) break;
+                    if (c == endQuote && !escaped) {
+                        break;
+                    }
                     // Since parsing of attributes and var
                     // substitution is done in separate places,
                     // we need to leave escape in the string
-                    if (c == '$' && escaped) sb.append('\\');
+                    if (c == '$' && escaped) {
+                        sb.append('\\');
+                    }
                     escaped = false;
                     sb.append(c);
                 }
                 // If we hit the end without seeing a quote
                 // the signal an error
-                if (bIdx == cmd.length()) return null;
+                if (bIdx == cmd.length()) {
+                    return null;
+                }
                 vals[valIndex++] = sb.toString();
                 sb.delete(0, sb.length()); // clear the buffer
                 inside = !inside;

==================================================
SSIServletExternalResolver.java
index 1648052249..30cfff4e34 100644
--- a/java/org/apache/catalina/ssi/SSIServlet.java
+++ b/java/org/apache/catalina/ssi/SSIServlet.java
@@ -70,27 +70,31 @@ public class SSIServlet extends HttpServlet {
     @Override
     public void init() throws ServletException {
 
-        if (getServletConfig().getInitParameter("debug") != null)
+        if (getServletConfig().getInitParameter("debug") != null) {
             debug = Integer.parseInt(getServletConfig().getInitParameter("debug"));
+        }
 
         isVirtualWebappRelative =
             Boolean.parseBoolean(getServletConfig().getInitParameter("isVirtualWebappRelative"));
 
-        if (getServletConfig().getInitParameter("expires") != null)
+        if (getServletConfig().getInitParameter("expires") != null) {
             expires = Long.valueOf(getServletConfig().getInitParameter("expires"));
+        }
 
         buffered = Boolean.parseBoolean(getServletConfig().getInitParameter("buffered"));
 
         inputEncoding = getServletConfig().getInitParameter("inputEncoding");
 
-        if (getServletConfig().getInitParameter("outputEncoding") != null)
+        if (getServletConfig().getInitParameter("outputEncoding") != null) {
             outputEncoding = getServletConfig().getInitParameter("outputEncoding");
+        }
 
         allowExec = Boolean.parseBoolean(
                 getServletConfig().getInitParameter("allowExec"));
 
-        if (debug > 0)
+        if (debug > 0) {
             log("SSIServlet.init() SSI invoker started with 'debug'=" + debug);
+        }
 
     }
 
@@ -110,7 +114,9 @@ public class SSIServlet extends HttpServlet {
     @Override
     public void doGet(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
-        if (debug > 0) log("SSIServlet.doGet()");
+        if (debug > 0) {
+            log("SSIServlet.doGet()");
+        }
         requestHandler(req, res);
     }
 
@@ -131,7 +137,9 @@ public class SSIServlet extends HttpServlet {
     @Override
     public void doPost(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
-        if (debug > 0) log("SSIServlet.doPost()");
+        if (debug > 0) {
+            log("SSIServlet.doPost()");
+        }
         requestHandler(req, res);
     }
 
@@ -149,10 +157,11 @@ public class SSIServlet extends HttpServlet {
             HttpServletResponse res) throws IOException {
         ServletContext servletContext = getServletContext();
         String path = SSIServletRequestUtil.getRelativePath(req);
-        if (debug > 0)
+        if (debug > 0) {
             log("SSIServlet.requestHandler()\n" + "Serving "
                     + (buffered?"buffered ":"unbuffered ") + "resource '"
                     + path + "'");
+        }
         // Exclude any resource in the /WEB-INF and /META-INF subdirectories
         // (the "toUpperCase()" avoids problems on Windows systems)
         if (path == null || path.toUpperCase(Locale.ENGLISH).startsWith("/WEB-INF")

==================================================
SSIServletRequestUtil.java
index 2143838fd4..b601c9c3b0 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -203,7 +203,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
                 }
                 if (accept != null) {
                     Enumeration<String> acceptHeaders = req.getHeaders(accept);
-                    if (acceptHeaders != null)
+                    if (acceptHeaders != null) {
                         if (acceptHeaders.hasMoreElements()) {
                             StringBuilder rv = new StringBuilder(
                                     acceptHeaders.nextElement());
@@ -213,6 +213,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
                             }
                         retVal = rv.toString();
                     }
+                    }
                 }
             }
             else if (nameParts[1].equals("CONNECTION")) {
@@ -224,12 +225,14 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
             else if (nameParts[1].equals("REFERER")) {
                 retVal = req.getHeader("Referer");
             }
-            else if (nameParts[1].equals("USER"))
-                if (nameParts.length == 3)
+            else if (nameParts[1].equals("USER")) {
+                if (nameParts.length == 3) {
                     if (nameParts[2].equals("AGENT")) {
                         requiredParts = 3;
                         retVal = req.getHeader("User-Agent");
                     }
+                }
+            }
 
         } else if (nameParts[0].equals("PATH")) {
             if (nameParts[1].equals("INFO")) {
@@ -299,7 +302,9 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
                 // If this is an error page, get the original URI
                 retVal = (String) req.getAttribute(
                         RequestDispatcher.FORWARD_REQUEST_URI);
-                if (retVal == null) retVal=req.getRequestURI();
+                if (retVal == null) {
+                    retVal=req.getRequestURI();
+                }
             }
         } else if (nameParts[0].equals("SCRIPT")) {
             String scriptName = req.getServletPath();
@@ -332,7 +337,9 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
         } else if (name.equalsIgnoreCase("UNIQUE_ID")) {
             retVal = req.getRequestedSessionId();
         }
-        if (requiredParts != nameParts.length) return null;
+        if (requiredParts != nameParts.length) {
+            return null;
+        }
             return retVal;
     }
 

==================================================
Bootstrap.java
index 1e63ca49e7..b8c28afa82 100644
--- a/java/org/apache/catalina/ssi/SSIServletRequestUtil.java
+++ b/java/org/apache/catalina/ssi/SSIServletRequestUtil.java
@@ -37,10 +37,13 @@ public class SSIServletRequestUtil {
                 RequestDispatcher.INCLUDE_REQUEST_URI) != null) {
             String result = (String)request.getAttribute(
                     RequestDispatcher.INCLUDE_PATH_INFO);
-            if (result == null)
+            if (result == null) {
                 result = (String)request.getAttribute(
                         RequestDispatcher.INCLUDE_SERVLET_PATH);
-            if ((result == null) || (result.equals(""))) result = "/";
+            }
+            if ((result == null) || (result.equals(""))) {
+                result = "/";
+            }
             return result;
         }
         // No, extract the desired path directly from the request

==================================================
ClassLoaderFactory.java
index 579dc00b2c..6a16c8b330 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -160,8 +160,9 @@ public final class Bootstrap {
         throws Exception {
 
         String value = CatalinaProperties.getProperty(name + ".loader");
-        if ((value == null) || (value.equals("")))
+        if ((value == null) || (value.equals(""))) {
             return parent;
+        }
 
         value = replace(value);
 
@@ -255,14 +256,16 @@ public final class Bootstrap {
         SecurityClassLoad.securityClassLoad(catalinaLoader);
 
         // Load our startup class and call its process() method
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("Loading startup class");
+        }
         Class<?> startupClass = catalinaLoader.loadClass("org.apache.catalina.startup.Catalina");
         Object startupInstance = startupClass.getConstructor().newInstance();
 
         // Set the shared extensions class loader
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("Setting startup class properties");
+        }
         String methodName = "setParentClassLoader";
         Class<?> paramTypes[] = new Class[1];
         paramTypes[0] = Class.forName("java.lang.ClassLoader");

==================================================
ContextConfig.java
index d81905d4c8..ac9c35338d 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -77,8 +77,9 @@ public final class ClassLoaderFactory {
                                                 final ClassLoader parent)
         throws Exception {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("Creating new class loader");
+        }
 
         // Construct the "class path" for this class loader
         Set<URL> set = new LinkedHashSet<>();
@@ -153,8 +154,9 @@ public final class ClassLoaderFactory {
                                                 final ClassLoader parent)
         throws Exception {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("Creating new class loader");
+        }
 
         // Construct the "class path" for this class loader
         Set<URL> set = new LinkedHashSet<>();
@@ -163,8 +165,9 @@ public final class ClassLoaderFactory {
             for (Repository repository : repositories)  {
                 if (repository.getType() == RepositoryType.URL) {
                     URL url = buildClassLoaderUrl(repository.getLocation());
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Including URL " + url);
+                    }
                     set.add(url);
                 } else if (repository.getType() == RepositoryType.DIR) {
                     File directory = new File(repository.getLocation());
@@ -173,8 +176,9 @@ public final class ClassLoaderFactory {
                         continue;
                     }
                     URL url = buildClassLoaderUrl(directory);
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Including directory " + url);
+                    }
                     set.add(url);
                 } else if (repository.getType() == RepositoryType.JAR) {
                     File file=new File(repository.getLocation());
@@ -183,8 +187,9 @@ public final class ClassLoaderFactory {
                         continue;
                     }
                     URL url = buildClassLoaderUrl(file);
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Including jar file " + url);
+                    }
                     set.add(url);
                 } else if (repository.getType() == RepositoryType.GLOB) {
                     File directory=new File(repository.getLocation());
@@ -192,25 +197,28 @@ public final class ClassLoaderFactory {
                     if (!validateFile(directory, RepositoryType.GLOB)) {
                         continue;
                     }
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("  Including directory glob "
                             + directory.getAbsolutePath());
+                    }
                     String filenames[] = directory.list();
                     if (filenames == null) {
                         continue;
                     }
                     for (String s : filenames) {
                         String filename = s.toLowerCase(Locale.ENGLISH);
-                        if (!filename.endsWith(".jar"))
+                        if (!filename.endsWith(".jar")) {
                             continue;
+                        }
                         File file = new File(directory, s);
                         file = file.getCanonicalFile();
                         if (!validateFile(file, RepositoryType.JAR)) {
                             continue;
                         }
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug("    Including glob jar file "
                                     + file.getAbsolutePath());
+                        }
                         URL url = buildClassLoaderUrl(file);
                         set.add(url);
                     }
@@ -220,17 +228,19 @@ public final class ClassLoaderFactory {
 
         // Construct the class loader itself
         final URL[] array = set.toArray(new URL[0]);
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             for (int i = 0; i < array.length; i++) {
                 log.debug("  location " + i + " is " + array[i]);
             }
+        }
 
         return AccessController.doPrivileged(
                 (PrivilegedAction<URLClassLoader>) () -> {
-                    if (parent == null)
+                    if (parent == null) {
                         return new URLClassLoader(array);
-                    else
+                    } else {
                         return new URLClassLoader(array, parent);
+                    }
                 });
     }
 

==================================================
CopyParentClassLoaderRule.java
index 058d412c87..508457ac80 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1964,8 +1964,9 @@ public class ContextConfig implements LifecycleListener {
      */
     protected InputSource getHostWebXmlSource() {
         File hostConfigBase = getHostConfigBase();
-        if (hostConfigBase == null)
+        if (hostConfigBase == null) {
             return null;
+        }
 
         return getWebXmlSource(hostConfigBase.getPath(), false);
     }

==================================================
EngineConfig.java
index 20a8c8a64b..3f541dde2a 100644
--- a/java/org/apache/catalina/startup/CopyParentClassLoaderRule.java
+++ b/java/org/apache/catalina/startup/CopyParentClassLoaderRule.java
@@ -61,8 +61,9 @@ public class CopyParentClassLoaderRule extends Rule {
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
 
-        if (digester.getLogger().isDebugEnabled())
+        if (digester.getLogger().isDebugEnabled()) {
             digester.getLogger().debug("Copying parent class loader");
+        }
         Container child = (Container) digester.peek(0);
         Object parent = digester.peek(1);
         Method method =

==================================================
ExpandWar.java
index 45e7457449..2bc5c6cdbc 100644
--- a/java/org/apache/catalina/startup/EngineConfig.java
+++ b/java/org/apache/catalina/startup/EngineConfig.java
@@ -76,10 +76,11 @@ public class EngineConfig
         }
 
         // Process the event that has occurred
-        if (event.getType().equals(Lifecycle.START_EVENT))
+        if (event.getType().equals(Lifecycle.START_EVENT)) {
             start();
-        else if (event.getType().equals(Lifecycle.STOP_EVENT))
+        } else if (event.getType().equals(Lifecycle.STOP_EVENT)) {
             stop();
+        }
 
     }
 
@@ -92,8 +93,9 @@ public class EngineConfig
      */
     protected void start() {
 
-        if (engine.getLogger().isDebugEnabled())
+        if (engine.getLogger().isDebugEnabled()) {
             engine.getLogger().debug(sm.getString("engineConfig.start"));
+        }
 
     }
 
@@ -103,8 +105,9 @@ public class EngineConfig
      */
     protected void stop() {
 
-        if (engine.getLogger().isDebugEnabled())
+        if (engine.getLogger().isDebugEnabled()) {
             engine.getLogger().debug(sm.getString("engineConfig.stop"));
+        }
 
     }
 

==================================================
HomesUserDatabase.java
index ebc3e46c6d..b2f6e58895 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -386,8 +386,9 @@ public class ExpandWar {
             byte buffer[] = new byte[2048];
             while (true) {
                 int n = input.read(buffer);
-                if (n <= 0)
+                if (n <= 0) {
                     break;
+                }
                 output.write(buffer, 0, n);
             }
         }

==================================================
HostConfig.java
index c1d15db0a9..085b470636 100644
--- a/java/org/apache/catalina/startup/HomesUserDatabase.java
+++ b/java/org/apache/catalina/startup/HomesUserDatabase.java
@@ -120,8 +120,9 @@ public final class HomesUserDatabase
 
         String homeBase = userConfig.getHomeBase();
         File homeBaseDir = new File(homeBase);
-        if (!homeBaseDir.exists() || !homeBaseDir.isDirectory())
+        if (!homeBaseDir.exists() || !homeBaseDir.isDirectory()) {
             return;
+        }
         String homeBaseFiles[] = homeBaseDir.list();
         if (homeBaseFiles == null) {
             return;
@@ -129,8 +130,9 @@ public final class HomesUserDatabase
 
         for (String homeBaseFile : homeBaseFiles) {
             File homeDir = new File(homeBaseDir, homeBaseFile);
-            if (!homeDir.isDirectory() || !homeDir.canRead())
+            if (!homeDir.isDirectory() || !homeDir.canRead()) {
                 continue;
+            }
             homes.put(homeBaseFile, homeDir.toString());
         }
     }

==================================================
LifecycleListenerRule.java
index b586b536c2..26735fbcbf 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -390,8 +390,9 @@ public class HostConfig implements LifecycleListener {
 
     protected File returnCanonicalPath(String path) {
         File file = new File(path);
-        if (!file.isAbsolute())
+        if (!file.isAbsolute()) {
             file = new File(host.getCatalinaBase(), path);
+        }
         try {
             return file.getCanonicalFile();
         } catch (IOException e) {
@@ -1298,15 +1299,17 @@ public class HostConfig implements LifecycleListener {
                 if (docBase != null) {
                     resource = new File(docBaseFile, watchedResource);
                 } else {
-                    if (log.isDebugEnabled())
+                    if (log.isDebugEnabled()) {
                         log.debug("Ignoring non-existent WatchedResource '" +
                                 resource.getAbsolutePath() + "'");
+                    }
                     continue;
                 }
             }
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Watching WatchedResource '" +
                         resource.getAbsolutePath() + "'");
+            }
             app.reloadResources.put(resource.getAbsolutePath(),
                     Long.valueOf(resource.lastModified()));
         }
@@ -1351,9 +1354,10 @@ public class HostConfig implements LifecycleListener {
                 System.currentTimeMillis() - FILE_MODIFICATION_RESOLUTION_MS;
         for (int i = 0; i < resources.length; i++) {
             File resource = new File(resources[i]);
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Checking context[" + app.name +
                         "] redeploy resource " + resource);
+            }
             long lastModified =
                     app.redeployResources.get(resources[i]).longValue();
             if (resource.exists() || lastModified == 0) {
@@ -1465,8 +1469,9 @@ public class HostConfig implements LifecycleListener {
      *       ignored.
      */
     private void reload(DeployedApplication app, File fileToRemove, String newDocBase) {
-        if(log.isInfoEnabled())
+        if(log.isInfoEnabled()) {
             log.info(sm.getString("hostConfig.reload", app.name));
+        }
         Context context = (Context) host.findChild(app.name);
         if (context.getState().isAvailable()) {
             if (fileToRemove != null && newDocBase != null) {
@@ -1492,8 +1497,9 @@ public class HostConfig implements LifecycleListener {
 
 
     private void undeploy(DeployedApplication app) {
-        if (log.isInfoEnabled())
+        if (log.isInfoEnabled()) {
             log.info(sm.getString("hostConfig.undeploy", app.name));
+        }
         Container context = host.findChild(app.name);
         try {
             host.removeChild(context);
@@ -1626,8 +1632,9 @@ public class HostConfig implements LifecycleListener {
      */
     public void start() {
 
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug(sm.getString("hostConfig.start"));
+        }
 
         try {
             ObjectName hostON = host.getObjectName();
@@ -1792,8 +1799,9 @@ public class HostConfig implements LifecycleListener {
 
         String contextName = context.getName();
 
-        if (deployed.containsKey(contextName))
+        if (deployed.containsKey(contextName)) {
             return;
+        }
 
         DeployedApplication deployedApp =
                 new DeployedApplication(contextName, false);

==================================================
Tool.java
index d65bf5944a..94ff027e07 100644
--- a/java/org/apache/catalina/startup/LifecycleListenerRule.java
+++ b/java/org/apache/catalina/startup/LifecycleListenerRule.java
@@ -104,8 +104,9 @@ public class LifecycleListenerRule extends Rule {
         // Check the container for the specified attribute
         if (attributeName != null) {
             String value = attributes.getValue(attributeName);
-            if (value != null)
+            if (value != null) {
                 className = value;
+            }
         }
 
         // Check the container's parent for the specified attribute

==================================================
UserConfig.java
index f39beacbf9..175895d94a 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -132,16 +132,17 @@ public final class Tool {
                 usage();
                 System.exit(1);
             }
-            if ("-ant".equals(args[index]))
+            if ("-ant".equals(args[index])) {
                 ant = true;
-            else if ("-common".equals(args[index]))
+            } else if ("-common".equals(args[index])) {
                 common = true;
-            else if ("-server".equals(args[index]))
+            } else if ("-server".equals(args[index])) {
                 server = true;
-            else if ("-shared".equals(args[index]))
+            } else if ("-shared".equals(args[index])) {
                 shared = true;
-            else
+            } else {
                 break;
+            }
             index++;
         }
         if (index > args.length) {
@@ -150,8 +151,9 @@ public final class Tool {
         }
 
         // Set "ant.home" if requested
-        if (ant)
+        if (ant) {
             System.setProperty("ant.home", catalinaHome);
+        }
 
         // Construct the class loader we will be using
         ClassLoader classLoader = null;
@@ -194,8 +196,9 @@ public final class Tool {
         Class<?> clazz = null;
         String className = args[index++];
         try {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Loading application class " + className);
+            }
             clazz = classLoader.loadClass(className);
         } catch (Throwable t) {
             Bootstrap.handleThrowable(t);
@@ -207,8 +210,9 @@ public final class Tool {
         String params[] = new String[args.length - index];
         System.arraycopy(args, index, params, 0, params.length);
         try {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Identifying main() method");
+            }
             String methodName = "main";
             Class<?> paramTypes[] = new Class[1];
             paramTypes[0] = params.getClass();
@@ -221,8 +225,9 @@ public final class Tool {
 
         // Invoke the main method of the application class
         try {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("Calling main() method");
+            }
             Object paramValues[] = new Object[1];
             paramValues[0] = params;
             method.invoke(null, paramValues);

==================================================
