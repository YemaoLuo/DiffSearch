8368ce9643a89aa4e0784b2356ccea7ff1e317e7
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48208
==================================================
Mark Emlyn
==================================================
Sun Mar 6 09:33:26 2011 +0000
==================================================
AbstractEndpoint.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48208
Add custom trust manager support

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1078436 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JSSESocketFactory.java
index b9d44a6f0b..c35798dea0 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -679,9 +679,13 @@ public abstract class AbstractEndpoint {
     private String truststoreFile = System.getProperty("javax.net.ssl.trustStore");
     public String getTruststoreFile() {return truststoreFile;}
     public void setTruststoreFile(String s) {
-        String file = adjustRelativePath(s,
-                System.getProperty(Constants.CATALINA_BASE_PROP));
-        this.truststoreFile = file;
+        if (s == null) {
+            this.truststoreFile = null;
+        } else {
+            String file = adjustRelativePath(s,
+                    System.getProperty(Constants.CATALINA_BASE_PROP));
+            this.truststoreFile = file;
+        }
     }
 
     private String truststorePass =
@@ -710,6 +714,12 @@ public abstract class AbstractEndpoint {
         this.truststoreAlgorithm = truststoreAlgorithm;
     }
 
+    private String trustManagerClassName = null;
+    public String getTrustManagerClassName() {return trustManagerClassName;}
+    public void setTrustManagerClassName(String trustManagerClassName) {
+        this.trustManagerClassName = trustManagerClassName;
+    }
+
     private String crlFile = null;
     public String getCrlFile() {return crlFile;}
     public void setCrlFile(String crlFile) {

==================================================
TestCustomSsl.java
index 69302278ba..5e8ce34f2c 100644
--- a/java/org/apache/tomcat/util/net/jsse/res/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/jsse/res/LocalStrings.properties
@@ -16,4 +16,5 @@
 jsse.alias_no_key_entry=Alias name {0} does not identify a key entry
 jsse.keystore_load_failed=Failed to load keystore type {0} with path {1} due to {2}
 jsse.invalid_ssl_conf=SSL configuration is invalid due to {0}
-jsse.invalid_truststore_password=The provided trust store password could not be used to unlock and/or validate the trust store. Retrying to access the trust store with a null password which will skip validation.
\ No newline at end of file
+jsse.invalid_truststore_password=The provided trust store password could not be used to unlock and/or validate the trust store. Retrying to access the trust store with a null password which will skip validation.
+jsse.invalidTrustManagerClassName=The trustManagerClassName provided [{0}] does not implement javax.net.ssl.TrustManager 
\ No newline at end of file

==================================================
TesterSupport.java
index d9c383b552..d532bbfdb2 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -17,12 +17,15 @@
 package org.apache.tomcat.util.net;
 
 import java.io.File;
+import java.net.SocketException;
 
-import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLHandshakeException;
 
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.coyote.ProtocolHandler;
+import org.apache.coyote.http11.AbstractHttp11JsseProtocol;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl;
 
@@ -35,16 +38,8 @@ public class TestCustomSsl extends TomcatBaseTest {
 
     public void testCustomSslImplementation() throws Exception {
 
-        try {
-            SSLContext sc = SSLContext.getInstance("SSL");
-            sc.init(null, TesterSupport.getTrustManagers(),
-                    new java.security.SecureRandom());
-            javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(
-                    sc.getSocketFactory());
-        } catch (Exception e) {
-            e.printStackTrace();
-        } 
-        
+        TesterSupport.configureClientSsl();
+
         Tomcat tomcat = getTomcatInstance();
         Connector connector = tomcat.getConnector();
         if (connector.getProtocolHandlerClassName().contains("Apr")) {
@@ -76,4 +71,70 @@ public class TestCustomSsl extends TomcatBaseTest {
         assertTrue(res.toString().indexOf("<h1>Hello World!</h1>") > 0);
     }
 
+    public void testCustomTrustManager1() throws Exception {
+        doTestCustomTrustManager(false);
+    }
+    
+    public void testCustomTrustManager2() throws Exception {
+        doTestCustomTrustManager(true);
+    }
+    
+    private void doTestCustomTrustManager(boolean serverTrustAll)
+            throws Exception {
+        
+        if (!TesterSupport.RFC_5746_SUPPORTED) {
+            // Make sure SSL renegotiation is not disabled in the JVM
+            System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
+        }
+
+        Tomcat tomcat = getTomcatInstance();
+
+        if (!TesterSupport.isRenegotiationSupported(getTomcatInstance())) {
+            return;
+        }
+
+        TesterSupport.configureClientCertContext(tomcat);
+        
+        // Override the defaults
+        ProtocolHandler handler = tomcat.getConnector().getProtocolHandler();
+        if (handler instanceof AbstractHttp11JsseProtocol) {
+            ((AbstractHttp11JsseProtocol) handler).setTruststoreFile(null);
+        } else {
+            // Unexpected
+            fail("Unexpected handler type");
+        }
+        if (serverTrustAll) {
+            tomcat.getConnector().setAttribute("trustManagerClassName",
+                    "org.apache.tomcat.util.net.TesterSupport$TrustAllCerts");
+        }
+        
+        // Start Tomcat
+        tomcat.start();
+        
+        TesterSupport.configureClientSsl();
+
+        // Unprotected resource
+        ByteChunk res =
+                getUrl("https://localhost:" + getPort() + "/unprotected");
+        assertEquals("OK", res.toString());
+        
+        // Protected resource
+        res.recycle();
+        int rc = -1;
+        try {
+            rc = getUrl("https://localhost:" + getPort() + "/protected", res,
+                null, null);
+        } catch (SocketException expected1) {
+            // Ignore
+        } catch (SSLHandshakeException expected2) {
+            // Ignore
+        }
+        if (serverTrustAll) {
+            assertEquals(200, rc);
+            assertEquals("OK", res.toString());
+        } else {
+            assertTrue(rc != 200);
+            assertEquals("", res.toString());
+        }
+    }
 }

==================================================
