997da5fa6d871b1b94efa77652a6c748e12a23fa
==================================================
Refactor to reduce code duplication (the default host verification behavior should be better to use).
==================================================
Remy Maucherat
==================================================
Tue Oct 30 15:36:22 2018 +0000
==================================================
AbstractStreamProvider.java
Refactor to reduce code duplication (the default host verification behavior should be better to use).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1845245 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CertificateStreamProvider.java
index bb4097cbce..440b983a5d 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
@@ -18,12 +18,15 @@
 package org.apache.catalina.tribes.membership.cloud;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.net.URLConnection;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 import java.util.Map;
 
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLSocketFactory;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
 
@@ -49,6 +52,11 @@ public abstract class AbstractStreamProvider implements StreamProvider {
             }
         };
 
+    /**
+     * @return the socket factory, or null if not needed
+     */
+    protected abstract SSLSocketFactory getSocketFactory();
+
     /**
      * Open URL connection to the specified URL.
      * @param url the url
@@ -79,4 +87,21 @@ public abstract class AbstractStreamProvider implements StreamProvider {
         return connection;
     }
 
+    @Override
+    public InputStream openStream(String url, Map<String, String> headers,
+            int connectTimeout, int readTimeout) throws IOException {
+        URLConnection connection = openConnection(url, headers, connectTimeout, readTimeout);
+        if (connection instanceof HttpsURLConnection) {
+            ((HttpsURLConnection) connection).setSSLSocketFactory(getSocketFactory());
+            if (log.isDebugEnabled()) {
+                log.debug(String.format("Using HttpsURLConnection with SSLSocketFactory [%s] for url [%s].", getSocketFactory(), url));
+            }
+        } else {
+            if (log.isDebugEnabled()) {
+                log.debug(String.format("Using URLConnection for url [%s].", url));
+            }
+        }
+        return connection.getInputStream();
+    }
+
 }

==================================================
InsecureStreamProvider.java
index 2d515f2781..b30fdf6b54 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CertificateStreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CertificateStreamProvider.java
@@ -20,15 +20,12 @@ package org.apache.catalina.tribes.membership.cloud;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URLConnection;
 import java.security.KeyStore;
 import java.security.PrivateKey;
 import java.security.cert.Certificate;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
-import java.util.Map;
 
-import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.SSLContext;
@@ -56,21 +53,8 @@ public class CertificateStreamProvider extends AbstractStreamProvider {
     }
 
     @Override
-    public InputStream openStream(String url, Map<String, String> headers, int connectTimeout, int readTimeout) throws IOException {
-        URLConnection connection = openConnection(url, headers, connectTimeout, readTimeout);
-        if (connection instanceof HttpsURLConnection) {
-            HttpsURLConnection httpsConnection = HttpsURLConnection.class.cast(connection);
-            //httpsConnection.setHostnameVerifier(InsecureStreamProvider.INSECURE_HOSTNAME_VERIFIER);
-            httpsConnection.setSSLSocketFactory(factory);
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Using HttpsURLConnection with SSLSocketFactory [%s] for url [%s].", factory, url));
-            }
-        } else {
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Using URLConnection for url [%s].", url));
-            }
-        }
-        return connection.getInputStream();
+    protected SSLSocketFactory getSocketFactory() {
+        return factory;
     }
 
     private static KeyManager[] configureClientCert(String clientCertFile, String clientKeyFile, char[] clientKeyPassword, String clientKeyAlgo) throws Exception {

==================================================
TokenStreamProvider.java
index e17917177b..d2a2c97fb6 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/InsecureStreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/InsecureStreamProvider.java
@@ -17,54 +17,20 @@
 
 package org.apache.catalina.tribes.membership.cloud;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URLConnection;
-import java.util.Map;
-
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocketFactory;
 
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-
 public class InsecureStreamProvider extends AbstractStreamProvider {
-    private static final Log log = LogFactory.getLog(InsecureStreamProvider.class);
-
-    private static final HostnameVerifier INSECURE_HOSTNAME_VERIFIER = new HostnameVerifier() {
-        @Override
-        public boolean verify(String arg0, SSLSession arg1) {
-            return true;
-        }
-    };
-
     private final SSLSocketFactory factory;
 
     InsecureStreamProvider() throws Exception {
         SSLContext context = SSLContext.getInstance("TLS");
-        context.init(null,  INSECURE_TRUST_MANAGERS, null);
+        context.init(null, INSECURE_TRUST_MANAGERS, null);
         factory = context.getSocketFactory();
     }
 
     @Override
-    public InputStream openStream(String url, Map<String, String> headers, int connectTimeout, int readTimeout) throws IOException {
-        URLConnection connection = openConnection(url, headers, connectTimeout, readTimeout);
-        if (connection instanceof HttpsURLConnection) {
-            HttpsURLConnection httpsConnection = HttpsURLConnection.class.cast(connection);
-            httpsConnection.setHostnameVerifier(INSECURE_HOSTNAME_VERIFIER);
-            httpsConnection.setSSLSocketFactory(factory);
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Using HttpsURLConnection with SSLSocketFactory [%s] for url [%s].", factory, url));
-            }
-        } else {
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Using URLConnection for url [%s].", url));
-            }
-        }
-        return connection.getInputStream();
+    protected SSLSocketFactory getSocketFactory() {
+        return factory;
     }
-
 }
\ No newline at end of file

==================================================
