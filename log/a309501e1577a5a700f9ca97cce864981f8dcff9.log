a309501e1577a5a700f9ca97cce864981f8dcff9
==================================================
Improve processing of errors that are wrapped into InvocationTargetException.
==================================================
Konstantin Kolinko
==================================================
Mon Nov 14 01:10:51 2011 +0000
==================================================
ApplicationContextFacade.java
Improve processing of errors that are wrapped into InvocationTargetException.
Rethrow errors that must be rethrown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201568 13f79535-47bb-0310-9956-ffa450edef68



==================================================
IntrospectionUtils.java
index 4cae3954a9..38ca30c0fe 100644
--- a/java/org/apache/catalina/core/ApplicationContextFacade.java
+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java
@@ -191,6 +191,7 @@ public class ApplicationContextFacade implements ServletContext {
                 return (URL) invokeMethod(context, "getResource",
                                           new Object[]{path});
             } catch(Throwable t) {
+                ExceptionUtils.handleThrowable(t);
                 if (t instanceof MalformedURLException){
                     throw (MalformedURLException)t;
                 }
@@ -765,6 +766,7 @@ public class ApplicationContextFacade implements ServletContext {
         try{
             return invokeMethod(context, methodName, params);
         }catch(Throwable t){
+            ExceptionUtils.handleThrowable(t);
             throw new RuntimeException(t.getMessage(), t);
         }
     }
@@ -870,8 +872,10 @@ public class ApplicationContextFacade implements ServletContext {
         }
 
         if (ex instanceof InvocationTargetException) {
-            realException =
-                ((InvocationTargetException) ex).getTargetException();
+            realException = ex.getCause();
+            if (realException == null) {
+                realException = ex;
+            }
         } else {
             realException = ex;
         }

==================================================
Digester.java
index 28dc7b9fc1..c35dee775f 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -264,6 +264,7 @@ public final class IntrospectionUtils {
                 log.debug("IntrospectionUtils: IllegalAccessException for " +
                         o.getClass() + " " + name + "=" + value + ")", iae);
         } catch (InvocationTargetException ie) {
+            ExceptionUtils.handleThrowable(ie.getCause());
             if (log.isDebugEnabled())
                 log.debug("IntrospectionUtils: InvocationTargetException for " +
                         o.getClass() + " " + name + "=" + value + ")", ie);
@@ -312,6 +313,7 @@ public final class IntrospectionUtils {
                 log.debug("IntrospectionUtils: IllegalAccessException for " +
                         o.getClass() + " " + name + ")", iae);
         } catch (InvocationTargetException ie) {
+            ExceptionUtils.handleThrowable(ie.getCause());
             if (log.isDebugEnabled())
                 log.debug("IntrospectionUtils: InvocationTargetException for " +
                         o.getClass() + " " + name + ")");
@@ -454,7 +456,12 @@ public final class IntrospectionUtils {
         if (m == null)
             throw new NoSuchMethodException(target.getClass().getName() + " "
                     + methodN);
-        return m.invoke(target, new Object[] { param1 });
+        try {
+            return m.invoke(target, new Object[] { param1 });
+        } catch (InvocationTargetException ie) {
+            ExceptionUtils.handleThrowable(ie.getCause());
+            throw ie;
+        }
     }
 
     /**
@@ -478,7 +485,12 @@ public final class IntrospectionUtils {
         if (m == null)
             throw new NoSuchMethodException(target.getClass().getName() + " "
                     + methodN);
-        return m.invoke(target, emptyArray);
+        try {
+            return m.invoke(target, emptyArray);
+        } catch (InvocationTargetException ie) {
+            ExceptionUtils.handleThrowable(ie.getCause());
+            throw ie;
+        }
     }
 
     /**
@@ -497,21 +509,27 @@ public final class IntrospectionUtils {
                         " in " + target + " CLASS " + target.getClass());
             return null;
         }
-        Object o = m.invoke(target, params);
-
-        if (log.isDebugEnabled()) {
-            // debug
-            StringBuilder sb = new StringBuilder();
-            sb.append("" + target.getClass().getName() + "." + methodN + "( ");
-            for (int i = 0; i < params.length; i++) {
-                if (i > 0)
-                    sb.append(", ");
-                sb.append(params[i]);
+        try {
+            Object o = m.invoke(target, params);
+
+            if (log.isDebugEnabled()) {
+                // debug
+                StringBuilder sb = new StringBuilder();
+                sb.append(target.getClass().getName()).append('.')
+                        .append(methodN).append("( ");
+                for (int i = 0; i < params.length; i++) {
+                    if (i > 0)
+                        sb.append(", ");
+                    sb.append(params[i]);
+                }
+                sb.append(")");
+                log.debug("IntrospectionUtils:" + sb.toString());
             }
-            sb.append(")");
-            log.debug("IntrospectionUtils:" + sb.toString());
+            return o;
+        } catch (InvocationTargetException ie) {
+            ExceptionUtils.handleThrowable(ie.getCause());
+            throw ie;
         }
-        return o;
     }
 
     public static Object convert(String object, Class<?> paramType) {

==================================================
IntrospectionUtils.java
index 66d6b0bd71..d2e2f050af 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -2669,8 +2669,14 @@ public class Digester extends DefaultHandler {
     public SAXException createSAXException(String message, Exception e) {
         if ((e != null) &&
             (e instanceof InvocationTargetException)) {
-            Throwable t = ((InvocationTargetException) e).getTargetException();
-            if ((t != null) && (t instanceof Exception)) {
+            Throwable t = e.getCause();
+            if (t instanceof ThreadDeath) {
+                throw (ThreadDeath) t;
+            }
+            if (t instanceof VirtualMachineError) {
+                throw (VirtualMachineError) t;
+            }
+            if (t instanceof Exception) {
                 e = (Exception) t;
             }
         }
@@ -2699,8 +2705,14 @@ public class Digester extends DefaultHandler {
      */
     public SAXException createSAXException(Exception e) {
         if (e instanceof InvocationTargetException) {
-            Throwable t = ((InvocationTargetException) e).getTargetException();
-            if ((t != null) && (t instanceof Exception)) {
+            Throwable t = e.getCause();
+            if (t instanceof ThreadDeath) {
+                throw (ThreadDeath) t;
+            }
+            if (t instanceof VirtualMachineError) {
+                throw (VirtualMachineError) t;
+            }
+            if (t instanceof Exception) {
                 e = (Exception) t;
             }
         }

==================================================
