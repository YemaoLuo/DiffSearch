0be3cc219f024a2b6aed3e9e0ab4b841e08d3aae
==================================================
Implement EL listener notifications for expression evaluations.
==================================================
Mark Emlyn
==================================================
Wed Jul 10 21:30:08 2013 +0000
==================================================
ValueExpression.java
Implement EL listener notifications for expression evaluations.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502011 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MethodExpressionImpl.java
index 9ceede4731..f623f17534 100644
--- a/java/javax/el/ValueExpression.java
+++ b/java/javax/el/ValueExpression.java
@@ -76,8 +76,10 @@ public abstract class ValueExpression extends Expression {
     /**
      * @since EL 2.2
      */
-    public ValueReference getValueReference(@SuppressWarnings("unused") ELContext context) {
-     // Expected to be over-ridden by implementation
+    public ValueReference getValueReference(ELContext context) {
+        // Expected to be over-ridden by implementation
+        context.notifyBeforeEvaluation(getExpressionString());
+        context.notifyAfterEvaluation(getExpressionString());
         return null;
     }
 }

==================================================
MethodExpressionLiteral.java
index ddcb63f502..7707d5ebf2 100644
--- a/java/org/apache/el/MethodExpressionImpl.java
+++ b/java/org/apache/el/MethodExpressionImpl.java
@@ -203,7 +203,10 @@ public final class MethodExpressionImpl extends MethodExpression implements
         Node n = this.getNode();
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
-        return n.getMethodInfo(ctx, this.paramTypes);
+        ctx.notifyBeforeEvaluation(getExpressionString());
+        MethodInfo result = n.getMethodInfo(ctx, this.paramTypes);
+        ctx.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     private Node getNode() throws ELException {
@@ -271,7 +274,10 @@ public final class MethodExpressionImpl extends MethodExpression implements
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
-        return this.getNode().invoke(ctx, this.paramTypes, params);
+        ctx.notifyBeforeEvaluation(getExpressionString());
+        Object result = this.getNode().invoke(ctx, this.paramTypes, params);
+        ctx.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     /*

==================================================
ValueExpressionImpl.java
index 765916c0d3..abdbfe7ba8 100644
--- a/java/org/apache/el/MethodExpressionLiteral.java
+++ b/java/org/apache/el/MethodExpressionLiteral.java
@@ -51,16 +51,24 @@ public class MethodExpressionLiteral extends MethodExpression implements Externa
 
     @Override
     public MethodInfo getMethodInfo(ELContext context) throws ELException {
-        return new MethodInfo(this.expr, this.expectedType, this.paramTypes);
+        context.notifyBeforeEvaluation(getExpressionString());
+        MethodInfo result =
+                new MethodInfo(this.expr, this.expectedType, this.paramTypes);
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     @Override
     public Object invoke(ELContext context, Object[] params) throws ELException {
+        context.notifyBeforeEvaluation(getExpressionString());
+        Object result;
         if (this.expectedType != null) {
-            return context.convertToType(this.expr, this.expectedType);
+            result = context.convertToType(this.expr, this.expectedType);
         } else {
-            return this.expr;
+            result = this.expr;
         }
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     @Override

==================================================
ValueExpressionLiteral.java
index 197dfd90bb..b88880483a 100644
--- a/java/org/apache/el/ValueExpressionImpl.java
+++ b/java/org/apache/el/ValueExpressionImpl.java
@@ -168,7 +168,10 @@ public final class ValueExpressionImpl extends ValueExpression implements
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
-        return this.getNode().getType(ctx);
+        context.notifyBeforeEvaluation(getExpressionString());
+        Class<?> result = this.getNode().getType(ctx);
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     /*
@@ -181,10 +184,12 @@ public final class ValueExpressionImpl extends ValueExpression implements
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
+        context.notifyBeforeEvaluation(getExpressionString());
         Object value = this.getNode().getValue(ctx);
         if (this.expectedType != null) {
-            return context.convertToType(value, this.expectedType);
+            value = context.convertToType(value, this.expectedType);
         }
+        context.notifyAfterEvaluation(getExpressionString());
         return value;
     }
 
@@ -222,7 +227,10 @@ public final class ValueExpressionImpl extends ValueExpression implements
             throws PropertyNotFoundException, ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
-        return this.getNode().isReadOnly(ctx);
+        context.notifyBeforeEvaluation(getExpressionString());
+        boolean result = this.getNode().isReadOnly(ctx);
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     @Override
@@ -249,7 +257,9 @@ public final class ValueExpressionImpl extends ValueExpression implements
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
+        context.notifyBeforeEvaluation(getExpressionString());
         this.getNode().setValue(ctx, value);
+        context.notifyAfterEvaluation(getExpressionString());
     }
 
     @Override
@@ -273,7 +283,9 @@ public final class ValueExpressionImpl extends ValueExpression implements
     public ValueReference getValueReference(ELContext context) {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
                 this.varMapper);
-        return this.getNode().getValueReference(ctx);
+        context.notifyBeforeEvaluation(getExpressionString());
+        ValueReference result = this.getNode().getValueReference(ctx);
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
-
 }

==================================================
JspMethodExpression.java
index b0b47be1f3..5154c138b0 100644
--- a/java/org/apache/el/ValueExpressionLiteral.java
+++ b/java/org/apache/el/ValueExpressionLiteral.java
@@ -49,26 +49,37 @@ public final class ValueExpressionLiteral extends ValueExpression implements
 
     @Override
     public Object getValue(ELContext context) {
+        context.notifyBeforeEvaluation(getExpressionString());
+        Object result;
         if (this.expectedType != null) {
-            return context.convertToType(this.value, this.expectedType);
+            result = context.convertToType(this.value, this.expectedType);
+        } else {
+            result = this.value;
         }
-        return this.value;
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     @Override
     public void setValue(ELContext context, Object value) {
+        context.notifyBeforeEvaluation(getExpressionString());
         throw new PropertyNotWritableException(MessageFactory.get(
                 "error.value.literal.write", this.value));
     }
 
     @Override
     public boolean isReadOnly(ELContext context) {
+        context.notifyBeforeEvaluation(getExpressionString());
+        context.notifyAfterEvaluation(getExpressionString());
         return true;
     }
 
     @Override
     public Class<?> getType(ELContext context) {
-        return (this.value != null) ? this.value.getClass() : null;
+        context.notifyBeforeEvaluation(getExpressionString());
+        Class<?> result = (this.value != null) ? this.value.getClass() : null;
+        context.notifyAfterEvaluation(getExpressionString());
+        return result;
     }
 
     @Override

==================================================
JspValueExpression.java
index 4a7a414ef1..ca6a3847ad 100644
--- a/java/org/apache/jasper/el/JspMethodExpression.java
+++ b/java/org/apache/jasper/el/JspMethodExpression.java
@@ -48,8 +48,11 @@ public final class JspMethodExpression extends MethodExpression implements
     public MethodInfo getMethodInfo(ELContext context)
             throws NullPointerException, PropertyNotFoundException,
             MethodNotFoundException, ELException {
+        context.notifyBeforeEvaluation(getExpressionString());
         try {
-            return this.target.getMethodInfo(context);
+            MethodInfo result = this.target.getMethodInfo(context);
+            context.notifyAfterEvaluation(getExpressionString());
+            return result;
         } catch (MethodNotFoundException e) {
             if (e instanceof JspMethodNotFoundException) throw e;
             throw new JspMethodNotFoundException(this.mark, e);
@@ -66,8 +69,11 @@ public final class JspMethodExpression extends MethodExpression implements
     public Object invoke(ELContext context, Object[] params)
             throws NullPointerException, PropertyNotFoundException,
             MethodNotFoundException, ELException {
+        context.notifyBeforeEvaluation(getExpressionString());
         try {
-            return this.target.invoke(context, params);
+            Object result = this.target.invoke(context, params);
+            context.notifyAfterEvaluation(getExpressionString());
+            return result;
         } catch (MethodNotFoundException e) {
             if (e instanceof JspMethodNotFoundException) throw e;
             throw new JspMethodNotFoundException(this.mark, e);

==================================================
