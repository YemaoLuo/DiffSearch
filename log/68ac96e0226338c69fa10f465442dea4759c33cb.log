68ac96e0226338c69fa10f465442dea4759c33cb
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48233
==================================================
Mark Emlyn
==================================================
Thu Nov 19 00:46:52 2009 +0000
==================================================
StandardWrapper.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48233
More loggers to private static final

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@882017 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ReplicatedContext.java
index 5a2f8142ef..818de2d7cd 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -60,6 +60,9 @@ import org.apache.tomcat.PeriodicEventListener;
 import org.apache.tomcat.util.log.SystemLogHandler;
 import org.apache.tomcat.util.modeler.Registry;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * Standard implementation of the <b>Wrapper</b> interface that represents
  * an individual servlet definition.  No child Containers are allowed, and
@@ -73,8 +76,7 @@ public class StandardWrapper
     extends ContainerBase
     implements ServletConfig, Wrapper, NotificationEmitter {
 
-    protected static final org.apache.juli.logging.Log log=
-        org.apache.juli.logging.LogFactory.getLog( StandardWrapper.class );
+    private static final Log log = LogFactory.getLog( StandardWrapper.class );
 
     protected static final String[] DEFAULT_SERVLET_METHODS = new String[] {
                                                     "GET", "HEAD", "POST" };

==================================================
FarmWarDeployer.java
index 6ffa506400..a8f009c44d 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -33,13 +33,16 @@ import java.util.concurrent.ConcurrentHashMap;
 import org.apache.catalina.util.Enumerator;
 import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * @author Filip Hanik
  * @version 1.0
  */
 public class ReplicatedContext extends StandardContext implements LifecycleListener,MapOwner {
     private int mapSendOptions = Channel.SEND_OPTIONS_DEFAULT;
-    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( ReplicatedContext.class );
+    private static final Log log = LogFactory.getLog( ReplicatedContext.class );
     protected boolean startComplete = false;
     protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
     

==================================================
FileMessageFactory.java
index e1ae79e4fa..fbf22e32c8 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -37,6 +37,9 @@ import org.apache.catalina.ha.ClusterMessage;
 import org.apache.catalina.tribes.Member;
 import org.apache.tomcat.util.modeler.Registry;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 
 /**
  * <p>
@@ -59,8 +62,7 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class FarmWarDeployer extends ClusterListener implements ClusterDeployer, FileChangeListener {
     /*--Static Variables----------------------------------------*/
-    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
-            .getLog(FarmWarDeployer.class);
+    private static final Log log = LogFactory.getLog(FarmWarDeployer.class);
     /**
      * The descriptive information about this implementation.
      */

==================================================
WarWatcher.java
index 3ae86756c7..11c73e147d 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -26,6 +26,9 @@ import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * This factory is used to read files and write files by splitting them up into
  * smaller messages. So that entire files don't have to be read into memory.
@@ -42,8 +45,7 @@ import java.util.concurrent.atomic.AtomicLong;
  */
 public class FileMessageFactory {
     /*--Static Variables----------------------------------------*/
-    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
-            .getLog(FileMessageFactory.class);
+    private static final Log log = LogFactory.getLog(FileMessageFactory.class);
 
     /**
      * The number of bytes that we read from file

==================================================
BackupManager.java
index 859467bc0f..51e12bb410 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -22,6 +22,9 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Iterator;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * <p>
  * The <b>WarWatcher </b> watches the deployDir for changes made to the
@@ -37,8 +40,7 @@ import java.util.Iterator;
 public class WarWatcher {
 
     /*--Static Variables----------------------------------------*/
-    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
-            .getLog(WarWatcher.class);
+    private static final Log log = LogFactory.getLog(WarWatcher.class);
 
     /*--Instance Variables--------------------------------------*/
     /**

==================================================
AbstractReplicatedMap.java
index 42ff18d19f..29b61081ac 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -31,13 +31,16 @@ import org.apache.catalina.tribes.io.ReplicationStream;
 import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
 import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  *@author Filip Hanik
  *@version 1.0
  */
 public class BackupManager extends StandardManager implements ClusterManager, MapOwner
 {
-    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BackupManager.class );
+    private static final Log log = LogFactory.getLog( BackupManager.class );
 
     protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
 

==================================================
LazyReplicatedMap.java
index 644a61d0b3..8c8500b1fa 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -53,7 +53,7 @@ import java.util.concurrent.ConcurrentHashMap;
  * @version 1.0
  */
 public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements RpcCallback, ChannelListener, MembershipListener, Heartbeat {
-    protected static final Log log = LogFactory.getLog(AbstractReplicatedMap.class);
+    private static final Log log = LogFactory.getLog(AbstractReplicatedMap.class);
 
     /**
      * The default initial capacity - MUST be a power of two.

==================================================
ReceiverBase.java
index fd713c5916..19e6f2a871 100644
--- a/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
@@ -27,6 +27,9 @@ import org.apache.catalina.tribes.group.RpcCallback;
 import org.apache.catalina.tribes.util.Arrays;
 import org.apache.catalina.tribes.UniqueId;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * A smart implementation of a stateful replicated map. uses primary/secondary backup strategy. 
  * One node is always the primary and one node is always the backup.
@@ -66,7 +69,7 @@ import org.apache.catalina.tribes.UniqueId;
  */
 public class LazyReplicatedMap extends AbstractReplicatedMap 
     implements RpcCallback, ChannelListener, MembershipListener {
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(LazyReplicatedMap.class);
+    private static final Log log = LogFactory.getLog(LazyReplicatedMap.class);
     
 
     

==================================================
BioReceiver.java
index 5e2c65397e..1dd8c8fb64 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -32,6 +32,7 @@ import org.apache.catalina.tribes.MessageListener;
 import org.apache.catalina.tribes.io.ListenCallback;
 import org.apache.catalina.tribes.util.ExecutorFactory;
 import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * <p>Title: </p>
@@ -47,7 +48,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
 
     public static final int OPTION_DIRECT_BUFFER = 0x0004;
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReceiverBase.class);
+    private static final Log log = LogFactory.getLog(ReceiverBase.class);
 
     private MessageListener listener;
     private String host = "auto";
@@ -446,10 +447,6 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
         this.listener = listener;
     }
 
-    public void setLog(Log log) {
-        ReceiverBase.log = log;
-    }
-
     public void setPool(RxTaskPool pool) {
         this.pool = pool;
     }

==================================================
AbstractEndpoint.java
index 6790fa813b..daae2fd8f2 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -27,6 +27,9 @@ import org.apache.catalina.tribes.transport.ReceiverBase;
 import org.apache.catalina.tribes.transport.RxTaskPool;
 import org.apache.catalina.tribes.transport.AbstractRxTask;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  *
  * @author Filip Hanik
@@ -34,7 +37,7 @@ import org.apache.catalina.tribes.transport.AbstractRxTask;
  */
 public class BioReceiver extends ReceiverBase implements Runnable, ChannelReceiver, ListenCallback {
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioReceiver.class);
+    private static final Log log = LogFactory.getLog(BioReceiver.class);
 
     protected ServerSocket serverSocket;
 

==================================================
NioEndpoint.java
index 2e3b3aeecc..6b3ddf7975 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -38,7 +38,7 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
  * @author Remy Maucherat
  */
 public abstract class AbstractEndpoint {
-    protected static final Log log = LogFactory.getLog(AbstractEndpoint.class);
+    private static final Log log = LogFactory.getLog(AbstractEndpoint.class);
     
     // -------------------------------------------------------------- Constants
     protected static final StringManager sm = StringManager.getManager("org.apache.tomcat.util.net.res");

==================================================
AbstractQueryReport.java
index 6b1858e1dd..77a0e9713b 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -76,7 +76,7 @@ public class NioEndpoint extends AbstractEndpoint {
     // -------------------------------------------------------------- Constants
 
 
-    protected static final Log log = LogFactory.getLog(NioEndpoint.class);
+    private static final Log log = LogFactory.getLog(NioEndpoint.class);
 
 
     public static final int OP_REGISTER = 0x100; //register interest op

==================================================
SlowQueryReport.java
index 31b7ed2d34..8e6279f6d1 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
@@ -37,7 +37,7 @@ import org.apache.tomcat.jdbc.pool.JdbcInterceptor;
  */
 public abstract class AbstractQueryReport extends AbstractCreateStatementInterceptor {
     //logger
-    protected static final Log log = LogFactory.getLog(AbstractQueryReport.class);
+    private static final Log log = LogFactory.getLog(AbstractQueryReport.class);
 
     /**
      * The threshold in milliseconds. If the query is faster than this, we don't measure it

==================================================
SlowQueryReportJmx.java
index a1b73617e6..488c6a9a3d 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -39,7 +39,7 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
  */
 public class SlowQueryReport extends AbstractQueryReport  {
     //logger
-    protected static final Log log = LogFactory.getLog(SlowQueryReport.class);
+    private static final Log log = LogFactory.getLog(SlowQueryReport.class);
 
     /**
      * we will be keeping track of query stats on a per pool basis

==================================================
