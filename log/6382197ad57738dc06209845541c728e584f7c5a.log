6382197ad57738dc06209845541c728e584f7c5a
==================================================
Add lock use similar to the memory user database
==================================================
remm remm@apache.org
==================================================
Thu Aug 26 16:40:44 2021 +0200
==================================================
MemoryUserDatabaseMBean.java
Add lock use similar to the memory user database

Remove duplicated code, I verified the memory MBean works fine.


==================================================
SparseUserDatabaseMBean.java
index b8fc248288..7105cf84df 100644
--- a/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
+++ b/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
@@ -16,21 +16,7 @@
  */
 package org.apache.catalina.mbeans;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-
-import org.apache.catalina.Group;
-import org.apache.catalina.Role;
-import org.apache.catalina.User;
-import org.apache.catalina.UserDatabase;
-import org.apache.tomcat.util.modeler.BaseModelMBean;
 import org.apache.tomcat.util.modeler.ManagedBean;
-import org.apache.tomcat.util.modeler.Registry;
-import org.apache.tomcat.util.res.StringManager;
 
 /**
  * <p>A <strong>ModelMBean</strong> implementation for the
@@ -38,272 +24,11 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @author Craig R. McClanahan
  */
-public class MemoryUserDatabaseMBean extends BaseModelMBean {
-
-    private static final StringManager sm = StringManager.getManager(MemoryUserDatabaseMBean.class);
-
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * The configuration information registry for our managed beans.
-     */
-    protected final Registry registry = MBeanUtils.createRegistry();
-
+public class MemoryUserDatabaseMBean extends SparseUserDatabaseMBean {
 
     /**
      * The <code>ManagedBean</code> information describing this MBean.
      */
     protected final ManagedBean managed = registry.findManagedBean("MemoryUserDatabase");
 
-
-    /**
-     * The <code>ManagedBean</code> information describing Group MBeans.
-     */
-    protected final ManagedBean managedGroup = registry.findManagedBean("Group");
-
-
-    /**
-     * The <code>ManagedBean</code> information describing Group MBeans.
-     */
-    protected final ManagedBean managedRole = registry.findManagedBean("Role");
-
-
-    /**
-     * The <code>ManagedBean</code> information describing User MBeans.
-     */
-    protected final ManagedBean managedUser = registry.findManagedBean("User");
-
-
-    // ------------------------------------------------------------- Attributes
-
-    /**
-     * @return the MBean Names of all groups defined in this database.
-     */
-    public String[] getGroups() {
-        UserDatabase database = (UserDatabase) this.resource;
-        List<String> results = new ArrayList<>();
-        Iterator<Group> groups = database.getGroups();
-        while (groups.hasNext()) {
-            Group group = groups.next();
-            results.add(findGroup(group.getGroupname()));
-        }
-        return results.toArray(new String[0]);
-    }
-
-
-    /**
-     * @return the MBean Names of all roles defined in this database.
-     */
-    public String[] getRoles() {
-        UserDatabase database = (UserDatabase) this.resource;
-        List<String> results = new ArrayList<>();
-        Iterator<Role> roles = database.getRoles();
-        while (roles.hasNext()) {
-            Role role = roles.next();
-            results.add(findRole(role.getRolename()));
-        }
-        return results.toArray(new String[0]);
-    }
-
-
-    /**
-     * @return the MBean Names of all users defined in this database.
-     */
-    public String[] getUsers() {
-        UserDatabase database = (UserDatabase) this.resource;
-        List<String> results = new ArrayList<>();
-        Iterator<User> users = database.getUsers();
-        while (users.hasNext()) {
-            User user = users.next();
-            results.add(findUser(user.getUsername()));
-        }
-        return results.toArray(new String[0]);
-    }
-
-
-    // ------------------------------------------------------------- Operations
-
-    /**
-     * Create a new Group and return the corresponding MBean Name.
-     *
-     * @param groupname Group name of the new group
-     * @param description Description of the new group
-     * @return the new group object name
-     */
-    public String createGroup(String groupname, String description) {
-        UserDatabase database = (UserDatabase) this.resource;
-        Group group = database.createGroup(groupname, description);
-        try {
-            MBeanUtils.createMBean(group);
-        } catch (Exception e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.createMBeanError.group", groupname), e);
-        }
-        return findGroup(groupname);
-    }
-
-
-    /**
-     * Create a new Role and return the corresponding MBean Name.
-     *
-     * @param rolename Group name of the new group
-     * @param description Description of the new group
-     * @return the new role object name
-     */
-    public String createRole(String rolename, String description) {
-        UserDatabase database = (UserDatabase) this.resource;
-        Role role = database.createRole(rolename, description);
-        try {
-            MBeanUtils.createMBean(role);
-        } catch (Exception e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.createMBeanError.role", rolename), e);
-        }
-        return findRole(rolename);
-    }
-
-
-    /**
-     * Create a new User and return the corresponding MBean Name.
-     *
-     * @param username User name of the new user
-     * @param password Password for the new user
-     * @param fullName Full name for the new user
-     * @return the new user object name
-     */
-    public String createUser(String username, String password, String fullName) {
-        UserDatabase database = (UserDatabase) this.resource;
-        User user = database.createUser(username, password, fullName);
-        try {
-            MBeanUtils.createMBean(user);
-        } catch (Exception e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.createMBeanError.user", username), e);
-        }
-        return findUser(username);
-    }
-
-
-    /**
-     * Return the MBean Name for the specified group name (if any);
-     * otherwise return <code>null</code>.
-     *
-     * @param groupname Group name to look up
-     * @return the group object name
-     */
-    public String findGroup(String groupname) {
-        UserDatabase database = (UserDatabase) this.resource;
-        Group group = database.findGroup(groupname);
-        if (group == null) {
-            return null;
-        }
-        try {
-            ObjectName oname = MBeanUtils.createObjectName(managedGroup.getDomain(), group);
-            return oname.toString();
-        } catch (MalformedObjectNameException e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.createError.group", groupname), e);
-        }
-    }
-
-
-    /**
-     * Return the MBean Name for the specified role name (if any);
-     * otherwise return <code>null</code>.
-     *
-     * @param rolename Role name to look up
-     * @return the role object name
-     */
-    public String findRole(String rolename) {
-        UserDatabase database = (UserDatabase) this.resource;
-        Role role = database.findRole(rolename);
-        if (role == null) {
-            return null;
-        }
-        try {
-            ObjectName oname = MBeanUtils.createObjectName(managedRole.getDomain(), role);
-            return oname.toString();
-        } catch (MalformedObjectNameException e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.createError.role", rolename), e);
-        }
-
-    }
-
-
-    /**
-     * Return the MBean Name for the specified user name (if any);
-     * otherwise return <code>null</code>.
-     *
-     * @param username User name to look up
-     * @return the user object name
-     */
-    public String findUser(String username) {
-        UserDatabase database = (UserDatabase) this.resource;
-        User user = database.findUser(username);
-        if (user == null) {
-            return null;
-        }
-        try {
-            ObjectName oname = MBeanUtils.createObjectName(managedUser.getDomain(), user);
-            return oname.toString();
-        } catch (MalformedObjectNameException e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.createError.user", username), e);
-        }
-    }
-
-
-    /**
-     * Remove an existing group and destroy the corresponding MBean.
-     *
-     * @param groupname Group name to remove
-     */
-    public void removeGroup(String groupname) {
-        UserDatabase database = (UserDatabase) this.resource;
-        Group group = database.findGroup(groupname);
-        if (group == null) {
-            return;
-        }
-        try {
-            MBeanUtils.destroyMBean(group);
-            database.removeGroup(group);
-        } catch (Exception e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.destroyError.group", groupname), e);
-        }
-    }
-
-
-    /**
-     * Remove an existing role and destroy the corresponding MBean.
-     *
-     * @param rolename Role name to remove
-     */
-    public void removeRole(String rolename) {
-        UserDatabase database = (UserDatabase) this.resource;
-        Role role = database.findRole(rolename);
-        if (role == null) {
-            return;
-        }
-        try {
-            MBeanUtils.destroyMBean(role);
-            database.removeRole(role);
-        } catch (Exception e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.destroyError.role", rolename), e);
-        }
-    }
-
-
-    /**
-     * Remove an existing user and destroy the corresponding MBean.
-     *
-     * @param username User name to remove
-     */
-    public void removeUser(String username) {
-        UserDatabase database = (UserDatabase) this.resource;
-        User user = database.findUser(username);
-        if (user == null) {
-            return;
-        }
-        try {
-            MBeanUtils.destroyMBean(user);
-            database.removeUser(user);
-        } catch (Exception e) {
-            throw new IllegalArgumentException(sm.getString("userMBean.destroyError.user", username), e);
-        }
-    }
 }

==================================================
UserDatabaseRealm.java
index 921424d19b..09710ddaf7 100644
--- a/java/org/apache/catalina/mbeans/SparseUserDatabaseMBean.java
+++ b/java/org/apache/catalina/mbeans/SparseUserDatabaseMBean.java
@@ -207,7 +207,7 @@ public class SparseUserDatabaseMBean extends BaseModelMBean {
         }
         try {
             ObjectName oname = MBeanUtils.createObjectName(managedGroup.getDomain(), group);
-            if (!mserver.isRegistered(oname)) {
+            if (database.isSparse() && !mserver.isRegistered(oname)) {
                 MBeanUtils.createMBean(group);
             }
             return oname.toString();
@@ -232,7 +232,7 @@ public class SparseUserDatabaseMBean extends BaseModelMBean {
         }
         try {
             ObjectName oname = MBeanUtils.createObjectName(managedRole.getDomain(), role);
-            if (!mserver.isRegistered(oname)) {
+            if (database.isSparse() && !mserver.isRegistered(oname)) {
                 MBeanUtils.createMBean(role);
             }
             return oname.toString();
@@ -258,7 +258,7 @@ public class SparseUserDatabaseMBean extends BaseModelMBean {
         }
         try {
             ObjectName oname = MBeanUtils.createObjectName(managedUser.getDomain(), user);
-            if (!mserver.isRegistered(oname)) {
+            if (database.isSparse() && !mserver.isRegistered(oname)) {
                 MBeanUtils.createMBean(user);
             }
             return oname.toString();
@@ -334,33 +334,34 @@ public class SparseUserDatabaseMBean extends BaseModelMBean {
     public void save() {
         try {
             UserDatabase database = (UserDatabase) this.resource;
-            ObjectName query = null;
-            Set<ObjectName> results = null;
-
-            // Groups
-            query = new ObjectName(
-                    "Users:type=Group,database=" + database.getId() + ",*");
-            results = mserver.queryNames(query, null);
-            for (ObjectName result : results) {
-                mserver.unregisterMBean(result);
+            if (database.isSparse()) {
+                ObjectName query = null;
+                Set<ObjectName> results = null;
+
+                // Groups
+                query = new ObjectName(
+                        "Users:type=Group,database=" + database.getId() + ",*");
+                results = mserver.queryNames(query, null);
+                for (ObjectName result : results) {
+                    mserver.unregisterMBean(result);
+                }
+
+                // Roles
+                query = new ObjectName(
+                        "Users:type=Role,database=" + database.getId() + ",*");
+                results = mserver.queryNames(query, null);
+                for (ObjectName result : results) {
+                    mserver.unregisterMBean(result);
+                }
+
+                // Users
+                query = new ObjectName(
+                        "Users:type=User,database=" + database.getId() + ",*");
+                results = mserver.queryNames(query, null);
+                for (ObjectName result : results) {
+                    mserver.unregisterMBean(result);
+                }
             }
-
-            // Roles
-            query = new ObjectName(
-                    "Users:type=Role,database=" + database.getId() + ",*");
-            results = mserver.queryNames(query, null);
-            for (ObjectName result : results) {
-                mserver.unregisterMBean(result);
-            }
-
-            // Users
-            query = new ObjectName(
-                    "Users:type=User,database=" + database.getId() + ",*");
-            results = mserver.queryNames(query, null);
-            for (ObjectName result : results) {
-                mserver.unregisterMBean(result);
-            }
-
             database.save();
         } catch (Exception e) {
             throw new IllegalArgumentException(sm.getString("userMBean.saveError"), e);

==================================================
DataSourceUserDatabase.java
index d7806df618..c8aff94807 100644
--- a/java/org/apache/catalina/realm/UserDatabaseRealm.java
+++ b/java/org/apache/catalina/realm/UserDatabaseRealm.java
@@ -202,7 +202,7 @@ public class UserDatabaseRealm extends RealmBase {
             return null;
         } else {
             if (useStaticPrincipal) {
-                return new GenericPrincipal(username, Arrays.asList(getRoles(user))); 
+                return new GenericPrincipal(username, Arrays.asList(getRoles(user)));
             } else {
                 return new UserDatabasePrincipal(user, database);
             }

==================================================
