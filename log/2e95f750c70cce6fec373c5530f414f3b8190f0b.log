2e95f750c70cce6fec373c5530f414f3b8190f0b
==================================================
Whitespace removal from /java/org/apache/catalina/manager
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:13:05 2011 +0000
==================================================
Constants.java
Whitespace removal from /java/org/apache/catalina/manager

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187794 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DummyProxySession.java
index ba7b5553b3..2d54dbc4ab 100644
--- a/java/org/apache/catalina/manager/Constants.java
+++ b/java/org/apache/catalina/manager/Constants.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,7 +30,7 @@ public class Constants {
     public static final String SERVER_HEADER_SECTION;
     public static final String SERVER_ROW_SECTION;
     public static final String HTML_TAIL_SECTION;
-    
+
     static {
         HTML_HEADER_SECTION =
             "<html>\n" +
@@ -108,7 +108,7 @@ public class Constants {
             "    display: inline;\n" +
             "  }\n" +
             "</style>\n";
-    
+
         BODY_HEADER_SECTION =
             "<title>{0}</title>\n" +
             "</head>\n" +
@@ -140,7 +140,7 @@ public class Constants {
             "</table>\n" +
             "<br>\n" +
             "\n";
-    
+
         MESSAGE_SECTION =
             "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">\n" +
             " <tr>\n" +
@@ -151,7 +151,7 @@ public class Constants {
             "</table>\n" +
             "<br>\n" +
             "\n";
-    
+
         MANAGER_SECTION =
             "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">\n" +
             "<tr>\n" +
@@ -166,7 +166,7 @@ public class Constants {
             "</table>\n" +
             "<br>\n" +
             "\n";
-    
+
         SERVER_HEADER_SECTION =
             "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">\n" +
             "<tr>\n" +
@@ -182,7 +182,7 @@ public class Constants {
             " <td class=\"header-center\"><small>{7}</small></td>\n" +
             " <td class=\"header-center\"><small>{8}</small></td>\n" +
             "</tr>\n";
-    
+
         SERVER_ROW_SECTION =
             "<tr>\n" +
             " <td class=\"row-center\"><small>{0}</small></td>\n" +
@@ -197,7 +197,7 @@ public class Constants {
             "</table>\n" +
             "<br>\n" +
             "\n";
-    
+
         HTML_TAIL_SECTION =
             "<hr size=\"1\" noshade=\"noshade\">\n" +
             "<center><font size=\"-1\" color=\"#525D76\">\n" +

==================================================
HTMLManagerServlet.java
index 52e7f7782a..96665eda0b 100644
--- a/java/org/apache/catalina/manager/DummyProxySession.java
+++ b/java/org/apache/catalina/manager/DummyProxySession.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,7 +28,7 @@ import org.apache.catalina.SessionListener;
 public class DummyProxySession implements Session {
 
     private String sessionId;
-    
+
     public DummyProxySession(String sessionId) {
         this.sessionId = sessionId;
     }

==================================================
JMXProxyServlet.java
index 57ff353562..1c8f5b41f3 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -86,10 +86,10 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
     private static final long serialVersionUID = 1L;
 
-    protected static final URLEncoder URL_ENCODER; 
+    protected static final URLEncoder URL_ENCODER;
     protected static final String APPLICATION_MESSAGE = "message";
     protected static final String APPLICATION_ERROR = "error";
-    
+
     protected static final String sessionsListJspPath  = "/WEB-INF/jsp/sessionsList.jsp";
     protected static final String sessionDetailJspPath = "/WEB-INF/jsp/sessionDetail.jsp";
 
@@ -98,9 +98,9 @@ public final class HTMLManagerServlet extends ManagerServlet {
         // '/' should not be encoded in context paths
         URL_ENCODER.addSafeCharacter('/');
     }
-    
+
     private final Random randomSource = new Random();
-    
+
     private boolean showProxySessions = false;
 
     // --------------------------------------------------------- Public Methods
@@ -120,7 +120,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
         throws IOException, ServletException {
 
         StringManager smClient = getStringManager(request);
-        
+
         // Identify the request parameters that we need
         // By obtaining the command from the pathInfo, per-command security can
         // be configured in web.xml
@@ -194,7 +194,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
         ContextName deployCn = null;
         if (deployPath != null) {
             deployCn = new ContextName(deployPath,
-                    request.getParameter("deployVersion")); 
+                    request.getParameter("deployVersion"));
         }
         String deployConfig = request.getParameter("deployConfig");
         String deployWar = request.getParameter("deployWar");
@@ -237,7 +237,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
      * Generate a once time token (nonce) for authenticating subsequent
      * requests. This will also add the token to the session. The nonce
      * generation is a simplified version of ManagerBase.generateSessionId().
-     * 
+     *
      */
     protected String generateNonce() {
         byte random[] = new byte[16];
@@ -246,7 +246,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
         StringBuilder buffer = new StringBuilder();
 
         randomSource.nextBytes(random);
-       
+
         for (int j = 0; j < random.length; j++) {
             byte b1 = (byte) ((random[j] & 0xf0) >> 4);
             byte b2 = (byte) (random[j] & 0x0f);
@@ -272,7 +272,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
         Collection<Part> parts = request.getParts();
         Iterator<Part> iter = parts.iterator();
-        
+
         try {
             while (iter.hasNext()) {
                 Part part = iter.next();
@@ -315,7 +315,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
                             filename);
                     break;
                 }
-                
+
                 ContextName cn = new ContextName(filename);
                 String name = cn.getName();
 
@@ -476,7 +476,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
             contextNames[i] = children[i].getName();
 
         Arrays.sort(contextNames);
-        
+
         String appsStart = smClient.getString("htmlManagerServlet.appsStart");
         String appsStop = smClient.getString("htmlManagerServlet.appsStop");
         String appsReload = smClient.getString("htmlManagerServlet.appsReload");
@@ -492,7 +492,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
         for (String contextName : contextNames) {
             Context ctxt = (Context) host.findChild(contextName);
-            
+
             if (ctxt != null) {
                 // Bugzilla 34818, alternating row colors
                 isHighlighted = !isHighlighted;
@@ -523,7 +523,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
                     // Assume false on failure for safety
                     isDeployed = false;
                 }
-                
+
                 args = new Object[7];
                 args[0] = "<a href=\"" + URL_ENCODER.encode(displayPath)
                         + "\">" + RequestUtil.filter(displayPath) + "</a>";
@@ -540,7 +540,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
                 args[3] = Boolean.valueOf(ctxt.getAvailable());
                 args[4] = RequestUtil.filter(response.encodeURL(request.getContextPath() +
                      "/html/sessions?" + pathVersion));
-                Manager manager = ctxt.getManager(); 
+                Manager manager = ctxt.getManager();
                 if (manager instanceof DistributedManager && showProxySessions) {
                     args[5] = Integer.valueOf(
                             ((DistributedManager)manager).getActiveSessionsFull());
@@ -582,7 +582,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
                 }
                 args[12] = smClient.getString("htmlManagerServlet.expire.unit");
                 args[13] = highlightColor;
-                
+
                 if (ctxt.getName().equals(this.context.getName())) {
                     writer.print(MessageFormat.format(
                         MANAGER_APP_ROW_BUTTON_SECTION, args));
@@ -771,8 +771,8 @@ public final class HTMLManagerServlet extends ManagerServlet {
     /**
      * Find potential memory leaks caused by web application reload.
      *
-     * @see ManagerServlet#findleaks(boolean, PrintWriter, StringManager) 
-     * 
+     * @see ManagerServlet#findleaks(boolean, PrintWriter, StringManager)
+     *
      * @param smClient  StringManager for the client's locale
      *
      * @return message String
@@ -797,38 +797,38 @@ public final class HTMLManagerServlet extends ManagerServlet {
         } else {
             msg.append(smClient.getString("htmlManagerServlet.findleaksNone"));
         }
-        
+
         return msg.toString();
     }
-    
-    
+
+
     /**
      * @see javax.servlet.Servlet#getServletInfo()
      */
     @Override
     public String getServletInfo() {
         return "HTMLManagerServlet, Copyright (c) 1999-2011, The Apache Software Foundation";
-    }   
-    
+    }
+
     /**
      * @see javax.servlet.GenericServlet#init()
      */
     @Override
     public void init() throws ServletException {
         super.init();
-        
+
         // Set our properties from the initialization parameters
         String value = null;
         value = getServletConfig().getInitParameter("showProxySessions");
         showProxySessions = Boolean.parseBoolean(value);
-    }   
+    }
 
     // ------------------------------------------------ Sessions administration
 
     /**
      *
      * Extract the expiration request parameter
-     * 
+     *
      * @param cn Name of the application from which to expire sessions
      * @param req
      * @param smClient  StringManager for the client's locale
@@ -848,12 +848,12 @@ public final class HTMLManagerServlet extends ManagerServlet {
     }
 
     /**
-     * 
+     *
      * @param req
      * @param resp
      * @param smClient  StringManager for the client's locale
      * @throws ServletException
-     * @throws IOException 
+     * @throws IOException
      */
     protected void doSessions(ContextName cn, HttpServletRequest req,
             HttpServletResponse resp, StringManager smClient)
@@ -938,7 +938,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
     }
 
     /**
-     * 
+     *
      * @param cn Name of the application for which the sessions will be listed
      * @param req
      * @param resp
@@ -987,7 +987,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
     }
 
     /**
-     * 
+     *
      * @param req
      * @param resp
      * @param smClient  StringManager for the client's locale
@@ -1015,7 +1015,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
      * @param sessionIds
      * @param smClient  StringManager for the client's locale
      * @return number of invalidated sessions
-     * @throws IOException 
+     * @throws IOException
      */
     protected int invalidateSessions(ContextName cn, String[] sessionIds,
             StringManager smClient) throws IOException {
@@ -1057,7 +1057,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
      * @param attributeName
      * @param smClient  StringManager for the client's locale
      * @return true if there was an attribute removed, false otherwise
-     * @throws IOException 
+     * @throws IOException
      */
     protected boolean removeSessionAttribute(ContextName cn, String sessionId,
             String attributeName, StringManager smClient) throws IOException {

==================================================
JspHelper.java
index 57bed983bc..69bd68646f 100644
--- a/java/org/apache/catalina/manager/JMXProxyServlet.java
+++ b/java/org/apache/catalina/manager/JMXProxyServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -45,7 +45,7 @@ import org.apache.tomcat.util.modeler.Registry;
  * @author Costin Manolache
  */
 public class JMXProxyServlet extends HttpServlet  {
-    
+
     private static final long serialVersionUID = 1L;
 
     // ----------------------------------------------------- Instance Variables
@@ -104,7 +104,7 @@ public class JMXProxyServlet extends HttpServlet  {
             String name=request.getParameter("att");
             getAttribute( writer, qry, name );
             return;
-        }        
+        }
         qry=request.getParameter("qry");
         if( qry == null ) {
             qry = "*:*";
@@ -179,7 +179,7 @@ public class JMXProxyServlet extends HttpServlet  {
                             attName.indexOf( " ") >=0 ) {
                         continue;
                     }
-            
+
                     try {
                         value=mBeanServer.getAttribute(oname, attName);
                     } catch( Throwable t) {
@@ -271,7 +271,7 @@ public class JMXProxyServlet extends HttpServlet  {
 
     /**
      * Determines if a type is supported by the {@link JMXProxyServlet}.
-     * 
+     *
      * @param type  The type to check
      * @return      Always returns <code>true</code>
      */

==================================================
ManagerServlet.java
index 89a7989460..592c91dabf 100644
--- a/java/org/apache/catalina/manager/LocalStrings_es.properties
+++ b/java/org/apache/catalina/manager/LocalStrings_es.properties
@@ -39,7 +39,7 @@ htmlManagerServlet.deployTitle = Desplegar
 htmlManagerServlet.deployUpload = Archivo WAR a desplegar
 htmlManagerServlet.deployUploadFail = FALLO - Fall\u00F3 Carga de Despliegue, Excepci\u00F3n\: {0}
 htmlManagerServlet.deployUploadFile = Seleccione archivo WAR a cargar
-htmlManagerServlet.deployUploadInServerXml = FALLO - El fichero war "{0}" no se puede cargar si se define el contexto en server.xml 
+htmlManagerServlet.deployUploadInServerXml = FALLO - El fichero war "{0}" no se puede cargar si se define el contexto en server.xml
 htmlManagerServlet.deployUploadNotWar = FALLO - El fichero cargado "{0}" debe de ser un .war
 htmlManagerServlet.deployUploadNoFile = FALLO - Fall\u00F3 la carga del fichero, no hay fichero
 htmlManagerServlet.deployUploadWarExists = FALLO - El fichero war "{0}" ya existe en el servidor
@@ -85,7 +85,7 @@ managerServlet.noCommand = FALLO - No se ha especificado comando
 managerServlet.noContext = FALLO - No existe contexto para trayectoria {0}
 managerServlet.noDirectory = FALLO - Documento base No-directorio para trayectoria {0}
 managerServlet.noDocBase = FALLO - No puedo replegar documento base para trayectoria {0}
-managerServlet.noGlobal = FALLO - No hay disponibles recursos globales JNDI 
+managerServlet.noGlobal = FALLO - No hay disponibles recursos globales JNDI
 managerServlet.noManager = FALLO - No existe gestor para ruta {0}
 managerServlet.noReload = FALLO - Recarga no soportada en WAR desplegado en trayectoria {0}
 managerServlet.noRename = FALLO - No pudeo desplegar WAR cargado para trayectoria {0}

==================================================
StatusManagerServlet.java
index 04ae352570..59f08f2dab 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -202,13 +202,13 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      */
     protected transient Host host = null;
 
-    
+
     /**
      * The host appBase.
      */
     protected File appBase = null;
-    
-    
+
+
     /**
      * MBean server.
      */
@@ -219,7 +219,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      * The associated deployer ObjectName.
      */
     protected ObjectName oname = null;
-    
+
 
     /**
      * The global JNDI <code>NamingContext</code> for this server,
@@ -283,7 +283,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         // Retrieve the MBean server
         mBeanServer = Registry.getRegistry(null, null).getMBeanServer();
-        
+
     }
 
 
@@ -331,11 +331,11 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         String war = request.getParameter("war");
         String tag = request.getParameter("tag");
         boolean update = false;
-        if ((request.getParameter("update") != null) 
+        if ((request.getParameter("update") != null)
             && (request.getParameter("update").equals("true"))) {
             update = true;
         }
-        
+
         boolean statusLine = false;
         if ("true".equals(request.getParameter("statusLine"))) {
             statusLine = true;
@@ -415,7 +415,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         }
         String tag = request.getParameter("tag");
         boolean update = false;
-        if ((request.getParameter("update") != null) 
+        if ((request.getParameter("update") != null)
             && (request.getParameter("update").equals("true"))) {
             update = true;
         }
@@ -514,15 +514,15 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      */
     protected void findleaks(boolean statusLine, PrintWriter writer,
             StringManager smClient) {
-        
+
         if (!(host instanceof StandardHost)) {
             writer.println(smClient.getString("managerServlet.findleaksFail"));
             return;
         }
-        
+
         String[] results =
             ((StandardHost) host).findReloadedContextMemoryLeaks();
-        
+
         if (results.length > 0) {
             if (statusLine) {
                 writer.println(
@@ -538,11 +538,11 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             writer.println(smClient.getString("managerServlet.findleaksNone"));
         }
     }
-    
-    
+
+
     /**
      * Store server configuration.
-     * 
+     *
      * @param path Optional context path to save
      */
     protected synchronized void save(PrintWriter writer, String path,
@@ -676,7 +676,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                     e.toString()));
             return;
         }
-        
+
         context = (Context) host.findChild(name);
         if (context != null && context.getConfigured()) {
             writer.println(smClient.getString(
@@ -686,7 +686,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             writer.println(smClient.getString(
                     "managerServlet.deployFailed", displayPath));
         }
-        
+
     }
 
 
@@ -709,7 +709,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         String baseName = cn.getBaseName();
         String name = cn.getName();
         String displayPath = cn.getDisplayName();
-        
+
         // Calculate the base path
         File deployedPath = versioned;
         if (tag != null) {
@@ -743,7 +743,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                     e.toString()));
             return;
         }
-        
+
         context = (Context) host.findChild(name);
         if (context != null && context.getConfigured()) {
             writer.println(smClient.getString("managerServlet.deployed",
@@ -753,7 +753,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             writer.println(smClient.getString("managerServlet.deployFailed",
                     displayPath));
         }
-        
+
     }
 
 
@@ -769,14 +769,14 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      */
     protected void deploy(PrintWriter writer, String config, ContextName cn,
             String war, boolean update,  StringManager smClient) {
-        
+
         if (config != null && config.length() == 0) {
             config = null;
         }
         if (war != null && war.length() == 0) {
             war = null;
         }
-        
+
         if (debug >= 1) {
             if (config != null && config.length() > 0) {
                 if (war != null) {
@@ -795,7 +795,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                 }
             }
         }
-        
+
         if (!validateContextName(cn, writer, smClient)) {
             return;
         }
@@ -803,7 +803,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         String name = cn.getName();
         String baseName = cn.getBaseName();
         String displayPath = cn.getDisplayName();
-        
+
         // Check if app already exists, or undeploy it if updating
         Context context = (Context) host.findChild(name);
         if (update) {
@@ -817,14 +817,14 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                     displayPath));
             return;
         }
-        
+
         if (config != null && (config.startsWith("file:"))) {
             config = config.substring("file:".length());
         }
         if (war != null && (war.startsWith("file:"))) {
             war = war.substring("file:".length());
         }
-        
+
         try {
             if (!isServiced(name)) {
                 addServiced(name);
@@ -835,15 +835,15 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                                     "managerServlet.mkdirFail",configBase));
                             return;
                         }
-                        copy(new File(config), 
+                        copy(new File(config),
                                 new File(configBase, baseName + ".xml"));
                     }
                     if (war != null) {
                         if (war.endsWith(".war")) {
-                            copy(new File(war), 
+                            copy(new File(war),
                                     new File(host.getAppBaseFile(), baseName + ".war"));
                         } else {
-                            copy(new File(war), 
+                            copy(new File(war),
                                     new File(host.getAppBaseFile(), baseName));
                         }
                     }
@@ -871,7 +871,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             writer.println(smClient.getString("managerServlet.exception",
                     t.toString()));
         }
-        
+
     }
 
 
@@ -1108,17 +1108,17 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             if(manager == null) {
                 writer.println(smClient.getString("managerServlet.noManager",
                         RequestUtil.filter(displayPath)));
-                return;               
+                return;
             }
             int maxCount = 60;
             int maxInactiveInterval = manager.getMaxInactiveInterval()/60;
             int histoInterval = maxInactiveInterval / maxCount;
-            if ( histoInterval * maxCount < maxInactiveInterval ) 
+            if ( histoInterval * maxCount < maxInactiveInterval )
                 histoInterval++;
             if (0==histoInterval)
                 histoInterval=1;
             maxCount = maxInactiveInterval / histoInterval;
-            if ( histoInterval * maxCount < maxInactiveInterval ) 
+            if ( histoInterval * maxCount < maxInactiveInterval )
                 maxCount++;
 
             writer.println(smClient.getString("managerServlet.sessions",
@@ -1235,7 +1235,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         try {
             Context context = (Context) host.findChild(cn.getName());
             if (context == null) {
-                writer.println(smClient.getString("managerServlet.noContext", 
+                writer.println(smClient.getString("managerServlet.noContext",
                         RequestUtil.filter(displayPath)));
                 return;
             }
@@ -1387,61 +1387,61 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     /**
      * Invoke the isDeployed method on the deployer.
      */
-    protected boolean isDeployed(String name) 
+    protected boolean isDeployed(String name)
         throws Exception {
         String[] params = { name };
         String[] signature = { "java.lang.String" };
-        Boolean result = 
+        Boolean result =
             (Boolean) mBeanServer.invoke(oname, "isDeployed", params, signature);
         return result.booleanValue();
     }
-    
+
 
     /**
      * Invoke the check method on the deployer.
      */
-    protected void check(String name) 
+    protected void check(String name)
         throws Exception {
         String[] params = { name };
         String[] signature = { "java.lang.String" };
         mBeanServer.invoke(oname, "check", params, signature);
     }
-    
+
 
     /**
      * Invoke the isServiced method on the deployer.
      */
-    protected boolean isServiced(String name) 
+    protected boolean isServiced(String name)
         throws Exception {
         String[] params = { name };
         String[] signature = { "java.lang.String" };
-        Boolean result = 
+        Boolean result =
             (Boolean) mBeanServer.invoke(oname, "isServiced", params, signature);
         return result.booleanValue();
     }
-    
+
 
     /**
      * Invoke the addServiced method on the deployer.
      */
-    protected void addServiced(String name) 
+    protected void addServiced(String name)
         throws Exception {
         String[] params = { name };
         String[] signature = { "java.lang.String" };
         mBeanServer.invoke(oname, "addServiced", params, signature);
     }
-    
+
 
     /**
      * Invoke the removeServiced method on the deployer.
      */
-    protected void removeServiced(String name) 
+    protected void removeServiced(String name)
         throws Exception {
         String[] params = { name };
         String[] signature = { "java.lang.String" };
         mBeanServer.invoke(oname, "removeServiced", params, signature);
     }
-    
+
 
     /**
      * Delete the specified directory, including all of its contents and
@@ -1554,14 +1554,14 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
     protected static boolean validateContextName(ContextName cn,
             PrintWriter writer, StringManager sm) {
-        
+
         // ContextName should be non-null with a path that is empty or starts
         // with /
         if (cn != null &&
                 (cn.getPath().startsWith("/") || cn.getPath().equals(""))) {
             return true;
         }
-        
+
         String path = null;
         if (cn != null) {
             path = RequestUtil.filter(cn.getPath());
@@ -1589,7 +1589,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         return result;
     }
 
-    
+
     /**
      * Copy the specified file or directory to the destination.
      *
@@ -1597,9 +1597,9 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      * @param dest File object representing the destination
      */
     public static boolean copyInternal(File src, File dest, byte[] buf) {
-        
+
         boolean result = true;
-        
+
         String files[] = null;
         if (src.isDirectory()) {
             files = src.list();
@@ -1651,8 +1651,8 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             }
         }
         return result;
-        
+
     }
-    
-    
+
+
 }

==================================================
StatusTransformer.java
index c0ee2dce89..2e6aaa16d5 100644
--- a/java/org/apache/catalina/manager/StatusManagerServlet.java
+++ b/java/org/apache/catalina/manager/StatusManagerServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -187,7 +187,7 @@ public class StatusManagerServlet
         // mode is flag for HTML or XML output
         int mode = 0;
         // if ?XML=true, set the mode to XML
-        if (request.getParameter("XML") != null 
+        if (request.getParameter("XML") != null
             && request.getParameter("XML").equals("true")) {
             mode = 1;
         }
@@ -196,7 +196,7 @@ public class StatusManagerServlet
         PrintWriter writer = response.getWriter();
 
         boolean completeStatus = false;
-        if ((request.getPathInfo() != null) 
+        if ((request.getPathInfo() != null)
             && (request.getPathInfo().equals("/all"))) {
             completeStatus = true;
         }
@@ -293,7 +293,7 @@ public class StatusManagerServlet
                      requestProcessors, mode);
             }
 
-            if ((request.getPathInfo() != null) 
+            if ((request.getPathInfo() != null)
                 && (request.getPathInfo().equals("/all"))) {
                 // Note: Retrieving the full status is much slower
                 // use StatusTransformer to output status
@@ -318,7 +318,7 @@ public class StatusManagerServlet
                                    java.lang.Object handback) {
 
         if (notification instanceof MBeanServerNotification) {
-            ObjectName objectName = 
+            ObjectName objectName =
                 ((MBeanServerNotification) notification).getMBeanName();
             if (notification.getType().equals
                 (MBeanServerNotification.REGISTRATION_NOTIFICATION)) {
@@ -350,7 +350,7 @@ public class StatusManagerServlet
                 }
                 String j2eeType = objectName.getKeyProperty("j2eeType");
                 if (j2eeType != null) {
-                    
+
                 }
             }
         }

==================================================
Constants.java
index 14265bf31b..0c5c351ea1 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -50,7 +50,7 @@ public class StatusTransformer {
     // --------------------------------------------------------- Public Methods
 
 
-    public static void setContentType(HttpServletResponse response, 
+    public static void setContentType(HttpServletResponse response,
                                       int mode) {
         if (mode == 0){
             response.setContentType("text/html;charset="+Constants.CHARSET);
@@ -84,10 +84,10 @@ public class StatusTransformer {
     /**
      * Write the header body. XML output doesn't bother
      * to output this stuff, since it's just title.
-     * 
+     *
      * @param writer The output writer
      * @param args What to write
-     * @param mode 0 means write 
+     * @param mode 0 means write
      */
     public static void writeBody(PrintWriter writer, Object[] args, int mode) {
         if (mode == 0){
@@ -99,12 +99,12 @@ public class StatusTransformer {
 
     /**
      * Write the manager webapp information.
-     * 
+     *
      * @param writer The output writer
      * @param args What to write
      * @param mode 0 means write
      */
-    public static void writeManager(PrintWriter writer, Object[] args, 
+    public static void writeManager(PrintWriter writer, Object[] args,
                                     int mode) {
         if (mode == 0){
             writer.print(MessageFormat.format(Constants.MANAGER_SECTION, args));
@@ -112,7 +112,7 @@ public class StatusTransformer {
     }
 
 
-    public static void writePageHeading(PrintWriter writer, Object[] args, 
+    public static void writePageHeading(PrintWriter writer, Object[] args,
                                         int mode) {
         if (mode == 0){
             writer.print(MessageFormat.format
@@ -121,7 +121,7 @@ public class StatusTransformer {
     }
 
 
-    public static void writeServerInfo(PrintWriter writer, Object[] args, 
+    public static void writeServerInfo(PrintWriter writer, Object[] args,
                                        int mode){
         if (mode == 0){
             writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION, args));
@@ -130,7 +130,7 @@ public class StatusTransformer {
 
 
     /**
-     * 
+     *
      */
     public static void writeFooter(PrintWriter writer, int mode) {
         if (mode == 0){
@@ -162,7 +162,7 @@ public class StatusTransformer {
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
         }
-        
+
         if (ok) {
             if (mode == 0){
                 writer.print("<h1>OS</h1>");
@@ -188,10 +188,10 @@ public class StatusTransformer {
                 // NO-OP
             }
         }
-        
+
     }
-    
-    
+
+
     /**
      * Write the VM state. Mode 0 will generate HTML.
      * Mode 1 will generate XML.
@@ -254,7 +254,7 @@ public class StatusTransformer {
             } catch (Exception e) {
                 // Ignore
             }
-            
+
             writer.print("<br>");
 
             ObjectName grpName = null;
@@ -358,13 +358,13 @@ public class StatusTransformer {
     /**
      * Write processor state.
      */
-    protected static void writeProcessorState(PrintWriter writer, 
+    protected static void writeProcessorState(PrintWriter writer,
                                               ObjectName pName,
-                                              MBeanServer mBeanServer, 
+                                              MBeanServer mBeanServer,
                                               int mode)
         throws Exception {
 
-        Integer stageValue = 
+        Integer stageValue =
             (Integer) mBeanServer.getAttribute(pName, "stage");
         int stage = stageValue.intValue();
         boolean fullStatus = true;
@@ -431,7 +431,7 @@ public class StatusTransformer {
                 writer.write("<td>");
                 if (showRequest) {
                     writer.print(formatSize(mBeanServer.getAttribute
-                                            (pName, "requestBytesReceived"), 
+                                            (pName, "requestBytesReceived"),
                                             false));
                 } else {
                     writer.write("?");
@@ -473,7 +473,7 @@ public class StatusTransformer {
             writer.write(" stage=\"" + stageStr + "\"");
 
             if (fullStatus) {
-                writer.write(" requestProcessingTime=\"" 
+                writer.write(" requestProcessingTime=\""
                              + mBeanServer.getAttribute
                              (pName, "requestProcessingTime") + "\"");
                 writer.write(" requestBytesSent=\"");
@@ -492,30 +492,30 @@ public class StatusTransformer {
                     writer.write("0");
                 }
                 writer.write("\"");
-                writer.write(" remoteAddr=\"" 
+                writer.write(" remoteAddr=\""
                              + filter(mBeanServer.getAttribute
                                       (pName, "remoteAddr")) + "\"");
-                writer.write(" virtualHost=\"" 
+                writer.write(" virtualHost=\""
                              + filter(mBeanServer.getAttribute
                                       (pName, "virtualHost")) + "\"");
 
                 if (showRequest) {
-                    writer.write(" method=\"" 
+                    writer.write(" method=\""
                                  + filter(mBeanServer.getAttribute
                                           (pName, "method")) + "\"");
-                    writer.write(" currentUri=\"" 
+                    writer.write(" currentUri=\""
                                  + filter(mBeanServer.getAttribute
                                           (pName, "currentUri")) + "\"");
 
                     String queryString = (String) mBeanServer.getAttribute
                         (pName, "currentQueryString");
                     if ((queryString != null) && (!queryString.equals(""))) {
-                        writer.write(" currentQueryString=\"" 
+                        writer.write(" currentQueryString=\""
                                      + RequestUtil.filter(queryString) + "\"");
                     } else {
                         writer.write(" currentQueryString=\"&#63;\"");
                     }
-                    writer.write(" protocol=\"" 
+                    writer.write(" protocol=\""
                                  + filter(mBeanServer.getAttribute
                                           (pName, "protocol")) + "\"");
                 } else {
@@ -587,7 +587,7 @@ public class StatusTransformer {
             iterator = hostsON.iterator();
             while (iterator.hasNext()) {
                 ObjectName contextON = iterator.next();
-                writer.print("<a class=\"A.name\" name=\"" 
+                writer.print("<a class=\"A.name\" name=\""
                              + (count++) + ".0\">");
                 writeContext(writer, contextON, mBeanServer, mode);
             }
@@ -602,7 +602,7 @@ public class StatusTransformer {
     /**
      * Write context state.
      */
-    protected static void writeContext(PrintWriter writer, 
+    protected static void writeContext(PrintWriter writer,
                                        ObjectName objectName,
                                        MBeanServer mBeanServer, int mode)
         throws Exception {
@@ -613,7 +613,7 @@ public class StatusTransformer {
             if (name == null) {
                 return;
             }
-            
+
             String hostName = null;
             String contextName = null;
             if (name.startsWith("//")) {
@@ -628,7 +628,7 @@ public class StatusTransformer {
             }
 
             ObjectName queryManager = new ObjectName
-                (objectName.getDomain() + ":type=Manager,context=" + contextName 
+                (objectName.getDomain() + ":type=Manager,context=" + contextName
                  + ",host=" + hostName + ",*");
             Set<ObjectName> managersON =
                 mBeanServer.queryNames(queryManager, null);
@@ -673,7 +673,7 @@ public class StatusTransformer {
             }
             writer.print("</p>");
 
-            String onStr = objectName.getDomain() 
+            String onStr = objectName.getDomain()
                 + ":j2eeType=Servlet,WebModule=" + webModuleName + ",*";
             ObjectName servletObjectName = new ObjectName(onStr);
             Set<ObjectInstance> set =
@@ -774,10 +774,10 @@ public class StatusTransformer {
 
         if (mode == 0) {
             String servletName = objectName.getKeyProperty("name");
-            
-            String[] mappings = (String[]) 
+
+            String[] mappings = (String[])
                 mBeanServer.invoke(objectName, "findMappings", null, null);
-            
+
             writer.print("<h2>");
             writer.print(filter(servletName));
             if ((mappings != null) && (mappings.length > 0)) {
@@ -791,7 +791,7 @@ public class StatusTransformer {
                 writer.print(" ] ");
             }
             writer.print("</h2>");
-            
+
             writer.print("<p>");
             writer.print(" Processing time: ");
             writer.print(formatTime(mBeanServer.getAttribute
@@ -878,7 +878,7 @@ public class StatusTransformer {
                 bytes = -bytes;
             }
             long mbytes = bytes / (1024 * 1024);
-            long rest = 
+            long rest =
                 ((bytes - (mbytes * (1024 * 1024))) * 100) / (1024 * 1024);
             buff.append(mbytes).append('.');
             if (rest < 10) {

==================================================
HTMLHostManagerServlet.java
index 92d76bd21a..c061b47c11 100644
--- a/java/org/apache/catalina/manager/host/Constants.java
+++ b/java/org/apache/catalina/manager/host/Constants.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
HostManagerServlet.java
index 9f8cd103d3..df797242e6 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -40,7 +40,7 @@ import org.apache.tomcat.util.res.StringManager;
 /**
 * Servlet that enables remote management of the virtual hosts deployed
 * on the server.  Normally, this functionality will be protected by a security
-* constraint in the web application deployment descriptor.  However, 
+* constraint in the web application deployment descriptor.  However,
 * this requirement can be relaxed during testing.
 * <p>
 * The difference between the <code>HostManagerServlet</code> and this
@@ -106,7 +106,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         list(request, response, message, smClient);
     }
 
-    
+
     /**
      * Process a POST request for the specified resource.
      *
@@ -126,12 +126,12 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         String command = request.getPathInfo();
 
         String name = request.getParameter("name");
- 
+
         // Prepare our output writer to generate the response message
         response.setContentType("text/html; charset=" + Constants.CHARSET);
 
         String message = "";
-        
+
         // Process the requested command
         if (command == null) {
             // No command == list
@@ -184,7 +184,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         return stringWriter.toString();
     }
 
-    
+
     /**
      * Start the host with the specified name.
      *
@@ -200,7 +200,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         return stringWriter.toString();
     }
 
-    
+
     /**
      * Stop the host with the specified name.
      *
@@ -216,7 +216,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         return stringWriter.toString();
     }
 
-    
+
     /**
      * Render a HTML list of the currently active Contexts in our virtual host,
      * and memory and server status information.
@@ -369,7 +369,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         args[4] = smClient.getString("htmlHostManagerServlet.addAliases");
         args[5] = smClient.getString("htmlHostManagerServlet.addAppBase");
         writer.print(MessageFormat.format(ADD_SECTION_START, args));
- 
+
         args = new Object[3];
         args[0] = smClient.getString("htmlHostManagerServlet.addAutoDeploy");
         args[1] = "autoDeploy";
@@ -393,7 +393,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         args[1] = "manager";
         args[2] = "checked";
         writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN, args));
-        
+
         args = new Object[1];
         args[0] = smClient.getString("htmlHostManagerServlet.addButton");
         writer.print(MessageFormat.format(ADD_SECTION_END, args));
@@ -428,7 +428,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         writer.close();
     }
 
-    
+
     // ------------------------------------------------------ Private Constants
 
     // These HTML sections are broken in relatively small sections, because of
@@ -509,7 +509,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         "  <input type=\"text\" name=\"appBase\" size=\"64\">\n" +
         " </td>\n" +
         "</tr>\n" ;
-    
+
         private static final String ADD_SECTION_BOOLEAN =
         "<tr>\n" +
         " <td class=\"row-right\">\n" +
@@ -519,7 +519,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         "  <input type=\"checkbox\" name=\"{1}\" {2}>\n" +
         " </td>\n" +
         "</tr>\n" ;
-        
+
         private static final String ADD_SECTION_END =
         "<tr>\n" +
         " <td class=\"row-right\">\n" +

==================================================
BaseSessionComparator.java
index c666709c20..bd4092e7ac 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -53,8 +53,8 @@ import org.apache.tomcat.util.res.StringManager;
 
 /**
  * Servlet that enables remote management of the virtual hosts installed
- * on the server.  Normally, this functionality will be protected by 
- * a security constraint in the web application deployment descriptor.  
+ * on the server.  Normally, this functionality will be protected by
+ * a security constraint in the web application deployment descriptor.
  * However, this requirement can be relaxed during testing.
  * <p>
  * This servlet examines the value returned by <code>getPathInfo()</code>
@@ -64,16 +64,16 @@ import org.apache.tomcat.util.res.StringManager;
  * <ul>
  * <li><b>/add?name={host-name}&aliases={host-aliases}&manager={manager}</b> -
  *     Create and add a new virtual host. The <code>host-name</code> attribute
- *     indicates the name of the new host. The <code>host-aliases</code> 
- *     attribute is a comma separated list of the host alias names. 
+ *     indicates the name of the new host. The <code>host-aliases</code>
+ *     attribute is a comma separated list of the host alias names.
  *     The <code>manager</code> attribute is a boolean value indicating if the
- *     webapp manager will be installed in the newly created host (optional, 
+ *     webapp manager will be installed in the newly created host (optional,
  *     false by default).</li>
- * <li><b>/remove?name={host-name}</b> - Remove a virtual host. 
+ * <li><b>/remove?name={host-name}</b> - Remove a virtual host.
  *     The <code>host-name</code> attribute indicates the name of the host.
  *     </li>
  * <li><b>/list</b> - List the virtual hosts installed on the server.
- *     Each host will be listed with the following format 
+ *     Each host will be listed with the following format
  *     <code>host-name#host-aliases</code>.</li>
  * <li><b>/start?name={host-name}</b> - Start the virtual host.</li>
  * <li><b>/stop?name={host-name}</b> - Stop the virtual host.</li>
@@ -119,13 +119,13 @@ public class HostManagerServlet
      */
     protected transient Host installedHost = null;
 
-    
+
     /**
      * The associated engine.
      */
     protected transient Engine engine = null;
 
-    
+
     /**
      * MBean server.
      */
@@ -180,7 +180,7 @@ public class HostManagerServlet
 
         // Retrieve the MBean server
         mBeanServer = Registry.getRegistry(null, null).getMBeanServer();
-        
+
     }
 
 
@@ -219,7 +219,7 @@ public class HostManagerServlet
         if (command == null)
             command = request.getServletPath();
         String name = request.getParameter("name");
-  
+
         // Prepare our output writer to generate the response message
         response.setContentType("text/plain; charset=" + Constants.CHARSET);
         PrintWriter writer = response.getWriter();
@@ -269,7 +269,7 @@ public class HostManagerServlet
         add(writer, name, aliases, appBase, manager,
             autoDeploy,
             deployOnStartup,
-            deployXML,                                       
+            deployXML,
             unpackWARs,
             smClient);
     }
@@ -341,11 +341,11 @@ public class HostManagerServlet
      * @param manager should the manager webapp be deployed to the new host ?
      */
     protected synchronized void add
-        (PrintWriter writer, String name, String aliases, String appBase, 
+        (PrintWriter writer, String name, String aliases, String appBase,
          boolean manager,
          boolean autoDeploy,
          boolean deployOnStartup,
-         boolean deployXML,                                       
+         boolean deployXML,
          boolean unpackWARs,
          StringManager smClient) {
         if (debug >= 1) {
@@ -387,10 +387,10 @@ public class HostManagerServlet
                     appBaseFile.toString(), name));
             return;
         }
-        
+
         // Create base for config files
         File configBaseFile = getConfigBase(name);
-        
+
         // Copy manager.xml if requested
         if (manager) {
             if (configBaseFile == null) {
@@ -432,7 +432,7 @@ public class HostManagerServlet
                 }
             }
         }
-        
+
         StandardHost host = new StandardHost();
         host.setAppBase(appBase);
         host.setName(name);
@@ -450,7 +450,7 @@ public class HostManagerServlet
         host.setDeployOnStartup(deployOnStartup);
         host.setDeployXML(deployXML);
         host.setUnpackWARs(unpackWARs);
-        
+
         // Add new host
         try {
             engine.addChild(host);
@@ -459,7 +459,7 @@ public class HostManagerServlet
                     e.toString()));
             return;
         }
-        
+
         host = (StandardHost) engine.findChild(name);
         if (host != null) {
             writer.println(smClient.getString("hostManagerServlet.add", name));
@@ -468,7 +468,7 @@ public class HostManagerServlet
             writer.println(smClient.getString(
                     "hostManagerServlet.addFailed", name));
         }
-        
+
     }
 
 
@@ -517,7 +517,7 @@ public class HostManagerServlet
                     e.toString()));
             return;
         }
-        
+
         Host host = (StandardHost) engine.findChild(name);
         if (host == null) {
             writer.println(smClient.getString(
@@ -527,7 +527,7 @@ public class HostManagerServlet
             writer.println(smClient.getString(
                     "hostManagerServlet.removeFailed", name));
         }
-        
+
     }
 
 
@@ -583,7 +583,7 @@ public class HostManagerServlet
         }
 
         Container host = engine.findChild(name);
-        
+
         // Check if host exists
         if (host == null) {
             writer.println(smClient.getString(
@@ -619,7 +619,7 @@ public class HostManagerServlet
                     "hostManagerServlet.exception", e.toString()));
             return;
         }
-        
+
     }
 
 
@@ -680,7 +680,7 @@ public class HostManagerServlet
                     e.toString()));
             return;
         }
-        
+
     }
 
 
@@ -691,7 +691,7 @@ public class HostManagerServlet
      * Get config base.
      */
     protected File getConfigBase(String hostName) {
-        File configBase = 
+        File configBase =
             new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
         if (!configBase.exists()) {
             return null;

==================================================
ReverseComparator.java
index ffc5c64b72..04e567ed30 100644
--- a/java/org/apache/catalina/manager/util/BaseSessionComparator.java
+++ b/java/org/apache/catalina/manager/util/BaseSessionComparator.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -28,7 +28,7 @@ import org.apache.catalina.Session;
 public abstract class BaseSessionComparator<T> implements Comparator<Session> {
 
     /**
-     * 
+     *
      */
     public BaseSessionComparator() {
         super();

==================================================
SessionUtils.java
index b699ef89d2..51197b6f67 100644
--- a/java/org/apache/catalina/manager/util/ReverseComparator.java
+++ b/java/org/apache/catalina/manager/util/ReverseComparator.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -29,7 +29,7 @@ public class ReverseComparator implements Comparator<Session> {
     protected Comparator<Session> comparator;
 
     /**
-     * 
+     *
      */
     public ReverseComparator(Comparator<Session> comparator) {
         super();

==================================================
