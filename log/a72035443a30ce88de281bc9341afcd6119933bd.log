a72035443a30ce88de281bc9341afcd6119933bd
==================================================
Bring the Http11 protocol implementations closer together.
==================================================
Mark Emlyn
==================================================
Fri Jul 8 14:04:08 2011 +0000
==================================================
AbstractHttp11Processor.java
Bring the Http11 protocol implementations closer together.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1144317 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 5e56b56158..e3e489ce03 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -103,6 +103,12 @@ public abstract class AbstractHttp11Processor extends AbstractProcessor {
     protected boolean expectation = false;
 
 
+    /**
+     * Comet used.
+     */
+    protected boolean comet = false;
+
+
     /**
      * Regular expression that defines the restricted user agents.
      */
@@ -1242,6 +1248,9 @@ public abstract class AbstractHttp11Processor extends AbstractProcessor {
     }
 
 
+    public abstract SocketState event(SocketStatus status) throws IOException;
+
+
     /**
      * Provides a mechanism for those connector implementations (currently only
      * NIO) that need to reset timeouts from Async timeouts to standard HTTP

==================================================
Http11AprProtocol.java
index dd0a880feb..38fb8e9164 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -93,12 +93,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
     protected AprEndpoint.SendfileData sendfileData = null;
 
 
-    /**
-     * Comet used.
-     */
-    protected boolean comet = false;
-
-
     /**
      * Socket associated with the current connection.
      */
@@ -128,6 +122,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
      *
      * @throws IOException error during an I/O operation
      */
+    @Override
     public SocketState event(SocketStatus status)
         throws IOException {
         

==================================================
Http11NioProcessor.java
index 5c7de18f2f..c228f8fba1 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -214,8 +214,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
         @Override
         public SocketState process(SocketWrapper<Long> socket,
                 SocketStatus status) {
-            Http11AprProcessor processor =
-                connections.remove(socket.getSocket());
+            Http11AprProcessor processor = connections.remove(socket.getSocket());
             
             socket.setAsync(false);
 
@@ -227,6 +226,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                     processor = createProcessor();
                 }
 
+                initSsl(socket, processor);
+
                 SocketState state = SocketState.CLOSED;
                 do {
                     if (processor.isAsync() || state == SocketState.ASYNC_END) {
@@ -266,7 +267,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                     recycledProcessors.offer(processor);
                 }
                 return state;
-
             } catch (java.net.SocketException e) {
                 // SocketExceptions are normal
                 log.debug(sm.getString(
@@ -292,6 +292,11 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
             return SocketState.CLOSED;
         }
 
+        private void initSsl(SocketWrapper<Long> socket,
+                Http11AprProcessor processor) {
+            // NOOP for APR
+        }
+
         protected Http11AprProcessor createProcessor() {
             Http11AprProcessor processor = new Http11AprProcessor(
                     proto.getMaxHttpHeaderSize(), (AprEndpoint)proto.endpoint,

==================================================
Http11NioProtocol.java
index 4f30570052..fcc6b7515a 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -95,11 +95,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
      */
     protected NioEndpoint.SendfileData sendfileData = null;
 
-    /**
-     * Comet used.
-     */
-    protected boolean comet = false;
-    
     /**
      * Closed flag, a Comet async thread can 
      * signal for this Nio processor to be closed and recycled instead
@@ -123,6 +118,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
      *
      * @throws IOException error during an I/O operation
      */
+    @Override
     public SocketState event(SocketStatus status)
         throws IOException {
 

==================================================
Http11Processor.java
index ff5d677819..e4dc0df101 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -245,16 +245,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                     processor = createProcessor();
                 }
 
-                if (proto.isSSLEnabled() &&
-                        (proto.sslImplementation != null)
-                        && (socket.getSocket() instanceof SecureNioChannel)) {
-                    SecureNioChannel ch = (SecureNioChannel)socket.getSocket();
-                    processor.setSslSupport(
-                            proto.sslImplementation.getSSLSupport(
-                                    ch.getSslEngine().getSession()));
-                } else {
-                    processor.setSslSupport(null);
-                }
+                initSsl(socket, processor);
 
                 SocketState state = SocketState.CLOSED;
                 do {
@@ -299,7 +290,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                     release(socket, processor);
                 }
                 return state;
-
             } catch (java.net.SocketException e) {
                 // SocketExceptions are normal
                 log.debug(sm.getString(
@@ -323,6 +313,21 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             return SocketState.CLOSED;
         }
 
+        private void initSsl(SocketWrapper<NioChannel> socket,
+                Http11NioProcessor processor) {
+            if (proto.isSSLEnabled() &&
+                    (proto.sslImplementation != null)
+                    && (socket.getSocket() instanceof SecureNioChannel)) {
+                SecureNioChannel ch = (SecureNioChannel)socket.getSocket();
+                processor.setSslSupport(
+                        proto.sslImplementation.getSSLSupport(
+                                ch.getSslEngine().getSession()));
+            } else {
+                processor.setSslSupport(null);
+            }
+
+        }
+
         public Http11NioProcessor createProcessor() {
             Http11NioProcessor processor = new Http11NioProcessor(
                     proto.getMaxHttpHeaderSize(), (NioEndpoint)proto.endpoint,

==================================================
Http11Protocol.java
index 5cc1e1866c..633f02cbfc 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -386,6 +386,13 @@ public class Http11Processor extends AbstractHttp11Processor {
     }
 
 
+    @Override
+    public SocketState event(SocketStatus status) throws IOException {
+        // Should never reach this code but in case we do...
+        throw new IOException(
+                sm.getString("http11processor.comet.notsupported"));
+    }
+
     // ----------------------------------------------------- ActionHook Methods
 
 

==================================================
