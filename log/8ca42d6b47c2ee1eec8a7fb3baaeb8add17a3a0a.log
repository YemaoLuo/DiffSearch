8ca42d6b47c2ee1eec8a7fb3baaeb8add17a3a0a
==================================================
Allow Checkstyle's unused imports test to be used with the o.a.catalina.valves package
==================================================
Mark Emlyn
==================================================
Sun Oct 24 12:13:53 2010 +0000
==================================================
AccessLogValve.java
Allow Checkstyle's unused imports test to be used with the o.a.catalina.valves package
Fix some Eclipse warnings


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1026771 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CometConnectionManagerValve.java
index a8492614ad..d26f1b6956 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -42,7 +42,6 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.coyote.RequestInfo;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -361,12 +360,13 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     public void setPattern(String pattern) {
         if (pattern == null)
-            pattern = "";
-        if (pattern.equals(Constants.AccessLog.COMMON_ALIAS))
-            pattern = Constants.AccessLog.COMMON_PATTERN;
-        if (pattern.equals(Constants.AccessLog.COMBINED_ALIAS))
-            pattern = Constants.AccessLog.COMBINED_PATTERN;
-        this.pattern = pattern;
+            this.pattern = "";
+        else if (pattern.equals(Constants.AccessLog.COMMON_ALIAS))
+            this.pattern = Constants.AccessLog.COMMON_PATTERN;
+        else if (pattern.equals(Constants.AccessLog.COMBINED_ALIAS))
+            this.pattern = Constants.AccessLog.COMBINED_PATTERN;
+        else
+            this.pattern = pattern;
         logElements = createLogElements();
     }
 
@@ -573,6 +573,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
     }
 
     
+    @Override
     public void log(Request request, Response response, long time) {
         if (logElements == null || condition != null
                 && null != request.getRequest().getAttribute(condition)) {
@@ -809,7 +810,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
 
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -836,7 +837,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
 
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -861,6 +862,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write thread name - %I
      */
     protected class ThreadNameElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             RequestInfo info = request.getCoyoteRequest().getRequestProcessor();
@@ -890,6 +892,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             LOCAL_ADDR_VALUE = init;
         }
         
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(LOCAL_ADDR_VALUE);
@@ -900,6 +903,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write remote IP address - %a
      */
     protected class RemoteAddrElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(request.getRemoteAddr());
@@ -910,6 +914,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write remote host name - %h
      */
     protected class HostElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(request.getRemoteHost());
@@ -920,6 +925,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write remote logical username from identd (always returns '-') - %l
      */
     protected class LogicalUserNameElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append('-');
@@ -930,6 +936,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write request protocol - %H
      */
     protected class ProtocolElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(request.getProtocol());
@@ -940,6 +947,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write remote user that was authenticated (if any), else '-' - %u
      */
     protected class UserElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
@@ -961,6 +969,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
     protected class DateAndTimeElement implements AccessLogElement {
 
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             AccessDateStruct struct = currentDateStruct.get();
@@ -987,6 +996,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write first line of the request (method and request URI) - %r
      */
     protected class RequestElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
@@ -1009,6 +1019,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write HTTP status code of the response - %s
      */
     protected class HttpStatusCodeElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (response != null) {
@@ -1023,6 +1034,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write local port on which this request was received - %p
      */
     protected class LocalPortElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(request.getServerPort());
@@ -1042,6 +1054,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.conversion = conversion;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             long length = response.getContentCountLong() ;
@@ -1057,6 +1070,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write request method (GET, POST, etc.) - %m
      */
     protected class MethodElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
@@ -1079,6 +1093,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.millis = millis;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (millis) {
@@ -1100,6 +1115,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write Query string (prepended with a '?' if it exists) - %q
      */
     protected class QueryElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             String query = null;
@@ -1116,6 +1132,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write user session ID - %S
      */
     protected class SessionIdElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
@@ -1135,6 +1152,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write requested URL path - %U
      */
     protected class RequestURIElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
@@ -1149,6 +1167,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * write local server name - %v
      */
     protected class LocalServerNameElement implements AccessLogElement {
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(request.getServerName());
@@ -1165,6 +1184,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.str = str;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(str);
@@ -1181,6 +1201,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.header = header;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             String value = request.getHeader(header);
@@ -1202,6 +1223,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.header = header;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             String value = "-";
@@ -1228,6 +1250,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.header = header;
         }
         
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
            if (null != response) {
@@ -1255,6 +1278,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.header = header;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             Object value = null;
@@ -1285,6 +1309,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             this.header = header;
         }
 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             Object value = null;

==================================================
ExtendedAccessLogValve.java
index f839f0c6b3..29226a7b57 100644
--- a/java/org/apache/catalina/valves/CometConnectionManagerValve.java
+++ b/java/org/apache/catalina/valves/CometConnectionManagerValve.java
@@ -41,7 +41,6 @@ import org.apache.catalina.comet.CometProcessor;
 import org.apache.catalina.connector.CometEventImpl;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -97,7 +96,7 @@ public class CometConnectionManagerValve extends ValveBase
 
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -115,7 +114,7 @@ public class CometConnectionManagerValve extends ValveBase
 
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -131,6 +130,7 @@ public class CometConnectionManagerValve extends ValveBase
     }
 
     
+    @Override
     public void lifecycleEvent(LifecycleEvent event) {
         if (Lifecycle.BEFORE_STOP_EVENT.equals(event.getType())) {
             // The container is getting stopped, close all current connections 
@@ -305,11 +305,13 @@ public class CometConnectionManagerValve extends ValveBase
     }
 
 
+    @Override
     public void sessionCreated(HttpSessionEvent se) {
         // NOOP
     }
 
 
+    @Override
     public void sessionDestroyed(HttpSessionEvent se) {
         // Close all Comet connections associated with this session
         Request[] reqs = (Request[])

==================================================
JDBCAccessLogValve.java
index 2709763a4d..9bb0e8101c 100644
--- a/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
+++ b/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
@@ -235,6 +235,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             }
         };
                 
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             ElementTimestampStruct eds = currentDate.get();
@@ -262,6 +263,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             }
         };
             
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             ElementTimestampStruct eds = currentTime.get();
@@ -283,6 +285,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
         public RequestHeaderElement(String header) {
             this.header = header;
         }
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(wrap(request.getHeader(header)));
@@ -296,6 +299,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             this.header = header;
         }
         
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(wrap(response.getHeader(header)));
@@ -308,6 +312,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
         public ServletContextElement(String attribute) {
             this.attribute = attribute;
         }
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(wrap(request.getContext().getServletContext()
@@ -321,6 +326,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
         public CookieElement(String name) {
             this.name = name;
         }
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             Cookie[] c = request.getCookies();
@@ -342,6 +348,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             this.header = header;
         }
         
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             if (null != response) {
@@ -370,6 +377,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             this.attribute = attribute;
         }
         
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(wrap(request.getAttribute(attribute)));
@@ -382,6 +390,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
         public SessionAttributeElement(String attribute) {
             this.attribute = attribute;
         }
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             HttpSession session = null;
@@ -409,6 +418,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             return URLEncoder.encode(value);
         }   
         
+        @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
             buf.append(wrap(urlEncode(request.getParameter(parameter))));
@@ -608,6 +618,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
                 return new LocalAddrElement();
             } else if ("dns".equals(nextToken)) {
                 return new AccessLogElement() {
+                    @Override
                     public void addElement(StringBuilder buf, Date date,
                             Request request, Response response, long time) {
                         String value;
@@ -647,6 +658,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
                         return new RequestURIElement();
                     } else if ("query".equals(token)) {
                         return new AccessLogElement() {
+                            @Override
                             public void addElement(StringBuilder buf, Date date,
                                     Request request, Response response,
                                     long time) {
@@ -661,6 +673,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
                     }
                 } else {
                     return new AccessLogElement() {
+                        @Override
                         public void addElement(StringBuilder buf, Date date,
                                 Request request, Response response, long time) {
                             String query = request.getQueryString();
@@ -763,6 +776,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
     protected AccessLogElement getServletRequestElement(String parameter) {
         if ("authType".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(request.getAuthType()));
@@ -770,6 +784,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("remoteUser".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(request.getRemoteUser()));
@@ -777,6 +792,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("requestedSessionId".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(request.getRequestedSessionId()));
@@ -784,6 +800,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("requestedSessionIdFromCookie".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(""
@@ -792,6 +809,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("requestedSessionIdValid".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap("" + request.isRequestedSessionIdValid()));
@@ -799,6 +817,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("contentLength".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap("" + request.getContentLength()));
@@ -806,6 +825,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("characterEncoding".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(request.getCharacterEncoding()));
@@ -813,6 +833,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("locale".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(request.getLocale()));
@@ -820,6 +841,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("protocol".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap(request.getProtocol()));
@@ -827,6 +849,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("scheme".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(request.getScheme());
@@ -834,6 +857,7 @@ public class ExtendedAccessLogValve extends AccessLogValve {
             };
         } else if ("secure".equals(parameter)) {
             return new AccessLogElement() {
+                @Override
                 public void addElement(StringBuilder buf, Date date,
                         Request request, Response response, long time) {
                     buf.append(wrap("" + request.isSecure()));

==================================================
PersistentValve.java
index 72c04ed9ed..a6d9ee060d 100644
--- a/java/org/apache/catalina/valves/JDBCAccessLogValve.java
+++ b/java/org/apache/catalina/valves/JDBCAccessLogValve.java
@@ -34,7 +34,6 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -605,7 +604,7 @@ public final class JDBCAccessLogValve extends ValveBase implements AccessLog {
     
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -625,7 +624,7 @@ public final class JDBCAccessLogValve extends ValveBase implements AccessLog {
 
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used

==================================================
RemoteIpValve.java
index 93ae98c9a8..248cb1f40f 100644
--- a/java/org/apache/catalina/valves/PersistentValve.java
+++ b/java/org/apache/catalina/valves/PersistentValve.java
@@ -182,10 +182,12 @@ public class PersistentValve extends ValveBase {
                     session.recycle();
                 } else {
                     if (container.getLogger().isDebugEnabled())
-                        container.getLogger().debug("newsessionId store: " + store + " session: " +
-                                session + " valid: " + session.isValid() +
-                                " Staled: " +
-                                isSessionStale(session, System.currentTimeMillis()));
+                        container.getLogger().debug("newsessionId store: " +
+                                store + " session: " + session + " valid: " +
+                                (session == null ? "N/A" : Boolean.toString(
+                                        session.isValid())) +
+                                " Staled: " + isSessionStale(session,
+                                        System.currentTimeMillis()));
 
                 }
             } else {
@@ -203,12 +205,14 @@ public class PersistentValve extends ValveBase {
      */
     protected boolean isSessionStale(Session session, long timeNow) {
  
-        int maxInactiveInterval = session.getMaxInactiveInterval();
-        if (maxInactiveInterval >= 0) {
-            int timeIdle = // Truncate, do not round up
-                (int) ((timeNow - session.getThisAccessedTime()) / 1000L);
-            if (timeIdle >= maxInactiveInterval)
-                return true;
+        if (session != null) {
+            int maxInactiveInterval = session.getMaxInactiveInterval();
+            if (maxInactiveInterval >= 0) {
+                int timeIdle = // Truncate, do not round up
+                    (int) ((timeNow - session.getThisAccessedTime()) / 1000L);
+                if (timeIdle >= maxInactiveInterval)
+                    return true;
+            }
         }
  
         return false;

==================================================
SemaphoreValve.java
index 9c8dfd0de5..774cf78fac 100644
--- a/java/org/apache/catalina/valves/RemoteIpValve.java
+++ b/java/org/apache/catalina/valves/RemoteIpValve.java
@@ -26,7 +26,6 @@ import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
 import javax.servlet.ServletException;
-import javax.servlet.ServletRequest;
 
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
@@ -125,14 +124,14 @@ import org.apache.tomcat.util.res.StringManager;
  * </tr>
  * <tr>
  * <td>httpServerPort</td>
- * <td>Value returned by {@link ServletRequest#getServerPort()} when the <code>protocolHeader</code> indicates <code>http</code> protocol</td>
+ * <td>Value returned by {@link javax.servlet.ServletRequest#getServerPort()} when the <code>protocolHeader</code> indicates <code>http</code> protocol</td>
  * <td>N/A</td>
  * <td>integer</td>
  * <td>80</td>
  * </tr>
  * <tr>
  * <td>httpsServerPort</td>
- * <td>Value returned by {@link ServletRequest#getServerPort()} when the <code>protocolHeader</code> indicates <code>https</code> protocol</td>
+ * <td>Value returned by {@link javax.servlet.ServletRequest#getServerPort()} when the <code>protocolHeader</code> indicates <code>https</code> protocol</td>
  * <td>N/A</td>
  * <td>integer</td>
  * <td>443</td>

==================================================
ValveBase.java
index 9b95dab712..0715da1e5c 100644
--- a/java/org/apache/catalina/valves/SemaphoreValve.java
+++ b/java/org/apache/catalina/valves/SemaphoreValve.java
@@ -14,11 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.valves;
 
-
 import java.io.IOException;
 import java.util.concurrent.Semaphore;
 
@@ -28,7 +25,6 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleBase;
 
 
 /**
@@ -101,7 +97,7 @@ public class SemaphoreValve extends ValveBase {
 
     /**
      * Start this component and implement the requirements
-     * of {@link LifecycleBase#startInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -117,7 +113,7 @@ public class SemaphoreValve extends ValveBase {
 
     /**
      * Stop this component and implement the requirements
-     * of {@link LifecycleBase#stopInternal()}.
+     * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
@@ -200,10 +196,14 @@ public class SemaphoreValve extends ValveBase {
     
 
     /**
-     * Subclass friendly method to add error handling when a permit isn't granted.
+     * Subclass friendly method to add error handling when a permit isn't
+     * granted.
+     * @throws IOException
+     * @throws ServletException
      */
     public void permitDenied(Request request, Response response)
         throws IOException, ServletException {
+        // NO-OP by default
     }
     
 

==================================================
