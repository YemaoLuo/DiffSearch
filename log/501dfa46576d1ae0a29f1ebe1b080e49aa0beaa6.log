501dfa46576d1ae0a29f1ebe1b080e49aa0beaa6
==================================================
Code cleanups and i18n in NIO2.
==================================================
Remy Maucherat
==================================================
Fri Apr 4 10:10:28 2014 +0000
==================================================
Http11Nio2Processor.java
Code cleanups and i18n in NIO2.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1584593 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNio2InputBuffer.java
index 4e78c3c7a7..be40fe1530 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -455,7 +455,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
                                 .getSslImplementation().getSSLSupport(
                                         engine.getSession());
                     } catch (IOException ioe) {
-                        log.warn(sm.getString("http11processor.socket.sslreneg",ioe));
+                        log.warn(sm.getString("http11processor.socket.sslreneg"), ioe);
                     }
                 }
 

==================================================
InternalNio2OutputBuffer.java
index 7bb6f17f67..2ae7277db9 100644
--- a/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
@@ -755,11 +755,11 @@ public class InternalNio2InputBuffer extends AbstractInputBuffer<Nio2Channel> {
                 synchronized (completionHandler) {
                     if (nBytes.intValue() < 0) {
                         failed(new EOFException(sm.getString("iib.eof.error")), attachment);
-                        return;
-                    }
-                    readPending = false;
-                    if (!Nio2Endpoint.isInline()) {
-                        notify = true;
+                    } else {
+                        readPending = false;
+                        if (!Nio2Endpoint.isInline()) {
+                            notify = true;
+                        }
                     }
                 }
                 if (notify) {

==================================================
Nio2Channel.java
index 580e9c8df4..4d26993ed3 100644
--- a/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
@@ -118,7 +118,6 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                 synchronized (completionHandler) {
                     if (nBytes.intValue() < 0) {
                         failed(new EOFException(sm.getString("iob.failedwrite")), attachment);
-                        return;
                     } else if (bufferedWrites.size() > 0) {
                         // Continue writing data using a gathering write
                         ArrayList<ByteBuffer> arrayList = new ArrayList<>();
@@ -172,7 +171,6 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                 synchronized (completionHandler) {
                     if (nBytes.longValue() < 0) {
                         failed(new EOFException(sm.getString("iob.failedwrite")), attachment);
-                        return;
                     } else if (bufferedWrites.size() > 0 || arrayHasData(attachment)) {
                         // Continue writing data
                         ArrayList<ByteBuffer> arrayList = new ArrayList<>();

==================================================
Nio2Endpoint.java
index eef328f610..7b44936a62 100644
--- a/java/org/apache/tomcat/util/net/Nio2Channel.java
+++ b/java/org/apache/tomcat/util/net/Nio2Channel.java
@@ -39,13 +39,9 @@ public class Nio2Channel implements AsynchronousByteChannel {
 
     protected AsynchronousSocketChannel sc = null;
     protected SocketWrapper<Nio2Channel> socket = null;
-
     protected ApplicationBufferHandler bufHandler;
 
-    protected boolean sendFile = false;
-
-    public Nio2Channel(AsynchronousSocketChannel channel, ApplicationBufferHandler bufHandler) {
-        this.sc = channel;
+    public Nio2Channel(ApplicationBufferHandler bufHandler) {
         this.bufHandler = bufHandler;
     }
 
@@ -54,15 +50,12 @@ public class Nio2Channel implements AsynchronousByteChannel {
      *
      * @throws IOException If a problem was encountered resetting the channel
      */
-    public void reset() throws IOException {
+    public void reset(AsynchronousSocketChannel channel, SocketWrapper<Nio2Channel> socket)
+            throws IOException {
+        this.sc = channel;
+        this.socket = socket;
         bufHandler.getReadBuffer().clear();
         bufHandler.getWriteBuffer().clear();
-        sendFile = false;
-        socket = null;
-    }
-
-    void setSocket(SocketWrapper<Nio2Channel> socket) {
-        this.socket = socket;
     }
 
     public SocketWrapper<Nio2Channel> getSocket() {
@@ -130,23 +123,11 @@ public class Nio2Channel implements AsynchronousByteChannel {
         return 0;
     }
 
-    public void setIOChannel(AsynchronousSocketChannel IOChannel) {
-        this.sc = IOChannel;
-    }
-
     @Override
     public String toString() {
         return super.toString()+":"+this.sc.toString();
     }
 
-    public boolean isSendFile() {
-        return sendFile;
-    }
-
-    public void setSendFile(boolean s) {
-        this.sendFile = s;
-    }
-
     @Override
     public Future<Integer> read(ByteBuffer dst) {
         return sc.read(dst);

==================================================
SecureNio2Channel.java
index f242f73366..14aaa7c291 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -415,9 +415,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
      */
     @Override
     public void unbind() throws Exception {
-        if (log.isDebugEnabled()) {
-            log.debug("Destroy initiated for "+new InetSocketAddress(getAddress(),getPort()));
-        }
         if (running) {
             stop();
         }
@@ -428,9 +425,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         // Unlike other connectors, the thread pool is tied to the server socket
         shutdownExecutor();
         releaseCaches();
-        if (log.isDebugEnabled()) {
-            log.debug("Destroy completed for "+new InetSocketAddress(getAddress(),getPort()));
-        }
     }
 
 
@@ -505,34 +499,32 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                 if (sslContext != null) {
                     SSLEngine engine = createSSLEngine();
                     int appBufferSize = engine.getSession().getApplicationBufferSize();
-                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appBufferSize, socketProperties.getAppReadBufSize()),
+                    NioBufferHandler bufhandler = new NioBufferHandler(
+                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),
                             Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),
                             socketProperties.getDirectBuffer());
-                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);
+                    channel = new SecureNio2Channel(engine, bufhandler, this);
                 } else {
-                    // normal tcp setup
-                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),
-                                                                       socketProperties.getAppWriteBufSize(),
-                                                                       socketProperties.getDirectBuffer());
-
-                    channel = new Nio2Channel(socket, bufhandler);
+                    NioBufferHandler bufhandler = new NioBufferHandler(
+                            socketProperties.getAppReadBufSize(),
+                            socketProperties.getAppWriteBufSize(),
+                            socketProperties.getDirectBuffer());
+                    channel = new Nio2Channel(bufhandler);
                 }
             } else {
-                channel.setIOChannel(socket);
-                if (channel instanceof SecureNio2Channel) {
+                if (sslContext != null) {
                     SSLEngine engine = createSSLEngine();
                     ((SecureNio2Channel) channel).setSSLEngine(engine);
                 }
-                channel.reset();
             }
             Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;
             if (socketWrapper == null) {
                 socketWrapper = new Nio2SocketWrapper(channel);
             }
+            channel.reset(socket, socketWrapper);
             socketWrapper.reset(channel, getSocketProperties().getSoTimeout());
             socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());
             socketWrapper.setSecure(isSSLEnabled());
-            channel.setSocket(socketWrapper);
             if (sslContext != null) {
                 // Use the regular processing, as the first handshake needs to be done there
                 processSocket(socketWrapper, SocketStatus.OPEN_READ, true);
@@ -983,7 +975,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
         if (nr >= 0) {
-            socket.getSocket().setSendFile(true);
             buffer.flip();
             socket.getSocket().write(buffer, data, new CompletionHandler<Integer, SendfileData>() {
 
@@ -1010,7 +1001,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                             // Ignore
                         }
                         if (attachment.keepAlive) {
-                            socket.getSocket().setSendFile(false);
                             awaitBytes(socket);
                         } else {
                             closeSocket(socket, SocketStatus.DISCONNECT);
@@ -1036,7 +1026,10 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                                 ok = false;
                             }
                         } catch (Throwable th) {
-                            if ( log.isDebugEnabled() ) log.debug("Unable to complete sendfile request:", th);
+                            ExceptionUtils.handleThrowable(th);
+                            if (log.isDebugEnabled()) {
+                                log.debug(sm.getString("endpoint.sendfile.error"), th);
+                            }
                             ok = false;
                         }
                     }
@@ -1132,7 +1125,9 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                     }
                 } catch (IOException x) {
                     handshake = -1;
-                    if (log.isDebugEnabled()) log.debug("Error during SSL handshake",x);
+                    if (log.isDebugEnabled()) {
+                        log.debug(sm.getString("endpoint.err.handshake"), x);
+                    }
                 }
                 if (handshake == 0) {
                     SocketState state = SocketState.OPEN;
@@ -1144,17 +1139,13 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                     }
                     if (state == SocketState.CLOSED) {
                         // Close socket and pool
-                        try {
-                            socket.setComet(false);
-                            closeSocket(socket, SocketStatus.ERROR);
-                            if (useCaches && running && !paused) {
-                                nioChannels.push(socket.getSocket());
-                            }
-                            if (useCaches && running && !paused && socket != null) {
-                                socketWrapperCache.push((Nio2SocketWrapper) socket);
-                            }
-                        } catch (Exception x) {
-                            log.error("",x);
+                        socket.setComet(false);
+                        closeSocket(socket, SocketStatus.ERROR);
+                        if (useCaches && running && !paused) {
+                            nioChannels.push(socket.getSocket());
+                        }
+                        if (useCaches && running && !paused && socket != null) {
+                            socketWrapperCache.push((Nio2SocketWrapper) socket);
                         }
                     } else if (state == SocketState.UPGRADING) {
                         socket.setKeptAlive(true);
@@ -1191,7 +1182,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             } catch (VirtualMachineError vme) {
                 ExceptionUtils.handleThrowable(vme);
             } catch (Throwable t) {
-                log.error("", t);
+                log.error(sm.getString("endpoint.processing.fail"), t);
                 if (socket != null) {
                     closeSocket(socket, SocketStatus.ERROR);
                 }

==================================================
