8c6a1c6d8449960f197f9fcad6f21944786ea0ef
==================================================
ConnectionHandler is independent of ProcessorType
==================================================
Mark Thomas
==================================================
Sun Nov 8 16:53:31 2015 +0000
==================================================
AbstractProtocol.java
ConnectionHandler is independent of ProcessorType

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713257 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 5557d1e222..a3975e7dd7 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -657,7 +657,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
 
     // ------------------------------------------- Connection handler base class
 
-    protected static class ConnectionHandler<S,P extends Processor>
+    protected static class ConnectionHandler<S>
             implements AbstractEndpoint.Handler<S> {
 
         private final AbstractProtocol<S> proto;
@@ -668,7 +668,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
         protected final ConcurrentHashMap<S,Processor> connections =
                 new ConcurrentHashMap<>();
 
-        protected final RecycledProcessors<P,S> recycledProcessors =
+        protected final RecycledProcessors<S> recycledProcessors =
                 new RecycledProcessors<>(this);
 
         public ConnectionHandler(AbstractProtocol<S> proto) {
@@ -1015,13 +1015,12 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
         }
     }
 
-    protected static class RecycledProcessors<P extends Processor, S>
-            extends SynchronizedStack<Processor> {
+    protected static class RecycledProcessors<S> extends SynchronizedStack<Processor> {
 
-        private final transient ConnectionHandler<S,P> handler;
+        private final transient ConnectionHandler<S> handler;
         protected final AtomicInteger size = new AtomicInteger(0);
 
-        public RecycledProcessors(ConnectionHandler<S,P> handler) {
+        public RecycledProcessors(ConnectionHandler<S> handler) {
             this.handler = handler;
         }
 

==================================================
AbstractHttp11Protocol.java
index 34bd42cccb..3ac08aac9b 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -48,7 +48,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         // AJP does not use Send File
         getEndpoint().setUseSendfile(false);
-        ConnectionHandler<S,AjpProcessor> cHandler = new ConnectionHandler<>(this);
+        ConnectionHandler<S> cHandler = new ConnectionHandler<>(this);
         setHandler(cHandler);
         getEndpoint().setHandler(cHandler);
     }

==================================================
