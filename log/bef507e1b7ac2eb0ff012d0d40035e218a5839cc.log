bef507e1b7ac2eb0ff012d0d40035e218a5839cc
==================================================
Improve entity tag handling
==================================================
Mark Thomas
==================================================
Tue Aug 11 15:27:45 2020 +0100
==================================================
DefaultServlet.java
index a6859476a7..b5e0b30c9f 100644
--- a/conf/web.xml
+++ b/conf/web.xml
@@ -114,6 +114,14 @@
   <!--                       with a Range header as a partial PUT? Note     -->
   <!--                       that RFC 7233 clarified that Range headers are -->
   <!--                       only valid for GET requests. [true]            -->
+  <!--                                                                      -->
+  <!--   useWeakComparisonWithIfMatch                                       -->
+  <!--                       When comparing entity tags for If-Match        -->
+  <!--                       headers should a weak comparison be used       -->
+  <!--                       rather than the strong comparison required by  -->
+  <!--                       RFC 7232? A weak comparison is used by default -->
+  <!--                       since the default resources implementation     -->
+  <!--                       generates weak entity tags. [true]             -->
 
     <servlet>
         <servlet-name>default</servlet-name>

==================================================
EntityTag.java
index 466f1dfb07..513353f1e4 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -43,7 +43,7 @@ import java.util.Comparator;
 import java.util.Enumeration;
 import java.util.List;
 import java.util.Locale;
-import java.util.StringTokenizer;
+import java.util.Set;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -81,6 +81,7 @@ import org.apache.catalina.webresources.CachedResource;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.http.ResponseUtil;
 import org.apache.tomcat.util.http.parser.ContentRange;
+import org.apache.tomcat.util.http.parser.EntityTag;
 import org.apache.tomcat.util.http.parser.Ranges;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.security.Escape;
@@ -279,6 +280,8 @@ public class DefaultServlet extends HttpServlet {
      */
     private boolean allowPartialPut = true;
 
+    protected boolean useWeakComparisonWithIfMatch = true;
+
 
     // --------------------------------------------------------- Public Methods
 
@@ -297,27 +300,31 @@ public class DefaultServlet extends HttpServlet {
     @Override
     public void init() throws ServletException {
 
-        if (getServletConfig().getInitParameter("debug") != null)
+        if (getServletConfig().getInitParameter("debug") != null) {
             debug = Integer.parseInt(getServletConfig().getInitParameter("debug"));
+        }
 
-        if (getServletConfig().getInitParameter("input") != null)
+        if (getServletConfig().getInitParameter("input") != null) {
             input = Integer.parseInt(getServletConfig().getInitParameter("input"));
+        }
 
-        if (getServletConfig().getInitParameter("output") != null)
+        if (getServletConfig().getInitParameter("output") != null) {
             output = Integer.parseInt(getServletConfig().getInitParameter("output"));
+        }
 
         listings = Boolean.parseBoolean(getServletConfig().getInitParameter("listings"));
 
-        if (getServletConfig().getInitParameter("readonly") != null)
+        if (getServletConfig().getInitParameter("readonly") != null) {
             readOnly = Boolean.parseBoolean(getServletConfig().getInitParameter("readonly"));
+        }
 
         compressionFormats = parseCompressionFormats(
                 getServletConfig().getInitParameter("precompressed"),
                 getServletConfig().getInitParameter("gzip"));
 
-        if (getServletConfig().getInitParameter("sendfileSize") != null)
-            sendfileSize =
-                Integer.parseInt(getServletConfig().getInitParameter("sendfileSize")) * 1024;
+        if (getServletConfig().getInitParameter("sendfileSize") != null) {
+            sendfileSize = Integer.parseInt(getServletConfig().getInitParameter("sendfileSize")) * 1024;
+        }
 
         fileEncoding = getServletConfig().getInitParameter("fileEncoding");
         if (fileEncoding == null) {
@@ -331,23 +338,31 @@ public class DefaultServlet extends HttpServlet {
             }
         }
 
-        if (getServletConfig().getInitParameter("useBomIfPresent") != null)
-            useBomIfPresent = Boolean.parseBoolean(
-                    getServletConfig().getInitParameter("useBomIfPresent"));
+        if (getServletConfig().getInitParameter("useBomIfPresent") != null) {
+            useBomIfPresent = Boolean.parseBoolean(getServletConfig().getInitParameter("useBomIfPresent"));
+        }
 
         globalXsltFile = getServletConfig().getInitParameter("globalXsltFile");
         contextXsltFile = getServletConfig().getInitParameter("contextXsltFile");
         localXsltFile = getServletConfig().getInitParameter("localXsltFile");
         readmeFile = getServletConfig().getInitParameter("readmeFile");
 
-        if (getServletConfig().getInitParameter("useAcceptRanges") != null)
+        if (getServletConfig().getInitParameter("useAcceptRanges") != null) {
             useAcceptRanges = Boolean.parseBoolean(getServletConfig().getInitParameter("useAcceptRanges"));
+        }
+
+        if (getServletConfig().getInitParameter("useWeakComparisonWithIfMatch") != null) {
+            useWeakComparisonWithIfMatch = Boolean.parseBoolean(
+                    getServletConfig().getInitParameter("useWeakComparisonWithIfMatch"));
+        }
 
         // Sanity check on the specified buffer sizes
-        if (input < 256)
+        if (input < 256) {
             input = 256;
-        if (output < 256)
+        }
+        if (output < 256) {
             output = 256;
+        }
 
         if (debug > 0) {
             log("DefaultServlet.init:  input buffer size=" + input +
@@ -355,8 +370,7 @@ public class DefaultServlet extends HttpServlet {
         }
 
         // Load the web resources
-        resources = (WebResourceRoot) getServletContext().getAttribute(
-                Globals.RESOURCES_ATTR);
+        resources = (WebResourceRoot) getServletContext().getAttribute(Globals.RESOURCES_ATTR);
 
         if (resources == null) {
             throw new UnavailableException(sm.getString("defaultServlet.noResources"));
@@ -2168,30 +2182,22 @@ public class DefaultServlet extends HttpServlet {
             eTag = eTag.substring(2);
         }
         String headerValue = request.getHeader("If-Match");
-        if (headerValue != null) {
-            if (headerValue.indexOf('*') == -1) {
+        if (headerValue != null && !headerValue.equals("*")) {
 
-                StringTokenizer commaTokenizer = new StringTokenizer(headerValue, ",");
-                boolean conditionSatisfied = false;
-
-                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {
-                    String currentToken = commaTokenizer.nextToken();
-                    currentToken = currentToken.trim();
-                    if (currentToken.startsWith("W/")) {
-                        currentToken = currentToken.substring(2);
-                    }
-                    if (currentToken.equals(eTag))
-                        conditionSatisfied = true;
-                }
-
-                // If none of the given ETags match, 412 Precondition failed is
-                // sent back
-                if (!conditionSatisfied) {
-                    response.sendError
-                        (HttpServletResponse.SC_PRECONDITION_FAILED);
-                    return false;
+            Set<String> eTags = EntityTag.parseEntityTag(new StringReader(headerValue), useWeakComparisonWithIfMatch);
+            if (eTags == null) {
+                if (debug > 10) {
+                    log("DefaultServlet.checkIfMatch:  Invalid header value [" + headerValue + "]");
                 }
+                response.sendError(HttpServletResponse.SC_BAD_REQUEST);
+                return false;
+            }
 
+            // If none of the given ETags match, 412 Precondition failed is
+            // sent back
+            if (!eTags.contains(eTag)) {
+                response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
+                return false;
             }
         }
         return true;
@@ -2250,46 +2256,48 @@ public class DefaultServlet extends HttpServlet {
             throws IOException {
 
         String eTag = generateETag(resource);
+        // If-None-Match uses weak comparison so strip the weak indicator if
+        // present
+        if (eTag.startsWith("W/")) {
+            eTag = eTag.substring(2);
+        }
         String headerValue = request.getHeader("If-None-Match");
         if (headerValue != null) {
 
             boolean conditionSatisfied = false;
 
             if (!headerValue.equals("*")) {
-
-                StringTokenizer commaTokenizer =
-                    new StringTokenizer(headerValue, ",");
-
-                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {
-                    String currentToken = commaTokenizer.nextToken();
-                    if (currentToken.trim().equals(eTag))
-                        conditionSatisfied = true;
+                Set<String> eTags = EntityTag.parseEntityTag(new StringReader(headerValue), true);
+                if (eTags == null) {
+                    if (debug > 10) {
+                        log("DefaultServlet.checkIfNoneMatch:  Invalid header value [" + headerValue + "]");
+                    }
+                    response.sendError(HttpServletResponse.SC_BAD_REQUEST);
+                    return false;
                 }
-
+                conditionSatisfied = eTags.contains(eTag);
             } else {
                 conditionSatisfied = true;
             }
 
             if (conditionSatisfied) {
-
                 // For GET and HEAD, we should respond with
                 // 304 Not Modified.
                 // For every other method, 412 Precondition Failed is sent
                 // back.
-                if ( ("GET".equals(request.getMethod()))
-                     || ("HEAD".equals(request.getMethod())) ) {
+                if ("GET".equals(request.getMethod()) || "HEAD".equals(request.getMethod())) {
                     response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                     response.setHeader("ETag", eTag);
-
-                    return false;
+                } else {
+                    response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
                 }
-                response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
                 return false;
             }
         }
         return true;
     }
 
+
     /**
      * Check if the if-unmodified-since condition is satisfied.
      *
@@ -2325,7 +2333,9 @@ public class DefaultServlet extends HttpServlet {
     /**
      * Provides the entity tag (the ETag header) for the given resource.
      * Intended to be over-ridden by custom DefaultServlet implementations that
-     * wish to use an alternative format for the entity tag.
+     * wish to use an alternative format for the entity tag. Such custom
+     * implementations that generate strong entity tags may also want to change
+     * the default value of {@link #useWeakComparisonWithIfMatch}.
      *
      * @param resource  The resource for which an entity tag is required.
      *

==================================================
TestDefaultServletIfMatchRequests.java
new file mode 100644
index 0000000000..abab6b7fcb
--- /dev/null
+++ b/java/org/apache/tomcat/util/http/parser/EntityTag.java
@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.http.parser;
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.HashSet;
+import java.util.Set;
+
+public class EntityTag {
+
+    /**
+     *
+     * @param input
+     * @param includeWeak
+     *
+     * @return The set of parsed entity tags or {@code null} if the header is
+     *         invalid
+     *
+     * @throws IOException
+     */
+    public static Set<String> parseEntityTag(StringReader input, boolean includeWeak) throws IOException {
+
+        HashSet<String> result = new HashSet<>();
+
+        while (true) {
+            boolean strong = false;
+            HttpParser.skipLws(input);
+
+            switch (HttpParser.skipConstant(input, "W/")) {
+                case EOF:
+                    // Empty values are invalid
+                    return null;
+                case NOT_FOUND:
+                    strong = true;
+                    break;
+                case FOUND:
+                    strong = false;
+                    break;
+            }
+
+            // Note: RFC 2616 allowed quoted string
+            //       RFC 7232 does not allow " in the entity-tag
+            String value = HttpParser.readQuotedString(input, true);
+            if (value == null) {
+                // Not a quoted string so the header is invalid
+                return null;
+            }
+
+            if (strong || includeWeak) {
+                result.add(value);
+            }
+
+            HttpParser.skipLws(input);
+
+            switch (HttpParser.skipConstant(input, ",")) {
+                case EOF:
+                    return result;
+                case NOT_FOUND:
+                    // Not EOF and not "," so must be invalid
+                    return null;
+                case FOUND:
+                    // Parse next entry
+                    break;
+            }
+        }
+    }
+}

==================================================
