4364cbc8d1f5cc6dbe9be0132d92e593ef67346c
==================================================
Avoid FileMessageFactory leak.
==================================================
Keiichi Fujino
==================================================
Tue May 7 08:26:30 2013 +0000
==================================================
FarmWarDeployer.java
Avoid FileMessageFactory leak.
FileMessageFactory will be removed immediately after receiving the complete WAR file but when failing to receive a FileMessage which was sent dividing, FileMessageFactory will leak without being removed.
Add a newly maxValidTime attribute to prevent the leak of FileMessageFactory.
FileMessageFactory that is leaking will be automatically removed after maxValidTime.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1479805 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileMessageFactory.java
index 788f0f315c..02d1f3a1bc 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -126,6 +126,11 @@ public class FarmWarDeployer extends ClusterListener
      */
     protected ObjectName oname = null;
 
+    /**
+     * The maximum valid time(in seconds) for FileMessageFactory.
+     */
+    protected int maxValidTime = 5 * 60;
+
     /*--Constructor---------------------------------------------*/
     public FarmWarDeployer() {
     }
@@ -298,6 +303,7 @@ public class FarmWarDeployer extends ClusterListener
         FileMessageFactory factory = fileFactories.get(msg.getFileName());
         if (factory == null) {
             factory = FileMessageFactory.getInstance(writeToFile, true);
+            factory.setMaxValidTime(maxValidTime);
             fileFactories.put(msg.getFileName(), factory);
         }
         return factory;
@@ -560,11 +566,14 @@ public class FarmWarDeployer extends ClusterListener
      */
     @Override
     public void backgroundProcess() {
-        if (started && watchEnabled) {
-            count = (count + 1) % processDeployFrequency;
-            if (count == 0) {
-                watcher.check();
+        if (started) {
+            if (watchEnabled) {
+                count = (count + 1) % processDeployFrequency;
+                if (count == 0) {
+                    watcher.check();
+                }
             }
+            removeInvalidFileFactories();
         }
 
     }
@@ -703,6 +712,14 @@ public class FarmWarDeployer extends ClusterListener
         this.processDeployFrequency = processExpiresFrequency;
     }
 
+    public int getMaxValidTime() {
+        return maxValidTime;
+    }
+
+    public void setMaxValidTime(int maxValidTime) {
+        this.maxValidTime = maxValidTime;
+    }
+
     /**
      * Copy a file to the specified temp directory.
      * @param from copy from temp
@@ -737,6 +754,16 @@ public class FarmWarDeployer extends ClusterListener
         return true;
     }
 
+    protected void removeInvalidFileFactories() {
+        String[] fileNames = fileFactories.keySet().toArray(new String[0]);
+        for (String fileName : fileNames) {
+            FileMessageFactory factory = fileFactories.get(fileName);
+            if (!factory.isValid()) {
+                fileFactories.remove(fileName);
+            }
+        }
+    }
+
     private File getAbsolutePath(String path) {
         File dir = new File(path);
         if (!dir.isAbsolute()) {

==================================================
