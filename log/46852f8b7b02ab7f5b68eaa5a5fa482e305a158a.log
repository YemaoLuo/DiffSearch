46852f8b7b02ab7f5b68eaa5a5fa482e305a158a
==================================================
Implement startPool method to inform interceptors that pool is started
==================================================
Filip Hanik
==================================================
Thu Dec 11 22:17:02 2008 +0000
==================================================
ConnectionPool.java
Implement startPool method to inform interceptors that pool is started


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@725838 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DataSourceProxy.java
index 6e41ed7cfb..51130344c8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -307,7 +307,7 @@ public class ConnectionPool {
      * @param properties PoolProperties - properties used to initialize the pool with
      * @throws SQLException
      */
-    protected void init (PoolProperties properties) throws SQLException {
+    protected void init(PoolProperties properties) throws SQLException {
         poolProperties = properties;
         //make space for 10 extra in case we flow over a bit
         busy = new ArrayBlockingQueue<PooledConnection>(properties.getMaxActive(),false);
@@ -343,6 +343,16 @@ public class ConnectionPool {
         }
 
 
+        PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
+        for (int i=0; i<proxies.length; i++) {
+            try {
+                proxies[i].getInterceptorClass().newInstance().poolStarted(this);
+            }catch (Exception x) {
+                log.warn("Unable to inform interceptor of pool start.",x);
+                close(true);
+                throw new SQLException(x);
+            }
+        }        
         //initialize the pool with its initial set of members
         PooledConnection[] initialPool = new PooledConnection[poolProperties.getInitialSize()];
         try {

==================================================
JdbcInterceptor.java
index 823adeb800..12c7b7c88f 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -43,6 +43,7 @@ public class DataSourceProxy  {
     protected static Log log = LogFactory.getLog(DataSourceProxy.class);
     
     protected volatile ConnectionPool pool = null;
+    
     public ConnectionPool getPool() {
         return pool;
     }
@@ -173,7 +174,7 @@ public class DataSourceProxy  {
                 if (p!=null) p.close(all);
             }
         }catch (Exception x) {
-            x.printStackTrace();
+            log.warn("Error duing connection pool closure.", x);
         }
     }
 

==================================================
TestSlowQueryReport.java
index 176a1f30af..88c694900e 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -100,4 +100,15 @@ public abstract class JdbcInterceptor implements InvocationHandler {
      */
     public void poolClosed(ConnectionPool pool) {
     }
+
+    /**
+     * This method is invoked by a connection pool when the pool is first started up, usually when the first connection is requested.
+     * Interceptor classes can override this method if they keep static
+     * variables or other tracking means around.
+     * <b>This method is only invoked on a single instance of the interceptor, and not on every instance created.</b>
+     * @param pool - the pool that is being closed.
+     */
+    public void poolStarted(ConnectionPool pool) {
+    }
+
 }

==================================================
