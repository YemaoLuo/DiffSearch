209214e4dac2a46b38186a60c1e196916a2e164f
==================================================
Refactor ServletOutputStream
==================================================
Mark Emlyn
==================================================
Sat Nov 24 18:45:42 2012 +0000
==================================================
UpgradeAprProcessor.java
Refactor ServletOutputStream
- BIO untested
- NIO untested
- APR not implemented

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1413233 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UpgradeAprServletInputStream.java
index 3bbbb90262..8e4e811f21 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
@@ -16,8 +16,6 @@
  */
 package org.apache.coyote.http11.upgrade;
 
-import java.io.IOException;
-
 import javax.servlet.http.ProtocolHandler;
 
 import org.apache.tomcat.jni.Socket;
@@ -31,36 +29,8 @@ public class UpgradeAprProcessor extends UpgradeProcessor<Long> {
             ProtocolHandler httpUpgradeProcessor) {
         super(httpUpgradeProcessor,
                 new UpgradeAprServletInputStream(wrapper),
-                new AprUpgradeServletOutputStream(wrapper.getSocket().longValue()));
+                new UpgradeAprServletOutputStream(wrapper));
 
         Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);
     }
-
-
-    // ----------------------------------------------------------- Inner classes
-
-    private static class AprUpgradeServletOutputStream
-            extends UpgradeServletOutputStream {
-
-        private final long socket;
-
-        public AprUpgradeServletOutputStream(long socket) {
-            this.socket = socket;
-        }
-
-        @Override
-        protected void doWrite(int b) throws IOException {
-            Socket.send(socket, new byte[] {(byte) b}, 0, 1);
-        }
-
-        @Override
-        protected void doWrite(byte[] b, int off, int len) throws IOException {
-            Socket.send(socket, b, off, len);
-        }
-
-        @Override
-        protected void doFlush() throws IOException {
-            // NO-OP
-        }
-    }
 }

==================================================
UpgradeAprServletOutputStream.java
index 6f2693ef83..0ce46bdc22 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeAprServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprServletInputStream.java
@@ -24,6 +24,7 @@ public class UpgradeAprServletInputStream extends UpgradeServletInputStream {
 
     private final long socket;
 
+
     public UpgradeAprServletInputStream(SocketWrapper<Long> wrapper) {
         this.socket = wrapper.getSocket().longValue();
     }

==================================================
UpgradeBioProcessor.java
new file mode 100644
index 0000000000..47959b5a73
--- /dev/null
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprServletOutputStream.java
@@ -0,0 +1,44 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http11.upgrade;
+
+import java.io.IOException;
+
+import org.apache.tomcat.util.net.SocketWrapper;
+
+public class UpgradeAprServletOutputStream extends UpgradeServletOutputStream {
+
+    private final long socket;
+
+
+    public UpgradeAprServletOutputStream(SocketWrapper<Long> wrapper) {
+        this.socket = wrapper.getSocket().longValue();
+    }
+
+
+    @Override
+    protected int doWrite(boolean block, byte[] b, int off, int len)
+            throws IOException {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+    @Override
+    protected void doFlush() throws IOException {
+        // TODO Auto-generated method stub
+    }
+}

==================================================
UpgradeBioServletOutputStream.java
index 56b77cd8a6..76c9e4e5fd 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
@@ -17,7 +17,6 @@
 package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
-import java.io.OutputStream;
 import java.net.Socket;
 
 import javax.servlet.http.ProtocolHandler;
@@ -31,37 +30,8 @@ public class UpgradeBioProcessor extends UpgradeProcessor<Socket> {
     public UpgradeBioProcessor(SocketWrapper<Socket> wrapper,
             ProtocolHandler httpUpgradeProcessor) throws IOException {
         super(httpUpgradeProcessor, new UpgradeBioServletInputStream(wrapper),
-                new BioUpgradeServletOutputStream(wrapper));
+                new UpgradeBioServletOutputStream(wrapper));
 
         wrapper.getSocket().setSoTimeout(INFINITE_TIMEOUT);
     }
-
-
-    // ----------------------------------------------------------- Inner classes
-
-    private static class BioUpgradeServletOutputStream
-            extends UpgradeServletOutputStream {
-
-        private final OutputStream os;
-
-        public BioUpgradeServletOutputStream(SocketWrapper<Socket> wrapper)
-                throws IOException {
-            os = wrapper.getSocket().getOutputStream();
-        }
-
-        @Override
-        protected void doWrite(int b) throws IOException {
-            os.write(b);
-        }
-
-        @Override
-        protected void doWrite(byte[] b, int off, int len) throws IOException {
-            os.write(b, off, len);
-        }
-
-        @Override
-        protected void doFlush() throws IOException {
-            os.flush();
-        }
-    }
 }

==================================================
UpgradeNioProcessor.java
new file mode 100644
index 0000000000..8c2a6651e1
--- /dev/null
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeBioServletOutputStream.java
@@ -0,0 +1,45 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http11.upgrade;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.net.Socket;
+
+import org.apache.tomcat.util.net.SocketWrapper;
+
+public class UpgradeBioServletOutputStream extends UpgradeServletOutputStream {
+
+    private final OutputStream os;
+
+    public UpgradeBioServletOutputStream(SocketWrapper<Socket> wrapper)
+            throws IOException {
+        os = wrapper.getSocket().getOutputStream();
+    }
+
+    @Override
+    protected int doWrite(boolean block, byte[] b, int off, int len)
+            throws IOException {
+        os.write(b, off, len);
+        return len;
+    }
+
+    @Override
+    protected void doFlush() throws IOException {
+        os.flush();
+    }
+}

==================================================
UpgradeNioServletOutputStream.java
index 60b6ae5ae4..a8782dac55 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java
@@ -16,13 +16,9 @@
  */
 package org.apache.coyote.http11.upgrade;
 
-import java.io.IOException;
-import java.nio.channels.Selector;
-
 import javax.servlet.http.ProtocolHandler;
 
 import org.apache.tomcat.util.net.NioChannel;
-import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioSelectorPool;
 import org.apache.tomcat.util.net.SocketWrapper;
 
@@ -34,101 +30,8 @@ public class UpgradeNioProcessor extends UpgradeProcessor<NioChannel> {
             ProtocolHandler httpUpgradeProcessor, NioSelectorPool pool) {
         super(httpUpgradeProcessor,
                 new UpgradeNioServletInputStream(wrapper, pool),
-                new NioUpgradeServletOutputStream(wrapper, pool));
+                new UpgradeNioServletOutputStream(wrapper, pool));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
     }
-
-
-    // ----------------------------------------------------------- Inner classes
-
-    private static class NioUpgradeServletOutputStream
-            extends UpgradeServletOutputStream {
-
-        private final NioChannel nioChannel;
-        private final NioSelectorPool pool;
-        private final int maxWrite;
-
-        public NioUpgradeServletOutputStream(
-                SocketWrapper<NioChannel> wrapper, NioSelectorPool pool) {
-            nioChannel = wrapper.getSocket();
-            this.pool = pool;
-            maxWrite = nioChannel.getBufHandler().getWriteBuffer().capacity();
-        }
-
-        @Override
-        protected void doWrite(int b) throws IOException {
-            writeToSocket(new byte[] {(byte) b}, 0, 1);
-        }
-
-        @Override
-        protected void doWrite(byte[] b, int off, int len) throws IOException {
-            int written = 0;
-            while (len - written > maxWrite) {
-                written += writeToSocket(b, off + written, maxWrite);
-            }
-            writeToSocket(b, off + written, len - written);
-        }
-
-        @Override
-        protected void doFlush() throws IOException {
-            NioEndpoint.KeyAttachment att =
-                    (NioEndpoint.KeyAttachment) nioChannel.getAttachment(false);
-            if (att == null) {
-                throw new IOException("Key must be cancelled");
-            }
-            long writeTimeout = att.getTimeout();
-            Selector selector = null;
-            try {
-                selector = pool.get();
-            } catch ( IOException x ) {
-                //ignore
-            }
-            try {
-                do {
-                    if (nioChannel.flush(true, selector, writeTimeout)) {
-                        break;
-                    }
-                } while (true);
-            } finally {
-                if (selector != null) {
-                    pool.put(selector);
-                }
-            }
-        }
-
-        /*
-         * Adapted from the NioOutputBuffer
-         */
-        private synchronized int writeToSocket(byte[] bytes, int off, int len)
-                throws IOException {
-
-            nioChannel.getBufHandler().getWriteBuffer().clear();
-            nioChannel.getBufHandler().getWriteBuffer().put(bytes, off, len);
-            nioChannel.getBufHandler().getWriteBuffer().flip();
-
-            int written = 0;
-            NioEndpoint.KeyAttachment att =
-                    (NioEndpoint.KeyAttachment) nioChannel.getAttachment(false);
-            if (att == null) {
-                throw new IOException("Key must be cancelled");
-            }
-            long writeTimeout = att.getTimeout();
-            Selector selector = null;
-            try {
-                selector = pool.get();
-            } catch ( IOException x ) {
-                //ignore
-            }
-            try {
-                written = pool.write(nioChannel.getBufHandler().getWriteBuffer(),
-                        nioChannel, selector, writeTimeout, true);
-            } finally {
-                if (selector != null) {
-                    pool.put(selector);
-                }
-            }
-            return written;
-        }
-    }
 }

==================================================
UpgradeProcessor.java
new file mode 100644
index 0000000000..0dbaaf164e
--- /dev/null
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeNioServletOutputStream.java
@@ -0,0 +1,128 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http11.upgrade;
+
+import java.io.IOException;
+import java.nio.channels.Selector;
+
+import org.apache.tomcat.util.net.NioChannel;
+import org.apache.tomcat.util.net.NioEndpoint;
+import org.apache.tomcat.util.net.NioSelectorPool;
+import org.apache.tomcat.util.net.SocketWrapper;
+
+public class UpgradeNioServletOutputStream extends UpgradeServletOutputStream {
+
+    private final NioChannel nioChannel;
+    private final NioSelectorPool pool;
+    private final int maxWrite;
+
+
+    public UpgradeNioServletOutputStream(
+            SocketWrapper<NioChannel> wrapper, NioSelectorPool pool) {
+        nioChannel = wrapper.getSocket();
+        this.pool = pool;
+        maxWrite = nioChannel.getBufHandler().getWriteBuffer().capacity();
+    }
+
+
+    @Override
+    protected int doWrite(boolean block, byte[] b, int off, int len)
+            throws IOException {
+        int leftToWrite = len;
+        int count = 0;
+        int offset = off;
+
+        while (leftToWrite > 0) {
+            int writeThisLoop;
+            int writtenThisLoop;
+
+            if (leftToWrite > maxWrite) {
+                writeThisLoop = maxWrite;
+            } else {
+                writeThisLoop = leftToWrite;
+            }
+
+            writtenThisLoop = doWriteInternal(block, b, offset, writeThisLoop);
+            count += writtenThisLoop;
+            leftToWrite -= writtenThisLoop;
+
+            if (writtenThisLoop < writeThisLoop) {
+                break;
+            }
+        }
+
+        return count;
+    }
+
+    private int doWriteInternal (boolean block, byte[] b, int off, int len)
+            throws IOException {
+        nioChannel.getBufHandler().getWriteBuffer().clear();
+        nioChannel.getBufHandler().getWriteBuffer().put(b, off, len);
+        nioChannel.getBufHandler().getWriteBuffer().flip();
+
+        int written = 0;
+        NioEndpoint.KeyAttachment att =
+                (NioEndpoint.KeyAttachment) nioChannel.getAttachment(false);
+        if (att == null) {
+            throw new IOException("Key must be cancelled");
+        }
+        long writeTimeout = att.getTimeout();
+        Selector selector = null;
+        try {
+            selector = pool.get();
+        } catch ( IOException x ) {
+            //ignore
+        }
+        try {
+            written = pool.write(nioChannel.getBufHandler().getWriteBuffer(),
+                    nioChannel, selector, writeTimeout, block);
+        } finally {
+            if (selector != null) {
+                pool.put(selector);
+            }
+        }
+        return written;
+    }
+
+
+    @Override
+    protected void doFlush() throws IOException {
+        NioEndpoint.KeyAttachment att =
+                (NioEndpoint.KeyAttachment) nioChannel.getAttachment(false);
+        if (att == null) {
+            throw new IOException("Key must be cancelled");
+        }
+        long writeTimeout = att.getTimeout();
+        Selector selector = null;
+        try {
+            selector = pool.get();
+        } catch ( IOException x ) {
+            //ignore
+        }
+        try {
+            do {
+                if (nioChannel.flush(true, selector, writeTimeout)) {
+                    break;
+                }
+            } while (true);
+        } finally {
+            if (selector != null) {
+                pool.put(selector);
+            }
+        }
+    }
+}

==================================================
UpgradeServletInputStream.java
index c52a5b6e33..b0eed729a7 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
@@ -21,7 +21,6 @@ import java.util.concurrent.Executor;
 
 import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
-import javax.servlet.WriteListener;
 import javax.servlet.http.ProtocolHandler;
 import javax.servlet.http.WebConnection;
 
@@ -85,7 +84,7 @@ public abstract class UpgradeProcessor<S>
         if (status == SocketStatus.OPEN_READ) {
             upgradeServletInputStream.onDataAvailable();
         } else if (status == SocketStatus.OPEN_WRITE) {
-            upgradeServletOutputStream.writeListener.onWritePossible();
+            upgradeServletOutputStream.onWritePossible();
         } else {
             // Unexpected state
             return SocketState.CLOSED;
@@ -146,53 +145,4 @@ public abstract class UpgradeProcessor<S>
     public final void setSslSupport(SSLSupport sslSupport) {
         // NOOP
     }
-
-
-    // ----------------------------------------------------------- Inner classes
-
-    protected abstract static class UpgradeServletOutputStream extends
-            ServletOutputStream {
-
-        private volatile WriteListener writeListener = null;
-
-        @Override
-        public boolean canWrite() {
-            if (writeListener == null) {
-                throw new IllegalStateException(
-                        sm.getString("upgrade.sos.canWrite.ise"));
-            }
-
-            // TODO Support non-blocking IO
-            return false;
-        }
-
-        @Override
-        public void setWriteListener(WriteListener listener) {
-            if (listener == null) {
-                throw new NullPointerException(
-                        sm.getString("upgrade.sos.writeListener.null"));
-            }
-            this.writeListener = listener;
-        }
-
-        @Override
-        public void write(int b) throws IOException {
-            doWrite(b);
-        }
-
-        @Override
-        public void write(byte[] b, int off, int len) throws IOException {
-            doWrite(b, off, len);
-        }
-
-        @Override
-        public void flush() throws IOException {
-            doFlush();
-        }
-
-        protected abstract void doWrite(int b) throws IOException;
-        protected abstract void doWrite(byte[] b, int off, int len)
-                throws IOException;
-        protected abstract void doFlush() throws IOException;
-    }
 }

==================================================
UpgradeServletOutputStream.java
index 276a0ad032..89688f5bcf 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
@@ -76,27 +76,19 @@ public abstract class UpgradeServletInputStream extends ServletInputStream {
     public int readLine(byte[] b, int off, int len) throws IOException {
         preReadChecks();
 
-        if (len == 0) {
+        if (len <= 0) {
             return 0;
         }
+        int count = 0, c;
 
-        int r;
-        int pos = off;
-        int count = 0;
-
-        while ((r = readInternal()) != -1) {
-            b[pos++] = (byte) r;
-            count ++;
-            if (r == -1 || count == len) {
+        while ((c = readInternal()) != -1) {
+            b[off++] = (byte) c;
+            count++;
+            if (c == '\n' || count == len) {
                 break;
             }
         }
-
-        if (r == -1) {
-            return -1;
-        } else {
-            return count;
-        }
+        return count > 0 ? count : -1;
     }
 
 
@@ -143,8 +135,8 @@ public abstract class UpgradeServletInputStream extends ServletInputStream {
     }
 
 
+    protected abstract boolean doIsReady() throws IOException;
+
     protected abstract int doRead(boolean block, byte[] b, int off, int len)
             throws IOException;
-
-    protected abstract boolean doIsReady() throws IOException;
 }

==================================================
