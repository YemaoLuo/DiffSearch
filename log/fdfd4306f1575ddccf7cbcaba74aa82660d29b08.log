fdfd4306f1575ddccf7cbcaba74aa82660d29b08
==================================================
Clean-up: final markers (UCDetector)
==================================================
Mark Emlyn
==================================================
Wed Aug 15 18:57:37 2012 +0000
==================================================
AbstractAjpProcessor.java
Clean-up: final markers (UCDetector)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1373570 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index fe0bae0e9b..e06c7308e0 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -137,7 +137,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
     /**
      * AJP packet size.
      */
-    protected int packetSize;
+    protected final int packetSize;
 
     /**
      * Header message. Note that this header is merely the one used during the
@@ -145,25 +145,25 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
      * request header. It will stay unchanged during the processing of the whole
      * request.
      */
-    protected AjpMessage requestHeaderMessage = null;
+    protected final AjpMessage requestHeaderMessage;
 
 
     /**
      * Message used for response composition.
      */
-    protected AjpMessage responseMessage = null;
+    protected final AjpMessage responseMessage;
 
 
     /**
      * Body message.
      */
-    protected AjpMessage bodyMessage = null;
+    protected final AjpMessage bodyMessage;
 
 
     /**
      * Body message.
      */
-    protected MessageBytes bodyBytes = MessageBytes.newInstance();
+    protected final MessageBytes bodyBytes = MessageBytes.newInstance();
 
 
     /**
@@ -181,13 +181,13 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
     /**
      * Temp message bytes used for processing.
      */
-    protected MessageBytes tmpMB = MessageBytes.newInstance();
+    protected final MessageBytes tmpMB = MessageBytes.newInstance();
 
 
     /**
      * Byte chunk for certs.
      */
-    protected MessageBytes certificates = MessageBytes.newInstance();
+    protected final MessageBytes certificates = MessageBytes.newInstance();
 
 
     /**

==================================================
AjpAprProtocol.java
index b1c212f947..ad6a4ae413 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -84,13 +84,13 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     /**
      * Direct buffer used for input.
      */
-    protected ByteBuffer inputBuffer = null;
+    protected final ByteBuffer inputBuffer;
 
 
     /**
      * Direct buffer used for output.
      */
-    protected ByteBuffer outputBuffer = null;
+    protected final ByteBuffer outputBuffer;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
AjpMessage.java
index 51cf7e0f3e..cc7bcf979d 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -77,7 +77,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
     /**
      * Connection handler for AJP.
      */
-    private AjpConnectionHandler cHandler;
+    private final AjpConnectionHandler cHandler;
 
 
     // --------------------------------------------------------- Public Methods
@@ -106,7 +106,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
             extends AbstractAjpConnectionHandler<Long,AjpAprProcessor>
             implements Handler {
 
-        protected AjpAprProtocol proto;
+        protected final AjpAprProtocol proto;
 
         public AjpConnectionHandler(AjpAprProtocol proto) {
             this.proto = proto;

==================================================
AjpNioProcessor.java
index a70c4444a9..63c653001e 100644
--- a/java/org/apache/coyote/ajp/AjpMessage.java
+++ b/java/org/apache/coyote/ajp/AjpMessage.java
@@ -64,7 +64,7 @@ public class AjpMessage {
     /**
      * Fixed size buffer.
      */
-    protected byte buf[] = null;
+    protected final byte buf[];
 
 
     /**

==================================================
AjpNioProtocol.java
index b8073cc9d3..396c5db240 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -76,7 +76,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
     /**
      * Selector pool for the associated endpoint.
      */
-    protected NioSelectorPool pool;
+    protected final NioSelectorPool pool;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
AjpProtocol.java
index 3aa56ed3cf..f78026aa39 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -74,7 +74,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
     /**
      * Connection handler for AJP.
      */
-    private AjpConnectionHandler cHandler;
+    private final AjpConnectionHandler cHandler;
 
 
     // ----------------------------------------------------- JMX related methods
@@ -92,7 +92,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
             extends AbstractAjpConnectionHandler<NioChannel, AjpNioProcessor>
             implements Handler {
 
-        protected AjpNioProtocol proto;
+        protected final AjpNioProtocol proto;
 
         public AjpConnectionHandler(AjpNioProtocol proto) {
             this.proto = proto;

==================================================
