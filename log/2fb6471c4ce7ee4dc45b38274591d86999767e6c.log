2fb6471c4ce7ee4dc45b38274591d86999767e6c
==================================================
Allow HTTP upgrade process to complete without data corruption when additional content is sent along with the upgrade header.
==================================================
Remy Maucherat
==================================================
Mon Nov 3 11:36:28 2014 +0000
==================================================
AbstractProtocol.java
Allow HTTP upgrade process to complete without data corruption when additional content is sent along with the upgrade header.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1636324 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InputBuffer.java
index 9886cef35c..b7ec2af7cc 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -18,6 +18,7 @@ package org.apache.coyote;
 
 import java.io.IOException;
 import java.net.InetAddress;
+import java.nio.ByteBuffer;
 import java.util.Iterator;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
@@ -666,11 +667,13 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                         // Get the HTTP upgrade handler
                         HttpUpgradeHandler httpUpgradeHandler =
                                 processor.getHttpUpgradeHandler();
+                        // Retrieve leftover input
+                        ByteBuffer leftoverInput = processor.getLeftoverInput();
                         // Release the Http11 processor to be re-used
                         release(wrapper, processor, false, false);
                         // Create the upgrade processor
                         processor = createUpgradeProcessor(
-                                wrapper, httpUpgradeHandler);
+                                wrapper, leftoverInput, httpUpgradeHandler);
                         // Mark the connection as upgraded
                         wrapper.setUpgraded(true);
                         // Associate with the processor with the connection
@@ -776,7 +779,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 Processor<S> processor, boolean socketClosing,
                 boolean addToPoller);
         protected abstract Processor<S> createUpgradeProcessor(
-                SocketWrapper<S> socket,
+                SocketWrapper<S> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeProcessor) throws IOException;
 
         protected void register(AbstractProcessor<S> processor) {

==================================================
Processor.java
index f84982e5eb..eec4da9ecc 100644
--- a/java/org/apache/coyote/InputBuffer.java
+++ b/java/org/apache/coyote/InputBuffer.java
@@ -27,9 +27,6 @@ import org.apache.tomcat.util.buf.ByteChunk;
  *
  * This class is used only in the protocol implementation. All reading from
  * Tomcat ( or adapter ) should be done using Request.doRead().
- *
- *
- * @author Remy Maucherat
  */
 public interface InputBuffer {
 

==================================================
AbstractAjpProcessor.java
index dcf0513ccd..81a1d2518b 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -17,6 +17,7 @@
 package org.apache.coyote;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.util.concurrent.Executor;
 
 import javax.servlet.http.HttpUpgradeHandler;
@@ -54,4 +55,10 @@ public interface Processor<S> {
     void recycle(boolean socketClosing);
 
     void setSslSupport(SSLSupport sslSupport);
+
+    /**
+     * Allows retrieving additional input during the upgrade process
+     * @return leftover bytes
+     */
+    ByteBuffer getLeftoverInput();
 }

==================================================
AbstractAjpProtocol.java
index 01b9c2afc7..d99cdaeade 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -1084,6 +1084,12 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
     }
 
 
+    @Override
+    public ByteBuffer getLeftoverInput() {
+        return null;
+    }
+
+
     /**
      * Get more request body data from the web server and store it in the
      * internal buffer.

==================================================
AbstractHttp11Processor.java
index d163be9d85..0612cb2413 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -16,6 +16,8 @@
  */
 package org.apache.coyote.ajp;
 
+import java.nio.ByteBuffer;
+
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProtocol;
@@ -99,7 +101,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         }
 
         @Override
-        protected P createUpgradeProcessor(SocketWrapper<S> socket,
+        protected P createUpgradeProcessor(SocketWrapper<S> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeHandler) {
             // TODO should fail - throw IOE
             return null;

==================================================
AbstractInputBuffer.java
index 5ebad97ba0..c576dda102 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -18,6 +18,7 @@ package org.apache.coyote.http11;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
+import java.nio.ByteBuffer;
 import java.util.Locale;
 import java.util.StringTokenizer;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -1792,7 +1793,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             SocketWrapper<S> socketWrapper);
 
 
-
     @Override
     public final void recycle(boolean isSocketClosing) {
         getAdapter().checkRecycled(request, response);
@@ -1813,4 +1813,11 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     }
 
     protected abstract void recycleInternal();
+
+
+    @Override
+    public ByteBuffer getLeftoverInput() {
+        return inputBuffer.getLeftover();
+    }
+
 }

==================================================
Http11AprProtocol.java
index 4a93e301d6..92ffd1f8a6 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -390,6 +391,15 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
         }
     }
 
+    ByteBuffer getLeftover() {
+        int available = lastValid - pos;
+        if (available > 0) {
+            return ByteBuffer.wrap(buf, pos, available);
+        } else {
+            return null;
+        }
+    }
+
     /**
      * Is standard Servlet blocking IO being used for input?
      */

==================================================
Http11Nio2Protocol.java
index 4d712b2e31..1ba9c8fadb 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 
 import javax.servlet.http.HttpUpgradeHandler;
 
@@ -330,11 +331,11 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
 
         @Override
         protected Processor<Long> createUpgradeProcessor(
-                SocketWrapper<Long> socket,
+                SocketWrapper<Long> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
-            return new AprProcessor(socket, httpUpgradeProcessor,
-                    (AprEndpoint) proto.endpoint,
+            return new AprProcessor(socket, leftoverInput,
+                    httpUpgradeProcessor, (AprEndpoint) proto.endpoint,
                     proto.getUpgradeAsyncWriteBufferSize());
         }
     }

==================================================
Http11NioProcessor.java
index f725566e6c..64edf2ef8c 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.nio.channels.ReadPendingException;
 
 import javax.net.ssl.SSLEngine;
@@ -257,11 +258,11 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
 
         @Override
         protected Processor<Nio2Channel> createUpgradeProcessor(
-                SocketWrapper<Nio2Channel> socket,
+                SocketWrapper<Nio2Channel> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
-            return new Nio2Processor(proto.endpoint, socket, httpUpgradeProcessor,
-                    proto.getUpgradeAsyncWriteBufferSize());
+            return new Nio2Processor(proto.endpoint, socket, leftoverInput,
+                    httpUpgradeProcessor, proto.getUpgradeAsyncWriteBufferSize());
         }
 
         @Override

==================================================
Http11NioProtocol.java
index 30aa9e9697..edf4b72a8b 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -557,4 +557,5 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     public void setSslSupport(SSLSupport sslSupport) {
         this.sslSupport = sslSupport;
     }
+
 }

==================================================
Http11Protocol.java
index cdddd005b9..0d421a3f77 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
@@ -289,10 +290,10 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
 
         @Override
         protected Processor<NioChannel> createUpgradeProcessor(
-                SocketWrapper<NioChannel> socket,
+                SocketWrapper<NioChannel> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
-            return new NioProcessor(socket, httpUpgradeProcessor,
+            return new NioProcessor(socket, leftoverInput, httpUpgradeProcessor,
                     proto.getEndpoint().getSelectorPool(),
                     proto.getUpgradeAsyncWriteBufferSize());
         }

==================================================
AbstractProcessor.java
index 6dcd509412..b1dbe47c6e 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -18,6 +18,7 @@ package org.apache.coyote.http11;
 
 import java.io.IOException;
 import java.net.Socket;
+import java.nio.ByteBuffer;
 
 import javax.servlet.http.HttpUpgradeHandler;
 
@@ -197,10 +198,10 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol<Socket> {
 
         @Override
         protected Processor<Socket> createUpgradeProcessor(
-                SocketWrapper<Socket> socket,
+                SocketWrapper<Socket> socket, ByteBuffer leftoverInput,
                 HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
-            return new BioProcessor(socket, httpUpgradeProcessor,
+            return new BioProcessor(socket, leftoverInput, httpUpgradeProcessor,
                     proto.getUpgradeAsyncWriteBufferSize());
         }
 

==================================================
AprProcessor.java
index 9419243ad6..46f20ac0f6 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.util.concurrent.Executor;
 
 import javax.servlet.ServletInputStream;
@@ -178,4 +179,9 @@ public abstract class AbstractProcessor<S>
     public final void setSslSupport(SSLSupport sslSupport) {
         // NOOP
     }
+
+    @Override
+    public ByteBuffer getLeftoverInput() {
+        return null;
+    }
 }

==================================================
AprServletInputStream.java
index df42d35d7e..2dd619cffb 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -16,6 +16,8 @@
  */
 package org.apache.coyote.http11.upgrade;
 
+import java.nio.ByteBuffer;
+
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
@@ -32,11 +34,11 @@ public class AprProcessor extends AbstractProcessor<Long> {
 
     private static final int INFINITE_TIMEOUT = -1;
 
-    public AprProcessor(SocketWrapper<Long> wrapper,
+    public AprProcessor(SocketWrapper<Long> wrapper, ByteBuffer leftoverInput,
             HttpUpgradeHandler httpUpgradeProcessor, AprEndpoint endpoint,
             int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
-                new AprServletInputStream(wrapper),
+                new AprServletInputStream(wrapper, leftoverInput),
                 new AprServletOutputStream(wrapper, asyncWriteBufferSize, endpoint));
 
         Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);

==================================================
BioProcessor.java
index e629e9d2e2..add50ef214 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
@@ -18,6 +18,7 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
@@ -34,13 +35,18 @@ public class AprServletInputStream extends AbstractServletInputStream {
 
     private final SocketWrapper<Long> wrapper;
     private final long socket;
+    private ByteBuffer leftoverInput;
     private volatile boolean eagain = false;
     private volatile boolean closed = false;
 
 
-    public AprServletInputStream(SocketWrapper<Long> wrapper) {
+    public AprServletInputStream(SocketWrapper<Long> wrapper, ByteBuffer leftoverInput) {
         this.wrapper = wrapper;
         this.socket = wrapper.getSocket().longValue();
+        if (leftoverInput != null) {
+            this.leftoverInput = ByteBuffer.allocate(leftoverInput.remaining());
+            this.leftoverInput.put(leftoverInput);
+        }
     }
 
 
@@ -52,6 +58,17 @@ public class AprServletInputStream extends AbstractServletInputStream {
             throw new IOException(sm.getString("apr.closed", Long.valueOf(socket)));
         }
 
+        if (leftoverInput != null) {
+            if (leftoverInput.remaining() < len) {
+                len = leftoverInput.remaining();
+            }
+            leftoverInput.get(b, off, len);
+            if (leftoverInput.remaining() == 0) {
+                leftoverInput = null;
+            }
+            return len;
+        }
+
         Lock readLock = wrapper.getBlockingStatusReadLock();
         WriteLock writeLock = wrapper.getBlockingStatusWriteLock();
 

==================================================
BioServletInputStream.java
index 3fda3332ad..fa11929f5d 100644
--- a/java/org/apache/coyote/http11/upgrade/BioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/BioProcessor.java
@@ -18,6 +18,7 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
 import java.net.Socket;
+import java.nio.ByteBuffer;
 
 import javax.servlet.http.HttpUpgradeHandler;
 
@@ -33,10 +34,10 @@ public class BioProcessor extends AbstractProcessor<Socket> {
 
     private static final int INFINITE_TIMEOUT = 0;
 
-    public BioProcessor(SocketWrapper<Socket> wrapper,
+    public BioProcessor(SocketWrapper<Socket> wrapper, ByteBuffer leftoverInput,
             HttpUpgradeHandler httpUpgradeProcessor,
             int asyncWriteBufferSize) throws IOException {
-        super(httpUpgradeProcessor, new BioServletInputStream(wrapper),
+        super(httpUpgradeProcessor, new BioServletInputStream(wrapper, leftoverInput),
                 new BioServletOutputStream(wrapper, asyncWriteBufferSize));
 
         wrapper.getSocket().setSoTimeout(INFINITE_TIMEOUT);

==================================================
Nio2Processor.java
index a2048c61b3..0d2ec83a2f 100644
--- a/java/org/apache/coyote/http11/upgrade/BioServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/BioServletInputStream.java
@@ -19,22 +19,39 @@ package org.apache.coyote.http11.upgrade;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Socket;
+import java.nio.ByteBuffer;
 
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class BioServletInputStream extends AbstractServletInputStream {
 
     private final InputStream inputStream;
+    private ByteBuffer leftoverInput;
 
-    public BioServletInputStream(SocketWrapper<Socket> wrapper)
+    public BioServletInputStream(SocketWrapper<Socket> wrapper, ByteBuffer leftoverInput)
             throws IOException {
         inputStream = wrapper.getSocket().getInputStream();
+        if (leftoverInput != null) {
+            this.leftoverInput = ByteBuffer.allocate(leftoverInput.remaining());
+            this.leftoverInput.put(leftoverInput);
+        }
     }
 
     @Override
     protected int doRead(boolean block, byte[] b, int off, int len)
             throws IOException {
-        return inputStream.read(b, off, len);
+        if (leftoverInput != null) {
+            if (leftoverInput.remaining() < len) {
+                len = leftoverInput.remaining();
+            }
+            leftoverInput.get(b, off, len);
+            if (leftoverInput.remaining() == 0) {
+                leftoverInput = null;
+            }
+            return len;
+        } else {
+            return inputStream.read(b, off, len);
+        }
     }
 
     @Override

==================================================
NioProcessor.java
index a8d02868d6..8fe5af7d31 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
@@ -16,6 +16,8 @@
  */
 package org.apache.coyote.http11.upgrade;
 
+import java.nio.ByteBuffer;
+
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
@@ -33,7 +35,7 @@ public class Nio2Processor extends AbstractProcessor<Nio2Channel> {
     private static final int INFINITE_TIMEOUT = -1;
 
     public Nio2Processor(AbstractEndpoint<Nio2Channel> endpoint,
-            SocketWrapper<Nio2Channel> wrapper,
+            SocketWrapper<Nio2Channel> wrapper, ByteBuffer leftoverInput,
             HttpUpgradeHandler httpUpgradeProcessor,
             int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
@@ -41,5 +43,8 @@ public class Nio2Processor extends AbstractProcessor<Nio2Channel> {
                 new Nio2ServletOutputStream(wrapper, asyncWriteBufferSize, endpoint));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
+        if (leftoverInput != null) {
+            wrapper.getSocket().getBufHandler().getReadBuffer().put(leftoverInput);
+        }
     }
 }

==================================================
SpdyProcessor.java
index 6d6c639ac1..407029c5bb 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -16,6 +16,8 @@
  */
 package org.apache.coyote.http11.upgrade;
 
+import java.nio.ByteBuffer;
+
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
@@ -32,7 +34,7 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
 
     private static final int INFINITE_TIMEOUT = -1;
 
-    public NioProcessor(SocketWrapper<NioChannel> wrapper,
+    public NioProcessor(SocketWrapper<NioChannel> wrapper, ByteBuffer leftoverInput,
             HttpUpgradeHandler httpUpgradeProcessor, NioSelectorPool pool,
             int asyncWriteBufferSize) {
         super(httpUpgradeProcessor,
@@ -40,5 +42,15 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
                 new NioServletOutputStream(wrapper, asyncWriteBufferSize, pool));
 
         wrapper.setTimeout(INFINITE_TIMEOUT);
+        if (leftoverInput != null) {
+            ByteBuffer readBuffer = wrapper.getSocket().getBufHandler().getReadBuffer();
+            if (readBuffer.remaining() > 0) {
+                readBuffer.flip();
+            } else {
+                readBuffer.clear();
+            }
+            readBuffer.put(leftoverInput);
+            readBuffer.flip();
+        }
     }
 }

==================================================
