8fa1bd4bd1539f564a4b8f0db18ef9bf6091eef9
==================================================
Remove ParserUtils and DOM-like TreeNode now all descriptors are parsed using Digester
==================================================
Jeremy Boynes
==================================================
Sun Nov 17 01:57:41 2013 +0000
==================================================
EmbeddedServletOptions.java
Remove ParserUtils and DOM-like TreeNode now all descriptors are parsed using Digester

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1542633 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspC.java
index 34ae619610..4a96056e47 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -30,7 +30,6 @@ import org.apache.jasper.compiler.JspConfig;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.compiler.TagPluginManager;
 import org.apache.jasper.compiler.TldCache;
-import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -457,10 +456,6 @@ public final class EmbeddedServletOptions implements Options {
             setProperty( k, v);
         }
 
-        // quick hack
-        String validating=config.getInitParameter( "validating");
-        if( "false".equals( validating )) ParserUtils.validating=false;
-
         String keepgen = config.getInitParameter("keepgenerated");
         if (keepgen != null) {
             if (keepgen.equalsIgnoreCase("true")) {

==================================================
ParserUtils.java
index efa800961c..c32cbb6007 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -844,7 +844,6 @@ public class JspC extends Task implements Options {
 
     public void setValidateXml( boolean b ) {
         this.validateXml = b;
-        org.apache.jasper.xmlparser.ParserUtils.validating=b;
     }
 
     public boolean isValidateXml() {

==================================================
TreeNode.java
deleted file mode 100644
index 4a1c714fd1..0000000000
--- a/java/org/apache/jasper/xmlparser/ParserUtils.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.jasper.xmlparser;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import org.apache.jasper.Constants;
-import org.apache.jasper.JasperException;
-import org.apache.jasper.compiler.Localizer;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.w3c.dom.Comment;
-import org.w3c.dom.Document;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-import org.w3c.dom.Text;
-import org.xml.sax.EntityResolver;
-import org.xml.sax.ErrorHandler;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-import org.xml.sax.SAXParseException;
-
-
-/**
- * XML parsing utilities for processing web application deployment
- * descriptor and tag library descriptor files.  FIXME - make these
- * use a separate class loader for the parser to be used.
- *
- * @author Craig R. McClanahan
- * @version $Id$
- */
-
-public class ParserUtils {
-
-    /**
-     * An error handler for use when parsing XML documents.
-     */
-    private static final ErrorHandler errorHandler = new MyErrorHandler();
-
-    /**
-     * An entity resolver for use when parsing XML documents.
-     */
-    private static EntityResolver entityResolver = new MyEntityResolver();
-
-    // Turn off for JSP 2.0 until switch over to using xschema.
-    public static boolean validating = false;
-
-
-    // --------------------------------------------------------- Public Methods
-
-    /**
-     * Parse the specified XML document, and return a <code>TreeNode</code>
-     * that corresponds to the root node of the document tree.
-     *
-     * @param location Location (eg URI) of the XML document being parsed
-     * @param is Input source containing the deployment descriptor
-     *
-     * @exception JasperException if an input/output error occurs
-     * @exception JasperException if a parsing error occurs
-     */
-    public TreeNode parseXMLDocument(String location, InputSource is)
-        throws JasperException {
-
-        Document document = null;
-
-        // Perform an XML parse of this document, via JAXP
-        try {
-            DocumentBuilderFactory factory =
-                DocumentBuilderFactory.newInstance();
-            factory.setNamespaceAware(true);
-            factory.setValidating(validating);
-            DocumentBuilder builder = factory.newDocumentBuilder();
-            builder.setEntityResolver(entityResolver);
-            builder.setErrorHandler(errorHandler);
-            document = builder.parse(is);
-        } catch (ParserConfigurationException ex) {
-            throw new JasperException
-                (Localizer.getMessage("jsp.error.parse.xml", location), ex);
-        } catch (SAXParseException ex) {
-            throw new JasperException
-                (Localizer.getMessage("jsp.error.parse.xml.line",
-                                      location,
-                                      Integer.toString(ex.getLineNumber()),
-                                      Integer.toString(ex.getColumnNumber())),
-                 ex);
-        } catch (SAXException sx) {
-            throw new JasperException
-                (Localizer.getMessage("jsp.error.parse.xml", location), sx);
-        } catch (IOException io) {
-            throw new JasperException
-                (Localizer.getMessage("jsp.error.parse.xml", location), io);
-        }
-
-        // Convert the resulting document to a graph of TreeNodes
-        return (convert(null, document.getDocumentElement()));
-    }
-
-
-    /**
-     * Parse the specified XML document, and return a <code>TreeNode</code>
-     * that corresponds to the root node of the document tree.
-     *
-     * @param uri URI of the XML document being parsed
-     * @param is Input stream containing the deployment descriptor
-     *
-     * @exception JasperException if an input/output error occurs
-     * @exception JasperException if a parsing error occurs
-     */
-    public TreeNode parseXMLDocument(String uri, InputStream is)
-            throws JasperException {
-
-        return (parseXMLDocument(uri, new InputSource(is)));
-    }
-
-    /**
-     * Set the EntityResolver.
-     * This is needed when the dtds and Jasper itself are in different
-     * classloaders (e.g. OSGi environment).
-     *
-     * @param er EntityResolver to use.
-     */
-    public static void setEntityResolver(EntityResolver er) {
-
-        entityResolver = er;
-    }
-
-    // ------------------------------------------------------ Protected Methods
-
-
-    /**
-     * Create and return a TreeNode that corresponds to the specified Node,
-     * including processing all of the attributes and children nodes.
-     *
-     * @param parent The parent TreeNode (if any) for the new TreeNode
-     * @param node The XML document Node to be converted
-     */
-    protected TreeNode convert(TreeNode parent, Node node) {
-
-        // Construct a new TreeNode for this node
-        TreeNode treeNode = new TreeNode(node.getNodeName(), parent);
-
-        // Convert all attributes of this node
-        NamedNodeMap attributes = node.getAttributes();
-        if (attributes != null) {
-            int n = attributes.getLength();
-            for (int i = 0; i < n; i++) {
-                Node attribute = attributes.item(i);
-                treeNode.addAttribute(attribute.getNodeName(),
-                                      attribute.getNodeValue());
-            }
-        }
-
-        // Create and attach all children of this node
-        NodeList children = node.getChildNodes();
-        if (children != null) {
-            int n = children.getLength();
-            for (int i = 0; i < n; i++) {
-                Node child = children.item(i);
-                if (child instanceof Comment)
-                    continue;
-                if (child instanceof Text) {
-                    String body = ((Text) child).getData();
-                    if (body != null) {
-                        body = body.trim();
-                        if (body.length() > 0)
-                            treeNode.setBody(body);
-                    }
-                } else {
-                    convert(treeNode, child);
-                }
-            }
-        }
-
-        // Return the completed TreeNode graph
-        return (treeNode);
-    }
-}
-
-
-// ------------------------------------------------------------ Private Classes
-
-class MyEntityResolver implements EntityResolver {
-
-    @Override
-    public InputSource resolveEntity(String publicId, String systemId)
-            throws SAXException {
-        for (int i = 0; i < Constants.CACHED_DTD_PUBLIC_IDS.size(); i++) {
-            String cachedDtdPublicId = Constants.CACHED_DTD_PUBLIC_IDS.get(i);
-            if (cachedDtdPublicId.equals(publicId)) {
-                String resourcePath =
-                    Constants.CACHED_DTD_RESOURCE_PATHS.get(i);
-                InputStream input = this.getClass().getResourceAsStream(
-                        resourcePath);
-                if (input == null) {
-                    throw new SAXException(Localizer.getMessage(
-                            "jsp.error.internal.filenotfound", resourcePath));
-                }
-                InputSource isrc = new InputSource(input);
-                return isrc;
-            }
-        }
-        Log log = LogFactory.getLog(MyEntityResolver.class);
-        if (log.isDebugEnabled())
-            log.debug("Resolve entity failed" + publicId + " " + systemId);
-        log.error(Localizer.getMessage("jsp.error.parse.xml.invalidPublicId",
-                publicId));
-        return null;
-    }
-}
-
-class MyErrorHandler implements ErrorHandler {
-
-    @Override
-    public void warning(SAXParseException ex) throws SAXException {
-        Log log = LogFactory.getLog(MyErrorHandler.class);
-        if (log.isDebugEnabled())
-            log.debug("ParserUtils: warning ", ex);
-        // We ignore warnings
-    }
-
-    @Override
-    public void error(SAXParseException ex) throws SAXException {
-        throw ex;
-    }
-
-    @Override
-    public void fatalError(SAXParseException ex) throws SAXException {
-        throw ex;
-    }
-}

==================================================
