4c1ca352265fbc8ed8340d9b5bbff782f3e75f79
==================================================
Add a property to the Authenticator implementations to enable a custom JASPIC CallbackHandler to be specified.
==================================================
Mark Thomas
==================================================
Wed Nov 22 20:48:39 2017 +0000
==================================================
AuthenticatorBase.java
Add a property to the Authenticator implementations to enable a custom JASPIC CallbackHandler to be specified.
Patch provided by Lazar.
This closes #93

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816078 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestJaspicCallbackHandlerInAuthenticator.java
index c710893989..4251b451e1 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -27,6 +27,7 @@ import java.util.Optional;
 import java.util.Set;
 
 import javax.security.auth.Subject;
+import javax.security.auth.callback.CallbackHandler;
 import javax.security.auth.message.AuthException;
 import javax.security.auth.message.AuthStatus;
 import javax.security.auth.message.MessageInfo;
@@ -211,6 +212,13 @@ public abstract class AuthenticatorBase extends ValveBase
      */
     protected String secureRandomProvider = null;
 
+    /**
+     * The name of the JASPIC callback handler class. If none is specified the
+     * default {@link org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl}
+     * will be used.
+     */
+    protected String jaspicCallbackHandlerClass = null;
+
     protected SessionIdGeneratorBase sessionIdGenerator = null;
 
     /**
@@ -407,6 +415,25 @@ public abstract class AuthenticatorBase extends ValveBase
         this.secureRandomProvider = secureRandomProvider;
     }
 
+    /**
+     * Return the JASPIC callback handler class name
+     *
+     * @return The name of the JASPIC callback handler
+     */
+    public String getJaspicCallbackHandlerClass() {
+        return jaspicCallbackHandlerClass;
+    }
+
+    /**
+     * Set the JASPIC callback handler class name
+     *
+     * @param jaspicCallbackHandlerClass
+     *            The new JASPIC callback handler class name
+     */
+    public void setJaspicCallbackHandlerClass(String jaspicCallbackHandlerClass) {
+        this.jaspicCallbackHandlerClass = jaspicCallbackHandlerClass;
+    }
+
     // --------------------------------------------------------- Public Methods
 
     /**
@@ -640,8 +667,9 @@ public abstract class AuthenticatorBase extends ValveBase
                 new MessageInfoImpl(request.getRequest(), response.getResponse(), authMandatory);
 
         try {
+            CallbackHandler callbackHandler = createCallbackHandler();
             ServerAuthConfig serverAuthConfig = jaspicProvider.getServerAuthConfig(
-                    "HttpServlet", jaspicAppContextID, CallbackHandlerImpl.getInstance());
+                    "HttpServlet", jaspicAppContextID, callbackHandler);
             String authContextID = serverAuthConfig.getAuthContextID(jaspicState.messageInfo);
             jaspicState.serverAuthContext = serverAuthConfig.getAuthContext(authContextID, null, null);
         } catch (AuthException e) {
@@ -653,6 +681,32 @@ public abstract class AuthenticatorBase extends ValveBase
         return jaspicState;
     }
 
+    private CallbackHandler createCallbackHandler() {
+        CallbackHandler callbackHandler = null;
+        if (jaspicCallbackHandlerClass == null) {
+            callbackHandler = CallbackHandlerImpl.getInstance();
+        } else {
+            Class<?> clazz = null;
+            try {
+                clazz = Class.forName(jaspicCallbackHandlerClass, true,
+                        Thread.currentThread().getContextClassLoader());
+            } catch (ClassNotFoundException e) {
+                // Proceed with the retry below
+            }
+
+            try {
+                if (clazz == null) {
+                    clazz = Class.forName(jaspicCallbackHandlerClass);
+                }
+                callbackHandler = (CallbackHandler)clazz.getConstructor().newInstance();
+            } catch (ReflectiveOperationException e) {
+                throw new SecurityException(e);
+            }
+        }
+
+        return callbackHandler;
+    }
+
 
     // ------------------------------------------------------ Protected Methods
 

==================================================
