302e113d4a1fd975c94aab21dd6ae16c50ba748a
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52335
==================================================
Mark Emlyn
==================================================
Thu Dec 15 16:50:25 2011 +0000
==================================================
Parser.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52335
% is only escaped as <\%, not \%

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1214855 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestParser.java
index ddaa6d90ef..587f717ddf 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -1278,7 +1278,7 @@ class Parser implements TagConstants {
 
     /*
      * Parse for a template text string until '<' or "${" or "#{" is encountered,
-     * recognizing escape sequences "\%", "\$", and "\#".
+     * recognizing escape sequences "<\%", "\$", and "\#".
      */
     private void parseTemplateText(Node parent) throws JasperException {
 
@@ -1297,8 +1297,33 @@ class Parser implements TagConstants {
         while (reader.hasMoreInput()) {
             ch = reader.nextChar();
             if (ch == '<') {
-                reader.pushChar();
-                break;
+                // Check for <\%
+                ch = reader.nextChar();
+                if (ch == -1) {
+                    reader.pushChar();
+                    break;
+                } else if (ch == '\\') {
+                    ch = reader.nextChar();
+                    if (ch == -1) {
+                        reader.pushChar();
+                        reader.pushChar();
+                        break;
+                    } else if (ch == '%') {
+                        ttext.write('<');
+                        ttext.write('\\');
+                        ttext.write('%');
+                        continue;
+                    } else {
+                        reader.pushChar();
+                        reader.pushChar();
+                        reader.pushChar();
+                        break;
+                    }
+                } else {
+                    reader.pushChar();
+                    reader.pushChar();
+                    break;
+                }
             } else if ((ch == '$' || ch == '#') && !pageInfo.isELIgnored()) {
                 if (!reader.hasMoreInput()) {
                     ttext.write(ch);
@@ -1318,9 +1343,9 @@ class Parser implements TagConstants {
                     break;
                 }
                 char next = (char) reader.peekChar();
-                // Looking for \% or \$ or \#
-                if (next == '%' || ((next == '$' || next == '#') &&
-                        !pageInfo.isELIgnored())) {
+                // Looking for \$ or \# when EL is being used
+                if ((next == '$' || next == '#') &&
+                        !pageInfo.isELIgnored()) {
                     ch = reader.nextChar();
                 }
             }

==================================================
