b91a979f518dcb88a06b3ca5d9056f198a356562
==================================================
Add common methods to SocketWrapperBase as abstract methods and rename
==================================================
Mark Emlyn
==================================================
Mon Nov 10 16:46:40 2014 +0000
==================================================
AprServletInputStream.java
Add common methods to SocketWrapperBase as abstract methods and rename

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637929 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2ServletInputStream.java
index b0c7db355b..6c39fa01a9 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
@@ -31,16 +31,16 @@ public class AprServletInputStream extends AbstractServletInputStream {
 
     @Override
     protected boolean doIsReady() throws IOException {
-        return ((AprSocketWrapper) wrapper).doIsReady();
+        return ((AprSocketWrapper) wrapper).isReady();
     }
 
     @Override
     protected int doRead(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((AprSocketWrapper) wrapper).doRead(block, b, off, len);
+        return ((AprSocketWrapper) wrapper).read(block, b, off, len);
     }
 
     @Override
     protected void doClose() throws IOException {
-        ((AprSocketWrapper) wrapper).doClose();
+        ((AprSocketWrapper) wrapper).close();
     }
 }

==================================================
NioServletInputStream.java
index 74d2af2243..366e7450d6 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
@@ -32,16 +32,16 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
 
     @Override
     protected boolean doIsReady() throws IOException {
-        return ((Nio2SocketWrapper) wrapper).doIsReady();
+        return ((Nio2SocketWrapper) wrapper).isReady();
     }
 
     @Override
     protected int doRead(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((Nio2SocketWrapper) wrapper).doRead(block, b, off, len);
+        return ((Nio2SocketWrapper) wrapper).read(block, b, off, len);
     }
 
     @Override
     protected void doClose() throws IOException {
-        ((Nio2SocketWrapper) wrapper).doClose();
+        ((Nio2SocketWrapper) wrapper).close();
     }
 }

==================================================
AprEndpoint.java
index 36633f46af..8599beb34d 100644
--- a/java/org/apache/coyote/http11/upgrade/NioServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/NioServletInputStream.java
@@ -32,16 +32,16 @@ public class NioServletInputStream extends AbstractServletInputStream {
 
     @Override
     protected boolean doIsReady() throws IOException {
-        return ((NioSocketWrapper) wrapper).doIsReady();
+        return ((NioSocketWrapper) wrapper).isReady();
     }
 
     @Override
     protected int doRead(boolean block, byte[] b, int off, int len) throws IOException {
-        return ((NioSocketWrapper) wrapper).doRead(block, b, off, len);
+        return ((NioSocketWrapper) wrapper).read(block, b, off, len);
     }
 
     @Override
     protected void doClose() throws IOException {
-        ((NioSocketWrapper) wrapper).doClose();
+        ((NioSocketWrapper) wrapper).close();
     }
 }

==================================================
Nio2Endpoint.java
index a30d9c774c..22583f108f 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2374,8 +2374,8 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
-        public int doRead(boolean block, byte[] b, int off, int len)
-                throws IOException {
+        @Override
+        public int read(boolean block, byte[] b, int off, int len) throws IOException {
 
             if (closed) {
                 throw new IOException(sm.getString("socket.apr.closed", getSocket()));
@@ -2458,12 +2458,14 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
-        public boolean doIsReady() {
+        @Override
+        public boolean isReady() {
             return !eagain;
         }
 
 
-        public void doClose() {
+        @Override
+        public void close() {
             closed = true;
             // AbstractProcessor needs to trigger the close as multiple closes for
             // APR/native sockets will cause problems.

==================================================
NioEndpoint.java
index e3af0189fe..9ad3200cbd 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -805,7 +805,9 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         public void setSendfileData(SendfileData sf) { this.sendfileData = sf; }
         public SendfileData getSendfileData() { return this.sendfileData; }
 
-        public boolean doIsReady() throws IOException {
+
+        @Override
+        public boolean isReady() throws IOException {
             synchronized (completionHandler) {
                 if (readPending) {
                     interest = true;
@@ -837,8 +839,9 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             }
         }
 
-        public int doRead(boolean block, byte[] b, int off, int len)
-                throws IOException {
+
+        @Override
+        public int read(boolean block, byte[] b, int off, int len) throws IOException {
 
             synchronized (completionHandler) {
                 if (readPending) {
@@ -901,10 +904,13 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             }
         }
 
-        public void doClose() throws IOException {
+
+        @Override
+        public void close() throws IOException {
             getSocket().close();
         }
 
+
         private int fillReadBuffer(boolean block) throws IOException {
             ByteBuffer readBuffer = getSocket().getBufHandler().getReadBuffer();
             int nRead = 0;

==================================================
SocketWrapperBase.java
index 15c4b04171..ac598dd56f 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1409,7 +1409,9 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         }
         public long getWriteTimeout() {return this.writeTimeout;}
 
-        public boolean doIsReady() throws IOException {
+
+        @Override
+        public boolean isReady() throws IOException {
             ByteBuffer readBuffer = getSocket().getBufHandler().getReadBuffer();
 
             if (readBuffer.remaining() > 0) {
@@ -1424,7 +1426,9 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
             return isReady;
         }
 
-        public int doRead(boolean block, byte[] b, int off, int len)
+
+        @Override
+        public int read(boolean block, byte[] b, int off, int len)
                 throws IOException {
 
             ByteBuffer readBuffer = getSocket().getBufHandler().getReadBuffer();
@@ -1470,7 +1474,9 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
             return len - leftToWrite;
         }
 
-        public void doClose() throws IOException {
+
+        @Override
+        public void close() throws IOException {
             getSocket().close();
         }
 

==================================================
