ae4d3ad721c66659252351c1540da7bcff497bc4
==================================================
Complete the OpenSSL configuration plumbing for multiple certificates per virtual host
==================================================
Mark Thomas
==================================================
Fri Jun 19 20:10:23 2015 +0000
==================================================
AprEndpoint.java
Complete the OpenSSL configuration plumbing for multiple certificates per virtual host

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1686497 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLHostConfig.java
index d1761e042e..bbd4d97672 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -71,6 +71,7 @@ endpoint.apr.pollAddInvalid=Invalid attempted to add a socket [{0}] to the polle
 endpoint.apr.pollError=Poller failed with error [{0}] : [{1}]
 endpoint.apr.pollMergeEvents=Merge poller event [{1}] for socket [{0}] to create merged event [{2}]
 endpoint.apr.pollUnknownEvent=A socket was returned from the poller with an unrecognized event [{0}]
+endpoint.apr.tooManyCertFiles=More certificate files were configured than the AprEndpoint can handle
 endpoint.apr.remoteport=APR socket [{0}] opened with remote port [{1}]
 endpoint.jsse.noSslContext=No SSLContext could be found for the host name [{0}]
 endpoint.nio.selectorCloseFail=Failed to close selector when closing the poller

==================================================
SSLHostConfigCertificate.java
index 5dbd7239d1..99c783cb99 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -86,8 +86,6 @@ public class SSLHostConfig {
     private String truststoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider");
     private String truststoreType = System.getProperty("javax.net.ssl.trustStoreType");
     // OpenSSL
-    private String certificateFile;
-    private String certificateKeyFile;
     private String certificateRevocationListPath;
     private String caCertificateFile;
     private String caCertificatePath;
@@ -496,25 +494,18 @@ public class SSLHostConfig {
 
     // ------------------------------- OpenSSL specific configuration properties
 
-    public void setCertificateFile(String certificateFile) {
-        setProperty("certificateFile", Type.OPENSSL);
-        this.certificateFile = certificateFile;
-    }
-
+    // TODO: These certificate setters can be removed once it is no longer
+    // necessary to support the old configuration attributes (Tomcat 10?).
 
-    public String getCertificateFile() {
-        return certificateFile;
+    public void setCertificateFile(String certificateFile) {
+        registerDefaultCertificate();
+        defaultCertificate.setCertificateFile(certificateFile);
     }
 
 
     public void setCertificateKeyFile(String certificateKeyFile) {
-        setProperty("certificateKeyFile", Type.OPENSSL);
-        this.certificateKeyFile = certificateKeyFile;
-    }
-
-
-    public String getCertificateKeyFile() {
-        return certificateKeyFile;
+        registerDefaultCertificate();
+        defaultCertificate.setCertificateKeyFile(certificateKeyFile);
     }
 
 

==================================================
OpenSSLContext.java
index 7fdbfec59c..c57a54df3e 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
@@ -38,6 +38,10 @@ public class SSLHostConfigCertificate {
     private String certificateKeystoreProvider = DEFAULT_KEYSTORE_PROVIDER;
     private String certificateKeystoreType = DEFAULT_KEYSTORE_TYPE;
 
+    // OpenSSL
+    private String certificateFile;
+    private String certificateKeyFile;
+
 
     public SSLHostConfigCertificate(SSLHostConfig sslHostConfig, Type type) {
         this.sslHostConfig = sslHostConfig;
@@ -126,6 +130,29 @@ public class SSLHostConfigCertificate {
 
     // OpenSSL
 
+    public void setCertificateFile(String certificateFile) {
+        sslHostConfig.setProperty(
+                "Certificate.certificateFile", SSLHostConfig.Type.OPENSSL);
+        this.certificateFile = certificateFile;
+    }
+
+
+    public String getCertificateFile() {
+        return certificateFile;
+    }
+
+
+    public void setCertificateKeyFile(String certificateKeyFile) {
+        sslHostConfig.setProperty(
+                "Certificate.certificateKeyFile", SSLHostConfig.Type.OPENSSL);
+        this.certificateKeyFile = certificateKeyFile;
+    }
+
+
+    public String getCertificateKeyFile() {
+        return certificateKeyFile;
+    }
+
 
     // Nested types
 
@@ -133,7 +160,6 @@ public class SSLHostConfigCertificate {
         UNDEFINED,
         RSA,
         DSA,
-        EC,
-        DH
+        ECC
     }
 }

==================================================
OpenSSLUtil.java
index afb911a45b..03bba747e1 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -114,7 +114,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         aprPool = Pool.create(0);
         boolean success = false;
         try {
-            if (SSLHostConfig.adjustRelativePath(sslHostConfig.getCertificateFile()) == null) {
+            if (SSLHostConfig.adjustRelativePath(certificate.getCertificateFile()) == null) {
                 // This is required
                 throw new Exception(netSm.getString("endpoint.apr.noSslCertFile"));
             }
@@ -307,8 +307,8 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
             SSLContext.setCipherSuite(ctx, ciphers);
             // Load Server key and certificate
             SSLContext.setCertificate(ctx,
-                    SSLHostConfig.adjustRelativePath(sslHostConfig.getCertificateFile()),
-                    SSLHostConfig.adjustRelativePath(sslHostConfig.getCertificateKeyFile()),
+                    SSLHostConfig.adjustRelativePath(certificate.getCertificateFile()),
+                    SSLHostConfig.adjustRelativePath(certificate.getCertificateKeyFile()),
                     certificate.getCertificateKeyPassword(), SSL.SSL_AIDX_RSA);
             // Support Client Certificates
             SSLContext.setCACertificate(ctx,

==================================================
