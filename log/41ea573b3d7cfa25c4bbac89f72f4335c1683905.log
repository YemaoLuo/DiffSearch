41ea573b3d7cfa25c4bbac89f72f4335c1683905
==================================================
Clean-up. No functional change.
==================================================
Mark Emlyn
==================================================
Tue Oct 25 17:43:47 2011 +0000
==================================================
AddDefaultCharsetFilter.java
Clean-up. No functional change.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1188823 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index 303a804996..0970e8473d 100644
--- a/java/org/apache/catalina/filters/AddDefaultCharsetFilter.java
+++ b/java/org/apache/catalina/filters/AddDefaultCharsetFilter.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.filters;
 
 import java.io.IOException;

==================================================
CsrfPreventionFilter.java
index 74bc843058..cc36397aae 100644
--- a/java/org/apache/catalina/filters/Constants.java
+++ b/java/org/apache/catalina/filters/Constants.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.filters;
 
 
@@ -26,7 +24,6 @@ package org.apache.catalina.filters;
  * @author Craig R. McClanahan
  * @version $Id$
  */
-
 public final class Constants {
 
     public static final String Package = "org.apache.catalina.filters";

==================================================
ExpiresFilter.java
index 4523d244e7..b6cfcf954f 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.filters;
 
 import java.io.IOException;
@@ -204,14 +203,16 @@ public class CsrfPreventionFilter extends FilterBase {
         for (int j = 0; j < random.length; j++) {
             byte b1 = (byte) ((random[j] & 0xf0) >> 4);
             byte b2 = (byte) (random[j] & 0x0f);
-            if (b1 < 10)
+            if (b1 < 10) {
                 buffer.append((char) ('0' + b1));
-            else
+            } else {
                 buffer.append((char) ('A' + (b1 - 10)));
-            if (b2 < 10)
+            }
+            if (b2 < 10) {
                 buffer.append((char) ('0' + b2));
-            else
+            } else {
                 buffer.append((char) ('A' + (b2 - 10)));
+            }
         }
 
         return buffer.toString();
@@ -220,7 +221,7 @@ public class CsrfPreventionFilter extends FilterBase {
     protected static class CsrfResponseWrapper
             extends HttpServletResponseWrapper {
 
-        private String nonce;
+        private final String nonce;
 
         public CsrfResponseWrapper(HttpServletResponse response, String nonce) {
             super(response);
@@ -257,8 +258,9 @@ public class CsrfPreventionFilter extends FilterBase {
          */
         private String addNonce(String url) {
 
-            if ((url == null) || (nonce == null))
+            if ((url == null) || (nonce == null)) {
                 return (url);
+            }
 
             String path = url;
             String query = "";

==================================================
FilterBase.java
index 6f0663bb11..f950bd27af 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -464,12 +464,12 @@ public class ExpiresFilter extends FilterBase {
         /**
          * List of duration elements.
          */
-        private List<Duration> durations;
+        private final List<Duration> durations;
 
         /**
          * Starting point of the elaspse to set in the response.
          */
-        private StartingPoint startingPoint;
+        private final StartingPoint startingPoint;
 
         public ExpiresConfiguration(StartingPoint startingPoint,
                 List<Duration> durations) {
@@ -533,7 +533,7 @@ public class ExpiresFilter extends FilterBase {
 
         private PrintWriter printWriter;
 
-        private HttpServletRequest request;
+        private final HttpServletRequest request;
 
         private ServletOutputStream servletOutputStream;
 
@@ -636,11 +636,11 @@ public class ExpiresFilter extends FilterBase {
      * "Start Write Response Body" event.
      */
     public class XPrintWriter extends PrintWriter {
-        private PrintWriter out;
+        private final PrintWriter out;
 
-        private HttpServletRequest request;
+        private final HttpServletRequest request;
 
-        private XHttpServletResponse response;
+        private final XHttpServletResponse response;
 
         public XPrintWriter(PrintWriter out, HttpServletRequest request,
                 XHttpServletResponse response) {
@@ -851,11 +851,11 @@ public class ExpiresFilter extends FilterBase {
      */
     public class XServletOutputStream extends ServletOutputStream {
 
-        private HttpServletRequest request;
+        private final HttpServletRequest request;
 
-        private XHttpServletResponse response;
+        private final XHttpServletResponse response;
 
-        private ServletOutputStream servletOutputStream;
+        private final ServletOutputStream servletOutputStream;
 
         public XServletOutputStream(ServletOutputStream servletOutputStream,
                 HttpServletRequest request, XHttpServletResponse response) {

==================================================
RemoteAddrFilter.java
index 830246e630..d6b2a612b5 100644
--- a/java/org/apache/catalina/filters/FilterBase.java
+++ b/java/org/apache/catalina/filters/FilterBase.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.filters;
 
 import java.util.Enumeration;

==================================================
RemoteHostFilter.java
index cc8730386d..8fe9fc6828 100644
--- a/java/org/apache/catalina/filters/RemoteAddrFilter.java
+++ b/java/org/apache/catalina/filters/RemoteAddrFilter.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.filters;
 
 
@@ -40,8 +38,7 @@ import org.apache.juli.logging.LogFactory;
  *
  */
 
-public final class RemoteAddrFilter
-    extends RequestFilter {
+public final class RemoteAddrFilter extends RequestFilter {
 
     // ----------------------------------------------------- Instance Variables
     private static final Log log = LogFactory.getLog(RemoteAddrFilter.class);

==================================================
RequestDumperFilter.java
index 5292b5c17c..de8a327b0e 100644
--- a/java/org/apache/catalina/filters/RemoteHostFilter.java
+++ b/java/org/apache/catalina/filters/RemoteHostFilter.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.filters;
 
 
@@ -39,22 +37,15 @@ import org.apache.juli.logging.LogFactory;
  * @author Craig R. McClanahan
  *
  */
-
-public final class RemoteHostFilter
-    extends RequestFilter {
-
+public final class RemoteHostFilter extends RequestFilter {
 
     // ----------------------------------------------------- Instance Variables
-    private static final Log log = LogFactory.getLog(RemoteHostFilter.class);
-
-
-    // ------------------------------------------------------------- Properties
 
+    private static final Log log = LogFactory.getLog(RemoteHostFilter.class);
 
 
     // --------------------------------------------------------- Public Methods
 
-
     /**
      * Extract the desired request property, and pass it (along with the
      * specified request and response objects and associated filter chain) to
@@ -98,5 +89,4 @@ public final class RemoteHostFilter
     protected Log getLogger() {
         return log;
     }
-
 }

==================================================
RequestFilter.java
index f5d1126b22..8c1c64202e 100644
--- a/java/org/apache/catalina/filters/RequestDumperFilter.java
+++ b/java/org/apache/catalina/filters/RequestDumperFilter.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.filters;
 
 import java.io.IOException;
@@ -49,7 +48,6 @@ import org.apache.juli.logging.LogFactory;
  *
  * @author Craig R. McClanahan
  */
-
 public class RequestDumperFilter implements Filter {
 
     private static final String NON_HTTP_REQ_MSG =
@@ -121,9 +119,10 @@ public class RequestDumperFilter implements Filter {
             doLog("       contextPath", hRequest.getContextPath());
             Cookie cookies[] = hRequest.getCookies();
             if (cookies != null) {
-                for (int i = 0; i < cookies.length; i++)
+                for (int i = 0; i < cookies.length; i++) {
                     doLog("            cookie", cookies[i].getName() +
                             "=" + cookies[i].getValue());
+                }
             }
             Enumeration<String> hnames = hRequest.getHeaderNames();
             while (hnames.hasMoreElements()) {
@@ -151,8 +150,9 @@ public class RequestDumperFilter implements Filter {
             StringBuilder result = new StringBuilder(pname);
             result.append('=');
             for (int i = 0; i < pvalues.length; i++) {
-                if (i > 0)
+                if (i > 0) {
                     result.append(", ");
+                }
                 result.append(pvalues[i]);
             }
             doLog("         parameter", result.toString());
@@ -219,8 +219,9 @@ public class RequestDumperFilter implements Filter {
             Iterable<String> rhnames = hResponse.getHeaderNames();
             for (String rhname : rhnames) {
                 Iterable<String> rhvalues = hResponse.getHeaders(rhname);
-                for (String rhvalue : rhvalues)
+                for (String rhvalue : rhvalues) {
                     doLog("            header", rhname + "=" + rhvalue);
+                }
             }
         }
 
@@ -274,8 +275,8 @@ public class RequestDumperFilter implements Filter {
     }
 
     private static final class Timestamp {
-        private Date date = new Date(0);
-        private SimpleDateFormat format =
+        private final Date date = new Date(0);
+        private final SimpleDateFormat format =
             new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
         private String dateString = format.format(date);
         private void update() {

==================================================
SetCharacterEncodingFilter.java
index 2f03e4bbc4..25a7d77b6f 100644
--- a/java/org/apache/catalina/filters/RequestFilter.java
+++ b/java/org/apache/catalina/filters/RequestFilter.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.filters;
 
 
@@ -57,9 +55,7 @@ import org.apache.catalina.comet.CometFilterChain;
  * <li>The request will be rejected with a "Forbidden" HTTP response.</li>
  * </ul>
  */
-
-public abstract class RequestFilter
-    extends FilterBase implements CometFilter {
+public abstract class RequestFilter extends FilterBase implements CometFilter {
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
WebdavFixFilter.java
index ac35edd7f6..885d7886e1 100644
--- a/java/org/apache/catalina/filters/SetCharacterEncodingFilter.java
+++ b/java/org/apache/catalina/filters/SetCharacterEncodingFilter.java
@@ -52,7 +52,6 @@ import org.apache.juli.logging.LogFactory;
  * and <code>User-Agent</code> headers, or a value stashed in the current
  * user's session.</p>
  */
-
 public class SetCharacterEncodingFilter extends FilterBase {
 
     private static final Log log =
@@ -100,8 +99,9 @@ public class SetCharacterEncodingFilter extends FilterBase {
         // Conditionally select and set the character encoding to be used
         if (ignore || (request.getCharacterEncoding() == null)) {
             String characterEncoding = selectEncoding(request);
-            if (characterEncoding != null)
+            if (characterEncoding != null) {
                 request.setCharacterEncoding(characterEncoding);
+            }
         }
 
         // Pass control on to the next filter

==================================================
