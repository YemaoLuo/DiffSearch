bfae8ecafbd25d31a43aa1dd93ae2381ace386ee
==================================================
Generics changes for o.a.c.mbeans
==================================================
Mark Emlyn
==================================================
Fri Dec 26 20:20:38 2008 +0000
==================================================
ConnectorMBean.java
Generics changes for o.a.c.mbeans
Remove some unused code identified by Eclipse

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729531 13f79535-47bb-0310-9956-ffa450edef68



==================================================
GlobalResourcesLifecycleListener.java
index 17cc794b16..74ce1894b3 100644
--- a/java/org/apache/catalina/mbeans/ConnectorMBean.java
+++ b/java/org/apache/catalina/mbeans/ConnectorMBean.java
@@ -78,7 +78,6 @@ public class ConnectorMBean extends ClassNameMBean {
     public Object getAttribute(String name) throws AttributeNotFoundException,
             MBeanException, ReflectionException {
 
-        Object attribute = null;
         // Validate the input parameters
         if (name == null)
             throw new RuntimeOperationsException(new IllegalArgumentException(

==================================================
GroupMBean.java
index ef66366e97..69015db0fa 100644
--- a/java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java
@@ -132,9 +132,9 @@ public class GlobalResourcesLifecycleListener
         }
 
         try {
-            NamingEnumeration bindings = context.listBindings("");
+            NamingEnumeration<Binding> bindings = context.listBindings("");
             while (bindings.hasMore()) {
-                Binding binding = (Binding) bindings.next();
+                Binding binding = bindings.next();
                 String name = prefix + binding.getName();
                 Object value = context.lookup(binding.getName());
                 if (log.isDebugEnabled()) {
@@ -182,9 +182,9 @@ public class GlobalResourcesLifecycleListener
         }
 
         // Create the MBeans for each defined Role
-        Iterator roles = database.getRoles();
+        Iterator<Role> roles = database.getRoles();
         while (roles.hasNext()) {
-            Role role = (Role) roles.next();
+            Role role = roles.next();
             if (log.isDebugEnabled()) {
                 log.debug("  Creating Role MBean for role " + role);
             }
@@ -195,9 +195,9 @@ public class GlobalResourcesLifecycleListener
         }
 
         // Create the MBeans for each defined Group
-        Iterator groups = database.getGroups();
+        Iterator<Group> groups = database.getGroups();
         while (groups.hasNext()) {
-            Group group = (Group) groups.next();
+            Group group = groups.next();
             if (log.isDebugEnabled()) {
                 log.debug("  Creating Group MBean for group " + group);
             }
@@ -208,9 +208,9 @@ public class GlobalResourcesLifecycleListener
         }
 
         // Create the MBeans for each defined User
-        Iterator users = database.getUsers();
+        Iterator<User> users = database.getUsers();
         while (users.hasNext()) {
-            User user = (User) users.next();
+            User user = users.next();
             if (log.isDebugEnabled()) {
                 log.debug("  Creating User MBean for user " + user);
             }

==================================================
MBeanFactory.java
index bb92e5bd62..a3613c8f77 100644
--- a/java/org/apache/catalina/mbeans/GroupMBean.java
+++ b/java/org/apache/catalina/mbeans/GroupMBean.java
@@ -96,12 +96,12 @@ public class GroupMBean extends BaseModelMBean {
     public String[] getRoles() {
 
         Group group = (Group) this.resource;
-        ArrayList results = new ArrayList();
-        Iterator roles = group.getRoles();
+        ArrayList<String> results = new ArrayList<String>();
+        Iterator<Role> roles = group.getRoles();
         while (roles.hasNext()) {
             Role role = null;
             try {
-                role = (Role) roles.next();
+                role = roles.next();
                 ObjectName oname =
                     MBeanUtils.createObjectName(managed.getDomain(), role);
                 results.add(oname.toString());
@@ -112,7 +112,7 @@ public class GroupMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 
@@ -123,12 +123,12 @@ public class GroupMBean extends BaseModelMBean {
     public String[] getUsers() {
 
         Group group = (Group) this.resource;
-        ArrayList results = new ArrayList();
-        Iterator users = group.getUsers();
+        ArrayList<String> results = new ArrayList<String>();
+        Iterator<User> users = group.getUsers();
         while (users.hasNext()) {
             User user = null;
             try {
-                user = (User) users.next();
+                user = users.next();
                 ObjectName oname =
                     MBeanUtils.createObjectName(managed.getDomain(), user);
                 results.add(oname.toString());
@@ -139,7 +139,7 @@ public class GroupMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 

==================================================
MBeanUtils.java
index 43f213b01f..b6c4a8d57d 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -54,7 +54,6 @@ import org.apache.catalina.valves.RemoteHostValve;
 import org.apache.catalina.valves.RequestDumperValve;
 import org.apache.catalina.valves.ValveBase;
 import org.apache.tomcat.util.modeler.BaseModelMBean;
-import org.apache.tomcat.util.modeler.Registry;
 
 
 /**
@@ -75,11 +74,6 @@ public class MBeanFactory extends BaseModelMBean {
      */
     private static MBeanServer mserver = MBeanUtils.createServer();
 
-    /**
-     * The configuration information registry for our managed beans.
-     */
-    private static Registry registry = MBeanUtils.createRegistry();
-
 
     // ----------------------------------------------------------- Constructors
 
@@ -661,7 +655,7 @@ public class MBeanFactory extends BaseModelMBean {
      * @exception Exception if an MBean cannot be created or registered
      */
 
-    public Vector createStandardEngineService(String parent, 
+    public Vector<ObjectName> createStandardEngineService(String parent, 
             String engineName, String defaultHost, String serviceName)
         throws Exception {
 
@@ -677,7 +671,7 @@ public class MBeanFactory extends BaseModelMBean {
         // Add the new instance to its parent component
         Server server = ServerFactory.getServer();
         server.addService(service);
-        Vector onames = new Vector();
+        Vector<ObjectName> onames = new Vector<ObjectName>();
         // FIXME service & engine.getObjectName
         //ObjectName oname = engine.getObjectName();
         ObjectName oname = 
@@ -873,12 +867,11 @@ public class MBeanFactory extends BaseModelMBean {
 
         // Acquire a reference to the component to be removed
         ObjectName oname = new ObjectName(name);
-        Server server = ServerFactory.getServer();
         Service service = getService(oname);
         String port = oname.getKeyProperty("port");
         //String address = oname.getKeyProperty("address");
 
-        Connector conns[] = (Connector[]) service.findConnectors();
+        Connector conns[] = service.findConnectors();
 
         for (int i = 0; i < conns.length; i++) {
             String connAddress = String.valueOf(conns[i].getProperty("address"));
@@ -1063,8 +1056,7 @@ public class MBeanFactory extends BaseModelMBean {
         // Acquire a reference to the component to be removed
         ObjectName oname = new ObjectName(name);
         ContainerBase container = getParentContainerFromChild(oname);
-        String sequence = oname.getKeyProperty("seq");
-        Valve[] valves = (Valve[])container.getValves();
+        Valve[] valves = container.getValves();
         for (int i = 0; i < valves.length; i++) {
             ObjectName voname = ((ValveBase) valves[i]).getObjectName();
             if (voname.equals(oname)) {

==================================================
MemoryUserDatabaseMBean.java
index b722b32cd4..4ccd23e226 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -740,10 +740,6 @@ public class MBeanUtils {
                     IntrospectionUtils.getProperty(connector, "address");
                 Integer port = (Integer)
                     IntrospectionUtils.getProperty(connector, "port");
-                Service service = connector.getService();
-                String serviceName = null;
-                if (service != null)
-                    serviceName = service.getName();
                 StringBuffer sb = new StringBuffer(domain);
                 sb.append(":type=Connector");
                 sb.append(",port=" + port);
@@ -779,7 +775,6 @@ public class MBeanUtils {
 
         ObjectName name = null;
         Host host = (Host)context.getParent();
-        Service service = ((Engine)host.getParent()).getService();
         String path = context.getPath();
         if (path.length() < 1)
             path = "/";
@@ -817,8 +812,6 @@ public class MBeanUtils {
             if (path.length() < 1)
                 path = "/";
             Host host = (Host) ((Context)container).getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Environment" + 
                         ",resourcetype=Context,path=" + path + 
                         ",host=" + host.getName() +
@@ -855,8 +848,6 @@ public class MBeanUtils {
             if (path.length() < 1)
                 path = "/";
             Host host = (Host) ((Context)container).getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Resource" +
                         ",resourcetype=Context,path=" + path + 
                         ",host=" + host.getName() +
@@ -896,8 +887,6 @@ public class MBeanUtils {
             if (path.length() < 1)
                 path = "/";
             Host host = (Host) ((Context)container).getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=ResourceLink" +
                         ",resourcetype=Context,path=" + path + 
                         ",host=" + host.getName() +
@@ -966,8 +955,6 @@ public class MBeanUtils {
         throws MalformedObjectNameException {
 
         ObjectName name = null;
-        Engine engine = (Engine)host.getParent();
-        Service service = engine.getService();
         name = new ObjectName(domain + ":type=Host,host=" +
                               host.getName());
         return (name);
@@ -992,11 +979,8 @@ public class MBeanUtils {
         Container container = loader.getContainer();
 
         if (container instanceof Engine) {
-            Service service = ((Engine)container).getService();
             name = new ObjectName(domain + ":type=Loader");
         } else if (container instanceof Host) {
-            Engine engine = (Engine) container.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Loader,host=" +
                               container.getName());
         } else if (container instanceof Context) {
@@ -1005,8 +989,6 @@ public class MBeanUtils {
                 path = "/";
             }
             Host host = (Host) container.getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Loader,path=" + path +
                               ",host=" + host.getName());
         }
@@ -1033,11 +1015,8 @@ public class MBeanUtils {
         Container container = manager.getContainer();
 
         if (container instanceof Engine) {
-            Service service = ((Engine)container).getService();
             name = new ObjectName(domain + ":type=Manager");
         } else if (container instanceof Host) {
-            Engine engine = (Engine) container.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Manager,host=" +
                               container.getName());
         } else if (container instanceof Context) {
@@ -1046,8 +1025,6 @@ public class MBeanUtils {
                 path = "/";
             }
             Host host = (Host) container.getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Manager,path=" + path +
                               ",host=" + host.getName());
         }
@@ -1080,8 +1057,6 @@ public class MBeanUtils {
             if (path.length() < 1)
                 path = "/";
             Host host = (Host) ((Context)container).getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=NamingResources" + 
                         ",resourcetype=Context,path=" + path + 
                         ",host=" + host.getName());
@@ -1129,11 +1104,8 @@ public class MBeanUtils {
         Container container = realm.getContainer();
 
         if (container instanceof Engine) {
-            Service service = ((Engine)container).getService();
             name = new ObjectName(domain + ":type=Realm");
         } else if (container instanceof Host) {
-            Engine engine = (Engine) container.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Realm,host=" +
                               container.getName());
         } else if (container instanceof Context) {
@@ -1142,8 +1114,6 @@ public class MBeanUtils {
                 path = "/";
             }
             Host host = (Host) container.getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=Realm,path=" + path +
                               ",host=" + host.getName());
         }
@@ -1292,7 +1262,6 @@ public class MBeanUtils {
                                valve);
         }        
         if (container instanceof Engine) {
-            Service service = ((Engine)container).getService();
             String local="";
             int seq = getSeq(local);
             String ext="";
@@ -1302,7 +1271,6 @@ public class MBeanUtils {
             name = new ObjectName(domain + ":type=Valve,name=" + className + 
                                     ext + local );
         } else if (container instanceof Host) {
-            Service service = ((Engine)container.getParent()).getService();
             String local=",host=" +container.getName();
             int seq = getSeq(local);
             String ext="";
@@ -1317,7 +1285,6 @@ public class MBeanUtils {
                 path = "/";
             }
             Host host = (Host) container.getParent();
-            Service service = ((Engine) host.getParent()).getService();
             String local=",path=" + path + ",host=" +
                     host.getName();
             int seq = getSeq(local);
@@ -1333,9 +1300,9 @@ public class MBeanUtils {
 
     }
 
-    static Hashtable seq=new Hashtable();
+    static Hashtable<String,int[]> seq = new Hashtable<String,int[]>();
     static int getSeq( String key ) {
-        int i[]=(int [])seq.get( key );
+        int i[]=seq.get( key );
         if (i == null ) {
             i=new int[1];
             i[0]=0;
@@ -1862,7 +1829,7 @@ public class MBeanUtils {
         try {
             ((Contained)valve).setContainer(null);
         } catch (Throwable t) {
-        ;
+            // Ignore
         }
         if( mserver.isRegistered(oname) ) {
             mserver.unregisterMBean(oname);

==================================================
NamingResourcesMBean.java
index 20e7a9d3ca..c098d301f2 100644
--- a/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
+++ b/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
@@ -118,13 +118,13 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
     public String[] getGroups() {
 
         UserDatabase database = (UserDatabase) this.resource;
-        ArrayList results = new ArrayList();
-        Iterator groups = database.getGroups();
+        ArrayList<String> results = new ArrayList<String>();
+        Iterator<Group> groups = database.getGroups();
         while (groups.hasNext()) {
-            Group group = (Group) groups.next();
+            Group group = groups.next();
             results.add(findGroup(group.getGroupname()));
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 
@@ -135,13 +135,13 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
     public String[] getRoles() {
 
         UserDatabase database = (UserDatabase) this.resource;
-        ArrayList results = new ArrayList();
-        Iterator roles = database.getRoles();
+        ArrayList<String> results = new ArrayList<String>();
+        Iterator<Role> roles = database.getRoles();
         while (roles.hasNext()) {
-            Role role = (Role) roles.next();
+            Role role = roles.next();
             results.add(findRole(role.getRolename()));
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 
@@ -152,13 +152,13 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
     public String[] getUsers() {
 
         UserDatabase database = (UserDatabase) this.resource;
-        ArrayList results = new ArrayList();
-        Iterator users = database.getUsers();
+        ArrayList<String> results = new ArrayList<String>();
+        Iterator<User> users = database.getUsers();
         while (users.hasNext()) {
-            User user = (User) users.next();
+            User user = users.next();
             results.add(findUser(user.getUsername()));
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 

==================================================
StandardContextMBean.java
index c3e6d6f789..dfb41489a2 100644
--- a/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
+++ b/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
@@ -87,7 +87,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
     public String[] getEnvironments() {
         ContextEnvironment[] envs = 
                             ((NamingResources)this.resource).findEnvironments();
-        ArrayList results = new ArrayList();
+        ArrayList<String> results = new ArrayList<String>();
         for (int i = 0; i < envs.length; i++) {
             try {
                 ObjectName oname =
@@ -100,7 +100,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
     
@@ -113,7 +113,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
         
         ContextResource[] resources = 
                             ((NamingResources)this.resource).findResources();
-        ArrayList results = new ArrayList();
+        ArrayList<String> results = new ArrayList<String>();
         for (int i = 0; i < resources.length; i++) {
             try {
                 ObjectName oname =
@@ -126,7 +126,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
     
@@ -139,7 +139,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
         
         ContextResourceLink[] resourceLinks = 
                             ((NamingResources)this.resource).findResourceLinks();
-        ArrayList results = new ArrayList();
+        ArrayList<String> results = new ArrayList<String>();
         for (int i = 0; i < resourceLinks.length; i++) {
             try {
                 ObjectName oname =
@@ -152,7 +152,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 

==================================================
StandardEngineMBean.java
index 0971646df3..7a76f06f91 100644
--- a/java/org/apache/catalina/mbeans/StandardContextMBean.java
+++ b/java/org/apache/catalina/mbeans/StandardContextMBean.java
@@ -107,7 +107,7 @@ public class StandardContextMBean extends BaseModelMBean {
      */
     public String[] getEnvironments() {
         ContextEnvironment[] envs = getNamingResources().findEnvironments();
-        ArrayList results = new ArrayList();
+        ArrayList<String> results = new ArrayList<String>();
         for (int i = 0; i < envs.length; i++) {
             try {
                 ObjectName oname =
@@ -120,7 +120,7 @@ public class StandardContextMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
     
@@ -132,7 +132,7 @@ public class StandardContextMBean extends BaseModelMBean {
     public String[] getResources() {
         
         ContextResource[] resources = getNamingResources().findResources();
-        ArrayList results = new ArrayList();
+        ArrayList<String> results = new ArrayList<String>();
         for (int i = 0; i < resources.length; i++) {
             try {
                 ObjectName oname =
@@ -145,7 +145,7 @@ public class StandardContextMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 
@@ -157,7 +157,7 @@ public class StandardContextMBean extends BaseModelMBean {
     public String[] getResourceLinks() {
         
         ContextResourceLink[] links = getNamingResources().findResourceLinks();
-        ArrayList results = new ArrayList();
+        ArrayList<String> results = new ArrayList<String>();
         for (int i = 0; i < links.length; i++) {
             try {
                 ObjectName oname =
@@ -170,7 +170,7 @@ public class StandardContextMBean extends BaseModelMBean {
                 throw iae;
             }
         }
-        return ((String[]) results.toArray(new String[results.size()]));
+        return results.toArray(new String[results.size()]);
 
     }
 

==================================================
StandardServerMBean.java
index 0e0d7e9442..7da7e7d40e 100644
--- a/java/org/apache/catalina/mbeans/StandardEngineMBean.java
+++ b/java/org/apache/catalina/mbeans/StandardEngineMBean.java
@@ -19,7 +19,6 @@ package org.apache.catalina.mbeans;
 
 
 import javax.management.MBeanException;
-import javax.management.MBeanServer;
 import javax.management.RuntimeOperationsException;
 
 import org.apache.tomcat.util.modeler.BaseModelMBean;
@@ -35,11 +34,6 @@ import org.apache.tomcat.util.modeler.BaseModelMBean;
 
 public class StandardEngineMBean extends BaseModelMBean {
 
-    /**
-     * The <code>MBeanServer</code> for this application.
-     */
-    private static MBeanServer mserver = MBeanUtils.createServer();
-    
     // ----------------------------------------------------------- Constructors
 
 

==================================================
StandardServiceMBean.java
index 3599da32a0..e74d227c1e 100644
--- a/java/org/apache/catalina/mbeans/StandardServerMBean.java
+++ b/java/org/apache/catalina/mbeans/StandardServerMBean.java
@@ -20,7 +20,6 @@ package org.apache.catalina.mbeans;
 
 import javax.management.InstanceNotFoundException;
 import javax.management.MBeanException;
-import javax.management.MBeanServer;
 import javax.management.RuntimeOperationsException;
 import org.apache.catalina.Server;
 import org.apache.catalina.ServerFactory;
@@ -39,15 +38,6 @@ import org.apache.tomcat.util.modeler.BaseModelMBean;
 public class StandardServerMBean extends BaseModelMBean {
 
 
-    // ------------------------------------------------------- Static Variables
-
-
-    /**
-     * The <code>MBeanServer</code> for this application.
-     */
-    private static MBeanServer mserver = MBeanUtils.createServer();
-
-
     // ----------------------------------------------------------- Constructors
 
 

==================================================
UserMBean.java
index 1d57460dce..58be37540e 100644
--- a/java/org/apache/catalina/mbeans/StandardServiceMBean.java
+++ b/java/org/apache/catalina/mbeans/StandardServiceMBean.java
@@ -19,7 +19,6 @@ package org.apache.catalina.mbeans;
 
 
 import javax.management.MBeanException;
-import javax.management.MBeanServer;
 import javax.management.RuntimeOperationsException;
 
 import org.apache.tomcat.util.modeler.BaseModelMBean;
@@ -35,11 +34,6 @@ import org.apache.tomcat.util.modeler.BaseModelMBean;
 
 public class StandardServiceMBean extends BaseModelMBean {
 
-    /**
-     * The <code>MBeanServer</code> for this application.
-     */
-    private static MBeanServer mserver = MBeanUtils.createServer();
-    
     // ----------------------------------------------------------- Constructors
 
 

==================================================
