668203d4df75b550874fc45c675ef819ab05f71b
==================================================
Add a packetSize option to match the option on the native side.
==================================================
Jean-Frederic Clere
==================================================
Mon Oct 23 09:15:22 2006 +0000
==================================================
ChannelNioSocket.java
Add a packetSize option to match the option on the native side.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@466958 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ChannelSocket.java
index 59af910c02..98da709b10 100644
--- a/java/org/apache/jk/common/ChannelNioSocket.java
+++ b/java/org/apache/jk/common/ChannelNioSocket.java
@@ -99,6 +99,7 @@ public class ChannelNioSocket extends JkHandler
     private boolean nioIsBroken = false;
     private Selector selector = null;
     private int bufferSize = 8*1024;
+    private int packetSize = 8*1024;
 
     private long requestCount=0;
     
@@ -160,6 +161,17 @@ public class ChannelNioSocket extends JkHandler
         return bufferSize;
     }
 
+    public void setPacketSize(int ps) {
+        if(ps < 8*1024) {
+            ps = 8*1024;
+        }
+        packetSize = ps;
+    }
+
+    public int getPacketSize() {
+        return packetSize;
+    }
+
 
     /**
      * jmx:managed-attribute description="Bind on a specified address" access="READ_WRITE"
@@ -792,7 +804,7 @@ public class ChannelNioSocket extends JkHandler
 
     protected class SocketConnection implements ThreadPoolRunnable {
         MsgContext ep;
-        MsgAjp recv = new MsgAjp();
+        MsgAjp recv = new MsgAjp(packetSize);
         boolean inProgress = false;
 
         SocketConnection(MsgContext ep) {

==================================================
MsgAjp.java
index fe4255bd48..8bca7b2d11 100644
--- a/java/org/apache/jk/common/ChannelSocket.java
+++ b/java/org/apache/jk/common/ChannelSocket.java
@@ -88,6 +88,7 @@ public class ChannelSocket extends JkHandler
     private int linger=100;
     private int socketTimeout;
     private int bufferSize = -1;
+    private int packetSize = 8*1024;
 
     private long requestCount=0;
     
@@ -205,6 +206,17 @@ public class ChannelSocket extends JkHandler
         return bufferSize;
     }
 
+    public void setPacketSize(int ps) {
+        if(ps < 8*1024) {
+            ps = 8*1024;
+        }
+        packetSize = ps;
+    }
+
+    public int getPacketSize() {
+        return packetSize;
+    }
+
     /** At startup we'll look for the first free port in the range.
         The difference between this port and the beggining of the range
         is the 'id'.
@@ -665,7 +677,7 @@ public class ChannelSocket extends JkHandler
      */
     void processConnection(MsgContext ep) {
         try {
-            MsgAjp recv=new MsgAjp();
+            MsgAjp recv=new MsgAjp(packetSize);
             while( running ) {
                 if(paused) { // Drop the connection on pause
                     break;

==================================================
JkMain.java
index b43af8576e..380185b46e 100644
--- a/java/org/apache/jk/mbeans-descriptors.xml
+++ b/java/org/apache/jk/mbeans-descriptors.xml
@@ -50,6 +50,9 @@
           description="are worker threads on daemon mode"
                  type="boolean"
             writeable="false"/>
+    <attribute name="packetSize"
+          description="The maximum AJP packet size"
+          type="int" />
 
     <operation name="start"
                description="Start, if server socket no create call init"

==================================================
