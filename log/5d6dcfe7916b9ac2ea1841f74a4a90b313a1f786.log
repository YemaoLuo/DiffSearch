5d6dcfe7916b9ac2ea1841f74a4a90b313a1f786
==================================================
Fix some Eclipse warnings
==================================================
Mark Emlyn
==================================================
Thu Oct 25 08:17:13 2012 +0000
==================================================
GenericNamingResourcesFactory.java
Fix some Eclipse warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1402014 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SlowQueryReport.java
index 8de99812b1..ef6a6653dd 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
@@ -66,7 +66,7 @@ public class GenericNamingResourcesFactory implements ObjectFactory {
             if (addr.getContent()!=null) {
                 value = addr.getContent().toString();
             }
-            if (setProperty(o, param, value,false)) {
+            if (setProperty(o, param, value)) {
 
             } else {
                 log.debug("Property not configured["+param+"]. No setter found on["+o+"].");
@@ -75,7 +75,8 @@ public class GenericNamingResourcesFactory implements ObjectFactory {
         return o;
     }
 
-    public static boolean setProperty(Object o, String name, String value,boolean invokeSetProperty) {
+    @SuppressWarnings("null") // setPropertyMethodVoid can't be null when used
+    private static boolean setProperty(Object o, String name, String value) {
         if (log.isDebugEnabled())
             log.debug("IntrospectionUtils: setProperty(" +
                     o.getClass() + " " + name + "=" + value + ")");

==================================================
SlowQueryReportJmx.java
index 2c1c3100ac..6c9d2bc6cd 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -45,7 +45,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
      * we will be keeping track of query stats on a per pool basis
      */
     protected static ConcurrentHashMap<String,ConcurrentHashMap<String,QueryStats>> perPoolStats =
-        new ConcurrentHashMap<String,ConcurrentHashMap<String,QueryStats>>();
+        new ConcurrentHashMap<>();
     /**
      * the queries that are used for this interceptor.
      */
@@ -137,7 +137,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
             //create the map to hold our stats
             //however TODO we need to improve the eviction
             //selection
-            queries = new ConcurrentHashMap<String,QueryStats>();
+            queries = new ConcurrentHashMap<>();
             if (perPoolStats.putIfAbsent(pool.getName(), queries)!=null) {
                 //there already was one
                 queries = SlowQueryReport.perPoolStats.get(pool.getName());

==================================================
StatementCache.java
index 1e15e8c243..a3b3d57956 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
@@ -66,7 +66,7 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
 
 
     protected static ConcurrentHashMap<String,SlowQueryReportJmxMBean> mbeans =
-        new ConcurrentHashMap<String,SlowQueryReportJmxMBean>();
+        new ConcurrentHashMap<>();
 
 
     //==============================JMX STUFF========================

==================================================
StatementDecoratorInterceptor.java
index 3aad564d8e..5a9ebc18fa 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
@@ -87,7 +87,7 @@ public class StatementCache extends StatementDecoratorInterceptor {
 
     /*begin the cache size*/
     private static ConcurrentHashMap<ConnectionPool,AtomicInteger> cacheSizeMap =
-        new ConcurrentHashMap<ConnectionPool,AtomicInteger>();
+        new ConcurrentHashMap<>();
 
     private AtomicInteger cacheSize;
 
@@ -115,7 +115,8 @@ public class StatementCache extends StatementDecoratorInterceptor {
             cacheSize = cacheSizeMap.get(parent);
             this.pcon = con;
             if (!pcon.getAttributes().containsKey(STATEMENT_CACHE_ATTR)) {
-                ConcurrentHashMap<String,CachedStatement> cache = new ConcurrentHashMap<String, CachedStatement>();
+                ConcurrentHashMap<String,CachedStatement> cache =
+                        new ConcurrentHashMap<>();
                 pcon.getAttributes().put(STATEMENT_CACHE_ATTR,cache);
             }
         }

==================================================
StatementFinalizer.java
index cf6050307e..8cab3836e3 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
@@ -131,7 +131,7 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
     throws InstantiationException, IllegalAccessException, InvocationTargetException {
         Object result = null;
         StatementProxy<Statement> statementProxy =
-                new StatementProxy<Statement>((Statement)statement,sql);
+                new StatementProxy<>((Statement)statement,sql);
         result = constructor.newInstance(new Object[] { statementProxy });
         statementProxy.setActualProxy(result);
         statementProxy.setConnection(proxy);

==================================================
